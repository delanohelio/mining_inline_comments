{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNDU5MzU4", "number": 9917, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo0NTowMVrOEIQUgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDo1NzowMFrOEPFDgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDkxNDU4OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/dev/IsolatedDevModeMain.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo0NTowMVrOGoGtVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODozMjozM1rOGt0ZrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwNjEzNA==", "bodyText": "Not a big fan of watchers, it's slightly different from the hot reload approach. @stuartwdouglas WDYT?", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r444706134", "createdAt": "2020-06-24T07:45:01Z", "author": {"login": "cescoffier"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/dev/IsolatedDevModeMain.java", "diffHunk": "@@ -126,6 +142,42 @@ public void accept(Integer integer) {\n         }\n     }\n \n+    private void startCodeGenWatcher(QuarkusClassLoader classLoader, List<CodeGenData> codeGens) {\n+        Executors.newSingleThreadExecutor().execute(\n+                () -> {\n+                    Collection<FSWatchUtil.Watcher> watchers = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67035cce698f46b8e03be9987d2f649efa47680d"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1NzA1Mg==", "bodyText": "it's actively watching for file changes. That's to enable users to use the changes right away in their code (without doing a request to the app first).", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r444857052", "createdAt": "2020-06-24T12:27:58Z", "author": {"login": "michalszynkiewicz"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/dev/IsolatedDevModeMain.java", "diffHunk": "@@ -126,6 +142,42 @@ public void accept(Integer integer) {\n         }\n     }\n \n+    private void startCodeGenWatcher(QuarkusClassLoader classLoader, List<CodeGenData> codeGens) {\n+        Executors.newSingleThreadExecutor().execute(\n+                () -> {\n+                    Collection<FSWatchUtil.Watcher> watchers = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwNjEzNA=="}, "originalCommit": {"oid": "67035cce698f46b8e03be9987d2f649efa47680d"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI3NDQ2OQ==", "bodyText": "We don't want to use the normal hot reload approach here. Otherwise you need to reload your browser for the generated source code to be generated, go back to your IDE to actually use the generated source, then back to your browser to see the changes.", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r445274469", "createdAt": "2020-06-25T02:33:10Z", "author": {"login": "stuartwdouglas"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/dev/IsolatedDevModeMain.java", "diffHunk": "@@ -126,6 +142,42 @@ public void accept(Integer integer) {\n         }\n     }\n \n+    private void startCodeGenWatcher(QuarkusClassLoader classLoader, List<CodeGenData> codeGens) {\n+        Executors.newSingleThreadExecutor().execute(\n+                () -> {\n+                    Collection<FSWatchUtil.Watcher> watchers = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwNjEzNA=="}, "originalCommit": {"oid": "67035cce698f46b8e03be9987d2f649efa47680d"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY5NzY0NQ==", "bodyText": "Make sense.", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r450697645", "createdAt": "2020-07-07T08:32:33Z", "author": {"login": "cescoffier"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/dev/IsolatedDevModeMain.java", "diffHunk": "@@ -126,6 +142,42 @@ public void accept(Integer integer) {\n         }\n     }\n \n+    private void startCodeGenWatcher(QuarkusClassLoader classLoader, List<CodeGenData> codeGens) {\n+        Executors.newSingleThreadExecutor().execute(\n+                () -> {\n+                    Collection<FSWatchUtil.Watcher> watchers = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwNjEzNA=="}, "originalCommit": {"oid": "67035cce698f46b8e03be9987d2f649efa47680d"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDkyNTk5OnYy", "diffSide": "RIGHT", "path": "devtools/maven/src/main/java/io/quarkus/maven/CodeGenMojo.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo0ODo0MFrOGoG02Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzozODo0NlrOGub1cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwODA1Nw==", "bodyText": "Wondering about the default phase.\nDo we want it to run late or early? Early: generate sources is fine, late: process resources might be better.", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r444708057", "createdAt": "2020-06-24T07:48:40Z", "author": {"login": "cescoffier"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/CodeGenMojo.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package io.quarkus.maven;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.function.Consumer;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.plugin.AbstractMojo;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.eclipse.aether.RepositorySystem;\n+import org.eclipse.aether.RepositorySystemSession;\n+import org.eclipse.aether.repository.RemoteRepository;\n+\n+import io.quarkus.bootstrap.app.CuratedApplication;\n+import io.quarkus.bootstrap.app.QuarkusBootstrap;\n+import io.quarkus.bootstrap.classloading.QuarkusClassLoader;\n+import io.quarkus.bootstrap.model.AppArtifact;\n+import io.quarkus.bootstrap.prebuild.CodeGenFailureException;\n+import io.quarkus.bootstrap.resolver.maven.MavenArtifactResolver;\n+import io.quarkus.deployment.CodeGenerator;\n+import io.quarkus.deployment.codegen.CodeGenData;\n+\n+@Mojo(name = \"prepare\", defaultPhase = LifecyclePhase.GENERATE_SOURCES, requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67035cce698f46b8e03be9987d2f649efa47680d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyODY3OA==", "bodyText": "what would be the benefit of running it later?\nIt's literally for generating sources, that's why I used this phase...", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r451128678", "createdAt": "2020-07-07T20:37:41Z", "author": {"login": "michalszynkiewicz"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/CodeGenMojo.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package io.quarkus.maven;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.function.Consumer;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.plugin.AbstractMojo;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.eclipse.aether.RepositorySystem;\n+import org.eclipse.aether.RepositorySystemSession;\n+import org.eclipse.aether.repository.RemoteRepository;\n+\n+import io.quarkus.bootstrap.app.CuratedApplication;\n+import io.quarkus.bootstrap.app.QuarkusBootstrap;\n+import io.quarkus.bootstrap.classloading.QuarkusClassLoader;\n+import io.quarkus.bootstrap.model.AppArtifact;\n+import io.quarkus.bootstrap.prebuild.CodeGenFailureException;\n+import io.quarkus.bootstrap.resolver.maven.MavenArtifactResolver;\n+import io.quarkus.deployment.CodeGenerator;\n+import io.quarkus.deployment.codegen.CodeGenData;\n+\n+@Mojo(name = \"prepare\", defaultPhase = LifecyclePhase.GENERATE_SOURCES, requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwODA1Nw=="}, "originalCommit": {"oid": "67035cce698f46b8e03be9987d2f649efa47680d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM0MzcyOQ==", "bodyText": "It makes sense, I just wanted to double-check.", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r451343729", "createdAt": "2020-07-08T07:38:46Z", "author": {"login": "cescoffier"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/CodeGenMojo.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package io.quarkus.maven;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.function.Consumer;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.plugin.AbstractMojo;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.eclipse.aether.RepositorySystem;\n+import org.eclipse.aether.RepositorySystemSession;\n+import org.eclipse.aether.repository.RemoteRepository;\n+\n+import io.quarkus.bootstrap.app.CuratedApplication;\n+import io.quarkus.bootstrap.app.QuarkusBootstrap;\n+import io.quarkus.bootstrap.classloading.QuarkusClassLoader;\n+import io.quarkus.bootstrap.model.AppArtifact;\n+import io.quarkus.bootstrap.prebuild.CodeGenFailureException;\n+import io.quarkus.bootstrap.resolver.maven.MavenArtifactResolver;\n+import io.quarkus.deployment.CodeGenerator;\n+import io.quarkus.deployment.codegen.CodeGenData;\n+\n+@Mojo(name = \"prepare\", defaultPhase = LifecyclePhase.GENERATE_SOURCES, requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwODA1Nw=="}, "originalCommit": {"oid": "67035cce698f46b8e03be9987d2f649efa47680d"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDkzMjUyOnYy", "diffSide": "RIGHT", "path": "extensions/grpc/protoc/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1MDo0NlrOGoG5Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODowNzozOFrOGtzi_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwOTEyNw==", "bodyText": "What's the reason for building a fat jar?", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r444709127", "createdAt": "2020-06-24T07:50:46Z", "author": {"login": "cescoffier"}, "path": "extensions/grpc/protoc/pom.xml", "diffHunk": "@@ -25,4 +25,25 @@\n             </exclusions>\n         </dependency>\n     </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67035cce698f46b8e03be9987d2f649efa47680d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxNDc5Nw==", "bodyText": "For protoc, I need to construct a single executable for this plugin. I can't even do java -jar ..., so I'm wrapping it in a script: https://github.com/michalszynkiewicz/quarkus/blob/code-gen-grpc/extensions/grpc/deployment/src/main/java/io/quarkus/grpc/deployment/GrpcCodeGen.java#L166\nHaving the plugin as a fat jar simplifies construction of the script (no need to gather classpath). @aloubyansky suggested this approach", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r444714797", "createdAt": "2020-06-24T08:00:44Z", "author": {"login": "michalszynkiewicz"}, "path": "extensions/grpc/protoc/pom.xml", "diffHunk": "@@ -25,4 +25,25 @@\n             </exclusions>\n         </dependency>\n     </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwOTEyNw=="}, "originalCommit": {"oid": "67035cce698f46b8e03be9987d2f649efa47680d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY4MzY0Nw==", "bodyText": "The second commit still shades the jar but deploys with shaded classifier. Otherwise devmode tests for the grpc/deployment module had problems finding the artifact.", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r450683647", "createdAt": "2020-07-07T08:07:38Z", "author": {"login": "michalszynkiewicz"}, "path": "extensions/grpc/protoc/pom.xml", "diffHunk": "@@ -25,4 +25,25 @@\n             </exclusions>\n         </dependency>\n     </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwOTEyNw=="}, "originalCommit": {"oid": "67035cce698f46b8e03be9987d2f649efa47680d"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjg3ODU5OnYy", "diffSide": "RIGHT", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/AppModelGradleResolver.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMTo1NjoxNlrOGuRCCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMDoyMzoxOFrOGu37cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE2NjcyOQ==", "bodyText": "Won't this include an exe file into the lib?", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r451166729", "createdAt": "2020-07-07T21:56:16Z", "author": {"login": "aloubyansky"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/AppModelGradleResolver.java", "diffHunk": "@@ -339,7 +344,7 @@ private void collectExtensionDeps(Set<ResolvedDependency> resolvedDeps,\n      * A {@link ResolvedArtifact} is valid if it's a JAR or a directory\n      */\n     private static boolean isDependency(ResolvedArtifact a) {\n-        return BootstrapConstants.JAR.equalsIgnoreCase(a.getExtension()) ||\n+        return BootstrapConstants.JAR.equalsIgnoreCase(a.getExtension()) || \"exe\".equalsIgnoreCase(a.getExtension()) ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6713217f451fa1a224c063ebf2cb23720f770cb5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMyMjA5Nw==", "bodyText": "Do you mean lib directory used in runtime?\nWithout it, artifacts with packaging exe were not among the dependencies.\nAnd this is how protoc is shipped.", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r451322097", "createdAt": "2020-07-08T06:55:22Z", "author": {"login": "michalszynkiewicz"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/AppModelGradleResolver.java", "diffHunk": "@@ -339,7 +344,7 @@ private void collectExtensionDeps(Set<ResolvedDependency> resolvedDeps,\n      * A {@link ResolvedArtifact} is valid if it's a JAR or a directory\n      */\n     private static boolean isDependency(ResolvedArtifact a) {\n-        return BootstrapConstants.JAR.equalsIgnoreCase(a.getExtension()) ||\n+        return BootstrapConstants.JAR.equalsIgnoreCase(a.getExtension()) || \"exe\".equalsIgnoreCase(a.getExtension()) ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE2NjcyOQ=="}, "originalCommit": {"oid": "6713217f451fa1a224c063ebf2cb23720f770cb5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM2NTc5MA==", "bodyText": "I checked integration-tests/gradle/build/resources/test/grpc-multi-module-project/application/build/lib where the grpc code gen is used and I don't see the exe files there.\nIsn't it the same as deployment jars?", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r451365790", "createdAt": "2020-07-08T08:17:36Z", "author": {"login": "michalszynkiewicz"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/AppModelGradleResolver.java", "diffHunk": "@@ -339,7 +344,7 @@ private void collectExtensionDeps(Set<ResolvedDependency> resolvedDeps,\n      * A {@link ResolvedArtifact} is valid if it's a JAR or a directory\n      */\n     private static boolean isDependency(ResolvedArtifact a) {\n-        return BootstrapConstants.JAR.equalsIgnoreCase(a.getExtension()) ||\n+        return BootstrapConstants.JAR.equalsIgnoreCase(a.getExtension()) || \"exe\".equalsIgnoreCase(a.getExtension()) ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE2NjcyOQ=="}, "originalCommit": {"oid": "6713217f451fa1a224c063ebf2cb23720f770cb5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwNDAxOA==", "bodyText": "Ok", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r451804018", "createdAt": "2020-07-08T20:23:18Z", "author": {"login": "aloubyansky"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/AppModelGradleResolver.java", "diffHunk": "@@ -339,7 +344,7 @@ private void collectExtensionDeps(Set<ResolvedDependency> resolvedDeps,\n      * A {@link ResolvedArtifact} is valid if it's a JAR or a directory\n      */\n     private static boolean isDependency(ResolvedArtifact a) {\n-        return BootstrapConstants.JAR.equalsIgnoreCase(a.getExtension()) ||\n+        return BootstrapConstants.JAR.equalsIgnoreCase(a.getExtension()) || \"exe\".equalsIgnoreCase(a.getExtension()) ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE2NjcyOQ=="}, "originalCommit": {"oid": "6713217f451fa1a224c063ebf2cb23720f770cb5"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjg5NjUyOnYy", "diffSide": "RIGHT", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjowMjozNFrOGuRM4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMDowNDoyOFrOGuhEqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE2OTUwNA==", "bodyText": "If you look below you'll see SourceSet's. That'll be the proper way to get the sources dirs.", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r451169504", "createdAt": "2020-07-07T22:02:34Z", "author": {"login": "aloubyansky"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPlugin.java", "diffHunk": "@@ -112,6 +121,22 @@ public void execute(Task test) {\n                 JavaPlugin.class,\n                 javaPlugin -> {\n                     project.afterEvaluate(this::afterEvaluate);\n+                    JavaCompile compileJavaTask = (JavaCompile) tasks.getByName(JavaPlugin.COMPILE_JAVA_TASK_NAME);\n+                    compileJavaTask.mustRunAfter(quarkusPrepare);\n+                    quarkusPrepare.setSourceRegistrar(compileJavaTask::source);\n+\n+                    try {\n+                        // TODO: support kotlin\n+                        tasks.getByName(\"compileTestKotlin\");\n+                    } catch (UnknownTaskException noKotlin) {\n+                        JavaCompile compileTestJavaTask = (JavaCompile) tasks.getByName(JavaPlugin.COMPILE_TEST_JAVA_TASK_NAME);\n+                        compileTestJavaTask.dependsOn(quarkusPrepareTests);\n+                        quarkusPrepareTests.setSourceRegistrar(compileTestJavaTask::source);\n+                    }\n+\n+                    Path projectPath = project.getProjectDir().toPath();\n+                    quarkusPrepare.setSourcesDirectory(projectPath.resolve(\"src\").resolve(\"main\"));\n+                    quarkusPrepareTests.setSourcesDirectory(projectPath.resolve(\"src\").resolve(\"test\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6713217f451fa1a224c063ebf2cb23720f770cb5"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQyOTU0Nw==", "bodyText": "parent of java's source works too :)", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r451429547", "createdAt": "2020-07-08T10:04:28Z", "author": {"login": "michalszynkiewicz"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPlugin.java", "diffHunk": "@@ -112,6 +121,22 @@ public void execute(Task test) {\n                 JavaPlugin.class,\n                 javaPlugin -> {\n                     project.afterEvaluate(this::afterEvaluate);\n+                    JavaCompile compileJavaTask = (JavaCompile) tasks.getByName(JavaPlugin.COMPILE_JAVA_TASK_NAME);\n+                    compileJavaTask.mustRunAfter(quarkusPrepare);\n+                    quarkusPrepare.setSourceRegistrar(compileJavaTask::source);\n+\n+                    try {\n+                        // TODO: support kotlin\n+                        tasks.getByName(\"compileTestKotlin\");\n+                    } catch (UnknownTaskException noKotlin) {\n+                        JavaCompile compileTestJavaTask = (JavaCompile) tasks.getByName(JavaPlugin.COMPILE_TEST_JAVA_TASK_NAME);\n+                        compileTestJavaTask.dependsOn(quarkusPrepareTests);\n+                        quarkusPrepareTests.setSourceRegistrar(compileTestJavaTask::source);\n+                    }\n+\n+                    Path projectPath = project.getProjectDir().toPath();\n+                    quarkusPrepare.setSourcesDirectory(projectPath.resolve(\"src\").resolve(\"main\"));\n+                    quarkusPrepareTests.setSourcesDirectory(projectPath.resolve(\"src\").resolve(\"test\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE2OTUwNA=="}, "originalCommit": {"oid": "6713217f451fa1a224c063ebf2cb23720f770cb5"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjkwOTU0OnYy", "diffSide": "RIGHT", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusDev.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjowNzo0MFrOGuRUoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNTowMjozNlrOGusXaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3MTQ4OQ==", "bodyText": "I guess you should probably be using/checking sourcePaths. Most of the time it will be a singleton set.", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r451171489", "createdAt": "2020-07-07T22:07:40Z", "author": {"login": "aloubyansky"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusDev.java", "diffHunk": "@@ -457,7 +457,10 @@ private void addLocalProject(Project project, DevModeContext context, Set<AppArt\n                 sourcePaths,\n                 classesDir,\n                 resourcesSrcDir.getAbsolutePath(),\n-                resourcesOutputPath);\n+                resourcesOutputPath,\n+                Paths.get(\"src\", \"main\").toAbsolutePath().toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6713217f451fa1a224c063ebf2cb23720f770cb5"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYxNDU2OA==", "bodyText": "will do", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r451614568", "createdAt": "2020-07-08T15:02:36Z", "author": {"login": "michalszynkiewicz"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusDev.java", "diffHunk": "@@ -457,7 +457,10 @@ private void addLocalProject(Project project, DevModeContext context, Set<AppArt\n                 sourcePaths,\n                 classesDir,\n                 resourcesSrcDir.getAbsolutePath(),\n-                resourcesOutputPath);\n+                resourcesOutputPath,\n+                Paths.get(\"src\", \"main\").toAbsolutePath().toString(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3MTQ4OQ=="}, "originalCommit": {"oid": "6713217f451fa1a224c063ebf2cb23720f770cb5"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjkxNDUyOnYy", "diffSide": "RIGHT", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusPrepare.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjowOTo0NVrOGuRXsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwODowNToxNVrOGucwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3MjI3Mg==", "bodyText": "Was this necessary for dev mode? This is something to be avoided.", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r451172272", "createdAt": "2020-07-07T22:09:45Z", "author": {"login": "aloubyansky"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusPrepare.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package io.quarkus.gradle.tasks;\n+\n+import java.io.File;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.function.Consumer;\n+\n+import org.gradle.api.GradleException;\n+import org.gradle.api.plugins.Convention;\n+import org.gradle.api.plugins.JavaPluginConvention;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import io.quarkus.bootstrap.BootstrapException;\n+import io.quarkus.bootstrap.app.CuratedApplication;\n+import io.quarkus.bootstrap.app.QuarkusBootstrap;\n+import io.quarkus.bootstrap.classloading.QuarkusClassLoader;\n+import io.quarkus.bootstrap.model.AppArtifact;\n+import io.quarkus.bootstrap.resolver.AppModelResolver;\n+import io.quarkus.deployment.CodeGenerator;\n+\n+public class QuarkusPrepare extends QuarkusTask {\n+\n+    public static final String INIT_AND_RUN = \"initAndRun\";\n+    private Path sourcesDirectory;\n+    private Consumer<Path> sourceRegistrar;\n+    private boolean test = false;\n+\n+    public QuarkusPrepare() {\n+        super(\"Quarkus performs pre-build preparations, such as sources generation\");\n+    }\n+\n+    @TaskAction\n+    public void prepareQuarkus() {\n+        getLogger().lifecycle(\"preparing quarkus application\");\n+\n+        final AppArtifact appArtifact = extension().getAppArtifact();\n+        appArtifact.setPaths(QuarkusGradleUtils.getOutputPaths(getProject()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6713217f451fa1a224c063ebf2cb23720f770cb5"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM1ODc2OQ==", "bodyText": "I ran the tests I have and they work without it. I'm dropping it.", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r451358769", "createdAt": "2020-07-08T08:05:15Z", "author": {"login": "michalszynkiewicz"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusPrepare.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package io.quarkus.gradle.tasks;\n+\n+import java.io.File;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.function.Consumer;\n+\n+import org.gradle.api.GradleException;\n+import org.gradle.api.plugins.Convention;\n+import org.gradle.api.plugins.JavaPluginConvention;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import io.quarkus.bootstrap.BootstrapException;\n+import io.quarkus.bootstrap.app.CuratedApplication;\n+import io.quarkus.bootstrap.app.QuarkusBootstrap;\n+import io.quarkus.bootstrap.classloading.QuarkusClassLoader;\n+import io.quarkus.bootstrap.model.AppArtifact;\n+import io.quarkus.bootstrap.resolver.AppModelResolver;\n+import io.quarkus.deployment.CodeGenerator;\n+\n+public class QuarkusPrepare extends QuarkusTask {\n+\n+    public static final String INIT_AND_RUN = \"initAndRun\";\n+    private Path sourcesDirectory;\n+    private Consumer<Path> sourceRegistrar;\n+    private boolean test = false;\n+\n+    public QuarkusPrepare() {\n+        super(\"Quarkus performs pre-build preparations, such as sources generation\");\n+    }\n+\n+    @TaskAction\n+    public void prepareQuarkus() {\n+        getLogger().lifecycle(\"preparing quarkus application\");\n+\n+        final AppArtifact appArtifact = extension().getAppArtifact();\n+        appArtifact.setPaths(QuarkusGradleUtils.getOutputPaths(getProject()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3MjI3Mg=="}, "originalCommit": {"oid": "6713217f451fa1a224c063ebf2cb23720f770cb5"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjk0MDIxOnYy", "diffSide": "RIGHT", "path": "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/LocalProject.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjoyMDowNVrOGuRnVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjozMzo1NlrOGuZ_cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3NjI3Ng==", "bodyText": "This looks like a duplicate of getSourcesSourcesDir()?", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r451176276", "createdAt": "2020-07-07T22:20:05Z", "author": {"login": "aloubyansky"}, "path": "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/LocalProject.java", "diffHunk": "@@ -249,6 +253,11 @@ public Path getSourcesSourcesDir() {\n         return resolveRelativeToBaseDir(srcDir, \"src/main/java\");\n     }\n \n+    public Path getSourcesDir() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6713217f451fa1a224c063ebf2cb23720f770cb5"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMxMzUyMQ==", "bodyText": "getSorucesSourcesDir returns the path to src/main/java and this thing returns the path to src/main", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r451313521", "createdAt": "2020-07-08T06:33:56Z", "author": {"login": "michalszynkiewicz"}, "path": "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/LocalProject.java", "diffHunk": "@@ -249,6 +253,11 @@ public Path getSourcesSourcesDir() {\n         return resolveRelativeToBaseDir(srcDir, \"src/main/java\");\n     }\n \n+    public Path getSourcesDir() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3NjI3Ng=="}, "originalCommit": {"oid": "6713217f451fa1a224c063ebf2cb23720f770cb5"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjk0NDI0OnYy", "diffSide": "RIGHT", "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/app/CuratedApplication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjoyMTo0NlrOGuRp8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjo1MDo0OFrOGuaZHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3Njk0NA==", "bodyText": "Is this actually used anywhere?", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r451176944", "createdAt": "2020-07-07T22:21:46Z", "author": {"login": "aloubyansky"}, "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/app/CuratedApplication.java", "diffHunk": "@@ -302,4 +304,8 @@ public void close() {\n             baseRuntimeClassLoader.close();\n         }\n     }\n+\n+    public AppModelResolver getAppModelResolver() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6713217f451fa1a224c063ebf2cb23720f770cb5"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMyMDA5Mw==", "bodyText": "no, it's a left-over, I will remove it", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r451320093", "createdAt": "2020-07-08T06:50:48Z", "author": {"login": "michalszynkiewicz"}, "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/app/CuratedApplication.java", "diffHunk": "@@ -302,4 +304,8 @@ public void close() {\n             baseRuntimeClassLoader.close();\n         }\n     }\n+\n+    public AppModelResolver getAppModelResolver() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3Njk0NA=="}, "originalCommit": {"oid": "6713217f451fa1a224c063ebf2cb23720f770cb5"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODI5OTExOnYy", "diffSide": "RIGHT", "path": "devtools/maven/src/main/java/io/quarkus/maven/CodeGenMojo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzoxOTo1NFrOGx9vDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNToxNTozOVrOGyDBvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0NDg3Ng==", "bodyText": "Should we be more explicit in this message? We only skip the code gen part right?", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455044876", "createdAt": "2020-07-15T13:19:54Z", "author": {"login": "cescoffier"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/CodeGenMojo.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package io.quarkus.maven;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.function.Consumer;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.plugin.AbstractMojo;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.eclipse.aether.RepositorySystem;\n+import org.eclipse.aether.RepositorySystemSession;\n+import org.eclipse.aether.repository.RemoteRepository;\n+\n+import io.quarkus.bootstrap.app.CuratedApplication;\n+import io.quarkus.bootstrap.app.QuarkusBootstrap;\n+import io.quarkus.bootstrap.classloading.QuarkusClassLoader;\n+import io.quarkus.bootstrap.model.AppArtifact;\n+import io.quarkus.bootstrap.prebuild.CodeGenFailureException;\n+import io.quarkus.bootstrap.resolver.maven.MavenArtifactResolver;\n+import io.quarkus.deployment.CodeGenerator;\n+import io.quarkus.deployment.codegen.CodeGenData;\n+\n+@Mojo(name = \"prepare\", defaultPhase = LifecyclePhase.GENERATE_SOURCES, requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+public class CodeGenMojo extends AbstractMojo {\n+\n+    @Parameter(defaultValue = \"${project.build.directory}\")\n+    private File buildDir;\n+\n+    @Parameter(defaultValue = \"${project}\", readonly = true, required = true)\n+    protected MavenProject project;\n+\n+    @Component\n+    private RepositorySystem repoSystem;\n+\n+    @Parameter(defaultValue = \"${repositorySystemSession}\", readonly = true)\n+    private RepositorySystemSession repoSession;\n+\n+    @Parameter(defaultValue = \"${project.remoteProjectRepositories}\", readonly = true, required = true)\n+    private List<RemoteRepository> repos;\n+\n+    /** Skip the execution of this mojo */\n+    @Parameter(defaultValue = \"false\", property = \"quarkus.prepare.skip\")\n+    private boolean skipSourceGeneration = false;\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        String projectDir = project.getBasedir().getAbsolutePath();\n+        Path sourcesDir = Paths.get(projectDir, \"src\", \"main\");\n+        doExecute(sourcesDir, path -> project.addCompileSourceRoot(path.toString()), false);\n+    }\n+\n+    void doExecute(Path sourcesDir,\n+            Consumer<Path> sourceRegistrar,\n+            boolean test) throws MojoFailureException, MojoExecutionException {\n+        if (project.getPackaging().equals(\"pom\")) {\n+            getLog().info(\"Type of the artifact is POM, skipping build goal\");\n+            return;\n+        }\n+        if (skipSourceGeneration) {\n+            getLog().info(\"Skipping Quarkus build\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b78b2b1aa09349850879fcc6daa72123097678"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEzMTU4Mw==", "bodyText": "yes, I'll fix this", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455131583", "createdAt": "2020-07-15T15:15:39Z", "author": {"login": "michalszynkiewicz"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/CodeGenMojo.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package io.quarkus.maven;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.function.Consumer;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.plugin.AbstractMojo;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.eclipse.aether.RepositorySystem;\n+import org.eclipse.aether.RepositorySystemSession;\n+import org.eclipse.aether.repository.RemoteRepository;\n+\n+import io.quarkus.bootstrap.app.CuratedApplication;\n+import io.quarkus.bootstrap.app.QuarkusBootstrap;\n+import io.quarkus.bootstrap.classloading.QuarkusClassLoader;\n+import io.quarkus.bootstrap.model.AppArtifact;\n+import io.quarkus.bootstrap.prebuild.CodeGenFailureException;\n+import io.quarkus.bootstrap.resolver.maven.MavenArtifactResolver;\n+import io.quarkus.deployment.CodeGenerator;\n+import io.quarkus.deployment.codegen.CodeGenData;\n+\n+@Mojo(name = \"prepare\", defaultPhase = LifecyclePhase.GENERATE_SOURCES, requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+public class CodeGenMojo extends AbstractMojo {\n+\n+    @Parameter(defaultValue = \"${project.build.directory}\")\n+    private File buildDir;\n+\n+    @Parameter(defaultValue = \"${project}\", readonly = true, required = true)\n+    protected MavenProject project;\n+\n+    @Component\n+    private RepositorySystem repoSystem;\n+\n+    @Parameter(defaultValue = \"${repositorySystemSession}\", readonly = true)\n+    private RepositorySystemSession repoSession;\n+\n+    @Parameter(defaultValue = \"${project.remoteProjectRepositories}\", readonly = true, required = true)\n+    private List<RemoteRepository> repos;\n+\n+    /** Skip the execution of this mojo */\n+    @Parameter(defaultValue = \"false\", property = \"quarkus.prepare.skip\")\n+    private boolean skipSourceGeneration = false;\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        String projectDir = project.getBasedir().getAbsolutePath();\n+        Path sourcesDir = Paths.get(projectDir, \"src\", \"main\");\n+        doExecute(sourcesDir, path -> project.addCompileSourceRoot(path.toString()), false);\n+    }\n+\n+    void doExecute(Path sourcesDir,\n+            Consumer<Path> sourceRegistrar,\n+            boolean test) throws MojoFailureException, MojoExecutionException {\n+        if (project.getPackaging().equals(\"pom\")) {\n+            getLog().info(\"Type of the artifact is POM, skipping build goal\");\n+            return;\n+        }\n+        if (skipSourceGeneration) {\n+            getLog().info(\"Skipping Quarkus build\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0NDg3Ng=="}, "originalCommit": {"oid": "28b78b2b1aa09349850879fcc6daa72123097678"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODMwNjY1OnYy", "diffSide": "RIGHT", "path": "extensions/grpc/deployment/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzoyMToyNlrOGx9zkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDoyNDoxN1rOGyAm8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0NjAzMg==", "bodyText": "Wouldn't it download all the variants even if you need only the one for the current OS/Arch?\nMaybe we can resolve it programmatically.", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455046032", "createdAt": "2020-07-15T13:21:26Z", "author": {"login": "cescoffier"}, "path": "extensions/grpc/deployment/pom.xml", "diffHunk": "@@ -39,6 +43,98 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-smallrye-health-spi</artifactId>\n         </dependency>\n+\n+        <dependency>\n+            <groupId>com.google.protobuf</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b78b2b1aa09349850879fcc6daa72123097678"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA5MTk1NQ==", "bodyText": "I started by doing it dynamically but was advised otherwise for simplicity.\nAFAIR I had problems making dynamic resolution work with Gradle.", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455091955", "createdAt": "2020-07-15T14:24:17Z", "author": {"login": "michalszynkiewicz"}, "path": "extensions/grpc/deployment/pom.xml", "diffHunk": "@@ -39,6 +43,98 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-smallrye-health-spi</artifactId>\n         </dependency>\n+\n+        <dependency>\n+            <groupId>com.google.protobuf</groupId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0NjAzMg=="}, "originalCommit": {"oid": "28b78b2b1aa09349850879fcc6daa72123097678"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODMxMDg5OnYy", "diffSide": "RIGHT", "path": "extensions/grpc/deployment/src/test/java/io/quarkus/grpc/server/devmode/DevModeTestRestResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzoyMjoyMlrOGx91_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDoyNjowMlrOGyAsrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0NjY1NA==", "bodyText": "Can you remove the class javadoc?", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455046654", "createdAt": "2020-07-15T13:22:22Z", "author": {"login": "cescoffier"}, "path": "extensions/grpc/deployment/src/test/java/io/quarkus/grpc/server/devmode/DevModeTestRestResource.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package io.quarkus.grpc.server.devmode;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+/**\n+ * @author Michal Szynkiewicz, michal.l.szynkiewicz@gmail.com", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b78b2b1aa09349850879fcc6daa72123097678"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA5MzQyMQ==", "bodyText": "stuff copied from quarkus-grpc where I didn't have adding headers disabled, will do", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455093421", "createdAt": "2020-07-15T14:26:02Z", "author": {"login": "michalszynkiewicz"}, "path": "extensions/grpc/deployment/src/test/java/io/quarkus/grpc/server/devmode/DevModeTestRestResource.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package io.quarkus.grpc.server.devmode;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+/**\n+ * @author Michal Szynkiewicz, michal.l.szynkiewicz@gmail.com", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0NjY1NA=="}, "originalCommit": {"oid": "28b78b2b1aa09349850879fcc6daa72123097678"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODMxMTY5OnYy", "diffSide": "RIGHT", "path": "extensions/grpc/deployment/src/test/java/io/quarkus/grpc/server/devmode/DevModeTestService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzoyMjozM1rOGx92gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzoyMjozM1rOGx92gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0Njc4Ng==", "bodyText": "Can you remove this javadoc block?", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455046786", "createdAt": "2020-07-15T13:22:33Z", "author": {"login": "cescoffier"}, "path": "extensions/grpc/deployment/src/test/java/io/quarkus/grpc/server/devmode/DevModeTestService.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package io.quarkus.grpc.server.devmode;\n+\n+import javax.inject.Singleton;\n+\n+import devmodetest.v1.Devmodetest;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.stub.StreamObserver;\n+\n+/**\n+ * @author Michal Szynkiewicz, michal.l.szynkiewicz@gmail.com\n+ *         <br>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b78b2b1aa09349850879fcc6daa72123097678"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODMxMjM0OnYy", "diffSide": "RIGHT", "path": "extensions/grpc/deployment/src/test/java/io/quarkus/grpc/server/devmode/DevModeTestStreamService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzoyMjo0MlrOGx927Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzoyMjo0MlrOGx927Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0Njg5Mw==", "bodyText": "Same :-D", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455046893", "createdAt": "2020-07-15T13:22:42Z", "author": {"login": "cescoffier"}, "path": "extensions/grpc/deployment/src/test/java/io/quarkus/grpc/server/devmode/DevModeTestStreamService.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package io.quarkus.grpc.server.devmode;\n+\n+import java.time.Duration;\n+\n+import javax.inject.Singleton;\n+\n+import com.example.test.MutinyStreamsGrpc;\n+import com.example.test.StreamsOuterClass.Item;\n+\n+import io.smallrye.mutiny.Multi;\n+\n+/**\n+ * @author Michal Szynkiewicz, michal.l.szynkiewicz@gmail.com\n+ *         <br>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b78b2b1aa09349850879fcc6daa72123097678"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODMxMzE1OnYy", "diffSide": "RIGHT", "path": "extensions/grpc/deployment/src/test/java/io/quarkus/grpc/server/devmode/GrpcDevModeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzoyMjo1MlrOGx93YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNzo1MjozMlrOGyJSdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0NzAwOQ==", "bodyText": "Same :-D", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455047009", "createdAt": "2020-07-15T13:22:52Z", "author": {"login": "cescoffier"}, "path": "extensions/grpc/deployment/src/test/java/io/quarkus/grpc/server/devmode/GrpcDevModeTest.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package io.quarkus.grpc.server.devmode;\n+\n+import static io.restassured.RestAssured.when;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.awaitility.Awaitility;\n+import org.hamcrest.Matchers;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.example.test.MutinyStreamsGrpc;\n+import com.example.test.StreamsGrpc;\n+import com.example.test.StreamsOuterClass;\n+\n+import devmodetest.v1.Devmodetest;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.quarkus.test.QuarkusDevModeTest;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.subscription.Subscribers;\n+\n+/**\n+ * @author Michal Szynkiewicz, michal.l.szynkiewicz@gmail.com\n+ *         <br>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b78b2b1aa09349850879fcc6daa72123097678"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIzNDE2NA==", "bodyText": "done", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455234164", "createdAt": "2020-07-15T17:52:32Z", "author": {"login": "michalszynkiewicz"}, "path": "extensions/grpc/deployment/src/test/java/io/quarkus/grpc/server/devmode/GrpcDevModeTest.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package io.quarkus.grpc.server.devmode;\n+\n+import static io.restassured.RestAssured.when;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.awaitility.Awaitility;\n+import org.hamcrest.Matchers;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.example.test.MutinyStreamsGrpc;\n+import com.example.test.StreamsGrpc;\n+import com.example.test.StreamsOuterClass;\n+\n+import devmodetest.v1.Devmodetest;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.quarkus.test.QuarkusDevModeTest;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.subscription.Subscribers;\n+\n+/**\n+ * @author Michal Szynkiewicz, michal.l.szynkiewicz@gmail.com\n+ *         <br>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0NzAwOQ=="}, "originalCommit": {"oid": "28b78b2b1aa09349850879fcc6daa72123097678"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODMxOTg5OnYy", "diffSide": "RIGHT", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/devmode/GrpcDevModeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzoyNDoyMlrOGx97fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDoyNTozM1rOGyArEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0ODA2Mw==", "bodyText": "This should be removed.", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455048063", "createdAt": "2020-07-15T13:24:22Z", "author": {"login": "cescoffier"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/devmode/GrpcDevModeTest.java", "diffHunk": "@@ -0,0 +1,24 @@\n+//package io.quarkus.gradle.devmode;\n+//\n+//import static org.assertj.core.api.Assertions.assertThat;\n+//\n+//import com.google.common.collect.ImmutableMap;\n+// // TODO: to be uncommented with #10631", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b78b2b1aa09349850879fcc6daa72123097678"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA5MzAxMA==", "bodyText": "I'd rather keep it and uncomment it in #10631, if that's okay.", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455093010", "createdAt": "2020-07-15T14:25:33Z", "author": {"login": "michalszynkiewicz"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/devmode/GrpcDevModeTest.java", "diffHunk": "@@ -0,0 +1,24 @@\n+//package io.quarkus.gradle.devmode;\n+//\n+//import static org.assertj.core.api.Assertions.assertThat;\n+//\n+//import com.google.common.collect.ImmutableMap;\n+// // TODO: to be uncommented with #10631", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0ODA2Mw=="}, "originalCommit": {"oid": "28b78b2b1aa09349850879fcc6daa72123097678"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjQ0NTM3OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/CodeGenProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDo1MDoxM1rOGylmRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDo1MDoxM1rOGylmRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY5Nzk5MA==", "bodyText": "This method does not return a collection", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455697990", "createdAt": "2020-07-16T10:50:13Z", "author": {"login": "ppalaga"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/CodeGenProvider.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package io.quarkus.deployment;\n+\n+import org.wildfly.common.annotation.NotNull;\n+\n+import io.quarkus.bootstrap.prebuild.CodeGenException;\n+\n+/**\n+ * Service providers for this interfaces are triggered during generate-sources phase of build of Quarkus applications\n+ */\n+public interface CodeGenProvider {\n+    /**\n+     *\n+     * @return unique name of the code gen provider, will correspond to the directory in <code>generated-sources</code>\n+     */\n+    @NotNull\n+    String providerId();\n+\n+    /**\n+     * File extensions that CodeGenProvider will generate code from\n+     *\n+     * @return collection of file extensions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba16068f6b8f519fa42f236f03c021d135759b45"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjQ0ODA5OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/CodeGenerator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDo1MDo1OFrOGyln2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDo1MTo1NlrOGyuu3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY5ODM5Mw==", "bodyText": "What is the purpose of this class?", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455698393", "createdAt": "2020-07-16T10:50:58Z", "author": {"login": "ppalaga"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/CodeGenerator.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package io.quarkus.deployment;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import io.quarkus.bootstrap.model.AppModel;\n+import io.quarkus.bootstrap.prebuild.CodeGenException;\n+import io.quarkus.deployment.codegen.CodeGenData;\n+\n+public class CodeGenerator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba16068f6b8f519fa42f236f03c021d135759b45"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgxNTE4Ng==", "bodyText": "Code generation, in short.\nGoing in a bit more detail: to gather the logic of initializing and executing CodeGenProviders.", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455815186", "createdAt": "2020-07-16T14:09:21Z", "author": {"login": "michalszynkiewicz"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/CodeGenerator.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package io.quarkus.deployment;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import io.quarkus.bootstrap.model.AppModel;\n+import io.quarkus.bootstrap.prebuild.CodeGenException;\n+import io.quarkus.deployment.codegen.CodeGenData;\n+\n+public class CodeGenerator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY5ODM5Mw=="}, "originalCommit": {"oid": "ba16068f6b8f519fa42f236f03c021d135759b45"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg0NzY0Nw==", "bodyText": "Thanks, a line of JavaDoc would be nice", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455847647", "createdAt": "2020-07-16T14:51:56Z", "author": {"login": "ppalaga"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/CodeGenerator.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package io.quarkus.deployment;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import io.quarkus.bootstrap.model.AppModel;\n+import io.quarkus.bootstrap.prebuild.CodeGenException;\n+import io.quarkus.deployment.codegen.CodeGenData;\n+\n+public class CodeGenerator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY5ODM5Mw=="}, "originalCommit": {"oid": "ba16068f6b8f519fa42f236f03c021d135759b45"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjQ0OTM2OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/CodeGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDo1MToyM1rOGylopQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDo1MToyM1rOGylopQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY5ODU5Nw==", "bodyText": "What is \"code gen\"?", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455698597", "createdAt": "2020-07-16T10:51:23Z", "author": {"login": "ppalaga"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/CodeGenerator.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package io.quarkus.deployment;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import io.quarkus.bootstrap.model.AppModel;\n+import io.quarkus.bootstrap.prebuild.CodeGenException;\n+import io.quarkus.deployment.codegen.CodeGenData;\n+\n+public class CodeGenerator {\n+\n+    // used by Gradle\n+    @SuppressWarnings(\"unused\")\n+    public static void initAndRun(ClassLoader classLoader,\n+            Set<Path> sourceParentDirs, Path generatedSourcesDir, Path buildDir,\n+            Consumer<Path> sourceRegistrar,\n+            AppModel appModel) throws CodeGenException {\n+        List<CodeGenData> generators = init(classLoader, sourceParentDirs, generatedSourcesDir, buildDir, sourceRegistrar);\n+        for (CodeGenData generator : generators) {\n+            trigger(classLoader, generator, appModel);\n+        }\n+    }\n+\n+    public static List<CodeGenData> init(ClassLoader deploymentClassLoader,\n+            Set<Path> sourceParentDirs,\n+            Path generatedSourcesDir,\n+            Path buildDir,\n+            Consumer<Path> sourceRegistrar) throws CodeGenException {\n+        return callWithClassloader(deploymentClassLoader, () -> {\n+            List<CodeGenData> result = new ArrayList<>();\n+            Class<? extends CodeGenProvider> codeGenProviderClass;\n+            try {\n+                //noinspection unchecked\n+                codeGenProviderClass = (Class<? extends CodeGenProvider>) deploymentClassLoader\n+                        .loadClass(CodeGenProvider.class.getName());\n+            } catch (ClassNotFoundException e) {\n+                throw new CodeGenException(\"Failde to load CodeGenProvider class from deployment classloader\", e);\n+            }\n+            for (CodeGenProvider provider : ServiceLoader.load(codeGenProviderClass)) {\n+                Path outputDir = codeGenOutDir(generatedSourcesDir, provider, sourceRegistrar);\n+                for (Path sourceParentDir : sourceParentDirs) {\n+                    result.add(\n+                            new CodeGenData(provider, outputDir, sourceParentDir.resolve(provider.inputDirectory()), buildDir));\n+                }\n+            }\n+\n+            return result;\n+        });\n+    }\n+\n+    private static <T> T callWithClassloader(ClassLoader deploymentClassLoader, CodeGenAction<T> supplier)\n+            throws CodeGenException {\n+        ClassLoader originalClassloader = Thread.currentThread().getContextClassLoader();\n+        try {\n+            Thread.currentThread().setContextClassLoader(deploymentClassLoader);\n+            return supplier.fire();\n+        } finally {\n+            Thread.currentThread().setContextClassLoader(originalClassloader);\n+        }\n+    }\n+\n+    /**\n+     * generate sources for given code gen", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba16068f6b8f519fa42f236f03c021d135759b45"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjQ2MTk5OnYy", "diffSide": "RIGHT", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusPrepare.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDo1NDo0OVrOGylwGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDo1NDo0OVrOGylwGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcwMDUwNA==", "bodyText": "Perhaps better Performs Quarkus pre-build preparations, such as sources generation", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455700504", "createdAt": "2020-07-16T10:54:49Z", "author": {"login": "ppalaga"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusPrepare.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package io.quarkus.gradle.tasks;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import org.gradle.api.GradleException;\n+import org.gradle.api.plugins.Convention;\n+import org.gradle.api.plugins.JavaPluginConvention;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import io.quarkus.bootstrap.BootstrapException;\n+import io.quarkus.bootstrap.app.CuratedApplication;\n+import io.quarkus.bootstrap.app.QuarkusBootstrap;\n+import io.quarkus.bootstrap.classloading.QuarkusClassLoader;\n+import io.quarkus.bootstrap.model.AppArtifact;\n+import io.quarkus.bootstrap.resolver.AppModelResolver;\n+import io.quarkus.deployment.CodeGenerator;\n+\n+public class QuarkusPrepare extends QuarkusTask {\n+\n+    public static final String INIT_AND_RUN = \"initAndRun\";\n+    private Set<Path> sourcesDirectories;\n+    private Consumer<Path> sourceRegistrar;\n+    private boolean test = false;\n+\n+    public QuarkusPrepare() {\n+        super(\"Quarkus performs pre-build preparations, such as sources generation\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba16068f6b8f519fa42f236f03c021d135759b45"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjQ2OTEyOnYy", "diffSide": "RIGHT", "path": "devtools/maven/src/main/java/io/quarkus/maven/CodeGenMojo.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDo1NzowMFrOGyl0hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDo1NDo1OVrOGyu33A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcwMTYzNw==", "bodyText": "Please add a single line of JavaDoc explaining the purpose of this mojo.\nIs there any reason against adding threadSafe = true?", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455701637", "createdAt": "2020-07-16T10:57:00Z", "author": {"login": "ppalaga"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/CodeGenMojo.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package io.quarkus.maven;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.function.Consumer;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.plugin.AbstractMojo;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.eclipse.aether.RepositorySystem;\n+import org.eclipse.aether.RepositorySystemSession;\n+import org.eclipse.aether.repository.RemoteRepository;\n+\n+import io.quarkus.bootstrap.app.CuratedApplication;\n+import io.quarkus.bootstrap.app.QuarkusBootstrap;\n+import io.quarkus.bootstrap.classloading.QuarkusClassLoader;\n+import io.quarkus.bootstrap.model.AppArtifact;\n+import io.quarkus.bootstrap.prebuild.CodeGenFailureException;\n+import io.quarkus.bootstrap.resolver.maven.MavenArtifactResolver;\n+import io.quarkus.deployment.CodeGenerator;\n+import io.quarkus.deployment.codegen.CodeGenData;\n+\n+@Mojo(name = \"prepare\", defaultPhase = LifecyclePhase.GENERATE_SOURCES, requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba16068f6b8f519fa42f236f03c021d135759b45"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc5NjMwOQ==", "bodyText": "does it mark a plugin safe to run in parallel with building other modules?", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455796309", "createdAt": "2020-07-16T13:44:12Z", "author": {"login": "michalszynkiewicz"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/CodeGenMojo.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package io.quarkus.maven;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.function.Consumer;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.plugin.AbstractMojo;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.eclipse.aether.RepositorySystem;\n+import org.eclipse.aether.RepositorySystemSession;\n+import org.eclipse.aether.repository.RemoteRepository;\n+\n+import io.quarkus.bootstrap.app.CuratedApplication;\n+import io.quarkus.bootstrap.app.QuarkusBootstrap;\n+import io.quarkus.bootstrap.classloading.QuarkusClassLoader;\n+import io.quarkus.bootstrap.model.AppArtifact;\n+import io.quarkus.bootstrap.prebuild.CodeGenFailureException;\n+import io.quarkus.bootstrap.resolver.maven.MavenArtifactResolver;\n+import io.quarkus.deployment.CodeGenerator;\n+import io.quarkus.deployment.codegen.CodeGenData;\n+\n+@Mojo(name = \"prepare\", defaultPhase = LifecyclePhase.GENERATE_SOURCES, requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcwMTYzNw=="}, "originalCommit": {"oid": "ba16068f6b8f519fa42f236f03c021d135759b45"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg0OTk0OA==", "bodyText": "https://maven.apache.org/developers/mojo-api-specification.html\n\nMarks this mojo as being thread-safe, i.e. the mojo safely supports concurrent execution during parallel builds. Mojos without this annotation will make Maven output a warning when used during a parallel build session. The short-hand notation @threadsafe without a tag value is equivalent to @threadsafe true. Since Maven 3.0.", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455849948", "createdAt": "2020-07-16T14:54:59Z", "author": {"login": "ppalaga"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/CodeGenMojo.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package io.quarkus.maven;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.function.Consumer;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.plugin.AbstractMojo;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.eclipse.aether.RepositorySystem;\n+import org.eclipse.aether.RepositorySystemSession;\n+import org.eclipse.aether.repository.RemoteRepository;\n+\n+import io.quarkus.bootstrap.app.CuratedApplication;\n+import io.quarkus.bootstrap.app.QuarkusBootstrap;\n+import io.quarkus.bootstrap.classloading.QuarkusClassLoader;\n+import io.quarkus.bootstrap.model.AppArtifact;\n+import io.quarkus.bootstrap.prebuild.CodeGenFailureException;\n+import io.quarkus.bootstrap.resolver.maven.MavenArtifactResolver;\n+import io.quarkus.deployment.CodeGenerator;\n+import io.quarkus.deployment.codegen.CodeGenData;\n+\n+@Mojo(name = \"prepare\", defaultPhase = LifecyclePhase.GENERATE_SOURCES, requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcwMTYzNw=="}, "originalCommit": {"oid": "ba16068f6b8f519fa42f236f03c021d135759b45"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2846, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}