{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1OTg3MzA1", "number": 8285, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOTozMToyMVrODtBfYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNToxNDoxM1rODtlCOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTM2OTI5OnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/DefaultTenantConfigResolver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOTozMToyMVrOF-NIoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOTozMToyMVrOF-NIoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc3MTIzMw==", "bodyText": "@stuartwdouglas I'm not sure a concurrent map is needed since we still synchronize on it, the sync block is needed to avoid the concurrent connection requests. But I suppose it is performing better anyway, the concurrent map.", "url": "https://github.com/quarkusio/quarkus/pull/8285#discussion_r400771233", "createdAt": "2020-03-31T09:31:21Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/DefaultTenantConfigResolver.java", "diffHunk": "@@ -27,18 +26,17 @@\n     @Inject\n     Instance<TenantConfigResolver> tenantConfigResolver;\n \n-    private volatile Map<String, TenantConfigContext> staticTenantsConfig;\n-    private volatile TenantConfigContext defaultTenant;\n-    private volatile Function<OidcTenantConfig, TenantConfigContext> tenantConfigContextFactory;\n-    private volatile Map<String, TenantConfigContext> dynamicTenantsConfig;\n+    private final Map<String, TenantConfigContext> dynamicTenantsConfig = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8648c280db61f19d760f3deffd3db378bb1af6b3"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTM3Nzk5OnYy", "diffSide": "RIGHT", "path": "extensions/oidc/deployment/src/main/java/io/quarkus/oidc/deployment/OidcBuildStep.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOTozMzozNFrOF-NOIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOTozMzozNFrOF-NOIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc3MjY0MA==", "bodyText": "Interesting, so this is how one can register the application scoped like singletons at runtime", "url": "https://github.com/quarkusio/quarkus/pull/8285#discussion_r400772640", "createdAt": "2020-03-31T09:33:34Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/deployment/src/main/java/io/quarkus/oidc/deployment/OidcBuildStep.java", "diffHunk": "@@ -66,9 +69,15 @@ EnableAllSecurityServicesBuildItem security() {\n \n     @Record(ExecutionTime.RUNTIME_INIT)\n     @BuildStep(onlyIf = IsEnabled.class)\n-    public void setup(OidcConfig config, OidcRecorder recorder, CoreVertxBuildItem vertxBuildItem,\n-            BeanContainerBuildItem bc) {\n-        recorder.setup(config, vertxBuildItem.getVertx(), bc.getValue());\n+    public SyntheticBeanBuildItem setup(\n+            OidcConfig config,\n+            OidcRecorder recorder,\n+            CoreVertxBuildItem vertxBuildItem) {\n+        return SyntheticBeanBuildItem.configure(TenantConfigBean.class).unremovable().types(TenantConfigBean.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8648c280db61f19d760f3deffd3db378bb1af6b3"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTE5Mjg4OnYy", "diffSide": "RIGHT", "path": "extensions/vertx-core/deployment/src/main/java/io/quarkus/vertx/core/deployment/VertxCoreProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNToxNDoxM1rOF_Fdqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMToyMTowMlrOF_TDRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5NDEyMg==", "bodyText": "@stuartwdouglas I need it to be a Singleton. Many clients are casting it to VertxInternal (I know it's bad). With ApplciaitonScoped it does not work anymore.", "url": "https://github.com/quarkusio/quarkus/pull/8285#discussion_r401694122", "createdAt": "2020-04-01T15:14:13Z", "author": {"login": "cescoffier"}, "path": "extensions/vertx-core/deployment/src/main/java/io/quarkus/vertx/core/deployment/VertxCoreProcessor.java", "diffHunk": "@@ -69,12 +64,19 @@ IOThreadDetectorBuildItem ioThreadDetector(VertxCoreRecorder recorder) {\n \n     @BuildStep\n     @Record(value = ExecutionTime.RUNTIME_INIT)\n-    CoreVertxBuildItem build(VertxCoreRecorder recorder, BeanContainerBuildItem beanContainer,\n+    CoreVertxBuildItem build(VertxCoreRecorder recorder,\n             LaunchModeBuildItem launchMode, ShutdownContextBuildItem shutdown, VertxConfiguration config,\n+            BuildProducer<SyntheticBeanBuildItem> syntheticBeanBuildItemBuildProducer,\n             BuildProducer<ServiceStartBuildItem> serviceStartBuildItem) {\n \n-        Supplier<Vertx> vertx = recorder.configureVertx(beanContainer.getValue(), config,\n+        Supplier<Vertx> vertx = recorder.configureVertx(config,\n                 launchMode.getLaunchMode(), shutdown);\n+        syntheticBeanBuildItemBuildProducer.produce(SyntheticBeanBuildItem.configure(Vertx.class)\n+                .types(Vertx.class)\n+                .scope(ApplicationScoped.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8648c280db61f19d760f3deffd3db378bb1af6b3"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxNjc0Mw==", "bodyText": "#8339", "url": "https://github.com/quarkusio/quarkus/pull/8285#discussion_r401916743", "createdAt": "2020-04-01T21:21:02Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/vertx-core/deployment/src/main/java/io/quarkus/vertx/core/deployment/VertxCoreProcessor.java", "diffHunk": "@@ -69,12 +64,19 @@ IOThreadDetectorBuildItem ioThreadDetector(VertxCoreRecorder recorder) {\n \n     @BuildStep\n     @Record(value = ExecutionTime.RUNTIME_INIT)\n-    CoreVertxBuildItem build(VertxCoreRecorder recorder, BeanContainerBuildItem beanContainer,\n+    CoreVertxBuildItem build(VertxCoreRecorder recorder,\n             LaunchModeBuildItem launchMode, ShutdownContextBuildItem shutdown, VertxConfiguration config,\n+            BuildProducer<SyntheticBeanBuildItem> syntheticBeanBuildItemBuildProducer,\n             BuildProducer<ServiceStartBuildItem> serviceStartBuildItem) {\n \n-        Supplier<Vertx> vertx = recorder.configureVertx(beanContainer.getValue(), config,\n+        Supplier<Vertx> vertx = recorder.configureVertx(config,\n                 launchMode.getLaunchMode(), shutdown);\n+        syntheticBeanBuildItemBuildProducer.produce(SyntheticBeanBuildItem.configure(Vertx.class)\n+                .types(Vertx.class)\n+                .scope(ApplicationScoped.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5NDEyMg=="}, "originalCommit": {"oid": "8648c280db61f19d760f3deffd3db378bb1af6b3"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3710, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}