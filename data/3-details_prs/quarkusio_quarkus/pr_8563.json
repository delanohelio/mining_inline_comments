{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMTI5OTcy", "number": 8563, "title": "Hibernate projection inside Hibernate with Panache", "bodyText": "This implements the PanacheQuery.project(Class) method that allows doing a DTO projection on the query.\nThe projection class needs to be a Java Bean and have a constructor with all it's fields in it. In order to work in native it needs to be annotated with @RegisterForReflection.\nIt uses the constructor expression construct, to build it we need to have the compiler parameters attribute on (by default on our Quarkus Maven archetype but not on the IT).\nIt fixes #6261", "createdAt": "2020-04-14T11:34:33Z", "url": "https://github.com/quarkusio/quarkus/pull/8563", "merged": true, "mergeCommit": {"oid": "fc35f0607e4535ecd90b14da61028a9d9bd150c8"}, "closed": true, "closedAt": "2020-04-22T08:49:00Z", "author": {"login": "loicmathieu"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXiYZxAFqTM5Mjg2Mzk0Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZucFjABqjMyNTQ4ODQzNjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyODYzOTQ2", "url": "https://github.com/quarkusio/quarkus/pull/8563#pullrequestreview-392863946", "createdAt": "2020-04-14T12:09:46Z", "commit": {"oid": "7541fd10219fec97939b4f35ffae3c6dc558e18f"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzODQwNDMx", "url": "https://github.com/quarkusio/quarkus/pull/8563#pullrequestreview-393840431", "createdAt": "2020-04-15T14:39:41Z", "commit": {"oid": "7541fd10219fec97939b4f35ffae3c6dc558e18f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDozOTo0MVrOGF887g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo0ODowNlrOGF9XTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5NDcwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This is also called **dynamics instanciation** or **constructor expression**, more info can be found on the Hibernate guide:\n          \n          \n            \n            This is also called **dynamic instantiation** or **constructor expression**, more info can be found on the Hibernate guide:", "url": "https://github.com/quarkusio/quarkus/pull/8563#discussion_r408894702", "createdAt": "2020-04-15T14:39:41Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -577,6 +577,58 @@ Person.find(\"name = :name and status = :status\",\n \n Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`).\n \n+=== Query projection\n+\n+Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods.\n+\n+You can use it to restrict which fields will be returned by the database.\n+\n+Hibernate will use **DTO projection** and generate a SELECT clause with the attributes from the projection class.\n+This is also called **dynamics instanciation** or **constructor expression**, more info can be found on the Hibernate guide:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7541fd10219fec97939b4f35ffae3c6dc558e18f"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5NDk0Mg==", "bodyText": "Why? What happens if there are more?", "url": "https://github.com/quarkusio/quarkus/pull/8563#discussion_r408894942", "createdAt": "2020-04-15T14:40:00Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -577,6 +577,58 @@ Person.find(\"name = :name and status = :status\",\n \n Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`).\n \n+=== Query projection\n+\n+Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods.\n+\n+You can use it to restrict which fields will be returned by the database.\n+\n+Hibernate will use **DTO projection** and generate a SELECT clause with the attributes from the projection class.\n+This is also called **dynamics instanciation** or **constructor expression**, more info can be found on the Hibernate guide:\n+link:https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#hql-select-clause[hql select clause]\n+\n+The projection class needs to be a valid Java Bean and have a constructor that contains all its attributes, this constructor will be used to\n+instantiate the projection DTO instead of using the entity class. This must be the only constructor of the class.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7541fd10219fec97939b4f35ffae3c6dc558e18f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5NTE4Mw==", "bodyText": "Can't we turn this into a public final field?", "url": "https://github.com/quarkusio/quarkus/pull/8563#discussion_r408895183", "createdAt": "2020-04-15T14:40:20Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -577,6 +577,58 @@ Person.find(\"name = :name and status = :status\",\n \n Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`).\n \n+=== Query projection\n+\n+Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods.\n+\n+You can use it to restrict which fields will be returned by the database.\n+\n+Hibernate will use **DTO projection** and generate a SELECT clause with the attributes from the projection class.\n+This is also called **dynamics instanciation** or **constructor expression**, more info can be found on the Hibernate guide:\n+link:https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#hql-select-clause[hql select clause]\n+\n+The projection class needs to be a valid Java Bean and have a constructor that contains all its attributes, this constructor will be used to\n+instantiate the projection DTO instead of using the entity class. This must be the only constructor of the class.\n+\n+[source,java]\n+----\n+import io.quarkus.runtime.annotations.RegisterForReflection;\n+\n+@RegisterForReflection // <1>\n+public class PersonName {\n+    private String name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7541fd10219fec97939b4f35ffae3c6dc558e18f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5NTkyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The implementation of the `project(Class)` method use constructor parameter names to build the select clause of the query,\n          \n          \n            \n            The implementation of the `project(Class)` method uses the constructor's parameter names to build the select clause of the query,", "url": "https://github.com/quarkusio/quarkus/pull/8563#discussion_r408895922", "createdAt": "2020-04-15T14:41:22Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -577,6 +577,58 @@ Person.find(\"name = :name and status = :status\",\n \n Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`).\n \n+=== Query projection\n+\n+Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods.\n+\n+You can use it to restrict which fields will be returned by the database.\n+\n+Hibernate will use **DTO projection** and generate a SELECT clause with the attributes from the projection class.\n+This is also called **dynamics instanciation** or **constructor expression**, more info can be found on the Hibernate guide:\n+link:https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#hql-select-clause[hql select clause]\n+\n+The projection class needs to be a valid Java Bean and have a constructor that contains all its attributes, this constructor will be used to\n+instantiate the projection DTO instead of using the entity class. This must be the only constructor of the class.\n+\n+[source,java]\n+----\n+import io.quarkus.runtime.annotations.RegisterForReflection;\n+\n+@RegisterForReflection // <1>\n+public class PersonName {\n+    private String name;\n+\n+    public PersonName(String name){ // <2>\n+        this.name = name;\n+    }\n+\n+    public String getName(){\n+        return name;\n+    }\n+\n+    public void setName(String name){\n+        this.name = name;\n+    }\n+}\n+\n+// only 'name' will be loaded from the database\n+PanacheQuery<PersonName> query = Person.find(\"status\", Status.Alive).project(PersonName.class);\n+----\n+\n+1. If you plan to deploy your application as a native executable, you must register manually the projection class for reflection.\n+2. This constructor will be used by Hibernate, it must be the only constructor in your class and have all the class attributes as parameters.\n+\n+[WARNING]\n+====\n+The implementation of the `project(Class)` method use constructor parameter names to build the select clause of the query,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7541fd10219fec97939b4f35ffae3c6dc558e18f"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5NjMyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This is enabled by default if you are using the Quarkus Maven archetype, if not add the property `<maven.compiler.parameters>true</maven.compiler.parameters>` to your pom.xml.\n          \n          \n            \n            This is enabled by default if you are using the Quarkus Maven archetype. If you are not using it, add the property `<maven.compiler.parameters>true</maven.compiler.parameters>` to your pom.xml.", "url": "https://github.com/quarkusio/quarkus/pull/8563#discussion_r408896326", "createdAt": "2020-04-15T14:41:52Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -577,6 +577,58 @@ Person.find(\"name = :name and status = :status\",\n \n Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`).\n \n+=== Query projection\n+\n+Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods.\n+\n+You can use it to restrict which fields will be returned by the database.\n+\n+Hibernate will use **DTO projection** and generate a SELECT clause with the attributes from the projection class.\n+This is also called **dynamics instanciation** or **constructor expression**, more info can be found on the Hibernate guide:\n+link:https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#hql-select-clause[hql select clause]\n+\n+The projection class needs to be a valid Java Bean and have a constructor that contains all its attributes, this constructor will be used to\n+instantiate the projection DTO instead of using the entity class. This must be the only constructor of the class.\n+\n+[source,java]\n+----\n+import io.quarkus.runtime.annotations.RegisterForReflection;\n+\n+@RegisterForReflection // <1>\n+public class PersonName {\n+    private String name;\n+\n+    public PersonName(String name){ // <2>\n+        this.name = name;\n+    }\n+\n+    public String getName(){\n+        return name;\n+    }\n+\n+    public void setName(String name){\n+        this.name = name;\n+    }\n+}\n+\n+// only 'name' will be loaded from the database\n+PanacheQuery<PersonName> query = Person.find(\"status\", Status.Alive).project(PersonName.class);\n+----\n+\n+1. If you plan to deploy your application as a native executable, you must register manually the projection class for reflection.\n+2. This constructor will be used by Hibernate, it must be the only constructor in your class and have all the class attributes as parameters.\n+\n+[WARNING]\n+====\n+The implementation of the `project(Class)` method use constructor parameter names to build the select clause of the query,\n+so the compiler must be configured to store parameter names inside the compiled class.\n+This is enabled by default if you are using the Quarkus Maven archetype, if not add the property `<maven.compiler.parameters>true</maven.compiler.parameters>` to your pom.xml.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7541fd10219fec97939b4f35ffae3c6dc558e18f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5NzQ5Mw==", "bodyText": "If it updates the query (mutate) then order doesn't matter. I think what you mean is that it will create a new query. In either case order should not matter because the query copy can use settings from the original query, no?", "url": "https://github.com/quarkusio/quarkus/pull/8563#discussion_r408897493", "createdAt": "2020-04-15T14:43:18Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -577,6 +577,58 @@ Person.find(\"name = :name and status = :status\",\n \n Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`).\n \n+=== Query projection\n+\n+Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods.\n+\n+You can use it to restrict which fields will be returned by the database.\n+\n+Hibernate will use **DTO projection** and generate a SELECT clause with the attributes from the projection class.\n+This is also called **dynamics instanciation** or **constructor expression**, more info can be found on the Hibernate guide:\n+link:https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#hql-select-clause[hql select clause]\n+\n+The projection class needs to be a valid Java Bean and have a constructor that contains all its attributes, this constructor will be used to\n+instantiate the projection DTO instead of using the entity class. This must be the only constructor of the class.\n+\n+[source,java]\n+----\n+import io.quarkus.runtime.annotations.RegisterForReflection;\n+\n+@RegisterForReflection // <1>\n+public class PersonName {\n+    private String name;\n+\n+    public PersonName(String name){ // <2>\n+        this.name = name;\n+    }\n+\n+    public String getName(){\n+        return name;\n+    }\n+\n+    public void setName(String name){\n+        this.name = name;\n+    }\n+}\n+\n+// only 'name' will be loaded from the database\n+PanacheQuery<PersonName> query = Person.find(\"status\", Status.Alive).project(PersonName.class);\n+----\n+\n+1. If you plan to deploy your application as a native executable, you must register manually the projection class for reflection.\n+2. This constructor will be used by Hibernate, it must be the only constructor in your class and have all the class attributes as parameters.\n+\n+[WARNING]\n+====\n+The implementation of the `project(Class)` method use constructor parameter names to build the select clause of the query,\n+so the compiler must be configured to store parameter names inside the compiled class.\n+This is enabled by default if you are using the Quarkus Maven archetype, if not add the property `<maven.compiler.parameters>true</maven.compiler.parameters>` to your pom.xml.\n+====\n+\n+[WARNING]\n+====\n+Using `project(Class)` will update the JPA query, so you must use the other methods that update the query (like withLock, withHint, page, ...) after it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7541fd10219fec97939b4f35ffae3c6dc558e18f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkwMTQ1Mw==", "bodyText": "Huh, this is a sneaky mutation that changes the type of this query. I'm not sure this is a great idea. Why not return a new query object?", "url": "https://github.com/quarkusio/quarkus/pull/8563#discussion_r408901453", "createdAt": "2020-04-15T14:48:06Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache/runtime/src/main/java/io/quarkus/hibernate/orm/panache/runtime/PanacheQueryImpl.java", "diffHunk": "@@ -36,16 +41,66 @@\n \n     private Range range;\n \n-    PanacheQueryImpl(EntityManager em, javax.persistence.Query jpaQuery, String query, Object paramsArrayOrMap) {\n+    PanacheQueryImpl(EntityManager em, String query, String sort, Object paramsArrayOrMap) {\n         this.em = em;\n-        this.jpaQuery = jpaQuery;\n         this.query = query;\n+        this.sort = sort;\n         this.paramsArrayOrMap = paramsArrayOrMap;\n+\n+        if (JpaOperations.isNamedQuery(query)) {\n+            String namedQuery = query.substring(1);\n+            this.jpaQuery = em.createNamedQuery(namedQuery);\n+        } else {\n+            this.jpaQuery = em.createQuery(sort != null ? query + sort : query);\n+        }\n+\n+        if (paramsArrayOrMap instanceof Map)\n+            JpaOperations.bindParameters(jpaQuery, (Map<String, Object>) paramsArrayOrMap);\n+        else\n+            JpaOperations.bindParameters(jpaQuery, (Object[]) paramsArrayOrMap);\n+\n         page = new Page(0, Integer.MAX_VALUE);\n     }\n \n     // Builder\n \n+    @Override\n+    public <T> PanacheQuery<T> project(Class<T> type) {\n+        if (JpaOperations.isNamedQuery(query)) {\n+            throw new PanacheQueryException(\"Unable to perform a projection on a named query\");\n+        }\n+\n+        // We use the first constructor that we found and use the parameter names,\n+        // so the projection class must have only one constructor,\n+        // and the application must be built with parameter names.\n+        // Maybe this should be improved some days ...\n+        Constructor<?> constructor = type.getDeclaredConstructors()[0];\n+\n+        // build select clause with a constructor expression\n+        StringBuilder select = new StringBuilder(\"SELECT new \").append(type.getName()).append(\" (\");\n+        int selectInitialLength = select.length();\n+        for (Parameter parameter : constructor.getParameters()) {\n+            if (!parameter.isNamePresent()) {\n+                throw new PanacheQueryException(\n+                        \"Your application must be built with parameter names, this should be the default if\" +\n+                                \" using Quarkus artifacts. Check the maven or gradle compiler configuration to include '-parameters'.\");\n+            }\n+\n+            if (select.length() > selectInitialLength) {\n+                select.append(\", \");\n+            }\n+            select.append(parameter.getName());\n+        }\n+        select.append(\") \");\n+\n+        this.jpaQuery = em.createQuery(sort != null ? select.toString() + query + sort : select.toString() + query);\n+        if (paramsArrayOrMap instanceof Map)\n+            JpaOperations.bindParameters(jpaQuery, (Map<String, Object>) paramsArrayOrMap);\n+        else\n+            JpaOperations.bindParameters(jpaQuery, (Object[]) paramsArrayOrMap);\n+        return (PanacheQuery<T>) this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7541fd10219fec97939b4f35ffae3c6dc558e18f"}, "originalPosition": 83}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "68d2414baf81bc523c5c3503b29ded9ece2a40d8", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/68d2414baf81bc523c5c3503b29ded9ece2a40d8", "committedDate": "2020-04-20T08:59:42Z", "message": "Create a new query for a projection query"}, "afterCommit": {"oid": "807c7b843c916d79e89137677483aa28147e5eea", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/807c7b843c916d79e89137677483aa28147e5eea", "committedDate": "2020-04-20T11:18:42Z", "message": "Create a new query for a projection query"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "807c7b843c916d79e89137677483aa28147e5eea", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/807c7b843c916d79e89137677483aa28147e5eea", "committedDate": "2020-04-20T11:18:42Z", "message": "Create a new query for a projection query"}, "afterCommit": {"oid": "ab2b351280bff217e72959cc3a5d865f37c7989b", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/ab2b351280bff217e72959cc3a5d865f37c7989b", "committedDate": "2020-04-20T11:23:21Z", "message": "Create a new query for a projection query"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NDQ1NjEw", "url": "https://github.com/quarkusio/quarkus/pull/8563#pullrequestreview-396445610", "createdAt": "2020-04-20T13:20:46Z", "commit": {"oid": "ab2b351280bff217e72959cc3a5d865f37c7989b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMzoyMDo0NlrOGIUGjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMzoyMzozMVrOGIUOVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM3MTE1MA==", "bodyText": "I think this method should be called createQueryNoPaging or something like that.", "url": "https://github.com/quarkusio/quarkus/pull/8563#discussion_r411371150", "createdAt": "2020-04-20T13:20:46Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache/runtime/src/main/java/io/quarkus/hibernate/orm/panache/runtime/PanacheQueryImpl.java", "diffHunk": "@@ -243,5 +311,33 @@ private void manageOffsets(int maxResults) {\n             options.setFirstRow(null);\n         }\n         jpaQuery.setMaxResults(maxResults);\n+\n+        return jpaQuery;\n+    }\n+\n+    private Query innerCreateQuery() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b351280bff217e72959cc3a5d865f37c7989b"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM3MTk2Mw==", "bodyText": "this name feels wrong, isn't it an order-by clause? How about orderByPart?", "url": "https://github.com/quarkusio/quarkus/pull/8563#discussion_r411371963", "createdAt": "2020-04-20T13:21:49Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache/runtime/src/main/java/io/quarkus/hibernate/orm/panache/runtime/PanacheQueryImpl.java", "diffHunk": "@@ -24,25 +27,74 @@\n     private static final Pattern SELECT_PATTERN = Pattern.compile(\"^\\\\s*SELECT\\\\s+((?:DISTINCT\\\\s+)?[^\\\\s]+)\\\\s+([^\\\\s]+.*)$\",\n             Pattern.CASE_INSENSITIVE);\n \n-    private Query jpaQuery;\n     private Object paramsArrayOrMap;\n     private String query;\n+    private String countQuery;\n+    private String sort;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b351280bff217e72959cc3a5d865f37c7989b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM3MzE0MA==", "bodyText": "Can we add some tests with queries and parameters too please?", "url": "https://github.com/quarkusio/quarkus/pull/8563#discussion_r411373140", "createdAt": "2020-04-20T13:23:31Z", "author": {"login": "FroMage"}, "path": "integration-tests/hibernate-orm-panache/src/main/java/io/quarkus/it/panache/TestEndpoint.java", "diffHunk": "@@ -1077,6 +1077,20 @@ public String testModel2() {\n         return \"OK\";\n     }\n \n+    @GET\n+    @Path(\"projection\")\n+    @Transactional\n+    public String testProjection() {\n+        Assertions.assertEquals(1, Person.count());\n+\n+        PersonName person = Person.findAll().project(PersonName.class).firstResult();\n+        Assertions.assertEquals(\"2\", person.name);\n+\n+        Assertions.assertEquals(1, Person.findAll().project(PersonName.class).count());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2b351280bff217e72959cc3a5d865f37c7989b"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ab2b351280bff217e72959cc3a5d865f37c7989b", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/ab2b351280bff217e72959cc3a5d865f37c7989b", "committedDate": "2020-04-20T11:23:21Z", "message": "Create a new query for a projection query"}, "afterCommit": {"oid": "eccd1cbf7f1712a8a5521ca02c03b6948e0b99d5", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/eccd1cbf7f1712a8a5521ca02c03b6948e0b99d5", "committedDate": "2020-04-20T14:55:24Z", "message": "Implements projection inside Hibernate with Panache\n\nFixes #6261"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NTY1NTY3", "url": "https://github.com/quarkusio/quarkus/pull/8563#pullrequestreview-396565567", "createdAt": "2020-04-20T15:30:23Z", "commit": {"oid": "eccd1cbf7f1712a8a5521ca02c03b6948e0b99d5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8009bac7bb034718690f35ab6191f1dd5b0bc20", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/d8009bac7bb034718690f35ab6191f1dd5b0bc20", "committedDate": "2020-04-21T07:20:17Z", "message": "Implements projection inside Hibernate with Panache\n\nFixes #6261"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eccd1cbf7f1712a8a5521ca02c03b6948e0b99d5", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/eccd1cbf7f1712a8a5521ca02c03b6948e0b99d5", "committedDate": "2020-04-20T14:55:24Z", "message": "Implements projection inside Hibernate with Panache\n\nFixes #6261"}, "afterCommit": {"oid": "d8009bac7bb034718690f35ab6191f1dd5b0bc20", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/d8009bac7bb034718690f35ab6191f1dd5b0bc20", "committedDate": "2020-04-21T07:20:17Z", "message": "Implements projection inside Hibernate with Panache\n\nFixes #6261"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4570, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}