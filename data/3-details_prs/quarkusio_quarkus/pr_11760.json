{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NDg5MzQ4", "number": 11760, "title": "OpenShift container image extension", "bodyText": "This is work in progress ...\nThe pull request introduces the docker strategy to openshift builds.\nThe idea is to introduce container-image-openshift extension that will support two strategies\n\ndocker\ns2i binary build\n\nAt the moment everything is implemented inside s2i extension. I intend to split in follow up pull requests, but since its the first working draft, I thought I'd share with the rest of the team.", "createdAt": "2020-08-31T19:16:53Z", "url": "https://github.com/quarkusio/quarkus/pull/11760", "merged": true, "mergeCommit": {"oid": "91780a2b309c734278e82f30c43e29b16c2d414c"}, "closed": true, "closedAt": "2020-09-29T15:18:49Z", "author": {"login": "iocanel"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEZAPGgFqTQ3ODkzODg4NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNpwZKgFqTQ5ODYwMjM1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4OTM4ODg0", "url": "https://github.com/quarkusio/quarkus/pull/11760#pullrequestreview-478938884", "createdAt": "2020-08-31T20:40:49Z", "commit": {"oid": "ad2012f78968f77be03653d48ac806576aa08a3a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDo0MDo0OVrOHKIfDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDo0MDo0OVrOHKIfDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM4NjgzMA==", "bodyText": "Super minor nitpick: Best use single().satisfies(h -> {...}) as hasOnlyOneElementSatisfying has been deprecated", "url": "https://github.com/quarkusio/quarkus/pull/11760#discussion_r480386830", "createdAt": "2020-08-31T20:40:49Z", "author": {"login": "geoand"}, "path": "integration-tests/kubernetes/quarkus-standard-way/src/test/java/io/quarkus/it/kubernetes/OpenshiftWithDockerBuildStrategyTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package io.quarkus.it.kubernetes;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.assertj.core.api.AbstractObjectAssert;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.fabric8.kubernetes.api.model.HasMetadata;\n+import io.fabric8.openshift.api.model.DockerBuildStrategy;\n+import io.quarkus.bootstrap.model.AppArtifact;\n+import io.quarkus.builder.Version;\n+import io.quarkus.test.ProdBuildResults;\n+import io.quarkus.test.ProdModeTestResults;\n+import io.quarkus.test.QuarkusProdModeTest;\n+\n+public class OpenshiftWithDockerBuildStrategyTest {\n+\n+    @RegisterExtension\n+    static final QuarkusProdModeTest config = new QuarkusProdModeTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class).addClasses(GreetingResource.class))\n+            .setApplicationName(\"openshift-s2i\").setApplicationVersion(\"0.1-SNAPSHOT\")\n+            .withConfigurationResource(\"openshift-with-docker-build-strategy.properties\")\n+            .setForcedDependencies(Collections\n+                    .singletonList(new AppArtifact(\"io.quarkus\", \"quarkus-openshift\", Version.getVersion())));\n+\n+    @ProdBuildResults\n+    private ProdModeTestResults prodModeTestResults;\n+\n+    @Test\n+    public void assertGeneratedResources() throws IOException {\n+        Path kubernetesDir = prodModeTestResults.getBuildDir().resolve(\"kubernetes\");\n+\n+        assertThat(kubernetesDir).isDirectoryContaining(p -> p.getFileName().endsWith(\"openshift.json\"))\n+                .isDirectoryContaining(p -> p.getFileName().endsWith(\"openshift.yml\"));\n+        List<HasMetadata> openshiftList = DeserializationUtil.deserializeAsList(kubernetesDir.resolve(\"openshift.yml\"));\n+\n+        assertThat(openshiftList).filteredOn(h -> \"BuildConfig\".equals(h.getKind())).hasOnlyOneElementSatisfying(h -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad2012f78968f77be03653d48ac806576aa08a3a"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4OTQ2NTIx", "url": "https://github.com/quarkusio/quarkus/pull/11760#pullrequestreview-478946521", "createdAt": "2020-08-31T20:53:04Z", "commit": {"oid": "ad2012f78968f77be03653d48ac806576aa08a3a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDo1MzowNFrOHKI10g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDo1MzowNFrOHKI10g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5MjY1OA==", "bodyText": "We should probably move findMainSourcesRoot some utility common to all container-image extensions - It doesn't need to be now of course", "url": "https://github.com/quarkusio/quarkus/pull/11760#discussion_r480392658", "createdAt": "2020-08-31T20:53:04Z", "author": {"login": "geoand"}, "path": "extensions/container-image/container-image-s2i/deployment/src/main/java/io/quarkus/container/image/s2i/deployment/S2iProcessor.java", "diffHunk": "@@ -65,12 +83,36 @@ public CapabilityBuildItem capability() {\n         return new CapabilityBuildItem(Capability.CONTAINER_IMAGE_S2I);\n     }\n \n+    @BuildStep(onlyIf = { S2iBuild.class }, onlyIfNot = NativeBuild.class)\n+    public void s2iPrepareJvmDockerBuild(S2iConfig s2iConfig,\n+            OutputTargetBuildItem out,\n+            BuildProducer<DecoratorBuildItem> decorator) {\n+        if (s2iConfig.buildStrategy == BuildStrategy.docker) {\n+            decorator.produce(new DecoratorBuildItem(new ApplyDockerfileToBuildConfigDecorator(null,\n+                    findMainSourcesRoot(out.getOutputDirectory()).getValue().resolve(s2iConfig.jvmDockerfile))));\n+            decorator.produce(new DecoratorBuildItem(new RemoveEnvVarDecorator(null, \"JAVA_APP_JAR\")));\n+        }\n+    }\n+\n+    @BuildStep(onlyIf = { S2iBuild.class, NativeBuild.class })\n+    public void s2iPrepareNativeDockerBuild(S2iConfig s2iConfig,\n+            OutputTargetBuildItem out,\n+            BuildProducer<DecoratorBuildItem> decorator) {\n+        if (s2iConfig.buildStrategy == BuildStrategy.docker) {\n+            decorator.produce(new DecoratorBuildItem(new ApplyDockerfileToBuildConfigDecorator(null,\n+                    findMainSourcesRoot(out.getOutputDirectory()).getValue().resolve(s2iConfig.nativeDockerfile))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad2012f78968f77be03653d48ac806576aa08a3a"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4OTQ5MjA3", "url": "https://github.com/quarkusio/quarkus/pull/11760#pullrequestreview-478949207", "createdAt": "2020-08-31T20:57:11Z", "commit": {"oid": "ad2012f78968f77be03653d48ac806576aa08a3a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDo1NzoxMVrOHKI9oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDo1NzoxMVrOHKI9oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5NDY1Ng==", "bodyText": "This seems to be unused", "url": "https://github.com/quarkusio/quarkus/pull/11760#discussion_r480394656", "createdAt": "2020-08-31T20:57:11Z", "author": {"login": "geoand"}, "path": "extensions/container-image/container-image-s2i/deployment/src/main/java/io/quarkus/container/image/s2i/deployment/S2iProcessor.java", "diffHunk": "@@ -65,12 +83,36 @@ public CapabilityBuildItem capability() {\n         return new CapabilityBuildItem(Capability.CONTAINER_IMAGE_S2I);\n     }\n \n+    @BuildStep(onlyIf = { S2iBuild.class }, onlyIfNot = NativeBuild.class)\n+    public void s2iPrepareJvmDockerBuild(S2iConfig s2iConfig,\n+            OutputTargetBuildItem out,\n+            BuildProducer<DecoratorBuildItem> decorator) {\n+        if (s2iConfig.buildStrategy == BuildStrategy.docker) {\n+            decorator.produce(new DecoratorBuildItem(new ApplyDockerfileToBuildConfigDecorator(null,\n+                    findMainSourcesRoot(out.getOutputDirectory()).getValue().resolve(s2iConfig.jvmDockerfile))));\n+            decorator.produce(new DecoratorBuildItem(new RemoveEnvVarDecorator(null, \"JAVA_APP_JAR\")));\n+        }\n+    }\n+\n+    @BuildStep(onlyIf = { S2iBuild.class, NativeBuild.class })\n+    public void s2iPrepareNativeDockerBuild(S2iConfig s2iConfig,\n+            OutputTargetBuildItem out,\n+            BuildProducer<DecoratorBuildItem> decorator) {\n+        if (s2iConfig.buildStrategy == BuildStrategy.docker) {\n+            decorator.produce(new DecoratorBuildItem(new ApplyDockerfileToBuildConfigDecorator(null,\n+                    findMainSourcesRoot(out.getOutputDirectory()).getValue().resolve(s2iConfig.nativeDockerfile))));\n+        }\n+        //Let's remove this for all kinds of native build\n+        decorator.produce(new DecoratorBuildItem(new RemoveEnvVarDecorator(null, \"JAVA_APP_JAR\")));\n+    }\n+\n     @BuildStep(onlyIf = { IsNormal.class, S2iBuild.class }, onlyIfNot = NativeBuild.class)\n     public void s2iRequirementsJvm(S2iConfig s2iConfig,\n             CurateOutcomeBuildItem curateOutcomeBuildItem,\n             OutputTargetBuildItem out,\n             PackageConfig packageConfig,\n             JarBuildItem jarBuildItem,\n+            BuildProducer<DecoratorBuildItem> decorator,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad2012f78968f77be03653d48ac806576aa08a3a"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4OTUwMjc1", "url": "https://github.com/quarkusio/quarkus/pull/11760#pullrequestreview-478950275", "createdAt": "2020-08-31T20:58:42Z", "commit": {"oid": "ad2012f78968f77be03653d48ac806576aa08a3a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDo1ODo0MlrOHKJAuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDo1ODo0MlrOHKJAuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5NTQ0OA==", "bodyText": "Can we get some comments in this?\nMentioning it because this looks like where most of the problems could arise - the rest of the changes seem pretty straighforward, but this one is a mouth full :)", "url": "https://github.com/quarkusio/quarkus/pull/11760#discussion_r480395448", "createdAt": "2020-08-31T20:58:42Z", "author": {"login": "geoand"}, "path": "extensions/container-image/container-image-s2i/deployment/src/main/java/io/quarkus/container/image/s2i/deployment/PackageUtil.java", "diffHunk": "@@ -0,0 +1,216 @@\n+\n+package io.quarkus.container.image.s2i.deployment;\n+\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.jsoup.helper.StringUtil;\n+\n+import io.dekorate.DekorateException;\n+import io.dekorate.deps.commons.compress.archivers.tar.TarArchiveEntry;\n+import io.dekorate.deps.commons.compress.archivers.tar.TarArchiveOutputStream;\n+\n+public class PackageUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad2012f78968f77be03653d48ac806576aa08a3a"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5NDIwMjUy", "url": "https://github.com/quarkusio/quarkus/pull/11760#pullrequestreview-479420252", "createdAt": "2020-09-01T05:56:34Z", "commit": {"oid": "ad2012f78968f77be03653d48ac806576aa08a3a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNTo1NjozNFrOHKkwEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNTo1NjozNFrOHKkwEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg0OTkzOQ==", "bodyText": "This seems to be unused", "url": "https://github.com/quarkusio/quarkus/pull/11760#discussion_r480849939", "createdAt": "2020-09-01T05:56:34Z", "author": {"login": "geoand"}, "path": "extensions/container-image/container-image-s2i/deployment/src/main/java/io/quarkus/container/image/s2i/deployment/PackageUtil.java", "diffHunk": "@@ -0,0 +1,216 @@\n+\n+package io.quarkus.container.image.s2i.deployment;\n+\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.jsoup.helper.StringUtil;\n+\n+import io.dekorate.DekorateException;\n+import io.dekorate.deps.commons.compress.archivers.tar.TarArchiveEntry;\n+import io.dekorate.deps.commons.compress.archivers.tar.TarArchiveOutputStream;\n+\n+public class PackageUtil {\n+\n+    private static final String DEFAULT_DOCKERFILE = \"Dockerfile\";\n+    private static final String DOCKER_IGNORE = \".dockerignore\";\n+\n+    protected static final String DEFAULT_TEMP_DIR = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n+    protected static final String DOCKER_PREFIX = \"docker-\";\n+    protected static final String BZIP2_SUFFIX = \".tar.bzip2\";\n+\n+    private static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n+\n+    public static File packageFile(String path) {\n+        return packageFile(path, null);\n+    }\n+\n+    public static File packageFile(String path, String base) {\n+        try {\n+            final Path root = Paths.get(path).getParent();\n+            File tempFile = Files.createTempFile(Paths.get(DEFAULT_TEMP_DIR), DOCKER_PREFIX, BZIP2_SUFFIX).toFile();\n+            try (final TarArchiveOutputStream tout = buildTarStream(tempFile)) {\n+                Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n+                    @Override\n+                    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) {\n+                        return FileVisitResult.CONTINUE;\n+                    }\n+\n+                    @Override\n+                    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n+                        String absolutePath = file.toAbsolutePath().toString();\n+                        if (!path.equals(absolutePath)) {\n+                            return FileVisitResult.CONTINUE;\n+                        }\n+                        final Path relativePath = root.relativize(file);\n+                        final boolean hasBasePath = !StringUtil.isBlank(base);\n+                        final TarArchiveEntry entry = hasBasePath\n+                                ? new TarArchiveEntry(base + File.separator + file.toFile())\n+                                : new TarArchiveEntry(file.toFile());\n+\n+                        entry.setName(hasBasePath ? base + File.separator + relativePath.toString() : relativePath.toString());\n+                        if (file.toFile().canExecute()) {\n+                            entry.setMode(entry.getMode() | 0755);\n+                        }\n+                        entry.setSize(attrs.size());\n+                        putTarEntry(tout, entry, file);\n+                        return FileVisitResult.CONTINUE;\n+                    }\n+                });\n+                tout.flush();\n+            }\n+            return tempFile;\n+\n+        } catch (IOException e) {\n+            throw DekorateException.launderThrowable(e);\n+        }\n+    }\n+\n+    public static File packageFile(Path root, Path... additional) {\n+        return packageFile(root, null, additional);\n+    }\n+\n+    public static File packageFile(Path root, String base, Path... additional) {\n+        try {\n+            final Set<String> includes = Arrays\n+                    .stream(additional)\n+                    .map(p -> p.toAbsolutePath().toString())\n+                    .collect(Collectors.toSet());\n+\n+            File tempFile = Files.createTempFile(Paths.get(DEFAULT_TEMP_DIR), DOCKER_PREFIX, BZIP2_SUFFIX).toFile();\n+            try (final TarArchiveOutputStream tout = buildTarStream(tempFile)) {\n+                Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n+                    @Override\n+                    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) {\n+                        return FileVisitResult.CONTINUE;\n+                    }\n+\n+                    @Override\n+                    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n+                        String absolutePath = file.toAbsolutePath().toString();\n+                        if (!shouldInclude(absolutePath, includes)) {\n+                            return FileVisitResult.CONTINUE;\n+                        }\n+                        final Path relativePath = root.relativize(file);\n+                        final boolean hasBasePath = !StringUtil.isBlank(base);\n+                        final TarArchiveEntry entry = hasBasePath\n+                                ? new TarArchiveEntry(base + File.separator + file.toFile())\n+                                : new TarArchiveEntry(file.toFile());\n+\n+                        entry.setName(hasBasePath ? base + File.separator + relativePath.toString() : relativePath.toString());\n+                        if (file.toFile().canExecute()) {\n+                            entry.setMode(entry.getMode() | 0755);\n+                        }\n+                        entry.setSize(attrs.size());\n+                        putTarEntry(tout, entry, file);\n+                        return FileVisitResult.CONTINUE;\n+                    }\n+                });\n+                tout.flush();\n+            }\n+            return tempFile;\n+\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public static void putTarEntry(TarArchiveOutputStream tarArchiveOutputStream, TarArchiveEntry tarArchiveEntry,\n+            Path inputPath) throws IOException {\n+        tarArchiveEntry.setSize(Files.size(inputPath));\n+        tarArchiveOutputStream.putArchiveEntry(tarArchiveEntry);\n+        Files.copy(inputPath, tarArchiveOutputStream);\n+        tarArchiveOutputStream.closeArchiveEntry();\n+    }\n+\n+    public static TarArchiveOutputStream buildTarStream(File outputPath) throws IOException {\n+        FileOutputStream fout = new FileOutputStream(outputPath);\n+        BufferedOutputStream bout = new BufferedOutputStream(fout);\n+        //BZip2CompressorOutputStream bzout = new BZip2CompressorOutputStream(bout);\n+        TarArchiveOutputStream stream = new TarArchiveOutputStream(bout);\n+        stream.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX);\n+        return stream;\n+    }\n+\n+    public static void tar(Path inputPath, Path outputPath) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad2012f78968f77be03653d48ac806576aa08a3a"}, "originalPosition": 148}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5NDIxMTk5", "url": "https://github.com/quarkusio/quarkus/pull/11760#pullrequestreview-479421199", "createdAt": "2020-09-01T05:58:59Z", "commit": {"oid": "ad2012f78968f77be03653d48ac806576aa08a3a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNTo1ODo1OVrOHKk2Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNTo1ODo1OVrOHKk2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg1MTUwNw==", "bodyText": "Are you sure that using 0755 like this is correct?", "url": "https://github.com/quarkusio/quarkus/pull/11760#discussion_r480851507", "createdAt": "2020-09-01T05:58:59Z", "author": {"login": "geoand"}, "path": "extensions/container-image/container-image-s2i/deployment/src/main/java/io/quarkus/container/image/s2i/deployment/PackageUtil.java", "diffHunk": "@@ -0,0 +1,216 @@\n+\n+package io.quarkus.container.image.s2i.deployment;\n+\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.jsoup.helper.StringUtil;\n+\n+import io.dekorate.DekorateException;\n+import io.dekorate.deps.commons.compress.archivers.tar.TarArchiveEntry;\n+import io.dekorate.deps.commons.compress.archivers.tar.TarArchiveOutputStream;\n+\n+public class PackageUtil {\n+\n+    private static final String DEFAULT_DOCKERFILE = \"Dockerfile\";\n+    private static final String DOCKER_IGNORE = \".dockerignore\";\n+\n+    protected static final String DEFAULT_TEMP_DIR = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n+    protected static final String DOCKER_PREFIX = \"docker-\";\n+    protected static final String BZIP2_SUFFIX = \".tar.bzip2\";\n+\n+    private static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n+\n+    public static File packageFile(String path) {\n+        return packageFile(path, null);\n+    }\n+\n+    public static File packageFile(String path, String base) {\n+        try {\n+            final Path root = Paths.get(path).getParent();\n+            File tempFile = Files.createTempFile(Paths.get(DEFAULT_TEMP_DIR), DOCKER_PREFIX, BZIP2_SUFFIX).toFile();\n+            try (final TarArchiveOutputStream tout = buildTarStream(tempFile)) {\n+                Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n+                    @Override\n+                    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) {\n+                        return FileVisitResult.CONTINUE;\n+                    }\n+\n+                    @Override\n+                    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n+                        String absolutePath = file.toAbsolutePath().toString();\n+                        if (!path.equals(absolutePath)) {\n+                            return FileVisitResult.CONTINUE;\n+                        }\n+                        final Path relativePath = root.relativize(file);\n+                        final boolean hasBasePath = !StringUtil.isBlank(base);\n+                        final TarArchiveEntry entry = hasBasePath\n+                                ? new TarArchiveEntry(base + File.separator + file.toFile())\n+                                : new TarArchiveEntry(file.toFile());\n+\n+                        entry.setName(hasBasePath ? base + File.separator + relativePath.toString() : relativePath.toString());\n+                        if (file.toFile().canExecute()) {\n+                            entry.setMode(entry.getMode() | 0755);\n+                        }\n+                        entry.setSize(attrs.size());\n+                        putTarEntry(tout, entry, file);\n+                        return FileVisitResult.CONTINUE;\n+                    }\n+                });\n+                tout.flush();\n+            }\n+            return tempFile;\n+\n+        } catch (IOException e) {\n+            throw DekorateException.launderThrowable(e);\n+        }\n+    }\n+\n+    public static File packageFile(Path root, Path... additional) {\n+        return packageFile(root, null, additional);\n+    }\n+\n+    public static File packageFile(Path root, String base, Path... additional) {\n+        try {\n+            final Set<String> includes = Arrays\n+                    .stream(additional)\n+                    .map(p -> p.toAbsolutePath().toString())\n+                    .collect(Collectors.toSet());\n+\n+            File tempFile = Files.createTempFile(Paths.get(DEFAULT_TEMP_DIR), DOCKER_PREFIX, BZIP2_SUFFIX).toFile();\n+            try (final TarArchiveOutputStream tout = buildTarStream(tempFile)) {\n+                Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n+                    @Override\n+                    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) {\n+                        return FileVisitResult.CONTINUE;\n+                    }\n+\n+                    @Override\n+                    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n+                        String absolutePath = file.toAbsolutePath().toString();\n+                        if (!shouldInclude(absolutePath, includes)) {\n+                            return FileVisitResult.CONTINUE;\n+                        }\n+                        final Path relativePath = root.relativize(file);\n+                        final boolean hasBasePath = !StringUtil.isBlank(base);\n+                        final TarArchiveEntry entry = hasBasePath\n+                                ? new TarArchiveEntry(base + File.separator + file.toFile())\n+                                : new TarArchiveEntry(file.toFile());\n+\n+                        entry.setName(hasBasePath ? base + File.separator + relativePath.toString() : relativePath.toString());\n+                        if (file.toFile().canExecute()) {\n+                            entry.setMode(entry.getMode() | 0755);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad2012f78968f77be03653d48ac806576aa08a3a"}, "originalPosition": 115}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5NDIxNTE1", "url": "https://github.com/quarkusio/quarkus/pull/11760#pullrequestreview-479421515", "createdAt": "2020-09-01T05:59:46Z", "commit": {"oid": "ad2012f78968f77be03653d48ac806576aa08a3a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNTo1OTo0NlrOHKk4Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNTo1OTo0NlrOHKk4Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg1MjA3MQ==", "bodyText": "This method seems to have plenty of similarities with packageFile. Can the common code be extracted?", "url": "https://github.com/quarkusio/quarkus/pull/11760#discussion_r480852071", "createdAt": "2020-09-01T05:59:46Z", "author": {"login": "geoand"}, "path": "extensions/container-image/container-image-s2i/deployment/src/main/java/io/quarkus/container/image/s2i/deployment/PackageUtil.java", "diffHunk": "@@ -0,0 +1,216 @@\n+\n+package io.quarkus.container.image.s2i.deployment;\n+\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.jsoup.helper.StringUtil;\n+\n+import io.dekorate.DekorateException;\n+import io.dekorate.deps.commons.compress.archivers.tar.TarArchiveEntry;\n+import io.dekorate.deps.commons.compress.archivers.tar.TarArchiveOutputStream;\n+\n+public class PackageUtil {\n+\n+    private static final String DEFAULT_DOCKERFILE = \"Dockerfile\";\n+    private static final String DOCKER_IGNORE = \".dockerignore\";\n+\n+    protected static final String DEFAULT_TEMP_DIR = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n+    protected static final String DOCKER_PREFIX = \"docker-\";\n+    protected static final String BZIP2_SUFFIX = \".tar.bzip2\";\n+\n+    private static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n+\n+    public static File packageFile(String path) {\n+        return packageFile(path, null);\n+    }\n+\n+    public static File packageFile(String path, String base) {\n+        try {\n+            final Path root = Paths.get(path).getParent();\n+            File tempFile = Files.createTempFile(Paths.get(DEFAULT_TEMP_DIR), DOCKER_PREFIX, BZIP2_SUFFIX).toFile();\n+            try (final TarArchiveOutputStream tout = buildTarStream(tempFile)) {\n+                Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n+                    @Override\n+                    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) {\n+                        return FileVisitResult.CONTINUE;\n+                    }\n+\n+                    @Override\n+                    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n+                        String absolutePath = file.toAbsolutePath().toString();\n+                        if (!path.equals(absolutePath)) {\n+                            return FileVisitResult.CONTINUE;\n+                        }\n+                        final Path relativePath = root.relativize(file);\n+                        final boolean hasBasePath = !StringUtil.isBlank(base);\n+                        final TarArchiveEntry entry = hasBasePath\n+                                ? new TarArchiveEntry(base + File.separator + file.toFile())\n+                                : new TarArchiveEntry(file.toFile());\n+\n+                        entry.setName(hasBasePath ? base + File.separator + relativePath.toString() : relativePath.toString());\n+                        if (file.toFile().canExecute()) {\n+                            entry.setMode(entry.getMode() | 0755);\n+                        }\n+                        entry.setSize(attrs.size());\n+                        putTarEntry(tout, entry, file);\n+                        return FileVisitResult.CONTINUE;\n+                    }\n+                });\n+                tout.flush();\n+            }\n+            return tempFile;\n+\n+        } catch (IOException e) {\n+            throw DekorateException.launderThrowable(e);\n+        }\n+    }\n+\n+    public static File packageFile(Path root, Path... additional) {\n+        return packageFile(root, null, additional);\n+    }\n+\n+    public static File packageFile(Path root, String base, Path... additional) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad2012f78968f77be03653d48ac806576aa08a3a"}, "originalPosition": 86}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0fb07808475060ebb0decd455078c90b96a551ca", "author": {"user": {"login": "iocanel", "name": "Ioannis Canellos"}}, "url": "https://github.com/quarkusio/quarkus/commit/0fb07808475060ebb0decd455078c90b96a551ca", "committedDate": "2020-09-03T07:50:21Z", "message": "refactor: move docker stratgey for openshift into separate module."}, "afterCommit": {"oid": "a5228a7c88a361ea80f7cc141838a405413b8526", "author": {"user": {"login": "iocanel", "name": "Ioannis Canellos"}}, "url": "https://github.com/quarkusio/quarkus/commit/a5228a7c88a361ea80f7cc141838a405413b8526", "committedDate": "2020-09-23T14:41:12Z", "message": "refactor: move docker stratgey for openshift into separate module."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a5228a7c88a361ea80f7cc141838a405413b8526", "author": {"user": {"login": "iocanel", "name": "Ioannis Canellos"}}, "url": "https://github.com/quarkusio/quarkus/commit/a5228a7c88a361ea80f7cc141838a405413b8526", "committedDate": "2020-09-23T14:41:12Z", "message": "refactor: move docker stratgey for openshift into separate module."}, "afterCommit": {"oid": "71e488fbd7079f8c5894cb65061b401484fef71c", "author": {"user": {"login": "iocanel", "name": "Ioannis Canellos"}}, "url": "https://github.com/quarkusio/quarkus/commit/71e488fbd7079f8c5894cb65061b401484fef71c", "committedDate": "2020-09-24T06:01:40Z", "message": "refactor: move docker stratgey for openshift into separate module."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "71e488fbd7079f8c5894cb65061b401484fef71c", "author": {"user": {"login": "iocanel", "name": "Ioannis Canellos"}}, "url": "https://github.com/quarkusio/quarkus/commit/71e488fbd7079f8c5894cb65061b401484fef71c", "committedDate": "2020-09-24T06:01:40Z", "message": "refactor: move docker stratgey for openshift into separate module."}, "afterCommit": {"oid": "520c69d93862d9d8a1ba00e04936d0227314b15b", "author": {"user": {"login": "iocanel", "name": "Ioannis Canellos"}}, "url": "https://github.com/quarkusio/quarkus/commit/520c69d93862d9d8a1ba00e04936d0227314b15b", "committedDate": "2020-09-24T07:52:48Z", "message": "refactor: move docker stratgey for openshift into separate module."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "520c69d93862d9d8a1ba00e04936d0227314b15b", "author": {"user": {"login": "iocanel", "name": "Ioannis Canellos"}}, "url": "https://github.com/quarkusio/quarkus/commit/520c69d93862d9d8a1ba00e04936d0227314b15b", "committedDate": "2020-09-24T07:52:48Z", "message": "refactor: move docker stratgey for openshift into separate module."}, "afterCommit": {"oid": "12d812a47b136a16cfd5b37b322e09f824f68de8", "author": {"user": {"login": "iocanel", "name": "Ioannis Canellos"}}, "url": "https://github.com/quarkusio/quarkus/commit/12d812a47b136a16cfd5b37b322e09f824f68de8", "committedDate": "2020-09-24T07:53:59Z", "message": "refactor: move docker stratgey for openshift into separate module."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MzUzODAw", "url": "https://github.com/quarkusio/quarkus/pull/11760#pullrequestreview-496353800", "createdAt": "2020-09-25T11:58:10Z", "commit": {"oid": "12d812a47b136a16cfd5b37b322e09f824f68de8"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMTo1ODoxMFrOHYApIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjowNjoyMlrOHYA3_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzODQwMg==", "bodyText": "Probably best to have these capitalized?", "url": "https://github.com/quarkusio/quarkus/pull/11760#discussion_r494938402", "createdAt": "2020-09-25T11:58:10Z", "author": {"login": "geoand"}, "path": "extensions/container-image/container-image-openshift/deployment/src/main/java/io/quarkus/container/image/openshift/deployment/BuildStrategy.java", "diffHunk": "@@ -0,0 +1,9 @@\n+\n+package io.quarkus.container.image.openshift.deployment;\n+\n+public enum BuildStrategy {\n+\n+    binary,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12d812a47b136a16cfd5b37b322e09f824f68de8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0MDQ0OA==", "bodyText": "This name is too vague IMHO. I would prefer if it were named mergeConfig", "url": "https://github.com/quarkusio/quarkus/pull/11760#discussion_r494940448", "createdAt": "2020-09-25T12:02:38Z", "author": {"login": "geoand"}, "path": "extensions/container-image/container-image-openshift/deployment/src/main/java/io/quarkus/container/image/openshift/deployment/OpenshiftUtils.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package io.quarkus.container.image.openshift.deployment;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.config.ConfigProvider;\n+\n+import io.dekorate.deps.kubernetes.api.model.HasMetadata;\n+import io.dekorate.deps.kubernetes.api.model.KubernetesListBuilder;\n+import io.dekorate.deps.kubernetes.api.model.ObjectReference;\n+import io.dekorate.deps.openshift.api.model.ImageStreamTag;\n+import io.dekorate.deps.openshift.api.model.SourceBuildStrategyFluent;\n+import io.dekorate.deps.openshift.client.OpenShiftClient;\n+import io.dekorate.kubernetes.decorator.Decorator;\n+\n+/**\n+ * This class is copied from Dekorate, with the difference that the {@code waitForImageStreamTags} method\n+ * take a client as the argument\n+ *\n+ * TODO: Update dekorate to take the client as an argument and then remove this class\n+ */\n+public class OpenshiftUtils {\n+\n+    /**\n+     * Wait for the references ImageStreamTags to become available.\n+     *\n+     * @param client The openshift client used to check the status of the ImageStream\n+     * @param items A list of items, possibly referencing image stream tags.\n+     * @param amount The max amount of time to wait.\n+     * @param timeUnit The time unit of the time to wait.\n+     * @return True if the items became available false otherwise.\n+     */\n+    public static boolean waitForImageStreamTags(OpenShiftClient client, Collection<HasMetadata> items, long amount,\n+            TimeUnit timeUnit) {\n+        if (items == null || items.isEmpty()) {\n+            return true;\n+        }\n+        final List<String> tags = new ArrayList<>();\n+        new KubernetesListBuilder()\n+                .withItems(new ArrayList<>(items))\n+                .accept(new Decorator<SourceBuildStrategyFluent>() {\n+                    @Override\n+                    public void visit(SourceBuildStrategyFluent strategy) {\n+                        ObjectReference from = strategy.buildFrom();\n+                        if (from.getKind().equals(\"ImageStreamTag\")) {\n+                            tags.add(from.getName());\n+                        }\n+                    }\n+                }).build();\n+\n+        boolean tagsMissing = true;\n+        long started = System.currentTimeMillis();\n+        long elapsed = 0;\n+\n+        while (tagsMissing && elapsed < timeUnit.toMillis(amount) && !Thread.interrupted()) {\n+            tagsMissing = false;\n+            for (String tag : tags) {\n+                ImageStreamTag t = client.imageStreamTags().withName(tag).get();\n+                if (t == null) {\n+                    tagsMissing = true;\n+                }\n+            }\n+\n+            if (tagsMissing) {\n+                try {\n+                    Thread.sleep(1000);\n+                    elapsed = System.currentTimeMillis() - started;\n+                } catch (InterruptedException e) {\n+                    Thread.currentThread().interrupt();\n+                }\n+            }\n+        }\n+        return !tagsMissing;\n+    }\n+\n+    /**\n+     * Merges {@link OpenshiftConfig} with {@link S2iConfig} prioritizing in the former.\n+     * \n+     * @param openshiftConfig the Openshift config\n+     * @param s2iConfig the s2i config\n+     * @param an instance of {@link OpenshiftConfig} with the merged configuration.\n+     */\n+    public static OpenshiftConfig merge(OpenshiftConfig openshiftConfig, S2iConfig s2iConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12d812a47b136a16cfd5b37b322e09f824f68de8"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0MjIwNw==", "bodyText": "What's the rationale of this change? I think we at least need a comment about it", "url": "https://github.com/quarkusio/quarkus/pull/11760#discussion_r494942207", "createdAt": "2020-09-25T12:06:22Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "diffHunk": "@@ -378,6 +383,16 @@ public void build(ApplicationInfoBuildItem applicationInfo,\n                     kubernetesHealthLivenessPath,\n                     kubernetesHealthReadinessPath);\n \n+            decorators.stream().filter(d -> d.matches(Decorator.class)).forEach(i -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12d812a47b136a16cfd5b37b322e09f824f68de8"}, "originalPosition": 46}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "12d812a47b136a16cfd5b37b322e09f824f68de8", "author": {"user": {"login": "iocanel", "name": "Ioannis Canellos"}}, "url": "https://github.com/quarkusio/quarkus/commit/12d812a47b136a16cfd5b37b322e09f824f68de8", "committedDate": "2020-09-24T07:53:59Z", "message": "refactor: move docker stratgey for openshift into separate module."}, "afterCommit": {"oid": "8e45bf5a5dbf4fa27b2a866880ca24af0e1ab3d3", "author": {"user": {"login": "iocanel", "name": "Ioannis Canellos"}}, "url": "https://github.com/quarkusio/quarkus/commit/8e45bf5a5dbf4fa27b2a866880ca24af0e1ab3d3", "committedDate": "2020-09-29T08:04:10Z", "message": "refactor: move docker stratgey for openshift into separate module."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f9dc06f2ba81f13812f3a6f0ea836540831d8e7", "author": {"user": {"login": "iocanel", "name": "Ioannis Canellos"}}, "url": "https://github.com/quarkusio/quarkus/commit/4f9dc06f2ba81f13812f3a6f0ea836540831d8e7", "committedDate": "2020-09-29T08:04:10Z", "message": "feat: Allow passing decorators via kubernetes spi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc712d823431068bc52d65d7c306964139e76ee4", "author": {"user": {"login": "iocanel", "name": "Ioannis Canellos"}}, "url": "https://github.com/quarkusio/quarkus/commit/fc712d823431068bc52d65d7c306964139e76ee4", "committedDate": "2020-09-29T08:04:10Z", "message": "feat: Implement docker strategy for Openshift BuildConfig"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e45bf5a5dbf4fa27b2a866880ca24af0e1ab3d3", "author": {"user": {"login": "iocanel", "name": "Ioannis Canellos"}}, "url": "https://github.com/quarkusio/quarkus/commit/8e45bf5a5dbf4fa27b2a866880ca24af0e1ab3d3", "committedDate": "2020-09-29T08:04:10Z", "message": "refactor: move docker stratgey for openshift into separate module."}, "afterCommit": {"oid": "f507274a95675539f247aee9b6a16804e9ed14c5", "author": {"user": {"login": "iocanel", "name": "Ioannis Canellos"}}, "url": "https://github.com/quarkusio/quarkus/commit/f507274a95675539f247aee9b6a16804e9ed14c5", "committedDate": "2020-09-29T10:00:52Z", "message": "refactor: move docker stratgey for openshift into separate module."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f507274a95675539f247aee9b6a16804e9ed14c5", "author": {"user": {"login": "iocanel", "name": "Ioannis Canellos"}}, "url": "https://github.com/quarkusio/quarkus/commit/f507274a95675539f247aee9b6a16804e9ed14c5", "committedDate": "2020-09-29T10:00:52Z", "message": "refactor: move docker stratgey for openshift into separate module."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NjAyMzUz", "url": "https://github.com/quarkusio/quarkus/pull/11760#pullrequestreview-498602353", "createdAt": "2020-09-29T15:17:13Z", "commit": {"oid": "f507274a95675539f247aee9b6a16804e9ed14c5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 652, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}