{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MTc5MjY2", "number": 7231, "title": "Add support for MutinyVerticle", "bodyText": "Just add support for MutinyVerticle - a type of verticle (Vert.x components) using the Mutiny API.\nThis PR contains the feature, the documentation, and tests.", "createdAt": "2020-02-17T14:54:18Z", "url": "https://github.com/quarkusio/quarkus/pull/7231", "merged": true, "mergeCommit": {"oid": "31891025a10b8481627a1d2f3e2c67ad90207575"}, "closed": true, "closedAt": "2020-02-21T16:20:12Z", "author": {"login": "cescoffier"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFfoiHABqjMwNDY2MTk1Mzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGQeS8AFqTM2MjE4MTE5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ec3b4c3f4e993f0a2da568137726f744b6e634f4", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/ec3b4c3f4e993f0a2da568137726f744b6e634f4", "committedDate": "2020-02-14T10:54:18Z", "message": "Document verticle support\n\nAlso add a test verifying that verticle instances can be beans."}, "afterCommit": {"oid": "43037d6f096531fdb554a685e033ceb1f32255d6", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/43037d6f096531fdb554a685e033ceb1f32255d6", "committedDate": "2020-02-18T10:46:37Z", "message": "Document verticle support\n\nAlso add a test verifying that verticle instances can be beans."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "43037d6f096531fdb554a685e033ceb1f32255d6", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/43037d6f096531fdb554a685e033ceb1f32255d6", "committedDate": "2020-02-18T10:46:37Z", "message": "Document verticle support\n\nAlso add a test verifying that verticle instances can be beans."}, "afterCommit": {"oid": "085d0955bf716c5114f4b6a78d5797c1e8e691b0", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/085d0955bf716c5114f4b6a78d5797c1e8e691b0", "committedDate": "2020-02-19T10:02:29Z", "message": "Document verticle support\n\nAlso add a test verifying that verticle instances can be beans."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMTk5NTc3", "url": "https://github.com/quarkusio/quarkus/pull/7231#pullrequestreview-361199577", "createdAt": "2020-02-19T15:48:40Z", "commit": {"oid": "085d0955bf716c5114f4b6a78d5797c1e8e691b0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNTo0ODo0MVrOFrsZwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNTo0ODo0MVrOFrsZwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM2MDU3Ng==", "bodyText": "It should quite easy to deploy those verticles automatically.\nSomething like:\nvoid deploy(@Observes StartupEvent event, Vertx vertx, Instance<AbstractVerticle> verticles) {\n   for (AbstractVerticle verticle : verticles) {\n     vertx.deployVerticle(verticle).await().indefinitely();\n   }\n}", "url": "https://github.com/quarkusio/quarkus/pull/7231#discussion_r381360576", "createdAt": "2020-02-19T15:48:41Z", "author": {"login": "mkouba"}, "path": "docs/src/main/asciidoc/vertx.adoc", "diffHunk": "@@ -498,6 +498,86 @@ Then, create the native executable with:\n ./mvnw package -Pnative\n ----\n \n+== Deploying verticles\n+\n+https://vertx.io/docs/vertx-core/java/#_verticles[Verticles] is \"a simple, scalable, actor-like deployment and concurrency model\" provided by _Vert.x_.\n+This model does not claim to be a strict actor-model implementation, but it does share similarities especially with respect to concurrency, scaling and deployment.\n+To use this model, you write and _deploy_ verticles, communicating with each other by sending messages on the event bus.\n+\n+You can deploy _verticles_ in Quarkus.\n+It supports:\n+\n+* _bare_ verticle - Java classes extending `io.vertx.core.AbstractVerticle`\n+* _Mutiny_ verticle - Java classes extending `io.smallrye.mutiny.vertx.core.AbstractVerticle`\n+\n+To deploy verticles, use the regular Vert.x API:\n+\n+[source, java]\n+====\n+@Inject Vertx vertx;\n+\n+// ...\n+vertx.deployVerticle(MyVerticle.class.getName(), ar -> { });\n+vertx.deployVerticle(new MyVerticle(), ar -> { });\n+====\n+\n+You can also pass deployment options to configure the verticle as well as set the number of instances.\n+\n+Verticles are not _beans_ by default.\n+However, you can implement them as _ApplicationScoped_ beans and get injection support:\n+\n+[source, java]\n+====\n+package io.quarkus.vertx.verticles;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.smallrye.mutiny.vertx.core.AbstractVerticle;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+@ApplicationScoped\n+public class MyBeanVerticle extends AbstractVerticle {\n+\n+    @ConfigProperty(name = \"address\") String address;\n+\n+    @Override\n+    public Uni<Void> asyncStart() {\n+        return vertx.eventBus().consumer(address)\n+                .handler(m -> m.replyAndForget(\"hello\"))\n+                .completionHandler();\n+    }\n+}\n+====\n+\n+Don't inject the `vertx` instance in an injected verticle.\n+Access the `vertx` instance using the `vertx` file in your `start` / `asyncStart` method.\n+\n+Then, deploy the verticle instance with:\n+\n+[source, java]\n+====\n+package io.quarkus.vertx.verticles;\n+\n+import io.quarkus.runtime.StartupEvent;\n+import io.vertx.mutiny.core.Vertx;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+@ApplicationScoped\n+public class VerticleDeployer {\n+\n+    @Inject Vertx vertx;\n+    @Inject MyBeanVerticle verticle;\n+\n+    public void init(@Observes StartupEvent e) {\n+         vertx.deployVerticle(verticle).await().indefinitely();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "085d0955bf716c5114f4b6a78d5797c1e8e691b0"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMjAzNjQx", "url": "https://github.com/quarkusio/quarkus/pull/7231#pullrequestreview-361203641", "createdAt": "2020-02-19T15:52:39Z", "commit": {"oid": "085d0955bf716c5114f4b6a78d5797c1e8e691b0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNTo1MjozOVrOFrskPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNTo1MjozOVrOFrskPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM2MzI2Mg==", "bodyText": "I'd reword this sentence. Maybe something like \"You don't have to inject the Vertx instance but instead leverage the instance stored in the protected field of AbstractVerticle\"...", "url": "https://github.com/quarkusio/quarkus/pull/7231#discussion_r381363262", "createdAt": "2020-02-19T15:52:39Z", "author": {"login": "mkouba"}, "path": "docs/src/main/asciidoc/vertx.adoc", "diffHunk": "@@ -498,6 +498,86 @@ Then, create the native executable with:\n ./mvnw package -Pnative\n ----\n \n+== Deploying verticles\n+\n+https://vertx.io/docs/vertx-core/java/#_verticles[Verticles] is \"a simple, scalable, actor-like deployment and concurrency model\" provided by _Vert.x_.\n+This model does not claim to be a strict actor-model implementation, but it does share similarities especially with respect to concurrency, scaling and deployment.\n+To use this model, you write and _deploy_ verticles, communicating with each other by sending messages on the event bus.\n+\n+You can deploy _verticles_ in Quarkus.\n+It supports:\n+\n+* _bare_ verticle - Java classes extending `io.vertx.core.AbstractVerticle`\n+* _Mutiny_ verticle - Java classes extending `io.smallrye.mutiny.vertx.core.AbstractVerticle`\n+\n+To deploy verticles, use the regular Vert.x API:\n+\n+[source, java]\n+====\n+@Inject Vertx vertx;\n+\n+// ...\n+vertx.deployVerticle(MyVerticle.class.getName(), ar -> { });\n+vertx.deployVerticle(new MyVerticle(), ar -> { });\n+====\n+\n+You can also pass deployment options to configure the verticle as well as set the number of instances.\n+\n+Verticles are not _beans_ by default.\n+However, you can implement them as _ApplicationScoped_ beans and get injection support:\n+\n+[source, java]\n+====\n+package io.quarkus.vertx.verticles;\n+\n+import io.smallrye.mutiny.Uni;\n+import io.smallrye.mutiny.vertx.core.AbstractVerticle;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+@ApplicationScoped\n+public class MyBeanVerticle extends AbstractVerticle {\n+\n+    @ConfigProperty(name = \"address\") String address;\n+\n+    @Override\n+    public Uni<Void> asyncStart() {\n+        return vertx.eventBus().consumer(address)\n+                .handler(m -> m.replyAndForget(\"hello\"))\n+                .completionHandler();\n+    }\n+}\n+====\n+\n+Don't inject the `vertx` instance in an injected verticle.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "085d0955bf716c5114f4b6a78d5797c1e8e691b0"}, "originalPosition": 56}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "085d0955bf716c5114f4b6a78d5797c1e8e691b0", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/085d0955bf716c5114f4b6a78d5797c1e8e691b0", "committedDate": "2020-02-19T10:02:29Z", "message": "Document verticle support\n\nAlso add a test verifying that verticle instances can be beans."}, "afterCommit": {"oid": "88793507e09f1c9fd94028fa7c66559a9ab8c98a", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/88793507e09f1c9fd94028fa7c66559a9ab8c98a", "committedDate": "2020-02-20T10:08:59Z", "message": "Document verticle support\n\nAlso add a test verifying that verticle instances can be beans."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "88793507e09f1c9fd94028fa7c66559a9ab8c98a", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/88793507e09f1c9fd94028fa7c66559a9ab8c98a", "committedDate": "2020-02-20T10:08:59Z", "message": "Document verticle support\n\nAlso add a test verifying that verticle instances can be beans."}, "afterCommit": {"oid": "7accdaecc5435388bc3f6063045b61f3b593338e", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/7accdaecc5435388bc3f6063045b61f3b593338e", "committedDate": "2020-02-20T10:10:35Z", "message": "Document verticle support\n\nAlso add a test verifying that verticle instances can be beans."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7accdaecc5435388bc3f6063045b61f3b593338e", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/7accdaecc5435388bc3f6063045b61f3b593338e", "committedDate": "2020-02-20T10:10:35Z", "message": "Document verticle support\n\nAlso add a test verifying that verticle instances can be beans."}, "afterCommit": {"oid": "a4a7c9aa9561a928789e58e9bf8893f88495fcc1", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/a4a7c9aa9561a928789e58e9bf8893f88495fcc1", "committedDate": "2020-02-20T13:20:37Z", "message": "Document verticle support\n\nAlso add a test verifying that verticle instances can be beans."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMDE0MTg4", "url": "https://github.com/quarkusio/quarkus/pull/7231#pullrequestreview-362014188", "createdAt": "2020-02-20T15:48:27Z", "commit": {"oid": "a4a7c9aa9561a928789e58e9bf8893f88495fcc1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "859cc28a7d30bffb4b5377ce90cec97b29efc63e", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/859cc28a7d30bffb4b5377ce90cec97b29efc63e", "committedDate": "2020-02-20T19:27:00Z", "message": "Add support for Mutiny Verticle\n\nMutiny Verticle is a variant of Verticle using the Mutiny API."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8755db2707688d743960ef3d1a63019b1867f50b", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/8755db2707688d743960ef3d1a63019b1867f50b", "committedDate": "2020-02-20T19:27:03Z", "message": "Document verticle support\n\nAlso add a test verifying that verticle instances can be beans."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a4a7c9aa9561a928789e58e9bf8893f88495fcc1", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/a4a7c9aa9561a928789e58e9bf8893f88495fcc1", "committedDate": "2020-02-20T13:20:37Z", "message": "Document verticle support\n\nAlso add a test verifying that verticle instances can be beans."}, "afterCommit": {"oid": "8755db2707688d743960ef3d1a63019b1867f50b", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/8755db2707688d743960ef3d1a63019b1867f50b", "committedDate": "2020-02-20T19:27:03Z", "message": "Document verticle support\n\nAlso add a test verifying that verticle instances can be beans."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMTgxMTk1", "url": "https://github.com/quarkusio/quarkus/pull/7231#pullrequestreview-362181195", "createdAt": "2020-02-20T19:41:12Z", "commit": {"oid": "8755db2707688d743960ef3d1a63019b1867f50b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4985, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}