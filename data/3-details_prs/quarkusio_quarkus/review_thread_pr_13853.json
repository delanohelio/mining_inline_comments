{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM4MTAyODMz", "number": 13853, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjoxMTozMVrOFFD_Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOTowODo1NlrOFFei9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODUyNTA2OnYy", "diffSide": "RIGHT", "path": "extensions/resteasy-reactive/quarkus-jaxrs-client/deployment/src/main/java/io/quarkus/resteasy/reactive/client/deployment/ClientEndpointIndexer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjoxMTozMVrOIFYGrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjozODoxMlrOIFZYgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwODcxOQ==", "bodyText": "This method signature is a mine field:\n\nType paramType\nParameterType type\nString elementType\nString signature\n\nAnd of course, we reverse the order of type\u2026signature to signature, type in the call below :(", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542508719", "createdAt": "2020-12-14T16:11:31Z", "author": {"login": "FroMage"}, "path": "extensions/resteasy-reactive/quarkus-jaxrs-client/deployment/src/main/java/io/quarkus/resteasy/reactive/client/deployment/ClientEndpointIndexer.java", "diffHunk": "@@ -79,9 +79,9 @@ protected InjectableBean scanInjectableBean(ClassInfo currentClassInfo,\n \n     protected MethodParameter createMethodParameter(ClassInfo currentClassInfo, ClassInfo actualEndpointInfo, boolean encoded,\n             Type paramType, ClientIndexedParam parameterResult, String name, String defaultValue, ParameterType type,\n-            String elementType, boolean single) {\n+            String elementType, String signature, boolean single) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f13423f53f88f8ea13d22753499eb4e554bf5ab"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyOTY2Ng==", "bodyText": "Indeed... I'll move the signature String to at least make it less likely to fail", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542529666", "createdAt": "2020-12-14T16:38:12Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-reactive/quarkus-jaxrs-client/deployment/src/main/java/io/quarkus/resteasy/reactive/client/deployment/ClientEndpointIndexer.java", "diffHunk": "@@ -79,9 +79,9 @@ protected InjectableBean scanInjectableBean(ClassInfo currentClassInfo,\n \n     protected MethodParameter createMethodParameter(ClassInfo currentClassInfo, ClassInfo actualEndpointInfo, boolean encoded,\n             Type paramType, ClientIndexedParam parameterResult, String name, String defaultValue, ParameterType type,\n-            String elementType, boolean single) {\n+            String elementType, String signature, boolean single) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwODcxOQ=="}, "originalCommit": {"oid": "9f13423f53f88f8ea13d22753499eb4e554bf5ab"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODU0ODM0OnYy", "diffSide": "RIGHT", "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/RequestDeserializeHandler.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjoxNTo1OVrOIFYUEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODowMDoxMFrOIFdHeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxMjE0NA==", "bodyText": "Pretty scary that the TCK doesn't test this.", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542512144", "createdAt": "2020-12-14T16:15:59Z", "author": {"login": "FroMage"}, "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/RequestDeserializeHandler.java", "diffHunk": "@@ -25,12 +26,15 @@\n     private static final Logger log = Logger.getLogger(RequestDeserializeHandler.class);\n \n     private final Class<?> type;\n+    private final Type genericType;\n     private final MediaType mediaType;\n     private final ServerSerialisers serialisers;\n     private final int parameterIndex;\n \n-    public RequestDeserializeHandler(Class<?> type, MediaType mediaType, ServerSerialisers serialisers, int parameterIndex) {\n+    public RequestDeserializeHandler(Class<?> type, Type genericType, MediaType mediaType, ServerSerialisers serialisers,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f13423f53f88f8ea13d22753499eb4e554bf5ab"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyNDQxOQ==", "bodyText": "BTW, do we need a test for generic input types, or is this part of the next commits with List<String> request bodies?", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542524419", "createdAt": "2020-12-14T16:31:32Z", "author": {"login": "FroMage"}, "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/RequestDeserializeHandler.java", "diffHunk": "@@ -25,12 +26,15 @@\n     private static final Logger log = Logger.getLogger(RequestDeserializeHandler.class);\n \n     private final Class<?> type;\n+    private final Type genericType;\n     private final MediaType mediaType;\n     private final ServerSerialisers serialisers;\n     private final int parameterIndex;\n \n-    public RequestDeserializeHandler(Class<?> type, MediaType mediaType, ServerSerialisers serialisers, int parameterIndex) {\n+    public RequestDeserializeHandler(Class<?> type, Type genericType, MediaType mediaType, ServerSerialisers serialisers,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxMjE0NA=="}, "originalCommit": {"oid": "9f13423f53f88f8ea13d22753499eb4e554bf5ab"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzMDc2Ng==", "bodyText": "You mean something like List<T> for the input? If so, then we don't have such a test and we should add it.", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542530766", "createdAt": "2020-12-14T16:39:30Z", "author": {"login": "geoand"}, "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/RequestDeserializeHandler.java", "diffHunk": "@@ -25,12 +26,15 @@\n     private static final Logger log = Logger.getLogger(RequestDeserializeHandler.class);\n \n     private final Class<?> type;\n+    private final Type genericType;\n     private final MediaType mediaType;\n     private final ServerSerialisers serialisers;\n     private final int parameterIndex;\n \n-    public RequestDeserializeHandler(Class<?> type, MediaType mediaType, ServerSerialisers serialisers, int parameterIndex) {\n+    public RequestDeserializeHandler(Class<?> type, Type genericType, MediaType mediaType, ServerSerialisers serialisers,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxMjE0NA=="}, "originalCommit": {"oid": "9f13423f53f88f8ea13d22753499eb4e554bf5ab"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzNzczOA==", "bodyText": "Well, any generic type, really.", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542537738", "createdAt": "2020-12-14T16:48:06Z", "author": {"login": "FroMage"}, "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/RequestDeserializeHandler.java", "diffHunk": "@@ -25,12 +26,15 @@\n     private static final Logger log = Logger.getLogger(RequestDeserializeHandler.class);\n \n     private final Class<?> type;\n+    private final Type genericType;\n     private final MediaType mediaType;\n     private final ServerSerialisers serialisers;\n     private final int parameterIndex;\n \n-    public RequestDeserializeHandler(Class<?> type, MediaType mediaType, ServerSerialisers serialisers, int parameterIndex) {\n+    public RequestDeserializeHandler(Class<?> type, Type genericType, MediaType mediaType, ServerSerialisers serialisers,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxMjE0NA=="}, "originalCommit": {"oid": "9f13423f53f88f8ea13d22753499eb4e554bf5ab"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU5MDg0MQ==", "bodyText": "Test added in the last commit", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542590841", "createdAt": "2020-12-14T18:00:10Z", "author": {"login": "geoand"}, "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/RequestDeserializeHandler.java", "diffHunk": "@@ -25,12 +26,15 @@\n     private static final Logger log = Logger.getLogger(RequestDeserializeHandler.class);\n \n     private final Class<?> type;\n+    private final Type genericType;\n     private final MediaType mediaType;\n     private final ServerSerialisers serialisers;\n     private final int parameterIndex;\n \n-    public RequestDeserializeHandler(Class<?> type, MediaType mediaType, ServerSerialisers serialisers, int parameterIndex) {\n+    public RequestDeserializeHandler(Class<?> type, Type genericType, MediaType mediaType, ServerSerialisers serialisers,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxMjE0NA=="}, "originalCommit": {"oid": "9f13423f53f88f8ea13d22753499eb4e554bf5ab"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODYxMDI5OnYy", "diffSide": "RIGHT", "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/JacksonMessageBodyReader.java", "isResolved": true, "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjoyODowOFrOIFY5BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzo1OTozNFrOIFdF-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTYwNA==", "bodyText": "This is confusing given that String is not generic, so if type == String.class  then genericType == String.class must also be true or else something is super wrong in RR.", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542521604", "createdAt": "2020-12-14T16:28:08Z", "author": {"login": "FroMage"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/JacksonMessageBodyReader.java", "diffHunk": "@@ -56,4 +56,15 @@ private Object doReadFrom(Class<Object> type, Type genericType, InputStream enti\n         return reader.forType(reader.getTypeFactory().constructType(genericType != null ? genericType : type))\n                 .readValue(entityStream);\n     }\n+\n+    private boolean isReadable(MediaType mediaType, Class<?> type, Type genericType) {\n+        if (mediaType == null) {\n+            return false;\n+        }\n+        if (String.class.equals(type) && (String.class.equals(genericType) || (genericType == null))) { // don't attempt to read plain strings", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzMjEyNw==", "bodyText": "The idea here is to differentiate between String and List<String>. In the latter case, genericType will be a ParameterizedTypeImpl which we assume Jackson can handle.\nA simple String, we know Jackson can't handle.", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542532127", "createdAt": "2020-12-14T16:41:11Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/JacksonMessageBodyReader.java", "diffHunk": "@@ -56,4 +56,15 @@ private Object doReadFrom(Class<Object> type, Type genericType, InputStream enti\n         return reader.forType(reader.getTypeFactory().constructType(genericType != null ? genericType : type))\n                 .readValue(entityStream);\n     }\n+\n+    private boolean isReadable(MediaType mediaType, Class<?> type, Type genericType) {\n+        if (mediaType == null) {\n+            return false;\n+        }\n+        if (String.class.equals(type) && (String.class.equals(genericType) || (genericType == null))) { // don't attempt to read plain strings", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTYwNA=="}, "originalCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzNzIwNg==", "bodyText": "But if genericType is List<String> then type == List.class, not String.class.", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542537206", "createdAt": "2020-12-14T16:47:26Z", "author": {"login": "FroMage"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/JacksonMessageBodyReader.java", "diffHunk": "@@ -56,4 +56,15 @@ private Object doReadFrom(Class<Object> type, Type genericType, InputStream enti\n         return reader.forType(reader.getTypeFactory().constructType(genericType != null ? genericType : type))\n                 .readValue(entityStream);\n     }\n+\n+    private boolean isReadable(MediaType mediaType, Class<?> type, Type genericType) {\n+        if (mediaType == null) {\n+            return false;\n+        }\n+        if (String.class.equals(type) && (String.class.equals(genericType) || (genericType == null))) { // don't attempt to read plain strings", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTYwNA=="}, "originalCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzNzkzNA==", "bodyText": "Yeah, which is why the method returns false, no?", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542537934", "createdAt": "2020-12-14T16:48:24Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/JacksonMessageBodyReader.java", "diffHunk": "@@ -56,4 +56,15 @@ private Object doReadFrom(Class<Object> type, Type genericType, InputStream enti\n         return reader.forType(reader.getTypeFactory().constructType(genericType != null ? genericType : type))\n                 .readValue(entityStream);\n     }\n+\n+    private boolean isReadable(MediaType mediaType, Class<?> type, Type genericType) {\n+        if (mediaType == null) {\n+            return false;\n+        }\n+        if (String.class.equals(type) && (String.class.equals(genericType) || (genericType == null))) { // don't attempt to read plain strings", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTYwNA=="}, "originalCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU0MTQxNg==", "bodyText": "My point is that if String.class.equals(type) then the second part of the condition must ALWAYS be true. So it's redundant.", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542541416", "createdAt": "2020-12-14T16:52:50Z", "author": {"login": "FroMage"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/JacksonMessageBodyReader.java", "diffHunk": "@@ -56,4 +56,15 @@ private Object doReadFrom(Class<Object> type, Type genericType, InputStream enti\n         return reader.forType(reader.getTypeFactory().constructType(genericType != null ? genericType : type))\n                 .readValue(entityStream);\n     }\n+\n+    private boolean isReadable(MediaType mediaType, Class<?> type, Type genericType) {\n+        if (mediaType == null) {\n+            return false;\n+        }\n+        if (String.class.equals(type) && (String.class.equals(genericType) || (genericType == null))) { // don't attempt to read plain strings", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTYwNA=="}, "originalCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU1ODk3OA==", "bodyText": "OK, I see your point", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542558978", "createdAt": "2020-12-14T17:15:41Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/JacksonMessageBodyReader.java", "diffHunk": "@@ -56,4 +56,15 @@ private Object doReadFrom(Class<Object> type, Type genericType, InputStream enti\n         return reader.forType(reader.getTypeFactory().constructType(genericType != null ? genericType : type))\n                 .readValue(entityStream);\n     }\n+\n+    private boolean isReadable(MediaType mediaType, Class<?> type, Type genericType) {\n+        if (mediaType == null) {\n+            return false;\n+        }\n+        if (String.class.equals(type) && (String.class.equals(genericType) || (genericType == null))) { // don't attempt to read plain strings", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTYwNA=="}, "originalCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU2MzM2Mw==", "bodyText": "Checked this again and now I see why I did what I did.\nWhen genericType is List<String>, then type is String. This feels very wrong, but I am not sure I want to tackle it... (see my other comment).\nI'll make a lame attempt to fix it, but if things start to break, I really prefer to leave it as is for now and fix later properly on when we are all refreshed :)", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542563363", "createdAt": "2020-12-14T17:21:34Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/JacksonMessageBodyReader.java", "diffHunk": "@@ -56,4 +56,15 @@ private Object doReadFrom(Class<Object> type, Type genericType, InputStream enti\n         return reader.forType(reader.getTypeFactory().constructType(genericType != null ? genericType : type))\n                 .readValue(entityStream);\n     }\n+\n+    private boolean isReadable(MediaType mediaType, Class<?> type, Type genericType) {\n+        if (mediaType == null) {\n+            return false;\n+        }\n+        if (String.class.equals(type) && (String.class.equals(genericType) || (genericType == null))) { // don't attempt to read plain strings", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTYwNA=="}, "originalCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU2NDk5MA==", "bodyText": "Ah, so that's another consequence of the other issue. I can try to find the underlying issue tomorrow, I'd prefer to at least know what it is before adding weird stuff like this.", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542564990", "createdAt": "2020-12-14T17:23:48Z", "author": {"login": "FroMage"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/JacksonMessageBodyReader.java", "diffHunk": "@@ -56,4 +56,15 @@ private Object doReadFrom(Class<Object> type, Type genericType, InputStream enti\n         return reader.forType(reader.getTypeFactory().constructType(genericType != null ? genericType : type))\n                 .readValue(entityStream);\n     }\n+\n+    private boolean isReadable(MediaType mediaType, Class<?> type, Type genericType) {\n+        if (mediaType == null) {\n+            return false;\n+        }\n+        if (String.class.equals(type) && (String.class.equals(genericType) || (genericType == null))) { // don't attempt to read plain strings", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTYwNA=="}, "originalCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU2NTg0NQ==", "bodyText": "Yeah. I'll look into it more", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542565845", "createdAt": "2020-12-14T17:24:58Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/JacksonMessageBodyReader.java", "diffHunk": "@@ -56,4 +56,15 @@ private Object doReadFrom(Class<Object> type, Type genericType, InputStream enti\n         return reader.forType(reader.getTypeFactory().constructType(genericType != null ? genericType : type))\n                 .readValue(entityStream);\n     }\n+\n+    private boolean isReadable(MediaType mediaType, Class<?> type, Type genericType) {\n+        if (mediaType == null) {\n+            return false;\n+        }\n+        if (String.class.equals(type) && (String.class.equals(genericType) || (genericType == null))) { // don't attempt to read plain strings", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTYwNA=="}, "originalCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU2NjI4MA==", "bodyText": "I'll let you know what I find, but indeed the last commit might have to be changed considerably.", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542566280", "createdAt": "2020-12-14T17:25:32Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/JacksonMessageBodyReader.java", "diffHunk": "@@ -56,4 +56,15 @@ private Object doReadFrom(Class<Object> type, Type genericType, InputStream enti\n         return reader.forType(reader.getTypeFactory().constructType(genericType != null ? genericType : type))\n                 .readValue(entityStream);\n     }\n+\n+    private boolean isReadable(MediaType mediaType, Class<?> type, Type genericType) {\n+        if (mediaType == null) {\n+            return false;\n+        }\n+        if (String.class.equals(type) && (String.class.equals(genericType) || (genericType == null))) { // don't attempt to read plain strings", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTYwNA=="}, "originalCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU2NzYwNQ==", "bodyText": "I see where I messed up - looking to see what can be done.\nThanks for insisting :)", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542567605", "createdAt": "2020-12-14T17:27:14Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/JacksonMessageBodyReader.java", "diffHunk": "@@ -56,4 +56,15 @@ private Object doReadFrom(Class<Object> type, Type genericType, InputStream enti\n         return reader.forType(reader.getTypeFactory().constructType(genericType != null ? genericType : type))\n                 .readValue(entityStream);\n     }\n+\n+    private boolean isReadable(MediaType mediaType, Class<?> type, Type genericType) {\n+        if (mediaType == null) {\n+            return false;\n+        }\n+        if (String.class.equals(type) && (String.class.equals(genericType) || (genericType == null))) { // don't attempt to read plain strings", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTYwNA=="}, "originalCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU5MDQ1OA==", "bodyText": "Fixed, properly.\nThanks again for being vigilant", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542590458", "createdAt": "2020-12-14T17:59:34Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/JacksonMessageBodyReader.java", "diffHunk": "@@ -56,4 +56,15 @@ private Object doReadFrom(Class<Object> type, Type genericType, InputStream enti\n         return reader.forType(reader.getTypeFactory().constructType(genericType != null ? genericType : type))\n                 .readValue(entityStream);\n     }\n+\n+    private boolean isReadable(MediaType mediaType, Class<?> type, Type genericType) {\n+        if (mediaType == null) {\n+            return false;\n+        }\n+        if (String.class.equals(type) && (String.class.equals(genericType) || (genericType == null))) { // don't attempt to read plain strings", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTYwNA=="}, "originalCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODYxMzAzOnYy", "diffSide": "RIGHT", "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/JacksonMessageBodyReader.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjoyODozNVrOIFY6iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzoxMzo1N1rOIFbF7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTk5Mg==", "bodyText": "Really? javascript?", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542521992", "createdAt": "2020-12-14T16:28:35Z", "author": {"login": "FroMage"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/JacksonMessageBodyReader.java", "diffHunk": "@@ -56,4 +56,15 @@ private Object doReadFrom(Class<Object> type, Type genericType, InputStream enti\n         return reader.forType(reader.getTypeFactory().constructType(genericType != null ? genericType : type))\n                 .readValue(entityStream);\n     }\n+\n+    private boolean isReadable(MediaType mediaType, Class<?> type, Type genericType) {\n+        if (mediaType == null) {\n+            return false;\n+        }\n+        if (String.class.equals(type) && (String.class.equals(genericType) || (genericType == null))) { // don't attempt to read plain strings\n+            return false;\n+        }\n+        String subtype = mediaType.getSubtype();\n+        return \"json\".equalsIgnoreCase(subtype) || subtype.endsWith(\"+json\") || \"javascript\".equals(subtype);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzMjYzNA==", "bodyText": "Well, I copied this from some of JAX-RS specific snippet in the Jackson codebase. I thought it was odd, but said \ud83e\udd37\ud83c\udffc :)", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542532634", "createdAt": "2020-12-14T16:41:48Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/JacksonMessageBodyReader.java", "diffHunk": "@@ -56,4 +56,15 @@ private Object doReadFrom(Class<Object> type, Type genericType, InputStream enti\n         return reader.forType(reader.getTypeFactory().constructType(genericType != null ? genericType : type))\n                 .readValue(entityStream);\n     }\n+\n+    private boolean isReadable(MediaType mediaType, Class<?> type, Type genericType) {\n+        if (mediaType == null) {\n+            return false;\n+        }\n+        if (String.class.equals(type) && (String.class.equals(genericType) || (genericType == null))) { // don't attempt to read plain strings\n+            return false;\n+        }\n+        String subtype = mediaType.getSubtype();\n+        return \"json\".equalsIgnoreCase(subtype) || subtype.endsWith(\"+json\") || \"javascript\".equals(subtype);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTk5Mg=="}, "originalCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzODk2OQ==", "bodyText": "It is odd. https://stackoverflow.com/a/477819/56994 says application/javascript is for JSONP. This doesn't even check the main type. It feels wrong.", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542538969", "createdAt": "2020-12-14T16:49:51Z", "author": {"login": "FroMage"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/JacksonMessageBodyReader.java", "diffHunk": "@@ -56,4 +56,15 @@ private Object doReadFrom(Class<Object> type, Type genericType, InputStream enti\n         return reader.forType(reader.getTypeFactory().constructType(genericType != null ? genericType : type))\n                 .readValue(entityStream);\n     }\n+\n+    private boolean isReadable(MediaType mediaType, Class<?> type, Type genericType) {\n+        if (mediaType == null) {\n+            return false;\n+        }\n+        if (String.class.equals(type) && (String.class.equals(genericType) || (genericType == null))) { // don't attempt to read plain strings\n+            return false;\n+        }\n+        String subtype = mediaType.getSubtype();\n+        return \"json\".equalsIgnoreCase(subtype) || subtype.endsWith(\"+json\") || \"javascript\".equals(subtype);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTk5Mg=="}, "originalCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU1NzY3Nw==", "bodyText": "OK, I'll remove it", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542557677", "createdAt": "2020-12-14T17:13:57Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/JacksonMessageBodyReader.java", "diffHunk": "@@ -56,4 +56,15 @@ private Object doReadFrom(Class<Object> type, Type genericType, InputStream enti\n         return reader.forType(reader.getTypeFactory().constructType(genericType != null ? genericType : type))\n                 .readValue(entityStream);\n     }\n+\n+    private boolean isReadable(MediaType mediaType, Class<?> type, Type genericType) {\n+        if (mediaType == null) {\n+            return false;\n+        }\n+        if (String.class.equals(type) && (String.class.equals(genericType) || (genericType == null))) { // don't attempt to read plain strings\n+            return false;\n+        }\n+        String subtype = mediaType.getSubtype();\n+        return \"json\".equalsIgnoreCase(subtype) || subtype.endsWith(\"+json\") || \"javascript\".equals(subtype);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTk5Mg=="}, "originalCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODYxODc4OnYy", "diffSide": "RIGHT", "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjoyOTozM1rOIFY9xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzoxMzo0M1rOIFbFQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMjgyMg==", "bodyText": "I don't see why we do this, given that we refuse to unserialise a String parameter in the JSON reader. Object above should just work and match List<String> via inheritance.", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542522822", "createdAt": "2020-12-14T16:29:33Z", "author": {"login": "FroMage"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java", "diffHunk": "@@ -47,6 +47,9 @@ void additionalProviders(BuildProducer<AdditionalBeanBuildItem> additionalBean,\n         additionalReaders\n                 .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), Object.class.getName(),\n                         Collections.singletonList(MediaType.APPLICATION_JSON)));\n+        additionalReaders\n+                .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), String.class.getName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzMzQ4MA==", "bodyText": "This is needed, otherwise the order with which the reader is determined turns out to be wrong.", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542533480", "createdAt": "2020-12-14T16:42:49Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java", "diffHunk": "@@ -47,6 +47,9 @@ void additionalProviders(BuildProducer<AdditionalBeanBuildItem> additionalBean,\n         additionalReaders\n                 .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), Object.class.getName(),\n                         Collections.singletonList(MediaType.APPLICATION_JSON)));\n+        additionalReaders\n+                .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), String.class.getName(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMjgyMg=="}, "originalCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU0MDI5OA==", "bodyText": "OK, but why? Especially for a List<String> I don't think we should ever match with a String type, not for JSON.\nIt could make sense for the parameter convertors we support but those don't use readers.", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542540298", "createdAt": "2020-12-14T16:51:33Z", "author": {"login": "FroMage"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java", "diffHunk": "@@ -47,6 +47,9 @@ void additionalProviders(BuildProducer<AdditionalBeanBuildItem> additionalBean,\n         additionalReaders\n                 .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), Object.class.getName(),\n                         Collections.singletonList(MediaType.APPLICATION_JSON)));\n+        additionalReaders\n+                .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), String.class.getName(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMjgyMg=="}, "originalCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU0MjkxNA==", "bodyText": "When I was looking I saw it was because we were looking up readers for String,  not List.\nNow I am pretty sure that is a problem in itself, but I would prefer to keep this fix for now (as it can affect a lot of users) and deal with it more holistically if the need arises (i.e. we encounter more problems with reader selection).", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542542914", "createdAt": "2020-12-14T16:54:43Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java", "diffHunk": "@@ -47,6 +47,9 @@ void additionalProviders(BuildProducer<AdditionalBeanBuildItem> additionalBean,\n         additionalReaders\n                 .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), Object.class.getName(),\n                         Collections.singletonList(MediaType.APPLICATION_JSON)));\n+        additionalReaders\n+                .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), String.class.getName(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMjgyMg=="}, "originalCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU0NTQwNw==", "bodyText": "I'm not sure, I think looking up readers for String when we have List<String> is wrong and could lead to all sorts of troubles. We should find out why that is and not add weird workarounds that we'll surely forget to remove and then wonder why they are here ;)", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542545407", "createdAt": "2020-12-14T16:57:53Z", "author": {"login": "FroMage"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java", "diffHunk": "@@ -47,6 +47,9 @@ void additionalProviders(BuildProducer<AdditionalBeanBuildItem> additionalBean,\n         additionalReaders\n                 .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), Object.class.getName(),\n                         Collections.singletonList(MediaType.APPLICATION_JSON)));\n+        additionalReaders\n+                .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), String.class.getName(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMjgyMg=="}, "originalCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU1NzUwNw==", "bodyText": "I've been burned by the readers too many times to have the will to fix it properly a few days before PTO :).\nIf we add the workaround, we will at least unblock a very common problem the code has now and thus allow us to see if there are any further problem. If there are, then I wholeheartedly agree to take a more extensive look at it.", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542557507", "createdAt": "2020-12-14T17:13:43Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java", "diffHunk": "@@ -47,6 +47,9 @@ void additionalProviders(BuildProducer<AdditionalBeanBuildItem> additionalBean,\n         additionalReaders\n                 .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), Object.class.getName(),\n                         Collections.singletonList(MediaType.APPLICATION_JSON)));\n+        additionalReaders\n+                .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), String.class.getName(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMjgyMg=="}, "originalCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODYyMTEyOnYy", "diffSide": "RIGHT", "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jsonb/deployment/src/test/java/io/quarkus/resteasy/reactive/jsonb/deployment/test/SimpleJsonTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjoyOTo1N1rOIFY_Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjo0Mjo1NFrOIFZnlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMzE2Mg==", "bodyText": "Is this on purpose?", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542523162", "createdAt": "2020-12-14T16:29:57Z", "author": {"login": "FroMage"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jsonb/deployment/src/test/java/io/quarkus/resteasy/reactive/jsonb/deployment/test/SimpleJsonTest.java", "diffHunk": "@@ -25,35 +25,45 @@ public JavaArchive get() {\n \n     @Test\n     public void testJson() {\n-        RestAssured.get(\"/simple/person\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .body(\"first\", Matchers.equalTo(\"Bob\"))\n-                .body(\"last\", Matchers.equalTo(\"Builder\"));\n+        //        RestAssured.get(\"/simple/person\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzMzUyNw==", "bodyText": "Nope :)", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542533527", "createdAt": "2020-12-14T16:42:54Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jsonb/deployment/src/test/java/io/quarkus/resteasy/reactive/jsonb/deployment/test/SimpleJsonTest.java", "diffHunk": "@@ -25,35 +25,45 @@ public JavaArchive get() {\n \n     @Test\n     public void testJson() {\n-        RestAssured.get(\"/simple/person\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .body(\"first\", Matchers.equalTo(\"Bob\"))\n-                .body(\"last\", Matchers.equalTo(\"Builder\"));\n+        //        RestAssured.get(\"/simple/person\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMzE2Mg=="}, "originalCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODYyNTMwOnYy", "diffSide": "RIGHT", "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jsonb/runtime/src/main/java/io/quarkus/resteasy/reactive/jsonb/runtime/serialisers/JsonbMessageBodyReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjozMDo0MlrOIFZBjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjo0MzowNVrOIFZoFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMzc4OA==", "bodyText": "Sounds like this could be abstracted somewhere common. Especially given that it has no json dependency, we could put this in -common", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542523788", "createdAt": "2020-12-14T16:30:42Z", "author": {"login": "FroMage"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jsonb/runtime/src/main/java/io/quarkus/resteasy/reactive/jsonb/runtime/serialisers/JsonbMessageBodyReader.java", "diffHunk": "@@ -53,4 +53,15 @@ private Object doReadFrom(Class<Object> type, Type genericType, InputStream enti\n         }\n         return json.fromJson(entityStream, genericType != null ? genericType : type);\n     }\n+\n+    private boolean isReadable(MediaType mediaType, Class<?> type, Type genericType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzMzY1Mg==", "bodyText": "Will do", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542533652", "createdAt": "2020-12-14T16:43:05Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jsonb/runtime/src/main/java/io/quarkus/resteasy/reactive/jsonb/runtime/serialisers/JsonbMessageBodyReader.java", "diffHunk": "@@ -53,4 +53,15 @@ private Object doReadFrom(Class<Object> type, Type genericType, InputStream enti\n         }\n         return json.fromJson(entityStream, genericType != null ? genericType : type);\n     }\n+\n+    private boolean isReadable(MediaType mediaType, Class<?> type, Type genericType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMzc4OA=="}, "originalCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjc5NDgyOnYy", "diffSide": "RIGHT", "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODo1MDoyNVrOIF_ksA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjoyOTo0MlrOIGIfYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1NTM3Ng==", "bodyText": "Why is this required? Don't we match Collection and Map with Object? Why do we need this for them and not List?", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543155376", "createdAt": "2020-12-15T08:50:25Z", "author": {"login": "FroMage"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java", "diffHunk": "@@ -47,6 +48,12 @@ void additionalProviders(BuildProducer<AdditionalBeanBuildItem> additionalBean,\n         additionalReaders\n                 .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), Object.class.getName(),\n                         Collections.singletonList(MediaType.APPLICATION_JSON)));\n+        additionalReaders\n+                .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), Collection.class.getName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3f76b4d3f100e8c06f6fe6fd01d351b3f8a8640"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI0NTc2OQ==", "bodyText": "We need Collection, because when checking interfaces, Object (as a \"super-class\") doesn't get checked (I am pretty sure that it's spec mandated).\nBy adding Collection, all collections will work just fine.", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543245769", "createdAt": "2020-12-15T10:58:41Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java", "diffHunk": "@@ -47,6 +48,12 @@ void additionalProviders(BuildProducer<AdditionalBeanBuildItem> additionalBean,\n         additionalReaders\n                 .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), Object.class.getName(),\n                         Collections.singletonList(MediaType.APPLICATION_JSON)));\n+        additionalReaders\n+                .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), Collection.class.getName(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1NTM3Ng=="}, "originalCommit": {"oid": "b3f76b4d3f100e8c06f6fe6fd01d351b3f8a8640"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI1MTkzOQ==", "bodyText": "The spec mandates that we don't check Object for interface types? That'd be insane. I can't believe that.", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543251939", "createdAt": "2020-12-15T11:08:20Z", "author": {"login": "FroMage"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java", "diffHunk": "@@ -47,6 +48,12 @@ void additionalProviders(BuildProducer<AdditionalBeanBuildItem> additionalBean,\n         additionalReaders\n                 .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), Object.class.getName(),\n                         Collections.singletonList(MediaType.APPLICATION_JSON)));\n+        additionalReaders\n+                .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), Collection.class.getName(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1NTM3Ng=="}, "originalCommit": {"oid": "b3f76b4d3f100e8c06f6fe6fd01d351b3f8a8640"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI1NTE3NQ==", "bodyText": "My theory is that in code like Serialisers.findReaders we should special case something like this:\n    public List<MessageBodyReader<?>> findReaders(ConfigurationImpl configuration, Class<?> entityType,\n            MediaType mediaType, RuntimeType runtimeType) {\n        List<MediaType> mt = Collections.singletonList(mediaType);\n        List<MessageBodyReader<?>> ret = new ArrayList<>();\n        Deque<Class<?>> toProcess = new LinkedList<>();\n        Class<?> klass = entityType;\n        if (primitivesToWrappers.containsKey(klass))\n            klass = primitivesToWrappers.get(klass);\n        QuarkusMultivaluedMap<Class<?>, ResourceReader> readers;\n        if (configuration != null && !configuration.getResourceReaders().isEmpty()) {\n            readers = new QuarkusMultivaluedHashMap<>();\n            readers.putAll(this.readers);\n            readers.addAll(configuration.getResourceReaders());\n        } else {\n            readers = this.readers;\n        }\n        do {\n            Collections.addAll(toProcess, klass.getInterfaces());\n            if (klass == Object.class || klass.getSuperclass() == null) {\n                //spec extension, look for interfaces as well\n                //we match interfaces before Object\n                Set<Class<?>> seen = new HashSet<>(toProcess);\n                while (!toProcess.isEmpty()) {\n                    Class<?> iface = toProcess.poll();\n                    List<ResourceReader> goodTypeReaders = readers.get(iface);\n                    readerLookup(mediaType, runtimeType, mt, ret, goodTypeReaders);\n                    for (Class<?> i : iface.getInterfaces()) {\n                        if (!seen.contains(i)) {\n                            seen.add(i);\n                            toProcess.add(i);\n                        }\n                    }\n                }\n            }\n            List<ResourceReader> goodTypeReaders = readers.get(klass);\n            readerLookup(mediaType, runtimeType, mt, ret, goodTypeReaders);\n// if we're looking for an interface, pretend it extends Object to make it match,\n// we will still match superinterfaces before we match Object so it will work\nif(klass.isInterface() {\n klass = Object.class;\n} else {\n            klass = klass.getSuperclass();\n}\n        } while (klass != null);\n\n        return ret;\n    }", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543255175", "createdAt": "2020-12-15T11:13:05Z", "author": {"login": "FroMage"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java", "diffHunk": "@@ -47,6 +48,12 @@ void additionalProviders(BuildProducer<AdditionalBeanBuildItem> additionalBean,\n         additionalReaders\n                 .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), Object.class.getName(),\n                         Collections.singletonList(MediaType.APPLICATION_JSON)));\n+        additionalReaders\n+                .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), Collection.class.getName(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1NTM3Ng=="}, "originalCommit": {"oid": "b3f76b4d3f100e8c06f6fe6fd01d351b3f8a8640"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI1NjAxMw==", "bodyText": "I do think the interface thing was a special in the spec, but I need to check.", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543256013", "createdAt": "2020-12-15T11:14:31Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java", "diffHunk": "@@ -47,6 +48,12 @@ void additionalProviders(BuildProducer<AdditionalBeanBuildItem> additionalBean,\n         additionalReaders\n                 .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), Object.class.getName(),\n                         Collections.singletonList(MediaType.APPLICATION_JSON)));\n+        additionalReaders\n+                .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), Collection.class.getName(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1NTM3Ng=="}, "originalCommit": {"oid": "b3f76b4d3f100e8c06f6fe6fd01d351b3f8a8640"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwMTQ3Mg==", "bodyText": "So it seems like the spec doesn't mention anything. Moreoever, we do that same trick you mentioned for writers, so I updated the PR to use it for readers as well", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543301472", "createdAt": "2020-12-15T12:29:42Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java", "diffHunk": "@@ -47,6 +48,12 @@ void additionalProviders(BuildProducer<AdditionalBeanBuildItem> additionalBean,\n         additionalReaders\n                 .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), Object.class.getName(),\n                         Collections.singletonList(MediaType.APPLICATION_JSON)));\n+        additionalReaders\n+                .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), Collection.class.getName(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1NTM3Ng=="}, "originalCommit": {"oid": "b3f76b4d3f100e8c06f6fe6fd01d351b3f8a8640"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjgwMzgyOnYy", "diffSide": "RIGHT", "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/providers/serialisers/json/AbstractJsonMessageBodyReader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODo1MjoyMFrOIF_p9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMToyMDowM1rOIGF6mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1NjcyNA==", "bodyText": "We should check the application main type, because this may match image/* ATM due to ignoring the main type and allowing subtype wildcards.", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543156724", "createdAt": "2020-12-15T08:52:20Z", "author": {"login": "FroMage"}, "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/providers/serialisers/json/AbstractJsonMessageBodyReader.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.jboss.resteasy.reactive.server.providers.serialisers.json;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import javax.ws.rs.core.MediaType;\n+import org.jboss.resteasy.reactive.server.spi.ResteasyReactiveResourceInfo;\n+import org.jboss.resteasy.reactive.server.spi.ServerMessageBodyReader;\n+\n+public abstract class AbstractJsonMessageBodyReader implements ServerMessageBodyReader<Object> {\n+\n+    @Override\n+    public boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType) {\n+        return isReadable(mediaType, type);\n+    }\n+\n+    @Override\n+    public boolean isReadable(Class<?> type, Type genericType, ResteasyReactiveResourceInfo lazyMethod, MediaType mediaType) {\n+        return isReadable(mediaType, type);\n+    }\n+\n+    private boolean isReadable(MediaType mediaType, Class<?> type) {\n+        if (mediaType == null) {\n+            return false;\n+        }\n+        if (String.class.equals(type)) { // don't attempt to read plain strings\n+            return false;\n+        }\n+        String subtype = mediaType.getSubtype();\n+        return \"json\".equalsIgnoreCase(subtype) || subtype.endsWith(\"+json\") || subtype.equals(\"*\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3f76b4d3f100e8c06f6fe6fd01d351b3f8a8640"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI0Njc4OA==", "bodyText": "Good idea", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543246788", "createdAt": "2020-12-15T11:00:11Z", "author": {"login": "geoand"}, "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/providers/serialisers/json/AbstractJsonMessageBodyReader.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.jboss.resteasy.reactive.server.providers.serialisers.json;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import javax.ws.rs.core.MediaType;\n+import org.jboss.resteasy.reactive.server.spi.ResteasyReactiveResourceInfo;\n+import org.jboss.resteasy.reactive.server.spi.ServerMessageBodyReader;\n+\n+public abstract class AbstractJsonMessageBodyReader implements ServerMessageBodyReader<Object> {\n+\n+    @Override\n+    public boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType) {\n+        return isReadable(mediaType, type);\n+    }\n+\n+    @Override\n+    public boolean isReadable(Class<?> type, Type genericType, ResteasyReactiveResourceInfo lazyMethod, MediaType mediaType) {\n+        return isReadable(mediaType, type);\n+    }\n+\n+    private boolean isReadable(MediaType mediaType, Class<?> type) {\n+        if (mediaType == null) {\n+            return false;\n+        }\n+        if (String.class.equals(type)) { // don't attempt to read plain strings\n+            return false;\n+        }\n+        String subtype = mediaType.getSubtype();\n+        return \"json\".equalsIgnoreCase(subtype) || subtype.endsWith(\"+json\") || subtype.equals(\"*\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1NjcyNA=="}, "originalCommit": {"oid": "b3f76b4d3f100e8c06f6fe6fd01d351b3f8a8640"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI1OTI4OQ==", "bodyText": "Fixed", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543259289", "createdAt": "2020-12-15T11:20:03Z", "author": {"login": "geoand"}, "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/providers/serialisers/json/AbstractJsonMessageBodyReader.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.jboss.resteasy.reactive.server.providers.serialisers.json;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import javax.ws.rs.core.MediaType;\n+import org.jboss.resteasy.reactive.server.spi.ResteasyReactiveResourceInfo;\n+import org.jboss.resteasy.reactive.server.spi.ServerMessageBodyReader;\n+\n+public abstract class AbstractJsonMessageBodyReader implements ServerMessageBodyReader<Object> {\n+\n+    @Override\n+    public boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType) {\n+        return isReadable(mediaType, type);\n+    }\n+\n+    @Override\n+    public boolean isReadable(Class<?> type, Type genericType, ResteasyReactiveResourceInfo lazyMethod, MediaType mediaType) {\n+        return isReadable(mediaType, type);\n+    }\n+\n+    private boolean isReadable(MediaType mediaType, Class<?> type) {\n+        if (mediaType == null) {\n+            return false;\n+        }\n+        if (String.class.equals(type)) { // don't attempt to read plain strings\n+            return false;\n+        }\n+        String subtype = mediaType.getSubtype();\n+        return \"json\".equalsIgnoreCase(subtype) || subtype.endsWith(\"+json\") || subtype.equals(\"*\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1NjcyNA=="}, "originalCommit": {"oid": "b3f76b4d3f100e8c06f6fe6fd01d351b3f8a8640"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjgyNjYxOnYy", "diffSide": "RIGHT", "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/SubResourceRequestFilterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODo1NzoyN1rOIF_3iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODo1NzoyN1rOIF_3iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2MDIwMQ==", "bodyText": "In theory, @RestPath is not required here", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543160201", "createdAt": "2020-12-15T08:57:27Z", "author": {"login": "FroMage"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/SubResourceRequestFilterTest.java", "diffHunk": "@@ -49,8 +51,8 @@ public void testAbortingRequestFilter() {\n         @Inject\n         RestSubResource restSubResource;\n \n-        @Path(\"sub-resource/hello\")\n-        public RestSubResource hello() {\n+        @Path(\"sub-resource/{name}\")\n+        public RestSubResource hello(@RestPath String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd1b68598efebbbeafe643570bfabf364aabb2b2"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjg0MzQ5OnYy", "diffSide": "RIGHT", "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/SubResourceRequestFilterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOTowMToxNFrOIGABoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMToxODoxNFrOIGF2SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2Mjc4NA==", "bodyText": "Here, though, I do wonder if @RestPath is required. I suppose yes, because there's no @Path matching. I am not sure what the spec says about sub-resources allowing @Path matching. Is it allowed/supported?", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543162784", "createdAt": "2020-12-15T09:01:14Z", "author": {"login": "FroMage"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/SubResourceRequestFilterTest.java", "diffHunk": "@@ -59,8 +61,8 @@ public RestSubResource hello() {\n     public static class RestSubResource {\n \n         @GET\n-        public Response hello(HttpHeaders headers) {\n-            return Response.ok().header(\"single-filter\", headers.getHeaderString(\"single-filter\")).build();\n+        public Response hello(HttpHeaders headers, @RestPath String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd1b68598efebbbeafe643570bfabf364aabb2b2"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI1ODE4NA==", "bodyText": "Yeah, here it is required because there is no other way to know", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543258184", "createdAt": "2020-12-15T11:18:14Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/SubResourceRequestFilterTest.java", "diffHunk": "@@ -59,8 +61,8 @@ public RestSubResource hello() {\n     public static class RestSubResource {\n \n         @GET\n-        public Response hello(HttpHeaders headers) {\n-            return Response.ok().header(\"single-filter\", headers.getHeaderString(\"single-filter\")).build();\n+        public Response hello(HttpHeaders headers, @RestPath String name) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2Mjc4NA=="}, "originalCommit": {"oid": "bd1b68598efebbbeafe643570bfabf364aabb2b2"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjg1MTIxOnYy", "diffSide": "RIGHT", "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/ResourceLocatorHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOTowMzowM1rOIGAGDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMTozNTo1NFrOIGGfzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2MzkxOA==", "bodyText": "Is there a reason to overwrite the pathParamValue for locators? Is it because they can declare new path parameters? Otherwise we can just keep the original pathParamValue and no need to add a field to save them.", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543163918", "createdAt": "2020-12-15T09:03:03Z", "author": {"login": "FroMage"}, "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/ResourceLocatorHandler.java", "diffHunk": "@@ -80,7 +80,7 @@ public void onComplete(Throwable throwable) {\n         requestContext.setRemaining(res.remaining);\n         requestContext.setEndpointInstance(locator);\n         requestContext.setResult(null);\n-        requestContext.restart(res.value);\n+        requestContext.restart(res.value, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd1b68598efebbbeafe643570bfabf364aabb2b2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI1OTA0NA==", "bodyText": "The subresource can indeed declare different parameters - they don't need to be same as the original. So to support that case we do indeed need to override", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543259044", "createdAt": "2020-12-15T11:19:39Z", "author": {"login": "geoand"}, "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/ResourceLocatorHandler.java", "diffHunk": "@@ -80,7 +80,7 @@ public void onComplete(Throwable throwable) {\n         requestContext.setRemaining(res.remaining);\n         requestContext.setEndpointInstance(locator);\n         requestContext.setResult(null);\n-        requestContext.restart(res.value);\n+        requestContext.restart(res.value, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2MzkxOA=="}, "originalCommit": {"oid": "bd1b68598efebbbeafe643570bfabf364aabb2b2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI2ODgxMg==", "bodyText": "OK", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543268812", "createdAt": "2020-12-15T11:35:54Z", "author": {"login": "FroMage"}, "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/ResourceLocatorHandler.java", "diffHunk": "@@ -80,7 +80,7 @@ public void onComplete(Throwable throwable) {\n         requestContext.setRemaining(res.remaining);\n         requestContext.setEndpointInstance(locator);\n         requestContext.setResult(null);\n-        requestContext.restart(res.value);\n+        requestContext.restart(res.value, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2MzkxOA=="}, "originalCommit": {"oid": "bd1b68598efebbbeafe643570bfabf364aabb2b2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjg1Mzc4OnYy", "diffSide": "RIGHT", "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOTowMzo0M1rOIGAHoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMTozNTo0NlrOIGGfdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2NDMyMA==", "bodyText": "Can a locator method return a sub-resource which returns a locator method? As in, can we have two levels of locators? If yes, then we need more than an extra field, we need a stack of them.", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543164320", "createdAt": "2020-12-15T09:03:43Z", "author": {"login": "FroMage"}, "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java", "diffHunk": "@@ -161,9 +171,17 @@ public ProvidersImpl getProviders() {\n      * @param target The resource target\n      */\n     public void restart(RuntimeResource target) {\n+        restart(target, false);\n+    }\n+\n+    public void restart(RuntimeResource target, boolean setLocatorTarget) {\n         this.handlers = target.getHandlerChain();\n         position = 0;\n         parameters = new Object[target.getParameterTypes().length];\n+        if (setLocatorTarget) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd1b68598efebbbeafe643570bfabf364aabb2b2"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI2MDEwNg==", "bodyText": "That's a very good question, but the spec doesn't seem to say anything about that nor do I see any test in the TCK.\nI would say let's not complicate it unless we actually see something like that in the wild", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543260106", "createdAt": "2020-12-15T11:21:29Z", "author": {"login": "geoand"}, "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java", "diffHunk": "@@ -161,9 +171,17 @@ public ProvidersImpl getProviders() {\n      * @param target The resource target\n      */\n     public void restart(RuntimeResource target) {\n+        restart(target, false);\n+    }\n+\n+    public void restart(RuntimeResource target, boolean setLocatorTarget) {\n         this.handlers = target.getHandlerChain();\n         position = 0;\n         parameters = new Object[target.getParameterTypes().length];\n+        if (setLocatorTarget) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2NDMyMA=="}, "originalCommit": {"oid": "bd1b68598efebbbeafe643570bfabf364aabb2b2"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI2ODcyNQ==", "bodyText": "+1", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543268725", "createdAt": "2020-12-15T11:35:46Z", "author": {"login": "FroMage"}, "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java", "diffHunk": "@@ -161,9 +171,17 @@ public ProvidersImpl getProviders() {\n      * @param target The resource target\n      */\n     public void restart(RuntimeResource target) {\n+        restart(target, false);\n+    }\n+\n+    public void restart(RuntimeResource target, boolean setLocatorTarget) {\n         this.handlers = target.getHandlerChain();\n         position = 0;\n         parameters = new Object[target.getParameterTypes().length];\n+        if (setLocatorTarget) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2NDMyMA=="}, "originalCommit": {"oid": "bd1b68598efebbbeafe643570bfabf364aabb2b2"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjg3NjY5OnYy", "diffSide": "RIGHT", "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/parameters/LocatableResourcePathParamExtractor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOTowODo1NlrOIGAVdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNTo1MDoxOVrOIGSWAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2Nzg2MA==", "bodyText": "This appears to imply that you can only access path params in a sub-resource by matching against the locator method, so the sub-resource can't have path params of its own, right?\nSo, is it true? The spec is confusing about this. If it is true, why do we not keep the original path param values then, instead of adding a new field to save the original ones?\nAlso, why can't we use context.getLocatorTarget().getPathParameterIndexes()? I'm sure there's a good reason, but I don't get it.", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543167860", "createdAt": "2020-12-15T09:08:56Z", "author": {"login": "FroMage"}, "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/parameters/LocatableResourcePathParamExtractor.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package org.jboss.resteasy.reactive.server.core.parameters;\n+\n+import org.jboss.resteasy.reactive.server.core.ResteasyReactiveRequestContext;\n+import org.jboss.resteasy.reactive.server.mapping.URITemplate;\n+\n+public class LocatableResourcePathParamExtractor implements ParameterExtractor {\n+\n+    private final String name;\n+\n+    public LocatableResourcePathParamExtractor(String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public Object extractParameter(ResteasyReactiveRequestContext context) {\n+        int index = findPathParamIndex(context.getLocatorTarget().getClassPath(), context.getLocatorTarget().getPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd1b68598efebbbeafe643570bfabf364aabb2b2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI3MjU2OA==", "bodyText": "By reading the spec, I can't really tell what the intended behavior is.\nI'll try and see if we can keep the paths of the original request and see how the tests behave", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543272568", "createdAt": "2020-12-15T11:42:03Z", "author": {"login": "geoand"}, "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/parameters/LocatableResourcePathParamExtractor.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package org.jboss.resteasy.reactive.server.core.parameters;\n+\n+import org.jboss.resteasy.reactive.server.core.ResteasyReactiveRequestContext;\n+import org.jboss.resteasy.reactive.server.mapping.URITemplate;\n+\n+public class LocatableResourcePathParamExtractor implements ParameterExtractor {\n+\n+    private final String name;\n+\n+    public LocatableResourcePathParamExtractor(String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public Object extractParameter(ResteasyReactiveRequestContext context) {\n+        int index = findPathParamIndex(context.getLocatorTarget().getClassPath(), context.getLocatorTarget().getPath());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2Nzg2MA=="}, "originalCommit": {"oid": "bd1b68598efebbbeafe643570bfabf364aabb2b2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI5MTE4MQ==", "bodyText": "I tried keeping the original values and some of the tests fail.\nThe approach in this PR however passes all old and new tests", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543291181", "createdAt": "2020-12-15T12:12:46Z", "author": {"login": "geoand"}, "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/parameters/LocatableResourcePathParamExtractor.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package org.jboss.resteasy.reactive.server.core.parameters;\n+\n+import org.jboss.resteasy.reactive.server.core.ResteasyReactiveRequestContext;\n+import org.jboss.resteasy.reactive.server.mapping.URITemplate;\n+\n+public class LocatableResourcePathParamExtractor implements ParameterExtractor {\n+\n+    private final String name;\n+\n+    public LocatableResourcePathParamExtractor(String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public Object extractParameter(ResteasyReactiveRequestContext context) {\n+        int index = findPathParamIndex(context.getLocatorTarget().getClassPath(), context.getLocatorTarget().getPath());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2Nzg2MA=="}, "originalCommit": {"oid": "bd1b68598efebbbeafe643570bfabf364aabb2b2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ2MjkxNA==", "bodyText": "Then perfect :)", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543462914", "createdAt": "2020-12-15T15:50:19Z", "author": {"login": "FroMage"}, "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/parameters/LocatableResourcePathParamExtractor.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package org.jboss.resteasy.reactive.server.core.parameters;\n+\n+import org.jboss.resteasy.reactive.server.core.ResteasyReactiveRequestContext;\n+import org.jboss.resteasy.reactive.server.mapping.URITemplate;\n+\n+public class LocatableResourcePathParamExtractor implements ParameterExtractor {\n+\n+    private final String name;\n+\n+    public LocatableResourcePathParamExtractor(String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public Object extractParameter(ResteasyReactiveRequestContext context) {\n+        int index = findPathParamIndex(context.getLocatorTarget().getClassPath(), context.getLocatorTarget().getPath());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2Nzg2MA=="}, "originalCommit": {"oid": "bd1b68598efebbbeafe643570bfabf364aabb2b2"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4522, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}