{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNTc0NDY0", "number": 11519, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMjowMjo0NVrOEa8NIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzoxMDo0M1rOEcq1dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Njg0ODM0OnYy", "diffSide": "RIGHT", "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMjowMjo0NVrOHEqjCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMjowMjo0NVrOHEqjCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1MzQ0OQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/quarkusio/quarkus/pull/11519#discussion_r474653449", "createdAt": "2020-08-21T12:02:45Z", "author": {"login": "Sanne"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -136,7 +136,9 @@ CapabilityBuildItem capability() {\n \n     @BuildStep\n     void checkTransactionsSupport(Capabilities capabilities) {\n-        if (capabilities.isMissing(Capability.TRANSACTIONS)) {\n+        // JTA is necessary for blocking Hibernate ORM but not necessarily for Hibernate Reactive\n+        if (capabilities.isMissing(Capability.TRANSACTIONS)\n+                && capabilities.isMissing(Capability.HIBERNATE_REACTIVE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cad4973606c695cf8ef26d2d009fdef5b9bdd11d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Njg2NzYyOnYy", "diffSide": "RIGHT", "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMjowOToyN1rOHEquuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMjo1ODozNFrOHEsLIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1NjQ0MQ==", "bodyText": "there's a corner case which might have a surprise effect to users:\n\nDB-1 using MySQL (or MariaDB) and sets a weird engine like BLACKHOLE\nDB-2 using MySQL (or MariaDB) and doesn't set anything\nall data written on DB-2 disappears as well without warning ?\n\nIMO we need to require full consistency among the MySQL/MariaDB configured PUs", "url": "https://github.com/quarkusio/quarkus/pull/11519#discussion_r474656441", "createdAt": "2020-08-21T12:09:27Z", "author": {"login": "Sanne"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -575,7 +577,9 @@ private void handleHibernateORMWithNoPersistenceXml(\n                     jdbcDataSources, applicationArchivesBuildItem, launchMode,\n                     systemProperties, nativeImageResources, hotDeploymentWatchedFiles, persistenceUnitDescriptors);\n \n-            storageEngines.add(persistenceUnitEntry.getValue().dialect.storageEngine);\n+            if (persistenceUnitEntry.getValue().dialect.storageEngine.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9d715d51c74fd417545f408bbe0c2525a957d5a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1NzYzMA==", "bodyText": "Yeah, the issue is that we have no way to detect this properly. We could assert the db-kind but people can do whatever they want with that.\nWe could catch 99% of the mistakes though, probably better than what I did.", "url": "https://github.com/quarkusio/quarkus/pull/11519#discussion_r474657630", "createdAt": "2020-08-21T12:12:12Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -575,7 +577,9 @@ private void handleHibernateORMWithNoPersistenceXml(\n                     jdbcDataSources, applicationArchivesBuildItem, launchMode,\n                     systemProperties, nativeImageResources, hotDeploymentWatchedFiles, persistenceUnitDescriptors);\n \n-            storageEngines.add(persistenceUnitEntry.getValue().dialect.storageEngine);\n+            if (persistenceUnitEntry.getValue().dialect.storageEngine.isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1NjQ0MQ=="}, "originalCommit": {"oid": "d9d715d51c74fd417545f408bbe0c2525a957d5a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY2MTczNA==", "bodyText": "Ultimately the engine variable is read by the MySQL Dialect. So we know it's going to affect people either if they choose any of the extensions ofthe MySQLDialect (explicitly), or if we'll be chosing such a dialect based on the db-kind .. isn't that 100% ?", "url": "https://github.com/quarkusio/quarkus/pull/11519#discussion_r474661734", "createdAt": "2020-08-21T12:21:19Z", "author": {"login": "Sanne"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -575,7 +577,9 @@ private void handleHibernateORMWithNoPersistenceXml(\n                     jdbcDataSources, applicationArchivesBuildItem, launchMode,\n                     systemProperties, nativeImageResources, hotDeploymentWatchedFiles, persistenceUnitDescriptors);\n \n-            storageEngines.add(persistenceUnitEntry.getValue().dialect.storageEngine);\n+            if (persistenceUnitEntry.getValue().dialect.storageEngine.isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1NjQ0MQ=="}, "originalCommit": {"oid": "d9d715d51c74fd417545f408bbe0c2525a957d5a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY3MTkzNw==", "bodyText": "I don't know. Frankly, I think that's a lot of work for something that is half baked in ORM :/. This should never has been included in ORM that way. I'll see what I can do.", "url": "https://github.com/quarkusio/quarkus/pull/11519#discussion_r474671937", "createdAt": "2020-08-21T12:42:28Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -575,7 +577,9 @@ private void handleHibernateORMWithNoPersistenceXml(\n                     jdbcDataSources, applicationArchivesBuildItem, launchMode,\n                     systemProperties, nativeImageResources, hotDeploymentWatchedFiles, persistenceUnitDescriptors);\n \n-            storageEngines.add(persistenceUnitEntry.getValue().dialect.storageEngine);\n+            if (persistenceUnitEntry.getValue().dialect.storageEngine.isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1NjQ0MQ=="}, "originalCommit": {"oid": "d9d715d51c74fd417545f408bbe0c2525a957d5a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY4MDA5OQ==", "bodyText": "Sure, it's half baked and I suppose there's better use of your time. Feel free to postpone it into a different issue?", "url": "https://github.com/quarkusio/quarkus/pull/11519#discussion_r474680099", "createdAt": "2020-08-21T12:58:34Z", "author": {"login": "Sanne"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -575,7 +577,9 @@ private void handleHibernateORMWithNoPersistenceXml(\n                     jdbcDataSources, applicationArchivesBuildItem, launchMode,\n                     systemProperties, nativeImageResources, hotDeploymentWatchedFiles, persistenceUnitDescriptors);\n \n-            storageEngines.add(persistenceUnitEntry.getValue().dialect.storageEngine);\n+            if (persistenceUnitEntry.getValue().dialect.storageEngine.isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1NjQ0MQ=="}, "originalCommit": {"oid": "d9d715d51c74fd417545f408bbe0c2525a957d5a"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Njg3MjM5OnYy", "diffSide": "RIGHT", "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMjoxMToxNlrOHEqx1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMjoxMToxNlrOHEqx1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1NzIzOQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/quarkusio/quarkus/pull/11519#discussion_r474657239", "createdAt": "2020-08-21T12:11:16Z", "author": {"login": "Sanne"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -773,6 +777,12 @@ private static void producePersistenceUnitDescriptorFromConfig(\n             p.put(JPA_SHARED_CACHE_MODE, SharedCacheMode.NONE);\n         }\n \n+        // Hibernate Validator integration: we force the callback mode to have bootstrap errors reported rather than validation ignored\n+        // if there is any issue when bootstrapping Hibernate Validator.\n+        if (capabilities.isPresent(Capability.HIBERNATE_VALIDATOR)) {\n+            descriptor.getProperties().setProperty(AvailableSettings.JPA_VALIDATION_MODE, ValidationMode.CALLBACK.name());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd072bf739c7a52a1cf53ddca2cf7691de16928a"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Njg3MzMyOnYy", "diffSide": "RIGHT", "path": "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsUndefinedPackagesTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMjoxMTozOVrOHEqyZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMjoxMTozOVrOHEqyZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1NzM4MA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/quarkusio/quarkus/pull/11519#discussion_r474657380", "createdAt": "2020-08-21T12:11:39Z", "author": {"login": "Sanne"}, "path": "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsUndefinedPackagesTest.java", "diffHunk": "@@ -17,7 +17,8 @@\n             .setExpectedException(ConfigurationException.class)\n             .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n                     .addClass(User.class)\n-                    .addAsResource(\"application-multiple-persistence-units-invalid.properties\", \"application.properties\"));\n+                    .addAsResource(\"application-multiple-persistence-units-undefined-packages.properties\",\n+                            \"application.properties\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e9a8a816c8f0b590b412e3373cab0c04a435f0e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDk3Mzk3OnYy", "diffSide": "RIGHT", "path": "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsInconsistentStorageEnginesTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzoxMDo0M1rOHHVsnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzoxNTowOFrOHHV3TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ1NzU2Nw==", "bodyText": "funny :)", "url": "https://github.com/quarkusio/quarkus/pull/11519#discussion_r477457567", "createdAt": "2020-08-26T17:10:43Z", "author": {"login": "Sanne"}, "path": "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsInconsistentStorageEnginesTest.java", "diffHunk": "@@ -30,4 +31,10 @@ public void testInvalidConfiguration() {\n         // deployment exception should happen first\n         Assertions.fail();\n     }\n+\n+    /**\n+     * This is just to have the dialect matching MySQL and trigger the MySQL + storage engines check.\n+     */\n+    public static class H2DialectWithMySQLInTheName extends H2Dialect {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "140dfcf241ec5888d5c24bd0654b2114d960e7fd"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2MDMwMQ==", "bodyText": "Yeah, I didn't want to end up with MySQL there :).", "url": "https://github.com/quarkusio/quarkus/pull/11519#discussion_r477460301", "createdAt": "2020-08-26T17:15:08Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/multiplepersistenceunits/MultiplePersistenceUnitsInconsistentStorageEnginesTest.java", "diffHunk": "@@ -30,4 +31,10 @@ public void testInvalidConfiguration() {\n         // deployment exception should happen first\n         Assertions.fail();\n     }\n+\n+    /**\n+     * This is just to have the dialect matching MySQL and trigger the MySQL + storage engines check.\n+     */\n+    public static class H2DialectWithMySQLInTheName extends H2Dialect {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ1NzU2Nw=="}, "originalCommit": {"oid": "140dfcf241ec5888d5c24bd0654b2114d960e7fd"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 636, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}