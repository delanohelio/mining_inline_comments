{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MTcxMDAx", "number": 9390, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNTowNjowMVrOD9o1jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNTowNjowMVrOD9o1jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTU4Nzk3OnYy", "diffSide": "RIGHT", "path": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/tenant/HibernateMultiTenantConnectionProvider.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNTowNjowMVrOGXP_lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOTowMTo0MVrOGXWz6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAzMjQ3MQ==", "bodyText": "Are you sure you want to do this? It could introduce a race condition, because multiple parallel requests will use the same object. I think this is not thread safe.", "url": "https://github.com/quarkusio/quarkus/pull/9390#discussion_r427032471", "createdAt": "2020-05-19T05:06:01Z", "author": {"login": "michael-schnell"}, "path": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/tenant/HibernateMultiTenantConnectionProvider.java", "diffHunk": "@@ -33,12 +33,14 @@ protected ConnectionProvider getAnyConnectionProvider() {\n     }\n \n     @Override\n-    protected ConnectionProvider selectConnectionProvider(String tenantIdentifier) {\n+    protected ConnectionProvider selectConnectionProvider(final String tenantIdentifier) {\n         LOG.debugv(\"selectConnectionProvider({0})\", tenantIdentifier);\n \n         ConnectionProvider provider = providerMap.get(tenantIdentifier);\n         if (provider == null) {\n-            return providerMap.computeIfAbsent(tenantIdentifier, tid -> resolveConnectionProvider(tid));\n+            final ConnectionProvider connectionProvider = resolveConnectionProvider(tenantIdentifier);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e432971fb158ef6eea6f987c18c04f1e9a976330"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA2NTQ1Mw==", "bodyText": "It seems fine to me - this is indeed a race condition but it's benign, as the end result doesn't change.", "url": "https://github.com/quarkusio/quarkus/pull/9390#discussion_r427065453", "createdAt": "2020-05-19T06:44:51Z", "author": {"login": "Sanne"}, "path": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/tenant/HibernateMultiTenantConnectionProvider.java", "diffHunk": "@@ -33,12 +33,14 @@ protected ConnectionProvider getAnyConnectionProvider() {\n     }\n \n     @Override\n-    protected ConnectionProvider selectConnectionProvider(String tenantIdentifier) {\n+    protected ConnectionProvider selectConnectionProvider(final String tenantIdentifier) {\n         LOG.debugv(\"selectConnectionProvider({0})\", tenantIdentifier);\n \n         ConnectionProvider provider = providerMap.get(tenantIdentifier);\n         if (provider == null) {\n-            return providerMap.computeIfAbsent(tenantIdentifier, tid -> resolveConnectionProvider(tid));\n+            final ConnectionProvider connectionProvider = resolveConnectionProvider(tenantIdentifier);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAzMjQ3MQ=="}, "originalCommit": {"oid": "e432971fb158ef6eea6f987c18c04f1e9a976330"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzOTU0NQ==", "bodyText": "Yes, this is correct. I just thought the \"computeIfAbsent\" is a more accurate usage of the API and does not cause such questions, because it is defined by the API of the hash map implementation.", "url": "https://github.com/quarkusio/quarkus/pull/9390#discussion_r427139545", "createdAt": "2020-05-19T08:54:49Z", "author": {"login": "michael-schnell"}, "path": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/tenant/HibernateMultiTenantConnectionProvider.java", "diffHunk": "@@ -33,12 +33,14 @@ protected ConnectionProvider getAnyConnectionProvider() {\n     }\n \n     @Override\n-    protected ConnectionProvider selectConnectionProvider(String tenantIdentifier) {\n+    protected ConnectionProvider selectConnectionProvider(final String tenantIdentifier) {\n         LOG.debugv(\"selectConnectionProvider({0})\", tenantIdentifier);\n \n         ConnectionProvider provider = providerMap.get(tenantIdentifier);\n         if (provider == null) {\n-            return providerMap.computeIfAbsent(tenantIdentifier, tid -> resolveConnectionProvider(tid));\n+            final ConnectionProvider connectionProvider = resolveConnectionProvider(tenantIdentifier);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAzMjQ3MQ=="}, "originalCommit": {"oid": "e432971fb158ef6eea6f987c18c04f1e9a976330"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0NDE3MA==", "bodyText": "I agree with you - your solution was more elegant. But we try to avoid lambdas for efficiency reasons. Of course we're not extreme about it: lambdas are a fine solution when they are a good solution, but I still tend to prefer avoiding them in such situations.", "url": "https://github.com/quarkusio/quarkus/pull/9390#discussion_r427144170", "createdAt": "2020-05-19T09:01:41Z", "author": {"login": "Sanne"}, "path": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/tenant/HibernateMultiTenantConnectionProvider.java", "diffHunk": "@@ -33,12 +33,14 @@ protected ConnectionProvider getAnyConnectionProvider() {\n     }\n \n     @Override\n-    protected ConnectionProvider selectConnectionProvider(String tenantIdentifier) {\n+    protected ConnectionProvider selectConnectionProvider(final String tenantIdentifier) {\n         LOG.debugv(\"selectConnectionProvider({0})\", tenantIdentifier);\n \n         ConnectionProvider provider = providerMap.get(tenantIdentifier);\n         if (provider == null) {\n-            return providerMap.computeIfAbsent(tenantIdentifier, tid -> resolveConnectionProvider(tid));\n+            final ConnectionProvider connectionProvider = resolveConnectionProvider(tenantIdentifier);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAzMjQ3MQ=="}, "originalCommit": {"oid": "e432971fb158ef6eea6f987c18c04f1e9a976330"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3072, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}