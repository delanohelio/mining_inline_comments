{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5NzUxMzg0", "number": 8894, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwODo1ODo0MVrOD4oyUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzozMjo0M1rOD4_WIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzE1MDg5OnYy", "diffSide": "RIGHT", "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/EnvVarHolder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwODo1ODo0MVrOGPhrJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwODo1ODo0MVrOGPhrJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzMzU0MA==", "bodyText": "Please remove all licenses from the source code you added, it's a general rule for this repository.", "url": "https://github.com/quarkusio/quarkus/pull/8894#discussion_r418933540", "createdAt": "2020-05-02T08:58:41Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/EnvVarHolder.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc62934b7cbab1d82e765439cc4f4e31759a1a81"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzE1MTYzOnYy", "diffSide": "RIGHT", "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/ContainerConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwODo1OToyOFrOGPhrgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMjo0NTozNlrOGPi96Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzMzYzMg==", "bodyText": "Let's add a comment on what should be used instead, and perhaps add an example of how to convert", "url": "https://github.com/quarkusio/quarkus/pull/8894#discussion_r418933632", "createdAt": "2020-05-02T08:59:28Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/ContainerConfig.java", "diffHunk": "@@ -93,4 +90,34 @@\n     @ConfigItem\n     Map<String, MountConfig> mounts;\n \n+    /**\n+     * Environment variables to add to all containers.\n+     *\n+     * @deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc62934b7cbab1d82e765439cc4f4e31759a1a81"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1NDI3Nw==", "bodyText": "Yep, that was part of my plan for documentation, which I haven't addressed yet, wanted to validate the approach first.", "url": "https://github.com/quarkusio/quarkus/pull/8894#discussion_r418954277", "createdAt": "2020-05-02T12:40:52Z", "author": {"login": "metacosm"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/ContainerConfig.java", "diffHunk": "@@ -93,4 +90,34 @@\n     @ConfigItem\n     Map<String, MountConfig> mounts;\n \n+    /**\n+     * Environment variables to add to all containers.\n+     *\n+     * @deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzMzYzMg=="}, "originalCommit": {"oid": "cc62934b7cbab1d82e765439cc4f4e31759a1a81"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1NDcyOQ==", "bodyText": "Makes sense. I always leave documentation for last :)", "url": "https://github.com/quarkusio/quarkus/pull/8894#discussion_r418954729", "createdAt": "2020-05-02T12:45:36Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/ContainerConfig.java", "diffHunk": "@@ -93,4 +90,34 @@\n     @ConfigItem\n     Map<String, MountConfig> mounts;\n \n+    /**\n+     * Environment variables to add to all containers.\n+     *\n+     * @deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzMzYzMg=="}, "originalCommit": {"oid": "cc62934b7cbab1d82e765439cc4f4e31759a1a81"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzE1MjA1OnYy", "diffSide": "RIGHT", "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/EnvVarHolder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwOTowMDowNlrOGPhrsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMjo0OToxM1rOGPi_kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzMzY4Mg==", "bodyText": "Please remove author tags, we don't use them in Quarkus.", "url": "https://github.com/quarkusio/quarkus/pull/8894#discussion_r418933682", "createdAt": "2020-05-02T09:00:06Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/EnvVarHolder.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * <p>\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.quarkus.kubernetes.deployment;\n+\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.configmap;\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.field;\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.secret;\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.var;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+\n+import io.quarkus.kubernetes.spi.KubernetesEnvBuildItem;\n+\n+/**\n+ * @author <a href=\"claprun@redhat.com\">Christophe Laprun</a>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc62934b7cbab1d82e765439cc4f4e31759a1a81"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1NDcyMw==", "bodyText": "I wondered about that but since I had seen some in some part of the code, I left it.", "url": "https://github.com/quarkusio/quarkus/pull/8894#discussion_r418954723", "createdAt": "2020-05-02T12:45:32Z", "author": {"login": "metacosm"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/EnvVarHolder.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * <p>\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.quarkus.kubernetes.deployment;\n+\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.configmap;\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.field;\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.secret;\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.var;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+\n+import io.quarkus.kubernetes.spi.KubernetesEnvBuildItem;\n+\n+/**\n+ * @author <a href=\"claprun@redhat.com\">Christophe Laprun</a>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzMzY4Mg=="}, "originalCommit": {"oid": "cc62934b7cbab1d82e765439cc4f4e31759a1a81"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1NTE1Mw==", "bodyText": "Yeah, it's only left over from classes that have been around before the introduction of this policy", "url": "https://github.com/quarkusio/quarkus/pull/8894#discussion_r418955153", "createdAt": "2020-05-02T12:49:13Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/EnvVarHolder.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * <p>\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.quarkus.kubernetes.deployment;\n+\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.configmap;\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.field;\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.secret;\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.var;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+\n+import io.quarkus.kubernetes.spi.KubernetesEnvBuildItem;\n+\n+/**\n+ * @author <a href=\"claprun@redhat.com\">Christophe Laprun</a>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzMzY4Mg=="}, "originalCommit": {"oid": "cc62934b7cbab1d82e765439cc4f4e31759a1a81"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDc4MzY0OnYy", "diffSide": "RIGHT", "path": "extensions/kubernetes/spi/src/main/java/io/quarkus/kubernetes/spi/KubernetesEnvBuildItem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzoxOTowMFrOGP_5SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzoxOTowMFrOGP_5SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQyODY4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        type = EnvType.field;\n          \n          \n            \n                        type = EnvType.secret;", "url": "https://github.com/quarkusio/quarkus/pull/8894#discussion_r419428680", "createdAt": "2020-05-04T13:19:00Z", "author": {"login": "iocanel"}, "path": "extensions/kubernetes/spi/src/main/java/io/quarkus/kubernetes/spi/KubernetesEnvBuildItem.java", "diffHunk": "@@ -5,26 +5,96 @@\n \n public final class KubernetesEnvBuildItem extends MultiBuildItem {\n \n+    public static ItemKey keyFor(EnvType type, String name) {\n+        return new ItemKey(type, name);\n+    }\n+\n+    public static ItemKey keyFor(KubernetesEnvBuildItem item) {\n+        return new ItemKey(item.getType(), item.getName());\n+    }\n+\n+    public enum EnvType {\n+        var(false),\n+        field(false),\n+        secret(true),\n+        configmap(true);\n+\n+        public final boolean allowMultipleDefinitions;\n+\n+        EnvType(boolean allowMultipleDefinitions) {\n+            this.allowMultipleDefinitions = allowMultipleDefinitions;\n+        }\n+\n+        public boolean isCompatibleWith(EnvType type) {\n+            if (this == type) {\n+                return true;\n+            }\n+\n+            switch (this) {\n+                case field:\n+                    return type == var;\n+                case var:\n+                    return type == field;\n+                case secret:\n+                    return type == configmap;\n+                case configmap:\n+                    return type == secret;\n+                default:\n+                    return false;\n+            }\n+        }\n+    }\n+\n     private final String name;\n     private final String value;\n-    private final String secret;\n-    private final String configmap;\n-    private final String field;\n+    private final EnvType type;\n     private final String target;\n \n     public KubernetesEnvBuildItem(String name, String value, String target) {\n-        this(name, value, null, null, null, target);\n+        this(name, value, EnvType.var, target);\n     }\n \n-    public KubernetesEnvBuildItem(String name, String value, String secret, String configmap, String field, String target) {\n+    public static EnvType getEnvType(String secret, String configmap, String field) {\n+        final EnvType type;\n+        if (secret != null) {\n+            type = EnvType.field;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e777fbcddab199af295cefb7f1a0f69d625b386d"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDc5NDAzOnYy", "diffSide": "RIGHT", "path": "extensions/kubernetes/spi/src/main/java/io/quarkus/kubernetes/spi/KubernetesEnvBuildItem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzoyMToyNFrOGP__qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzoyMToyNFrOGP__qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzMDMxNA==", "bodyText": "This is me being compulsive, but since the key is (key, name), how about we bring the type next to the name?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public KubernetesEnvBuildItem(String name, String value, EnvType type, String target) {\n          \n          \n            \n                public KubernetesEnvBuildItem( EnvType type, String name, String value, String target) {", "url": "https://github.com/quarkusio/quarkus/pull/8894#discussion_r419430314", "createdAt": "2020-05-04T13:21:24Z", "author": {"login": "iocanel"}, "path": "extensions/kubernetes/spi/src/main/java/io/quarkus/kubernetes/spi/KubernetesEnvBuildItem.java", "diffHunk": "@@ -5,26 +5,96 @@\n \n public final class KubernetesEnvBuildItem extends MultiBuildItem {\n \n+    public static ItemKey keyFor(EnvType type, String name) {\n+        return new ItemKey(type, name);\n+    }\n+\n+    public static ItemKey keyFor(KubernetesEnvBuildItem item) {\n+        return new ItemKey(item.getType(), item.getName());\n+    }\n+\n+    public enum EnvType {\n+        var(false),\n+        field(false),\n+        secret(true),\n+        configmap(true);\n+\n+        public final boolean allowMultipleDefinitions;\n+\n+        EnvType(boolean allowMultipleDefinitions) {\n+            this.allowMultipleDefinitions = allowMultipleDefinitions;\n+        }\n+\n+        public boolean isCompatibleWith(EnvType type) {\n+            if (this == type) {\n+                return true;\n+            }\n+\n+            switch (this) {\n+                case field:\n+                    return type == var;\n+                case var:\n+                    return type == field;\n+                case secret:\n+                    return type == configmap;\n+                case configmap:\n+                    return type == secret;\n+                default:\n+                    return false;\n+            }\n+        }\n+    }\n+\n     private final String name;\n     private final String value;\n-    private final String secret;\n-    private final String configmap;\n-    private final String field;\n+    private final EnvType type;\n     private final String target;\n \n     public KubernetesEnvBuildItem(String name, String value, String target) {\n-        this(name, value, null, null, null, target);\n+        this(name, value, EnvType.var, target);\n     }\n \n-    public KubernetesEnvBuildItem(String name, String value, String secret, String configmap, String field, String target) {\n+    public static EnvType getEnvType(String secret, String configmap, String field) {\n+        final EnvType type;\n+        if (secret != null) {\n+            type = EnvType.field;\n+        } else if (configmap != null) {\n+            type = EnvType.configmap;\n+        } else if (field != null) {\n+            type = EnvType.field;\n+        } else {\n+            type = EnvType.var;\n+        }\n+        return type;\n+    }\n+\n+    public KubernetesEnvBuildItem(String name, String value, EnvType type, String target) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e777fbcddab199af295cefb7f1a0f69d625b386d"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDgzNTMzOnYy", "diffSide": "RIGHT", "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/EnvVarHolder.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzozMDoxMlrOGQAYBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzo1NDowNFrOGQqhhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzNjU1MA==", "bodyText": "This feels weird, as we already have deployment target which may return one or more target platforms, can we use that fields instead?", "url": "https://github.com/quarkusio/quarkus/pull/8894#discussion_r419436550", "createdAt": "2020-05-04T13:30:12Z", "author": {"login": "iocanel"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/EnvVarHolder.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package io.quarkus.kubernetes.deployment;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+\n+import io.quarkus.kubernetes.spi.KubernetesEnvBuildItem;\n+\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.configmap;\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.field;\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.secret;\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.var;\n+\n+/**\n+ * Common interface for configuration entities holding environment variables meant to be injected into containers.\n+ */\n+public interface EnvVarHolder {\n+    /**\n+     * Retrieves the definition of environment variables to add to the application's container.\n+     *\n+     * @return the associated {@link EnvVarsConfig} holding the definition of which environment variables to add\n+     */\n+    EnvVarsConfig getEnv();\n+    \n+    /**\n+     * @deprecated use {@link #getEnv()} instead\n+     */\n+    @Deprecated\n+    Map<String, EnvConfig> getEnvVars();\n+    \n+    /**\n+     * Specifies which platform this EnvVarHolder targets. This needs to be overridden by implementations that care about which\n+     * platform they target.\n+     *\n+     * @return the name of the targeted platform e.g. {@code kubernetes}\n+     */\n+    default String getTarget() {\n+        return \"UNUSED\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e777fbcddab199af295cefb7f1a0f69d625b386d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2MjU1OA==", "bodyText": "Not sure I follow here. I might have missed something. Could you elaborate, please?", "url": "https://github.com/quarkusio/quarkus/pull/8894#discussion_r419462558", "createdAt": "2020-05-04T14:06:15Z", "author": {"login": "metacosm"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/EnvVarHolder.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package io.quarkus.kubernetes.deployment;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+\n+import io.quarkus.kubernetes.spi.KubernetesEnvBuildItem;\n+\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.configmap;\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.field;\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.secret;\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.var;\n+\n+/**\n+ * Common interface for configuration entities holding environment variables meant to be injected into containers.\n+ */\n+public interface EnvVarHolder {\n+    /**\n+     * Retrieves the definition of environment variables to add to the application's container.\n+     *\n+     * @return the associated {@link EnvVarsConfig} holding the definition of which environment variables to add\n+     */\n+    EnvVarsConfig getEnv();\n+    \n+    /**\n+     * @deprecated use {@link #getEnv()} instead\n+     */\n+    @Deprecated\n+    Map<String, EnvConfig> getEnvVars();\n+    \n+    /**\n+     * Specifies which platform this EnvVarHolder targets. This needs to be overridden by implementations that care about which\n+     * platform they target.\n+     *\n+     * @return the name of the targeted platform e.g. {@code kubernetes}\n+     */\n+    default String getTarget() {\n+        return \"UNUSED\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzNjU1MA=="}, "originalCommit": {"oid": "e777fbcddab199af295cefb7f1a0f69d625b386d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg3NjkwNA==", "bodyText": "IIUC, @iocanel is wondering if KubernetesConfig#deploymentTarget can be used instead. I agree with him, this does look a little weird.", "url": "https://github.com/quarkusio/quarkus/pull/8894#discussion_r419876904", "createdAt": "2020-05-05T05:51:06Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/EnvVarHolder.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package io.quarkus.kubernetes.deployment;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+\n+import io.quarkus.kubernetes.spi.KubernetesEnvBuildItem;\n+\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.configmap;\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.field;\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.secret;\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.var;\n+\n+/**\n+ * Common interface for configuration entities holding environment variables meant to be injected into containers.\n+ */\n+public interface EnvVarHolder {\n+    /**\n+     * Retrieves the definition of environment variables to add to the application's container.\n+     *\n+     * @return the associated {@link EnvVarsConfig} holding the definition of which environment variables to add\n+     */\n+    EnvVarsConfig getEnv();\n+    \n+    /**\n+     * @deprecated use {@link #getEnv()} instead\n+     */\n+    @Deprecated\n+    Map<String, EnvConfig> getEnvVars();\n+    \n+    /**\n+     * Specifies which platform this EnvVarHolder targets. This needs to be overridden by implementations that care about which\n+     * platform they target.\n+     *\n+     * @return the name of the targeted platform e.g. {@code kubernetes}\n+     */\n+    default String getTarget() {\n+        return \"UNUSED\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzNjU1MA=="}, "originalCommit": {"oid": "e777fbcddab199af295cefb7f1a0f69d625b386d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk0MjYxMQ==", "bodyText": "I will check but I don't think it's feasible because that field is used to define which of the implementations of EnvVarHolder need to be created (e.g. KubernetesConfig) whereas getTarget lets the generic code know which platform a given implementation targets. I agree that this is a little weird but it is convenient to have common processing of env vars for all platforms (including ContainerConfig which actually doesn't use the target field, hence the default implementation).", "url": "https://github.com/quarkusio/quarkus/pull/8894#discussion_r419942611", "createdAt": "2020-05-05T08:25:58Z", "author": {"login": "metacosm"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/EnvVarHolder.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package io.quarkus.kubernetes.deployment;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+\n+import io.quarkus.kubernetes.spi.KubernetesEnvBuildItem;\n+\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.configmap;\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.field;\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.secret;\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.var;\n+\n+/**\n+ * Common interface for configuration entities holding environment variables meant to be injected into containers.\n+ */\n+public interface EnvVarHolder {\n+    /**\n+     * Retrieves the definition of environment variables to add to the application's container.\n+     *\n+     * @return the associated {@link EnvVarsConfig} holding the definition of which environment variables to add\n+     */\n+    EnvVarsConfig getEnv();\n+    \n+    /**\n+     * @deprecated use {@link #getEnv()} instead\n+     */\n+    @Deprecated\n+    Map<String, EnvConfig> getEnvVars();\n+    \n+    /**\n+     * Specifies which platform this EnvVarHolder targets. This needs to be overridden by implementations that care about which\n+     * platform they target.\n+     *\n+     * @return the name of the targeted platform e.g. {@code kubernetes}\n+     */\n+    default String getTarget() {\n+        return \"UNUSED\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzNjU1MA=="}, "originalCommit": {"oid": "e777fbcddab199af295cefb7f1a0f69d625b386d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4MDIzNw==", "bodyText": "If I understand correctly, the method is used the specify the 'kind' of the config that is bearing the envars, right? If this is the case, I feel that there shouldn't be a default value returned and maybe the value could be derived from the classname. In any case I feel we need a different name for this.", "url": "https://github.com/quarkusio/quarkus/pull/8894#discussion_r420080237", "createdAt": "2020-05-05T12:45:58Z", "author": {"login": "iocanel"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/EnvVarHolder.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package io.quarkus.kubernetes.deployment;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+\n+import io.quarkus.kubernetes.spi.KubernetesEnvBuildItem;\n+\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.configmap;\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.field;\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.secret;\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.var;\n+\n+/**\n+ * Common interface for configuration entities holding environment variables meant to be injected into containers.\n+ */\n+public interface EnvVarHolder {\n+    /**\n+     * Retrieves the definition of environment variables to add to the application's container.\n+     *\n+     * @return the associated {@link EnvVarsConfig} holding the definition of which environment variables to add\n+     */\n+    EnvVarsConfig getEnv();\n+    \n+    /**\n+     * @deprecated use {@link #getEnv()} instead\n+     */\n+    @Deprecated\n+    Map<String, EnvConfig> getEnvVars();\n+    \n+    /**\n+     * Specifies which platform this EnvVarHolder targets. This needs to be overridden by implementations that care about which\n+     * platform they target.\n+     *\n+     * @return the name of the targeted platform e.g. {@code kubernetes}\n+     */\n+    default String getTarget() {\n+        return \"UNUSED\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzNjU1MA=="}, "originalCommit": {"oid": "e777fbcddab199af295cefb7f1a0f69d625b386d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEyNzEwOA==", "bodyText": "The value returned by the getTarget method is used to create KubernetesEnvBuildItem and the value is then used by the KubernetesProcessor to decorate dekorate resources. Of note, the value is actually unused for the ContainerConfig implementation since it is not consumed by the KubernetesProcessor.\nI guess we could derive it from the implementing class name but that seems dangerous to me since that value is used by dekorate to generate the file names. Also, we could certainly change the name but I simply reused the name that already existed on KubernetesEnvBuildItem which this method is used to create.", "url": "https://github.com/quarkusio/quarkus/pull/8894#discussion_r420127108", "createdAt": "2020-05-05T13:54:04Z", "author": {"login": "metacosm"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/EnvVarHolder.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package io.quarkus.kubernetes.deployment;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+\n+import io.quarkus.kubernetes.spi.KubernetesEnvBuildItem;\n+\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.configmap;\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.field;\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.secret;\n+import static io.quarkus.kubernetes.spi.KubernetesEnvBuildItem.EnvType.var;\n+\n+/**\n+ * Common interface for configuration entities holding environment variables meant to be injected into containers.\n+ */\n+public interface EnvVarHolder {\n+    /**\n+     * Retrieves the definition of environment variables to add to the application's container.\n+     *\n+     * @return the associated {@link EnvVarsConfig} holding the definition of which environment variables to add\n+     */\n+    EnvVarsConfig getEnv();\n+    \n+    /**\n+     * @deprecated use {@link #getEnv()} instead\n+     */\n+    @Deprecated\n+    Map<String, EnvConfig> getEnvVars();\n+    \n+    /**\n+     * Specifies which platform this EnvVarHolder targets. This needs to be overridden by implementations that care about which\n+     * platform they target.\n+     *\n+     * @return the name of the targeted platform e.g. {@code kubernetes}\n+     */\n+    default String getTarget() {\n+        return \"UNUSED\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzNjU1MA=="}, "originalCommit": {"oid": "e777fbcddab199af295cefb7f1a0f69d625b386d"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDg0NzA2OnYy", "diffSide": "RIGHT", "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzozMjo0M1rOGQAfGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzozMjo0M1rOGQAfGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzODM2MQ==", "bodyText": "Neatpicking, but envar as a a key here can be confusing.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     <li>{@code quarkus.kubernetes.env-vars.envvar.value=value} becomes {@code quarkus.kubernetes.env.vars.envvar=value}</li>\n          \n          \n            \n                 *     <li>{@code quarkus.kubernetes.env-vars.foo.value=value} becomes {@code quarkus.kubernetes.env.vars.foo=bar}</li>", "url": "https://github.com/quarkusio/quarkus/pull/8894#discussion_r419438361", "createdAt": "2020-05-04T13:32:43Z", "author": {"login": "iocanel"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesConfig.java", "diffHunk": "@@ -230,10 +224,41 @@ public boolean isAddBuildTimestamp() {\n         return addBuildTimestamp;\n     }\n \n+    @Override\n+    public String getTarget() {\n+        return Constants.KUBERNETES;\n+    }\n+    \n+    /**\n+     * Environment variables to add to all containers using the old syntax.\n+     *\n+     * @deprecated Use {@link #env} instead using the new syntax as follows:\n+     * <ul>\n+     *     <li>{@code quarkus.kubernetes.env-vars.foo.field=fieldName} becomes {@code quarkus.kubernetes.env.fields.foo=fieldName}</li>\n+     *     <li>{@code quarkus.kubernetes.env-vars.envvar.value=value} becomes {@code quarkus.kubernetes.env.vars.envvar=value}</li>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e777fbcddab199af295cefb7f1a0f69d625b386d"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3301, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}