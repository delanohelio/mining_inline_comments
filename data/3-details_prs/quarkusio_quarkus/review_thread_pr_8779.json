{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3Nzc2OTIz", "number": 8779, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxODo0Njo1OVrOD4rzeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODozNDoyOVrOD7jD5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzY0NTM4OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/builditem/FeatureBuildItem.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxODo0Njo1OVrOGPlV-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwODozNjo1NFrOGPp9vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5MzY1Ng==", "bodyText": "SPRING_CACHE should come before SPRING_CLOUD_CONFIG_CLIENT if alphabetical order matters :)", "url": "https://github.com/quarkusio/quarkus/pull/8779#discussion_r418993656", "createdAt": "2020-05-02T18:46:59Z", "author": {"login": "gwenneg"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/builditem/FeatureBuildItem.java", "diffHunk": "@@ -93,6 +93,7 @@\n     public static final String SPRING_SECURITY = \"spring-security\";\n     public static final String SPRING_BOOT_PROPERTIES = \"spring-boot-properties\";\n     public static final String SPRING_CLOUD_CONFIG_CLIENT = \"spring-cloud-config-client\";\n+    public static final String SPRING_CACHE = \"spring-cache\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fd2c9aa5ccd3bb7c2fd06ef5b067fe50111889"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2OTM3NQ==", "bodyText": "It does, so I'll fix it", "url": "https://github.com/quarkusio/quarkus/pull/8779#discussion_r419069375", "createdAt": "2020-05-03T08:36:54Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/builditem/FeatureBuildItem.java", "diffHunk": "@@ -93,6 +93,7 @@\n     public static final String SPRING_SECURITY = \"spring-security\";\n     public static final String SPRING_BOOT_PROPERTIES = \"spring-boot-properties\";\n     public static final String SPRING_CLOUD_CONFIG_CLIENT = \"spring-cloud-config-client\";\n+    public static final String SPRING_CACHE = \"spring-cache\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5MzY1Ng=="}, "originalCommit": {"oid": "d8fd2c9aa5ccd3bb7c2fd06ef5b067fe50111889"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzcxMDU2OnYy", "diffSide": "RIGHT", "path": "extensions/spring-cache/deployment/src/test/resources/cache-config-test.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMDowMzoyNlrOGPl0rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwODozNjo0MFrOGPp9nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwMTUxNg==", "bodyText": "Is this file used somewhere?", "url": "https://github.com/quarkusio/quarkus/pull/8779#discussion_r419001516", "createdAt": "2020-05-02T20:03:26Z", "author": {"login": "gwenneg"}, "path": "extensions/spring-cache/deployment/src/test/resources/cache-config-test.properties", "diffHunk": "@@ -0,0 +1,4 @@\n+quarkus.cache.caffeine.\"test-cache\".initial-capacity=10\n+quarkus.cache.caffeine.\"test-cache\".maximum-size=100\n+quarkus.cache.caffeine.\"test-cache\".expire-after-write=30\n+quarkus.cache.caffeine.\"test-cache\".expire-after-access=P2D", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fd2c9aa5ccd3bb7c2fd06ef5b067fe50111889"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2OTM0Mw==", "bodyText": "Nope, it got carried over from me copy-pasting test code. Thanks for spotting", "url": "https://github.com/quarkusio/quarkus/pull/8779#discussion_r419069343", "createdAt": "2020-05-03T08:36:40Z", "author": {"login": "geoand"}, "path": "extensions/spring-cache/deployment/src/test/resources/cache-config-test.properties", "diffHunk": "@@ -0,0 +1,4 @@\n+quarkus.cache.caffeine.\"test-cache\".initial-capacity=10\n+quarkus.cache.caffeine.\"test-cache\".maximum-size=100\n+quarkus.cache.caffeine.\"test-cache\".expire-after-write=30\n+quarkus.cache.caffeine.\"test-cache\".expire-after-access=P2D", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwMTUxNg=="}, "originalCommit": {"oid": "d8fd2c9aa5ccd3bb7c2fd06ef5b067fe50111889"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzcxODk4OnYy", "diffSide": "RIGHT", "path": "extensions/spring-cache/deployment/src/test/java/io/quarkus/cache/test/runtime/UnsupportedAnnotationValueTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMDoxMzozMlrOGPl4gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwODo0OToyN1rOGPqDNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwMjQ5OA==", "bodyText": "This message is not consistent with the test.", "url": "https://github.com/quarkusio/quarkus/pull/8779#discussion_r419002498", "createdAt": "2020-05-02T20:13:32Z", "author": {"login": "gwenneg"}, "path": "extensions/spring-cache/deployment/src/test/java/io/quarkus/cache/test/runtime/UnsupportedAnnotationValueTest.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package io.quarkus.cache.test.runtime;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import javax.inject.Singleton;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.springframework.cache.annotation.Cacheable;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class UnsupportedAnnotationValueTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest TEST = new QuarkusUnitTest().setArchiveProducer(\n+            () -> ShrinkWrap.create(JavaArchive.class).addClass(CachedService.class))\n+            .setExpectedException(IllegalArgumentException.class);\n+\n+    @Test\n+    public void testApplicationShouldNotStart() {\n+        fail(\"Application should not start when Spring caching annotations are used on a class instead of a method\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fd2c9aa5ccd3bb7c2fd06ef5b067fe50111889"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA3MDc3Mg==", "bodyText": "Fixed", "url": "https://github.com/quarkusio/quarkus/pull/8779#discussion_r419070772", "createdAt": "2020-05-03T08:49:27Z", "author": {"login": "geoand"}, "path": "extensions/spring-cache/deployment/src/test/java/io/quarkus/cache/test/runtime/UnsupportedAnnotationValueTest.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package io.quarkus.cache.test.runtime;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import javax.inject.Singleton;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.springframework.cache.annotation.Cacheable;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class UnsupportedAnnotationValueTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest TEST = new QuarkusUnitTest().setArchiveProducer(\n+            () -> ShrinkWrap.create(JavaArchive.class).addClass(CachedService.class))\n+            .setExpectedException(IllegalArgumentException.class);\n+\n+    @Test\n+    public void testApplicationShouldNotStart() {\n+        fail(\"Application should not start when Spring caching annotations are used on a class instead of a method\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwMjQ5OA=="}, "originalCommit": {"oid": "d8fd2c9aa5ccd3bb7c2fd06ef5b067fe50111889"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzcyNTAzOnYy", "diffSide": "RIGHT", "path": "extensions/spring-cache/runtime/src/main/resources/META-INF/quarkus-extension.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMDoyMDozMVrOGPl7Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwODozODoyMVrOGPp-Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwMzIzNQ==", "bodyText": "Is it OK to put the link here while the guide isn't part of the PR?", "url": "https://github.com/quarkusio/quarkus/pull/8779#discussion_r419003235", "createdAt": "2020-05-02T20:20:31Z", "author": {"login": "gwenneg"}, "path": "extensions/spring-cache/runtime/src/main/resources/META-INF/quarkus-extension.yaml", "diffHunk": "@@ -0,0 +1,10 @@\n+---\n+name: \"Quarkus Extension for Spring Cache API\"\n+metadata:\n+  keywords:\n+  - \"spring-cache\"\n+  - \"spring\"\n+  guide: \"https://quarkus.io/guides/spring-cache\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fd2c9aa5ccd3bb7c2fd06ef5b067fe50111889"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2OTUxNA==", "bodyText": "Yeah, it's fine since I'll be getting the guide in before the next release.", "url": "https://github.com/quarkusio/quarkus/pull/8779#discussion_r419069514", "createdAt": "2020-05-03T08:38:21Z", "author": {"login": "geoand"}, "path": "extensions/spring-cache/runtime/src/main/resources/META-INF/quarkus-extension.yaml", "diffHunk": "@@ -0,0 +1,10 @@\n+---\n+name: \"Quarkus Extension for Spring Cache API\"\n+metadata:\n+  keywords:\n+  - \"spring-cache\"\n+  - \"spring\"\n+  guide: \"https://quarkus.io/guides/spring-cache\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwMzIzNQ=="}, "originalCommit": {"oid": "d8fd2c9aa5ccd3bb7c2fd06ef5b067fe50111889"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzcyNzk4OnYy", "diffSide": "RIGHT", "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheAnnotationsTransformer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMDoyNDowOFrOGPl82Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QyMTowODoxMVrOGPvhdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwMzYwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        AnnotationInstance cacheResult = methodInfo.annotation(CACHEABLE);\n          \n          \n            \n                        AnnotationInstance cacheable = methodInfo.annotation(CACHEABLE);", "url": "https://github.com/quarkusio/quarkus/pull/8779#discussion_r419003609", "createdAt": "2020-05-02T20:24:08Z", "author": {"login": "gwenneg"}, "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheAnnotationsTransformer.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package io.quarkus.spring.cache;\n+\n+import static io.quarkus.spring.cache.SpringCacheProcessor.CACHEABLE;\n+import static io.quarkus.spring.cache.SpringCacheProcessor.CACHE_EVICT;\n+import static io.quarkus.spring.cache.SpringCacheProcessor.CACHE_PUT;\n+import static io.quarkus.spring.cache.SpringCacheUtil.getSpringCacheName;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.MethodInfo;\n+\n+import io.quarkus.arc.processor.AnnotationsTransformer;\n+import io.quarkus.cache.deployment.CacheDeploymentConstants;\n+import io.quarkus.cache.runtime.CacheInvalidateAllInterceptorBinding;\n+import io.quarkus.cache.runtime.CacheInvalidateInterceptorBinding;\n+import io.quarkus.cache.runtime.CacheResultInterceptorBinding;\n+\n+public class SpringCacheAnnotationsTransformer implements AnnotationsTransformer {\n+\n+    private static final DotName CACHE_RESULT_INTERCEPTOR_BINDING = DotName\n+            .createSimple(CacheResultInterceptorBinding.class.getName());\n+    private static final DotName CACHE_INVALIDATE_INTERCEPTOR_BINDING = DotName\n+            .createSimple(CacheInvalidateInterceptorBinding.class.getName());\n+    private static final DotName CACHE_INVALIDATE_ALL_INTERCEPTOR_BINDING = DotName\n+            .createSimple(CacheInvalidateAllInterceptorBinding.class.getName());\n+\n+    @Override\n+    public boolean appliesTo(AnnotationTarget.Kind kind) {\n+        return kind == AnnotationTarget.Kind.METHOD;\n+    }\n+\n+    @Override\n+    public void transform(TransformationContext transformationContext) {\n+        AnnotationTarget target = transformationContext.getTarget();\n+        if (target.kind() != AnnotationTarget.Kind.METHOD) {\n+            return;\n+        }\n+        MethodInfo methodInfo = target.asMethod();\n+        if (methodInfo.hasAnnotation(CACHEABLE)) {\n+            AnnotationInstance cacheResult = methodInfo.annotation(CACHEABLE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fd2c9aa5ccd3bb7c2fd06ef5b067fe50111889"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE1ODgxNg==", "bodyText": "This one doesn't look resolved.", "url": "https://github.com/quarkusio/quarkus/pull/8779#discussion_r419158816", "createdAt": "2020-05-03T20:54:45Z", "author": {"login": "gwenneg"}, "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheAnnotationsTransformer.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package io.quarkus.spring.cache;\n+\n+import static io.quarkus.spring.cache.SpringCacheProcessor.CACHEABLE;\n+import static io.quarkus.spring.cache.SpringCacheProcessor.CACHE_EVICT;\n+import static io.quarkus.spring.cache.SpringCacheProcessor.CACHE_PUT;\n+import static io.quarkus.spring.cache.SpringCacheUtil.getSpringCacheName;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.MethodInfo;\n+\n+import io.quarkus.arc.processor.AnnotationsTransformer;\n+import io.quarkus.cache.deployment.CacheDeploymentConstants;\n+import io.quarkus.cache.runtime.CacheInvalidateAllInterceptorBinding;\n+import io.quarkus.cache.runtime.CacheInvalidateInterceptorBinding;\n+import io.quarkus.cache.runtime.CacheResultInterceptorBinding;\n+\n+public class SpringCacheAnnotationsTransformer implements AnnotationsTransformer {\n+\n+    private static final DotName CACHE_RESULT_INTERCEPTOR_BINDING = DotName\n+            .createSimple(CacheResultInterceptorBinding.class.getName());\n+    private static final DotName CACHE_INVALIDATE_INTERCEPTOR_BINDING = DotName\n+            .createSimple(CacheInvalidateInterceptorBinding.class.getName());\n+    private static final DotName CACHE_INVALIDATE_ALL_INTERCEPTOR_BINDING = DotName\n+            .createSimple(CacheInvalidateAllInterceptorBinding.class.getName());\n+\n+    @Override\n+    public boolean appliesTo(AnnotationTarget.Kind kind) {\n+        return kind == AnnotationTarget.Kind.METHOD;\n+    }\n+\n+    @Override\n+    public void transform(TransformationContext transformationContext) {\n+        AnnotationTarget target = transformationContext.getTarget();\n+        if (target.kind() != AnnotationTarget.Kind.METHOD) {\n+            return;\n+        }\n+        MethodInfo methodInfo = target.asMethod();\n+        if (methodInfo.hasAnnotation(CACHEABLE)) {\n+            AnnotationInstance cacheResult = methodInfo.annotation(CACHEABLE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwMzYwOQ=="}, "originalCommit": {"oid": "d8fd2c9aa5ccd3bb7c2fd06ef5b067fe50111889"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE2MDQzNw==", "bodyText": "Fixed", "url": "https://github.com/quarkusio/quarkus/pull/8779#discussion_r419160437", "createdAt": "2020-05-03T21:08:11Z", "author": {"login": "geoand"}, "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheAnnotationsTransformer.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package io.quarkus.spring.cache;\n+\n+import static io.quarkus.spring.cache.SpringCacheProcessor.CACHEABLE;\n+import static io.quarkus.spring.cache.SpringCacheProcessor.CACHE_EVICT;\n+import static io.quarkus.spring.cache.SpringCacheProcessor.CACHE_PUT;\n+import static io.quarkus.spring.cache.SpringCacheUtil.getSpringCacheName;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.MethodInfo;\n+\n+import io.quarkus.arc.processor.AnnotationsTransformer;\n+import io.quarkus.cache.deployment.CacheDeploymentConstants;\n+import io.quarkus.cache.runtime.CacheInvalidateAllInterceptorBinding;\n+import io.quarkus.cache.runtime.CacheInvalidateInterceptorBinding;\n+import io.quarkus.cache.runtime.CacheResultInterceptorBinding;\n+\n+public class SpringCacheAnnotationsTransformer implements AnnotationsTransformer {\n+\n+    private static final DotName CACHE_RESULT_INTERCEPTOR_BINDING = DotName\n+            .createSimple(CacheResultInterceptorBinding.class.getName());\n+    private static final DotName CACHE_INVALIDATE_INTERCEPTOR_BINDING = DotName\n+            .createSimple(CacheInvalidateInterceptorBinding.class.getName());\n+    private static final DotName CACHE_INVALIDATE_ALL_INTERCEPTOR_BINDING = DotName\n+            .createSimple(CacheInvalidateAllInterceptorBinding.class.getName());\n+\n+    @Override\n+    public boolean appliesTo(AnnotationTarget.Kind kind) {\n+        return kind == AnnotationTarget.Kind.METHOD;\n+    }\n+\n+    @Override\n+    public void transform(TransformationContext transformationContext) {\n+        AnnotationTarget target = transformationContext.getTarget();\n+        if (target.kind() != AnnotationTarget.Kind.METHOD) {\n+            return;\n+        }\n+        MethodInfo methodInfo = target.asMethod();\n+        if (methodInfo.hasAnnotation(CACHEABLE)) {\n+            AnnotationInstance cacheResult = methodInfo.annotation(CACHEABLE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwMzYwOQ=="}, "originalCommit": {"oid": "d8fd2c9aa5ccd3bb7c2fd06ef5b067fe50111889"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzcyODIzOnYy", "diffSide": "RIGHT", "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheAnnotationsTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMDoyNDoyOFrOGPl89Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMDoyNDoyOFrOGPl89Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwMzYzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        AnnotationInstance cacheResult = methodInfo.annotation(CACHE_PUT);\n          \n          \n            \n                        AnnotationInstance cachePut = methodInfo.annotation(CACHE_PUT);", "url": "https://github.com/quarkusio/quarkus/pull/8779#discussion_r419003637", "createdAt": "2020-05-02T20:24:28Z", "author": {"login": "gwenneg"}, "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheAnnotationsTransformer.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package io.quarkus.spring.cache;\n+\n+import static io.quarkus.spring.cache.SpringCacheProcessor.CACHEABLE;\n+import static io.quarkus.spring.cache.SpringCacheProcessor.CACHE_EVICT;\n+import static io.quarkus.spring.cache.SpringCacheProcessor.CACHE_PUT;\n+import static io.quarkus.spring.cache.SpringCacheUtil.getSpringCacheName;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.MethodInfo;\n+\n+import io.quarkus.arc.processor.AnnotationsTransformer;\n+import io.quarkus.cache.deployment.CacheDeploymentConstants;\n+import io.quarkus.cache.runtime.CacheInvalidateAllInterceptorBinding;\n+import io.quarkus.cache.runtime.CacheInvalidateInterceptorBinding;\n+import io.quarkus.cache.runtime.CacheResultInterceptorBinding;\n+\n+public class SpringCacheAnnotationsTransformer implements AnnotationsTransformer {\n+\n+    private static final DotName CACHE_RESULT_INTERCEPTOR_BINDING = DotName\n+            .createSimple(CacheResultInterceptorBinding.class.getName());\n+    private static final DotName CACHE_INVALIDATE_INTERCEPTOR_BINDING = DotName\n+            .createSimple(CacheInvalidateInterceptorBinding.class.getName());\n+    private static final DotName CACHE_INVALIDATE_ALL_INTERCEPTOR_BINDING = DotName\n+            .createSimple(CacheInvalidateAllInterceptorBinding.class.getName());\n+\n+    @Override\n+    public boolean appliesTo(AnnotationTarget.Kind kind) {\n+        return kind == AnnotationTarget.Kind.METHOD;\n+    }\n+\n+    @Override\n+    public void transform(TransformationContext transformationContext) {\n+        AnnotationTarget target = transformationContext.getTarget();\n+        if (target.kind() != AnnotationTarget.Kind.METHOD) {\n+            return;\n+        }\n+        MethodInfo methodInfo = target.asMethod();\n+        if (methodInfo.hasAnnotation(CACHEABLE)) {\n+            AnnotationInstance cacheResult = methodInfo.annotation(CACHEABLE);\n+            String cacheName = getSpringCacheName(cacheResult);\n+            if ((cacheName != null) && !cacheName.isEmpty()) {\n+                transformationContext.transform().add(CACHE_RESULT_INTERCEPTOR_BINDING,\n+                        AnnotationValue.createStringValue(CacheDeploymentConstants.CACHE_NAME_PARAM, cacheName)).done();\n+            }\n+        } else if (methodInfo.hasAnnotation(CACHE_EVICT)) {\n+            AnnotationInstance cacheEvict = methodInfo.annotation(CACHE_EVICT);\n+            String cacheName = getSpringCacheName(cacheEvict);\n+            if ((cacheName == null) || cacheName.isEmpty()) {\n+                return;\n+            }\n+            AnnotationValue allEntriesValue = cacheEvict.value(\"allEntries\");\n+            boolean allEntries = false;\n+            if (allEntriesValue != null) {\n+                allEntries = allEntriesValue.asBoolean();\n+            }\n+            transformationContext.transform()\n+                    .add(allEntries ? CACHE_INVALIDATE_ALL_INTERCEPTOR_BINDING\n+                            : CACHE_INVALIDATE_INTERCEPTOR_BINDING,\n+                            AnnotationValue.createStringValue(CacheDeploymentConstants.CACHE_NAME_PARAM, cacheName))\n+                    .done();\n+        } else if (methodInfo.hasAnnotation(CACHE_PUT)) {\n+            /*\n+             * @CachePut is just an operation that overrides the cache entry with the new result so it is\n+             * equivalent of first invalidating the cache entry and then adding the new result\n+             */\n+            AnnotationInstance cacheResult = methodInfo.annotation(CACHE_PUT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fd2c9aa5ccd3bb7c2fd06ef5b067fe50111889"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzc0MTA4OnYy", "diffSide": "RIGHT", "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMDozOTowM1rOGPmDFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMTo1Nzo1NVrOGPmhaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwNTIwNA==", "bodyText": "Out of curiosity, will key be supported in the future?", "url": "https://github.com/quarkusio/quarkus/pull/8779#discussion_r419005204", "createdAt": "2020-05-02T20:39:03Z", "author": {"login": "gwenneg"}, "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheProcessor.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package io.quarkus.spring.cache;\n+\n+import static io.quarkus.spring.cache.SpringCacheUtil.*;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.DotName;\n+import org.springframework.cache.annotation.CacheEvict;\n+import org.springframework.cache.annotation.CachePut;\n+import org.springframework.cache.annotation.Cacheable;\n+\n+import io.quarkus.arc.deployment.AnnotationsTransformerBuildItem;\n+import io.quarkus.cache.deployment.AdditionalCacheNameBuildItem;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+\n+public class SpringCacheProcessor {\n+\n+    static final DotName CACHEABLE = DotName.createSimple(Cacheable.class.getName());\n+    static final DotName CACHE_PUT = DotName.createSimple(CachePut.class.getName());\n+    static final DotName CACHE_EVICT = DotName.createSimple(CacheEvict.class.getName());\n+\n+    private static final List<DotName> CACHE_ANNOTATIONS = Collections\n+            .unmodifiableList(Arrays.asList(CACHEABLE, CACHE_PUT, CACHE_EVICT));\n+\n+    // some of these restrictions can probably lifted by us doing additional work on caching after https://github.com/quarkusio/quarkus/pull/8631 lands\n+    private static final Set<String> CURRENTLY_UNSUPPORTED_ANNOTATION_VALUES = Collections\n+            .unmodifiableSet(new HashSet<>(Arrays.asList(\"key\", \"keyGenerator\", \"cacheManager\", \"cacheResolver\", \"condition\",\n+                    \"unless\", \"sync\", \"beforeInvocation\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fd2c9aa5ccd3bb7c2fd06ef5b067fe50111889"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAxMjk2OQ==", "bodyText": "Yes, I plan to add support for it. It shouldn't be too tough, but it will require more control over the interceptors than we currently have. We'll need something akin to what Spring Security uses.", "url": "https://github.com/quarkusio/quarkus/pull/8779#discussion_r419012969", "createdAt": "2020-05-02T21:57:55Z", "author": {"login": "geoand"}, "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheProcessor.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package io.quarkus.spring.cache;\n+\n+import static io.quarkus.spring.cache.SpringCacheUtil.*;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.DotName;\n+import org.springframework.cache.annotation.CacheEvict;\n+import org.springframework.cache.annotation.CachePut;\n+import org.springframework.cache.annotation.Cacheable;\n+\n+import io.quarkus.arc.deployment.AnnotationsTransformerBuildItem;\n+import io.quarkus.cache.deployment.AdditionalCacheNameBuildItem;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+\n+public class SpringCacheProcessor {\n+\n+    static final DotName CACHEABLE = DotName.createSimple(Cacheable.class.getName());\n+    static final DotName CACHE_PUT = DotName.createSimple(CachePut.class.getName());\n+    static final DotName CACHE_EVICT = DotName.createSimple(CacheEvict.class.getName());\n+\n+    private static final List<DotName> CACHE_ANNOTATIONS = Collections\n+            .unmodifiableList(Arrays.asList(CACHEABLE, CACHE_PUT, CACHE_EVICT));\n+\n+    // some of these restrictions can probably lifted by us doing additional work on caching after https://github.com/quarkusio/quarkus/pull/8631 lands\n+    private static final Set<String> CURRENTLY_UNSUPPORTED_ANNOTATION_VALUES = Collections\n+            .unmodifiableSet(new HashSet<>(Arrays.asList(\"key\", \"keyGenerator\", \"cacheManager\", \"cacheResolver\", \"condition\",\n+                    \"unless\", \"sync\", \"beforeInvocation\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwNTIwNA=="}, "originalCommit": {"oid": "d8fd2c9aa5ccd3bb7c2fd06ef5b067fe50111889"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzc0NTg5OnYy", "diffSide": "RIGHT", "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheAnnotationsTransformer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMDo0NDo1MVrOGPmFfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwODo0OTowOFrOGPqDAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwNTgyMQ==", "bodyText": "Is it OK to silently ignore at build time a @Cacheable annotation because of the absence of cache name?\nSame question for the other cases below.", "url": "https://github.com/quarkusio/quarkus/pull/8779#discussion_r419005821", "createdAt": "2020-05-02T20:44:51Z", "author": {"login": "gwenneg"}, "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheAnnotationsTransformer.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package io.quarkus.spring.cache;\n+\n+import static io.quarkus.spring.cache.SpringCacheProcessor.CACHEABLE;\n+import static io.quarkus.spring.cache.SpringCacheProcessor.CACHE_EVICT;\n+import static io.quarkus.spring.cache.SpringCacheProcessor.CACHE_PUT;\n+import static io.quarkus.spring.cache.SpringCacheUtil.getSpringCacheName;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.MethodInfo;\n+\n+import io.quarkus.arc.processor.AnnotationsTransformer;\n+import io.quarkus.cache.deployment.CacheDeploymentConstants;\n+import io.quarkus.cache.runtime.CacheInvalidateAllInterceptorBinding;\n+import io.quarkus.cache.runtime.CacheInvalidateInterceptorBinding;\n+import io.quarkus.cache.runtime.CacheResultInterceptorBinding;\n+\n+public class SpringCacheAnnotationsTransformer implements AnnotationsTransformer {\n+\n+    private static final DotName CACHE_RESULT_INTERCEPTOR_BINDING = DotName\n+            .createSimple(CacheResultInterceptorBinding.class.getName());\n+    private static final DotName CACHE_INVALIDATE_INTERCEPTOR_BINDING = DotName\n+            .createSimple(CacheInvalidateInterceptorBinding.class.getName());\n+    private static final DotName CACHE_INVALIDATE_ALL_INTERCEPTOR_BINDING = DotName\n+            .createSimple(CacheInvalidateAllInterceptorBinding.class.getName());\n+\n+    @Override\n+    public boolean appliesTo(AnnotationTarget.Kind kind) {\n+        return kind == AnnotationTarget.Kind.METHOD;\n+    }\n+\n+    @Override\n+    public void transform(TransformationContext transformationContext) {\n+        AnnotationTarget target = transformationContext.getTarget();\n+        if (target.kind() != AnnotationTarget.Kind.METHOD) {\n+            return;\n+        }\n+        MethodInfo methodInfo = target.asMethod();\n+        if (methodInfo.hasAnnotation(CACHEABLE)) {\n+            AnnotationInstance cacheResult = methodInfo.annotation(CACHEABLE);\n+            String cacheName = getSpringCacheName(cacheResult);\n+            if ((cacheName != null) && !cacheName.isEmpty()) {\n+                transformationContext.transform().add(CACHE_RESULT_INTERCEPTOR_BINDING,\n+                        AnnotationValue.createStringValue(CacheDeploymentConstants.CACHE_NAME_PARAM, cacheName)).done();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fd2c9aa5ccd3bb7c2fd06ef5b067fe50111889"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA3MDcyMw==", "bodyText": "Good idea, I'll add a warning", "url": "https://github.com/quarkusio/quarkus/pull/8779#discussion_r419070723", "createdAt": "2020-05-03T08:49:08Z", "author": {"login": "geoand"}, "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheAnnotationsTransformer.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package io.quarkus.spring.cache;\n+\n+import static io.quarkus.spring.cache.SpringCacheProcessor.CACHEABLE;\n+import static io.quarkus.spring.cache.SpringCacheProcessor.CACHE_EVICT;\n+import static io.quarkus.spring.cache.SpringCacheProcessor.CACHE_PUT;\n+import static io.quarkus.spring.cache.SpringCacheUtil.getSpringCacheName;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.MethodInfo;\n+\n+import io.quarkus.arc.processor.AnnotationsTransformer;\n+import io.quarkus.cache.deployment.CacheDeploymentConstants;\n+import io.quarkus.cache.runtime.CacheInvalidateAllInterceptorBinding;\n+import io.quarkus.cache.runtime.CacheInvalidateInterceptorBinding;\n+import io.quarkus.cache.runtime.CacheResultInterceptorBinding;\n+\n+public class SpringCacheAnnotationsTransformer implements AnnotationsTransformer {\n+\n+    private static final DotName CACHE_RESULT_INTERCEPTOR_BINDING = DotName\n+            .createSimple(CacheResultInterceptorBinding.class.getName());\n+    private static final DotName CACHE_INVALIDATE_INTERCEPTOR_BINDING = DotName\n+            .createSimple(CacheInvalidateInterceptorBinding.class.getName());\n+    private static final DotName CACHE_INVALIDATE_ALL_INTERCEPTOR_BINDING = DotName\n+            .createSimple(CacheInvalidateAllInterceptorBinding.class.getName());\n+\n+    @Override\n+    public boolean appliesTo(AnnotationTarget.Kind kind) {\n+        return kind == AnnotationTarget.Kind.METHOD;\n+    }\n+\n+    @Override\n+    public void transform(TransformationContext transformationContext) {\n+        AnnotationTarget target = transformationContext.getTarget();\n+        if (target.kind() != AnnotationTarget.Kind.METHOD) {\n+            return;\n+        }\n+        MethodInfo methodInfo = target.asMethod();\n+        if (methodInfo.hasAnnotation(CACHEABLE)) {\n+            AnnotationInstance cacheResult = methodInfo.annotation(CACHEABLE);\n+            String cacheName = getSpringCacheName(cacheResult);\n+            if ((cacheName != null) && !cacheName.isEmpty()) {\n+                transformationContext.transform().add(CACHE_RESULT_INTERCEPTOR_BINDING,\n+                        AnnotationValue.createStringValue(CacheDeploymentConstants.CACHE_NAME_PARAM, cacheName)).done();\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwNTgyMQ=="}, "originalCommit": {"oid": "d8fd2c9aa5ccd3bb7c2fd06ef5b067fe50111889"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzc0ODYzOnYy", "diffSide": "RIGHT", "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheAnnotationsTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMDo0ODozM1rOGPmG1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMDo0ODozM1rOGPmG1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwNjE2Ng==", "bodyText": "The code would be easier to read if this test was like the other ones :)\nEdit: See this comment first.", "url": "https://github.com/quarkusio/quarkus/pull/8779#discussion_r419006166", "createdAt": "2020-05-02T20:48:33Z", "author": {"login": "gwenneg"}, "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheAnnotationsTransformer.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package io.quarkus.spring.cache;\n+\n+import static io.quarkus.spring.cache.SpringCacheProcessor.CACHEABLE;\n+import static io.quarkus.spring.cache.SpringCacheProcessor.CACHE_EVICT;\n+import static io.quarkus.spring.cache.SpringCacheProcessor.CACHE_PUT;\n+import static io.quarkus.spring.cache.SpringCacheUtil.getSpringCacheName;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.MethodInfo;\n+\n+import io.quarkus.arc.processor.AnnotationsTransformer;\n+import io.quarkus.cache.deployment.CacheDeploymentConstants;\n+import io.quarkus.cache.runtime.CacheInvalidateAllInterceptorBinding;\n+import io.quarkus.cache.runtime.CacheInvalidateInterceptorBinding;\n+import io.quarkus.cache.runtime.CacheResultInterceptorBinding;\n+\n+public class SpringCacheAnnotationsTransformer implements AnnotationsTransformer {\n+\n+    private static final DotName CACHE_RESULT_INTERCEPTOR_BINDING = DotName\n+            .createSimple(CacheResultInterceptorBinding.class.getName());\n+    private static final DotName CACHE_INVALIDATE_INTERCEPTOR_BINDING = DotName\n+            .createSimple(CacheInvalidateInterceptorBinding.class.getName());\n+    private static final DotName CACHE_INVALIDATE_ALL_INTERCEPTOR_BINDING = DotName\n+            .createSimple(CacheInvalidateAllInterceptorBinding.class.getName());\n+\n+    @Override\n+    public boolean appliesTo(AnnotationTarget.Kind kind) {\n+        return kind == AnnotationTarget.Kind.METHOD;\n+    }\n+\n+    @Override\n+    public void transform(TransformationContext transformationContext) {\n+        AnnotationTarget target = transformationContext.getTarget();\n+        if (target.kind() != AnnotationTarget.Kind.METHOD) {\n+            return;\n+        }\n+        MethodInfo methodInfo = target.asMethod();\n+        if (methodInfo.hasAnnotation(CACHEABLE)) {\n+            AnnotationInstance cacheResult = methodInfo.annotation(CACHEABLE);\n+            String cacheName = getSpringCacheName(cacheResult);\n+            if ((cacheName != null) && !cacheName.isEmpty()) {\n+                transformationContext.transform().add(CACHE_RESULT_INTERCEPTOR_BINDING,\n+                        AnnotationValue.createStringValue(CacheDeploymentConstants.CACHE_NAME_PARAM, cacheName)).done();\n+            }\n+        } else if (methodInfo.hasAnnotation(CACHE_EVICT)) {\n+            AnnotationInstance cacheEvict = methodInfo.annotation(CACHE_EVICT);\n+            String cacheName = getSpringCacheName(cacheEvict);\n+            if ((cacheName == null) || cacheName.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fd2c9aa5ccd3bb7c2fd06ef5b067fe50111889"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzc1MDQ3OnYy", "diffSide": "RIGHT", "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMDo1MDoyMFrOGPmHpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMDo1MDoyMFrOGPmHpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwNjM3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    feature.produce(new FeatureBuildItem(FeatureBuildItem.SPRING_CLOUD_CONFIG_CLIENT));\n          \n          \n            \n                    feature.produce(new FeatureBuildItem(FeatureBuildItem.SPRING_CACHE));", "url": "https://github.com/quarkusio/quarkus/pull/8779#discussion_r419006374", "createdAt": "2020-05-02T20:50:20Z", "author": {"login": "gwenneg"}, "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheProcessor.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package io.quarkus.spring.cache;\n+\n+import static io.quarkus.spring.cache.SpringCacheUtil.*;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.DotName;\n+import org.springframework.cache.annotation.CacheEvict;\n+import org.springframework.cache.annotation.CachePut;\n+import org.springframework.cache.annotation.Cacheable;\n+\n+import io.quarkus.arc.deployment.AnnotationsTransformerBuildItem;\n+import io.quarkus.cache.deployment.AdditionalCacheNameBuildItem;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+\n+public class SpringCacheProcessor {\n+\n+    static final DotName CACHEABLE = DotName.createSimple(Cacheable.class.getName());\n+    static final DotName CACHE_PUT = DotName.createSimple(CachePut.class.getName());\n+    static final DotName CACHE_EVICT = DotName.createSimple(CacheEvict.class.getName());\n+\n+    private static final List<DotName> CACHE_ANNOTATIONS = Collections\n+            .unmodifiableList(Arrays.asList(CACHEABLE, CACHE_PUT, CACHE_EVICT));\n+\n+    // some of these restrictions can probably lifted by us doing additional work on caching after https://github.com/quarkusio/quarkus/pull/8631 lands\n+    private static final Set<String> CURRENTLY_UNSUPPORTED_ANNOTATION_VALUES = Collections\n+            .unmodifiableSet(new HashSet<>(Arrays.asList(\"key\", \"keyGenerator\", \"cacheManager\", \"cacheResolver\", \"condition\",\n+                    \"unless\", \"sync\", \"beforeInvocation\")));\n+\n+    @BuildStep\n+    void feature(BuildProducer<FeatureBuildItem> feature) {\n+        feature.produce(new FeatureBuildItem(FeatureBuildItem.SPRING_CLOUD_CONFIG_CLIENT));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fd2c9aa5ccd3bb7c2fd06ef5b067fe50111889"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzc1MTc0OnYy", "diffSide": "RIGHT", "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMDo1MTo1NFrOGPmISA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMDo1MTo1NFrOGPmISA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwNjUzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                + String.join(\",\", unsupportedValues));\n          \n          \n            \n                                + String.join(\", \", unsupportedValues));", "url": "https://github.com/quarkusio/quarkus/pull/8779#discussion_r419006536", "createdAt": "2020-05-02T20:51:54Z", "author": {"login": "gwenneg"}, "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheProcessor.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package io.quarkus.spring.cache;\n+\n+import static io.quarkus.spring.cache.SpringCacheUtil.*;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.DotName;\n+import org.springframework.cache.annotation.CacheEvict;\n+import org.springframework.cache.annotation.CachePut;\n+import org.springframework.cache.annotation.Cacheable;\n+\n+import io.quarkus.arc.deployment.AnnotationsTransformerBuildItem;\n+import io.quarkus.cache.deployment.AdditionalCacheNameBuildItem;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+\n+public class SpringCacheProcessor {\n+\n+    static final DotName CACHEABLE = DotName.createSimple(Cacheable.class.getName());\n+    static final DotName CACHE_PUT = DotName.createSimple(CachePut.class.getName());\n+    static final DotName CACHE_EVICT = DotName.createSimple(CacheEvict.class.getName());\n+\n+    private static final List<DotName> CACHE_ANNOTATIONS = Collections\n+            .unmodifiableList(Arrays.asList(CACHEABLE, CACHE_PUT, CACHE_EVICT));\n+\n+    // some of these restrictions can probably lifted by us doing additional work on caching after https://github.com/quarkusio/quarkus/pull/8631 lands\n+    private static final Set<String> CURRENTLY_UNSUPPORTED_ANNOTATION_VALUES = Collections\n+            .unmodifiableSet(new HashSet<>(Arrays.asList(\"key\", \"keyGenerator\", \"cacheManager\", \"cacheResolver\", \"condition\",\n+                    \"unless\", \"sync\", \"beforeInvocation\")));\n+\n+    @BuildStep\n+    void feature(BuildProducer<FeatureBuildItem> feature) {\n+        feature.produce(new FeatureBuildItem(FeatureBuildItem.SPRING_CLOUD_CONFIG_CLIENT));\n+    }\n+\n+    @BuildStep\n+    AnnotationsTransformerBuildItem transform() {\n+        return new AnnotationsTransformerBuildItem(new SpringCacheAnnotationsTransformer());\n+    }\n+\n+    @BuildStep\n+    List<AdditionalCacheNameBuildItem> cacheNames(CombinedIndexBuildItem combinedIndex) {\n+        Set<String> cacheNames = new HashSet<>();\n+        for (DotName cacheAnnotation : CACHE_ANNOTATIONS) {\n+            Collection<AnnotationInstance> instances = combinedIndex.getIndex().getAnnotations(cacheAnnotation);\n+            for (AnnotationInstance instance : instances) {\n+                validateUsage(instance);\n+                String cacheName = getSpringCacheName(instance);\n+                if ((cacheName != null) && !cacheName.isEmpty()) {\n+                    cacheNames.add(cacheName);\n+                }\n+            }\n+        }\n+        List<AdditionalCacheNameBuildItem> result = new ArrayList<>(cacheNames.size());\n+        for (String cacheName : cacheNames) {\n+            result.add(new AdditionalCacheNameBuildItem(cacheName));\n+        }\n+        return result;\n+    }\n+\n+    private void validateUsage(AnnotationInstance instance) {\n+        if (instance.target().kind() != AnnotationTarget.Kind.METHOD) {\n+            throw new IllegalArgumentException(\n+                    \"Currently Spring Caching annotations can only be added to methods. Offending instance is annotation '\"\n+                            + instance + \"' on \" + instance.target() + \"'\");\n+        }\n+        List<AnnotationValue> values = instance.values();\n+        List<String> unsupportedValues = new ArrayList<>();\n+        for (AnnotationValue value : values) {\n+            if (CURRENTLY_UNSUPPORTED_ANNOTATION_VALUES.contains(value.name())) {\n+                unsupportedValues.add(value.name());\n+            }\n+        }\n+        if (!unsupportedValues.isEmpty()) {\n+            throw new IllegalArgumentException(\"Annotation '\" +\n+                    instance + \"' on '\" + instance.target()\n+                    + \"' contains the following currently unsupported annotation values: \"\n+                    + String.join(\",\", unsupportedValues));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fd2c9aa5ccd3bb7c2fd06ef5b067fe50111889"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzc1NTg5OnYy", "diffSide": "RIGHT", "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMDo1Njo0MlrOGPmKVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwODo0Mjo0NFrOGPqAUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwNzA2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                static String getSpringCacheName(AnnotationInstance annotationInstance) {\n          \n          \n            \n                static Optional<String> getSpringCacheName(AnnotationInstance annotationInstance) {\n          \n      \n    \n    \n  \n\nReturning an Optional here that would be empty when cacheName == null || cacheName.isEmpty() could help reducing the number of tests conditions in SpringCacheAnnotationsTransformer.", "url": "https://github.com/quarkusio/quarkus/pull/8779#discussion_r419007062", "createdAt": "2020-05-02T20:56:42Z", "author": {"login": "gwenneg"}, "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheUtil.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package io.quarkus.spring.cache;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.AnnotationValue;\n+\n+final class SpringCacheUtil {\n+\n+    private SpringCacheUtil() {\n+    }\n+\n+    /**\n+     * Meant to be called for instances of {@code @Cacheable}, {@code @CacheEvict} or {@code @CachePut}\n+     * Returns the single name of the cache to use\n+     */\n+    static String getSpringCacheName(AnnotationInstance annotationInstance) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fd2c9aa5ccd3bb7c2fd06ef5b067fe50111889"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA3MDAzNA==", "bodyText": "Makes sense.", "url": "https://github.com/quarkusio/quarkus/pull/8779#discussion_r419070034", "createdAt": "2020-05-03T08:42:44Z", "author": {"login": "geoand"}, "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheUtil.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package io.quarkus.spring.cache;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.AnnotationValue;\n+\n+final class SpringCacheUtil {\n+\n+    private SpringCacheUtil() {\n+    }\n+\n+    /**\n+     * Meant to be called for instances of {@code @Cacheable}, {@code @CacheEvict} or {@code @CachePut}\n+     * Returns the single name of the cache to use\n+     */\n+    static String getSpringCacheName(AnnotationInstance annotationInstance) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwNzA2Mg=="}, "originalCommit": {"oid": "d8fd2c9aa5ccd3bb7c2fd06ef5b067fe50111889"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTAwMjMzOnYy", "diffSide": "RIGHT", "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QyMDo1Nzo0N1rOGPvchA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QyMTowODoyMFrOGPvhgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE1OTE3Mg==", "bodyText": "You had an empty string check before, it is gone on purpose?\nI expected return cacheName == null || cacheName.isEmpty() ? Optional.empty() : Optional.of(cacheName); here.", "url": "https://github.com/quarkusio/quarkus/pull/8779#discussion_r419159172", "createdAt": "2020-05-03T20:57:47Z", "author": {"login": "gwenneg"}, "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheUtil.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package io.quarkus.spring.cache;\n+\n+import java.util.Optional;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.AnnotationValue;\n+\n+final class SpringCacheUtil {\n+\n+    private SpringCacheUtil() {\n+    }\n+\n+    /**\n+     * Meant to be called for instances of {@code @Cacheable}, {@code @CacheEvict} or {@code @CachePut}\n+     * Returns the single name of the cache to use\n+     */\n+    static Optional<String> getSpringCacheName(AnnotationInstance annotationInstance) {\n+        String cacheName = null;\n+        AnnotationValue cacheNameValue = annotationInstance.value(\"cacheNames\");\n+        if (cacheNameValue != null) {\n+            cacheName = singleName(cacheNameValue, annotationInstance.target());\n+        }\n+        if (cacheName == null || cacheName.isEmpty()) {\n+            AnnotationValue value = annotationInstance.value();\n+            if (value != null) {\n+                cacheName = singleName(value, annotationInstance.target());\n+            }\n+        }\n+        return cacheName == null ? Optional.empty() : Optional.of(cacheName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f8a9aec176aa5066dbbd9ed309aa6a734da0b58"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE2MDA0NQ==", "bodyText": "Yeah I guess you are right. I should update it to be on the safe side", "url": "https://github.com/quarkusio/quarkus/pull/8779#discussion_r419160045", "createdAt": "2020-05-03T21:04:52Z", "author": {"login": "geoand"}, "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheUtil.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package io.quarkus.spring.cache;\n+\n+import java.util.Optional;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.AnnotationValue;\n+\n+final class SpringCacheUtil {\n+\n+    private SpringCacheUtil() {\n+    }\n+\n+    /**\n+     * Meant to be called for instances of {@code @Cacheable}, {@code @CacheEvict} or {@code @CachePut}\n+     * Returns the single name of the cache to use\n+     */\n+    static Optional<String> getSpringCacheName(AnnotationInstance annotationInstance) {\n+        String cacheName = null;\n+        AnnotationValue cacheNameValue = annotationInstance.value(\"cacheNames\");\n+        if (cacheNameValue != null) {\n+            cacheName = singleName(cacheNameValue, annotationInstance.target());\n+        }\n+        if (cacheName == null || cacheName.isEmpty()) {\n+            AnnotationValue value = annotationInstance.value();\n+            if (value != null) {\n+                cacheName = singleName(value, annotationInstance.target());\n+            }\n+        }\n+        return cacheName == null ? Optional.empty() : Optional.of(cacheName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE1OTE3Mg=="}, "originalCommit": {"oid": "0f8a9aec176aa5066dbbd9ed309aa6a734da0b58"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE2MDQ1MQ==", "bodyText": "Fixed", "url": "https://github.com/quarkusio/quarkus/pull/8779#discussion_r419160451", "createdAt": "2020-05-03T21:08:20Z", "author": {"login": "geoand"}, "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheUtil.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package io.quarkus.spring.cache;\n+\n+import java.util.Optional;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.AnnotationValue;\n+\n+final class SpringCacheUtil {\n+\n+    private SpringCacheUtil() {\n+    }\n+\n+    /**\n+     * Meant to be called for instances of {@code @Cacheable}, {@code @CacheEvict} or {@code @CachePut}\n+     * Returns the single name of the cache to use\n+     */\n+    static Optional<String> getSpringCacheName(AnnotationInstance annotationInstance) {\n+        String cacheName = null;\n+        AnnotationValue cacheNameValue = annotationInstance.value(\"cacheNames\");\n+        if (cacheNameValue != null) {\n+            cacheName = singleName(cacheNameValue, annotationInstance.target());\n+        }\n+        if (cacheName == null || cacheName.isEmpty()) {\n+            AnnotationValue value = annotationInstance.value();\n+            if (value != null) {\n+                cacheName = singleName(value, annotationInstance.target());\n+            }\n+        }\n+        return cacheName == null ? Optional.empty() : Optional.of(cacheName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE1OTE3Mg=="}, "originalCommit": {"oid": "0f8a9aec176aa5066dbbd9ed309aa6a734da0b58"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjMwOTU1OnYy", "diffSide": "RIGHT", "path": "integration-tests/spring-web/src/test/java/io/quarkus/it/spring/web/SpringCacheControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQyMzo0MDoyNVrOGTIpBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNDozNjozOFrOGTMLgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcxNzcwMg==", "bodyText": "Isn't that risky to look for geo here while it could match both geo and george?", "url": "https://github.com/quarkusio/quarkus/pull/8779#discussion_r422717702", "createdAt": "2020-05-10T23:40:25Z", "author": {"login": "gwenneg"}, "path": "integration-tests/spring-web/src/test/java/io/quarkus/it/spring/web/SpringCacheControllerTest.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package io.quarkus.it.spring.web;\n+\n+import static org.hamcrest.Matchers.containsString;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+\n+@QuarkusTest\n+public class SpringCacheControllerTest {\n+\n+    @Test\n+    public void testCache() {\n+        // first invocation\n+        RestAssured.when().get(\"/cache/greet/george\").then()\n+                .contentType(\"application/json\")\n+                .body(containsString(\"george\"), containsString(\"0\"));\n+\n+        // second invocation should yield same count\n+        RestAssured.when().get(\"/cache/greet/george\").then()\n+                .contentType(\"application/json\")\n+                .body(containsString(\"george\"), containsString(\"0\"));\n+\n+        // invocation with different key should yield different count\n+        RestAssured.when().get(\"/cache/greet/geo\").then()\n+                .contentType(\"application/json\")\n+                .body(containsString(\"geo\"), containsString(\"1\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6d725e29087aba3b9104cf72f51a16b6897050"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc3NTY4MA==", "bodyText": "That's a good idea, fixed now", "url": "https://github.com/quarkusio/quarkus/pull/8779#discussion_r422775680", "createdAt": "2020-05-11T04:36:38Z", "author": {"login": "geoand"}, "path": "integration-tests/spring-web/src/test/java/io/quarkus/it/spring/web/SpringCacheControllerTest.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package io.quarkus.it.spring.web;\n+\n+import static org.hamcrest.Matchers.containsString;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+\n+@QuarkusTest\n+public class SpringCacheControllerTest {\n+\n+    @Test\n+    public void testCache() {\n+        // first invocation\n+        RestAssured.when().get(\"/cache/greet/george\").then()\n+                .contentType(\"application/json\")\n+                .body(containsString(\"george\"), containsString(\"0\"));\n+\n+        // second invocation should yield same count\n+        RestAssured.when().get(\"/cache/greet/george\").then()\n+                .contentType(\"application/json\")\n+                .body(containsString(\"george\"), containsString(\"0\"));\n+\n+        // invocation with different key should yield different count\n+        RestAssured.when().get(\"/cache/greet/geo\").then()\n+                .contentType(\"application/json\")\n+                .body(containsString(\"geo\"), containsString(\"1\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcxNzcwMg=="}, "originalCommit": {"oid": "1c6d725e29087aba3b9104cf72f51a16b6897050"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzY2MTA3OnYy", "diffSide": "RIGHT", "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODozMTo1NlrOGT75Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODozMTo1NlrOGT75Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU1NzQwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // some of these restrictions can probably lifted by us doing additional work on caching after https://github.com/quarkusio/quarkus/pull/8631 lands\n          \n          \n            \n                // some of these restrictions can probably be lifted by us doing additional work on caching after https://github.com/quarkusio/quarkus/pull/8631 lands", "url": "https://github.com/quarkusio/quarkus/pull/8779#discussion_r423557407", "createdAt": "2020-05-12T08:31:56Z", "author": {"login": "gsmet"}, "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheProcessor.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package io.quarkus.spring.cache;\n+\n+import static io.quarkus.spring.cache.SpringCacheUtil.*;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.DotName;\n+import org.springframework.cache.annotation.CacheEvict;\n+import org.springframework.cache.annotation.CachePut;\n+import org.springframework.cache.annotation.Cacheable;\n+\n+import io.quarkus.arc.deployment.AnnotationsTransformerBuildItem;\n+import io.quarkus.cache.deployment.AdditionalCacheNameBuildItem;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+\n+public class SpringCacheProcessor {\n+\n+    static final DotName CACHEABLE = DotName.createSimple(Cacheable.class.getName());\n+    static final DotName CACHE_PUT = DotName.createSimple(CachePut.class.getName());\n+    static final DotName CACHE_EVICT = DotName.createSimple(CacheEvict.class.getName());\n+\n+    private static final List<DotName> CACHE_ANNOTATIONS = Collections\n+            .unmodifiableList(Arrays.asList(CACHEABLE, CACHE_PUT, CACHE_EVICT));\n+\n+    // some of these restrictions can probably lifted by us doing additional work on caching after https://github.com/quarkusio/quarkus/pull/8631 lands", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eddcbea2900569941fc1610526f97a927b7420cc"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzY2MjkwOnYy", "diffSide": "RIGHT", "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODozMjozMFrOGT76Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODozMjozMFrOGT76Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU1NzcyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                \"Currently Spring Caching annotations can only be added to methods. Offending instance is annotation '\"\n          \n          \n            \n                                \"Currently Spring Cache annotations can only be added to methods. Offending instance is annotation '\"", "url": "https://github.com/quarkusio/quarkus/pull/8779#discussion_r423557723", "createdAt": "2020-05-12T08:32:30Z", "author": {"login": "gsmet"}, "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheProcessor.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package io.quarkus.spring.cache;\n+\n+import static io.quarkus.spring.cache.SpringCacheUtil.*;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.DotName;\n+import org.springframework.cache.annotation.CacheEvict;\n+import org.springframework.cache.annotation.CachePut;\n+import org.springframework.cache.annotation.Cacheable;\n+\n+import io.quarkus.arc.deployment.AnnotationsTransformerBuildItem;\n+import io.quarkus.cache.deployment.AdditionalCacheNameBuildItem;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+\n+public class SpringCacheProcessor {\n+\n+    static final DotName CACHEABLE = DotName.createSimple(Cacheable.class.getName());\n+    static final DotName CACHE_PUT = DotName.createSimple(CachePut.class.getName());\n+    static final DotName CACHE_EVICT = DotName.createSimple(CacheEvict.class.getName());\n+\n+    private static final List<DotName> CACHE_ANNOTATIONS = Collections\n+            .unmodifiableList(Arrays.asList(CACHEABLE, CACHE_PUT, CACHE_EVICT));\n+\n+    // some of these restrictions can probably lifted by us doing additional work on caching after https://github.com/quarkusio/quarkus/pull/8631 lands\n+    private static final Set<String> CURRENTLY_UNSUPPORTED_ANNOTATION_VALUES = Collections\n+            .unmodifiableSet(new HashSet<>(Arrays.asList(\"key\", \"keyGenerator\", \"cacheManager\", \"cacheResolver\", \"condition\",\n+                    \"unless\", \"sync\", \"beforeInvocation\")));\n+\n+    @BuildStep\n+    void feature(BuildProducer<FeatureBuildItem> feature) {\n+        feature.produce(new FeatureBuildItem(FeatureBuildItem.SPRING_CACHE));\n+    }\n+\n+    @BuildStep\n+    AnnotationsTransformerBuildItem transform() {\n+        return new AnnotationsTransformerBuildItem(new SpringCacheAnnotationsTransformer());\n+    }\n+\n+    @BuildStep\n+    List<AdditionalCacheNameBuildItem> cacheNames(CombinedIndexBuildItem combinedIndex) {\n+        Set<String> cacheNames = new HashSet<>();\n+        for (DotName cacheAnnotation : CACHE_ANNOTATIONS) {\n+            Collection<AnnotationInstance> instances = combinedIndex.getIndex().getAnnotations(cacheAnnotation);\n+            for (AnnotationInstance instance : instances) {\n+                validateUsage(instance);\n+                Optional<String> cacheName = getSpringCacheName(instance);\n+                if (cacheName.isPresent()) {\n+                    cacheNames.add(cacheName.get());\n+                }\n+            }\n+        }\n+        List<AdditionalCacheNameBuildItem> result = new ArrayList<>(cacheNames.size());\n+        for (String cacheName : cacheNames) {\n+            result.add(new AdditionalCacheNameBuildItem(cacheName));\n+        }\n+        return result;\n+    }\n+\n+    private void validateUsage(AnnotationInstance instance) {\n+        if (instance.target().kind() != AnnotationTarget.Kind.METHOD) {\n+            throw new IllegalArgumentException(\n+                    \"Currently Spring Caching annotations can only be added to methods. Offending instance is annotation '\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eddcbea2900569941fc1610526f97a927b7420cc"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzY2NzE5OnYy", "diffSide": "RIGHT", "path": "extensions/spring-cache/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODozMzozNlrOGT79DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODozMzozNlrOGT79DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU1ODQxMw==", "bodyText": "Not consistent with the deployment name Spring - Cache. Let's try to be consistent with the other Spring extensions whatever they use.", "url": "https://github.com/quarkusio/quarkus/pull/8779#discussion_r423558413", "createdAt": "2020-05-12T08:33:36Z", "author": {"login": "gsmet"}, "path": "extensions/spring-cache/pom.xml", "diffHunk": "@@ -0,0 +1,21 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>quarkus-build-parent</artifactId>\n+        <groupId>io.quarkus</groupId>\n+        <version>999-SNAPSHOT</version>\n+        <relativePath>../../build-parent/pom.xml</relativePath>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>quarkus-spring-cache-parent</artifactId>\n+    <name>Quarkus - Spring Cache</name>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eddcbea2900569941fc1610526f97a927b7420cc"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzY2Nzk1OnYy", "diffSide": "RIGHT", "path": "extensions/spring-cache/runtime/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODozMzo0OVrOGT79hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODozMzo0OVrOGT79hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU1ODUzMw==", "bodyText": "Not consistent with the deployment name Spring - Cache.", "url": "https://github.com/quarkusio/quarkus/pull/8779#discussion_r423558533", "createdAt": "2020-05-12T08:33:49Z", "author": {"login": "gsmet"}, "path": "extensions/spring-cache/runtime/pom.xml", "diffHunk": "@@ -0,0 +1,63 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>quarkus-spring-cache-parent</artifactId>\n+        <groupId>io.quarkus</groupId>\n+        <version>999-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>quarkus-spring-cache</artifactId>\n+    <name>Quarkus - Spring Cache - Runtime</name>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eddcbea2900569941fc1610526f97a927b7420cc"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzY3MDE0OnYy", "diffSide": "RIGHT", "path": "extensions/spring-cache/runtime/src/main/resources/META-INF/quarkus-extension.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODozNDoyOVrOGT7_CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODozNDoyOVrOGT7_CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU1ODkyMA==", "bodyText": "Maybe add cache?", "url": "https://github.com/quarkusio/quarkus/pull/8779#discussion_r423558920", "createdAt": "2020-05-12T08:34:29Z", "author": {"login": "gsmet"}, "path": "extensions/spring-cache/runtime/src/main/resources/META-INF/quarkus-extension.yaml", "diffHunk": "@@ -0,0 +1,10 @@\n+---\n+name: \"Quarkus Extension for Spring Cache API\"\n+metadata:\n+  keywords:\n+  - \"spring-cache\"\n+  - \"spring\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eddcbea2900569941fc1610526f97a927b7420cc"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3425, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}