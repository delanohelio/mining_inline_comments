{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MzQ4MzQ3", "number": 11403, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMDo1NTo0MFrOEa7E2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMDo1ODo0MVrOEa7H1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NjY2MzMwOnYy", "diffSide": "RIGHT", "path": "extensions/hibernate-envers/deployment/src/main/java/io/quarkus/hibernate/envers/deployment/QuarkusHibernateEnversProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMDo1NTo0MFrOHEo12w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxMToxMDo0NlrOHFMRbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYyNTQ5OQ==", "bodyText": "It's a better pattern to inject the config in the @BuildStep method. This way, we keep track of the dependencies.\n(our code is not consistent so you might have found occurrences of this pattern)", "url": "https://github.com/quarkusio/quarkus/pull/11403#discussion_r474625499", "createdAt": "2020-08-21T10:55:40Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-envers/deployment/src/main/java/io/quarkus/hibernate/envers/deployment/QuarkusHibernateEnversProcessor.java", "diffHunk": "@@ -3,11 +3,17 @@\n import io.quarkus.deployment.Feature;\n import io.quarkus.deployment.annotations.BuildProducer;\n import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.ExecutionTime;\n+import io.quarkus.deployment.annotations.Record;\n import io.quarkus.deployment.builditem.FeatureBuildItem;\n import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.hibernate.envers.HibernateEnversBuildTimeConfig;\n+import io.quarkus.hibernate.envers.HibernateEnversRecorder;\n \n public final class QuarkusHibernateEnversProcessor {\n \n+    HibernateEnversBuildTimeConfig buildTimeConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9297d48b958ca7dccf2d80ccd8803d2b300481f3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIwNTk5OQ==", "bodyText": "Good to know, fixed.", "url": "https://github.com/quarkusio/quarkus/pull/11403#discussion_r475205999", "createdAt": "2020-08-23T11:10:46Z", "author": {"login": "j-be"}, "path": "extensions/hibernate-envers/deployment/src/main/java/io/quarkus/hibernate/envers/deployment/QuarkusHibernateEnversProcessor.java", "diffHunk": "@@ -3,11 +3,17 @@\n import io.quarkus.deployment.Feature;\n import io.quarkus.deployment.annotations.BuildProducer;\n import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.ExecutionTime;\n+import io.quarkus.deployment.annotations.Record;\n import io.quarkus.deployment.builditem.FeatureBuildItem;\n import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.hibernate.envers.HibernateEnversBuildTimeConfig;\n+import io.quarkus.hibernate.envers.HibernateEnversRecorder;\n \n public final class QuarkusHibernateEnversProcessor {\n \n+    HibernateEnversBuildTimeConfig buildTimeConfig;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYyNTQ5OQ=="}, "originalCommit": {"oid": "9297d48b958ca7dccf2d80ccd8803d2b300481f3"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NjY2ODIwOnYy", "diffSide": "RIGHT", "path": "extensions/hibernate-envers/runtime/src/main/java/io/quarkus/hibernate/envers/HibernateEnversBuildTimeConfig.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMDo1Nzo0MFrOHEo48Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMTowNjowMlrOHILROg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYyNjI4OQ==", "bodyText": "I would make it BUILD_AND_RUN_TIME_FIXED as you access it in the recorder thus at runtime.", "url": "https://github.com/quarkusio/quarkus/pull/11403#discussion_r474626289", "createdAt": "2020-08-21T10:57:40Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-envers/runtime/src/main/java/io/quarkus/hibernate/envers/HibernateEnversBuildTimeConfig.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package io.quarkus.hibernate.envers;\n+\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+\n+@ConfigRoot", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9297d48b958ca7dccf2d80ccd8803d2b300481f3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIwNjc0NA==", "bodyText": "Done. Is there some documentation on which Phase to use for which values?\nMy thinking was: the config here is only needed to drive the recorder, which in turn applies the (equivalent, though different) configuration to Hibernate. In such case, I thought, the config value itself is not needed on Runtime.\nBut I did not yet fully grasp what runs when and what does what. From decompiling the release jar I saw hunks of what seemed to me to be generated code, but I wasn't yet able to track it back to what happens on build time.", "url": "https://github.com/quarkusio/quarkus/pull/11403#discussion_r475206744", "createdAt": "2020-08-23T11:17:55Z", "author": {"login": "j-be"}, "path": "extensions/hibernate-envers/runtime/src/main/java/io/quarkus/hibernate/envers/HibernateEnversBuildTimeConfig.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package io.quarkus.hibernate.envers;\n+\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+\n+@ConfigRoot", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYyNjI4OQ=="}, "originalCommit": {"oid": "9297d48b958ca7dccf2d80ccd8803d2b300481f3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMzNTI5MA==", "bodyText": "If you extracted the config in the build step and just passed a boolean then it would be only used at build time. But that's not what you do. The recorder code is executed at runtime.", "url": "https://github.com/quarkusio/quarkus/pull/11403#discussion_r478335290", "createdAt": "2020-08-27T11:06:02Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-envers/runtime/src/main/java/io/quarkus/hibernate/envers/HibernateEnversBuildTimeConfig.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package io.quarkus.hibernate.envers;\n+\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+\n+@ConfigRoot", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYyNjI4OQ=="}, "originalCommit": {"oid": "9297d48b958ca7dccf2d80ccd8803d2b300481f3"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NjY3MDkyOnYy", "diffSide": "RIGHT", "path": "extensions/hibernate-envers/runtime/src/main/java/io/quarkus/hibernate/envers/HibernateEnversRecorder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMDo1ODo0MVrOHEo6fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMTowNjoyNFrOHILR_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYyNjY4NA==", "bodyText": "If you make it runtime fixed, I think you should be able to just inject the config in the @Recorder class.\nWhich would avoid passing the config object through the recording mechanism.", "url": "https://github.com/quarkusio/quarkus/pull/11403#discussion_r474626684", "createdAt": "2020-08-21T10:58:41Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-envers/runtime/src/main/java/io/quarkus/hibernate/envers/HibernateEnversRecorder.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package io.quarkus.hibernate.envers;\n+\n+import java.util.function.BiConsumer;\n+\n+import org.hibernate.boot.Metadata;\n+import org.hibernate.boot.spi.BootstrapContext;\n+import org.hibernate.envers.configuration.EnversSettings;\n+\n+import io.quarkus.hibernate.orm.runtime.integration.HibernateOrmIntegrationListener;\n+import io.quarkus.hibernate.orm.runtime.integration.HibernateOrmIntegrations;\n+import io.quarkus.runtime.annotations.Recorder;\n+\n+@Recorder\n+public class HibernateEnversRecorder {\n+\n+    public void registerHibernateEnversIntegration(HibernateEnversBuildTimeConfig buildTimeConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9297d48b958ca7dccf2d80ccd8803d2b300481f3"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIwNzE5OQ==", "bodyText": "It seems like I can't, or I simply don't know how. I tried injecting both HibernateEnversBuildTimeConfig and RuntimeValue<HibernateEnversBuildTimeConfig>, both with and without @Inject without success (NullPointerExcepiton on first access).", "url": "https://github.com/quarkusio/quarkus/pull/11403#discussion_r475207199", "createdAt": "2020-08-23T11:22:20Z", "author": {"login": "j-be"}, "path": "extensions/hibernate-envers/runtime/src/main/java/io/quarkus/hibernate/envers/HibernateEnversRecorder.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package io.quarkus.hibernate.envers;\n+\n+import java.util.function.BiConsumer;\n+\n+import org.hibernate.boot.Metadata;\n+import org.hibernate.boot.spi.BootstrapContext;\n+import org.hibernate.envers.configuration.EnversSettings;\n+\n+import io.quarkus.hibernate.orm.runtime.integration.HibernateOrmIntegrationListener;\n+import io.quarkus.hibernate.orm.runtime.integration.HibernateOrmIntegrations;\n+import io.quarkus.runtime.annotations.Recorder;\n+\n+@Recorder\n+public class HibernateEnversRecorder {\n+\n+    public void registerHibernateEnversIntegration(HibernateEnversBuildTimeConfig buildTimeConfig) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYyNjY4NA=="}, "originalCommit": {"oid": "9297d48b958ca7dccf2d80ccd8803d2b300481f3"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMzNTQ4NA==", "bodyText": "Weird. Let's not block this PR for that.", "url": "https://github.com/quarkusio/quarkus/pull/11403#discussion_r478335484", "createdAt": "2020-08-27T11:06:24Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-envers/runtime/src/main/java/io/quarkus/hibernate/envers/HibernateEnversRecorder.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package io.quarkus.hibernate.envers;\n+\n+import java.util.function.BiConsumer;\n+\n+import org.hibernate.boot.Metadata;\n+import org.hibernate.boot.spi.BootstrapContext;\n+import org.hibernate.envers.configuration.EnversSettings;\n+\n+import io.quarkus.hibernate.orm.runtime.integration.HibernateOrmIntegrationListener;\n+import io.quarkus.hibernate.orm.runtime.integration.HibernateOrmIntegrations;\n+import io.quarkus.runtime.annotations.Recorder;\n+\n+@Recorder\n+public class HibernateEnversRecorder {\n+\n+    public void registerHibernateEnversIntegration(HibernateEnversBuildTimeConfig buildTimeConfig) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYyNjY4NA=="}, "originalCommit": {"oid": "9297d48b958ca7dccf2d80ccd8803d2b300481f3"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 574, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}