{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMTcwMzMz", "number": 10382, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzozMjo1NlrOEKNKBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzowMjo1MFrOEKgGiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTM2NzczOnYy", "diffSide": "LEFT", "path": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/boot/LightPersistenceXmlDescriptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzozMjo1NlrOGrHRIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzozMjo1NlrOGrHRIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg2MTAyNQ==", "bodyText": "the same check is repeated below", "url": "https://github.com/quarkusio/quarkus/pull/10382#discussion_r447861025", "createdAt": "2020-06-30T17:32:56Z", "author": {"login": "Sanne"}, "path": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/boot/LightPersistenceXmlDescriptor.java", "diffHunk": "@@ -36,9 +36,6 @@ public LightPersistenceXmlDescriptor(final PersistenceUnitDescriptor toClone) {\n     }\n \n     private static void verifyIgnoredFields(final PersistenceUnitDescriptor toClone) {\n-        if (toClone.getNonJtaDataSource() != null) {\n-            throw new UnsupportedOperationException(\"Value found for #getNonJtaDataSource : not supported yet\");\n-        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b3c69464acb743b13e43543af5226435eb2b25"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDQ3MTc2OnYy", "diffSide": "RIGHT", "path": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/boot/RecordableBootstrapFactory.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzowMjo1MFrOGrk8hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzoyNjoxMlrOGrlz9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0NzI3MQ==", "bodyText": "In ORM Panache I have used a list of BuildItem to register optional stuff like these. Otherwise a service loader would work too. I guess both would be better than reflection, no?", "url": "https://github.com/quarkusio/quarkus/pull/10382#discussion_r448347271", "createdAt": "2020-07-01T13:02:50Z", "author": {"login": "FroMage"}, "path": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/boot/RecordableBootstrapFactory.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package io.quarkus.hibernate.orm.runtime.boot;\n+\n+import org.hibernate.boot.registry.BootstrapServiceRegistry;\n+import org.hibernate.boot.registry.classloading.spi.ClassLoaderService;\n+import org.hibernate.boot.registry.internal.BootstrapServiceRegistryImpl;\n+import org.hibernate.boot.registry.selector.spi.StrategySelector;\n+\n+import io.quarkus.hibernate.orm.runtime.customized.QuarkusIntegratorServiceImpl;\n+import io.quarkus.hibernate.orm.runtime.customized.QuarkusStrategySelectorBuilder;\n+import io.quarkus.hibernate.orm.runtime.recording.RecordableBootstrap;\n+import io.quarkus.hibernate.orm.runtime.service.FlatClassLoaderService;\n+import io.quarkus.hibernate.orm.runtime.service.InitialInitiatorListProvider;\n+import io.quarkus.hibernate.orm.runtime.service.StandardHibernateORMInitiatorListProvider;\n+\n+final class RecordableBootstrapFactory {\n+\n+    private static final InitialInitiatorListProvider reactiveInitiatorListProvider = initReactiveListProviderMaybe();\n+    private static final InitialInitiatorListProvider classicInitiatorListProvider = new StandardHibernateORMInitiatorListProvider();\n+\n+    public static RecordableBootstrap createRecordableBootstrapBuilder(QuarkusPersistenceUnitDefinition puDefinition) {\n+        final BootstrapServiceRegistry bsr = buildBootstrapServiceRegistry();\n+        final RecordableBootstrap ssrBuilder = new RecordableBootstrap(bsr, getInitiatorListProvider(puDefinition));\n+        return ssrBuilder;\n+    }\n+\n+    private static InitialInitiatorListProvider getInitiatorListProvider(QuarkusPersistenceUnitDefinition puDefinition) {\n+        if (puDefinition.isReactive()) {\n+            if (reactiveInitiatorListProvider == null) {\n+                throw new IllegalStateException(\n+                        \"InitiatorList requires for Hibernate Reactive but Hibernate Reactive extension is not around?\");\n+            }\n+            return reactiveInitiatorListProvider;\n+        } else {\n+            return classicInitiatorListProvider;\n+        }\n+    }\n+\n+    private static BootstrapServiceRegistry buildBootstrapServiceRegistry() {\n+        final ClassLoaderService providedClassLoaderService = FlatClassLoaderService.INSTANCE;\n+        // N.B. support for custom IntegratorProvider injected via Properties (as\n+        // instance) removed\n+\n+        final QuarkusIntegratorServiceImpl integratorService = new QuarkusIntegratorServiceImpl(providedClassLoaderService);\n+        final QuarkusStrategySelectorBuilder strategySelectorBuilder = new QuarkusStrategySelectorBuilder();\n+        final StrategySelector strategySelector = strategySelectorBuilder.buildSelector(providedClassLoaderService);\n+        return new BootstrapServiceRegistryImpl(true, providedClassLoaderService, strategySelector, integratorService);\n+    }\n+\n+    private static InitialInitiatorListProvider initReactiveListProviderMaybe() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e132d42c0b15c52286dbcf217ff450397493bf2d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1NzU3NA==", "bodyText": "I considered that, but this code is invoked from within a Bytecode Recorder.\nThis implies that if I were to pass the full list of Initiators to the recorder from the layer in which I have BuildItems, I'd need to load and proxy many more classes - which then get loaded by reflection anyway.\nIf I were to \"just\" pass the InitialInitiatorListProvider it would also need to be recorded, proxied and loaded again.. with the added complexity of having a BuildItem needed for this, and need some way to enforce it to be one class at most?\nHappy to revisit, but I don't feel like it would be much better.", "url": "https://github.com/quarkusio/quarkus/pull/10382#discussion_r448357574", "createdAt": "2020-07-01T13:20:13Z", "author": {"login": "Sanne"}, "path": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/boot/RecordableBootstrapFactory.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package io.quarkus.hibernate.orm.runtime.boot;\n+\n+import org.hibernate.boot.registry.BootstrapServiceRegistry;\n+import org.hibernate.boot.registry.classloading.spi.ClassLoaderService;\n+import org.hibernate.boot.registry.internal.BootstrapServiceRegistryImpl;\n+import org.hibernate.boot.registry.selector.spi.StrategySelector;\n+\n+import io.quarkus.hibernate.orm.runtime.customized.QuarkusIntegratorServiceImpl;\n+import io.quarkus.hibernate.orm.runtime.customized.QuarkusStrategySelectorBuilder;\n+import io.quarkus.hibernate.orm.runtime.recording.RecordableBootstrap;\n+import io.quarkus.hibernate.orm.runtime.service.FlatClassLoaderService;\n+import io.quarkus.hibernate.orm.runtime.service.InitialInitiatorListProvider;\n+import io.quarkus.hibernate.orm.runtime.service.StandardHibernateORMInitiatorListProvider;\n+\n+final class RecordableBootstrapFactory {\n+\n+    private static final InitialInitiatorListProvider reactiveInitiatorListProvider = initReactiveListProviderMaybe();\n+    private static final InitialInitiatorListProvider classicInitiatorListProvider = new StandardHibernateORMInitiatorListProvider();\n+\n+    public static RecordableBootstrap createRecordableBootstrapBuilder(QuarkusPersistenceUnitDefinition puDefinition) {\n+        final BootstrapServiceRegistry bsr = buildBootstrapServiceRegistry();\n+        final RecordableBootstrap ssrBuilder = new RecordableBootstrap(bsr, getInitiatorListProvider(puDefinition));\n+        return ssrBuilder;\n+    }\n+\n+    private static InitialInitiatorListProvider getInitiatorListProvider(QuarkusPersistenceUnitDefinition puDefinition) {\n+        if (puDefinition.isReactive()) {\n+            if (reactiveInitiatorListProvider == null) {\n+                throw new IllegalStateException(\n+                        \"InitiatorList requires for Hibernate Reactive but Hibernate Reactive extension is not around?\");\n+            }\n+            return reactiveInitiatorListProvider;\n+        } else {\n+            return classicInitiatorListProvider;\n+        }\n+    }\n+\n+    private static BootstrapServiceRegistry buildBootstrapServiceRegistry() {\n+        final ClassLoaderService providedClassLoaderService = FlatClassLoaderService.INSTANCE;\n+        // N.B. support for custom IntegratorProvider injected via Properties (as\n+        // instance) removed\n+\n+        final QuarkusIntegratorServiceImpl integratorService = new QuarkusIntegratorServiceImpl(providedClassLoaderService);\n+        final QuarkusStrategySelectorBuilder strategySelectorBuilder = new QuarkusStrategySelectorBuilder();\n+        final StrategySelector strategySelector = strategySelectorBuilder.buildSelector(providedClassLoaderService);\n+        return new BootstrapServiceRegistryImpl(true, providedClassLoaderService, strategySelector, integratorService);\n+    }\n+\n+    private static InitialInitiatorListProvider initReactiveListProviderMaybe() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0NzI3MQ=="}, "originalCommit": {"oid": "e132d42c0b15c52286dbcf217ff450397493bf2d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1ODIzNw==", "bodyText": "P.S. I considered the ServiceLoader at first, but I really want \"only one\" - if there's a list of such providers it's a problem, it's not meant as an SPI. Single-named constant seems more fitting.", "url": "https://github.com/quarkusio/quarkus/pull/10382#discussion_r448358237", "createdAt": "2020-07-01T13:21:12Z", "author": {"login": "Sanne"}, "path": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/boot/RecordableBootstrapFactory.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package io.quarkus.hibernate.orm.runtime.boot;\n+\n+import org.hibernate.boot.registry.BootstrapServiceRegistry;\n+import org.hibernate.boot.registry.classloading.spi.ClassLoaderService;\n+import org.hibernate.boot.registry.internal.BootstrapServiceRegistryImpl;\n+import org.hibernate.boot.registry.selector.spi.StrategySelector;\n+\n+import io.quarkus.hibernate.orm.runtime.customized.QuarkusIntegratorServiceImpl;\n+import io.quarkus.hibernate.orm.runtime.customized.QuarkusStrategySelectorBuilder;\n+import io.quarkus.hibernate.orm.runtime.recording.RecordableBootstrap;\n+import io.quarkus.hibernate.orm.runtime.service.FlatClassLoaderService;\n+import io.quarkus.hibernate.orm.runtime.service.InitialInitiatorListProvider;\n+import io.quarkus.hibernate.orm.runtime.service.StandardHibernateORMInitiatorListProvider;\n+\n+final class RecordableBootstrapFactory {\n+\n+    private static final InitialInitiatorListProvider reactiveInitiatorListProvider = initReactiveListProviderMaybe();\n+    private static final InitialInitiatorListProvider classicInitiatorListProvider = new StandardHibernateORMInitiatorListProvider();\n+\n+    public static RecordableBootstrap createRecordableBootstrapBuilder(QuarkusPersistenceUnitDefinition puDefinition) {\n+        final BootstrapServiceRegistry bsr = buildBootstrapServiceRegistry();\n+        final RecordableBootstrap ssrBuilder = new RecordableBootstrap(bsr, getInitiatorListProvider(puDefinition));\n+        return ssrBuilder;\n+    }\n+\n+    private static InitialInitiatorListProvider getInitiatorListProvider(QuarkusPersistenceUnitDefinition puDefinition) {\n+        if (puDefinition.isReactive()) {\n+            if (reactiveInitiatorListProvider == null) {\n+                throw new IllegalStateException(\n+                        \"InitiatorList requires for Hibernate Reactive but Hibernate Reactive extension is not around?\");\n+            }\n+            return reactiveInitiatorListProvider;\n+        } else {\n+            return classicInitiatorListProvider;\n+        }\n+    }\n+\n+    private static BootstrapServiceRegistry buildBootstrapServiceRegistry() {\n+        final ClassLoaderService providedClassLoaderService = FlatClassLoaderService.INSTANCE;\n+        // N.B. support for custom IntegratorProvider injected via Properties (as\n+        // instance) removed\n+\n+        final QuarkusIntegratorServiceImpl integratorService = new QuarkusIntegratorServiceImpl(providedClassLoaderService);\n+        final QuarkusStrategySelectorBuilder strategySelectorBuilder = new QuarkusStrategySelectorBuilder();\n+        final StrategySelector strategySelector = strategySelectorBuilder.buildSelector(providedClassLoaderService);\n+        return new BootstrapServiceRegistryImpl(true, providedClassLoaderService, strategySelector, integratorService);\n+    }\n+\n+    private static InitialInitiatorListProvider initReactiveListProviderMaybe() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0NzI3MQ=="}, "originalCommit": {"oid": "e132d42c0b15c52286dbcf217ff450397493bf2d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM2MTQ2MA==", "bodyText": "Fair enough :)", "url": "https://github.com/quarkusio/quarkus/pull/10382#discussion_r448361460", "createdAt": "2020-07-01T13:26:12Z", "author": {"login": "FroMage"}, "path": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/boot/RecordableBootstrapFactory.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package io.quarkus.hibernate.orm.runtime.boot;\n+\n+import org.hibernate.boot.registry.BootstrapServiceRegistry;\n+import org.hibernate.boot.registry.classloading.spi.ClassLoaderService;\n+import org.hibernate.boot.registry.internal.BootstrapServiceRegistryImpl;\n+import org.hibernate.boot.registry.selector.spi.StrategySelector;\n+\n+import io.quarkus.hibernate.orm.runtime.customized.QuarkusIntegratorServiceImpl;\n+import io.quarkus.hibernate.orm.runtime.customized.QuarkusStrategySelectorBuilder;\n+import io.quarkus.hibernate.orm.runtime.recording.RecordableBootstrap;\n+import io.quarkus.hibernate.orm.runtime.service.FlatClassLoaderService;\n+import io.quarkus.hibernate.orm.runtime.service.InitialInitiatorListProvider;\n+import io.quarkus.hibernate.orm.runtime.service.StandardHibernateORMInitiatorListProvider;\n+\n+final class RecordableBootstrapFactory {\n+\n+    private static final InitialInitiatorListProvider reactiveInitiatorListProvider = initReactiveListProviderMaybe();\n+    private static final InitialInitiatorListProvider classicInitiatorListProvider = new StandardHibernateORMInitiatorListProvider();\n+\n+    public static RecordableBootstrap createRecordableBootstrapBuilder(QuarkusPersistenceUnitDefinition puDefinition) {\n+        final BootstrapServiceRegistry bsr = buildBootstrapServiceRegistry();\n+        final RecordableBootstrap ssrBuilder = new RecordableBootstrap(bsr, getInitiatorListProvider(puDefinition));\n+        return ssrBuilder;\n+    }\n+\n+    private static InitialInitiatorListProvider getInitiatorListProvider(QuarkusPersistenceUnitDefinition puDefinition) {\n+        if (puDefinition.isReactive()) {\n+            if (reactiveInitiatorListProvider == null) {\n+                throw new IllegalStateException(\n+                        \"InitiatorList requires for Hibernate Reactive but Hibernate Reactive extension is not around?\");\n+            }\n+            return reactiveInitiatorListProvider;\n+        } else {\n+            return classicInitiatorListProvider;\n+        }\n+    }\n+\n+    private static BootstrapServiceRegistry buildBootstrapServiceRegistry() {\n+        final ClassLoaderService providedClassLoaderService = FlatClassLoaderService.INSTANCE;\n+        // N.B. support for custom IntegratorProvider injected via Properties (as\n+        // instance) removed\n+\n+        final QuarkusIntegratorServiceImpl integratorService = new QuarkusIntegratorServiceImpl(providedClassLoaderService);\n+        final QuarkusStrategySelectorBuilder strategySelectorBuilder = new QuarkusStrategySelectorBuilder();\n+        final StrategySelector strategySelector = strategySelectorBuilder.buildSelector(providedClassLoaderService);\n+        return new BootstrapServiceRegistryImpl(true, providedClassLoaderService, strategySelector, integratorService);\n+    }\n+\n+    private static InitialInitiatorListProvider initReactiveListProviderMaybe() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0NzI3MQ=="}, "originalCommit": {"oid": "e132d42c0b15c52286dbcf217ff450397493bf2d"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2746, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}