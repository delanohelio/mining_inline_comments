{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNDExNTg1", "number": 12652, "title": "Consolidate all UI related extensions.", "bodyText": "This PR consolidate all UI related extensions.\nConsolidate\nBefore this PR, Swagger UI, GraphQL and Health all use some Web resources that is\nhandled specifically in Dev Mode and Production Mode. This code has been consolidated, as they all\ndo the same thing. So mostly this is deleting code in the extensions and all using the code from core-deployment.\nTemp\nThis also fix #12577 - or rather bypass it.\nCode is changed to store the webjar contents in the temp folder using appName/groupId/artifactId/version.\nThis means that all instances using this in dev and test mode will serve from that content. The directory gets cleaned on test mode start, and does not grow on windows any more as the name is not a random id (problem bypassed).\nBranding\nThis PR also changed the Swagger UI to pull the content from SmallRye rather than webjars. This allow us to brand the Swagger UI. This will also allow for example that we can brand the Red Hat build with Red Hat branding, and it will allow customers/users to add their own branding. See example screenshots below.\nThe swagger-ui version used in SmallRye is the same as what is used here before the PR. This will also allow us to do more custom\nthings with swagger-ui in the future. The upgrade in versions for SmallRye GraphQL, OpenAPI and Health is just for the UI component to allow this branding.\nDefault branding:\n\n\n\nPossible Red Hat Branding:\n\nThe red hat build can replace the default logo, favicon and css in META-INF/branding with Red Hat files. So the users will get Red Hat Branding by default, but can still override with their own as below.\nExample customer override:\n\nDevelopers can supply their own logo.png, favicon.ico and style.css in /src/main/resources/META-INF/branding/ that will allow basic custom branding.\nSigned-off-by:Phillip Kruger phillip.kruger@gmail.com", "createdAt": "2020-10-12T08:25:00Z", "url": "https://github.com/quarkusio/quarkus/pull/12652", "merged": true, "mergeCommit": {"oid": "ab8599c3c690d31f92098cf4a68aeb6cc54928ea"}, "closed": true, "closedAt": "2020-10-16T14:24:19Z", "author": {"login": "phillip-kruger"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdR3IiTgFqTUwNjc4NzYwNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdTEvTWgFqTUxMDM4NjYxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2Nzg3NjA3", "url": "https://github.com/quarkusio/quarkus/pull/12652#pullrequestreview-506787607", "createdAt": "2020-10-12T17:08:03Z", "commit": {"oid": "3e97d5dd8b0c93ab146249da564bacee7052432c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzowODowM1rOHgGvKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzowODowM1rOHgGvKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyNjg1OQ==", "bodyText": "What about multiple concurrenly running Quarkus instances? They might overwrite each other.\nThe safest thing would be to use FileLock, but this is not going to work for a directory, I fear...", "url": "https://github.com/quarkusio/quarkus/pull/12652#discussion_r503426859", "createdAt": "2020-10-12T17:08:03Z", "author": {"login": "famod"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/util/WebJarUtil.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package io.quarkus.deployment.util;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+\n+import io.quarkus.bootstrap.model.AppArtifact;\n+import io.quarkus.bootstrap.model.AppDependency;\n+import io.quarkus.deployment.pkg.builditem.CurateOutcomeBuildItem;\n+\n+/**\n+ * Utility for Web resource related operations\n+ */\n+public class WebJarUtil {\n+\n+    private final static String tmpDir = System.getProperty(\"java.io.tmpdir\");\n+    private static final String OWN_MEDIA_FOLDER = \"META-INF/resources/\";\n+    private static final List<String> IGNORE_LIST = Arrays.asList(\"logo.png\", \"favicon.ico\");\n+\n+    private WebJarUtil() {\n+    }\n+\n+    public static Path devOrTest(AppArtifact artifact, String rootFolderInJar)\n+            throws IOException {\n+\n+        Path path = createDir(artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion());\n+        if (isEmpty(path)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e97d5dd8b0c93ab146249da564bacee7052432c"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MjkxNDU3", "url": "https://github.com/quarkusio/quarkus/pull/12652#pullrequestreview-507291457", "createdAt": "2020-10-13T10:29:08Z", "commit": {"oid": "7eea52b62a622eb2a7b96165cfda3fad776ddf72"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDoyOTowOFrOHggDmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDoyOTowOFrOHggDmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0MTY4OQ==", "bodyText": "To reduce the overhead for \"concurrent access\" case, I would pull this line up (out of the try (InputStream inputStream = ...) and call continue in case the file already exists.\nBut this is a really minor finding.", "url": "https://github.com/quarkusio/quarkus/pull/12652#discussion_r503841689", "createdAt": "2020-10-13T10:29:08Z", "author": {"login": "famod"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/util/WebJarUtil.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package io.quarkus.deployment.util;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.RandomAccessFile;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.FileLock;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.Arrays;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+\n+import io.quarkus.bootstrap.model.AppArtifact;\n+import io.quarkus.bootstrap.model.AppDependency;\n+import io.quarkus.deployment.pkg.builditem.CurateOutcomeBuildItem;\n+\n+/**\n+ * Utility for Web resource related operations\n+ */\n+public class WebJarUtil {\n+\n+    private final static String tmpDir = System.getProperty(\"java.io.tmpdir\");\n+    private static final String OWN_MEDIA_FOLDER = \"META-INF/resources/\";\n+    private static final List<String> IGNORE_LIST = Arrays.asList(\"logo.png\", \"favicon.ico\");\n+\n+    private WebJarUtil() {\n+    }\n+\n+    public static Path devOrTest(AppArtifact artifact, String rootFolderInJar)\n+            throws IOException {\n+\n+        Path path = createDir(artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion());\n+        if (isEmpty(path)) {\n+            ClassLoader classLoader = WebJarUtil.class.getClassLoader();\n+            for (Path p : artifact.getPaths()) {\n+                File artifactFile = p.toFile();\n+                try (JarFile jarFile = new JarFile(artifactFile)) {\n+                    Enumeration<JarEntry> entries = jarFile.entries();\n+                    while (entries.hasMoreElements()) {\n+                        JarEntry entry = entries.nextElement();\n+                        if (entry.getName().startsWith(rootFolderInJar) && !entry.isDirectory()) {\n+                            try (InputStream inputStream = jarFile.getInputStream(entry)) {\n+                                String filename = entry.getName().replace(rootFolderInJar, \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7eea52b62a622eb2a7b96165cfda3fad776ddf72"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3ODE1NTIy", "url": "https://github.com/quarkusio/quarkus/pull/12652#pullrequestreview-507815522", "createdAt": "2020-10-13T20:46:20Z", "commit": {"oid": "abe1bb9c3136ecc7f508756721f04e31c4cfb94a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDo0NjoyMFrOHg43hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDo0NjoyMFrOHg43hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI0ODE5Ng==", "bodyText": "Do we see this changing with updates of UI? Maybe having it as property will be better", "url": "https://github.com/quarkusio/quarkus/pull/12652#discussion_r504248196", "createdAt": "2020-10-13T20:46:20Z", "author": {"login": "wtrocki"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/util/WebJarUtil.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package io.quarkus.deployment.util;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.RandomAccessFile;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.FileLock;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.Arrays;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Scanner;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+\n+import io.quarkus.bootstrap.model.AppArtifact;\n+import io.quarkus.bootstrap.model.AppDependency;\n+import io.quarkus.deployment.pkg.builditem.CurateOutcomeBuildItem;\n+\n+/**\n+ * Utility for Web resource related operations\n+ */\n+public class WebJarUtil {\n+\n+    private final static String tmpDir = System.getProperty(\"java.io.tmpdir\");\n+    private static final String OWN_MEDIA_FOLDER = \"META-INF/branding/\";\n+    private static final List<String> IGNORE_LIST = Arrays.asList(\"logo.png\", \"favicon.ico\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abe1bb9c3136ecc7f508756721f04e31c4cfb94a"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5NjY1NzQx", "url": "https://github.com/quarkusio/quarkus/pull/12652#pullrequestreview-509665741", "createdAt": "2020-10-15T18:39:02Z", "commit": {"oid": "438a2e19796e44dc250d173e39a212d0242f67c5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODozOTowMlrOHiVL1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODozOTowMlrOHiVL1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc2MDcyNg==", "bodyText": "Use JarFiles.create from Smallrye Common IO to support MR jars here", "url": "https://github.com/quarkusio/quarkus/pull/12652#discussion_r505760726", "createdAt": "2020-10-15T18:39:02Z", "author": {"login": "gastaldi"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/util/WebJarUtil.java", "diffHunk": "@@ -0,0 +1,300 @@\n+package io.quarkus.deployment.util;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.FileLock;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Scanner;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.bootstrap.model.AppArtifact;\n+import io.quarkus.bootstrap.model.AppDependency;\n+import io.quarkus.bootstrap.model.PathsCollection;\n+import io.quarkus.bootstrap.util.IoUtils;\n+import io.quarkus.deployment.builditem.LaunchModeBuildItem;\n+import io.quarkus.deployment.pkg.builditem.CurateOutcomeBuildItem;\n+import io.quarkus.runtime.LaunchMode;\n+\n+/**\n+ * Utility for Web resource related operations\n+ */\n+public class WebJarUtil {\n+\n+    private static final Logger LOG = Logger.getLogger(WebJarUtil.class);\n+\n+    private final static String tmpDir = System.getProperty(\"java.io.tmpdir\");\n+    private static final String CUSTOM_MEDIA_FOLDER = \"META-INF/branding/\";\n+    private static final List<String> IGNORE_LIST = Arrays.asList(\"logo.png\", \"favicon.ico\", \"style.css\");\n+\n+    private WebJarUtil() {\n+    }\n+\n+    public static Path devOrTest(CurateOutcomeBuildItem curateOutcomeBuildItem, LaunchModeBuildItem launch,\n+            AppArtifact artifact, String rootFolderInJar)\n+            throws IOException {\n+\n+        AppArtifact userApplication = curateOutcomeBuildItem.getEffectiveModel().getAppArtifact();\n+\n+        Path path = createDir(userApplication.getArtifactId(), artifact.getGroupId(), artifact.getArtifactId(),\n+                artifact.getVersion());\n+\n+        // Clean on non dev mode\n+        if (!launch.getLaunchMode().equals(LaunchMode.DEVELOPMENT)) {\n+            IoUtils.recursiveDeleteAndThenCreate(path);\n+        }\n+\n+        if (isEmpty(path)) {\n+            ClassLoader classLoader = WebJarUtil.class.getClassLoader();\n+            for (Path p : artifact.getPaths()) {\n+                File artifactFile = p.toFile();\n+                try (JarFile jarFile = new JarFile(artifactFile)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438a2e19796e44dc250d173e39a212d0242f67c5"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5NjY2MDk1", "url": "https://github.com/quarkusio/quarkus/pull/12652#pullrequestreview-509666095", "createdAt": "2020-10-15T18:39:32Z", "commit": {"oid": "438a2e19796e44dc250d173e39a212d0242f67c5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODozOTozMlrOHiVM-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODozOTozMlrOHiVM-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc2MTAxNw==", "bodyText": "Same as above", "url": "https://github.com/quarkusio/quarkus/pull/12652#discussion_r505761017", "createdAt": "2020-10-15T18:39:32Z", "author": {"login": "gastaldi"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/util/WebJarUtil.java", "diffHunk": "@@ -0,0 +1,300 @@\n+package io.quarkus.deployment.util;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.FileLock;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Scanner;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.bootstrap.model.AppArtifact;\n+import io.quarkus.bootstrap.model.AppDependency;\n+import io.quarkus.bootstrap.model.PathsCollection;\n+import io.quarkus.bootstrap.util.IoUtils;\n+import io.quarkus.deployment.builditem.LaunchModeBuildItem;\n+import io.quarkus.deployment.pkg.builditem.CurateOutcomeBuildItem;\n+import io.quarkus.runtime.LaunchMode;\n+\n+/**\n+ * Utility for Web resource related operations\n+ */\n+public class WebJarUtil {\n+\n+    private static final Logger LOG = Logger.getLogger(WebJarUtil.class);\n+\n+    private final static String tmpDir = System.getProperty(\"java.io.tmpdir\");\n+    private static final String CUSTOM_MEDIA_FOLDER = \"META-INF/branding/\";\n+    private static final List<String> IGNORE_LIST = Arrays.asList(\"logo.png\", \"favicon.ico\", \"style.css\");\n+\n+    private WebJarUtil() {\n+    }\n+\n+    public static Path devOrTest(CurateOutcomeBuildItem curateOutcomeBuildItem, LaunchModeBuildItem launch,\n+            AppArtifact artifact, String rootFolderInJar)\n+            throws IOException {\n+\n+        AppArtifact userApplication = curateOutcomeBuildItem.getEffectiveModel().getAppArtifact();\n+\n+        Path path = createDir(userApplication.getArtifactId(), artifact.getGroupId(), artifact.getArtifactId(),\n+                artifact.getVersion());\n+\n+        // Clean on non dev mode\n+        if (!launch.getLaunchMode().equals(LaunchMode.DEVELOPMENT)) {\n+            IoUtils.recursiveDeleteAndThenCreate(path);\n+        }\n+\n+        if (isEmpty(path)) {\n+            ClassLoader classLoader = WebJarUtil.class.getClassLoader();\n+            for (Path p : artifact.getPaths()) {\n+                File artifactFile = p.toFile();\n+                try (JarFile jarFile = new JarFile(artifactFile)) {\n+                    Enumeration<JarEntry> entries = jarFile.entries();\n+                    while (entries.hasMoreElements()) {\n+                        JarEntry entry = entries.nextElement();\n+                        if (entry.getName().startsWith(rootFolderInJar) && !entry.isDirectory()) {\n+                            try (InputStream inputStream = jarFile.getInputStream(entry)) {\n+                                String filename = entry.getName().replace(rootFolderInJar, \"\");\n+                                String modulename = getModuleOverrideName(artifact, filename);\n+                                if (IGNORE_LIST.contains(filename)\n+                                        && isOverride(userApplication.getPaths(), classLoader, filename, modulename)) {\n+                                    try (InputStream override = getOverride(userApplication.getPaths(), classLoader, filename,\n+                                            modulename)) {\n+                                        createFile(override, path, filename);\n+                                    }\n+                                } else {\n+                                    createFile(inputStream, path, filename);\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        return path;\n+    }\n+\n+    public static void updateUrl(Path original, String path, String lineStartsWith, String format) throws IOException {\n+        String content = new String(Files.readAllBytes(original), StandardCharsets.UTF_8);\n+        String result = updateUrl(content, path, lineStartsWith, format);\n+        if (result != null && !result.equals(content)) {\n+            Files.write(original, result.getBytes(StandardCharsets.UTF_8));\n+        }\n+    }\n+\n+    public static String updateUrl(String original, String path, String lineStartsWith, String format) {\n+        try (Scanner scanner = new Scanner(original)) {\n+            while (scanner.hasNextLine()) {\n+                String line = scanner.nextLine();\n+                if (line.trim().startsWith(lineStartsWith)) {\n+                    String newLine = String.format(format, path);\n+                    return original.replace(line.trim(), newLine);\n+                }\n+            }\n+        }\n+\n+        return original;\n+    }\n+\n+    public static Map<String, byte[]> production(CurateOutcomeBuildItem curateOutcomeBuildItem, AppArtifact artifact,\n+            String rootFolderInJar) throws IOException {\n+        AppArtifact userApplication = curateOutcomeBuildItem.getEffectiveModel().getAppArtifact();\n+\n+        Map<String, byte[]> map = new HashMap<>();\n+        //we are including in a production artifact\n+        //just stick the files in the generated output\n+        //we could do this for dev mode as well but then we need to extract them every time\n+\n+        ClassLoader classLoader = WebJarUtil.class.getClassLoader();\n+        for (Path p : artifact.getPaths()) {\n+            File artifactFile = p.toFile();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "438a2e19796e44dc250d173e39a212d0242f67c5"}, "originalPosition": 127}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7199fc41bf328086483f14c67c6c9243d3dd51e0", "author": {"user": {"login": "phillip-kruger", "name": "Phillip Kr\u00fcger"}}, "url": "https://github.com/quarkusio/quarkus/commit/7199fc41bf328086483f14c67c6c9243d3dd51e0", "committedDate": "2020-10-16T06:27:42Z", "message": "Consolidate all UI related extensions.\n\nSigned-off-by: Phillip Kruger <phillip.kruger@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwMzg2NjE0", "url": "https://github.com/quarkusio/quarkus/pull/12652#pullrequestreview-510386614", "createdAt": "2020-10-16T11:33:05Z", "commit": {"oid": "7199fc41bf328086483f14c67c6c9243d3dd51e0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1760, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}