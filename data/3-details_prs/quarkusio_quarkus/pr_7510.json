{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMzA2MzM4", "number": 7510, "title": "feat: Hibernate with Panache ranged query", "bodyText": "This is a draft implementation of Range queries, that fixes #3870\nIt introduce a Findable interface that is returned by the range() that only contains query result related methods.\n/cc @emmanuelbernard @FroMage if you validate the design I'll implement it for MongoDB also.", "createdAt": "2020-03-02T10:39:03Z", "url": "https://github.com/quarkusio/quarkus/pull/7510", "merged": true, "mergeCommit": {"oid": "4d5326250f06ecb2ddc178be992ef9dfdcd126bd"}, "closed": true, "closedAt": "2020-03-23T10:40:57Z", "author": {"login": "loicmathieu"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcK9LJ1gFqTM3MDIwNjM0OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPL_ZggBqjMxNDU1NjM0NTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMjA2MzQ5", "url": "https://github.com/quarkusio/quarkus/pull/7510#pullrequestreview-370206349", "createdAt": "2020-03-06T10:01:43Z", "commit": {"oid": "883b83c0a4f910b549a0f5928ab72ca5d9a43066"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwOTk3NzQ5", "url": "https://github.com/quarkusio/quarkus/pull/7510#pullrequestreview-370997749", "createdAt": "2020-03-09T08:58:40Z", "commit": {"oid": "397387847299b79dd9b88b606845e5bb62d6c1ee"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwODo1ODo0MFrOFze_AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwODo1ODo0MFrOFze_AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUyOTM0NQ==", "bodyText": "Let's be thorough and test the rest of the methods that should throw.", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389529345", "createdAt": "2020-03-09T08:58:40Z", "author": {"login": "FroMage"}, "path": "integration-tests/hibernate-orm-panache/src/main/java/io/quarkus/it/panache/TestEndpoint.java", "diffHunk": "@@ -851,6 +859,47 @@ private void testPaging(PanacheQuery<Person> query) {\n \n         Assertions.assertEquals(7, query.count());\n         Assertions.assertEquals(3, query.pageCount());\n+\n+        // mix page with range\n+        persons = query.page(0, 3).range(0, 1).list();\n+        Assertions.assertEquals(2, persons.size());\n+        Assertions.assertEquals(\"stef0\", persons.get(0).name);\n+        Assertions.assertEquals(\"stef1\", persons.get(1).name);\n+    }\n+\n+    private void testRange(PanacheQuery<Person> query) {\n+        List<Person> persons = query.range(0, 2).list();\n+        Assertions.assertEquals(3, persons.size());\n+        Assertions.assertEquals(\"stef0\", persons.get(0).name);\n+        Assertions.assertEquals(\"stef1\", persons.get(1).name);\n+        Assertions.assertEquals(\"stef2\", persons.get(2).name);\n+\n+        persons = query.range(3, 5).list();\n+        Assertions.assertEquals(3, persons.size());\n+        Assertions.assertEquals(\"stef3\", persons.get(0).name);\n+        Assertions.assertEquals(\"stef4\", persons.get(1).name);\n+        Assertions.assertEquals(\"stef5\", persons.get(2).name);\n+\n+        persons = query.range(6, 8).list();\n+        Assertions.assertEquals(1, persons.size());\n+        Assertions.assertEquals(\"stef6\", persons.get(0).name);\n+\n+        persons = query.range(8, 12).list();\n+        Assertions.assertEquals(0, persons.size());\n+\n+        // mix range with page\n+        try {\n+            // invalid\n+            query.range(0, 2).nextPage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "397387847299b79dd9b88b606845e5bb62d6c1ee"}, "originalPosition": 57}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "397387847299b79dd9b88b606845e5bb62d6c1ee", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/397387847299b79dd9b88b606845e5bb62d6c1ee", "committedDate": "2020-03-06T16:14:14Z", "message": "feat: restric page/range usage based on Exception"}, "afterCommit": {"oid": "611dcd5601d7a09a246e331acb13a3328a8fdcc8", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/611dcd5601d7a09a246e331acb13a3328a8fdcc8", "committedDate": "2020-03-09T13:40:54Z", "message": "feat: MongoDB with Panache ranged query"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMjA1NDEx", "url": "https://github.com/quarkusio/quarkus/pull/7510#pullrequestreview-371205411", "createdAt": "2020-03-09T13:59:24Z", "commit": {"oid": "611dcd5601d7a09a246e331acb13a3328a8fdcc8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzo1OToyNFrOFzpVDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDowNzoyOFrOFzp4-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY5ODgzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `PanacheQuery` also allow range based query instead of page based.\n          \n          \n            \n            `PanacheQuery` also allows range-based queries.", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389698831", "createdAt": "2020-03-09T13:59:24Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -440,6 +440,31 @@ return Person.find(\"status\", Status.Alive)\n \n The `PanacheQuery` type has many other methods to deal with paging and returning streams.\n \n+=== Using a range instead of pages\n+\n+`PanacheQuery` also allow range based query instead of page based.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611dcd5601d7a09a246e331acb13a3328a8fdcc8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY5OTU2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // make it use a range or start index 0 and last index 25.\n          \n          \n            \n            // make it use a range: start at index 0 until index 25 (inclusive).", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389699569", "createdAt": "2020-03-09T14:00:01Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -440,6 +440,31 @@ return Person.find(\"status\", Status.Alive)\n \n The `PanacheQuery` type has many other methods to deal with paging and returning streams.\n \n+=== Using a range instead of pages\n+\n+`PanacheQuery` also allow range based query instead of page based.\n+\n+[source,java]\n+----\n+// create a query for all living persons\n+PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n+\n+// make it use a range or start index 0 and last index 25.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611dcd5601d7a09a246e331acb13a3328a8fdcc8"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwMDg2NQ==", "bodyText": "Oh hold on, I thought the range was inclusive on the last index? If it is, then you get element 25 for the previous range and this one too, no?", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389700865", "createdAt": "2020-03-09T14:01:08Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -440,6 +440,31 @@ return Person.find(\"status\", Status.Alive)\n \n The `PanacheQuery` type has many other methods to deal with paging and returning streams.\n \n+=== Using a range instead of pages\n+\n+`PanacheQuery` also allow range based query instead of page based.\n+\n+[source,java]\n+----\n+// create a query for all living persons\n+PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n+\n+// make it use a range or start index 0 and last index 25.\n+livingPersons.range(0, 25);\n+\n+// get the range\n+List<Person> firstRange = livingPersons.list();\n+\n+// to get the next range, you need to call range again", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611dcd5601d7a09a246e331acb13a3328a8fdcc8"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwMjIwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You cannot mix range and page, if you use a range, all page related methods will throw an `UnsupportedOperationException`;\n          \n          \n            \n            You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`;", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389702201", "createdAt": "2020-03-09T14:02:20Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -440,6 +440,31 @@ return Person.find(\"status\", Status.Alive)\n \n The `PanacheQuery` type has many other methods to deal with paging and returning streams.\n \n+=== Using a range instead of pages\n+\n+`PanacheQuery` also allow range based query instead of page based.\n+\n+[source,java]\n+----\n+// create a query for all living persons\n+PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n+\n+// make it use a range or start index 0 and last index 25.\n+livingPersons.range(0, 25);\n+\n+// get the range\n+List<Person> firstRange = livingPersons.list();\n+\n+// to get the next range, you need to call range again\n+List<Person> secondRange = livingPersons.range(25, 50).list();\n+----\n+\n+[WARNING]\n+----\n+You cannot mix range and page, if you use a range, all page related methods will throw an `UnsupportedOperationException`;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611dcd5601d7a09a246e331acb13a3328a8fdcc8"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwMzI2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            you must use a method that defines a new page before using them : `page(Page)` or `page(int, int)`.\n          \n          \n            \n            you can switch back to paging using `page(Page)` or `page(int, int)`.", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389703266", "createdAt": "2020-03-09T14:03:22Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -440,6 +440,31 @@ return Person.find(\"status\", Status.Alive)\n \n The `PanacheQuery` type has many other methods to deal with paging and returning streams.\n \n+=== Using a range instead of pages\n+\n+`PanacheQuery` also allow range based query instead of page based.\n+\n+[source,java]\n+----\n+// create a query for all living persons\n+PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n+\n+// make it use a range or start index 0 and last index 25.\n+livingPersons.range(0, 25);\n+\n+// get the range\n+List<Person> firstRange = livingPersons.list();\n+\n+// to get the next range, you need to call range again\n+List<Person> secondRange = livingPersons.range(25, 50).list();\n+----\n+\n+[WARNING]\n+----\n+You cannot mix range and page, if you use a range, all page related methods will throw an `UnsupportedOperationException`;\n+you must use a method that defines a new page before using them : `page(Page)` or `page(int, int)`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611dcd5601d7a09a246e331acb13a3328a8fdcc8"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwMzc5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `PanacheQuery` also allow range based query instead of page based.\n          \n          \n            \n            `PanacheQuery` also allows range-based queries.", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389703792", "createdAt": "2020-03-09T14:03:44Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -437,6 +437,31 @@ return Person.find(\"status\", Status.Alive)\n \n The `PanacheQuery` type has many other methods to deal with paging and returning streams.\n \n+=== Using a range instead of pages\n+\n+`PanacheQuery` also allow range based query instead of page based.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611dcd5601d7a09a246e331acb13a3328a8fdcc8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwNTA0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // make it use a range or start index 0 and last index 25.\n          \n          \n            \n            // make it use a range: start at index 0 until index 25 (inclusive).", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389705046", "createdAt": "2020-03-09T14:04:55Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -437,6 +437,31 @@ return Person.find(\"status\", Status.Alive)\n \n The `PanacheQuery` type has many other methods to deal with paging and returning streams.\n \n+=== Using a range instead of pages\n+\n+`PanacheQuery` also allow range based query instead of page based.\n+\n+[source,java]\n+----\n+// create a query for all living persons\n+PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n+\n+// make it use a range or start index 0 and last index 25.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611dcd5601d7a09a246e331acb13a3328a8fdcc8"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwNTMxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You cannot mix range and page, if you use a range, all page related methods will throw an `UnsupportedOperationException`;\n          \n          \n            \n            You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`;", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389705318", "createdAt": "2020-03-09T14:05:09Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -437,6 +437,31 @@ return Person.find(\"status\", Status.Alive)\n \n The `PanacheQuery` type has many other methods to deal with paging and returning streams.\n \n+=== Using a range instead of pages\n+\n+`PanacheQuery` also allow range based query instead of page based.\n+\n+[source,java]\n+----\n+// create a query for all living persons\n+PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n+\n+// make it use a range or start index 0 and last index 25.\n+livingPersons.range(0, 25);\n+\n+// get the range\n+List<Person> firstRange = livingPersons.list();\n+\n+// to get the next range, you need to call range again\n+List<Person> secondRange = livingPersons.range(25, 50).list();\n+----\n+\n+[WARNING]\n+----\n+You cannot mix range and page, if you use a range, all page related methods will throw an `UnsupportedOperationException`;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611dcd5601d7a09a246e331acb13a3328a8fdcc8"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwNTUzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            you must use a method that defines a new page before using them : `page(Page)` or `page(int, int)`.\n          \n          \n            \n            you can switch back to paging using `page(Page)` or `page(int, int)`.", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389705534", "createdAt": "2020-03-09T14:05:20Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -437,6 +437,31 @@ return Person.find(\"status\", Status.Alive)\n \n The `PanacheQuery` type has many other methods to deal with paging and returning streams.\n \n+=== Using a range instead of pages\n+\n+`PanacheQuery` also allow range based query instead of page based.\n+\n+[source,java]\n+----\n+// create a query for all living persons\n+PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n+\n+// make it use a range or start index 0 and last index 25.\n+livingPersons.range(0, 25);\n+\n+// get the range\n+List<Person> firstRange = livingPersons.list();\n+\n+// to get the next range, you need to call range again\n+List<Person> secondRange = livingPersons.range(25, 50).list();\n+----\n+\n+[WARNING]\n+----\n+You cannot mix range and page, if you use a range, all page related methods will throw an `UnsupportedOperationException`;\n+you must use a method that defines a new page before using them : `page(Page)` or `page(int, int)`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611dcd5601d7a09a246e331acb13a3328a8fdcc8"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwNjIxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public <T extends Entity> PanacheQuery<T> range(int startIdx, int lastIdx);\n          \n          \n            \n                public <T extends Entity> PanacheQuery<T> range(int startIndex, int lastIndex);", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389706213", "createdAt": "2020-03-09T14:05:55Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache/runtime/src/main/java/io/quarkus/hibernate/orm/panache/PanacheQuery.java", "diffHunk": "@@ -116,6 +116,16 @@\n      */\n     public Page page();\n \n+    /**\n+     * Switch the query to use a fixed range (start index - last index) instead of a page.\n+     * As the range is fixed, subsequent pagination of the query is not possible.\n+     *\n+     * @param startIdx the index of the first element, starting at 0\n+     * @param lastIdx the index of the last element\n+     * @return this query, modified\n+     */\n+    public <T extends Entity> PanacheQuery<T> range(int startIdx, int lastIdx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611dcd5601d7a09a246e331acb13a3328a8fdcc8"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwNzAyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public <T extends Entity> PanacheQuery<T> range(int startIdx, int lastIdx);\n          \n          \n            \n                public <T extends Entity> PanacheQuery<T> range(int startIndex, int lastIndex);", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389707022", "createdAt": "2020-03-09T14:06:35Z", "author": {"login": "FroMage"}, "path": "extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/PanacheQuery.java", "diffHunk": "@@ -116,6 +116,16 @@\n      */\n     public Page page();\n \n+    /**\n+     * Switch the query to use a fixed range (start index - last index) instead of a page.\n+     * As the range is fixed, subsequent pagination of the query is not possible.\n+     *\n+     * @param startIdx the index of the first element, starting at 0\n+     * @param lastIdx the index of the last element\n+     * @return this query, modified\n+     */\n+    public <T extends Entity> PanacheQuery<T> range(int startIdx, int lastIdx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611dcd5601d7a09a246e331acb13a3328a8fdcc8"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwNzI4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public <T extends Entity> ReactivePanacheQuery<T> range(int startIdx, int lastIdx);\n          \n          \n            \n                public <T extends Entity> ReactivePanacheQuery<T> range(int startIndex, int lastIndex);", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389707286", "createdAt": "2020-03-09T14:06:49Z", "author": {"login": "FroMage"}, "path": "extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/reactive/ReactivePanacheQuery.java", "diffHunk": "@@ -110,6 +110,16 @@\n      */\n     public Page page();\n \n+    /**\n+     * Switch the query to use a fixed range (start index - last index) instead of a page.\n+     * As the range is fixed, subsequent pagination of the query is not possible.\n+     *\n+     * @param startIdx the index of the first element, starting at 0\n+     * @param lastIdx the index of the last element\n+     * @return this query, modified\n+     */\n+    public <T extends Entity> ReactivePanacheQuery<T> range(int startIdx, int lastIdx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611dcd5601d7a09a246e331acb13a3328a8fdcc8"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwODAyNA==", "bodyText": "Please index everywhere here :)", "url": "https://github.com/quarkusio/quarkus/pull/7510#discussion_r389708024", "createdAt": "2020-03-09T14:07:28Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-common/runtime/src/main/java/io/quarkus/panache/common/Range.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.quarkus.panache.common;\n+\n+/**\n+ * <p>\n+ * Utility class to represent ranging information. Range instances are immutable.\n+ * </p>\n+ *\n+ * <p>\n+ * Usage:\n+ * </p>\n+ *\n+ * <code><pre>\n+ * Range range = Range.of(0, 5);\n+ * </pre></code>\n+ */\n+public class Range {\n+    private final int startIdx;\n+    private final int lastIdx;\n+\n+    public Range(int startIdx, int lastIdx) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "611dcd5601d7a09a246e331acb13a3328a8fdcc8"}, "originalPosition": 20}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6f9c2180f620ae36a58c1549f9f2cfcb4750411d", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/6f9c2180f620ae36a58c1549f9f2cfcb4750411d", "committedDate": "2020-03-09T14:31:20Z", "message": "WIP Apply suggestions from code review\r\n\r\nWill squash it later\n\nCo-Authored-By: St\u00e9phane \u00c9pardaud <stef@inforealm.org>"}, "afterCommit": {"oid": "f99b8536e42808ae2b5b8b6490068a2b42ca5144", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/f99b8536e42808ae2b5b8b6490068a2b42ca5144", "committedDate": "2020-03-09T14:47:25Z", "message": "feat: MongoDB with Panache ranged query"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3NzE1Mjgz", "url": "https://github.com/quarkusio/quarkus/pull/7510#pullrequestreview-377715283", "createdAt": "2020-03-19T13:26:16Z", "commit": {"oid": "f99b8536e42808ae2b5b8b6490068a2b42ca5144"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0e4a19932dee2dfb47d5a2f73a97081d3beefab", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/c0e4a19932dee2dfb47d5a2f73a97081d3beefab", "committedDate": "2020-03-19T13:32:49Z", "message": "feat: Hibernate with Panache ranged query"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52251c8ce47452e7e67bebd3d7cfb1e87ea72bf2", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/52251c8ce47452e7e67bebd3d7cfb1e87ea72bf2", "committedDate": "2020-03-19T13:32:49Z", "message": "feat: MongoDB with Panache ranged query"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f99b8536e42808ae2b5b8b6490068a2b42ca5144", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/f99b8536e42808ae2b5b8b6490068a2b42ca5144", "committedDate": "2020-03-09T14:47:25Z", "message": "feat: MongoDB with Panache ranged query"}, "afterCommit": {"oid": "52251c8ce47452e7e67bebd3d7cfb1e87ea72bf2", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/52251c8ce47452e7e67bebd3d7cfb1e87ea72bf2", "committedDate": "2020-03-19T13:32:49Z", "message": "feat: MongoDB with Panache ranged query"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4074, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}