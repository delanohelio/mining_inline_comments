{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4OTMyMzE1", "number": 6877, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwODo0MjoxNlrODb1c9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo1MjowMFrODb43GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTEzOTExOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwODo0MjoxNlrOFjjCfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDowMToxMFrOFjlTug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgxODU1OA==", "bodyText": "A link to the doc maybe?", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372818558", "createdAt": "2020-01-30T08:42:16Z", "author": {"login": "machi1990"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -528,7 +529,41 @@ you need to provide the value by yourself.\n ====\n \n `ObjectId` can be difficult to use if you want to expose its value in your REST service.\n-So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+\n+== Working with Kotlin Data classes\n+\n+Kotlin data classes are very practical to defines data carrier classes, so they are a perfect match for an entity class.\n+\n+But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked at nullable,\n+and the generated constructor need to have as parameters all the fields of the data class.\n+\n+MongoDB with Panache uses the PojoCodec, this MongoDB codec mandate the presence of an empty (no parameter) constructor.\n+\n+So, if you want to use a data class for an entity class, you need a way to have Kotlin generates an empty constructor.\n+To do so, you need to provide default values for all fields of your classes.\n+The following sentence from the Kotlin documentation explain this:\n+\n+__On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified (see Constructors).__", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a93ee58ec4d157d5697ba3be6da4d3eb2a64429"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzNTc1MA==", "bodyText": "Yes, we absolutely should have a link. Also, are you sure this work in native?", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372835750", "createdAt": "2020-01-30T09:21:15Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -528,7 +529,41 @@ you need to provide the value by yourself.\n ====\n \n `ObjectId` can be difficult to use if you want to expose its value in your REST service.\n-So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+\n+== Working with Kotlin Data classes\n+\n+Kotlin data classes are very practical to defines data carrier classes, so they are a perfect match for an entity class.\n+\n+But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked at nullable,\n+and the generated constructor need to have as parameters all the fields of the data class.\n+\n+MongoDB with Panache uses the PojoCodec, this MongoDB codec mandate the presence of an empty (no parameter) constructor.\n+\n+So, if you want to use a data class for an entity class, you need a way to have Kotlin generates an empty constructor.\n+To do so, you need to provide default values for all fields of your classes.\n+The following sentence from the Kotlin documentation explain this:\n+\n+__On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified (see Constructors).__", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgxODU1OA=="}, "originalCommit": {"oid": "7a93ee58ec4d157d5697ba3be6da4d3eb2a64429"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg0NzE0Mw==", "bodyText": "are you sure this work in native\n\nThe pojo codec works in native, and all classes are register for reflection so I don't see why it will not works in native. I can ask  for tests on the original issue report.", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372847143", "createdAt": "2020-01-30T09:44:42Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -528,7 +529,41 @@ you need to provide the value by yourself.\n ====\n \n `ObjectId` can be difficult to use if you want to expose its value in your REST service.\n-So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+\n+== Working with Kotlin Data classes\n+\n+Kotlin data classes are very practical to defines data carrier classes, so they are a perfect match for an entity class.\n+\n+But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked at nullable,\n+and the generated constructor need to have as parameters all the fields of the data class.\n+\n+MongoDB with Panache uses the PojoCodec, this MongoDB codec mandate the presence of an empty (no parameter) constructor.\n+\n+So, if you want to use a data class for an entity class, you need a way to have Kotlin generates an empty constructor.\n+To do so, you need to provide default values for all fields of your classes.\n+The following sentence from the Kotlin documentation explain this:\n+\n+__On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified (see Constructors).__", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgxODU1OA=="}, "originalCommit": {"oid": "7a93ee58ec4d157d5697ba3be6da4d3eb2a64429"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg0ODQ2Ng==", "bodyText": "The reason I am asking is because I have seen some weird deserilization behavior in #3954 with data classes that only occurs in native mode.", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372848466", "createdAt": "2020-01-30T09:47:18Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -528,7 +529,41 @@ you need to provide the value by yourself.\n ====\n \n `ObjectId` can be difficult to use if you want to expose its value in your REST service.\n-So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+\n+== Working with Kotlin Data classes\n+\n+Kotlin data classes are very practical to defines data carrier classes, so they are a perfect match for an entity class.\n+\n+But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked at nullable,\n+and the generated constructor need to have as parameters all the fields of the data class.\n+\n+MongoDB with Panache uses the PojoCodec, this MongoDB codec mandate the presence of an empty (no parameter) constructor.\n+\n+So, if you want to use a data class for an entity class, you need a way to have Kotlin generates an empty constructor.\n+To do so, you need to provide default values for all fields of your classes.\n+The following sentence from the Kotlin documentation explain this:\n+\n+__On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified (see Constructors).__", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgxODU1OA=="}, "originalCommit": {"oid": "7a93ee58ec4d157d5697ba3be6da4d3eb2a64429"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg1NDI1OA==", "bodyText": "The native issue you referes to seems to be more on GraalVM side than on Kotin/Mongodb/Quarkus side ... Maybe someone from GraalVM can have a look at a support on GraalVM for kotlin data classes.", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372854258", "createdAt": "2020-01-30T09:58:21Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -528,7 +529,41 @@ you need to provide the value by yourself.\n ====\n \n `ObjectId` can be difficult to use if you want to expose its value in your REST service.\n-So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+\n+== Working with Kotlin Data classes\n+\n+Kotlin data classes are very practical to defines data carrier classes, so they are a perfect match for an entity class.\n+\n+But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked at nullable,\n+and the generated constructor need to have as parameters all the fields of the data class.\n+\n+MongoDB with Panache uses the PojoCodec, this MongoDB codec mandate the presence of an empty (no parameter) constructor.\n+\n+So, if you want to use a data class for an entity class, you need a way to have Kotlin generates an empty constructor.\n+To do so, you need to provide default values for all fields of your classes.\n+The following sentence from the Kotlin documentation explain this:\n+\n+__On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified (see Constructors).__", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgxODU1OA=="}, "originalCommit": {"oid": "7a93ee58ec4d157d5697ba3be6da4d3eb2a64429"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg1NTczOA==", "bodyText": "Yeah probably. I haven't had time to really dig into it yet or talk to the Kotlin folks first to get their opinion.\nOnce I do that I'll have a better understanding and then we'll be able to proceed further", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372855738", "createdAt": "2020-01-30T10:01:10Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -528,7 +529,41 @@ you need to provide the value by yourself.\n ====\n \n `ObjectId` can be difficult to use if you want to expose its value in your REST service.\n-So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+\n+== Working with Kotlin Data classes\n+\n+Kotlin data classes are very practical to defines data carrier classes, so they are a perfect match for an entity class.\n+\n+But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked at nullable,\n+and the generated constructor need to have as parameters all the fields of the data class.\n+\n+MongoDB with Panache uses the PojoCodec, this MongoDB codec mandate the presence of an empty (no parameter) constructor.\n+\n+So, if you want to use a data class for an entity class, you need a way to have Kotlin generates an empty constructor.\n+To do so, you need to provide default values for all fields of your classes.\n+The following sentence from the Kotlin documentation explain this:\n+\n+__On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified (see Constructors).__", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgxODU1OA=="}, "originalCommit": {"oid": "7a93ee58ec4d157d5697ba3be6da4d3eb2a64429"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTE0MTEzOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwODo0MzowNVrOFjjDwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwODo0MzowNVrOFjjDwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgxODg4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            and the generated constructor need to have as parameters all the fields of the data class.\n          \n          \n            \n            and the generated constructor needs to have as parameters all the fields of the data class.", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372818880", "createdAt": "2020-01-30T08:43:05Z", "author": {"login": "machi1990"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -528,7 +529,41 @@ you need to provide the value by yourself.\n ====\n \n `ObjectId` can be difficult to use if you want to expose its value in your REST service.\n-So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+\n+== Working with Kotlin Data classes\n+\n+Kotlin data classes are very practical to defines data carrier classes, so they are a perfect match for an entity class.\n+\n+But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked at nullable,\n+and the generated constructor need to have as parameters all the fields of the data class.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a93ee58ec4d157d5697ba3be6da4d3eb2a64429"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTE0MjA5OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwODo0MzoyNFrOFjjESg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwODo0MzoyNFrOFjjESg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgxOTAxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            MongoDB with Panache uses the PojoCodec, this MongoDB codec mandate the presence of an empty (no parameter) constructor.\n          \n          \n            \n            MongoDB with Panache uses the PojoCodec, this MongoDB codec mandates the presence of an empty (no parameter) constructor.", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372819018", "createdAt": "2020-01-30T08:43:24Z", "author": {"login": "machi1990"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -528,7 +529,41 @@ you need to provide the value by yourself.\n ====\n \n `ObjectId` can be difficult to use if you want to expose its value in your REST service.\n-So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+\n+== Working with Kotlin Data classes\n+\n+Kotlin data classes are very practical to defines data carrier classes, so they are a perfect match for an entity class.\n+\n+But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked at nullable,\n+and the generated constructor need to have as parameters all the fields of the data class.\n+\n+MongoDB with Panache uses the PojoCodec, this MongoDB codec mandate the presence of an empty (no parameter) constructor.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a93ee58ec4d157d5697ba3be6da4d3eb2a64429"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTE0NjAxOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwODo0NDo1MlrOFjjGwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwODo0NDo1MlrOFjjGwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgxOTY0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            in this case all constructor parameters needs to be annotated with `@BsonProperty`: link:{mongodb-doc-root-url}/bson/pojos/#supporting-pojos-without-no-args-constructors[Supporting pojos without no args constructor]\n          \n          \n            \n            in this case all constructor parameters have  to be annotated with `@BsonProperty`: link:{mongodb-doc-root-url}/bson/pojos/#supporting-pojos-without-no-args-constructors[Supporting pojos without no args constructor]", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372819649", "createdAt": "2020-01-30T08:44:52Z", "author": {"login": "machi1990"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -528,7 +529,41 @@ you need to provide the value by yourself.\n ====\n \n `ObjectId` can be difficult to use if you want to expose its value in your REST service.\n-So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+\n+== Working with Kotlin Data classes\n+\n+Kotlin data classes are very practical to defines data carrier classes, so they are a perfect match for an entity class.\n+\n+But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked at nullable,\n+and the generated constructor need to have as parameters all the fields of the data class.\n+\n+MongoDB with Panache uses the PojoCodec, this MongoDB codec mandate the presence of an empty (no parameter) constructor.\n+\n+So, if you want to use a data class for an entity class, you need a way to have Kotlin generates an empty constructor.\n+To do so, you need to provide default values for all fields of your classes.\n+The following sentence from the Kotlin documentation explain this:\n+\n+__On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified (see Constructors).__\n+\n+If it's not something you want to do, there are two solutions to workaround this.\n+\n+First solution, you can create a BSON Codec, it will be automatically registered by Quarkus and will be used instead of the PojoCodec.\n+See this part of the documentation: link:mongodb#simplifying-mongodb-client-usage-using-bson-codec[Using BSON codec]\n+\n+Second solution, you can use the `@BsonCreator` annotation to tell the PojoCodec to use the Kotlin data class default constructor,\n+in this case all constructor parameters needs to be annotated with `@BsonProperty`: link:{mongodb-doc-root-url}/bson/pojos/#supporting-pojos-without-no-args-constructors[Supporting pojos without no args constructor]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a93ee58ec4d157d5697ba3be6da4d3eb2a64429"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTE0OTgyOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwODo0NjoyMVrOFjjJNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwODo0NjoyMVrOFjjJNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgyMDI3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Following is the Person class as a Kotlin data class:\n          \n          \n            \n            See an example of the Person class as a Kotlin data class:", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372820277", "createdAt": "2020-01-30T08:46:21Z", "author": {"login": "machi1990"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -528,7 +529,41 @@ you need to provide the value by yourself.\n ====\n \n `ObjectId` can be difficult to use if you want to expose its value in your REST service.\n-So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+\n+== Working with Kotlin Data classes\n+\n+Kotlin data classes are very practical to defines data carrier classes, so they are a perfect match for an entity class.\n+\n+But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked at nullable,\n+and the generated constructor need to have as parameters all the fields of the data class.\n+\n+MongoDB with Panache uses the PojoCodec, this MongoDB codec mandate the presence of an empty (no parameter) constructor.\n+\n+So, if you want to use a data class for an entity class, you need a way to have Kotlin generates an empty constructor.\n+To do so, you need to provide default values for all fields of your classes.\n+The following sentence from the Kotlin documentation explain this:\n+\n+__On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified (see Constructors).__\n+\n+If it's not something you want to do, there are two solutions to workaround this.\n+\n+First solution, you can create a BSON Codec, it will be automatically registered by Quarkus and will be used instead of the PojoCodec.\n+See this part of the documentation: link:mongodb#simplifying-mongodb-client-usage-using-bson-codec[Using BSON codec]\n+\n+Second solution, you can use the `@BsonCreator` annotation to tell the PojoCodec to use the Kotlin data class default constructor,\n+in this case all constructor parameters needs to be annotated with `@BsonProperty`: link:{mongodb-doc-root-url}/bson/pojos/#supporting-pojos-without-no-args-constructors[Supporting pojos without no args constructor]\n+\n+Following is the Person class as a Kotlin data class:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a93ee58ec4d157d5697ba3be6da4d3eb2a64429"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTE1MTY3OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/writing-extensions.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwODo0NzowMlrOFjjKWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwODo0NzowMlrOFjjKWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgyMDU3MQ==", "bodyText": "Good catch!", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372820571", "createdAt": "2020-01-30T08:47:02Z", "author": {"login": "machi1990"}, "path": "docs/src/main/asciidoc/writing-extensions.adoc", "diffHunk": "@@ -2655,7 +2655,7 @@ See the code  example below:\n public ConfigGroupConfig configGroup;\n ----\n \n-1. This will add a section documentation for the `confgiGroup` config item in the generated documentation.\n+1. This will add a section documentation for the `configGroup` config item in the generated documentation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a93ee58ec4d157d5697ba3be6da4d3eb2a64429"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTI0MjIyOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwOToxOTowMFrOFjkBpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwOToxOTowMFrOFjkBpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzNDcyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Kotlin data classes are very practical to defines data carrier classes, so they are a perfect match for an entity class.\n          \n          \n            \n            Kotlin data classes are very convenient way to define data carrier classes, making them a great match to define an entity class.", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372834726", "createdAt": "2020-01-30T09:19:00Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -528,7 +529,41 @@ you need to provide the value by yourself.\n ====\n \n `ObjectId` can be difficult to use if you want to expose its value in your REST service.\n-So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+\n+== Working with Kotlin Data classes\n+\n+Kotlin data classes are very practical to defines data carrier classes, so they are a perfect match for an entity class.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a93ee58ec4d157d5697ba3be6da4d3eb2a64429"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTI0Njg0OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwOToyMDo0MlrOFjkEhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwOTo0NToyOFrOFjkztg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzNTQ2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            So, if you want to use a data class for an entity class, you need a way to have Kotlin generates an empty constructor.\n          \n          \n            \n            Therefore, if you want to use a data class as an entity class, a way is needed to make Kotlin generate an empty constructor.", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372835462", "createdAt": "2020-01-30T09:20:42Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -528,7 +529,41 @@ you need to provide the value by yourself.\n ====\n \n `ObjectId` can be difficult to use if you want to expose its value in your REST service.\n-So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+\n+== Working with Kotlin Data classes\n+\n+Kotlin data classes are very practical to defines data carrier classes, so they are a perfect match for an entity class.\n+\n+But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked at nullable,\n+and the generated constructor need to have as parameters all the fields of the data class.\n+\n+MongoDB with Panache uses the PojoCodec, this MongoDB codec mandate the presence of an empty (no parameter) constructor.\n+\n+So, if you want to use a data class for an entity class, you need a way to have Kotlin generates an empty constructor.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a93ee58ec4d157d5697ba3be6da4d3eb2a64429"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzNTg5Mg==", "bodyText": "Have you perhaps also tried the Kotlin no-arg compiler plugin?", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372835892", "createdAt": "2020-01-30T09:21:32Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -528,7 +529,41 @@ you need to provide the value by yourself.\n ====\n \n `ObjectId` can be difficult to use if you want to expose its value in your REST service.\n-So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+\n+== Working with Kotlin Data classes\n+\n+Kotlin data classes are very practical to defines data carrier classes, so they are a perfect match for an entity class.\n+\n+But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked at nullable,\n+and the generated constructor need to have as parameters all the fields of the data class.\n+\n+MongoDB with Panache uses the PojoCodec, this MongoDB codec mandate the presence of an empty (no parameter) constructor.\n+\n+So, if you want to use a data class for an entity class, you need a way to have Kotlin generates an empty constructor.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzNTQ2Mg=="}, "originalCommit": {"oid": "7a93ee58ec4d157d5697ba3be6da4d3eb2a64429"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg0NzU0Mg==", "bodyText": "No, I can ask to test it on the original issue.", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372847542", "createdAt": "2020-01-30T09:45:28Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -528,7 +529,41 @@ you need to provide the value by yourself.\n ====\n \n `ObjectId` can be difficult to use if you want to expose its value in your REST service.\n-So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+\n+== Working with Kotlin Data classes\n+\n+Kotlin data classes are very practical to defines data carrier classes, so they are a perfect match for an entity class.\n+\n+But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked at nullable,\n+and the generated constructor need to have as parameters all the fields of the data class.\n+\n+MongoDB with Panache uses the PojoCodec, this MongoDB codec mandate the presence of an empty (no parameter) constructor.\n+\n+So, if you want to use a data class for an entity class, you need a way to have Kotlin generates an empty constructor.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzNTQ2Mg=="}, "originalCommit": {"oid": "7a93ee58ec4d157d5697ba3be6da4d3eb2a64429"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTI1MjUwOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwOToyMjozNlrOFjkIMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwOToyMjozNlrOFjkIMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzNjQwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If it's not something you want to do, there are two solutions to workaround this.\n          \n          \n            \n            If for whatever reason the aforementioned solution is deemed unacceptable, there are alternatives", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372836403", "createdAt": "2020-01-30T09:22:36Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -528,7 +529,41 @@ you need to provide the value by yourself.\n ====\n \n `ObjectId` can be difficult to use if you want to expose its value in your REST service.\n-So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+\n+== Working with Kotlin Data classes\n+\n+Kotlin data classes are very practical to defines data carrier classes, so they are a perfect match for an entity class.\n+\n+But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked at nullable,\n+and the generated constructor need to have as parameters all the fields of the data class.\n+\n+MongoDB with Panache uses the PojoCodec, this MongoDB codec mandate the presence of an empty (no parameter) constructor.\n+\n+So, if you want to use a data class for an entity class, you need a way to have Kotlin generates an empty constructor.\n+To do so, you need to provide default values for all fields of your classes.\n+The following sentence from the Kotlin documentation explain this:\n+\n+__On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified (see Constructors).__\n+\n+If it's not something you want to do, there are two solutions to workaround this.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a93ee58ec4d157d5697ba3be6da4d3eb2a64429"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTI1Mzc1OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwOToyMzowMlrOFjkI9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwOToyMzowMlrOFjkI9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzNjU5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            First solution, you can create a BSON Codec, it will be automatically registered by Quarkus and will be used instead of the PojoCodec.\n          \n          \n            \n            Firstly, you can create a BSON Codec which will be automatically registered by Quarkus and will be used instead of the PojoCodec.", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372836599", "createdAt": "2020-01-30T09:23:02Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -528,7 +529,41 @@ you need to provide the value by yourself.\n ====\n \n `ObjectId` can be difficult to use if you want to expose its value in your REST service.\n-So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+\n+== Working with Kotlin Data classes\n+\n+Kotlin data classes are very practical to defines data carrier classes, so they are a perfect match for an entity class.\n+\n+But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked at nullable,\n+and the generated constructor need to have as parameters all the fields of the data class.\n+\n+MongoDB with Panache uses the PojoCodec, this MongoDB codec mandate the presence of an empty (no parameter) constructor.\n+\n+So, if you want to use a data class for an entity class, you need a way to have Kotlin generates an empty constructor.\n+To do so, you need to provide default values for all fields of your classes.\n+The following sentence from the Kotlin documentation explain this:\n+\n+__On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified (see Constructors).__\n+\n+If it's not something you want to do, there are two solutions to workaround this.\n+\n+First solution, you can create a BSON Codec, it will be automatically registered by Quarkus and will be used instead of the PojoCodec.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a93ee58ec4d157d5697ba3be6da4d3eb2a64429"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTI1NDE2OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwOToyMzoxM1rOFjkJPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwOToyMzoxM1rOFjkJPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzNjY2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Second solution, you can use the `@BsonCreator` annotation to tell the PojoCodec to use the Kotlin data class default constructor,\n          \n          \n            \n            Secondly, you can use the `@BsonCreator` annotation to tell the PojoCodec to use the Kotlin data class default constructor,", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372836668", "createdAt": "2020-01-30T09:23:13Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -528,7 +529,41 @@ you need to provide the value by yourself.\n ====\n \n `ObjectId` can be difficult to use if you want to expose its value in your REST service.\n-So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+\n+== Working with Kotlin Data classes\n+\n+Kotlin data classes are very practical to defines data carrier classes, so they are a perfect match for an entity class.\n+\n+But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked at nullable,\n+and the generated constructor need to have as parameters all the fields of the data class.\n+\n+MongoDB with Panache uses the PojoCodec, this MongoDB codec mandate the presence of an empty (no parameter) constructor.\n+\n+So, if you want to use a data class for an entity class, you need a way to have Kotlin generates an empty constructor.\n+To do so, you need to provide default values for all fields of your classes.\n+The following sentence from the Kotlin documentation explain this:\n+\n+__On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified (see Constructors).__\n+\n+If it's not something you want to do, there are two solutions to workaround this.\n+\n+First solution, you can create a BSON Codec, it will be automatically registered by Quarkus and will be used instead of the PojoCodec.\n+See this part of the documentation: link:mongodb#simplifying-mongodb-client-usage-using-bson-codec[Using BSON codec]\n+\n+Second solution, you can use the `@BsonCreator` annotation to tell the PojoCodec to use the Kotlin data class default constructor,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a93ee58ec4d157d5697ba3be6da4d3eb2a64429"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTY4NDA4OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0Njo1MFrOFjoPyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0Njo1MFrOFjoPyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwMzg4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n          \n          \n            \n            So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on either the RESTEasy JSON-B extension or the RESTEasy Jackson extension.", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372903880", "createdAt": "2020-01-30T11:46:50Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -528,7 +529,41 @@ you need to provide the value by yourself.\n ====\n \n `ObjectId` can be difficult to use if you want to expose its value in your REST service.\n-So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "668a580fa975de11eaec4cd34a597e3ac6835d9b"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTY4NDk3OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0NzowOFrOFjoQTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0NzowOFrOFjoQTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwNDAxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Kotlin data classes are very convenient way to define data carrier classes, making them a great match to define an entity class.\n          \n          \n            \n            Kotlin data classes are a very convenient way of defining data carrier classes, making them a great match to define an entity class.", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372904015", "createdAt": "2020-01-30T11:47:08Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -528,7 +529,41 @@ you need to provide the value by yourself.\n ====\n \n `ObjectId` can be difficult to use if you want to expose its value in your REST service.\n-So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+\n+== Working with Kotlin Data classes\n+\n+Kotlin data classes are very convenient way to define data carrier classes, making them a great match to define an entity class.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "668a580fa975de11eaec4cd34a597e3ac6835d9b"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTY4NTcxOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0NzoyM1rOFjoQvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0NzoyM1rOFjoQvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwNDEyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked at nullable,\n          \n          \n            \n            But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked as nullable,", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372904124", "createdAt": "2020-01-30T11:47:23Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -528,7 +529,41 @@ you need to provide the value by yourself.\n ====\n \n `ObjectId` can be difficult to use if you want to expose its value in your REST service.\n-So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+\n+== Working with Kotlin Data classes\n+\n+Kotlin data classes are very convenient way to define data carrier classes, making them a great match to define an entity class.\n+\n+But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked at nullable,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "668a580fa975de11eaec4cd34a597e3ac6835d9b"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTY4NzYxOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0ODowNlrOFjoR7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0ODowNlrOFjoR7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwNDQzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            MongoDB with Panache uses the PojoCodec, this MongoDB codec mandates the presence of an empty (no parameter) constructor.\n          \n          \n            \n            MongoDB with Panache uses the `PojoCodec`, a MongoDB codec which mandates the presence of a parameterless constructor.", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372904430", "createdAt": "2020-01-30T11:48:06Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -528,7 +529,41 @@ you need to provide the value by yourself.\n ====\n \n `ObjectId` can be difficult to use if you want to expose its value in your REST service.\n-So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+\n+== Working with Kotlin Data classes\n+\n+Kotlin data classes are very convenient way to define data carrier classes, making them a great match to define an entity class.\n+\n+But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked at nullable,\n+and the generated constructor needs to have as parameters all the fields of the data class.\n+\n+MongoDB with Panache uses the PojoCodec, this MongoDB codec mandates the presence of an empty (no parameter) constructor.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "668a580fa975de11eaec4cd34a597e3ac6835d9b"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTY4ODQxOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0ODoyNFrOFjoSaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0ODoyNFrOFjoSaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwNDU1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Therefore, if you want to use a data class as an entity class, a way is needed to make Kotlin generate an empty constructor.\n          \n          \n            \n            Therefore, if you want to use a data class as an entity class, you need a way to make Kotlin generate an empty constructor.", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372904552", "createdAt": "2020-01-30T11:48:24Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -528,7 +529,41 @@ you need to provide the value by yourself.\n ====\n \n `ObjectId` can be difficult to use if you want to expose its value in your REST service.\n-So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+\n+== Working with Kotlin Data classes\n+\n+Kotlin data classes are very convenient way to define data carrier classes, making them a great match to define an entity class.\n+\n+But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked at nullable,\n+and the generated constructor needs to have as parameters all the fields of the data class.\n+\n+MongoDB with Panache uses the PojoCodec, this MongoDB codec mandates the presence of an empty (no parameter) constructor.\n+\n+Therefore, if you want to use a data class as an entity class, a way is needed to make Kotlin generate an empty constructor.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "668a580fa975de11eaec4cd34a597e3ac6835d9b"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTY4ODk4OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0ODozM1rOFjoSuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0ODozM1rOFjoSuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwNDYzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To do so, you need to provide default values for all fields of your classes.\n          \n          \n            \n            To do so, you need to provide default values for all the fields of your classes.", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372904632", "createdAt": "2020-01-30T11:48:33Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -528,7 +529,41 @@ you need to provide the value by yourself.\n ====\n \n `ObjectId` can be difficult to use if you want to expose its value in your REST service.\n-So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+\n+== Working with Kotlin Data classes\n+\n+Kotlin data classes are very convenient way to define data carrier classes, making them a great match to define an entity class.\n+\n+But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked at nullable,\n+and the generated constructor needs to have as parameters all the fields of the data class.\n+\n+MongoDB with Panache uses the PojoCodec, this MongoDB codec mandates the presence of an empty (no parameter) constructor.\n+\n+Therefore, if you want to use a data class as an entity class, a way is needed to make Kotlin generate an empty constructor.\n+To do so, you need to provide default values for all fields of your classes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "668a580fa975de11eaec4cd34a597e3ac6835d9b"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTY4OTMzOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0ODo0M1rOFjoS8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0ODo0M1rOFjoS8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwNDY5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The following sentence from the Kotlin documentation explain this:\n          \n          \n            \n            The following sentence from the Kotlin documentation explains it:", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372904691", "createdAt": "2020-01-30T11:48:43Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -528,7 +529,41 @@ you need to provide the value by yourself.\n ====\n \n `ObjectId` can be difficult to use if you want to expose its value in your REST service.\n-So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+\n+== Working with Kotlin Data classes\n+\n+Kotlin data classes are very convenient way to define data carrier classes, making them a great match to define an entity class.\n+\n+But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked at nullable,\n+and the generated constructor needs to have as parameters all the fields of the data class.\n+\n+MongoDB with Panache uses the PojoCodec, this MongoDB codec mandates the presence of an empty (no parameter) constructor.\n+\n+Therefore, if you want to use a data class as an entity class, a way is needed to make Kotlin generate an empty constructor.\n+To do so, you need to provide default values for all fields of your classes.\n+The following sentence from the Kotlin documentation explain this:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "668a580fa975de11eaec4cd34a597e3ac6835d9b"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTY5MTExOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0OToyM1rOFjoT9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo0OToyM1rOFjoT9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwNDk0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If for whatever reason the aforementioned solution is deemed unacceptable, there are alternatives\n          \n          \n            \n            If for whatever reason, the aforementioned solution is deemed unacceptable, there are alternatives.", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372904948", "createdAt": "2020-01-30T11:49:23Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -528,7 +529,41 @@ you need to provide the value by yourself.\n ====\n \n `ObjectId` can be difficult to use if you want to expose its value in your REST service.\n-So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+\n+== Working with Kotlin Data classes\n+\n+Kotlin data classes are very convenient way to define data carrier classes, making them a great match to define an entity class.\n+\n+But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked at nullable,\n+and the generated constructor needs to have as parameters all the fields of the data class.\n+\n+MongoDB with Panache uses the PojoCodec, this MongoDB codec mandates the presence of an empty (no parameter) constructor.\n+\n+Therefore, if you want to use a data class as an entity class, a way is needed to make Kotlin generate an empty constructor.\n+To do so, you need to provide default values for all fields of your classes.\n+The following sentence from the Kotlin documentation explain this:\n+\n+__On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified (see Constructors).__\n+\n+If for whatever reason the aforementioned solution is deemed unacceptable, there are alternatives", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "668a580fa975de11eaec4cd34a597e3ac6835d9b"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTY5MjkxOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo1MDoxM1rOFjoVEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo1MDoxM1rOFjoVEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwNTIzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Firstly, you can create a BSON Codec which will be automatically registered by Quarkus and will be used instead of the PojoCodec.\n          \n          \n            \n            First, you can create a BSON Codec which will be automatically registered by Quarkus and will be used instead of the `PojoCodec`.", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372905232", "createdAt": "2020-01-30T11:50:13Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -528,7 +529,41 @@ you need to provide the value by yourself.\n ====\n \n `ObjectId` can be difficult to use if you want to expose its value in your REST service.\n-So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+\n+== Working with Kotlin Data classes\n+\n+Kotlin data classes are very convenient way to define data carrier classes, making them a great match to define an entity class.\n+\n+But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked at nullable,\n+and the generated constructor needs to have as parameters all the fields of the data class.\n+\n+MongoDB with Panache uses the PojoCodec, this MongoDB codec mandates the presence of an empty (no parameter) constructor.\n+\n+Therefore, if you want to use a data class as an entity class, a way is needed to make Kotlin generate an empty constructor.\n+To do so, you need to provide default values for all fields of your classes.\n+The following sentence from the Kotlin documentation explain this:\n+\n+__On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified (see Constructors).__\n+\n+If for whatever reason the aforementioned solution is deemed unacceptable, there are alternatives\n+\n+Firstly, you can create a BSON Codec which will be automatically registered by Quarkus and will be used instead of the PojoCodec.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "668a580fa975de11eaec4cd34a597e3ac6835d9b"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTY5MzQ2OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo1MDoyNlrOFjoVYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo1MDoyNlrOFjoVYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwNTMxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            See this part of the documentation: link:mongodb#simplifying-mongodb-client-usage-using-bson-codec[Using BSON codec]\n          \n          \n            \n            See this part of the documentation: link:mongodb#simplifying-mongodb-client-usage-using-bson-codec[Using BSON codec].", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372905315", "createdAt": "2020-01-30T11:50:26Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -528,7 +529,41 @@ you need to provide the value by yourself.\n ====\n \n `ObjectId` can be difficult to use if you want to expose its value in your REST service.\n-So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+\n+== Working with Kotlin Data classes\n+\n+Kotlin data classes are very convenient way to define data carrier classes, making them a great match to define an entity class.\n+\n+But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked at nullable,\n+and the generated constructor needs to have as parameters all the fields of the data class.\n+\n+MongoDB with Panache uses the PojoCodec, this MongoDB codec mandates the presence of an empty (no parameter) constructor.\n+\n+Therefore, if you want to use a data class as an entity class, a way is needed to make Kotlin generate an empty constructor.\n+To do so, you need to provide default values for all fields of your classes.\n+The following sentence from the Kotlin documentation explain this:\n+\n+__On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified (see Constructors).__\n+\n+If for whatever reason the aforementioned solution is deemed unacceptable, there are alternatives\n+\n+Firstly, you can create a BSON Codec which will be automatically registered by Quarkus and will be used instead of the PojoCodec.\n+See this part of the documentation: link:mongodb#simplifying-mongodb-client-usage-using-bson-codec[Using BSON codec]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "668a580fa975de11eaec4cd34a597e3ac6835d9b"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTY5NDc2OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo1MDo1NFrOFjoWHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo1MDo1NFrOFjoWHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwNTUwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Secondly, you can use the `@BsonCreator` annotation to tell the PojoCodec to use the Kotlin data class default constructor,\n          \n          \n            \n            Another option is to use the `@BsonCreator` annotation to tell the `PojoCodec` to use the Kotlin data class default constructor,", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372905503", "createdAt": "2020-01-30T11:50:54Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -528,7 +529,41 @@ you need to provide the value by yourself.\n ====\n \n `ObjectId` can be difficult to use if you want to expose its value in your REST service.\n-So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+\n+== Working with Kotlin Data classes\n+\n+Kotlin data classes are very convenient way to define data carrier classes, making them a great match to define an entity class.\n+\n+But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked at nullable,\n+and the generated constructor needs to have as parameters all the fields of the data class.\n+\n+MongoDB with Panache uses the PojoCodec, this MongoDB codec mandates the presence of an empty (no parameter) constructor.\n+\n+Therefore, if you want to use a data class as an entity class, a way is needed to make Kotlin generate an empty constructor.\n+To do so, you need to provide default values for all fields of your classes.\n+The following sentence from the Kotlin documentation explain this:\n+\n+__On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified (see Constructors).__\n+\n+If for whatever reason the aforementioned solution is deemed unacceptable, there are alternatives\n+\n+Firstly, you can create a BSON Codec which will be automatically registered by Quarkus and will be used instead of the PojoCodec.\n+See this part of the documentation: link:mongodb#simplifying-mongodb-client-usage-using-bson-codec[Using BSON codec]\n+\n+Secondly, you can use the `@BsonCreator` annotation to tell the PojoCodec to use the Kotlin data class default constructor,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "668a580fa975de11eaec4cd34a597e3ac6835d9b"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTY5NTU3OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo1MToxM1rOFjoWng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo1MToxM1rOFjoWng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwNTYzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            in this case all constructor parameters have  to be annotated with `@BsonProperty`: link:{mongodb-doc-root-url}/bson/pojos/#supporting-pojos-without-no-args-constructors[Supporting pojos without no args constructor]\n          \n          \n            \n            in this case all constructor parameters have to be annotated with `@BsonProperty`: see link:{mongodb-doc-root-url}/bson/pojos/#supporting-pojos-without-no-args-constructors[Supporting pojos without no args constructor].", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372905630", "createdAt": "2020-01-30T11:51:13Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -528,7 +529,41 @@ you need to provide the value by yourself.\n ====\n \n `ObjectId` can be difficult to use if you want to expose its value in your REST service.\n-So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+\n+== Working with Kotlin Data classes\n+\n+Kotlin data classes are very convenient way to define data carrier classes, making them a great match to define an entity class.\n+\n+But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked at nullable,\n+and the generated constructor needs to have as parameters all the fields of the data class.\n+\n+MongoDB with Panache uses the PojoCodec, this MongoDB codec mandates the presence of an empty (no parameter) constructor.\n+\n+Therefore, if you want to use a data class as an entity class, a way is needed to make Kotlin generate an empty constructor.\n+To do so, you need to provide default values for all fields of your classes.\n+The following sentence from the Kotlin documentation explain this:\n+\n+__On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified (see Constructors).__\n+\n+If for whatever reason the aforementioned solution is deemed unacceptable, there are alternatives\n+\n+Firstly, you can create a BSON Codec which will be automatically registered by Quarkus and will be used instead of the PojoCodec.\n+See this part of the documentation: link:mongodb#simplifying-mongodb-client-usage-using-bson-codec[Using BSON codec]\n+\n+Secondly, you can use the `@BsonCreator` annotation to tell the PojoCodec to use the Kotlin data class default constructor,\n+in this case all constructor parameters have  to be annotated with `@BsonProperty`: link:{mongodb-doc-root-url}/bson/pojos/#supporting-pojos-without-no-args-constructors[Supporting pojos without no args constructor]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "668a580fa975de11eaec4cd34a597e3ac6835d9b"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTY5NzUyOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo1MjowMFrOFjoX1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNDoyNDozNFrOFjsu2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwNTk0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            See an example of the Person class as a Kotlin data class:\n          \n          \n            \n            An example of a `Person` class defined as a Kotlin data class would look like:\n          \n      \n    \n    \n  \n\n@loicmathieu sorry I missed the suggestion button on this one :).", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372905941", "createdAt": "2020-01-30T11:52:00Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -528,7 +529,41 @@ you need to provide the value by yourself.\n ====\n \n `ObjectId` can be difficult to use if you want to expose its value in your REST service.\n-So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+\n+== Working with Kotlin Data classes\n+\n+Kotlin data classes are very convenient way to define data carrier classes, making them a great match to define an entity class.\n+\n+But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked at nullable,\n+and the generated constructor needs to have as parameters all the fields of the data class.\n+\n+MongoDB with Panache uses the PojoCodec, this MongoDB codec mandates the presence of an empty (no parameter) constructor.\n+\n+Therefore, if you want to use a data class as an entity class, a way is needed to make Kotlin generate an empty constructor.\n+To do so, you need to provide default values for all fields of your classes.\n+The following sentence from the Kotlin documentation explain this:\n+\n+__On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified (see Constructors).__\n+\n+If for whatever reason the aforementioned solution is deemed unacceptable, there are alternatives\n+\n+Firstly, you can create a BSON Codec which will be automatically registered by Quarkus and will be used instead of the PojoCodec.\n+See this part of the documentation: link:mongodb#simplifying-mongodb-client-usage-using-bson-codec[Using BSON codec]\n+\n+Secondly, you can use the `@BsonCreator` annotation to tell the PojoCodec to use the Kotlin data class default constructor,\n+in this case all constructor parameters have  to be annotated with `@BsonProperty`: link:{mongodb-doc-root-url}/bson/pojos/#supporting-pojos-without-no-args-constructors[Supporting pojos without no args constructor]\n+\n+See an example of the Person class as a Kotlin data class:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "668a580fa975de11eaec4cd34a597e3ac6835d9b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk3NzM3MQ==", "bodyText": "Thanks, it's easier to me :)", "url": "https://github.com/quarkusio/quarkus/pull/6877#discussion_r372977371", "createdAt": "2020-01-30T14:24:34Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -528,7 +529,41 @@ you need to provide the value by yourself.\n ====\n \n `ObjectId` can be difficult to use if you want to expose its value in your REST service.\n-So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+So we created JSON-B and Jackson providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on one of the RESTEasy with JSON-B or RESTEasy with Jackson extensions.\n+\n+== Working with Kotlin Data classes\n+\n+Kotlin data classes are very convenient way to define data carrier classes, making them a great match to define an entity class.\n+\n+But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked at nullable,\n+and the generated constructor needs to have as parameters all the fields of the data class.\n+\n+MongoDB with Panache uses the PojoCodec, this MongoDB codec mandates the presence of an empty (no parameter) constructor.\n+\n+Therefore, if you want to use a data class as an entity class, a way is needed to make Kotlin generate an empty constructor.\n+To do so, you need to provide default values for all fields of your classes.\n+The following sentence from the Kotlin documentation explain this:\n+\n+__On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified (see Constructors).__\n+\n+If for whatever reason the aforementioned solution is deemed unacceptable, there are alternatives\n+\n+Firstly, you can create a BSON Codec which will be automatically registered by Quarkus and will be used instead of the PojoCodec.\n+See this part of the documentation: link:mongodb#simplifying-mongodb-client-usage-using-bson-codec[Using BSON codec]\n+\n+Secondly, you can use the `@BsonCreator` annotation to tell the PojoCodec to use the Kotlin data class default constructor,\n+in this case all constructor parameters have  to be annotated with `@BsonProperty`: link:{mongodb-doc-root-url}/bson/pojos/#supporting-pojos-without-no-args-constructors[Supporting pojos without no args constructor]\n+\n+See an example of the Person class as a Kotlin data class:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwNTk0MQ=="}, "originalCommit": {"oid": "668a580fa975de11eaec4cd34a597e3ac6835d9b"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1048, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}