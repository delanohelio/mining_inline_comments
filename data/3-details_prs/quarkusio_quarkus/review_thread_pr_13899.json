{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMjY4NjM3", "number": 13899, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNjowMjo0MVrOFHPyKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzozMjoyMFrOFHR2UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTQyOTUyOnYy", "diffSide": "RIGHT", "path": "extensions/cache/runtime/src/main/java/io/quarkus/cache/runtime/devconsole/CacheDevConsoleRecorder.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNjowMjo0MVrOIIo7wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzozMzoxMlrOIIsH6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkzMDE3Ng==", "bodyText": "If this method is the only reason why CacheManagerImpl.getAllCaches was added (but I suspect there's another reason), then I'd suggest to iterate over the caches names using CacheManager.getCacheNames and then retrieve the desired cache using CacheManager.getCache.", "url": "https://github.com/quarkusio/quarkus/pull/13899#discussion_r545930176", "createdAt": "2020-12-18T16:02:41Z", "author": {"login": "gwenneg"}, "path": "extensions/cache/runtime/src/main/java/io/quarkus/cache/runtime/devconsole/CacheDevConsoleRecorder.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package io.quarkus.cache.runtime.devconsole;\n+\n+import io.quarkus.cache.runtime.CaffeineCacheSupplier;\n+import io.quarkus.cache.runtime.caffeine.CaffeineCache;\n+import io.quarkus.devconsole.runtime.spi.DevConsolePostHandler;\n+import io.quarkus.devconsole.runtime.spi.FlashScopeUtil.FlashMessageStatus;\n+import io.quarkus.runtime.annotations.Recorder;\n+import io.vertx.core.Handler;\n+import io.vertx.core.MultiMap;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@Recorder\n+public class CacheDevConsoleRecorder {\n+\n+    public Handler<RoutingContext> clearCacheHandler() {\n+        return new DevConsolePostHandler() {\n+            @Override\n+            protected void handlePost(RoutingContext event, MultiMap form) throws Exception {\n+                String cacheName = form.get(\"name\");\n+                for (CaffeineCache cache : CaffeineCacheSupplier.allCaches()) {\n+                    if (cache.getName().equals(cacheName)) {\n+                        cache.invalidateAll();\n+                        // redirect to the same page so we can make sure we see the updated results\n+                        flashMessage(event, \"Cache for \" + cacheName + \" cleared\");\n+                        return;\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5e6d22c5f8580279b814c9df75393d6c5af92aa"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkzNDYxMg==", "bodyText": "Probably, yes.", "url": "https://github.com/quarkusio/quarkus/pull/13899#discussion_r545934612", "createdAt": "2020-12-18T16:10:22Z", "author": {"login": "FroMage"}, "path": "extensions/cache/runtime/src/main/java/io/quarkus/cache/runtime/devconsole/CacheDevConsoleRecorder.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package io.quarkus.cache.runtime.devconsole;\n+\n+import io.quarkus.cache.runtime.CaffeineCacheSupplier;\n+import io.quarkus.cache.runtime.caffeine.CaffeineCache;\n+import io.quarkus.devconsole.runtime.spi.DevConsolePostHandler;\n+import io.quarkus.devconsole.runtime.spi.FlashScopeUtil.FlashMessageStatus;\n+import io.quarkus.runtime.annotations.Recorder;\n+import io.vertx.core.Handler;\n+import io.vertx.core.MultiMap;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@Recorder\n+public class CacheDevConsoleRecorder {\n+\n+    public Handler<RoutingContext> clearCacheHandler() {\n+        return new DevConsolePostHandler() {\n+            @Override\n+            protected void handlePost(RoutingContext event, MultiMap form) throws Exception {\n+                String cacheName = form.get(\"name\");\n+                for (CaffeineCache cache : CaffeineCacheSupplier.allCaches()) {\n+                    if (cache.getName().equals(cacheName)) {\n+                        cache.invalidateAll();\n+                        // redirect to the same page so we can make sure we see the updated results\n+                        flashMessage(event, \"Cache for \" + cacheName + \" cleared\");\n+                        return;\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkzMDE3Ng=="}, "originalCommit": {"oid": "d5e6d22c5f8580279b814c9df75393d6c5af92aa"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkzNzI0Mg==", "bodyText": "Yeah", "url": "https://github.com/quarkusio/quarkus/pull/13899#discussion_r545937242", "createdAt": "2020-12-18T16:14:45Z", "author": {"login": "geoand"}, "path": "extensions/cache/runtime/src/main/java/io/quarkus/cache/runtime/devconsole/CacheDevConsoleRecorder.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package io.quarkus.cache.runtime.devconsole;\n+\n+import io.quarkus.cache.runtime.CaffeineCacheSupplier;\n+import io.quarkus.cache.runtime.caffeine.CaffeineCache;\n+import io.quarkus.devconsole.runtime.spi.DevConsolePostHandler;\n+import io.quarkus.devconsole.runtime.spi.FlashScopeUtil.FlashMessageStatus;\n+import io.quarkus.runtime.annotations.Recorder;\n+import io.vertx.core.Handler;\n+import io.vertx.core.MultiMap;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@Recorder\n+public class CacheDevConsoleRecorder {\n+\n+    public Handler<RoutingContext> clearCacheHandler() {\n+        return new DevConsolePostHandler() {\n+            @Override\n+            protected void handlePost(RoutingContext event, MultiMap form) throws Exception {\n+                String cacheName = form.get(\"name\");\n+                for (CaffeineCache cache : CaffeineCacheSupplier.allCaches()) {\n+                    if (cache.getName().equals(cacheName)) {\n+                        cache.invalidateAll();\n+                        // redirect to the same page so we can make sure we see the updated results\n+                        flashMessage(event, \"Cache for \" + cacheName + \" cleared\");\n+                        return;\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkzMDE3Ng=="}, "originalCommit": {"oid": "d5e6d22c5f8580279b814c9df75393d6c5af92aa"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk1NTc5OA==", "bodyText": "Rewrote this, is it better?", "url": "https://github.com/quarkusio/quarkus/pull/13899#discussion_r545955798", "createdAt": "2020-12-18T16:45:49Z", "author": {"login": "FroMage"}, "path": "extensions/cache/runtime/src/main/java/io/quarkus/cache/runtime/devconsole/CacheDevConsoleRecorder.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package io.quarkus.cache.runtime.devconsole;\n+\n+import io.quarkus.cache.runtime.CaffeineCacheSupplier;\n+import io.quarkus.cache.runtime.caffeine.CaffeineCache;\n+import io.quarkus.devconsole.runtime.spi.DevConsolePostHandler;\n+import io.quarkus.devconsole.runtime.spi.FlashScopeUtil.FlashMessageStatus;\n+import io.quarkus.runtime.annotations.Recorder;\n+import io.vertx.core.Handler;\n+import io.vertx.core.MultiMap;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@Recorder\n+public class CacheDevConsoleRecorder {\n+\n+    public Handler<RoutingContext> clearCacheHandler() {\n+        return new DevConsolePostHandler() {\n+            @Override\n+            protected void handlePost(RoutingContext event, MultiMap form) throws Exception {\n+                String cacheName = form.get(\"name\");\n+                for (CaffeineCache cache : CaffeineCacheSupplier.allCaches()) {\n+                    if (cache.getName().equals(cacheName)) {\n+                        cache.invalidateAll();\n+                        // redirect to the same page so we can make sure we see the updated results\n+                        flashMessage(event, \"Cache for \" + cacheName + \" cleared\");\n+                        return;\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkzMDE3Ng=="}, "originalCommit": {"oid": "d5e6d22c5f8580279b814c9df75393d6c5af92aa"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk4MjQ0MQ==", "bodyText": "Yes, thanks!", "url": "https://github.com/quarkusio/quarkus/pull/13899#discussion_r545982441", "createdAt": "2020-12-18T17:33:12Z", "author": {"login": "gwenneg"}, "path": "extensions/cache/runtime/src/main/java/io/quarkus/cache/runtime/devconsole/CacheDevConsoleRecorder.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package io.quarkus.cache.runtime.devconsole;\n+\n+import io.quarkus.cache.runtime.CaffeineCacheSupplier;\n+import io.quarkus.cache.runtime.caffeine.CaffeineCache;\n+import io.quarkus.devconsole.runtime.spi.DevConsolePostHandler;\n+import io.quarkus.devconsole.runtime.spi.FlashScopeUtil.FlashMessageStatus;\n+import io.quarkus.runtime.annotations.Recorder;\n+import io.vertx.core.Handler;\n+import io.vertx.core.MultiMap;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@Recorder\n+public class CacheDevConsoleRecorder {\n+\n+    public Handler<RoutingContext> clearCacheHandler() {\n+        return new DevConsolePostHandler() {\n+            @Override\n+            protected void handlePost(RoutingContext event, MultiMap form) throws Exception {\n+                String cacheName = form.get(\"name\");\n+                for (CaffeineCache cache : CaffeineCacheSupplier.allCaches()) {\n+                    if (cache.getName().equals(cacheName)) {\n+                        cache.invalidateAll();\n+                        // redirect to the same page so we can make sure we see the updated results\n+                        flashMessage(event, \"Cache for \" + cacheName + \" cleared\");\n+                        return;\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkzMDE3Ng=="}, "originalCommit": {"oid": "d5e6d22c5f8580279b814c9df75393d6c5af92aa"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTc1MTkxOnYy", "diffSide": "RIGHT", "path": "extensions/cache/runtime/src/main/java/io/quarkus/cache/runtime/CaffeineCacheSupplier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzoyODoyOVrOIIr9WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwOTowMzoxNFrOIOPK2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk3OTczNg==", "bodyText": "You don't need to inject the impl anymore:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    CacheManagerImpl cacheManager = cacheManager();\n          \n          \n            \n                    CacheManager cacheManager = cacheManager();", "url": "https://github.com/quarkusio/quarkus/pull/13899#discussion_r545979736", "createdAt": "2020-12-18T17:28:29Z", "author": {"login": "gwenneg"}, "path": "extensions/cache/runtime/src/main/java/io/quarkus/cache/runtime/CaffeineCacheSupplier.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package io.quarkus.cache.runtime;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.cache.Cache;\n+import io.quarkus.cache.runtime.caffeine.CaffeineCache;\n+\n+public class CaffeineCacheSupplier implements Supplier<Collection<CaffeineCache>> {\n+\n+    @Override\n+    public List<CaffeineCache> get() {\n+        CacheManagerImpl cacheManager = cacheManager();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04682180ae08ff2c7fe6f4686ff3c4c419aa9065"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc5OTUxNQ==", "bodyText": "OK fixed.", "url": "https://github.com/quarkusio/quarkus/pull/13899#discussion_r551799515", "createdAt": "2021-01-05T09:03:14Z", "author": {"login": "FroMage"}, "path": "extensions/cache/runtime/src/main/java/io/quarkus/cache/runtime/CaffeineCacheSupplier.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package io.quarkus.cache.runtime;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.cache.Cache;\n+import io.quarkus.cache.runtime.caffeine.CaffeineCache;\n+\n+public class CaffeineCacheSupplier implements Supplier<Collection<CaffeineCache>> {\n+\n+    @Override\n+    public List<CaffeineCache> get() {\n+        CacheManagerImpl cacheManager = cacheManager();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk3OTczNg=="}, "originalCommit": {"oid": "04682180ae08ff2c7fe6f4686ff3c4c419aa9065"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTc2Nzg1OnYy", "diffSide": "RIGHT", "path": "extensions/cache/runtime/src/main/java/io/quarkus/cache/runtime/AbstractCache.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzozMjoyMFrOIIsGIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzozODowNFrOIIsS4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk4MTk4Ng==", "bodyText": "This isn't really necessary (the names collection could be sorted before retrieving the cache instances), but it doesn't hurt to have this method public so I'm fine with either.", "url": "https://github.com/quarkusio/quarkus/pull/13899#discussion_r545981986", "createdAt": "2020-12-18T17:32:20Z", "author": {"login": "gwenneg"}, "path": "extensions/cache/runtime/src/main/java/io/quarkus/cache/runtime/AbstractCache.java", "diffHunk": "@@ -11,7 +11,7 @@\n \n     private Object defaultKey;\n \n-    protected abstract String getName();\n+    public abstract String getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04682180ae08ff2c7fe6f4686ff3c4c419aa9065"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk4Mzc5Mw==", "bodyText": "It's used in the view.", "url": "https://github.com/quarkusio/quarkus/pull/13899#discussion_r545983793", "createdAt": "2020-12-18T17:35:38Z", "author": {"login": "FroMage"}, "path": "extensions/cache/runtime/src/main/java/io/quarkus/cache/runtime/AbstractCache.java", "diffHunk": "@@ -11,7 +11,7 @@\n \n     private Object defaultKey;\n \n-    protected abstract String getName();\n+    public abstract String getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk4MTk4Ng=="}, "originalCommit": {"oid": "04682180ae08ff2c7fe6f4686ff3c4c419aa9065"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk4NTI1MQ==", "bodyText": "Oh sorry, I missed that. Then it's perfectly fine :)", "url": "https://github.com/quarkusio/quarkus/pull/13899#discussion_r545985251", "createdAt": "2020-12-18T17:38:04Z", "author": {"login": "gwenneg"}, "path": "extensions/cache/runtime/src/main/java/io/quarkus/cache/runtime/AbstractCache.java", "diffHunk": "@@ -11,7 +11,7 @@\n \n     private Object defaultKey;\n \n-    protected abstract String getName();\n+    public abstract String getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk4MTk4Ng=="}, "originalCommit": {"oid": "04682180ae08ff2c7fe6f4686ff3c4c419aa9065"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4549, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}