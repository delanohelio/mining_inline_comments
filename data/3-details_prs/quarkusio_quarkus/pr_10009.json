{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NDg2MDI2", "number": 10009, "title": "Google Cloud Functions", "bodyText": "Support Google Cloud Function via standard HttpFunction, BackgroundFunction and RawBackgroundFunction implementation.", "createdAt": "2020-06-15T11:48:57Z", "url": "https://github.com/quarkusio/quarkus/pull/10009", "merged": true, "mergeCommit": {"oid": "4c272c4fca276261d01cbb5f6ee456bbcebc8a44"}, "closed": true, "closedAt": "2020-06-24T21:16:17Z", "author": {"login": "loicmathieu"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcrfrNqgBqjM0NDQxMjA2ODU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcugwClAFqTQzNzAxMjQ2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c4fab6b56191c818449d3d832cd50574a37de2d", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/0c4fab6b56191c818449d3d832cd50574a37de2d", "committedDate": "2020-06-15T11:47:33Z", "message": "Google Cloud Functions"}, "afterCommit": {"oid": "a25029b3acb68c3a9580a5548a733dfc36f50488", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/a25029b3acb68c3a9580a5548a733dfc36f50488", "committedDate": "2020-06-15T12:18:51Z", "message": "Google Cloud Functions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNjQ4MjM5", "url": "https://github.com/quarkusio/quarkus/pull/10009#pullrequestreview-430648239", "createdAt": "2020-06-15T13:34:35Z", "commit": {"oid": "a25029b3acb68c3a9580a5548a733dfc36f50488"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzozNDozNVrOGjyZDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzozNDozNVrOGjyZDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3ODk1OA==", "bodyText": "This could happen every request?  Creation of the reader is an expensive operation and should be moved to static initialization within a @recorder.  This will become more important if GCF ends up supporting a native binding.", "url": "https://github.com/quarkusio/quarkus/pull/10009#discussion_r440178958", "createdAt": "2020-06-15T13:34:35Z", "author": {"login": "patriot1burke"}, "path": "extensions/google-cloud-functions/runtime/src/main/java/io/quarkus/gcp/functions/QuarkusBackgroundFunction.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package io.quarkus.gcp.functions;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.functions.RawBackgroundFunction;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.runtime.Application;\n+\n+public final class QuarkusBackgroundFunction implements RawBackgroundFunction {\n+\n+    protected static final String deploymentStatus;\n+    protected static boolean started = false;\n+\n+    private static volatile BackgroundFunction delegate;\n+    private static volatile Class<?> parameterType;\n+    private static volatile RawBackgroundFunction rawDelegate;\n+\n+    static {\n+        StringWriter error = new StringWriter();\n+        PrintWriter errorWriter = new PrintWriter(error, true);\n+        if (Application.currentApplication() == null) { // were we already bootstrapped?  Needed for mock unit testing.\n+            ClassLoader currentCl = Thread.currentThread().getContextClassLoader();\n+            try {\n+                // For GCP functions, we need to set the TCCL to the QuarkusHttpFunction classloader then restore it.\n+                // Without this, we have a lot of classloading issues (ClassNotFoundException on existing classes)\n+                // during static init.\n+                Thread.currentThread().setContextClassLoader(QuarkusBackgroundFunction.class.getClassLoader());\n+                Class<?> appClass = Class.forName(\"io.quarkus.runner.ApplicationImpl\");\n+                String[] args = {};\n+                Application app = (Application) appClass.getConstructor().newInstance();\n+                app.start(args);\n+                errorWriter.println(\"Quarkus bootstrapped successfully.\");\n+                started = true;\n+            } catch (Exception ex) {\n+                errorWriter.println(\"Quarkus bootstrap failed.\");\n+                ex.printStackTrace(errorWriter);\n+            } finally {\n+                Thread.currentThread().setContextClassLoader(currentCl);\n+            }\n+        } else {\n+            errorWriter.println(\"Quarkus bootstrapped successfully.\");\n+            started = true;\n+        }\n+        deploymentStatus = error.toString();\n+    }\n+\n+    static void setDelegates(String selectedDelegate, String selectedRawDelegate) {\n+        if (selectedDelegate != null) {\n+            try {\n+                Class<?> clazz = Class.forName(selectedDelegate);\n+                for (Method method : clazz.getDeclaredMethods()) {\n+                    if (method.getName().equals(\"accept\")) {\n+                        // the first parameter of the accept method is the event, we need to register it's type to\n+                        // be able to deserialize to it to mimic what a BackgroundFunction does\n+                        if (method.getParameterTypes()[0] != Object.class) {// FIXME we have two accept methods !!!\n+                            parameterType = method.getParameterTypes()[0];\n+                        }\n+                    }\n+                }\n+                delegate = (BackgroundFunction) Arc.container().instance(clazz).get();\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+\n+        if (selectedRawDelegate != null) {\n+            try {\n+                Class<?> clazz = Class.forName(selectedRawDelegate);\n+                rawDelegate = (RawBackgroundFunction) Arc.container().instance(clazz).get();\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void accept(String event, Context context) throws Exception {\n+        if (!started) {\n+            throw new IOException(deploymentStatus);\n+        }\n+\n+        // TODO maybe we can check this at static init\n+        if ((delegate == null && rawDelegate == null) || (delegate != null && rawDelegate != null)) {\n+            throw new IOException(\"We didn't found any BackgroundFunction or RawBackgroundFunction to run \" +\n+                    \"(or there is multiple one and none selected inside your application.properties)\");\n+        }\n+\n+        if (rawDelegate != null) {\n+            rawDelegate.accept(event, context);\n+        } else {\n+            // TODO maybe use Gson as it's the library used by GCF\n+            ObjectMapper mapper = new ObjectMapper();\n+            Object eventObj = mapper.readValue(event, parameterType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a25029b3acb68c3a9580a5548a733dfc36f50488"}, "originalPosition": 100}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a25029b3acb68c3a9580a5548a733dfc36f50488", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/a25029b3acb68c3a9580a5548a733dfc36f50488", "committedDate": "2020-06-15T12:18:51Z", "message": "Google Cloud Functions"}, "afterCommit": {"oid": "2a8a1f4980e79a193525190b1303d0515e4779ff", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/2a8a1f4980e79a193525190b1303d0515e4779ff", "committedDate": "2020-06-18T17:31:04Z", "message": "Google Cloud Functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e0da4580326f0cfecfdcd41ed737f4072e74806", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/8e0da4580326f0cfecfdcd41ed737f4072e74806", "committedDate": "2020-06-24T12:42:19Z", "message": "Google Cloud Functions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2a8a1f4980e79a193525190b1303d0515e4779ff", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/2a8a1f4980e79a193525190b1303d0515e4779ff", "committedDate": "2020-06-18T17:31:04Z", "message": "Google Cloud Functions"}, "afterCommit": {"oid": "8e0da4580326f0cfecfdcd41ed737f4072e74806", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/8e0da4580326f0cfecfdcd41ed737f4072e74806", "committedDate": "2020-06-24T12:42:19Z", "message": "Google Cloud Functions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDEyNDY3", "url": "https://github.com/quarkusio/quarkus/pull/10009#pullrequestreview-437012467", "createdAt": "2020-06-24T21:16:02Z", "commit": {"oid": "8e0da4580326f0cfecfdcd41ed737f4072e74806"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4372, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}