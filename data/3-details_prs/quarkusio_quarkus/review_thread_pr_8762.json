{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NDIwMjA5", "number": 8762, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzoxNToxMFrOD1IYdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODo0OTowNlrOD1K7rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDM4NDU0OnYy", "diffSide": "RIGHT", "path": "extensions/kafka-client/runtime/src/main/java/io/quarkus/kafka/client/runtime/graal/ByteBufferUnmapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzoxNToxMFrOGKaPEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzozNDo0M1rOGKa8_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU2ODc4NQ==", "bodyText": "Should we add ByteBuffer in the reflection list. The cleaner method may be removed during the native compilation. The class returned by the \"cleaner\" method should also be registered.", "url": "https://github.com/quarkusio/quarkus/pull/8762#discussion_r413568785", "createdAt": "2020-04-23T07:15:10Z", "author": {"login": "cescoffier"}, "path": "extensions/kafka-client/runtime/src/main/java/io/quarkus/kafka/client/runtime/graal/ByteBufferUnmapper.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package io.quarkus.kafka.client.runtime.graal;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.nio.ByteBuffer;\n+\n+import org.apache.kafka.common.utils.ByteBufferUnmapper;\n+\n+import com.oracle.svm.core.annotate.Substitute;\n+import com.oracle.svm.core.annotate.TargetClass;\n+import com.oracle.svm.core.jdk.JDK8OrEarlier;\n+\n+@TargetClass(value = ByteBufferUnmapper.class, onlyWith = JDK8OrEarlier.class)\n+final class Target_org_apache_kafka_common_utils_ByteBufferUnmapper {\n+\n+    @Substitute\n+    public static void unmap(String resourceDescription, ByteBuffer buffer) throws IOException {\n+        if (!buffer.isDirect())\n+            throw new IllegalArgumentException(\"Unmapping only works with direct buffers\");\n+        try {\n+            Method cleanerMethod = buffer.getClass().getMethod(\"cleaner\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b117fbc38967fd3f35cb820be3e4ac73aa9f602"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU4MDU0Mw==", "bodyText": "Done", "url": "https://github.com/quarkusio/quarkus/pull/8762#discussion_r413580543", "createdAt": "2020-04-23T07:34:43Z", "author": {"login": "geoand"}, "path": "extensions/kafka-client/runtime/src/main/java/io/quarkus/kafka/client/runtime/graal/ByteBufferUnmapper.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package io.quarkus.kafka.client.runtime.graal;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.nio.ByteBuffer;\n+\n+import org.apache.kafka.common.utils.ByteBufferUnmapper;\n+\n+import com.oracle.svm.core.annotate.Substitute;\n+import com.oracle.svm.core.annotate.TargetClass;\n+import com.oracle.svm.core.jdk.JDK8OrEarlier;\n+\n+@TargetClass(value = ByteBufferUnmapper.class, onlyWith = JDK8OrEarlier.class)\n+final class Target_org_apache_kafka_common_utils_ByteBufferUnmapper {\n+\n+    @Substitute\n+    public static void unmap(String resourceDescription, ByteBuffer buffer) throws IOException {\n+        if (!buffer.isDirect())\n+            throw new IllegalArgumentException(\"Unmapping only works with direct buffers\");\n+        try {\n+            Method cleanerMethod = buffer.getClass().getMethod(\"cleaner\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU2ODc4NQ=="}, "originalCommit": {"oid": "2b117fbc38967fd3f35cb820be3e4ac73aa9f602"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDgwMjM3OnYy", "diffSide": "RIGHT", "path": "extensions/kafka-client/deployment/src/main/java/io/quarkus/kafka/client/deployment/KafkaProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODo0OTowNlrOGKeIDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODo1MToxMFrOGKeN2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYzMjUyNA==", "bodyText": "Wondering if that would fail on Java 11... The CI will let us now.", "url": "https://github.com/quarkusio/quarkus/pull/8762#discussion_r413632524", "createdAt": "2020-04-23T08:49:06Z", "author": {"login": "cescoffier"}, "path": "extensions/kafka-client/deployment/src/main/java/io/quarkus/kafka/client/deployment/KafkaProcessor.java", "diffHunk": "@@ -105,6 +105,10 @@ public void build(CombinedIndexBuildItem indexBuildItem, BuildProducer<Reflectiv\n         reflectiveClass.produce(new ReflectiveClassBuildItem(false, false, RangeAssignor.class.getName()));\n         reflectiveClass.produce(new ReflectiveClassBuildItem(false, false, RoundRobinAssignor.class.getName()));\n         reflectiveClass.produce(new ReflectiveClassBuildItem(false, false, StickyAssignor.class.getName()));\n+\n+        // classes needed to perform reflection on DirectByteBuffer - only really needed for Java 8\n+        reflectiveClass.produce(new ReflectiveClassBuildItem(true, false, \"java.nio.DirectByteBuffer\"));\n+        reflectiveClass.produce(new ReflectiveClassBuildItem(true, false, \"sun.misc.Cleaner\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f35a3a58cceaca401b12a729fac6c9447f8f684"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYzNDAwOA==", "bodyText": "It won't. I tried all combinations :)", "url": "https://github.com/quarkusio/quarkus/pull/8762#discussion_r413634008", "createdAt": "2020-04-23T08:51:10Z", "author": {"login": "geoand"}, "path": "extensions/kafka-client/deployment/src/main/java/io/quarkus/kafka/client/deployment/KafkaProcessor.java", "diffHunk": "@@ -105,6 +105,10 @@ public void build(CombinedIndexBuildItem indexBuildItem, BuildProducer<Reflectiv\n         reflectiveClass.produce(new ReflectiveClassBuildItem(false, false, RangeAssignor.class.getName()));\n         reflectiveClass.produce(new ReflectiveClassBuildItem(false, false, RoundRobinAssignor.class.getName()));\n         reflectiveClass.produce(new ReflectiveClassBuildItem(false, false, StickyAssignor.class.getName()));\n+\n+        // classes needed to perform reflection on DirectByteBuffer - only really needed for Java 8\n+        reflectiveClass.produce(new ReflectiveClassBuildItem(true, false, \"java.nio.DirectByteBuffer\"));\n+        reflectiveClass.produce(new ReflectiveClassBuildItem(true, false, \"sun.misc.Cleaner\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYzMjUyNA=="}, "originalCommit": {"oid": "2f35a3a58cceaca401b12a729fac6c9447f8f684"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3415, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}