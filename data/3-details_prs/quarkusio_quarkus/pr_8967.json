{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwOTg1MTkw", "number": 8967, "title": "Quarkus Microprofile GraphQL documentation", "bodyText": "Signed-off-by: Cem Nura cem.nura@gmail.com", "createdAt": "2020-04-29T22:23:23Z", "url": "https://github.com/quarkusio/quarkus/pull/8967", "merged": true, "mergeCommit": {"oid": "031dfbdaee8114e58184ed14b002f9bde7cf5f47"}, "closed": true, "closedAt": "2020-05-26T15:18:53Z", "author": {"login": "cemnura"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcdz-QtgBqjMyOTc5NzU1MjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclGQh_AFqTQxODQwNjA1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cea24736d9751e4b1a56b3ceb0ccae9389cfc9d5", "author": {"user": {"login": "cemnura", "name": "Cem Nura"}}, "url": "https://github.com/quarkusio/quarkus/commit/cea24736d9751e4b1a56b3ceb0ccae9389cfc9d5", "committedDate": "2020-04-29T22:19:44Z", "message": "WIP\n\nSigned-off-by: Cem Nura <cem.nura@gmail.com>"}, "afterCommit": {"oid": "9d189945afc5797783fa801b3f5d1b4808c012fe", "author": {"user": {"login": "cemnura", "name": "Cem Nura"}}, "url": "https://github.com/quarkusio/quarkus/commit/9d189945afc5797783fa801b3f5d1b4808c012fe", "committedDate": "2020-05-04T00:02:40Z", "message": "WIP\n\nSigned-off-by: Cem Nura <cem.nura@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MjQ2MjAy", "url": "https://github.com/quarkusio/quarkus/pull/8967#pullrequestreview-407246202", "createdAt": "2020-05-07T08:15:42Z", "commit": {"oid": "9d189945afc5797783fa801b3f5d1b4808c012fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoxNTo0MlrOGRzdag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoxNTo0MlrOGRzdag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMyMjA5MA==", "bodyText": "You might need getters and setters. I never tested public fields, but it might work.", "url": "https://github.com/quarkusio/quarkus/pull/8967#discussion_r421322090", "createdAt": "2020-05-07T08:15:42Z", "author": {"login": "phillip-kruger"}, "path": "docs/src/main/asciidoc/microprofile-graphql.adoc", "diffHunk": "@@ -0,0 +1,416 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - GraphQL\n+\n+include::./attributes.adoc[]\n+\n+This guide demonstrates how your Quarkus application can utilize the **MicroProfile\n+GraphQL** specification through the SmallRye GraphQL extension.\n+\n+As the https://www.graphql.org/[GraphQL] specification website states\n+\n+[quote,]\n+GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data.\n+GraphQL provides a complete and understandable description of the data in your API,\n+gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time,\n+and enables powerful developer tools.\n+\n+**GraphQL** was originally developed by **Facebook** in 2012 and has been\n+a open standard since 2015.\n+\n+GraphQL is not a replacement for REST API specification but merely a\n+alternative. Unlike REST GraphQL API's have a ability to benefit the client by:\n+\n+Preventing Over and Underfetching::\n+    REST are server-driven fixed data responses that can not be determined by\n+    the client. Although the client does not require all the fields the client\n+    must retrieve all the data hence `Overfetching`. A client may also require\n+    multiple REST API calls according to the first call (HATEOAS) to retrieve\n+    all the data that is required thereby `Unfetching`.\n+\n+API Evolution::\n+    Since GraphQL API's returns data that are requested by the client adding additional\n+    fields and capabilities to existing API will not create breaking changes to existing\n+    clients.\n+\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+\n+== Architecture\n+\n+In this guide, we build a simple GraphQL application that exposes a GraphQL API\n+at `/graphql`.\n+\n+This example was inspired by a popular graphQL API\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `microprofile-graphql-quickstart` {quickstarts-tree-url}/microprofile-graphql-quickstart[directory].\n+\n+== Creating the Maven Project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source, subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=microprofile-graphql-quickstart \\\n+    -DclassName=\"org.acme.microprofile.graphql.FilmResource\" \\\n+    -Dextensions=\"smallrye-graphql\"\n+cd microprofile-graphql-quickstart\n+----\n+\n+This command generates a Maven project, importing the `smallrye-graphql` extension which is an implementation of the MicroProfile GraphQL specification used in Quarkus.\n+\n+== Preparing an Application: GraphQL API\n+\n+In this section we will start creating the GraphQL API\n+\n+First, create a the following entities representing a hero from a galaxy far far away:\n+\n+[source,java]\n+----\n+package org.acme.microprofile.graphql;\n+\n+public class Film {\n+    public String title;\n+    public String episodeID;\n+    public String openingCrawl;\n+    public String director;\n+    public String producers;\n+    public LocalDate releaseDate;\n+}\n+\n+public class Hero {\n+\n+    public String name;\n+    public Double height;\n+    public Integer mass;\n+    public Boolean isDarkSide;\n+    public LightSaber lightSaber;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d189945afc5797783fa801b3f5d1b4808c012fe"}, "originalPosition": 106}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MjQ3NjUy", "url": "https://github.com/quarkusio/quarkus/pull/8967#pullrequestreview-407247652", "createdAt": "2020-05-07T08:17:43Z", "commit": {"oid": "9d189945afc5797783fa801b3f5d1b4808c012fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoxNzo0M1rOGRzh3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoxNzo0M1rOGRzh3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMyMzIyOQ==", "bodyText": "You can maybe mention that in dev and test (and by configuration, even prod) Graphiql (UI) will be available in http://localhost:8080/graphql-ui", "url": "https://github.com/quarkusio/quarkus/pull/8967#discussion_r421323229", "createdAt": "2020-05-07T08:17:43Z", "author": {"login": "phillip-kruger"}, "path": "docs/src/main/asciidoc/microprofile-graphql.adoc", "diffHunk": "@@ -0,0 +1,416 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - GraphQL\n+\n+include::./attributes.adoc[]\n+\n+This guide demonstrates how your Quarkus application can utilize the **MicroProfile\n+GraphQL** specification through the SmallRye GraphQL extension.\n+\n+As the https://www.graphql.org/[GraphQL] specification website states\n+\n+[quote,]\n+GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data.\n+GraphQL provides a complete and understandable description of the data in your API,\n+gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time,\n+and enables powerful developer tools.\n+\n+**GraphQL** was originally developed by **Facebook** in 2012 and has been\n+a open standard since 2015.\n+\n+GraphQL is not a replacement for REST API specification but merely a\n+alternative. Unlike REST GraphQL API's have a ability to benefit the client by:\n+\n+Preventing Over and Underfetching::\n+    REST are server-driven fixed data responses that can not be determined by\n+    the client. Although the client does not require all the fields the client\n+    must retrieve all the data hence `Overfetching`. A client may also require\n+    multiple REST API calls according to the first call (HATEOAS) to retrieve\n+    all the data that is required thereby `Unfetching`.\n+\n+API Evolution::\n+    Since GraphQL API's returns data that are requested by the client adding additional\n+    fields and capabilities to existing API will not create breaking changes to existing\n+    clients.\n+\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+\n+== Architecture\n+\n+In this guide, we build a simple GraphQL application that exposes a GraphQL API\n+at `/graphql`.\n+\n+This example was inspired by a popular graphQL API\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `microprofile-graphql-quickstart` {quickstarts-tree-url}/microprofile-graphql-quickstart[directory].\n+\n+== Creating the Maven Project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source, subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=microprofile-graphql-quickstart \\\n+    -DclassName=\"org.acme.microprofile.graphql.FilmResource\" \\\n+    -Dextensions=\"smallrye-graphql\"\n+cd microprofile-graphql-quickstart\n+----\n+\n+This command generates a Maven project, importing the `smallrye-graphql` extension which is an implementation of the MicroProfile GraphQL specification used in Quarkus.\n+\n+== Preparing an Application: GraphQL API\n+\n+In this section we will start creating the GraphQL API\n+\n+First, create a the following entities representing a hero from a galaxy far far away:\n+\n+[source,java]\n+----\n+package org.acme.microprofile.graphql;\n+\n+public class Film {\n+    public String title;\n+    public String episodeID;\n+    public String openingCrawl;\n+    public String director;\n+    public String producers;\n+    public LocalDate releaseDate;\n+}\n+\n+public class Hero {\n+\n+    public String name;\n+    public Double height;\n+    public Integer mass;\n+    public Boolean isDarkSide;\n+    public LightSaber lightSaber;\n+\n+}\n+\n+enum LightSaber {\n+    RED, BLUE, GREEN\n+}\n+----\n+\n+The classes we have just created describes the GraphQL schema which is a\n+set of possible data (objects, fields, relationships) that a client can access.\n+\n+Let's continue with an example CDI bean, that would work as a repository.\n+\n+[source,java]\n+\n+----\n+public class GalaxyService {\n+    //..\n+}\n+----\n+\n+Now lets use create our first *Graphql* API:\n+\n+Edit the `org.acme.microprofile.graphql.FilmResource` class as follows:\n+\n+[source,java]\n+----\n+@GraphQLApi // <1>\n+public class FilmResource {\n+\n+    @Inject\n+    GalaxyService service;\n+\n+    @Query(\"allFilms\") // <2>\n+    @Description(\"Get all Films from a galaxy far far away\") // <3>\n+    public List<Film> getAllFilms() {\n+        return service.getAllFilms();\n+    }\n+}\n+----\n+\n+<1> `@GraphQLApi` annotation indicates that the CDI will be a GraphQL endpoint\n+<2> `@Query` annotation named `allFilms` defines that the this method will a queryable\n+<3> Documentation of the queryable method\n+\n+TIP:  The value of the `@Query` annotation is optional and would implicitly\n+be defaulted to the method name if excluded.\n+\n+\n+This way we have created our first queryable API which we will later expand.\n+\n+== Launch\n+\n+Launch the quarkus app:\n+[source, bash]\n+----\n+./mvnw compile quarkus:dev\n+----\n+\n+== Introspect\n+\n+The full schema of the `graphQL` API can be retrieved by calling the following:\n+\n+----\n+curl http://localhost:8080/graphql/schema.graphql\n+----\n+\n+The server will return the complete schema of the `graphQL` API.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d189945afc5797783fa801b3f5d1b4808c012fe"}, "originalPosition": 175}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MjcwMjcy", "url": "https://github.com/quarkusio/quarkus/pull/8967#pullrequestreview-407270272", "createdAt": "2020-05-07T08:47:42Z", "commit": {"oid": "9d189945afc5797783fa801b3f5d1b4808c012fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODo0Nzo0MlrOGR0qIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODo0Nzo0MlrOGR0qIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0MTcyOA==", "bodyText": "I think this section is missing some meat :-)", "url": "https://github.com/quarkusio/quarkus/pull/8967#discussion_r421341728", "createdAt": "2020-05-07T08:47:42Z", "author": {"login": "machi1990"}, "path": "docs/src/main/asciidoc/microprofile-graphql.adoc", "diffHunk": "@@ -0,0 +1,416 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - GraphQL\n+\n+include::./attributes.adoc[]\n+\n+This guide demonstrates how your Quarkus application can utilize the **MicroProfile\n+GraphQL** specification through the SmallRye GraphQL extension.\n+\n+As the https://www.graphql.org/[GraphQL] specification website states\n+\n+[quote,]\n+GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data.\n+GraphQL provides a complete and understandable description of the data in your API,\n+gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time,\n+and enables powerful developer tools.\n+\n+**GraphQL** was originally developed by **Facebook** in 2012 and has been\n+a open standard since 2015.\n+\n+GraphQL is not a replacement for REST API specification but merely a\n+alternative. Unlike REST GraphQL API's have a ability to benefit the client by:\n+\n+Preventing Over and Underfetching::\n+    REST are server-driven fixed data responses that can not be determined by\n+    the client. Although the client does not require all the fields the client\n+    must retrieve all the data hence `Overfetching`. A client may also require\n+    multiple REST API calls according to the first call (HATEOAS) to retrieve\n+    all the data that is required thereby `Unfetching`.\n+\n+API Evolution::\n+    Since GraphQL API's returns data that are requested by the client adding additional\n+    fields and capabilities to existing API will not create breaking changes to existing\n+    clients.\n+\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+\n+== Architecture\n+\n+In this guide, we build a simple GraphQL application that exposes a GraphQL API\n+at `/graphql`.\n+\n+This example was inspired by a popular graphQL API\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `microprofile-graphql-quickstart` {quickstarts-tree-url}/microprofile-graphql-quickstart[directory].\n+\n+== Creating the Maven Project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source, subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=microprofile-graphql-quickstart \\\n+    -DclassName=\"org.acme.microprofile.graphql.FilmResource\" \\\n+    -Dextensions=\"smallrye-graphql\"\n+cd microprofile-graphql-quickstart\n+----\n+\n+This command generates a Maven project, importing the `smallrye-graphql` extension which is an implementation of the MicroProfile GraphQL specification used in Quarkus.\n+\n+== Preparing an Application: GraphQL API\n+\n+In this section we will start creating the GraphQL API\n+\n+First, create a the following entities representing a hero from a galaxy far far away:\n+\n+[source,java]\n+----\n+package org.acme.microprofile.graphql;\n+\n+public class Film {\n+    public String title;\n+    public String episodeID;\n+    public String openingCrawl;\n+    public String director;\n+    public String producers;\n+    public LocalDate releaseDate;\n+}\n+\n+public class Hero {\n+\n+    public String name;\n+    public Double height;\n+    public Integer mass;\n+    public Boolean isDarkSide;\n+    public LightSaber lightSaber;\n+\n+}\n+\n+enum LightSaber {\n+    RED, BLUE, GREEN\n+}\n+----\n+\n+The classes we have just created describes the GraphQL schema which is a\n+set of possible data (objects, fields, relationships) that a client can access.\n+\n+Let's continue with an example CDI bean, that would work as a repository.\n+\n+[source,java]\n+\n+----\n+public class GalaxyService {\n+    //..\n+}\n+----\n+\n+Now lets use create our first *Graphql* API:\n+\n+Edit the `org.acme.microprofile.graphql.FilmResource` class as follows:\n+\n+[source,java]\n+----\n+@GraphQLApi // <1>\n+public class FilmResource {\n+\n+    @Inject\n+    GalaxyService service;\n+\n+    @Query(\"allFilms\") // <2>\n+    @Description(\"Get all Films from a galaxy far far away\") // <3>\n+    public List<Film> getAllFilms() {\n+        return service.getAllFilms();\n+    }\n+}\n+----\n+\n+<1> `@GraphQLApi` annotation indicates that the CDI will be a GraphQL endpoint\n+<2> `@Query` annotation named `allFilms` defines that the this method will a queryable\n+<3> Documentation of the queryable method\n+\n+TIP:  The value of the `@Query` annotation is optional and would implicitly\n+be defaulted to the method name if excluded.\n+\n+\n+This way we have created our first queryable API which we will later expand.\n+\n+== Launch\n+\n+Launch the quarkus app:\n+[source, bash]\n+----\n+./mvnw compile quarkus:dev\n+----\n+\n+== Introspect\n+\n+The full schema of the `graphQL` API can be retrieved by calling the following:\n+\n+----\n+curl http://localhost:8080/graphql/schema.graphql\n+----\n+\n+The server will return the complete schema of the `graphQL` API.\n+\n+== Query the GraphQL API\n+\n+\n+Now visit the `graphiql` page that has been deployed in `dev` mode.\n+`graphiql` is an interface that can be used to call and observe the `graphQL` api.\n+\n+Enter the following query to `graphiql` and press the `play` button.\n+\n+[source, graphql]\n+----\n+query allFilms {\n+  allFilms {\n+    title\n+    director\n+    releaseDate\n+    episodeID\n+  }\n+}\n+----\n+\n+Since our query contains all the fields in the `Film` class\n+we will retrieve all the fields in our response. Since GraphQL API\n+responses are client determined. The client can choose which fields\n+it will require.\n+\n+Lets assume that our client only requires title and releaseDate\n+making the previous call to the API `Over-fetching` of unrequired\n+data.\n+\n+Enter the following into `graphiql` and hit the play button.\n+\n+[source, graphql]\n+----\n+query allFilms {\n+  allFilms {\n+    title\n+    releaseDate\n+  }\n+}\n+----\n+\n+Notice in the response we have only retrieved the required fields in\n+the response. Therefore, we have prevented `Over-fetching`.\n+\n+Lets continue to expand our GraphQL API by adding the following to the\n+`FilmResource` class.\n+\n+----\n+    @Query\n+    @Description(\"Get a Films from a galaxy far far away\")\n+    public Film getFilm(@Name(\"filmId\") int id) {\n+        return service.getFilm(id);\n+    }\n+----\n+\n+WARNING: Notice how we have excluded the value in the `@Query` annotation\n+the name of the query is implicitly set at the function name excluding the\n+`get`.\n+\n+This query will enable the client to retrieve the film by id.\n+\n+Enter the following to into `graphiql` and make a request.\n+\n+----\n+query getFilm {\n+  film(filmId: 1) {\n+    title\n+    director\n+    releaseDate\n+    episodeID\n+  }\n+}\n+----\n+\n+The `film` query method requested fields can be determined\n+as such in our previous example. This way we can retrieve individual\n+film information.\n+\n+However, say our client requires both films with filmId `0` and `1`.\n+In a REST API the client would have to make two calls to the API.\n+Therefore, the client would be `Underfetching`.\n+\n+In GraphQL it is possible make multiple queries at once.\n+\n+Enter the following to into `graphiql` and to retrieve two films.\n+\n+----\n+query getFilm {\n+  film(filmId: 0) {\n+    title\n+    director\n+    releaseDate\n+    episodeID\n+  }\n+  film(filmId: 1) {\n+    title\n+    director\n+    releaseDate\n+    episodeID\n+  }\n+}\n+----\n+\n+This enabled the client to fetch the required data in a single request.\n+\n+== Expanding the API\n+\n+Until now we have created a GraphQL API to retrieve film data.\n+We now want to enable the clients to retrieve the `Hero` data of the `Film`.\n+\n+Add the following to our `FilmResource` class.\n+\n+----\n+    public List<Hero> heroes(@Source Film film) { // <1>\n+    return service.getAllHeroes();\n+    }\n+----\n+\n+<1> Enable `List<Hero>` data to be added to queries that response with `Film`\n+\n+By adding this method we have effectively changing the schema of the GraphQL API.\n+Although the schema has changed the previous queries will still work.\n+Since we only expanded the API to be able to retrieve `Hero` data with `Film` data.\n+\n+Enter the following into `graphiql` and to retrieve the film and hero data.\n+\n+----\n+query getFilmHeroes {\n+  film(filmId: 1) {\n+    title\n+    director\n+    releaseDate\n+    episodeID\n+    heroes {\n+      name\n+      height\n+      mass\n+      darkSide\n+      lightSaber\n+    }\n+  }\n+}\n+----\n+\n+The response now includes the heroes of the film.\n+\n+== Mutations\n+\n+Mutations are used when data is create, updated or deleted.\n+\n+Lets now add the ability to add and delete heroes to our GraphQL API.\n+\n+Add the following to our `FilmResource` class:\n+\n+----\n+    @Mutation\n+    public Hero updateHero(Hero hero) {\n+        service.createHero(hero);\n+        return hero;\n+    }\n+\n+    @Mutation\n+    public Hero deleteHero(int id) {\n+        return service.deleteHero(id);\n+    }\n+----\n+\n+Enter the following into `graphiql` and to insert the last film of the original trilogy.\n+\n+----\n+mutation addHero {\n+  updateHero(hero: {\n+      name: \"Han\",\n+      surname: \"Solo\"\n+      height: 1.85\n+      mass: 80\n+      isDarkSide: false\n+      episodeIds: [4, 5, 6]\n+  \t}\n+  )\n+  {\n+    name\n+    surname\n+  }\n+}\n+----\n+\n+By using this mutation we have created a hero entity in our service.\n+\n+Notice how in the response we have retrieved the `name` and `surname`\n+of the created Hero. This is because we selected to retrieve\n+these fields in the response within the `{ }` in the mutation query.\n+This can easily be a server side generated field that the client may require.\n+\n+Lets now try deleting an entry\n+\n+----\n+mutation DeleteHero {\n+  deleteHero(id :3){\n+    name\n+    surname\n+  }\n+}\n+----\n+\n+Similar to the `updateHero` mutation method we also retrieve the `name` and\n+`surname` of the hero we have deleted which is defined in `{ }`.\n+\n+Queries can also be done on individual fields. For example, lets\n+create a method to query heroes by there last name.\n+\n+----\n+    @Query\n+    public List<Hero> getHeroesWithSurname(@DefaultValue(\"Skywalker\") String surname) {\n+        return service.getHeroesBySurname(surname);\n+    }\n+----\n+\n+By using the `@DefaultValue` annotation we have determined the surname value when the parameter\n+not given.\n+\n+Test the following queries with `graphiql`\n+\n+----\n+query heroWithDefaultSurname {\n+  heroesWithSurname{\n+    name\n+    surname\n+    lightSaber\n+  }\n+}\n+query heroWithSurnames {\n+  heroesWithSurname(surname: \"Vader\") {\n+    name\n+    surname\n+    lightSaber\n+  }\n+}\n+----\n+\n+== Conclusion", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d189945afc5797783fa801b3f5d1b4808c012fe"}, "originalPosition": 416}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9d189945afc5797783fa801b3f5d1b4808c012fe", "author": {"user": {"login": "cemnura", "name": "Cem Nura"}}, "url": "https://github.com/quarkusio/quarkus/commit/9d189945afc5797783fa801b3f5d1b4808c012fe", "committedDate": "2020-05-04T00:02:40Z", "message": "WIP\n\nSigned-off-by: Cem Nura <cem.nura@gmail.com>"}, "afterCommit": {"oid": "1c996a242d1aea798d4f938302365ae58ab3434f", "author": {"user": {"login": "cemnura", "name": "Cem Nura"}}, "url": "https://github.com/quarkusio/quarkus/commit/1c996a242d1aea798d4f938302365ae58ab3434f", "committedDate": "2020-05-07T22:31:09Z", "message": "Added Quarkus GraphQL extension documentation\n\nSigned-off-by: Cem Nura <cem.nura@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NzkzMzAw", "url": "https://github.com/quarkusio/quarkus/pull/8967#pullrequestreview-407793300", "createdAt": "2020-05-07T20:00:13Z", "commit": {"oid": "9d189945afc5797783fa801b3f5d1b4808c012fe"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDowMDoxM1rOGSOJyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjozNToxN1rOGSSpuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc1OTQzMg==", "bodyText": "@phillip-kruger I am not sure of the name of the extensions. Is this correct?", "url": "https://github.com/quarkusio/quarkus/pull/8967#discussion_r421759432", "createdAt": "2020-05-07T20:00:13Z", "author": {"login": "cemnura"}, "path": "docs/src/main/asciidoc/microprofile-graphql.adoc", "diffHunk": "@@ -0,0 +1,416 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - GraphQL\n+\n+include::./attributes.adoc[]\n+\n+This guide demonstrates how your Quarkus application can utilize the **MicroProfile\n+GraphQL** specification through the SmallRye GraphQL extension.\n+\n+As the https://www.graphql.org/[GraphQL] specification website states\n+\n+[quote,]\n+GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data.\n+GraphQL provides a complete and understandable description of the data in your API,\n+gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time,\n+and enables powerful developer tools.\n+\n+**GraphQL** was originally developed by **Facebook** in 2012 and has been\n+a open standard since 2015.\n+\n+GraphQL is not a replacement for REST API specification but merely a\n+alternative. Unlike REST GraphQL API's have a ability to benefit the client by:\n+\n+Preventing Over and Underfetching::\n+    REST are server-driven fixed data responses that can not be determined by\n+    the client. Although the client does not require all the fields the client\n+    must retrieve all the data hence `Overfetching`. A client may also require\n+    multiple REST API calls according to the first call (HATEOAS) to retrieve\n+    all the data that is required thereby `Unfetching`.\n+\n+API Evolution::\n+    Since GraphQL API's returns data that are requested by the client adding additional\n+    fields and capabilities to existing API will not create breaking changes to existing\n+    clients.\n+\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+\n+== Architecture\n+\n+In this guide, we build a simple GraphQL application that exposes a GraphQL API\n+at `/graphql`.\n+\n+This example was inspired by a popular graphQL API\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `microprofile-graphql-quickstart` {quickstarts-tree-url}/microprofile-graphql-quickstart[directory].\n+\n+== Creating the Maven Project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source, subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=microprofile-graphql-quickstart \\\n+    -DclassName=\"org.acme.microprofile.graphql.FilmResource\" \\\n+    -Dextensions=\"smallrye-graphql\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d189945afc5797783fa801b3f5d1b4808c012fe"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMzE0Nw==", "bodyText": "I mentioned Graphiql in the documentation. Great feature \ud83d\udc4d", "url": "https://github.com/quarkusio/quarkus/pull/8967#discussion_r421833147", "createdAt": "2020-05-07T22:35:17Z", "author": {"login": "cemnura"}, "path": "docs/src/main/asciidoc/microprofile-graphql.adoc", "diffHunk": "@@ -0,0 +1,416 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - GraphQL\n+\n+include::./attributes.adoc[]\n+\n+This guide demonstrates how your Quarkus application can utilize the **MicroProfile\n+GraphQL** specification through the SmallRye GraphQL extension.\n+\n+As the https://www.graphql.org/[GraphQL] specification website states\n+\n+[quote,]\n+GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data.\n+GraphQL provides a complete and understandable description of the data in your API,\n+gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time,\n+and enables powerful developer tools.\n+\n+**GraphQL** was originally developed by **Facebook** in 2012 and has been\n+a open standard since 2015.\n+\n+GraphQL is not a replacement for REST API specification but merely a\n+alternative. Unlike REST GraphQL API's have a ability to benefit the client by:\n+\n+Preventing Over and Underfetching::\n+    REST are server-driven fixed data responses that can not be determined by\n+    the client. Although the client does not require all the fields the client\n+    must retrieve all the data hence `Overfetching`. A client may also require\n+    multiple REST API calls according to the first call (HATEOAS) to retrieve\n+    all the data that is required thereby `Unfetching`.\n+\n+API Evolution::\n+    Since GraphQL API's returns data that are requested by the client adding additional\n+    fields and capabilities to existing API will not create breaking changes to existing\n+    clients.\n+\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+\n+== Architecture\n+\n+In this guide, we build a simple GraphQL application that exposes a GraphQL API\n+at `/graphql`.\n+\n+This example was inspired by a popular graphQL API\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `microprofile-graphql-quickstart` {quickstarts-tree-url}/microprofile-graphql-quickstart[directory].\n+\n+== Creating the Maven Project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source, subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=microprofile-graphql-quickstart \\\n+    -DclassName=\"org.acme.microprofile.graphql.FilmResource\" \\\n+    -Dextensions=\"smallrye-graphql\"\n+cd microprofile-graphql-quickstart\n+----\n+\n+This command generates a Maven project, importing the `smallrye-graphql` extension which is an implementation of the MicroProfile GraphQL specification used in Quarkus.\n+\n+== Preparing an Application: GraphQL API\n+\n+In this section we will start creating the GraphQL API\n+\n+First, create a the following entities representing a hero from a galaxy far far away:\n+\n+[source,java]\n+----\n+package org.acme.microprofile.graphql;\n+\n+public class Film {\n+    public String title;\n+    public String episodeID;\n+    public String openingCrawl;\n+    public String director;\n+    public String producers;\n+    public LocalDate releaseDate;\n+}\n+\n+public class Hero {\n+\n+    public String name;\n+    public Double height;\n+    public Integer mass;\n+    public Boolean isDarkSide;\n+    public LightSaber lightSaber;\n+\n+}\n+\n+enum LightSaber {\n+    RED, BLUE, GREEN\n+}\n+----\n+\n+The classes we have just created describes the GraphQL schema which is a\n+set of possible data (objects, fields, relationships) that a client can access.\n+\n+Let's continue with an example CDI bean, that would work as a repository.\n+\n+[source,java]\n+\n+----\n+public class GalaxyService {\n+    //..\n+}\n+----\n+\n+Now lets use create our first *Graphql* API:\n+\n+Edit the `org.acme.microprofile.graphql.FilmResource` class as follows:\n+\n+[source,java]\n+----\n+@GraphQLApi // <1>\n+public class FilmResource {\n+\n+    @Inject\n+    GalaxyService service;\n+\n+    @Query(\"allFilms\") // <2>\n+    @Description(\"Get all Films from a galaxy far far away\") // <3>\n+    public List<Film> getAllFilms() {\n+        return service.getAllFilms();\n+    }\n+}\n+----\n+\n+<1> `@GraphQLApi` annotation indicates that the CDI will be a GraphQL endpoint\n+<2> `@Query` annotation named `allFilms` defines that the this method will a queryable\n+<3> Documentation of the queryable method\n+\n+TIP:  The value of the `@Query` annotation is optional and would implicitly\n+be defaulted to the method name if excluded.\n+\n+\n+This way we have created our first queryable API which we will later expand.\n+\n+== Launch\n+\n+Launch the quarkus app:\n+[source, bash]\n+----\n+./mvnw compile quarkus:dev\n+----\n+\n+== Introspect\n+\n+The full schema of the `graphQL` API can be retrieved by calling the following:\n+\n+----\n+curl http://localhost:8080/graphql/schema.graphql\n+----\n+\n+The server will return the complete schema of the `graphQL` API.\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMyMzIyOQ=="}, "originalCommit": {"oid": "9d189945afc5797783fa801b3f5d1b4808c012fe"}, "originalPosition": 175}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1c996a242d1aea798d4f938302365ae58ab3434f", "author": {"user": {"login": "cemnura", "name": "Cem Nura"}}, "url": "https://github.com/quarkusio/quarkus/commit/1c996a242d1aea798d4f938302365ae58ab3434f", "committedDate": "2020-05-07T22:31:09Z", "message": "Added Quarkus GraphQL extension documentation\n\nSigned-off-by: Cem Nura <cem.nura@gmail.com>"}, "afterCommit": {"oid": "f792917a51a166926bfd65011a8a42531d98a162", "author": {"user": {"login": "cemnura", "name": "Cem Nura"}}, "url": "https://github.com/quarkusio/quarkus/commit/f792917a51a166926bfd65011a8a42531d98a162", "committedDate": "2020-05-11T20:37:06Z", "message": "Added Quarkus GraphQL extension documentation\n\nSigned-off-by: Cem Nura <cem.nura@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f792917a51a166926bfd65011a8a42531d98a162", "author": {"user": {"login": "cemnura", "name": "Cem Nura"}}, "url": "https://github.com/quarkusio/quarkus/commit/f792917a51a166926bfd65011a8a42531d98a162", "committedDate": "2020-05-11T20:37:06Z", "message": "Added Quarkus GraphQL extension documentation\n\nSigned-off-by: Cem Nura <cem.nura@gmail.com>"}, "afterCommit": {"oid": "4c03df37dcd407447312a40662be3e380126d886", "author": {"user": {"login": "cemnura", "name": "Cem Nura"}}, "url": "https://github.com/quarkusio/quarkus/commit/4c03df37dcd407447312a40662be3e380126d886", "committedDate": "2020-05-21T22:14:49Z", "message": "Added Quarkus GraphQL extension documentation\n\nSigned-off-by: Cem Nura <cem.nura@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MzQ0NTI3", "url": "https://github.com/quarkusio/quarkus/pull/8967#pullrequestreview-418344527", "createdAt": "2020-05-26T14:17:40Z", "commit": {"oid": "4c03df37dcd407447312a40662be3e380126d886"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "737caa60cc76f715bc3fd49c3f079876bea5eba3", "author": {"user": {"login": "cemnura", "name": "Cem Nura"}}, "url": "https://github.com/quarkusio/quarkus/commit/737caa60cc76f715bc3fd49c3f079876bea5eba3", "committedDate": "2020-05-26T15:06:56Z", "message": "Added Quarkus GraphQL extension documentation\n\nSigned-off-by: Cem Nura <cem.nura@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55043bbb1941d3ceb1586ce2ee165d22b69582f5", "author": {"user": {"login": "gsmet", "name": "Guillaume Smet"}}, "url": "https://github.com/quarkusio/quarkus/commit/55043bbb1941d3ceb1586ce2ee165d22b69582f5", "committedDate": "2020-05-26T15:06:56Z", "message": "Fix various things in the GraphQL guide\n\nAnd also include the generated configuration reference."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4c03df37dcd407447312a40662be3e380126d886", "author": {"user": {"login": "cemnura", "name": "Cem Nura"}}, "url": "https://github.com/quarkusio/quarkus/commit/4c03df37dcd407447312a40662be3e380126d886", "committedDate": "2020-05-21T22:14:49Z", "message": "Added Quarkus GraphQL extension documentation\n\nSigned-off-by: Cem Nura <cem.nura@gmail.com>"}, "afterCommit": {"oid": "55043bbb1941d3ceb1586ce2ee165d22b69582f5", "author": {"user": {"login": "gsmet", "name": "Guillaume Smet"}}, "url": "https://github.com/quarkusio/quarkus/commit/55043bbb1941d3ceb1586ce2ee165d22b69582f5", "committedDate": "2020-05-26T15:06:56Z", "message": "Fix various things in the GraphQL guide\n\nAnd also include the generated configuration reference."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NDA2MDUz", "url": "https://github.com/quarkusio/quarkus/pull/8967#pullrequestreview-418406053", "createdAt": "2020-05-26T15:18:46Z", "commit": {"oid": "55043bbb1941d3ceb1586ce2ee165d22b69582f5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4398, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}