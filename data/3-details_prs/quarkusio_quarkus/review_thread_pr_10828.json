{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUyMDEyNDU5", "number": 10828, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODowMjoxMVrOEQB0_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwODoxMDo0M1rOEQg08g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjQyNjIyOnYy", "diffSide": "RIGHT", "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODowMjoxMVrOGz-ZQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTozNjozM1rOG0Cw6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE1MjgzNA==", "bodyText": "IIUC, the UI artifacts are only static files so why do we need to reextract them when the path to UI changes? Can't you just reuse already created temp dir and just change the path in the cached instance?", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457152834", "createdAt": "2020-07-20T08:02:11Z", "author": {"login": "xstefank"}, "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -278,4 +326,162 @@ public void transform(TransformationContext ctx) {\n \n         });\n     }\n+\n+    // UI\n+\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    void registerUiExtension(\n+            BuildProducer<RouteBuildItem> routeProducer,\n+            BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n+            BuildProducer<NativeImageResourceBuildItem> nativeImageResourceProducer,\n+            BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageDisplayableEndpointProducer,\n+            SmallRyeHealthRecorder recorder,\n+            LaunchModeBuildItem launchMode,\n+            LiveReloadBuildItem liveReload,\n+            HttpRootPathBuildItem httpRootPath,\n+            CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n+\n+        if (!health.enableUi) {\n+            return;\n+        }\n+        if (\"/\".equals(health.rootPathUi)) {\n+            throw new ConfigurationError(\n+                    \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n+        }\n+\n+        String healthPath = httpRootPath.adjustPath(health.rootPath);\n+\n+        if (launchMode.getLaunchMode().isDevOrTest()) {\n+            CachedHealthUI cached = liveReload.getContextObject(CachedHealthUI.class);\n+            boolean extractionNeeded = cached == null;\n+\n+            if (cached != null && !cached.cachedHealthPath.equals(healthPath)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eef62c640442acfd44969ee0952332e93b9628f"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE2OTY2Nw==", "bodyText": "Yea, the idea is actually that you can change the /health path and the UI sould pick this up. But that is not yet implemented, as the user can change that path the settings, but maybe I should just implement it now.", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457169667", "createdAt": "2020-07-20T08:25:19Z", "author": {"login": "phillip-kruger"}, "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -278,4 +326,162 @@ public void transform(TransformationContext ctx) {\n \n         });\n     }\n+\n+    // UI\n+\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    void registerUiExtension(\n+            BuildProducer<RouteBuildItem> routeProducer,\n+            BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n+            BuildProducer<NativeImageResourceBuildItem> nativeImageResourceProducer,\n+            BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageDisplayableEndpointProducer,\n+            SmallRyeHealthRecorder recorder,\n+            LaunchModeBuildItem launchMode,\n+            LiveReloadBuildItem liveReload,\n+            HttpRootPathBuildItem httpRootPath,\n+            CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n+\n+        if (!health.enableUi) {\n+            return;\n+        }\n+        if (\"/\".equals(health.rootPathUi)) {\n+            throw new ConfigurationError(\n+                    \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n+        }\n+\n+        String healthPath = httpRootPath.adjustPath(health.rootPath);\n+\n+        if (launchMode.getLaunchMode().isDevOrTest()) {\n+            CachedHealthUI cached = liveReload.getContextObject(CachedHealthUI.class);\n+            boolean extractionNeeded = cached == null;\n+\n+            if (cached != null && !cached.cachedHealthPath.equals(healthPath)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE1MjgzNA=="}, "originalCommit": {"oid": "0eef62c640442acfd44969ee0952332e93b9628f"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE3MDA0OQ==", "bodyText": "Point is, then it's not static anymore...", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457170049", "createdAt": "2020-07-20T08:25:46Z", "author": {"login": "phillip-kruger"}, "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -278,4 +326,162 @@ public void transform(TransformationContext ctx) {\n \n         });\n     }\n+\n+    // UI\n+\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    void registerUiExtension(\n+            BuildProducer<RouteBuildItem> routeProducer,\n+            BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n+            BuildProducer<NativeImageResourceBuildItem> nativeImageResourceProducer,\n+            BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageDisplayableEndpointProducer,\n+            SmallRyeHealthRecorder recorder,\n+            LaunchModeBuildItem launchMode,\n+            LiveReloadBuildItem liveReload,\n+            HttpRootPathBuildItem httpRootPath,\n+            CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n+\n+        if (!health.enableUi) {\n+            return;\n+        }\n+        if (\"/\".equals(health.rootPathUi)) {\n+            throw new ConfigurationError(\n+                    \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n+        }\n+\n+        String healthPath = httpRootPath.adjustPath(health.rootPath);\n+\n+        if (launchMode.getLaunchMode().isDevOrTest()) {\n+            CachedHealthUI cached = liveReload.getContextObject(CachedHealthUI.class);\n+            boolean extractionNeeded = cached == null;\n+\n+            if (cached != null && !cached.cachedHealthPath.equals(healthPath)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE1MjgzNA=="}, "originalCommit": {"oid": "0eef62c640442acfd44969ee0952332e93b9628f"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyNDQyNA==", "bodyText": "Ok, I now added the dynamic part.", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457224424", "createdAt": "2020-07-20T09:36:33Z", "author": {"login": "phillip-kruger"}, "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -278,4 +326,162 @@ public void transform(TransformationContext ctx) {\n \n         });\n     }\n+\n+    // UI\n+\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    void registerUiExtension(\n+            BuildProducer<RouteBuildItem> routeProducer,\n+            BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n+            BuildProducer<NativeImageResourceBuildItem> nativeImageResourceProducer,\n+            BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageDisplayableEndpointProducer,\n+            SmallRyeHealthRecorder recorder,\n+            LaunchModeBuildItem launchMode,\n+            LiveReloadBuildItem liveReload,\n+            HttpRootPathBuildItem httpRootPath,\n+            CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n+\n+        if (!health.enableUi) {\n+            return;\n+        }\n+        if (\"/\".equals(health.rootPathUi)) {\n+            throw new ConfigurationError(\n+                    \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n+        }\n+\n+        String healthPath = httpRootPath.adjustPath(health.rootPath);\n+\n+        if (launchMode.getLaunchMode().isDevOrTest()) {\n+            CachedHealthUI cached = liveReload.getContextObject(CachedHealthUI.class);\n+            boolean extractionNeeded = cached == null;\n+\n+            if (cached != null && !cached.cachedHealthPath.equals(healthPath)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE1MjgzNA=="}, "originalCommit": {"oid": "0eef62c640442acfd44969ee0952332e93b9628f"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjQ1ODE3OnYy", "diffSide": "RIGHT", "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODowODo0MFrOGz-rVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODozMzoyMVrOGz_05A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE1NzQ2MA==", "bodyText": "I would suggest incorporating this line in the if statement on the following line so you can avoid some processing which will be discarded for ignored files.", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457157460", "createdAt": "2020-07-20T08:08:40Z", "author": {"login": "xstefank"}, "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -278,4 +326,162 @@ public void transform(TransformationContext ctx) {\n \n         });\n     }\n+\n+    // UI\n+\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    void registerUiExtension(\n+            BuildProducer<RouteBuildItem> routeProducer,\n+            BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n+            BuildProducer<NativeImageResourceBuildItem> nativeImageResourceProducer,\n+            BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageDisplayableEndpointProducer,\n+            SmallRyeHealthRecorder recorder,\n+            LaunchModeBuildItem launchMode,\n+            LiveReloadBuildItem liveReload,\n+            HttpRootPathBuildItem httpRootPath,\n+            CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n+\n+        if (!health.enableUi) {\n+            return;\n+        }\n+        if (\"/\".equals(health.rootPathUi)) {\n+            throw new ConfigurationError(\n+                    \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n+        }\n+\n+        String healthPath = httpRootPath.adjustPath(health.rootPath);\n+\n+        if (launchMode.getLaunchMode().isDevOrTest()) {\n+            CachedHealthUI cached = liveReload.getContextObject(CachedHealthUI.class);\n+            boolean extractionNeeded = cached == null;\n+\n+            if (cached != null && !cached.cachedHealthPath.equals(healthPath)) {\n+                try {\n+                    FileUtil.deleteDirectory(Paths.get(cached.cachedDirectory));\n+                } catch (IOException e) {\n+                    LOG.error(\"Failed to clean Health UI temp directory on restart\", e);\n+                }\n+                extractionNeeded = true;\n+            }\n+            if (extractionNeeded) {\n+                if (cached == null) {\n+                    cached = new CachedHealthUI();\n+                    liveReload.setContextObject(CachedHealthUI.class, cached);\n+                    Runtime.getRuntime().addShutdownHook(new Thread(cached, \"Health UI Shutdown Hook\"));\n+                }\n+                try {\n+                    AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+                    Path tempDir = Files.createTempDirectory(TEMP_DIR_PREFIX).toRealPath();\n+                    extractHealthUi(artifact, tempDir);\n+                    cached.cachedDirectory = tempDir.toAbsolutePath().toString();\n+                    cached.cachedHealthPath = healthPath;\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+            Handler<RoutingContext> handler = recorder.uiHandler(cached.cachedDirectory,\n+                    httpRootPath.adjustPath(health.rootPathUi));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi, handler));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi + \"/*\", handler));\n+            notFoundPageDisplayableEndpointProducer\n+                    .produce(new NotFoundPageDisplayableEndpointBuildItem(health.rootPathUi + \"/\"));\n+        } else if (health.alwaysIncludeUi) {\n+            AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+            //we are including in a production artifact\n+            //just stick the files in the generated output\n+            //we could do this for dev mode as well but then we need to extract them every time\n+            for (Path p : artifact.getPaths()) {\n+                File artifactFile = p.toFile();\n+                try (JarFile jarFile = new JarFile(artifactFile)) {\n+                    Enumeration<JarEntry> entries = jarFile.entries();\n+\n+                    while (entries.hasMoreElements()) {\n+                        JarEntry entry = entries.nextElement();\n+                        if (entry.getName().startsWith(HEALTH_UI_WEBJAR_PREFIX) && !entry.isDirectory()) {\n+                            try (InputStream inputStream = jarFile.getInputStream(entry)) {\n+                                String filename = entry.getName().replace(HEALTH_UI_WEBJAR_PREFIX + \"/\", \"\");\n+                                byte[] content = FileUtil.readFileContents(inputStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eef62c640442acfd44969ee0952332e93b9628f"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE3NjI5Mg==", "bodyText": "It's used later (outside of the if) - see line 416", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457176292", "createdAt": "2020-07-20T08:33:21Z", "author": {"login": "phillip-kruger"}, "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -278,4 +326,162 @@ public void transform(TransformationContext ctx) {\n \n         });\n     }\n+\n+    // UI\n+\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    void registerUiExtension(\n+            BuildProducer<RouteBuildItem> routeProducer,\n+            BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n+            BuildProducer<NativeImageResourceBuildItem> nativeImageResourceProducer,\n+            BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageDisplayableEndpointProducer,\n+            SmallRyeHealthRecorder recorder,\n+            LaunchModeBuildItem launchMode,\n+            LiveReloadBuildItem liveReload,\n+            HttpRootPathBuildItem httpRootPath,\n+            CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n+\n+        if (!health.enableUi) {\n+            return;\n+        }\n+        if (\"/\".equals(health.rootPathUi)) {\n+            throw new ConfigurationError(\n+                    \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n+        }\n+\n+        String healthPath = httpRootPath.adjustPath(health.rootPath);\n+\n+        if (launchMode.getLaunchMode().isDevOrTest()) {\n+            CachedHealthUI cached = liveReload.getContextObject(CachedHealthUI.class);\n+            boolean extractionNeeded = cached == null;\n+\n+            if (cached != null && !cached.cachedHealthPath.equals(healthPath)) {\n+                try {\n+                    FileUtil.deleteDirectory(Paths.get(cached.cachedDirectory));\n+                } catch (IOException e) {\n+                    LOG.error(\"Failed to clean Health UI temp directory on restart\", e);\n+                }\n+                extractionNeeded = true;\n+            }\n+            if (extractionNeeded) {\n+                if (cached == null) {\n+                    cached = new CachedHealthUI();\n+                    liveReload.setContextObject(CachedHealthUI.class, cached);\n+                    Runtime.getRuntime().addShutdownHook(new Thread(cached, \"Health UI Shutdown Hook\"));\n+                }\n+                try {\n+                    AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+                    Path tempDir = Files.createTempDirectory(TEMP_DIR_PREFIX).toRealPath();\n+                    extractHealthUi(artifact, tempDir);\n+                    cached.cachedDirectory = tempDir.toAbsolutePath().toString();\n+                    cached.cachedHealthPath = healthPath;\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+            Handler<RoutingContext> handler = recorder.uiHandler(cached.cachedDirectory,\n+                    httpRootPath.adjustPath(health.rootPathUi));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi, handler));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi + \"/*\", handler));\n+            notFoundPageDisplayableEndpointProducer\n+                    .produce(new NotFoundPageDisplayableEndpointBuildItem(health.rootPathUi + \"/\"));\n+        } else if (health.alwaysIncludeUi) {\n+            AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+            //we are including in a production artifact\n+            //just stick the files in the generated output\n+            //we could do this for dev mode as well but then we need to extract them every time\n+            for (Path p : artifact.getPaths()) {\n+                File artifactFile = p.toFile();\n+                try (JarFile jarFile = new JarFile(artifactFile)) {\n+                    Enumeration<JarEntry> entries = jarFile.entries();\n+\n+                    while (entries.hasMoreElements()) {\n+                        JarEntry entry = entries.nextElement();\n+                        if (entry.getName().startsWith(HEALTH_UI_WEBJAR_PREFIX) && !entry.isDirectory()) {\n+                            try (InputStream inputStream = jarFile.getInputStream(entry)) {\n+                                String filename = entry.getName().replace(HEALTH_UI_WEBJAR_PREFIX + \"/\", \"\");\n+                                byte[] content = FileUtil.readFileContents(inputStream);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE1NzQ2MA=="}, "originalCommit": {"oid": "0eef62c640442acfd44969ee0952332e93b9628f"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjQ3ODQ0OnYy", "diffSide": "RIGHT", "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODoxMjo0MlrOGz-2yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODozNjo1OFrOG0AAmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE2MDM5Mg==", "bodyText": "This can be called during dev mode so maybe even taking dep.getArtifact() into a variable may save some time? :) Not sure what is more expensive but there can be a lot of deps potentially so worth thinking about.", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457160392", "createdAt": "2020-07-20T08:12:42Z", "author": {"login": "xstefank"}, "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -278,4 +326,162 @@ public void transform(TransformationContext ctx) {\n \n         });\n     }\n+\n+    // UI\n+\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    void registerUiExtension(\n+            BuildProducer<RouteBuildItem> routeProducer,\n+            BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n+            BuildProducer<NativeImageResourceBuildItem> nativeImageResourceProducer,\n+            BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageDisplayableEndpointProducer,\n+            SmallRyeHealthRecorder recorder,\n+            LaunchModeBuildItem launchMode,\n+            LiveReloadBuildItem liveReload,\n+            HttpRootPathBuildItem httpRootPath,\n+            CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n+\n+        if (!health.enableUi) {\n+            return;\n+        }\n+        if (\"/\".equals(health.rootPathUi)) {\n+            throw new ConfigurationError(\n+                    \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n+        }\n+\n+        String healthPath = httpRootPath.adjustPath(health.rootPath);\n+\n+        if (launchMode.getLaunchMode().isDevOrTest()) {\n+            CachedHealthUI cached = liveReload.getContextObject(CachedHealthUI.class);\n+            boolean extractionNeeded = cached == null;\n+\n+            if (cached != null && !cached.cachedHealthPath.equals(healthPath)) {\n+                try {\n+                    FileUtil.deleteDirectory(Paths.get(cached.cachedDirectory));\n+                } catch (IOException e) {\n+                    LOG.error(\"Failed to clean Health UI temp directory on restart\", e);\n+                }\n+                extractionNeeded = true;\n+            }\n+            if (extractionNeeded) {\n+                if (cached == null) {\n+                    cached = new CachedHealthUI();\n+                    liveReload.setContextObject(CachedHealthUI.class, cached);\n+                    Runtime.getRuntime().addShutdownHook(new Thread(cached, \"Health UI Shutdown Hook\"));\n+                }\n+                try {\n+                    AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+                    Path tempDir = Files.createTempDirectory(TEMP_DIR_PREFIX).toRealPath();\n+                    extractHealthUi(artifact, tempDir);\n+                    cached.cachedDirectory = tempDir.toAbsolutePath().toString();\n+                    cached.cachedHealthPath = healthPath;\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+            Handler<RoutingContext> handler = recorder.uiHandler(cached.cachedDirectory,\n+                    httpRootPath.adjustPath(health.rootPathUi));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi, handler));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi + \"/*\", handler));\n+            notFoundPageDisplayableEndpointProducer\n+                    .produce(new NotFoundPageDisplayableEndpointBuildItem(health.rootPathUi + \"/\"));\n+        } else if (health.alwaysIncludeUi) {\n+            AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+            //we are including in a production artifact\n+            //just stick the files in the generated output\n+            //we could do this for dev mode as well but then we need to extract them every time\n+            for (Path p : artifact.getPaths()) {\n+                File artifactFile = p.toFile();\n+                try (JarFile jarFile = new JarFile(artifactFile)) {\n+                    Enumeration<JarEntry> entries = jarFile.entries();\n+\n+                    while (entries.hasMoreElements()) {\n+                        JarEntry entry = entries.nextElement();\n+                        if (entry.getName().startsWith(HEALTH_UI_WEBJAR_PREFIX) && !entry.isDirectory()) {\n+                            try (InputStream inputStream = jarFile.getInputStream(entry)) {\n+                                String filename = entry.getName().replace(HEALTH_UI_WEBJAR_PREFIX + \"/\", \"\");\n+                                byte[] content = FileUtil.readFileContents(inputStream);\n+                                if (IGNORE_LIST.contains(filename)) {\n+                                    ClassLoader classLoader = SmallRyeHealthProcessor.class.getClassLoader();\n+                                    try (InputStream resourceAsStream = classLoader\n+                                            .getResourceAsStream(OWN_MEDIA_FOLDER + filename)) {\n+                                        content = IoUtil.readBytes(resourceAsStream);\n+                                    }\n+                                }\n+\n+                                String fileName = HEALTH_UI_FINAL_DESTINATION + \"/\" + filename;\n+\n+                                generatedResourceProducer\n+                                        .produce(new GeneratedResourceBuildItem(fileName, content));\n+\n+                                nativeImageResourceProducer\n+                                        .produce(new NativeImageResourceBuildItem(fileName));\n+\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+\n+            Handler<RoutingContext> handler = recorder\n+                    .uiHandler(HEALTH_UI_FINAL_DESTINATION, httpRootPath.adjustPath(health.rootPathUi));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi, handler));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi + \"/*\", handler));\n+        }\n+    }\n+\n+    private AppArtifact getHealthUiArtifact(CurateOutcomeBuildItem curateOutcomeBuildItem) {\n+        for (AppDependency dep : curateOutcomeBuildItem.getEffectiveModel().getFullDeploymentDeps()) {\n+            if (dep.getArtifact().getArtifactId().equals(HEALTH_UI_WEBJAR_ARTIFACT_ID)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eef62c640442acfd44969ee0952332e93b9628f"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE3OTI5MA==", "bodyText": "Dev mode extract this to a local \"cache\" folder, so it's not being called on every reload. Only when the '/health' path change. So I think it's ok.", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457179290", "createdAt": "2020-07-20T08:36:58Z", "author": {"login": "phillip-kruger"}, "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -278,4 +326,162 @@ public void transform(TransformationContext ctx) {\n \n         });\n     }\n+\n+    // UI\n+\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    void registerUiExtension(\n+            BuildProducer<RouteBuildItem> routeProducer,\n+            BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n+            BuildProducer<NativeImageResourceBuildItem> nativeImageResourceProducer,\n+            BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageDisplayableEndpointProducer,\n+            SmallRyeHealthRecorder recorder,\n+            LaunchModeBuildItem launchMode,\n+            LiveReloadBuildItem liveReload,\n+            HttpRootPathBuildItem httpRootPath,\n+            CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n+\n+        if (!health.enableUi) {\n+            return;\n+        }\n+        if (\"/\".equals(health.rootPathUi)) {\n+            throw new ConfigurationError(\n+                    \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n+        }\n+\n+        String healthPath = httpRootPath.adjustPath(health.rootPath);\n+\n+        if (launchMode.getLaunchMode().isDevOrTest()) {\n+            CachedHealthUI cached = liveReload.getContextObject(CachedHealthUI.class);\n+            boolean extractionNeeded = cached == null;\n+\n+            if (cached != null && !cached.cachedHealthPath.equals(healthPath)) {\n+                try {\n+                    FileUtil.deleteDirectory(Paths.get(cached.cachedDirectory));\n+                } catch (IOException e) {\n+                    LOG.error(\"Failed to clean Health UI temp directory on restart\", e);\n+                }\n+                extractionNeeded = true;\n+            }\n+            if (extractionNeeded) {\n+                if (cached == null) {\n+                    cached = new CachedHealthUI();\n+                    liveReload.setContextObject(CachedHealthUI.class, cached);\n+                    Runtime.getRuntime().addShutdownHook(new Thread(cached, \"Health UI Shutdown Hook\"));\n+                }\n+                try {\n+                    AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+                    Path tempDir = Files.createTempDirectory(TEMP_DIR_PREFIX).toRealPath();\n+                    extractHealthUi(artifact, tempDir);\n+                    cached.cachedDirectory = tempDir.toAbsolutePath().toString();\n+                    cached.cachedHealthPath = healthPath;\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+            Handler<RoutingContext> handler = recorder.uiHandler(cached.cachedDirectory,\n+                    httpRootPath.adjustPath(health.rootPathUi));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi, handler));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi + \"/*\", handler));\n+            notFoundPageDisplayableEndpointProducer\n+                    .produce(new NotFoundPageDisplayableEndpointBuildItem(health.rootPathUi + \"/\"));\n+        } else if (health.alwaysIncludeUi) {\n+            AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+            //we are including in a production artifact\n+            //just stick the files in the generated output\n+            //we could do this for dev mode as well but then we need to extract them every time\n+            for (Path p : artifact.getPaths()) {\n+                File artifactFile = p.toFile();\n+                try (JarFile jarFile = new JarFile(artifactFile)) {\n+                    Enumeration<JarEntry> entries = jarFile.entries();\n+\n+                    while (entries.hasMoreElements()) {\n+                        JarEntry entry = entries.nextElement();\n+                        if (entry.getName().startsWith(HEALTH_UI_WEBJAR_PREFIX) && !entry.isDirectory()) {\n+                            try (InputStream inputStream = jarFile.getInputStream(entry)) {\n+                                String filename = entry.getName().replace(HEALTH_UI_WEBJAR_PREFIX + \"/\", \"\");\n+                                byte[] content = FileUtil.readFileContents(inputStream);\n+                                if (IGNORE_LIST.contains(filename)) {\n+                                    ClassLoader classLoader = SmallRyeHealthProcessor.class.getClassLoader();\n+                                    try (InputStream resourceAsStream = classLoader\n+                                            .getResourceAsStream(OWN_MEDIA_FOLDER + filename)) {\n+                                        content = IoUtil.readBytes(resourceAsStream);\n+                                    }\n+                                }\n+\n+                                String fileName = HEALTH_UI_FINAL_DESTINATION + \"/\" + filename;\n+\n+                                generatedResourceProducer\n+                                        .produce(new GeneratedResourceBuildItem(fileName, content));\n+\n+                                nativeImageResourceProducer\n+                                        .produce(new NativeImageResourceBuildItem(fileName));\n+\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+\n+            Handler<RoutingContext> handler = recorder\n+                    .uiHandler(HEALTH_UI_FINAL_DESTINATION, httpRootPath.adjustPath(health.rootPathUi));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi, handler));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi + \"/*\", handler));\n+        }\n+    }\n+\n+    private AppArtifact getHealthUiArtifact(CurateOutcomeBuildItem curateOutcomeBuildItem) {\n+        for (AppDependency dep : curateOutcomeBuildItem.getEffectiveModel().getFullDeploymentDeps()) {\n+            if (dep.getArtifact().getArtifactId().equals(HEALTH_UI_WEBJAR_ARTIFACT_ID)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE2MDM5Mg=="}, "originalCommit": {"oid": "0eef62c640442acfd44969ee0952332e93b9628f"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjQ5OTIzOnYy", "diffSide": "RIGHT", "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODoxNjozM1rOGz_CNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODo0MDo1NlrOG0AMVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE2MzMxOA==", "bodyText": "can extractHealthUi be reused here?", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457163318", "createdAt": "2020-07-20T08:16:33Z", "author": {"login": "xstefank"}, "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -278,4 +326,162 @@ public void transform(TransformationContext ctx) {\n \n         });\n     }\n+\n+    // UI\n+\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    void registerUiExtension(\n+            BuildProducer<RouteBuildItem> routeProducer,\n+            BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n+            BuildProducer<NativeImageResourceBuildItem> nativeImageResourceProducer,\n+            BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageDisplayableEndpointProducer,\n+            SmallRyeHealthRecorder recorder,\n+            LaunchModeBuildItem launchMode,\n+            LiveReloadBuildItem liveReload,\n+            HttpRootPathBuildItem httpRootPath,\n+            CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n+\n+        if (!health.enableUi) {\n+            return;\n+        }\n+        if (\"/\".equals(health.rootPathUi)) {\n+            throw new ConfigurationError(\n+                    \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n+        }\n+\n+        String healthPath = httpRootPath.adjustPath(health.rootPath);\n+\n+        if (launchMode.getLaunchMode().isDevOrTest()) {\n+            CachedHealthUI cached = liveReload.getContextObject(CachedHealthUI.class);\n+            boolean extractionNeeded = cached == null;\n+\n+            if (cached != null && !cached.cachedHealthPath.equals(healthPath)) {\n+                try {\n+                    FileUtil.deleteDirectory(Paths.get(cached.cachedDirectory));\n+                } catch (IOException e) {\n+                    LOG.error(\"Failed to clean Health UI temp directory on restart\", e);\n+                }\n+                extractionNeeded = true;\n+            }\n+            if (extractionNeeded) {\n+                if (cached == null) {\n+                    cached = new CachedHealthUI();\n+                    liveReload.setContextObject(CachedHealthUI.class, cached);\n+                    Runtime.getRuntime().addShutdownHook(new Thread(cached, \"Health UI Shutdown Hook\"));\n+                }\n+                try {\n+                    AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+                    Path tempDir = Files.createTempDirectory(TEMP_DIR_PREFIX).toRealPath();\n+                    extractHealthUi(artifact, tempDir);\n+                    cached.cachedDirectory = tempDir.toAbsolutePath().toString();\n+                    cached.cachedHealthPath = healthPath;\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+            Handler<RoutingContext> handler = recorder.uiHandler(cached.cachedDirectory,\n+                    httpRootPath.adjustPath(health.rootPathUi));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi, handler));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi + \"/*\", handler));\n+            notFoundPageDisplayableEndpointProducer\n+                    .produce(new NotFoundPageDisplayableEndpointBuildItem(health.rootPathUi + \"/\"));\n+        } else if (health.alwaysIncludeUi) {\n+            AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+            //we are including in a production artifact\n+            //just stick the files in the generated output\n+            //we could do this for dev mode as well but then we need to extract them every time\n+            for (Path p : artifact.getPaths()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eef62c640442acfd44969ee0952332e93b9628f"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE4MjI5NA==", "bodyText": "Not really no, they do different things.", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457182294", "createdAt": "2020-07-20T08:40:56Z", "author": {"login": "phillip-kruger"}, "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -278,4 +326,162 @@ public void transform(TransformationContext ctx) {\n \n         });\n     }\n+\n+    // UI\n+\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    void registerUiExtension(\n+            BuildProducer<RouteBuildItem> routeProducer,\n+            BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n+            BuildProducer<NativeImageResourceBuildItem> nativeImageResourceProducer,\n+            BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageDisplayableEndpointProducer,\n+            SmallRyeHealthRecorder recorder,\n+            LaunchModeBuildItem launchMode,\n+            LiveReloadBuildItem liveReload,\n+            HttpRootPathBuildItem httpRootPath,\n+            CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n+\n+        if (!health.enableUi) {\n+            return;\n+        }\n+        if (\"/\".equals(health.rootPathUi)) {\n+            throw new ConfigurationError(\n+                    \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n+        }\n+\n+        String healthPath = httpRootPath.adjustPath(health.rootPath);\n+\n+        if (launchMode.getLaunchMode().isDevOrTest()) {\n+            CachedHealthUI cached = liveReload.getContextObject(CachedHealthUI.class);\n+            boolean extractionNeeded = cached == null;\n+\n+            if (cached != null && !cached.cachedHealthPath.equals(healthPath)) {\n+                try {\n+                    FileUtil.deleteDirectory(Paths.get(cached.cachedDirectory));\n+                } catch (IOException e) {\n+                    LOG.error(\"Failed to clean Health UI temp directory on restart\", e);\n+                }\n+                extractionNeeded = true;\n+            }\n+            if (extractionNeeded) {\n+                if (cached == null) {\n+                    cached = new CachedHealthUI();\n+                    liveReload.setContextObject(CachedHealthUI.class, cached);\n+                    Runtime.getRuntime().addShutdownHook(new Thread(cached, \"Health UI Shutdown Hook\"));\n+                }\n+                try {\n+                    AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+                    Path tempDir = Files.createTempDirectory(TEMP_DIR_PREFIX).toRealPath();\n+                    extractHealthUi(artifact, tempDir);\n+                    cached.cachedDirectory = tempDir.toAbsolutePath().toString();\n+                    cached.cachedHealthPath = healthPath;\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+            Handler<RoutingContext> handler = recorder.uiHandler(cached.cachedDirectory,\n+                    httpRootPath.adjustPath(health.rootPathUi));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi, handler));\n+            routeProducer.produce(new RouteBuildItem(health.rootPathUi + \"/*\", handler));\n+            notFoundPageDisplayableEndpointProducer\n+                    .produce(new NotFoundPageDisplayableEndpointBuildItem(health.rootPathUi + \"/\"));\n+        } else if (health.alwaysIncludeUi) {\n+            AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+            //we are including in a production artifact\n+            //just stick the files in the generated output\n+            //we could do this for dev mode as well but then we need to extract them every time\n+            for (Path p : artifact.getPaths()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE2MzMxOA=="}, "originalCommit": {"oid": "0eef62c640442acfd44969ee0952332e93b9628f"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjUwODE4OnYy", "diffSide": "RIGHT", "path": "extensions/smallrye-health/deployment/src/test/java/io/quarkus/smallrye/health/test/ui/ErroneousConfigTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODoxODoyOVrOGz_HRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODozODoyMFrOG0AEYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE2NDYxMw==", "bodyText": "probably forgotten implementation of the test :)", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457164613", "createdAt": "2020-07-20T08:18:29Z", "author": {"login": "xstefank"}, "path": "extensions/smallrye-health/deployment/src/test/java/io/quarkus/smallrye/health/test/ui/ErroneousConfigTest.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package io.quarkus.smallrye.graphql.deployment.ui;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.deployment.configuration.ConfigurationError;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class ErroneousConfigTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .setExpectedException(ConfigurationError.class)\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addAsResource(new StringAsset(\"quarkus.smallrye-health.root-path-ui=/\\n\"), \"application.properties\"));\n+\n+    @Test\n+    public void shouldNotStartApplicationIfUIPathIsASlash() {\n+        Assertions.fail();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eef62c640442acfd44969ee0952332e93b9628f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE4MDI1Ng==", "bodyText": "The app should not startup, as it has invalid config. That is what is being test.", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457180256", "createdAt": "2020-07-20T08:38:20Z", "author": {"login": "phillip-kruger"}, "path": "extensions/smallrye-health/deployment/src/test/java/io/quarkus/smallrye/health/test/ui/ErroneousConfigTest.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package io.quarkus.smallrye.graphql.deployment.ui;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.deployment.configuration.ConfigurationError;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class ErroneousConfigTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .setExpectedException(ConfigurationError.class)\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addAsResource(new StringAsset(\"quarkus.smallrye-health.root-path-ui=/\\n\"), \"application.properties\"));\n+\n+    @Test\n+    public void shouldNotStartApplicationIfUIPathIsASlash() {\n+        Assertions.fail();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE2NDYxMw=="}, "originalCommit": {"oid": "0eef62c640442acfd44969ee0952332e93b9628f"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Mzk0NTU2OnYy", "diffSide": "RIGHT", "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzoxODozOFrOG0L5DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDoxMzozNFrOG0O9QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3Mzk2NA==", "bodyText": "Better move these properties to a ui subgroup", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457373964", "createdAt": "2020-07-20T13:18:38Z", "author": {"login": "gastaldi"}, "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -102,6 +131,26 @@\n          */\n         @ConfigItem(defaultValue = \"/group\")\n         String groupPath;\n+\n+        /**\n+         * The path where Health UI is available.\n+         * The value `/` is not allowed as it blocks the application from serving anything else.\n+         */\n+        @ConfigItem(defaultValue = \"/health-ui\")\n+        String rootPathUi;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2705ae6d8b596906008276c0c0373d349e3b4e89"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM4MzA2NA==", "bodyText": "@gastaldi - do you have an example of this ? I am not sure how/what to do here ? (I just copied from other with UI)", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457383064", "createdAt": "2020-07-20T13:28:51Z", "author": {"login": "phillip-kruger"}, "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -102,6 +131,26 @@\n          */\n         @ConfigItem(defaultValue = \"/group\")\n         String groupPath;\n+\n+        /**\n+         * The path where Health UI is available.\n+         * The value `/` is not allowed as it blocks the application from serving anything else.\n+         */\n+        @ConfigItem(defaultValue = \"/health-ui\")\n+        String rootPathUi;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3Mzk2NA=="}, "originalCommit": {"oid": "2705ae6d8b596906008276c0c0373d349e3b4e89"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM4Nzc2Nw==", "bodyText": "just create a ui @ConfigGroup and a nested class with the UI elements.", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457387767", "createdAt": "2020-07-20T13:34:10Z", "author": {"login": "gsmet"}, "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -102,6 +131,26 @@\n          */\n         @ConfigItem(defaultValue = \"/group\")\n         String groupPath;\n+\n+        /**\n+         * The path where Health UI is available.\n+         * The value `/` is not allowed as it blocks the application from serving anything else.\n+         */\n+        @ConfigItem(defaultValue = \"/health-ui\")\n+        String rootPathUi;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3Mzk2NA=="}, "originalCommit": {"oid": "2705ae6d8b596906008276c0c0373d349e3b4e89"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM4OTkwNg==", "bodyText": "Thanks @gsmet !", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457389906", "createdAt": "2020-07-20T13:36:26Z", "author": {"login": "phillip-kruger"}, "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -102,6 +131,26 @@\n          */\n         @ConfigItem(defaultValue = \"/group\")\n         String groupPath;\n+\n+        /**\n+         * The path where Health UI is available.\n+         * The value `/` is not allowed as it blocks the application from serving anything else.\n+         */\n+        @ConfigItem(defaultValue = \"/health-ui\")\n+        String rootPathUi;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3Mzk2NA=="}, "originalCommit": {"oid": "2705ae6d8b596906008276c0c0373d349e3b4e89"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM5NjUzNw==", "bodyText": "@gsmet  - This will change the config property right ? If so, probably we need to do this in the other UI services to be consistent ?", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457396537", "createdAt": "2020-07-20T13:43:36Z", "author": {"login": "phillip-kruger"}, "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -102,6 +131,26 @@\n          */\n         @ConfigItem(defaultValue = \"/group\")\n         String groupPath;\n+\n+        /**\n+         * The path where Health UI is available.\n+         * The value `/` is not allowed as it blocks the application from serving anything else.\n+         */\n+        @ConfigItem(defaultValue = \"/health-ui\")\n+        String rootPathUi;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3Mzk2NA=="}, "originalCommit": {"oid": "2705ae6d8b596906008276c0c0373d349e3b4e89"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQwNDYzMw==", "bodyText": "Yes, the config property should be: quarkus.smallrye-health.ui.root-path. About the other UI services that would be good to do too", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457404633", "createdAt": "2020-07-20T13:52:40Z", "author": {"login": "gastaldi"}, "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -102,6 +131,26 @@\n          */\n         @ConfigItem(defaultValue = \"/group\")\n         String groupPath;\n+\n+        /**\n+         * The path where Health UI is available.\n+         * The value `/` is not allowed as it blocks the application from serving anything else.\n+         */\n+        @ConfigItem(defaultValue = \"/health-ui\")\n+        String rootPathUi;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3Mzk2NA=="}, "originalCommit": {"oid": "2705ae6d8b596906008276c0c0373d349e3b4e89"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQwOTc2Nw==", "bodyText": "Cool. Changes done, building local, then I'll push", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457409767", "createdAt": "2020-07-20T13:58:07Z", "author": {"login": "phillip-kruger"}, "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -102,6 +131,26 @@\n          */\n         @ConfigItem(defaultValue = \"/group\")\n         String groupPath;\n+\n+        /**\n+         * The path where Health UI is available.\n+         * The value `/` is not allowed as it blocks the application from serving anything else.\n+         */\n+        @ConfigItem(defaultValue = \"/health-ui\")\n+        String rootPathUi;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3Mzk2NA=="}, "originalCommit": {"oid": "2705ae6d8b596906008276c0c0373d349e3b4e89"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyNDE5Mg==", "bodyText": "Done :)", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457424192", "createdAt": "2020-07-20T14:13:34Z", "author": {"login": "phillip-kruger"}, "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -102,6 +131,26 @@\n          */\n         @ConfigItem(defaultValue = \"/group\")\n         String groupPath;\n+\n+        /**\n+         * The path where Health UI is available.\n+         * The value `/` is not allowed as it blocks the application from serving anything else.\n+         */\n+        @ConfigItem(defaultValue = \"/health-ui\")\n+        String rootPathUi;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3Mzk2NA=="}, "originalCommit": {"oid": "2705ae6d8b596906008276c0c0373d349e3b4e89"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NzA2ODE2OnYy", "diffSide": "RIGHT", "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNTo0MTo0MlrOG0o47A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjozMzoyN1rOG0qAgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg0OTA2OA==", "bodyText": "This may throw a NPE", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457849068", "createdAt": "2020-07-21T05:41:42Z", "author": {"login": "gastaldi"}, "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -278,4 +278,179 @@ public void transform(TransformationContext ctx) {\n \n         });\n     }\n+\n+    // UI\n+\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    void registerUiExtension(\n+            BuildProducer<RouteBuildItem> routeProducer,\n+            BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n+            BuildProducer<NativeImageResourceBuildItem> nativeImageResourceProducer,\n+            BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageDisplayableEndpointProducer,\n+            SmallRyeHealthRecorder recorder,\n+            LaunchModeBuildItem launchMode,\n+            LiveReloadBuildItem liveReload,\n+            HttpRootPathBuildItem httpRootPath,\n+            CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n+\n+        if (!health.ui.enable) {\n+            return;\n+        }\n+        if (\"/\".equals(health.ui.rootPath)) {\n+            throw new ConfigurationError(\n+                    \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n+        }\n+\n+        String healthPath = httpRootPath.adjustPath(health.rootPath);\n+\n+        if (launchMode.getLaunchMode().isDevOrTest()) {\n+            CachedHealthUI cached = liveReload.getContextObject(CachedHealthUI.class);\n+            boolean extractionNeeded = cached == null;\n+\n+            if (cached != null && !cached.cachedHealthPath.equals(healthPath)) {\n+                try {\n+                    FileUtil.deleteDirectory(Paths.get(cached.cachedDirectory));\n+                } catch (IOException e) {\n+                    LOG.error(\"Failed to clean Health UI temp directory on restart\", e);\n+                }\n+                extractionNeeded = true;\n+            }\n+            if (extractionNeeded) {\n+                if (cached == null) {\n+                    cached = new CachedHealthUI();\n+                    liveReload.setContextObject(CachedHealthUI.class, cached);\n+                    Runtime.getRuntime().addShutdownHook(new Thread(cached, \"Health UI Shutdown Hook\"));\n+                }\n+                try {\n+                    AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+                    Path tempDir = Files.createTempDirectory(TEMP_DIR_PREFIX).toRealPath();\n+                    extractHealthUi(artifact, tempDir);\n+                    updateApiUrl(tempDir.resolve(FILE_TO_UPDATE), healthPath);\n+                    cached.cachedDirectory = tempDir.toAbsolutePath().toString();\n+                    cached.cachedHealthPath = healthPath;\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+            Handler<RoutingContext> handler = recorder.uiHandler(cached.cachedDirectory,\n+                    httpRootPath.adjustPath(health.ui.rootPath));\n+            routeProducer.produce(new RouteBuildItem(health.ui.rootPath, handler));\n+            routeProducer.produce(new RouteBuildItem(health.ui.rootPath + \"/*\", handler));\n+            notFoundPageDisplayableEndpointProducer\n+                    .produce(new NotFoundPageDisplayableEndpointBuildItem(health.ui.rootPath + \"/\"));\n+        } else if (health.ui.alwaysInclude) {\n+            AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+            //we are including in a production artifact\n+            //just stick the files in the generated output\n+            //we could do this for dev mode as well but then we need to extract them every time\n+            for (Path p : artifact.getPaths()) {\n+                File artifactFile = p.toFile();\n+                try (JarFile jarFile = new JarFile(artifactFile)) {\n+                    Enumeration<JarEntry> entries = jarFile.entries();\n+\n+                    while (entries.hasMoreElements()) {\n+                        JarEntry entry = entries.nextElement();\n+                        if (entry.getName().startsWith(HEALTH_UI_WEBJAR_PREFIX) && !entry.isDirectory()) {\n+                            try (InputStream inputStream = jarFile.getInputStream(entry)) {\n+                                String filename = entry.getName().replace(HEALTH_UI_WEBJAR_PREFIX + \"/\", \"\");\n+                                byte[] content = FileUtil.readFileContents(inputStream);\n+                                if (entry.getName().endsWith(FILE_TO_UPDATE)) {\n+                                    content = updateApiUrl(new String(content, StandardCharsets.UTF_8), healthPath)\n+                                            .getBytes(StandardCharsets.UTF_8);\n+                                }\n+                                if (IGNORE_LIST.contains(filename)) {\n+                                    ClassLoader classLoader = SmallRyeHealthProcessor.class.getClassLoader();\n+                                    try (InputStream resourceAsStream = classLoader", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "464622c898f75c9e59b0a0236bf773435eeb72d3"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2NzM5Mg==", "bodyText": "Hi @gastaldi - what might be null here ?", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457867392", "createdAt": "2020-07-21T06:33:27Z", "author": {"login": "phillip-kruger"}, "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -278,4 +278,179 @@ public void transform(TransformationContext ctx) {\n \n         });\n     }\n+\n+    // UI\n+\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    void registerUiExtension(\n+            BuildProducer<RouteBuildItem> routeProducer,\n+            BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n+            BuildProducer<NativeImageResourceBuildItem> nativeImageResourceProducer,\n+            BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageDisplayableEndpointProducer,\n+            SmallRyeHealthRecorder recorder,\n+            LaunchModeBuildItem launchMode,\n+            LiveReloadBuildItem liveReload,\n+            HttpRootPathBuildItem httpRootPath,\n+            CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n+\n+        if (!health.ui.enable) {\n+            return;\n+        }\n+        if (\"/\".equals(health.ui.rootPath)) {\n+            throw new ConfigurationError(\n+                    \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n+        }\n+\n+        String healthPath = httpRootPath.adjustPath(health.rootPath);\n+\n+        if (launchMode.getLaunchMode().isDevOrTest()) {\n+            CachedHealthUI cached = liveReload.getContextObject(CachedHealthUI.class);\n+            boolean extractionNeeded = cached == null;\n+\n+            if (cached != null && !cached.cachedHealthPath.equals(healthPath)) {\n+                try {\n+                    FileUtil.deleteDirectory(Paths.get(cached.cachedDirectory));\n+                } catch (IOException e) {\n+                    LOG.error(\"Failed to clean Health UI temp directory on restart\", e);\n+                }\n+                extractionNeeded = true;\n+            }\n+            if (extractionNeeded) {\n+                if (cached == null) {\n+                    cached = new CachedHealthUI();\n+                    liveReload.setContextObject(CachedHealthUI.class, cached);\n+                    Runtime.getRuntime().addShutdownHook(new Thread(cached, \"Health UI Shutdown Hook\"));\n+                }\n+                try {\n+                    AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+                    Path tempDir = Files.createTempDirectory(TEMP_DIR_PREFIX).toRealPath();\n+                    extractHealthUi(artifact, tempDir);\n+                    updateApiUrl(tempDir.resolve(FILE_TO_UPDATE), healthPath);\n+                    cached.cachedDirectory = tempDir.toAbsolutePath().toString();\n+                    cached.cachedHealthPath = healthPath;\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+            Handler<RoutingContext> handler = recorder.uiHandler(cached.cachedDirectory,\n+                    httpRootPath.adjustPath(health.ui.rootPath));\n+            routeProducer.produce(new RouteBuildItem(health.ui.rootPath, handler));\n+            routeProducer.produce(new RouteBuildItem(health.ui.rootPath + \"/*\", handler));\n+            notFoundPageDisplayableEndpointProducer\n+                    .produce(new NotFoundPageDisplayableEndpointBuildItem(health.ui.rootPath + \"/\"));\n+        } else if (health.ui.alwaysInclude) {\n+            AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+            //we are including in a production artifact\n+            //just stick the files in the generated output\n+            //we could do this for dev mode as well but then we need to extract them every time\n+            for (Path p : artifact.getPaths()) {\n+                File artifactFile = p.toFile();\n+                try (JarFile jarFile = new JarFile(artifactFile)) {\n+                    Enumeration<JarEntry> entries = jarFile.entries();\n+\n+                    while (entries.hasMoreElements()) {\n+                        JarEntry entry = entries.nextElement();\n+                        if (entry.getName().startsWith(HEALTH_UI_WEBJAR_PREFIX) && !entry.isDirectory()) {\n+                            try (InputStream inputStream = jarFile.getInputStream(entry)) {\n+                                String filename = entry.getName().replace(HEALTH_UI_WEBJAR_PREFIX + \"/\", \"\");\n+                                byte[] content = FileUtil.readFileContents(inputStream);\n+                                if (entry.getName().endsWith(FILE_TO_UPDATE)) {\n+                                    content = updateApiUrl(new String(content, StandardCharsets.UTF_8), healthPath)\n+                                            .getBytes(StandardCharsets.UTF_8);\n+                                }\n+                                if (IGNORE_LIST.contains(filename)) {\n+                                    ClassLoader classLoader = SmallRyeHealthProcessor.class.getClassLoader();\n+                                    try (InputStream resourceAsStream = classLoader", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg0OTA2OA=="}, "originalCommit": {"oid": "464622c898f75c9e59b0a0236bf773435eeb72d3"}, "originalPosition": 221}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NzA3MDI4OnYy", "diffSide": "RIGHT", "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNTo0Mjo0MFrOG0o6Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNTo0Mjo0MFrOG0o6Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg0OTM3NQ==", "bodyText": "Throw UncheckedIoException instead", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457849375", "createdAt": "2020-07-21T05:42:40Z", "author": {"login": "gastaldi"}, "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -278,4 +278,179 @@ public void transform(TransformationContext ctx) {\n \n         });\n     }\n+\n+    // UI\n+\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    void registerUiExtension(\n+            BuildProducer<RouteBuildItem> routeProducer,\n+            BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n+            BuildProducer<NativeImageResourceBuildItem> nativeImageResourceProducer,\n+            BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageDisplayableEndpointProducer,\n+            SmallRyeHealthRecorder recorder,\n+            LaunchModeBuildItem launchMode,\n+            LiveReloadBuildItem liveReload,\n+            HttpRootPathBuildItem httpRootPath,\n+            CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n+\n+        if (!health.ui.enable) {\n+            return;\n+        }\n+        if (\"/\".equals(health.ui.rootPath)) {\n+            throw new ConfigurationError(\n+                    \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n+        }\n+\n+        String healthPath = httpRootPath.adjustPath(health.rootPath);\n+\n+        if (launchMode.getLaunchMode().isDevOrTest()) {\n+            CachedHealthUI cached = liveReload.getContextObject(CachedHealthUI.class);\n+            boolean extractionNeeded = cached == null;\n+\n+            if (cached != null && !cached.cachedHealthPath.equals(healthPath)) {\n+                try {\n+                    FileUtil.deleteDirectory(Paths.get(cached.cachedDirectory));\n+                } catch (IOException e) {\n+                    LOG.error(\"Failed to clean Health UI temp directory on restart\", e);\n+                }\n+                extractionNeeded = true;\n+            }\n+            if (extractionNeeded) {\n+                if (cached == null) {\n+                    cached = new CachedHealthUI();\n+                    liveReload.setContextObject(CachedHealthUI.class, cached);\n+                    Runtime.getRuntime().addShutdownHook(new Thread(cached, \"Health UI Shutdown Hook\"));\n+                }\n+                try {\n+                    AppArtifact artifact = getHealthUiArtifact(curateOutcomeBuildItem);\n+                    Path tempDir = Files.createTempDirectory(TEMP_DIR_PREFIX).toRealPath();\n+                    extractHealthUi(artifact, tempDir);\n+                    updateApiUrl(tempDir.resolve(FILE_TO_UPDATE), healthPath);\n+                    cached.cachedDirectory = tempDir.toAbsolutePath().toString();\n+                    cached.cachedHealthPath = healthPath;\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "464622c898f75c9e59b0a0236bf773435eeb72d3"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NzUwNTE0OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/microprofile-health.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwODoxMDo0M1rOG0s9gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwODoxNzoxNFrOG0tMQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkxNTc3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            == Health UI\n          \n          \n            \n            == Health UI (Experimental API not included in the MicroProfile specification yet)", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457915778", "createdAt": "2020-07-21T08:10:43Z", "author": {"login": "xstefank"}, "path": "docs/src/main/asciidoc/microprofile-health.adoc", "diffHunk": "@@ -330,6 +330,16 @@ that will validate each datasources: link:datasource#datasource-health-check[Dat\n \n You can disable extension health check via the property `quarkus.health.extensions.enabled` so none will be automatically registered.\n \n+== Health UI", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a130fb367a109f0879edb6b5052274ced6d2ea09"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkxODA1OA==", "bodyText": "Thanks !", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457918058", "createdAt": "2020-07-21T08:14:45Z", "author": {"login": "phillip-kruger"}, "path": "docs/src/main/asciidoc/microprofile-health.adoc", "diffHunk": "@@ -330,6 +330,16 @@ that will validate each datasources: link:datasource#datasource-health-check[Dat\n \n You can disable extension health check via the property `quarkus.health.extensions.enabled` so none will be automatically registered.\n \n+== Health UI", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkxNTc3OA=="}, "originalCommit": {"oid": "a130fb367a109f0879edb6b5052274ced6d2ea09"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkxOTU1Mg==", "bodyText": "I made it\nNOTE: Experimental - not included in the MicroProfile specification\nso it's not part of the Heading.", "url": "https://github.com/quarkusio/quarkus/pull/10828#discussion_r457919552", "createdAt": "2020-07-21T08:17:14Z", "author": {"login": "phillip-kruger"}, "path": "docs/src/main/asciidoc/microprofile-health.adoc", "diffHunk": "@@ -330,6 +330,16 @@ that will validate each datasources: link:datasource#datasource-health-check[Dat\n \n You can disable extension health check via the property `quarkus.health.extensions.enabled` so none will be automatically registered.\n \n+== Health UI", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkxNTc3OA=="}, "originalCommit": {"oid": "a130fb367a109f0879edb6b5052274ced6d2ea09"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 919, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}