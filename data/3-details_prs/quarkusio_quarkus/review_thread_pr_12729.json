{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNzE1NTI0", "number": 12729, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMzo1MjowMlrOEtuTJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTo1NToxN1rOEuaFhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Mzc5OTQwOnYy", "diffSide": "RIGHT", "path": "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMzo1MjowMlrOHhrtUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMzo1MjowMlrOHhrtUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA4MTE2OQ==", "bodyText": "Preferred generating JWT tokens with private key in test/resources. Still having problems validating them via public key.", "url": "https://github.com/quarkusio/quarkus/pull/12729#discussion_r505081169", "createdAt": "2020-10-14T23:52:02Z", "author": {"login": "cemnura"}, "path": "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package io.quarkus.it.keycloak;\n+\n+import static org.awaitility.Awaitility.await;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Base64;\n+import java.util.HashSet;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.RepeatedTest;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.smallrye.jwt.build.Jwt;\n+\n+/**\n+ * @author <a href=\"mailto:psilva@redhat.com\">Pedro Igor</a>\n+ */\n+@QuarkusTest\n+@QuarkusTestResource(KeycloakTestResource.class)\n+public class BearerTokenAuthorizationTest {\n+\n+    @Test\n+    public void testSecureAccessSuccessWithCors() {\n+        String origin = \"http://custom.origin.quarkus\";\n+        String methods = \"GET\";\n+        String headers = \"X-Custom\";\n+        RestAssured.given().header(\"Origin\", origin)\n+                .header(\"Access-Control-Request-Method\", methods)\n+                .header(\"Access-Control-Request-Headers\", headers)\n+                .when()\n+                .options(\"/api\").then()\n+                .statusCode(200)\n+                .header(\"Access-Control-Allow-Origin\", origin)\n+                .header(\"Access-Control-Allow-Methods\", methods)\n+                .header(\"Access-Control-Allow-Headers\", headers);\n+\n+        for (String username : Arrays.asList(\"alice\", \"jdoe\", \"admin\")) {\n+            RestAssured.given().auth().oauth2(getAccessToken(username))\n+                    .when().get(\"/api/users/preferredUserName\")\n+                    .then()\n+                    .statusCode(200)\n+                    .body(\"userName\", equalTo(username));\n+        }\n+    }\n+\n+    @Test\n+    public void testSecureAccessSuccessCustomPrincipal() {\n+        for (String username : Arrays.asList(\"alice\", \"jdoe\", \"admin\")) {\n+            RestAssured.given().auth().oauth2(getAccessToken(username))\n+                    .when().get(\"/api/users/me\")\n+                    .then()\n+                    .statusCode(200)\n+                    .body(\"userName\", equalTo(username + \"@gmail.com\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testBasicAuth() {\n+        byte[] basicAuthBytes = \"alice:password\".getBytes(StandardCharsets.UTF_8);\n+        RestAssured.given()\n+                .header(\"Authorization\", \"Basic \" + Base64.getEncoder().encodeToString(basicAuthBytes))\n+                .when().get(\"/api/users/me\")\n+                .then()\n+                .statusCode(200)\n+                .body(\"userName\", equalTo(\"alice\"));\n+    }\n+\n+    @Test\n+    public void testSecureAccessSuccessPreferredUsername() {\n+        for (String username : Arrays.asList(\"alice\", \"jdoe\", \"admin\")) {\n+            RestAssured.given().auth().oauth2(getAccessToken(username))\n+                    .when().get(\"/api/users/preferredUserName\")\n+                    .then()\n+                    .statusCode(200)\n+                    .body(\"userName\", equalTo(username));\n+        }\n+    }\n+\n+    @Test\n+    public void testAccessAdminResource() {\n+        RestAssured.given().auth().oauth2(getAccessToken(\"admin\"))\n+                .when().get(\"/api/admin\")\n+                .then()\n+                .statusCode(200)\n+                .body(Matchers.containsString(\"granted:admin\"));\n+    }\n+\n+    @Test\n+    public void testAccessAdminResourceCustomHeaderNoBearerScheme() {\n+        RestAssured.given().header(\"X-Forwarded-Authorization\", getAccessToken(\"admin\"))\n+                .when().get(\"/api/admin\")\n+                .then()\n+                .statusCode(401);\n+    }\n+\n+    @Test\n+    public void testAccessAdminResourceCustomHeaderBearerScheme() {\n+        RestAssured.given().header(\"X-Forwarded-Authorization\", getAccessToken(\"admin\"))\n+                .when().get(\"/api/admin\")\n+                .then()\n+                .statusCode(401);\n+    }\n+\n+    @Test\n+    public void testAccessAdminResourceWithRefreshToken() {\n+        RestAssured.given().auth().oauth2(getRefreshToken(\"admin\"))\n+                .when().get(\"/api/admin\")\n+                .then()\n+                .statusCode(401);\n+    }\n+\n+    @Test\n+    public void testPermissionHttpInformationProvider() {\n+        RestAssured.given().auth().oauth2(getAccessToken(\"alice\"))\n+                .when().get(\"/api/permission/http-cip\")\n+                .then()\n+                .statusCode(200)\n+                .body(\"preferred_username\", equalTo(\"alice\"));\n+    }\n+\n+    @Test\n+    public void testDeniedAccessAdminResource() {\n+        RestAssured.given().auth().oauth2(getAccessToken(\"alice\"))\n+                .when().get(\"/api/admin\")\n+                .then()\n+                .statusCode(403);\n+    }\n+\n+    @Test\n+    public void testDeniedNoBearerToken() {\n+        RestAssured.given()\n+                .when().get(\"/api/users/me\").then()\n+                .statusCode(401);\n+    }\n+\n+    //see https://github.com/quarkusio/quarkus/issues/5809\n+    @RepeatedTest(20)\n+    public void testOidcAndVertxHandler() {\n+        RestAssured.given().auth().oauth2(getAccessToken(\"alice\"))\n+                .when().body(\"Hello World\").post(\"/vertx\")\n+                .then()\n+                .statusCode(200)\n+                .body(equalTo(\"Hello World\"));\n+    }\n+\n+    @Test\n+    public void testExpiredBearerToken() throws InterruptedException {\n+        String token = getAccessToken(\"alice\");\n+\n+        await()\n+                .pollDelay(3, TimeUnit.SECONDS)\n+                .atMost(5, TimeUnit.SECONDS).until(\n+                        () -> RestAssured.given().auth().oauth2(token).when()\n+                                .get(\"/api/users/me\").thenReturn().statusCode() == 401);\n+    }\n+\n+    private String getAccessToken(String userName) {\n+        return Jwt.claim(\"preferred_username\", userName)\n+                .groups(new HashSet<>(Arrays.asList(\"user\", \"admin\")))\n+                .sign();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9931090247dfd32f658a72157688fe6ffb17c0d3"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjAwNDcyOnYy", "diffSide": "RIGHT", "path": "integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/PermissionResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDo0MDoyOFrOHiBsBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTo1Nzo1NVrOHiyocg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ0MTI4Nw==", "bodyText": "@cemnura Please drop this resource and also Vertx resource below(and correspondiing tests), as it is not critical for proving the wiremock approach works, here we can just try Admin and User resources", "url": "https://github.com/quarkusio/quarkus/pull/12729#discussion_r505441287", "createdAt": "2020-10-15T10:40:28Z", "author": {"login": "sberyozkin"}, "path": "integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/PermissionResource.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package io.quarkus.it.keycloak;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9931090247dfd32f658a72157688fe6ffb17c0d3"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI0MzE4Ng==", "bodyText": "@cemnura you can safely drop this resource :-) as it is not tested anylonger", "url": "https://github.com/quarkusio/quarkus/pull/12729#discussion_r506243186", "createdAt": "2020-10-16T09:57:55Z", "author": {"login": "sberyozkin"}, "path": "integration-tests/oidc-wiremock/src/main/java/io/quarkus/it/keycloak/PermissionResource.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package io.quarkus.it.keycloak;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ0MTI4Nw=="}, "originalCommit": {"oid": "9931090247dfd32f658a72157688fe6ffb17c0d3"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjAwODM2OnYy", "diffSide": "RIGHT", "path": "integration-tests/oidc-wiremock/src/main/resources/application.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDo0MTozMVrOHiBuTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDo0MTozMVrOHiBuTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ0MTg2OQ==", "bodyText": "Please remove lines 9-14 and also the tests checking basic auth", "url": "https://github.com/quarkusio/quarkus/pull/12729#discussion_r505441869", "createdAt": "2020-10-15T10:41:31Z", "author": {"login": "sberyozkin"}, "path": "integration-tests/oidc-wiremock/src/main/resources/application.properties", "diffHunk": "@@ -0,0 +1,15 @@\n+# Configuration file\n+quarkus.oidc.auth-server-url=${keycloak.ssl.url}/realms/quarkus/\n+quarkus.oidc.client-id=quarkus-app\n+quarkus.oidc.credentials.secret=secret\n+quarkus.oidc.token.principal-claim=email\n+quarkus.oidc.tls.verification=none\n+quarkus.http.cors=true\n+\n+quarkus.http.auth.basic=true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9931090247dfd32f658a72157688fe6ffb17c0d3"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjAxMzM5OnYy", "diffSide": "RIGHT", "path": "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/KeycloakTestResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDo0Mjo1OFrOHiBxkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDo0Mjo1OFrOHiBxkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ0MjcwNw==", "bodyText": "You can just remove this commented code out", "url": "https://github.com/quarkusio/quarkus/pull/12729#discussion_r505442707", "createdAt": "2020-10-15T10:42:58Z", "author": {"login": "sberyozkin"}, "path": "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/KeycloakTestResource.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package io.quarkus.it.keycloak;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.get;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.ws.rs.core.MediaType;\n+\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import com.github.tomakehurst.wiremock.client.WireMock;\n+\n+import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n+\n+public class KeycloakTestResource implements QuarkusTestResourceLifecycleManager {\n+\n+    private WireMockServer server;\n+\n+    @Override\n+    public Map<String, String> start() {\n+\n+        server = new WireMockServer(options().port(8180));\n+        server.start();\n+\n+        WireMock.configureFor(8180);\n+        WireMock.stubFor(\n+                get(urlEqualTo(\"/auth/realms/quarkus/.well-known/openid-configuration\"))\n+                        .willReturn(aResponse()\n+                                .withHeader(\"Content-Type\", MediaType.APPLICATION_JSON)\n+                                .withBody(\"{\\n\" +\n+                                        \"    \\\"authorization_endpoint\\\": \\\"http://localhost:8180/authenticate\\\",\\n\" +\n+                                        \"    \\\"end_session_endpoint\\\": \\\"http://localhost:8180/logout\\\",\\n\" +\n+                                        \"    \\\"id_token_signing_alg_values_supported\\\": [\\n\" +\n+                                        \"        \\\"RS256\\\",\\n\" +\n+                                        \"        \\\"ES256\\\",\\n\" +\n+                                        \"        \\\"HS256\\\"\\n\" +\n+                                        \"    ],\\n\" +\n+                                        \"    \\\"issuer\\\": \\\"http://localhost:8180/auth/realms/quarkus\\\",\\n\" +\n+                                        \"    \\\"jwks_uri\\\": \\\"http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/certs\\\",\\n\"\n+                                        +\n+                                        \"    \\\"response_types_supported\\\": [\\n\" +\n+                                        \"        \\\"code\\\",\\n\" +\n+                                        \"        \\\"code id_token\\\",\\n\" +\n+                                        \"        \\\"id_token\\\",\\n\" +\n+                                        \"        \\\"token id_token\\\"\\n\" +\n+                                        \"    ],\\n\" +\n+                                        \"    \\\"subject_types_supported\\\": [\\n\" +\n+                                        \"        \\\"public\\\"\\n\" +\n+                                        \"    ],\\n\" +\n+                                        \"    \\\"token_endpoint\\\": \\\"http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/token\\\"\\n\"\n+                                        +\n+                                        \"}\")));\n+\n+        WireMock.stubFor(\n+                get(urlEqualTo(\"/auth/realms/quarkus/protocol/openid-connect/certs\"))\n+                        .willReturn(aResponse()\n+                                .withHeader(\"Content-Type\", MediaType.APPLICATION_JSON)\n+                                .withBody(\"{\\n\" +\n+                                        \"\\\"keys\\\": [\\n\" +\n+                                        \"  {\\n\" +\n+                                        \"    \\\"alg\\\": \\\"RS256\\\",\\n\" +\n+                                        \"    \\\"kty\\\": \\\"RSA\\\",\\n\" +\n+                                        \"    \\\"use\\\": \\\"sig\\\",\\n\" +\n+                                        \"    \\\"x5c\\\": [\\n\" +\n+                                        \"      \\\"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlivFI8qB4D0y2jy0CfEqFyy46R0o7S8TKpsx5xbHKoU1VWg6QkQm+ntyIv1p4kE1sPEQO73+HY8+Bzs75XwRTYL1BmR1w8J5hmjVWjc6R2BTBGAYRPFRhor3kpM6ni2SPmNNhurEAHw7TaqszP5eUF/F9+KEBWkwVta+PZ37bwqSE4sCb1soZFrVz/UT/LF4tYpuVYt3YbqToZ3pZOZ9AX2o1GCG3xwOjkc4x0W7ezbQZdC9iftPxVHR8irOijJRRjcPDtA6vPKpzLl6CyYnsIYPd99ltwxTHjr3npfv/3Lw50bAkbT4HeLFxTx4flEoZLKO/g0bAoV2uqBhkA9xnQIDAQAB\\\"\\n\"\n+                                        +\n+                                        \"    ],\\n\" +\n+                                        \"    \\\"n\\\": \\\"yeNlzlub94YgerT030codqEztjfU_S6X4DbDA_iVKkjAWtYfPHDzz_sPCT1Axz6isZdf3lHpq_gYX4Sz-cbe4rjmigxUxr-FgKHQy3HeCdK6hNq9ASQvMK9LBOpXDNn7mei6RZWom4wo3CMvvsY1w8tjtfLb-yQwJPltHxShZq5-ihC9irpLI9xEBTgG12q5lGIFPhTl_7inA1PFK97LuSLnTJzW0bj096v_TMDg7pOWm_zHtF53qbVsI0e3v5nmdKXdFf9BjIARRfVrbxVxiZHjU6zL6jY5QJdh1QCmENoejj_ytspMmGW7yMRxzUqgxcAqOBpVm0b-_mW3HoBdjQ\\\",\\n\"\n+                                        +\n+                                        \"    \\\"e\\\": \\\"AQAB\\\",\\n\" +\n+                                        \"    \\\"kid\\\": \\\"NjVBRjY5MDlCMUIwNzU4RTA2QzZFMDQ4QzQ2MDAyQjVDNjk1RTM2Qg\\\",\\n\" +\n+                                        \"    \\\"x5t\\\": \\\"NjVBRjY5MDlCMUIwNzU4RTA2QzZFMDQ4QzQ2MDAyQjVDNjk1RTM2Qg\\\"\\n\" +\n+                                        \"  }\\n\" +\n+                                        \"]}\")));\n+\n+        //        WireMock.stubFor(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9931090247dfd32f658a72157688fe6ffb17c0d3"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjA3NzM2OnYy", "diffSide": "RIGHT", "path": "integration-tests/oidc-wiremock/src/test/resources/privateKey.pem", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTowMTo0MlrOHiCZMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTowMTo0MlrOHiCZMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1Mjg0OA==", "bodyText": "@cemnura use JWK format here, copy this file,\nhttps://github.com/smallrye/smallrye-jwt/blob/master/testsuite/basic/src/test/resources/decryptPrivateKey.jwk (just rename ir to privateKey.jwk)", "url": "https://github.com/quarkusio/quarkus/pull/12729#discussion_r505452848", "createdAt": "2020-10-15T11:01:42Z", "author": {"login": "sberyozkin"}, "path": "integration-tests/oidc-wiremock/src/test/resources/privateKey.pem", "diffHunk": "@@ -0,0 +1,28 @@\n+-----BEGIN PRIVATE KEY-----", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9931090247dfd32f658a72157688fe6ffb17c0d3"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjA4NzMwOnYy", "diffSide": "RIGHT", "path": "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/KeycloakTestResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTowNDozNlrOHiCfCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTowNDozNlrOHiCfCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1NDM0NA==", "bodyText": "@cemnura please return the content of this file here,\nhttps://github.com/smallrye/smallrye-jwt/blob/master/testsuite/basic/src/test/resources/encryptPublicKey.jwk - and please add a kid property, say, 1 (it has to match the value you will set above in the builder)", "url": "https://github.com/quarkusio/quarkus/pull/12729#discussion_r505454344", "createdAt": "2020-10-15T11:04:36Z", "author": {"login": "sberyozkin"}, "path": "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/KeycloakTestResource.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package io.quarkus.it.keycloak;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.get;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.ws.rs.core.MediaType;\n+\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import com.github.tomakehurst.wiremock.client.WireMock;\n+\n+import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n+\n+public class KeycloakTestResource implements QuarkusTestResourceLifecycleManager {\n+\n+    private WireMockServer server;\n+\n+    @Override\n+    public Map<String, String> start() {\n+\n+        server = new WireMockServer(options().port(8180));\n+        server.start();\n+\n+        WireMock.configureFor(8180);\n+        WireMock.stubFor(\n+                get(urlEqualTo(\"/auth/realms/quarkus/.well-known/openid-configuration\"))\n+                        .willReturn(aResponse()\n+                                .withHeader(\"Content-Type\", MediaType.APPLICATION_JSON)\n+                                .withBody(\"{\\n\" +\n+                                        \"    \\\"authorization_endpoint\\\": \\\"http://localhost:8180/authenticate\\\",\\n\" +\n+                                        \"    \\\"end_session_endpoint\\\": \\\"http://localhost:8180/logout\\\",\\n\" +\n+                                        \"    \\\"id_token_signing_alg_values_supported\\\": [\\n\" +\n+                                        \"        \\\"RS256\\\",\\n\" +\n+                                        \"        \\\"ES256\\\",\\n\" +\n+                                        \"        \\\"HS256\\\"\\n\" +\n+                                        \"    ],\\n\" +\n+                                        \"    \\\"issuer\\\": \\\"http://localhost:8180/auth/realms/quarkus\\\",\\n\" +\n+                                        \"    \\\"jwks_uri\\\": \\\"http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/certs\\\",\\n\"\n+                                        +\n+                                        \"    \\\"response_types_supported\\\": [\\n\" +\n+                                        \"        \\\"code\\\",\\n\" +\n+                                        \"        \\\"code id_token\\\",\\n\" +\n+                                        \"        \\\"id_token\\\",\\n\" +\n+                                        \"        \\\"token id_token\\\"\\n\" +\n+                                        \"    ],\\n\" +\n+                                        \"    \\\"subject_types_supported\\\": [\\n\" +\n+                                        \"        \\\"public\\\"\\n\" +\n+                                        \"    ],\\n\" +\n+                                        \"    \\\"token_endpoint\\\": \\\"http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/token\\\"\\n\"\n+                                        +\n+                                        \"}\")));\n+\n+        WireMock.stubFor(\n+                get(urlEqualTo(\"/auth/realms/quarkus/protocol/openid-connect/certs\"))\n+                        .willReturn(aResponse()\n+                                .withHeader(\"Content-Type\", MediaType.APPLICATION_JSON)\n+                                .withBody(\"{\\n\" +\n+                                        \"\\\"keys\\\": [\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9931090247dfd32f658a72157688fe6ffb17c0d3"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjA5MjU1OnYy", "diffSide": "RIGHT", "path": "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTowNjoxNVrOHiCiQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTowNjoxNVrOHiCiQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1NTE3MA==", "bodyText": "drop this one", "url": "https://github.com/quarkusio/quarkus/pull/12729#discussion_r505455170", "createdAt": "2020-10-15T11:06:15Z", "author": {"login": "sberyozkin"}, "path": "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package io.quarkus.it.keycloak;\n+\n+import static org.awaitility.Awaitility.await;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Base64;\n+import java.util.HashSet;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.RepeatedTest;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.smallrye.jwt.build.Jwt;\n+\n+/**\n+ * @author <a href=\"mailto:psilva@redhat.com\">Pedro Igor</a>\n+ */\n+@QuarkusTest\n+@QuarkusTestResource(KeycloakTestResource.class)\n+public class BearerTokenAuthorizationTest {\n+\n+    @Test\n+    public void testSecureAccessSuccessWithCors() {\n+        String origin = \"http://custom.origin.quarkus\";\n+        String methods = \"GET\";\n+        String headers = \"X-Custom\";\n+        RestAssured.given().header(\"Origin\", origin)\n+                .header(\"Access-Control-Request-Method\", methods)\n+                .header(\"Access-Control-Request-Headers\", headers)\n+                .when()\n+                .options(\"/api\").then()\n+                .statusCode(200)\n+                .header(\"Access-Control-Allow-Origin\", origin)\n+                .header(\"Access-Control-Allow-Methods\", methods)\n+                .header(\"Access-Control-Allow-Headers\", headers);\n+\n+        for (String username : Arrays.asList(\"alice\", \"jdoe\", \"admin\")) {\n+            RestAssured.given().auth().oauth2(getAccessToken(username))\n+                    .when().get(\"/api/users/preferredUserName\")\n+                    .then()\n+                    .statusCode(200)\n+                    .body(\"userName\", equalTo(username));\n+        }\n+    }\n+\n+    @Test\n+    public void testSecureAccessSuccessCustomPrincipal() {\n+        for (String username : Arrays.asList(\"alice\", \"jdoe\", \"admin\")) {\n+            RestAssured.given().auth().oauth2(getAccessToken(username))\n+                    .when().get(\"/api/users/me\")\n+                    .then()\n+                    .statusCode(200)\n+                    .body(\"userName\", equalTo(username + \"@gmail.com\"));\n+        }\n+    }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9931090247dfd32f658a72157688fe6ffb17c0d3"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjA5NTM1OnYy", "diffSide": "RIGHT", "path": "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTowNzoxMFrOHiCkEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTowNzoxMFrOHiCkEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1NTYzNA==", "bodyText": "drop the next 4 tests starting from this one", "url": "https://github.com/quarkusio/quarkus/pull/12729#discussion_r505455634", "createdAt": "2020-10-15T11:07:10Z", "author": {"login": "sberyozkin"}, "path": "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package io.quarkus.it.keycloak;\n+\n+import static org.awaitility.Awaitility.await;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Base64;\n+import java.util.HashSet;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.RepeatedTest;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.smallrye.jwt.build.Jwt;\n+\n+/**\n+ * @author <a href=\"mailto:psilva@redhat.com\">Pedro Igor</a>\n+ */\n+@QuarkusTest\n+@QuarkusTestResource(KeycloakTestResource.class)\n+public class BearerTokenAuthorizationTest {\n+\n+    @Test\n+    public void testSecureAccessSuccessWithCors() {\n+        String origin = \"http://custom.origin.quarkus\";\n+        String methods = \"GET\";\n+        String headers = \"X-Custom\";\n+        RestAssured.given().header(\"Origin\", origin)\n+                .header(\"Access-Control-Request-Method\", methods)\n+                .header(\"Access-Control-Request-Headers\", headers)\n+                .when()\n+                .options(\"/api\").then()\n+                .statusCode(200)\n+                .header(\"Access-Control-Allow-Origin\", origin)\n+                .header(\"Access-Control-Allow-Methods\", methods)\n+                .header(\"Access-Control-Allow-Headers\", headers);\n+\n+        for (String username : Arrays.asList(\"alice\", \"jdoe\", \"admin\")) {\n+            RestAssured.given().auth().oauth2(getAccessToken(username))\n+                    .when().get(\"/api/users/preferredUserName\")\n+                    .then()\n+                    .statusCode(200)\n+                    .body(\"userName\", equalTo(username));\n+        }\n+    }\n+\n+    @Test\n+    public void testSecureAccessSuccessCustomPrincipal() {\n+        for (String username : Arrays.asList(\"alice\", \"jdoe\", \"admin\")) {\n+            RestAssured.given().auth().oauth2(getAccessToken(username))\n+                    .when().get(\"/api/users/me\")\n+                    .then()\n+                    .statusCode(200)\n+                    .body(\"userName\", equalTo(username + \"@gmail.com\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testBasicAuth() {\n+        byte[] basicAuthBytes = \"alice:password\".getBytes(StandardCharsets.UTF_8);\n+        RestAssured.given()\n+                .header(\"Authorization\", \"Basic \" + Base64.getEncoder().encodeToString(basicAuthBytes))\n+                .when().get(\"/api/users/me\")\n+                .then()\n+                .statusCode(200)\n+                .body(\"userName\", equalTo(\"alice\"));\n+    }\n+\n+    @Test\n+    public void testSecureAccessSuccessPreferredUsername() {\n+        for (String username : Arrays.asList(\"alice\", \"jdoe\", \"admin\")) {\n+            RestAssured.given().auth().oauth2(getAccessToken(username))\n+                    .when().get(\"/api/users/preferredUserName\")\n+                    .then()\n+                    .statusCode(200)\n+                    .body(\"userName\", equalTo(username));\n+        }\n+    }\n+\n+    @Test\n+    public void testAccessAdminResource() {\n+        RestAssured.given().auth().oauth2(getAccessToken(\"admin\"))\n+                .when().get(\"/api/admin\")\n+                .then()\n+                .statusCode(200)\n+                .body(Matchers.containsString(\"granted:admin\"));\n+    }\n+\n+    @Test\n+    public void testAccessAdminResourceCustomHeaderNoBearerScheme() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9931090247dfd32f658a72157688fe6ffb17c0d3"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjA5NzY0OnYy", "diffSide": "RIGHT", "path": "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTowNzo1MVrOHiCldw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTowNzo1MVrOHiCldw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1NTk5MQ==", "bodyText": "drop this one", "url": "https://github.com/quarkusio/quarkus/pull/12729#discussion_r505455991", "createdAt": "2020-10-15T11:07:51Z", "author": {"login": "sberyozkin"}, "path": "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package io.quarkus.it.keycloak;\n+\n+import static org.awaitility.Awaitility.await;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Base64;\n+import java.util.HashSet;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.RepeatedTest;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.smallrye.jwt.build.Jwt;\n+\n+/**\n+ * @author <a href=\"mailto:psilva@redhat.com\">Pedro Igor</a>\n+ */\n+@QuarkusTest\n+@QuarkusTestResource(KeycloakTestResource.class)\n+public class BearerTokenAuthorizationTest {\n+\n+    @Test\n+    public void testSecureAccessSuccessWithCors() {\n+        String origin = \"http://custom.origin.quarkus\";\n+        String methods = \"GET\";\n+        String headers = \"X-Custom\";\n+        RestAssured.given().header(\"Origin\", origin)\n+                .header(\"Access-Control-Request-Method\", methods)\n+                .header(\"Access-Control-Request-Headers\", headers)\n+                .when()\n+                .options(\"/api\").then()\n+                .statusCode(200)\n+                .header(\"Access-Control-Allow-Origin\", origin)\n+                .header(\"Access-Control-Allow-Methods\", methods)\n+                .header(\"Access-Control-Allow-Headers\", headers);\n+\n+        for (String username : Arrays.asList(\"alice\", \"jdoe\", \"admin\")) {\n+            RestAssured.given().auth().oauth2(getAccessToken(username))\n+                    .when().get(\"/api/users/preferredUserName\")\n+                    .then()\n+                    .statusCode(200)\n+                    .body(\"userName\", equalTo(username));\n+        }\n+    }\n+\n+    @Test\n+    public void testSecureAccessSuccessCustomPrincipal() {\n+        for (String username : Arrays.asList(\"alice\", \"jdoe\", \"admin\")) {\n+            RestAssured.given().auth().oauth2(getAccessToken(username))\n+                    .when().get(\"/api/users/me\")\n+                    .then()\n+                    .statusCode(200)\n+                    .body(\"userName\", equalTo(username + \"@gmail.com\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testBasicAuth() {\n+        byte[] basicAuthBytes = \"alice:password\".getBytes(StandardCharsets.UTF_8);\n+        RestAssured.given()\n+                .header(\"Authorization\", \"Basic \" + Base64.getEncoder().encodeToString(basicAuthBytes))\n+                .when().get(\"/api/users/me\")\n+                .then()\n+                .statusCode(200)\n+                .body(\"userName\", equalTo(\"alice\"));\n+    }\n+\n+    @Test\n+    public void testSecureAccessSuccessPreferredUsername() {\n+        for (String username : Arrays.asList(\"alice\", \"jdoe\", \"admin\")) {\n+            RestAssured.given().auth().oauth2(getAccessToken(username))\n+                    .when().get(\"/api/users/preferredUserName\")\n+                    .then()\n+                    .statusCode(200)\n+                    .body(\"userName\", equalTo(username));\n+        }\n+    }\n+\n+    @Test\n+    public void testAccessAdminResource() {\n+        RestAssured.given().auth().oauth2(getAccessToken(\"admin\"))\n+                .when().get(\"/api/admin\")\n+                .then()\n+                .statusCode(200)\n+                .body(Matchers.containsString(\"granted:admin\"));\n+    }\n+\n+    @Test\n+    public void testAccessAdminResourceCustomHeaderNoBearerScheme() {\n+        RestAssured.given().header(\"X-Forwarded-Authorization\", getAccessToken(\"admin\"))\n+                .when().get(\"/api/admin\")\n+                .then()\n+                .statusCode(401);\n+    }\n+\n+    @Test\n+    public void testAccessAdminResourceCustomHeaderBearerScheme() {\n+        RestAssured.given().header(\"X-Forwarded-Authorization\", getAccessToken(\"admin\"))\n+                .when().get(\"/api/admin\")\n+                .then()\n+                .statusCode(401);\n+    }\n+\n+    @Test\n+    public void testAccessAdminResourceWithRefreshToken() {\n+        RestAssured.given().auth().oauth2(getRefreshToken(\"admin\"))\n+                .when().get(\"/api/admin\")\n+                .then()\n+                .statusCode(401);\n+    }\n+\n+    @Test\n+    public void testPermissionHttpInformationProvider() {\n+        RestAssured.given().auth().oauth2(getAccessToken(\"alice\"))\n+                .when().get(\"/api/permission/http-cip\")\n+                .then()\n+                .statusCode(200)\n+                .body(\"preferred_username\", equalTo(\"alice\"));\n+    }\n+\n+    @Test\n+    public void testDeniedAccessAdminResource() {\n+        RestAssured.given().auth().oauth2(getAccessToken(\"alice\"))\n+                .when().get(\"/api/admin\")\n+                .then()\n+                .statusCode(403);\n+    }\n+\n+    @Test\n+    public void testDeniedNoBearerToken() {\n+        RestAssured.given()\n+                .when().get(\"/api/users/me\").then()\n+                .statusCode(401);\n+    }\n+\n+    //see https://github.com/quarkusio/quarkus/issues/5809", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9931090247dfd32f658a72157688fe6ffb17c0d3"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEwMDA0OnYy", "diffSide": "RIGHT", "path": "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTowODozNVrOHiCnFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTowODozNVrOHiCnFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1NjQwNA==", "bodyText": "not important but you can start with Jwt.preferredUserName(...)", "url": "https://github.com/quarkusio/quarkus/pull/12729#discussion_r505456404", "createdAt": "2020-10-15T11:08:35Z", "author": {"login": "sberyozkin"}, "path": "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package io.quarkus.it.keycloak;\n+\n+import static org.awaitility.Awaitility.await;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Base64;\n+import java.util.HashSet;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.RepeatedTest;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.smallrye.jwt.build.Jwt;\n+\n+/**\n+ * @author <a href=\"mailto:psilva@redhat.com\">Pedro Igor</a>\n+ */\n+@QuarkusTest\n+@QuarkusTestResource(KeycloakTestResource.class)\n+public class BearerTokenAuthorizationTest {\n+\n+    @Test\n+    public void testSecureAccessSuccessWithCors() {\n+        String origin = \"http://custom.origin.quarkus\";\n+        String methods = \"GET\";\n+        String headers = \"X-Custom\";\n+        RestAssured.given().header(\"Origin\", origin)\n+                .header(\"Access-Control-Request-Method\", methods)\n+                .header(\"Access-Control-Request-Headers\", headers)\n+                .when()\n+                .options(\"/api\").then()\n+                .statusCode(200)\n+                .header(\"Access-Control-Allow-Origin\", origin)\n+                .header(\"Access-Control-Allow-Methods\", methods)\n+                .header(\"Access-Control-Allow-Headers\", headers);\n+\n+        for (String username : Arrays.asList(\"alice\", \"jdoe\", \"admin\")) {\n+            RestAssured.given().auth().oauth2(getAccessToken(username))\n+                    .when().get(\"/api/users/preferredUserName\")\n+                    .then()\n+                    .statusCode(200)\n+                    .body(\"userName\", equalTo(username));\n+        }\n+    }\n+\n+    @Test\n+    public void testSecureAccessSuccessCustomPrincipal() {\n+        for (String username : Arrays.asList(\"alice\", \"jdoe\", \"admin\")) {\n+            RestAssured.given().auth().oauth2(getAccessToken(username))\n+                    .when().get(\"/api/users/me\")\n+                    .then()\n+                    .statusCode(200)\n+                    .body(\"userName\", equalTo(username + \"@gmail.com\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testBasicAuth() {\n+        byte[] basicAuthBytes = \"alice:password\".getBytes(StandardCharsets.UTF_8);\n+        RestAssured.given()\n+                .header(\"Authorization\", \"Basic \" + Base64.getEncoder().encodeToString(basicAuthBytes))\n+                .when().get(\"/api/users/me\")\n+                .then()\n+                .statusCode(200)\n+                .body(\"userName\", equalTo(\"alice\"));\n+    }\n+\n+    @Test\n+    public void testSecureAccessSuccessPreferredUsername() {\n+        for (String username : Arrays.asList(\"alice\", \"jdoe\", \"admin\")) {\n+            RestAssured.given().auth().oauth2(getAccessToken(username))\n+                    .when().get(\"/api/users/preferredUserName\")\n+                    .then()\n+                    .statusCode(200)\n+                    .body(\"userName\", equalTo(username));\n+        }\n+    }\n+\n+    @Test\n+    public void testAccessAdminResource() {\n+        RestAssured.given().auth().oauth2(getAccessToken(\"admin\"))\n+                .when().get(\"/api/admin\")\n+                .then()\n+                .statusCode(200)\n+                .body(Matchers.containsString(\"granted:admin\"));\n+    }\n+\n+    @Test\n+    public void testAccessAdminResourceCustomHeaderNoBearerScheme() {\n+        RestAssured.given().header(\"X-Forwarded-Authorization\", getAccessToken(\"admin\"))\n+                .when().get(\"/api/admin\")\n+                .then()\n+                .statusCode(401);\n+    }\n+\n+    @Test\n+    public void testAccessAdminResourceCustomHeaderBearerScheme() {\n+        RestAssured.given().header(\"X-Forwarded-Authorization\", getAccessToken(\"admin\"))\n+                .when().get(\"/api/admin\")\n+                .then()\n+                .statusCode(401);\n+    }\n+\n+    @Test\n+    public void testAccessAdminResourceWithRefreshToken() {\n+        RestAssured.given().auth().oauth2(getRefreshToken(\"admin\"))\n+                .when().get(\"/api/admin\")\n+                .then()\n+                .statusCode(401);\n+    }\n+\n+    @Test\n+    public void testPermissionHttpInformationProvider() {\n+        RestAssured.given().auth().oauth2(getAccessToken(\"alice\"))\n+                .when().get(\"/api/permission/http-cip\")\n+                .then()\n+                .statusCode(200)\n+                .body(\"preferred_username\", equalTo(\"alice\"));\n+    }\n+\n+    @Test\n+    public void testDeniedAccessAdminResource() {\n+        RestAssured.given().auth().oauth2(getAccessToken(\"alice\"))\n+                .when().get(\"/api/admin\")\n+                .then()\n+                .statusCode(403);\n+    }\n+\n+    @Test\n+    public void testDeniedNoBearerToken() {\n+        RestAssured.given()\n+                .when().get(\"/api/users/me\").then()\n+                .statusCode(401);\n+    }\n+\n+    //see https://github.com/quarkusio/quarkus/issues/5809\n+    @RepeatedTest(20)\n+    public void testOidcAndVertxHandler() {\n+        RestAssured.given().auth().oauth2(getAccessToken(\"alice\"))\n+                .when().body(\"Hello World\").post(\"/vertx\")\n+                .then()\n+                .statusCode(200)\n+                .body(equalTo(\"Hello World\"));\n+    }\n+\n+    @Test\n+    public void testExpiredBearerToken() throws InterruptedException {\n+        String token = getAccessToken(\"alice\");\n+\n+        await()\n+                .pollDelay(3, TimeUnit.SECONDS)\n+                .atMost(5, TimeUnit.SECONDS).until(\n+                        () -> RestAssured.given().auth().oauth2(token).when()\n+                                .get(\"/api/users/me\").thenReturn().statusCode() == 401);\n+    }\n+\n+    private String getAccessToken(String userName) {\n+        return Jwt.claim(\"preferred_username\", userName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9931090247dfd32f658a72157688fe6ffb17c0d3"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEyMDg4OnYy", "diffSide": "RIGHT", "path": "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNDo0NlrOHiCziw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNDo0NlrOHiCziw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1OTU5NQ==", "bodyText": "At the moment the builder won't pick up the jwk kid itself, so please add, just in front of .sign(): .jws.keyId(\"1\") (=> it has to match the kid value you will set in the public JWK key)", "url": "https://github.com/quarkusio/quarkus/pull/12729#discussion_r505459595", "createdAt": "2020-10-15T11:14:46Z", "author": {"login": "sberyozkin"}, "path": "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package io.quarkus.it.keycloak;\n+\n+import static org.awaitility.Awaitility.await;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Base64;\n+import java.util.HashSet;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.RepeatedTest;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.smallrye.jwt.build.Jwt;\n+\n+/**\n+ * @author <a href=\"mailto:psilva@redhat.com\">Pedro Igor</a>\n+ */\n+@QuarkusTest\n+@QuarkusTestResource(KeycloakTestResource.class)\n+public class BearerTokenAuthorizationTest {\n+\n+    @Test\n+    public void testSecureAccessSuccessWithCors() {\n+        String origin = \"http://custom.origin.quarkus\";\n+        String methods = \"GET\";\n+        String headers = \"X-Custom\";\n+        RestAssured.given().header(\"Origin\", origin)\n+                .header(\"Access-Control-Request-Method\", methods)\n+                .header(\"Access-Control-Request-Headers\", headers)\n+                .when()\n+                .options(\"/api\").then()\n+                .statusCode(200)\n+                .header(\"Access-Control-Allow-Origin\", origin)\n+                .header(\"Access-Control-Allow-Methods\", methods)\n+                .header(\"Access-Control-Allow-Headers\", headers);\n+\n+        for (String username : Arrays.asList(\"alice\", \"jdoe\", \"admin\")) {\n+            RestAssured.given().auth().oauth2(getAccessToken(username))\n+                    .when().get(\"/api/users/preferredUserName\")\n+                    .then()\n+                    .statusCode(200)\n+                    .body(\"userName\", equalTo(username));\n+        }\n+    }\n+\n+    @Test\n+    public void testSecureAccessSuccessCustomPrincipal() {\n+        for (String username : Arrays.asList(\"alice\", \"jdoe\", \"admin\")) {\n+            RestAssured.given().auth().oauth2(getAccessToken(username))\n+                    .when().get(\"/api/users/me\")\n+                    .then()\n+                    .statusCode(200)\n+                    .body(\"userName\", equalTo(username + \"@gmail.com\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testBasicAuth() {\n+        byte[] basicAuthBytes = \"alice:password\".getBytes(StandardCharsets.UTF_8);\n+        RestAssured.given()\n+                .header(\"Authorization\", \"Basic \" + Base64.getEncoder().encodeToString(basicAuthBytes))\n+                .when().get(\"/api/users/me\")\n+                .then()\n+                .statusCode(200)\n+                .body(\"userName\", equalTo(\"alice\"));\n+    }\n+\n+    @Test\n+    public void testSecureAccessSuccessPreferredUsername() {\n+        for (String username : Arrays.asList(\"alice\", \"jdoe\", \"admin\")) {\n+            RestAssured.given().auth().oauth2(getAccessToken(username))\n+                    .when().get(\"/api/users/preferredUserName\")\n+                    .then()\n+                    .statusCode(200)\n+                    .body(\"userName\", equalTo(username));\n+        }\n+    }\n+\n+    @Test\n+    public void testAccessAdminResource() {\n+        RestAssured.given().auth().oauth2(getAccessToken(\"admin\"))\n+                .when().get(\"/api/admin\")\n+                .then()\n+                .statusCode(200)\n+                .body(Matchers.containsString(\"granted:admin\"));\n+    }\n+\n+    @Test\n+    public void testAccessAdminResourceCustomHeaderNoBearerScheme() {\n+        RestAssured.given().header(\"X-Forwarded-Authorization\", getAccessToken(\"admin\"))\n+                .when().get(\"/api/admin\")\n+                .then()\n+                .statusCode(401);\n+    }\n+\n+    @Test\n+    public void testAccessAdminResourceCustomHeaderBearerScheme() {\n+        RestAssured.given().header(\"X-Forwarded-Authorization\", getAccessToken(\"admin\"))\n+                .when().get(\"/api/admin\")\n+                .then()\n+                .statusCode(401);\n+    }\n+\n+    @Test\n+    public void testAccessAdminResourceWithRefreshToken() {\n+        RestAssured.given().auth().oauth2(getRefreshToken(\"admin\"))\n+                .when().get(\"/api/admin\")\n+                .then()\n+                .statusCode(401);\n+    }\n+\n+    @Test\n+    public void testPermissionHttpInformationProvider() {\n+        RestAssured.given().auth().oauth2(getAccessToken(\"alice\"))\n+                .when().get(\"/api/permission/http-cip\")\n+                .then()\n+                .statusCode(200)\n+                .body(\"preferred_username\", equalTo(\"alice\"));\n+    }\n+\n+    @Test\n+    public void testDeniedAccessAdminResource() {\n+        RestAssured.given().auth().oauth2(getAccessToken(\"alice\"))\n+                .when().get(\"/api/admin\")\n+                .then()\n+                .statusCode(403);\n+    }\n+\n+    @Test\n+    public void testDeniedNoBearerToken() {\n+        RestAssured.given()\n+                .when().get(\"/api/users/me\").then()\n+                .statusCode(401);\n+    }\n+\n+    //see https://github.com/quarkusio/quarkus/issues/5809\n+    @RepeatedTest(20)\n+    public void testOidcAndVertxHandler() {\n+        RestAssured.given().auth().oauth2(getAccessToken(\"alice\"))\n+                .when().body(\"Hello World\").post(\"/vertx\")\n+                .then()\n+                .statusCode(200)\n+                .body(equalTo(\"Hello World\"));\n+    }\n+\n+    @Test\n+    public void testExpiredBearerToken() throws InterruptedException {\n+        String token = getAccessToken(\"alice\");\n+\n+        await()\n+                .pollDelay(3, TimeUnit.SECONDS)\n+                .atMost(5, TimeUnit.SECONDS).until(\n+                        () -> RestAssured.given().auth().oauth2(token).when()\n+                                .get(\"/api/users/me\").thenReturn().statusCode() == 401);\n+    }\n+\n+    private String getAccessToken(String userName) {\n+        return Jwt.claim(\"preferred_username\", userName)\n+                .groups(new HashSet<>(Arrays.asList(\"user\", \"admin\")))\n+                .sign();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9931090247dfd32f658a72157688fe6ffb17c0d3"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDg4OTIyOnYy", "diffSide": "RIGHT", "path": "integration-tests/oidc-wiremock/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTozOToyMFrOHixlsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTozOToyMFrOHixlsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIyNjA5Nw==", "bodyText": "@cemnura please remove the elytron dep", "url": "https://github.com/quarkusio/quarkus/pull/12729#discussion_r506226097", "createdAt": "2020-10-16T09:39:20Z", "author": {"login": "sberyozkin"}, "path": "integration-tests/oidc-wiremock/pom.xml", "diffHunk": "@@ -0,0 +1,196 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>quarkus-integration-tests-parent</artifactId>\n+        <groupId>io.quarkus</groupId>\n+        <version>999-SNAPSHOT</version>\n+        <relativePath>../</relativePath>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>quarkus-integration-test-oidc-wiremock</artifactId>\n+    <name>Quarkus - Integration Tests - OpenID Connect Adapter WireMock</name>\n+    <description>Module that contains OpenID Connect related tests using WireMock</description>\n+\n+    <properties>\n+        <keycloak.url>http://localhost:8180/auth</keycloak.url>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-oidc</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-resteasy-jackson</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.keycloak</groupId>\n+            <artifactId>keycloak-adapter-core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.keycloak</groupId>\n+            <artifactId>keycloak-core</artifactId>\n+        </dependency>\n+\n+        <!-- test dependencies -->\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-junit5</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.rest-assured</groupId>\n+            <artifactId>rest-assured</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.awaitility</groupId>\n+            <artifactId>awaitility</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.github.tomakehurst</groupId>\n+            <artifactId>wiremock-jre8</artifactId>\n+            <version>2.27.2</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <!-- Minimal test dependencies to *-deployment artifacts for consistent build order -->\n+        <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "224b601a7dbc2d8bada247f883ab0e864606c2b7"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDg5MjM3OnYy", "diffSide": "RIGHT", "path": "integration-tests/oidc-wiremock/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTo0MDowMFrOHixnxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTo0MDowMFrOHixnxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIyNjYyOQ==", "bodyText": "@cemnura  and awaitility is not needed", "url": "https://github.com/quarkusio/quarkus/pull/12729#discussion_r506226629", "createdAt": "2020-10-16T09:40:00Z", "author": {"login": "sberyozkin"}, "path": "integration-tests/oidc-wiremock/pom.xml", "diffHunk": "@@ -0,0 +1,196 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>quarkus-integration-tests-parent</artifactId>\n+        <groupId>io.quarkus</groupId>\n+        <version>999-SNAPSHOT</version>\n+        <relativePath>../</relativePath>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>quarkus-integration-test-oidc-wiremock</artifactId>\n+    <name>Quarkus - Integration Tests - OpenID Connect Adapter WireMock</name>\n+    <description>Module that contains OpenID Connect related tests using WireMock</description>\n+\n+    <properties>\n+        <keycloak.url>http://localhost:8180/auth</keycloak.url>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-oidc</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-resteasy-jackson</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.keycloak</groupId>\n+            <artifactId>keycloak-adapter-core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.keycloak</groupId>\n+            <artifactId>keycloak-core</artifactId>\n+        </dependency>\n+\n+        <!-- test dependencies -->\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-junit5</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.rest-assured</groupId>\n+            <artifactId>rest-assured</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.awaitility</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "224b601a7dbc2d8bada247f883ab0e864606c2b7"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDg5NTQ4OnYy", "diffSide": "RIGHT", "path": "integration-tests/oidc-wiremock/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTo0MDozNFrOHixpwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTo0MDozNFrOHixpwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIyNzEzNg==", "bodyText": "@cemnura please remove 2 leycloak dependencies", "url": "https://github.com/quarkusio/quarkus/pull/12729#discussion_r506227136", "createdAt": "2020-10-16T09:40:34Z", "author": {"login": "sberyozkin"}, "path": "integration-tests/oidc-wiremock/pom.xml", "diffHunk": "@@ -0,0 +1,196 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>quarkus-integration-tests-parent</artifactId>\n+        <groupId>io.quarkus</groupId>\n+        <version>999-SNAPSHOT</version>\n+        <relativePath>../</relativePath>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>quarkus-integration-test-oidc-wiremock</artifactId>\n+    <name>Quarkus - Integration Tests - OpenID Connect Adapter WireMock</name>\n+    <description>Module that contains OpenID Connect related tests using WireMock</description>\n+\n+    <properties>\n+        <keycloak.url>http://localhost:8180/auth</keycloak.url>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-oidc</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-resteasy-jackson</artifactId>\n+        </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "224b601a7dbc2d8bada247f883ab0e864606c2b7"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDkxNTE4OnYy", "diffSide": "RIGHT", "path": "integration-tests/oidc-wiremock/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTo0NDoyOFrOHix3QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTo0NDoyOFrOHix3QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIzMDU5Mw==", "bodyText": "Please drop this README file, these wiremock tests will be running with mvn clean install :-). I will also follow up with the documentation.", "url": "https://github.com/quarkusio/quarkus/pull/12729#discussion_r506230593", "createdAt": "2020-10-16T09:44:28Z", "author": {"login": "sberyozkin"}, "path": "integration-tests/oidc-wiremock/README.md", "diffHunk": "@@ -0,0 +1,25 @@\n+# JAX-RS example using Keycloak adapter to protect resources", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "224b601a7dbc2d8bada247f883ab0e864606c2b7"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDkyMDg0OnYy", "diffSide": "RIGHT", "path": "integration-tests/oidc-wiremock/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTo0NTo0N1rOHix60w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTo0NTo0N1rOHix60w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIzMTUwNw==", "bodyText": "Please remove enableHttpsUrlHandler", "url": "https://github.com/quarkusio/quarkus/pull/12729#discussion_r506231507", "createdAt": "2020-10-16T09:45:47Z", "author": {"login": "sberyozkin"}, "path": "integration-tests/oidc-wiremock/pom.xml", "diffHunk": "@@ -0,0 +1,196 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>quarkus-integration-tests-parent</artifactId>\n+        <groupId>io.quarkus</groupId>\n+        <version>999-SNAPSHOT</version>\n+        <relativePath>../</relativePath>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>quarkus-integration-test-oidc-wiremock</artifactId>\n+    <name>Quarkus - Integration Tests - OpenID Connect Adapter WireMock</name>\n+    <description>Module that contains OpenID Connect related tests using WireMock</description>\n+\n+    <properties>\n+        <keycloak.url>http://localhost:8180/auth</keycloak.url>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-oidc</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-resteasy-jackson</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.keycloak</groupId>\n+            <artifactId>keycloak-adapter-core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.keycloak</groupId>\n+            <artifactId>keycloak-core</artifactId>\n+        </dependency>\n+\n+        <!-- test dependencies -->\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-junit5</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.rest-assured</groupId>\n+            <artifactId>rest-assured</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.awaitility</groupId>\n+            <artifactId>awaitility</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.github.tomakehurst</groupId>\n+            <artifactId>wiremock-jre8</artifactId>\n+            <version>2.27.2</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <!-- Minimal test dependencies to *-deployment artifacts for consistent build order -->\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-elytron-security-properties-file-deployment</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-oidc-deployment</artifactId>\n+            <version>${project.version}</version>\n+            <type>pom</type>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>*</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-resteasy-jackson-deployment</artifactId>\n+            <version>${project.version}</version>\n+            <type>pom</type>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>*</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <resources>\n+            <resource>\n+                <directory>src/main/resources</directory>\n+                <filtering>true</filtering>\n+            </resource>\n+        </resources>\n+        <plugins>\n+            <plugin>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <systemPropertyVariables>\n+                        <keycloak.url>${keycloak.url}</keycloak.url>\n+                    </systemPropertyVariables>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <artifactId>maven-failsafe-plugin</artifactId>\n+                <configuration>\n+                    <skip>true</skip>\n+                    <systemPropertyVariables>\n+                        <keycloak.url>${keycloak.url}</keycloak.url>\n+                    </systemPropertyVariables>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>io.quarkus</groupId>\n+                <artifactId>quarkus-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>build</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <profiles>\n+\n+        <profile>\n+            <id>native-image</id>\n+            <activation>\n+                <property>\n+                    <name>native</name>\n+                </property>\n+            </activation>\n+            <build>\n+                <plugins>\n+                    <plugin>\n+                        <groupId>org.apache.maven.plugins</groupId>\n+                        <artifactId>maven-surefire-plugin</artifactId>\n+                        <configuration>\n+                            <skipTests>${native.surefire.skip}</skipTests>\n+                        </configuration>\n+                    </plugin>\n+                    <plugin>\n+                        <groupId>org.apache.maven.plugins</groupId>\n+                        <artifactId>maven-failsafe-plugin</artifactId>\n+                        <executions>\n+                            <execution>\n+                                <goals>\n+                                    <goal>integration-test</goal>\n+                                    <goal>verify</goal>\n+                                </goals>\n+                                <configuration>\n+                                    <systemPropertyVariables>\n+                                        <native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path>\n+                                    </systemPropertyVariables>\n+                                </configuration>\n+                            </execution>\n+                        </executions>\n+                    </plugin>\n+                    <plugin>\n+                        <groupId>io.quarkus</groupId>\n+                        <artifactId>quarkus-maven-plugin</artifactId>\n+                        <executions>\n+                            <execution>\n+                                <id>native-image</id>\n+                                <goals>\n+                                    <goal>native-image</goal>\n+                                </goals>\n+                                <configuration>\n+                                    <reportErrorsAtRuntime>false</reportErrorsAtRuntime>\n+                                    <cleanupServer>true</cleanupServer>\n+                                    <enableHttpUrlHandler>true</enableHttpUrlHandler>\n+                                    <enableHttpsUrlHandler>true</enableHttpsUrlHandler>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "224b601a7dbc2d8bada247f883ab0e864606c2b7"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDkzMzc0OnYy", "diffSide": "RIGHT", "path": "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTo0ODo1N1rOHiyC8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTo0ODo1N1rOHiyC8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIzMzU4NQ==", "bodyText": "Lets simplify and remove the cors test as it is tested elsewhere and is not essential here", "url": "https://github.com/quarkusio/quarkus/pull/12729#discussion_r506233585", "createdAt": "2020-10-16T09:48:57Z", "author": {"login": "sberyozkin"}, "path": "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package io.quarkus.it.keycloak;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+\n+import java.time.Instant;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.smallrye.jwt.build.Jwt;\n+\n+/**\n+ * @author <a href=\"mailto:psilva@redhat.com\">Pedro Igor</a>\n+ */\n+@QuarkusTest\n+@QuarkusTestResource(KeycloakTestResource.class)\n+public class BearerTokenAuthorizationTest {\n+\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "224b601a7dbc2d8bada247f883ab0e864606c2b7"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDk1NTk4OnYy", "diffSide": "RIGHT", "path": "integration-tests/oidc-wiremock/src/main/resources/application.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTo1Mjo1NFrOHiyRnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTo1Mjo1NFrOHiyRnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIzNzM0MA==", "bodyText": "please remove lines 6-7", "url": "https://github.com/quarkusio/quarkus/pull/12729#discussion_r506237340", "createdAt": "2020-10-16T09:52:54Z", "author": {"login": "sberyozkin"}, "path": "integration-tests/oidc-wiremock/src/main/resources/application.properties", "diffHunk": "@@ -0,0 +1,9 @@\n+# Configuration file\n+quarkus.oidc.auth-server-url=${keycloak.url}/realms/quarkus/\n+quarkus.oidc.client-id=quarkus-app\n+quarkus.oidc.credentials.secret=secret\n+quarkus.oidc.token.principal-claim=email\n+quarkus.oidc.tls.verification=none", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "224b601a7dbc2d8bada247f883ab0e864606c2b7"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDk3MzQ4OnYy", "diffSide": "RIGHT", "path": "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTo1NToxN1rOHiydAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTo1NToxN1rOHiydAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI0MDI1OQ==", "bodyText": "To get this passing you just need to set the email claim with the user name which is what the application.properties, but it would be simpler to remove this test as it is not really stressing the mock more than other tests", "url": "https://github.com/quarkusio/quarkus/pull/12729#discussion_r506240259", "createdAt": "2020-10-16T09:55:17Z", "author": {"login": "sberyozkin"}, "path": "integration-tests/oidc-wiremock/src/test/java/io/quarkus/it/keycloak/BearerTokenAuthorizationTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package io.quarkus.it.keycloak;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+\n+import java.time.Instant;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.smallrye.jwt.build.Jwt;\n+\n+/**\n+ * @author <a href=\"mailto:psilva@redhat.com\">Pedro Igor</a>\n+ */\n+@QuarkusTest\n+@QuarkusTestResource(KeycloakTestResource.class)\n+public class BearerTokenAuthorizationTest {\n+\n+    @Test\n+    public void testSecureAccessSuccessWithCors() {\n+        String origin = \"http://custom.origin.quarkus\";\n+        String methods = \"GET\";\n+        String headers = \"X-Custom\";\n+        RestAssured.given().header(\"Origin\", origin)\n+                .header(\"Access-Control-Request-Method\", methods)\n+                .header(\"Access-Control-Request-Headers\", headers)\n+                .when()\n+                .options(\"/api\").then()\n+                .statusCode(200)\n+                .header(\"Access-Control-Allow-Origin\", origin)\n+                .header(\"Access-Control-Allow-Methods\", methods)\n+                .header(\"Access-Control-Allow-Headers\", headers);\n+\n+        for (String username : Arrays.asList(\"alice\", \"jdoe\", \"admin\")) {\n+            RestAssured.given().auth().oauth2(getAccessToken(username, new HashSet<>(Arrays.asList(\"user\", \"admin\"))))\n+                    .when().get(\"/api/users/preferredUserName\")\n+                    .then()\n+                    .statusCode(200)\n+                    .body(\"userName\", equalTo(username));\n+        }\n+    }\n+\n+    //    @Test\n+    //    public void testSecureAccessSuccessCustomPrincipal() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "224b601a7dbc2d8bada247f883ab0e864606c2b7"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4314, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}