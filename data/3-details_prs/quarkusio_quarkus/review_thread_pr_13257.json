{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5ODkxNzk1", "number": 13257, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDowMToxMVrOE4LI6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDoxNTo0MlrOE4Li9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzM4MjE4OnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDowMToxMVrOHx8E6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDo1MjozNVrOHx-caw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyNjU2OA==", "bodyText": "Why removing the deprecation?", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522126568", "createdAt": "2020-11-12T14:01:11Z", "author": {"login": "cescoffier"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -35,6 +36,11 @@\n \n @ApplicationScoped\n public class OidcIdentityProvider implements IdentityProvider<TokenAuthenticationRequest> {\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private static final Uni<AccessToken> NULL_CODE_ACCESS_TOKEN_UNI = Uni.createFrom().nullItem();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE0OTI0MA==", "bodyText": "@cescoffier What do you mean ? AccessToken is deprecated in Vert.x 3.8.x hence I add to avoid the IDE warnings...", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522149240", "createdAt": "2020-11-12T14:31:52Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -35,6 +36,11 @@\n \n @ApplicationScoped\n public class OidcIdentityProvider implements IdentityProvider<TokenAuthenticationRequest> {\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private static final Uni<AccessToken> NULL_CODE_ACCESS_TOKEN_UNI = Uni.createFrom().nullItem();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyNjU2OA=="}, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE2NTM1NQ==", "bodyText": "ah ok, I was referring to the mutiny part.", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522165355", "createdAt": "2020-11-12T14:52:35Z", "author": {"login": "cescoffier"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -35,6 +36,11 @@\n \n @ApplicationScoped\n public class OidcIdentityProvider implements IdentityProvider<TokenAuthenticationRequest> {\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private static final Uni<AccessToken> NULL_CODE_ACCESS_TOKEN_UNI = Uni.createFrom().nullItem();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyNjU2OA=="}, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzM4NTQxOnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDowMTo1M1rOHx8G6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDowMTo1M1rOHx8G6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyNzA4Mw==", "bodyText": "should be a constant.", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522127083", "createdAt": "2020-11-12T14:01:53Z", "author": {"login": "cescoffier"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -81,101 +87,157 @@ public SecurityIdentity get() {\n         if (resolvedContext.oidcConfig.publicKey.isPresent()) {\n             return validateTokenWithoutOidcServer(request, resolvedContext);\n         } else {\n-            return validateTokenWithOidcServer(vertxContext, request, resolvedContext);\n+            return validateAllTokensWithOidcServer(vertxContext, request, resolvedContext);\n         }\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<SecurityIdentity> validateAllTokensWithOidcServer(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n \n-        if (request.getToken() instanceof IdTokenCredential\n-                && (resolvedContext.oidcConfig.authentication.verifyAccessToken\n-                        || resolvedContext.oidcConfig.roles.source.orElse(null) == Source.accesstoken)) {\n-            vertxContext.put(\"code_flow_access_token_result\",\n-                    verifyCodeFlowAccessToken(vertxContext, request, resolvedContext));\n+        Uni<AccessToken> codeAccessTokenUni = verifyCodeFlowAccessTokenUni(vertxContext, request, resolvedContext);\n+\n+        return codeAccessTokenUni.onItem().transformToUni(\n+                new Function<AccessToken, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(AccessToken codeAccessToken) {\n+                        return validateTokenWithOidcServer(vertxContext, request, resolvedContext, codeAccessToken);\n+                    }\n+                });\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+            TenantConfigContext resolvedContext, AccessToken codeAccessToken) {\n+\n+        if (codeAccessToken != null) {\n+            vertxContext.put(\"code_flow_access_token_result\", codeAccessToken);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzM5NTU4OnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDowNDoxMFrOHx8NKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTo1NToyNlrOHyBc8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyODY4Mw==", "bodyText": "even if blocking is allowed, it may be not called on the same thread. This method is called on the subscription thread, not the assembly thread.", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522128683", "createdAt": "2020-11-12T14:04:10Z", "author": {"login": "cescoffier"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -81,101 +87,157 @@ public SecurityIdentity get() {\n         if (resolvedContext.oidcConfig.publicKey.isPresent()) {\n             return validateTokenWithoutOidcServer(request, resolvedContext);\n         } else {\n-            return validateTokenWithOidcServer(vertxContext, request, resolvedContext);\n+            return validateAllTokensWithOidcServer(vertxContext, request, resolvedContext);\n         }\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<SecurityIdentity> validateAllTokensWithOidcServer(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n \n-        if (request.getToken() instanceof IdTokenCredential\n-                && (resolvedContext.oidcConfig.authentication.verifyAccessToken\n-                        || resolvedContext.oidcConfig.roles.source.orElse(null) == Source.accesstoken)) {\n-            vertxContext.put(\"code_flow_access_token_result\",\n-                    verifyCodeFlowAccessToken(vertxContext, request, resolvedContext));\n+        Uni<AccessToken> codeAccessTokenUni = verifyCodeFlowAccessTokenUni(vertxContext, request, resolvedContext);\n+\n+        return codeAccessTokenUni.onItem().transformToUni(\n+                new Function<AccessToken, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(AccessToken codeAccessToken) {\n+                        return validateTokenWithOidcServer(vertxContext, request, resolvedContext, codeAccessToken);\n+                    }\n+                });\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+            TenantConfigContext resolvedContext, AccessToken codeAccessToken) {\n+\n+        if (codeAccessToken != null) {\n+            vertxContext.put(\"code_flow_access_token_result\", codeAccessToken);\n         }\n \n-        final JsonObject userInfo = resolvedContext.oidcConfig.authentication.isUserInfoRequired()\n-                ? getUserInfo(vertxContext, request, resolvedContext)\n-                : null;\n+        Uni<JsonObject> userInfo = getUserInfoUni(vertxContext, request, resolvedContext);\n \n-        return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n-            @Override\n-            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+        return userInfo.onItem().transformToUni(\n+                new Function<JsonObject, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(JsonObject userInfo) {\n+                        return createSecurityIdentityWithOidcServerUni(vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+    }\n+\n+    private Uni<SecurityIdentity> createSecurityIdentityWithOidcServerUni(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n \n-                resolvedContext.auth.decodeToken(request.getToken().getToken(),\n-                        new Handler<AsyncResult<AccessToken>>() {\n+        final TokenCredential tokenCred = request.getToken();\n+        if (tokenCred instanceof AccessTokenCredential && ((AccessTokenCredential) tokenCred).isOpaque()) {\n+            // remote introspection is required, a blocking call\n+            if (BlockingOperationControl.isBlockingAllowed()) {\n+                return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                    @Override\n+                    public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE2ODc5MQ==", "bodyText": "@cescoffier I'm just trying to follow the same pattern as Stuart does here. I can remove these BlockingOperationContext checks ?\nBut see this comment below, at this point the blocking executor may already be involved due to a refresh token check. My understanding is that in such cases this BlockingOperationControl check would just let that executor thread act as a subscription thread  I'm scared about trying to talk about these terms :-) but it feels like it is correct :-) )", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522168791", "createdAt": "2020-11-12T14:56:53Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -81,101 +87,157 @@ public SecurityIdentity get() {\n         if (resolvedContext.oidcConfig.publicKey.isPresent()) {\n             return validateTokenWithoutOidcServer(request, resolvedContext);\n         } else {\n-            return validateTokenWithOidcServer(vertxContext, request, resolvedContext);\n+            return validateAllTokensWithOidcServer(vertxContext, request, resolvedContext);\n         }\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<SecurityIdentity> validateAllTokensWithOidcServer(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n \n-        if (request.getToken() instanceof IdTokenCredential\n-                && (resolvedContext.oidcConfig.authentication.verifyAccessToken\n-                        || resolvedContext.oidcConfig.roles.source.orElse(null) == Source.accesstoken)) {\n-            vertxContext.put(\"code_flow_access_token_result\",\n-                    verifyCodeFlowAccessToken(vertxContext, request, resolvedContext));\n+        Uni<AccessToken> codeAccessTokenUni = verifyCodeFlowAccessTokenUni(vertxContext, request, resolvedContext);\n+\n+        return codeAccessTokenUni.onItem().transformToUni(\n+                new Function<AccessToken, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(AccessToken codeAccessToken) {\n+                        return validateTokenWithOidcServer(vertxContext, request, resolvedContext, codeAccessToken);\n+                    }\n+                });\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+            TenantConfigContext resolvedContext, AccessToken codeAccessToken) {\n+\n+        if (codeAccessToken != null) {\n+            vertxContext.put(\"code_flow_access_token_result\", codeAccessToken);\n         }\n \n-        final JsonObject userInfo = resolvedContext.oidcConfig.authentication.isUserInfoRequired()\n-                ? getUserInfo(vertxContext, request, resolvedContext)\n-                : null;\n+        Uni<JsonObject> userInfo = getUserInfoUni(vertxContext, request, resolvedContext);\n \n-        return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n-            @Override\n-            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+        return userInfo.onItem().transformToUni(\n+                new Function<JsonObject, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(JsonObject userInfo) {\n+                        return createSecurityIdentityWithOidcServerUni(vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+    }\n+\n+    private Uni<SecurityIdentity> createSecurityIdentityWithOidcServerUni(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n \n-                resolvedContext.auth.decodeToken(request.getToken().getToken(),\n-                        new Handler<AsyncResult<AccessToken>>() {\n+        final TokenCredential tokenCred = request.getToken();\n+        if (tokenCred instanceof AccessTokenCredential && ((AccessTokenCredential) tokenCred).isOpaque()) {\n+            // remote introspection is required, a blocking call\n+            if (BlockingOperationControl.isBlockingAllowed()) {\n+                return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                    @Override\n+                    public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyODY4Mw=="}, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE3NTM3OQ==", "bodyText": "And yes, it will be gone once that refresh token check becomes Uni async friendy, I'm actually nearly finished in another branch", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522175379", "createdAt": "2020-11-12T15:05:24Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -81,101 +87,157 @@ public SecurityIdentity get() {\n         if (resolvedContext.oidcConfig.publicKey.isPresent()) {\n             return validateTokenWithoutOidcServer(request, resolvedContext);\n         } else {\n-            return validateTokenWithOidcServer(vertxContext, request, resolvedContext);\n+            return validateAllTokensWithOidcServer(vertxContext, request, resolvedContext);\n         }\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<SecurityIdentity> validateAllTokensWithOidcServer(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n \n-        if (request.getToken() instanceof IdTokenCredential\n-                && (resolvedContext.oidcConfig.authentication.verifyAccessToken\n-                        || resolvedContext.oidcConfig.roles.source.orElse(null) == Source.accesstoken)) {\n-            vertxContext.put(\"code_flow_access_token_result\",\n-                    verifyCodeFlowAccessToken(vertxContext, request, resolvedContext));\n+        Uni<AccessToken> codeAccessTokenUni = verifyCodeFlowAccessTokenUni(vertxContext, request, resolvedContext);\n+\n+        return codeAccessTokenUni.onItem().transformToUni(\n+                new Function<AccessToken, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(AccessToken codeAccessToken) {\n+                        return validateTokenWithOidcServer(vertxContext, request, resolvedContext, codeAccessToken);\n+                    }\n+                });\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+            TenantConfigContext resolvedContext, AccessToken codeAccessToken) {\n+\n+        if (codeAccessToken != null) {\n+            vertxContext.put(\"code_flow_access_token_result\", codeAccessToken);\n         }\n \n-        final JsonObject userInfo = resolvedContext.oidcConfig.authentication.isUserInfoRequired()\n-                ? getUserInfo(vertxContext, request, resolvedContext)\n-                : null;\n+        Uni<JsonObject> userInfo = getUserInfoUni(vertxContext, request, resolvedContext);\n \n-        return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n-            @Override\n-            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+        return userInfo.onItem().transformToUni(\n+                new Function<JsonObject, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(JsonObject userInfo) {\n+                        return createSecurityIdentityWithOidcServerUni(vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+    }\n+\n+    private Uni<SecurityIdentity> createSecurityIdentityWithOidcServerUni(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n \n-                resolvedContext.auth.decodeToken(request.getToken().getToken(),\n-                        new Handler<AsyncResult<AccessToken>>() {\n+        final TokenCredential tokenCred = request.getToken();\n+        if (tokenCred instanceof AccessTokenCredential && ((AccessTokenCredential) tokenCred).isOpaque()) {\n+            // remote introspection is required, a blocking call\n+            if (BlockingOperationControl.isBlockingAllowed()) {\n+                return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                    @Override\n+                    public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyODY4Mw=="}, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE4MTg5OQ==", "bodyText": "Except that in Stuart's code, the check is done at subscription time. You are doing it at assembly time and hope for the best are subscription:\n// This is called at assembly time\nUni.createFrom().emitter(e -> {\n   // This is called at subscription time\n});\nThe thread used at assembly and subscription time may be different. So if assembly time can block, it does not means you can block at subscription time (or the opposite).", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522181899", "createdAt": "2020-11-12T15:13:59Z", "author": {"login": "cescoffier"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -81,101 +87,157 @@ public SecurityIdentity get() {\n         if (resolvedContext.oidcConfig.publicKey.isPresent()) {\n             return validateTokenWithoutOidcServer(request, resolvedContext);\n         } else {\n-            return validateTokenWithOidcServer(vertxContext, request, resolvedContext);\n+            return validateAllTokensWithOidcServer(vertxContext, request, resolvedContext);\n         }\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<SecurityIdentity> validateAllTokensWithOidcServer(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n \n-        if (request.getToken() instanceof IdTokenCredential\n-                && (resolvedContext.oidcConfig.authentication.verifyAccessToken\n-                        || resolvedContext.oidcConfig.roles.source.orElse(null) == Source.accesstoken)) {\n-            vertxContext.put(\"code_flow_access_token_result\",\n-                    verifyCodeFlowAccessToken(vertxContext, request, resolvedContext));\n+        Uni<AccessToken> codeAccessTokenUni = verifyCodeFlowAccessTokenUni(vertxContext, request, resolvedContext);\n+\n+        return codeAccessTokenUni.onItem().transformToUni(\n+                new Function<AccessToken, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(AccessToken codeAccessToken) {\n+                        return validateTokenWithOidcServer(vertxContext, request, resolvedContext, codeAccessToken);\n+                    }\n+                });\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+            TenantConfigContext resolvedContext, AccessToken codeAccessToken) {\n+\n+        if (codeAccessToken != null) {\n+            vertxContext.put(\"code_flow_access_token_result\", codeAccessToken);\n         }\n \n-        final JsonObject userInfo = resolvedContext.oidcConfig.authentication.isUserInfoRequired()\n-                ? getUserInfo(vertxContext, request, resolvedContext)\n-                : null;\n+        Uni<JsonObject> userInfo = getUserInfoUni(vertxContext, request, resolvedContext);\n \n-        return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n-            @Override\n-            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+        return userInfo.onItem().transformToUni(\n+                new Function<JsonObject, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(JsonObject userInfo) {\n+                        return createSecurityIdentityWithOidcServerUni(vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+    }\n+\n+    private Uni<SecurityIdentity> createSecurityIdentityWithOidcServerUni(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n \n-                resolvedContext.auth.decodeToken(request.getToken().getToken(),\n-                        new Handler<AsyncResult<AccessToken>>() {\n+        final TokenCredential tokenCred = request.getToken();\n+        if (tokenCred instanceof AccessTokenCredential && ((AccessTokenCredential) tokenCred).isOpaque()) {\n+            // remote introspection is required, a blocking call\n+            if (BlockingOperationControl.isBlockingAllowed()) {\n+                return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                    @Override\n+                    public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyODY4Mw=="}, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIxNDY0Mg==", "bodyText": "Hey @cescoffier I'm on it, I'm learning something new here and at this rate I may qualify as a junior Mutiny bug fixer and start helping @jponge :-)", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522214642", "createdAt": "2020-11-12T15:55:26Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -81,101 +87,157 @@ public SecurityIdentity get() {\n         if (resolvedContext.oidcConfig.publicKey.isPresent()) {\n             return validateTokenWithoutOidcServer(request, resolvedContext);\n         } else {\n-            return validateTokenWithOidcServer(vertxContext, request, resolvedContext);\n+            return validateAllTokensWithOidcServer(vertxContext, request, resolvedContext);\n         }\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<SecurityIdentity> validateAllTokensWithOidcServer(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n \n-        if (request.getToken() instanceof IdTokenCredential\n-                && (resolvedContext.oidcConfig.authentication.verifyAccessToken\n-                        || resolvedContext.oidcConfig.roles.source.orElse(null) == Source.accesstoken)) {\n-            vertxContext.put(\"code_flow_access_token_result\",\n-                    verifyCodeFlowAccessToken(vertxContext, request, resolvedContext));\n+        Uni<AccessToken> codeAccessTokenUni = verifyCodeFlowAccessTokenUni(vertxContext, request, resolvedContext);\n+\n+        return codeAccessTokenUni.onItem().transformToUni(\n+                new Function<AccessToken, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(AccessToken codeAccessToken) {\n+                        return validateTokenWithOidcServer(vertxContext, request, resolvedContext, codeAccessToken);\n+                    }\n+                });\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+            TenantConfigContext resolvedContext, AccessToken codeAccessToken) {\n+\n+        if (codeAccessToken != null) {\n+            vertxContext.put(\"code_flow_access_token_result\", codeAccessToken);\n         }\n \n-        final JsonObject userInfo = resolvedContext.oidcConfig.authentication.isUserInfoRequired()\n-                ? getUserInfo(vertxContext, request, resolvedContext)\n-                : null;\n+        Uni<JsonObject> userInfo = getUserInfoUni(vertxContext, request, resolvedContext);\n \n-        return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n-            @Override\n-            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+        return userInfo.onItem().transformToUni(\n+                new Function<JsonObject, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(JsonObject userInfo) {\n+                        return createSecurityIdentityWithOidcServerUni(vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+    }\n+\n+    private Uni<SecurityIdentity> createSecurityIdentityWithOidcServerUni(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n \n-                resolvedContext.auth.decodeToken(request.getToken().getToken(),\n-                        new Handler<AsyncResult<AccessToken>>() {\n+        final TokenCredential tokenCred = request.getToken();\n+        if (tokenCred instanceof AccessTokenCredential && ((AccessTokenCredential) tokenCred).isOpaque()) {\n+            // remote introspection is required, a blocking call\n+            if (BlockingOperationControl.isBlockingAllowed()) {\n+                return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                    @Override\n+                    public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyODY4Mw=="}, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzM5ODgwOnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDowNDo0NlrOHx8O-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDo1MzoxOVrOHx-epA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyOTE0Nw==", "bodyText": "Any reason to not use Infrastructure.getDEfaultWorkerPool()?", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522129147", "createdAt": "2020-11-12T14:04:46Z", "author": {"login": "cescoffier"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -81,101 +87,157 @@ public SecurityIdentity get() {\n         if (resolvedContext.oidcConfig.publicKey.isPresent()) {\n             return validateTokenWithoutOidcServer(request, resolvedContext);\n         } else {\n-            return validateTokenWithOidcServer(vertxContext, request, resolvedContext);\n+            return validateAllTokensWithOidcServer(vertxContext, request, resolvedContext);\n         }\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<SecurityIdentity> validateAllTokensWithOidcServer(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n \n-        if (request.getToken() instanceof IdTokenCredential\n-                && (resolvedContext.oidcConfig.authentication.verifyAccessToken\n-                        || resolvedContext.oidcConfig.roles.source.orElse(null) == Source.accesstoken)) {\n-            vertxContext.put(\"code_flow_access_token_result\",\n-                    verifyCodeFlowAccessToken(vertxContext, request, resolvedContext));\n+        Uni<AccessToken> codeAccessTokenUni = verifyCodeFlowAccessTokenUni(vertxContext, request, resolvedContext);\n+\n+        return codeAccessTokenUni.onItem().transformToUni(\n+                new Function<AccessToken, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(AccessToken codeAccessToken) {\n+                        return validateTokenWithOidcServer(vertxContext, request, resolvedContext, codeAccessToken);\n+                    }\n+                });\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+            TenantConfigContext resolvedContext, AccessToken codeAccessToken) {\n+\n+        if (codeAccessToken != null) {\n+            vertxContext.put(\"code_flow_access_token_result\", codeAccessToken);\n         }\n \n-        final JsonObject userInfo = resolvedContext.oidcConfig.authentication.isUserInfoRequired()\n-                ? getUserInfo(vertxContext, request, resolvedContext)\n-                : null;\n+        Uni<JsonObject> userInfo = getUserInfoUni(vertxContext, request, resolvedContext);\n \n-        return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n-            @Override\n-            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+        return userInfo.onItem().transformToUni(\n+                new Function<JsonObject, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(JsonObject userInfo) {\n+                        return createSecurityIdentityWithOidcServerUni(vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+    }\n+\n+    private Uni<SecurityIdentity> createSecurityIdentityWithOidcServerUni(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n \n-                resolvedContext.auth.decodeToken(request.getToken().getToken(),\n-                        new Handler<AsyncResult<AccessToken>>() {\n+        final TokenCredential tokenCred = request.getToken();\n+        if (tokenCred instanceof AccessTokenCredential && ((AccessTokenCredential) tokenCred).isOpaque()) {\n+            // remote introspection is required, a blocking call\n+            if (BlockingOperationControl.isBlockingAllowed()) {\n+                return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                    @Override\n+                    public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+            } else {\n+                return Uni.createFrom().emitter(\n+                        new Consumer<UniEmitter<? super SecurityIdentity>>() {\n                             @Override\n-                            public void handle(AsyncResult<AccessToken> event) {\n-                                if (event.failed()) {\n-                                    uniEmitter.fail(new AuthenticationFailedException(event.cause()));\n-                                    return;\n-                                }\n+                            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                                tenantResolver.getBlockingExecutor().execute(new Runnable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE1NjQ3NA==", "bodyText": "@cescoffier It is the same executor which Stuart uses here so I'm just trying to keep it consistent. Perhaps you'd like to open an issue for Stuart (or I can do it) to replace this executor with Infrastructure.getDEfaultWorkerPool() ?", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522156474", "createdAt": "2020-11-12T14:41:13Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -81,101 +87,157 @@ public SecurityIdentity get() {\n         if (resolvedContext.oidcConfig.publicKey.isPresent()) {\n             return validateTokenWithoutOidcServer(request, resolvedContext);\n         } else {\n-            return validateTokenWithOidcServer(vertxContext, request, resolvedContext);\n+            return validateAllTokensWithOidcServer(vertxContext, request, resolvedContext);\n         }\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<SecurityIdentity> validateAllTokensWithOidcServer(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n \n-        if (request.getToken() instanceof IdTokenCredential\n-                && (resolvedContext.oidcConfig.authentication.verifyAccessToken\n-                        || resolvedContext.oidcConfig.roles.source.orElse(null) == Source.accesstoken)) {\n-            vertxContext.put(\"code_flow_access_token_result\",\n-                    verifyCodeFlowAccessToken(vertxContext, request, resolvedContext));\n+        Uni<AccessToken> codeAccessTokenUni = verifyCodeFlowAccessTokenUni(vertxContext, request, resolvedContext);\n+\n+        return codeAccessTokenUni.onItem().transformToUni(\n+                new Function<AccessToken, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(AccessToken codeAccessToken) {\n+                        return validateTokenWithOidcServer(vertxContext, request, resolvedContext, codeAccessToken);\n+                    }\n+                });\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+            TenantConfigContext resolvedContext, AccessToken codeAccessToken) {\n+\n+        if (codeAccessToken != null) {\n+            vertxContext.put(\"code_flow_access_token_result\", codeAccessToken);\n         }\n \n-        final JsonObject userInfo = resolvedContext.oidcConfig.authentication.isUserInfoRequired()\n-                ? getUserInfo(vertxContext, request, resolvedContext)\n-                : null;\n+        Uni<JsonObject> userInfo = getUserInfoUni(vertxContext, request, resolvedContext);\n \n-        return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n-            @Override\n-            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+        return userInfo.onItem().transformToUni(\n+                new Function<JsonObject, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(JsonObject userInfo) {\n+                        return createSecurityIdentityWithOidcServerUni(vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+    }\n+\n+    private Uni<SecurityIdentity> createSecurityIdentityWithOidcServerUni(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n \n-                resolvedContext.auth.decodeToken(request.getToken().getToken(),\n-                        new Handler<AsyncResult<AccessToken>>() {\n+        final TokenCredential tokenCred = request.getToken();\n+        if (tokenCred instanceof AccessTokenCredential && ((AccessTokenCredential) tokenCred).isOpaque()) {\n+            // remote introspection is required, a blocking call\n+            if (BlockingOperationControl.isBlockingAllowed()) {\n+                return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                    @Override\n+                    public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+            } else {\n+                return Uni.createFrom().emitter(\n+                        new Consumer<UniEmitter<? super SecurityIdentity>>() {\n                             @Override\n-                            public void handle(AsyncResult<AccessToken> event) {\n-                                if (event.failed()) {\n-                                    uniEmitter.fail(new AuthenticationFailedException(event.cause()));\n-                                    return;\n-                                }\n+                            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                                tenantResolver.getBlockingExecutor().execute(new Runnable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyOTE0Nw=="}, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE2NTkyNA==", "bodyText": "it's actually the same pool.", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522165924", "createdAt": "2020-11-12T14:53:19Z", "author": {"login": "cescoffier"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -81,101 +87,157 @@ public SecurityIdentity get() {\n         if (resolvedContext.oidcConfig.publicKey.isPresent()) {\n             return validateTokenWithoutOidcServer(request, resolvedContext);\n         } else {\n-            return validateTokenWithOidcServer(vertxContext, request, resolvedContext);\n+            return validateAllTokensWithOidcServer(vertxContext, request, resolvedContext);\n         }\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<SecurityIdentity> validateAllTokensWithOidcServer(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n \n-        if (request.getToken() instanceof IdTokenCredential\n-                && (resolvedContext.oidcConfig.authentication.verifyAccessToken\n-                        || resolvedContext.oidcConfig.roles.source.orElse(null) == Source.accesstoken)) {\n-            vertxContext.put(\"code_flow_access_token_result\",\n-                    verifyCodeFlowAccessToken(vertxContext, request, resolvedContext));\n+        Uni<AccessToken> codeAccessTokenUni = verifyCodeFlowAccessTokenUni(vertxContext, request, resolvedContext);\n+\n+        return codeAccessTokenUni.onItem().transformToUni(\n+                new Function<AccessToken, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(AccessToken codeAccessToken) {\n+                        return validateTokenWithOidcServer(vertxContext, request, resolvedContext, codeAccessToken);\n+                    }\n+                });\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+            TenantConfigContext resolvedContext, AccessToken codeAccessToken) {\n+\n+        if (codeAccessToken != null) {\n+            vertxContext.put(\"code_flow_access_token_result\", codeAccessToken);\n         }\n \n-        final JsonObject userInfo = resolvedContext.oidcConfig.authentication.isUserInfoRequired()\n-                ? getUserInfo(vertxContext, request, resolvedContext)\n-                : null;\n+        Uni<JsonObject> userInfo = getUserInfoUni(vertxContext, request, resolvedContext);\n \n-        return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n-            @Override\n-            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+        return userInfo.onItem().transformToUni(\n+                new Function<JsonObject, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(JsonObject userInfo) {\n+                        return createSecurityIdentityWithOidcServerUni(vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+    }\n+\n+    private Uni<SecurityIdentity> createSecurityIdentityWithOidcServerUni(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n \n-                resolvedContext.auth.decodeToken(request.getToken().getToken(),\n-                        new Handler<AsyncResult<AccessToken>>() {\n+        final TokenCredential tokenCred = request.getToken();\n+        if (tokenCred instanceof AccessTokenCredential && ((AccessTokenCredential) tokenCred).isOpaque()) {\n+            // remote introspection is required, a blocking call\n+            if (BlockingOperationControl.isBlockingAllowed()) {\n+                return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                    @Override\n+                    public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+            } else {\n+                return Uni.createFrom().emitter(\n+                        new Consumer<UniEmitter<? super SecurityIdentity>>() {\n                             @Override\n-                            public void handle(AsyncResult<AccessToken> event) {\n-                                if (event.failed()) {\n-                                    uniEmitter.fail(new AuthenticationFailedException(event.cause()));\n-                                    return;\n-                                }\n+                            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                                tenantResolver.getBlockingExecutor().execute(new Runnable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyOTE0Nw=="}, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzQwMzExOnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDowNTo0NlrOHx8RuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDo1ODo1MlrOHx-v-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyOTg0OQ==", "bodyText": "if I'm not mistaken this may be blocking, here you may be on the event loop.", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522129849", "createdAt": "2020-11-12T14:05:46Z", "author": {"login": "cescoffier"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -81,101 +87,157 @@ public SecurityIdentity get() {\n         if (resolvedContext.oidcConfig.publicKey.isPresent()) {\n             return validateTokenWithoutOidcServer(request, resolvedContext);\n         } else {\n-            return validateTokenWithOidcServer(vertxContext, request, resolvedContext);\n+            return validateAllTokensWithOidcServer(vertxContext, request, resolvedContext);\n         }\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<SecurityIdentity> validateAllTokensWithOidcServer(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n \n-        if (request.getToken() instanceof IdTokenCredential\n-                && (resolvedContext.oidcConfig.authentication.verifyAccessToken\n-                        || resolvedContext.oidcConfig.roles.source.orElse(null) == Source.accesstoken)) {\n-            vertxContext.put(\"code_flow_access_token_result\",\n-                    verifyCodeFlowAccessToken(vertxContext, request, resolvedContext));\n+        Uni<AccessToken> codeAccessTokenUni = verifyCodeFlowAccessTokenUni(vertxContext, request, resolvedContext);\n+\n+        return codeAccessTokenUni.onItem().transformToUni(\n+                new Function<AccessToken, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(AccessToken codeAccessToken) {\n+                        return validateTokenWithOidcServer(vertxContext, request, resolvedContext, codeAccessToken);\n+                    }\n+                });\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+            TenantConfigContext resolvedContext, AccessToken codeAccessToken) {\n+\n+        if (codeAccessToken != null) {\n+            vertxContext.put(\"code_flow_access_token_result\", codeAccessToken);\n         }\n \n-        final JsonObject userInfo = resolvedContext.oidcConfig.authentication.isUserInfoRequired()\n-                ? getUserInfo(vertxContext, request, resolvedContext)\n-                : null;\n+        Uni<JsonObject> userInfo = getUserInfoUni(vertxContext, request, resolvedContext);\n \n-        return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n-            @Override\n-            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+        return userInfo.onItem().transformToUni(\n+                new Function<JsonObject, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(JsonObject userInfo) {\n+                        return createSecurityIdentityWithOidcServerUni(vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+    }\n+\n+    private Uni<SecurityIdentity> createSecurityIdentityWithOidcServerUni(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n \n-                resolvedContext.auth.decodeToken(request.getToken().getToken(),\n-                        new Handler<AsyncResult<AccessToken>>() {\n+        final TokenCredential tokenCred = request.getToken();\n+        if (tokenCred instanceof AccessTokenCredential && ((AccessTokenCredential) tokenCred).isOpaque()) {\n+            // remote introspection is required, a blocking call\n+            if (BlockingOperationControl.isBlockingAllowed()) {\n+                return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                    @Override\n+                    public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+            } else {\n+                return Uni.createFrom().emitter(\n+                        new Consumer<UniEmitter<? super SecurityIdentity>>() {\n                             @Override\n-                            public void handle(AsyncResult<AccessToken> event) {\n-                                if (event.failed()) {\n-                                    uniEmitter.fail(new AuthenticationFailedException(event.cause()));\n-                                    return;\n-                                }\n+                            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                                tenantResolver.getBlockingExecutor().execute(new Runnable() {\n+                                    @Override\n+                                    public void run() {\n+                                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext,\n+                                                userInfo);\n+                                    }\n+                                });\n+                            }\n+                        });\n+            }\n+        } else {\n+            return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                @Override\n+                public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                    createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE3MDM2Mw==", "bodyText": "@cescoffier please see this comment below. Unless it is an opaque token it should be fine to have on the IO thread, because it is a JWT token which is verified by a locally cached JWK keys", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522170363", "createdAt": "2020-11-12T14:58:52Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -81,101 +87,157 @@ public SecurityIdentity get() {\n         if (resolvedContext.oidcConfig.publicKey.isPresent()) {\n             return validateTokenWithoutOidcServer(request, resolvedContext);\n         } else {\n-            return validateTokenWithOidcServer(vertxContext, request, resolvedContext);\n+            return validateAllTokensWithOidcServer(vertxContext, request, resolvedContext);\n         }\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<SecurityIdentity> validateAllTokensWithOidcServer(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n \n-        if (request.getToken() instanceof IdTokenCredential\n-                && (resolvedContext.oidcConfig.authentication.verifyAccessToken\n-                        || resolvedContext.oidcConfig.roles.source.orElse(null) == Source.accesstoken)) {\n-            vertxContext.put(\"code_flow_access_token_result\",\n-                    verifyCodeFlowAccessToken(vertxContext, request, resolvedContext));\n+        Uni<AccessToken> codeAccessTokenUni = verifyCodeFlowAccessTokenUni(vertxContext, request, resolvedContext);\n+\n+        return codeAccessTokenUni.onItem().transformToUni(\n+                new Function<AccessToken, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(AccessToken codeAccessToken) {\n+                        return validateTokenWithOidcServer(vertxContext, request, resolvedContext, codeAccessToken);\n+                    }\n+                });\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+            TenantConfigContext resolvedContext, AccessToken codeAccessToken) {\n+\n+        if (codeAccessToken != null) {\n+            vertxContext.put(\"code_flow_access_token_result\", codeAccessToken);\n         }\n \n-        final JsonObject userInfo = resolvedContext.oidcConfig.authentication.isUserInfoRequired()\n-                ? getUserInfo(vertxContext, request, resolvedContext)\n-                : null;\n+        Uni<JsonObject> userInfo = getUserInfoUni(vertxContext, request, resolvedContext);\n \n-        return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n-            @Override\n-            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+        return userInfo.onItem().transformToUni(\n+                new Function<JsonObject, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(JsonObject userInfo) {\n+                        return createSecurityIdentityWithOidcServerUni(vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+    }\n+\n+    private Uni<SecurityIdentity> createSecurityIdentityWithOidcServerUni(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n \n-                resolvedContext.auth.decodeToken(request.getToken().getToken(),\n-                        new Handler<AsyncResult<AccessToken>>() {\n+        final TokenCredential tokenCred = request.getToken();\n+        if (tokenCred instanceof AccessTokenCredential && ((AccessTokenCredential) tokenCred).isOpaque()) {\n+            // remote introspection is required, a blocking call\n+            if (BlockingOperationControl.isBlockingAllowed()) {\n+                return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                    @Override\n+                    public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+            } else {\n+                return Uni.createFrom().emitter(\n+                        new Consumer<UniEmitter<? super SecurityIdentity>>() {\n                             @Override\n-                            public void handle(AsyncResult<AccessToken> event) {\n-                                if (event.failed()) {\n-                                    uniEmitter.fail(new AuthenticationFailedException(event.cause()));\n-                                    return;\n-                                }\n+                            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                                tenantResolver.getBlockingExecutor().execute(new Runnable() {\n+                                    @Override\n+                                    public void run() {\n+                                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext,\n+                                                userInfo);\n+                                    }\n+                                });\n+                            }\n+                        });\n+            }\n+        } else {\n+            return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                @Override\n+                public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                    createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyOTg0OQ=="}, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzQwODQ1OnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "isResolved": true, "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDowNzowMFrOHx8VEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNjoxNzo1MFrOHyCg_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEzMDcwNw==", "bodyText": "on which thread is this called? Are you 100% sure it cannot be the event loop?", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522130707", "createdAt": "2020-11-12T14:07:00Z", "author": {"login": "cescoffier"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -81,101 +87,157 @@ public SecurityIdentity get() {\n         if (resolvedContext.oidcConfig.publicKey.isPresent()) {\n             return validateTokenWithoutOidcServer(request, resolvedContext);\n         } else {\n-            return validateTokenWithOidcServer(vertxContext, request, resolvedContext);\n+            return validateAllTokensWithOidcServer(vertxContext, request, resolvedContext);\n         }\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<SecurityIdentity> validateAllTokensWithOidcServer(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n \n-        if (request.getToken() instanceof IdTokenCredential\n-                && (resolvedContext.oidcConfig.authentication.verifyAccessToken\n-                        || resolvedContext.oidcConfig.roles.source.orElse(null) == Source.accesstoken)) {\n-            vertxContext.put(\"code_flow_access_token_result\",\n-                    verifyCodeFlowAccessToken(vertxContext, request, resolvedContext));\n+        Uni<AccessToken> codeAccessTokenUni = verifyCodeFlowAccessTokenUni(vertxContext, request, resolvedContext);\n+\n+        return codeAccessTokenUni.onItem().transformToUni(\n+                new Function<AccessToken, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(AccessToken codeAccessToken) {\n+                        return validateTokenWithOidcServer(vertxContext, request, resolvedContext, codeAccessToken);\n+                    }\n+                });\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+            TenantConfigContext resolvedContext, AccessToken codeAccessToken) {\n+\n+        if (codeAccessToken != null) {\n+            vertxContext.put(\"code_flow_access_token_result\", codeAccessToken);\n         }\n \n-        final JsonObject userInfo = resolvedContext.oidcConfig.authentication.isUserInfoRequired()\n-                ? getUserInfo(vertxContext, request, resolvedContext)\n-                : null;\n+        Uni<JsonObject> userInfo = getUserInfoUni(vertxContext, request, resolvedContext);\n \n-        return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n-            @Override\n-            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+        return userInfo.onItem().transformToUni(\n+                new Function<JsonObject, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(JsonObject userInfo) {\n+                        return createSecurityIdentityWithOidcServerUni(vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+    }\n+\n+    private Uni<SecurityIdentity> createSecurityIdentityWithOidcServerUni(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n \n-                resolvedContext.auth.decodeToken(request.getToken().getToken(),\n-                        new Handler<AsyncResult<AccessToken>>() {\n+        final TokenCredential tokenCred = request.getToken();\n+        if (tokenCred instanceof AccessTokenCredential && ((AccessTokenCredential) tokenCred).isOpaque()) {\n+            // remote introspection is required, a blocking call\n+            if (BlockingOperationControl.isBlockingAllowed()) {\n+                return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                    @Override\n+                    public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+            } else {\n+                return Uni.createFrom().emitter(\n+                        new Consumer<UniEmitter<? super SecurityIdentity>>() {\n                             @Override\n-                            public void handle(AsyncResult<AccessToken> event) {\n-                                if (event.failed()) {\n-                                    uniEmitter.fail(new AuthenticationFailedException(event.cause()));\n-                                    return;\n-                                }\n+                            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                                tenantResolver.getBlockingExecutor().execute(new Runnable() {\n+                                    @Override\n+                                    public void run() {\n+                                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext,\n+                                                userInfo);\n+                                    }\n+                                });\n+                            }\n+                        });\n+            }\n+        } else {\n+            return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                @Override\n+                public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                    createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);\n+                }\n+            });\n+        }\n+    }\n \n-                                // Token has been verified, as a JWT or an opaque token, possibly involving\n-                                // an introspection request.\n-                                final TokenCredential tokenCred = request.getToken();\n+    @SuppressWarnings(\"deprecation\")\n+    private void createSecurityIdentityWithOidcServer(UniEmitter<? super SecurityIdentity> uniEmitter,\n+            RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n+        resolvedContext.auth.decodeToken(request.getToken().getToken(),\n+                new Handler<AsyncResult<AccessToken>>() {\n+                    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEzMTQzNw==", "bodyText": "where is the blocking call you mentioned earlier?", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522131437", "createdAt": "2020-11-12T14:08:03Z", "author": {"login": "cescoffier"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -81,101 +87,157 @@ public SecurityIdentity get() {\n         if (resolvedContext.oidcConfig.publicKey.isPresent()) {\n             return validateTokenWithoutOidcServer(request, resolvedContext);\n         } else {\n-            return validateTokenWithOidcServer(vertxContext, request, resolvedContext);\n+            return validateAllTokensWithOidcServer(vertxContext, request, resolvedContext);\n         }\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<SecurityIdentity> validateAllTokensWithOidcServer(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n \n-        if (request.getToken() instanceof IdTokenCredential\n-                && (resolvedContext.oidcConfig.authentication.verifyAccessToken\n-                        || resolvedContext.oidcConfig.roles.source.orElse(null) == Source.accesstoken)) {\n-            vertxContext.put(\"code_flow_access_token_result\",\n-                    verifyCodeFlowAccessToken(vertxContext, request, resolvedContext));\n+        Uni<AccessToken> codeAccessTokenUni = verifyCodeFlowAccessTokenUni(vertxContext, request, resolvedContext);\n+\n+        return codeAccessTokenUni.onItem().transformToUni(\n+                new Function<AccessToken, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(AccessToken codeAccessToken) {\n+                        return validateTokenWithOidcServer(vertxContext, request, resolvedContext, codeAccessToken);\n+                    }\n+                });\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+            TenantConfigContext resolvedContext, AccessToken codeAccessToken) {\n+\n+        if (codeAccessToken != null) {\n+            vertxContext.put(\"code_flow_access_token_result\", codeAccessToken);\n         }\n \n-        final JsonObject userInfo = resolvedContext.oidcConfig.authentication.isUserInfoRequired()\n-                ? getUserInfo(vertxContext, request, resolvedContext)\n-                : null;\n+        Uni<JsonObject> userInfo = getUserInfoUni(vertxContext, request, resolvedContext);\n \n-        return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n-            @Override\n-            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+        return userInfo.onItem().transformToUni(\n+                new Function<JsonObject, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(JsonObject userInfo) {\n+                        return createSecurityIdentityWithOidcServerUni(vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+    }\n+\n+    private Uni<SecurityIdentity> createSecurityIdentityWithOidcServerUni(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n \n-                resolvedContext.auth.decodeToken(request.getToken().getToken(),\n-                        new Handler<AsyncResult<AccessToken>>() {\n+        final TokenCredential tokenCred = request.getToken();\n+        if (tokenCred instanceof AccessTokenCredential && ((AccessTokenCredential) tokenCred).isOpaque()) {\n+            // remote introspection is required, a blocking call\n+            if (BlockingOperationControl.isBlockingAllowed()) {\n+                return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                    @Override\n+                    public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+            } else {\n+                return Uni.createFrom().emitter(\n+                        new Consumer<UniEmitter<? super SecurityIdentity>>() {\n                             @Override\n-                            public void handle(AsyncResult<AccessToken> event) {\n-                                if (event.failed()) {\n-                                    uniEmitter.fail(new AuthenticationFailedException(event.cause()));\n-                                    return;\n-                                }\n+                            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                                tenantResolver.getBlockingExecutor().execute(new Runnable() {\n+                                    @Override\n+                                    public void run() {\n+                                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext,\n+                                                userInfo);\n+                                    }\n+                                });\n+                            }\n+                        });\n+            }\n+        } else {\n+            return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                @Override\n+                public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                    createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);\n+                }\n+            });\n+        }\n+    }\n \n-                                // Token has been verified, as a JWT or an opaque token, possibly involving\n-                                // an introspection request.\n-                                final TokenCredential tokenCred = request.getToken();\n+    @SuppressWarnings(\"deprecation\")\n+    private void createSecurityIdentityWithOidcServer(UniEmitter<? super SecurityIdentity> uniEmitter,\n+            RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n+        resolvedContext.auth.decodeToken(request.getToken().getToken(),\n+                new Handler<AsyncResult<AccessToken>>() {\n+                    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEzMDcwNw=="}, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE2MzU4MA==", "bodyText": "@cescoffier Yeah; so if it is an IdToken which is a case with the code flow - then it is JWT => hence in 99% cases it is a local verification; if it is a bearer token (the one coming with HTTP Authorization) and it is JWT - the same situation. So it is OK to run it on the IO thread.\nBut if either token is opaque (binary) then it must be a remote introspection call done internally by Vert.x as part of this decodeToken call - hence in such cases it is a blocking call.\n\nwhere is the blocking call you mentioned earlier?\n\nRight now, if OIDC is configured to refresh the token then it will run in the blocking executor starting from here, before the decision to verify the token is made, hence this blocking operation control check", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522163580", "createdAt": "2020-11-12T14:50:18Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -81,101 +87,157 @@ public SecurityIdentity get() {\n         if (resolvedContext.oidcConfig.publicKey.isPresent()) {\n             return validateTokenWithoutOidcServer(request, resolvedContext);\n         } else {\n-            return validateTokenWithOidcServer(vertxContext, request, resolvedContext);\n+            return validateAllTokensWithOidcServer(vertxContext, request, resolvedContext);\n         }\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<SecurityIdentity> validateAllTokensWithOidcServer(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n \n-        if (request.getToken() instanceof IdTokenCredential\n-                && (resolvedContext.oidcConfig.authentication.verifyAccessToken\n-                        || resolvedContext.oidcConfig.roles.source.orElse(null) == Source.accesstoken)) {\n-            vertxContext.put(\"code_flow_access_token_result\",\n-                    verifyCodeFlowAccessToken(vertxContext, request, resolvedContext));\n+        Uni<AccessToken> codeAccessTokenUni = verifyCodeFlowAccessTokenUni(vertxContext, request, resolvedContext);\n+\n+        return codeAccessTokenUni.onItem().transformToUni(\n+                new Function<AccessToken, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(AccessToken codeAccessToken) {\n+                        return validateTokenWithOidcServer(vertxContext, request, resolvedContext, codeAccessToken);\n+                    }\n+                });\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+            TenantConfigContext resolvedContext, AccessToken codeAccessToken) {\n+\n+        if (codeAccessToken != null) {\n+            vertxContext.put(\"code_flow_access_token_result\", codeAccessToken);\n         }\n \n-        final JsonObject userInfo = resolvedContext.oidcConfig.authentication.isUserInfoRequired()\n-                ? getUserInfo(vertxContext, request, resolvedContext)\n-                : null;\n+        Uni<JsonObject> userInfo = getUserInfoUni(vertxContext, request, resolvedContext);\n \n-        return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n-            @Override\n-            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+        return userInfo.onItem().transformToUni(\n+                new Function<JsonObject, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(JsonObject userInfo) {\n+                        return createSecurityIdentityWithOidcServerUni(vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+    }\n+\n+    private Uni<SecurityIdentity> createSecurityIdentityWithOidcServerUni(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n \n-                resolvedContext.auth.decodeToken(request.getToken().getToken(),\n-                        new Handler<AsyncResult<AccessToken>>() {\n+        final TokenCredential tokenCred = request.getToken();\n+        if (tokenCred instanceof AccessTokenCredential && ((AccessTokenCredential) tokenCred).isOpaque()) {\n+            // remote introspection is required, a blocking call\n+            if (BlockingOperationControl.isBlockingAllowed()) {\n+                return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                    @Override\n+                    public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+            } else {\n+                return Uni.createFrom().emitter(\n+                        new Consumer<UniEmitter<? super SecurityIdentity>>() {\n                             @Override\n-                            public void handle(AsyncResult<AccessToken> event) {\n-                                if (event.failed()) {\n-                                    uniEmitter.fail(new AuthenticationFailedException(event.cause()));\n-                                    return;\n-                                }\n+                            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                                tenantResolver.getBlockingExecutor().execute(new Runnable() {\n+                                    @Override\n+                                    public void run() {\n+                                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext,\n+                                                userInfo);\n+                                    }\n+                                });\n+                            }\n+                        });\n+            }\n+        } else {\n+            return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                @Override\n+                public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                    createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);\n+                }\n+            });\n+        }\n+    }\n \n-                                // Token has been verified, as a JWT or an opaque token, possibly involving\n-                                // an introspection request.\n-                                final TokenCredential tokenCred = request.getToken();\n+    @SuppressWarnings(\"deprecation\")\n+    private void createSecurityIdentityWithOidcServer(UniEmitter<? super SecurityIdentity> uniEmitter,\n+            RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n+        resolvedContext.auth.decodeToken(request.getToken().getToken(),\n+                new Handler<AsyncResult<AccessToken>>() {\n+                    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEzMDcwNw=="}, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE2NzU0NQ==", "bodyText": "Vert.x is doing a blocking call and block the event loop? That would be a first. @pmlopes, isn't this hidden?", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522167545", "createdAt": "2020-11-12T14:55:17Z", "author": {"login": "cescoffier"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -81,101 +87,157 @@ public SecurityIdentity get() {\n         if (resolvedContext.oidcConfig.publicKey.isPresent()) {\n             return validateTokenWithoutOidcServer(request, resolvedContext);\n         } else {\n-            return validateTokenWithOidcServer(vertxContext, request, resolvedContext);\n+            return validateAllTokensWithOidcServer(vertxContext, request, resolvedContext);\n         }\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<SecurityIdentity> validateAllTokensWithOidcServer(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n \n-        if (request.getToken() instanceof IdTokenCredential\n-                && (resolvedContext.oidcConfig.authentication.verifyAccessToken\n-                        || resolvedContext.oidcConfig.roles.source.orElse(null) == Source.accesstoken)) {\n-            vertxContext.put(\"code_flow_access_token_result\",\n-                    verifyCodeFlowAccessToken(vertxContext, request, resolvedContext));\n+        Uni<AccessToken> codeAccessTokenUni = verifyCodeFlowAccessTokenUni(vertxContext, request, resolvedContext);\n+\n+        return codeAccessTokenUni.onItem().transformToUni(\n+                new Function<AccessToken, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(AccessToken codeAccessToken) {\n+                        return validateTokenWithOidcServer(vertxContext, request, resolvedContext, codeAccessToken);\n+                    }\n+                });\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+            TenantConfigContext resolvedContext, AccessToken codeAccessToken) {\n+\n+        if (codeAccessToken != null) {\n+            vertxContext.put(\"code_flow_access_token_result\", codeAccessToken);\n         }\n \n-        final JsonObject userInfo = resolvedContext.oidcConfig.authentication.isUserInfoRequired()\n-                ? getUserInfo(vertxContext, request, resolvedContext)\n-                : null;\n+        Uni<JsonObject> userInfo = getUserInfoUni(vertxContext, request, resolvedContext);\n \n-        return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n-            @Override\n-            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+        return userInfo.onItem().transformToUni(\n+                new Function<JsonObject, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(JsonObject userInfo) {\n+                        return createSecurityIdentityWithOidcServerUni(vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+    }\n+\n+    private Uni<SecurityIdentity> createSecurityIdentityWithOidcServerUni(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n \n-                resolvedContext.auth.decodeToken(request.getToken().getToken(),\n-                        new Handler<AsyncResult<AccessToken>>() {\n+        final TokenCredential tokenCred = request.getToken();\n+        if (tokenCred instanceof AccessTokenCredential && ((AccessTokenCredential) tokenCred).isOpaque()) {\n+            // remote introspection is required, a blocking call\n+            if (BlockingOperationControl.isBlockingAllowed()) {\n+                return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                    @Override\n+                    public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+            } else {\n+                return Uni.createFrom().emitter(\n+                        new Consumer<UniEmitter<? super SecurityIdentity>>() {\n                             @Override\n-                            public void handle(AsyncResult<AccessToken> event) {\n-                                if (event.failed()) {\n-                                    uniEmitter.fail(new AuthenticationFailedException(event.cause()));\n-                                    return;\n-                                }\n+                            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                                tenantResolver.getBlockingExecutor().execute(new Runnable() {\n+                                    @Override\n+                                    public void run() {\n+                                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext,\n+                                                userInfo);\n+                                    }\n+                                });\n+                            }\n+                        });\n+            }\n+        } else {\n+            return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                @Override\n+                public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                    createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);\n+                }\n+            });\n+        }\n+    }\n \n-                                // Token has been verified, as a JWT or an opaque token, possibly involving\n-                                // an introspection request.\n-                                final TokenCredential tokenCred = request.getToken();\n+    @SuppressWarnings(\"deprecation\")\n+    private void createSecurityIdentityWithOidcServer(UniEmitter<? super SecurityIdentity> uniEmitter,\n+            RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n+        resolvedContext.auth.decodeToken(request.getToken().getToken(),\n+                new Handler<AsyncResult<AccessToken>>() {\n+                    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEzMDcwNw=="}, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE2OTI1Mw==", "bodyText": "I guess that for you, as a user, you don't see the Vert.x gymnastics.", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522169253", "createdAt": "2020-11-12T14:57:29Z", "author": {"login": "cescoffier"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -81,101 +87,157 @@ public SecurityIdentity get() {\n         if (resolvedContext.oidcConfig.publicKey.isPresent()) {\n             return validateTokenWithoutOidcServer(request, resolvedContext);\n         } else {\n-            return validateTokenWithOidcServer(vertxContext, request, resolvedContext);\n+            return validateAllTokensWithOidcServer(vertxContext, request, resolvedContext);\n         }\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<SecurityIdentity> validateAllTokensWithOidcServer(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n \n-        if (request.getToken() instanceof IdTokenCredential\n-                && (resolvedContext.oidcConfig.authentication.verifyAccessToken\n-                        || resolvedContext.oidcConfig.roles.source.orElse(null) == Source.accesstoken)) {\n-            vertxContext.put(\"code_flow_access_token_result\",\n-                    verifyCodeFlowAccessToken(vertxContext, request, resolvedContext));\n+        Uni<AccessToken> codeAccessTokenUni = verifyCodeFlowAccessTokenUni(vertxContext, request, resolvedContext);\n+\n+        return codeAccessTokenUni.onItem().transformToUni(\n+                new Function<AccessToken, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(AccessToken codeAccessToken) {\n+                        return validateTokenWithOidcServer(vertxContext, request, resolvedContext, codeAccessToken);\n+                    }\n+                });\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+            TenantConfigContext resolvedContext, AccessToken codeAccessToken) {\n+\n+        if (codeAccessToken != null) {\n+            vertxContext.put(\"code_flow_access_token_result\", codeAccessToken);\n         }\n \n-        final JsonObject userInfo = resolvedContext.oidcConfig.authentication.isUserInfoRequired()\n-                ? getUserInfo(vertxContext, request, resolvedContext)\n-                : null;\n+        Uni<JsonObject> userInfo = getUserInfoUni(vertxContext, request, resolvedContext);\n \n-        return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n-            @Override\n-            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+        return userInfo.onItem().transformToUni(\n+                new Function<JsonObject, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(JsonObject userInfo) {\n+                        return createSecurityIdentityWithOidcServerUni(vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+    }\n+\n+    private Uni<SecurityIdentity> createSecurityIdentityWithOidcServerUni(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n \n-                resolvedContext.auth.decodeToken(request.getToken().getToken(),\n-                        new Handler<AsyncResult<AccessToken>>() {\n+        final TokenCredential tokenCred = request.getToken();\n+        if (tokenCred instanceof AccessTokenCredential && ((AccessTokenCredential) tokenCred).isOpaque()) {\n+            // remote introspection is required, a blocking call\n+            if (BlockingOperationControl.isBlockingAllowed()) {\n+                return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                    @Override\n+                    public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+            } else {\n+                return Uni.createFrom().emitter(\n+                        new Consumer<UniEmitter<? super SecurityIdentity>>() {\n                             @Override\n-                            public void handle(AsyncResult<AccessToken> event) {\n-                                if (event.failed()) {\n-                                    uniEmitter.fail(new AuthenticationFailedException(event.cause()));\n-                                    return;\n-                                }\n+                            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                                tenantResolver.getBlockingExecutor().execute(new Runnable() {\n+                                    @Override\n+                                    public void run() {\n+                                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext,\n+                                                userInfo);\n+                                    }\n+                                });\n+                            }\n+                        });\n+            }\n+        } else {\n+            return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                @Override\n+                public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                    createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);\n+                }\n+            });\n+        }\n+    }\n \n-                                // Token has been verified, as a JWT or an opaque token, possibly involving\n-                                // an introspection request.\n-                                final TokenCredential tokenCred = request.getToken();\n+    @SuppressWarnings(\"deprecation\")\n+    private void createSecurityIdentityWithOidcServer(UniEmitter<? super SecurityIdentity> uniEmitter,\n+            RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n+        resolvedContext.auth.decodeToken(request.getToken().getToken(),\n+                new Handler<AsyncResult<AccessToken>>() {\n+                    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEzMDcwNw=="}, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE4MjQ5MQ==", "bodyText": "I've no knowledge on the mentioned code, but I can assure that the calls from vert.x auth to the idp server are asynchronous. There's no executeBlocking code on vertx-auth-oauth2`", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522182491", "createdAt": "2020-11-12T15:14:43Z", "author": {"login": "pmlopes"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -81,101 +87,157 @@ public SecurityIdentity get() {\n         if (resolvedContext.oidcConfig.publicKey.isPresent()) {\n             return validateTokenWithoutOidcServer(request, resolvedContext);\n         } else {\n-            return validateTokenWithOidcServer(vertxContext, request, resolvedContext);\n+            return validateAllTokensWithOidcServer(vertxContext, request, resolvedContext);\n         }\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<SecurityIdentity> validateAllTokensWithOidcServer(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n \n-        if (request.getToken() instanceof IdTokenCredential\n-                && (resolvedContext.oidcConfig.authentication.verifyAccessToken\n-                        || resolvedContext.oidcConfig.roles.source.orElse(null) == Source.accesstoken)) {\n-            vertxContext.put(\"code_flow_access_token_result\",\n-                    verifyCodeFlowAccessToken(vertxContext, request, resolvedContext));\n+        Uni<AccessToken> codeAccessTokenUni = verifyCodeFlowAccessTokenUni(vertxContext, request, resolvedContext);\n+\n+        return codeAccessTokenUni.onItem().transformToUni(\n+                new Function<AccessToken, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(AccessToken codeAccessToken) {\n+                        return validateTokenWithOidcServer(vertxContext, request, resolvedContext, codeAccessToken);\n+                    }\n+                });\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+            TenantConfigContext resolvedContext, AccessToken codeAccessToken) {\n+\n+        if (codeAccessToken != null) {\n+            vertxContext.put(\"code_flow_access_token_result\", codeAccessToken);\n         }\n \n-        final JsonObject userInfo = resolvedContext.oidcConfig.authentication.isUserInfoRequired()\n-                ? getUserInfo(vertxContext, request, resolvedContext)\n-                : null;\n+        Uni<JsonObject> userInfo = getUserInfoUni(vertxContext, request, resolvedContext);\n \n-        return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n-            @Override\n-            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+        return userInfo.onItem().transformToUni(\n+                new Function<JsonObject, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(JsonObject userInfo) {\n+                        return createSecurityIdentityWithOidcServerUni(vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+    }\n+\n+    private Uni<SecurityIdentity> createSecurityIdentityWithOidcServerUni(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n \n-                resolvedContext.auth.decodeToken(request.getToken().getToken(),\n-                        new Handler<AsyncResult<AccessToken>>() {\n+        final TokenCredential tokenCred = request.getToken();\n+        if (tokenCred instanceof AccessTokenCredential && ((AccessTokenCredential) tokenCred).isOpaque()) {\n+            // remote introspection is required, a blocking call\n+            if (BlockingOperationControl.isBlockingAllowed()) {\n+                return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                    @Override\n+                    public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+            } else {\n+                return Uni.createFrom().emitter(\n+                        new Consumer<UniEmitter<? super SecurityIdentity>>() {\n                             @Override\n-                            public void handle(AsyncResult<AccessToken> event) {\n-                                if (event.failed()) {\n-                                    uniEmitter.fail(new AuthenticationFailedException(event.cause()));\n-                                    return;\n-                                }\n+                            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                                tenantResolver.getBlockingExecutor().execute(new Runnable() {\n+                                    @Override\n+                                    public void run() {\n+                                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext,\n+                                                userInfo);\n+                                    }\n+                                });\n+                            }\n+                        });\n+            }\n+        } else {\n+            return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                @Override\n+                public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                    createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);\n+                }\n+            });\n+        }\n+    }\n \n-                                // Token has been verified, as a JWT or an opaque token, possibly involving\n-                                // an introspection request.\n-                                final TokenCredential tokenCred = request.getToken();\n+    @SuppressWarnings(\"deprecation\")\n+    private void createSecurityIdentityWithOidcServer(UniEmitter<? super SecurityIdentity> uniEmitter,\n+            RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n+        resolvedContext.auth.decodeToken(request.getToken().getToken(),\n+                new Handler<AsyncResult<AccessToken>>() {\n+                    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEzMDcwNw=="}, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE4NjI0MQ==", "bodyText": "HI @cescoffier @pmlopes I think there may be some confusion now, I did not say Vert.x does a blocking call, I meant that since introspection calls are remote it is better for Quarkus OIDC to run them on the blocking executor, this is why we see so many blocked cases, as in case of the issue this PR is trying to fix, etc", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522186241", "createdAt": "2020-11-12T15:19:45Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -81,101 +87,157 @@ public SecurityIdentity get() {\n         if (resolvedContext.oidcConfig.publicKey.isPresent()) {\n             return validateTokenWithoutOidcServer(request, resolvedContext);\n         } else {\n-            return validateTokenWithOidcServer(vertxContext, request, resolvedContext);\n+            return validateAllTokensWithOidcServer(vertxContext, request, resolvedContext);\n         }\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<SecurityIdentity> validateAllTokensWithOidcServer(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n \n-        if (request.getToken() instanceof IdTokenCredential\n-                && (resolvedContext.oidcConfig.authentication.verifyAccessToken\n-                        || resolvedContext.oidcConfig.roles.source.orElse(null) == Source.accesstoken)) {\n-            vertxContext.put(\"code_flow_access_token_result\",\n-                    verifyCodeFlowAccessToken(vertxContext, request, resolvedContext));\n+        Uni<AccessToken> codeAccessTokenUni = verifyCodeFlowAccessTokenUni(vertxContext, request, resolvedContext);\n+\n+        return codeAccessTokenUni.onItem().transformToUni(\n+                new Function<AccessToken, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(AccessToken codeAccessToken) {\n+                        return validateTokenWithOidcServer(vertxContext, request, resolvedContext, codeAccessToken);\n+                    }\n+                });\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+            TenantConfigContext resolvedContext, AccessToken codeAccessToken) {\n+\n+        if (codeAccessToken != null) {\n+            vertxContext.put(\"code_flow_access_token_result\", codeAccessToken);\n         }\n \n-        final JsonObject userInfo = resolvedContext.oidcConfig.authentication.isUserInfoRequired()\n-                ? getUserInfo(vertxContext, request, resolvedContext)\n-                : null;\n+        Uni<JsonObject> userInfo = getUserInfoUni(vertxContext, request, resolvedContext);\n \n-        return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n-            @Override\n-            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+        return userInfo.onItem().transformToUni(\n+                new Function<JsonObject, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(JsonObject userInfo) {\n+                        return createSecurityIdentityWithOidcServerUni(vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+    }\n+\n+    private Uni<SecurityIdentity> createSecurityIdentityWithOidcServerUni(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n \n-                resolvedContext.auth.decodeToken(request.getToken().getToken(),\n-                        new Handler<AsyncResult<AccessToken>>() {\n+        final TokenCredential tokenCred = request.getToken();\n+        if (tokenCred instanceof AccessTokenCredential && ((AccessTokenCredential) tokenCred).isOpaque()) {\n+            // remote introspection is required, a blocking call\n+            if (BlockingOperationControl.isBlockingAllowed()) {\n+                return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                    @Override\n+                    public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+            } else {\n+                return Uni.createFrom().emitter(\n+                        new Consumer<UniEmitter<? super SecurityIdentity>>() {\n                             @Override\n-                            public void handle(AsyncResult<AccessToken> event) {\n-                                if (event.failed()) {\n-                                    uniEmitter.fail(new AuthenticationFailedException(event.cause()));\n-                                    return;\n-                                }\n+                            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                                tenantResolver.getBlockingExecutor().execute(new Runnable() {\n+                                    @Override\n+                                    public void run() {\n+                                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext,\n+                                                userInfo);\n+                                    }\n+                                });\n+                            }\n+                        });\n+            }\n+        } else {\n+            return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                @Override\n+                public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                    createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);\n+                }\n+            });\n+        }\n+    }\n \n-                                // Token has been verified, as a JWT or an opaque token, possibly involving\n-                                // an introspection request.\n-                                final TokenCredential tokenCred = request.getToken();\n+    @SuppressWarnings(\"deprecation\")\n+    private void createSecurityIdentityWithOidcServer(UniEmitter<? super SecurityIdentity> uniEmitter,\n+            RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n+        resolvedContext.auth.decodeToken(request.getToken().getToken(),\n+                new Handler<AsyncResult<AccessToken>>() {\n+                    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEzMDcwNw=="}, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE4ODE0Ng==", "bodyText": "@sberyozkin That is a bit confusing. Why \"since introspection calls are remote it is better for Quarkus OIDC to run them on the blocking executor\"?  Where are these calls? In Vert.x (and so non-blocking) or in some other code?", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522188146", "createdAt": "2020-11-12T15:22:08Z", "author": {"login": "cescoffier"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -81,101 +87,157 @@ public SecurityIdentity get() {\n         if (resolvedContext.oidcConfig.publicKey.isPresent()) {\n             return validateTokenWithoutOidcServer(request, resolvedContext);\n         } else {\n-            return validateTokenWithOidcServer(vertxContext, request, resolvedContext);\n+            return validateAllTokensWithOidcServer(vertxContext, request, resolvedContext);\n         }\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<SecurityIdentity> validateAllTokensWithOidcServer(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n \n-        if (request.getToken() instanceof IdTokenCredential\n-                && (resolvedContext.oidcConfig.authentication.verifyAccessToken\n-                        || resolvedContext.oidcConfig.roles.source.orElse(null) == Source.accesstoken)) {\n-            vertxContext.put(\"code_flow_access_token_result\",\n-                    verifyCodeFlowAccessToken(vertxContext, request, resolvedContext));\n+        Uni<AccessToken> codeAccessTokenUni = verifyCodeFlowAccessTokenUni(vertxContext, request, resolvedContext);\n+\n+        return codeAccessTokenUni.onItem().transformToUni(\n+                new Function<AccessToken, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(AccessToken codeAccessToken) {\n+                        return validateTokenWithOidcServer(vertxContext, request, resolvedContext, codeAccessToken);\n+                    }\n+                });\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+            TenantConfigContext resolvedContext, AccessToken codeAccessToken) {\n+\n+        if (codeAccessToken != null) {\n+            vertxContext.put(\"code_flow_access_token_result\", codeAccessToken);\n         }\n \n-        final JsonObject userInfo = resolvedContext.oidcConfig.authentication.isUserInfoRequired()\n-                ? getUserInfo(vertxContext, request, resolvedContext)\n-                : null;\n+        Uni<JsonObject> userInfo = getUserInfoUni(vertxContext, request, resolvedContext);\n \n-        return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n-            @Override\n-            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+        return userInfo.onItem().transformToUni(\n+                new Function<JsonObject, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(JsonObject userInfo) {\n+                        return createSecurityIdentityWithOidcServerUni(vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+    }\n+\n+    private Uni<SecurityIdentity> createSecurityIdentityWithOidcServerUni(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n \n-                resolvedContext.auth.decodeToken(request.getToken().getToken(),\n-                        new Handler<AsyncResult<AccessToken>>() {\n+        final TokenCredential tokenCred = request.getToken();\n+        if (tokenCred instanceof AccessTokenCredential && ((AccessTokenCredential) tokenCred).isOpaque()) {\n+            // remote introspection is required, a blocking call\n+            if (BlockingOperationControl.isBlockingAllowed()) {\n+                return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                    @Override\n+                    public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+            } else {\n+                return Uni.createFrom().emitter(\n+                        new Consumer<UniEmitter<? super SecurityIdentity>>() {\n                             @Override\n-                            public void handle(AsyncResult<AccessToken> event) {\n-                                if (event.failed()) {\n-                                    uniEmitter.fail(new AuthenticationFailedException(event.cause()));\n-                                    return;\n-                                }\n+                            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                                tenantResolver.getBlockingExecutor().execute(new Runnable() {\n+                                    @Override\n+                                    public void run() {\n+                                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext,\n+                                                userInfo);\n+                                    }\n+                                });\n+                            }\n+                        });\n+            }\n+        } else {\n+            return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                @Override\n+                public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                    createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);\n+                }\n+            });\n+        }\n+    }\n \n-                                // Token has been verified, as a JWT or an opaque token, possibly involving\n-                                // an introspection request.\n-                                final TokenCredential tokenCred = request.getToken();\n+    @SuppressWarnings(\"deprecation\")\n+    private void createSecurityIdentityWithOidcServer(UniEmitter<? super SecurityIdentity> uniEmitter,\n+            RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n+        resolvedContext.auth.decodeToken(request.getToken().getToken(),\n+                new Handler<AsyncResult<AccessToken>>() {\n+                    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEzMDcwNw=="}, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE4OTM3MQ==", "bodyText": "Is it just easier for you to handle the validation? But in this case, how do you make the call (as you may mess up with the event loop used to execute the call and go back to blocking indefinitely).", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522189371", "createdAt": "2020-11-12T15:23:48Z", "author": {"login": "cescoffier"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -81,101 +87,157 @@ public SecurityIdentity get() {\n         if (resolvedContext.oidcConfig.publicKey.isPresent()) {\n             return validateTokenWithoutOidcServer(request, resolvedContext);\n         } else {\n-            return validateTokenWithOidcServer(vertxContext, request, resolvedContext);\n+            return validateAllTokensWithOidcServer(vertxContext, request, resolvedContext);\n         }\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<SecurityIdentity> validateAllTokensWithOidcServer(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n \n-        if (request.getToken() instanceof IdTokenCredential\n-                && (resolvedContext.oidcConfig.authentication.verifyAccessToken\n-                        || resolvedContext.oidcConfig.roles.source.orElse(null) == Source.accesstoken)) {\n-            vertxContext.put(\"code_flow_access_token_result\",\n-                    verifyCodeFlowAccessToken(vertxContext, request, resolvedContext));\n+        Uni<AccessToken> codeAccessTokenUni = verifyCodeFlowAccessTokenUni(vertxContext, request, resolvedContext);\n+\n+        return codeAccessTokenUni.onItem().transformToUni(\n+                new Function<AccessToken, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(AccessToken codeAccessToken) {\n+                        return validateTokenWithOidcServer(vertxContext, request, resolvedContext, codeAccessToken);\n+                    }\n+                });\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+            TenantConfigContext resolvedContext, AccessToken codeAccessToken) {\n+\n+        if (codeAccessToken != null) {\n+            vertxContext.put(\"code_flow_access_token_result\", codeAccessToken);\n         }\n \n-        final JsonObject userInfo = resolvedContext.oidcConfig.authentication.isUserInfoRequired()\n-                ? getUserInfo(vertxContext, request, resolvedContext)\n-                : null;\n+        Uni<JsonObject> userInfo = getUserInfoUni(vertxContext, request, resolvedContext);\n \n-        return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n-            @Override\n-            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+        return userInfo.onItem().transformToUni(\n+                new Function<JsonObject, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(JsonObject userInfo) {\n+                        return createSecurityIdentityWithOidcServerUni(vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+    }\n+\n+    private Uni<SecurityIdentity> createSecurityIdentityWithOidcServerUni(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n \n-                resolvedContext.auth.decodeToken(request.getToken().getToken(),\n-                        new Handler<AsyncResult<AccessToken>>() {\n+        final TokenCredential tokenCred = request.getToken();\n+        if (tokenCred instanceof AccessTokenCredential && ((AccessTokenCredential) tokenCred).isOpaque()) {\n+            // remote introspection is required, a blocking call\n+            if (BlockingOperationControl.isBlockingAllowed()) {\n+                return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                    @Override\n+                    public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+            } else {\n+                return Uni.createFrom().emitter(\n+                        new Consumer<UniEmitter<? super SecurityIdentity>>() {\n                             @Override\n-                            public void handle(AsyncResult<AccessToken> event) {\n-                                if (event.failed()) {\n-                                    uniEmitter.fail(new AuthenticationFailedException(event.cause()));\n-                                    return;\n-                                }\n+                            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                                tenantResolver.getBlockingExecutor().execute(new Runnable() {\n+                                    @Override\n+                                    public void run() {\n+                                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext,\n+                                                userInfo);\n+                                    }\n+                                });\n+                            }\n+                        });\n+            }\n+        } else {\n+            return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                @Override\n+                public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                    createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);\n+                }\n+            });\n+        }\n+    }\n \n-                                // Token has been verified, as a JWT or an opaque token, possibly involving\n-                                // an introspection request.\n-                                final TokenCredential tokenCred = request.getToken();\n+    @SuppressWarnings(\"deprecation\")\n+    private void createSecurityIdentityWithOidcServer(UniEmitter<? super SecurityIdentity> uniEmitter,\n+            RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n+        resolvedContext.auth.decodeToken(request.getToken().getToken(),\n+                new Handler<AsyncResult<AccessToken>>() {\n+                    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEzMDcwNw=="}, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIyODY4Mg==", "bodyText": "@cescoffier the introspection calls are in Vert.x OAuth2, they are non-blocking (i.e async) but the introspection call is expensive, so we use the Executor for all such remote calls (introspection - starting from this PR, refresh tokens, OIDC connection resolution) and userinfo; IMHO it is OK, perhaps we can revisit it as part of a separate issue, but I believe it is not a bad idea...", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522228682", "createdAt": "2020-11-12T16:13:30Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -81,101 +87,157 @@ public SecurityIdentity get() {\n         if (resolvedContext.oidcConfig.publicKey.isPresent()) {\n             return validateTokenWithoutOidcServer(request, resolvedContext);\n         } else {\n-            return validateTokenWithOidcServer(vertxContext, request, resolvedContext);\n+            return validateAllTokensWithOidcServer(vertxContext, request, resolvedContext);\n         }\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<SecurityIdentity> validateAllTokensWithOidcServer(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n \n-        if (request.getToken() instanceof IdTokenCredential\n-                && (resolvedContext.oidcConfig.authentication.verifyAccessToken\n-                        || resolvedContext.oidcConfig.roles.source.orElse(null) == Source.accesstoken)) {\n-            vertxContext.put(\"code_flow_access_token_result\",\n-                    verifyCodeFlowAccessToken(vertxContext, request, resolvedContext));\n+        Uni<AccessToken> codeAccessTokenUni = verifyCodeFlowAccessTokenUni(vertxContext, request, resolvedContext);\n+\n+        return codeAccessTokenUni.onItem().transformToUni(\n+                new Function<AccessToken, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(AccessToken codeAccessToken) {\n+                        return validateTokenWithOidcServer(vertxContext, request, resolvedContext, codeAccessToken);\n+                    }\n+                });\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+            TenantConfigContext resolvedContext, AccessToken codeAccessToken) {\n+\n+        if (codeAccessToken != null) {\n+            vertxContext.put(\"code_flow_access_token_result\", codeAccessToken);\n         }\n \n-        final JsonObject userInfo = resolvedContext.oidcConfig.authentication.isUserInfoRequired()\n-                ? getUserInfo(vertxContext, request, resolvedContext)\n-                : null;\n+        Uni<JsonObject> userInfo = getUserInfoUni(vertxContext, request, resolvedContext);\n \n-        return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n-            @Override\n-            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+        return userInfo.onItem().transformToUni(\n+                new Function<JsonObject, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(JsonObject userInfo) {\n+                        return createSecurityIdentityWithOidcServerUni(vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+    }\n+\n+    private Uni<SecurityIdentity> createSecurityIdentityWithOidcServerUni(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n \n-                resolvedContext.auth.decodeToken(request.getToken().getToken(),\n-                        new Handler<AsyncResult<AccessToken>>() {\n+        final TokenCredential tokenCred = request.getToken();\n+        if (tokenCred instanceof AccessTokenCredential && ((AccessTokenCredential) tokenCred).isOpaque()) {\n+            // remote introspection is required, a blocking call\n+            if (BlockingOperationControl.isBlockingAllowed()) {\n+                return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                    @Override\n+                    public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+            } else {\n+                return Uni.createFrom().emitter(\n+                        new Consumer<UniEmitter<? super SecurityIdentity>>() {\n                             @Override\n-                            public void handle(AsyncResult<AccessToken> event) {\n-                                if (event.failed()) {\n-                                    uniEmitter.fail(new AuthenticationFailedException(event.cause()));\n-                                    return;\n-                                }\n+                            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                                tenantResolver.getBlockingExecutor().execute(new Runnable() {\n+                                    @Override\n+                                    public void run() {\n+                                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext,\n+                                                userInfo);\n+                                    }\n+                                });\n+                            }\n+                        });\n+            }\n+        } else {\n+            return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                @Override\n+                public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                    createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);\n+                }\n+            });\n+        }\n+    }\n \n-                                // Token has been verified, as a JWT or an opaque token, possibly involving\n-                                // an introspection request.\n-                                final TokenCredential tokenCred = request.getToken();\n+    @SuppressWarnings(\"deprecation\")\n+    private void createSecurityIdentityWithOidcServer(UniEmitter<? super SecurityIdentity> uniEmitter,\n+            RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n+        resolvedContext.auth.decodeToken(request.getToken().getToken(),\n+                new Handler<AsyncResult<AccessToken>>() {\n+                    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEzMDcwNw=="}, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIzMjA2MA==", "bodyText": "@cescoffier the previous PR where you helped with splitting the tenant context resolution was related to a remote tenant connection resolution which was run on IO thread in one code branch...even though in Vert.x it is an async call", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522232060", "createdAt": "2020-11-12T16:17:50Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -81,101 +87,157 @@ public SecurityIdentity get() {\n         if (resolvedContext.oidcConfig.publicKey.isPresent()) {\n             return validateTokenWithoutOidcServer(request, resolvedContext);\n         } else {\n-            return validateTokenWithOidcServer(vertxContext, request, resolvedContext);\n+            return validateAllTokensWithOidcServer(vertxContext, request, resolvedContext);\n         }\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<SecurityIdentity> validateAllTokensWithOidcServer(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n \n-        if (request.getToken() instanceof IdTokenCredential\n-                && (resolvedContext.oidcConfig.authentication.verifyAccessToken\n-                        || resolvedContext.oidcConfig.roles.source.orElse(null) == Source.accesstoken)) {\n-            vertxContext.put(\"code_flow_access_token_result\",\n-                    verifyCodeFlowAccessToken(vertxContext, request, resolvedContext));\n+        Uni<AccessToken> codeAccessTokenUni = verifyCodeFlowAccessTokenUni(vertxContext, request, resolvedContext);\n+\n+        return codeAccessTokenUni.onItem().transformToUni(\n+                new Function<AccessToken, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(AccessToken codeAccessToken) {\n+                        return validateTokenWithOidcServer(vertxContext, request, resolvedContext, codeAccessToken);\n+                    }\n+                });\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+            TenantConfigContext resolvedContext, AccessToken codeAccessToken) {\n+\n+        if (codeAccessToken != null) {\n+            vertxContext.put(\"code_flow_access_token_result\", codeAccessToken);\n         }\n \n-        final JsonObject userInfo = resolvedContext.oidcConfig.authentication.isUserInfoRequired()\n-                ? getUserInfo(vertxContext, request, resolvedContext)\n-                : null;\n+        Uni<JsonObject> userInfo = getUserInfoUni(vertxContext, request, resolvedContext);\n \n-        return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n-            @Override\n-            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+        return userInfo.onItem().transformToUni(\n+                new Function<JsonObject, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(JsonObject userInfo) {\n+                        return createSecurityIdentityWithOidcServerUni(vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+    }\n+\n+    private Uni<SecurityIdentity> createSecurityIdentityWithOidcServerUni(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n \n-                resolvedContext.auth.decodeToken(request.getToken().getToken(),\n-                        new Handler<AsyncResult<AccessToken>>() {\n+        final TokenCredential tokenCred = request.getToken();\n+        if (tokenCred instanceof AccessTokenCredential && ((AccessTokenCredential) tokenCred).isOpaque()) {\n+            // remote introspection is required, a blocking call\n+            if (BlockingOperationControl.isBlockingAllowed()) {\n+                return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                    @Override\n+                    public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+            } else {\n+                return Uni.createFrom().emitter(\n+                        new Consumer<UniEmitter<? super SecurityIdentity>>() {\n                             @Override\n-                            public void handle(AsyncResult<AccessToken> event) {\n-                                if (event.failed()) {\n-                                    uniEmitter.fail(new AuthenticationFailedException(event.cause()));\n-                                    return;\n-                                }\n+                            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                                tenantResolver.getBlockingExecutor().execute(new Runnable() {\n+                                    @Override\n+                                    public void run() {\n+                                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext,\n+                                                userInfo);\n+                                    }\n+                                });\n+                            }\n+                        });\n+            }\n+        } else {\n+            return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                @Override\n+                public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                    createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);\n+                }\n+            });\n+        }\n+    }\n \n-                                // Token has been verified, as a JWT or an opaque token, possibly involving\n-                                // an introspection request.\n-                                final TokenCredential tokenCred = request.getToken();\n+    @SuppressWarnings(\"deprecation\")\n+    private void createSecurityIdentityWithOidcServer(UniEmitter<? super SecurityIdentity> uniEmitter,\n+            RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n+        resolvedContext.auth.decodeToken(request.getToken().getToken(),\n+                new Handler<AsyncResult<AccessToken>>() {\n+                    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEzMDcwNw=="}, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzQxMDgwOnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDowNzoyNFrOHx8WUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDowNzoyNFrOHx8WUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEzMTAyNA==", "bodyText": "better failing and not throwing.", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522131024", "createdAt": "2020-11-12T14:07:24Z", "author": {"login": "cescoffier"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -81,101 +87,157 @@ public SecurityIdentity get() {\n         if (resolvedContext.oidcConfig.publicKey.isPresent()) {\n             return validateTokenWithoutOidcServer(request, resolvedContext);\n         } else {\n-            return validateTokenWithOidcServer(vertxContext, request, resolvedContext);\n+            return validateAllTokensWithOidcServer(vertxContext, request, resolvedContext);\n         }\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<SecurityIdentity> validateAllTokensWithOidcServer(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n \n-        if (request.getToken() instanceof IdTokenCredential\n-                && (resolvedContext.oidcConfig.authentication.verifyAccessToken\n-                        || resolvedContext.oidcConfig.roles.source.orElse(null) == Source.accesstoken)) {\n-            vertxContext.put(\"code_flow_access_token_result\",\n-                    verifyCodeFlowAccessToken(vertxContext, request, resolvedContext));\n+        Uni<AccessToken> codeAccessTokenUni = verifyCodeFlowAccessTokenUni(vertxContext, request, resolvedContext);\n+\n+        return codeAccessTokenUni.onItem().transformToUni(\n+                new Function<AccessToken, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(AccessToken codeAccessToken) {\n+                        return validateTokenWithOidcServer(vertxContext, request, resolvedContext, codeAccessToken);\n+                    }\n+                });\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    private Uni<SecurityIdentity> validateTokenWithOidcServer(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+            TenantConfigContext resolvedContext, AccessToken codeAccessToken) {\n+\n+        if (codeAccessToken != null) {\n+            vertxContext.put(\"code_flow_access_token_result\", codeAccessToken);\n         }\n \n-        final JsonObject userInfo = resolvedContext.oidcConfig.authentication.isUserInfoRequired()\n-                ? getUserInfo(vertxContext, request, resolvedContext)\n-                : null;\n+        Uni<JsonObject> userInfo = getUserInfoUni(vertxContext, request, resolvedContext);\n \n-        return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n-            @Override\n-            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+        return userInfo.onItem().transformToUni(\n+                new Function<JsonObject, Uni<? extends SecurityIdentity>>() {\n+                    @Override\n+                    public Uni<SecurityIdentity> apply(JsonObject userInfo) {\n+                        return createSecurityIdentityWithOidcServerUni(vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+    }\n+\n+    private Uni<SecurityIdentity> createSecurityIdentityWithOidcServerUni(RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n \n-                resolvedContext.auth.decodeToken(request.getToken().getToken(),\n-                        new Handler<AsyncResult<AccessToken>>() {\n+        final TokenCredential tokenCred = request.getToken();\n+        if (tokenCred instanceof AccessTokenCredential && ((AccessTokenCredential) tokenCred).isOpaque()) {\n+            // remote introspection is required, a blocking call\n+            if (BlockingOperationControl.isBlockingAllowed()) {\n+                return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                    @Override\n+                    public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);\n+                    }\n+                });\n+            } else {\n+                return Uni.createFrom().emitter(\n+                        new Consumer<UniEmitter<? super SecurityIdentity>>() {\n                             @Override\n-                            public void handle(AsyncResult<AccessToken> event) {\n-                                if (event.failed()) {\n-                                    uniEmitter.fail(new AuthenticationFailedException(event.cause()));\n-                                    return;\n-                                }\n+                            public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                                tenantResolver.getBlockingExecutor().execute(new Runnable() {\n+                                    @Override\n+                                    public void run() {\n+                                        createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext,\n+                                                userInfo);\n+                                    }\n+                                });\n+                            }\n+                        });\n+            }\n+        } else {\n+            return Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                @Override\n+                public void accept(UniEmitter<? super SecurityIdentity> uniEmitter) {\n+                    createSecurityIdentityWithOidcServer(uniEmitter, vertxContext, request, resolvedContext, userInfo);\n+                }\n+            });\n+        }\n+    }\n \n-                                // Token has been verified, as a JWT or an opaque token, possibly involving\n-                                // an introspection request.\n-                                final TokenCredential tokenCred = request.getToken();\n+    @SuppressWarnings(\"deprecation\")\n+    private void createSecurityIdentityWithOidcServer(UniEmitter<? super SecurityIdentity> uniEmitter,\n+            RoutingContext vertxContext,\n+            TokenAuthenticationRequest request, TenantConfigContext resolvedContext, final JsonObject userInfo) {\n+        resolvedContext.auth.decodeToken(request.getToken().getToken(),\n+                new Handler<AsyncResult<AccessToken>>() {\n+                    @Override\n+                    public void handle(AsyncResult<AccessToken> event) {\n+                        if (event.failed()) {\n+                            uniEmitter.fail(new AuthenticationFailedException(event.cause()));\n+                            return;\n+                        }\n \n-                                JsonObject tokenJson = event.result().accessToken();\n+                        // Token has been verified, as a JWT or an opaque token, possibly involving\n+                        // an introspection request.\n+                        final TokenCredential tokenCred = request.getToken();\n \n-                                if (tokenJson == null) {\n-                                    // JSON token representation may be null not only if it is an opaque access token\n-                                    // but also if it is JWT and no JWK with a matching kid is available, asynchronous\n-                                    // JWK refresh has not finished yet, but the fallback introspection request has succeeded.\n-                                    tokenJson = OidcUtils.decodeJwtContent(tokenCred.getToken());\n-                                }\n-                                if (tokenJson != null) {\n-                                    OidcUtils.validatePrimaryJwtTokenType(resolvedContext.oidcConfig.token, tokenJson);\n-                                    JsonObject rolesJson = getRolesJson(vertxContext, resolvedContext, tokenCred, tokenJson,\n-                                            userInfo);\n-                                    try {\n-                                        SecurityIdentity securityIdentity = validateAndCreateIdentity(vertxContext, tokenCred,\n-                                                resolvedContext.oidcConfig,\n-                                                tokenJson, rolesJson, userInfo);\n-                                        if (tokenAutoRefreshPrepared(tokenJson, vertxContext, resolvedContext.oidcConfig)) {\n-                                            throw new TokenAutoRefreshException(securityIdentity);\n-                                        } else {\n-                                            uniEmitter.complete(securityIdentity);\n-                                        }\n-                                    } catch (Throwable ex) {\n-                                        uniEmitter.fail(ex);\n-                                    }\n-                                } else if (tokenCred instanceof IdTokenCredential\n-                                        || tokenCred instanceof AccessTokenCredential\n-                                                && !((AccessTokenCredential) tokenCred).isOpaque()) {\n-                                    uniEmitter\n-                                            .fail(new AuthenticationFailedException(\"JWT token can not be converted to JSON\"));\n+                        JsonObject tokenJson = event.result().accessToken();\n+\n+                        if (tokenJson == null) {\n+                            // JSON token representation may be null not only if it is an opaque access token\n+                            // but also if it is JWT and no JWK with a matching kid is available, asynchronous\n+                            // JWK refresh has not finished yet, but the fallback introspection request has succeeded.\n+                            tokenJson = OidcUtils.decodeJwtContent(tokenCred.getToken());\n+                        }\n+                        if (tokenJson != null) {\n+                            OidcUtils.validatePrimaryJwtTokenType(resolvedContext.oidcConfig.token, tokenJson);\n+                            JsonObject rolesJson = getRolesJson(vertxContext, resolvedContext, tokenCred, tokenJson,\n+                                    userInfo);\n+                            try {\n+                                SecurityIdentity securityIdentity = validateAndCreateIdentity(vertxContext, tokenCred,\n+                                        resolvedContext.oidcConfig,\n+                                        tokenJson, rolesJson, userInfo);\n+                                if (tokenAutoRefreshPrepared(tokenJson, vertxContext, resolvedContext.oidcConfig)) {\n+                                    throw new TokenAutoRefreshException(securityIdentity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzQyMjkyOnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDowOTo1OVrOHx8dnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNToyMzozMFrOHx_5UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEzMjg5NQ==", "bodyText": "again, may be a different thread. assembly and subscription threads different might be different.", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522132895", "createdAt": "2020-11-12T14:09:59Z", "author": {"login": "cescoffier"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -224,23 +286,62 @@ private static JsonObject getRolesJson(RoutingContext vertxContext, TenantConfig\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    private static AccessToken verifyCodeFlowAccessToken(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<AccessToken> verifyCodeFlowAccessTokenUni(RoutingContext vertxContext, TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n-        return Uni.createFrom().emitter(new Consumer<UniEmitter<? super AccessToken>>() {\n-            @Override\n-            public void accept(UniEmitter<? super AccessToken> uniEmitter) {\n-                resolvedContext.auth.decodeToken((String) vertxContext.get(\"access_token\"),\n-                        new Handler<AsyncResult<AccessToken>>() {\n-                            @Override\n-                            public void handle(AsyncResult<AccessToken> event) {\n-                                if (event.failed()) {\n-                                    uniEmitter.fail(new AuthenticationFailedException(event.cause()));\n+        if (request.getToken() instanceof IdTokenCredential\n+                && (resolvedContext.oidcConfig.authentication.verifyAccessToken\n+                        || resolvedContext.oidcConfig.roles.source.orElse(null) == Source.accesstoken)) {\n+            final String codeAccessToken = (String) vertxContext.get(\"access_token\");\n+            if (OidcUtils.isOpaqueToken(codeAccessToken)) {\n+                // remote introspection is required, a blocking call\n+                if (BlockingOperationControl.isBlockingAllowed()) {\n+                    return Uni.createFrom().emitter(\n+                            new Consumer<UniEmitter<? super AccessToken>>() {\n+                                @Override\n+                                public void accept(UniEmitter<? super AccessToken> uniEmitter) {\n+                                    verifyCodeFlowAccessToken(uniEmitter, resolvedContext, codeAccessToken);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 291}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE3MjMwNw==", "bodyText": "@cescoffier please see the comment above about this BlockingOperationControl check, I think it is correct for now", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522172307", "createdAt": "2020-11-12T15:01:21Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -224,23 +286,62 @@ private static JsonObject getRolesJson(RoutingContext vertxContext, TenantConfig\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    private static AccessToken verifyCodeFlowAccessToken(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<AccessToken> verifyCodeFlowAccessTokenUni(RoutingContext vertxContext, TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n-        return Uni.createFrom().emitter(new Consumer<UniEmitter<? super AccessToken>>() {\n-            @Override\n-            public void accept(UniEmitter<? super AccessToken> uniEmitter) {\n-                resolvedContext.auth.decodeToken((String) vertxContext.get(\"access_token\"),\n-                        new Handler<AsyncResult<AccessToken>>() {\n-                            @Override\n-                            public void handle(AsyncResult<AccessToken> event) {\n-                                if (event.failed()) {\n-                                    uniEmitter.fail(new AuthenticationFailedException(event.cause()));\n+        if (request.getToken() instanceof IdTokenCredential\n+                && (resolvedContext.oidcConfig.authentication.verifyAccessToken\n+                        || resolvedContext.oidcConfig.roles.source.orElse(null) == Source.accesstoken)) {\n+            final String codeAccessToken = (String) vertxContext.get(\"access_token\");\n+            if (OidcUtils.isOpaqueToken(codeAccessToken)) {\n+                // remote introspection is required, a blocking call\n+                if (BlockingOperationControl.isBlockingAllowed()) {\n+                    return Uni.createFrom().emitter(\n+                            new Consumer<UniEmitter<? super AccessToken>>() {\n+                                @Override\n+                                public void accept(UniEmitter<? super AccessToken> uniEmitter) {\n+                                    verifyCodeFlowAccessToken(uniEmitter, resolvedContext, codeAccessToken);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEzMjg5NQ=="}, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 291}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE4Mjk5NA==", "bodyText": "I don't believe it is.", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522182994", "createdAt": "2020-11-12T15:15:22Z", "author": {"login": "cescoffier"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -224,23 +286,62 @@ private static JsonObject getRolesJson(RoutingContext vertxContext, TenantConfig\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    private static AccessToken verifyCodeFlowAccessToken(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<AccessToken> verifyCodeFlowAccessTokenUni(RoutingContext vertxContext, TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n-        return Uni.createFrom().emitter(new Consumer<UniEmitter<? super AccessToken>>() {\n-            @Override\n-            public void accept(UniEmitter<? super AccessToken> uniEmitter) {\n-                resolvedContext.auth.decodeToken((String) vertxContext.get(\"access_token\"),\n-                        new Handler<AsyncResult<AccessToken>>() {\n-                            @Override\n-                            public void handle(AsyncResult<AccessToken> event) {\n-                                if (event.failed()) {\n-                                    uniEmitter.fail(new AuthenticationFailedException(event.cause()));\n+        if (request.getToken() instanceof IdTokenCredential\n+                && (resolvedContext.oidcConfig.authentication.verifyAccessToken\n+                        || resolvedContext.oidcConfig.roles.source.orElse(null) == Source.accesstoken)) {\n+            final String codeAccessToken = (String) vertxContext.get(\"access_token\");\n+            if (OidcUtils.isOpaqueToken(codeAccessToken)) {\n+                // remote introspection is required, a blocking call\n+                if (BlockingOperationControl.isBlockingAllowed()) {\n+                    return Uni.createFrom().emitter(\n+                            new Consumer<UniEmitter<? super AccessToken>>() {\n+                                @Override\n+                                public void accept(UniEmitter<? super AccessToken> uniEmitter) {\n+                                    verifyCodeFlowAccessToken(uniEmitter, resolvedContext, codeAccessToken);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEzMjg5NQ=="}, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 291}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE4NzI4MQ==", "bodyText": "@cescoffier This code just tries to run the remote operations in the executor, what is not correct about it ?", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522187281", "createdAt": "2020-11-12T15:21:03Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -224,23 +286,62 @@ private static JsonObject getRolesJson(RoutingContext vertxContext, TenantConfig\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    private static AccessToken verifyCodeFlowAccessToken(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<AccessToken> verifyCodeFlowAccessTokenUni(RoutingContext vertxContext, TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n-        return Uni.createFrom().emitter(new Consumer<UniEmitter<? super AccessToken>>() {\n-            @Override\n-            public void accept(UniEmitter<? super AccessToken> uniEmitter) {\n-                resolvedContext.auth.decodeToken((String) vertxContext.get(\"access_token\"),\n-                        new Handler<AsyncResult<AccessToken>>() {\n-                            @Override\n-                            public void handle(AsyncResult<AccessToken> event) {\n-                                if (event.failed()) {\n-                                    uniEmitter.fail(new AuthenticationFailedException(event.cause()));\n+        if (request.getToken() instanceof IdTokenCredential\n+                && (resolvedContext.oidcConfig.authentication.verifyAccessToken\n+                        || resolvedContext.oidcConfig.roles.source.orElse(null) == Source.accesstoken)) {\n+            final String codeAccessToken = (String) vertxContext.get(\"access_token\");\n+            if (OidcUtils.isOpaqueToken(codeAccessToken)) {\n+                // remote introspection is required, a blocking call\n+                if (BlockingOperationControl.isBlockingAllowed()) {\n+                    return Uni.createFrom().emitter(\n+                            new Consumer<UniEmitter<? super AccessToken>>() {\n+                                @Override\n+                                public void accept(UniEmitter<? super AccessToken> uniEmitter) {\n+                                    verifyCodeFlowAccessToken(uniEmitter, resolvedContext, codeAccessToken);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEzMjg5NQ=="}, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 291}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE4OTEzNw==", "bodyText": "@cescoffier never mind, let me think about your assembly vs subscription clarification above", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522189137", "createdAt": "2020-11-12T15:23:30Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -224,23 +286,62 @@ private static JsonObject getRolesJson(RoutingContext vertxContext, TenantConfig\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    private static AccessToken verifyCodeFlowAccessToken(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<AccessToken> verifyCodeFlowAccessTokenUni(RoutingContext vertxContext, TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n-        return Uni.createFrom().emitter(new Consumer<UniEmitter<? super AccessToken>>() {\n-            @Override\n-            public void accept(UniEmitter<? super AccessToken> uniEmitter) {\n-                resolvedContext.auth.decodeToken((String) vertxContext.get(\"access_token\"),\n-                        new Handler<AsyncResult<AccessToken>>() {\n-                            @Override\n-                            public void handle(AsyncResult<AccessToken> event) {\n-                                if (event.failed()) {\n-                                    uniEmitter.fail(new AuthenticationFailedException(event.cause()));\n+        if (request.getToken() instanceof IdTokenCredential\n+                && (resolvedContext.oidcConfig.authentication.verifyAccessToken\n+                        || resolvedContext.oidcConfig.roles.source.orElse(null) == Source.accesstoken)) {\n+            final String codeAccessToken = (String) vertxContext.get(\"access_token\");\n+            if (OidcUtils.isOpaqueToken(codeAccessToken)) {\n+                // remote introspection is required, a blocking call\n+                if (BlockingOperationControl.isBlockingAllowed()) {\n+                    return Uni.createFrom().emitter(\n+                            new Consumer<UniEmitter<? super AccessToken>>() {\n+                                @Override\n+                                public void accept(UniEmitter<? super AccessToken> uniEmitter) {\n+                                    verifyCodeFlowAccessToken(uniEmitter, resolvedContext, codeAccessToken);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEzMjg5NQ=="}, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 291}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzQ0NjY1OnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDoxNToxMlrOHx8sJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTowODozOFrOHx_NBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEzNjYxMw==", "bodyText": "I don't get why sometimes it must be wrapped on an executor and sometimes not.", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522136613", "createdAt": "2020-11-12T14:15:12Z", "author": {"login": "cescoffier"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -224,23 +286,62 @@ private static JsonObject getRolesJson(RoutingContext vertxContext, TenantConfig\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    private static AccessToken verifyCodeFlowAccessToken(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<AccessToken> verifyCodeFlowAccessTokenUni(RoutingContext vertxContext, TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n-        return Uni.createFrom().emitter(new Consumer<UniEmitter<? super AccessToken>>() {\n-            @Override\n-            public void accept(UniEmitter<? super AccessToken> uniEmitter) {\n-                resolvedContext.auth.decodeToken((String) vertxContext.get(\"access_token\"),\n-                        new Handler<AsyncResult<AccessToken>>() {\n-                            @Override\n-                            public void handle(AsyncResult<AccessToken> event) {\n-                                if (event.failed()) {\n-                                    uniEmitter.fail(new AuthenticationFailedException(event.cause()));\n+        if (request.getToken() instanceof IdTokenCredential\n+                && (resolvedContext.oidcConfig.authentication.verifyAccessToken\n+                        || resolvedContext.oidcConfig.roles.source.orElse(null) == Source.accesstoken)) {\n+            final String codeAccessToken = (String) vertxContext.get(\"access_token\");\n+            if (OidcUtils.isOpaqueToken(codeAccessToken)) {\n+                // remote introspection is required, a blocking call\n+                if (BlockingOperationControl.isBlockingAllowed()) {\n+                    return Uni.createFrom().emitter(\n+                            new Consumer<UniEmitter<? super AccessToken>>() {\n+                                @Override\n+                                public void accept(UniEmitter<? super AccessToken> uniEmitter) {\n+                                    verifyCodeFlowAccessToken(uniEmitter, resolvedContext, codeAccessToken);\n                                 }\n-                                uniEmitter.complete(event.result());\n-                            }\n-                        });\n+                            });\n+                } else {\n+                    return Uni.createFrom().emitter(\n+                            new Consumer<UniEmitter<? super AccessToken>>() {\n+                                @Override\n+                                public void accept(UniEmitter<? super AccessToken> uniEmitter) {\n+                                    tenantResolver.getBlockingExecutor().execute(new Runnable() {\n+                                        @Override\n+                                        public void run() {\n+                                            verifyCodeFlowAccessToken(uniEmitter, resolvedContext, codeAccessToken);\n+                                        }\n+                                    });\n+                                }\n+                            });\n+                }\n+            } else {\n+                return Uni.createFrom().emitter(new Consumer<UniEmitter<? super AccessToken>>() {\n+                    @Override\n+                    public void accept(UniEmitter<? super AccessToken> uniEmitter) {\n+                        verifyCodeFlowAccessToken(uniEmitter, resolvedContext, codeAccessToken);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 315}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE3Nzc5Nw==", "bodyText": "@cescoffier Please see above, this and this comments", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522177797", "createdAt": "2020-11-12T15:08:38Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -224,23 +286,62 @@ private static JsonObject getRolesJson(RoutingContext vertxContext, TenantConfig\n     }\n \n     @SuppressWarnings(\"deprecation\")\n-    private static AccessToken verifyCodeFlowAccessToken(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<AccessToken> verifyCodeFlowAccessTokenUni(RoutingContext vertxContext, TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n-        return Uni.createFrom().emitter(new Consumer<UniEmitter<? super AccessToken>>() {\n-            @Override\n-            public void accept(UniEmitter<? super AccessToken> uniEmitter) {\n-                resolvedContext.auth.decodeToken((String) vertxContext.get(\"access_token\"),\n-                        new Handler<AsyncResult<AccessToken>>() {\n-                            @Override\n-                            public void handle(AsyncResult<AccessToken> event) {\n-                                if (event.failed()) {\n-                                    uniEmitter.fail(new AuthenticationFailedException(event.cause()));\n+        if (request.getToken() instanceof IdTokenCredential\n+                && (resolvedContext.oidcConfig.authentication.verifyAccessToken\n+                        || resolvedContext.oidcConfig.roles.source.orElse(null) == Source.accesstoken)) {\n+            final String codeAccessToken = (String) vertxContext.get(\"access_token\");\n+            if (OidcUtils.isOpaqueToken(codeAccessToken)) {\n+                // remote introspection is required, a blocking call\n+                if (BlockingOperationControl.isBlockingAllowed()) {\n+                    return Uni.createFrom().emitter(\n+                            new Consumer<UniEmitter<? super AccessToken>>() {\n+                                @Override\n+                                public void accept(UniEmitter<? super AccessToken> uniEmitter) {\n+                                    verifyCodeFlowAccessToken(uniEmitter, resolvedContext, codeAccessToken);\n                                 }\n-                                uniEmitter.complete(event.result());\n-                            }\n-                        });\n+                            });\n+                } else {\n+                    return Uni.createFrom().emitter(\n+                            new Consumer<UniEmitter<? super AccessToken>>() {\n+                                @Override\n+                                public void accept(UniEmitter<? super AccessToken> uniEmitter) {\n+                                    tenantResolver.getBlockingExecutor().execute(new Runnable() {\n+                                        @Override\n+                                        public void run() {\n+                                            verifyCodeFlowAccessToken(uniEmitter, resolvedContext, codeAccessToken);\n+                                        }\n+                                    });\n+                                }\n+                            });\n+                }\n+            } else {\n+                return Uni.createFrom().emitter(new Consumer<UniEmitter<? super AccessToken>>() {\n+                    @Override\n+                    public void accept(UniEmitter<? super AccessToken> uniEmitter) {\n+                        verifyCodeFlowAccessToken(uniEmitter, resolvedContext, codeAccessToken);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEzNjYxMw=="}, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 315}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzQ0ODg3OnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDoxNTo0MlrOHx8tgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNToxMDo1N1rOHx_UPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEzNjk2Mw==", "bodyText": "Again, same issue.", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522136963", "createdAt": "2020-11-12T14:15:42Z", "author": {"login": "cescoffier"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -266,33 +367,57 @@ public void handle(AsyncResult<AccessToken> event) {\n         }\n     }\n \n-    private static JsonObject getUserInfo(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<JsonObject> getUserInfoUni(RoutingContext vertxContext, TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n+        if (resolvedContext.oidcConfig.authentication.isUserInfoRequired()) {\n+            if (BlockingOperationControl.isBlockingAllowed()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 349}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE3OTY0NQ==", "bodyText": "@cescoffier sure, hope the above comments, this and this ones, will clarify it :-)", "url": "https://github.com/quarkusio/quarkus/pull/13257#discussion_r522179645", "createdAt": "2020-11-12T15:10:57Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -266,33 +367,57 @@ public void handle(AsyncResult<AccessToken> event) {\n         }\n     }\n \n-    private static JsonObject getUserInfo(RoutingContext vertxContext, TokenAuthenticationRequest request,\n+    private Uni<JsonObject> getUserInfoUni(RoutingContext vertxContext, TokenAuthenticationRequest request,\n             TenantConfigContext resolvedContext) {\n+        if (resolvedContext.oidcConfig.authentication.isUserInfoRequired()) {\n+            if (BlockingOperationControl.isBlockingAllowed()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEzNjk2Mw=="}, "originalCommit": {"oid": "2b370d52d73c49fd8e2348ee3e76604c414c362d"}, "originalPosition": 349}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4072, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}