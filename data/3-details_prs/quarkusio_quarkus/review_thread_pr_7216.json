{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1ODA4MTI3", "number": 7216, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzowOTozNlrODgddAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMDowOTozOFrODhAvUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzYzNTg1OnYy", "diffSide": "LEFT", "path": "extensions/reactive-pg-client/runtime/src/main/java/io/quarkus/reactive/pg/client/runtime/PgPoolProducer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzowOTozNlrOFqrZcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMDowMToxOFrOFrh8Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5NTUzOA==", "bodyText": "I believe the volatile construct was preferred here because the producer can be invoked concurrently at runtime (e.g. in request scoped beans). Using synchronization instead would serialize these calls. Or am I missing something?", "url": "https://github.com/quarkusio/quarkus/pull/7216#discussion_r380295538", "createdAt": "2020-02-17T17:09:36Z", "author": {"login": "tsegismont"}, "path": "extensions/reactive-pg-client/runtime/src/main/java/io/quarkus/reactive/pg/client/runtime/PgPoolProducer.java", "diffHunk": "@@ -4,36 +4,87 @@\n import javax.enterprise.inject.Produces;\n import javax.inject.Singleton;\n \n+import org.jboss.logging.Logger;\n+\n import io.vertx.pgclient.PgPool;\n \n @ApplicationScoped\n public class PgPoolProducer {\n \n-    private volatile PgPool pgPool;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d921635e7b7568bc8b2651254b3f281b6f55ff55"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwMjE4Mw==", "bodyText": "I actually want the serialization here to catch the creation of the deprecated clients.\nI can restore using a volatile for the PgPool but that mix 2 synchronization constructs.", "url": "https://github.com/quarkusio/quarkus/pull/7216#discussion_r380802183", "createdAt": "2020-02-18T16:52:55Z", "author": {"login": "cescoffier"}, "path": "extensions/reactive-pg-client/runtime/src/main/java/io/quarkus/reactive/pg/client/runtime/PgPoolProducer.java", "diffHunk": "@@ -4,36 +4,87 @@\n import javax.enterprise.inject.Produces;\n import javax.inject.Singleton;\n \n+import org.jboss.logging.Logger;\n+\n import io.vertx.pgclient.PgPool;\n \n @ApplicationScoped\n public class PgPoolProducer {\n \n-    private volatile PgPool pgPool;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5NTUzOA=="}, "originalCommit": {"oid": "d921635e7b7568bc8b2651254b3f281b6f55ff55"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE4OTE4Mg==", "bodyText": "Fixed.", "url": "https://github.com/quarkusio/quarkus/pull/7216#discussion_r381189182", "createdAt": "2020-02-19T10:01:18Z", "author": {"login": "cescoffier"}, "path": "extensions/reactive-pg-client/runtime/src/main/java/io/quarkus/reactive/pg/client/runtime/PgPoolProducer.java", "diffHunk": "@@ -4,36 +4,87 @@\n import javax.enterprise.inject.Produces;\n import javax.inject.Singleton;\n \n+import org.jboss.logging.Logger;\n+\n import io.vertx.pgclient.PgPool;\n \n @ApplicationScoped\n public class PgPoolProducer {\n \n-    private volatile PgPool pgPool;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5NTUzOA=="}, "originalCommit": {"oid": "d921635e7b7568bc8b2651254b3f281b6f55ff55"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzYzOTA5OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/reactive-sql-clients.adoc", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzoxMDo1NlrOFqrbcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMDowMToyN1rOFrh8hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5NjA0OA==", "bodyText": "Shouldn't we use the same API methods in the quickstart and the doc? (flatMap in the quickstart)", "url": "https://github.com/quarkusio/quarkus/pull/7216#discussion_r380296048", "createdAt": "2020-02-17T17:10:56Z", "author": {"login": "tsegismont"}, "path": "docs/src/main/asciidoc/reactive-sql-clients.adoc", "diffHunk": "@@ -174,20 +176,19 @@ TIP: You may override the default value of the `myapp.schema.create` property in\n \n Almost ready!\n To initialize the DB in development mode, we will use the client simple `query` method.\n-It returns a `CompletionStage` and thus can be composed to execute queries sequentially:\n+It returns an `Uni` and thus can be composed to execute queries sequentially:\n \n [source,java]\n ----\n-        client.query(\"DROP TABLE IF EXISTS fruits\")\n-                .thenCompose(r -> client.query(\"CREATE TABLE fruits (id SERIAL PRIMARY KEY, name TEXT NOT NULL)\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Orange')\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Pear')\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Apple')\"))\n-                .toCompletableFuture()\n-                .join();\n+ client.query(\"DROP TABLE IF EXISTS fruits\")\n+    .onItem().produceUni(r -> client.query(\"CREATE TABLE fruits (id SERIAL PRIMARY KEY, name TEXT NOT NULL)\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d921635e7b7568bc8b2651254b3f281b6f55ff55"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwMjc5NQ==", "bodyText": "The quickstart has not been updated. So where did you find the flatMap?", "url": "https://github.com/quarkusio/quarkus/pull/7216#discussion_r380802795", "createdAt": "2020-02-18T16:53:52Z", "author": {"login": "cescoffier"}, "path": "docs/src/main/asciidoc/reactive-sql-clients.adoc", "diffHunk": "@@ -174,20 +176,19 @@ TIP: You may override the default value of the `myapp.schema.create` property in\n \n Almost ready!\n To initialize the DB in development mode, we will use the client simple `query` method.\n-It returns a `CompletionStage` and thus can be composed to execute queries sequentially:\n+It returns an `Uni` and thus can be composed to execute queries sequentially:\n \n [source,java]\n ----\n-        client.query(\"DROP TABLE IF EXISTS fruits\")\n-                .thenCompose(r -> client.query(\"CREATE TABLE fruits (id SERIAL PRIMARY KEY, name TEXT NOT NULL)\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Orange')\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Pear')\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Apple')\"))\n-                .toCompletableFuture()\n-                .join();\n+ client.query(\"DROP TABLE IF EXISTS fruits\")\n+    .onItem().produceUni(r -> client.query(\"CREATE TABLE fruits (id SERIAL PRIMARY KEY, name TEXT NOT NULL)\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5NjA0OA=="}, "originalCommit": {"oid": "d921635e7b7568bc8b2651254b3f281b6f55ff55"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwNDQ0NQ==", "bodyText": "Sorry, actually flatMap is used in the tests (FruitResource)", "url": "https://github.com/quarkusio/quarkus/pull/7216#discussion_r380804445", "createdAt": "2020-02-18T16:56:11Z", "author": {"login": "tsegismont"}, "path": "docs/src/main/asciidoc/reactive-sql-clients.adoc", "diffHunk": "@@ -174,20 +176,19 @@ TIP: You may override the default value of the `myapp.schema.create` property in\n \n Almost ready!\n To initialize the DB in development mode, we will use the client simple `query` method.\n-It returns a `CompletionStage` and thus can be composed to execute queries sequentially:\n+It returns an `Uni` and thus can be composed to execute queries sequentially:\n \n [source,java]\n ----\n-        client.query(\"DROP TABLE IF EXISTS fruits\")\n-                .thenCompose(r -> client.query(\"CREATE TABLE fruits (id SERIAL PRIMARY KEY, name TEXT NOT NULL)\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Orange')\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Pear')\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Apple')\"))\n-                .toCompletableFuture()\n-                .join();\n+ client.query(\"DROP TABLE IF EXISTS fruits\")\n+    .onItem().produceUni(r -> client.query(\"CREATE TABLE fruits (id SERIAL PRIMARY KEY, name TEXT NOT NULL)\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5NjA0OA=="}, "originalCommit": {"oid": "d921635e7b7568bc8b2651254b3f281b6f55ff55"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE3NjQzMw==", "bodyText": "oh good catch, yes, it should be consistent (both are equivalent BTW).", "url": "https://github.com/quarkusio/quarkus/pull/7216#discussion_r381176433", "createdAt": "2020-02-19T09:40:21Z", "author": {"login": "cescoffier"}, "path": "docs/src/main/asciidoc/reactive-sql-clients.adoc", "diffHunk": "@@ -174,20 +176,19 @@ TIP: You may override the default value of the `myapp.schema.create` property in\n \n Almost ready!\n To initialize the DB in development mode, we will use the client simple `query` method.\n-It returns a `CompletionStage` and thus can be composed to execute queries sequentially:\n+It returns an `Uni` and thus can be composed to execute queries sequentially:\n \n [source,java]\n ----\n-        client.query(\"DROP TABLE IF EXISTS fruits\")\n-                .thenCompose(r -> client.query(\"CREATE TABLE fruits (id SERIAL PRIMARY KEY, name TEXT NOT NULL)\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Orange')\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Pear')\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Apple')\"))\n-                .toCompletableFuture()\n-                .join();\n+ client.query(\"DROP TABLE IF EXISTS fruits\")\n+    .onItem().produceUni(r -> client.query(\"CREATE TABLE fruits (id SERIAL PRIMARY KEY, name TEXT NOT NULL)\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5NjA0OA=="}, "originalCommit": {"oid": "d921635e7b7568bc8b2651254b3f281b6f55ff55"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE4OTI1NA==", "bodyText": "Fixed.", "url": "https://github.com/quarkusio/quarkus/pull/7216#discussion_r381189254", "createdAt": "2020-02-19T10:01:27Z", "author": {"login": "cescoffier"}, "path": "docs/src/main/asciidoc/reactive-sql-clients.adoc", "diffHunk": "@@ -174,20 +176,19 @@ TIP: You may override the default value of the `myapp.schema.create` property in\n \n Almost ready!\n To initialize the DB in development mode, we will use the client simple `query` method.\n-It returns a `CompletionStage` and thus can be composed to execute queries sequentially:\n+It returns an `Uni` and thus can be composed to execute queries sequentially:\n \n [source,java]\n ----\n-        client.query(\"DROP TABLE IF EXISTS fruits\")\n-                .thenCompose(r -> client.query(\"CREATE TABLE fruits (id SERIAL PRIMARY KEY, name TEXT NOT NULL)\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Orange')\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Pear')\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Apple')\"))\n-                .toCompletableFuture()\n-                .join();\n+ client.query(\"DROP TABLE IF EXISTS fruits\")\n+    .onItem().produceUni(r -> client.query(\"CREATE TABLE fruits (id SERIAL PRIMARY KEY, name TEXT NOT NULL)\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5NjA0OA=="}, "originalCommit": {"oid": "d921635e7b7568bc8b2651254b3f281b6f55ff55"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTQwOTEyOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/reactive-sql-clients.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMDowNzoyM1rOFriKKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMDozMDozN1rOFri8Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5Mjc0NA==", "bodyText": "flatMap is fine with me, so is the Mutiny flavor with onItem. Your call.\nMy only concern is that the test and the doc are consistent, so all good. \ud83d\udc4d", "url": "https://github.com/quarkusio/quarkus/pull/7216#discussion_r381192744", "createdAt": "2020-02-19T10:07:23Z", "author": {"login": "tsegismont"}, "path": "docs/src/main/asciidoc/reactive-sql-clients.adoc", "diffHunk": "@@ -174,20 +176,19 @@ TIP: You may override the default value of the `myapp.schema.create` property in\n \n Almost ready!\n To initialize the DB in development mode, we will use the client simple `query` method.\n-It returns a `CompletionStage` and thus can be composed to execute queries sequentially:\n+It returns an `Uni` and thus can be composed to execute queries sequentially:\n \n [source,java]\n ----\n-        client.query(\"DROP TABLE IF EXISTS fruits\")\n-                .thenCompose(r -> client.query(\"CREATE TABLE fruits (id SERIAL PRIMARY KEY, name TEXT NOT NULL)\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Orange')\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Pear')\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Apple')\"))\n-                .toCompletableFuture()\n-                .join();\n+ client.query(\"DROP TABLE IF EXISTS fruits\")\n+    .flatMap(r -> client.query(\"CREATE TABLE fruits (id SERIAL PRIMARY KEY, name TEXT NOT NULL)\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38bfea02a4f164f4bff8e04deb9e8785cebd68b0"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwNTU3OQ==", "bodyText": "I updated the commit message to explain why I'm ok with flatMap and map here. Reactive programmers are used to them.", "url": "https://github.com/quarkusio/quarkus/pull/7216#discussion_r381205579", "createdAt": "2020-02-19T10:30:37Z", "author": {"login": "cescoffier"}, "path": "docs/src/main/asciidoc/reactive-sql-clients.adoc", "diffHunk": "@@ -174,20 +176,19 @@ TIP: You may override the default value of the `myapp.schema.create` property in\n \n Almost ready!\n To initialize the DB in development mode, we will use the client simple `query` method.\n-It returns a `CompletionStage` and thus can be composed to execute queries sequentially:\n+It returns an `Uni` and thus can be composed to execute queries sequentially:\n \n [source,java]\n ----\n-        client.query(\"DROP TABLE IF EXISTS fruits\")\n-                .thenCompose(r -> client.query(\"CREATE TABLE fruits (id SERIAL PRIMARY KEY, name TEXT NOT NULL)\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Orange')\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Pear')\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Apple')\"))\n-                .toCompletableFuture()\n-                .join();\n+ client.query(\"DROP TABLE IF EXISTS fruits\")\n+    .flatMap(r -> client.query(\"CREATE TABLE fruits (id SERIAL PRIMARY KEY, name TEXT NOT NULL)\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5Mjc0NA=="}, "originalCommit": {"oid": "38bfea02a4f164f4bff8e04deb9e8785cebd68b0"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTQxNzEzOnYy", "diffSide": "RIGHT", "path": "extensions/reactive-mysql-client/runtime/src/main/java/io/quarkus/reactive/mysql/client/runtime/MySQLPoolProducer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMDowOTozOFrOFriPAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMDozNToxM1rOFrjGJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5Mzk4Ng==", "bodyText": "How about using AtomicReference to remove synchronization without losing the checks in the producer methods?", "url": "https://github.com/quarkusio/quarkus/pull/7216#discussion_r381193986", "createdAt": "2020-02-19T10:09:38Z", "author": {"login": "tsegismont"}, "path": "extensions/reactive-mysql-client/runtime/src/main/java/io/quarkus/reactive/mysql/client/runtime/MySQLPoolProducer.java", "diffHunk": "@@ -4,36 +4,90 @@\n import javax.enterprise.inject.Produces;\n import javax.inject.Singleton;\n \n+import org.jboss.logging.Logger;\n+\n import io.vertx.mysqlclient.MySQLPool;\n \n @ApplicationScoped\n public class MySQLPoolProducer {\n \n+    private static final Logger LOGGER = Logger.getLogger(MySQLPoolProducer.class);\n+\n     private volatile MySQLPool mysqlPool;\n-    private volatile io.vertx.axle.mysqlclient.MySQLPool axleMySQLPool;\n-    private volatile io.vertx.reactivex.mysqlclient.MySQLPool rxMySQLPool;\n+    private io.vertx.mutiny.mysqlclient.MySQLPool mutinyMySQLPool;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38bfea02a4f164f4bff8e04deb9e8785cebd68b0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwNDk4NA==", "bodyText": "AtomicReference.compareAndSet(null, instance) requires the instance to be already created - so it's not lazy. Using updateAndGet could work but is rather convoluted (you would need to move the if check in the binary operator).", "url": "https://github.com/quarkusio/quarkus/pull/7216#discussion_r381204984", "createdAt": "2020-02-19T10:29:29Z", "author": {"login": "cescoffier"}, "path": "extensions/reactive-mysql-client/runtime/src/main/java/io/quarkus/reactive/mysql/client/runtime/MySQLPoolProducer.java", "diffHunk": "@@ -4,36 +4,90 @@\n import javax.enterprise.inject.Produces;\n import javax.inject.Singleton;\n \n+import org.jboss.logging.Logger;\n+\n import io.vertx.mysqlclient.MySQLPool;\n \n @ApplicationScoped\n public class MySQLPoolProducer {\n \n+    private static final Logger LOGGER = Logger.getLogger(MySQLPoolProducer.class);\n+\n     private volatile MySQLPool mysqlPool;\n-    private volatile io.vertx.axle.mysqlclient.MySQLPool axleMySQLPool;\n-    private volatile io.vertx.reactivex.mysqlclient.MySQLPool rxMySQLPool;\n+    private io.vertx.mutiny.mysqlclient.MySQLPool mutinyMySQLPool;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5Mzk4Ng=="}, "originalCommit": {"oid": "38bfea02a4f164f4bff8e04deb9e8785cebd68b0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwODEwMw==", "bodyText": "Ok, let's revisit later if that proves to be a problem", "url": "https://github.com/quarkusio/quarkus/pull/7216#discussion_r381208103", "createdAt": "2020-02-19T10:35:13Z", "author": {"login": "tsegismont"}, "path": "extensions/reactive-mysql-client/runtime/src/main/java/io/quarkus/reactive/mysql/client/runtime/MySQLPoolProducer.java", "diffHunk": "@@ -4,36 +4,90 @@\n import javax.enterprise.inject.Produces;\n import javax.inject.Singleton;\n \n+import org.jboss.logging.Logger;\n+\n import io.vertx.mysqlclient.MySQLPool;\n \n @ApplicationScoped\n public class MySQLPoolProducer {\n \n+    private static final Logger LOGGER = Logger.getLogger(MySQLPoolProducer.class);\n+\n     private volatile MySQLPool mysqlPool;\n-    private volatile io.vertx.axle.mysqlclient.MySQLPool axleMySQLPool;\n-    private volatile io.vertx.reactivex.mysqlclient.MySQLPool rxMySQLPool;\n+    private io.vertx.mutiny.mysqlclient.MySQLPool mutinyMySQLPool;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5Mzk4Ng=="}, "originalCommit": {"oid": "38bfea02a4f164f4bff8e04deb9e8785cebd68b0"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1026, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}