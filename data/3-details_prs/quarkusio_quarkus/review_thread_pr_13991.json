{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzMDcyNzAy", "number": 13991, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxNDowNToxOFrOFHkcxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwODo1Mzo1OFrOFKzrFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNDgxNTQwOnYy", "diffSide": "RIGHT", "path": "extensions/cache/runtime/src/main/java/io/quarkus/cache/runtime/CacheInterceptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxNDowNToxOFrOIJEfJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxNDowNToxOFrOIJEfJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjM4MTYwNw==", "bodyText": "I know this is not pretty, but there's a reason behind that: avoid lambdas in runtime code.", "url": "https://github.com/quarkusio/quarkus/pull/13991#discussion_r546381607", "createdAt": "2020-12-20T14:05:18Z", "author": {"login": "gwenneg"}, "path": "extensions/cache/runtime/src/main/java/io/quarkus/cache/runtime/CacheInterceptor.java", "diffHunk": "@@ -18,28 +22,66 @@\n     @Inject\n     CacheManager cacheManager;\n \n-    @SuppressWarnings(\"unchecked\")\n-    protected <T extends Annotation> List<T> getInterceptorBindings(InvocationContext context, Class<T> bindingClass) {\n-        List<T> bindings = new ArrayList<>();\n-        for (Annotation binding : InterceptorBindings.getInterceptorBindings(context)) {\n-            if (bindingClass.isInstance(binding)) {\n-                bindings.add((T) binding);\n+    /*\n+     * The interception is almost always managed by Arc in a Quarkus application. In such a case, we want to retrieve the\n+     * interceptor bindings stored by Arc in the invocation context data (very good performance-wise). But sometimes the\n+     * interception is managed by another CDI interceptors implementation. It can happen for example while using caching\n+     * annotations on a MicroProfile REST Client method. In that case, we have no other choice but to rely on reflection (with\n+     * underlying synchronized blocks which are bad for performances) to retrieve the interceptor bindings.\n+     */\n+    protected <T extends Annotation> CacheInterceptionContext<T> getInterceptionContext(InvocationContext invocationContext,\n+            Class<T> interceptorBindingClass) {\n+        return getArcCacheInterceptionContext(invocationContext, interceptorBindingClass)\n+                .orElse(getNonArcCacheInterceptionContext(invocationContext, interceptorBindingClass));\n+    }\n+\n+    private <T extends Annotation> Optional<CacheInterceptionContext<T>> getArcCacheInterceptionContext(\n+            InvocationContext invocationContext, Class<T> interceptorBindingClass) {\n+        Set<Annotation> bindings = InterceptorBindings.getInterceptorBindings(invocationContext);\n+        if (bindings == null) {\n+            // This should only happen when the interception is not managed by Arc.\n+            return Optional.empty();\n+        }\n+        CacheInterceptionContext<T> result = new CacheInterceptionContext<>();\n+        for (Annotation binding : bindings) {\n+            if (binding instanceof CacheKeyParameterPositions) {\n+                short[] positions = ((CacheKeyParameterPositions) binding).value();\n+                result.setCacheKeyParameterPositions(positions);\n+            } else if (interceptorBindingClass.isInstance(binding)) {\n+                result.getInterceptorBindings().add(cast(binding, interceptorBindingClass));\n             }\n         }\n-        return bindings;\n+        return Optional.of(result);\n     }\n \n-    protected <T extends Annotation> T getInterceptorBinding(InvocationContext context, Class<T> bindingClass) {\n-        return getInterceptorBindings(context, bindingClass).get(0);\n+    private <T extends Annotation> CacheInterceptionContext<T> getNonArcCacheInterceptionContext(\n+            InvocationContext invocationContext, Class<T> interceptorBindingClass) {\n+        CacheInterceptionContext<T> result = new CacheInterceptionContext<>();\n+        for (Annotation annotation : invocationContext.getMethod().getAnnotations()) {\n+            if (interceptorBindingClass.isInstance(annotation)) {\n+                result.getInterceptorBindings().add(cast(annotation, interceptorBindingClass));\n+            }\n+        }\n+        Parameter[] parameters = invocationContext.getMethod().getParameters();\n+        if (parameters.length > 0) {\n+            List<Short> positions = new ArrayList<>();\n+            for (short i = 0; i < parameters.length; i++) {\n+                if (parameters[i].isAnnotationPresent(CacheKey.class)) {\n+                    positions.add(i);\n+                }\n+            }\n+            short[] positionsArray = new short[positions.size()];\n+            for (int i = 0; i < positions.size(); i++) {\n+                positionsArray[i] = positions.get(i);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c176af2e62794860381f08c2899fa2d3b55692a1"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNDgxNzkxOnYy", "diffSide": "RIGHT", "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheAnnotationsTransformer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxNDowNzo0MFrOIJEgYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDozNjoyOFrOIJTuPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjM4MTkyMQ==", "bodyText": "cc @geoand", "url": "https://github.com/quarkusio/quarkus/pull/13991#discussion_r546381921", "createdAt": "2020-12-20T14:07:40Z", "author": {"login": "gwenneg"}, "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheAnnotationsTransformer.java", "diffHunk": "@@ -15,21 +15,21 @@\n import org.jboss.logging.Logger;\n \n import io.quarkus.arc.processor.AnnotationsTransformer;\n+import io.quarkus.cache.CacheInvalidate;\n+import io.quarkus.cache.CacheInvalidateAll;\n+import io.quarkus.cache.CacheResult;\n import io.quarkus.cache.deployment.CacheDeploymentConstants;\n-import io.quarkus.cache.runtime.CacheInvalidateAllInterceptorBinding;\n-import io.quarkus.cache.runtime.CacheInvalidateInterceptorBinding;\n-import io.quarkus.cache.runtime.CacheResultInterceptorBinding;\n \n public class SpringCacheAnnotationsTransformer implements AnnotationsTransformer {\n \n     private static final Logger LOGGER = Logger.getLogger(SpringCacheAnnotationsTransformer.class);\n \n     private static final DotName CACHE_RESULT_INTERCEPTOR_BINDING = DotName\n-            .createSimple(CacheResultInterceptorBinding.class.getName());\n+            .createSimple(CacheResult.class.getName());\n     private static final DotName CACHE_INVALIDATE_INTERCEPTOR_BINDING = DotName\n-            .createSimple(CacheInvalidateInterceptorBinding.class.getName());\n+            .createSimple(CacheInvalidate.class.getName());\n     private static final DotName CACHE_INVALIDATE_ALL_INTERCEPTOR_BINDING = DotName\n-            .createSimple(CacheInvalidateAllInterceptorBinding.class.getName());\n+            .createSimple(CacheInvalidateAll.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c176af2e62794860381f08c2899fa2d3b55692a1"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzMTIyOA==", "bodyText": "\ud83d\udc4d\ud83c\udffc", "url": "https://github.com/quarkusio/quarkus/pull/13991#discussion_r546631228", "createdAt": "2020-12-21T10:36:28Z", "author": {"login": "geoand"}, "path": "extensions/spring-cache/deployment/src/main/java/io/quarkus/spring/cache/SpringCacheAnnotationsTransformer.java", "diffHunk": "@@ -15,21 +15,21 @@\n import org.jboss.logging.Logger;\n \n import io.quarkus.arc.processor.AnnotationsTransformer;\n+import io.quarkus.cache.CacheInvalidate;\n+import io.quarkus.cache.CacheInvalidateAll;\n+import io.quarkus.cache.CacheResult;\n import io.quarkus.cache.deployment.CacheDeploymentConstants;\n-import io.quarkus.cache.runtime.CacheInvalidateAllInterceptorBinding;\n-import io.quarkus.cache.runtime.CacheInvalidateInterceptorBinding;\n-import io.quarkus.cache.runtime.CacheResultInterceptorBinding;\n \n public class SpringCacheAnnotationsTransformer implements AnnotationsTransformer {\n \n     private static final Logger LOGGER = Logger.getLogger(SpringCacheAnnotationsTransformer.class);\n \n     private static final DotName CACHE_RESULT_INTERCEPTOR_BINDING = DotName\n-            .createSimple(CacheResultInterceptorBinding.class.getName());\n+            .createSimple(CacheResult.class.getName());\n     private static final DotName CACHE_INVALIDATE_INTERCEPTOR_BINDING = DotName\n-            .createSimple(CacheInvalidateInterceptorBinding.class.getName());\n+            .createSimple(CacheInvalidate.class.getName());\n     private static final DotName CACHE_INVALIDATE_ALL_INTERCEPTOR_BINDING = DotName\n-            .createSimple(CacheInvalidateAllInterceptorBinding.class.getName());\n+            .createSimple(CacheInvalidateAll.class.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjM4MTkyMQ=="}, "originalCommit": {"oid": "c176af2e62794860381f08c2899fa2d3b55692a1"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNDg3NzQxOnYy", "diffSide": "RIGHT", "path": "extensions/cache/deployment/src/test/java/io/quarkus/cache/test/deployment/DeploymentExceptionsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxNTowODoxNVrOIJE8xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxNTowODoxNVrOIJE8xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjM4OTE4OA==", "bodyText": "Here's a preview of what would be logged if the exceptions were not \"caught\" by the test:\n[...]\nCaused by: javax.enterprise.inject.spi.DeploymentException: Found 10 deployment problems:\n[1] @CacheResult is not allowed on a method returning void [class=io.quarkus.cache.test.deployment.DeploymentExceptionsTest$TestResource, method=showThrowVoidReturnTypeTargetException]\n[2] Caching annotations are not allowed on a class [class=io.quarkus.cache.test.deployment.DeploymentExceptionsTest$TestResource, annotation=io.quarkus.cache.CacheInvalidate]\n[3] Caching annotations are not allowed on a private method [class=io.quarkus.cache.test.deployment.DeploymentExceptionsTest$TestResource, method=shouldThrowPrivateMethodTargetException, annotation=io.quarkus.cache.CacheInvalidateAll]\n[4] Caching annotations are not allowed on a private method [class=io.quarkus.cache.test.deployment.DeploymentExceptionsTest$TestResource, method=shouldAlsoThrowPrivateMethodTargetException, annotation=io.quarkus.cache.CacheInvalidate]\n[5] Caching annotations are not allowed on a private method [class=io.quarkus.cache.test.deployment.DeploymentExceptionsTest$TestResource, method=shouldAlsoThrowPrivateMethodTargetException, annotation=io.quarkus.cache.CacheInvalidate]\n[6] Caching annotations are not allowed on a class [class=io.quarkus.cache.test.deployment.DeploymentExceptionsTest$TestBean, annotation=io.quarkus.cache.CacheInvalidateAll]\n[7] Caching annotations are not allowed on a class [class=io.quarkus.cache.test.deployment.DeploymentExceptionsTest$TestBean, annotation=io.quarkus.cache.CacheInvalidateAll]\n[8] A field or method parameter is annotated with a @CacheName annotation referencing an unknown cache name [class=io.quarkus.cache.test.deployment.DeploymentExceptionsTest$TestBean, cacheName=unknown-cache-1]\n[9] A field or method parameter is annotated with a @CacheName annotation referencing an unknown cache name [class=io.quarkus.cache.test.deployment.DeploymentExceptionsTest$TestBean, cacheName=unknown-cache-2]\n[10] A field or method parameter is annotated with a @CacheName annotation referencing an unknown cache name [class=io.quarkus.cache.test.deployment.DeploymentExceptionsTest$TestBean, cacheName=unknown-cache-3]", "url": "https://github.com/quarkusio/quarkus/pull/13991#discussion_r546389188", "createdAt": "2020-12-20T15:08:15Z", "author": {"login": "gwenneg"}, "path": "extensions/cache/deployment/src/test/java/io/quarkus/cache/test/deployment/DeploymentExceptionsTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+package io.quarkus.cache.test.deployment;\n+\n+import static java.util.Arrays.stream;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.util.stream.Stream;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.spi.DeploymentException;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.cache.Cache;\n+import io.quarkus.cache.CacheInvalidate;\n+import io.quarkus.cache.CacheInvalidateAll;\n+import io.quarkus.cache.CacheName;\n+import io.quarkus.cache.CacheResult;\n+import io.quarkus.cache.deployment.exception.ClassTargetException;\n+import io.quarkus.cache.deployment.exception.PrivateMethodTargetException;\n+import io.quarkus.cache.deployment.exception.UnknownCacheNameException;\n+import io.quarkus.cache.deployment.exception.VoidReturnTypeTargetException;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+/**\n+ * This class tests many kinds of {@link DeploymentException} causes related to caching annotations.\n+ */\n+public class DeploymentExceptionsTest {\n+\n+    private static final String UNKNOWN_CACHE_1 = \"unknown-cache-1\";\n+    private static final String UNKNOWN_CACHE_2 = \"unknown-cache-2\";\n+    private static final String UNKNOWN_CACHE_3 = \"unknown-cache-3\";\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest TEST = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class).addClasses(TestResource.class, TestBean.class))\n+            .assertException(t -> {\n+                assertEquals(DeploymentException.class, t.getClass());\n+                assertEquals(10, t.getSuppressed().length);\n+                assertPrivateMethodTargetException(t, \"shouldThrowPrivateMethodTargetException\", 1);\n+                assertPrivateMethodTargetException(t, \"shouldAlsoThrowPrivateMethodTargetException\", 2);\n+                assertVoidReturnTypeTargetException(t, \"showThrowVoidReturnTypeTargetException\");\n+                assertClassTargetException(t, TestResource.class, 1);\n+                assertClassTargetException(t, TestBean.class, 2);\n+                assertUnknownCacheNameException(t, UNKNOWN_CACHE_1);\n+                assertUnknownCacheNameException(t, UNKNOWN_CACHE_2);\n+                assertUnknownCacheNameException(t, UNKNOWN_CACHE_3);\n+            });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de9cf890259192df5372745a2ec3ec0647770c84"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2ODc2Njk0OnYy", "diffSide": "RIGHT", "path": "extensions/cache/runtime/src/main/java/io/quarkus/cache/runtime/CacheInterceptionContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwODo1Mzo1OFrOINpn8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMToxMzowOFrOIOTT7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE4NDM3MA==", "bodyText": "It would be nice if this class was immutable... WDYT?", "url": "https://github.com/quarkusio/quarkus/pull/13991#discussion_r551184370", "createdAt": "2021-01-04T08:53:58Z", "author": {"login": "mkouba"}, "path": "extensions/cache/runtime/src/main/java/io/quarkus/cache/runtime/CacheInterceptionContext.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package io.quarkus.cache.runtime;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class CacheInterceptionContext<T extends Annotation> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17cf71363a6d9462add84865c395f3e22d44fcc6"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg2NzM3Mw==", "bodyText": "I agree, thanks for the suggestion. It took care of it in #14111.", "url": "https://github.com/quarkusio/quarkus/pull/13991#discussion_r551867373", "createdAt": "2021-01-05T11:13:08Z", "author": {"login": "gwenneg"}, "path": "extensions/cache/runtime/src/main/java/io/quarkus/cache/runtime/CacheInterceptionContext.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package io.quarkus.cache.runtime;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class CacheInterceptionContext<T extends Annotation> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE4NDM3MA=="}, "originalCommit": {"oid": "17cf71363a6d9462add84865c395f3e22d44fcc6"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4448, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}