{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwNjU3Mjc4", "number": 13283, "title": "Qute: introduce switch/when section", "bodyText": "Some examples:\n{#when items.size}\n  {#is 1} \n    There is exactly one item!\n  {#is > 10}\n    There are more than 10 items!\n  {#else} \n    There are 2 -10 items!\n{/when}\n\n{#switch person.name}\n  {#case 'John'}\n    Hey John!\n  {#case 'Mary'}\n    Hey Mary!\n{/switch}\n\n{! machine.status == enum constant !}\n{#switch machine.status}\n  {#case ON}\n    It's running.\n  {#case OFF}\n    It's resting.\n  {#case BROKEN}\n    It's broken...\n{/switch}", "createdAt": "2020-11-13T15:43:20Z", "url": "https://github.com/quarkusio/quarkus/pull/13283", "merged": true, "mergeCommit": {"oid": "6c4eb83849748de26968da198de844ba197a71cb"}, "closed": true, "closedAt": "2020-11-23T11:21:25Z", "author": {"login": "mkouba"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdd9hAbABqjQwMTQzMjYwNzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfQsZsABqjQwMjYzMzI2Njc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a819a7dbe76198a7d55e561b50e47970a4d8ec2f", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/a819a7dbe76198a7d55e561b50e47970a4d8ec2f", "committedDate": "2020-11-13T15:42:19Z", "message": "Qute: introduce switch/when section"}, "afterCommit": {"oid": "72cfe3f74b355ad30eb966162b82e7ec5f9f136b", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/72cfe3f74b355ad30eb966162b82e7ec5f9f136b", "committedDate": "2020-11-19T07:21:08Z", "message": "Qute: introduce switch/when section\n\n- also fix validation of expressions related to an inject: expression"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "72cfe3f74b355ad30eb966162b82e7ec5f9f136b", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/72cfe3f74b355ad30eb966162b82e7ec5f9f136b", "committedDate": "2020-11-19T07:21:08Z", "message": "Qute: introduce switch/when section\n\n- also fix validation of expressions related to an inject: expression"}, "afterCommit": {"oid": "c4266e572318f779ca11a811f395345752a346a3", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/c4266e572318f779ca11a811f395345752a346a3", "committedDate": "2020-11-19T15:07:42Z", "message": "Qute: introduce switch/when section\n\n- also fix validation of expressions related to an inject: expression"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c4266e572318f779ca11a811f395345752a346a3", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/c4266e572318f779ca11a811f395345752a346a3", "committedDate": "2020-11-19T15:07:42Z", "message": "Qute: introduce switch/when section\n\n- also fix validation of expressions related to an inject: expression"}, "afterCommit": {"oid": "73cfed1ea347450b638858774e42feb3b820046d", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/73cfed1ea347450b638858774e42feb3b820046d", "committedDate": "2020-11-20T13:50:06Z", "message": "Qute: introduce switch/when section\n\n- also fix validation of expressions related to an inject: expression"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NDQ5ODM3", "url": "https://github.com/quarkusio/quarkus/pull/13283#pullrequestreview-535449837", "createdAt": "2020-11-20T13:59:41Z", "commit": {"oid": "73cfed1ea347450b638858774e42feb3b820046d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NTMzMDM2", "url": "https://github.com/quarkusio/quarkus/pull/13283#pullrequestreview-535533036", "createdAt": "2020-11-20T15:35:04Z", "commit": {"oid": "73cfed1ea347450b638858774e42feb3b820046d"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNTozNTowNFrOH3Uq5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNTo0MTozMFrOH3U7jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc3MjM4OA==", "bodyText": "In general I don't like when there's two names for the same thing and I think swich/case should be enough. But if you say that's what Kotlin uses, then perhaps that's a good justification for having both.", "url": "https://github.com/quarkusio/quarkus/pull/13283#discussion_r527772388", "createdAt": "2020-11-20T15:35:04Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -619,6 +619,97 @@ You can also add any number of `else` blocks:\n {/if}\n ----\n \n+[[when_section]]\n+==== When/Switch Section\n+\n+This section is similar to Java's `switch` or Kotlin's `when` constructs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73cfed1ea347450b638858774e42feb3b820046d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc3NDczOA==", "bodyText": "I get why you have special operators, because the LHS is implicit, but we should really fix expressions so that they're not tag-dependent. For example I expect people will want to write {#is 2 || > 20} and {#is (other.fu + stuff.bar)} and I'm not sure there's a good reason to prevent that. Besides the implicit LHS.\nHell, I wonder if we shouldn't also allow non-implitic operators like {#case 2 || something == fu}.", "url": "https://github.com/quarkusio/quarkus/pull/13283#discussion_r527774738", "createdAt": "2020-11-20T15:38:42Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -619,6 +619,97 @@ You can also add any number of `else` blocks:\n {/if}\n ----\n \n+[[when_section]]\n+==== When/Switch Section\n+\n+This section is similar to Java's `switch` or Kotlin's `when` constructs.\n+It matches a _tested value_ against all blocks sequentially until a condition is satisfied.\n+The first matching block is executed.\n+All other blocks are ignored (this behavior differs to the Java `switch` where a `break` statement is necessary).\n+\n+.Example using the `when`/`is` name aliases\n+[source]\n+----\n+{#when items.size}\n+  {#is 1} <1>\n+    There is exactly one item!\n+  {#is > 10} <2>\n+    There are more than 10 items!\n+  {#else} <3>\n+    There are 2 -10 items!\n+{/when}\n+----\n+<1> If there is exactly one parameter it's tested for equality.\n+<2> It's possible to use <<when_operators,an operator>> to specify the matching logic. Unlike in the <<if_section>> nested operators are not supported.\n+<3> `else` is block is executed if no other block matches the value.\n+\n+.Example using the `switch`/`case` name aliases\n+[source]\n+----\n+{#switch person.name}\n+  {#case 'John'} <1>\n+    Hey John!\n+  {#case 'Mary'} <1>\n+    Hey Mary!\n+{/switch}\n+----\n+<1> `case` is an alias for `is`.\n+\n+A tested value that resolves to an enum is handled specifically.\n+The parameters of an `is`/`case` block are not evaluated as expressions but compared with the result of `toString()` invocation upon the tested value.\n+\n+[source]\n+----\n+{#when machine.status}\n+  {#is ON} \n+    It's running. <1>\n+  {#is in OFF BROKEN}\n+    It's broken or OFF. <2>\n+{/when}\n+----\n+<1> This block is executed if `machine.status.toString().equals(\"ON\")`.\n+<2> This block is executed if  `machine.status.toString().equals(\"OFF\")` or `machine.status.toString().equals(\"BROKEN\")`.\n+\n+NOTE: The enum constants are validated if there is a parameter declaration mapped to a tested value and the declared type is an enum.\n+\n+The following operators are supported in `is`/`case` block conditions:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73cfed1ea347450b638858774e42feb3b820046d"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc3NTQzNA==", "bodyText": "I guess that works.", "url": "https://github.com/quarkusio/quarkus/pull/13283#discussion_r527775434", "createdAt": "2020-11-20T15:39:45Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -619,6 +619,97 @@ You can also add any number of `else` blocks:\n {/if}\n ----\n \n+[[when_section]]\n+==== When/Switch Section\n+\n+This section is similar to Java's `switch` or Kotlin's `when` constructs.\n+It matches a _tested value_ against all blocks sequentially until a condition is satisfied.\n+The first matching block is executed.\n+All other blocks are ignored (this behavior differs to the Java `switch` where a `break` statement is necessary).\n+\n+.Example using the `when`/`is` name aliases\n+[source]\n+----\n+{#when items.size}\n+  {#is 1} <1>\n+    There is exactly one item!\n+  {#is > 10} <2>\n+    There are more than 10 items!\n+  {#else} <3>\n+    There are 2 -10 items!\n+{/when}\n+----\n+<1> If there is exactly one parameter it's tested for equality.\n+<2> It's possible to use <<when_operators,an operator>> to specify the matching logic. Unlike in the <<if_section>> nested operators are not supported.\n+<3> `else` is block is executed if no other block matches the value.\n+\n+.Example using the `switch`/`case` name aliases\n+[source]\n+----\n+{#switch person.name}\n+  {#case 'John'} <1>\n+    Hey John!\n+  {#case 'Mary'} <1>\n+    Hey Mary!\n+{/switch}\n+----\n+<1> `case` is an alias for `is`.\n+\n+A tested value that resolves to an enum is handled specifically.\n+The parameters of an `is`/`case` block are not evaluated as expressions but compared with the result of `toString()` invocation upon the tested value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73cfed1ea347450b638858774e42feb3b820046d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc3NjY1NA==", "bodyText": "But if you make this generic and say that \"if a comparison operator operand (including implicit operands such as in case/is) is an enum then both operands are compared using toString on both operands\" then this works for every operator in every expression context.", "url": "https://github.com/quarkusio/quarkus/pull/13283#discussion_r527776654", "createdAt": "2020-11-20T15:41:30Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -619,6 +619,97 @@ You can also add any number of `else` blocks:\n {/if}\n ----\n \n+[[when_section]]\n+==== When/Switch Section\n+\n+This section is similar to Java's `switch` or Kotlin's `when` constructs.\n+It matches a _tested value_ against all blocks sequentially until a condition is satisfied.\n+The first matching block is executed.\n+All other blocks are ignored (this behavior differs to the Java `switch` where a `break` statement is necessary).\n+\n+.Example using the `when`/`is` name aliases\n+[source]\n+----\n+{#when items.size}\n+  {#is 1} <1>\n+    There is exactly one item!\n+  {#is > 10} <2>\n+    There are more than 10 items!\n+  {#else} <3>\n+    There are 2 -10 items!\n+{/when}\n+----\n+<1> If there is exactly one parameter it's tested for equality.\n+<2> It's possible to use <<when_operators,an operator>> to specify the matching logic. Unlike in the <<if_section>> nested operators are not supported.\n+<3> `else` is block is executed if no other block matches the value.\n+\n+.Example using the `switch`/`case` name aliases\n+[source]\n+----\n+{#switch person.name}\n+  {#case 'John'} <1>\n+    Hey John!\n+  {#case 'Mary'} <1>\n+    Hey Mary!\n+{/switch}\n+----\n+<1> `case` is an alias for `is`.\n+\n+A tested value that resolves to an enum is handled specifically.\n+The parameters of an `is`/`case` block are not evaluated as expressions but compared with the result of `toString()` invocation upon the tested value.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc3NTQzNA=="}, "originalCommit": {"oid": "73cfed1ea347450b638858774e42feb3b820046d"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NTQxMjk4", "url": "https://github.com/quarkusio/quarkus/pull/13283#pullrequestreview-535541298", "createdAt": "2020-11-20T15:44:19Z", "commit": {"oid": "73cfed1ea347450b638858774e42feb3b820046d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNTo0NDoxOVrOH3VDnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNTo0NDoxOVrOH3VDnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc3ODcxNg==", "bodyText": "Why not validate it even if it doesn't come directly from a parameter? It can come from any typed expression, after all, no?", "url": "https://github.com/quarkusio/quarkus/pull/13283#discussion_r527778716", "createdAt": "2020-11-20T15:44:19Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -619,6 +619,97 @@ You can also add any number of `else` blocks:\n {/if}\n ----\n \n+[[when_section]]\n+==== When/Switch Section\n+\n+This section is similar to Java's `switch` or Kotlin's `when` constructs.\n+It matches a _tested value_ against all blocks sequentially until a condition is satisfied.\n+The first matching block is executed.\n+All other blocks are ignored (this behavior differs to the Java `switch` where a `break` statement is necessary).\n+\n+.Example using the `when`/`is` name aliases\n+[source]\n+----\n+{#when items.size}\n+  {#is 1} <1>\n+    There is exactly one item!\n+  {#is > 10} <2>\n+    There are more than 10 items!\n+  {#else} <3>\n+    There are 2 -10 items!\n+{/when}\n+----\n+<1> If there is exactly one parameter it's tested for equality.\n+<2> It's possible to use <<when_operators,an operator>> to specify the matching logic. Unlike in the <<if_section>> nested operators are not supported.\n+<3> `else` is block is executed if no other block matches the value.\n+\n+.Example using the `switch`/`case` name aliases\n+[source]\n+----\n+{#switch person.name}\n+  {#case 'John'} <1>\n+    Hey John!\n+  {#case 'Mary'} <1>\n+    Hey Mary!\n+{/switch}\n+----\n+<1> `case` is an alias for `is`.\n+\n+A tested value that resolves to an enum is handled specifically.\n+The parameters of an `is`/`case` block are not evaluated as expressions but compared with the result of `toString()` invocation upon the tested value.\n+\n+[source]\n+----\n+{#when machine.status}\n+  {#is ON} \n+    It's running. <1>\n+  {#is in OFF BROKEN}\n+    It's broken or OFF. <2>\n+{/when}\n+----\n+<1> This block is executed if `machine.status.toString().equals(\"ON\")`.\n+<2> This block is executed if  `machine.status.toString().equals(\"OFF\")` or `machine.status.toString().equals(\"BROKEN\")`.\n+\n+NOTE: The enum constants are validated if there is a parameter declaration mapped to a tested value and the declared type is an enum.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73cfed1ea347450b638858774e42feb3b820046d"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0baa265776d7faea04e96b3b7ef2f23c98714f8", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/e0baa265776d7faea04e96b3b7ef2f23c98714f8", "committedDate": "2020-11-23T08:15:40Z", "message": "Qute: introduce switch/when section\n\n- also fix validation of expressions related to an inject: expression"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "73cfed1ea347450b638858774e42feb3b820046d", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/73cfed1ea347450b638858774e42feb3b820046d", "committedDate": "2020-11-20T13:50:06Z", "message": "Qute: introduce switch/when section\n\n- also fix validation of expressions related to an inject: expression"}, "afterCommit": {"oid": "e0baa265776d7faea04e96b3b7ef2f23c98714f8", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/e0baa265776d7faea04e96b3b7ef2f23c98714f8", "committedDate": "2020-11-23T08:15:40Z", "message": "Qute: introduce switch/when section\n\n- also fix validation of expressions related to an inject: expression"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1376, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}