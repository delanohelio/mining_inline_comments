{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5MjMxNjU4", "number": 7886, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzozMTozN1rODoVVFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzozNjoyNFrODoVcBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjE5MDk0OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/GeneratedClassGizmoAdaptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzozMTozN1rOF20RIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzozMzozMFrOF20Vsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAyMzc3OQ==", "bodyText": "Should this be invoked if source == null ?", "url": "https://github.com/quarkusio/quarkus/pull/7886#discussion_r393023779", "createdAt": "2020-03-16T13:31:37Z", "author": {"login": "gastaldi"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/GeneratedClassGizmoAdaptor.java", "diffHunk": "@@ -1,22 +1,48 @@\n package io.quarkus.deployment;\n \n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n import io.quarkus.deployment.annotations.BuildProducer;\n import io.quarkus.deployment.builditem.GeneratedClassBuildItem;\n import io.quarkus.gizmo.ClassOutput;\n+import io.quarkus.runner.bootstrap.BootstrapDebug;\n \n public class GeneratedClassGizmoAdaptor implements ClassOutput {\n \n     private final BuildProducer<GeneratedClassBuildItem> classOutput;\n     private final boolean applicationClass;\n+    private final Map<String, StringWriter> sources;\n \n     public GeneratedClassGizmoAdaptor(BuildProducer<GeneratedClassBuildItem> classOutput, boolean applicationClass) {\n         this.classOutput = classOutput;\n         this.applicationClass = applicationClass;\n+        this.sources = BootstrapDebug.DEBUG_SOURCES_DIR != null ? new ConcurrentHashMap<>() : null;\n+    }\n+\n+    @Override\n+    public void write(String className, byte[] bytes) {\n+        String source = null;\n+        if (sources != null) {\n+            StringWriter sw = sources.get(className);\n+            if (sw != null) {\n+                source = sw.toString();\n+            }\n+        }\n+        classOutput.produce(\n+                new GeneratedClassBuildItem(applicationClass, className, bytes, source));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6ca129d64010296d009849ade856c858f4784d9"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAyNDk0Ng==", "bodyText": "Yes, it's ok to pass null. It just means \"no source available\".", "url": "https://github.com/quarkusio/quarkus/pull/7886#discussion_r393024946", "createdAt": "2020-03-16T13:33:30Z", "author": {"login": "mkouba"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/GeneratedClassGizmoAdaptor.java", "diffHunk": "@@ -1,22 +1,48 @@\n package io.quarkus.deployment;\n \n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n import io.quarkus.deployment.annotations.BuildProducer;\n import io.quarkus.deployment.builditem.GeneratedClassBuildItem;\n import io.quarkus.gizmo.ClassOutput;\n+import io.quarkus.runner.bootstrap.BootstrapDebug;\n \n public class GeneratedClassGizmoAdaptor implements ClassOutput {\n \n     private final BuildProducer<GeneratedClassBuildItem> classOutput;\n     private final boolean applicationClass;\n+    private final Map<String, StringWriter> sources;\n \n     public GeneratedClassGizmoAdaptor(BuildProducer<GeneratedClassBuildItem> classOutput, boolean applicationClass) {\n         this.classOutput = classOutput;\n         this.applicationClass = applicationClass;\n+        this.sources = BootstrapDebug.DEBUG_SOURCES_DIR != null ? new ConcurrentHashMap<>() : null;\n+    }\n+\n+    @Override\n+    public void write(String className, byte[] bytes) {\n+        String source = null;\n+        if (sources != null) {\n+            StringWriter sw = sources.get(className);\n+            if (sw != null) {\n+                source = sw.toString();\n+            }\n+        }\n+        classOutput.produce(\n+                new GeneratedClassBuildItem(applicationClass, className, bytes, source));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAyMzc3OQ=="}, "originalCommit": {"oid": "b6ca129d64010296d009849ade856c858f4784d9"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjIwODcwOnYy", "diffSide": "RIGHT", "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/ComponentsProviderGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzozNjoyNFrOF20cmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzozNjoyNFrOF20cmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAyNjcxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                (resource.getName().replace('/', '.')).getBytes(Charset.forName(\"UTF-8\")), null));\n          \n          \n            \n                                (resource.getName().replace('/', '.')).getBytes(StandardCharsets.UTF_8), null));", "url": "https://github.com/quarkusio/quarkus/pull/7886#discussion_r393026714", "createdAt": "2020-03-16T13:36:24Z", "author": {"login": "gastaldi"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/ComponentsProviderGenerator.java", "diffHunk": "@@ -123,7 +124,7 @@ public ComponentsProviderGenerator(AnnotationLiteralProcessor annotationLiterals\n         for (Resource resource : classOutput.getResources()) {\n             resources.add(resource);\n             resources.add(ResourceImpl.serviceProvider(ComponentsProvider.class.getName(),\n-                    (resource.getName().replace('/', '.')).getBytes(Charset.forName(\"UTF-8\"))));\n+                    (resource.getName().replace('/', '.')).getBytes(Charset.forName(\"UTF-8\")), null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6ca129d64010296d009849ade856c858f4784d9"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4674, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}