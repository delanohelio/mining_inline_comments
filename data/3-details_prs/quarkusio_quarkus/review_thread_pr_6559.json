{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMDEyOTY1", "number": 6559, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMjo0MDoyOVrODYVcuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMjo0Mjo1MlrODYVe_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODQzODMzOnYy", "diffSide": "RIGHT", "path": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/metrics/HibernateCounter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMjo0MDoyOVrOFeIyWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMjo0MDoyOVrOFeIyWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0NTU2MA==", "bodyText": "It's very minor but it would be easier to understand if this variable was called statistics.", "url": "https://github.com/quarkusio/quarkus/pull/6559#discussion_r367145560", "createdAt": "2020-01-15T22:40:29Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/metrics/HibernateCounter.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package io.quarkus.hibernate.orm.runtime.metrics;\n+\n+import org.hibernate.SessionFactory;\n+import org.hibernate.stat.Statistics;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.hibernate.orm.runtime.JPAConfig;\n+\n+public class HibernateCounter implements org.eclipse.microprofile.metrics.Counter {\n+\n+    private volatile SessionFactory sessionFactory;\n+    private String persistenceUnitName;\n+    private String metric;\n+\n+    public HibernateCounter() {\n+    }\n+\n+    public HibernateCounter(String persistenceUnitName, String metric) {\n+        this.persistenceUnitName = persistenceUnitName;\n+        this.metric = metric;\n+    }\n+\n+    public String getPersistenceUnitName() {\n+        return persistenceUnitName;\n+    }\n+\n+    public void setPersistenceUnitName(String persistenceUnitName) {\n+        this.persistenceUnitName = persistenceUnitName;\n+    }\n+\n+    public String getMetric() {\n+        return metric;\n+    }\n+\n+    public void setMetric(String metric) {\n+        this.metric = metric;\n+    }\n+\n+    @Override\n+    public long getCount() {\n+        Statistics metrics = getSessionFactory().getStatistics();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f35a70fa423bc48b308970fd258e3a9cf8c8c80b"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODQ0MjQyOnYy", "diffSide": "RIGHT", "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMjo0MjowN1rOFeI0vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjowNDowOVrOFeOz0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0NjE3Mw==", "bodyText": "Is it the norm to use dots everywhere? hibernate.second-level-cache.puts would have felt more natural to me.", "url": "https://github.com/quarkusio/quarkus/pull/6559#discussion_r367146173", "createdAt": "2020-01-15T22:42:07Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -345,6 +349,163 @@ public void startPersistenceUnits(HibernateOrmRecorder recorder, BeanContainerBu\n         recorder.startAllPersistenceUnits(beanContainer.getValue());\n     }\n \n+    @BuildStep\n+    public void metrics(HibernateOrmConfig config,\n+            BuildProducer<MetricBuildItem> metrics) {\n+        // TODO: When multiple PUs are supported, create metrics for each PU. For now we only assume the \"default\" PU.\n+        boolean metricsEnabled = config.metricsEnabled && config.statistics.orElse(true);\n+        metrics.produce(createMetricBuildItem(\"hibernate.sessions.open\",\n+                \"Global number of sessions opened\",\n+                \"sessionsOpened\",\n+                metricsEnabled));\n+        metrics.produce(createMetricBuildItem(\"hibernate.sessions.closed\",\n+                \"Global number of sessions closed\",\n+                \"sessionsClosed\",\n+                metricsEnabled));\n+        metrics.produce(createMetricBuildItem(\"hibernate.sessions.closed\",\n+                \"Global number of sessions closed\",\n+                \"sessionsClosed\",\n+                metricsEnabled));\n+        metrics.produce(createMetricBuildItem(\"hibernate.transactions\",\n+                \"The number of transactions we know to have completed\",\n+                \"transactionCount\",\n+                metricsEnabled));\n+        metrics.produce(createMetricBuildItem(\"hibernate.transactions.successful\",\n+                \"The number of transactions we know to have been successful\",\n+                \"successfulTransactions\",\n+                metricsEnabled));\n+        metrics.produce(createMetricBuildItem(\"hibernate.optimistic.lock.failures\",\n+                \"The number of Hibernate StaleObjectStateExceptions or JPA OptimisticLockExceptions that occurred.\",\n+                \"optimisticLockFailures\",\n+                metricsEnabled));\n+        metrics.produce(createMetricBuildItem(\"hibernate.flushes\",\n+                \"Global number of flush operations executed (either manual or automatic).\",\n+                \"flushes\",\n+                metricsEnabled));\n+        metrics.produce(createMetricBuildItem(\"hibernate.connections.obtained\",\n+                \"Get the global number of connections asked by the sessions \" +\n+                        \"(the actual number of connections used may be much smaller depending \" +\n+                        \"whether you use a connection pool or not)\",\n+                \"connectionsObtained\",\n+                metricsEnabled));\n+        metrics.produce(createMetricBuildItem(\"hibernate.statements.prepared\",\n+                \"The number of prepared statements that were acquired\",\n+                \"statementsPrepared\",\n+                metricsEnabled));\n+        metrics.produce(createMetricBuildItem(\"hibernate.statements.closed\",\n+                \"The number of prepared statements that were released\",\n+                \"statementsClosed\",\n+                metricsEnabled));\n+        metrics.produce(createMetricBuildItem(\"hibernate.second.level.cache.puts\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f35a70fa423bc48b308970fd258e3a9cf8c8c80b"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0NDI0MQ==", "bodyText": "Ok. I changed natural.id and query.cache and timestamps.cache too in a similar fashion", "url": "https://github.com/quarkusio/quarkus/pull/6559#discussion_r367244241", "createdAt": "2020-01-16T06:04:09Z", "author": {"login": "jmartisk"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -345,6 +349,163 @@ public void startPersistenceUnits(HibernateOrmRecorder recorder, BeanContainerBu\n         recorder.startAllPersistenceUnits(beanContainer.getValue());\n     }\n \n+    @BuildStep\n+    public void metrics(HibernateOrmConfig config,\n+            BuildProducer<MetricBuildItem> metrics) {\n+        // TODO: When multiple PUs are supported, create metrics for each PU. For now we only assume the \"default\" PU.\n+        boolean metricsEnabled = config.metricsEnabled && config.statistics.orElse(true);\n+        metrics.produce(createMetricBuildItem(\"hibernate.sessions.open\",\n+                \"Global number of sessions opened\",\n+                \"sessionsOpened\",\n+                metricsEnabled));\n+        metrics.produce(createMetricBuildItem(\"hibernate.sessions.closed\",\n+                \"Global number of sessions closed\",\n+                \"sessionsClosed\",\n+                metricsEnabled));\n+        metrics.produce(createMetricBuildItem(\"hibernate.sessions.closed\",\n+                \"Global number of sessions closed\",\n+                \"sessionsClosed\",\n+                metricsEnabled));\n+        metrics.produce(createMetricBuildItem(\"hibernate.transactions\",\n+                \"The number of transactions we know to have completed\",\n+                \"transactionCount\",\n+                metricsEnabled));\n+        metrics.produce(createMetricBuildItem(\"hibernate.transactions.successful\",\n+                \"The number of transactions we know to have been successful\",\n+                \"successfulTransactions\",\n+                metricsEnabled));\n+        metrics.produce(createMetricBuildItem(\"hibernate.optimistic.lock.failures\",\n+                \"The number of Hibernate StaleObjectStateExceptions or JPA OptimisticLockExceptions that occurred.\",\n+                \"optimisticLockFailures\",\n+                metricsEnabled));\n+        metrics.produce(createMetricBuildItem(\"hibernate.flushes\",\n+                \"Global number of flush operations executed (either manual or automatic).\",\n+                \"flushes\",\n+                metricsEnabled));\n+        metrics.produce(createMetricBuildItem(\"hibernate.connections.obtained\",\n+                \"Get the global number of connections asked by the sessions \" +\n+                        \"(the actual number of connections used may be much smaller depending \" +\n+                        \"whether you use a connection pool or not)\",\n+                \"connectionsObtained\",\n+                metricsEnabled));\n+        metrics.produce(createMetricBuildItem(\"hibernate.statements.prepared\",\n+                \"The number of prepared statements that were acquired\",\n+                \"statementsPrepared\",\n+                metricsEnabled));\n+        metrics.produce(createMetricBuildItem(\"hibernate.statements.closed\",\n+                \"The number of prepared statements that were released\",\n+                \"statementsClosed\",\n+                metricsEnabled));\n+        metrics.produce(createMetricBuildItem(\"hibernate.second.level.cache.puts\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0NjE3Mw=="}, "originalCommit": {"oid": "f35a70fa423bc48b308970fd258e3a9cf8c8c80b"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODQ0NDEzOnYy", "diffSide": "RIGHT", "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMjo0Mjo1MlrOFeI1wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMjo0Mjo1MlrOFeI1wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0NjQzNA==", "bodyText": "Could you use an hibernate-orm prefix instead to be consistent with the extension? Moreover, we really want it to be branded as Hibernate ORM because we also have Validator and Search.", "url": "https://github.com/quarkusio/quarkus/pull/6559#discussion_r367146434", "createdAt": "2020-01-15T22:42:52Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -345,6 +349,163 @@ public void startPersistenceUnits(HibernateOrmRecorder recorder, BeanContainerBu\n         recorder.startAllPersistenceUnits(beanContainer.getValue());\n     }\n \n+    @BuildStep\n+    public void metrics(HibernateOrmConfig config,\n+            BuildProducer<MetricBuildItem> metrics) {\n+        // TODO: When multiple PUs are supported, create metrics for each PU. For now we only assume the \"default\" PU.\n+        boolean metricsEnabled = config.metricsEnabled && config.statistics.orElse(true);\n+        metrics.produce(createMetricBuildItem(\"hibernate.sessions.open\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f35a70fa423bc48b308970fd258e3a9cf8c8c80b"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1204, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}