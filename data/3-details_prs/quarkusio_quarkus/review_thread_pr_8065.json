{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMDYyNzcy", "number": 8065, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTowMDozNFrODqST9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjozNDoyM1rODqxWNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjY2ODA1OnYy", "diffSide": "RIGHT", "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/FlywayProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTowMDozNFrOF58BwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTo0MDowNFrOF59cIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI5NjY0MQ==", "bodyText": "Could you clean up all these useless comments? I did it in the Liquibase extension that was based on it. It should be done in a separate commit.", "url": "https://github.com/quarkusio/quarkus/pull/8065#discussion_r396296641", "createdAt": "2020-03-23T09:00:34Z", "author": {"login": "gsmet"}, "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/FlywayProcessor.java", "diffHunk": "@@ -88,19 +82,20 @@ void build(BuildProducer<AdditionalBeanBuildItem> additionalBeanProducer,\n                 .collect(Collectors.toSet());\n         new FlywayDatasourceBeanGenerator(dataSourceNames, generatedBeanBuildItem).createFlywayProducerBean();\n \n-        registerNativeImageResources(resourceProducer, generatedResourceProducer,\n-                discoverApplicationMigrations(getMigrationLocations(dataSourceNames)));\n+        List<String> applicationMigrations = discoverApplicationMigrations(getMigrationLocations(dataSourceNames));\n+        recorder.setApplicationMigrationFiles(applicationMigrations);\n \n-        containerListenerProducer.produce(\n-                new BeanContainerListenerBuildItem(recorder.setFlywayBuildConfig(flywayBuildConfig)));\n+        resourceProducer.produce(new NativeImageResourceBuildItem(applicationMigrations.toArray(new String[0])));\n+\n+        containerListenerProducer.produce(new BeanContainerListenerBuildItem(recorder.setFlywayBuildConfig(flywayBuildConfig)));\n     }\n \n     /**\n      * Handles all the operations that can be recorded in the RUNTIME_INIT execution time phase\n      *\n      * @param recorder Used to set the runtime config\n      * @param flywayRuntimeConfig The Flyway configuration\n-     * @param dataSourceInitializedBuildItem Added this dependency to be sure that Agroal is initialized first\n+     * @param jdbcDataSourceBuildItems Added this dependency to be sure that Agroal is initialized first", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecddfb0a2eeb5283fd1ebbf1830737f78cf15d0b"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMxOTc3Ng==", "bodyText": "Done.", "url": "https://github.com/quarkusio/quarkus/pull/8065#discussion_r396319776", "createdAt": "2020-03-23T09:40:04Z", "author": {"login": "machi1990"}, "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/FlywayProcessor.java", "diffHunk": "@@ -88,19 +82,20 @@ void build(BuildProducer<AdditionalBeanBuildItem> additionalBeanProducer,\n                 .collect(Collectors.toSet());\n         new FlywayDatasourceBeanGenerator(dataSourceNames, generatedBeanBuildItem).createFlywayProducerBean();\n \n-        registerNativeImageResources(resourceProducer, generatedResourceProducer,\n-                discoverApplicationMigrations(getMigrationLocations(dataSourceNames)));\n+        List<String> applicationMigrations = discoverApplicationMigrations(getMigrationLocations(dataSourceNames));\n+        recorder.setApplicationMigrationFiles(applicationMigrations);\n \n-        containerListenerProducer.produce(\n-                new BeanContainerListenerBuildItem(recorder.setFlywayBuildConfig(flywayBuildConfig)));\n+        resourceProducer.produce(new NativeImageResourceBuildItem(applicationMigrations.toArray(new String[0])));\n+\n+        containerListenerProducer.produce(new BeanContainerListenerBuildItem(recorder.setFlywayBuildConfig(flywayBuildConfig)));\n     }\n \n     /**\n      * Handles all the operations that can be recorded in the RUNTIME_INIT execution time phase\n      *\n      * @param recorder Used to set the runtime config\n      * @param flywayRuntimeConfig The Flyway configuration\n-     * @param dataSourceInitializedBuildItem Added this dependency to be sure that Agroal is initialized first\n+     * @param jdbcDataSourceBuildItems Added this dependency to be sure that Agroal is initialized first", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI5NjY0MQ=="}, "originalCommit": {"oid": "ecddfb0a2eeb5283fd1ebbf1830737f78cf15d0b"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjY3Nzc5OnYy", "diffSide": "RIGHT", "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/FlywayProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTowMzoxM1rOF58H3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOToyNDoxOVrOF5818g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI5ODIwNA==", "bodyText": "It might be a silly idea but shouldn't we have a Map<Datasource name, Migration files>?", "url": "https://github.com/quarkusio/quarkus/pull/8065#discussion_r396298204", "createdAt": "2020-03-23T09:03:13Z", "author": {"login": "gsmet"}, "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/FlywayProcessor.java", "diffHunk": "@@ -88,19 +82,20 @@ void build(BuildProducer<AdditionalBeanBuildItem> additionalBeanProducer,\n                 .collect(Collectors.toSet());\n         new FlywayDatasourceBeanGenerator(dataSourceNames, generatedBeanBuildItem).createFlywayProducerBean();\n \n-        registerNativeImageResources(resourceProducer, generatedResourceProducer,\n-                discoverApplicationMigrations(getMigrationLocations(dataSourceNames)));\n+        List<String> applicationMigrations = discoverApplicationMigrations(getMigrationLocations(dataSourceNames));\n+        recorder.setApplicationMigrationFiles(applicationMigrations);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecddfb0a2eeb5283fd1ebbf1830737f78cf15d0b"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMxMDAwMg==", "bodyText": "I see the idea but then we do not have the Datasource name during scanning so we can't exploit the Map as we'd have liked.", "url": "https://github.com/quarkusio/quarkus/pull/8065#discussion_r396310002", "createdAt": "2020-03-23T09:24:19Z", "author": {"login": "machi1990"}, "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/FlywayProcessor.java", "diffHunk": "@@ -88,19 +82,20 @@ void build(BuildProducer<AdditionalBeanBuildItem> additionalBeanProducer,\n                 .collect(Collectors.toSet());\n         new FlywayDatasourceBeanGenerator(dataSourceNames, generatedBeanBuildItem).createFlywayProducerBean();\n \n-        registerNativeImageResources(resourceProducer, generatedResourceProducer,\n-                discoverApplicationMigrations(getMigrationLocations(dataSourceNames)));\n+        List<String> applicationMigrations = discoverApplicationMigrations(getMigrationLocations(dataSourceNames));\n+        recorder.setApplicationMigrationFiles(applicationMigrations);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI5ODIwNA=="}, "originalCommit": {"oid": "ecddfb0a2eeb5283fd1ebbf1830737f78cf15d0b"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjY4MTYxOnYy", "diffSide": "RIGHT", "path": "extensions/flyway/runtime/src/main/java/io/quarkus/flyway/runtime/graal/QuarkusPathLocationScanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTowNDoxOVrOF58KJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTo0MDoxNlrOF59coA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI5ODc4OA==", "bodyText": "It was preexisiting bug we would need to use debugf here. I fixed a few in the Liquibase extension.", "url": "https://github.com/quarkusio/quarkus/pull/8065#discussion_r396298788", "createdAt": "2020-03-23T09:04:19Z", "author": {"login": "gsmet"}, "path": "extensions/flyway/runtime/src/main/java/io/quarkus/flyway/runtime/graal/QuarkusPathLocationScanner.java", "diffHunk": "@@ -21,32 +15,46 @@\n \n public final class QuarkusPathLocationScanner implements ResourceAndClassScanner {\n     private static final Log LOG = LogFactory.getLog(QuarkusPathLocationScanner.class);\n-    /**\n-     * File with the migrations list. It is generated dynamically in the Flyway Quarkus Processor\n-     */\n-    public final static String MIGRATIONS_LIST_FILE = \"META-INF/flyway-migrations.txt\";\n+    private static final String LOCATION_SEPARATOR = \"/\";\n+    private static List<String> applicationMigrationFiles;\n+\n+    private final Collection<LoadableResource> scannedResources;\n+\n+    public QuarkusPathLocationScanner(Collection<Location> locations) {\n+        this.scannedResources = new ArrayList<>();\n+        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+\n+        for (String migrationFile : applicationMigrationFiles) {\n+            if (canHandleMigrationFile(locations, migrationFile)) {\n+                LOG.debug(\"Loading \" + migrationFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecddfb0a2eeb5283fd1ebbf1830737f78cf15d0b"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMxOTkwNA==", "bodyText": "Done", "url": "https://github.com/quarkusio/quarkus/pull/8065#discussion_r396319904", "createdAt": "2020-03-23T09:40:16Z", "author": {"login": "machi1990"}, "path": "extensions/flyway/runtime/src/main/java/io/quarkus/flyway/runtime/graal/QuarkusPathLocationScanner.java", "diffHunk": "@@ -21,32 +15,46 @@\n \n public final class QuarkusPathLocationScanner implements ResourceAndClassScanner {\n     private static final Log LOG = LogFactory.getLog(QuarkusPathLocationScanner.class);\n-    /**\n-     * File with the migrations list. It is generated dynamically in the Flyway Quarkus Processor\n-     */\n-    public final static String MIGRATIONS_LIST_FILE = \"META-INF/flyway-migrations.txt\";\n+    private static final String LOCATION_SEPARATOR = \"/\";\n+    private static List<String> applicationMigrationFiles;\n+\n+    private final Collection<LoadableResource> scannedResources;\n+\n+    public QuarkusPathLocationScanner(Collection<Location> locations) {\n+        this.scannedResources = new ArrayList<>();\n+        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+\n+        for (String migrationFile : applicationMigrationFiles) {\n+            if (canHandleMigrationFile(locations, migrationFile)) {\n+                LOG.debug(\"Loading \" + migrationFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI5ODc4OA=="}, "originalCommit": {"oid": "ecddfb0a2eeb5283fd1ebbf1830737f78cf15d0b"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTc1Mjg1OnYy", "diffSide": "LEFT", "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/FlywayProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjozNDoyM1rOF6uIrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjo0MTozMVrOF6uYKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzExNzYxMw==", "bodyText": "Dunno, this doesn't seem useless to me :)", "url": "https://github.com/quarkusio/quarkus/pull/8065#discussion_r397117613", "createdAt": "2020-03-24T12:34:23Z", "author": {"login": "gastaldi"}, "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/FlywayProcessor.java", "diffHunk": "@@ -117,10 +108,6 @@ ServiceStartBuildItem configureRuntimeProperties(FlywayRecorder recorder,\n \n     /**\n      * Collects the configured migration locations for the default and all named DataSources.\n-     * <p>\n-     * A {@link LinkedHashSet} is used to avoid duplications.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f4b720562c008abb35b679760512cd1aa4acba0"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEyMTU3Ng==", "bodyText": "Well, I don't think we should add a comment every time we choose a data structure. Otherwise, we will have a loooot of comments.\nIf you use a Set, that's usually to avoid duplications :). I think just using it is enough documentation.", "url": "https://github.com/quarkusio/quarkus/pull/8065#discussion_r397121576", "createdAt": "2020-03-24T12:41:31Z", "author": {"login": "gsmet"}, "path": "extensions/flyway/deployment/src/main/java/io/quarkus/flyway/FlywayProcessor.java", "diffHunk": "@@ -117,10 +108,6 @@ ServiceStartBuildItem configureRuntimeProperties(FlywayRecorder recorder,\n \n     /**\n      * Collects the configured migration locations for the default and all named DataSources.\n-     * <p>\n-     * A {@link LinkedHashSet} is used to avoid duplications.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzExNzYxMw=="}, "originalCommit": {"oid": "0f4b720562c008abb35b679760512cd1aa4acba0"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4566, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}