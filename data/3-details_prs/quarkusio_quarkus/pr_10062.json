{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NDI0ODc3", "number": 10062, "title": "Support extension registry when adding or listing extensions in plugins", "bodyText": "This PR introduces support for querying the extension registry compiled from https://github.com/quarkusio/quarkus-extension-catalog.\nIt will fallback to the original behavior if the registry URL is not specified.\nTo test:\nMake sure to change the Quarkus BOM dependency in the project to a released version which is also present in the registry(eg. 1.5.1.Final)\nMaven\nmvn quarkus:list-extensions -DsearchPattern=kubernetes -Dregistry=https://github.com/quarkusio/quarkus-extension-catalog/releases/download/v23/registry.json\n\nGradle\ngradle listExtensions --searchPattern=mutiny --registry=https://github.com/quarkusio/quarkus-extension-catalog/releases/download/v23/registry.json\n\nFixes #9593", "createdAt": "2020-06-16T19:33:15Z", "url": "https://github.com/quarkusio/quarkus/pull/10062", "merged": true, "mergeCommit": {"oid": "15c0e7d480dae212ec2da64645996ff37d793c06"}, "closed": true, "closedAt": "2020-07-21T23:28:39Z", "author": {"login": "gastaldi"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsuDLJgFqTQzMzg2MzA0MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3G8MtAFqTQ1MjUwMzQ3MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzODYzMDQx", "url": "https://github.com/quarkusio/quarkus/pull/10062#pullrequestreview-433863041", "createdAt": "2020-06-19T07:32:54Z", "commit": {"oid": "f1633b066d0b7d5b5c15009d90abf83950ef5ff5"}, "state": "DISMISSED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzozMjo1NFrOGmLCrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzozNjowM1rOGmLIDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY3OTk4MA==", "bodyText": "Could we move the Registry and DefaultExtensionRegistry creation  to the devtools-common?", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r442679980", "createdAt": "2020-06-19T07:32:54Z", "author": {"login": "ia3andy"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusAddExtension.java", "diffHunk": "@@ -40,9 +57,16 @@ public void addExtension() {\n                 .collect(toSet());\n \n         try {\n-            new AddExtensions(getQuarkusProject())\n-                    .extensions(extensionsSet)\n-                    .execute();\n+            AddExtensions addExtensions = new AddExtensions(getQuarkusProject())\n+                    .extensions(extensionsSet);\n+            if (registry != null) {\n+                Registry registry = new URLRegistryBuilder()\n+                        .addURL(new URL(getRegistry()))\n+                        .build();\n+                DefaultExtensionRegistry extensionRegistry = new DefaultExtensionRegistry(registry);\n+                addExtensions.extensionRegistry(extensionRegistry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1633b066d0b7d5b5c15009d90abf83950ef5ff5"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4MDMyOA==", "bodyText": "This way you avoid duplicating this block of code..", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r442680328", "createdAt": "2020-06-19T07:33:44Z", "author": {"login": "ia3andy"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusListExtensions.java", "diffHunk": "@@ -48,18 +55,36 @@ public void setSearchPattern(String searchPattern) {\n         this.searchPattern = searchPattern;\n     }\n \n+    @Optional\n+    @Input\n+    public String getRegistry() {\n+        return registry;\n+    }\n+\n+    @Option(description = \"The extension registry URL to be used\", option = \"registry\")\n+    public void setRegistry(String registry) {\n+        this.registry = registry;\n+    }\n+\n     public QuarkusListExtensions() {\n         super(\"Lists the available quarkus extensions\");\n     }\n \n     @TaskAction\n     public void listExtensions() {\n         try {\n-            new ListExtensions(getQuarkusProject())\n+            ListExtensions listExtensions = new ListExtensions(getQuarkusProject())\n                     .all(isAll())\n                     .format(getFormat())\n-                    .search(getSearchPattern())\n-                    .execute();\n+                    .search(getSearchPattern());\n+            if (registry != null) {\n+                Registry registry = new URLRegistryBuilder()\n+                        .addURL(new URL(getRegistry()))\n+                        .build();\n+                DefaultExtensionRegistry extensionRegistry = new DefaultExtensionRegistry(registry);\n+                listExtensions.extensionRegistry(extensionRegistry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1633b066d0b7d5b5c15009d90abf83950ef5ff5"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4MDQ0MA==", "bodyText": "Same here", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r442680440", "createdAt": "2020-06-19T07:34:00Z", "author": {"login": "ia3andy"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/AddExtensionMojo.java", "diffHunk": "@@ -53,13 +64,20 @@ public void doExecute(final QuarkusProject quarkusProject, final MessageWriter l\n         } else {\n             // Parse the \"extension\" just in case it contains several comma-separated values\n             // https://github.com/quarkusio/quarkus/issues/2393\n-            ext.addAll(Arrays.stream(extension.split(\",\")).map(s -> s.trim()).collect(Collectors.toSet()));\n+            ext.addAll(Arrays.stream(extension.split(\",\")).map(String::trim).collect(toSet()));\n         }\n \n         try {\n-            final QuarkusCommandOutcome outcome = new AddExtensions(quarkusProject)\n-                    .extensions(ext.stream().map(String::trim).collect(Collectors.toSet()))\n-                    .execute();\n+            AddExtensions addExtensions = new AddExtensions(quarkusProject)\n+                    .extensions(ext.stream().map(String::trim).collect(toSet()));\n+            if (registryURL != null) {\n+                Registry registry = new URLRegistryBuilder()\n+                        .addURL(registryURL)\n+                        .build();\n+                DefaultExtensionRegistry extensionRegistry = new DefaultExtensionRegistry(registry);\n+                addExtensions.extensionRegistry(extensionRegistry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1633b066d0b7d5b5c15009d90abf83950ef5ff5"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4MDQ5OQ==", "bodyText": "Same here", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r442680499", "createdAt": "2020-06-19T07:34:09Z", "author": {"login": "ia3andy"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/ListExtensionsMojo.java", "diffHunk": "@@ -36,14 +41,27 @@\n     @Parameter(property = \"searchPattern\", alias = \"quarkus.extension.searchPattern\")\n     protected String searchPattern;\n \n+    /**\n+     * The URL where the registry is.\n+     */\n+    @Parameter(property = \"registry\", alias = \"quarkus.extension.registry\")\n+    protected URL registryURL;\n+\n     @Override\n     public void doExecute(final QuarkusProject quarkusProject, final MessageWriter log) throws MojoExecutionException {\n         try {\n-            new ListExtensions(quarkusProject)\n+            ListExtensions listExtensions = new ListExtensions(quarkusProject)\n                     .all(all)\n                     .format(format)\n-                    .search(searchPattern)\n-                    .execute();\n+                    .search(searchPattern);\n+            if (registryURL != null) {\n+                Registry registry = new URLRegistryBuilder()\n+                        .addURL(registryURL)\n+                        .build();\n+                DefaultExtensionRegistry extensionRegistry = new DefaultExtensionRegistry(registry);\n+                listExtensions.extensionRegistry(extensionRegistry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1633b066d0b7d5b5c15009d90abf83950ef5ff5"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4MTM1Nw==", "bodyText": "@maxandersen why don't we have the registry for creation too?", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r442681357", "createdAt": "2020-06-19T07:36:03Z", "author": {"login": "ia3andy"}, "path": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/commands/handlers/CreateProjectCommandHandler.java", "diffHunk": "@@ -56,7 +56,7 @@ public QuarkusCommandOutcome execute(QuarkusCommandInvocation invocation) throws\n                 invocation.setValue(CLASS_NAME, className);\n             }\n \n-            final List<AppArtifactCoords> extensionsToAdd = computeCoordsFromQuery(invocation, extensionsQuery);\n+            final List<AppArtifactCoords> extensionsToAdd = computeCoordsFromQuery(invocation, null, extensionsQuery);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1633b066d0b7d5b5c15009d90abf83950ef5ff5"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MzQzNjcx", "url": "https://github.com/quarkusio/quarkus/pull/10062#pullrequestreview-436343671", "createdAt": "2020-06-24T05:56:00Z", "commit": {"oid": "e1eaa4676c3fcaf63406d24fe735c43fc89f029c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNTo1NjowMFrOGoD7jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNTo1NjowMFrOGoD7jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2MDYyMQ==", "bodyText": "remind me again why the registry descriptor api is external ?", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r444660621", "createdAt": "2020-06-24T05:56:00Z", "author": {"login": "maxandersen"}, "path": ".dependabot/config.yml", "diffHunk": "@@ -54,6 +54,8 @@ update_configs:\n           dependency_name: \"io.quarkus.http:quarkus-http-servlet\"\n       - match:\n           dependency_name: \"io.quarkus.http:quarkus-http-websockets-jsr\"\n+      - match:\n+          dependency_name: \"io.quarkus:quarkus-registry-descriptor\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1eaa4676c3fcaf63406d24fe735c43fc89f029c"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MzQ1NTUy", "url": "https://github.com/quarkusio/quarkus/pull/10062#pullrequestreview-436345552", "createdAt": "2020-06-24T06:00:44Z", "commit": {"oid": "e1eaa4676c3fcaf63406d24fe735c43fc89f029c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNjowMDo0NFrOGoEBPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNjowMDo0NFrOGoEBPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2MjA3Nw==", "bodyText": "where did we end up on having list of registries to support layering of registries?", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r444662077", "createdAt": "2020-06-24T06:00:44Z", "author": {"login": "maxandersen"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusAddExtension.java", "diffHunk": "@@ -31,6 +36,17 @@ public void setExtensionsToAdd(List<String> extensionsToAdd) {\n         return extensionsToAdd;\n     }\n \n+    @Optional\n+    @Input\n+    public String getRegistry() {\n+        return registry;\n+    }\n+\n+    @Option(description = \"The extension registry URL to be used\", option = \"registry\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1eaa4676c3fcaf63406d24fe735c43fc89f029c"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NjAwOTIy", "url": "https://github.com/quarkusio/quarkus/pull/10062#pullrequestreview-436600922", "createdAt": "2020-06-24T12:33:14Z", "commit": {"oid": "e1eaa4676c3fcaf63406d24fe735c43fc89f029c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjozMzoxNFrOGoQGDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjozMzoxNFrOGoQGDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1OTkxNw==", "bodyText": "This message could be more informative. Like:\n\"No extension found with pattern kubernetes when searching https://github.com/quarkusio/quarkus-extension-catalog/releases/download/v23/registry.json\"\nor similar.", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r444859917", "createdAt": "2020-06-24T12:33:14Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/commands/handlers/ListExtensionsCommandHandler.java", "diffHunk": "@@ -49,15 +51,19 @@ public QuarkusCommandOutcome execute(QuarkusCommandInvocation invocation) throws\n         } catch (IOException e) {\n             throw new QuarkusCommandException(\"Failed to determine the list of installed extensions\", e);\n         }\n-\n-        Stream<Extension> platformExtensionsStream = invocation.getPlatformDescriptor().getExtensions().stream();\n-        platformExtensionsStream = platformExtensionsStream.filter(this::filterUnlisted);\n-        if (search != null && !\"*\".equalsIgnoreCase(search)) {\n-            final Pattern searchPattern = Pattern.compile(\".*\" + search + \".*\", Pattern.CASE_INSENSITIVE);\n-            platformExtensionsStream = platformExtensionsStream.filter(e -> filterBySearch(searchPattern, e));\n+        final Collection<Extension> platformExtensions;\n+        if (extensionRegistry != null) {\n+            String quarkusVersion = invocation.getPlatformDescriptor().getQuarkusVersion();\n+            platformExtensions = extensionRegistry.list(quarkusVersion, search);\n+        } else {\n+            Stream<Extension> platformExtensionsStream = invocation.getPlatformDescriptor().getExtensions().stream();\n+            platformExtensionsStream = platformExtensionsStream.filter(this::filterUnlisted);\n+            if (search != null && !\"*\".equalsIgnoreCase(search)) {\n+                final Pattern searchPattern = Pattern.compile(\".*\" + search + \".*\", Pattern.CASE_INSENSITIVE);\n+                platformExtensionsStream = platformExtensionsStream.filter(e -> filterBySearch(searchPattern, e));\n+            }\n+            platformExtensions = platformExtensionsStream.collect(Collectors.toList());\n         }\n-        List<Extension> platformExtensions = platformExtensionsStream.collect(Collectors.toList());\n-\n         if (platformExtensions.isEmpty()) {\n             invocation.log().info(\"No extension found with this pattern\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1eaa4676c3fcaf63406d24fe735c43fc89f029c"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NjAxMzc1", "url": "https://github.com/quarkusio/quarkus/pull/10062#pullrequestreview-436601375", "createdAt": "2020-06-24T12:33:51Z", "commit": {"oid": "e1eaa4676c3fcaf63406d24fe735c43fc89f029c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjozMzo1MlrOGoQHOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjozMzo1MlrOGoQHOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2MDIxOA==", "bodyText": "should list/add not also include the existing platform info in its search ?", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r444860218", "createdAt": "2020-06-24T12:33:52Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/commands/handlers/ListExtensionsCommandHandler.java", "diffHunk": "@@ -49,15 +51,19 @@ public QuarkusCommandOutcome execute(QuarkusCommandInvocation invocation) throws\n         } catch (IOException e) {\n             throw new QuarkusCommandException(\"Failed to determine the list of installed extensions\", e);\n         }\n-\n-        Stream<Extension> platformExtensionsStream = invocation.getPlatformDescriptor().getExtensions().stream();\n-        platformExtensionsStream = platformExtensionsStream.filter(this::filterUnlisted);\n-        if (search != null && !\"*\".equalsIgnoreCase(search)) {\n-            final Pattern searchPattern = Pattern.compile(\".*\" + search + \".*\", Pattern.CASE_INSENSITIVE);\n-            platformExtensionsStream = platformExtensionsStream.filter(e -> filterBySearch(searchPattern, e));\n+        final Collection<Extension> platformExtensions;\n+        if (extensionRegistry != null) {\n+            String quarkusVersion = invocation.getPlatformDescriptor().getQuarkusVersion();\n+            platformExtensions = extensionRegistry.list(quarkusVersion, search);\n+        } else {\n+            Stream<Extension> platformExtensionsStream = invocation.getPlatformDescriptor().getExtensions().stream();\n+            platformExtensionsStream = platformExtensionsStream.filter(this::filterUnlisted);\n+            if (search != null && !\"*\".equalsIgnoreCase(search)) {\n+                final Pattern searchPattern = Pattern.compile(\".*\" + search + \".*\", Pattern.CASE_INSENSITIVE);\n+                platformExtensionsStream = platformExtensionsStream.filter(e -> filterBySearch(searchPattern, e));\n+            }\n+            platformExtensions = platformExtensionsStream.collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1eaa4676c3fcaf63406d24fe735c43fc89f029c"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2Njc0ODU4", "url": "https://github.com/quarkusio/quarkus/pull/10062#pullrequestreview-436674858", "createdAt": "2020-06-24T13:59:53Z", "commit": {"oid": "3b248027759094836a1373b4493a15e5e987db40"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMzo1OTo1NFrOGoTc0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMzo1OTo1NFrOGoTc0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkxNDg5Nw==", "bodyText": "Shouldn't these get/setRegistry be also List-based?", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r444914897", "createdAt": "2020-06-24T13:59:54Z", "author": {"login": "aloubyansky"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusListExtensions.java", "diffHunk": "@@ -48,18 +54,34 @@ public void setSearchPattern(String searchPattern) {\n         this.searchPattern = searchPattern;\n     }\n \n+    @Optional\n+    @Input\n+    public String getRegistry() {\n+        return registry;\n+    }\n+\n+    @Option(description = \"The extension registry URL to be used\", option = \"registry\")\n+    public void setRegistry(String registry) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b248027759094836a1373b4493a15e5e987db40"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NzY2ODM4", "url": "https://github.com/quarkusio/quarkus/pull/10062#pullrequestreview-436766838", "createdAt": "2020-06-24T15:34:03Z", "commit": {"oid": "b99063d85377968220bb4daa06ef30905e04c523"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTozNDowM1rOGoXu9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTozNDowM1rOGoXu9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk4NTA3OQ==", "bodyText": "Be careful with that, the caller shouldn't expect that the returned set of dependencies is a complete set. But it looks like it's used in one place only.\nIn fact, we should be detecting the platforms differently. The current way is not reliable in multi module projects with BOMs imported by parents.", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r444985079", "createdAt": "2020-06-24T15:34:03Z", "author": {"login": "aloubyansky"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/QuarkusProjectMojoBase.java", "diffHunk": "@@ -165,7 +165,7 @@ private String resolveValue(String expr) throws IOException {\n     }\n \n     private List<Dependency> getManagedDependencies() throws IOException {\n-        final DependencyManagement managed = project.getModel().getDependencyManagement();\n+        final DependencyManagement managed = project.getOriginalModel().getDependencyManagement();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b99063d85377968220bb4daa06ef30905e04c523"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNjgyMzcx", "url": "https://github.com/quarkusio/quarkus/pull/10062#pullrequestreview-441682371", "createdAt": "2020-07-02T13:33:28Z", "commit": {"oid": "676f0b940fcf6ebc4ce26b68f97e9509e57c3bce"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMzozMzoyOFrOGsNE8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMzozMzoyOFrOGsNE8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwNDc4NQ==", "bodyText": "this description does not seem to match registry.json.\nIt has \"versions' which i'm not sure what is about ?", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r449004785", "createdAt": "2020-07-02T13:33:28Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/registry-descriptor/README.md", "diffHunk": "@@ -0,0 +1,105 @@\n+# Quarkus Registry Descriptor\n+\n+This project provides a model and a parser API to handle the Quarkus extension registry.\n+\n+## Definitions\n+### Repository\n+A repository is a local directory (which can be cloned from a Git repository) with the following structure: \n+\n+```bash\n+.\n+\u251c\u2500\u2500 extensions\n+\u2502\u00a0\u00a0 \u2514\u2500\u2500 jsf.json\n+\u2514\u2500\u2500 platforms.json\n+```\n+\n+### Extensions\n+For maintenance purposes, each extension is declared in its own file and has the following structure:\n+\n+```json\n+{\n+  \"group-id\": \"org.apache.myfaces.core.extensions.quarkus\",\n+  \"artifact-id\": \"quarkus-myfaces\",\n+  \"releases\": [\n+    {\n+      \"version\": \"2.3-next\",\n+      \"quarkus-core\":  \"1.3.1.Final\"\n+    },\n+    {\n+      \"version\": \"2.4-next\",\n+      \"quarkus-core\": \"1.3.2.Final\"\n+    }\n+  ]\n+}\n+``` \n+\n+The Quarkus extension MUST be released to a Maven repository. The descriptor states the GAV and the Quarkus version for each release (which is listed here for performance purposes - if not specified, the parser will attempt to resolve using the Maven Resolver API)\n+\n+\n+### Platforms \n+\n+Platforms are a set of extensions of a specific version and MUST exist as a BOM. Since the order is important, it is declared as a single JSON (ordered by priority - the preferred BOMs in the top)\n+\n+```json\n+[\n+  {\n+    \"group-id\": \"io.quarkus\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "676f0b940fcf6ebc4ce26b68f97e9509e57c3bce"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNjg0NDEz", "url": "https://github.com/quarkusio/quarkus/pull/10062#pullrequestreview-441684413", "createdAt": "2020-07-02T13:35:48Z", "commit": {"oid": "676f0b940fcf6ebc4ce26b68f97e9509e57c3bce"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMzozNTo0OFrOGsNK5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMzozNTo0OFrOGsNK5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwNjMwOQ==", "bodyText": "are we not going to capture the \"extension class\" ? i..e there are the specific extension release and then there are the extension of which there are multiple possible releases.", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r449006309", "createdAt": "2020-07-02T13:35:48Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/registry-descriptor/README.md", "diffHunk": "@@ -0,0 +1,105 @@\n+# Quarkus Registry Descriptor\n+\n+This project provides a model and a parser API to handle the Quarkus extension registry.\n+\n+## Definitions\n+### Repository\n+A repository is a local directory (which can be cloned from a Git repository) with the following structure: \n+\n+```bash\n+.\n+\u251c\u2500\u2500 extensions\n+\u2502\u00a0\u00a0 \u2514\u2500\u2500 jsf.json\n+\u2514\u2500\u2500 platforms.json\n+```\n+\n+### Extensions\n+For maintenance purposes, each extension is declared in its own file and has the following structure:\n+\n+```json\n+{\n+  \"group-id\": \"org.apache.myfaces.core.extensions.quarkus\",\n+  \"artifact-id\": \"quarkus-myfaces\",\n+  \"releases\": [\n+    {\n+      \"version\": \"2.3-next\",\n+      \"quarkus-core\":  \"1.3.1.Final\"\n+    },\n+    {\n+      \"version\": \"2.4-next\",\n+      \"quarkus-core\": \"1.3.2.Final\"\n+    }\n+  ]\n+}\n+``` \n+\n+The Quarkus extension MUST be released to a Maven repository. The descriptor states the GAV and the Quarkus version for each release (which is listed here for performance purposes - if not specified, the parser will attempt to resolve using the Maven Resolver API)\n+\n+\n+### Platforms \n+\n+Platforms are a set of extensions of a specific version and MUST exist as a BOM. Since the order is important, it is declared as a single JSON (ordered by priority - the preferred BOMs in the top)\n+\n+```json\n+[\n+  {\n+    \"group-id\": \"io.quarkus\",\n+    \"artifact-id\": \"quarkus-universe-bom\",\n+    \"releases\": [\n+      {\n+        \"version\": \"1.3.1.Final\"\n+      },\n+      {\n+        \"version\": \"1.3.2.Final\"\n+      }\n+    ]\n+  },\n+  {\n+    \"group-id\": \"io.quarkus\",\n+    \"artifact-id\": \"quarkus-bom\",\n+    \"artifact-id-json\": \"quarkus-bom-descriptor-json\",\n+    \"releases\": [\n+      {\n+        \"version\": \"1.3.1.Final\"\n+      },\n+      {\n+        \"version\": \"1.3.2.Final\"\n+      },\n+      {\n+        \"version\": \"1.4.0.CR1\"\n+      }\n+    ]\n+  }\n+]\n+```\n+\n+The idea is to provide an utility that would allow to perform all sorts of queries across the registry, such as:\n+\n+* which Quarkus Core versions are available;\n+* which platforms are available;\n+* which extensions are available.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "676f0b940fcf6ebc4ce26b68f97e9509e57c3bce"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNjg1Mjgw", "url": "https://github.com/quarkusio/quarkus/pull/10062#pullrequestreview-441685280", "createdAt": "2020-07-02T13:36:49Z", "commit": {"oid": "676f0b940fcf6ebc4ce26b68f97e9509e57c3bce"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMzozNjo0OVrOGsNNiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMzozNjo0OVrOGsNNiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwNjk4NA==", "bodyText": "should we not list a descriptoin/tags for that extension - most likely from  the \"last released version\" ?", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r449006984", "createdAt": "2020-07-02T13:36:49Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/registry-descriptor/README.md", "diffHunk": "@@ -0,0 +1,105 @@\n+# Quarkus Registry Descriptor\n+\n+This project provides a model and a parser API to handle the Quarkus extension registry.\n+\n+## Definitions\n+### Repository\n+A repository is a local directory (which can be cloned from a Git repository) with the following structure: \n+\n+```bash\n+.\n+\u251c\u2500\u2500 extensions\n+\u2502\u00a0\u00a0 \u2514\u2500\u2500 jsf.json\n+\u2514\u2500\u2500 platforms.json\n+```\n+\n+### Extensions\n+For maintenance purposes, each extension is declared in its own file and has the following structure:\n+\n+```json\n+{\n+  \"group-id\": \"org.apache.myfaces.core.extensions.quarkus\",\n+  \"artifact-id\": \"quarkus-myfaces\",\n+  \"releases\": [\n+    {\n+      \"version\": \"2.3-next\",\n+      \"quarkus-core\":  \"1.3.1.Final\"\n+    },\n+    {\n+      \"version\": \"2.4-next\",\n+      \"quarkus-core\": \"1.3.2.Final\"\n+    }\n+  ]\n+}\n+``` \n+\n+The Quarkus extension MUST be released to a Maven repository. The descriptor states the GAV and the Quarkus version for each release (which is listed here for performance purposes - if not specified, the parser will attempt to resolve using the Maven Resolver API)\n+\n+\n+### Platforms \n+\n+Platforms are a set of extensions of a specific version and MUST exist as a BOM. Since the order is important, it is declared as a single JSON (ordered by priority - the preferred BOMs in the top)\n+\n+```json\n+[\n+  {\n+    \"group-id\": \"io.quarkus\",\n+    \"artifact-id\": \"quarkus-universe-bom\",\n+    \"releases\": [\n+      {\n+        \"version\": \"1.3.1.Final\"\n+      },\n+      {\n+        \"version\": \"1.3.2.Final\"\n+      }\n+    ]\n+  },\n+  {\n+    \"group-id\": \"io.quarkus\",\n+    \"artifact-id\": \"quarkus-bom\",\n+    \"artifact-id-json\": \"quarkus-bom-descriptor-json\",\n+    \"releases\": [\n+      {\n+        \"version\": \"1.3.1.Final\"\n+      },\n+      {\n+        \"version\": \"1.3.2.Final\"\n+      },\n+      {\n+        \"version\": \"1.4.0.CR1\"\n+      }\n+    ]\n+  }\n+]\n+```\n+\n+The idea is to provide an utility that would allow to perform all sorts of queries across the registry, such as:\n+\n+* which Quarkus Core versions are available;\n+* which platforms are available;\n+* which extensions are available.\n+\n+For a given Quarkus Core version:\n+\n+* list the available platforms;\n+* list all the extensions including those that aren't a part of any platform.\n+\n+For a given platform:\n+\n+* list the platform versions available (i.e. releases of this platform);\n+* list Quarkus Core versions it supports.\n+\n+For a given platform release:\n+\n+* Quarkus Core version;\n+* Extension releases that are included.\n+\n+For a given extension:\n+\n+* list available versions of the extension (i.e. releases of the extension);\n+* (The list could be easily extended)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "676f0b940fcf6ebc4ce26b68f97e9509e57c3bce"}, "originalPosition": 100}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMjMzODE2", "url": "https://github.com/quarkusio/quarkus/pull/10062#pullrequestreview-442233816", "createdAt": "2020-07-03T08:19:46Z", "commit": {"oid": "61e6c88131aab234677f17785409ffb9ccee3794"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODoxOTo0NlrOGsoB4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODoxOTo0NlrOGsoB4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ0NjM2OQ==", "bodyText": "What is happening here? What is this fallback about?", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r449446369", "createdAt": "2020-07-03T08:19:46Z", "author": {"login": "aloubyansky"}, "path": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/commands/handlers/ListExtensionsCommandHandler.java", "diffHunk": "@@ -49,20 +52,27 @@ public QuarkusCommandOutcome execute(QuarkusCommandInvocation invocation) throws\n         } catch (IOException e) {\n             throw new QuarkusCommandException(\"Failed to determine the list of installed extensions\", e);\n         }\n-\n-        Stream<Extension> platformExtensionsStream = invocation.getPlatformDescriptor().getExtensions().stream();\n-        platformExtensionsStream = platformExtensionsStream.filter(this::filterUnlisted);\n-        if (search != null && !\"*\".equalsIgnoreCase(search)) {\n-            final Pattern searchPattern = Pattern.compile(\".*\" + search + \".*\", Pattern.CASE_INSENSITIVE);\n-            platformExtensionsStream = platformExtensionsStream.filter(e -> filterBySearch(searchPattern, e));\n+        final Collection<Extension> platformExtensions;\n+        if (extensionRegistry != null) {\n+            String quarkusVersion = invocation.getPlatformDescriptor().getQuarkusVersion();\n+            Collection<Extension> result = extensionRegistry.list(quarkusVersion, search);\n+            if (result.isEmpty()) {\n+                log.warn(\n+                        \"No extension found with pattern '%s' while searching in the configured extension registries (using Quarkus Core %s).\\n\"\n+                                + \"Falling back to existing platform extensions\",\n+                        search, quarkusVersion);\n+                platformExtensions = searchExtensions(invocation, search);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61e6c88131aab234677f17785409ffb9ccee3794"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMjQyMDk4", "url": "https://github.com/quarkusio/quarkus/pull/10062#pullrequestreview-442242098", "createdAt": "2020-07-03T08:32:37Z", "commit": {"oid": "61e6c88131aab234677f17785409ffb9ccee3794"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODozMjozN1rOGsoa9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODozMjozN1rOGsoa9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ1Mjc5MQ==", "bodyText": "Hint: org.apache.maven.artifact.versioning.DefaultArtifactVersion", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r449452791", "createdAt": "2020-07-03T08:32:37Z", "author": {"login": "aloubyansky"}, "path": "independent-projects/tools/registry-descriptor/src/main/java/io/quarkus/registry/model/Release.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.quarkus.registry.model;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import javax.annotation.Nullable;\n+import org.immutables.value.Value;\n+\n+@Value.Immutable\n+@JsonDeserialize(as = ImmutableRelease.class)\n+public interface Release extends Comparable<Release> {\n+\n+    String getVersion();\n+\n+    @Nullable\n+    @JsonProperty(\"quarkus-core\")\n+    String getQuarkusCore();\n+\n+    @JsonProperty(\"repository-url\")\n+    @Value.Auxiliary\n+    @Nullable\n+    String getRepositoryURL();\n+\n+    static ImmutableRelease.Builder builder() {\n+        return ImmutableRelease.builder();\n+    }\n+\n+    @Override\n+    default int compareTo(Release o) {\n+        //TODO: Compare using SemVer rules", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61e6c88131aab234677f17785409ffb9ccee3794"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMjQ1MjY3", "url": "https://github.com/quarkusio/quarkus/pull/10062#pullrequestreview-442245267", "createdAt": "2020-07-03T08:37:37Z", "commit": {"oid": "61e6c88131aab234677f17785409ffb9ccee3794"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODozNzozOFrOGsokyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODozNzozOFrOGsokyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ1NTMwNA==", "bodyText": "Is this resolving actual 1.5.1.Final platform release?", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r449455304", "createdAt": "2020-07-03T08:37:38Z", "author": {"login": "aloubyansky"}, "path": "independent-projects/tools/registry-descriptor/src/test/java/io/quarkus/registry/builder/ExtensionRegistryBuilderTest.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package io.quarkus.registry.builder;\n+\n+import io.quarkus.registry.ExtensionRegistry;\n+import io.quarkus.registry.impl.DefaultArtifactResolver;\n+import java.io.IOException;\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+class ExtensionRegistryBuilderTest {\n+\n+    @Test\n+    void shouldResolveCamelDependencies() throws IOException {\n+        DefaultArtifactResolver resolver = new DefaultArtifactResolver();\n+        ExtensionRegistry registry = new ExtensionRegistryBuilder(resolver)\n+                .addPlatform(\"io.quarkus\", \"quarkus-universe-bom\", \"1.5.1.Final\")\n+                .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61e6c88131aab234677f17785409ffb9ccee3794"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMzYxODI4", "url": "https://github.com/quarkusio/quarkus/pull/10062#pullrequestreview-451361828", "createdAt": "2020-07-20T07:34:28Z", "commit": {"oid": "65396d1911187a9643f1b83006038f4252afed3f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzozNDoyOFrOGz9OmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzozNDoyOFrOGz9OmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzMzcyMA==", "bodyText": "@gastaldi are you sure you want to introduce a coupling here?", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r457133720", "createdAt": "2020-07-20T07:34:28Z", "author": {"login": "ia3andy"}, "path": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionManager.java", "diffHunk": "@@ -4,6 +4,7 @@\n import io.quarkus.bootstrap.model.AppArtifactKey;\n import io.quarkus.dependencies.Extension;\n import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.registry.InstallPlan;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65396d1911187a9643f1b83006038f4252afed3f"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb4a531f61a9961333a57c0b538184175c3b26d5", "author": {"user": {"login": "gastaldi", "name": "George Gastaldi"}}, "url": "https://github.com/quarkusio/quarkus/commit/bb4a531f61a9961333a57c0b538184175c3b26d5", "committedDate": "2020-07-21T04:26:22Z", "message": "Make ValueMap.getValue generic-friendly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a08b23790d53753f4236f14ce453e3ebce824c29", "author": {"user": {"login": "gastaldi", "name": "George Gastaldi"}}, "url": "https://github.com/quarkusio/quarkus/commit/a08b23790d53753f4236f14ce453e3ebce824c29", "committedDate": "2020-07-21T04:26:22Z", "message": "Collect managed dependencies from POM hierarchy to resolve the used platform BOM"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNDY4Njg1", "url": "https://github.com/quarkusio/quarkus/pull/10062#pullrequestreview-452468685", "createdAt": "2020-07-21T13:41:49Z", "commit": {"oid": "45c84b51609b2bc7ef66f56003772504d0ff82c2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzo0MTo0OVrOG04iZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzo0MTo0OVrOG04iZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwNTQ0Nw==", "bodyText": "FYI @ia3andy this is going to help collect platform BOMs from the parents.", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r458105447", "createdAt": "2020-07-21T13:41:49Z", "author": {"login": "aloubyansky"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/QuarkusProjectMojoBase.java", "diffHunk": "@@ -164,9 +168,36 @@ private String resolveValue(String expr) throws IOException {\n         return expr;\n     }\n \n-    private List<Dependency> getManagedDependencies() throws IOException {\n-        final DependencyManagement managed = project.getModel().getDependencyManagement();\n-        return managed != null ? managed.getDependencies()\n-                : Collections.emptyList();\n+    private List<Dependency> getManagedDependencies(MavenArtifactResolver resolver) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c84b51609b2bc7ef66f56003772504d0ff82c2"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNDcwMzA2", "url": "https://github.com/quarkusio/quarkus/pull/10062#pullrequestreview-452470306", "createdAt": "2020-07-21T13:43:35Z", "commit": {"oid": "45c84b51609b2bc7ef66f56003772504d0ff82c2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzo0MzozNVrOG04nIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzo0MzozNVrOG04nIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwNjY1Nw==", "bodyText": "I don't think you need the descriptor (effective POM). It looks like you need only to resolve the pom artifact with resolver.resolve(Artifact);", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r458106657", "createdAt": "2020-07-21T13:43:35Z", "author": {"login": "aloubyansky"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/QuarkusProjectMojoBase.java", "diffHunk": "@@ -164,9 +168,36 @@ private String resolveValue(String expr) throws IOException {\n         return expr;\n     }\n \n-    private List<Dependency> getManagedDependencies() throws IOException {\n-        final DependencyManagement managed = project.getModel().getDependencyManagement();\n-        return managed != null ? managed.getDependencies()\n-                : Collections.emptyList();\n+    private List<Dependency> getManagedDependencies(MavenArtifactResolver resolver) throws IOException {\n+        List<Dependency> managedDependencies = new ArrayList<>();\n+        Model model = project.getOriginalModel();\n+        DependencyManagement managed = model.getDependencyManagement();\n+        if (managed != null) {\n+            managedDependencies.addAll(managed.getDependencies());\n+        }\n+        Parent parent;\n+        while ((parent = model.getParent()) != null) {\n+            try {\n+                ArtifactDescriptorResult result = resolver.resolveDescriptor(new DefaultArtifact(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c84b51609b2bc7ef66f56003772504d0ff82c2"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNDcxNjM2", "url": "https://github.com/quarkusio/quarkus/pull/10062#pullrequestreview-452471636", "createdAt": "2020-07-21T13:45:02Z", "commit": {"oid": "45c84b51609b2bc7ef66f56003772504d0ff82c2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzo0NTowMlrOG04rMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzo0NTowMlrOG04rMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwNzY5Ng==", "bodyText": "Just to clarify, this dependency will be provided at runtime by something? What will it be?", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r458107696", "createdAt": "2020-07-21T13:45:02Z", "author": {"login": "aloubyansky"}, "path": "independent-projects/tools/devtools-common/pom.xml", "diffHunk": "@@ -106,6 +106,12 @@\n             <groupId>jakarta.websocket</groupId>\n             <artifactId>jakarta.websocket-api</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>org.immutables</groupId>\n+            <artifactId>value</artifactId>\n+            <version>2.8.8</version>\n+            <scope>provided</scope>\n+        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c84b51609b2bc7ef66f56003772504d0ff82c2"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7bafc611094ed64d144f3a5d0e0e7dd71002361", "author": {"user": {"login": "gastaldi", "name": "George Gastaldi"}}, "url": "https://github.com/quarkusio/quarkus/commit/f7bafc611094ed64d144f3a5d0e0e7dd71002361", "committedDate": "2020-07-21T13:58:00Z", "message": "Support ExtensionRegistry in ListExtensions\n\nSupport ExtensionRegistry in AddExtensions\n\nSupport multiple registries\n\nIntroduced registry-descriptor and API\n\nIntroduced ExtensionPredicate\n\nAdd Extensions now use ExtensionRegistry.lookup\n\nFixes #9593"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNTAzNDcx", "url": "https://github.com/quarkusio/quarkus/pull/10062#pullrequestreview-452503471", "createdAt": "2020-07-21T14:17:07Z", "commit": {"oid": "f7bafc611094ed64d144f3a5d0e0e7dd71002361"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4242, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}