{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1Mjk2Mjcy", "number": 9182, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNTo1OTozM1rOD61dBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMjo0NDoyN1rOD6-lng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDE5NzgwOnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/RegisterForReflectionBuildStep.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNTo1OTozM1rOGS4uvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNTo1OTozM1rOGS4uvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1NzAyMA==", "bodyText": "You can just use toString() here on the result of name()", "url": "https://github.com/quarkusio/quarkus/pull/9182#discussion_r422457020", "createdAt": "2020-05-09T05:59:33Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/RegisterForReflectionBuildStep.java", "diffHunk": "@@ -30,18 +33,48 @@\n     public void build() throws Exception {\n         for (AnnotationInstance i : combinedIndexBuildItem.getIndex()\n                 .getAnnotations(DotName.createSimple(RegisterForReflection.class.getName()))) {\n-            ClassInfo target = i.target().asClass();\n+\n             boolean methods = i.value(\"methods\") == null || i.value(\"methods\").asBoolean();\n             boolean fields = i.value(\"fields\") == null || i.value(\"fields\").asBoolean();\n+\n             AnnotationValue targetsValue = i.value(\"targets\");\n-            if (targetsValue == null) {\n+            AnnotationValue namesValue = i.value(\"names\");\n+\n+            if (targetsValue == null && namesValue == null) {\n+                ClassInfo target = i.target().asClass();\n                 reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, target.name().toString()));\n-            } else {\n+                return;\n+            }\n+\n+            Set<String> classNames = new HashSet<>();\n+            if (targetsValue != null) {\n                 Type[] targets = targetsValue.asClassArray();\n                 for (Type type : targets) {\n-                    reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, type.name().toString()));\n+                    classNames.add(String.valueOf(type.name()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9d0cf5e68cd415ad9b9b73c787bab961aa6b9f7"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDE5ODUwOnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/RegisterForReflectionBuildStep.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjowMDo1OVrOGS4vHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNzo1OTo0MVrOGS5UfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1NzExOA==", "bodyText": "Why the check here?", "url": "https://github.com/quarkusio/quarkus/pull/9182#discussion_r422457118", "createdAt": "2020-05-09T06:00:59Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/RegisterForReflectionBuildStep.java", "diffHunk": "@@ -30,18 +33,48 @@\n     public void build() throws Exception {\n         for (AnnotationInstance i : combinedIndexBuildItem.getIndex()\n                 .getAnnotations(DotName.createSimple(RegisterForReflection.class.getName()))) {\n-            ClassInfo target = i.target().asClass();\n+\n             boolean methods = i.value(\"methods\") == null || i.value(\"methods\").asBoolean();\n             boolean fields = i.value(\"fields\") == null || i.value(\"fields\").asBoolean();\n+\n             AnnotationValue targetsValue = i.value(\"targets\");\n-            if (targetsValue == null) {\n+            AnnotationValue namesValue = i.value(\"names\");\n+\n+            if (targetsValue == null && namesValue == null) {\n+                ClassInfo target = i.target().asClass();\n                 reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, target.name().toString()));\n-            } else {\n+                return;\n+            }\n+\n+            Set<String> classNames = new HashSet<>();\n+            if (targetsValue != null) {\n                 Type[] targets = targetsValue.asClassArray();\n                 for (Type type : targets) {\n-                    reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, type.name().toString()));\n+                    classNames.add(String.valueOf(type.name()));\n+                }\n+            }\n+\n+            if (namesValue != null) {\n+                String[] names = namesValue.asStringArray();\n+                for (String name : names) {\n+                    if (isClass(name)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9d0cf5e68cd415ad9b9b73c787bab961aa6b9f7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2NDg4MQ==", "bodyText": "Wasn't sure how the handling is done afterwards, hence added a validation check. I've removed the validation as per your suggestion.", "url": "https://github.com/quarkusio/quarkus/pull/9182#discussion_r422464881", "createdAt": "2020-05-09T07:39:34Z", "author": {"login": "lower-case"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/RegisterForReflectionBuildStep.java", "diffHunk": "@@ -30,18 +33,48 @@\n     public void build() throws Exception {\n         for (AnnotationInstance i : combinedIndexBuildItem.getIndex()\n                 .getAnnotations(DotName.createSimple(RegisterForReflection.class.getName()))) {\n-            ClassInfo target = i.target().asClass();\n+\n             boolean methods = i.value(\"methods\") == null || i.value(\"methods\").asBoolean();\n             boolean fields = i.value(\"fields\") == null || i.value(\"fields\").asBoolean();\n+\n             AnnotationValue targetsValue = i.value(\"targets\");\n-            if (targetsValue == null) {\n+            AnnotationValue namesValue = i.value(\"names\");\n+\n+            if (targetsValue == null && namesValue == null) {\n+                ClassInfo target = i.target().asClass();\n                 reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, target.name().toString()));\n-            } else {\n+                return;\n+            }\n+\n+            Set<String> classNames = new HashSet<>();\n+            if (targetsValue != null) {\n                 Type[] targets = targetsValue.asClassArray();\n                 for (Type type : targets) {\n-                    reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, type.name().toString()));\n+                    classNames.add(String.valueOf(type.name()));\n+                }\n+            }\n+\n+            if (namesValue != null) {\n+                String[] names = namesValue.asStringArray();\n+                for (String name : names) {\n+                    if (isClass(name)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1NzExOA=="}, "originalCommit": {"oid": "f9d0cf5e68cd415ad9b9b73c787bab961aa6b9f7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2NjY4NA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/quarkusio/quarkus/pull/9182#discussion_r422466684", "createdAt": "2020-05-09T07:59:41Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/RegisterForReflectionBuildStep.java", "diffHunk": "@@ -30,18 +33,48 @@\n     public void build() throws Exception {\n         for (AnnotationInstance i : combinedIndexBuildItem.getIndex()\n                 .getAnnotations(DotName.createSimple(RegisterForReflection.class.getName()))) {\n-            ClassInfo target = i.target().asClass();\n+\n             boolean methods = i.value(\"methods\") == null || i.value(\"methods\").asBoolean();\n             boolean fields = i.value(\"fields\") == null || i.value(\"fields\").asBoolean();\n+\n             AnnotationValue targetsValue = i.value(\"targets\");\n-            if (targetsValue == null) {\n+            AnnotationValue namesValue = i.value(\"names\");\n+\n+            if (targetsValue == null && namesValue == null) {\n+                ClassInfo target = i.target().asClass();\n                 reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, target.name().toString()));\n-            } else {\n+                return;\n+            }\n+\n+            Set<String> classNames = new HashSet<>();\n+            if (targetsValue != null) {\n                 Type[] targets = targetsValue.asClassArray();\n                 for (Type type : targets) {\n-                    reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, type.name().toString()));\n+                    classNames.add(String.valueOf(type.name()));\n+                }\n+            }\n+\n+            if (namesValue != null) {\n+                String[] names = namesValue.asStringArray();\n+                for (String name : names) {\n+                    if (isClass(name)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1NzExOA=="}, "originalCommit": {"oid": "f9d0cf5e68cd415ad9b9b73c787bab961aa6b9f7"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDE5OTMyOnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/RegisterForReflectionBuildStep.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjowMjoyNlrOGS4viQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjowMjoyNlrOGS4viQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1NzIyNQ==", "bodyText": "If you absolutely do need to load a class in a Quarkus build step, you should use the Thread Context Classloader.", "url": "https://github.com/quarkusio/quarkus/pull/9182#discussion_r422457225", "createdAt": "2020-05-09T06:02:26Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/RegisterForReflectionBuildStep.java", "diffHunk": "@@ -30,18 +33,48 @@\n     public void build() throws Exception {\n         for (AnnotationInstance i : combinedIndexBuildItem.getIndex()\n                 .getAnnotations(DotName.createSimple(RegisterForReflection.class.getName()))) {\n-            ClassInfo target = i.target().asClass();\n+\n             boolean methods = i.value(\"methods\") == null || i.value(\"methods\").asBoolean();\n             boolean fields = i.value(\"fields\") == null || i.value(\"fields\").asBoolean();\n+\n             AnnotationValue targetsValue = i.value(\"targets\");\n-            if (targetsValue == null) {\n+            AnnotationValue namesValue = i.value(\"names\");\n+\n+            if (targetsValue == null && namesValue == null) {\n+                ClassInfo target = i.target().asClass();\n                 reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, target.name().toString()));\n-            } else {\n+                return;\n+            }\n+\n+            Set<String> classNames = new HashSet<>();\n+            if (targetsValue != null) {\n                 Type[] targets = targetsValue.asClassArray();\n                 for (Type type : targets) {\n-                    reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, type.name().toString()));\n+                    classNames.add(String.valueOf(type.name()));\n+                }\n+            }\n+\n+            if (namesValue != null) {\n+                String[] names = namesValue.asStringArray();\n+                for (String name : names) {\n+                    if (isClass(name)) {\n+                        classNames.add(name);\n+                    }\n                 }\n             }\n+\n+            for (String className : classNames) {\n+                reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, className));\n+            }\n+        }\n+    }\n+\n+    private boolean isClass(String className) {\n+        try {\n+            Class.forName(className, false, getClass().getClassLoader());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9d0cf5e68cd415ad9b9b73c787bab961aa6b9f7"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDE5OTUwOnYy", "diffSide": "RIGHT", "path": "core/runtime/src/main/java/io/quarkus/runtime/annotations/RegisterForReflection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjowMzowMFrOGS4vqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjowMzowMFrOGS4vqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1NzI1Ng==", "bodyText": "Perhaps calling it classNames would be better?", "url": "https://github.com/quarkusio/quarkus/pull/9182#discussion_r422457256", "createdAt": "2020-05-09T06:03:00Z", "author": {"login": "geoand"}, "path": "core/runtime/src/main/java/io/quarkus/runtime/annotations/RegisterForReflection.java", "diffHunk": "@@ -30,4 +30,11 @@\n      * generally just be placed on an empty class that is not otherwise used.\n      */\n     Class<?>[] targets() default {};\n+\n+    /**\n+     *\n+     * This allows for classes to be registered via class names. This was introduced to add the facility to\n+     * register private classes for Reflection.\n+     */\n+    String[] names() default {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9d0cf5e68cd415ad9b9b73c787bab961aa6b9f7"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDIwMDM1OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/RegisterForReflectionBuildStep.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjowNDoyNVrOGS4wHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNzo0MDowOVrOGS5Npw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1NzM3NA==", "bodyText": "If we are going to load classes (I assume to make things safer for users, we should at least be logging when the load failed.\nBut as I said above, I don't really see much point in this type of validation)", "url": "https://github.com/quarkusio/quarkus/pull/9182#discussion_r422457374", "createdAt": "2020-05-09T06:04:25Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/RegisterForReflectionBuildStep.java", "diffHunk": "@@ -30,18 +33,48 @@\n     public void build() throws Exception {\n         for (AnnotationInstance i : combinedIndexBuildItem.getIndex()\n                 .getAnnotations(DotName.createSimple(RegisterForReflection.class.getName()))) {\n-            ClassInfo target = i.target().asClass();\n+\n             boolean methods = i.value(\"methods\") == null || i.value(\"methods\").asBoolean();\n             boolean fields = i.value(\"fields\") == null || i.value(\"fields\").asBoolean();\n+\n             AnnotationValue targetsValue = i.value(\"targets\");\n-            if (targetsValue == null) {\n+            AnnotationValue namesValue = i.value(\"names\");\n+\n+            if (targetsValue == null && namesValue == null) {\n+                ClassInfo target = i.target().asClass();\n                 reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, target.name().toString()));\n-            } else {\n+                return;\n+            }\n+\n+            Set<String> classNames = new HashSet<>();\n+            if (targetsValue != null) {\n                 Type[] targets = targetsValue.asClassArray();\n                 for (Type type : targets) {\n-                    reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, type.name().toString()));\n+                    classNames.add(String.valueOf(type.name()));\n+                }\n+            }\n+\n+            if (namesValue != null) {\n+                String[] names = namesValue.asStringArray();\n+                for (String name : names) {\n+                    if (isClass(name)) {\n+                        classNames.add(name);\n+                    }\n                 }\n             }\n+\n+            for (String className : classNames) {\n+                reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, className));\n+            }\n+        }\n+    }\n+\n+    private boolean isClass(String className) {\n+        try {\n+            Class.forName(className, false, getClass().getClassLoader());\n+            return true;\n+        } catch (ClassNotFoundException e) {\n+            return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9d0cf5e68cd415ad9b9b73c787bab961aa6b9f7"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2NDkzNQ==", "bodyText": "Removed the Validation, This won't be required now.", "url": "https://github.com/quarkusio/quarkus/pull/9182#discussion_r422464935", "createdAt": "2020-05-09T07:40:09Z", "author": {"login": "lower-case"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/RegisterForReflectionBuildStep.java", "diffHunk": "@@ -30,18 +33,48 @@\n     public void build() throws Exception {\n         for (AnnotationInstance i : combinedIndexBuildItem.getIndex()\n                 .getAnnotations(DotName.createSimple(RegisterForReflection.class.getName()))) {\n-            ClassInfo target = i.target().asClass();\n+\n             boolean methods = i.value(\"methods\") == null || i.value(\"methods\").asBoolean();\n             boolean fields = i.value(\"fields\") == null || i.value(\"fields\").asBoolean();\n+\n             AnnotationValue targetsValue = i.value(\"targets\");\n-            if (targetsValue == null) {\n+            AnnotationValue namesValue = i.value(\"names\");\n+\n+            if (targetsValue == null && namesValue == null) {\n+                ClassInfo target = i.target().asClass();\n                 reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, target.name().toString()));\n-            } else {\n+                return;\n+            }\n+\n+            Set<String> classNames = new HashSet<>();\n+            if (targetsValue != null) {\n                 Type[] targets = targetsValue.asClassArray();\n                 for (Type type : targets) {\n-                    reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, type.name().toString()));\n+                    classNames.add(String.valueOf(type.name()));\n+                }\n+            }\n+\n+            if (namesValue != null) {\n+                String[] names = namesValue.asStringArray();\n+                for (String name : names) {\n+                    if (isClass(name)) {\n+                        classNames.add(name);\n+                    }\n                 }\n             }\n+\n+            for (String className : classNames) {\n+                reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, className));\n+            }\n+        }\n+    }\n+\n+    private boolean isClass(String className) {\n+        try {\n+            Class.forName(className, false, getClass().getClassLoader());\n+            return true;\n+        } catch (ClassNotFoundException e) {\n+            return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1NzM3NA=="}, "originalCommit": {"oid": "f9d0cf5e68cd415ad9b9b73c787bab961aa6b9f7"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDI3MDY0OnYy", "diffSide": "RIGHT", "path": "core/runtime/src/main/java/io/quarkus/runtime/annotations/RegisterForReflection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNzo1OToxN1rOGS5UXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNzo1OToxN1rOGS5UXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2NjY1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * This allows for classes to be registered via class names. This was introduced to add the facility to\n          \n          \n            \n                 * This allows for classes to be registered for reflection via class names. This is useful when it's necessary to", "url": "https://github.com/quarkusio/quarkus/pull/9182#discussion_r422466653", "createdAt": "2020-05-09T07:59:17Z", "author": {"login": "geoand"}, "path": "core/runtime/src/main/java/io/quarkus/runtime/annotations/RegisterForReflection.java", "diffHunk": "@@ -30,4 +30,10 @@\n      * generally just be placed on an empty class that is not otherwise used.\n      */\n     Class<?>[] targets() default {};\n+\n+    /**\n+     * This allows for classes to be registered via class names. This was introduced to add the facility to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b14798cc3dd0ea4d9f539f88bfab72e75d107caa"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTUzODIwOnYy", "diffSide": "RIGHT", "path": "integration-tests/main/src/main/java/io/quarkus/it/runtime/ReflectionResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMDowMTo0MVrOGTCu_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMDowMTo0MVrOGTCu_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyMDkyNA==", "bodyText": "Please remove these comments", "url": "https://github.com/quarkusio/quarkus/pull/9182#discussion_r422620924", "createdAt": "2020-05-10T10:01:41Z", "author": {"login": "geoand"}, "path": "integration-tests/main/src/main/java/io/quarkus/it/runtime/ReflectionResource.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package io.quarkus.it.runtime;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.QueryParam;\n+\n+/**\n+ * User : lovekeshgarg", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5399d8b5acca43ee3a4ece5509479ad59ea1bef4"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTY5NDM4OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/RegisterForReflectionBuildStep.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMjo0NDoyN1rOGTD8SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMjo0NDoyN1rOGTD8SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY0MDcxMw==", "bodyText": "Actually, this should probably be a warning, not an error", "url": "https://github.com/quarkusio/quarkus/pull/9182#discussion_r422640713", "createdAt": "2020-05-10T12:44:27Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/RegisterForReflectionBuildStep.java", "diffHunk": "@@ -27,22 +26,62 @@\n     CombinedIndexBuildItem combinedIndexBuildItem;\n \n     @BuildStep\n-    public void build() throws Exception {\n+    public void build() {\n         for (AnnotationInstance i : combinedIndexBuildItem.getIndex()\n                 .getAnnotations(DotName.createSimple(RegisterForReflection.class.getName()))) {\n-            ClassInfo target = i.target().asClass();\n-            boolean methods = i.value(\"methods\") == null || i.value(\"methods\").asBoolean();\n-            boolean fields = i.value(\"fields\") == null || i.value(\"fields\").asBoolean();\n+\n+            boolean methods = getBooleanValue(i, \"methods\");\n+            boolean fields = getBooleanValue(i, \"fields\");\n+            boolean ignoreNested = getBooleanValue(i, \"ignoreNested\");\n+\n             AnnotationValue targetsValue = i.value(\"targets\");\n-            if (targetsValue == null) {\n-                reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, target.name().toString()));\n-            } else {\n+            AnnotationValue classNamesValue = i.value(\"classNames\");\n+\n+            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+            if (targetsValue == null && classNamesValue == null) {\n+                ClassInfo classInfo = i.target().asClass();\n+                registerClass(classLoader, classInfo.name().toString(), methods, fields, ignoreNested);\n+                continue;\n+            }\n+\n+            if (targetsValue != null) {\n                 Type[] targets = targetsValue.asClassArray();\n                 for (Type type : targets) {\n-                    reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, type.name().toString()));\n+                    registerClass(classLoader, type.name().toString(), methods, fields, ignoreNested);\n+                }\n+            }\n+\n+            if (classNamesValue != null) {\n+                String[] classNames = classNamesValue.asStringArray();\n+                for (String className : classNames) {\n+                    registerClass(classLoader, className, methods, fields, ignoreNested);\n                 }\n             }\n         }\n     }\n \n+    /**\n+     * BFS Recursive Method to register a class and it's inner classes for Reflection.\n+     */\n+    private void registerClass(ClassLoader classLoader, String className, boolean methods, boolean fields,\n+            boolean ignoreNested) {\n+        reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, className));\n+\n+        if (ignoreNested) {\n+            return;\n+        }\n+\n+        try {\n+            Class<?>[] declaredClasses = classLoader.loadClass(className).getDeclaredClasses();\n+            for (Class<?> clazz : declaredClasses) {\n+                registerClass(classLoader, clazz.getName(), methods, fields, false);\n+            }\n+        } catch (ClassNotFoundException e) {\n+            log.errorf(e, \"Failed to load Class %s\", className);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af10c503f589533938860b5625ee3c7b1a93085d"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3159, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}