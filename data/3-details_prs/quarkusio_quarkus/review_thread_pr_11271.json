{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0Mjk4NDg0", "number": 11271, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODoyMTo1MVrOEWsrzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODoyMTo1MVrOEWsrzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjM2MjM3OnYy", "diffSide": "RIGHT", "path": "extensions/cache/runtime/src/main/java/io/quarkus/cache/runtime/CacheResultInterceptor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODoyMTo1MVrOG-FXbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxOToyMDozOVrOG-cCtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc1MjgxNA==", "bodyText": "General comment on this class: we try to avoid lambdas in runtime code.", "url": "https://github.com/quarkusio/quarkus/pull/11271#discussion_r467752814", "createdAt": "2020-08-10T08:21:51Z", "author": {"login": "gsmet"}, "path": "extensions/cache/runtime/src/main/java/io/quarkus/cache/runtime/CacheResultInterceptor.java", "diffHunk": "@@ -19,11 +24,63 @@\n     @AroundInvoke\n     public Object intercept(InvocationContext context) throws Exception {\n         CacheResultInterceptorBinding binding = getInterceptorBinding(context, CacheResultInterceptorBinding.class);\n+\n         CaffeineCache cache = cacheRepository.getCache(binding.cacheName());\n         Object key = getCacheKey(cache, binding.cacheKeyParameterPositions(), context.getParameters());\n         if (LOGGER.isDebugEnabled()) {\n             LOGGER.debugf(\"Loading entry with key [%s] from cache [%s]\", key, cache.getName());\n         }\n-        return cache.get(key, () -> context.proceed(), binding.lockTimeout());\n+\n+        if (binding.lockTimeout() <= 0) {\n+            CompletableFuture<Object> cacheValue = cache.get(key, (k, executor) -> {\n+                return getValueLoader(context, executor);\n+            });\n+            return cacheValue.get();\n+        } else {\n+\n+            // The lock timeout logic starts here.\n+\n+            /*\n+             * If the current key is not already associated with a value in the Caffeine cache, there's no way to know if the\n+             * current thread or another one started the missing value computation. The following variable will be used to\n+             * determine whether or not a timeout should be triggered during the computation depending on which thread started\n+             * it.\n+             */\n+            boolean[] isCurrentThreadComputation = { false };\n+\n+            CompletableFuture<Object> cacheValue = cache.get(key, (k, executor) -> {\n+                isCurrentThreadComputation[0] = true;\n+                return getValueLoader(context, executor);\n+            });\n+\n+            if (isCurrentThreadComputation[0]) {\n+                // The value is missing and its computation was started from the current thread.\n+                // We'll wait for the result no matter how long it takes.\n+                return cacheValue.get();\n+            } else {\n+                // The value is either already present in the cache or missing and its computation was started from another thread.\n+                // We want to retrieve it from the cache within the lock timeout delay.\n+                try {\n+                    return cacheValue.get(binding.lockTimeout(), TimeUnit.MILLISECONDS);\n+                } catch (TimeoutException e) {\n+                    // Timeout triggered! We don't want to wait any longer for the value computation and we'll simply invoke the\n+                    // cached method and return its result without caching it.\n+                    // TODO: Add statistics here to monitor the timeout.\n+                    return context.proceed();\n+                }\n+            }\n+        }\n+    }\n+\n+    private CompletableFuture<Object> getValueLoader(InvocationContext context, Executor executor) {\n+        return CompletableFuture.supplyAsync(() -> {\n+            try {\n+                return context.proceed();\n+            } catch (RuntimeException e) {\n+                throw e;\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        }, executor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00686bdc2542d003368d32cf657dc50440730edc"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc3OTU4Mw==", "bodyText": "Thanks for reviewing this!\nI already knew about lambdas being the enemy in runtime code but there are only functional interfaces instances in this class (BiFunction for lines 35 and 51 and Supplier for line 76) which were already present before the PR (with a few differences). Are those nasty lambdas which should be eliminated as well?", "url": "https://github.com/quarkusio/quarkus/pull/11271#discussion_r467779583", "createdAt": "2020-08-10T09:15:39Z", "author": {"login": "gwenneg"}, "path": "extensions/cache/runtime/src/main/java/io/quarkus/cache/runtime/CacheResultInterceptor.java", "diffHunk": "@@ -19,11 +24,63 @@\n     @AroundInvoke\n     public Object intercept(InvocationContext context) throws Exception {\n         CacheResultInterceptorBinding binding = getInterceptorBinding(context, CacheResultInterceptorBinding.class);\n+\n         CaffeineCache cache = cacheRepository.getCache(binding.cacheName());\n         Object key = getCacheKey(cache, binding.cacheKeyParameterPositions(), context.getParameters());\n         if (LOGGER.isDebugEnabled()) {\n             LOGGER.debugf(\"Loading entry with key [%s] from cache [%s]\", key, cache.getName());\n         }\n-        return cache.get(key, () -> context.proceed(), binding.lockTimeout());\n+\n+        if (binding.lockTimeout() <= 0) {\n+            CompletableFuture<Object> cacheValue = cache.get(key, (k, executor) -> {\n+                return getValueLoader(context, executor);\n+            });\n+            return cacheValue.get();\n+        } else {\n+\n+            // The lock timeout logic starts here.\n+\n+            /*\n+             * If the current key is not already associated with a value in the Caffeine cache, there's no way to know if the\n+             * current thread or another one started the missing value computation. The following variable will be used to\n+             * determine whether or not a timeout should be triggered during the computation depending on which thread started\n+             * it.\n+             */\n+            boolean[] isCurrentThreadComputation = { false };\n+\n+            CompletableFuture<Object> cacheValue = cache.get(key, (k, executor) -> {\n+                isCurrentThreadComputation[0] = true;\n+                return getValueLoader(context, executor);\n+            });\n+\n+            if (isCurrentThreadComputation[0]) {\n+                // The value is missing and its computation was started from the current thread.\n+                // We'll wait for the result no matter how long it takes.\n+                return cacheValue.get();\n+            } else {\n+                // The value is either already present in the cache or missing and its computation was started from another thread.\n+                // We want to retrieve it from the cache within the lock timeout delay.\n+                try {\n+                    return cacheValue.get(binding.lockTimeout(), TimeUnit.MILLISECONDS);\n+                } catch (TimeoutException e) {\n+                    // Timeout triggered! We don't want to wait any longer for the value computation and we'll simply invoke the\n+                    // cached method and return its result without caching it.\n+                    // TODO: Add statistics here to monitor the timeout.\n+                    return context.proceed();\n+                }\n+            }\n+        }\n+    }\n+\n+    private CompletableFuture<Object> getValueLoader(InvocationContext context, Executor executor) {\n+        return CompletableFuture.supplyAsync(() -> {\n+            try {\n+                return context.proceed();\n+            } catch (RuntimeException e) {\n+                throw e;\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        }, executor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc1MjgxNA=="}, "originalCommit": {"oid": "00686bdc2542d003368d32cf657dc50440730edc"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg4MjM0MQ==", "bodyText": "You can do it in a subsequent PR if you prefer but I would get rid of all the lambdas in this class.", "url": "https://github.com/quarkusio/quarkus/pull/11271#discussion_r467882341", "createdAt": "2020-08-10T12:54:25Z", "author": {"login": "gsmet"}, "path": "extensions/cache/runtime/src/main/java/io/quarkus/cache/runtime/CacheResultInterceptor.java", "diffHunk": "@@ -19,11 +24,63 @@\n     @AroundInvoke\n     public Object intercept(InvocationContext context) throws Exception {\n         CacheResultInterceptorBinding binding = getInterceptorBinding(context, CacheResultInterceptorBinding.class);\n+\n         CaffeineCache cache = cacheRepository.getCache(binding.cacheName());\n         Object key = getCacheKey(cache, binding.cacheKeyParameterPositions(), context.getParameters());\n         if (LOGGER.isDebugEnabled()) {\n             LOGGER.debugf(\"Loading entry with key [%s] from cache [%s]\", key, cache.getName());\n         }\n-        return cache.get(key, () -> context.proceed(), binding.lockTimeout());\n+\n+        if (binding.lockTimeout() <= 0) {\n+            CompletableFuture<Object> cacheValue = cache.get(key, (k, executor) -> {\n+                return getValueLoader(context, executor);\n+            });\n+            return cacheValue.get();\n+        } else {\n+\n+            // The lock timeout logic starts here.\n+\n+            /*\n+             * If the current key is not already associated with a value in the Caffeine cache, there's no way to know if the\n+             * current thread or another one started the missing value computation. The following variable will be used to\n+             * determine whether or not a timeout should be triggered during the computation depending on which thread started\n+             * it.\n+             */\n+            boolean[] isCurrentThreadComputation = { false };\n+\n+            CompletableFuture<Object> cacheValue = cache.get(key, (k, executor) -> {\n+                isCurrentThreadComputation[0] = true;\n+                return getValueLoader(context, executor);\n+            });\n+\n+            if (isCurrentThreadComputation[0]) {\n+                // The value is missing and its computation was started from the current thread.\n+                // We'll wait for the result no matter how long it takes.\n+                return cacheValue.get();\n+            } else {\n+                // The value is either already present in the cache or missing and its computation was started from another thread.\n+                // We want to retrieve it from the cache within the lock timeout delay.\n+                try {\n+                    return cacheValue.get(binding.lockTimeout(), TimeUnit.MILLISECONDS);\n+                } catch (TimeoutException e) {\n+                    // Timeout triggered! We don't want to wait any longer for the value computation and we'll simply invoke the\n+                    // cached method and return its result without caching it.\n+                    // TODO: Add statistics here to monitor the timeout.\n+                    return context.proceed();\n+                }\n+            }\n+        }\n+    }\n+\n+    private CompletableFuture<Object> getValueLoader(InvocationContext context, Executor executor) {\n+        return CompletableFuture.supplyAsync(() -> {\n+            try {\n+                return context.proceed();\n+            } catch (RuntimeException e) {\n+                throw e;\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        }, executor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc1MjgxNA=="}, "originalCommit": {"oid": "00686bdc2542d003368d32cf657dc50440730edc"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEyNDM0MQ==", "bodyText": "I removed all lambdas from the extension runtime code, it should be good now.", "url": "https://github.com/quarkusio/quarkus/pull/11271#discussion_r468124341", "createdAt": "2020-08-10T19:20:39Z", "author": {"login": "gwenneg"}, "path": "extensions/cache/runtime/src/main/java/io/quarkus/cache/runtime/CacheResultInterceptor.java", "diffHunk": "@@ -19,11 +24,63 @@\n     @AroundInvoke\n     public Object intercept(InvocationContext context) throws Exception {\n         CacheResultInterceptorBinding binding = getInterceptorBinding(context, CacheResultInterceptorBinding.class);\n+\n         CaffeineCache cache = cacheRepository.getCache(binding.cacheName());\n         Object key = getCacheKey(cache, binding.cacheKeyParameterPositions(), context.getParameters());\n         if (LOGGER.isDebugEnabled()) {\n             LOGGER.debugf(\"Loading entry with key [%s] from cache [%s]\", key, cache.getName());\n         }\n-        return cache.get(key, () -> context.proceed(), binding.lockTimeout());\n+\n+        if (binding.lockTimeout() <= 0) {\n+            CompletableFuture<Object> cacheValue = cache.get(key, (k, executor) -> {\n+                return getValueLoader(context, executor);\n+            });\n+            return cacheValue.get();\n+        } else {\n+\n+            // The lock timeout logic starts here.\n+\n+            /*\n+             * If the current key is not already associated with a value in the Caffeine cache, there's no way to know if the\n+             * current thread or another one started the missing value computation. The following variable will be used to\n+             * determine whether or not a timeout should be triggered during the computation depending on which thread started\n+             * it.\n+             */\n+            boolean[] isCurrentThreadComputation = { false };\n+\n+            CompletableFuture<Object> cacheValue = cache.get(key, (k, executor) -> {\n+                isCurrentThreadComputation[0] = true;\n+                return getValueLoader(context, executor);\n+            });\n+\n+            if (isCurrentThreadComputation[0]) {\n+                // The value is missing and its computation was started from the current thread.\n+                // We'll wait for the result no matter how long it takes.\n+                return cacheValue.get();\n+            } else {\n+                // The value is either already present in the cache or missing and its computation was started from another thread.\n+                // We want to retrieve it from the cache within the lock timeout delay.\n+                try {\n+                    return cacheValue.get(binding.lockTimeout(), TimeUnit.MILLISECONDS);\n+                } catch (TimeoutException e) {\n+                    // Timeout triggered! We don't want to wait any longer for the value computation and we'll simply invoke the\n+                    // cached method and return its result without caching it.\n+                    // TODO: Add statistics here to monitor the timeout.\n+                    return context.proceed();\n+                }\n+            }\n+        }\n+    }\n+\n+    private CompletableFuture<Object> getValueLoader(InvocationContext context, Executor executor) {\n+        return CompletableFuture.supplyAsync(() -> {\n+            try {\n+                return context.proceed();\n+            } catch (RuntimeException e) {\n+                throw e;\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        }, executor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc1MjgxNA=="}, "originalCommit": {"oid": "00686bdc2542d003368d32cf657dc50440730edc"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 708, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}