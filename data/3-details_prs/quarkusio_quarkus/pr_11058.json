{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4Mzc2Mzkz", "number": 11058, "title": "Fix MongoClient handling in Mongo Panache", "bodyText": "Fixes: #10812\nSupersedes #10970  (this PR adds a commit that pulls the tests from that PR in a separate commit)", "createdAt": "2020-07-29T11:26:53Z", "url": "https://github.com/quarkusio/quarkus/pull/11058", "merged": true, "mergeCommit": {"oid": "61cddb4a27c3b9c85116715aac1db85a7ceb14c0"}, "closed": true, "closedAt": "2020-07-29T16:15:26Z", "author": {"login": "geoand"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5puJugBqjM1OTg2OTAyMDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5rJ9tAFqTQ1NzUyNzYxNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c71244daf5590e2aaa99563ded83872f02a58368", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/c71244daf5590e2aaa99563ded83872f02a58368", "committedDate": "2020-07-29T11:20:21Z", "message": "Add tests for bug #10812"}, "afterCommit": {"oid": "4baaf0de586e5c62227bf67d23159657133c322c", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/4baaf0de586e5c62227bf67d23159657133c322c", "committedDate": "2020-07-29T11:56:02Z", "message": "Add tests for bug #10812"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NDcyOTk0", "url": "https://github.com/quarkusio/quarkus/pull/11058#pullrequestreview-457472994", "createdAt": "2020-07-29T12:31:16Z", "commit": {"oid": "4baaf0de586e5c62227bf67d23159657133c322c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjozMToxN1rOG42NWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjo0MzowN1rOG42nNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI2MTU5Mg==", "bodyText": "Shouldn't it be a CombinedIndexBuildItem to allow defining entities inside a third party library ?", "url": "https://github.com/quarkusio/quarkus/pull/11058#discussion_r462261592", "createdAt": "2020-07-29T12:31:17Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheMongoResourceProcessor.java", "diffHunk": "@@ -129,12 +133,28 @@ ReflectiveHierarchyBuildItem registerForReflection(CombinedIndexBuildItem index)\n     }\n \n     @BuildStep\n-    void unremoveableClients(BuildProducer<UnremovableBeanBuildItem> unremovable) {\n-        unremovable.produce(\n-                new UnremovableBeanBuildItem(\n-                        new UnremovableBeanBuildItem.BeanClassNamesExclusion(new HashSet<>(\n-                                Arrays.asList(MongoClient.class.getName(), ReactiveMongoClient.class.getName())))));\n+    void unremoveableClients(BuildProducer<MongoUnremovableClientsBuildItem> unremovable) {\n+        unremovable.produce(new MongoUnremovableClientsBuildItem());\n+    }\n \n+    @BuildStep\n+    public void mongoClientNames(ApplicationArchivesBuildItem applicationArchivesBuildItem,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4baaf0de586e5c62227bf67d23159657133c322c"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI2MzYyMw==", "bodyText": "This should use the s parameter (better rename it key by the way) to avoid a synthetic accessor", "url": "https://github.com/quarkusio/quarkus/pull/11058#discussion_r462263623", "createdAt": "2020-07-29T12:34:52Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/reactive/runtime/ReactiveMongoOperations.java", "diffHunk": "@@ -299,36 +301,34 @@ private static ReactiveMongoCollection mongoCollection(Object entity) {\n     }\n \n     private static ReactiveMongoDatabase mongoDatabase(MongoEntity entity) {\n-        ReactiveMongoClient mongoClient = mongoClient(entity);\n+        ReactiveMongoClient mongoClient = clientFromArc(entity, ReactiveMongoClient.class);\n         if (entity != null && !entity.database().isEmpty()) {\n             return mongoClient.getDatabase(entity.database());\n         }\n-        String databaseName = getDefaultDatabaseName();\n+        String databaseName = getDefaultDatabaseName(entity);\n         return mongoClient.getDatabase(databaseName);\n     }\n \n-    private static String getDefaultDatabaseName() {\n-        if (defaultDatabaseName == null) {\n-            synchronized (MongoOperations.class) {\n-                if (defaultDatabaseName == null) {\n-                    defaultDatabaseName = ConfigProvider.getConfig()\n-                            .getValue(MONGODB_DATABASE, String.class);\n+    private static String getDefaultDatabaseName(MongoEntity entity) {\n+        final String beanName = beanName(entity);\n+        return defaultDatabaseName.computeIfAbsent(beanName, new Function<String, String>() {\n+            @Override\n+            public String apply(String s) {\n+                MongoClients mongoClients = Arc.container().instance(MongoClients.class).get();\n+                MongoClientConfig matchingMongoClientConfig = mongoClients.getMatchingMongoClientConfig(beanName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4baaf0de586e5c62227bf67d23159657133c322c"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI2ODIxNQ==", "bodyText": "I think we need to better explain what went wrong as the rules are a little complex. And don't forget that entity here can be null so at least you need to provides different error message in case an entity configuration exist (so you can add the name of the entity inside the error message) and none are set.\nNormally, if we are here, this means that no database is configured via the entity annotation so one must be set inside the application.properties, we shoud compute the needed property and log it.", "url": "https://github.com/quarkusio/quarkus/pull/11058#discussion_r462268215", "createdAt": "2020-07-29T12:43:07Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/reactive/runtime/ReactiveMongoOperations.java", "diffHunk": "@@ -299,36 +301,34 @@ private static ReactiveMongoCollection mongoCollection(Object entity) {\n     }\n \n     private static ReactiveMongoDatabase mongoDatabase(MongoEntity entity) {\n-        ReactiveMongoClient mongoClient = mongoClient(entity);\n+        ReactiveMongoClient mongoClient = clientFromArc(entity, ReactiveMongoClient.class);\n         if (entity != null && !entity.database().isEmpty()) {\n             return mongoClient.getDatabase(entity.database());\n         }\n-        String databaseName = getDefaultDatabaseName();\n+        String databaseName = getDefaultDatabaseName(entity);\n         return mongoClient.getDatabase(databaseName);\n     }\n \n-    private static String getDefaultDatabaseName() {\n-        if (defaultDatabaseName == null) {\n-            synchronized (MongoOperations.class) {\n-                if (defaultDatabaseName == null) {\n-                    defaultDatabaseName = ConfigProvider.getConfig()\n-                            .getValue(MONGODB_DATABASE, String.class);\n+    private static String getDefaultDatabaseName(MongoEntity entity) {\n+        final String beanName = beanName(entity);\n+        return defaultDatabaseName.computeIfAbsent(beanName, new Function<String, String>() {\n+            @Override\n+            public String apply(String s) {\n+                MongoClients mongoClients = Arc.container().instance(MongoClients.class).get();\n+                MongoClientConfig matchingMongoClientConfig = mongoClients.getMatchingMongoClientConfig(beanName);\n+                if (matchingMongoClientConfig.database.isPresent()) {\n+                    return matchingMongoClientConfig.database.get();\n                 }\n-            }\n-        }\n-        return defaultDatabaseName;\n-    }\n \n-    private static ReactiveMongoClient mongoClient(MongoEntity entity) {\n-        if (entity != null && !entity.clientName().isEmpty()) {\n-            Set<Bean<?>> beans = Arc.container().beanManager().getBeans(ReactiveMongoClient.class);\n-            for (Bean<?> bean : beans) {\n-                if (bean.getName() != null) {\n-                    return (ReactiveMongoClient) Arc.container().instance(entity.clientName()).get();\n+                MongoClientConfig defaultMongoClientConfig = mongoClients\n+                        .getMatchingMongoClientConfig(MongoClientBeanUtil.DEFAULT_MONGOCLIENT_NAME);\n+                if (defaultMongoClientConfig.database.isPresent()) {\n+                    return defaultMongoClientConfig.database.get();\n                 }\n+\n+                throw new IllegalArgumentException(\"The database property was not configured for \" + entity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4baaf0de586e5c62227bf67d23159657133c322c"}, "originalPosition": 101}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4baaf0de586e5c62227bf67d23159657133c322c", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/4baaf0de586e5c62227bf67d23159657133c322c", "committedDate": "2020-07-29T11:56:02Z", "message": "Add tests for bug #10812"}, "afterCommit": {"oid": "bc4b23e39e2a748ee8785ef1dceff5b63fc43c91", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/bc4b23e39e2a748ee8785ef1dceff5b63fc43c91", "committedDate": "2020-07-29T13:19:30Z", "message": "Add tests for bug #10812"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NTE5NjQ2", "url": "https://github.com/quarkusio/quarkus/pull/11058#pullrequestreview-457519646", "createdAt": "2020-07-29T13:27:51Z", "commit": {"oid": "bc4b23e39e2a748ee8785ef1dceff5b63fc43c91"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzoyNzo1MVrOG44ZCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzoyNzo1MVrOG44ZCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI5NzM1NA==", "bodyText": "Here MongoEntity is an annotation instance so I'll rename to something like this\nThe database attribute was not set for the @MongoEntity annotation and neither ...", "url": "https://github.com/quarkusio/quarkus/pull/11058#discussion_r462297354", "createdAt": "2020-07-29T13:27:51Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/runtime/BeanUtils.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package io.quarkus.mongodb.panache.runtime;\n+\n+import java.lang.annotation.Annotation;\n+\n+import javax.enterprise.inject.Default;\n+import javax.enterprise.inject.literal.NamedLiteral;\n+import javax.enterprise.util.AnnotationLiteral;\n+import javax.inject.Named;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.arc.InjectableBean;\n+import io.quarkus.arc.InstanceHandle;\n+import io.quarkus.mongodb.panache.MongoEntity;\n+import io.quarkus.mongodb.runtime.MongoClientBeanUtil;\n+import io.quarkus.mongodb.runtime.MongoClientConfig;\n+import io.quarkus.mongodb.runtime.MongoClients;\n+\n+public final class BeanUtils {\n+\n+    private BeanUtils() {\n+    }\n+\n+    public static String beanName(MongoEntity entity) {\n+        if (entity != null && !entity.clientName().isEmpty()) {\n+            return entity.clientName();\n+        }\n+\n+        return MongoClientBeanUtil.DEFAULT_MONGOCLIENT_NAME;\n+    }\n+\n+    public static <T> T clientFromArc(MongoEntity entity, Class<T> clientClass) {\n+        T mongoClient = Arc.container().instance(clientClass, clientLiteral(beanName(entity))).get();\n+        if (mongoClient != null) {\n+            return mongoClient;\n+        }\n+\n+        if ((entity == null) || entity.clientName().isEmpty()) {\n+            // this case happens when there are multiple instances because they are all annotated with @Named\n+            for (InstanceHandle<T> handle : Arc.container().select(clientClass).handles()) {\n+                InjectableBean<T> bean = handle.getBean();\n+                boolean hasNamed = false;\n+                for (Annotation qualifier : bean.getQualifiers()) {\n+                    if (qualifier.annotationType().equals(Named.class)) {\n+                        hasNamed = true;\n+                    }\n+                }\n+                if (!hasNamed) {\n+                    return handle.get();\n+                }\n+            }\n+            throw new IllegalStateException(String.format(\"Unable to find default %s bean\", clientClass.getSimpleName()));\n+        } else {\n+            throw new IllegalStateException(\n+                    String.format(\"Unable to find %s bean for entity %s\", clientClass.getSimpleName(), entity.toString()));\n+        }\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static AnnotationLiteral clientLiteral(String name) {\n+        if (name.startsWith(MongoClientBeanUtil.DEFAULT_MONGOCLIENT_NAME)) {\n+            return Default.Literal.INSTANCE;\n+        }\n+        return NamedLiteral.of(name);\n+    }\n+\n+    public static String getDatabaseName(MongoEntity entity, String clientBeanName) {\n+        MongoClients mongoClients = Arc.container().instance(MongoClients.class).get();\n+        MongoClientConfig matchingMongoClientConfig = mongoClients.getMatchingMongoClientConfig(clientBeanName);\n+        if (matchingMongoClientConfig.database.isPresent()) {\n+            return matchingMongoClientConfig.database.get();\n+        }\n+\n+        if (!clientBeanName.equals(MongoClientBeanUtil.DEFAULT_MONGOCLIENT_NAME)) {\n+            MongoClientConfig defaultMongoClientConfig = mongoClients\n+                    .getMatchingMongoClientConfig(MongoClientBeanUtil.DEFAULT_MONGOCLIENT_NAME);\n+            if (defaultMongoClientConfig.database.isPresent()) {\n+                return defaultMongoClientConfig.database.get();\n+            }\n+        }\n+\n+        if (entity == null) {\n+            throw new IllegalArgumentException(\n+                    \"The database property was not configured for the default Mongo Client (via 'quarkus.mongodb.database'\");\n+        }\n+        if (entity.clientName().isEmpty()) {\n+            throw new IllegalArgumentException(\"The database method was not set for : \" + entity", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4b23e39e2a748ee8785ef1dceff5b63fc43c91"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NTE5OTkw", "url": "https://github.com/quarkusio/quarkus/pull/11058#pullrequestreview-457519990", "createdAt": "2020-07-29T13:28:13Z", "commit": {"oid": "bc4b23e39e2a748ee8785ef1dceff5b63fc43c91"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzoyODoxNFrOG44aDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzoyODoxNFrOG44aDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI5NzYxNA==", "bodyText": "Same here I would rephrase to something like\nThe database attribute was not set for the @MongoEntity annotation and neither ...", "url": "https://github.com/quarkusio/quarkus/pull/11058#discussion_r462297614", "createdAt": "2020-07-29T13:28:14Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/runtime/BeanUtils.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package io.quarkus.mongodb.panache.runtime;\n+\n+import java.lang.annotation.Annotation;\n+\n+import javax.enterprise.inject.Default;\n+import javax.enterprise.inject.literal.NamedLiteral;\n+import javax.enterprise.util.AnnotationLiteral;\n+import javax.inject.Named;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.arc.InjectableBean;\n+import io.quarkus.arc.InstanceHandle;\n+import io.quarkus.mongodb.panache.MongoEntity;\n+import io.quarkus.mongodb.runtime.MongoClientBeanUtil;\n+import io.quarkus.mongodb.runtime.MongoClientConfig;\n+import io.quarkus.mongodb.runtime.MongoClients;\n+\n+public final class BeanUtils {\n+\n+    private BeanUtils() {\n+    }\n+\n+    public static String beanName(MongoEntity entity) {\n+        if (entity != null && !entity.clientName().isEmpty()) {\n+            return entity.clientName();\n+        }\n+\n+        return MongoClientBeanUtil.DEFAULT_MONGOCLIENT_NAME;\n+    }\n+\n+    public static <T> T clientFromArc(MongoEntity entity, Class<T> clientClass) {\n+        T mongoClient = Arc.container().instance(clientClass, clientLiteral(beanName(entity))).get();\n+        if (mongoClient != null) {\n+            return mongoClient;\n+        }\n+\n+        if ((entity == null) || entity.clientName().isEmpty()) {\n+            // this case happens when there are multiple instances because they are all annotated with @Named\n+            for (InstanceHandle<T> handle : Arc.container().select(clientClass).handles()) {\n+                InjectableBean<T> bean = handle.getBean();\n+                boolean hasNamed = false;\n+                for (Annotation qualifier : bean.getQualifiers()) {\n+                    if (qualifier.annotationType().equals(Named.class)) {\n+                        hasNamed = true;\n+                    }\n+                }\n+                if (!hasNamed) {\n+                    return handle.get();\n+                }\n+            }\n+            throw new IllegalStateException(String.format(\"Unable to find default %s bean\", clientClass.getSimpleName()));\n+        } else {\n+            throw new IllegalStateException(\n+                    String.format(\"Unable to find %s bean for entity %s\", clientClass.getSimpleName(), entity.toString()));\n+        }\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private static AnnotationLiteral clientLiteral(String name) {\n+        if (name.startsWith(MongoClientBeanUtil.DEFAULT_MONGOCLIENT_NAME)) {\n+            return Default.Literal.INSTANCE;\n+        }\n+        return NamedLiteral.of(name);\n+    }\n+\n+    public static String getDatabaseName(MongoEntity entity, String clientBeanName) {\n+        MongoClients mongoClients = Arc.container().instance(MongoClients.class).get();\n+        MongoClientConfig matchingMongoClientConfig = mongoClients.getMatchingMongoClientConfig(clientBeanName);\n+        if (matchingMongoClientConfig.database.isPresent()) {\n+            return matchingMongoClientConfig.database.get();\n+        }\n+\n+        if (!clientBeanName.equals(MongoClientBeanUtil.DEFAULT_MONGOCLIENT_NAME)) {\n+            MongoClientConfig defaultMongoClientConfig = mongoClients\n+                    .getMatchingMongoClientConfig(MongoClientBeanUtil.DEFAULT_MONGOCLIENT_NAME);\n+            if (defaultMongoClientConfig.database.isPresent()) {\n+                return defaultMongoClientConfig.database.get();\n+            }\n+        }\n+\n+        if (entity == null) {\n+            throw new IllegalArgumentException(\n+                    \"The database property was not configured for the default Mongo Client (via 'quarkus.mongodb.database'\");\n+        }\n+        if (entity.clientName().isEmpty()) {\n+            throw new IllegalArgumentException(\"The database method was not set for : \" + entity\n+                    + \" and neither was the database property configured for the default Mongo Client (via 'quarkus.mongodb.database')\");\n+        }\n+        throw new IllegalArgumentException(String.format(\n+                \"The database method was not set for : %s and neither was the database property configured for the named Mongo Client (via 'quarkus.mongodb.%s.database')\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4b23e39e2a748ee8785ef1dceff5b63fc43c91"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0974d72f5d7d4fc053c51821566b1e1523a40d06", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/0974d72f5d7d4fc053c51821566b1e1523a40d06", "committedDate": "2020-07-29T13:33:03Z", "message": "Fix default database handling in Mongo Panache\n\nFixes: #10812"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d128cbbbb94443283e080a1b4f5b352836e9e44", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/1d128cbbbb94443283e080a1b4f5b352836e9e44", "committedDate": "2020-07-29T13:33:03Z", "message": "Add tests for bug #10812"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bc4b23e39e2a748ee8785ef1dceff5b63fc43c91", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/bc4b23e39e2a748ee8785ef1dceff5b63fc43c91", "committedDate": "2020-07-29T13:19:30Z", "message": "Add tests for bug #10812"}, "afterCommit": {"oid": "1d128cbbbb94443283e080a1b4f5b352836e9e44", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/1d128cbbbb94443283e080a1b4f5b352836e9e44", "committedDate": "2020-07-29T13:33:03Z", "message": "Add tests for bug #10812"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NTI3NjE2", "url": "https://github.com/quarkusio/quarkus/pull/11058#pullrequestreview-457527616", "createdAt": "2020-07-29T13:36:34Z", "commit": {"oid": "1d128cbbbb94443283e080a1b4f5b352836e9e44"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1011, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}