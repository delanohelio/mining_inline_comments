{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NTAwODkw", "number": 10137, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwNjo0MToyN1rOEHVtOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMDo0NjoyMVrOEHWk7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTMxMTI4OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeImageBuildStep.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwNjo0MToyN1rOGmqByQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwNzoxMzoyNVrOGmqKUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE4NzY1Nw==", "bodyText": "Given that this code is now repeated everywhere the process is launched, how about adding a method to ProcessInheritIODsiabled that takes ProcessBuilder or arguments necessary to initialize and start it?", "url": "https://github.com/quarkusio/quarkus/pull/10137#discussion_r443187657", "createdAt": "2020-06-21T06:41:27Z", "author": {"login": "aloubyansky"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeImageBuildStep.java", "diffHunk": "@@ -126,9 +129,15 @@ public NativeImageBuildItem build(NativeConfig nativeConfig, NativeImageSourceJa\n                 log.info(\"Pulling image \" + nativeConfig.builderImage);\n                 Process pullProcess = null;\n                 try {\n-                    pullProcess = new ProcessBuilder(Arrays.asList(containerRuntime, \"pull\", nativeConfig.builderImage))\n-                            .inheritIO()\n-                            .start();\n+                    final ProcessBuilder pb = new ProcessBuilder(\n+                            Arrays.asList(containerRuntime, \"pull\", nativeConfig.builderImage));\n+                    if (processInheritIODisabled.isPresent()) {\n+                        // explicitly stream the stdout/stderr of the new process to this process' System.out/System.err\n+                        pullProcess = pb.start();\n+                        ProcessUtil.streamToSysOutSysErr(pb.start());\n+                    } else {\n+                        pullProcess = pb.inheritIO().start();\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67bd7d61de298c5b88395c598c4cbe2cb757e5b5"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE4NzgwOQ==", "bodyText": "You are right - this is repeated at more than one place, although there's one place where it deals with it differently. Makes sense to have this in a common method and use it wherever appropriate. I'll update the PR shortly.", "url": "https://github.com/quarkusio/quarkus/pull/10137#discussion_r443187809", "createdAt": "2020-06-21T06:43:49Z", "author": {"login": "jaikiran"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeImageBuildStep.java", "diffHunk": "@@ -126,9 +129,15 @@ public NativeImageBuildItem build(NativeConfig nativeConfig, NativeImageSourceJa\n                 log.info(\"Pulling image \" + nativeConfig.builderImage);\n                 Process pullProcess = null;\n                 try {\n-                    pullProcess = new ProcessBuilder(Arrays.asList(containerRuntime, \"pull\", nativeConfig.builderImage))\n-                            .inheritIO()\n-                            .start();\n+                    final ProcessBuilder pb = new ProcessBuilder(\n+                            Arrays.asList(containerRuntime, \"pull\", nativeConfig.builderImage));\n+                    if (processInheritIODisabled.isPresent()) {\n+                        // explicitly stream the stdout/stderr of the new process to this process' System.out/System.err\n+                        pullProcess = pb.start();\n+                        ProcessUtil.streamToSysOutSysErr(pb.start());\n+                    } else {\n+                        pullProcess = pb.inheritIO().start();\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE4NzY1Nw=="}, "originalCommit": {"oid": "67bd7d61de298c5b88395c598c4cbe2cb757e5b5"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE4OTg0MQ==", "bodyText": "Hello @aloubyansky, I've moved that logic into ProcessUtil#launchProcess and ProcessUtil#launchProcessStreamStdOut. PR has now been updated.", "url": "https://github.com/quarkusio/quarkus/pull/10137#discussion_r443189841", "createdAt": "2020-06-21T07:13:25Z", "author": {"login": "jaikiran"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeImageBuildStep.java", "diffHunk": "@@ -126,9 +129,15 @@ public NativeImageBuildItem build(NativeConfig nativeConfig, NativeImageSourceJa\n                 log.info(\"Pulling image \" + nativeConfig.builderImage);\n                 Process pullProcess = null;\n                 try {\n-                    pullProcess = new ProcessBuilder(Arrays.asList(containerRuntime, \"pull\", nativeConfig.builderImage))\n-                            .inheritIO()\n-                            .start();\n+                    final ProcessBuilder pb = new ProcessBuilder(\n+                            Arrays.asList(containerRuntime, \"pull\", nativeConfig.builderImage));\n+                    if (processInheritIODisabled.isPresent()) {\n+                        // explicitly stream the stdout/stderr of the new process to this process' System.out/System.err\n+                        pullProcess = pb.start();\n+                        ProcessUtil.streamToSysOutSysErr(pb.start());\n+                    } else {\n+                        pullProcess = pb.inheritIO().start();\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE4NzY1Nw=="}, "originalCommit": {"oid": "67bd7d61de298c5b88395c598c4cbe2cb757e5b5"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTQ1MzkxOnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/util/ProcessUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMDo0NjoyMVrOGmrL_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMjoxMjozOFrOGmrm6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIwNjY1Mg==", "bodyText": "Aren't standard and error streams merged into one in this case?", "url": "https://github.com/quarkusio/quarkus/pull/10137#discussion_r443206652", "createdAt": "2020-06-21T10:46:21Z", "author": {"login": "aloubyansky"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/util/ProcessUtil.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package io.quarkus.deployment.util;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Optional;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.deployment.pkg.builditem.ProcessInheritIODisabled;\n+\n+/**\n+ * Utility for {@link Process} related operations\n+ */\n+public class ProcessUtil {\n+\n+    private static final Logger logger = Logger.getLogger(ProcessUtil.class);\n+\n+    /**\n+     * Launches and returns a {@link Process} built from the {@link ProcessBuilder builder}.\n+     * Before launching the process, this method checks if {@link ProcessInheritIODisabled inherit IO is disabled}\n+     * and if so, streams both the {@code STDOUT} and {@code STDERR} of the launched process using\n+     * {@link #streamToSysOutSysErr(Process)}. Else, it launches the process with {@link ProcessBuilder#inheritIO()}\n+     *\n+     * @param builder The process builder\n+     * @param processInheritIODisabled Whether or not {@link java.lang.ProcessBuilder.Redirect#INHERIT} can be used for\n+     *        launching the process\n+     * @return Returns the newly launched process\n+     * @throws IOException\n+     */\n+    public static Process launchProcess(final ProcessBuilder builder,\n+            final Optional<ProcessInheritIODisabled> processInheritIODisabled) throws IOException {\n+        if (!processInheritIODisabled.isPresent()) {\n+            return builder.inheritIO().start();\n+        }\n+        final Process process = builder.redirectOutput(ProcessBuilder.Redirect.PIPE)\n+                .redirectError(ProcessBuilder.Redirect.PIPE)\n+                .start();\n+        // stream both stdout and stderr of the process\n+        ProcessUtil.streamToSysOutSysErr(process);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d00d52cdc9b74fa34e96e153b27e3e6dc32c285"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxMzU0NA==", "bodyText": "Not unless the ProcessBuilder#redirectErrorStream(boolean) method is called.", "url": "https://github.com/quarkusio/quarkus/pull/10137#discussion_r443213544", "createdAt": "2020-06-21T12:12:38Z", "author": {"login": "jaikiran"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/util/ProcessUtil.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package io.quarkus.deployment.util;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Optional;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.deployment.pkg.builditem.ProcessInheritIODisabled;\n+\n+/**\n+ * Utility for {@link Process} related operations\n+ */\n+public class ProcessUtil {\n+\n+    private static final Logger logger = Logger.getLogger(ProcessUtil.class);\n+\n+    /**\n+     * Launches and returns a {@link Process} built from the {@link ProcessBuilder builder}.\n+     * Before launching the process, this method checks if {@link ProcessInheritIODisabled inherit IO is disabled}\n+     * and if so, streams both the {@code STDOUT} and {@code STDERR} of the launched process using\n+     * {@link #streamToSysOutSysErr(Process)}. Else, it launches the process with {@link ProcessBuilder#inheritIO()}\n+     *\n+     * @param builder The process builder\n+     * @param processInheritIODisabled Whether or not {@link java.lang.ProcessBuilder.Redirect#INHERIT} can be used for\n+     *        launching the process\n+     * @return Returns the newly launched process\n+     * @throws IOException\n+     */\n+    public static Process launchProcess(final ProcessBuilder builder,\n+            final Optional<ProcessInheritIODisabled> processInheritIODisabled) throws IOException {\n+        if (!processInheritIODisabled.isPresent()) {\n+            return builder.inheritIO().start();\n+        }\n+        final Process process = builder.redirectOutput(ProcessBuilder.Redirect.PIPE)\n+                .redirectError(ProcessBuilder.Redirect.PIPE)\n+                .start();\n+        // stream both stdout and stderr of the process\n+        ProcessUtil.streamToSysOutSysErr(process);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIwNjY1Mg=="}, "originalCommit": {"oid": "8d00d52cdc9b74fa34e96e153b27e3e6dc32c285"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2789, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}