{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2ODEwOTgw", "number": 7785, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOTo0Mzo0MlrODnOJDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMjowMjo1MVrODncCSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDUyNzQ4OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/datasource.adoc", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOTo0Mzo0MlrOF1GELw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMjoxMzozOFrOF1cGlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIxODIyMw==", "bodyText": "It would be nice to add a [source, properties] for this case. For example, how do I connect to a DB2 DB?", "url": "https://github.com/quarkusio/quarkus/pull/7785#discussion_r391218223", "createdAt": "2020-03-11T19:43:42Z", "author": {"login": "gastaldi"}, "path": "docs/src/main/asciidoc/datasource.adoc", "diffHunk": "@@ -9,55 +9,120 @@ include::./attributes.adoc[]\n \n Many projects that use data require connections to a relational database.\n \n-The main way of obtaining connections to a database is to use a datasource and configure a JDBC driver.\n+The usual way of obtaining connections to a database is to use a datasource and configure a JDBC driver.\n+But you might also prefer using a reactive driver to connect to your database in a reactive way.\n \n-In Quarkus, the preferred datasource and connection pooling implementation is https://agroal.github.io/[Agroal].\n+Quarkus gets you covered for both:\n \n+* For JDBC, the preferred datasource and connection pooling implementation is https://agroal.github.io/[Agroal].\n+* For reactive, we use the https://vertx.io/[Vert.x] reactive drivers.\n+\n+Both are configured via a unified and flexible configuration.\n+\n+[NOTE]\n+====\n Agroal is a modern, light weight connection pool implementation designed for very high performance and scalability,\n and features first class integration with the other components in Quarkus, such as security, transaction management components, health metrics.\n+====\n \n This guide will explain how to:\n \n * configure a datasource, or multiple datasources\n * how to obtain a reference to those datasources in code\n * which pool tuning configuration properties are available\n \n-== Prerequisites\n+This guide is mainly about datasource configuration.\n+If you want more details about how to consume and make use of a reactive datasource,\n+refer to the link:reactive-sql-clients[Reactive SQL clients guide].\n+\n+== TL;DR\n \n-To complete this guide, you will need:\n+This is a quick introduction to datasource configuration.\n+If you want a better understanding of how all this works, this guide has a lot more information in the subsequent paragraphs.\n \n-* less than 10 minutes\n-* an IDE\n-* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n-* Apache Maven 3.5.3+\n+=== JDBC datasource\n \n-== Creating the Maven project\n+Add the `agroal` extension plus one of `jdbc-derby`, `jdbc-h2`, `jdbc-mariadb`, `jdbc-mssql`, `jdbc-mysql` or `jdbc-postgresql`.\n \n-First, we need a new project. Create a new project with the following command:\n+Then configure your datasource:\n \n-[source,shell,subs=attributes+]\n+[source, properties]\n ----\n-mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n-    -DprojectGroupId=org.acme \\\n-    -DprojectArtifactId=agroal-quickstart \\\n-    -DclassName=\"org.acme.datasource.GreetingResource\" \\\n-    -Dpath=\"/hello\"\n-cd agroal-quickstart\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=<your username>\n+quarkus.datasource.password=<your password>\n+\n+quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/hibernate_orm_test\n+quarkus.datasource.jdbc.min-size=4\n+quarkus.datasource.jdbc.max-size=16\n ----\n \n-This will generate:\n+=== Reactive datasource\n+\n+Add either the `reactive-pg-client` or the `reactive-mysql-client` extension.\n+\n+Then configure your reactive datasource:\n+\n+[source, properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=<your username>\n+quarkus.datasource.password=<your password>\n+\n+quarkus.datasource.reactive.url=postgresql:///your_database\n+quarkus.datasource.reactive.max-size=20\n+----\n \n-* the Maven structure\n-* a landing page accessible on `http://localhost:8080`\n-* an example `Dockerfile` files for both `native` and `jvm` modes\n-* the application configuration file\n-* an `org.acme.datasource.GreetingResource` resource\n-* an example integration test\n+== Default datasource\n \n-== Adding maven dependencies\n+A datasource can be either a JDBC datasource, a reactive one or both.\n+It all depends on how you configure it and which extensions you added to your project.\n \n-Next, you will need to add the `quarkus-agroal` dependency to your project.\n+To define a datasource, start with the following:\n+\n+[source, properties]\n+----\n+quarkus.datasource.db-kind=h2\n+----\n+\n+The database kind defines which type of database you will connect to.\n+\n+We currently include these built-in database kinds:\n+\n+* Derby: `derby`\n+* H2: `h2`\n+* MariaDB: `mariadb`\n+* Microsoft SQL Server: `mssql`\n+* MySQL: `mysql`\n+* PostgreSQL: `postgresql`, `pgsql` or `pg`\n+\n+Note that these database kinds only facilitate things.\n+For instance, when we have a JDBC driver extension for a given kind,\n+we resolve the JDBC driver to use automatically so you don't need to configure it yourself.\n+If you want to use a database kind outside of this list, just use `other` or whatever name you prefer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08136974801d55925324e6818ba8ca0f823b47e1"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU2NDg0MQ==", "bodyText": "It's explained a bit later how you can define a specific driver.\nI think it's clear enough. We can see if people complain.\nNote that I don't want that to be too prominent as things won't work in native.", "url": "https://github.com/quarkusio/quarkus/pull/7785#discussion_r391564841", "createdAt": "2020-03-12T11:42:43Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/datasource.adoc", "diffHunk": "@@ -9,55 +9,120 @@ include::./attributes.adoc[]\n \n Many projects that use data require connections to a relational database.\n \n-The main way of obtaining connections to a database is to use a datasource and configure a JDBC driver.\n+The usual way of obtaining connections to a database is to use a datasource and configure a JDBC driver.\n+But you might also prefer using a reactive driver to connect to your database in a reactive way.\n \n-In Quarkus, the preferred datasource and connection pooling implementation is https://agroal.github.io/[Agroal].\n+Quarkus gets you covered for both:\n \n+* For JDBC, the preferred datasource and connection pooling implementation is https://agroal.github.io/[Agroal].\n+* For reactive, we use the https://vertx.io/[Vert.x] reactive drivers.\n+\n+Both are configured via a unified and flexible configuration.\n+\n+[NOTE]\n+====\n Agroal is a modern, light weight connection pool implementation designed for very high performance and scalability,\n and features first class integration with the other components in Quarkus, such as security, transaction management components, health metrics.\n+====\n \n This guide will explain how to:\n \n * configure a datasource, or multiple datasources\n * how to obtain a reference to those datasources in code\n * which pool tuning configuration properties are available\n \n-== Prerequisites\n+This guide is mainly about datasource configuration.\n+If you want more details about how to consume and make use of a reactive datasource,\n+refer to the link:reactive-sql-clients[Reactive SQL clients guide].\n+\n+== TL;DR\n \n-To complete this guide, you will need:\n+This is a quick introduction to datasource configuration.\n+If you want a better understanding of how all this works, this guide has a lot more information in the subsequent paragraphs.\n \n-* less than 10 minutes\n-* an IDE\n-* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n-* Apache Maven 3.5.3+\n+=== JDBC datasource\n \n-== Creating the Maven project\n+Add the `agroal` extension plus one of `jdbc-derby`, `jdbc-h2`, `jdbc-mariadb`, `jdbc-mssql`, `jdbc-mysql` or `jdbc-postgresql`.\n \n-First, we need a new project. Create a new project with the following command:\n+Then configure your datasource:\n \n-[source,shell,subs=attributes+]\n+[source, properties]\n ----\n-mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n-    -DprojectGroupId=org.acme \\\n-    -DprojectArtifactId=agroal-quickstart \\\n-    -DclassName=\"org.acme.datasource.GreetingResource\" \\\n-    -Dpath=\"/hello\"\n-cd agroal-quickstart\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=<your username>\n+quarkus.datasource.password=<your password>\n+\n+quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/hibernate_orm_test\n+quarkus.datasource.jdbc.min-size=4\n+quarkus.datasource.jdbc.max-size=16\n ----\n \n-This will generate:\n+=== Reactive datasource\n+\n+Add either the `reactive-pg-client` or the `reactive-mysql-client` extension.\n+\n+Then configure your reactive datasource:\n+\n+[source, properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=<your username>\n+quarkus.datasource.password=<your password>\n+\n+quarkus.datasource.reactive.url=postgresql:///your_database\n+quarkus.datasource.reactive.max-size=20\n+----\n \n-* the Maven structure\n-* a landing page accessible on `http://localhost:8080`\n-* an example `Dockerfile` files for both `native` and `jvm` modes\n-* the application configuration file\n-* an `org.acme.datasource.GreetingResource` resource\n-* an example integration test\n+== Default datasource\n \n-== Adding maven dependencies\n+A datasource can be either a JDBC datasource, a reactive one or both.\n+It all depends on how you configure it and which extensions you added to your project.\n \n-Next, you will need to add the `quarkus-agroal` dependency to your project.\n+To define a datasource, start with the following:\n+\n+[source, properties]\n+----\n+quarkus.datasource.db-kind=h2\n+----\n+\n+The database kind defines which type of database you will connect to.\n+\n+We currently include these built-in database kinds:\n+\n+* Derby: `derby`\n+* H2: `h2`\n+* MariaDB: `mariadb`\n+* Microsoft SQL Server: `mssql`\n+* MySQL: `mysql`\n+* PostgreSQL: `postgresql`, `pgsql` or `pg`\n+\n+Note that these database kinds only facilitate things.\n+For instance, when we have a JDBC driver extension for a given kind,\n+we resolve the JDBC driver to use automatically so you don't need to configure it yourself.\n+If you want to use a database kind outside of this list, just use `other` or whatever name you prefer.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIxODIyMw=="}, "originalCommit": {"oid": "08136974801d55925324e6818ba8ca0f823b47e1"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU2NjY3NA==", "bodyText": "Right, Explaining that a different JDBC driver from the list is possible but won't work in native is one of the things it would be nice to have in this document", "url": "https://github.com/quarkusio/quarkus/pull/7785#discussion_r391566674", "createdAt": "2020-03-12T11:46:29Z", "author": {"login": "gastaldi"}, "path": "docs/src/main/asciidoc/datasource.adoc", "diffHunk": "@@ -9,55 +9,120 @@ include::./attributes.adoc[]\n \n Many projects that use data require connections to a relational database.\n \n-The main way of obtaining connections to a database is to use a datasource and configure a JDBC driver.\n+The usual way of obtaining connections to a database is to use a datasource and configure a JDBC driver.\n+But you might also prefer using a reactive driver to connect to your database in a reactive way.\n \n-In Quarkus, the preferred datasource and connection pooling implementation is https://agroal.github.io/[Agroal].\n+Quarkus gets you covered for both:\n \n+* For JDBC, the preferred datasource and connection pooling implementation is https://agroal.github.io/[Agroal].\n+* For reactive, we use the https://vertx.io/[Vert.x] reactive drivers.\n+\n+Both are configured via a unified and flexible configuration.\n+\n+[NOTE]\n+====\n Agroal is a modern, light weight connection pool implementation designed for very high performance and scalability,\n and features first class integration with the other components in Quarkus, such as security, transaction management components, health metrics.\n+====\n \n This guide will explain how to:\n \n * configure a datasource, or multiple datasources\n * how to obtain a reference to those datasources in code\n * which pool tuning configuration properties are available\n \n-== Prerequisites\n+This guide is mainly about datasource configuration.\n+If you want more details about how to consume and make use of a reactive datasource,\n+refer to the link:reactive-sql-clients[Reactive SQL clients guide].\n+\n+== TL;DR\n \n-To complete this guide, you will need:\n+This is a quick introduction to datasource configuration.\n+If you want a better understanding of how all this works, this guide has a lot more information in the subsequent paragraphs.\n \n-* less than 10 minutes\n-* an IDE\n-* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n-* Apache Maven 3.5.3+\n+=== JDBC datasource\n \n-== Creating the Maven project\n+Add the `agroal` extension plus one of `jdbc-derby`, `jdbc-h2`, `jdbc-mariadb`, `jdbc-mssql`, `jdbc-mysql` or `jdbc-postgresql`.\n \n-First, we need a new project. Create a new project with the following command:\n+Then configure your datasource:\n \n-[source,shell,subs=attributes+]\n+[source, properties]\n ----\n-mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n-    -DprojectGroupId=org.acme \\\n-    -DprojectArtifactId=agroal-quickstart \\\n-    -DclassName=\"org.acme.datasource.GreetingResource\" \\\n-    -Dpath=\"/hello\"\n-cd agroal-quickstart\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=<your username>\n+quarkus.datasource.password=<your password>\n+\n+quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/hibernate_orm_test\n+quarkus.datasource.jdbc.min-size=4\n+quarkus.datasource.jdbc.max-size=16\n ----\n \n-This will generate:\n+=== Reactive datasource\n+\n+Add either the `reactive-pg-client` or the `reactive-mysql-client` extension.\n+\n+Then configure your reactive datasource:\n+\n+[source, properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=<your username>\n+quarkus.datasource.password=<your password>\n+\n+quarkus.datasource.reactive.url=postgresql:///your_database\n+quarkus.datasource.reactive.max-size=20\n+----\n \n-* the Maven structure\n-* a landing page accessible on `http://localhost:8080`\n-* an example `Dockerfile` files for both `native` and `jvm` modes\n-* the application configuration file\n-* an `org.acme.datasource.GreetingResource` resource\n-* an example integration test\n+== Default datasource\n \n-== Adding maven dependencies\n+A datasource can be either a JDBC datasource, a reactive one or both.\n+It all depends on how you configure it and which extensions you added to your project.\n \n-Next, you will need to add the `quarkus-agroal` dependency to your project.\n+To define a datasource, start with the following:\n+\n+[source, properties]\n+----\n+quarkus.datasource.db-kind=h2\n+----\n+\n+The database kind defines which type of database you will connect to.\n+\n+We currently include these built-in database kinds:\n+\n+* Derby: `derby`\n+* H2: `h2`\n+* MariaDB: `mariadb`\n+* Microsoft SQL Server: `mssql`\n+* MySQL: `mysql`\n+* PostgreSQL: `postgresql`, `pgsql` or `pg`\n+\n+Note that these database kinds only facilitate things.\n+For instance, when we have a JDBC driver extension for a given kind,\n+we resolve the JDBC driver to use automatically so you don't need to configure it yourself.\n+If you want to use a database kind outside of this list, just use `other` or whatever name you prefer.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIxODIyMw=="}, "originalCommit": {"oid": "08136974801d55925324e6818ba8ca0f823b47e1"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3MjY3Nw==", "bodyText": "Well, feel free to contribute once this PR is in. I personally have a ton of other more pressing things to do today.", "url": "https://github.com/quarkusio/quarkus/pull/7785#discussion_r391572677", "createdAt": "2020-03-12T11:59:28Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/datasource.adoc", "diffHunk": "@@ -9,55 +9,120 @@ include::./attributes.adoc[]\n \n Many projects that use data require connections to a relational database.\n \n-The main way of obtaining connections to a database is to use a datasource and configure a JDBC driver.\n+The usual way of obtaining connections to a database is to use a datasource and configure a JDBC driver.\n+But you might also prefer using a reactive driver to connect to your database in a reactive way.\n \n-In Quarkus, the preferred datasource and connection pooling implementation is https://agroal.github.io/[Agroal].\n+Quarkus gets you covered for both:\n \n+* For JDBC, the preferred datasource and connection pooling implementation is https://agroal.github.io/[Agroal].\n+* For reactive, we use the https://vertx.io/[Vert.x] reactive drivers.\n+\n+Both are configured via a unified and flexible configuration.\n+\n+[NOTE]\n+====\n Agroal is a modern, light weight connection pool implementation designed for very high performance and scalability,\n and features first class integration with the other components in Quarkus, such as security, transaction management components, health metrics.\n+====\n \n This guide will explain how to:\n \n * configure a datasource, or multiple datasources\n * how to obtain a reference to those datasources in code\n * which pool tuning configuration properties are available\n \n-== Prerequisites\n+This guide is mainly about datasource configuration.\n+If you want more details about how to consume and make use of a reactive datasource,\n+refer to the link:reactive-sql-clients[Reactive SQL clients guide].\n+\n+== TL;DR\n \n-To complete this guide, you will need:\n+This is a quick introduction to datasource configuration.\n+If you want a better understanding of how all this works, this guide has a lot more information in the subsequent paragraphs.\n \n-* less than 10 minutes\n-* an IDE\n-* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n-* Apache Maven 3.5.3+\n+=== JDBC datasource\n \n-== Creating the Maven project\n+Add the `agroal` extension plus one of `jdbc-derby`, `jdbc-h2`, `jdbc-mariadb`, `jdbc-mssql`, `jdbc-mysql` or `jdbc-postgresql`.\n \n-First, we need a new project. Create a new project with the following command:\n+Then configure your datasource:\n \n-[source,shell,subs=attributes+]\n+[source, properties]\n ----\n-mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n-    -DprojectGroupId=org.acme \\\n-    -DprojectArtifactId=agroal-quickstart \\\n-    -DclassName=\"org.acme.datasource.GreetingResource\" \\\n-    -Dpath=\"/hello\"\n-cd agroal-quickstart\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=<your username>\n+quarkus.datasource.password=<your password>\n+\n+quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/hibernate_orm_test\n+quarkus.datasource.jdbc.min-size=4\n+quarkus.datasource.jdbc.max-size=16\n ----\n \n-This will generate:\n+=== Reactive datasource\n+\n+Add either the `reactive-pg-client` or the `reactive-mysql-client` extension.\n+\n+Then configure your reactive datasource:\n+\n+[source, properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=<your username>\n+quarkus.datasource.password=<your password>\n+\n+quarkus.datasource.reactive.url=postgresql:///your_database\n+quarkus.datasource.reactive.max-size=20\n+----\n \n-* the Maven structure\n-* a landing page accessible on `http://localhost:8080`\n-* an example `Dockerfile` files for both `native` and `jvm` modes\n-* the application configuration file\n-* an `org.acme.datasource.GreetingResource` resource\n-* an example integration test\n+== Default datasource\n \n-== Adding maven dependencies\n+A datasource can be either a JDBC datasource, a reactive one or both.\n+It all depends on how you configure it and which extensions you added to your project.\n \n-Next, you will need to add the `quarkus-agroal` dependency to your project.\n+To define a datasource, start with the following:\n+\n+[source, properties]\n+----\n+quarkus.datasource.db-kind=h2\n+----\n+\n+The database kind defines which type of database you will connect to.\n+\n+We currently include these built-in database kinds:\n+\n+* Derby: `derby`\n+* H2: `h2`\n+* MariaDB: `mariadb`\n+* Microsoft SQL Server: `mssql`\n+* MySQL: `mysql`\n+* PostgreSQL: `postgresql`, `pgsql` or `pg`\n+\n+Note that these database kinds only facilitate things.\n+For instance, when we have a JDBC driver extension for a given kind,\n+we resolve the JDBC driver to use automatically so you don't need to configure it yourself.\n+If you want to use a database kind outside of this list, just use `other` or whatever name you prefer.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIxODIyMw=="}, "originalCommit": {"oid": "08136974801d55925324e6818ba8ca0f823b47e1"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3NTc5NQ==", "bodyText": "Sure, do you mind if I push a commit adding this to your PR or should I do this in a separate PR?", "url": "https://github.com/quarkusio/quarkus/pull/7785#discussion_r391575795", "createdAt": "2020-03-12T12:06:13Z", "author": {"login": "gastaldi"}, "path": "docs/src/main/asciidoc/datasource.adoc", "diffHunk": "@@ -9,55 +9,120 @@ include::./attributes.adoc[]\n \n Many projects that use data require connections to a relational database.\n \n-The main way of obtaining connections to a database is to use a datasource and configure a JDBC driver.\n+The usual way of obtaining connections to a database is to use a datasource and configure a JDBC driver.\n+But you might also prefer using a reactive driver to connect to your database in a reactive way.\n \n-In Quarkus, the preferred datasource and connection pooling implementation is https://agroal.github.io/[Agroal].\n+Quarkus gets you covered for both:\n \n+* For JDBC, the preferred datasource and connection pooling implementation is https://agroal.github.io/[Agroal].\n+* For reactive, we use the https://vertx.io/[Vert.x] reactive drivers.\n+\n+Both are configured via a unified and flexible configuration.\n+\n+[NOTE]\n+====\n Agroal is a modern, light weight connection pool implementation designed for very high performance and scalability,\n and features first class integration with the other components in Quarkus, such as security, transaction management components, health metrics.\n+====\n \n This guide will explain how to:\n \n * configure a datasource, or multiple datasources\n * how to obtain a reference to those datasources in code\n * which pool tuning configuration properties are available\n \n-== Prerequisites\n+This guide is mainly about datasource configuration.\n+If you want more details about how to consume and make use of a reactive datasource,\n+refer to the link:reactive-sql-clients[Reactive SQL clients guide].\n+\n+== TL;DR\n \n-To complete this guide, you will need:\n+This is a quick introduction to datasource configuration.\n+If you want a better understanding of how all this works, this guide has a lot more information in the subsequent paragraphs.\n \n-* less than 10 minutes\n-* an IDE\n-* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n-* Apache Maven 3.5.3+\n+=== JDBC datasource\n \n-== Creating the Maven project\n+Add the `agroal` extension plus one of `jdbc-derby`, `jdbc-h2`, `jdbc-mariadb`, `jdbc-mssql`, `jdbc-mysql` or `jdbc-postgresql`.\n \n-First, we need a new project. Create a new project with the following command:\n+Then configure your datasource:\n \n-[source,shell,subs=attributes+]\n+[source, properties]\n ----\n-mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n-    -DprojectGroupId=org.acme \\\n-    -DprojectArtifactId=agroal-quickstart \\\n-    -DclassName=\"org.acme.datasource.GreetingResource\" \\\n-    -Dpath=\"/hello\"\n-cd agroal-quickstart\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=<your username>\n+quarkus.datasource.password=<your password>\n+\n+quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/hibernate_orm_test\n+quarkus.datasource.jdbc.min-size=4\n+quarkus.datasource.jdbc.max-size=16\n ----\n \n-This will generate:\n+=== Reactive datasource\n+\n+Add either the `reactive-pg-client` or the `reactive-mysql-client` extension.\n+\n+Then configure your reactive datasource:\n+\n+[source, properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=<your username>\n+quarkus.datasource.password=<your password>\n+\n+quarkus.datasource.reactive.url=postgresql:///your_database\n+quarkus.datasource.reactive.max-size=20\n+----\n \n-* the Maven structure\n-* a landing page accessible on `http://localhost:8080`\n-* an example `Dockerfile` files for both `native` and `jvm` modes\n-* the application configuration file\n-* an `org.acme.datasource.GreetingResource` resource\n-* an example integration test\n+== Default datasource\n \n-== Adding maven dependencies\n+A datasource can be either a JDBC datasource, a reactive one or both.\n+It all depends on how you configure it and which extensions you added to your project.\n \n-Next, you will need to add the `quarkus-agroal` dependency to your project.\n+To define a datasource, start with the following:\n+\n+[source, properties]\n+----\n+quarkus.datasource.db-kind=h2\n+----\n+\n+The database kind defines which type of database you will connect to.\n+\n+We currently include these built-in database kinds:\n+\n+* Derby: `derby`\n+* H2: `h2`\n+* MariaDB: `mariadb`\n+* Microsoft SQL Server: `mssql`\n+* MySQL: `mysql`\n+* PostgreSQL: `postgresql`, `pgsql` or `pg`\n+\n+Note that these database kinds only facilitate things.\n+For instance, when we have a JDBC driver extension for a given kind,\n+we resolve the JDBC driver to use automatically so you don't need to configure it yourself.\n+If you want to use a database kind outside of this list, just use `other` or whatever name you prefer.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIxODIyMw=="}, "originalCommit": {"oid": "08136974801d55925324e6818ba8ca0f823b47e1"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3OTI4Nw==", "bodyText": "Better do it in a separate PR after this one is in. I really want that one in merged ASAP.", "url": "https://github.com/quarkusio/quarkus/pull/7785#discussion_r391579287", "createdAt": "2020-03-12T12:13:38Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/datasource.adoc", "diffHunk": "@@ -9,55 +9,120 @@ include::./attributes.adoc[]\n \n Many projects that use data require connections to a relational database.\n \n-The main way of obtaining connections to a database is to use a datasource and configure a JDBC driver.\n+The usual way of obtaining connections to a database is to use a datasource and configure a JDBC driver.\n+But you might also prefer using a reactive driver to connect to your database in a reactive way.\n \n-In Quarkus, the preferred datasource and connection pooling implementation is https://agroal.github.io/[Agroal].\n+Quarkus gets you covered for both:\n \n+* For JDBC, the preferred datasource and connection pooling implementation is https://agroal.github.io/[Agroal].\n+* For reactive, we use the https://vertx.io/[Vert.x] reactive drivers.\n+\n+Both are configured via a unified and flexible configuration.\n+\n+[NOTE]\n+====\n Agroal is a modern, light weight connection pool implementation designed for very high performance and scalability,\n and features first class integration with the other components in Quarkus, such as security, transaction management components, health metrics.\n+====\n \n This guide will explain how to:\n \n * configure a datasource, or multiple datasources\n * how to obtain a reference to those datasources in code\n * which pool tuning configuration properties are available\n \n-== Prerequisites\n+This guide is mainly about datasource configuration.\n+If you want more details about how to consume and make use of a reactive datasource,\n+refer to the link:reactive-sql-clients[Reactive SQL clients guide].\n+\n+== TL;DR\n \n-To complete this guide, you will need:\n+This is a quick introduction to datasource configuration.\n+If you want a better understanding of how all this works, this guide has a lot more information in the subsequent paragraphs.\n \n-* less than 10 minutes\n-* an IDE\n-* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n-* Apache Maven 3.5.3+\n+=== JDBC datasource\n \n-== Creating the Maven project\n+Add the `agroal` extension plus one of `jdbc-derby`, `jdbc-h2`, `jdbc-mariadb`, `jdbc-mssql`, `jdbc-mysql` or `jdbc-postgresql`.\n \n-First, we need a new project. Create a new project with the following command:\n+Then configure your datasource:\n \n-[source,shell,subs=attributes+]\n+[source, properties]\n ----\n-mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n-    -DprojectGroupId=org.acme \\\n-    -DprojectArtifactId=agroal-quickstart \\\n-    -DclassName=\"org.acme.datasource.GreetingResource\" \\\n-    -Dpath=\"/hello\"\n-cd agroal-quickstart\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=<your username>\n+quarkus.datasource.password=<your password>\n+\n+quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/hibernate_orm_test\n+quarkus.datasource.jdbc.min-size=4\n+quarkus.datasource.jdbc.max-size=16\n ----\n \n-This will generate:\n+=== Reactive datasource\n+\n+Add either the `reactive-pg-client` or the `reactive-mysql-client` extension.\n+\n+Then configure your reactive datasource:\n+\n+[source, properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=<your username>\n+quarkus.datasource.password=<your password>\n+\n+quarkus.datasource.reactive.url=postgresql:///your_database\n+quarkus.datasource.reactive.max-size=20\n+----\n \n-* the Maven structure\n-* a landing page accessible on `http://localhost:8080`\n-* an example `Dockerfile` files for both `native` and `jvm` modes\n-* the application configuration file\n-* an `org.acme.datasource.GreetingResource` resource\n-* an example integration test\n+== Default datasource\n \n-== Adding maven dependencies\n+A datasource can be either a JDBC datasource, a reactive one or both.\n+It all depends on how you configure it and which extensions you added to your project.\n \n-Next, you will need to add the `quarkus-agroal` dependency to your project.\n+To define a datasource, start with the following:\n+\n+[source, properties]\n+----\n+quarkus.datasource.db-kind=h2\n+----\n+\n+The database kind defines which type of database you will connect to.\n+\n+We currently include these built-in database kinds:\n+\n+* Derby: `derby`\n+* H2: `h2`\n+* MariaDB: `mariadb`\n+* Microsoft SQL Server: `mssql`\n+* MySQL: `mysql`\n+* PostgreSQL: `postgresql`, `pgsql` or `pg`\n+\n+Note that these database kinds only facilitate things.\n+For instance, when we have a JDBC driver extension for a given kind,\n+we resolve the JDBC driver to use automatically so you don't need to configure it yourself.\n+If you want to use a database kind outside of this list, just use `other` or whatever name you prefer.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIxODIyMw=="}, "originalCommit": {"oid": "08136974801d55925324e6818ba8ca0f823b47e1"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjc2ODczOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/datasource.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMTo1MDo0NVrOF1bdLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMTo1MDo0NVrOF1bdLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU2ODY4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Quarkus gets you covered for both:\n          \n          \n            \n            Quarkus has you covered either way:", "url": "https://github.com/quarkusio/quarkus/pull/7785#discussion_r391568684", "createdAt": "2020-03-12T11:50:45Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/datasource.adoc", "diffHunk": "@@ -9,55 +9,120 @@ include::./attributes.adoc[]\n \n Many projects that use data require connections to a relational database.\n \n-The main way of obtaining connections to a database is to use a datasource and configure a JDBC driver.\n+The usual way of obtaining connections to a database is to use a datasource and configure a JDBC driver.\n+But you might also prefer using a reactive driver to connect to your database in a reactive way.\n \n-In Quarkus, the preferred datasource and connection pooling implementation is https://agroal.github.io/[Agroal].\n+Quarkus gets you covered for both:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08136974801d55925324e6818ba8ca0f823b47e1"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjc3NjgwOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/datasource.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMTo1MzoyOVrOF1bh7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMTo1MzoyOVrOF1bh7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU2OTkwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Both are configured via a unified and flexible configuration.\n          \n          \n            \n            Both are configured via unified and flexible configuration.", "url": "https://github.com/quarkusio/quarkus/pull/7785#discussion_r391569902", "createdAt": "2020-03-12T11:53:29Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/datasource.adoc", "diffHunk": "@@ -9,55 +9,120 @@ include::./attributes.adoc[]\n \n Many projects that use data require connections to a relational database.\n \n-The main way of obtaining connections to a database is to use a datasource and configure a JDBC driver.\n+The usual way of obtaining connections to a database is to use a datasource and configure a JDBC driver.\n+But you might also prefer using a reactive driver to connect to your database in a reactive way.\n \n-In Quarkus, the preferred datasource and connection pooling implementation is https://agroal.github.io/[Agroal].\n+Quarkus gets you covered for both:\n \n+* For JDBC, the preferred datasource and connection pooling implementation is https://agroal.github.io/[Agroal].\n+* For reactive, we use the https://vertx.io/[Vert.x] reactive drivers.\n+\n+Both are configured via a unified and flexible configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08136974801d55925324e6818ba8ca0f823b47e1"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjc3ODA0OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/datasource.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMTo1Mzo1MlrOF1birg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMTo1Mzo1MlrOF1birg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3MDA5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            refer to the link:reactive-sql-clients[Reactive SQL clients guide].\n          \n          \n            \n            please refer to the link:reactive-sql-clients[Reactive SQL clients guide].", "url": "https://github.com/quarkusio/quarkus/pull/7785#discussion_r391570094", "createdAt": "2020-03-12T11:53:52Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/datasource.adoc", "diffHunk": "@@ -9,55 +9,120 @@ include::./attributes.adoc[]\n \n Many projects that use data require connections to a relational database.\n \n-The main way of obtaining connections to a database is to use a datasource and configure a JDBC driver.\n+The usual way of obtaining connections to a database is to use a datasource and configure a JDBC driver.\n+But you might also prefer using a reactive driver to connect to your database in a reactive way.\n \n-In Quarkus, the preferred datasource and connection pooling implementation is https://agroal.github.io/[Agroal].\n+Quarkus gets you covered for both:\n \n+* For JDBC, the preferred datasource and connection pooling implementation is https://agroal.github.io/[Agroal].\n+* For reactive, we use the https://vertx.io/[Vert.x] reactive drivers.\n+\n+Both are configured via a unified and flexible configuration.\n+\n+[NOTE]\n+====\n Agroal is a modern, light weight connection pool implementation designed for very high performance and scalability,\n and features first class integration with the other components in Quarkus, such as security, transaction management components, health metrics.\n+====\n \n This guide will explain how to:\n \n * configure a datasource, or multiple datasources\n * how to obtain a reference to those datasources in code\n * which pool tuning configuration properties are available\n \n-== Prerequisites\n+This guide is mainly about datasource configuration.\n+If you want more details about how to consume and make use of a reactive datasource,\n+refer to the link:reactive-sql-clients[Reactive SQL clients guide].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08136974801d55925324e6818ba8ca0f823b47e1"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjc4NjQ5OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/datasource.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMTo1Njo0NlrOF1boDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMTo1Njo0NlrOF1boDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3MTQ3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            we resolve the JDBC driver to use automatically so you don't need to configure it yourself.\n          \n          \n            \n            we resolve the JDBC driver to be used automatically, so you don't need to configure it yourself.", "url": "https://github.com/quarkusio/quarkus/pull/7785#discussion_r391571471", "createdAt": "2020-03-12T11:56:46Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/datasource.adoc", "diffHunk": "@@ -9,55 +9,120 @@ include::./attributes.adoc[]\n \n Many projects that use data require connections to a relational database.\n \n-The main way of obtaining connections to a database is to use a datasource and configure a JDBC driver.\n+The usual way of obtaining connections to a database is to use a datasource and configure a JDBC driver.\n+But you might also prefer using a reactive driver to connect to your database in a reactive way.\n \n-In Quarkus, the preferred datasource and connection pooling implementation is https://agroal.github.io/[Agroal].\n+Quarkus gets you covered for both:\n \n+* For JDBC, the preferred datasource and connection pooling implementation is https://agroal.github.io/[Agroal].\n+* For reactive, we use the https://vertx.io/[Vert.x] reactive drivers.\n+\n+Both are configured via a unified and flexible configuration.\n+\n+[NOTE]\n+====\n Agroal is a modern, light weight connection pool implementation designed for very high performance and scalability,\n and features first class integration with the other components in Quarkus, such as security, transaction management components, health metrics.\n+====\n \n This guide will explain how to:\n \n * configure a datasource, or multiple datasources\n * how to obtain a reference to those datasources in code\n * which pool tuning configuration properties are available\n \n-== Prerequisites\n+This guide is mainly about datasource configuration.\n+If you want more details about how to consume and make use of a reactive datasource,\n+refer to the link:reactive-sql-clients[Reactive SQL clients guide].\n+\n+== TL;DR\n \n-To complete this guide, you will need:\n+This is a quick introduction to datasource configuration.\n+If you want a better understanding of how all this works, this guide has a lot more information in the subsequent paragraphs.\n \n-* less than 10 minutes\n-* an IDE\n-* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n-* Apache Maven 3.5.3+\n+=== JDBC datasource\n \n-== Creating the Maven project\n+Add the `agroal` extension plus one of `jdbc-derby`, `jdbc-h2`, `jdbc-mariadb`, `jdbc-mssql`, `jdbc-mysql` or `jdbc-postgresql`.\n \n-First, we need a new project. Create a new project with the following command:\n+Then configure your datasource:\n \n-[source,shell,subs=attributes+]\n+[source, properties]\n ----\n-mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n-    -DprojectGroupId=org.acme \\\n-    -DprojectArtifactId=agroal-quickstart \\\n-    -DclassName=\"org.acme.datasource.GreetingResource\" \\\n-    -Dpath=\"/hello\"\n-cd agroal-quickstart\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=<your username>\n+quarkus.datasource.password=<your password>\n+\n+quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/hibernate_orm_test\n+quarkus.datasource.jdbc.min-size=4\n+quarkus.datasource.jdbc.max-size=16\n ----\n \n-This will generate:\n+=== Reactive datasource\n+\n+Add either the `reactive-pg-client` or the `reactive-mysql-client` extension.\n+\n+Then configure your reactive datasource:\n+\n+[source, properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=<your username>\n+quarkus.datasource.password=<your password>\n+\n+quarkus.datasource.reactive.url=postgresql:///your_database\n+quarkus.datasource.reactive.max-size=20\n+----\n \n-* the Maven structure\n-* a landing page accessible on `http://localhost:8080`\n-* an example `Dockerfile` files for both `native` and `jvm` modes\n-* the application configuration file\n-* an `org.acme.datasource.GreetingResource` resource\n-* an example integration test\n+== Default datasource\n \n-== Adding maven dependencies\n+A datasource can be either a JDBC datasource, a reactive one or both.\n+It all depends on how you configure it and which extensions you added to your project.\n \n-Next, you will need to add the `quarkus-agroal` dependency to your project.\n+To define a datasource, start with the following:\n+\n+[source, properties]\n+----\n+quarkus.datasource.db-kind=h2\n+----\n+\n+The database kind defines which type of database you will connect to.\n+\n+We currently include these built-in database kinds:\n+\n+* Derby: `derby`\n+* H2: `h2`\n+* MariaDB: `mariadb`\n+* Microsoft SQL Server: `mssql`\n+* MySQL: `mysql`\n+* PostgreSQL: `postgresql`, `pgsql` or `pg`\n+\n+Note that these database kinds only facilitate things.\n+For instance, when we have a JDBC driver extension for a given kind,\n+we resolve the JDBC driver to use automatically so you don't need to configure it yourself.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08136974801d55925324e6818ba8ca0f823b47e1"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjc4NzU0OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/datasource.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMTo1NzowOVrOF1boxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMTo1NzowOVrOF1boxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3MTY1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If you want to use a database kind outside of this list, just use `other` or whatever name you prefer.\n          \n          \n            \n            If you want to use a database kind that is not part of this list, just use `other` or whatever name you prefer.", "url": "https://github.com/quarkusio/quarkus/pull/7785#discussion_r391571653", "createdAt": "2020-03-12T11:57:09Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/datasource.adoc", "diffHunk": "@@ -9,55 +9,120 @@ include::./attributes.adoc[]\n \n Many projects that use data require connections to a relational database.\n \n-The main way of obtaining connections to a database is to use a datasource and configure a JDBC driver.\n+The usual way of obtaining connections to a database is to use a datasource and configure a JDBC driver.\n+But you might also prefer using a reactive driver to connect to your database in a reactive way.\n \n-In Quarkus, the preferred datasource and connection pooling implementation is https://agroal.github.io/[Agroal].\n+Quarkus gets you covered for both:\n \n+* For JDBC, the preferred datasource and connection pooling implementation is https://agroal.github.io/[Agroal].\n+* For reactive, we use the https://vertx.io/[Vert.x] reactive drivers.\n+\n+Both are configured via a unified and flexible configuration.\n+\n+[NOTE]\n+====\n Agroal is a modern, light weight connection pool implementation designed for very high performance and scalability,\n and features first class integration with the other components in Quarkus, such as security, transaction management components, health metrics.\n+====\n \n This guide will explain how to:\n \n * configure a datasource, or multiple datasources\n * how to obtain a reference to those datasources in code\n * which pool tuning configuration properties are available\n \n-== Prerequisites\n+This guide is mainly about datasource configuration.\n+If you want more details about how to consume and make use of a reactive datasource,\n+refer to the link:reactive-sql-clients[Reactive SQL clients guide].\n+\n+== TL;DR\n \n-To complete this guide, you will need:\n+This is a quick introduction to datasource configuration.\n+If you want a better understanding of how all this works, this guide has a lot more information in the subsequent paragraphs.\n \n-* less than 10 minutes\n-* an IDE\n-* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n-* Apache Maven 3.5.3+\n+=== JDBC datasource\n \n-== Creating the Maven project\n+Add the `agroal` extension plus one of `jdbc-derby`, `jdbc-h2`, `jdbc-mariadb`, `jdbc-mssql`, `jdbc-mysql` or `jdbc-postgresql`.\n \n-First, we need a new project. Create a new project with the following command:\n+Then configure your datasource:\n \n-[source,shell,subs=attributes+]\n+[source, properties]\n ----\n-mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n-    -DprojectGroupId=org.acme \\\n-    -DprojectArtifactId=agroal-quickstart \\\n-    -DclassName=\"org.acme.datasource.GreetingResource\" \\\n-    -Dpath=\"/hello\"\n-cd agroal-quickstart\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=<your username>\n+quarkus.datasource.password=<your password>\n+\n+quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/hibernate_orm_test\n+quarkus.datasource.jdbc.min-size=4\n+quarkus.datasource.jdbc.max-size=16\n ----\n \n-This will generate:\n+=== Reactive datasource\n+\n+Add either the `reactive-pg-client` or the `reactive-mysql-client` extension.\n+\n+Then configure your reactive datasource:\n+\n+[source, properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=<your username>\n+quarkus.datasource.password=<your password>\n+\n+quarkus.datasource.reactive.url=postgresql:///your_database\n+quarkus.datasource.reactive.max-size=20\n+----\n \n-* the Maven structure\n-* a landing page accessible on `http://localhost:8080`\n-* an example `Dockerfile` files for both `native` and `jvm` modes\n-* the application configuration file\n-* an `org.acme.datasource.GreetingResource` resource\n-* an example integration test\n+== Default datasource\n \n-== Adding maven dependencies\n+A datasource can be either a JDBC datasource, a reactive one or both.\n+It all depends on how you configure it and which extensions you added to your project.\n \n-Next, you will need to add the `quarkus-agroal` dependency to your project.\n+To define a datasource, start with the following:\n+\n+[source, properties]\n+----\n+quarkus.datasource.db-kind=h2\n+----\n+\n+The database kind defines which type of database you will connect to.\n+\n+We currently include these built-in database kinds:\n+\n+* Derby: `derby`\n+* H2: `h2`\n+* MariaDB: `mariadb`\n+* Microsoft SQL Server: `mssql`\n+* MySQL: `mysql`\n+* PostgreSQL: `postgresql`, `pgsql` or `pg`\n+\n+Note that these database kinds only facilitate things.\n+For instance, when we have a JDBC driver extension for a given kind,\n+we resolve the JDBC driver to use automatically so you don't need to configure it yourself.\n+If you want to use a database kind outside of this list, just use `other` or whatever name you prefer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08136974801d55925324e6818ba8ca0f823b47e1"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjc4OTk3OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/datasource.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMTo1ODowNVrOF1bqQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMTo1ODowNVrOF1bqQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3MjAzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Once you have defined the database kind and the credentials, you are ready to configure either a JDBC datasource, a reactive one. Or both.\n          \n          \n            \n            Once you have defined the database kind and the credentials, you are ready to configure either a JDBC datasource, a reactive one, or both.", "url": "https://github.com/quarkusio/quarkus/pull/7785#discussion_r391572033", "createdAt": "2020-03-12T11:58:05Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/datasource.adoc", "diffHunk": "@@ -9,55 +9,120 @@ include::./attributes.adoc[]\n \n Many projects that use data require connections to a relational database.\n \n-The main way of obtaining connections to a database is to use a datasource and configure a JDBC driver.\n+The usual way of obtaining connections to a database is to use a datasource and configure a JDBC driver.\n+But you might also prefer using a reactive driver to connect to your database in a reactive way.\n \n-In Quarkus, the preferred datasource and connection pooling implementation is https://agroal.github.io/[Agroal].\n+Quarkus gets you covered for both:\n \n+* For JDBC, the preferred datasource and connection pooling implementation is https://agroal.github.io/[Agroal].\n+* For reactive, we use the https://vertx.io/[Vert.x] reactive drivers.\n+\n+Both are configured via a unified and flexible configuration.\n+\n+[NOTE]\n+====\n Agroal is a modern, light weight connection pool implementation designed for very high performance and scalability,\n and features first class integration with the other components in Quarkus, such as security, transaction management components, health metrics.\n+====\n \n This guide will explain how to:\n \n * configure a datasource, or multiple datasources\n * how to obtain a reference to those datasources in code\n * which pool tuning configuration properties are available\n \n-== Prerequisites\n+This guide is mainly about datasource configuration.\n+If you want more details about how to consume and make use of a reactive datasource,\n+refer to the link:reactive-sql-clients[Reactive SQL clients guide].\n+\n+== TL;DR\n \n-To complete this guide, you will need:\n+This is a quick introduction to datasource configuration.\n+If you want a better understanding of how all this works, this guide has a lot more information in the subsequent paragraphs.\n \n-* less than 10 minutes\n-* an IDE\n-* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n-* Apache Maven 3.5.3+\n+=== JDBC datasource\n \n-== Creating the Maven project\n+Add the `agroal` extension plus one of `jdbc-derby`, `jdbc-h2`, `jdbc-mariadb`, `jdbc-mssql`, `jdbc-mysql` or `jdbc-postgresql`.\n \n-First, we need a new project. Create a new project with the following command:\n+Then configure your datasource:\n \n-[source,shell,subs=attributes+]\n+[source, properties]\n ----\n-mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n-    -DprojectGroupId=org.acme \\\n-    -DprojectArtifactId=agroal-quickstart \\\n-    -DclassName=\"org.acme.datasource.GreetingResource\" \\\n-    -Dpath=\"/hello\"\n-cd agroal-quickstart\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=<your username>\n+quarkus.datasource.password=<your password>\n+\n+quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/hibernate_orm_test\n+quarkus.datasource.jdbc.min-size=4\n+quarkus.datasource.jdbc.max-size=16\n ----\n \n-This will generate:\n+=== Reactive datasource\n+\n+Add either the `reactive-pg-client` or the `reactive-mysql-client` extension.\n+\n+Then configure your reactive datasource:\n+\n+[source, properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=<your username>\n+quarkus.datasource.password=<your password>\n+\n+quarkus.datasource.reactive.url=postgresql:///your_database\n+quarkus.datasource.reactive.max-size=20\n+----\n \n-* the Maven structure\n-* a landing page accessible on `http://localhost:8080`\n-* an example `Dockerfile` files for both `native` and `jvm` modes\n-* the application configuration file\n-* an `org.acme.datasource.GreetingResource` resource\n-* an example integration test\n+== Default datasource\n \n-== Adding maven dependencies\n+A datasource can be either a JDBC datasource, a reactive one or both.\n+It all depends on how you configure it and which extensions you added to your project.\n \n-Next, you will need to add the `quarkus-agroal` dependency to your project.\n+To define a datasource, start with the following:\n+\n+[source, properties]\n+----\n+quarkus.datasource.db-kind=h2\n+----\n+\n+The database kind defines which type of database you will connect to.\n+\n+We currently include these built-in database kinds:\n+\n+* Derby: `derby`\n+* H2: `h2`\n+* MariaDB: `mariadb`\n+* Microsoft SQL Server: `mssql`\n+* MySQL: `mysql`\n+* PostgreSQL: `postgresql`, `pgsql` or `pg`\n+\n+Note that these database kinds only facilitate things.\n+For instance, when we have a JDBC driver extension for a given kind,\n+we resolve the JDBC driver to use automatically so you don't need to configure it yourself.\n+If you want to use a database kind outside of this list, just use `other` or whatever name you prefer.\n+\n+There is a good chance you will need to define some credentials to access your database.\n+\n+This is done by configuring the following properties:\n+\n+[source, properties]\n+----\n+quarkus.datasource.username=<your username>\n+quarkus.datasource.password=<your password>\n+----\n \n+You can also retrieve the password from Vault by link:vault#datasource[using a credential provider] for your datasource.\n+\n+Once you have defined the database kind and the credentials, you are ready to configure either a JDBC datasource, a reactive one. Or both.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08136974801d55925324e6818ba8ca0f823b47e1"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjc5NTg3OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/datasource.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMjowMDowMlrOF1btyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMjowMDowMlrOF1btyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3MjkzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If you want control over the datasource, Quarkus uses CDI so you can inject the datasource in any managed bean:\n          \n          \n            \n            If for whatever reason, access to the datasource is needed in code, it can be obtained as any other bean in the following manner:", "url": "https://github.com/quarkusio/quarkus/pull/7785#discussion_r391572936", "createdAt": "2020-03-12T12:00:02Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/datasource.adoc", "diffHunk": "@@ -99,161 +165,209 @@ To install the PostgreSQL driver dependency for instance, just run the following\n ./mvnw quarkus:add-extension -Dextensions=\"jdbc-postgresql\"\n ----\n \n-== Configuring the datasource\n+==== Configure the JDBC connection\n \n-Once the dependencies are added to your pom.xml file, you'll need to configure Agroal.\n+Configuring your JDBC connection is easy, the only mandatory property is the JDBC URL.\n \n-This is done in the `src/main/resources/application.properties` file.\n+[source, properties]\n+----\n+quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/hibernate_orm_test\n+----\n \n-A viable configuration file would be:\n+[NOTE]\n+====\n+Note the `jdbc` prefix in the property name.\n+All the configuration properties specific to JDBC have this prefix.\n+====\n \n-[source,properties]\n---\n-quarkus.datasource.url=jdbc:h2:tcp://localhost/mem:default\n-quarkus.datasource.driver=org.h2.Driver\n-quarkus.datasource.username=username-default\n-quarkus.datasource.min-size=3\n-quarkus.datasource.max-size=13\n---\n+[TIP]\n+====\n+For more information about the JDBC URL format, please refer to the <<jdbc-url,JDBC url reference section>>.\n+====\n \n-There are other configuration options, detailed below.\n+When using one of the built-in datasource kinds, the JDBC driver is resolved automatically to the following values:\n \n-[TIP]\n-For more information about the Agroal extension configuration please refer to the <<configuration-reference, Configuration Reference>>.\n+.Database kind to JDBC driver mapping\n+|===\n+|Database kind |JDBC driver |XA driver\n \n-=== JDBC URL configurations\n+|`derby`\n+|`org.apache.derby.jdbc.ClientDriver`\n+|`org.apache.derby.jdbc.ClientXADataSource`\n \n-Each of the supported databases contains different JDBC URL configuration options.\n-Going into each of those options is beyond the scope of this document, but it gives an overview of each database URL and link to the official documentation.\n+|`h2`\n+|`org.h2.Driver`\n+|`org.h2.jdbcx.JdbcDataSource`\n \n-==== H2\n+|`mariadb`\n+|`org.mariadb.jdbc.Driver`\n+|`org.mariadb.jdbc.MySQLDataSource`\n \n-`jdbc:h2:{ {.|mem:}[name] | [file:]fileName | {tcp|ssl}:[//]server[:port][,server2[:port]]/name }[;key=value...]`\n+|`mssql`\n+|`com.microsoft.sqlserver.jdbc.SQLServerDriver`\n+|`com.microsoft.sqlserver.jdbc.SQLServerXADataSource`\n \n-Example:: `jdbc:h2:tcp://localhost/~/test`, `jdbc:h2:mem:myDB`\n+|`mysql`\n+|`com.mysql.cj.jdbc.Driver`\n+|`com.mysql.cj.jdbc.MysqlXADataSource`\n \n-H2 is an embedded database.\n-It can run as a server, based on a file, or live completely in memory.\n-All of these options are available as listed above.\n-You can find more information at the https://h2database.com/html/features.html?highlight=url&search=url#database_url[official documentation].\n+|`postgresql`\n+|`org.postgresql.Driver`\n+|`org.postgresql.xa.PGXADataSource`\n+|===\n \n-==== PostgreSQL\n+[TIP]\n+====\n+As previously stated, most of the time, this automatic resolution will suit you and\n+you won't need to configure the driver.\n+====\n \n-PostgreSQL only runs as a server, as do the rest of the databases below.\n-As such, you must specify connection details, or use the defaults.\n+Note that you can still define a specific driver if you need to (for instance for using the OpenTracing driver)\n+or if you want to use a database for which we don't have a built-in JDBC driver extension.\n \n-`jdbc:postgresql:[//][host][:port][/database][?key=value...]`\n+Defining a specific JDBC driver is as simple as:\n \n-Example:: `jdbc:postgresql://localhost/test`\n+[source, properties]\n+----\n+quarkus.datasource.jdbc.driver=io.opentracing.contrib.jdbc.TracingDriver\n+----\n \n-Defaults for the different parts are as follows:\n+==== More configuration\n \n-`host`:: localhost\n-`port`:: 5432\n-`database`:: same name as the username\n+You can configure a lot more things, for instance the size of the connection pool.\n \n-The https://jdbc.postgresql.org/documentation/head/connect.html[official documentation] go into more detail and list optional parameters as well.\n+Please refer to the <<jdbc-configuration,JDBC configuration reference>> for all the details about the JDBC configuration knobs.\n \n-==== MariaDB\n+==== Consuming the datasource\n \n-`jdbc:mariadb:[replication:|failover:|sequential:|aurora:]//<hostDescription>[,<hostDescription>...]/[database][?<key1>=<value1>[&<key2>=<value2>]]`\n- hostDescription:: `<host>[:<portnumber>]  or address=(host=<host>)[(port=<portnumber>)][(type=(master|slave))]`\n+If you are using Hibernate ORM, the datasource will be consumed automatically.\n \n-Example:: `jdbc:mariadb://localhost:3306/test`\n+If you want control over the datasource, Quarkus uses CDI so you can inject the datasource in any managed bean:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08136974801d55925324e6818ba8ca0f823b47e1"}, "originalPosition": 301}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjc5NzUxOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/datasource.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMjowMDozM1rOF1buyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMjoxMTo0OVrOF1cDRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3MzE5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Depending on if you wish to use MySQL/MariaDB or PostgreSQL, you need to add either the `quarkus-reactive-pg-client`\n          \n          \n            \n            Depending on whether you wish to use MySQL/MariaDB or PostgreSQL, you need to add either the `quarkus-reactive-pg-client`", "url": "https://github.com/quarkusio/quarkus/pull/7785#discussion_r391573192", "createdAt": "2020-03-12T12:00:33Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/datasource.adoc", "diffHunk": "@@ -99,161 +165,209 @@ To install the PostgreSQL driver dependency for instance, just run the following\n ./mvnw quarkus:add-extension -Dextensions=\"jdbc-postgresql\"\n ----\n \n-== Configuring the datasource\n+==== Configure the JDBC connection\n \n-Once the dependencies are added to your pom.xml file, you'll need to configure Agroal.\n+Configuring your JDBC connection is easy, the only mandatory property is the JDBC URL.\n \n-This is done in the `src/main/resources/application.properties` file.\n+[source, properties]\n+----\n+quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/hibernate_orm_test\n+----\n \n-A viable configuration file would be:\n+[NOTE]\n+====\n+Note the `jdbc` prefix in the property name.\n+All the configuration properties specific to JDBC have this prefix.\n+====\n \n-[source,properties]\n---\n-quarkus.datasource.url=jdbc:h2:tcp://localhost/mem:default\n-quarkus.datasource.driver=org.h2.Driver\n-quarkus.datasource.username=username-default\n-quarkus.datasource.min-size=3\n-quarkus.datasource.max-size=13\n---\n+[TIP]\n+====\n+For more information about the JDBC URL format, please refer to the <<jdbc-url,JDBC url reference section>>.\n+====\n \n-There are other configuration options, detailed below.\n+When using one of the built-in datasource kinds, the JDBC driver is resolved automatically to the following values:\n \n-[TIP]\n-For more information about the Agroal extension configuration please refer to the <<configuration-reference, Configuration Reference>>.\n+.Database kind to JDBC driver mapping\n+|===\n+|Database kind |JDBC driver |XA driver\n \n-=== JDBC URL configurations\n+|`derby`\n+|`org.apache.derby.jdbc.ClientDriver`\n+|`org.apache.derby.jdbc.ClientXADataSource`\n \n-Each of the supported databases contains different JDBC URL configuration options.\n-Going into each of those options is beyond the scope of this document, but it gives an overview of each database URL and link to the official documentation.\n+|`h2`\n+|`org.h2.Driver`\n+|`org.h2.jdbcx.JdbcDataSource`\n \n-==== H2\n+|`mariadb`\n+|`org.mariadb.jdbc.Driver`\n+|`org.mariadb.jdbc.MySQLDataSource`\n \n-`jdbc:h2:{ {.|mem:}[name] | [file:]fileName | {tcp|ssl}:[//]server[:port][,server2[:port]]/name }[;key=value...]`\n+|`mssql`\n+|`com.microsoft.sqlserver.jdbc.SQLServerDriver`\n+|`com.microsoft.sqlserver.jdbc.SQLServerXADataSource`\n \n-Example:: `jdbc:h2:tcp://localhost/~/test`, `jdbc:h2:mem:myDB`\n+|`mysql`\n+|`com.mysql.cj.jdbc.Driver`\n+|`com.mysql.cj.jdbc.MysqlXADataSource`\n \n-H2 is an embedded database.\n-It can run as a server, based on a file, or live completely in memory.\n-All of these options are available as listed above.\n-You can find more information at the https://h2database.com/html/features.html?highlight=url&search=url#database_url[official documentation].\n+|`postgresql`\n+|`org.postgresql.Driver`\n+|`org.postgresql.xa.PGXADataSource`\n+|===\n \n-==== PostgreSQL\n+[TIP]\n+====\n+As previously stated, most of the time, this automatic resolution will suit you and\n+you won't need to configure the driver.\n+====\n \n-PostgreSQL only runs as a server, as do the rest of the databases below.\n-As such, you must specify connection details, or use the defaults.\n+Note that you can still define a specific driver if you need to (for instance for using the OpenTracing driver)\n+or if you want to use a database for which we don't have a built-in JDBC driver extension.\n \n-`jdbc:postgresql:[//][host][:port][/database][?key=value...]`\n+Defining a specific JDBC driver is as simple as:\n \n-Example:: `jdbc:postgresql://localhost/test`\n+[source, properties]\n+----\n+quarkus.datasource.jdbc.driver=io.opentracing.contrib.jdbc.TracingDriver\n+----\n \n-Defaults for the different parts are as follows:\n+==== More configuration\n \n-`host`:: localhost\n-`port`:: 5432\n-`database`:: same name as the username\n+You can configure a lot more things, for instance the size of the connection pool.\n \n-The https://jdbc.postgresql.org/documentation/head/connect.html[official documentation] go into more detail and list optional parameters as well.\n+Please refer to the <<jdbc-configuration,JDBC configuration reference>> for all the details about the JDBC configuration knobs.\n \n-==== MariaDB\n+==== Consuming the datasource\n \n-`jdbc:mariadb:[replication:|failover:|sequential:|aurora:]//<hostDescription>[,<hostDescription>...]/[database][?<key1>=<value1>[&<key2>=<value2>]]`\n- hostDescription:: `<host>[:<portnumber>]  or address=(host=<host>)[(port=<portnumber>)][(type=(master|slave))]`\n+If you are using Hibernate ORM, the datasource will be consumed automatically.\n \n-Example:: `jdbc:mariadb://localhost:3306/test`\n+If you want control over the datasource, Quarkus uses CDI so you can inject the datasource in any managed bean:\n \n-You can find more information about this feature and others detailed in the https://mariadb.com/kb/en/library/about-mariadb-connector-j/[official documentation].\n+[source,java]\n+----\n+@Inject\n+AgroalDataSource defaultDataSource;\n+----\n \n-==== MySQL\n+In the above example, the type is `AgroalDataSource` which is a subtype of `javax.sql.DataSource`.\n+Because of this, you can also use `javax.sql.DataSource` as the injected type.\n \n-`jdbc:mysql:[replication:|failover:|sequential:|aurora:]//<hostDescription>[,<hostDescription>...]/[database][?<key1>=<value1>[&<key2>=<value2>]]`\n- hostDescription:: `<host>[:<portnumber>]  or address=(host=<host>)[(port=<portnumber>)][(type=(master|slave))]`\n+=== Reactive datasource\n \n-Example:: `jdbc:mysql://localhost:3306/test`\n+If you prefer using a reactive datasource, Quarkus offers MySQL/MariaDB and PostgreSQL reactive clients.\n \n-You can find more information about this feature and others detailed in the https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference.html[official documentation].\n+==== Install the Maven dependencies\n \n-==== Microsoft SQL Server\n+Depending on if you wish to use MySQL/MariaDB or PostgreSQL, you need to add either the `quarkus-reactive-pg-client`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08136974801d55925324e6818ba8ca0f823b47e1"}, "originalPosition": 325}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3NjU3Nw==", "bodyText": "@geoand should it be Depending on whether you wish .. ?", "url": "https://github.com/quarkusio/quarkus/pull/7785#discussion_r391576577", "createdAt": "2020-03-12T12:08:00Z", "author": {"login": "machi1990"}, "path": "docs/src/main/asciidoc/datasource.adoc", "diffHunk": "@@ -99,161 +165,209 @@ To install the PostgreSQL driver dependency for instance, just run the following\n ./mvnw quarkus:add-extension -Dextensions=\"jdbc-postgresql\"\n ----\n \n-== Configuring the datasource\n+==== Configure the JDBC connection\n \n-Once the dependencies are added to your pom.xml file, you'll need to configure Agroal.\n+Configuring your JDBC connection is easy, the only mandatory property is the JDBC URL.\n \n-This is done in the `src/main/resources/application.properties` file.\n+[source, properties]\n+----\n+quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/hibernate_orm_test\n+----\n \n-A viable configuration file would be:\n+[NOTE]\n+====\n+Note the `jdbc` prefix in the property name.\n+All the configuration properties specific to JDBC have this prefix.\n+====\n \n-[source,properties]\n---\n-quarkus.datasource.url=jdbc:h2:tcp://localhost/mem:default\n-quarkus.datasource.driver=org.h2.Driver\n-quarkus.datasource.username=username-default\n-quarkus.datasource.min-size=3\n-quarkus.datasource.max-size=13\n---\n+[TIP]\n+====\n+For more information about the JDBC URL format, please refer to the <<jdbc-url,JDBC url reference section>>.\n+====\n \n-There are other configuration options, detailed below.\n+When using one of the built-in datasource kinds, the JDBC driver is resolved automatically to the following values:\n \n-[TIP]\n-For more information about the Agroal extension configuration please refer to the <<configuration-reference, Configuration Reference>>.\n+.Database kind to JDBC driver mapping\n+|===\n+|Database kind |JDBC driver |XA driver\n \n-=== JDBC URL configurations\n+|`derby`\n+|`org.apache.derby.jdbc.ClientDriver`\n+|`org.apache.derby.jdbc.ClientXADataSource`\n \n-Each of the supported databases contains different JDBC URL configuration options.\n-Going into each of those options is beyond the scope of this document, but it gives an overview of each database URL and link to the official documentation.\n+|`h2`\n+|`org.h2.Driver`\n+|`org.h2.jdbcx.JdbcDataSource`\n \n-==== H2\n+|`mariadb`\n+|`org.mariadb.jdbc.Driver`\n+|`org.mariadb.jdbc.MySQLDataSource`\n \n-`jdbc:h2:{ {.|mem:}[name] | [file:]fileName | {tcp|ssl}:[//]server[:port][,server2[:port]]/name }[;key=value...]`\n+|`mssql`\n+|`com.microsoft.sqlserver.jdbc.SQLServerDriver`\n+|`com.microsoft.sqlserver.jdbc.SQLServerXADataSource`\n \n-Example:: `jdbc:h2:tcp://localhost/~/test`, `jdbc:h2:mem:myDB`\n+|`mysql`\n+|`com.mysql.cj.jdbc.Driver`\n+|`com.mysql.cj.jdbc.MysqlXADataSource`\n \n-H2 is an embedded database.\n-It can run as a server, based on a file, or live completely in memory.\n-All of these options are available as listed above.\n-You can find more information at the https://h2database.com/html/features.html?highlight=url&search=url#database_url[official documentation].\n+|`postgresql`\n+|`org.postgresql.Driver`\n+|`org.postgresql.xa.PGXADataSource`\n+|===\n \n-==== PostgreSQL\n+[TIP]\n+====\n+As previously stated, most of the time, this automatic resolution will suit you and\n+you won't need to configure the driver.\n+====\n \n-PostgreSQL only runs as a server, as do the rest of the databases below.\n-As such, you must specify connection details, or use the defaults.\n+Note that you can still define a specific driver if you need to (for instance for using the OpenTracing driver)\n+or if you want to use a database for which we don't have a built-in JDBC driver extension.\n \n-`jdbc:postgresql:[//][host][:port][/database][?key=value...]`\n+Defining a specific JDBC driver is as simple as:\n \n-Example:: `jdbc:postgresql://localhost/test`\n+[source, properties]\n+----\n+quarkus.datasource.jdbc.driver=io.opentracing.contrib.jdbc.TracingDriver\n+----\n \n-Defaults for the different parts are as follows:\n+==== More configuration\n \n-`host`:: localhost\n-`port`:: 5432\n-`database`:: same name as the username\n+You can configure a lot more things, for instance the size of the connection pool.\n \n-The https://jdbc.postgresql.org/documentation/head/connect.html[official documentation] go into more detail and list optional parameters as well.\n+Please refer to the <<jdbc-configuration,JDBC configuration reference>> for all the details about the JDBC configuration knobs.\n \n-==== MariaDB\n+==== Consuming the datasource\n \n-`jdbc:mariadb:[replication:|failover:|sequential:|aurora:]//<hostDescription>[,<hostDescription>...]/[database][?<key1>=<value1>[&<key2>=<value2>]]`\n- hostDescription:: `<host>[:<portnumber>]  or address=(host=<host>)[(port=<portnumber>)][(type=(master|slave))]`\n+If you are using Hibernate ORM, the datasource will be consumed automatically.\n \n-Example:: `jdbc:mariadb://localhost:3306/test`\n+If you want control over the datasource, Quarkus uses CDI so you can inject the datasource in any managed bean:\n \n-You can find more information about this feature and others detailed in the https://mariadb.com/kb/en/library/about-mariadb-connector-j/[official documentation].\n+[source,java]\n+----\n+@Inject\n+AgroalDataSource defaultDataSource;\n+----\n \n-==== MySQL\n+In the above example, the type is `AgroalDataSource` which is a subtype of `javax.sql.DataSource`.\n+Because of this, you can also use `javax.sql.DataSource` as the injected type.\n \n-`jdbc:mysql:[replication:|failover:|sequential:|aurora:]//<hostDescription>[,<hostDescription>...]/[database][?<key1>=<value1>[&<key2>=<value2>]]`\n- hostDescription:: `<host>[:<portnumber>]  or address=(host=<host>)[(port=<portnumber>)][(type=(master|slave))]`\n+=== Reactive datasource\n \n-Example:: `jdbc:mysql://localhost:3306/test`\n+If you prefer using a reactive datasource, Quarkus offers MySQL/MariaDB and PostgreSQL reactive clients.\n \n-You can find more information about this feature and others detailed in the https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference.html[official documentation].\n+==== Install the Maven dependencies\n \n-==== Microsoft SQL Server\n+Depending on if you wish to use MySQL/MariaDB or PostgreSQL, you need to add either the `quarkus-reactive-pg-client`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3MzE5Mg=="}, "originalCommit": {"oid": "08136974801d55925324e6818ba8ca0f823b47e1"}, "originalPosition": 325}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3ODQzNg==", "bodyText": "Yup, updated.\nDon't be surprised when you see my suggestions miss words. That happens to me very often...", "url": "https://github.com/quarkusio/quarkus/pull/7785#discussion_r391578436", "createdAt": "2020-03-12T12:11:49Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/datasource.adoc", "diffHunk": "@@ -99,161 +165,209 @@ To install the PostgreSQL driver dependency for instance, just run the following\n ./mvnw quarkus:add-extension -Dextensions=\"jdbc-postgresql\"\n ----\n \n-== Configuring the datasource\n+==== Configure the JDBC connection\n \n-Once the dependencies are added to your pom.xml file, you'll need to configure Agroal.\n+Configuring your JDBC connection is easy, the only mandatory property is the JDBC URL.\n \n-This is done in the `src/main/resources/application.properties` file.\n+[source, properties]\n+----\n+quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/hibernate_orm_test\n+----\n \n-A viable configuration file would be:\n+[NOTE]\n+====\n+Note the `jdbc` prefix in the property name.\n+All the configuration properties specific to JDBC have this prefix.\n+====\n \n-[source,properties]\n---\n-quarkus.datasource.url=jdbc:h2:tcp://localhost/mem:default\n-quarkus.datasource.driver=org.h2.Driver\n-quarkus.datasource.username=username-default\n-quarkus.datasource.min-size=3\n-quarkus.datasource.max-size=13\n---\n+[TIP]\n+====\n+For more information about the JDBC URL format, please refer to the <<jdbc-url,JDBC url reference section>>.\n+====\n \n-There are other configuration options, detailed below.\n+When using one of the built-in datasource kinds, the JDBC driver is resolved automatically to the following values:\n \n-[TIP]\n-For more information about the Agroal extension configuration please refer to the <<configuration-reference, Configuration Reference>>.\n+.Database kind to JDBC driver mapping\n+|===\n+|Database kind |JDBC driver |XA driver\n \n-=== JDBC URL configurations\n+|`derby`\n+|`org.apache.derby.jdbc.ClientDriver`\n+|`org.apache.derby.jdbc.ClientXADataSource`\n \n-Each of the supported databases contains different JDBC URL configuration options.\n-Going into each of those options is beyond the scope of this document, but it gives an overview of each database URL and link to the official documentation.\n+|`h2`\n+|`org.h2.Driver`\n+|`org.h2.jdbcx.JdbcDataSource`\n \n-==== H2\n+|`mariadb`\n+|`org.mariadb.jdbc.Driver`\n+|`org.mariadb.jdbc.MySQLDataSource`\n \n-`jdbc:h2:{ {.|mem:}[name] | [file:]fileName | {tcp|ssl}:[//]server[:port][,server2[:port]]/name }[;key=value...]`\n+|`mssql`\n+|`com.microsoft.sqlserver.jdbc.SQLServerDriver`\n+|`com.microsoft.sqlserver.jdbc.SQLServerXADataSource`\n \n-Example:: `jdbc:h2:tcp://localhost/~/test`, `jdbc:h2:mem:myDB`\n+|`mysql`\n+|`com.mysql.cj.jdbc.Driver`\n+|`com.mysql.cj.jdbc.MysqlXADataSource`\n \n-H2 is an embedded database.\n-It can run as a server, based on a file, or live completely in memory.\n-All of these options are available as listed above.\n-You can find more information at the https://h2database.com/html/features.html?highlight=url&search=url#database_url[official documentation].\n+|`postgresql`\n+|`org.postgresql.Driver`\n+|`org.postgresql.xa.PGXADataSource`\n+|===\n \n-==== PostgreSQL\n+[TIP]\n+====\n+As previously stated, most of the time, this automatic resolution will suit you and\n+you won't need to configure the driver.\n+====\n \n-PostgreSQL only runs as a server, as do the rest of the databases below.\n-As such, you must specify connection details, or use the defaults.\n+Note that you can still define a specific driver if you need to (for instance for using the OpenTracing driver)\n+or if you want to use a database for which we don't have a built-in JDBC driver extension.\n \n-`jdbc:postgresql:[//][host][:port][/database][?key=value...]`\n+Defining a specific JDBC driver is as simple as:\n \n-Example:: `jdbc:postgresql://localhost/test`\n+[source, properties]\n+----\n+quarkus.datasource.jdbc.driver=io.opentracing.contrib.jdbc.TracingDriver\n+----\n \n-Defaults for the different parts are as follows:\n+==== More configuration\n \n-`host`:: localhost\n-`port`:: 5432\n-`database`:: same name as the username\n+You can configure a lot more things, for instance the size of the connection pool.\n \n-The https://jdbc.postgresql.org/documentation/head/connect.html[official documentation] go into more detail and list optional parameters as well.\n+Please refer to the <<jdbc-configuration,JDBC configuration reference>> for all the details about the JDBC configuration knobs.\n \n-==== MariaDB\n+==== Consuming the datasource\n \n-`jdbc:mariadb:[replication:|failover:|sequential:|aurora:]//<hostDescription>[,<hostDescription>...]/[database][?<key1>=<value1>[&<key2>=<value2>]]`\n- hostDescription:: `<host>[:<portnumber>]  or address=(host=<host>)[(port=<portnumber>)][(type=(master|slave))]`\n+If you are using Hibernate ORM, the datasource will be consumed automatically.\n \n-Example:: `jdbc:mariadb://localhost:3306/test`\n+If you want control over the datasource, Quarkus uses CDI so you can inject the datasource in any managed bean:\n \n-You can find more information about this feature and others detailed in the https://mariadb.com/kb/en/library/about-mariadb-connector-j/[official documentation].\n+[source,java]\n+----\n+@Inject\n+AgroalDataSource defaultDataSource;\n+----\n \n-==== MySQL\n+In the above example, the type is `AgroalDataSource` which is a subtype of `javax.sql.DataSource`.\n+Because of this, you can also use `javax.sql.DataSource` as the injected type.\n \n-`jdbc:mysql:[replication:|failover:|sequential:|aurora:]//<hostDescription>[,<hostDescription>...]/[database][?<key1>=<value1>[&<key2>=<value2>]]`\n- hostDescription:: `<host>[:<portnumber>]  or address=(host=<host>)[(port=<portnumber>)][(type=(master|slave))]`\n+=== Reactive datasource\n \n-Example:: `jdbc:mysql://localhost:3306/test`\n+If you prefer using a reactive datasource, Quarkus offers MySQL/MariaDB and PostgreSQL reactive clients.\n \n-You can find more information about this feature and others detailed in the https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference.html[official documentation].\n+==== Install the Maven dependencies\n \n-==== Microsoft SQL Server\n+Depending on if you wish to use MySQL/MariaDB or PostgreSQL, you need to add either the `quarkus-reactive-pg-client`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3MzE5Mg=="}, "originalCommit": {"oid": "08136974801d55925324e6818ba8ca0f823b47e1"}, "originalPosition": 325}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjgwMjk1OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/datasource.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMjowMjoyOVrOF1byLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMjowMjoyOVrOF1byLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3NDA2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Most of the time, you won't have to do that as you will have either a JDBC driver or a reactive datasource extension and not both.\n          \n          \n            \n            Most of the time, the configuration above won't be necessary as either a JDBC driver or a reactive datasource extension will be present and not both.", "url": "https://github.com/quarkusio/quarkus/pull/7785#discussion_r391574062", "createdAt": "2020-03-12T12:02:29Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/datasource.adoc", "diffHunk": "@@ -99,161 +165,209 @@ To install the PostgreSQL driver dependency for instance, just run the following\n ./mvnw quarkus:add-extension -Dextensions=\"jdbc-postgresql\"\n ----\n \n-== Configuring the datasource\n+==== Configure the JDBC connection\n \n-Once the dependencies are added to your pom.xml file, you'll need to configure Agroal.\n+Configuring your JDBC connection is easy, the only mandatory property is the JDBC URL.\n \n-This is done in the `src/main/resources/application.properties` file.\n+[source, properties]\n+----\n+quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/hibernate_orm_test\n+----\n \n-A viable configuration file would be:\n+[NOTE]\n+====\n+Note the `jdbc` prefix in the property name.\n+All the configuration properties specific to JDBC have this prefix.\n+====\n \n-[source,properties]\n---\n-quarkus.datasource.url=jdbc:h2:tcp://localhost/mem:default\n-quarkus.datasource.driver=org.h2.Driver\n-quarkus.datasource.username=username-default\n-quarkus.datasource.min-size=3\n-quarkus.datasource.max-size=13\n---\n+[TIP]\n+====\n+For more information about the JDBC URL format, please refer to the <<jdbc-url,JDBC url reference section>>.\n+====\n \n-There are other configuration options, detailed below.\n+When using one of the built-in datasource kinds, the JDBC driver is resolved automatically to the following values:\n \n-[TIP]\n-For more information about the Agroal extension configuration please refer to the <<configuration-reference, Configuration Reference>>.\n+.Database kind to JDBC driver mapping\n+|===\n+|Database kind |JDBC driver |XA driver\n \n-=== JDBC URL configurations\n+|`derby`\n+|`org.apache.derby.jdbc.ClientDriver`\n+|`org.apache.derby.jdbc.ClientXADataSource`\n \n-Each of the supported databases contains different JDBC URL configuration options.\n-Going into each of those options is beyond the scope of this document, but it gives an overview of each database URL and link to the official documentation.\n+|`h2`\n+|`org.h2.Driver`\n+|`org.h2.jdbcx.JdbcDataSource`\n \n-==== H2\n+|`mariadb`\n+|`org.mariadb.jdbc.Driver`\n+|`org.mariadb.jdbc.MySQLDataSource`\n \n-`jdbc:h2:{ {.|mem:}[name] | [file:]fileName | {tcp|ssl}:[//]server[:port][,server2[:port]]/name }[;key=value...]`\n+|`mssql`\n+|`com.microsoft.sqlserver.jdbc.SQLServerDriver`\n+|`com.microsoft.sqlserver.jdbc.SQLServerXADataSource`\n \n-Example:: `jdbc:h2:tcp://localhost/~/test`, `jdbc:h2:mem:myDB`\n+|`mysql`\n+|`com.mysql.cj.jdbc.Driver`\n+|`com.mysql.cj.jdbc.MysqlXADataSource`\n \n-H2 is an embedded database.\n-It can run as a server, based on a file, or live completely in memory.\n-All of these options are available as listed above.\n-You can find more information at the https://h2database.com/html/features.html?highlight=url&search=url#database_url[official documentation].\n+|`postgresql`\n+|`org.postgresql.Driver`\n+|`org.postgresql.xa.PGXADataSource`\n+|===\n \n-==== PostgreSQL\n+[TIP]\n+====\n+As previously stated, most of the time, this automatic resolution will suit you and\n+you won't need to configure the driver.\n+====\n \n-PostgreSQL only runs as a server, as do the rest of the databases below.\n-As such, you must specify connection details, or use the defaults.\n+Note that you can still define a specific driver if you need to (for instance for using the OpenTracing driver)\n+or if you want to use a database for which we don't have a built-in JDBC driver extension.\n \n-`jdbc:postgresql:[//][host][:port][/database][?key=value...]`\n+Defining a specific JDBC driver is as simple as:\n \n-Example:: `jdbc:postgresql://localhost/test`\n+[source, properties]\n+----\n+quarkus.datasource.jdbc.driver=io.opentracing.contrib.jdbc.TracingDriver\n+----\n \n-Defaults for the different parts are as follows:\n+==== More configuration\n \n-`host`:: localhost\n-`port`:: 5432\n-`database`:: same name as the username\n+You can configure a lot more things, for instance the size of the connection pool.\n \n-The https://jdbc.postgresql.org/documentation/head/connect.html[official documentation] go into more detail and list optional parameters as well.\n+Please refer to the <<jdbc-configuration,JDBC configuration reference>> for all the details about the JDBC configuration knobs.\n \n-==== MariaDB\n+==== Consuming the datasource\n \n-`jdbc:mariadb:[replication:|failover:|sequential:|aurora:]//<hostDescription>[,<hostDescription>...]/[database][?<key1>=<value1>[&<key2>=<value2>]]`\n- hostDescription:: `<host>[:<portnumber>]  or address=(host=<host>)[(port=<portnumber>)][(type=(master|slave))]`\n+If you are using Hibernate ORM, the datasource will be consumed automatically.\n \n-Example:: `jdbc:mariadb://localhost:3306/test`\n+If you want control over the datasource, Quarkus uses CDI so you can inject the datasource in any managed bean:\n \n-You can find more information about this feature and others detailed in the https://mariadb.com/kb/en/library/about-mariadb-connector-j/[official documentation].\n+[source,java]\n+----\n+@Inject\n+AgroalDataSource defaultDataSource;\n+----\n \n-==== MySQL\n+In the above example, the type is `AgroalDataSource` which is a subtype of `javax.sql.DataSource`.\n+Because of this, you can also use `javax.sql.DataSource` as the injected type.\n \n-`jdbc:mysql:[replication:|failover:|sequential:|aurora:]//<hostDescription>[,<hostDescription>...]/[database][?<key1>=<value1>[&<key2>=<value2>]]`\n- hostDescription:: `<host>[:<portnumber>]  or address=(host=<host>)[(port=<portnumber>)][(type=(master|slave))]`\n+=== Reactive datasource\n \n-Example:: `jdbc:mysql://localhost:3306/test`\n+If you prefer using a reactive datasource, Quarkus offers MySQL/MariaDB and PostgreSQL reactive clients.\n \n-You can find more information about this feature and others detailed in the https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference.html[official documentation].\n+==== Install the Maven dependencies\n \n-==== Microsoft SQL Server\n+Depending on if you wish to use MySQL/MariaDB or PostgreSQL, you need to add either the `quarkus-reactive-pg-client`\n+or the `quarkus-reactive-mysql-client` extension.\n \n-Microsoft SQL Server takes a connection URL in the following form:\n+The installed extension must be consistent with the `quarkus.datasource.db-kind` you define in your datasource configuration.\n \n-`jdbc:sqlserver://[serverName[\\instanceName][:portNumber]][;property=value[;property=value]]`\n+==== Configure the JDBC datasource\n \n-Example:: `jdbc:sqlserver://localhost:1433;databaseName=AdventureWorks`\n+Once the driver is there, you just need to configure the connection URL.\n \n-The Microsoft SQL Server JDBC driver works essentially the same as the others.\n-More details can be found in the https://docs.microsoft.com/en-us/sql/connect/jdbc/connecting-to-sql-server-with-the-jdbc-driver?view=sql-server-2017[official documentation].\n+Optionally, but highly recommended, you should define a proper size for your connection pool.\n \n-==== Derby\n+[source,properties]\n+----\n+quarkus.datasource.reactive.url=postgresql:///your_database\n+quarkus.datasource.reactive.max-size=20\n+----\n \n-`jdbc:derby:[//serverName[:portNumber]/][memory:]databaseName[;property=value[;property=value]]`\n+=== Both\n \n-Example:: `jdbc:derby://localhost:1527/myDB`, `jdbc:derby:memory:myDB;create=true`\n+By default, if you include both a JDBC extension (+ Agroal) and a reactive datasource extension handling the given database kind,\n+both will be created.\n \n-Derby is an embedded database.\n-It can run as a server, based on a file, or live completely in memory.\n-All of these options are available as listed above.\n-You can find more information at the https://db.apache.org/derby/docs/10.8/devguide/cdevdvlp17453.html#cdevdvlp17453[official documentation].\n+If you want to disable the JDBC datasource explicitly, use:\n \n-== Injecting a Datasource\n+[source, properties]\n+----\n+quarkus.datasource.jdbc=false\n+----\n \n-Because Quarkus uses CDI, injecting a datasource is very simple:\n+If you want to disable the reactive datasource explicitly, use:\n \n-[source,java,indent=0]\n---\n-@Inject\n-AgroalDataSource defaultDataSource;\n---\n+[source, properties]\n+----\n+quarkus.datasource.reactive=false\n+----\n \n-In the above example, the type is `AgroalDataSource` which is a subtype of `javax.sql.DataSource`.\n-Because of this, you can also use `javax.sql.DataSource`.\n+[TIP]\n+====\n+Most of the time, you won't have to do that as you will have either a JDBC driver or a reactive datasource extension and not both.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08136974801d55925324e6818ba8ca0f823b47e1"}, "originalPosition": 384}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjgwMzkzOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/datasource.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMjowMjo1MVrOF1by0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMjowMjo1MVrOF1by0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3NDIyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            At the moment, Hibernate ORM supports only one persistence unit which uses the default datasource.\n          \n          \n            \n            Currently, Hibernate ORM supports only one persistence unit which uses the default datasource.", "url": "https://github.com/quarkusio/quarkus/pull/7785#discussion_r391574224", "createdAt": "2020-03-12T12:02:51Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/datasource.adoc", "diffHunk": "@@ -99,161 +165,209 @@ To install the PostgreSQL driver dependency for instance, just run the following\n ./mvnw quarkus:add-extension -Dextensions=\"jdbc-postgresql\"\n ----\n \n-== Configuring the datasource\n+==== Configure the JDBC connection\n \n-Once the dependencies are added to your pom.xml file, you'll need to configure Agroal.\n+Configuring your JDBC connection is easy, the only mandatory property is the JDBC URL.\n \n-This is done in the `src/main/resources/application.properties` file.\n+[source, properties]\n+----\n+quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/hibernate_orm_test\n+----\n \n-A viable configuration file would be:\n+[NOTE]\n+====\n+Note the `jdbc` prefix in the property name.\n+All the configuration properties specific to JDBC have this prefix.\n+====\n \n-[source,properties]\n---\n-quarkus.datasource.url=jdbc:h2:tcp://localhost/mem:default\n-quarkus.datasource.driver=org.h2.Driver\n-quarkus.datasource.username=username-default\n-quarkus.datasource.min-size=3\n-quarkus.datasource.max-size=13\n---\n+[TIP]\n+====\n+For more information about the JDBC URL format, please refer to the <<jdbc-url,JDBC url reference section>>.\n+====\n \n-There are other configuration options, detailed below.\n+When using one of the built-in datasource kinds, the JDBC driver is resolved automatically to the following values:\n \n-[TIP]\n-For more information about the Agroal extension configuration please refer to the <<configuration-reference, Configuration Reference>>.\n+.Database kind to JDBC driver mapping\n+|===\n+|Database kind |JDBC driver |XA driver\n \n-=== JDBC URL configurations\n+|`derby`\n+|`org.apache.derby.jdbc.ClientDriver`\n+|`org.apache.derby.jdbc.ClientXADataSource`\n \n-Each of the supported databases contains different JDBC URL configuration options.\n-Going into each of those options is beyond the scope of this document, but it gives an overview of each database URL and link to the official documentation.\n+|`h2`\n+|`org.h2.Driver`\n+|`org.h2.jdbcx.JdbcDataSource`\n \n-==== H2\n+|`mariadb`\n+|`org.mariadb.jdbc.Driver`\n+|`org.mariadb.jdbc.MySQLDataSource`\n \n-`jdbc:h2:{ {.|mem:}[name] | [file:]fileName | {tcp|ssl}:[//]server[:port][,server2[:port]]/name }[;key=value...]`\n+|`mssql`\n+|`com.microsoft.sqlserver.jdbc.SQLServerDriver`\n+|`com.microsoft.sqlserver.jdbc.SQLServerXADataSource`\n \n-Example:: `jdbc:h2:tcp://localhost/~/test`, `jdbc:h2:mem:myDB`\n+|`mysql`\n+|`com.mysql.cj.jdbc.Driver`\n+|`com.mysql.cj.jdbc.MysqlXADataSource`\n \n-H2 is an embedded database.\n-It can run as a server, based on a file, or live completely in memory.\n-All of these options are available as listed above.\n-You can find more information at the https://h2database.com/html/features.html?highlight=url&search=url#database_url[official documentation].\n+|`postgresql`\n+|`org.postgresql.Driver`\n+|`org.postgresql.xa.PGXADataSource`\n+|===\n \n-==== PostgreSQL\n+[TIP]\n+====\n+As previously stated, most of the time, this automatic resolution will suit you and\n+you won't need to configure the driver.\n+====\n \n-PostgreSQL only runs as a server, as do the rest of the databases below.\n-As such, you must specify connection details, or use the defaults.\n+Note that you can still define a specific driver if you need to (for instance for using the OpenTracing driver)\n+or if you want to use a database for which we don't have a built-in JDBC driver extension.\n \n-`jdbc:postgresql:[//][host][:port][/database][?key=value...]`\n+Defining a specific JDBC driver is as simple as:\n \n-Example:: `jdbc:postgresql://localhost/test`\n+[source, properties]\n+----\n+quarkus.datasource.jdbc.driver=io.opentracing.contrib.jdbc.TracingDriver\n+----\n \n-Defaults for the different parts are as follows:\n+==== More configuration\n \n-`host`:: localhost\n-`port`:: 5432\n-`database`:: same name as the username\n+You can configure a lot more things, for instance the size of the connection pool.\n \n-The https://jdbc.postgresql.org/documentation/head/connect.html[official documentation] go into more detail and list optional parameters as well.\n+Please refer to the <<jdbc-configuration,JDBC configuration reference>> for all the details about the JDBC configuration knobs.\n \n-==== MariaDB\n+==== Consuming the datasource\n \n-`jdbc:mariadb:[replication:|failover:|sequential:|aurora:]//<hostDescription>[,<hostDescription>...]/[database][?<key1>=<value1>[&<key2>=<value2>]]`\n- hostDescription:: `<host>[:<portnumber>]  or address=(host=<host>)[(port=<portnumber>)][(type=(master|slave))]`\n+If you are using Hibernate ORM, the datasource will be consumed automatically.\n \n-Example:: `jdbc:mariadb://localhost:3306/test`\n+If you want control over the datasource, Quarkus uses CDI so you can inject the datasource in any managed bean:\n \n-You can find more information about this feature and others detailed in the https://mariadb.com/kb/en/library/about-mariadb-connector-j/[official documentation].\n+[source,java]\n+----\n+@Inject\n+AgroalDataSource defaultDataSource;\n+----\n \n-==== MySQL\n+In the above example, the type is `AgroalDataSource` which is a subtype of `javax.sql.DataSource`.\n+Because of this, you can also use `javax.sql.DataSource` as the injected type.\n \n-`jdbc:mysql:[replication:|failover:|sequential:|aurora:]//<hostDescription>[,<hostDescription>...]/[database][?<key1>=<value1>[&<key2>=<value2>]]`\n- hostDescription:: `<host>[:<portnumber>]  or address=(host=<host>)[(port=<portnumber>)][(type=(master|slave))]`\n+=== Reactive datasource\n \n-Example:: `jdbc:mysql://localhost:3306/test`\n+If you prefer using a reactive datasource, Quarkus offers MySQL/MariaDB and PostgreSQL reactive clients.\n \n-You can find more information about this feature and others detailed in the https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference.html[official documentation].\n+==== Install the Maven dependencies\n \n-==== Microsoft SQL Server\n+Depending on if you wish to use MySQL/MariaDB or PostgreSQL, you need to add either the `quarkus-reactive-pg-client`\n+or the `quarkus-reactive-mysql-client` extension.\n \n-Microsoft SQL Server takes a connection URL in the following form:\n+The installed extension must be consistent with the `quarkus.datasource.db-kind` you define in your datasource configuration.\n \n-`jdbc:sqlserver://[serverName[\\instanceName][:portNumber]][;property=value[;property=value]]`\n+==== Configure the JDBC datasource\n \n-Example:: `jdbc:sqlserver://localhost:1433;databaseName=AdventureWorks`\n+Once the driver is there, you just need to configure the connection URL.\n \n-The Microsoft SQL Server JDBC driver works essentially the same as the others.\n-More details can be found in the https://docs.microsoft.com/en-us/sql/connect/jdbc/connecting-to-sql-server-with-the-jdbc-driver?view=sql-server-2017[official documentation].\n+Optionally, but highly recommended, you should define a proper size for your connection pool.\n \n-==== Derby\n+[source,properties]\n+----\n+quarkus.datasource.reactive.url=postgresql:///your_database\n+quarkus.datasource.reactive.max-size=20\n+----\n \n-`jdbc:derby:[//serverName[:portNumber]/][memory:]databaseName[;property=value[;property=value]]`\n+=== Both\n \n-Example:: `jdbc:derby://localhost:1527/myDB`, `jdbc:derby:memory:myDB;create=true`\n+By default, if you include both a JDBC extension (+ Agroal) and a reactive datasource extension handling the given database kind,\n+both will be created.\n \n-Derby is an embedded database.\n-It can run as a server, based on a file, or live completely in memory.\n-All of these options are available as listed above.\n-You can find more information at the https://db.apache.org/derby/docs/10.8/devguide/cdevdvlp17453.html#cdevdvlp17453[official documentation].\n+If you want to disable the JDBC datasource explicitly, use:\n \n-== Injecting a Datasource\n+[source, properties]\n+----\n+quarkus.datasource.jdbc=false\n+----\n \n-Because Quarkus uses CDI, injecting a datasource is very simple:\n+If you want to disable the reactive datasource explicitly, use:\n \n-[source,java,indent=0]\n---\n-@Inject\n-AgroalDataSource defaultDataSource;\n---\n+[source, properties]\n+----\n+quarkus.datasource.reactive=false\n+----\n \n-In the above example, the type is `AgroalDataSource` which is a subtype of `javax.sql.DataSource`.\n-Because of this, you can also use `javax.sql.DataSource`.\n+[TIP]\n+====\n+Most of the time, you won't have to do that as you will have either a JDBC driver or a reactive datasource extension and not both.\n+====\n \n == Multiple Datasources\n \n-Agroal allows you to configure multiple datasources.\n-It works exactly the same way as a single datasource, with one important change: a name.\n+=== Configuring Multiple Datasources\n+\n+For now, multiple datasources are only supported for JDBC and the Agroal extension.\n+So it is not currently possible to create multiple reactive datasources.\n+\n+[NOTE]\n+====\n+At the moment, Hibernate ORM supports only one persistence unit which uses the default datasource.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08136974801d55925324e6818ba8ca0f823b47e1"}, "originalPosition": 398}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4829, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}