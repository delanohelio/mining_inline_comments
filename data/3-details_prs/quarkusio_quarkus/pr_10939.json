{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1NzkzNTc0", "number": 10939, "title": "Allow reading configuration from Kubernetes secrets", "bodyText": "@geoand, @iocanel, this is a follow-up to #8644 as discussed in https://quarkusio.zulipchat.com/#narrow/stream/187030-users/topic/Using.20k8s.20secrets.20as.20a.20configuration.20source. See commit messages for details.\nI'm creating this as a draft so that CI can run in my fork, and also because:\n\nthis needs Dekorate release with dekorateio/dekorate#594;\nI need to write some documentation;\nthere's one TODO in the code that I'd like to discuss with you guys;\nI added a test, but if you guys think more tests are needed, I'd be happy to add them.", "createdAt": "2020-07-23T15:29:39Z", "url": "https://github.com/quarkusio/quarkus/pull/10939", "merged": true, "mergeCommit": {"oid": "f538ba593e47e07324a1ac157c6e38ff5407fc01"}, "closed": true, "closedAt": "2020-07-30T12:17:28Z", "author": {"login": "Ladicek"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc39sJogFqTQ1NDY0NzkzOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5tY8GABqjM1OTk3OTY3Nzg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NjQ3OTM4", "url": "https://github.com/quarkusio/quarkus/pull/10939#pullrequestreview-454647938", "createdAt": "2020-07-24T05:54:31Z", "commit": {"oid": "9ffc17d63e880f64272916ced572c613920f6ec1"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNTo1NDozMVrOG2j4ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjowMzo0NVrOG2kBsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NDE4Nw==", "bodyText": "Can we please have some Javadoc on what the purpose of this is? I know we don't have it in all Build Items, but let's at least try to add it for build items we change :)", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r459864187", "createdAt": "2020-07-24T05:54:31Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/spi/src/main/java/io/quarkus/kubernetes/spi/KubernetesRoleBindingBuildItem.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package io.quarkus.kubernetes.spi;\n+\n+import io.quarkus.builder.item.MultiBuildItem;\n+\n+public final class KubernetesRoleBindingBuildItem extends MultiBuildItem {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffc17d63e880f64272916ced572c613920f6ec1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NDI3Ng==", "bodyText": "Again, it would be great if we had some Javadoc here", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r459864276", "createdAt": "2020-07-24T05:54:55Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/spi/src/main/java/io/quarkus/kubernetes/spi/KubernetesRoleBuildItem.java", "diffHunk": "@@ -1,16 +1,64 @@\n package io.quarkus.kubernetes.spi;\n \n+import java.util.List;\n+\n import io.quarkus.builder.item.MultiBuildItem;\n \n public final class KubernetesRoleBuildItem extends MultiBuildItem {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffc17d63e880f64272916ced572c613920f6ec1"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NDY1MA==", "bodyText": "I don't remember TBH... To me it doesn't seem reasonable (it might have made sense in the past?).\n@iocanel do you remember?", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r459864650", "createdAt": "2020-07-24T05:56:14Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "diffHunk": "@@ -732,11 +736,16 @@ private void applyBuildItems(Session session,\n                 .forEach(p -> session.configurators().add(new AddPort(p)));\n \n         //Handle RBAC\n+        // TODO why this condition?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffc17d63e880f64272916ced572c613920f6ec1"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NTMyNQ==", "bodyText": "What is the rationale for multiple apiGroups? Is it useful for when Kubernetes API graduate?", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r459865325", "createdAt": "2020-07-24T05:58:59Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/spi/src/main/java/io/quarkus/kubernetes/spi/KubernetesRoleBuildItem.java", "diffHunk": "@@ -1,16 +1,64 @@\n package io.quarkus.kubernetes.spi;\n \n+import java.util.List;\n+\n import io.quarkus.builder.item.MultiBuildItem;\n \n public final class KubernetesRoleBuildItem extends MultiBuildItem {\n+    private final String name; // name of the Role resource\n+    private final List<PolicyRule> rules;\n+\n+    public KubernetesRoleBuildItem(String name, List<PolicyRule> rules) {\n+        this.name = name;\n+        this.rules = rules;\n+    }\n \n-    private final String role;\n+    public String getName() {\n+        return name;\n+    }\n \n-    public KubernetesRoleBuildItem(String role) {\n-        this.role = role;\n+    public List<PolicyRule> getRules() {\n+        return rules;\n     }\n \n-    public String getRole() {\n-        return this.role;\n+    public static final class PolicyRule {\n+        private final List<String> apiGroups;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffc17d63e880f64272916ced572c613920f6ec1"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NTgyNg==", "bodyText": "I am wondering if we should have a warning message when this is used without quarkus.kubernetes-config.secrets.enabled being true", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r459865826", "createdAt": "2020-07-24T06:00:45Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java", "diffHunk": "@@ -29,8 +29,15 @@\n     public Optional<List<String>> configMaps;\n \n     /**\n-     * Namespace to look for config maps. If this is not specified, then the namespace configured in the kubectl config context\n-     * is used. If the value is specified and the namespace doesn't exist, the application will fail to start.\n+     * Secrets to look for in the namespace that the Kubernetes Client has been configured for.\n+     * If you use this, you probably want to enable {@code quarkus.kubernetes-config.secrets.enabled}.\n+     */\n+    @ConfigItem\n+    public Optional<List<String>> secrets;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffc17d63e880f64272916ced572c613920f6ec1"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NjE1OA==", "bodyText": "This kind of thing is exactly why I LOVE AssertJ :)", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r459866158", "createdAt": "2020-07-24T06:02:08Z", "author": {"login": "geoand"}, "path": "integration-tests/kubernetes/quarkus-standard-way/src/test/java/io/quarkus/it/kubernetes/KubernetesConfigWithSecretsTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package io.quarkus.it.kubernetes;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.fabric8.kubernetes.api.model.HasMetadata;\n+import io.fabric8.kubernetes.api.model.rbac.PolicyRule;\n+import io.fabric8.kubernetes.api.model.rbac.Role;\n+import io.fabric8.kubernetes.api.model.rbac.RoleBinding;\n+import io.quarkus.bootstrap.model.AppArtifact;\n+import io.quarkus.builder.Version;\n+import io.quarkus.test.ProdBuildResults;\n+import io.quarkus.test.ProdModeTestResults;\n+import io.quarkus.test.QuarkusProdModeTest;\n+\n+public class KubernetesConfigWithSecretsTest {\n+\n+    @RegisterExtension\n+    static final QuarkusProdModeTest config = new QuarkusProdModeTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class).addClasses(GreetingResource.class))\n+            .setApplicationName(\"kubernetes-config-with-secrets\")\n+            .setApplicationVersion(\"0.1-SNAPSHOT\")\n+            .withConfigurationResource(\"kubernetes-config-with-secrets.properties\")\n+            .setForcedDependencies(Collections.singletonList(\n+                    new AppArtifact(\"io.quarkus\", \"quarkus-kubernetes-config\", Version.getVersion())));\n+\n+    @ProdBuildResults\n+    private ProdModeTestResults prodModeTestResults;\n+\n+    @Test\n+    public void assertGeneratedResources() throws IOException {\n+        Path kubernetesDir = prodModeTestResults.getBuildDir().resolve(\"kubernetes\");\n+        assertThat(kubernetesDir)\n+                .isDirectoryContaining(p -> p.getFileName().endsWith(\"kubernetes.json\"))\n+                .isDirectoryContaining(p -> p.getFileName().endsWith(\"kubernetes.yml\"));\n+        List<HasMetadata> kubernetesList = DeserializationUtil.deserializeAsList(kubernetesDir.resolve(\"kubernetes.yml\"));\n+\n+        assertThat(kubernetesList).filteredOn(h -> \"Role\".equals(h.getKind())).hasSize(1);\n+\n+        assertThat(kubernetesList).anySatisfy(res -> {\n+            assertThat(res).isInstanceOfSatisfying(Role.class, role -> {\n+                assertThat(role.getMetadata()).satisfies(m -> {\n+                    assertThat(m.getName()).isEqualTo(\"view-secrets\");\n+                });\n+\n+                assertThat(role.getRules()).hasOnlyOneElementSatisfying(r -> {\n+                    assertThat(r).isInstanceOfSatisfying(PolicyRule.class, rule -> {\n+                        assertThat(rule.getApiGroups()).containsExactly(\"\");\n+                        assertThat(rule.getResources()).containsExactly(\"secrets\");\n+                        assertThat(rule.getVerbs()).containsExactly(\"get\", \"list\", \"watch\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffc17d63e880f64272916ced572c613920f6ec1"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NjQ0Nw==", "bodyText": "Let's not forget to change this one :P", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r459866447", "createdAt": "2020-07-24T06:03:16Z", "author": {"login": "geoand"}, "path": "bom/application/pom.xml", "diffHunk": "@@ -145,7 +145,7 @@\n         <aws-alexa-sdk.version>2.30.0</aws-alexa-sdk.version>\n         <azure-functions-java-library.version>1.3.0</azure-functions-java-library.version>\n         <kotlin.version>1.3.72</kotlin.version>\n-        <dekorate.version>0.12.6</dekorate.version>\n+        <dekorate.version>0.12-SNAPSHOT</dekorate.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffc17d63e880f64272916ced572c613920f6ec1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NjU0Ng==", "bodyText": "LGTM, but this is one that @iocanel will have to give the OK for", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r459866546", "createdAt": "2020-07-24T06:03:45Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/AddRoleResourceDecorator.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package io.quarkus.kubernetes.deployment;\n+\n+import java.util.stream.Collectors;\n+\n+import io.dekorate.deps.kubernetes.api.model.KubernetesListBuilder;\n+import io.dekorate.deps.kubernetes.api.model.ObjectMeta;\n+import io.dekorate.deps.kubernetes.api.model.rbac.PolicyRuleBuilder;\n+import io.dekorate.deps.kubernetes.api.model.rbac.RoleBuilder;\n+import io.dekorate.kubernetes.decorator.ResourceProvidingDecorator;\n+import io.quarkus.kubernetes.spi.KubernetesRoleBuildItem;\n+\n+class AddRoleResourceDecorator extends ResourceProvidingDecorator<KubernetesListBuilder> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffc17d63e880f64272916ced572c613920f6ec1"}, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9ffc17d63e880f64272916ced572c613920f6ec1", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/9ffc17d63e880f64272916ced572c613920f6ec1", "committedDate": "2020-07-23T15:20:43Z", "message": "support reading configuration from Kubernetes Secrets\n\nThe `kubernetes` extension automatically generates a RoleBinding\nthat refers to the `view` ClusterRole. This ClusterRole doesn't\nallow access to secrets. This commit therefore adds a configuration\nproperty which, when enabled, makes the `kubernetes` extension\ngenerate a special Role `view-secrets` and a second RoleBinding\nreferring to that role. This configuration property is build-time\nonly and has no other effect.\n\nWith this configuration in place, there's nothing preventing\nthe application from reading secrets directly from the API server."}, "afterCommit": {"oid": "74eb333af3f9583e45502b6a641ee3e93bf6ce4b", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/74eb333af3f9583e45502b6a641ee3e93bf6ce4b", "committedDate": "2020-07-24T08:38:09Z", "message": "support reading configuration from Kubernetes Secrets\n\nThe `kubernetes` extension automatically generates a RoleBinding\nthat refers to the `view` ClusterRole. This ClusterRole doesn't\nallow access to secrets. This commit therefore adds a configuration\nproperty which, when enabled, makes the `kubernetes` extension\ngenerate a special Role `view-secrets` and a second RoleBinding\nreferring to that role. This configuration property is build-time\nonly and has no other effect.\n\nWith this configuration in place, there's nothing preventing\nthe application from reading Secrets directly from the API server.\n\nFor convenience, a warning is printed at runtime if configuration\nis read from Secrets yet the property is disabled."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NzIzMDA0", "url": "https://github.com/quarkusio/quarkus/pull/10939#pullrequestreview-454723004", "createdAt": "2020-07-24T08:42:23Z", "commit": {"oid": "74eb333af3f9583e45502b6a641ee3e93bf6ce4b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo0MjoyM1rOG2noBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo0MjoyM1rOG2noBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkyNTUxMA==", "bodyText": "Is it just me, or does the last sentence seem out of place?", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r459925510", "createdAt": "2020-07-24T08:42:23Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigRecorder.java", "diffHunk": "@@ -26,6 +26,17 @@\n                 KubernetesClientUtils.createClient(clientConfig)));\n     }\n \n+    public void warnAboutSecrets(KubernetesConfigSourceConfig config, KubernetesConfigBuildTimeConfig buildTimeConfig) {\n+        if (config.enabled\n+                && config.secrets.isPresent()\n+                && !config.secrets.get().isEmpty()\n+                && !buildTimeConfig.secretsEnabled) {\n+            log.warn(\"Configuration is read from Secrets \" + config.secrets.get()\n+                    + \", but quarkus.kubernetes-config.secrets.enabled is false.\"\n+                    + \" Check if your application's service account has enough permissions to read secrets.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74eb333af3f9583e45502b6a641ee3e93bf6ce4b"}, "originalPosition": 11}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "74eb333af3f9583e45502b6a641ee3e93bf6ce4b", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/74eb333af3f9583e45502b6a641ee3e93bf6ce4b", "committedDate": "2020-07-24T08:38:09Z", "message": "support reading configuration from Kubernetes Secrets\n\nThe `kubernetes` extension automatically generates a RoleBinding\nthat refers to the `view` ClusterRole. This ClusterRole doesn't\nallow access to secrets. This commit therefore adds a configuration\nproperty which, when enabled, makes the `kubernetes` extension\ngenerate a special Role `view-secrets` and a second RoleBinding\nreferring to that role. This configuration property is build-time\nonly and has no other effect.\n\nWith this configuration in place, there's nothing preventing\nthe application from reading Secrets directly from the API server.\n\nFor convenience, a warning is printed at runtime if configuration\nis read from Secrets yet the property is disabled."}, "afterCommit": {"oid": "dfc1f6e24129a7fc34017da44ee543ef0b781b5b", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/dfc1f6e24129a7fc34017da44ee543ef0b781b5b", "committedDate": "2020-07-24T09:08:22Z", "message": "support reading configuration from Kubernetes Secrets\n\nThe `kubernetes` extension automatically generates a RoleBinding\nthat refers to the `view` ClusterRole. This ClusterRole doesn't\nallow access to secrets. This commit therefore adds a configuration\nproperty which, when enabled, makes the `kubernetes` extension\ngenerate a special Role `view-secrets` and a second RoleBinding\nreferring to that role. This configuration property is build-time\nonly and has no other effect.\n\nWith this configuration in place, there's nothing preventing\nthe application from reading Secrets directly from the API server.\n\nFor convenience, a warning is printed at runtime if configuration\nis read from Secrets yet the property is disabled."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dfc1f6e24129a7fc34017da44ee543ef0b781b5b", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/dfc1f6e24129a7fc34017da44ee543ef0b781b5b", "committedDate": "2020-07-24T09:08:22Z", "message": "support reading configuration from Kubernetes Secrets\n\nThe `kubernetes` extension automatically generates a RoleBinding\nthat refers to the `view` ClusterRole. This ClusterRole doesn't\nallow access to secrets. This commit therefore adds a configuration\nproperty which, when enabled, makes the `kubernetes` extension\ngenerate a special Role `view-secrets` and a second RoleBinding\nreferring to that role. This configuration property is build-time\nonly and has no other effect.\n\nWith this configuration in place, there's nothing preventing\nthe application from reading Secrets directly from the API server.\n\nFor convenience, a warning is printed at runtime if configuration\nis read from Secrets yet the property is disabled."}, "afterCommit": {"oid": "412d10a478e859a394e4de1e1690022c2c7f53c9", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/412d10a478e859a394e4de1e1690022c2c7f53c9", "committedDate": "2020-07-24T12:47:53Z", "message": "support reading configuration from Kubernetes Secrets\n\nThe `kubernetes` extension automatically generates a RoleBinding\nthat refers to the `view` ClusterRole. This ClusterRole doesn't\nallow access to secrets. This commit therefore adds a configuration\nproperty which, when enabled, makes the `kubernetes` extension\ngenerate a special Role `view-secrets` and a second RoleBinding\nreferring to that role. This configuration property is build-time\nonly and has no other effect.\n\nWith this configuration in place, there's nothing preventing\nthe application from reading Secrets directly from the API server.\n\nFor convenience, a warning is printed at runtime if configuration\nis read from Secrets yet the property is disabled."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NDYwMTkx", "url": "https://github.com/quarkusio/quarkus/pull/10939#pullrequestreview-457460191", "createdAt": "2020-07-29T12:13:17Z", "commit": {"oid": "412d10a478e859a394e4de1e1690022c2c7f53c9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "412d10a478e859a394e4de1e1690022c2c7f53c9", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/412d10a478e859a394e4de1e1690022c2c7f53c9", "committedDate": "2020-07-24T12:47:53Z", "message": "support reading configuration from Kubernetes Secrets\n\nThe `kubernetes` extension automatically generates a RoleBinding\nthat refers to the `view` ClusterRole. This ClusterRole doesn't\nallow access to secrets. This commit therefore adds a configuration\nproperty which, when enabled, makes the `kubernetes` extension\ngenerate a special Role `view-secrets` and a second RoleBinding\nreferring to that role. This configuration property is build-time\nonly and has no other effect.\n\nWith this configuration in place, there's nothing preventing\nthe application from reading Secrets directly from the API server.\n\nFor convenience, a warning is printed at runtime if configuration\nis read from Secrets yet the property is disabled."}, "afterCommit": {"oid": "a19aab02d4b92dbc70bab44a11020e84b4ee1188", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/a19aab02d4b92dbc70bab44a11020e84b4ee1188", "committedDate": "2020-07-29T14:24:27Z", "message": "support reading configuration from Kubernetes Secrets\n\nThe `kubernetes` extension automatically generates a RoleBinding\nthat refers to the `view` ClusterRole. This ClusterRole doesn't\nallow access to secrets. This commit therefore adds a configuration\nproperty which, when enabled, makes the `kubernetes` extension\ngenerate a special Role `view-secrets` and a second RoleBinding\nreferring to that role. This configuration property is build-time\nonly and has no other effect.\n\nWith this configuration in place, there's nothing preventing\nthe application from reading Secrets directly from the API server.\n\nFor convenience, a warning is printed at runtime if configuration\nis read from Secrets yet the property is disabled."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a19aab02d4b92dbc70bab44a11020e84b4ee1188", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/a19aab02d4b92dbc70bab44a11020e84b4ee1188", "committedDate": "2020-07-29T14:24:27Z", "message": "support reading configuration from Kubernetes Secrets\n\nThe `kubernetes` extension automatically generates a RoleBinding\nthat refers to the `view` ClusterRole. This ClusterRole doesn't\nallow access to secrets. This commit therefore adds a configuration\nproperty which, when enabled, makes the `kubernetes` extension\ngenerate a special Role `view-secrets` and a second RoleBinding\nreferring to that role. This configuration property is build-time\nonly and has no other effect.\n\nWith this configuration in place, there's nothing preventing\nthe application from reading Secrets directly from the API server.\n\nFor convenience, a warning is printed at runtime if configuration\nis read from Secrets yet the property is disabled."}, "afterCommit": {"oid": "29c6d1124bf70844b81435eaa328b25a7fe09e7e", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/29c6d1124bf70844b81435eaa328b25a7fe09e7e", "committedDate": "2020-07-29T14:50:13Z", "message": "support reading configuration from Kubernetes Secrets\n\nThe `kubernetes` extension automatically generates a RoleBinding\nthat refers to the `view` ClusterRole. This ClusterRole doesn't\nallow access to secrets. This commit therefore adds a configuration\nproperty which, when enabled, makes the `kubernetes` extension\ngenerate a special Role `view-secrets` and a second RoleBinding\nreferring to that role. This configuration property is build-time\nonly and has no other effect.\n\nWith this configuration in place, there's nothing preventing\nthe application from reading Secrets directly from the API server.\n\nFor convenience, a warning is printed at runtime if configuration\nis read from Secrets yet the property is disabled."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4eab152a07579dea6c53cd0de8e668febb327019", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/4eab152a07579dea6c53cd0de8e668febb327019", "committedDate": "2020-07-29T16:12:31Z", "message": "restore the ConfigSource based on Kubernetes Secrets\n\nThis reverts commit 0c71c47152681cb23b1928a12b202c283e5e27fb\nand adds a couple of cleanups. Most importantly, the issue\nwhich caused this functionality to be removed remains:\nthe application by default runs under a role that doesn't have\naccess to secrets. This is marked with one TODO in the code\nand will be addressed in a subsequent commit."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e91c1d8668d0b2c1a815dbd5c171ad524cb89ad6", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/e91c1d8668d0b2c1a815dbd5c171ad524cb89ad6", "committedDate": "2020-07-29T16:12:31Z", "message": "support reading configuration from Kubernetes Secrets\n\nThe `kubernetes` extension automatically generates a RoleBinding\nthat refers to the `view` ClusterRole. This ClusterRole doesn't\nallow access to secrets. This commit therefore adds a configuration\nproperty which, when enabled, makes the `kubernetes` extension\ngenerate a special Role `view-secrets` and a second RoleBinding\nreferring to that role. This configuration property is build-time\nonly and has no other effect.\n\nWith this configuration in place, there's nothing preventing\nthe application from reading Secrets directly from the API server.\n\nFor convenience, a warning is printed at runtime if configuration\nis read from Secrets yet the property is disabled."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "571aaef97c885f436bb3ad7ca76ef21eba5e3d31", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/571aaef97c885f436bb3ad7ca76ef21eba5e3d31", "committedDate": "2020-07-29T16:12:31Z", "message": "make sure ConfigMap/Secret content isn't accidentally exposed"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c33bc0c0886211b0265398ce1540a0fed68dadc6", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/c33bc0c0886211b0265398ce1540a0fed68dadc6", "committedDate": "2020-07-29T15:52:47Z", "message": "make sure ConfigMap/Secret content isn't accidentally exposed"}, "afterCommit": {"oid": "571aaef97c885f436bb3ad7ca76ef21eba5e3d31", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/571aaef97c885f436bb3ad7ca76ef21eba5e3d31", "committedDate": "2020-07-29T16:12:31Z", "message": "make sure ConfigMap/Secret content isn't accidentally exposed"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1122, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}