{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NzA1MTYz", "number": 6923, "title": "doc: active record and repository patterns", "bodyText": "Fixes #6135\nFixes #6945\nThe following documentation changes are, for both MongoDB and Hibernate with Panache:\n\nRework the documentation to clearly present the two Panache flavours as equals in terms of support/implementation/...\nClearly name the two pattens : active records and repository\nAdd more repository documentation examples\nRestructure the documentation\n\nA PR on the quickstart will follows to duplicate the code to have exampes for both the active record and the repository patterns.", "createdAt": "2020-01-31T18:13:51Z", "url": "https://github.com/quarkusio/quarkus/pull/6923", "merged": true, "mergeCommit": {"oid": "8cc774721fa7bb0f3e98d7414ff1efc29e67e414"}, "closed": true, "closedAt": "2020-02-26T12:11:38Z", "author": {"login": "loicmathieu"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcAt33lAFqTM1MjI5MzYyNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIFoMLAFqTM2NDg0NzQ1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMjkzNjI3", "url": "https://github.com/quarkusio/quarkus/pull/6923#pullrequestreview-352293627", "createdAt": "2020-02-03T14:30:08Z", "commit": {"oid": "836f9d7a41b06d466648209cf7b887c7f157c2b0"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozMDowOFrOFkzQjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozMToyM1rOFkzTHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzMjg3OA==", "bodyText": "style wise, try and keep your sentences light. By definition what you write is what you recommend.\nAlso \"in general\", \"usually\" etc bring no value.\nAlso be positive, negations are always triggering some negative loops in the brain\nKeep sentences short.\nAdd custom queries on your entities outside of the entities themselves.\nThat way, you and your co-workers can find the easily and queries are right next to the object they operate on.\nAdding them as static methods in your entity class is the Panache Active Record way.", "url": "https://github.com/quarkusio/quarkus/pull/6923#discussion_r374132878", "createdAt": "2020-02-03T14:30:08Z", "author": {"login": "emmanuelbernard"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -198,8 +213,154 @@ List<String> namesButEmmanuels = persons\n \n NOTE: The `stream` methods require a transaction to work.\n \n+=== Adding entity methods\n+\n+In general, we recommend not adding custom queries for your entities outside of the entities themselves,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "836f9d7a41b06d466648209cf7b887c7f157c2b0"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzMzIzOA==", "bodyText": "s/Absolutely a/A/\nJust be factual, not theatrical.", "url": "https://github.com/quarkusio/quarkus/pull/6923#discussion_r374133238", "createdAt": "2020-02-03T14:30:48Z", "author": {"login": "emmanuelbernard"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -198,8 +213,154 @@ List<String> namesButEmmanuels = persons\n \n NOTE: The `stream` methods require a transaction to work.\n \n+=== Adding entity methods\n+\n+In general, we recommend not adding custom queries for your entities outside of the entities themselves,\n+to keep all model queries close to the models they operate on. So we recommend adding them as static methods\n+in your entity class:\n+\n+[source,java]\n+----\n+@Entity\n+public class Person extends PanacheEntity {\n+    public String name;\n+    public LocalDate birth;\n+    public Status status;\n+\n+    public static Person findByName(String name){\n+        return find(\"name\", name).firstResult();\n+    }\n+\n+    public static List<Person> findAlive(){\n+        return list(\"status\", Status.Alive);\n+    }\n+\n+    public static void deleteStefs(){\n+        delete(\"name\", \"Stef\");\n+    }\n+}\n+----\n+\n+== Solution 2: using the repository pattern\n+\n+=== Defining your repository\n+\n+When using Repositories, you can get the exact same convenient methods as with the active record pattern injected in your Repository,\n+by making them implements `PanacheRepository`:\n+\n+[source,java]\n+----\n+@ApplicationScoped\n+public class PersonRepository implements PanacheRepository<Person> {\n+\n+   // put your custom logic here as instance methods\n+\n+   public Person findByName(String name){\n+       return find(\"name\", name).firstResult();\n+   }\n+\n+   public List<Person> findAlive(){\n+       return list(\"status\", Status.Alive);\n+   }\n+\n+   public void deleteStefs(){\n+       delete(\"name\", \"Stef\");\n+  }\n+}\n+----\n+\n+Absolutely all the operations that are defined on `PanacheEntityBase` are available on your repository, so using it", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "836f9d7a41b06d466648209cf7b887c7f157c2b0"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzMzUzNA==", "bodyText": "Split sentence in 2, it's too long and hard to read.", "url": "https://github.com/quarkusio/quarkus/pull/6923#discussion_r374133534", "createdAt": "2020-02-03T14:31:23Z", "author": {"login": "emmanuelbernard"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -198,8 +213,154 @@ List<String> namesButEmmanuels = persons\n \n NOTE: The `stream` methods require a transaction to work.\n \n+=== Adding entity methods\n+\n+In general, we recommend not adding custom queries for your entities outside of the entities themselves,\n+to keep all model queries close to the models they operate on. So we recommend adding them as static methods\n+in your entity class:\n+\n+[source,java]\n+----\n+@Entity\n+public class Person extends PanacheEntity {\n+    public String name;\n+    public LocalDate birth;\n+    public Status status;\n+\n+    public static Person findByName(String name){\n+        return find(\"name\", name).firstResult();\n+    }\n+\n+    public static List<Person> findAlive(){\n+        return list(\"status\", Status.Alive);\n+    }\n+\n+    public static void deleteStefs(){\n+        delete(\"name\", \"Stef\");\n+    }\n+}\n+----\n+\n+== Solution 2: using the repository pattern\n+\n+=== Defining your repository\n+\n+When using Repositories, you can get the exact same convenient methods as with the active record pattern injected in your Repository,\n+by making them implements `PanacheRepository`:\n+\n+[source,java]\n+----\n+@ApplicationScoped\n+public class PersonRepository implements PanacheRepository<Person> {\n+\n+   // put your custom logic here as instance methods\n+\n+   public Person findByName(String name){\n+       return find(\"name\", name).firstResult();\n+   }\n+\n+   public List<Person> findAlive(){\n+       return list(\"status\", Status.Alive);\n+   }\n+\n+   public void deleteStefs(){\n+       delete(\"name\", \"Stef\");\n+  }\n+}\n+----\n+\n+Absolutely all the operations that are defined on `PanacheEntityBase` are available on your repository, so using it\n+is exactly the same except you need to inject it:\n+\n+[source,java]\n+----\n+@Inject\n+PersonRepository personRepository;\n+\n+@GET\n+public long count(){\n+    return personRepository.count();\n+}\n+----\n+\n+Even with repositories, you can keep your entities as subclasses of `PanacheEntity` in order to get the ID and public fields working,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "836f9d7a41b06d466648209cf7b887c7f157c2b0"}, "originalPosition": 123}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "836f9d7a41b06d466648209cf7b887c7f157c2b0", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/836f9d7a41b06d466648209cf7b887c7f157c2b0", "committedDate": "2020-01-31T18:08:00Z", "message": "doc: active record and repository patterns\n\nFixes #6135"}, "afterCommit": {"oid": "a537db7f0ba181357a7b6a3de72eba36164169cb", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/a537db7f0ba181357a7b6a3de72eba36164169cb", "committedDate": "2020-02-03T15:47:09Z", "message": "doc: active record and repository patterns\n\nFixes #6135"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a537db7f0ba181357a7b6a3de72eba36164169cb", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/a537db7f0ba181357a7b6a3de72eba36164169cb", "committedDate": "2020-02-03T15:47:09Z", "message": "doc: active record and repository patterns\n\nFixes #6135"}, "afterCommit": {"oid": "75544541ae6e25adb05ff363ae4b7341c9c71f17", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/75544541ae6e25adb05ff363ae4b7341c9c71f17", "committedDate": "2020-02-04T12:38:06Z", "message": "doc: active record and repository patterns\n\nFixes #6135 and #6945"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "75544541ae6e25adb05ff363ae4b7341c9c71f17", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/75544541ae6e25adb05ff363ae4b7341c9c71f17", "committedDate": "2020-02-04T12:38:06Z", "message": "doc: active record and repository patterns\n\nFixes #6135 and #6945"}, "afterCommit": {"oid": "d311e32bbddcce019dd5bba1cb2731ee42021638", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/d311e32bbddcce019dd5bba1cb2731ee42021638", "committedDate": "2020-02-10T10:39:24Z", "message": "doc: active record and repository patterns\n\nFixes #6135 and #6945"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NzQwMDEz", "url": "https://github.com/quarkusio/quarkus/pull/6923#pullrequestreview-359740013", "createdAt": "2020-02-17T13:39:15Z", "commit": {"oid": "d311e32bbddcce019dd5bba1cb2731ee42021638"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0ODI2ODA4", "url": "https://github.com/quarkusio/quarkus/pull/6923#pullrequestreview-364826808", "createdAt": "2020-02-26T11:34:54Z", "commit": {"oid": "d311e32bbddcce019dd5bba1cb2731ee42021638"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMTozNDo1NVrOFuoL3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMTo0MTo1OFrOFuoYHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQzNzIxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            NOTE: what you just see is the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.\n          \n          \n            \n            NOTE: what was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.", "url": "https://github.com/quarkusio/quarkus/pull/6923#discussion_r384437212", "createdAt": "2020-02-26T11:34:55Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -43,13 +43,26 @@ Does this look interesting? Read on!\n \n NOTE: the `list()` method might be surprising at first. It takes fragments of HQL (JP-QL) queries and contextualizes the rest. That makes for very concise but yet readable code.\n \n+NOTE: what you just see is the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d311e32bbddcce019dd5bba1cb2731ee42021638"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQzNzU2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Hibernate with Panache also provides the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheRepository`.\n          \n          \n            \n            Hibernate with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheRepository`.", "url": "https://github.com/quarkusio/quarkus/pull/6923#discussion_r384437569", "createdAt": "2020-02-26T11:35:42Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -43,13 +43,26 @@ Does this look interesting? Read on!\n \n NOTE: the `list()` method might be surprising at first. It takes fragments of HQL (JP-QL) queries and contextualizes the rest. That makes for very concise but yet readable code.\n \n+NOTE: what you just see is the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.\n+Hibernate with Panache also provides the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheRepository`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d311e32bbddcce019dd5bba1cb2731ee42021638"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQzODcwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            That way, you and your co-workers can find them easily, and queries are right next to the object they operate on.\n          \n          \n            \n            That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.", "url": "https://github.com/quarkusio/quarkus/pull/6923#discussion_r384438706", "createdAt": "2020-02-26T11:38:16Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -198,8 +213,194 @@ List<String> namesButEmmanuels = persons\n \n NOTE: The `stream` methods require a transaction to work.\n \n+=== Adding entity methods\n+\n+Add custom queries on your entities inside the entities themselves.\n+That way, you and your co-workers can find them easily, and queries are right next to the object they operate on.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d311e32bbddcce019dd5bba1cb2731ee42021638"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQzODk2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Quarkus will generates them for you. You can even extend `PanacheEntity` and take advantage of the default ID it provides.\n          \n          \n            \n            Quarkus will generate them for you. You can even extend `PanacheEntity` and take advantage of the default ID it provides.", "url": "https://github.com/quarkusio/quarkus/pull/6923#discussion_r384438965", "createdAt": "2020-02-26T11:38:50Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -198,8 +213,194 @@ List<String> namesButEmmanuels = persons\n \n NOTE: The `stream` methods require a transaction to work.\n \n+=== Adding entity methods\n+\n+Add custom queries on your entities inside the entities themselves.\n+That way, you and your co-workers can find them easily, and queries are right next to the object they operate on.\n+Adding them as static methods in your entity class is the Panache Active Record way.\n+\n+[source,java]\n+----\n+@Entity\n+public class Person extends PanacheEntity {\n+    public String name;\n+    public LocalDate birth;\n+    public Status status;\n+\n+    public static Person findByName(String name){\n+        return find(\"name\", name).firstResult();\n+    }\n+\n+    public static List<Person> findAlive(){\n+        return list(\"status\", Status.Alive);\n+    }\n+\n+    public static void deleteStefs(){\n+        delete(\"name\", \"Stef\");\n+    }\n+}\n+----\n+\n+== Solution 2: using the repository pattern\n+\n+\n+=== Defining your entity\n+\n+When using the repository pattern, you can define your entities as regular JPA entities.\n+\n+[source,java]\n+----\n+@Entity\n+public class Person {\n+    @Id @GeneratedValue private Long id;\n+    private String name;\n+    private LocalDate birth;\n+    private Status status;\n+\n+    public Long getId(){\n+        return id;\n+    }\n+    public void setId(Long id){\n+        this.id = id;\n+    }\n+    public String getName() {\n+        return name;\n+    }\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    public LocalDate getBirth() {\n+        return birth;\n+    }\n+    public void setBirth(LocalDate birth) {\n+        this.birth = birth;\n+    }\n+    public Status getStatus() {\n+        return status;\n+    }\n+    public void setStatus(Status status) {\n+        this.status = status;\n+    }\n+}\n+----\n+\n+TIP: If you don't want to bother defining getters/setters for your entities, you can make them extend `PanacheEntityBase` and\n+Quarkus will generates them for you. You can even extend `PanacheEntity` and take advantage of the default ID it provides.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d311e32bbddcce019dd5bba1cb2731ee42021638"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQzOTEwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When using Repositories, you can get the exact same convenient methods as with the active record pattern, injected in your Repository,\n          \n          \n            \n            When using Repositories, you get the exact same convenient methods as with the active record pattern, injected in your Repository,", "url": "https://github.com/quarkusio/quarkus/pull/6923#discussion_r384439109", "createdAt": "2020-02-26T11:39:08Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -198,8 +213,194 @@ List<String> namesButEmmanuels = persons\n \n NOTE: The `stream` methods require a transaction to work.\n \n+=== Adding entity methods\n+\n+Add custom queries on your entities inside the entities themselves.\n+That way, you and your co-workers can find them easily, and queries are right next to the object they operate on.\n+Adding them as static methods in your entity class is the Panache Active Record way.\n+\n+[source,java]\n+----\n+@Entity\n+public class Person extends PanacheEntity {\n+    public String name;\n+    public LocalDate birth;\n+    public Status status;\n+\n+    public static Person findByName(String name){\n+        return find(\"name\", name).firstResult();\n+    }\n+\n+    public static List<Person> findAlive(){\n+        return list(\"status\", Status.Alive);\n+    }\n+\n+    public static void deleteStefs(){\n+        delete(\"name\", \"Stef\");\n+    }\n+}\n+----\n+\n+== Solution 2: using the repository pattern\n+\n+\n+=== Defining your entity\n+\n+When using the repository pattern, you can define your entities as regular JPA entities.\n+\n+[source,java]\n+----\n+@Entity\n+public class Person {\n+    @Id @GeneratedValue private Long id;\n+    private String name;\n+    private LocalDate birth;\n+    private Status status;\n+\n+    public Long getId(){\n+        return id;\n+    }\n+    public void setId(Long id){\n+        this.id = id;\n+    }\n+    public String getName() {\n+        return name;\n+    }\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    public LocalDate getBirth() {\n+        return birth;\n+    }\n+    public void setBirth(LocalDate birth) {\n+        this.birth = birth;\n+    }\n+    public Status getStatus() {\n+        return status;\n+    }\n+    public void setStatus(Status status) {\n+        this.status = status;\n+    }\n+}\n+----\n+\n+TIP: If you don't want to bother defining getters/setters for your entities, you can make them extend `PanacheEntityBase` and\n+Quarkus will generates them for you. You can even extend `PanacheEntity` and take advantage of the default ID it provides.\n+\n+=== Defining your repository\n \n-== Paging\n+When using Repositories, you can get the exact same convenient methods as with the active record pattern, injected in your Repository,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d311e32bbddcce019dd5bba1cb2731ee42021638"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQzOTI4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Once you have written your repository, here are the most common operations you will be able to do:\n          \n          \n            \n            Once you have written your repository, here are the most common operations you will be able to perform:", "url": "https://github.com/quarkusio/quarkus/pull/6923#discussion_r384439281", "createdAt": "2020-02-26T11:39:31Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -198,8 +213,194 @@ List<String> namesButEmmanuels = persons\n \n NOTE: The `stream` methods require a transaction to work.\n \n+=== Adding entity methods\n+\n+Add custom queries on your entities inside the entities themselves.\n+That way, you and your co-workers can find them easily, and queries are right next to the object they operate on.\n+Adding them as static methods in your entity class is the Panache Active Record way.\n+\n+[source,java]\n+----\n+@Entity\n+public class Person extends PanacheEntity {\n+    public String name;\n+    public LocalDate birth;\n+    public Status status;\n+\n+    public static Person findByName(String name){\n+        return find(\"name\", name).firstResult();\n+    }\n+\n+    public static List<Person> findAlive(){\n+        return list(\"status\", Status.Alive);\n+    }\n+\n+    public static void deleteStefs(){\n+        delete(\"name\", \"Stef\");\n+    }\n+}\n+----\n+\n+== Solution 2: using the repository pattern\n+\n+\n+=== Defining your entity\n+\n+When using the repository pattern, you can define your entities as regular JPA entities.\n+\n+[source,java]\n+----\n+@Entity\n+public class Person {\n+    @Id @GeneratedValue private Long id;\n+    private String name;\n+    private LocalDate birth;\n+    private Status status;\n+\n+    public Long getId(){\n+        return id;\n+    }\n+    public void setId(Long id){\n+        this.id = id;\n+    }\n+    public String getName() {\n+        return name;\n+    }\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    public LocalDate getBirth() {\n+        return birth;\n+    }\n+    public void setBirth(LocalDate birth) {\n+        this.birth = birth;\n+    }\n+    public Status getStatus() {\n+        return status;\n+    }\n+    public void setStatus(Status status) {\n+        this.status = status;\n+    }\n+}\n+----\n+\n+TIP: If you don't want to bother defining getters/setters for your entities, you can make them extend `PanacheEntityBase` and\n+Quarkus will generates them for you. You can even extend `PanacheEntity` and take advantage of the default ID it provides.\n+\n+=== Defining your repository\n \n-== Paging\n+When using Repositories, you can get the exact same convenient methods as with the active record pattern, injected in your Repository,\n+by making them implements `PanacheRepository`:\n+\n+[source,java]\n+----\n+@ApplicationScoped\n+public class PersonRepository implements PanacheRepository<Person> {\n+\n+   // put your custom logic here as instance methods\n+\n+   public Person findByName(String name){\n+       return find(\"name\", name).firstResult();\n+   }\n+\n+   public List<Person> findAlive(){\n+       return list(\"status\", Status.Alive);\n+   }\n+\n+   public void deleteStefs(){\n+       delete(\"name\", \"Stef\");\n+  }\n+}\n+----\n+\n+All the operations that are defined on `PanacheEntityBase` are available on your repository, so using it\n+is exactly the same as using the active record pattern, except you need to inject it:\n+\n+[source,java]\n+----\n+@Inject\n+PersonRepository personRepository;\n+\n+@GET\n+public long count(){\n+    return personRepository.count();\n+}\n+----\n+\n+=== Most useful operations\n+\n+Once you have written your repository, here are the most common operations you will be able to do:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d311e32bbddcce019dd5bba1cb2731ee42021638"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQzOTQ3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            but they can be done with the repository pattern as well.\n          \n          \n            \n            but keep in mind that they can be performed with the repository pattern as well.", "url": "https://github.com/quarkusio/quarkus/pull/6923#discussion_r384439476", "createdAt": "2020-02-26T11:40:02Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -198,8 +213,194 @@ List<String> namesButEmmanuels = persons\n \n NOTE: The `stream` methods require a transaction to work.\n \n+=== Adding entity methods\n+\n+Add custom queries on your entities inside the entities themselves.\n+That way, you and your co-workers can find them easily, and queries are right next to the object they operate on.\n+Adding them as static methods in your entity class is the Panache Active Record way.\n+\n+[source,java]\n+----\n+@Entity\n+public class Person extends PanacheEntity {\n+    public String name;\n+    public LocalDate birth;\n+    public Status status;\n+\n+    public static Person findByName(String name){\n+        return find(\"name\", name).firstResult();\n+    }\n+\n+    public static List<Person> findAlive(){\n+        return list(\"status\", Status.Alive);\n+    }\n+\n+    public static void deleteStefs(){\n+        delete(\"name\", \"Stef\");\n+    }\n+}\n+----\n+\n+== Solution 2: using the repository pattern\n+\n+\n+=== Defining your entity\n+\n+When using the repository pattern, you can define your entities as regular JPA entities.\n+\n+[source,java]\n+----\n+@Entity\n+public class Person {\n+    @Id @GeneratedValue private Long id;\n+    private String name;\n+    private LocalDate birth;\n+    private Status status;\n+\n+    public Long getId(){\n+        return id;\n+    }\n+    public void setId(Long id){\n+        this.id = id;\n+    }\n+    public String getName() {\n+        return name;\n+    }\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    public LocalDate getBirth() {\n+        return birth;\n+    }\n+    public void setBirth(LocalDate birth) {\n+        this.birth = birth;\n+    }\n+    public Status getStatus() {\n+        return status;\n+    }\n+    public void setStatus(Status status) {\n+        this.status = status;\n+    }\n+}\n+----\n+\n+TIP: If you don't want to bother defining getters/setters for your entities, you can make them extend `PanacheEntityBase` and\n+Quarkus will generates them for you. You can even extend `PanacheEntity` and take advantage of the default ID it provides.\n+\n+=== Defining your repository\n \n-== Paging\n+When using Repositories, you can get the exact same convenient methods as with the active record pattern, injected in your Repository,\n+by making them implements `PanacheRepository`:\n+\n+[source,java]\n+----\n+@ApplicationScoped\n+public class PersonRepository implements PanacheRepository<Person> {\n+\n+   // put your custom logic here as instance methods\n+\n+   public Person findByName(String name){\n+       return find(\"name\", name).firstResult();\n+   }\n+\n+   public List<Person> findAlive(){\n+       return list(\"status\", Status.Alive);\n+   }\n+\n+   public void deleteStefs(){\n+       delete(\"name\", \"Stef\");\n+  }\n+}\n+----\n+\n+All the operations that are defined on `PanacheEntityBase` are available on your repository, so using it\n+is exactly the same as using the active record pattern, except you need to inject it:\n+\n+[source,java]\n+----\n+@Inject\n+PersonRepository personRepository;\n+\n+@GET\n+public long count(){\n+    return personRepository.count();\n+}\n+----\n+\n+=== Most useful operations\n+\n+Once you have written your repository, here are the most common operations you will be able to do:\n+\n+[source,java]\n+----\n+// creating a person\n+Person person = new Person();\n+person.name = \"Stef\";\n+person.birth = LocalDate.of(1910, Month.FEBRUARY, 1);\n+person.status = Status.Alive;\n+\n+// persist it\n+personRepository.persist(person);\n+\n+// note that once persisted, you don't need to explicitly save your entity: all\n+// modifications are automatically persisted on transaction commit.\n+\n+// check if it's persistent\n+if(personRepository.isPersistent(person)){\n+    // delete it\n+    personRepository.delete(person);\n+}\n+\n+// getting a list of all Person entities\n+List<Person> allPersons = personRepository.listAll();\n+\n+// finding a specific person by ID\n+person = personRepository.findById(personId);\n+\n+// finding a specific person by ID via an Optional\n+Optional<Person> optional = personRepository.findByIdOptional(personId);\n+person = optional.orElseThrow(() -> new NotFoundException());\n+\n+// finding all living persons\n+List<Person> livingPersons = personRepository.list(\"status\", Status.Alive);\n+\n+// counting all persons\n+long countAll = personRepository.count();\n+\n+// counting all living persons\n+long countAlive = personRepository.count(\"status\", Status.Alive);\n+\n+// delete all living persons\n+personRepository.delete(\"status\", Status.Alive);\n+\n+// delete all persons\n+personRepository.deleteAll();\n+\n+// update all living persons\n+personRepository.update(\"name = 'Moral' where status = ?1\", Status.Alive);\n+\n+----\n+\n+All `list` methods have equivalent `stream` versions.\n+\n+[source,java]\n+----\n+Stream<Person> persons = personRepository.streamAll();\n+List<String> namesButEmmanuels = persons\n+    .map(p -> p.name.toLowerCase() )\n+    .filter( n -> ! \"emmanuel\".equals(n) )\n+    .collect(Collectors.toList());\n+----\n+\n+NOTE: The `stream` methods require a transaction to work.\n+\n+NOTE: The rest of the documentation show usages based on the active record pattern only,\n+but they can be done with the repository pattern as well.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d311e32bbddcce019dd5bba1cb2731ee42021638"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQzOTg3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            We just don't feel the need to duplicate all the documentation for both patterns.\n          \n          \n            \n            The repository pattern examples have been omitted for brevity.", "url": "https://github.com/quarkusio/quarkus/pull/6923#discussion_r384439873", "createdAt": "2020-02-26T11:40:57Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -198,8 +213,194 @@ List<String> namesButEmmanuels = persons\n \n NOTE: The `stream` methods require a transaction to work.\n \n+=== Adding entity methods\n+\n+Add custom queries on your entities inside the entities themselves.\n+That way, you and your co-workers can find them easily, and queries are right next to the object they operate on.\n+Adding them as static methods in your entity class is the Panache Active Record way.\n+\n+[source,java]\n+----\n+@Entity\n+public class Person extends PanacheEntity {\n+    public String name;\n+    public LocalDate birth;\n+    public Status status;\n+\n+    public static Person findByName(String name){\n+        return find(\"name\", name).firstResult();\n+    }\n+\n+    public static List<Person> findAlive(){\n+        return list(\"status\", Status.Alive);\n+    }\n+\n+    public static void deleteStefs(){\n+        delete(\"name\", \"Stef\");\n+    }\n+}\n+----\n+\n+== Solution 2: using the repository pattern\n+\n+\n+=== Defining your entity\n+\n+When using the repository pattern, you can define your entities as regular JPA entities.\n+\n+[source,java]\n+----\n+@Entity\n+public class Person {\n+    @Id @GeneratedValue private Long id;\n+    private String name;\n+    private LocalDate birth;\n+    private Status status;\n+\n+    public Long getId(){\n+        return id;\n+    }\n+    public void setId(Long id){\n+        this.id = id;\n+    }\n+    public String getName() {\n+        return name;\n+    }\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    public LocalDate getBirth() {\n+        return birth;\n+    }\n+    public void setBirth(LocalDate birth) {\n+        this.birth = birth;\n+    }\n+    public Status getStatus() {\n+        return status;\n+    }\n+    public void setStatus(Status status) {\n+        this.status = status;\n+    }\n+}\n+----\n+\n+TIP: If you don't want to bother defining getters/setters for your entities, you can make them extend `PanacheEntityBase` and\n+Quarkus will generates them for you. You can even extend `PanacheEntity` and take advantage of the default ID it provides.\n+\n+=== Defining your repository\n \n-== Paging\n+When using Repositories, you can get the exact same convenient methods as with the active record pattern, injected in your Repository,\n+by making them implements `PanacheRepository`:\n+\n+[source,java]\n+----\n+@ApplicationScoped\n+public class PersonRepository implements PanacheRepository<Person> {\n+\n+   // put your custom logic here as instance methods\n+\n+   public Person findByName(String name){\n+       return find(\"name\", name).firstResult();\n+   }\n+\n+   public List<Person> findAlive(){\n+       return list(\"status\", Status.Alive);\n+   }\n+\n+   public void deleteStefs(){\n+       delete(\"name\", \"Stef\");\n+  }\n+}\n+----\n+\n+All the operations that are defined on `PanacheEntityBase` are available on your repository, so using it\n+is exactly the same as using the active record pattern, except you need to inject it:\n+\n+[source,java]\n+----\n+@Inject\n+PersonRepository personRepository;\n+\n+@GET\n+public long count(){\n+    return personRepository.count();\n+}\n+----\n+\n+=== Most useful operations\n+\n+Once you have written your repository, here are the most common operations you will be able to do:\n+\n+[source,java]\n+----\n+// creating a person\n+Person person = new Person();\n+person.name = \"Stef\";\n+person.birth = LocalDate.of(1910, Month.FEBRUARY, 1);\n+person.status = Status.Alive;\n+\n+// persist it\n+personRepository.persist(person);\n+\n+// note that once persisted, you don't need to explicitly save your entity: all\n+// modifications are automatically persisted on transaction commit.\n+\n+// check if it's persistent\n+if(personRepository.isPersistent(person)){\n+    // delete it\n+    personRepository.delete(person);\n+}\n+\n+// getting a list of all Person entities\n+List<Person> allPersons = personRepository.listAll();\n+\n+// finding a specific person by ID\n+person = personRepository.findById(personId);\n+\n+// finding a specific person by ID via an Optional\n+Optional<Person> optional = personRepository.findByIdOptional(personId);\n+person = optional.orElseThrow(() -> new NotFoundException());\n+\n+// finding all living persons\n+List<Person> livingPersons = personRepository.list(\"status\", Status.Alive);\n+\n+// counting all persons\n+long countAll = personRepository.count();\n+\n+// counting all living persons\n+long countAlive = personRepository.count(\"status\", Status.Alive);\n+\n+// delete all living persons\n+personRepository.delete(\"status\", Status.Alive);\n+\n+// delete all persons\n+personRepository.deleteAll();\n+\n+// update all living persons\n+personRepository.update(\"name = 'Moral' where status = ?1\", Status.Alive);\n+\n+----\n+\n+All `list` methods have equivalent `stream` versions.\n+\n+[source,java]\n+----\n+Stream<Person> persons = personRepository.streamAll();\n+List<String> namesButEmmanuels = persons\n+    .map(p -> p.name.toLowerCase() )\n+    .filter( n -> ! \"emmanuel\".equals(n) )\n+    .collect(Collectors.toList());\n+----\n+\n+NOTE: The `stream` methods require a transaction to work.\n+\n+NOTE: The rest of the documentation show usages based on the active record pattern only,\n+but they can be done with the repository pattern as well.\n+We just don't feel the need to duplicate all the documentation for both patterns.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d311e32bbddcce019dd5bba1cb2731ee42021638"}, "originalPosition": 237}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ0MDM0OQ==", "bodyText": "Please just copy the changes I proposed in the other doc to this one :)", "url": "https://github.com/quarkusio/quarkus/pull/6923#discussion_r384440349", "createdAt": "2020-02-26T11:41:58Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -50,6 +50,9 @@ NOTE: the `list()` method might be surprising at first. It takes fragments of Pa\n That makes for very concise but yet readable code.\n MongoDB native queries are also supported.\n \n+NOTE: what you just see is the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d311e32bbddcce019dd5bba1cb2731ee42021638"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "737a697aba145892ef76d403ac30e9d1b88500b0", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/737a697aba145892ef76d403ac30e9d1b88500b0", "committedDate": "2020-02-26T12:07:38Z", "message": "doc: active record and repository patterns\n\nFixes #6135 and #6945\nWIP Apply suggestions from code review\r\n\r\nwill be squashed later\n\nCo-Authored-By: Georgios Andrianakis <geoand@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bc1ee4c23ac06a0ee2a7b81b8cb642bd99b67273", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/bc1ee4c23ac06a0ee2a7b81b8cb642bd99b67273", "committedDate": "2020-02-26T11:57:44Z", "message": "WIP Apply suggestions from code review\r\n\r\nwill be squashed later\n\nCo-Authored-By: Georgios Andrianakis <geoand@gmail.com>"}, "afterCommit": {"oid": "737a697aba145892ef76d403ac30e9d1b88500b0", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/737a697aba145892ef76d403ac30e9d1b88500b0", "committedDate": "2020-02-26T12:07:38Z", "message": "doc: active record and repository patterns\n\nFixes #6135 and #6945\nWIP Apply suggestions from code review\r\n\r\nwill be squashed later\n\nCo-Authored-By: Georgios Andrianakis <geoand@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0ODQ3NDUz", "url": "https://github.com/quarkusio/quarkus/pull/6923#pullrequestreview-364847453", "createdAt": "2020-02-26T12:10:54Z", "commit": {"oid": "737a697aba145892ef76d403ac30e9d1b88500b0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 25, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}