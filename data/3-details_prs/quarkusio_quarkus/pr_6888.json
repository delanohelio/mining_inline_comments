{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MDYyNTk5", "number": 6888, "title": "ArC - support synthetic observer methods added at build time", "bodyText": "resolves #6879", "createdAt": "2020-01-30T13:04:17Z", "url": "https://github.com/quarkusio/quarkus/pull/6888", "merged": true, "mergeCommit": {"oid": "b9c974923d24fd832318a41457c31630ae66d2fb"}, "closed": true, "closedAt": "2020-02-03T07:22:27Z", "author": {"login": "mkouba"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_bmeOgFqTM1MDg2MzExNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_4wObgFqTM1MTg0ODE1NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwODYzMTE0", "url": "https://github.com/quarkusio/quarkus/pull/6888#pullrequestreview-350863114", "createdAt": "2020-01-30T14:28:16Z", "commit": {"oid": "3149619933abc3d11fb8b0219a0b7f58abdc48e1"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNDoyODoxNlrOFjs31A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNDozNTo1OFrOFjtJvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk3OTY2OA==", "bodyText": "Hmm if we want to have this unique, we could append object hash of the ObserverInfo object? Something like that instead of listing the params. Depends on whether we want to have it human-readable or unique :)", "url": "https://github.com/quarkusio/quarkus/pull/6888#discussion_r372979668", "createdAt": "2020-01-30T14:28:16Z", "author": {"login": "manovotn"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/ObserverGenerator.java", "diffHunk": "@@ -72,35 +74,52 @@ public ObserverGenerator(AnnotationLiteralProcessor annotationLiterals, Predicat\n      * @return a collection of resources\n      */\n     Collection<Resource> generate(ObserverInfo observer, ReflectionRegistration reflectionRegistration) {\n-\n-        ClassInfo declaringClass = observer.getObserverMethod().declaringClass();\n-        String declaringClassBase;\n-        if (declaringClass.enclosingClass() != null) {\n-            declaringClassBase = DotNames.simpleName(declaringClass.enclosingClass()) + \"_\"\n-                    + DotNames.simpleName(declaringClass);\n+        // The name of the generated class differs:\n+        // \"org.acme.Foo_Observer_fooMethod_hash\" for normal observer where hash represents the signature of the observer method\n+        // \"org.acme.Registrar_Observer_Synthetic_hash\" for synthetic observer where hash represents the basic attrs of the observer\n+        String classBase;\n+        if (observer.isSynthetic()) {\n+            classBase = DotNames.simpleName(observer.getBeanClass());\n         } else {\n-            declaringClassBase = DotNames.simpleName(declaringClass);\n+            ClassInfo declaringClass = observer.getObserverMethod().declaringClass();\n+            if (declaringClass.enclosingClass() != null) {\n+                classBase = DotNames.simpleName(declaringClass.enclosingClass()) + UNDERSCORE\n+                        + DotNames.simpleName(declaringClass);\n+            } else {\n+                classBase = DotNames.simpleName(declaringClass);\n+            }\n         }\n \n         StringBuilder sigBuilder = new StringBuilder();\n-        sigBuilder.append(observer.getObserverMethod().name())\n-                .append(\"_\")\n-                .append(observer.getObserverMethod().returnType().name().toString());\n-        for (org.jboss.jandex.Type paramType : observer.getObserverMethod().parameters()) {\n-            sigBuilder.append(paramType.name().toString());\n+        if (observer.isSynthetic()) {\n+            // This is not unique but best effort", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3149619933abc3d11fb8b0219a0b7f58abdc48e1"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk4MDI3Ng==", "bodyText": "I am thinking this might deserve an ObserverRegistrar instead of merging it into BeanRegistrar.", "url": "https://github.com/quarkusio/quarkus/pull/6888#discussion_r372980276", "createdAt": "2020-01-30T14:29:17Z", "author": {"login": "manovotn"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanRegistrar.java", "diffHunk": "@@ -34,6 +35,14 @@\n             return configure(DotName.createSimple(beanClass.getName()));\n         }\n \n+        /**\n+         * The synthetic observer is not added to the deployment unless the {@link ObserverConfigurator#done()} method is\n+         * called.\n+         * \n+         * @return a new synthetic observer configurator\n+         */\n+        ObserverConfigurator configureObserver();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3149619933abc3d11fb8b0219a0b7f58abdc48e1"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk4MTU2OA==", "bodyText": "observer method? ;-)", "url": "https://github.com/quarkusio/quarkus/pull/6888#discussion_r372981568", "createdAt": "2020-01-30T14:31:27Z", "author": {"login": "manovotn"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/ObserverInfo.java", "diffHunk": "@@ -75,16 +88,18 @@ static ObserverInfo create(BeanInfo declaringBean, MethodInfo observerMethod, In\n \n         if (!transactionPhase.equals(TransactionPhase.IN_PROGRESS) && !jtaCapabilities) {\n             final ClassInfo clazz = observerMethod.declaringClass();\n-            LOGGER.warnf(\"The method %s#%s makes use of '%s' transactional observers but no \" +\n+            LOGGER.warnf(\"The observer %s#%s makes use of '%s' transactional observers but no \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3149619933abc3d11fb8b0219a0b7f58abdc48e1"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk4NDI1Mg==", "bodyText": "This will be user facing API, can we have some more verbose javadoc please?", "url": "https://github.com/quarkusio/quarkus/pull/6888#discussion_r372984252", "createdAt": "2020-01-30T14:35:58Z", "author": {"login": "manovotn"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/QualifierConfigurator.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package io.quarkus.arc.processor;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Array;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.Type;\n+import org.jboss.jandex.Type.Kind;\n+\n+/**\n+ * This construct is not thread-safe.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3149619933abc3d11fb8b0219a0b7f58abdc48e1"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMTY4NTUz", "url": "https://github.com/quarkusio/quarkus/pull/6888#pullrequestreview-351168553", "createdAt": "2020-01-30T21:53:51Z", "commit": {"oid": "ec0877ca9a10df6951a6997a1cace665aaad265c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMTo1Mzo1MlrOFj7K2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMTo1Mzo1MlrOFj7K2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxMzkxMw==", "bodyText": "Smaller class names mean smaller JARs \ud83d\ude09 Maybe use the abbreviation Syn?", "url": "https://github.com/quarkusio/quarkus/pull/6888#discussion_r373213913", "createdAt": "2020-01-30T21:53:52Z", "author": {"login": "gastaldi"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/AbstractGenerator.java", "diffHunk": "@@ -10,6 +10,8 @@\n abstract class AbstractGenerator {\n \n     static final String DEFAULT_PACKAGE = Arc.class.getPackage().getName() + \".generator\";\n+    static final String UNDERSCORE = \"_\";\n+    static final String SYNTHETIC_SUFFIX = \"Synthetic\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec0877ca9a10df6951a6997a1cace665aaad265c"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "594af7986678e13d1c516a36a86825886e29976f", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/594af7986678e13d1c516a36a86825886e29976f", "committedDate": "2020-01-31T09:38:21Z", "message": "ArC - support synthetic observer methods added at build time\n\n- resolves #6879"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "429c4e9a9e1d567f2537f164bf6a441c13554cb0", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/429c4e9a9e1d567f2537f164bf6a441c13554cb0", "committedDate": "2020-01-31T09:38:21Z", "message": "Add SyntheticObserverTest\n\n- also rename io.quarkus.arc.test.build.extension to\nio.quarkus.arc.test.buildextension to avoid problems with the global\ngitignore file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bca848875ba5a57b2fef87ff64f29044127b587a", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/bca848875ba5a57b2fef87ff64f29044127b587a", "committedDate": "2020-01-31T09:38:21Z", "message": "Fix possible NPEs in ObserverInfo, add javadoc to QualifierConfigurator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84ee1ff3c977a1e5c135765fc9d62574e5f659f7", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/84ee1ff3c977a1e5c135765fc9d62574e5f659f7", "committedDate": "2020-01-31T10:29:59Z", "message": "ObserverRegistrar - a dedicated extension point for synthetic observers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ec0877ca9a10df6951a6997a1cace665aaad265c", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/ec0877ca9a10df6951a6997a1cace665aaad265c", "committedDate": "2020-01-30T15:11:00Z", "message": "Fix possible NPEs in ObserverInfo, add javadoc to QualifierConfigurator"}, "afterCommit": {"oid": "84ee1ff3c977a1e5c135765fc9d62574e5f659f7", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/84ee1ff3c977a1e5c135765fc9d62574e5f659f7", "committedDate": "2020-01-31T10:29:59Z", "message": "ObserverRegistrar - a dedicated extension point for synthetic observers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxODQ4MTU0", "url": "https://github.com/quarkusio/quarkus/pull/6888#pullrequestreview-351848154", "createdAt": "2020-02-01T00:39:31Z", "commit": {"oid": "84ee1ff3c977a1e5c135765fc9d62574e5f659f7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 9, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}