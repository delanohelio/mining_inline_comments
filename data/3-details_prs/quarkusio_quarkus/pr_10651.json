{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NjE5ODgx", "number": 10651, "title": "Oidc Code Flow options for SPA's", "bodyText": "Fixes #10185\nPerforming Code Flow OIDC authentication returns redirect status 302 when the user is un-authenticated setting the Auth Server configured in application.properties at the Location header. For Single Page Applications which are making calls to Quarkus REST endpoints as an XHR request, this redirect is automatically followed. However, not all Auth Servers allow XHR requests, so the redirect fails. This change would allow a developer to set a property in application.properties which instructs the Oidc extension to instead return an error code so that the SPA can handle the redirect manually.", "createdAt": "2020-07-10T20:00:20Z", "url": "https://github.com/quarkusio/quarkus/pull/10651", "merged": true, "mergeCommit": {"oid": "d12858fb5dba034c845b40c154e01ce4d8f17e14"}, "closed": true, "closedAt": "2020-07-21T21:01:02Z", "author": {"login": "boosey"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0g47MgFqTQ0NzIxMTI1Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3J5nwAFqTQ1MjY4OTM3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MjExMjUy", "url": "https://github.com/quarkusio/quarkus/pull/10651#pullrequestreview-447211252", "createdAt": "2020-07-13T12:39:39Z", "commit": {"oid": "fe17f997eee0e9975e95532cfa2e66cc0287b41d"}, "state": "DISMISSED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMjozOTozOVrOGwmtKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMjo0ODo0MlrOGwnB9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYxODk4Ng==", "bodyText": "typo desirable", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r453618986", "createdAt": "2020-07-13T12:39:39Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java", "diffHunk": "@@ -533,6 +533,24 @@ public void setRoleClaimSeparator(String roleClaimSeparator) {\n         @ConfigItem\n         public Optional<String> cookiePath = Optional.empty();\n \n+        /**\n+         * If this property is set to 'true' then a normal 302 redirect response will be returned. If\n+         * the request was initiated via an XMLHttpRequest, then that redirect will automatically be\n+         * followed which may not be desiravle for single page applications.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe17f997eee0e9975e95532cfa2e66cc0287b41d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYyMTg0MQ==", "bodyText": "I'm not sure about using 444. IMO, we should handle such requests are if they were made to service type applications, when using a bearer token.\nA 401 response would indicate an invalid session at the application so that the SPA can perform the redirect without necessarily having to parse response headers. As for 403 it would mean the session is valid but access is denied.\nFrom a SPA perspective, after receiving a 401 response, it should be just a matter of calling window.reload to start the authentication flow again.", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r453621841", "createdAt": "2020-07-13T12:44:38Z", "author": {"login": "pedroigor"}, "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/AuthenticationRedirectException.java", "diffHunk": "@@ -19,8 +19,12 @@ public AuthenticationRedirectException(int code, String redirectUri) {\n         this.redirectUri = redirectUri;\n     }\n \n+    public AuthenticationRedirectException(Boolean autoRedirect, String redirectUri) {\n+        this(autoRedirect ? 302 : 444, redirectUri);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe17f997eee0e9975e95532cfa2e66cc0287b41d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYyNDMwOA==", "bodyText": "IMO, this logic belongs to the CodeAuthenticationMechanism as it is really related to this flow. See my other comment around using 401and 403.", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r453624308", "createdAt": "2020-07-13T12:48:42Z", "author": {"login": "pedroigor"}, "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/AuthenticationRedirectException.java", "diffHunk": "@@ -19,8 +19,12 @@ public AuthenticationRedirectException(int code, String redirectUri) {\n         this.redirectUri = redirectUri;\n     }\n \n+    public AuthenticationRedirectException(Boolean autoRedirect, String redirectUri) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe17f997eee0e9975e95532cfa2e66cc0287b41d"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NDk0MTI5", "url": "https://github.com/quarkusio/quarkus/pull/10651#pullrequestreview-448494129", "createdAt": "2020-07-14T21:55:04Z", "commit": {"oid": "fe17f997eee0e9975e95532cfa2e66cc0287b41d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMTo1NTowNFrOGxmwOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMTo1NTowNFrOGxmwOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY2ODM0Nw==", "bodyText": "@boosey IMHO this property name should be clear it is about XHR, otherwise one may get an impression that if it is auto-redirect=false then we don't redirect in the code flow, but we are only doing an XHR specific exception here,\nAs such I suggest to rename it to something similar to what @pedroigor proposed in the other discussion, redirect-with-xhr, something like that. And update the docs:\nIf this property is set to 'false' and 'X-Requested-With' HTTP request header is equal to `XMLHttpRequest` then a status code of '...' will be returned  to allow the client to handle the redirect manually.\n\n(something like that)", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r454668347", "createdAt": "2020-07-14T21:55:04Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java", "diffHunk": "@@ -533,6 +533,24 @@ public void setRoleClaimSeparator(String roleClaimSeparator) {\n         @ConfigItem\n         public Optional<String> cookiePath = Optional.empty();\n \n+        /**\n+         * If this property is set to 'true' then a normal 302 redirect response will be returned. If\n+         * the request was initiated via an XMLHttpRequest, then that redirect will automatically be\n+         * followed which may not be desiravle for single page applications.\n+         * If it is false, a status code of '444' will be returned to allow the client to handle the\n+         * redirect manually.\n+         */\n+        @ConfigItem(defaultValue = \"true\")\n+        public boolean autoRedirect;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe17f997eee0e9975e95532cfa2e66cc0287b41d"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MDUzODc2", "url": "https://github.com/quarkusio/quarkus/pull/10651#pullrequestreview-449053876", "createdAt": "2020-07-15T15:06:51Z", "commit": {"oid": "57ef7fe7117acc2fbf9b0e3ed7dbef9cf233fa65"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTowNjo1MVrOGyCrCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNToxMjowNFrOGyC4ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNTc3MQ==", "bodyText": "I messed up something here. This is duplicate code. The version at 140 - 155 is the latest. I obviously didn't quite do the \"update a PR\" incantation correctly.", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r455125771", "createdAt": "2020-07-15T15:06:51Z", "author": {"login": "boosey"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -167,12 +183,36 @@ public SecurityIdentity apply(Throwable throwable) {\n             }\n         }\n \n-        challenge = new ChallengeData(HttpResponseStatus.FOUND.code(), HttpHeaders.LOCATION,\n-                configContext.auth.authorizeURL(params));\n+        if (shouldAutoRedirect(configContext, context)) {\n+            challenge = new ChallengeData(HttpResponseStatus.FOUND.code(), HttpHeaders.LOCATION,\n+                    configContext.auth.authorizeURL(params));\n+        } else {\n+            // If the client (usually an SPA) wants to handle the redirect manually, then\n+            // return status code 399 and in the www-authenticate header put the redirect url\n+            // www-authenticate header content; No standard content matched the exact use case\n+            // so the OAuth redirect-url= is an arbitrary string that can be tested\n+            // for on the client side\n+            String headerContent = \"OAuth redirect-url=\" + configContext.auth.authorizeURL(params);\n+            // Vertx HTTPHeaders does noy have a \"WWW_AUTHENTICATE\" static\n+            // So, header name is hard coded for the moment\n+            challenge = new ChallengeData(399, \"WWW-Authenticate\", headerContent);\n+        }\n \n         return Uni.createFrom().item(challenge);\n     }\n \n+    private boolean isXHR(RoutingContext context) {\n+        return \"XMLHttpRequest\".equals(context.request().getHeader(\"X-Requested-With\"));\n+    }\n+\n+    private boolean isAutoRedirectSet(TenantConfigContext configContext) {\n+        return configContext.oidcConfig.authentication.autoRedirect;\n+    }\n+\n+    private boolean shouldAutoRedirect(TenantConfigContext configContext, RoutingContext context) {\n+        return isXHR(context) ? isAutoRedirectSet(configContext) : true;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57ef7fe7117acc2fbf9b0e3ed7dbef9cf233fa65"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNjc2MA==", "bodyText": "Same here. This constructor doesn't exist for AuthenticationRedirectException. The original code at 297 is the correct version.", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r455126760", "createdAt": "2020-07-15T15:08:27Z", "author": {"login": "boosey"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -294,7 +336,10 @@ public void accept(SecurityIdentity identity) {\n                                                 finalRedirectUri += (\"?\" + finalUserQuery);\n                                             }\n                                             LOG.debugf(\"Final redirect URI: %s\", finalRedirectUri);\n-                                            uniEmitter.fail(new AuthenticationRedirectException(finalRedirectUri));\n+                                            //TODO: Does this need to check autoRedirect\n+                                            uniEmitter.fail(new AuthenticationRedirectException(\n+                                                    shouldAutoRedirect(configContext, context),\n+                                                    finalRedirectUri));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57ef7fe7117acc2fbf9b0e3ed7dbef9cf233fa65"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNjkzNA==", "bodyText": "This constructor doesn't exist for AuthenticationRedirectException. The original code at 224 is the correct version.", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r455126934", "createdAt": "2020-07-15T15:08:45Z", "author": {"login": "boosey"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -221,7 +261,9 @@ public SecurityIdentity apply(Throwable throwable) {\n \n                         String localRedirectUri = buildUri(context, isForceHttps(configContext), extraPath + extraQuery);\n                         LOG.debugf(\"Local redirect URI: %s\", localRedirectUri);\n-                        return Uni.createFrom().failure(new AuthenticationRedirectException(localRedirectUri));\n+                        return Uni.createFrom().failure(new AuthenticationRedirectException(\n+                                shouldAutoRedirect(configContext, context),\n+                                localRedirectUri));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57ef7fe7117acc2fbf9b0e3ed7dbef9cf233fa65"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNzIwNQ==", "bodyText": "Same here. This constructor doesn't exist for AuthenticationRedirectException. The original code at 500 is the correct version.", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r455127205", "createdAt": "2020-07-15T15:09:09Z", "author": {"login": "boosey"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -497,7 +542,8 @@ private boolean isForceHttps(TenantConfigContext configContext) {\n     private AuthenticationRedirectException redirectToLogoutEndpoint(RoutingContext context, TenantConfigContext configContext,\n             String idToken) {\n         removeCookie(context, configContext, getSessionCookieName(configContext));\n-        return new AuthenticationRedirectException(buildLogoutRedirectUri(configContext, idToken, context));\n+        return new AuthenticationRedirectException(shouldAutoRedirect(configContext, context),\n+                buildLogoutRedirectUri(configContext, idToken, context));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57ef7fe7117acc2fbf9b0e3ed7dbef9cf233fa65"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyODE3MA==", "bodyText": "This is the correct version of this file. I removed the constructor I had added in a previous version.", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r455128170", "createdAt": "2020-07-15T15:10:33Z", "author": {"login": "boosey"}, "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/AuthenticationRedirectException.java", "diffHunk": "@@ -20,7 +20,7 @@ public AuthenticationRedirectException(int code, String redirectUri) {\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57ef7fe7117acc2fbf9b0e3ed7dbef9cf233fa65"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyOTE4OQ==", "bodyText": "Needs to be updated with the final status code once decided.", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r455129189", "createdAt": "2020-07-15T15:12:04Z", "author": {"login": "boosey"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java", "diffHunk": "@@ -533,6 +533,24 @@ public void setRoleClaimSeparator(String roleClaimSeparator) {\n         @ConfigItem\n         public Optional<String> cookiePath = Optional.empty();\n \n+        /*\n+         * If this property is set to 'true' then a normal 302 redirect response will be \n+         * returned. If the request was initiated via an XMLHttpRequest, then that redirect \n+         * will automatically be followed which may not be desirable for single page applications.\n+         * If it is false, a status code of '401' will be returned to allow the client to ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57ef7fe7117acc2fbf9b0e3ed7dbef9cf233fa65"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NDExMDQ3", "url": "https://github.com/quarkusio/quarkus/pull/10651#pullrequestreview-449411047", "createdAt": "2020-07-15T23:31:47Z", "commit": {"oid": "13644badfeb9a9d38e7499dad108464477009dfc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMzozMTo0N1rOGyU00g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMzozMTo0N1rOGyU00g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQyMzE4Ng==", "bodyText": "399 doesn't work - at least on Chrome. If Chrome receives any 3XX code on an XHR request it automatically redirects. 499 allows the client to handle the redirect.", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r455423186", "createdAt": "2020-07-15T23:31:47Z", "author": {"login": "boosey"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -188,31 +188,19 @@ private boolean shouldAutoRedirect(TenantConfigContext configContext, RoutingCon\n                     configContext.auth.authorizeURL(params));\n         } else {\n             // If the client (usually an SPA) wants to handle the redirect manually, then\n-            // return status code 399 and in the www-authenticate header put the redirect url\n+            // return status code 499 and in the www-authenticate header put the redirect url\n             // www-authenticate header content; No standard content matched the exact use case\n             // so the OAuth redirect-url= is an arbitrary string that can be tested\n             // for on the client side\n-            String headerContent = \"OAuth redirect-url=\" + configContext.auth.authorizeURL(params);\n+            String headerContent = \"OIDC redirect-url=\" + configContext.auth.authorizeURL(params);\n             // Vertx HTTPHeaders does noy have a \"WWW_AUTHENTICATE\" static\n             // So, header name is hard coded for the moment\n-            challenge = new ChallengeData(399, \"WWW-Authenticate\", headerContent);\n+            challenge = new ChallengeData(499, \"WWW-Authenticate\", headerContent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13644badfeb9a9d38e7499dad108464477009dfc"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMDgzMjU2", "url": "https://github.com/quarkusio/quarkus/pull/10651#pullrequestreview-450083256", "createdAt": "2020-07-16T17:55:32Z", "commit": {"oid": "13644badfeb9a9d38e7499dad108464477009dfc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzo1NTozMlrOGy2HTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzo1NTozMlrOGy2HTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2ODU5MA==", "bodyText": "@boosey I propose to tweak this doc section a bit.\nIf this property is set to 'true' then a normal 302 redirect response will be returned if the request was initiated via XMLHttpRequest and the current user needs to be (re)authenticated which may not be desirable for Single Page Applications since XMLHttpRequest automatically following the redirect may not work given that OIDC authorization endpoints typically do not support CORS.\nIf this property is set to `false` then a status code of '499' will be returned to allow the client to handle the redirect manually\n\nSomething along these lines ( please tweak as needed to make it a better English) as we need to be very clear it is all about XHR and when exactly the users may want to do it.", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r455968590", "createdAt": "2020-07-16T17:55:32Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/OidcTenantConfig.java", "diffHunk": "@@ -533,6 +533,24 @@ public void setRoleClaimSeparator(String roleClaimSeparator) {\n         @ConfigItem\n         public Optional<String> cookiePath = Optional.empty();\n \n+        /**\n+         * If this property is set to 'true' then a normal 302 redirect response will be", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13644badfeb9a9d38e7499dad108464477009dfc"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMDg0Njcx", "url": "https://github.com/quarkusio/quarkus/pull/10651#pullrequestreview-450084671", "createdAt": "2020-07-16T17:57:29Z", "commit": {"oid": "13644badfeb9a9d38e7499dad108464477009dfc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzo1NzozMFrOGy2Lzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzo1NzozMFrOGy2Lzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2OTc0Mg==", "bodyText": "You can drop this comment, it is OK if you just set WWW-Authenticate", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r455969742", "createdAt": "2020-07-16T17:57:30Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -167,8 +183,20 @@ public SecurityIdentity apply(Throwable throwable) {\n             }\n         }\n \n-        challenge = new ChallengeData(HttpResponseStatus.FOUND.code(), HttpHeaders.LOCATION,\n-                configContext.auth.authorizeURL(params));\n+        if (shouldAutoRedirect(configContext, context)) {\n+            challenge = new ChallengeData(HttpResponseStatus.FOUND.code(), HttpHeaders.LOCATION,\n+                    configContext.auth.authorizeURL(params));\n+        } else {\n+            // If the client (usually an SPA) wants to handle the redirect manually, then\n+            // return status code 499 and in the www-authenticate header put the redirect url\n+            // www-authenticate header content; No standard content matched the exact use case\n+            // so the OAuth redirect-url= is an arbitrary string that can be tested\n+            // for on the client side\n+            String headerContent = \"OIDC redirect-url=\" + configContext.auth.authorizeURL(params);\n+            // Vertx HTTPHeaders does noy have a \"WWW_AUTHENTICATE\" static", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13644badfeb9a9d38e7499dad108464477009dfc"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMDg1NjA2", "url": "https://github.com/quarkusio/quarkus/pull/10651#pullrequestreview-450085606", "createdAt": "2020-07-16T17:58:46Z", "commit": {"oid": "13644badfeb9a9d38e7499dad108464477009dfc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzo1ODo0NlrOGy2OyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzo1ODo0NlrOGy2OyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk3MDUwNA==", "bodyText": "@boosey, so if we want the users to do location.reload on seeing 499 then we don't really need OIDC redirect-url ?", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r455970504", "createdAt": "2020-07-16T17:58:46Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -167,8 +183,20 @@ public SecurityIdentity apply(Throwable throwable) {\n             }\n         }\n \n-        challenge = new ChallengeData(HttpResponseStatus.FOUND.code(), HttpHeaders.LOCATION,\n-                configContext.auth.authorizeURL(params));\n+        if (shouldAutoRedirect(configContext, context)) {\n+            challenge = new ChallengeData(HttpResponseStatus.FOUND.code(), HttpHeaders.LOCATION,\n+                    configContext.auth.authorizeURL(params));\n+        } else {\n+            // If the client (usually an SPA) wants to handle the redirect manually, then\n+            // return status code 499 and in the www-authenticate header put the redirect url\n+            // www-authenticate header content; No standard content matched the exact use case\n+            // so the OAuth redirect-url= is an arbitrary string that can be tested\n+            // for on the client side\n+            String headerContent = \"OIDC redirect-url=\" + configContext.auth.authorizeURL(params);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13644badfeb9a9d38e7499dad108464477009dfc"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMDg2NjU5", "url": "https://github.com/quarkusio/quarkus/pull/10651#pullrequestreview-450086659", "createdAt": "2020-07-16T18:00:09Z", "commit": {"oid": "13644badfeb9a9d38e7499dad108464477009dfc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODowMDowOVrOGy2SIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODowMDowOVrOGy2SIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk3MTM2MA==", "bodyText": "You can drop this function and check configContext.oidcConfig.authentication.isXhrAutoRedirect() directly, it is cleaner, true :-), but we access config directly all over the place", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r455971360", "createdAt": "2020-07-16T18:00:09Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -137,6 +137,22 @@ public SecurityIdentity apply(Throwable throwable) {\n         return performCodeFlow(identityProviderManager, context, resolver);\n     }\n \n+    private boolean isXHR(RoutingContext context) {\n+        return \"XMLHttpRequest\".equals(context.request().getHeader(\"X-Requested-With\"));\n+    }\n+\n+    private boolean isAutoRedirectSet(TenantConfigContext configContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13644badfeb9a9d38e7499dad108464477009dfc"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMjM5Njk0", "url": "https://github.com/quarkusio/quarkus/pull/10651#pullrequestreview-450239694", "createdAt": "2020-07-16T21:47:52Z", "commit": {"oid": "cfca9508f0e28a3fda3a215e221621d33fc1aba6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMTo0Nzo1MlrOGy99GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMTo0Nzo1MlrOGy99GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA5NzA0OQ==", "bodyText": "You can remove this line, it is the same origin redirect to drop the parameters returned back from OIDC (code, etc)", "url": "https://github.com/quarkusio/quarkus/pull/10651#discussion_r456097049", "createdAt": "2020-07-16T21:47:52Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -294,6 +320,7 @@ public void accept(SecurityIdentity identity) {\n                                                 finalRedirectUri += (\"?\" + finalUserQuery);\n                                             }\n                                             LOG.debugf(\"Final redirect URI: %s\", finalRedirectUri);\n+                                            //TODO: Does this need to check autoRedirect", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfca9508f0e28a3fda3a215e221621d33fc1aba6"}, "originalPosition": 48}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5b835d0e89a16c0e111855d567ba59180fce62e6", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/5b835d0e89a16c0e111855d567ba59180fce62e6", "committedDate": "2020-07-17T03:18:43Z", "message": "Minor updates"}, "afterCommit": {"oid": "ea7ce0b4001d9b3a1cbf19a808b62a5cf1ac5c0c", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/ea7ce0b4001d9b3a1cbf19a808b62a5cf1ac5c0c", "committedDate": "2020-07-17T21:02:30Z", "message": "Allow manual redirect for SPA using XHR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c415f86f5cdd7fe4dbaaf79767a08945e0aa7018", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/c415f86f5cdd7fe4dbaaf79767a08945e0aa7018", "committedDate": "2020-07-21T14:29:45Z", "message": "Allow manual redirect for SPA using XHR"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ea7ce0b4001d9b3a1cbf19a808b62a5cf1ac5c0c", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/ea7ce0b4001d9b3a1cbf19a808b62a5cf1ac5c0c", "committedDate": "2020-07-17T21:02:30Z", "message": "Allow manual redirect for SPA using XHR"}, "afterCommit": {"oid": "c415f86f5cdd7fe4dbaaf79767a08945e0aa7018", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/c415f86f5cdd7fe4dbaaf79767a08945e0aa7018", "committedDate": "2020-07-21T14:29:45Z", "message": "Allow manual redirect for SPA using XHR"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNjg5Mzc1", "url": "https://github.com/quarkusio/quarkus/pull/10651#pullrequestreview-452689375", "createdAt": "2020-07-21T17:44:00Z", "commit": {"oid": "c415f86f5cdd7fe4dbaaf79767a08945e0aa7018"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3498, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}