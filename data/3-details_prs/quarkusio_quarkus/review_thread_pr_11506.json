{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxMjg4Nzc1", "number": 11506, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODowODo0MFrOEa2ZYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODoxNjowNVrOEa2pMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTg5NjY2OnYy", "diffSide": "RIGHT", "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/MethodValidatedAnnotationsTransformer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODowODo0MFrOHEhU8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjozNjoyN1rOHEz4Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwMjM4Nw==", "bodyText": "Please use standard imperative code. This is far less readable.", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474502387", "createdAt": "2020-08-21T08:08:40Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/MethodValidatedAnnotationsTransformer.java", "diffHunk": "@@ -96,11 +81,10 @@ private boolean requiresValidation(MethodInfo method) {\n     }\n \n     private boolean isJaxrsMethod(MethodInfo method) {\n-        for (DotName jaxrsMethodAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n-            if (method.hasAnnotation(jaxrsMethodAnnotation)) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        ClassInfo clazz = method.declaringClass();\n+        return Stream.concat(Stream.of(clazz.name()), clazz.interfaceNames().stream())\n+                .anyMatch(dotName -> Optional.ofNullable(jaxRsMethods.get(dotName))\n+                        .map(methodNames -> methodNames.contains(method.name()))\n+                        .orElse(false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0NTAzMg==", "bodyText": "Ok, will change it.\nAfter forcing myself to use streaming API for a few months after it came out, I can now actually read something like this better than a cascade of loops and ifs and local variables.", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474645032", "createdAt": "2020-08-21T11:42:59Z", "author": {"login": "famod"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/MethodValidatedAnnotationsTransformer.java", "diffHunk": "@@ -96,11 +81,10 @@ private boolean requiresValidation(MethodInfo method) {\n     }\n \n     private boolean isJaxrsMethod(MethodInfo method) {\n-        for (DotName jaxrsMethodAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n-            if (method.hasAnnotation(jaxrsMethodAnnotation)) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        ClassInfo clazz = method.declaringClass();\n+        return Stream.concat(Stream.of(clazz.name()), clazz.interfaceNames().stream())\n+                .anyMatch(dotName -> Optional.ofNullable(jaxRsMethods.get(dotName))\n+                        .map(methodNames -> methodNames.contains(method.name()))\n+                        .orElse(false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwMjM4Nw=="}, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwNjI4Nw==", "bodyText": "Done. The method became more complex anyway.", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474806287", "createdAt": "2020-08-21T16:36:27Z", "author": {"login": "famod"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/MethodValidatedAnnotationsTransformer.java", "diffHunk": "@@ -96,11 +81,10 @@ private boolean requiresValidation(MethodInfo method) {\n     }\n \n     private boolean isJaxrsMethod(MethodInfo method) {\n-        for (DotName jaxrsMethodAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n-            if (method.hasAnnotation(jaxrsMethodAnnotation)) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        ClassInfo clazz = method.declaringClass();\n+        return Stream.concat(Stream.of(clazz.name()), clazz.interfaceNames().stream())\n+                .anyMatch(dotName -> Optional.ofNullable(jaxRsMethods.get(dotName))\n+                        .map(methodNames -> methodNames.contains(method.name()))\n+                        .orElse(false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwMjM4Nw=="}, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTkwNTE4OnYy", "diffSide": "RIGHT", "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODoxMDoxN1rOHEhabg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMTo0MzoyOVrOHEqC1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwMzc5MA==", "bodyText": "I think it would be better conceptually to pass the full list to the method rather than building it inside.", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474503790", "createdAt": "2020-08-21T08:10:17Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java", "diffHunk": "@@ -327,6 +339,34 @@ private static void contributeMethodsWithInheritedValidation(Map<DotName, Set<St\n         }\n     }\n \n+    private static Map<DotName, Set<String>> gatherJaxRsMethods(\n+            List<AdditionalJaxRsResourceMethodAnnotationsBuildItem> additionalJaxRsResourceMethodAnnotations,\n+            IndexView indexView) {\n+        Map<DotName, Set<String>> jaxRsMethods = new HashMap<>();\n+\n+        Collection<DotName> effectiveJaxRsMethodDefiningAnnotations = new ArrayList<>(\n+                JAXRS_METHOD_ANNOTATIONS.length + additionalJaxRsResourceMethodAnnotations.size());\n+        effectiveJaxRsMethodDefiningAnnotations.addAll(Arrays.asList(JAXRS_METHOD_ANNOTATIONS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0MzU1Ng==", "bodyText": "Hm, the build() method is already packed with so many local variables which is why I aimed for a separate, very cohesive private method.\nThe full list is also not used by any other code in the processor.\nBut if you prefer it that way (and it is then more in line with other processors) I will change it.", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474643556", "createdAt": "2020-08-21T11:39:37Z", "author": {"login": "famod"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java", "diffHunk": "@@ -327,6 +339,34 @@ private static void contributeMethodsWithInheritedValidation(Map<DotName, Set<St\n         }\n     }\n \n+    private static Map<DotName, Set<String>> gatherJaxRsMethods(\n+            List<AdditionalJaxRsResourceMethodAnnotationsBuildItem> additionalJaxRsResourceMethodAnnotations,\n+            IndexView indexView) {\n+        Map<DotName, Set<String>> jaxRsMethods = new HashMap<>();\n+\n+        Collection<DotName> effectiveJaxRsMethodDefiningAnnotations = new ArrayList<>(\n+                JAXRS_METHOD_ANNOTATIONS.length + additionalJaxRsResourceMethodAnnotations.size());\n+        effectiveJaxRsMethodDefiningAnnotations.addAll(Arrays.asList(JAXRS_METHOD_ANNOTATIONS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwMzc5MA=="}, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0NTIwNg==", "bodyText": "Ok, let's leave it at that.", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474645206", "createdAt": "2020-08-21T11:43:29Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java", "diffHunk": "@@ -327,6 +339,34 @@ private static void contributeMethodsWithInheritedValidation(Map<DotName, Set<St\n         }\n     }\n \n+    private static Map<DotName, Set<String>> gatherJaxRsMethods(\n+            List<AdditionalJaxRsResourceMethodAnnotationsBuildItem> additionalJaxRsResourceMethodAnnotations,\n+            IndexView indexView) {\n+        Map<DotName, Set<String>> jaxRsMethods = new HashMap<>();\n+\n+        Collection<DotName> effectiveJaxRsMethodDefiningAnnotations = new ArrayList<>(\n+                JAXRS_METHOD_ANNOTATIONS.length + additionalJaxRsResourceMethodAnnotations.size());\n+        effectiveJaxRsMethodDefiningAnnotations.addAll(Arrays.asList(JAXRS_METHOD_ANNOTATIONS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwMzc5MA=="}, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTkwNzgyOnYy", "diffSide": "RIGHT", "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODoxMDo0MlrOHEhb9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjo0NDo0NVrOHE0HWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNDE4MQ==", "bodyText": "You also need to check that the kind of the target is a method.", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474504181", "createdAt": "2020-08-21T08:10:42Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java", "diffHunk": "@@ -327,6 +339,34 @@ private static void contributeMethodsWithInheritedValidation(Map<DotName, Set<St\n         }\n     }\n \n+    private static Map<DotName, Set<String>> gatherJaxRsMethods(\n+            List<AdditionalJaxRsResourceMethodAnnotationsBuildItem> additionalJaxRsResourceMethodAnnotations,\n+            IndexView indexView) {\n+        Map<DotName, Set<String>> jaxRsMethods = new HashMap<>();\n+\n+        Collection<DotName> effectiveJaxRsMethodDefiningAnnotations = new ArrayList<>(\n+                JAXRS_METHOD_ANNOTATIONS.length + additionalJaxRsResourceMethodAnnotations.size());\n+        effectiveJaxRsMethodDefiningAnnotations.addAll(Arrays.asList(JAXRS_METHOD_ANNOTATIONS));\n+        for (AdditionalJaxRsResourceMethodAnnotationsBuildItem additionalJaxRsResourceMethodAnnotation : additionalJaxRsResourceMethodAnnotations) {\n+            effectiveJaxRsMethodDefiningAnnotations.addAll(additionalJaxRsResourceMethodAnnotation.getAnnotationClasses());\n+        }\n+\n+        for (DotName jaxRsAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n+            Collection<AnnotationInstance> annotationInstances = indexView.getAnnotations(jaxRsAnnotation);\n+\n+            if (annotationInstances.isEmpty()) {\n+                continue;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0MTU2MQ==", "bodyText": "I actually had this already, but what to do if it's not a method?\n\ndo nothing?\nlog a warning?\nthrow an explicit exception? (right now asMethod() will throw an exception if the target is not a method)\n\nAs far as I understood AdditionalJaxRsResourceMethodAnnotationsBuildItem, arbitrary annotations can be added and those annotations could be only or also class level annotations.\nBut the logic in the transformer is only considering methods.", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474641561", "createdAt": "2020-08-21T11:35:11Z", "author": {"login": "famod"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java", "diffHunk": "@@ -327,6 +339,34 @@ private static void contributeMethodsWithInheritedValidation(Map<DotName, Set<St\n         }\n     }\n \n+    private static Map<DotName, Set<String>> gatherJaxRsMethods(\n+            List<AdditionalJaxRsResourceMethodAnnotationsBuildItem> additionalJaxRsResourceMethodAnnotations,\n+            IndexView indexView) {\n+        Map<DotName, Set<String>> jaxRsMethods = new HashMap<>();\n+\n+        Collection<DotName> effectiveJaxRsMethodDefiningAnnotations = new ArrayList<>(\n+                JAXRS_METHOD_ANNOTATIONS.length + additionalJaxRsResourceMethodAnnotations.size());\n+        effectiveJaxRsMethodDefiningAnnotations.addAll(Arrays.asList(JAXRS_METHOD_ANNOTATIONS));\n+        for (AdditionalJaxRsResourceMethodAnnotationsBuildItem additionalJaxRsResourceMethodAnnotation : additionalJaxRsResourceMethodAnnotations) {\n+            effectiveJaxRsMethodDefiningAnnotations.addAll(additionalJaxRsResourceMethodAnnotation.getAnnotationClasses());\n+        }\n+\n+        for (DotName jaxRsAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n+            Collection<AnnotationInstance> annotationInstances = indexView.getAnnotations(jaxRsAnnotation);\n+\n+            if (annotationInstances.isEmpty()) {\n+                continue;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNDE4MQ=="}, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0NzMzNg==", "bodyText": "Just saw #11506 (comment). So the last option is not valid.\nI'll go with the first one (do nothing) but the question remains whether the transformer must consider class level annotations as well (probably yes).", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474647336", "createdAt": "2020-08-21T11:48:09Z", "author": {"login": "famod"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java", "diffHunk": "@@ -327,6 +339,34 @@ private static void contributeMethodsWithInheritedValidation(Map<DotName, Set<St\n         }\n     }\n \n+    private static Map<DotName, Set<String>> gatherJaxRsMethods(\n+            List<AdditionalJaxRsResourceMethodAnnotationsBuildItem> additionalJaxRsResourceMethodAnnotations,\n+            IndexView indexView) {\n+        Map<DotName, Set<String>> jaxRsMethods = new HashMap<>();\n+\n+        Collection<DotName> effectiveJaxRsMethodDefiningAnnotations = new ArrayList<>(\n+                JAXRS_METHOD_ANNOTATIONS.length + additionalJaxRsResourceMethodAnnotations.size());\n+        effectiveJaxRsMethodDefiningAnnotations.addAll(Arrays.asList(JAXRS_METHOD_ANNOTATIONS));\n+        for (AdditionalJaxRsResourceMethodAnnotationsBuildItem additionalJaxRsResourceMethodAnnotation : additionalJaxRsResourceMethodAnnotations) {\n+            effectiveJaxRsMethodDefiningAnnotations.addAll(additionalJaxRsResourceMethodAnnotation.getAnnotationClasses());\n+        }\n+\n+        for (DotName jaxRsAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n+            Collection<AnnotationInstance> annotationInstances = indexView.getAnnotations(jaxRsAnnotation);\n+\n+            if (annotationInstances.isEmpty()) {\n+                continue;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNDE4MQ=="}, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1ODU3Mg==", "bodyText": "Yeah we should do nothing but we probably need to understand better how things work in the Spring compatibility layer. Let's discuss with @geoand next week.", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474658572", "createdAt": "2020-08-21T12:14:20Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java", "diffHunk": "@@ -327,6 +339,34 @@ private static void contributeMethodsWithInheritedValidation(Map<DotName, Set<St\n         }\n     }\n \n+    private static Map<DotName, Set<String>> gatherJaxRsMethods(\n+            List<AdditionalJaxRsResourceMethodAnnotationsBuildItem> additionalJaxRsResourceMethodAnnotations,\n+            IndexView indexView) {\n+        Map<DotName, Set<String>> jaxRsMethods = new HashMap<>();\n+\n+        Collection<DotName> effectiveJaxRsMethodDefiningAnnotations = new ArrayList<>(\n+                JAXRS_METHOD_ANNOTATIONS.length + additionalJaxRsResourceMethodAnnotations.size());\n+        effectiveJaxRsMethodDefiningAnnotations.addAll(Arrays.asList(JAXRS_METHOD_ANNOTATIONS));\n+        for (AdditionalJaxRsResourceMethodAnnotationsBuildItem additionalJaxRsResourceMethodAnnotation : additionalJaxRsResourceMethodAnnotations) {\n+            effectiveJaxRsMethodDefiningAnnotations.addAll(additionalJaxRsResourceMethodAnnotation.getAnnotationClasses());\n+        }\n+\n+        for (DotName jaxRsAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n+            Collection<AnnotationInstance> annotationInstances = indexView.getAnnotations(jaxRsAnnotation);\n+\n+            if (annotationInstances.isEmpty()) {\n+                continue;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNDE4MQ=="}, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwNjAwMg==", "bodyText": "Check + \"do nothing\" added (and a comment).", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474806002", "createdAt": "2020-08-21T16:35:50Z", "author": {"login": "famod"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java", "diffHunk": "@@ -327,6 +339,34 @@ private static void contributeMethodsWithInheritedValidation(Map<DotName, Set<St\n         }\n     }\n \n+    private static Map<DotName, Set<String>> gatherJaxRsMethods(\n+            List<AdditionalJaxRsResourceMethodAnnotationsBuildItem> additionalJaxRsResourceMethodAnnotations,\n+            IndexView indexView) {\n+        Map<DotName, Set<String>> jaxRsMethods = new HashMap<>();\n+\n+        Collection<DotName> effectiveJaxRsMethodDefiningAnnotations = new ArrayList<>(\n+                JAXRS_METHOD_ANNOTATIONS.length + additionalJaxRsResourceMethodAnnotations.size());\n+        effectiveJaxRsMethodDefiningAnnotations.addAll(Arrays.asList(JAXRS_METHOD_ANNOTATIONS));\n+        for (AdditionalJaxRsResourceMethodAnnotationsBuildItem additionalJaxRsResourceMethodAnnotation : additionalJaxRsResourceMethodAnnotations) {\n+            effectiveJaxRsMethodDefiningAnnotations.addAll(additionalJaxRsResourceMethodAnnotation.getAnnotationClasses());\n+        }\n+\n+        for (DotName jaxRsAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n+            Collection<AnnotationInstance> annotationInstances = indexView.getAnnotations(jaxRsAnnotation);\n+\n+            if (annotationInstances.isEmpty()) {\n+                continue;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNDE4MQ=="}, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxMDIwMA==", "bodyText": "See #11532 for the rest.", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474810200", "createdAt": "2020-08-21T16:44:45Z", "author": {"login": "famod"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java", "diffHunk": "@@ -327,6 +339,34 @@ private static void contributeMethodsWithInheritedValidation(Map<DotName, Set<St\n         }\n     }\n \n+    private static Map<DotName, Set<String>> gatherJaxRsMethods(\n+            List<AdditionalJaxRsResourceMethodAnnotationsBuildItem> additionalJaxRsResourceMethodAnnotations,\n+            IndexView indexView) {\n+        Map<DotName, Set<String>> jaxRsMethods = new HashMap<>();\n+\n+        Collection<DotName> effectiveJaxRsMethodDefiningAnnotations = new ArrayList<>(\n+                JAXRS_METHOD_ANNOTATIONS.length + additionalJaxRsResourceMethodAnnotations.size());\n+        effectiveJaxRsMethodDefiningAnnotations.addAll(Arrays.asList(JAXRS_METHOD_ANNOTATIONS));\n+        for (AdditionalJaxRsResourceMethodAnnotationsBuildItem additionalJaxRsResourceMethodAnnotation : additionalJaxRsResourceMethodAnnotations) {\n+            effectiveJaxRsMethodDefiningAnnotations.addAll(additionalJaxRsResourceMethodAnnotation.getAnnotationClasses());\n+        }\n+\n+        for (DotName jaxRsAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n+            Collection<AnnotationInstance> annotationInstances = indexView.getAnnotations(jaxRsAnnotation);\n+\n+            if (annotationInstances.isEmpty()) {\n+                continue;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNDE4MQ=="}, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTkxODYyOnYy", "diffSide": "RIGHT", "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODoxMjo0NFrOHEhi8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjozNToxMlrOHEz12Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNTk3MQ==", "bodyText": "The name is not sufficient, you need to build the signature.", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474505971", "createdAt": "2020-08-21T08:12:44Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java", "diffHunk": "@@ -327,6 +339,34 @@ private static void contributeMethodsWithInheritedValidation(Map<DotName, Set<St\n         }\n     }\n \n+    private static Map<DotName, Set<String>> gatherJaxRsMethods(\n+            List<AdditionalJaxRsResourceMethodAnnotationsBuildItem> additionalJaxRsResourceMethodAnnotations,\n+            IndexView indexView) {\n+        Map<DotName, Set<String>> jaxRsMethods = new HashMap<>();\n+\n+        Collection<DotName> effectiveJaxRsMethodDefiningAnnotations = new ArrayList<>(\n+                JAXRS_METHOD_ANNOTATIONS.length + additionalJaxRsResourceMethodAnnotations.size());\n+        effectiveJaxRsMethodDefiningAnnotations.addAll(Arrays.asList(JAXRS_METHOD_ANNOTATIONS));\n+        for (AdditionalJaxRsResourceMethodAnnotationsBuildItem additionalJaxRsResourceMethodAnnotation : additionalJaxRsResourceMethodAnnotations) {\n+            effectiveJaxRsMethodDefiningAnnotations.addAll(additionalJaxRsResourceMethodAnnotation.getAnnotationClasses());\n+        }\n+\n+        for (DotName jaxRsAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n+            Collection<AnnotationInstance> annotationInstances = indexView.getAnnotations(jaxRsAnnotation);\n+\n+            if (annotationInstances.isEmpty()) {\n+                continue;\n+            }\n+\n+            for (AnnotationInstance annotation : annotationInstances) {\n+                MethodInfo method = annotation.target().asMethod();\n+                jaxRsMethods.computeIfAbsent(method.declaringClass().name(), k -> new HashSet<String>())\n+                        .add(method.name().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUxMzMyMw==", "bodyText": "Getting the parameters() then building something with the name() of the type should be good enough.", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474513323", "createdAt": "2020-08-21T08:21:07Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java", "diffHunk": "@@ -327,6 +339,34 @@ private static void contributeMethodsWithInheritedValidation(Map<DotName, Set<St\n         }\n     }\n \n+    private static Map<DotName, Set<String>> gatherJaxRsMethods(\n+            List<AdditionalJaxRsResourceMethodAnnotationsBuildItem> additionalJaxRsResourceMethodAnnotations,\n+            IndexView indexView) {\n+        Map<DotName, Set<String>> jaxRsMethods = new HashMap<>();\n+\n+        Collection<DotName> effectiveJaxRsMethodDefiningAnnotations = new ArrayList<>(\n+                JAXRS_METHOD_ANNOTATIONS.length + additionalJaxRsResourceMethodAnnotations.size());\n+        effectiveJaxRsMethodDefiningAnnotations.addAll(Arrays.asList(JAXRS_METHOD_ANNOTATIONS));\n+        for (AdditionalJaxRsResourceMethodAnnotationsBuildItem additionalJaxRsResourceMethodAnnotation : additionalJaxRsResourceMethodAnnotations) {\n+            effectiveJaxRsMethodDefiningAnnotations.addAll(additionalJaxRsResourceMethodAnnotation.getAnnotationClasses());\n+        }\n+\n+        for (DotName jaxRsAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n+            Collection<AnnotationInstance> annotationInstances = indexView.getAnnotations(jaxRsAnnotation);\n+\n+            if (annotationInstances.isEmpty()) {\n+                continue;\n+            }\n+\n+            for (AnnotationInstance annotation : annotationInstances) {\n+                MethodInfo method = annotation.target().asMethod();\n+                jaxRsMethods.computeIfAbsent(method.declaringClass().name(), k -> new HashSet<String>())\n+                        .add(method.name().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNTk3MQ=="}, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYzOTg2Mg==", "bodyText": "I had the same thought while looking at inheritedAnnotationsToBeValidated which is also only considering the method names.\nThat is why I ignored this problem for now, but I should have left a comment.\nBut since you brought this up I guess I should fix both the new jaxRsMethods map and the already existing inheritedAnnotationsToBeValidated map?", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474639862", "createdAt": "2020-08-21T11:31:03Z", "author": {"login": "famod"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java", "diffHunk": "@@ -327,6 +339,34 @@ private static void contributeMethodsWithInheritedValidation(Map<DotName, Set<St\n         }\n     }\n \n+    private static Map<DotName, Set<String>> gatherJaxRsMethods(\n+            List<AdditionalJaxRsResourceMethodAnnotationsBuildItem> additionalJaxRsResourceMethodAnnotations,\n+            IndexView indexView) {\n+        Map<DotName, Set<String>> jaxRsMethods = new HashMap<>();\n+\n+        Collection<DotName> effectiveJaxRsMethodDefiningAnnotations = new ArrayList<>(\n+                JAXRS_METHOD_ANNOTATIONS.length + additionalJaxRsResourceMethodAnnotations.size());\n+        effectiveJaxRsMethodDefiningAnnotations.addAll(Arrays.asList(JAXRS_METHOD_ANNOTATIONS));\n+        for (AdditionalJaxRsResourceMethodAnnotationsBuildItem additionalJaxRsResourceMethodAnnotation : additionalJaxRsResourceMethodAnnotations) {\n+            effectiveJaxRsMethodDefiningAnnotations.addAll(additionalJaxRsResourceMethodAnnotation.getAnnotationClasses());\n+        }\n+\n+        for (DotName jaxRsAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n+            Collection<AnnotationInstance> annotationInstances = indexView.getAnnotations(jaxRsAnnotation);\n+\n+            if (annotationInstances.isEmpty()) {\n+                continue;\n+            }\n+\n+            for (AnnotationInstance annotation : annotationInstances) {\n+                MethodInfo method = annotation.target().asMethod();\n+                jaxRsMethods.computeIfAbsent(method.declaringClass().name(), k -> new HashSet<String>())\n+                        .add(method.name().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNTk3MQ=="}, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0NTUzNw==", "bodyText": "I think that would be a good idea if not more complex that I envision it.", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474645537", "createdAt": "2020-08-21T11:44:09Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java", "diffHunk": "@@ -327,6 +339,34 @@ private static void contributeMethodsWithInheritedValidation(Map<DotName, Set<St\n         }\n     }\n \n+    private static Map<DotName, Set<String>> gatherJaxRsMethods(\n+            List<AdditionalJaxRsResourceMethodAnnotationsBuildItem> additionalJaxRsResourceMethodAnnotations,\n+            IndexView indexView) {\n+        Map<DotName, Set<String>> jaxRsMethods = new HashMap<>();\n+\n+        Collection<DotName> effectiveJaxRsMethodDefiningAnnotations = new ArrayList<>(\n+                JAXRS_METHOD_ANNOTATIONS.length + additionalJaxRsResourceMethodAnnotations.size());\n+        effectiveJaxRsMethodDefiningAnnotations.addAll(Arrays.asList(JAXRS_METHOD_ANNOTATIONS));\n+        for (AdditionalJaxRsResourceMethodAnnotationsBuildItem additionalJaxRsResourceMethodAnnotation : additionalJaxRsResourceMethodAnnotations) {\n+            effectiveJaxRsMethodDefiningAnnotations.addAll(additionalJaxRsResourceMethodAnnotation.getAnnotationClasses());\n+        }\n+\n+        for (DotName jaxRsAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n+            Collection<AnnotationInstance> annotationInstances = indexView.getAnnotations(jaxRsAnnotation);\n+\n+            if (annotationInstances.isEmpty()) {\n+                continue;\n+            }\n+\n+            for (AnnotationInstance annotation : annotationInstances) {\n+                MethodInfo method = annotation.target().asMethod();\n+                jaxRsMethods.computeIfAbsent(method.declaringClass().name(), k -> new HashSet<String>())\n+                        .add(method.name().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNTk3MQ=="}, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY3MjUxOA==", "bodyText": "I'll take a stab at jaxRsMethods first and in case I have some time left and it is easy enough I'll adjust the other map as well.\nOtherwise I'll create a follow-up issue/pr.", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474672518", "createdAt": "2020-08-21T12:43:38Z", "author": {"login": "famod"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java", "diffHunk": "@@ -327,6 +339,34 @@ private static void contributeMethodsWithInheritedValidation(Map<DotName, Set<St\n         }\n     }\n \n+    private static Map<DotName, Set<String>> gatherJaxRsMethods(\n+            List<AdditionalJaxRsResourceMethodAnnotationsBuildItem> additionalJaxRsResourceMethodAnnotations,\n+            IndexView indexView) {\n+        Map<DotName, Set<String>> jaxRsMethods = new HashMap<>();\n+\n+        Collection<DotName> effectiveJaxRsMethodDefiningAnnotations = new ArrayList<>(\n+                JAXRS_METHOD_ANNOTATIONS.length + additionalJaxRsResourceMethodAnnotations.size());\n+        effectiveJaxRsMethodDefiningAnnotations.addAll(Arrays.asList(JAXRS_METHOD_ANNOTATIONS));\n+        for (AdditionalJaxRsResourceMethodAnnotationsBuildItem additionalJaxRsResourceMethodAnnotation : additionalJaxRsResourceMethodAnnotations) {\n+            effectiveJaxRsMethodDefiningAnnotations.addAll(additionalJaxRsResourceMethodAnnotation.getAnnotationClasses());\n+        }\n+\n+        for (DotName jaxRsAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n+            Collection<AnnotationInstance> annotationInstances = indexView.getAnnotations(jaxRsAnnotation);\n+\n+            if (annotationInstances.isEmpty()) {\n+                continue;\n+            }\n+\n+            for (AnnotationInstance annotation : annotationInstances) {\n+                MethodInfo method = annotation.target().asMethod();\n+                jaxRsMethods.computeIfAbsent(method.declaringClass().name(), k -> new HashSet<String>())\n+                        .add(method.name().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNTk3MQ=="}, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwNTcyMQ==", "bodyText": "Done. jaxRsMethods is now holding Set<SimpleMethodSignatureKey> instead of Set<String>.\nI'll have a look at inheritedAnnotationsToBeValidated next.", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474805721", "createdAt": "2020-08-21T16:35:12Z", "author": {"login": "famod"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java", "diffHunk": "@@ -327,6 +339,34 @@ private static void contributeMethodsWithInheritedValidation(Map<DotName, Set<St\n         }\n     }\n \n+    private static Map<DotName, Set<String>> gatherJaxRsMethods(\n+            List<AdditionalJaxRsResourceMethodAnnotationsBuildItem> additionalJaxRsResourceMethodAnnotations,\n+            IndexView indexView) {\n+        Map<DotName, Set<String>> jaxRsMethods = new HashMap<>();\n+\n+        Collection<DotName> effectiveJaxRsMethodDefiningAnnotations = new ArrayList<>(\n+                JAXRS_METHOD_ANNOTATIONS.length + additionalJaxRsResourceMethodAnnotations.size());\n+        effectiveJaxRsMethodDefiningAnnotations.addAll(Arrays.asList(JAXRS_METHOD_ANNOTATIONS));\n+        for (AdditionalJaxRsResourceMethodAnnotationsBuildItem additionalJaxRsResourceMethodAnnotation : additionalJaxRsResourceMethodAnnotations) {\n+            effectiveJaxRsMethodDefiningAnnotations.addAll(additionalJaxRsResourceMethodAnnotation.getAnnotationClasses());\n+        }\n+\n+        for (DotName jaxRsAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n+            Collection<AnnotationInstance> annotationInstances = indexView.getAnnotations(jaxRsAnnotation);\n+\n+            if (annotationInstances.isEmpty()) {\n+                continue;\n+            }\n+\n+            for (AnnotationInstance annotation : annotationInstances) {\n+                MethodInfo method = annotation.target().asMethod();\n+                jaxRsMethods.computeIfAbsent(method.declaringClass().name(), k -> new HashSet<String>())\n+                        .add(method.name().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNTk3MQ=="}, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTkyMzY3OnYy", "diffSide": "RIGHT", "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/MethodValidatedAnnotationsTransformer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODoxMzo0MFrOHEhmMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjozMzowNVrOHEzxwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNjgwMQ==", "bodyText": "Same here, you need to use the signature.", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474506801", "createdAt": "2020-08-21T08:13:40Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/MethodValidatedAnnotationsTransformer.java", "diffHunk": "@@ -96,11 +81,10 @@ private boolean requiresValidation(MethodInfo method) {\n     }\n \n     private boolean isJaxrsMethod(MethodInfo method) {\n-        for (DotName jaxrsMethodAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n-            if (method.hasAnnotation(jaxrsMethodAnnotation)) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        ClassInfo clazz = method.declaringClass();\n+        return Stream.concat(Stream.of(clazz.name()), clazz.interfaceNames().stream())\n+                .anyMatch(dotName -> Optional.ofNullable(jaxRsMethods.get(dotName))\n+                        .map(methodNames -> methodNames.contains(method.name()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwNDY3NA==", "bodyText": "Done.", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474804674", "createdAt": "2020-08-21T16:33:05Z", "author": {"login": "famod"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/MethodValidatedAnnotationsTransformer.java", "diffHunk": "@@ -96,11 +81,10 @@ private boolean requiresValidation(MethodInfo method) {\n     }\n \n     private boolean isJaxrsMethod(MethodInfo method) {\n-        for (DotName jaxrsMethodAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n-            if (method.hasAnnotation(jaxrsMethodAnnotation)) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        ClassInfo clazz = method.declaringClass();\n+        return Stream.concat(Stream.of(clazz.name()), clazz.interfaceNames().stream())\n+                .anyMatch(dotName -> Optional.ofNullable(jaxRsMethods.get(dotName))\n+                        .map(methodNames -> methodNames.contains(method.name()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNjgwMQ=="}, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTkyODM5OnYy", "diffSide": "RIGHT", "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODoxNDoyOVrOHEhpAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNjowNjo1MlrOHFOIKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNzUyMA==", "bodyText": "I have another patch moving ResteasyDotNames to a common SPI so we will be able to use the constants there rather than have a copy.", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474507520", "createdAt": "2020-08-21T08:14:29Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java", "diffHunk": "@@ -92,6 +94,16 @@\n \n     private static final DotName REPEATABLE = DotName.createSimple(Repeatable.class.getName());\n \n+    private static final DotName[] JAXRS_METHOD_ANNOTATIONS = {\n+            DotName.createSimple(\"javax.ws.rs.GET\"),\n+            DotName.createSimple(\"javax.ws.rs.HEAD\"),\n+            DotName.createSimple(\"javax.ws.rs.DELETE\"),\n+            DotName.createSimple(\"javax.ws.rs.OPTIONS\"),\n+            DotName.createSimple(\"javax.ws.rs.PATCH\"),\n+            DotName.createSimple(\"javax.ws.rs.POST\"),\n+            DotName.createSimple(\"javax.ws.rs.PUT\"),\n+    };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0MDA1MA==", "bodyText": "So I should wait for that PR?", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474640050", "createdAt": "2020-08-21T11:31:31Z", "author": {"login": "famod"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java", "diffHunk": "@@ -92,6 +94,16 @@\n \n     private static final DotName REPEATABLE = DotName.createSimple(Repeatable.class.getName());\n \n+    private static final DotName[] JAXRS_METHOD_ANNOTATIONS = {\n+            DotName.createSimple(\"javax.ws.rs.GET\"),\n+            DotName.createSimple(\"javax.ws.rs.HEAD\"),\n+            DotName.createSimple(\"javax.ws.rs.DELETE\"),\n+            DotName.createSimple(\"javax.ws.rs.OPTIONS\"),\n+            DotName.createSimple(\"javax.ws.rs.PATCH\"),\n+            DotName.createSimple(\"javax.ws.rs.POST\"),\n+            DotName.createSimple(\"javax.ws.rs.PUT\"),\n+    };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNzUyMA=="}, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0NjI2Mg==", "bodyText": "it should be merged before the end of the day. Let's see depending on where you're at, we can do it in a follow-up.", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474646262", "createdAt": "2020-08-21T11:45:53Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java", "diffHunk": "@@ -92,6 +94,16 @@\n \n     private static final DotName REPEATABLE = DotName.createSimple(Repeatable.class.getName());\n \n+    private static final DotName[] JAXRS_METHOD_ANNOTATIONS = {\n+            DotName.createSimple(\"javax.ws.rs.GET\"),\n+            DotName.createSimple(\"javax.ws.rs.HEAD\"),\n+            DotName.createSimple(\"javax.ws.rs.DELETE\"),\n+            DotName.createSimple(\"javax.ws.rs.OPTIONS\"),\n+            DotName.createSimple(\"javax.ws.rs.PATCH\"),\n+            DotName.createSimple(\"javax.ws.rs.POST\"),\n+            DotName.createSimple(\"javax.ws.rs.PUT\"),\n+    };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNzUyMA=="}, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIzNjM5NA==", "bodyText": "Done via a separate commit to allow for backporting without necessarily backporting (parts of) #11462.", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r475236394", "createdAt": "2020-08-23T16:06:52Z", "author": {"login": "famod"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java", "diffHunk": "@@ -92,6 +94,16 @@\n \n     private static final DotName REPEATABLE = DotName.createSimple(Repeatable.class.getName());\n \n+    private static final DotName[] JAXRS_METHOD_ANNOTATIONS = {\n+            DotName.createSimple(\"javax.ws.rs.GET\"),\n+            DotName.createSimple(\"javax.ws.rs.HEAD\"),\n+            DotName.createSimple(\"javax.ws.rs.DELETE\"),\n+            DotName.createSimple(\"javax.ws.rs.OPTIONS\"),\n+            DotName.createSimple(\"javax.ws.rs.PATCH\"),\n+            DotName.createSimple(\"javax.ws.rs.POST\"),\n+            DotName.createSimple(\"javax.ws.rs.PUT\"),\n+    };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNzUyMA=="}, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTkzNzEyOnYy", "diffSide": "RIGHT", "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/MethodValidatedAnnotationsTransformer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODoxNjowNVrOHEhuvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoxNDowNFrOHE0_Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwODk4OA==", "bodyText": "Don't you also need to consider the superclasses?", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474508988", "createdAt": "2020-08-21T08:16:05Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/MethodValidatedAnnotationsTransformer.java", "diffHunk": "@@ -96,11 +81,10 @@ private boolean requiresValidation(MethodInfo method) {\n     }\n \n     private boolean isJaxrsMethod(MethodInfo method) {\n-        for (DotName jaxrsMethodAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n-            if (method.hasAnnotation(jaxrsMethodAnnotation)) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        ClassInfo clazz = method.declaringClass();\n+        return Stream.concat(Stream.of(clazz.name()), clazz.interfaceNames().stream())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0MDQ0Nw==", "bodyText": "Well, I'd say yes. Same problem as described here: #11506 (comment)", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474640447", "createdAt": "2020-08-21T11:32:31Z", "author": {"login": "famod"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/MethodValidatedAnnotationsTransformer.java", "diffHunk": "@@ -96,11 +81,10 @@ private boolean requiresValidation(MethodInfo method) {\n     }\n \n     private boolean isJaxrsMethod(MethodInfo method) {\n-        for (DotName jaxrsMethodAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n-            if (method.hasAnnotation(jaxrsMethodAnnotation)) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        ClassInfo clazz = method.declaringClass();\n+        return Stream.concat(Stream.of(clazz.name()), clazz.interfaceNames().stream())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwODk4OA=="}, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwNjk4NQ==", "bodyText": "I only added a check for the direct superclass, since I do not have the entire ClassInfo hierarchy.\nTBH, I would like to stop at this point for this PR as far as superclasses are concerned.", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474806985", "createdAt": "2020-08-21T16:38:00Z", "author": {"login": "famod"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/MethodValidatedAnnotationsTransformer.java", "diffHunk": "@@ -96,11 +81,10 @@ private boolean requiresValidation(MethodInfo method) {\n     }\n \n     private boolean isJaxrsMethod(MethodInfo method) {\n-        for (DotName jaxrsMethodAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n-            if (method.hasAnnotation(jaxrsMethodAnnotation)) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        ClassInfo clazz = method.declaringClass();\n+        return Stream.concat(Stream.of(clazz.name()), clazz.interfaceNames().stream())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwODk4OA=="}, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNDU0Ng==", "bodyText": "I'll mark this as resolved and once this is merged I'll create a follow-up issue.", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474824546", "createdAt": "2020-08-21T17:14:04Z", "author": {"login": "famod"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/MethodValidatedAnnotationsTransformer.java", "diffHunk": "@@ -96,11 +81,10 @@ private boolean requiresValidation(MethodInfo method) {\n     }\n \n     private boolean isJaxrsMethod(MethodInfo method) {\n-        for (DotName jaxrsMethodAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n-            if (method.hasAnnotation(jaxrsMethodAnnotation)) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        ClassInfo clazz = method.declaringClass();\n+        return Stream.concat(Stream.of(clazz.name()), clazz.interfaceNames().stream())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwODk4OA=="}, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 625, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}