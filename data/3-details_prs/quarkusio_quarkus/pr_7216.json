{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1ODA4MTI3", "number": 7216, "title": "Update the reactive database client extensions to use Mutiny", "bodyText": "Add Mutiny support to the reactive MySQL extension\nAdd Mutiny support to the reactive PostgreSQL extension\nUpdate documentation\nUpdate ITs\n\nCC @tsegismont", "createdAt": "2020-02-16T10:11:05Z", "url": "https://github.com/quarkusio/quarkus/pull/7216", "merged": true, "mergeCommit": {"oid": "d2242d0e40fd9b18c44f62ecfa49d0e7e1b499f5"}, "closed": true, "closedAt": "2020-02-20T09:46:24Z", "author": {"login": "cescoffier"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFQh61AFqTM1OTg3ODk3MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGH9oigFqTM2MTc1OTk3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5ODc4OTcw", "url": "https://github.com/quarkusio/quarkus/pull/7216#pullrequestreview-359878970", "createdAt": "2020-02-17T17:09:36Z", "commit": {"oid": "d921635e7b7568bc8b2651254b3f281b6f55ff55"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzowOTozNlrOFqrZcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzoxMDo1NlrOFqrbcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5NTUzOA==", "bodyText": "I believe the volatile construct was preferred here because the producer can be invoked concurrently at runtime (e.g. in request scoped beans). Using synchronization instead would serialize these calls. Or am I missing something?", "url": "https://github.com/quarkusio/quarkus/pull/7216#discussion_r380295538", "createdAt": "2020-02-17T17:09:36Z", "author": {"login": "tsegismont"}, "path": "extensions/reactive-pg-client/runtime/src/main/java/io/quarkus/reactive/pg/client/runtime/PgPoolProducer.java", "diffHunk": "@@ -4,36 +4,87 @@\n import javax.enterprise.inject.Produces;\n import javax.inject.Singleton;\n \n+import org.jboss.logging.Logger;\n+\n import io.vertx.pgclient.PgPool;\n \n @ApplicationScoped\n public class PgPoolProducer {\n \n-    private volatile PgPool pgPool;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d921635e7b7568bc8b2651254b3f281b6f55ff55"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5NjA0OA==", "bodyText": "Shouldn't we use the same API methods in the quickstart and the doc? (flatMap in the quickstart)", "url": "https://github.com/quarkusio/quarkus/pull/7216#discussion_r380296048", "createdAt": "2020-02-17T17:10:56Z", "author": {"login": "tsegismont"}, "path": "docs/src/main/asciidoc/reactive-sql-clients.adoc", "diffHunk": "@@ -174,20 +176,19 @@ TIP: You may override the default value of the `myapp.schema.create` property in\n \n Almost ready!\n To initialize the DB in development mode, we will use the client simple `query` method.\n-It returns a `CompletionStage` and thus can be composed to execute queries sequentially:\n+It returns an `Uni` and thus can be composed to execute queries sequentially:\n \n [source,java]\n ----\n-        client.query(\"DROP TABLE IF EXISTS fruits\")\n-                .thenCompose(r -> client.query(\"CREATE TABLE fruits (id SERIAL PRIMARY KEY, name TEXT NOT NULL)\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Orange')\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Pear')\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Apple')\"))\n-                .toCompletableFuture()\n-                .join();\n+ client.query(\"DROP TABLE IF EXISTS fruits\")\n+    .onItem().produceUni(r -> client.query(\"CREATE TABLE fruits (id SERIAL PRIMARY KEY, name TEXT NOT NULL)\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d921635e7b7568bc8b2651254b3f281b6f55ff55"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "715fbf4192846d7dcc5b66fdd8ed286f63810418", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/715fbf4192846d7dcc5b66fdd8ed286f63810418", "committedDate": "2020-02-19T09:57:47Z", "message": "Add Mutiny support to the reactive PostgreSQL extension\n\n* Expose the Mutiny PgPool\n* Deprecate the RX and Axle API\n* Use lazy instantiation\n* Change the synchronization protocol for the PgPool\n\nFor the main pool, use volatile instead of being guarded by a lock.\nThis is because the \"set\" is called at start time, and then there is no concurrent writes.\nOther objects are guarded as we don't do atomic actions on them."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7710570b7a68b5db80861fc2ca003444a286514e", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/7710570b7a68b5db80861fc2ca003444a286514e", "committedDate": "2020-02-19T09:58:50Z", "message": "Add Mutiny support to the reactive MySQL extension\n\n* Expose the Mutiny MySQLPool\n* Deprecate the RX and Axle API\n* Use lazy instantiation\n* Change the synchronization protocol for the PgPool\n\nUse volatile instead of being guarded by a lock for the main pool.\nThis is because the \"set\" is called at start time, and then there is no concurrent writes.\nThe other pools are guarded because we don't do atomic actions on them (check and set)."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d921635e7b7568bc8b2651254b3f281b6f55ff55", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/d921635e7b7568bc8b2651254b3f281b6f55ff55", "committedDate": "2020-02-16T10:09:05Z", "message": "Switch reactive ITs client to mutiny\n\nThis commit uses the Mutiny PG/MySQL Pools instead of the Axle ones."}, "afterCommit": {"oid": "38bfea02a4f164f4bff8e04deb9e8785cebd68b0", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/38bfea02a4f164f4bff8e04deb9e8785cebd68b0", "committedDate": "2020-02-19T10:00:29Z", "message": "Switch reactive ITs client to mutiny\n\nThis commit uses the Mutiny PG/MySQL Pools instead of the Axle ones."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwOTgzNzEy", "url": "https://github.com/quarkusio/quarkus/pull/7216#pullrequestreview-360983712", "createdAt": "2020-02-19T10:07:22Z", "commit": {"oid": "38bfea02a4f164f4bff8e04deb9e8785cebd68b0"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMDowNzoyM1rOFriKKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMDowOTozOFrOFriPAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5Mjc0NA==", "bodyText": "flatMap is fine with me, so is the Mutiny flavor with onItem. Your call.\nMy only concern is that the test and the doc are consistent, so all good. \ud83d\udc4d", "url": "https://github.com/quarkusio/quarkus/pull/7216#discussion_r381192744", "createdAt": "2020-02-19T10:07:23Z", "author": {"login": "tsegismont"}, "path": "docs/src/main/asciidoc/reactive-sql-clients.adoc", "diffHunk": "@@ -174,20 +176,19 @@ TIP: You may override the default value of the `myapp.schema.create` property in\n \n Almost ready!\n To initialize the DB in development mode, we will use the client simple `query` method.\n-It returns a `CompletionStage` and thus can be composed to execute queries sequentially:\n+It returns an `Uni` and thus can be composed to execute queries sequentially:\n \n [source,java]\n ----\n-        client.query(\"DROP TABLE IF EXISTS fruits\")\n-                .thenCompose(r -> client.query(\"CREATE TABLE fruits (id SERIAL PRIMARY KEY, name TEXT NOT NULL)\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Orange')\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Pear')\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Apple')\"))\n-                .toCompletableFuture()\n-                .join();\n+ client.query(\"DROP TABLE IF EXISTS fruits\")\n+    .flatMap(r -> client.query(\"CREATE TABLE fruits (id SERIAL PRIMARY KEY, name TEXT NOT NULL)\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38bfea02a4f164f4bff8e04deb9e8785cebd68b0"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5Mzk4Ng==", "bodyText": "How about using AtomicReference to remove synchronization without losing the checks in the producer methods?", "url": "https://github.com/quarkusio/quarkus/pull/7216#discussion_r381193986", "createdAt": "2020-02-19T10:09:38Z", "author": {"login": "tsegismont"}, "path": "extensions/reactive-mysql-client/runtime/src/main/java/io/quarkus/reactive/mysql/client/runtime/MySQLPoolProducer.java", "diffHunk": "@@ -4,36 +4,90 @@\n import javax.enterprise.inject.Produces;\n import javax.inject.Singleton;\n \n+import org.jboss.logging.Logger;\n+\n import io.vertx.mysqlclient.MySQLPool;\n \n @ApplicationScoped\n public class MySQLPoolProducer {\n \n+    private static final Logger LOGGER = Logger.getLogger(MySQLPoolProducer.class);\n+\n     private volatile MySQLPool mysqlPool;\n-    private volatile io.vertx.axle.mysqlclient.MySQLPool axleMySQLPool;\n-    private volatile io.vertx.reactivex.mysqlclient.MySQLPool rxMySQLPool;\n+    private io.vertx.mutiny.mysqlclient.MySQLPool mutinyMySQLPool;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38bfea02a4f164f4bff8e04deb9e8785cebd68b0"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18d11bac19e4bedecb0f7198f64d2513a8559616", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/18d11bac19e4bedecb0f7198f64d2513a8559616", "committedDate": "2020-02-20T09:45:46Z", "message": "Update reactive database client documentation to use the Mutiny API\n\nAlso indicate that the RX and Axle APIs are deprecated.\nUse map and flatMap as reactive users are familiar with these constructs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b124ff3b4a65f10de8b1019d118140e4850f58e", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/4b124ff3b4a65f10de8b1019d118140e4850f58e", "committedDate": "2020-02-20T09:45:46Z", "message": "Switch reactive ITs client to mutiny\n\nThis commit uses the Mutiny PG/MySQL Pools instead of the Axle ones."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "38bfea02a4f164f4bff8e04deb9e8785cebd68b0", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/38bfea02a4f164f4bff8e04deb9e8785cebd68b0", "committedDate": "2020-02-19T10:00:29Z", "message": "Switch reactive ITs client to mutiny\n\nThis commit uses the Mutiny PG/MySQL Pools instead of the Axle ones."}, "afterCommit": {"oid": "4b124ff3b4a65f10de8b1019d118140e4850f58e", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/4b124ff3b4a65f10de8b1019d118140e4850f58e", "committedDate": "2020-02-20T09:45:46Z", "message": "Switch reactive ITs client to mutiny\n\nThis commit uses the Mutiny PG/MySQL Pools instead of the Axle ones."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNzU5OTc3", "url": "https://github.com/quarkusio/quarkus/pull/7216#pullrequestreview-361759977", "createdAt": "2020-02-20T09:46:17Z", "commit": {"oid": "38bfea02a4f164f4bff8e04deb9e8785cebd68b0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4969, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}