{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1NzkzNTc0", "number": 10939, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNTo1NDozMVrOERtGKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo0MjoyM1rOERvojA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDAwMTA3OnYy", "diffSide": "RIGHT", "path": "extensions/kubernetes/spi/src/main/java/io/quarkus/kubernetes/spi/KubernetesRoleBindingBuildItem.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNTo1NDozMVrOG2j4ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNzo0NDo0NlrOG2mCvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NDE4Nw==", "bodyText": "Can we please have some Javadoc on what the purpose of this is? I know we don't have it in all Build Items, but let's at least try to add it for build items we change :)", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r459864187", "createdAt": "2020-07-24T05:54:31Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/spi/src/main/java/io/quarkus/kubernetes/spi/KubernetesRoleBindingBuildItem.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package io.quarkus.kubernetes.spi;\n+\n+import io.quarkus.builder.item.MultiBuildItem;\n+\n+public final class KubernetesRoleBindingBuildItem extends MultiBuildItem {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffc17d63e880f64272916ced572c613920f6ec1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg5OTU4MQ==", "bodyText": "Good point, will do.", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r459899581", "createdAt": "2020-07-24T07:44:46Z", "author": {"login": "Ladicek"}, "path": "extensions/kubernetes/spi/src/main/java/io/quarkus/kubernetes/spi/KubernetesRoleBindingBuildItem.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package io.quarkus.kubernetes.spi;\n+\n+import io.quarkus.builder.item.MultiBuildItem;\n+\n+public final class KubernetesRoleBindingBuildItem extends MultiBuildItem {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NDE4Nw=="}, "originalCommit": {"oid": "9ffc17d63e880f64272916ced572c613920f6ec1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDAwMTY1OnYy", "diffSide": "RIGHT", "path": "extensions/kubernetes/spi/src/main/java/io/quarkus/kubernetes/spi/KubernetesRoleBuildItem.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNTo1NDo1NVrOG2j41A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNzo0NDo0OVrOG2mC0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NDI3Ng==", "bodyText": "Again, it would be great if we had some Javadoc here", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r459864276", "createdAt": "2020-07-24T05:54:55Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/spi/src/main/java/io/quarkus/kubernetes/spi/KubernetesRoleBuildItem.java", "diffHunk": "@@ -1,16 +1,64 @@\n package io.quarkus.kubernetes.spi;\n \n+import java.util.List;\n+\n import io.quarkus.builder.item.MultiBuildItem;\n \n public final class KubernetesRoleBuildItem extends MultiBuildItem {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffc17d63e880f64272916ced572c613920f6ec1"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg5OTYwMg==", "bodyText": "Good point, will do.", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r459899602", "createdAt": "2020-07-24T07:44:49Z", "author": {"login": "Ladicek"}, "path": "extensions/kubernetes/spi/src/main/java/io/quarkus/kubernetes/spi/KubernetesRoleBuildItem.java", "diffHunk": "@@ -1,16 +1,64 @@\n package io.quarkus.kubernetes.spi;\n \n+import java.util.List;\n+\n import io.quarkus.builder.item.MultiBuildItem;\n \n public final class KubernetesRoleBuildItem extends MultiBuildItem {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NDI3Ng=="}, "originalCommit": {"oid": "9ffc17d63e880f64272916ced572c613920f6ec1"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDAwNDQzOnYy", "diffSide": "RIGHT", "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNTo1NjoxNFrOG2j6Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjowMjoxM1rOG41Pew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NDY1MA==", "bodyText": "I don't remember TBH... To me it doesn't seem reasonable (it might have made sense in the past?).\n@iocanel do you remember?", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r459864650", "createdAt": "2020-07-24T05:56:14Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "diffHunk": "@@ -732,11 +736,16 @@ private void applyBuildItems(Session session,\n                 .forEach(p -> session.configurators().add(new AddPort(p)));\n \n         //Handle RBAC\n+        // TODO why this condition?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffc17d63e880f64272916ced572c613920f6ec1"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI0NTc1NQ==", "bodyText": "The condition seems wrong. The actual condition should be when kubernetes-client is added to the project or something like that.", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r462245755", "createdAt": "2020-07-29T12:02:13Z", "author": {"login": "iocanel"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "diffHunk": "@@ -732,11 +736,16 @@ private void applyBuildItems(Session session,\n                 .forEach(p -> session.configurators().add(new AddPort(p)));\n \n         //Handle RBAC\n+        // TODO why this condition?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NDY1MA=="}, "originalCommit": {"oid": "9ffc17d63e880f64272916ced572c613920f6ec1"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDAwOTEwOnYy", "diffSide": "RIGHT", "path": "extensions/kubernetes/spi/src/main/java/io/quarkus/kubernetes/spi/KubernetesRoleBuildItem.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNTo1ODo1OVrOG2j87Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNzo1MDoyM1rOG2mMDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NTMyNQ==", "bodyText": "What is the rationale for multiple apiGroups? Is it useful for when Kubernetes API graduate?", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r459865325", "createdAt": "2020-07-24T05:58:59Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/spi/src/main/java/io/quarkus/kubernetes/spi/KubernetesRoleBuildItem.java", "diffHunk": "@@ -1,16 +1,64 @@\n package io.quarkus.kubernetes.spi;\n \n+import java.util.List;\n+\n import io.quarkus.builder.item.MultiBuildItem;\n \n public final class KubernetesRoleBuildItem extends MultiBuildItem {\n+    private final String name; // name of the Role resource\n+    private final List<PolicyRule> rules;\n+\n+    public KubernetesRoleBuildItem(String name, List<PolicyRule> rules) {\n+        this.name = name;\n+        this.rules = rules;\n+    }\n \n-    private final String role;\n+    public String getName() {\n+        return name;\n+    }\n \n-    public KubernetesRoleBuildItem(String role) {\n-        this.role = role;\n+    public List<PolicyRule> getRules() {\n+        return rules;\n     }\n \n-    public String getRole() {\n-        return this.role;\n+    public static final class PolicyRule {\n+        private final List<String> apiGroups;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffc17d63e880f64272916ced572c613920f6ec1"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwMTQ5OA==", "bodyText": "I have no idea, this just mirrors the Kubernetes API :-)\nAPI graduation (API group named \"alpha\", \"beta\", and final without designation) is certainly one case where this can be used. Another is older OpenShift resources that were in the \"\" API group and are now moved to their own API group (run oc get clusterrole view -o yaml and see).", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r459901498", "createdAt": "2020-07-24T07:49:18Z", "author": {"login": "Ladicek"}, "path": "extensions/kubernetes/spi/src/main/java/io/quarkus/kubernetes/spi/KubernetesRoleBuildItem.java", "diffHunk": "@@ -1,16 +1,64 @@\n package io.quarkus.kubernetes.spi;\n \n+import java.util.List;\n+\n import io.quarkus.builder.item.MultiBuildItem;\n \n public final class KubernetesRoleBuildItem extends MultiBuildItem {\n+    private final String name; // name of the Role resource\n+    private final List<PolicyRule> rules;\n+\n+    public KubernetesRoleBuildItem(String name, List<PolicyRule> rules) {\n+        this.name = name;\n+        this.rules = rules;\n+    }\n \n-    private final String role;\n+    public String getName() {\n+        return name;\n+    }\n \n-    public KubernetesRoleBuildItem(String role) {\n-        this.role = role;\n+    public List<PolicyRule> getRules() {\n+        return rules;\n     }\n \n-    public String getRole() {\n-        return this.role;\n+    public static final class PolicyRule {\n+        private final List<String> apiGroups;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NTMyNQ=="}, "originalCommit": {"oid": "9ffc17d63e880f64272916ced572c613920f6ec1"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwMTk2NQ==", "bodyText": "Gotcha, thanks", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r459901965", "createdAt": "2020-07-24T07:50:23Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/spi/src/main/java/io/quarkus/kubernetes/spi/KubernetesRoleBuildItem.java", "diffHunk": "@@ -1,16 +1,64 @@\n package io.quarkus.kubernetes.spi;\n \n+import java.util.List;\n+\n import io.quarkus.builder.item.MultiBuildItem;\n \n public final class KubernetesRoleBuildItem extends MultiBuildItem {\n+    private final String name; // name of the Role resource\n+    private final List<PolicyRule> rules;\n+\n+    public KubernetesRoleBuildItem(String name, List<PolicyRule> rules) {\n+        this.name = name;\n+        this.rules = rules;\n+    }\n \n-    private final String role;\n+    public String getName() {\n+        return name;\n+    }\n \n-    public KubernetesRoleBuildItem(String role) {\n-        this.role = role;\n+    public List<PolicyRule> getRules() {\n+        return rules;\n     }\n \n-    public String getRole() {\n-        return this.role;\n+    public static final class PolicyRule {\n+        private final List<String> apiGroups;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NTMyNQ=="}, "originalCommit": {"oid": "9ffc17d63e880f64272916ced572c613920f6ec1"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDAxMjg2OnYy", "diffSide": "RIGHT", "path": "extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjowMDo0NVrOG2j-4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODozOTo1OVrOG2nj1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NTgyNg==", "bodyText": "I am wondering if we should have a warning message when this is used without quarkus.kubernetes-config.secrets.enabled being true", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r459865826", "createdAt": "2020-07-24T06:00:45Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java", "diffHunk": "@@ -29,8 +29,15 @@\n     public Optional<List<String>> configMaps;\n \n     /**\n-     * Namespace to look for config maps. If this is not specified, then the namespace configured in the kubectl config context\n-     * is used. If the value is specified and the namespace doesn't exist, the application will fail to start.\n+     * Secrets to look for in the namespace that the Kubernetes Client has been configured for.\n+     * If you use this, you probably want to enable {@code quarkus.kubernetes-config.secrets.enabled}.\n+     */\n+    @ConfigItem\n+    public Optional<List<String>> secrets;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffc17d63e880f64272916ced572c613920f6ec1"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwMTk0Nw==", "bodyText": "I'd be careful about that. As you explained to me, we can't figure out at build time if secrets will be used or not.", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r459901947", "createdAt": "2020-07-24T07:50:19Z", "author": {"login": "Ladicek"}, "path": "extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java", "diffHunk": "@@ -29,8 +29,15 @@\n     public Optional<List<String>> configMaps;\n \n     /**\n-     * Namespace to look for config maps. If this is not specified, then the namespace configured in the kubectl config context\n-     * is used. If the value is specified and the namespace doesn't exist, the application will fail to start.\n+     * Secrets to look for in the namespace that the Kubernetes Client has been configured for.\n+     * If you use this, you probably want to enable {@code quarkus.kubernetes-config.secrets.enabled}.\n+     */\n+    @ConfigItem\n+    public Optional<List<String>> secrets;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NTgyNg=="}, "originalCommit": {"oid": "9ffc17d63e880f64272916ced572c613920f6ec1"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwMzg0MA==", "bodyText": "Sure yeah, you can't have a proper build time warning, but we could have a warning in the recorder which would be logged at runtime.\nI think it's better to be explicit so users will now exactly what's going on.\nI can already imagine people asking on Zulip or GitHub why their configured secrets are not taking effect :)", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r459903840", "createdAt": "2020-07-24T07:54:46Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java", "diffHunk": "@@ -29,8 +29,15 @@\n     public Optional<List<String>> configMaps;\n \n     /**\n-     * Namespace to look for config maps. If this is not specified, then the namespace configured in the kubectl config context\n-     * is used. If the value is specified and the namespace doesn't exist, the application will fail to start.\n+     * Secrets to look for in the namespace that the Kubernetes Client has been configured for.\n+     * If you use this, you probably want to enable {@code quarkus.kubernetes-config.secrets.enabled}.\n+     */\n+    @ConfigItem\n+    public Optional<List<String>> secrets;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NTgyNg=="}, "originalCommit": {"oid": "9ffc17d63e880f64272916ced572c613920f6ec1"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkxNDQyOQ==", "bodyText": "I see what you mean. I personally think that the Kubernetes stuff already logs a bit too much, but that's during build. I'll add this runtime warning.", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r459914429", "createdAt": "2020-07-24T08:18:01Z", "author": {"login": "Ladicek"}, "path": "extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java", "diffHunk": "@@ -29,8 +29,15 @@\n     public Optional<List<String>> configMaps;\n \n     /**\n-     * Namespace to look for config maps. If this is not specified, then the namespace configured in the kubectl config context\n-     * is used. If the value is specified and the namespace doesn't exist, the application will fail to start.\n+     * Secrets to look for in the namespace that the Kubernetes Client has been configured for.\n+     * If you use this, you probably want to enable {@code quarkus.kubernetes-config.secrets.enabled}.\n+     */\n+    @ConfigItem\n+    public Optional<List<String>> secrets;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NTgyNg=="}, "originalCommit": {"oid": "9ffc17d63e880f64272916ced572c613920f6ec1"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkyMjIxMQ==", "bodyText": "I did it, but found that in the failing case, the warning is totally lost between all the other logs :-) Will push in a sec.", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r459922211", "createdAt": "2020-07-24T08:35:06Z", "author": {"login": "Ladicek"}, "path": "extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java", "diffHunk": "@@ -29,8 +29,15 @@\n     public Optional<List<String>> configMaps;\n \n     /**\n-     * Namespace to look for config maps. If this is not specified, then the namespace configured in the kubectl config context\n-     * is used. If the value is specified and the namespace doesn't exist, the application will fail to start.\n+     * Secrets to look for in the namespace that the Kubernetes Client has been configured for.\n+     * If you use this, you probably want to enable {@code quarkus.kubernetes-config.secrets.enabled}.\n+     */\n+    @ConfigItem\n+    public Optional<List<String>> secrets;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NTgyNg=="}, "originalCommit": {"oid": "9ffc17d63e880f64272916ced572c613920f6ec1"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkyNDQzOQ==", "bodyText": "Done.", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r459924439", "createdAt": "2020-07-24T08:39:59Z", "author": {"login": "Ladicek"}, "path": "extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigSourceConfig.java", "diffHunk": "@@ -29,8 +29,15 @@\n     public Optional<List<String>> configMaps;\n \n     /**\n-     * Namespace to look for config maps. If this is not specified, then the namespace configured in the kubectl config context\n-     * is used. If the value is specified and the namespace doesn't exist, the application will fail to start.\n+     * Secrets to look for in the namespace that the Kubernetes Client has been configured for.\n+     * If you use this, you probably want to enable {@code quarkus.kubernetes-config.secrets.enabled}.\n+     */\n+    @ConfigItem\n+    public Optional<List<String>> secrets;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NTgyNg=="}, "originalCommit": {"oid": "9ffc17d63e880f64272916ced572c613920f6ec1"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDAxNTA0OnYy", "diffSide": "RIGHT", "path": "integration-tests/kubernetes/quarkus-standard-way/src/test/java/io/quarkus/it/kubernetes/KubernetesConfigWithSecretsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjowMjowOFrOG2kALg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjowMjowOFrOG2kALg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NjE1OA==", "bodyText": "This kind of thing is exactly why I LOVE AssertJ :)", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r459866158", "createdAt": "2020-07-24T06:02:08Z", "author": {"login": "geoand"}, "path": "integration-tests/kubernetes/quarkus-standard-way/src/test/java/io/quarkus/it/kubernetes/KubernetesConfigWithSecretsTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package io.quarkus.it.kubernetes;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.fabric8.kubernetes.api.model.HasMetadata;\n+import io.fabric8.kubernetes.api.model.rbac.PolicyRule;\n+import io.fabric8.kubernetes.api.model.rbac.Role;\n+import io.fabric8.kubernetes.api.model.rbac.RoleBinding;\n+import io.quarkus.bootstrap.model.AppArtifact;\n+import io.quarkus.builder.Version;\n+import io.quarkus.test.ProdBuildResults;\n+import io.quarkus.test.ProdModeTestResults;\n+import io.quarkus.test.QuarkusProdModeTest;\n+\n+public class KubernetesConfigWithSecretsTest {\n+\n+    @RegisterExtension\n+    static final QuarkusProdModeTest config = new QuarkusProdModeTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class).addClasses(GreetingResource.class))\n+            .setApplicationName(\"kubernetes-config-with-secrets\")\n+            .setApplicationVersion(\"0.1-SNAPSHOT\")\n+            .withConfigurationResource(\"kubernetes-config-with-secrets.properties\")\n+            .setForcedDependencies(Collections.singletonList(\n+                    new AppArtifact(\"io.quarkus\", \"quarkus-kubernetes-config\", Version.getVersion())));\n+\n+    @ProdBuildResults\n+    private ProdModeTestResults prodModeTestResults;\n+\n+    @Test\n+    public void assertGeneratedResources() throws IOException {\n+        Path kubernetesDir = prodModeTestResults.getBuildDir().resolve(\"kubernetes\");\n+        assertThat(kubernetesDir)\n+                .isDirectoryContaining(p -> p.getFileName().endsWith(\"kubernetes.json\"))\n+                .isDirectoryContaining(p -> p.getFileName().endsWith(\"kubernetes.yml\"));\n+        List<HasMetadata> kubernetesList = DeserializationUtil.deserializeAsList(kubernetesDir.resolve(\"kubernetes.yml\"));\n+\n+        assertThat(kubernetesList).filteredOn(h -> \"Role\".equals(h.getKind())).hasSize(1);\n+\n+        assertThat(kubernetesList).anySatisfy(res -> {\n+            assertThat(res).isInstanceOfSatisfying(Role.class, role -> {\n+                assertThat(role.getMetadata()).satisfies(m -> {\n+                    assertThat(m.getName()).isEqualTo(\"view-secrets\");\n+                });\n+\n+                assertThat(role.getRules()).hasOnlyOneElementSatisfying(r -> {\n+                    assertThat(r).isInstanceOfSatisfying(PolicyRule.class, rule -> {\n+                        assertThat(rule.getApiGroups()).containsExactly(\"\");\n+                        assertThat(rule.getResources()).containsExactly(\"secrets\");\n+                        assertThat(rule.getVerbs()).containsExactly(\"get\", \"list\", \"watch\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffc17d63e880f64272916ced572c613920f6ec1"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDAxNzEwOnYy", "diffSide": "RIGHT", "path": "bom/application/pom.xml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjowMzoxNlrOG2kBTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMTo1ODoyN1rOG41H1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NjQ0Nw==", "bodyText": "Let's not forget to change this one :P", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r459866447", "createdAt": "2020-07-24T06:03:16Z", "author": {"login": "geoand"}, "path": "bom/application/pom.xml", "diffHunk": "@@ -145,7 +145,7 @@\n         <aws-alexa-sdk.version>2.30.0</aws-alexa-sdk.version>\n         <azure-functions-java-library.version>1.3.0</azure-functions-java-library.version>\n         <kotlin.version>1.3.72</kotlin.version>\n-        <dekorate.version>0.12.6</dekorate.version>\n+        <dekorate.version>0.12-SNAPSHOT</dekorate.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffc17d63e880f64272916ced572c613920f6ec1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwMjA5Ng==", "bodyText": "Yea. Hopefully dekorateio/dekorate#594 will get some attention :-)", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r459902096", "createdAt": "2020-07-24T07:50:44Z", "author": {"login": "Ladicek"}, "path": "bom/application/pom.xml", "diffHunk": "@@ -145,7 +145,7 @@\n         <aws-alexa-sdk.version>2.30.0</aws-alexa-sdk.version>\n         <azure-functions-java-library.version>1.3.0</azure-functions-java-library.version>\n         <kotlin.version>1.3.72</kotlin.version>\n-        <dekorate.version>0.12.6</dekorate.version>\n+        <dekorate.version>0.12-SNAPSHOT</dekorate.version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NjQ0Nw=="}, "originalCommit": {"oid": "9ffc17d63e880f64272916ced572c613920f6ec1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwNDU5Ng==", "bodyText": "I pinged @iocanel on this", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r459904596", "createdAt": "2020-07-24T07:56:31Z", "author": {"login": "geoand"}, "path": "bom/application/pom.xml", "diffHunk": "@@ -145,7 +145,7 @@\n         <aws-alexa-sdk.version>2.30.0</aws-alexa-sdk.version>\n         <azure-functions-java-library.version>1.3.0</azure-functions-java-library.version>\n         <kotlin.version>1.3.72</kotlin.version>\n-        <dekorate.version>0.12.6</dekorate.version>\n+        <dekorate.version>0.12-SNAPSHOT</dekorate.version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NjQ0Nw=="}, "originalCommit": {"oid": "9ffc17d63e880f64272916ced572c613920f6ec1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI0Mzc5Nw==", "bodyText": "I'll release later today", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r462243797", "createdAt": "2020-07-29T11:58:27Z", "author": {"login": "iocanel"}, "path": "bom/application/pom.xml", "diffHunk": "@@ -145,7 +145,7 @@\n         <aws-alexa-sdk.version>2.30.0</aws-alexa-sdk.version>\n         <azure-functions-java-library.version>1.3.0</azure-functions-java-library.version>\n         <kotlin.version>1.3.72</kotlin.version>\n-        <dekorate.version>0.12.6</dekorate.version>\n+        <dekorate.version>0.12-SNAPSHOT</dekorate.version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NjQ0Nw=="}, "originalCommit": {"oid": "9ffc17d63e880f64272916ced572c613920f6ec1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDAxNzg4OnYy", "diffSide": "RIGHT", "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/AddRoleResourceDecorator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjowMzo0NVrOG2kBsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjowMzo0NVrOG2kBsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2NjU0Ng==", "bodyText": "LGTM, but this is one that @iocanel will have to give the OK for", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r459866546", "createdAt": "2020-07-24T06:03:45Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/AddRoleResourceDecorator.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package io.quarkus.kubernetes.deployment;\n+\n+import java.util.stream.Collectors;\n+\n+import io.dekorate.deps.kubernetes.api.model.KubernetesListBuilder;\n+import io.dekorate.deps.kubernetes.api.model.ObjectMeta;\n+import io.dekorate.deps.kubernetes.api.model.rbac.PolicyRuleBuilder;\n+import io.dekorate.deps.kubernetes.api.model.rbac.RoleBuilder;\n+import io.dekorate.kubernetes.decorator.ResourceProvidingDecorator;\n+import io.quarkus.kubernetes.spi.KubernetesRoleBuildItem;\n+\n+class AddRoleResourceDecorator extends ResourceProvidingDecorator<KubernetesListBuilder> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffc17d63e880f64272916ced572c613920f6ec1"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDQxNjc2OnYy", "diffSide": "RIGHT", "path": "extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigRecorder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo0MjoyM1rOG2noBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwOTo0NjoxMFrOG2pdNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkyNTUxMA==", "bodyText": "Is it just me, or does the last sentence seem out of place?", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r459925510", "createdAt": "2020-07-24T08:42:23Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigRecorder.java", "diffHunk": "@@ -26,6 +26,17 @@\n                 KubernetesClientUtils.createClient(clientConfig)));\n     }\n \n+    public void warnAboutSecrets(KubernetesConfigSourceConfig config, KubernetesConfigBuildTimeConfig buildTimeConfig) {\n+        if (config.enabled\n+                && config.secrets.isPresent()\n+                && !config.secrets.get().isEmpty()\n+                && !buildTimeConfig.secretsEnabled) {\n+            log.warn(\"Configuration is read from Secrets \" + config.secrets.get()\n+                    + \", but quarkus.kubernetes-config.secrets.enabled is false.\"\n+                    + \" Check if your application's service account has enough permissions to read secrets.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74eb333af3f9583e45502b6a641ee3e93bf6ce4b"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk0MDY2NA==", "bodyText": "I wanted to say that what the user ultimately needs to do is not setting our config property, but make sure that the app's service account has access to secrets.\nObviously quarkus.kubernetes-config.secrets.enabled is the easiest way, if people use the Kubernetes extension. But that doesn't always have to be the case.", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r459940664", "createdAt": "2020-07-24T09:13:13Z", "author": {"login": "Ladicek"}, "path": "extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigRecorder.java", "diffHunk": "@@ -26,6 +26,17 @@\n                 KubernetesClientUtils.createClient(clientConfig)));\n     }\n \n+    public void warnAboutSecrets(KubernetesConfigSourceConfig config, KubernetesConfigBuildTimeConfig buildTimeConfig) {\n+        if (config.enabled\n+                && config.secrets.isPresent()\n+                && !config.secrets.get().isEmpty()\n+                && !buildTimeConfig.secretsEnabled) {\n+            log.warn(\"Configuration is read from Secrets \" + config.secrets.get()\n+                    + \", but quarkus.kubernetes-config.secrets.enabled is false.\"\n+                    + \" Check if your application's service account has enough permissions to read secrets.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkyNTUxMA=="}, "originalCommit": {"oid": "74eb333af3f9583e45502b6a641ee3e93bf6ce4b"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1NTUxMQ==", "bodyText": "Okay", "url": "https://github.com/quarkusio/quarkus/pull/10939#discussion_r459955511", "createdAt": "2020-07-24T09:46:10Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes-config/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesConfigRecorder.java", "diffHunk": "@@ -26,6 +26,17 @@\n                 KubernetesClientUtils.createClient(clientConfig)));\n     }\n \n+    public void warnAboutSecrets(KubernetesConfigSourceConfig config, KubernetesConfigBuildTimeConfig buildTimeConfig) {\n+        if (config.enabled\n+                && config.secrets.isPresent()\n+                && !config.secrets.get().isEmpty()\n+                && !buildTimeConfig.secretsEnabled) {\n+            log.warn(\"Configuration is read from Secrets \" + config.secrets.get()\n+                    + \", but quarkus.kubernetes-config.secrets.enabled is false.\"\n+                    + \" Check if your application's service account has enough permissions to read secrets.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkyNTUxMA=="}, "originalCommit": {"oid": "74eb333af3f9583e45502b6a641ee3e93bf6ce4b"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 867, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}