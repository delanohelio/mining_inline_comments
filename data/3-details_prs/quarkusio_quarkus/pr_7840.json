{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3NzI0NTEz", "number": 7840, "title": "Panache Hibernate REST", "bodyText": "Fixes: #3454\nThis extension brings a similar functionality to the one provided by Spring Data REST. It generates CRUD HTTP endpoints for user defined Panache entities. It exposes those entities in two formats: plain JSON and HAL+JSON (HAL serialisation is supported both for Jackson and JSON-B). For example a Book can be exposed by defining a BookController interface.\nPanacheRestResource can be used to enable/disable HAL responses and to hide specific HTTP methods (by default HAL is disabled and all CRUD methods are exposed).\nI'm raising this PR with an initial set of features which I would like to extend in the future. However, with the current features this extension could already be used to start implementing a Spring Compatibility layer for Spring Data REST.\nThis PR is also missing a documentation. I'm happy to include it but I would like to get an initial feedback on the extension first.\ncc @geoand @FroMage", "createdAt": "2020-03-13T11:20:08Z", "url": "https://github.com/quarkusio/quarkus/pull/7840", "merged": true, "mergeCommit": {"oid": "23ac152bce84df4c0f7734f7b0d1b86754fb7387"}, "closed": true, "closedAt": "2020-05-07T08:04:05Z", "author": {"login": "gytis"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcNPRa1AFqTM3NDI1MjA0Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABce4pODgFqTQwNzIzNzM5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MjUyMDQ3", "url": "https://github.com/quarkusio/quarkus/pull/7840#pullrequestreview-374252047", "createdAt": "2020-03-13T12:13:19Z", "commit": {"oid": "025984e97005ab81d89788954f3ed248fc0c4f3e"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMjoxMzoxOVrOF2BdYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMjoxMzoxOVrOF2BdYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE5MTMyOA==", "bodyText": "We will need a description here. It will be the one displayed on code.quarkus.io. You can have a look there to have examples.", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392191328", "createdAt": "2020-03-13T12:13:19Z", "author": {"login": "gsmet"}, "path": "extensions/panache/hibernate-orm-panache-rest/runtime/pom.xml", "diffHunk": "@@ -0,0 +1,66 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-hibernate-orm-panache-rest-parent</artifactId>\n+        <version>999-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>quarkus-hibernate-orm-panache-rest</artifactId>\n+    <name>Quarkus - Hibernate ORM with Panache REST Controllers - Runtime</name>\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "025984e97005ab81d89788954f3ed248fc0c4f3e"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MDAzOTY5", "url": "https://github.com/quarkusio/quarkus/pull/7840#pullrequestreview-375003969", "createdAt": "2020-03-16T08:39:36Z", "commit": {"oid": "025984e97005ab81d89788954f3ed248fc0c4f3e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODozOTozNlrOF2qFAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODo1OToxMFrOF2qsIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1NjgzNQ==", "bodyText": "Are you sure this correct?", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392856835", "createdAt": "2020-03-16T08:39:36Z", "author": {"login": "geoand"}, "path": "extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/ControllerImplementor.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package io.quarkus.hibernate.orm.panache.rest.deployment;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.BiFunction;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.IndexView;\n+\n+import io.quarkus.deployment.util.HashUtil;\n+import io.quarkus.gizmo.ClassCreator;\n+import io.quarkus.gizmo.ClassOutput;\n+import io.quarkus.hibernate.orm.panache.rest.deployment.methods.AddMethodImplementor;\n+import io.quarkus.hibernate.orm.panache.rest.deployment.methods.DeleteMethodImplementor;\n+import io.quarkus.hibernate.orm.panache.rest.deployment.methods.GetMethodImplementor;\n+import io.quarkus.hibernate.orm.panache.rest.deployment.methods.ListMethodImplementor;\n+import io.quarkus.hibernate.orm.panache.rest.deployment.methods.MethodImplementor;\n+import io.quarkus.hibernate.orm.panache.rest.deployment.methods.UpdateMethodImplementor;\n+import io.quarkus.hibernate.orm.panache.rest.deployment.utils.ControllerAnnotator;\n+\n+class ControllerImplementor {\n+\n+    private static final List<BiFunction<ClassInfo, IndexView, MethodImplementor>> METHOD_IMPLEMENTORS = Arrays.asList(\n+            GetMethodImplementor::new,\n+            ListMethodImplementor::new,\n+            AddMethodImplementor::new,\n+            UpdateMethodImplementor::new,\n+            DeleteMethodImplementor::new);\n+\n+    private final ClassOutput classOutput;\n+\n+    ControllerImplementor(ClassOutput classOutput) {\n+        this.classOutput = classOutput;\n+    }\n+\n+    void implement(ClassInfo controllerInterface, IndexView index) {\n+        ClassCreator classCreator = ClassCreator.builder()\n+                .classOutput(classOutput)\n+                .className(controllerInterface.toString() + \"Impl_\" + HashUtil.sha1(controllerInterface.toString()))\n+                .interfaces(controllerInterface.toString())\n+                .build();\n+        ControllerAnnotator.addPath(classCreator, \"/\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "025984e97005ab81d89788954f3ed248fc0c4f3e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1Njk4NA==", "bodyText": "I think we can do better with the error message here :)", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392856984", "createdAt": "2020-03-16T08:39:56Z", "author": {"login": "geoand"}, "path": "extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/HibernateOrmPanacheRestProcessor.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package io.quarkus.hibernate.orm.panache.rest.deployment;\n+\n+import static io.quarkus.deployment.builditem.FeatureBuildItem.HIBERNATE_ORM_PANACHE_REST;\n+\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.logging.Logger;\n+import org.jboss.resteasy.links.impl.EL;\n+\n+import io.quarkus.arc.deployment.GeneratedBeanBuildItem;\n+import io.quarkus.arc.deployment.GeneratedBeanGizmoAdaptor;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import io.quarkus.hibernate.orm.panache.rest.PanacheCrudController;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalCollectionWrapper;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalCollectionWrapperJacksonSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalCollectionWrapperJsonbSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalEntityWrapper;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalEntityWrapperJacksonSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalEntityWrapperJsonbSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalLink;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalLinkJacksonSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalLinkJsonbSerializer;\n+import io.quarkus.jackson.spi.JacksonModuleBuildItem;\n+import io.quarkus.jsonb.spi.JsonbSerializerBuildItem;\n+\n+class HibernateOrmPanacheRestProcessor {\n+\n+    private static final DotName PANACHE_CRUD_CONTROLLER_INTERFACE = DotName\n+            .createSimple(PanacheCrudController.class.getName());\n+\n+    private static final Logger LOGGER = Logger.getLogger(HibernateOrmPanacheRestProcessor.class);\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(HIBERNATE_ORM_PANACHE_REST);\n+    }\n+\n+    @BuildStep\n+    RuntimeInitializedClassBuildItem el() {\n+        return new RuntimeInitializedClassBuildItem(EL.class.getCanonicalName());\n+    }\n+\n+    @BuildStep\n+    void generateControllers(CombinedIndexBuildItem index, BuildProducer<GeneratedBeanBuildItem> implementationsProducer) {\n+        ControllerImplementor implementor = new ControllerImplementor(new GeneratedBeanGizmoAdaptor(implementationsProducer));\n+        for (ClassInfo classInfo : index.getIndex().getKnownClasses()) {\n+            if (isValidCrudController(index.getIndex(), classInfo)) {\n+                implementor.implement(classInfo, index.getIndex());\n+            }\n+        }\n+    }\n+\n+    private boolean isValidCrudController(IndexView index, ClassInfo classInfo) {\n+        if (!Modifier.isInterface(classInfo.flags())\n+                || !classInfo.interfaceNames().contains(PANACHE_CRUD_CONTROLLER_INTERFACE)) {\n+            return false;\n+        }\n+\n+        if (!index.getKnownDirectImplementors(classInfo.name()).isEmpty()) {\n+            LOGGER.warnf(\"Panache CRUD controller '%s' has children - it will be ignored\", classInfo.name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "025984e97005ab81d89788954f3ed248fc0c4f3e"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1ODMwOQ==", "bodyText": "I would like to see a couple more entities and controllers in the integration test to make sure than no wires cross paths :)", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392858309", "createdAt": "2020-03-16T08:42:35Z", "author": {"login": "geoand"}, "path": "integration-tests/hibernate-orm-panache-rest/src/main/java/io/quarkus/it/panache/rest/BookController.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package io.quarkus.it.panache.rest;\n+\n+import io.quarkus.hibernate.orm.panache.rest.PanacheCrudController;\n+import io.quarkus.hibernate.orm.panache.rest.PanacheRestResource;\n+\n+@PanacheRestResource(hal = true)\n+public interface BookController extends PanacheCrudController<Book, Long> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "025984e97005ab81d89788954f3ed248fc0c4f3e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1OTYyOQ==", "bodyText": "Is there a reason why exposed would ever be false?", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392859629", "createdAt": "2020-03-16T08:45:09Z", "author": {"login": "geoand"}, "path": "extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/PanacheRestResource.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package io.quarkus.hibernate.orm.panache.rest;\n+\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+@Documented\n+@Retention(RUNTIME)\n+@Target({ TYPE, METHOD })\n+public @interface PanacheRestResource {\n+\n+    boolean exposed() default true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "025984e97005ab81d89788954f3ed248fc0c4f3e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2MDkwOQ==", "bodyText": "I think that this and all classes in the hal package are \"private\" classes of the runtime module, while PanacheCrudController and PanacheRestResource are the public part.\nThe way we usually deal with that is have all the \"private\" classes under a runtime package, so this class would be io.quarkus.hibernate.orm.panache.rest.runtime.utils", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392860909", "createdAt": "2020-03-16T08:47:37Z", "author": {"login": "geoand"}, "path": "extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/utils/StringUtil.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package io.quarkus.hibernate.orm.panache.rest.utils;\n+\n+import static io.quarkus.runtime.util.StringUtil.camelHumpsIterator;\n+import static io.quarkus.runtime.util.StringUtil.lowerCase;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.StringJoiner;\n+\n+public final class StringUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "025984e97005ab81d89788954f3ed248fc0c4f3e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2NDIwMg==", "bodyText": "Is there any reason you chose not to use index.getIndex().getAllKnownImplementors(PANACHE_CRUD_CONTROLLER_INTERFACE)?", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392864202", "createdAt": "2020-03-16T08:54:05Z", "author": {"login": "geoand"}, "path": "extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/HibernateOrmPanacheRestProcessor.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package io.quarkus.hibernate.orm.panache.rest.deployment;\n+\n+import static io.quarkus.deployment.builditem.FeatureBuildItem.HIBERNATE_ORM_PANACHE_REST;\n+\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.logging.Logger;\n+import org.jboss.resteasy.links.impl.EL;\n+\n+import io.quarkus.arc.deployment.GeneratedBeanBuildItem;\n+import io.quarkus.arc.deployment.GeneratedBeanGizmoAdaptor;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import io.quarkus.hibernate.orm.panache.rest.PanacheCrudController;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalCollectionWrapper;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalCollectionWrapperJacksonSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalCollectionWrapperJsonbSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalEntityWrapper;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalEntityWrapperJacksonSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalEntityWrapperJsonbSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalLink;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalLinkJacksonSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalLinkJsonbSerializer;\n+import io.quarkus.jackson.spi.JacksonModuleBuildItem;\n+import io.quarkus.jsonb.spi.JsonbSerializerBuildItem;\n+\n+class HibernateOrmPanacheRestProcessor {\n+\n+    private static final DotName PANACHE_CRUD_CONTROLLER_INTERFACE = DotName\n+            .createSimple(PanacheCrudController.class.getName());\n+\n+    private static final Logger LOGGER = Logger.getLogger(HibernateOrmPanacheRestProcessor.class);\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(HIBERNATE_ORM_PANACHE_REST);\n+    }\n+\n+    @BuildStep\n+    RuntimeInitializedClassBuildItem el() {\n+        return new RuntimeInitializedClassBuildItem(EL.class.getCanonicalName());\n+    }\n+\n+    @BuildStep\n+    void generateControllers(CombinedIndexBuildItem index, BuildProducer<GeneratedBeanBuildItem> implementationsProducer) {\n+        ControllerImplementor implementor = new ControllerImplementor(new GeneratedBeanGizmoAdaptor(implementationsProducer));\n+        for (ClassInfo classInfo : index.getIndex().getKnownClasses()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "025984e97005ab81d89788954f3ed248fc0c4f3e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2NTQyOQ==", "bodyText": "This will need some good javadoc as will its methods", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392865429", "createdAt": "2020-03-16T08:56:29Z", "author": {"login": "geoand"}, "path": "extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/PanacheRestResource.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package io.quarkus.hibernate.orm.panache.rest;\n+\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+@Documented\n+@Retention(RUNTIME)\n+@Target({ TYPE, METHOD })\n+public @interface PanacheRestResource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "025984e97005ab81d89788954f3ed248fc0c4f3e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2NjEyMQ==", "bodyText": "What is the rationale for this? Why implement anything at all?", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392866121", "createdAt": "2020-03-16T08:57:49Z", "author": {"login": "geoand"}, "path": "extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/methods/MethodImplementor.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package io.quarkus.hibernate.orm.panache.rest.deployment.methods;\n+\n+import java.util.List;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.Type;\n+\n+import io.quarkus.gizmo.BytecodeCreator;\n+import io.quarkus.gizmo.ClassCreator;\n+import io.quarkus.gizmo.MethodCreator;\n+import io.quarkus.gizmo.MethodDescriptor;\n+import io.quarkus.gizmo.ResultHandle;\n+import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n+import io.quarkus.hibernate.orm.panache.rest.PanacheCrudController;\n+import io.quarkus.hibernate.orm.panache.rest.deployment.utils.PanacheRestResourceReader;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalEntityWrapper;\n+\n+public abstract class MethodImplementor {\n+\n+    private static final DotName PANACHE_CRUD_CONTROLLER_INTERFACE = DotName\n+            .createSimple(PanacheCrudController.class.getName());\n+\n+    private final ClassInfo controllerInterface;\n+\n+    private final PanacheRestResourceReader panacheRestResourceReader;\n+\n+    private final String entityType;\n+\n+    private final String idType;\n+\n+    protected MethodImplementor(ClassInfo controllerInterface, IndexView index) {\n+        this.controllerInterface = controllerInterface;\n+        this.panacheRestResourceReader = new PanacheRestResourceReader(index);\n+\n+        List<Type> types = getControllerTypes(controllerInterface);\n+        this.entityType = types.get(0).name().toString();\n+        this.idType = types.get(1).name().toString();\n+    }\n+\n+    public void implement(ClassCreator classCreator) {\n+        if (panacheRestResourceReader.isExposed(controllerInterface, getName(), getParameterTypes())) {\n+            implementRegular(classCreator);\n+            if (panacheRestResourceReader.isHal(controllerInterface, getName(), getParameterTypes())) {\n+                implementHal(classCreator);\n+            }\n+        } else {\n+            implementNotExposed(classCreator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "025984e97005ab81d89788954f3ed248fc0c4f3e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2Njg0OA==", "bodyText": "What happens here is the interface type also extends other (non-panache) interfaces? It looks like it will blow up. Do we want that? If so, then we should at least have a proper error message specifying this restriction.", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r392866848", "createdAt": "2020-03-16T08:59:10Z", "author": {"login": "geoand"}, "path": "extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/methods/MethodImplementor.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package io.quarkus.hibernate.orm.panache.rest.deployment.methods;\n+\n+import java.util.List;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.Type;\n+\n+import io.quarkus.gizmo.BytecodeCreator;\n+import io.quarkus.gizmo.ClassCreator;\n+import io.quarkus.gizmo.MethodCreator;\n+import io.quarkus.gizmo.MethodDescriptor;\n+import io.quarkus.gizmo.ResultHandle;\n+import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n+import io.quarkus.hibernate.orm.panache.rest.PanacheCrudController;\n+import io.quarkus.hibernate.orm.panache.rest.deployment.utils.PanacheRestResourceReader;\n+import io.quarkus.hibernate.orm.panache.rest.hal.HalEntityWrapper;\n+\n+public abstract class MethodImplementor {\n+\n+    private static final DotName PANACHE_CRUD_CONTROLLER_INTERFACE = DotName\n+            .createSimple(PanacheCrudController.class.getName());\n+\n+    private final ClassInfo controllerInterface;\n+\n+    private final PanacheRestResourceReader panacheRestResourceReader;\n+\n+    private final String entityType;\n+\n+    private final String idType;\n+\n+    protected MethodImplementor(ClassInfo controllerInterface, IndexView index) {\n+        this.controllerInterface = controllerInterface;\n+        this.panacheRestResourceReader = new PanacheRestResourceReader(index);\n+\n+        List<Type> types = getControllerTypes(controllerInterface);\n+        this.entityType = types.get(0).name().toString();\n+        this.idType = types.get(1).name().toString();\n+    }\n+\n+    public void implement(ClassCreator classCreator) {\n+        if (panacheRestResourceReader.isExposed(controllerInterface, getName(), getParameterTypes())) {\n+            implementRegular(classCreator);\n+            if (panacheRestResourceReader.isHal(controllerInterface, getName(), getParameterTypes())) {\n+                implementHal(classCreator);\n+            }\n+        } else {\n+            implementNotExposed(classCreator);\n+        }\n+    }\n+\n+    protected abstract void implementRegular(ClassCreator classCreator);\n+\n+    protected abstract void implementHal(ClassCreator classCreator);\n+\n+    protected abstract String getName();\n+\n+    protected abstract String getReturnType();\n+\n+    protected abstract String[] getParameterTypes();\n+\n+    protected String getEntityType() {\n+        return entityType;\n+    }\n+\n+    protected String getIdType() {\n+        return idType;\n+    }\n+\n+    protected ResultHandle findEntity(BytecodeCreator creator, ResultHandle id, String type) {\n+        return creator.invokeStaticMethod(\n+                MethodDescriptor.ofMethod(type, \"findById\", PanacheEntityBase.class, Object.class), id);\n+    }\n+\n+    protected ResultHandle wrapHalEntity(BytecodeCreator creator, ResultHandle entity) {\n+        return creator.newInstance(MethodDescriptor.ofConstructor(HalEntityWrapper.class, Object.class), entity);\n+    }\n+\n+    private void implementNotExposed(ClassCreator classCreator) {\n+        MethodCreator methodCreator = classCreator.getMethodCreator(getName(), getReturnType(), getParameterTypes());\n+        methodCreator.throwException(RuntimeException.class, String.format(\"'%s' method is not exposed\", getName()));\n+        methodCreator.close();\n+    }\n+\n+    private List<Type> getControllerTypes(ClassInfo controllerInterface) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "025984e97005ab81d89788954f3ed248fc0c4f3e"}, "originalPosition": 86}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c8365301bef27a22482cd4cb98de1d1a499fae43", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/c8365301bef27a22482cd4cb98de1d1a499fae43", "committedDate": "2020-03-20T12:32:59Z", "message": "[Squash] Javadoc public API and log method generation"}, "afterCommit": {"oid": "5dce1dd886479c5a9643a229819b160d8fdf550b", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/5dce1dd886479c5a9643a229819b160d8fdf550b", "committedDate": "2020-03-25T15:04:36Z", "message": "[Squash] Move @JsonIgnore to a getter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNzgxMDA0", "url": "https://github.com/quarkusio/quarkus/pull/7840#pullrequestreview-382781004", "createdAt": "2020-03-27T11:36:08Z", "commit": {"oid": "144235910eafa4762367f9c7e139ac49e2d54d4c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNzgzMDUy", "url": "https://github.com/quarkusio/quarkus/pull/7840#pullrequestreview-382783052", "createdAt": "2020-03-27T11:39:39Z", "commit": {"oid": "144235910eafa4762367f9c7e139ac49e2d54d4c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMTozOTozOVrOF8thwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMTozOTozOVrOF8thwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIwNDgwMA==", "bodyText": "Minor comment: Seems like all implementations return Response. Can't we get rid of this, or is this some forward looking thing?", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r399204800", "createdAt": "2020-03-27T11:39:39Z", "author": {"login": "geoand"}, "path": "extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/methods/MethodImplementor.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package io.quarkus.hibernate.orm.panache.rest.deployment.methods;\n+\n+import java.util.List;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.Type;\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.gizmo.BytecodeCreator;\n+import io.quarkus.gizmo.ClassCreator;\n+import io.quarkus.gizmo.MethodCreator;\n+import io.quarkus.gizmo.MethodDescriptor;\n+import io.quarkus.gizmo.ResultHandle;\n+import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n+import io.quarkus.hibernate.orm.panache.rest.PanacheCrudController;\n+import io.quarkus.hibernate.orm.panache.rest.deployment.utils.PanacheRestResourceReader;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalEntityWrapper;\n+\n+public abstract class MethodImplementor {\n+\n+    private static final DotName PANACHE_CRUD_CONTROLLER_INTERFACE = DotName\n+            .createSimple(PanacheCrudController.class.getName());\n+\n+    private static final Logger LOGGER = Logger.getLogger(MethodImplementor.class);\n+\n+    private final ClassInfo controllerInterface;\n+\n+    private final PanacheRestResourceReader panacheRestResourceReader;\n+\n+    private final String entityType;\n+\n+    private final String idType;\n+\n+    protected MethodImplementor(ClassInfo controllerInterface, IndexView index) {\n+        this.controllerInterface = controllerInterface;\n+        this.panacheRestResourceReader = new PanacheRestResourceReader(index);\n+\n+        List<Type> types = getControllerTypes(controllerInterface);\n+        this.entityType = types.get(0).name().toString();\n+        this.idType = types.get(1).name().toString();\n+    }\n+\n+    public void implement(ClassCreator classCreator) {\n+        if (panacheRestResourceReader.isExposed(controllerInterface, getName(), getParameterTypes())) {\n+            LOGGER.tracef(\"Implementing '%s#%s' method\", classCreator.getClassName(), getName());\n+            implementRegular(classCreator);\n+            if (panacheRestResourceReader.isHal(controllerInterface, getName(), getParameterTypes())) {\n+                LOGGER.tracef(\"Implementing '%s#%s' HAL method\", classCreator.getClassName(), getName());\n+                implementHal(classCreator);\n+            }\n+        } else {\n+            LOGGER.tracef(\"Skipping '%s#%s', method not exposed\", classCreator.getClassName(), getName());\n+            implementNotExposed(classCreator);\n+        }\n+    }\n+\n+    protected abstract void implementRegular(ClassCreator classCreator);\n+\n+    protected abstract void implementHal(ClassCreator classCreator);\n+\n+    protected abstract String getName();\n+\n+    protected abstract String getReturnType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "144235910eafa4762367f9c7e139ac49e2d54d4c"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNzg0MzA4", "url": "https://github.com/quarkusio/quarkus/pull/7840#pullrequestreview-382784308", "createdAt": "2020-03-27T11:41:40Z", "commit": {"oid": "144235910eafa4762367f9c7e139ac49e2d54d4c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MzA0NTc0", "url": "https://github.com/quarkusio/quarkus/pull/7840#pullrequestreview-385304574", "createdAt": "2020-04-01T06:47:31Z", "commit": {"oid": "1be766762ec9b235708f1098b280935371c8c1c0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1be766762ec9b235708f1098b280935371c8c1c0", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/1be766762ec9b235708f1098b280935371c8c1c0", "committedDate": "2020-03-30T12:08:30Z", "message": "[Squash] Remove getReturnType() and add ci-action module"}, "afterCommit": {"oid": "3c1607e048061fda7aa3d0bf171f28f085dff0f7", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/3c1607e048061fda7aa3d0bf171f28f085dff0f7", "committedDate": "2020-04-01T08:34:31Z", "message": "Panache Hibernate REST"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3c1607e048061fda7aa3d0bf171f28f085dff0f7", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/3c1607e048061fda7aa3d0bf171f28f085dff0f7", "committedDate": "2020-04-01T08:34:31Z", "message": "Panache Hibernate REST"}, "afterCommit": {"oid": "50d3f20fb7398fad22b0506402bbbc044f6e57bc", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/50d3f20fb7398fad22b0506402bbbc044f6e57bc", "committedDate": "2020-04-01T09:26:52Z", "message": "Panache Hibernate REST"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MjU0NTE2", "url": "https://github.com/quarkusio/quarkus/pull/7840#pullrequestreview-387254516", "createdAt": "2020-04-03T13:27:58Z", "commit": {"oid": "50d3f20fb7398fad22b0506402bbbc044f6e57bc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzoyNzo1OFrOGAVcdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzozOTowMVrOGAV30A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNDUzMg==", "bodyText": "This looks like an @Override, right? It's a bit annoying to have to override methods and get their signatures right just to say they should not be exposed. Can't we trade that with a @Crud(disable = {CrudMethod.Add, CrudMethod.Update, CrudMethod.Delete}) on the type instead?", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403004532", "createdAt": "2020-04-03T13:27:58Z", "author": {"login": "FroMage"}, "path": "integration-tests/hibernate-orm-panache-rest/src/main/java/io/quarkus/it/panache/rest/AuthorController.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package io.quarkus.it.panache.rest;\n+\n+import javax.ws.rs.core.Response;\n+\n+import io.quarkus.hibernate.orm.panache.rest.PanacheCrudController;\n+import io.quarkus.hibernate.orm.panache.rest.PanacheRestResource;\n+\n+public interface AuthorController extends PanacheCrudController<Author, Long> {\n+\n+    @PanacheRestResource(exposed = false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50d3f20fb7398fad22b0506402bbbc044f6e57bc"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxMTUzNg==", "bodyText": "What's the use-case for having a \"method not allowed\" instead of a 404? I assume the method does exist, but why? What does \"not exposed\" mean? Is there a way to invoke it internally? Is it useful to have it but not invokable?", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403011536", "createdAt": "2020-04-03T13:39:01Z", "author": {"login": "FroMage"}, "path": "integration-tests/hibernate-orm-panache-rest/src/test/java/io/quarkus/it/panache/rest/AuthorControllerTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package io.quarkus.it.panache.rest;\n+\n+import static io.restassured.RestAssured.given;\n+import static io.restassured.RestAssured.when;\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+\n+import java.time.LocalDate;\n+import java.time.format.DateTimeFormatter;\n+\n+import javax.ws.rs.core.Response;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+@QuarkusTest\n+class AuthorControllerTest {\n+\n+    private static final String APPLICATION_HAL_JSON = \"application/hal+json\";\n+\n+    private static final Author DOSTOEVSKY = Author.create(1L, \"Fyodor Dostoevsky\", LocalDate.of(1821, 11, 11));\n+\n+    private static final Author ORWELL = Author.create(2L, \"George Orwell\", LocalDate.of(1903, 06, 25));\n+\n+    @Test\n+    void shouldGetOne() {\n+        when().get(\"/authors/\" + DOSTOEVSKY.id)\n+                .then().statusCode(200)\n+                .and().body(\"name\", is(equalTo(DOSTOEVSKY.name)))\n+                .and().body(\"dob\", is(equalTo(DOSTOEVSKY.dob.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")))));\n+    }\n+\n+    @Test\n+    void shouldGetAll() {\n+        when().get(\"/authors\")\n+                .then().statusCode(200)\n+                .and().body(\"name[0]\", is(equalTo(DOSTOEVSKY.name)))\n+                .and().body(\"dob[0]\", is(equalTo(DOSTOEVSKY.dob.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")))))\n+                .and().body(\"name[1]\", is(equalTo(ORWELL.name)))\n+                .and().body(\"dob[1]\", is(equalTo(ORWELL.dob.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")))));\n+    }\n+\n+    @Test\n+    void halGetShouldNotBeExposed() {\n+        given().accept(APPLICATION_HAL_JSON)\n+                .when().get(\"/authors/\" + DOSTOEVSKY.id)\n+                .then().statusCode(Response.Status.NOT_ACCEPTABLE.getStatusCode());\n+        given().accept(APPLICATION_HAL_JSON)\n+                .when().get(\"/authors\")\n+                .then().statusCode(Response.Status.NOT_ACCEPTABLE.getStatusCode());\n+    }\n+\n+    @Test\n+    void postShouldNotBeExposed() {\n+        given().contentType(APPLICATION_JSON)\n+                .and().body(new BookDto.AuthorDto(ORWELL))\n+                .when().post(\"/authors\")\n+                .then().statusCode(Response.Status.METHOD_NOT_ALLOWED.getStatusCode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50d3f20fb7398fad22b0506402bbbc044f6e57bc"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MDY4NTQ5", "url": "https://github.com/quarkusio/quarkus/pull/7840#pullrequestreview-388068549", "createdAt": "2020-04-06T09:15:32Z", "commit": {"oid": "50d3f20fb7398fad22b0506402bbbc044f6e57bc"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwOToxNTozMlrOGBOvjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwOToyOTowMlrOGBPP-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk0MzMwOA==", "bodyText": "I'm not very found of having a method to compute the plural rules, maybe we need to ask the user to give us the root path of the controller istead of generating it automatically by computing the plural of the name of the entity. After all, having the plural of the name of the entity as a root path is a convention that some may not want to use.\nAnd also, we only covers plurals in english and a lot of people are not using english inside their URL. So we may end up with a lot of feature request to support multiple languages ...", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403943308", "createdAt": "2020-04-06T09:15:32Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/runtime/utils/StringUtil.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package io.quarkus.hibernate.orm.panache.rest.runtime.utils;\n+\n+import static io.quarkus.runtime.util.StringUtil.camelHumpsIterator;\n+import static io.quarkus.runtime.util.StringUtil.lowerCase;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.StringJoiner;\n+\n+public final class StringUtil {\n+\n+    private static final List<String> REQUIRE_ES = Arrays.asList(\"s\", \"sh\", \"ch\", \"x\", \"z\", \"o\");\n+\n+    private static final Map<String, String> IRREGULARS = new HashMap<>();\n+\n+    static {\n+        IRREGULARS.put(\"child\", \"children\");\n+        IRREGULARS.put(\"goose\", \"geese\");\n+        IRREGULARS.put(\"man\", \"men\");\n+        IRREGULARS.put(\"woman\", \"women\");\n+        IRREGULARS.put(\"tooth\", \"teeth\");\n+        IRREGULARS.put(\"foot\", \"feet\");\n+        IRREGULARS.put(\"mouse\", \"mice\");\n+        IRREGULARS.put(\"person\", \"people\");\n+        IRREGULARS.put(\"photo\", \"photos\");\n+        IRREGULARS.put(\"piano\", \"pianos\");\n+        IRREGULARS.put(\"halo\", \"halos\");\n+        IRREGULARS.put(\"roof\", \"roofs\");\n+        IRREGULARS.put(\"belief\", \"beliefs\");\n+        IRREGULARS.put(\"chef\", \"chefs\");\n+        IRREGULARS.put(\"chief\", \"chiefs\");\n+    }\n+\n+    public static String camelToHyphenated(String camelString) {\n+        if (camelString == null) {\n+            return null;\n+        }\n+\n+        StringJoiner joiner = new StringJoiner(\"-\");\n+        Iterator<String> strings = lowerCase(camelHumpsIterator(camelString));\n+\n+        while (strings.hasNext()) {\n+            joiner.add(strings.next());\n+        }\n+\n+        return joiner.toString();\n+    }\n+\n+    public static String toPlural(String singular) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50d3f20fb7398fad22b0506402bbbc044f6e57bc"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk0NDUwOA==", "bodyText": "Why not throwing and exception instead of logging in WARN ?\nAfter all, it will not work as expected so better to throw ?", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403944508", "createdAt": "2020-04-06T09:17:33Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/HibernateOrmPanacheRestProcessor.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package io.quarkus.hibernate.orm.panache.rest.deployment;\n+\n+import static io.quarkus.deployment.builditem.FeatureBuildItem.HIBERNATE_ORM_PANACHE_REST;\n+\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.logging.Logger;\n+import org.jboss.resteasy.links.impl.EL;\n+\n+import io.quarkus.arc.deployment.GeneratedBeanBuildItem;\n+import io.quarkus.arc.deployment.GeneratedBeanGizmoAdaptor;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import io.quarkus.hibernate.orm.panache.rest.PanacheCrudController;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalCollectionWrapper;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalCollectionWrapperJacksonSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalCollectionWrapperJsonbSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalEntityWrapper;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalEntityWrapperJacksonSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalEntityWrapperJsonbSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalLink;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalLinkJacksonSerializer;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.hal.HalLinkJsonbSerializer;\n+import io.quarkus.jackson.spi.JacksonModuleBuildItem;\n+import io.quarkus.jsonb.spi.JsonbSerializerBuildItem;\n+\n+class HibernateOrmPanacheRestProcessor {\n+\n+    private static final DotName PANACHE_CRUD_CONTROLLER_INTERFACE = DotName\n+            .createSimple(PanacheCrudController.class.getName());\n+\n+    private static final Logger LOGGER = Logger.getLogger(HibernateOrmPanacheRestProcessor.class);\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(HIBERNATE_ORM_PANACHE_REST);\n+    }\n+\n+    @BuildStep\n+    RuntimeInitializedClassBuildItem el() {\n+        return new RuntimeInitializedClassBuildItem(EL.class.getCanonicalName());\n+    }\n+\n+    @BuildStep\n+    void generateControllers(CombinedIndexBuildItem index, BuildProducer<GeneratedBeanBuildItem> implementationsProducer) {\n+        ControllerImplementor implementor = new ControllerImplementor(new GeneratedBeanGizmoAdaptor(implementationsProducer));\n+        for (ClassInfo classInfo : index.getIndex().getKnownDirectImplementors(PANACHE_CRUD_CONTROLLER_INTERFACE)) {\n+            if (isValidCrudController(index.getIndex(), classInfo)) {\n+                implementor.implement(classInfo, index.getIndex());\n+            }\n+        }\n+    }\n+\n+    private boolean isValidCrudController(IndexView index, ClassInfo classInfo) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50d3f20fb7398fad22b0506402bbbc044f6e57bc"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1MDM1MA==", "bodyText": "I think this should be provided by the user not automatically generated.\nURL are the central point of the design of an API so a user must be able to manage them.", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403950350", "createdAt": "2020-04-06T09:27:05Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/utils/EntityUrlProvider.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package io.quarkus.hibernate.orm.panache.rest.deployment.utils;\n+\n+import java.net.URI;\n+\n+import io.quarkus.gizmo.BytecodeCreator;\n+import io.quarkus.gizmo.MethodDescriptor;\n+import io.quarkus.gizmo.ResultHandle;\n+import io.quarkus.hibernate.orm.panache.rest.runtime.utils.StringUtil;\n+\n+public final class EntityUrlProvider {\n+\n+    private final EntityFieldAccessor fieldAccessor;\n+\n+    public EntityUrlProvider(EntityFieldAccessor fieldAccessor) {\n+        this.fieldAccessor = fieldAccessor;\n+    }\n+\n+    public static String getCollectionUrl(String entityType) {\n+        return StringUtil.toPlural(StringUtil.camelToHyphenated(removePackage(entityType)));\n+    }\n+\n+    private static String removePackage(String className) {\n+        return className.substring(className.lastIndexOf(\".\") + 1);\n+    }\n+\n+    public ResultHandle getEntityUrl(BytecodeCreator creator, ResultHandle entity, String entityType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50d3f20fb7398fad22b0506402bbbc044f6e57bc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1MTA1NA==", "bodyText": "Why not returing the type T/void/Listinstead of aResponse` object ?", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403951054", "createdAt": "2020-04-06T09:28:11Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/PanacheCrudController.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package io.quarkus.hibernate.orm.panache.rest;\n+\n+import javax.ws.rs.core.Response;\n+\n+import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n+\n+public interface PanacheCrudController<T extends PanacheEntityBase, ID> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50d3f20fb7398fad22b0506402bbbc044f6e57bc"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1MTYxMQ==", "bodyText": "Non-paginated list is very bad design, so maybe we should provides a paginated version by default ?", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r403951611", "createdAt": "2020-04-06T09:29:02Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/hibernate/orm/panache/rest/PanacheCrudController.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package io.quarkus.hibernate.orm.panache.rest;\n+\n+import javax.ws.rs.core.Response;\n+\n+import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n+\n+public interface PanacheCrudController<T extends PanacheEntityBase, ID> {\n+\n+    /**\n+     * Return all entities as a JSON array.\n+     * Response content type: application/json.\n+     *\n+     * @return A response with a JSON array of all entities.\n+     */\n+    Response list();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50d3f20fb7398fad22b0506402bbbc044f6e57bc"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5ODQxMTYz", "url": "https://github.com/quarkusio/quarkus/pull/7840#pullrequestreview-389841163", "createdAt": "2020-04-08T10:18:28Z", "commit": {"oid": "50d3f20fb7398fad22b0506402bbbc044f6e57bc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMDoxODoyOFrOGCorRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMDoxODoyOFrOGCorRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQxNjc3Mw==", "bodyText": "@FroMage I cannot resist but to ask you the question. Here merge is used and I know you are against its usage, so should this PR provides an other implementation ?", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r405416773", "createdAt": "2020-04-08T10:18:28Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/hibernate/orm/panache/rest/deployment/methods/UpdateMethodImplementor.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package io.quarkus.hibernate.orm.panache.rest.deployment.methods;\n+\n+import javax.persistence.EntityManager;\n+import javax.ws.rs.core.Response;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.IndexView;\n+\n+import io.quarkus.gizmo.BranchResult;\n+import io.quarkus.gizmo.BytecodeCreator;\n+import io.quarkus.gizmo.ClassCreator;\n+import io.quarkus.gizmo.MethodCreator;\n+import io.quarkus.gizmo.MethodDescriptor;\n+import io.quarkus.gizmo.ResultHandle;\n+import io.quarkus.hibernate.orm.panache.rest.deployment.utils.ControllerAnnotator;\n+import io.quarkus.hibernate.orm.panache.rest.deployment.utils.ControllerResponseFactory;\n+import io.quarkus.hibernate.orm.panache.rest.deployment.utils.EntityFieldAccessor;\n+import io.quarkus.hibernate.orm.panache.rest.deployment.utils.EntityUrlProvider;\n+import io.quarkus.hibernate.orm.panache.runtime.JpaOperations;\n+\n+public final class UpdateMethodImplementor extends MethodImplementor {\n+\n+    private final EntityFieldAccessor fieldAccessor;\n+\n+    private final EntityUrlProvider urlProvider;\n+\n+    public UpdateMethodImplementor(ClassInfo controllerInterface, IndexView index) {\n+        super(controllerInterface, index);\n+        this.fieldAccessor = new EntityFieldAccessor(index);\n+        this.urlProvider = new EntityUrlProvider(fieldAccessor);\n+    }\n+\n+    @Override\n+    protected String getName() {\n+        return \"update\";\n+    }\n+\n+    @Override\n+    protected String[] getParameterTypes() {\n+        return new String[] { getIdType(), getEntityType() };\n+    }\n+\n+    @Override\n+    protected void implementRegular(ClassCreator classCreator) {\n+        MethodCreator methodCreator = classCreator.getMethodCreator(\"update\", Response.class, getIdType(), getEntityType());\n+        ControllerAnnotator.addTransactional(methodCreator);\n+        ControllerAnnotator.addPut(methodCreator);\n+        ControllerAnnotator.addPath(methodCreator, EntityUrlProvider.getCollectionUrl(getEntityType()) + \"/{id}\");\n+        ControllerAnnotator.addPathParam(methodCreator.getParameterAnnotations(0), \"id\");\n+        ControllerAnnotator.addConsumes(methodCreator, ControllerAnnotator.APPLICATION_JSON);\n+        ControllerAnnotator.addProduces(methodCreator, ControllerAnnotator.APPLICATION_JSON);\n+        ControllerAnnotator.addLinks(methodCreator, getEntityType(), \"update\");\n+\n+        BranchResult entityDoesNotExist = methodCreator\n+                .ifNull(findEntity(methodCreator, methodCreator.getMethodParam(0), getEntityType()));\n+\n+        createAndReturn(entityDoesNotExist.trueBranch());\n+        updateAndReturn(entityDoesNotExist.falseBranch());\n+\n+        methodCreator.close();\n+    }\n+\n+    @Override\n+    protected void implementHal(ClassCreator classCreator) {\n+        MethodCreator methodCreator = classCreator.getMethodCreator(\"updateHal\", Response.class, getIdType(), getEntityType());\n+        ControllerAnnotator.addTransactional(methodCreator);\n+        ControllerAnnotator.addPut(methodCreator);\n+        ControllerAnnotator.addPath(methodCreator, EntityUrlProvider.getCollectionUrl(getEntityType()) + \"/{id}\");\n+        ControllerAnnotator.addPathParam(methodCreator.getParameterAnnotations(0), \"id\");\n+        ControllerAnnotator.addConsumes(methodCreator, ControllerAnnotator.APPLICATION_JSON);\n+        ControllerAnnotator.addProduces(methodCreator, ControllerAnnotator.APPLICATION_HAL_JSON);\n+\n+        BranchResult entityDoesNotExist = methodCreator\n+                .ifNull(findEntity(methodCreator, methodCreator.getMethodParam(0), getEntityType()));\n+\n+        createAndReturnHal(entityDoesNotExist.trueBranch());\n+        updateAndReturn(entityDoesNotExist.falseBranch());\n+\n+        methodCreator.close();\n+    }\n+\n+    private void createAndReturn(BytecodeCreator creator) {\n+        ResultHandle entity = merge(creator, creator.getMethodParam(0), creator.getMethodParam(1));\n+        ResultHandle url = urlProvider.getEntityUrl(creator, entity, getEntityType());\n+        ResultHandle response = ControllerResponseFactory.created(creator, entity, url);\n+        creator.returnValue(response);\n+    }\n+\n+    private void createAndReturnHal(BytecodeCreator creator) {\n+        ResultHandle entity = merge(creator, creator.getMethodParam(0), creator.getMethodParam(1));\n+        ResultHandle url = urlProvider.getEntityUrl(creator, entity, getEntityType());\n+        ResultHandle response = ControllerResponseFactory.created(creator, wrapHalEntity(creator, entity), url);\n+        creator.returnValue(response);\n+    }\n+\n+    private void updateAndReturn(BytecodeCreator creator) {\n+        merge(creator, creator.getMethodParam(0), creator.getMethodParam(1));\n+        creator.returnValue(ControllerResponseFactory.noContent(creator));\n+    }\n+\n+    private ResultHandle merge(BytecodeCreator creator, ResultHandle id, ResultHandle entity) {\n+        fieldAccessor.setId(creator, getEntityType(), entity, id);\n+        ResultHandle entityManager = creator.invokeStaticMethod(\n+                MethodDescriptor.ofMethod(JpaOperations.class, \"getEntityManager\", EntityManager.class));\n+        return creator.invokeInterfaceMethod(\n+                MethodDescriptor.ofMethod(EntityManager.class, \"merge\", Object.class, Object.class), entityManager, entity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50d3f20fb7398fad22b0506402bbbc044f6e57bc"}, "originalPosition": 106}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "50d3f20fb7398fad22b0506402bbbc044f6e57bc", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/50d3f20fb7398fad22b0506402bbbc044f6e57bc", "committedDate": "2020-04-01T09:26:52Z", "message": "Panache Hibernate REST"}, "afterCommit": {"oid": "15e31c8c587561a4b41b290a206e4c676313f120", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/15e31c8c587561a4b41b290a206e4c676313f120", "committedDate": "2020-04-20T11:21:12Z", "message": "[squash] PR improvements"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "15e31c8c587561a4b41b290a206e4c676313f120", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/15e31c8c587561a4b41b290a206e4c676313f120", "committedDate": "2020-04-20T11:21:12Z", "message": "[squash] PR improvements"}, "afterCommit": {"oid": "b9332eab3d4f2300ed5cc8bb699aa50f11aaa9d0", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/b9332eab3d4f2300ed5cc8bb699aa50f11aaa9d0", "committedDate": "2020-04-20T11:31:57Z", "message": "[squash] PR improvements"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b9332eab3d4f2300ed5cc8bb699aa50f11aaa9d0", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/b9332eab3d4f2300ed5cc8bb699aa50f11aaa9d0", "committedDate": "2020-04-20T11:31:57Z", "message": "[squash] PR improvements"}, "afterCommit": {"oid": "ee72902e37ad7f66ff2c3634e3b27263942d1a7d", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/ee72902e37ad7f66ff2c3634e3b27263942d1a7d", "committedDate": "2020-04-20T12:19:09Z", "message": "[squash] PR improvements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NDY5MTMz", "url": "https://github.com/quarkusio/quarkus/pull/7840#pullrequestreview-396469133", "createdAt": "2020-04-20T13:48:07Z", "commit": {"oid": "ee72902e37ad7f66ff2c3634e3b27263942d1a7d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ee72902e37ad7f66ff2c3634e3b27263942d1a7d", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/ee72902e37ad7f66ff2c3634e3b27263942d1a7d", "committedDate": "2020-04-20T12:19:09Z", "message": "[squash] PR improvements"}, "afterCommit": {"oid": "d3d9823e0812e2910dd21ae9d89f9610ad285203", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/d3d9823e0812e2910dd21ae9d89f9610ad285203", "committedDate": "2020-04-20T14:14:24Z", "message": "[squash] PR improvements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NDk5Nzkw", "url": "https://github.com/quarkusio/quarkus/pull/7840#pullrequestreview-396499790", "createdAt": "2020-04-20T14:20:32Z", "commit": {"oid": "d3d9823e0812e2910dd21ae9d89f9610ad285203"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDoyMDozM1rOGIW8kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDo0MToxN1rOGIX88g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxNzc0Ng==", "bodyText": "This needs Javadoc.", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r411417746", "createdAt": "2020-04-20T14:20:33Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/panache/rest/hibernate/orm/PanacheEntityCrudResource.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package io.quarkus.panache.rest.hibernate.orm;\n+\n+import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n+import io.quarkus.panache.rest.runtime.PanacheCrudResource;\n+\n+public interface PanacheEntityCrudResource<Entity extends PanacheEntityBase, ID> extends PanacheCrudResource<Entity, ID> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d9823e0812e2910dd21ae9d89f9610ad285203"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxNzc5OQ==", "bodyText": "This needs Javadoc.", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r411417799", "createdAt": "2020-04-20T14:20:38Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache-rest/runtime/src/main/java/io/quarkus/panache/rest/hibernate/orm/PanacheRepositoryCrudResource.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package io.quarkus.panache.rest.hibernate.orm;\n+\n+import io.quarkus.hibernate.orm.panache.PanacheRepositoryBase;\n+import io.quarkus.panache.rest.runtime.PanacheCrudResource;\n+\n+public interface PanacheRepositoryCrudResource<Repository extends PanacheRepositoryBase<Entity, ID>, Entity, ID>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d9823e0812e2910dd21ae9d89f9610ad285203"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxOTU3MA==", "bodyText": "\"repositories\" or \"resources\"?", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r411419570", "createdAt": "2020-04-20T14:22:45Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache-rest/runtime/src/main/resources/META-INF/quarkus-extension.yaml", "diffHunk": "@@ -0,0 +1,14 @@\n+---\n+name: \"REST repositories for Hibernate ORM with Panache\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d9823e0812e2910dd21ae9d89f9610ad285203"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMTUxMA==", "bodyText": "Shouldn't those be in io.quarkus.panache.rest.common.deployment?", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r411421510", "createdAt": "2020-04-20T14:25:13Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-rest-common/deployment/src/main/java/io/quarkus/panache/rest/deployment/CrudResourceImplementor.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package io.quarkus.panache.rest.deployment;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d9823e0812e2910dd21ae9d89f9610ad285203"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMjU4MQ==", "bodyText": "Shouldn't this be io.quarkus.panache.rest.common?", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r411432581", "createdAt": "2020-04-20T14:39:20Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/PanacheRestResource.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package io.quarkus.panache.rest;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d9823e0812e2910dd21ae9d89f9610ad285203"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNDAyMQ==", "bodyText": "Why is this in the runtime subpackage? We usually put hidden/impl stuff there, but this is a supertype so it's visible, no? Besides, the methods are documented, so it looks like public-facing.", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r411434021", "createdAt": "2020-04-20T14:41:03Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/runtime/PanacheCrudResource.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package io.quarkus.panache.rest.runtime;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d9823e0812e2910dd21ae9d89f9610ad285203"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNDIyNg==", "bodyText": "If the methods are documented, likely this class also needs docs, no?", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r411434226", "createdAt": "2020-04-20T14:41:17Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-rest-common/runtime/src/main/java/io/quarkus/panache/rest/runtime/PanacheCrudResource.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package io.quarkus.panache.rest.runtime;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.core.Response;\n+\n+public interface PanacheCrudResource<Entity, ID> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d9823e0812e2910dd21ae9d89f9610ad285203"}, "originalPosition": 7}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d3d9823e0812e2910dd21ae9d89f9610ad285203", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/d3d9823e0812e2910dd21ae9d89f9610ad285203", "committedDate": "2020-04-20T14:14:24Z", "message": "[squash] PR improvements"}, "afterCommit": {"oid": "c32a9adcdebc01d35f5b6f6d8f67658ad62bb0cf", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/c32a9adcdebc01d35f5b6f6d8f67658ad62bb0cf", "committedDate": "2020-04-21T13:10:45Z", "message": "[squash] PR improvements"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c32a9adcdebc01d35f5b6f6d8f67658ad62bb0cf", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/c32a9adcdebc01d35f5b6f6d8f67658ad62bb0cf", "committedDate": "2020-04-21T13:10:45Z", "message": "[squash] PR improvements"}, "afterCommit": {"oid": "ecaa2323c4c871320549a911d9077d729b159f2f", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/ecaa2323c4c871320549a911d9077d729b159f2f", "committedDate": "2020-04-22T09:56:58Z", "message": "[squash] PR improvements"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ecaa2323c4c871320549a911d9077d729b159f2f", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/ecaa2323c4c871320549a911d9077d729b159f2f", "committedDate": "2020-04-22T09:56:58Z", "message": "[squash] PR improvements"}, "afterCommit": {"oid": "1ac8d5799cf47b57815f87aae437baf6c3ede26d", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/1ac8d5799cf47b57815f87aae437baf6c3ede26d", "committedDate": "2020-04-22T16:48:49Z", "message": "[squash] PR improvements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5OTI5NzEw", "url": "https://github.com/quarkusio/quarkus/pull/7840#pullrequestreview-399929710", "createdAt": "2020-04-24T13:08:55Z", "commit": {"oid": "1ac8d5799cf47b57815f87aae437baf6c3ede26d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzowODo1NVrOGLW3ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzoxMTo0MVrOGLW--Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU2MjI0Mw==", "bodyText": "The extension name is quarkus-hibernate-orm-panache-rest, which is consistent with quarkus-hibernate-orm-panache, but this package is upside-down. Shouldn't it be io.quarkus.hibernate.orm.panache.rest.deplayment, which would be consistent with io.quarkus.hibernate.orm.panache.deployment?", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r414562243", "createdAt": "2020-04-24T13:08:55Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache-rest/deployment/src/main/java/io/quarkus/panache/rest/hibernate/orm/deployment/EntityDataAccessImplementor.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package io.quarkus.panache.rest.hibernate.orm.deployment;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ac8d5799cf47b57815f87aae437baf6c3ede26d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU2NDA4OQ==", "bodyText": "This doesn't appear to have been fixed.", "url": "https://github.com/quarkusio/quarkus/pull/7840#discussion_r414564089", "createdAt": "2020-04-24T13:11:41Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-rest-common/deployment/src/main/java/io/quarkus/panache/rest/deployment/CrudResourceImplementor.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package io.quarkus.panache.rest.deployment;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMTUxMA=="}, "originalCommit": {"oid": "d3d9823e0812e2910dd21ae9d89f9610ad285203"}, "originalPosition": 1}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ac8d5799cf47b57815f87aae437baf6c3ede26d", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/1ac8d5799cf47b57815f87aae437baf6c3ede26d", "committedDate": "2020-04-22T16:48:49Z", "message": "[squash] PR improvements"}, "afterCommit": {"oid": "690dff5d6c0b9c2ba3d8ade49f09b89a4cf88949", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/690dff5d6c0b9c2ba3d8ade49f09b89a4cf88949", "committedDate": "2020-04-29T09:08:22Z", "message": "Panache Hibernate REST"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e423fa85119ef97f65ae4795123a04566d8ab14", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/1e423fa85119ef97f65ae4795123a04566d8ab14", "committedDate": "2020-05-06T15:12:17Z", "message": "Panache Hibernate REST"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "690dff5d6c0b9c2ba3d8ade49f09b89a4cf88949", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/690dff5d6c0b9c2ba3d8ade49f09b89a4cf88949", "committedDate": "2020-04-29T09:08:22Z", "message": "Panache Hibernate REST"}, "afterCommit": {"oid": "1e423fa85119ef97f65ae4795123a04566d8ab14", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/1e423fa85119ef97f65ae4795123a04566d8ab14", "committedDate": "2020-05-06T15:12:17Z", "message": "Panache Hibernate REST"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MjM3Mzk4", "url": "https://github.com/quarkusio/quarkus/pull/7840#pullrequestreview-407237398", "createdAt": "2020-05-07T08:03:31Z", "commit": {"oid": "1e423fa85119ef97f65ae4795123a04566d8ab14"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3869, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}