{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2NzIzNjQ1", "number": 7263, "title": "Implement the Mutiny API for the MongoDB client", "bodyText": "This PR provides a new reactive API to interact with MongoDB. This API uses the Mutiny types. The PR also deprecates the previous (Axle) API. This PR does not update panache-mongo. Documentation and ITs are also updated.", "createdAt": "2020-02-18T16:46:22Z", "url": "https://github.com/quarkusio/quarkus/pull/7263", "merged": true, "mergeCommit": {"oid": "cd0b2dcd1e35090117f96719c630ee999ffaf61c"}, "closed": true, "closedAt": "2020-02-20T19:29:26Z", "author": {"login": "cescoffier"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFzX5lAFqTM2MDkyNjc4OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGQTapgFqTM2MjE3MzM2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwOTI2Nzg5", "url": "https://github.com/quarkusio/quarkus/pull/7263#pullrequestreview-360926789", "createdAt": "2020-02-19T08:45:07Z", "commit": {"oid": "a59e3ec04c5a6f5b58734b991f143a40a39365c6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODo0NTowN1rOFrfW9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOTo0MzoxOFrOFrhR4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE0Njg3MQ==", "bodyText": "There is one @deprecated not needed.", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r381146871", "createdAt": "2020-02-19T08:45:07Z", "author": {"login": "loicmathieu"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/ReactiveMongoCollection.java", "diffHunk": "@@ -20,8 +20,9 @@\n  * A reactive API to interact with a Mongo collection.\n  *\n  * @param <T> The type that this collection will encode documents from and decode documents to.\n- * @since 1.0\n+ * @deprecated @deprecated Use {@link io.quarkus.mongodb.reactive.ReactiveMongoCollection} instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a59e3ec04c5a6f5b58734b991f143a40a39365c6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE1NDAyMQ==", "bodyText": "Needed for mongodb-panache", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r381154021", "createdAt": "2020-02-19T08:59:30Z", "author": {"login": "loicmathieu"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/impl/ReactiveMongoCollectionImpl.java", "diffHunk": "@@ -60,95 +58,69 @@ public MongoNamespace getNamespace() {\n         return collection.getNamespace();\n     }\n \n-    @Override\n-    public CodecRegistry getCodecRegistry() {\n-        return collection.getCodecRegistry();\n-    }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a59e3ec04c5a6f5b58734b991f143a40a39365c6"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2NTE2OQ==", "bodyText": "Missing an a  in the javadoc ?\n@return an {@link Uni} completed with the estimated number of documents", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r381165169", "createdAt": "2020-02-19T09:21:13Z", "author": {"login": "loicmathieu"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java", "diffHunk": "@@ -0,0 +1,1410 @@\n+package io.quarkus.mongodb.reactive;\n+\n+import java.util.List;\n+\n+import org.bson.Document;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.bson.conversions.Bson;\n+\n+import com.mongodb.MongoNamespace;\n+import com.mongodb.bulk.BulkWriteResult;\n+import com.mongodb.client.model.BulkWriteOptions;\n+import com.mongodb.client.model.CountOptions;\n+import com.mongodb.client.model.CreateIndexOptions;\n+import com.mongodb.client.model.DeleteOptions;\n+import com.mongodb.client.model.DropIndexOptions;\n+import com.mongodb.client.model.EstimatedDocumentCountOptions;\n+import com.mongodb.client.model.FindOneAndDeleteOptions;\n+import com.mongodb.client.model.FindOneAndReplaceOptions;\n+import com.mongodb.client.model.FindOneAndUpdateOptions;\n+import com.mongodb.client.model.IndexModel;\n+import com.mongodb.client.model.IndexOptions;\n+import com.mongodb.client.model.InsertManyOptions;\n+import com.mongodb.client.model.InsertOneOptions;\n+import com.mongodb.client.model.RenameCollectionOptions;\n+import com.mongodb.client.model.ReplaceOptions;\n+import com.mongodb.client.model.UpdateOptions;\n+import com.mongodb.client.model.WriteModel;\n+import com.mongodb.client.model.changestream.ChangeStreamDocument;\n+import com.mongodb.client.result.DeleteResult;\n+import com.mongodb.client.result.UpdateResult;\n+import com.mongodb.reactivestreams.client.ClientSession;\n+\n+import io.quarkus.mongodb.AggregateOptions;\n+import io.quarkus.mongodb.ChangeStreamOptions;\n+import io.quarkus.mongodb.DistinctOptions;\n+import io.quarkus.mongodb.FindOptions;\n+import io.quarkus.mongodb.MapReduceOptions;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+\n+/**\n+ * A reactive API to interact with a Mongo collection.\n+ *\n+ * @param <T> The type that this collection will encode documents from and decode documents to.\n+ * @since 1.0\n+ */\n+public interface ReactiveMongoCollection<T> {\n+\n+    /**\n+     * Gets the namespace of this collection.\n+     *\n+     * @return the namespace\n+     */\n+    MongoNamespace getNamespace();\n+\n+    /**\n+     * Get the class of documents stored in this collection.\n+     *\n+     * @return the class\n+     */\n+    Class<T> getDocumentClass();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @return n {@link Uni} completed with the estimated number of documents", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a59e3ec04c5a6f5b58734b991f143a40a39365c6"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2NTM5NQ==", "bodyText": "Same here, missing the ain the javadoc ?", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r381165395", "createdAt": "2020-02-19T09:21:37Z", "author": {"login": "loicmathieu"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java", "diffHunk": "@@ -0,0 +1,1410 @@\n+package io.quarkus.mongodb.reactive;\n+\n+import java.util.List;\n+\n+import org.bson.Document;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.bson.conversions.Bson;\n+\n+import com.mongodb.MongoNamespace;\n+import com.mongodb.bulk.BulkWriteResult;\n+import com.mongodb.client.model.BulkWriteOptions;\n+import com.mongodb.client.model.CountOptions;\n+import com.mongodb.client.model.CreateIndexOptions;\n+import com.mongodb.client.model.DeleteOptions;\n+import com.mongodb.client.model.DropIndexOptions;\n+import com.mongodb.client.model.EstimatedDocumentCountOptions;\n+import com.mongodb.client.model.FindOneAndDeleteOptions;\n+import com.mongodb.client.model.FindOneAndReplaceOptions;\n+import com.mongodb.client.model.FindOneAndUpdateOptions;\n+import com.mongodb.client.model.IndexModel;\n+import com.mongodb.client.model.IndexOptions;\n+import com.mongodb.client.model.InsertManyOptions;\n+import com.mongodb.client.model.InsertOneOptions;\n+import com.mongodb.client.model.RenameCollectionOptions;\n+import com.mongodb.client.model.ReplaceOptions;\n+import com.mongodb.client.model.UpdateOptions;\n+import com.mongodb.client.model.WriteModel;\n+import com.mongodb.client.model.changestream.ChangeStreamDocument;\n+import com.mongodb.client.result.DeleteResult;\n+import com.mongodb.client.result.UpdateResult;\n+import com.mongodb.reactivestreams.client.ClientSession;\n+\n+import io.quarkus.mongodb.AggregateOptions;\n+import io.quarkus.mongodb.ChangeStreamOptions;\n+import io.quarkus.mongodb.DistinctOptions;\n+import io.quarkus.mongodb.FindOptions;\n+import io.quarkus.mongodb.MapReduceOptions;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+\n+/**\n+ * A reactive API to interact with a Mongo collection.\n+ *\n+ * @param <T> The type that this collection will encode documents from and decode documents to.\n+ * @since 1.0\n+ */\n+public interface ReactiveMongoCollection<T> {\n+\n+    /**\n+     * Gets the namespace of this collection.\n+     *\n+     * @return the namespace\n+     */\n+    MongoNamespace getNamespace();\n+\n+    /**\n+     * Get the class of documents stored in this collection.\n+     *\n+     * @return the class\n+     */\n+    Class<T> getDocumentClass();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @return n {@link Uni} completed with the estimated number of documents\n+     */\n+    Uni<Long> estimatedDocumentCount();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the estimated number of documents", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a59e3ec04c5a6f5b58734b991f143a40a39365c6"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2NTc0OA==", "bodyText": "Same in the other places (I didn't add a review comment for all) ...", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r381165748", "createdAt": "2020-02-19T09:22:16Z", "author": {"login": "loicmathieu"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java", "diffHunk": "@@ -0,0 +1,1410 @@\n+package io.quarkus.mongodb.reactive;\n+\n+import java.util.List;\n+\n+import org.bson.Document;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.bson.conversions.Bson;\n+\n+import com.mongodb.MongoNamespace;\n+import com.mongodb.bulk.BulkWriteResult;\n+import com.mongodb.client.model.BulkWriteOptions;\n+import com.mongodb.client.model.CountOptions;\n+import com.mongodb.client.model.CreateIndexOptions;\n+import com.mongodb.client.model.DeleteOptions;\n+import com.mongodb.client.model.DropIndexOptions;\n+import com.mongodb.client.model.EstimatedDocumentCountOptions;\n+import com.mongodb.client.model.FindOneAndDeleteOptions;\n+import com.mongodb.client.model.FindOneAndReplaceOptions;\n+import com.mongodb.client.model.FindOneAndUpdateOptions;\n+import com.mongodb.client.model.IndexModel;\n+import com.mongodb.client.model.IndexOptions;\n+import com.mongodb.client.model.InsertManyOptions;\n+import com.mongodb.client.model.InsertOneOptions;\n+import com.mongodb.client.model.RenameCollectionOptions;\n+import com.mongodb.client.model.ReplaceOptions;\n+import com.mongodb.client.model.UpdateOptions;\n+import com.mongodb.client.model.WriteModel;\n+import com.mongodb.client.model.changestream.ChangeStreamDocument;\n+import com.mongodb.client.result.DeleteResult;\n+import com.mongodb.client.result.UpdateResult;\n+import com.mongodb.reactivestreams.client.ClientSession;\n+\n+import io.quarkus.mongodb.AggregateOptions;\n+import io.quarkus.mongodb.ChangeStreamOptions;\n+import io.quarkus.mongodb.DistinctOptions;\n+import io.quarkus.mongodb.FindOptions;\n+import io.quarkus.mongodb.MapReduceOptions;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+\n+/**\n+ * A reactive API to interact with a Mongo collection.\n+ *\n+ * @param <T> The type that this collection will encode documents from and decode documents to.\n+ * @since 1.0\n+ */\n+public interface ReactiveMongoCollection<T> {\n+\n+    /**\n+     * Gets the namespace of this collection.\n+     *\n+     * @return the namespace\n+     */\n+    MongoNamespace getNamespace();\n+\n+    /**\n+     * Get the class of documents stored in this collection.\n+     *\n+     * @return the class\n+     */\n+    Class<T> getDocumentClass();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @return n {@link Uni} completed with the estimated number of documents\n+     */\n+    Uni<Long> estimatedDocumentCount();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the estimated number of documents\n+     */\n+    Uni<Long> estimatedDocumentCount(EstimatedDocumentCountOptions options);\n+\n+    /**\n+     * Counts the number of documents in the collection.\n+     *\n+     * @return n {@link Uni} completed with the number of documents", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a59e3ec04c5a6f5b58734b991f143a40a39365c6"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2NjIwMg==", "bodyText": "You add a link to Uni in the Javadoc and not to Multi ?", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r381166202", "createdAt": "2020-02-19T09:23:08Z", "author": {"login": "loicmathieu"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java", "diffHunk": "@@ -0,0 +1,1410 @@\n+package io.quarkus.mongodb.reactive;\n+\n+import java.util.List;\n+\n+import org.bson.Document;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.bson.conversions.Bson;\n+\n+import com.mongodb.MongoNamespace;\n+import com.mongodb.bulk.BulkWriteResult;\n+import com.mongodb.client.model.BulkWriteOptions;\n+import com.mongodb.client.model.CountOptions;\n+import com.mongodb.client.model.CreateIndexOptions;\n+import com.mongodb.client.model.DeleteOptions;\n+import com.mongodb.client.model.DropIndexOptions;\n+import com.mongodb.client.model.EstimatedDocumentCountOptions;\n+import com.mongodb.client.model.FindOneAndDeleteOptions;\n+import com.mongodb.client.model.FindOneAndReplaceOptions;\n+import com.mongodb.client.model.FindOneAndUpdateOptions;\n+import com.mongodb.client.model.IndexModel;\n+import com.mongodb.client.model.IndexOptions;\n+import com.mongodb.client.model.InsertManyOptions;\n+import com.mongodb.client.model.InsertOneOptions;\n+import com.mongodb.client.model.RenameCollectionOptions;\n+import com.mongodb.client.model.ReplaceOptions;\n+import com.mongodb.client.model.UpdateOptions;\n+import com.mongodb.client.model.WriteModel;\n+import com.mongodb.client.model.changestream.ChangeStreamDocument;\n+import com.mongodb.client.result.DeleteResult;\n+import com.mongodb.client.result.UpdateResult;\n+import com.mongodb.reactivestreams.client.ClientSession;\n+\n+import io.quarkus.mongodb.AggregateOptions;\n+import io.quarkus.mongodb.ChangeStreamOptions;\n+import io.quarkus.mongodb.DistinctOptions;\n+import io.quarkus.mongodb.FindOptions;\n+import io.quarkus.mongodb.MapReduceOptions;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+\n+/**\n+ * A reactive API to interact with a Mongo collection.\n+ *\n+ * @param <T> The type that this collection will encode documents from and decode documents to.\n+ * @since 1.0\n+ */\n+public interface ReactiveMongoCollection<T> {\n+\n+    /**\n+     * Gets the namespace of this collection.\n+     *\n+     * @return the namespace\n+     */\n+    MongoNamespace getNamespace();\n+\n+    /**\n+     * Get the class of documents stored in this collection.\n+     *\n+     * @return the class\n+     */\n+    Class<T> getDocumentClass();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @return n {@link Uni} completed with the estimated number of documents\n+     */\n+    Uni<Long> estimatedDocumentCount();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the estimated number of documents\n+     */\n+    Uni<Long> estimatedDocumentCount(EstimatedDocumentCountOptions options);\n+\n+    /**\n+     * Counts the number of documents in the collection.\n+     *\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments();\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param filter the query filter\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(Bson filter);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param filter the query filter\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(Bson filter, CountOptions options);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(ClientSession clientSession);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(ClientSession clientSession, Bson filter);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(ClientSession clientSession, Bson filter, CountOptions options);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param fieldName the field name*\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @return a multi emitting the sequence of distinct values", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a59e3ec04c5a6f5b58734b991f143a40a39365c6"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2ODQ0Nw==", "bodyText": "Missing JavaDoc, I know the original ReactiveMongoCollection didn't have JavaDoc for these methods but as they are part of the API and documented inside the MongoClient they should have some.", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r381168447", "createdAt": "2020-02-19T09:27:05Z", "author": {"login": "loicmathieu"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java", "diffHunk": "@@ -0,0 +1,1410 @@\n+package io.quarkus.mongodb.reactive;\n+\n+import java.util.List;\n+\n+import org.bson.Document;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.bson.conversions.Bson;\n+\n+import com.mongodb.MongoNamespace;\n+import com.mongodb.bulk.BulkWriteResult;\n+import com.mongodb.client.model.BulkWriteOptions;\n+import com.mongodb.client.model.CountOptions;\n+import com.mongodb.client.model.CreateIndexOptions;\n+import com.mongodb.client.model.DeleteOptions;\n+import com.mongodb.client.model.DropIndexOptions;\n+import com.mongodb.client.model.EstimatedDocumentCountOptions;\n+import com.mongodb.client.model.FindOneAndDeleteOptions;\n+import com.mongodb.client.model.FindOneAndReplaceOptions;\n+import com.mongodb.client.model.FindOneAndUpdateOptions;\n+import com.mongodb.client.model.IndexModel;\n+import com.mongodb.client.model.IndexOptions;\n+import com.mongodb.client.model.InsertManyOptions;\n+import com.mongodb.client.model.InsertOneOptions;\n+import com.mongodb.client.model.RenameCollectionOptions;\n+import com.mongodb.client.model.ReplaceOptions;\n+import com.mongodb.client.model.UpdateOptions;\n+import com.mongodb.client.model.WriteModel;\n+import com.mongodb.client.model.changestream.ChangeStreamDocument;\n+import com.mongodb.client.result.DeleteResult;\n+import com.mongodb.client.result.UpdateResult;\n+import com.mongodb.reactivestreams.client.ClientSession;\n+\n+import io.quarkus.mongodb.AggregateOptions;\n+import io.quarkus.mongodb.ChangeStreamOptions;\n+import io.quarkus.mongodb.DistinctOptions;\n+import io.quarkus.mongodb.FindOptions;\n+import io.quarkus.mongodb.MapReduceOptions;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+\n+/**\n+ * A reactive API to interact with a Mongo collection.\n+ *\n+ * @param <T> The type that this collection will encode documents from and decode documents to.\n+ * @since 1.0\n+ */\n+public interface ReactiveMongoCollection<T> {\n+\n+    /**\n+     * Gets the namespace of this collection.\n+     *\n+     * @return the namespace\n+     */\n+    MongoNamespace getNamespace();\n+\n+    /**\n+     * Get the class of documents stored in this collection.\n+     *\n+     * @return the class\n+     */\n+    Class<T> getDocumentClass();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @return n {@link Uni} completed with the estimated number of documents\n+     */\n+    Uni<Long> estimatedDocumentCount();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the estimated number of documents\n+     */\n+    Uni<Long> estimatedDocumentCount(EstimatedDocumentCountOptions options);\n+\n+    /**\n+     * Counts the number of documents in the collection.\n+     *\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments();\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param filter the query filter\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(Bson filter);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param filter the query filter\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(Bson filter, CountOptions options);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(ClientSession clientSession);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(ClientSession clientSession, Bson filter);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(ClientSession clientSession, Bson filter, CountOptions options);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param fieldName the field name*\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(String fieldName, Class<D> clazz);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param fieldName the field name\n+     * @param filter the query filter\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(String fieldName, Bson filter, Class<D> clazz);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param fieldName the field name\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Class<D> clazz);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param fieldName the field name\n+     * @param filter the query filter\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Bson filter, Class<D> clazz);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param fieldName the field name\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @param options the stream options\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(String fieldName, Class<D> clazz, DistinctOptions options);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param fieldName the field name\n+     * @param filter the query filter\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @param options the stream options\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(String fieldName, Bson filter, Class<D> clazz, DistinctOptions options);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param fieldName the field name\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @param options the stream options\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Class<D> clazz,\n+            DistinctOptions options);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param fieldName the field name\n+     * @param filter the query filter\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @param options the stream options\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Bson filter, Class<D> clazz,\n+            DistinctOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find();\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(Class<D> clazz);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param filter the query filter\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(Bson filter);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param filter the query filter\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(Bson filter, Class<D> clazz);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(ClientSession clientSession);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(ClientSession clientSession, Class<D> clazz);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(ClientSession clientSession, Bson filter);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(ClientSession clientSession, Bson filter, Class<D> clazz);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(Class<D> clazz, FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param filter the query filter\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(Bson filter, FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param filter the query filter\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(Bson filter, Class<D> clazz, FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(ClientSession clientSession, FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(ClientSession clientSession, Class<D> clazz, FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(ClientSession clientSession, Bson filter, FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(ClientSession clientSession, Bson filter, Class<D> clazz, FindOptions options);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param pipeline the aggregate pipeline\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    Multi<Document> aggregate(List<? extends Bson> pipeline);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param pipeline the aggregate pipeline\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    <D> Multi<D> aggregate(List<? extends Bson> pipeline, Class<D> clazz);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregate pipeline\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    Multi<Document> aggregate(ClientSession clientSession, List<? extends Bson> pipeline);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregate pipeline\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    <D> Multi<D> aggregate(ClientSession clientSession, List<? extends Bson> pipeline, Class<D> clazz);\n+\n+    //\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param pipeline the aggregate pipeline\n+     * @param options the stream options\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    Multi<Document> aggregate(List<? extends Bson> pipeline, AggregateOptions options);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param pipeline the aggregate pipeline\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    <D> Multi<D> aggregate(List<? extends Bson> pipeline, Class<D> clazz, AggregateOptions options);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregate pipeline\n+     * @param options the stream options\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    Multi<Document> aggregate(ClientSession clientSession, List<? extends Bson> pipeline,\n+            AggregateOptions options);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregate pipeline\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    <D> Multi<D> aggregate(ClientSession clientSession, List<? extends Bson> pipeline, Class<D> clazz,\n+            AggregateOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch();\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(Class<D> clazz);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(List<? extends Bson> pipeline);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(List<? extends Bson> pipeline, Class<D> clazz);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, Class<D> clazz);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession, List<? extends Bson> pipeline);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n+            Class<D> clazz);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(Class<D> clazz,\n+            ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(List<? extends Bson> pipeline,\n+            ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(List<? extends Bson> pipeline, Class<D> clazz,\n+            ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession,\n+            ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, Class<D> clazz,\n+            ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n+            ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n+            Class<D> clazz, ChangeStreamOptions options);\n+\n+    Multi<Document> mapReduce(String mapFunction, String reduceFunction);\n+\n+    <D> Multi<D> mapReduce(String mapFunction, String reduceFunction, Class<D> clazz);\n+\n+    Multi<Document> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction);\n+\n+    <D> Multi<D> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction,\n+            Class<D> clazz);\n+\n+    Multi<Document> mapReduce(String mapFunction, String reduceFunction, MapReduceOptions options);\n+\n+    <D> Multi<D> mapReduce(String mapFunction, String reduceFunction, Class<D> clazz,\n+            MapReduceOptions options);\n+\n+    Multi<Document> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction,\n+            MapReduceOptions options);\n+\n+    <D> Multi<D> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction,\n+            Class<D> clazz,\n+            MapReduceOptions options);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a59e3ec04c5a6f5b58734b991f143a40a39365c6"}, "originalPosition": 637}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE3ODMzNg==", "bodyText": "Shouldn't it contains the both reactive clients ?", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r381178336", "createdAt": "2020-02-19T09:43:18Z", "author": {"login": "loicmathieu"}, "path": "extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/MongoClientBuildItem.java", "diffHunk": "@@ -3,7 +3,7 @@\n import com.mongodb.client.MongoClient;\n \n import io.quarkus.builder.item.MultiBuildItem;\n-import io.quarkus.mongodb.ReactiveMongoClient;\n+import io.quarkus.mongodb.reactive.ReactiveMongoClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a59e3ec04c5a6f5b58734b991f143a40a39365c6"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffb89d55781f5e28357a251ea5c85dcd31706d9f", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/ffb89d55781f5e28357a251ea5c85dcd31706d9f", "committedDate": "2020-02-20T15:07:25Z", "message": "Fix typo on build item name."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ac359b12b8845da42af319c64bc36eff621d9a0", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/8ac359b12b8845da42af319c64bc36eff621d9a0", "committedDate": "2020-02-20T16:26:42Z", "message": "Implement the Mutiny API for the MongoDB client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52a924264334b5dd21a099f17d3c6d21887ecdca", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/52a924264334b5dd21a099f17d3c6d21887ecdca", "committedDate": "2020-02-20T16:26:47Z", "message": "Allows producing both the new mutiny client and the legacy reactive client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9dc7e2045cf4dea3a77b023bee580552e5f99e92", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/9dc7e2045cf4dea3a77b023bee580552e5f99e92", "committedDate": "2020-02-20T16:26:47Z", "message": "Test the new reactive client\n\nAlso test that the old legacy client is still working and is compatible.\nThe legacy client is implemented on top of the new one."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "342a10886747879698f6071c104bb96f7768533e", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/342a10886747879698f6071c104bb96f7768533e", "committedDate": "2020-02-20T16:26:47Z", "message": "Adapt the MongoClientProcessor to produce the new reactive client and the legacy one."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30738c23543d4ea34b0007da12529f5c6913d53a", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/30738c23543d4ea34b0007da12529f5c6913d53a", "committedDate": "2020-02-20T16:26:47Z", "message": "Add tests for the new reactive client\n\n* remove duplicated tests (that are in the runtime module)\n* add test verifying the injection on named data source with both the new and legacy clients\n* add test verifying the injection of the default data source"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55a3166ee1560a5e45c770db4b3f5d306a6e23a5", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/55a3166ee1560a5e45c770db4b3f5d306a6e23a5", "committedDate": "2020-02-20T16:26:47Z", "message": "Implement integration tests to test both the legacy reactive client and the new client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dce32eefe2bb2b040eb9b685c8a5f667d5b4bde", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/7dce32eefe2bb2b040eb9b685c8a5f667d5b4bde", "committedDate": "2020-02-20T16:26:47Z", "message": "Add a deprecation message when the legacy reactive mongo client is produced."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae6d0bc2280b0787115171f1b8dfd98417e11af0", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/ae6d0bc2280b0787115171f1b8dfd98417e11af0", "committedDate": "2020-02-20T16:26:47Z", "message": "Update documentation for the new reactive client"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a59e3ec04c5a6f5b58734b991f143a40a39365c6", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/a59e3ec04c5a6f5b58734b991f143a40a39365c6", "committedDate": "2020-02-18T16:43:52Z", "message": "Update documentation for the new reactive client"}, "afterCommit": {"oid": "ae6d0bc2280b0787115171f1b8dfd98417e11af0", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/ae6d0bc2280b0787115171f1b8dfd98417e11af0", "committedDate": "2020-02-20T16:26:47Z", "message": "Update documentation for the new reactive client"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMDU0MTg2", "url": "https://github.com/quarkusio/quarkus/pull/7263#pullrequestreview-362054186", "createdAt": "2020-02-20T16:35:45Z", "commit": {"oid": "ae6d0bc2280b0787115171f1b8dfd98417e11af0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMTczMzYw", "url": "https://github.com/quarkusio/quarkus/pull/7263#pullrequestreview-362173360", "createdAt": "2020-02-20T19:29:19Z", "commit": {"oid": "ae6d0bc2280b0787115171f1b8dfd98417e11af0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4118, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}