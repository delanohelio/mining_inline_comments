{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4NTU4Mjk2", "number": 12549, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNToyODoxM1rOEqzD1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNToyODoxM1rOEqzD1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzEyMjE1OnYy", "diffSide": "RIGHT", "path": "integration-tests/main/src/test/java/io/quarkus/it/main/QuarkusTestCallbacksTestCase.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNToyODoxM1rOHdNZPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjo0ODowMFrOHdQ5xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM5MDIwNw==", "bodyText": "\ud83d\udc4d for adding a test for it! AFAICS it would be more correct if the test would make sure that testBeforeClass() is really called last via @Order.\nhttps://junit.org/junit5/docs/current/user-guide/#writing-tests-test-execution-order", "url": "https://github.com/quarkusio/quarkus/pull/12549#discussion_r500390207", "createdAt": "2020-10-06T15:28:13Z", "author": {"login": "famod"}, "path": "integration-tests/main/src/test/java/io/quarkus/it/main/QuarkusTestCallbacksTestCase.java", "diffHunk": "@@ -23,6 +25,11 @@ public void testTestMethodHasAnnotation() {\n \n     }\n \n+    @Test\n+    public void testBeforeClass() {\n+        assertEquals(1, SimpleAnnotationCheckerBeforeClassCallback.count.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc62edfa6b2cdc90d2de8d8fb0780d8e96804926"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM5Mjk0MA==", "bodyText": "Not sure what you mean here", "url": "https://github.com/quarkusio/quarkus/pull/12549#discussion_r500392940", "createdAt": "2020-10-06T15:31:03Z", "author": {"login": "geoand"}, "path": "integration-tests/main/src/test/java/io/quarkus/it/main/QuarkusTestCallbacksTestCase.java", "diffHunk": "@@ -23,6 +25,11 @@ public void testTestMethodHasAnnotation() {\n \n     }\n \n+    @Test\n+    public void testBeforeClass() {\n+        assertEquals(1, SimpleAnnotationCheckerBeforeClassCallback.count.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM5MDIwNw=="}, "originalCommit": {"oid": "cc62edfa6b2cdc90d2de8d8fb0780d8e96804926"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQyNjg5Nw==", "bodyText": "Without @Order there is no guarantee that this new method is called after the existing one.\nIf it is called as the first method and there is (for instance) a bug that the new callback is called for every method, then there will be a false positive.", "url": "https://github.com/quarkusio/quarkus/pull/12549#discussion_r500426897", "createdAt": "2020-10-06T16:16:02Z", "author": {"login": "famod"}, "path": "integration-tests/main/src/test/java/io/quarkus/it/main/QuarkusTestCallbacksTestCase.java", "diffHunk": "@@ -23,6 +25,11 @@ public void testTestMethodHasAnnotation() {\n \n     }\n \n+    @Test\n+    public void testBeforeClass() {\n+        assertEquals(1, SimpleAnnotationCheckerBeforeClassCallback.count.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM5MDIwNw=="}, "originalCommit": {"oid": "cc62edfa6b2cdc90d2de8d8fb0780d8e96804926"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQyOTkyNw==", "bodyText": "Not really, because the callback is executed for each test, not just this one.\nSo this test basically ensure that the callback is passed the proper parameter.", "url": "https://github.com/quarkusio/quarkus/pull/12549#discussion_r500429927", "createdAt": "2020-10-06T16:20:35Z", "author": {"login": "geoand"}, "path": "integration-tests/main/src/test/java/io/quarkus/it/main/QuarkusTestCallbacksTestCase.java", "diffHunk": "@@ -23,6 +25,11 @@ public void testTestMethodHasAnnotation() {\n \n     }\n \n+    @Test\n+    public void testBeforeClass() {\n+        assertEquals(1, SimpleAnnotationCheckerBeforeClassCallback.count.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM5MDIwNw=="}, "originalCommit": {"oid": "cc62edfa6b2cdc90d2de8d8fb0780d8e96804926"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0MDMwMg==", "bodyText": "The callback shall run once for QuarkusTestCallbacksTestCase, but not again for each of the methods of this test class, right?\nSo, if I'm not missing something, in case there is a bug and the callback is invoked too often (e.g. for each test method), the test will not detect this when testBeforeClass() is called before testTestMethodHasAnnotation().", "url": "https://github.com/quarkusio/quarkus/pull/12549#discussion_r500440302", "createdAt": "2020-10-06T16:36:21Z", "author": {"login": "famod"}, "path": "integration-tests/main/src/test/java/io/quarkus/it/main/QuarkusTestCallbacksTestCase.java", "diffHunk": "@@ -23,6 +25,11 @@ public void testTestMethodHasAnnotation() {\n \n     }\n \n+    @Test\n+    public void testBeforeClass() {\n+        assertEquals(1, SimpleAnnotationCheckerBeforeClassCallback.count.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM5MDIwNw=="}, "originalCommit": {"oid": "cc62edfa6b2cdc90d2de8d8fb0780d8e96804926"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0MTc2MQ==", "bodyText": "Yeah, that's the case. To be honest I don't think it's something that could happen, but on the other hand it's not a problem for me to add it.", "url": "https://github.com/quarkusio/quarkus/pull/12549#discussion_r500441761", "createdAt": "2020-10-06T16:38:39Z", "author": {"login": "geoand"}, "path": "integration-tests/main/src/test/java/io/quarkus/it/main/QuarkusTestCallbacksTestCase.java", "diffHunk": "@@ -23,6 +25,11 @@ public void testTestMethodHasAnnotation() {\n \n     }\n \n+    @Test\n+    public void testBeforeClass() {\n+        assertEquals(1, SimpleAnnotationCheckerBeforeClassCallback.count.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM5MDIwNw=="}, "originalCommit": {"oid": "cc62edfa6b2cdc90d2de8d8fb0780d8e96804926"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0NjY3Ng==", "bodyText": "Up to you! Just something I ran into a couple of times, especially on different operating systems (but mostly with JUnit 4).\nAnd in some older major JDK update the order of methods gathered via reflection changed (in a non-deterministic way) which had some nasty effects for some projects that (partially unknowingly) relied on some order.", "url": "https://github.com/quarkusio/quarkus/pull/12549#discussion_r500446676", "createdAt": "2020-10-06T16:46:17Z", "author": {"login": "famod"}, "path": "integration-tests/main/src/test/java/io/quarkus/it/main/QuarkusTestCallbacksTestCase.java", "diffHunk": "@@ -23,6 +25,11 @@ public void testTestMethodHasAnnotation() {\n \n     }\n \n+    @Test\n+    public void testBeforeClass() {\n+        assertEquals(1, SimpleAnnotationCheckerBeforeClassCallback.count.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM5MDIwNw=="}, "originalCommit": {"oid": "cc62edfa6b2cdc90d2de8d8fb0780d8e96804926"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0NzY4NQ==", "bodyText": "Fixed :)", "url": "https://github.com/quarkusio/quarkus/pull/12549#discussion_r500447685", "createdAt": "2020-10-06T16:48:00Z", "author": {"login": "geoand"}, "path": "integration-tests/main/src/test/java/io/quarkus/it/main/QuarkusTestCallbacksTestCase.java", "diffHunk": "@@ -23,6 +25,11 @@ public void testTestMethodHasAnnotation() {\n \n     }\n \n+    @Test\n+    public void testBeforeClass() {\n+        assertEquals(1, SimpleAnnotationCheckerBeforeClassCallback.count.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM5MDIwNw=="}, "originalCommit": {"oid": "cc62edfa6b2cdc90d2de8d8fb0780d8e96804926"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4369, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}