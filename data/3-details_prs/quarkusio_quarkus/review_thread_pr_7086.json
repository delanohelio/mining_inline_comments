{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNjI2OTE1", "number": 7086, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMjozMjowOVrODeK4Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTozNzoxMFrODe-G7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTYyMTI3OnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcAuthenticationMechanism.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMjozMjowOVrOFnMMyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxODo0ODowMlrOFnRk7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYzODY2Nw==", "bodyText": "@pedroigor, @stuartwdouglas  Hi, this is a work in progress, I have one more test in the works which combines the service and web-app tenants. Happy enough with how it is working out, the only problem is resolving the configContext here deadlocks in oidc-tenancy tests :-) in the sync lock DefaultTenantConfigResolver.\nPretty sure it can be reproduced if for example BearerAuthenticationMechanism.authenticate on the master  would try to resolve early in its authenticate. Nearly there though...Thanks", "url": "https://github.com/quarkusio/quarkus/pull/7086#discussion_r376638667", "createdAt": "2020-02-07T22:32:09Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcAuthenticationMechanism.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package io.quarkus.oidc.runtime;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.quarkus.security.identity.IdentityProviderManager;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.quarkus.vertx.http.runtime.security.ChallengeData;\n+import io.quarkus.vertx.http.runtime.security.HttpAuthenticationMechanism;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@ApplicationScoped\n+public class OidcAuthenticationMechanism implements HttpAuthenticationMechanism {\n+\n+    @Inject\n+    DefaultTenantConfigResolver tenantConfigResolver;\n+    private BearerAuthenticationMechanism bearerAuth = new BearerAuthenticationMechanism();\n+    private CodeAuthenticationMechanism codeAuth = new CodeAuthenticationMechanism();\n+\n+    @Override\n+    public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n+            IdentityProviderManager identityProviderManager) {\n+        TenantConfigContext configContext = tenantConfigResolver.resolve(context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b30b3080b424e250a1e7013b5c606c4454605a90"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcyNjc2Nw==", "bodyText": "I've been wondering today how I'm going to resolve this deadlock  and realized what is really needed here is a resolution without attempting to create OAuth2Auth, at this point only a check what kind of application it is is needed. DefaultTenantConfigResolver.resolve needs a boolean create parameter, same one which is used by isBlocking check internally :-)", "url": "https://github.com/quarkusio/quarkus/pull/7086#discussion_r376726767", "createdAt": "2020-02-08T18:48:02Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcAuthenticationMechanism.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package io.quarkus.oidc.runtime;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.quarkus.security.identity.IdentityProviderManager;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.quarkus.vertx.http.runtime.security.ChallengeData;\n+import io.quarkus.vertx.http.runtime.security.HttpAuthenticationMechanism;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@ApplicationScoped\n+public class OidcAuthenticationMechanism implements HttpAuthenticationMechanism {\n+\n+    @Inject\n+    DefaultTenantConfigResolver tenantConfigResolver;\n+    private BearerAuthenticationMechanism bearerAuth = new BearerAuthenticationMechanism();\n+    private CodeAuthenticationMechanism codeAuth = new CodeAuthenticationMechanism();\n+\n+    @Override\n+    public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n+            IdentityProviderManager identityProviderManager) {\n+        TenantConfigContext configContext = tenantConfigResolver.resolve(context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYzODY2Nw=="}, "originalCommit": {"oid": "b30b3080b424e250a1e7013b5c606c4454605a90"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjM5MTQxOnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcAuthenticationMechanism.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjoyNjowMlrOFnkNNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzozNjowN1rOFnmOPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzMTk4OA==", "bodyText": "It would be nice if we could create the mechanisms only when they are necessary. Also, I think most deployments will just rely on a single mechanism as they will not be using multi-tenancy at all.\nSo, I'm wondering if we could:\n\nDecide for a specific mechanism at build time depending on the existence of tenants\nMaybe too much, but if in a multi-tenancy deployment, create the mechanism only if necessary depending on the tenant type", "url": "https://github.com/quarkusio/quarkus/pull/7086#discussion_r377031988", "createdAt": "2020-02-10T12:26:02Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcAuthenticationMechanism.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.oidc.runtime;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.quarkus.security.identity.IdentityProviderManager;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.quarkus.vertx.http.runtime.security.ChallengeData;\n+import io.quarkus.vertx.http.runtime.security.HttpAuthenticationMechanism;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@ApplicationScoped\n+public class OidcAuthenticationMechanism implements HttpAuthenticationMechanism {\n+\n+    @Inject\n+    DefaultTenantConfigResolver resolver;\n+    private BearerAuthenticationMechanism bearerAuth = new BearerAuthenticationMechanism();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13598a8107fdbee2e548aa970ae2cca3cd1c6561"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA0NDUzMA==", "bodyText": "@pedroigor I think it would complicate things unnecessary for no obvious benefits. And with TenantConfigResolver it is not possible anyway as it offers the dynamic option.\nThis PR offers a very simple fix for #6997 - please have a look at it, right now the multi-tenancy is not properly supported for web-app anyway. As a direct consequence of this fix we will offer an option to the sophisticated users go beyond the frontend-only or backend-only services which is already being thought after in one external project, please see  #6997.\n\nI think most deployments will just rely on a single mechanism as they will not be using multi-tenancy at all\n\nThose deployments will only then have a cost of an extra single instance (Bearer or CodeAuth mechanism) - which is a really small issue compared to the enabling hybrid web-apps. Besides as I said it is typical IMHO for many modern web-apps to support the different types of clients.", "url": "https://github.com/quarkusio/quarkus/pull/7086#discussion_r377044530", "createdAt": "2020-02-10T12:54:02Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcAuthenticationMechanism.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.oidc.runtime;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.quarkus.security.identity.IdentityProviderManager;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.quarkus.vertx.http.runtime.security.ChallengeData;\n+import io.quarkus.vertx.http.runtime.security.HttpAuthenticationMechanism;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@ApplicationScoped\n+public class OidcAuthenticationMechanism implements HttpAuthenticationMechanism {\n+\n+    @Inject\n+    DefaultTenantConfigResolver resolver;\n+    private BearerAuthenticationMechanism bearerAuth = new BearerAuthenticationMechanism();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzMTk4OA=="}, "originalCommit": {"oid": "13598a8107fdbee2e548aa970ae2cca3cd1c6561"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA0ODg3NQ==", "bodyText": "OK. So only tests are missing. Otherwise, LGTM. Thanks.", "url": "https://github.com/quarkusio/quarkus/pull/7086#discussion_r377048875", "createdAt": "2020-02-10T13:03:32Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcAuthenticationMechanism.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.oidc.runtime;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.quarkus.security.identity.IdentityProviderManager;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.quarkus.vertx.http.runtime.security.ChallengeData;\n+import io.quarkus.vertx.http.runtime.security.HttpAuthenticationMechanism;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@ApplicationScoped\n+public class OidcAuthenticationMechanism implements HttpAuthenticationMechanism {\n+\n+    @Inject\n+    DefaultTenantConfigResolver resolver;\n+    private BearerAuthenticationMechanism bearerAuth = new BearerAuthenticationMechanism();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzMTk4OA=="}, "originalCommit": {"oid": "13598a8107fdbee2e548aa970ae2cca3cd1c6561"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA1MDAzNA==", "bodyText": "@pedroigor sorry may be I've just totally missed some of your points, which would not be surprising :-). I mean, we can create the mechanisms dynamically, with the volatile storage, so for a single type applications only one will ever be created, may be few temp instances depending on how heavy the load is...", "url": "https://github.com/quarkusio/quarkus/pull/7086#discussion_r377050034", "createdAt": "2020-02-10T13:06:04Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcAuthenticationMechanism.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.oidc.runtime;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.quarkus.security.identity.IdentityProviderManager;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.quarkus.vertx.http.runtime.security.ChallengeData;\n+import io.quarkus.vertx.http.runtime.security.HttpAuthenticationMechanism;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@ApplicationScoped\n+public class OidcAuthenticationMechanism implements HttpAuthenticationMechanism {\n+\n+    @Inject\n+    DefaultTenantConfigResolver resolver;\n+    private BearerAuthenticationMechanism bearerAuth = new BearerAuthenticationMechanism();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzMTk4OA=="}, "originalCommit": {"oid": "13598a8107fdbee2e548aa970ae2cca3cd1c6561"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA1NTI2Ng==", "bodyText": "@pedroigor By the way, you are right of course that most of the applications will not go the multi-tenancy route - but our OIDC multi-tenancy feature will be a real differentiator (thanks for wiring it so well :-) ) when people will need something more involved and it was a feature in demand by a number of users (who watched the original issue)", "url": "https://github.com/quarkusio/quarkus/pull/7086#discussion_r377055266", "createdAt": "2020-02-10T13:17:09Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcAuthenticationMechanism.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.oidc.runtime;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.quarkus.security.identity.IdentityProviderManager;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.quarkus.vertx.http.runtime.security.ChallengeData;\n+import io.quarkus.vertx.http.runtime.security.HttpAuthenticationMechanism;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@ApplicationScoped\n+public class OidcAuthenticationMechanism implements HttpAuthenticationMechanism {\n+\n+    @Inject\n+    DefaultTenantConfigResolver resolver;\n+    private BearerAuthenticationMechanism bearerAuth = new BearerAuthenticationMechanism();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzMTk4OA=="}, "originalCommit": {"oid": "13598a8107fdbee2e548aa970ae2cca3cd1c6561"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2NTAyMQ==", "bodyText": "@pedroigor Also, apologies for being defensive here, I'm not concerned about my PR code of course:-) but I'm very liking the idea of a flexible per-tenant specific OIDC configuration and believe it will be very good for Quarkus in the real world :-). This PR does not even introduce it (it was already there waiting for its moment :-) ), it simply fixes the web-app multi-tenancy issue :-)\n\nOK. So only tests are missing. Otherwise, LGTM. Thanks.\n\nThanks, right, working on an extra test now...", "url": "https://github.com/quarkusio/quarkus/pull/7086#discussion_r377065021", "createdAt": "2020-02-10T13:36:07Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcAuthenticationMechanism.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.oidc.runtime;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.quarkus.security.identity.IdentityProviderManager;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.quarkus.vertx.http.runtime.security.ChallengeData;\n+import io.quarkus.vertx.http.runtime.security.HttpAuthenticationMechanism;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@ApplicationScoped\n+public class OidcAuthenticationMechanism implements HttpAuthenticationMechanism {\n+\n+    @Inject\n+    DefaultTenantConfigResolver resolver;\n+    private BearerAuthenticationMechanism bearerAuth = new BearerAuthenticationMechanism();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzMTk4OA=="}, "originalCommit": {"oid": "13598a8107fdbee2e548aa970ae2cca3cd1c6561"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzk5NDAxOnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcAuthenticationMechanism.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTozMDo0MFrOFoZ1-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDozNzo1NVrOFopj4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxMDc3Nw==", "bodyText": "Why are you doing this lazy creation? These objects don't have any state, there is no measurable benefit to creating them lazily, but in return you add a volatile reads to every request which is more expensive.", "url": "https://github.com/quarkusio/quarkus/pull/7086#discussion_r377910777", "createdAt": "2020-02-11T21:30:40Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcAuthenticationMechanism.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.quarkus.oidc.runtime;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.quarkus.security.identity.IdentityProviderManager;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.quarkus.vertx.http.runtime.security.ChallengeData;\n+import io.quarkus.vertx.http.runtime.security.HttpAuthenticationMechanism;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@ApplicationScoped\n+public class OidcAuthenticationMechanism implements HttpAuthenticationMechanism {\n+\n+    @Inject\n+    DefaultTenantConfigResolver resolver;\n+    private volatile BearerAuthenticationMechanism bearerAuth;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ea8c62478a4950d9faf37cf000557992ab6c814"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NzgyOQ==", "bodyText": "Pedro was concerned about the eager creation in the constructor, so I decided to give it a try, though was not entirely sure. I'll just revert. Please also see my response to your next comment. By the way Pedro suggested to have it done at the build time but it is not possible to do it there with the dynamic multi-tenancy :-).", "url": "https://github.com/quarkusio/quarkus/pull/7086#discussion_r377947829", "createdAt": "2020-02-11T22:52:05Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcAuthenticationMechanism.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.quarkus.oidc.runtime;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.quarkus.security.identity.IdentityProviderManager;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.quarkus.vertx.http.runtime.security.ChallengeData;\n+import io.quarkus.vertx.http.runtime.security.HttpAuthenticationMechanism;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@ApplicationScoped\n+public class OidcAuthenticationMechanism implements HttpAuthenticationMechanism {\n+\n+    @Inject\n+    DefaultTenantConfigResolver resolver;\n+    private volatile BearerAuthenticationMechanism bearerAuth;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxMDc3Nw=="}, "originalCommit": {"oid": "3ea8c62478a4950d9faf37cf000557992ab6c814"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk1MzY3MA==", "bodyText": "If you are really concerned about the object creation all that logic could just be moved to static methods as there is no state in the objects, and they no longer have to implement an interface.", "url": "https://github.com/quarkusio/quarkus/pull/7086#discussion_r377953670", "createdAt": "2020-02-11T23:07:31Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcAuthenticationMechanism.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.quarkus.oidc.runtime;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.quarkus.security.identity.IdentityProviderManager;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.quarkus.vertx.http.runtime.security.ChallengeData;\n+import io.quarkus.vertx.http.runtime.security.HttpAuthenticationMechanism;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@ApplicationScoped\n+public class OidcAuthenticationMechanism implements HttpAuthenticationMechanism {\n+\n+    @Inject\n+    DefaultTenantConfigResolver resolver;\n+    private volatile BearerAuthenticationMechanism bearerAuth;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxMDc3Nw=="}, "originalCommit": {"oid": "3ea8c62478a4950d9faf37cf000557992ab6c814"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE2ODI5MA==", "bodyText": "@stuartwdouglas thanks, not sure I understand :-) I guess both objects can be just created as before. There is only one extra single object in the mainstream single application-type case which as you said has no state and it is not possible to avoid this extra object's class be added to the native image, so it is a very tiny cost indeed.\nBut can you explain please what you meant about moving the logic to the static methods, what difference would it make compared to the current lazy initialization done in the instance ? volatile class fields would still be read...But I guess it is not what you had in mind :-)", "url": "https://github.com/quarkusio/quarkus/pull/7086#discussion_r378168290", "createdAt": "2020-02-12T10:37:55Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcAuthenticationMechanism.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.quarkus.oidc.runtime;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.quarkus.security.identity.IdentityProviderManager;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.quarkus.vertx.http.runtime.security.ChallengeData;\n+import io.quarkus.vertx.http.runtime.security.HttpAuthenticationMechanism;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@ApplicationScoped\n+public class OidcAuthenticationMechanism implements HttpAuthenticationMechanism {\n+\n+    @Inject\n+    DefaultTenantConfigResolver resolver;\n+    private volatile BearerAuthenticationMechanism bearerAuth;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxMDc3Nw=="}, "originalCommit": {"oid": "3ea8c62478a4950d9faf37cf000557992ab6c814"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzk5NzgxOnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcAuthenticationMechanism.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTozMTo1MlrOFoZ4bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjo0ODo0N1rOFocBHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxMTQwNg==", "bodyText": "Not that it matters, but this can actually create multiple instances here if multiple threads hit it at the same time.", "url": "https://github.com/quarkusio/quarkus/pull/7086#discussion_r377911406", "createdAt": "2020-02-11T21:31:52Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcAuthenticationMechanism.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.quarkus.oidc.runtime;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.quarkus.security.identity.IdentityProviderManager;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.quarkus.vertx.http.runtime.security.ChallengeData;\n+import io.quarkus.vertx.http.runtime.security.HttpAuthenticationMechanism;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@ApplicationScoped\n+public class OidcAuthenticationMechanism implements HttpAuthenticationMechanism {\n+\n+    @Inject\n+    DefaultTenantConfigResolver resolver;\n+    private volatile BearerAuthenticationMechanism bearerAuth;\n+    private volatile CodeAuthenticationMechanism codeAuth;\n+\n+    @Override\n+    public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n+            IdentityProviderManager identityProviderManager) {\n+        return isWebApp(context) ? getCodeAuth().authenticate(context, identityProviderManager, resolver)\n+                : getBearerAuth().authenticate(context, identityProviderManager, resolver);\n+    }\n+\n+    @Override\n+    public CompletionStage<ChallengeData> getChallenge(RoutingContext context) {\n+        return isWebApp(context) ? getCodeAuth().getChallenge(context, resolver)\n+                : getBearerAuth().getChallenge(context, resolver);\n+    }\n+\n+    private CodeAuthenticationMechanism getCodeAuth() {\n+        if (codeAuth == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ea8c62478a4950d9faf37cf000557992ab6c814"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NjM5Nw==", "bodyText": "Yes, this is what I was typing about above but I decided to give it a try to make sure for a single application-type no code (or bearer) flow is created given Pedro's concern.\nI'm going to return to the original code where I was just creating these 2 instances.\nWith the dynamic TenantConfigResolver one can never be 100% sure there will only be one application-type", "url": "https://github.com/quarkusio/quarkus/pull/7086#discussion_r377946397", "createdAt": "2020-02-11T22:48:47Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcAuthenticationMechanism.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.quarkus.oidc.runtime;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.quarkus.security.identity.IdentityProviderManager;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.quarkus.vertx.http.runtime.security.ChallengeData;\n+import io.quarkus.vertx.http.runtime.security.HttpAuthenticationMechanism;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@ApplicationScoped\n+public class OidcAuthenticationMechanism implements HttpAuthenticationMechanism {\n+\n+    @Inject\n+    DefaultTenantConfigResolver resolver;\n+    private volatile BearerAuthenticationMechanism bearerAuth;\n+    private volatile CodeAuthenticationMechanism codeAuth;\n+\n+    @Override\n+    public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n+            IdentityProviderManager identityProviderManager) {\n+        return isWebApp(context) ? getCodeAuth().authenticate(context, identityProviderManager, resolver)\n+                : getBearerAuth().authenticate(context, identityProviderManager, resolver);\n+    }\n+\n+    @Override\n+    public CompletionStage<ChallengeData> getChallenge(RoutingContext context) {\n+        return isWebApp(context) ? getCodeAuth().getChallenge(context, resolver)\n+                : getBearerAuth().getChallenge(context, resolver);\n+    }\n+\n+    private CodeAuthenticationMechanism getCodeAuth() {\n+        if (codeAuth == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxMTQwNg=="}, "originalCommit": {"oid": "3ea8c62478a4950d9faf37cf000557992ab6c814"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODAwNjA3OnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTozNDozNlrOFoZ9pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjo0NDo1N1rOFob69Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxMjc0MA==", "bodyText": "It looks like resolve is now called lots of times per request. I think it might make sense to add some code to DefaultTenantResolver that stores the result in the routing context so subsequent invocations are effectively cached.", "url": "https://github.com/quarkusio/quarkus/pull/7086#discussion_r377912740", "createdAt": "2020-02-11T21:34:36Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -124,7 +120,9 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n     }\n \n     private CompletionStage<SecurityIdentity> performCodeFlow(IdentityProviderManager identityProviderManager,\n-            RoutingContext context) {\n+            RoutingContext context, DefaultTenantConfigResolver resolver) {\n+        TenantConfigContext configContext = resolver.resolve(context, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ea8c62478a4950d9faf37cf000557992ab6c814"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NDgyMQ==", "bodyText": "@stuartwdouglas It is only a visual impression :-). This PR only introduces one extra resolver call in OidcAuthenticationMechanism to figure which way to go. It is called a few times in CodeAuthenticationMechanism right on the master requesting a complete resolution. This PR optimizes it a bit, asking for OidcTenantConfig only when no OAuth2Auth is needed.\nAnd @pedroigor has already updated DefaultTenantConfigResolver to support caching TenantConfigContext when needed. So it should be fine", "url": "https://github.com/quarkusio/quarkus/pull/7086#discussion_r377944821", "createdAt": "2020-02-11T22:44:57Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -124,7 +120,9 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n     }\n \n     private CompletionStage<SecurityIdentity> performCodeFlow(IdentityProviderManager identityProviderManager,\n-            RoutingContext context) {\n+            RoutingContext context, DefaultTenantConfigResolver resolver) {\n+        TenantConfigContext configContext = resolver.resolve(context, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxMjc0MA=="}, "originalCommit": {"oid": "3ea8c62478a4950d9faf37cf000557992ab6c814"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODAxMTQ2OnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/DefaultTenantConfigResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTozNjoxMVrOFoaA1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTozNjoxMVrOFoaA1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxMzU1OQ==", "bodyText": "I know this is not part of the PR, but this code should be in a PostCostruct method", "url": "https://github.com/quarkusio/quarkus/pull/7086#discussion_r377913559", "createdAt": "2020-02-11T21:36:11Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/DefaultTenantConfigResolver.java", "diffHunk": "@@ -26,12 +26,21 @@\n     private volatile TenantConfigContext defaultTenant;\n     private volatile Function<OidcTenantConfig, TenantConfigContext> tenantConfigContextFactory;\n \n-    TenantConfigContext resolve(RoutingContext context) {\n+    /**\n+     * Resolve {@linkplain TenantConfigContext} which contains the tenant configuration and\n+     * the active OIDC connection instance which may be null.\n+     * \n+     * @param context the current request context\n+     * @param create if true then the OIDC connection must be available or established\n+     *        for the resolution to be successful\n+     * @return\n+     */\n+    TenantConfigContext resolve(RoutingContext context, boolean create) {\n         if (tenantConfigResolver.isAmbiguous()) {\n             throw new IllegalStateException(\"Multiple \" + TenantConfigResolver.class + \" beans registered\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ea8c62478a4950d9faf37cf000557992ab6c814"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODAxNDUzOnYy", "diffSide": "RIGHT", "path": "integration-tests/oidc-tenancy/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTozNzoxMFrOFoaCww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTozNzoxMFrOFoaCww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkxNDA1MQ==", "bodyText": "This should be managed in the build parent.", "url": "https://github.com/quarkusio/quarkus/pull/7086#discussion_r377914051", "createdAt": "2020-02-11T21:37:10Z", "author": {"login": "stuartwdouglas"}, "path": "integration-tests/oidc-tenancy/pom.xml", "diffHunk": "@@ -16,6 +16,7 @@\n \n     <properties>\n         <keycloak.url>http://localhost:8180/auth</keycloak.url>\n+        <htmlunit.version>2.36.0</htmlunit.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ea8c62478a4950d9faf37cf000557992ab6c814"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 925, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}