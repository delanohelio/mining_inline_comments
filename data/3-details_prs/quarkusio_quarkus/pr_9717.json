{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2Mjc0NTMw", "number": 9717, "title": "Swagger and static resource support AWS Lambda HTTP, Azure HTTP", "bodyText": "I was not handling static resource correctly in the virtual HTTP layer.  This fix will allow swagger support to work with AWS and Azure HTTP extensions as well as any static resource that emits FileRegion's internally.\nI also redid the VirtualChannel stuff a bit to avoid context switching.  I was having trouble with FileRegions as the VirtualChannel was closing the file before the azure/aws layer could read from the region.  Since I was doing too much context switching anyways, I decided to just move message processing to the io loop.  This aws/azure message processing is all non-blocking so it should be fine.\n@stuartwdouglas Not sure if I handled FileRegions correctly.  Can you take a look?  They are in a spin loop.  It looks like the NioChannel is handling them in the same way.", "createdAt": "2020-06-02T00:00:55Z", "url": "https://github.com/quarkusio/quarkus/pull/9717", "merged": true, "mergeCommit": {"oid": "8713226cb16d6aac129e2b274d222b17f5ec1f7c"}, "closed": true, "closedAt": "2020-06-03T23:44:54Z", "author": {"login": "patriot1burke"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnJWDrABqjMzOTUzMDM5MTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnySgqAFqTQyNDAwOTU0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b013c80b09b93f5e60bc8e3a121a71f3ad169ac", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/4b013c80b09b93f5e60bc8e3a121a71f3ad169ac", "committedDate": "2020-06-01T23:55:04Z", "message": "Support FileRegions\n\nlambda formatting\n\nvirtual handler"}, "afterCommit": {"oid": "1912d0f3e41db997efca870a0e1cae6538529dc2", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/1912d0f3e41db997efca870a0e1cae6538529dc2", "committedDate": "2020-06-02T00:02:16Z", "message": "Support FileRegions\n\nlambda formatting\n\nvirtual handler"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjY1MzUw", "url": "https://github.com/quarkusio/quarkus/pull/9717#pullrequestreview-422265350", "createdAt": "2020-06-02T00:26:30Z", "commit": {"oid": "1912d0f3e41db997efca870a0e1cae6538529dc2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMDoyNjozMVrOGdeOog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMDoyNjozMVrOGdeOog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU1NzE1NA==", "bodyText": "I don't think this is correct. I think you need to create a buffer that is the size of file.count(), then just calling transferTo once should be enough. If you don't have enough space in the buffer then there is no way to read all the contents.", "url": "https://github.com/quarkusio/quarkus/pull/9717#discussion_r433557154", "createdAt": "2020-06-02T00:26:31Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/amazon-lambda-http/runtime/src/main/java/io/quarkus/amazon/lambda/http/LambdaHttpHandler.java", "diffHunk": "@@ -46,19 +53,102 @@ public AwsProxyResponse handleRequest(AwsProxyRequest request, Context context)\n             }\n         }\n \n-        VirtualClientConnection connection = VirtualClientConnection.connect(VertxHttpRecorder.VIRTUAL_HTTP, clientAddress);\n         try {\n-            return nettyDispatch(connection, request);\n+            return nettyDispatch(clientAddress, request);\n         } catch (Exception e) {\n+            log.error(\"Request Failure\", e);\n             return new AwsProxyResponse(500, errorHeaders, \"{ \\\"message\\\": \\\"Internal Server Error\\\" }\");\n-        } finally {\n-            connection.close();\n         }\n \n     }\n \n-    private AwsProxyResponse nettyDispatch(VirtualClientConnection connection, AwsProxyRequest request) throws Exception {\n+    private class NettyResponseHandler implements VirtualResponseHandler {\n+        AwsProxyResponse responseBuilder = new AwsProxyResponse();\n+        ByteArrayOutputStream baos;\n+        WritableByteChannel byteChannel;\n+        final AwsProxyRequest request;\n+        CompletableFuture<AwsProxyResponse> future = new CompletableFuture<>();\n+\n+        public NettyResponseHandler(AwsProxyRequest request) {\n+            this.request = request;\n+        }\n+\n+        public CompletableFuture<AwsProxyResponse> getFuture() {\n+            return future;\n+        }\n+\n+        @Override\n+        public void handleMessage(Object msg) {\n+            try {\n+                //log.info(\"Got message: \" + msg.getClass().getName());\n+\n+                if (msg instanceof HttpResponse) {\n+                    HttpResponse res = (HttpResponse) msg;\n+                    responseBuilder.setStatusCode(res.status().code());\n+\n+                    if (request.getRequestSource() == AwsProxyRequest.RequestSource.ALB) {\n+                        responseBuilder.setStatusDescription(res.status().reasonPhrase());\n+                    }\n+                    responseBuilder.setMultiValueHeaders(new Headers());\n+                    for (String name : res.headers().names()) {\n+                        for (String v : res.headers().getAll(name)) {\n+                            responseBuilder.getMultiValueHeaders().add(name, v);\n+                        }\n+                    }\n+                }\n+                if (msg instanceof HttpContent) {\n+                    HttpContent content = (HttpContent) msg;\n+                    int readable = content.content().readableBytes();\n+                    if (baos == null && readable > 0) {\n+                        baos = createByteStream();\n+                    }\n+                    for (int i = 0; i < readable; i++) {\n+                        baos.write(content.content().readByte());\n+                    }\n+                }\n+                if (msg instanceof FileRegion) {\n+                    FileRegion file = (FileRegion) msg;\n+                    if (file.count() > 0 && file.transferred() < file.count()) {\n+                        if (baos == null)\n+                            baos = createByteStream();\n+                        if (byteChannel == null)\n+                            byteChannel = Channels.newChannel(baos);\n+                        // AbstractNioByteChannel also seems to do a spin, albeit with a count.\n+                        while (file.transferred() < file.count()) {\n+                            file.transferTo(byteChannel, file.transferred());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1912d0f3e41db997efca870a0e1cae6538529dc2"}, "originalPosition": 109}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1912d0f3e41db997efca870a0e1cae6538529dc2", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/1912d0f3e41db997efca870a0e1cae6538529dc2", "committedDate": "2020-06-02T00:02:16Z", "message": "Support FileRegions\n\nlambda formatting\n\nvirtual handler"}, "afterCommit": {"oid": "52311f882c3c590e4994af4107cb434a4f26530e", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/52311f882c3c590e4994af4107cb434a4f26530e", "committedDate": "2020-06-02T15:53:36Z", "message": "Support FileRegions\n\nlambda formatting\n\nvirtual handler\n\npoll loop error messages"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "52311f882c3c590e4994af4107cb434a4f26530e", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/52311f882c3c590e4994af4107cb434a4f26530e", "committedDate": "2020-06-02T15:53:36Z", "message": "Support FileRegions\n\nlambda formatting\n\nvirtual handler\n\npoll loop error messages"}, "afterCommit": {"oid": "03dfd8c1b8327b1d3cc3c1828eb4144697c1f464", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/03dfd8c1b8327b1d3cc3c1828eb4144697c1f464", "committedDate": "2020-06-02T15:59:59Z", "message": "Support FileRegions\n\nlambda formatting\n\nvirtual handler\n\npoll loop error messages\n\ngit rid of poll loop"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMTU2MDQw", "url": "https://github.com/quarkusio/quarkus/pull/9717#pullrequestreview-423156040", "createdAt": "2020-06-03T01:14:22Z", "commit": {"oid": "03dfd8c1b8327b1d3cc3c1828eb4144697c1f464"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMToxNDoyMlrOGeI78A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMToxNToxM1rOGeI8xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1Njg4MA==", "bodyText": "This should be file.count().", "url": "https://github.com/quarkusio/quarkus/pull/9717#discussion_r434256880", "createdAt": "2020-06-03T01:14:22Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/amazon-lambda-http/runtime/src/main/java/io/quarkus/amazon/lambda/http/LambdaHttpHandler.java", "diffHunk": "@@ -46,19 +53,99 @@ public AwsProxyResponse handleRequest(AwsProxyRequest request, Context context)\n             }\n         }\n \n-        VirtualClientConnection connection = VirtualClientConnection.connect(VertxHttpRecorder.VIRTUAL_HTTP, clientAddress);\n         try {\n-            return nettyDispatch(connection, request);\n+            return nettyDispatch(clientAddress, request);\n         } catch (Exception e) {\n+            log.error(\"Request Failure\", e);\n             return new AwsProxyResponse(500, errorHeaders, \"{ \\\"message\\\": \\\"Internal Server Error\\\" }\");\n-        } finally {\n-            connection.close();\n         }\n \n     }\n \n-    private AwsProxyResponse nettyDispatch(VirtualClientConnection connection, AwsProxyRequest request) throws Exception {\n+    private class NettyResponseHandler implements VirtualResponseHandler {\n+        AwsProxyResponse responseBuilder = new AwsProxyResponse();\n+        ByteArrayOutputStream baos;\n+        WritableByteChannel byteChannel;\n+        final AwsProxyRequest request;\n+        CompletableFuture<AwsProxyResponse> future = new CompletableFuture<>();\n+\n+        public NettyResponseHandler(AwsProxyRequest request) {\n+            this.request = request;\n+        }\n+\n+        public CompletableFuture<AwsProxyResponse> getFuture() {\n+            return future;\n+        }\n+\n+        @Override\n+        public void handleMessage(Object msg) {\n+            try {\n+                //log.info(\"Got message: \" + msg.getClass().getName());\n+\n+                if (msg instanceof HttpResponse) {\n+                    HttpResponse res = (HttpResponse) msg;\n+                    responseBuilder.setStatusCode(res.status().code());\n+\n+                    if (request.getRequestSource() == AwsProxyRequest.RequestSource.ALB) {\n+                        responseBuilder.setStatusDescription(res.status().reasonPhrase());\n+                    }\n+                    responseBuilder.setMultiValueHeaders(new Headers());\n+                    for (String name : res.headers().names()) {\n+                        for (String v : res.headers().getAll(name)) {\n+                            responseBuilder.getMultiValueHeaders().add(name, v);\n+                        }\n+                    }\n+                }\n+                if (msg instanceof HttpContent) {\n+                    HttpContent content = (HttpContent) msg;\n+                    int readable = content.content().readableBytes();\n+                    if (baos == null && readable > 0) {\n+                        baos = createByteStream();\n+                    }\n+                    for (int i = 0; i < readable; i++) {\n+                        baos.write(content.content().readByte());\n+                    }\n+                }\n+                if (msg instanceof FileRegion) {\n+                    FileRegion file = (FileRegion) msg;\n+                    if (file.count() > 0 && file.transferred() < file.count()) {\n+                        if (baos == null)\n+                            baos = createByteStream();\n+                        if (byteChannel == null)\n+                            byteChannel = Channels.newChannel(baos);\n+                        file.transferTo(byteChannel, file.transferred());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03dfd8c1b8327b1d3cc3c1828eb4144697c1f464"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1NzA5Mw==", "bodyText": "should be .count().", "url": "https://github.com/quarkusio/quarkus/pull/9717#discussion_r434257093", "createdAt": "2020-06-03T01:15:13Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/azure-functions-http/runtime/src/main/java/io/quarkus/azure/functions/resteasy/runtime/BaseFunction.java", "diffHunk": "@@ -92,51 +92,83 @@ protected HttpResponseMessage nettyDispatch(VirtualClientConnection connection,\n             requestContent = new DefaultLastHttpContent(body);\n         }\n \n+        ResponseHandler handler = new ResponseHandler(request);\n+        VirtualClientConnection connection = VirtualClientConnection.connect(handler, VertxHttpRecorder.VIRTUAL_HTTP);\n+\n         connection.sendMessage(nettyRequest);\n         connection.sendMessage(requestContent);\n-        HttpResponseMessage.Builder responseBuilder = null;\n-        ByteArrayOutputStream baos = null;\n         try {\n-            for (;;) {\n-                // todo should we timeout? have a timeout config?\n-                //log.info(\"waiting for message\");\n-                Object msg = connection.queue().poll(100, TimeUnit.MILLISECONDS);\n-                try {\n-                    if (msg == null)\n-                        continue;\n-                    //log.info(\"Got message: \" + msg.getClass().getName());\n-\n-                    if (msg instanceof HttpResponse) {\n-                        HttpResponse res = (HttpResponse) msg;\n-                        responseBuilder = request.createResponseBuilder(HttpStatus.valueOf(res.status().code()));\n-                        for (Map.Entry<String, String> entry : res.headers()) {\n-                            responseBuilder.header(entry.getKey(), entry.getValue());\n-                        }\n+            return handler.future.get();\n+        } finally {\n+            connection.close();\n+        }\n+    }\n+\n+    private ByteArrayOutputStream createByteStream() {\n+        ByteArrayOutputStream baos;\n+        baos = new ByteArrayOutputStream(500);\n+        return baos;\n+    }\n+\n+    private class ResponseHandler implements VirtualResponseHandler {\n+        HttpResponseMessage.Builder responseBuilder;\n+        ByteArrayOutputStream baos;\n+        WritableByteChannel byteChannel;\n+        CompletableFuture<HttpResponseMessage> future = new CompletableFuture<>();\n+        final HttpRequestMessage<Optional<byte[]>> request;\n+\n+        public ResponseHandler(HttpRequestMessage<Optional<byte[]>> request) {\n+            this.request = request;\n+        }\n+\n+        @Override\n+        public void handleMessage(Object msg) {\n+            try {\n+                //log.info(\"Got message: \" + msg.getClass().getName());\n+\n+                if (msg instanceof HttpResponse) {\n+                    HttpResponse res = (HttpResponse) msg;\n+                    responseBuilder = request.createResponseBuilder(HttpStatus.valueOf(res.status().code()));\n+                    for (Map.Entry<String, String> entry : res.headers()) {\n+                        responseBuilder.header(entry.getKey(), entry.getValue());\n                     }\n-                    if (msg instanceof HttpContent) {\n-                        HttpContent content = (HttpContent) msg;\n-                        if (baos == null) {\n-                            // todo what is right size?\n-                            baos = new ByteArrayOutputStream(500);\n-                        }\n-                        int readable = content.content().readableBytes();\n-                        for (int i = 0; i < readable; i++) {\n-                            baos.write(content.content().readByte());\n-                        }\n+                }\n+                if (msg instanceof HttpContent) {\n+                    HttpContent content = (HttpContent) msg;\n+                    if (baos == null) {\n+                        // todo what is right size?\n+                        baos = createByteStream();\n                     }\n-                    if (msg instanceof LastHttpContent) {\n-                        responseBuilder.body(baos.toByteArray());\n-                        return responseBuilder.build();\n+                    int readable = content.content().readableBytes();\n+                    for (int i = 0; i < readable; i++) {\n+                        baos.write(content.content().readByte());\n                     }\n-                } finally {\n-                    if (msg != null)\n-                        ReferenceCountUtil.release(msg);\n                 }\n+                if (msg instanceof FileRegion) {\n+                    FileRegion file = (FileRegion) msg;\n+                    if (file.count() > 0 && file.transferred() < file.count()) {\n+                        if (baos == null)\n+                            baos = createByteStream();\n+                        if (byteChannel == null)\n+                            byteChannel = Channels.newChannel(baos);\n+                        file.transferTo(byteChannel, file.transferred());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03dfd8c1b8327b1d3cc3c1828eb4144697c1f464"}, "originalPosition": 148}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "03dfd8c1b8327b1d3cc3c1828eb4144697c1f464", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/03dfd8c1b8327b1d3cc3c1828eb4144697c1f464", "committedDate": "2020-06-02T15:59:59Z", "message": "Support FileRegions\n\nlambda formatting\n\nvirtual handler\n\npoll loop error messages\n\ngit rid of poll loop"}, "afterCommit": {"oid": "b4cb8192f677ae033c9d3d9aaecf8cc62fb210e4", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/b4cb8192f677ae033c9d3d9aaecf8cc62fb210e4", "committedDate": "2020-06-03T02:46:28Z", "message": "Support FileRegions\n\nlambda formatting\n\nvirtual handler\n\npoll loop error messages\n\ngit rid of poll loop\n\nfix transferTo"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b4cb8192f677ae033c9d3d9aaecf8cc62fb210e4", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/b4cb8192f677ae033c9d3d9aaecf8cc62fb210e4", "committedDate": "2020-06-03T02:46:28Z", "message": "Support FileRegions\n\nlambda formatting\n\nvirtual handler\n\npoll loop error messages\n\ngit rid of poll loop\n\nfix transferTo"}, "afterCommit": {"oid": "e09716890053fc7ae54ff89b0e4db93cb268bd6b", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/e09716890053fc7ae54ff89b0e4db93cb268bd6b", "committedDate": "2020-06-03T04:12:23Z", "message": "Support FileRegions\n\nlambda formatting\n\nvirtual handler\n\npoll loop error messages\n\ngit rid of poll loop\n\nfix transferTo\n\nrevert back"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e09716890053fc7ae54ff89b0e4db93cb268bd6b", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/e09716890053fc7ae54ff89b0e4db93cb268bd6b", "committedDate": "2020-06-03T04:12:23Z", "message": "Support FileRegions\n\nlambda formatting\n\nvirtual handler\n\npoll loop error messages\n\ngit rid of poll loop\n\nfix transferTo\n\nrevert back"}, "afterCommit": {"oid": "d91e04c9490626a7b4484b3c962ba56615b02819", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/d91e04c9490626a7b4484b3c962ba56615b02819", "committedDate": "2020-06-03T14:13:27Z", "message": "Support FileRegions\n\nlambda formatting\n\nvirtual handler\n\npoll loop error messages\n\ngit rid of poll loop\n\nfix transferTo\n\nrevert back"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e76ec50882c8b453411c43b9040ce683cb2fa87", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/2e76ec50882c8b453411c43b9040ce683cb2fa87", "committedDate": "2020-06-03T21:11:01Z", "message": "Support FileRegions\n\nlambda formatting\n\nvirtual handler\n\npoll loop error messages\n\ngit rid of poll loop\n\nfix transferTo\n\nrevert back"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d91e04c9490626a7b4484b3c962ba56615b02819", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/d91e04c9490626a7b4484b3c962ba56615b02819", "committedDate": "2020-06-03T14:13:27Z", "message": "Support FileRegions\n\nlambda formatting\n\nvirtual handler\n\npoll loop error messages\n\ngit rid of poll loop\n\nfix transferTo\n\nrevert back"}, "afterCommit": {"oid": "2e76ec50882c8b453411c43b9040ce683cb2fa87", "author": {"user": {"login": "patriot1burke", "name": "Bill Burke"}}, "url": "https://github.com/quarkusio/quarkus/commit/2e76ec50882c8b453411c43b9040ce683cb2fa87", "committedDate": "2020-06-03T21:11:01Z", "message": "Support FileRegions\n\nlambda formatting\n\nvirtual handler\n\npoll loop error messages\n\ngit rid of poll loop\n\nfix transferTo\n\nrevert back"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MDA5NTQy", "url": "https://github.com/quarkusio/quarkus/pull/9717#pullrequestreview-424009542", "createdAt": "2020-06-03T23:44:36Z", "commit": {"oid": "2e76ec50882c8b453411c43b9040ce683cb2fa87"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4406, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}