{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2OTkyOTg0", "number": 7270, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDo1OTozNFrODhOFEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNzoxNjozMFrODhnC8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTYwMjczOnYy", "diffSide": "RIGHT", "path": "integration-tests/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDo1OTozNFrOFr3aFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTo0OTowMFrOFr438g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0MDg4Ng==", "bodyText": "Previously I think there were REST Client tests in \"main\".\nDoes this just augment what's there? Any reason why they need to be separate?", "url": "https://github.com/quarkusio/quarkus/pull/7270#discussion_r381540886", "createdAt": "2020-02-19T20:59:34Z", "author": {"login": "kenfinnigan"}, "path": "integration-tests/pom.xml", "diffHunk": "@@ -74,6 +74,7 @@\n         <module>mongodb-client</module>\n         <module>jackson</module>\n         <module>jsonb</module>\n+        <module>rest-client</module>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a5eccedb2aa73600a98ec0e60b72bb18501f91c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2NDkxNA==", "bodyText": "Ah, I didn't realize we had a \"main\" IT module with an assortment of tests in it. I can move the the tests there to help keep build times down", "url": "https://github.com/quarkusio/quarkus/pull/7270#discussion_r381564914", "createdAt": "2020-02-19T21:49:00Z", "author": {"login": "aguibert"}, "path": "integration-tests/pom.xml", "diffHunk": "@@ -74,6 +74,7 @@\n         <module>mongodb-client</module>\n         <module>jackson</module>\n         <module>jsonb</module>\n+        <module>rest-client</module>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0MDg4Ng=="}, "originalCommit": {"oid": "8a5eccedb2aa73600a98ec0e60b72bb18501f91c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDY1OTY3OnYy", "diffSide": "RIGHT", "path": "extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjo1MDowM1rOFsSGWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjoyOTo0OFrOFslaVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3ODIwMA==", "bodyText": "Does it make sense to support WriteInterceptor and ReadInterceptor as well ? Though it can be done as part of another PR for sure...", "url": "https://github.com/quarkusio/quarkus/pull/7270#discussion_r381978200", "createdAt": "2020-02-20T12:50:03Z", "author": {"login": "sberyozkin"}, "path": "extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java", "diffHunk": "@@ -83,6 +83,9 @@\n     private static final DotName REGISTER_PROVIDER = DotName.createSimple(RegisterProvider.class.getName());\n     private static final DotName REGISTER_PROVIDERS = DotName.createSimple(RegisterProviders.class.getName());\n \n+    private static final DotName CLIENT_REQUEST_FILTER = DotName.createSimple(ClientRequestFilter.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a5eccedb2aa73600a98ec0e60b72bb18501f91c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0NzAxNw==", "bodyText": "hi @sberyozkin, yes I think that would also make sense. Since those interfaces are part of the javax.ws.rs.ext package, it would probably be best to register them in the core \"resteasy-common\" module. I'll open a follow-up PR with the additions and tests in the next day or so", "url": "https://github.com/quarkusio/quarkus/pull/7270#discussion_r382047017", "createdAt": "2020-02-20T14:50:15Z", "author": {"login": "aguibert"}, "path": "extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java", "diffHunk": "@@ -83,6 +83,9 @@\n     private static final DotName REGISTER_PROVIDER = DotName.createSimple(RegisterProvider.class.getName());\n     private static final DotName REGISTER_PROVIDERS = DotName.createSimple(RegisterProviders.class.getName());\n \n+    private static final DotName CLIENT_REQUEST_FILTER = DotName.createSimple(ClientRequestFilter.class.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3ODIwMA=="}, "originalCommit": {"oid": "8a5eccedb2aa73600a98ec0e60b72bb18501f91c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI5NDYxMg==", "bodyText": "Hi @aguibert sorry for a delay; thanks, that would be great...Cheers", "url": "https://github.com/quarkusio/quarkus/pull/7270#discussion_r382294612", "createdAt": "2020-02-20T22:29:48Z", "author": {"login": "sberyozkin"}, "path": "extensions/rest-client/deployment/src/main/java/io/quarkus/restclient/deployment/RestClientProcessor.java", "diffHunk": "@@ -83,6 +83,9 @@\n     private static final DotName REGISTER_PROVIDER = DotName.createSimple(RegisterProvider.class.getName());\n     private static final DotName REGISTER_PROVIDERS = DotName.createSimple(RegisterProviders.class.getName());\n \n+    private static final DotName CLIENT_REQUEST_FILTER = DotName.createSimple(ClientRequestFilter.class.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3ODIwMA=="}, "originalCommit": {"oid": "8a5eccedb2aa73600a98ec0e60b72bb18501f91c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NTY5MzMxOnYy", "diffSide": "RIGHT", "path": "extensions/rest-client/runtime/src/main/java/io/quarkus/restclient/runtime/graal/ClientBuilderReplacement.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNzoxNjozMFrOFscDbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNzoxNjozMFrOFscDbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0MTI5Mg==", "bodyText": "@kenfinnigan can you please re-review? I took your suggestion and moved the ITs to the \"main\" project, which exposed a new bug on the SSL builder path in native mode. I've included the fix on these highlighted lines which mirrors what is done in org.jboss.resteasy.microprofile.client.RestClientBuilderImpl.build(Class<T>)", "url": "https://github.com/quarkusio/quarkus/pull/7270#discussion_r382141292", "createdAt": "2020-02-20T17:16:30Z", "author": {"login": "aguibert"}, "path": "extensions/rest-client/runtime/src/main/java/io/quarkus/restclient/runtime/graal/ClientBuilderReplacement.java", "diffHunk": "@@ -2,16 +2,29 @@\n \n import javax.ws.rs.client.ClientBuilder;\n \n+import org.jboss.resteasy.client.jaxrs.ResteasyClientBuilder;\n+import org.jboss.resteasy.client.jaxrs.engines.URLConnectionClientEngineBuilder;\n+import org.jboss.resteasy.client.jaxrs.internal.LocalResteasyProviderFactory;\n import org.jboss.resteasy.client.jaxrs.internal.ResteasyClientBuilderImpl;\n \n import com.oracle.svm.core.annotate.Substitute;\n import com.oracle.svm.core.annotate.TargetClass;\n \n+import io.quarkus.restclient.runtime.RestClientRecorder;\n+\n @TargetClass(ClientBuilder.class)\n final class ClientBuilderReplacement {\n \n     @Substitute\n     public static ClientBuilder newBuilder() {\n-        return new ResteasyClientBuilderImpl();\n+        ResteasyClientBuilder client = new ResteasyClientBuilderImpl();\n+        client.providerFactory(new LocalResteasyProviderFactory(RestClientRecorder.providerFactory));\n+        if (!RestClientRecorder.SSL_ENABLED) {\n+            client.httpEngine(new URLConnectionClientEngineBuilder().resteasyClientBuilder(client).build());\n+            client.sslContext(null);\n+            client.trustStore(null);\n+            client.keyStore(null, \"\");\n+        }\n+        return client;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f64724bd62011804c0dac8f687d5b602d233484"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 97, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}