{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMDA3NzI5", "number": 10324, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNjowNzoxMFrOEJadCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowMzo1MlrOEKHOlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzA2MDU2OnYy", "diffSide": "RIGHT", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNjowNzoxMFrOGp6pxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNjowNzoxMFrOGp6pxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwNTc2NA==", "bodyText": "I am getting a timeout error here", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r446605764", "createdAt": "2020-06-28T06:07:10Z", "author": {"login": "Garima829"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -20,6 +32,59 @@ public void testFastJarFormatWorks() throws Exception {\n         assertThat(quarkusApp).exists();\n         Path jar = quarkusApp.resolve(\"quarkus-run.jar\");\n         assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = doLaunch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+            // test that the application name and version are properly set\n+            getHttpResponse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ea1ab617d7189bbdbf2a20e5858725c0a8c90f8"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTAxMzEwOnYy", "diffSide": "RIGHT", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODo1ODoxOVrOGqLEUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoyMToyNVrOGqOSlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3NDcwNA==", "bodyText": "Use Logger.error for dumping error content. Rest looks good", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r446874704", "createdAt": "2020-06-29T08:58:19Z", "author": {"login": "RotBolt"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -20,6 +32,59 @@ public void testFastJarFormatWorks() throws Exception {\n         assertThat(quarkusApp).exists();\n         Path jar = quarkusApp.resolve(\"quarkus-run.jar\");\n         assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = doLaunch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+            // test that the application name and version are properly set\n+            getHttpResponse();\n+            getHttpResponse(\"\");\n+        } finally {\n+            process.destroy();\n+        }\n+    }\n+\n+    static void assertThatOutputWorksCorrectly(String logs) {\n+        assertThat(logs.isEmpty()).isFalse();\n+        String infoLogLevel = \"INFO\";\n+        assertThat(logs.contains(infoLogLevel)).isTrue();\n+        //Predicate<String> datePattern = Pattern.compile(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\\\\s\\\\d{2}:\\\\d{2}:\\\\d{2},\\\\d{3}\").asPredicate();\n+\n+        //assertThat(datePattern.test(logs)).isTrue();\n+        String basic = \"[io.quarkus] (main)\";\n+        assertThat(logs.contains(basic)).isTrue();\n+        assertThat(logs.contains(\"cdi, resteasy\")).isTrue();\n+        assertThat(logs.contains(\"JBoss Threads version\")).isFalse();\n+    }\n+\n+    private void dumpFileContentOnFailure(final Callable<Void> operation, final File logFile,\n+                                          final Class<? extends Throwable> failureType) throws Exception {\n+        try {\n+            operation.call();\n+        } catch (Throwable t) {\n+            if (failureType != null && failureType.isInstance(t)) {\n+                final String logs = FileUtils.readFileToString(logFile, \"UTF-8\");\n+                System.out.println(\"####### LOG DUMP ON FAILURE (start) ######\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ea1ab617d7189bbdbf2a20e5858725c0a8c90f8"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNzUwOA==", "bodyText": "Will do", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r446927508", "createdAt": "2020-06-29T12:21:25Z", "author": {"login": "Garima829"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -20,6 +32,59 @@ public void testFastJarFormatWorks() throws Exception {\n         assertThat(quarkusApp).exists();\n         Path jar = quarkusApp.resolve(\"quarkus-run.jar\");\n         assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = doLaunch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+            // test that the application name and version are properly set\n+            getHttpResponse();\n+            getHttpResponse(\"\");\n+        } finally {\n+            process.destroy();\n+        }\n+    }\n+\n+    static void assertThatOutputWorksCorrectly(String logs) {\n+        assertThat(logs.isEmpty()).isFalse();\n+        String infoLogLevel = \"INFO\";\n+        assertThat(logs.contains(infoLogLevel)).isTrue();\n+        //Predicate<String> datePattern = Pattern.compile(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\\\\s\\\\d{2}:\\\\d{2}:\\\\d{2},\\\\d{3}\").asPredicate();\n+\n+        //assertThat(datePattern.test(logs)).isTrue();\n+        String basic = \"[io.quarkus] (main)\";\n+        assertThat(logs.contains(basic)).isTrue();\n+        assertThat(logs.contains(\"cdi, resteasy\")).isTrue();\n+        assertThat(logs.contains(\"JBoss Threads version\")).isFalse();\n+    }\n+\n+    private void dumpFileContentOnFailure(final Callable<Void> operation, final File logFile,\n+                                          final Class<? extends Throwable> failureType) throws Exception {\n+        try {\n+            operation.call();\n+        } catch (Throwable t) {\n+            if (failureType != null && failureType.isInstance(t)) {\n+                final String logs = FileUtils.readFileToString(logFile, \"UTF-8\");\n+                System.out.println(\"####### LOG DUMP ON FAILURE (start) ######\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3NDcwNA=="}, "originalCommit": {"oid": "9ea1ab617d7189bbdbf2a20e5858725c0a8c90f8"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTY3MTQyOnYy", "diffSide": "RIGHT", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/HttpUtils.java", "isResolved": true, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMDo1NToyMVrOGq3BLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzo0MTozN1rOGq87lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NDc5Nw==", "bodyText": "We don't want DevModeTestUtils to have an getHttpResponse method. We want your new test and the existing tests that use DevModeTestUtils.getHttpResponse to both use HttpUtils.getHttpResponse.", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447594797", "createdAt": "2020-06-30T10:55:21Z", "author": {"login": "geoand"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/HttpUtils.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.gradle;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import io.quarkus.utilities.JavaBinFinder;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import java.util.function.Supplier;\n+\n+public class HttpUtils {\n+\n+    private static Future<?> quarkusDev;\n+\n+    protected static Process doLaunch(Path jar, File output) throws IOException {\n+        List<String> commands = new ArrayList<>();\n+        commands.add(JavaBinFinder.findBin());\n+        commands.add(\"-jar\");\n+        commands.add(jar.toString());\n+        ProcessBuilder processBuilder = new ProcessBuilder(commands.toArray(new String[0]));\n+        processBuilder.redirectOutput(output);\n+        processBuilder.redirectError(output);\n+        return processBuilder.start();\n+    }\n+\n+    protected static String getHttpResponse(String path) {\n+        return DevModeTestUtils.getHttpResponse(path, getQuarkusDevBrokenReason());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbf8d35ee4e35abec45dcefffc79805964cdac14"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5ODEzNQ==", "bodyText": "DevModeTestUtils is a read-only file, should I modify it and delete the getHttpResponse method from it and shift all the types of getHttpResponse to HttpUtils ?", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447598135", "createdAt": "2020-06-30T11:02:04Z", "author": {"login": "Garima829"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/HttpUtils.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.gradle;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import io.quarkus.utilities.JavaBinFinder;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import java.util.function.Supplier;\n+\n+public class HttpUtils {\n+\n+    private static Future<?> quarkusDev;\n+\n+    protected static Process doLaunch(Path jar, File output) throws IOException {\n+        List<String> commands = new ArrayList<>();\n+        commands.add(JavaBinFinder.findBin());\n+        commands.add(\"-jar\");\n+        commands.add(jar.toString());\n+        ProcessBuilder processBuilder = new ProcessBuilder(commands.toArray(new String[0]));\n+        processBuilder.redirectOutput(output);\n+        processBuilder.redirectError(output);\n+        return processBuilder.start();\n+    }\n+\n+    protected static String getHttpResponse(String path) {\n+        return DevModeTestUtils.getHttpResponse(path, getQuarkusDevBrokenReason());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NDc5Nw=="}, "originalCommit": {"oid": "bbf8d35ee4e35abec45dcefffc79805964cdac14"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5ODY2Mw==", "bodyText": "Exactly", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447598663", "createdAt": "2020-06-30T11:03:11Z", "author": {"login": "geoand"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/HttpUtils.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.gradle;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import io.quarkus.utilities.JavaBinFinder;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import java.util.function.Supplier;\n+\n+public class HttpUtils {\n+\n+    private static Future<?> quarkusDev;\n+\n+    protected static Process doLaunch(Path jar, File output) throws IOException {\n+        List<String> commands = new ArrayList<>();\n+        commands.add(JavaBinFinder.findBin());\n+        commands.add(\"-jar\");\n+        commands.add(jar.toString());\n+        ProcessBuilder processBuilder = new ProcessBuilder(commands.toArray(new String[0]));\n+        processBuilder.redirectOutput(output);\n+        processBuilder.redirectError(output);\n+        return processBuilder.start();\n+    }\n+\n+    protected static String getHttpResponse(String path) {\n+        return DevModeTestUtils.getHttpResponse(path, getQuarkusDevBrokenReason());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NDc5Nw=="}, "originalCommit": {"oid": "bbf8d35ee4e35abec45dcefffc79805964cdac14"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5OTA2OA==", "bodyText": "All the methods in DevModeTestUtils that deal with http response should be moved to your new HttpUtils class", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447599068", "createdAt": "2020-06-30T11:03:58Z", "author": {"login": "geoand"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/HttpUtils.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.gradle;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import io.quarkus.utilities.JavaBinFinder;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import java.util.function.Supplier;\n+\n+public class HttpUtils {\n+\n+    private static Future<?> quarkusDev;\n+\n+    protected static Process doLaunch(Path jar, File output) throws IOException {\n+        List<String> commands = new ArrayList<>();\n+        commands.add(JavaBinFinder.findBin());\n+        commands.add(\"-jar\");\n+        commands.add(jar.toString());\n+        ProcessBuilder processBuilder = new ProcessBuilder(commands.toArray(new String[0]));\n+        processBuilder.redirectOutput(output);\n+        processBuilder.redirectError(output);\n+        return processBuilder.start();\n+    }\n+\n+    protected static String getHttpResponse(String path) {\n+        return DevModeTestUtils.getHttpResponse(path, getQuarkusDevBrokenReason());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NDc5Nw=="}, "originalCommit": {"oid": "bbf8d35ee4e35abec45dcefffc79805964cdac14"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYwMDkzNQ==", "bodyText": "Okkay, on it", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447600935", "createdAt": "2020-06-30T11:07:57Z", "author": {"login": "Garima829"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/HttpUtils.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.gradle;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import io.quarkus.utilities.JavaBinFinder;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import java.util.function.Supplier;\n+\n+public class HttpUtils {\n+\n+    private static Future<?> quarkusDev;\n+\n+    protected static Process doLaunch(Path jar, File output) throws IOException {\n+        List<String> commands = new ArrayList<>();\n+        commands.add(JavaBinFinder.findBin());\n+        commands.add(\"-jar\");\n+        commands.add(jar.toString());\n+        ProcessBuilder processBuilder = new ProcessBuilder(commands.toArray(new String[0]));\n+        processBuilder.redirectOutput(output);\n+        processBuilder.redirectError(output);\n+        return processBuilder.start();\n+    }\n+\n+    protected static String getHttpResponse(String path) {\n+        return DevModeTestUtils.getHttpResponse(path, getQuarkusDevBrokenReason());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NDc5Nw=="}, "originalCommit": {"oid": "bbf8d35ee4e35abec45dcefffc79805964cdac14"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4MzEzNQ==", "bodyText": "Last thing, let's just drop this class since it's not doing anything after all...\nThe idea was initially to move things out of DevModeTestUtils (since it contains things that are more than dev mode), but let's leave it for later...", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447683135", "createdAt": "2020-06-30T13:30:11Z", "author": {"login": "geoand"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/HttpUtils.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.gradle;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import io.quarkus.utilities.JavaBinFinder;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import java.util.function.Supplier;\n+\n+public class HttpUtils {\n+\n+    private static Future<?> quarkusDev;\n+\n+    protected static Process doLaunch(Path jar, File output) throws IOException {\n+        List<String> commands = new ArrayList<>();\n+        commands.add(JavaBinFinder.findBin());\n+        commands.add(\"-jar\");\n+        commands.add(jar.toString());\n+        ProcessBuilder processBuilder = new ProcessBuilder(commands.toArray(new String[0]));\n+        processBuilder.redirectOutput(output);\n+        processBuilder.redirectError(output);\n+        return processBuilder.start();\n+    }\n+\n+    protected static String getHttpResponse(String path) {\n+        return DevModeTestUtils.getHttpResponse(path, getQuarkusDevBrokenReason());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NDc5Nw=="}, "originalCommit": {"oid": "bbf8d35ee4e35abec45dcefffc79805964cdac14"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4NzU2Ng==", "bodyText": "This class HttpUtils is using the same getHttpResponse as that of QuarkusDevGradleTestBase which then uses getHttpResponse of DevModeTestUtils, so if I'll remove it, my test will use getHttpResponse straightaway from DevModeTestUtils", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447687566", "createdAt": "2020-06-30T13:36:13Z", "author": {"login": "Garima829"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/HttpUtils.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.gradle;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import io.quarkus.utilities.JavaBinFinder;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import java.util.function.Supplier;\n+\n+public class HttpUtils {\n+\n+    private static Future<?> quarkusDev;\n+\n+    protected static Process doLaunch(Path jar, File output) throws IOException {\n+        List<String> commands = new ArrayList<>();\n+        commands.add(JavaBinFinder.findBin());\n+        commands.add(\"-jar\");\n+        commands.add(jar.toString());\n+        ProcessBuilder processBuilder = new ProcessBuilder(commands.toArray(new String[0]));\n+        processBuilder.redirectOutput(output);\n+        processBuilder.redirectError(output);\n+        return processBuilder.start();\n+    }\n+\n+    protected static String getHttpResponse(String path) {\n+        return DevModeTestUtils.getHttpResponse(path, getQuarkusDevBrokenReason());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NDc5Nw=="}, "originalCommit": {"oid": "bbf8d35ee4e35abec45dcefffc79805964cdac14"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4OTI0OQ==", "bodyText": "getHttpResponse from HttpUtils currently adds another argument of getQuarkusDevBrokenReason", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447689249", "createdAt": "2020-06-30T13:38:32Z", "author": {"login": "Garima829"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/HttpUtils.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.gradle;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import io.quarkus.utilities.JavaBinFinder;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import java.util.function.Supplier;\n+\n+public class HttpUtils {\n+\n+    private static Future<?> quarkusDev;\n+\n+    protected static Process doLaunch(Path jar, File output) throws IOException {\n+        List<String> commands = new ArrayList<>();\n+        commands.add(JavaBinFinder.findBin());\n+        commands.add(\"-jar\");\n+        commands.add(jar.toString());\n+        ProcessBuilder processBuilder = new ProcessBuilder(commands.toArray(new String[0]));\n+        processBuilder.redirectOutput(output);\n+        processBuilder.redirectError(output);\n+        return processBuilder.start();\n+    }\n+\n+    protected static String getHttpResponse(String path) {\n+        return DevModeTestUtils.getHttpResponse(path, getQuarkusDevBrokenReason());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NDc5Nw=="}, "originalCommit": {"oid": "bbf8d35ee4e35abec45dcefffc79805964cdac14"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5MDMzMA==", "bodyText": "That doesn't really matter. You can pass the argument from the test", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447690330", "createdAt": "2020-06-30T13:39:56Z", "author": {"login": "geoand"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/HttpUtils.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.gradle;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import io.quarkus.utilities.JavaBinFinder;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import java.util.function.Supplier;\n+\n+public class HttpUtils {\n+\n+    private static Future<?> quarkusDev;\n+\n+    protected static Process doLaunch(Path jar, File output) throws IOException {\n+        List<String> commands = new ArrayList<>();\n+        commands.add(JavaBinFinder.findBin());\n+        commands.add(\"-jar\");\n+        commands.add(jar.toString());\n+        ProcessBuilder processBuilder = new ProcessBuilder(commands.toArray(new String[0]));\n+        processBuilder.redirectOutput(output);\n+        processBuilder.redirectError(output);\n+        return processBuilder.start();\n+    }\n+\n+    protected static String getHttpResponse(String path) {\n+        return DevModeTestUtils.getHttpResponse(path, getQuarkusDevBrokenReason());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NDc5Nw=="}, "originalCommit": {"oid": "bbf8d35ee4e35abec45dcefffc79805964cdac14"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5MTY2OQ==", "bodyText": "True, I'll remove it", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447691669", "createdAt": "2020-06-30T13:41:37Z", "author": {"login": "Garima829"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/HttpUtils.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.gradle;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import io.quarkus.utilities.JavaBinFinder;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import java.util.function.Supplier;\n+\n+public class HttpUtils {\n+\n+    private static Future<?> quarkusDev;\n+\n+    protected static Process doLaunch(Path jar, File output) throws IOException {\n+        List<String> commands = new ArrayList<>();\n+        commands.add(JavaBinFinder.findBin());\n+        commands.add(\"-jar\");\n+        commands.add(jar.toString());\n+        ProcessBuilder processBuilder = new ProcessBuilder(commands.toArray(new String[0]));\n+        processBuilder.redirectOutput(output);\n+        processBuilder.redirectError(output);\n+        return processBuilder.start();\n+    }\n+\n+    protected static String getHttpResponse(String path) {\n+        return DevModeTestUtils.getHttpResponse(path, getQuarkusDevBrokenReason());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NDc5Nw=="}, "originalCommit": {"oid": "bbf8d35ee4e35abec45dcefffc79805964cdac14"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTY3NDI2OnYy", "diffSide": "RIGHT", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/HttpUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMDo1NjowOFrOGq3CrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMDo1ODowMlrOGq3GhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NTE4MA==", "bodyText": "This method doesn't conceptually belong here. Best move it to a LaunchUtils class and also rename the method to launch.", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447595180", "createdAt": "2020-06-30T10:56:08Z", "author": {"login": "geoand"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/HttpUtils.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.gradle;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import io.quarkus.utilities.JavaBinFinder;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import java.util.function.Supplier;\n+\n+public class HttpUtils {\n+\n+    private static Future<?> quarkusDev;\n+\n+    protected static Process doLaunch(Path jar, File output) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbf8d35ee4e35abec45dcefffc79805964cdac14"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NjE2NQ==", "bodyText": "Okayy", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447596165", "createdAt": "2020-06-30T10:58:02Z", "author": {"login": "Garima829"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/HttpUtils.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.gradle;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import io.quarkus.utilities.JavaBinFinder;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import java.util.function.Supplier;\n+\n+public class HttpUtils {\n+\n+    private static Future<?> quarkusDev;\n+\n+    protected static Process doLaunch(Path jar, File output) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NTE4MA=="}, "originalCommit": {"oid": "bbf8d35ee4e35abec45dcefffc79805964cdac14"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTY3NTkyOnYy", "diffSide": "RIGHT", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMDo1NjozNlrOGq3Dng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMDo1ODoyMlrOGq3HFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NTQyMg==", "bodyText": "You should probably assert that the response is \"hello\"", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447595422", "createdAt": "2020-06-30T10:56:36Z", "author": {"login": "geoand"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -20,6 +31,51 @@ public void testFastJarFormatWorks() throws Exception {\n         assertThat(quarkusApp).exists();\n         Path jar = quarkusApp.resolve(\"quarkus-run.jar\");\n         assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = doLaunch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+            // test that the application name and version are properly set\n+            getHttpResponse(\"/hello\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbf8d35ee4e35abec45dcefffc79805964cdac14"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NjMxMA==", "bodyText": "Will do", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447596310", "createdAt": "2020-06-30T10:58:22Z", "author": {"login": "Garima829"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -20,6 +31,51 @@ public void testFastJarFormatWorks() throws Exception {\n         assertThat(quarkusApp).exists();\n         Path jar = quarkusApp.resolve(\"quarkus-run.jar\");\n         assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = doLaunch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+            // test that the application name and version are properly set\n+            getHttpResponse(\"/hello\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NTQyMg=="}, "originalCommit": {"oid": "bbf8d35ee4e35abec45dcefffc79805964cdac14"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDEyNjQ5OnYy", "diffSide": "RIGHT", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzowNTo0NFrOGq7XGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzoxMjozNlrOGq7oww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NTk0NQ==", "bodyText": "Since you added this, you should probably remove the previous statement.", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447665945", "createdAt": "2020-06-30T13:05:44Z", "author": {"login": "geoand"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -20,6 +31,53 @@ public void testFastJarFormatWorks() throws Exception {\n         assertThat(quarkusApp).exists();\n         Path jar = quarkusApp.resolve(\"quarkus-run.jar\");\n         assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = launch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+            // test that the application name and version are properly set\n+\n+            getHttpResponse(\"/hello\");\n+            assertThat(getHttpResponse(\"/hello\").equals(\"hello\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dca35e83d55084780d404a1ee41c56383a520ff9"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY3MDQ2Nw==", "bodyText": "Okayy", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447670467", "createdAt": "2020-06-30T13:12:36Z", "author": {"login": "Garima829"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -20,6 +31,53 @@ public void testFastJarFormatWorks() throws Exception {\n         assertThat(quarkusApp).exists();\n         Path jar = quarkusApp.resolve(\"quarkus-run.jar\");\n         assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = launch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+            // test that the application name and version are properly set\n+\n+            getHttpResponse(\"/hello\");\n+            assertThat(getHttpResponse(\"/hello\").equals(\"hello\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NTk0NQ=="}, "originalCommit": {"oid": "dca35e83d55084780d404a1ee41c56383a520ff9"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDEyNzM5OnYy", "diffSide": "RIGHT", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzowNjowMFrOGq7Xtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzoxNzo0MlrOGq716g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NjEwMw==", "bodyText": "No need to test this I would say", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447666103", "createdAt": "2020-06-30T13:06:00Z", "author": {"login": "geoand"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -20,6 +31,53 @@ public void testFastJarFormatWorks() throws Exception {\n         assertThat(quarkusApp).exists();\n         Path jar = quarkusApp.resolve(\"quarkus-run.jar\");\n         assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = launch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+            // test that the application name and version are properly set\n+\n+            getHttpResponse(\"/hello\");\n+            assertThat(getHttpResponse(\"/hello\").equals(\"hello\"));\n+        } finally {\n+            process.destroy();\n+        }\n+    }\n+\n+    static void assertThatOutputWorksCorrectly(String logs) {\n+        assertThat(logs.isEmpty()).isFalse();\n+        String infoLogLevel = \"INFO\";\n+        assertThat(logs.contains(infoLogLevel)).isTrue();\n+        String basic = \"[io.quarkus] (main)\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dca35e83d55084780d404a1ee41c56383a520ff9"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY3MTA2Mw==", "bodyText": "But you said to test any string which is always present while removing the regex", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447671063", "createdAt": "2020-06-30T13:13:27Z", "author": {"login": "Garima829"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -20,6 +31,53 @@ public void testFastJarFormatWorks() throws Exception {\n         assertThat(quarkusApp).exists();\n         Path jar = quarkusApp.resolve(\"quarkus-run.jar\");\n         assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = launch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+            // test that the application name and version are properly set\n+\n+            getHttpResponse(\"/hello\");\n+            assertThat(getHttpResponse(\"/hello\").equals(\"hello\"));\n+        } finally {\n+            process.destroy();\n+        }\n+    }\n+\n+    static void assertThatOutputWorksCorrectly(String logs) {\n+        assertThat(logs.isEmpty()).isFalse();\n+        String infoLogLevel = \"INFO\";\n+        assertThat(logs.contains(infoLogLevel)).isTrue();\n+        String basic = \"[io.quarkus] (main)\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NjEwMw=="}, "originalCommit": {"oid": "dca35e83d55084780d404a1ee41c56383a520ff9"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY3MjIxOA==", "bodyText": "Yeah, what am I saying is that this test doesn't make sense because you have assertThat(logs.contains(\"cdi, resteasy\")).isTrue();", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447672218", "createdAt": "2020-06-30T13:15:12Z", "author": {"login": "geoand"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -20,6 +31,53 @@ public void testFastJarFormatWorks() throws Exception {\n         assertThat(quarkusApp).exists();\n         Path jar = quarkusApp.resolve(\"quarkus-run.jar\");\n         assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = launch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+            // test that the application name and version are properly set\n+\n+            getHttpResponse(\"/hello\");\n+            assertThat(getHttpResponse(\"/hello\").equals(\"hello\"));\n+        } finally {\n+            process.destroy();\n+        }\n+    }\n+\n+    static void assertThatOutputWorksCorrectly(String logs) {\n+        assertThat(logs.isEmpty()).isFalse();\n+        String infoLogLevel = \"INFO\";\n+        assertThat(logs.contains(infoLogLevel)).isTrue();\n+        String basic = \"[io.quarkus] (main)\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NjEwMw=="}, "originalCommit": {"oid": "dca35e83d55084780d404a1ee41c56383a520ff9"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY3MzgzNA==", "bodyText": "Okkay", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447673834", "createdAt": "2020-06-30T13:17:42Z", "author": {"login": "Garima829"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -20,6 +31,53 @@ public void testFastJarFormatWorks() throws Exception {\n         assertThat(quarkusApp).exists();\n         Path jar = quarkusApp.resolve(\"quarkus-run.jar\");\n         assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = launch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+            // test that the application name and version are properly set\n+\n+            getHttpResponse(\"/hello\");\n+            assertThat(getHttpResponse(\"/hello\").equals(\"hello\"));\n+        } finally {\n+            process.destroy();\n+        }\n+    }\n+\n+    static void assertThatOutputWorksCorrectly(String logs) {\n+        assertThat(logs.isEmpty()).isFalse();\n+        String infoLogLevel = \"INFO\";\n+        assertThat(logs.contains(infoLogLevel)).isTrue();\n+        String basic = \"[io.quarkus] (main)\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NjEwMw=="}, "originalCommit": {"oid": "dca35e83d55084780d404a1ee41c56383a520ff9"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDEyODIwOnYy", "diffSide": "RIGHT", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzowNjoxMFrOGq7YKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzoxNDozN1rOGq7t9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NjIxOQ==", "bodyText": "This isn't really needed either", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447666219", "createdAt": "2020-06-30T13:06:10Z", "author": {"login": "geoand"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -20,6 +31,53 @@ public void testFastJarFormatWorks() throws Exception {\n         assertThat(quarkusApp).exists();\n         Path jar = quarkusApp.resolve(\"quarkus-run.jar\");\n         assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = launch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+            // test that the application name and version are properly set\n+\n+            getHttpResponse(\"/hello\");\n+            assertThat(getHttpResponse(\"/hello\").equals(\"hello\"));\n+        } finally {\n+            process.destroy();\n+        }\n+    }\n+\n+    static void assertThatOutputWorksCorrectly(String logs) {\n+        assertThat(logs.isEmpty()).isFalse();\n+        String infoLogLevel = \"INFO\";\n+        assertThat(logs.contains(infoLogLevel)).isTrue();\n+        String basic = \"[io.quarkus] (main)\";\n+        assertThat(logs.contains(basic)).isTrue();\n+        assertThat(logs.contains(\"cdi, resteasy\")).isTrue();\n+        assertThat(logs.contains(\"JBoss Threads version\")).isFalse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dca35e83d55084780d404a1ee41c56383a520ff9"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY3MTc5OA==", "bodyText": "Okayy", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447671798", "createdAt": "2020-06-30T13:14:37Z", "author": {"login": "Garima829"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -20,6 +31,53 @@ public void testFastJarFormatWorks() throws Exception {\n         assertThat(quarkusApp).exists();\n         Path jar = quarkusApp.resolve(\"quarkus-run.jar\");\n         assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = launch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+            // test that the application name and version are properly set\n+\n+            getHttpResponse(\"/hello\");\n+            assertThat(getHttpResponse(\"/hello\").equals(\"hello\"));\n+        } finally {\n+            process.destroy();\n+        }\n+    }\n+\n+    static void assertThatOutputWorksCorrectly(String logs) {\n+        assertThat(logs.isEmpty()).isFalse();\n+        String infoLogLevel = \"INFO\";\n+        assertThat(logs.contains(infoLogLevel)).isTrue();\n+        String basic = \"[io.quarkus] (main)\";\n+        assertThat(logs.contains(basic)).isTrue();\n+        assertThat(logs.contains(\"cdi, resteasy\")).isTrue();\n+        assertThat(logs.contains(\"JBoss Threads version\")).isFalse();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NjIxOQ=="}, "originalCommit": {"oid": "dca35e83d55084780d404a1ee41c56383a520ff9"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDM5NDU4OnYy", "diffSide": "RIGHT", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowMzoyOFrOGq98Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowNDo0MVrOGq9_fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwODE4Mg==", "bodyText": "Let's call jarRun instead.", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447708182", "createdAt": "2020-06-30T14:03:28Z", "author": {"login": "geoand"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -1,13 +1,26 @@\n package io.quarkus.gradle;\n \n+import static io.quarkus.gradle.LaunchUtils.launch;\n import static org.assertj.core.api.Assertions.assertThat;\n \n import java.io.File;\n import java.nio.file.Path;\n \n+import org.apache.log4j.Logger;\n import org.junit.jupiter.api.Test;\n \n+import static org.awaitility.Awaitility.await;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.awaitility.core.ConditionTimeoutException;\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+\n public class FastJarFormatWorksTest extends QuarkusGradleWrapperTestBase {\n+    private static Future<?> quarkusDev;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9715e900db8ed282a067bb8edda1ad4148cf6e6e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwOTA1NA==", "bodyText": "Okayy", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447709054", "createdAt": "2020-06-30T14:04:41Z", "author": {"login": "Garima829"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -1,13 +1,26 @@\n package io.quarkus.gradle;\n \n+import static io.quarkus.gradle.LaunchUtils.launch;\n import static org.assertj.core.api.Assertions.assertThat;\n \n import java.io.File;\n import java.nio.file.Path;\n \n+import org.apache.log4j.Logger;\n import org.junit.jupiter.api.Test;\n \n+import static org.awaitility.Awaitility.await;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.awaitility.core.ConditionTimeoutException;\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+\n public class FastJarFormatWorksTest extends QuarkusGradleWrapperTestBase {\n+    private static Future<?> quarkusDev;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwODE4Mg=="}, "originalCommit": {"oid": "9715e900db8ed282a067bb8edda1ad4148cf6e6e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDM5NjM5OnYy", "diffSide": "RIGHT", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowMzo1MlrOGq99LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowNDo1MlrOGq-AAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwODQ2MA==", "bodyText": "And the string should be \"jar run mode has terminated\"", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447708460", "createdAt": "2020-06-30T14:03:52Z", "author": {"login": "geoand"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -20,6 +33,55 @@ public void testFastJarFormatWorks() throws Exception {\n         assertThat(quarkusApp).exists();\n         Path jar = quarkusApp.resolve(\"quarkus-run.jar\");\n         assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = launch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+\n+            // test that the application name and version are properly set\n+            assertThat(DevModeTestUtils.getHttpResponse(\"/hello\",getQuarkusDevBrokenReason()).equals(\"hello\"));\n+        } finally {\n+            process.destroy();\n+        }\n+    }\n+\n+    static void assertThatOutputWorksCorrectly(String logs) {\n+        assertThat(logs.isEmpty()).isFalse();\n+        String infoLogLevel = \"INFO\";\n+        assertThat(logs.contains(infoLogLevel)).isTrue();\n+        assertThat(logs.contains(\"cdi, resteasy\")).isTrue();\n+    }\n+\n+    private void dumpFileContentOnFailure(final Callable<Void> operation, final File logFile,\n+                                          final Class<? extends Throwable> failureType) throws Exception {\n+\n+        final Logger log = Logger.getLogger(FastJarFormatWorksTest.class);\n+        try {\n+            operation.call();\n+        } catch (Throwable t) {\n+            log.error(\"Dumping logs that were generated in \" + logFile + \" for an operation that resulted in \"\n+                        + t.getClass().getName() + \":\",t);\n+\n+            throw t;\n+        }\n+    }\n+\n+    private static Supplier<String> getQuarkusDevBrokenReason() {\n+        return () -> {\n+            return quarkusDev == null ? null : quarkusDev.isDone() ? \"quarkusDev mode has terminated\" : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9715e900db8ed282a067bb8edda1ad4148cf6e6e"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwOTE4NQ==", "bodyText": "Okay", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447709185", "createdAt": "2020-06-30T14:04:52Z", "author": {"login": "Garima829"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -20,6 +33,55 @@ public void testFastJarFormatWorks() throws Exception {\n         assertThat(quarkusApp).exists();\n         Path jar = quarkusApp.resolve(\"quarkus-run.jar\");\n         assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = launch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+\n+            // test that the application name and version are properly set\n+            assertThat(DevModeTestUtils.getHttpResponse(\"/hello\",getQuarkusDevBrokenReason()).equals(\"hello\"));\n+        } finally {\n+            process.destroy();\n+        }\n+    }\n+\n+    static void assertThatOutputWorksCorrectly(String logs) {\n+        assertThat(logs.isEmpty()).isFalse();\n+        String infoLogLevel = \"INFO\";\n+        assertThat(logs.contains(infoLogLevel)).isTrue();\n+        assertThat(logs.contains(\"cdi, resteasy\")).isTrue();\n+    }\n+\n+    private void dumpFileContentOnFailure(final Callable<Void> operation, final File logFile,\n+                                          final Class<? extends Throwable> failureType) throws Exception {\n+\n+        final Logger log = Logger.getLogger(FastJarFormatWorksTest.class);\n+        try {\n+            operation.call();\n+        } catch (Throwable t) {\n+            log.error(\"Dumping logs that were generated in \" + logFile + \" for an operation that resulted in \"\n+                        + t.getClass().getName() + \":\",t);\n+\n+            throw t;\n+        }\n+    }\n+\n+    private static Supplier<String> getQuarkusDevBrokenReason() {\n+        return () -> {\n+            return quarkusDev == null ? null : quarkusDev.isDone() ? \"quarkusDev mode has terminated\" : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwODQ2MA=="}, "originalCommit": {"oid": "9715e900db8ed282a067bb8edda1ad4148cf6e6e"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2685, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}