{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNDU5MzU4", "number": 9917, "title": "code gen with gRPC", "bodyText": "", "createdAt": "2020-06-10T13:34:08Z", "url": "https://github.com/quarkusio/quarkus/pull/9917", "merged": true, "mergeCommit": {"oid": "2721282026e7f089b740737c0dbe7763659d7453"}, "closed": true, "closedAt": "2020-07-16T04:34:11Z", "author": {"login": "michalszynkiewicz"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcp6DUpABqjM0Mjk3NzI1NTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1dO4PAFqTQ0OTczNDQzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "73b1328d6a19315d9eaaba62567651e81235685b", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/73b1328d6a19315d9eaaba62567651e81235685b", "committedDate": "2020-06-10T13:28:02Z", "message": "code gen"}, "afterCommit": {"oid": "e695facd3dbf524dc4a66f728ad9fc20142f9762", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/e695facd3dbf524dc4a66f728ad9fc20142f9762", "committedDate": "2020-06-10T13:54:24Z", "message": "code gen"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "adb945d4c5b53765d8f2409663f14a19cda32e61", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/adb945d4c5b53765d8f2409663f14a19cda32e61", "committedDate": "2020-06-22T14:08:44Z", "message": "code gen - make gradle generation work"}, "afterCommit": {"oid": "ef7a740a8766df23ddad9e0185cccb9519e0894f", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/ef7a740a8766df23ddad9e0185cccb9519e0894f", "committedDate": "2020-06-22T14:22:07Z", "message": "code gen - make gradle generation work"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NDAxNTEy", "url": "https://github.com/quarkusio/quarkus/pull/9917#pullrequestreview-436401512", "createdAt": "2020-06-24T07:45:01Z", "commit": {"oid": "67035cce698f46b8e03be9987d2f649efa47680d"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo0NTowMVrOGoGtVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNzo1MDo0NlrOGoG5Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwNjEzNA==", "bodyText": "Not a big fan of watchers, it's slightly different from the hot reload approach. @stuartwdouglas WDYT?", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r444706134", "createdAt": "2020-06-24T07:45:01Z", "author": {"login": "cescoffier"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/dev/IsolatedDevModeMain.java", "diffHunk": "@@ -126,6 +142,42 @@ public void accept(Integer integer) {\n         }\n     }\n \n+    private void startCodeGenWatcher(QuarkusClassLoader classLoader, List<CodeGenData> codeGens) {\n+        Executors.newSingleThreadExecutor().execute(\n+                () -> {\n+                    Collection<FSWatchUtil.Watcher> watchers = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67035cce698f46b8e03be9987d2f649efa47680d"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwODA1Nw==", "bodyText": "Wondering about the default phase.\nDo we want it to run late or early? Early: generate sources is fine, late: process resources might be better.", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r444708057", "createdAt": "2020-06-24T07:48:40Z", "author": {"login": "cescoffier"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/CodeGenMojo.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package io.quarkus.maven;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.function.Consumer;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.plugin.AbstractMojo;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.eclipse.aether.RepositorySystem;\n+import org.eclipse.aether.RepositorySystemSession;\n+import org.eclipse.aether.repository.RemoteRepository;\n+\n+import io.quarkus.bootstrap.app.CuratedApplication;\n+import io.quarkus.bootstrap.app.QuarkusBootstrap;\n+import io.quarkus.bootstrap.classloading.QuarkusClassLoader;\n+import io.quarkus.bootstrap.model.AppArtifact;\n+import io.quarkus.bootstrap.prebuild.CodeGenFailureException;\n+import io.quarkus.bootstrap.resolver.maven.MavenArtifactResolver;\n+import io.quarkus.deployment.CodeGenerator;\n+import io.quarkus.deployment.codegen.CodeGenData;\n+\n+@Mojo(name = \"prepare\", defaultPhase = LifecyclePhase.GENERATE_SOURCES, requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67035cce698f46b8e03be9987d2f649efa47680d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwOTEyNw==", "bodyText": "What's the reason for building a fat jar?", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r444709127", "createdAt": "2020-06-24T07:50:46Z", "author": {"login": "cescoffier"}, "path": "extensions/grpc/protoc/pom.xml", "diffHunk": "@@ -25,4 +25,25 @@\n             </exclusions>\n         </dependency>\n     </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67035cce698f46b8e03be9987d2f649efa47680d"}, "originalPosition": 8}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "67035cce698f46b8e03be9987d2f649efa47680d", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/67035cce698f46b8e03be9987d2f649efa47680d", "committedDate": "2020-06-23T10:35:47Z", "message": "code gen - make gradle generation work"}, "afterCommit": {"oid": "8464e72f2230b5d7e5d50a7cbe7680cc581cf634", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/8464e72f2230b5d7e5d50a7cbe7680cc581cf634", "committedDate": "2020-07-07T07:04:29Z", "message": "grpc hot reload\n\nfixes #9327\nfixes #9328"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8464e72f2230b5d7e5d50a7cbe7680cc581cf634", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/8464e72f2230b5d7e5d50a7cbe7680cc581cf634", "committedDate": "2020-07-07T07:04:29Z", "message": "grpc hot reload\n\nfixes #9327\nfixes #9328"}, "afterCommit": {"oid": "a7649be36c0be80aa39f3740e3e37d34c92dd98c", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/a7649be36c0be80aa39f3740e3e37d34c92dd98c", "committedDate": "2020-07-07T09:09:43Z", "message": "grpc hot reload\n\nfixes #9327\nfixes #9328"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a7649be36c0be80aa39f3740e3e37d34c92dd98c", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/a7649be36c0be80aa39f3740e3e37d34c92dd98c", "committedDate": "2020-07-07T09:09:43Z", "message": "grpc hot reload\n\nfixes #9327\nfixes #9328"}, "afterCommit": {"oid": "6713217f451fa1a224c063ebf2cb23720f770cb5", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/6713217f451fa1a224c063ebf2cb23720f770cb5", "committedDate": "2020-07-07T11:05:59Z", "message": "grpc hot reload\n\nfixes #9327\nfixes #9328"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0Mjc4MTE1", "url": "https://github.com/quarkusio/quarkus/pull/9917#pullrequestreview-444278115", "createdAt": "2020-07-07T21:56:16Z", "commit": {"oid": "6713217f451fa1a224c063ebf2cb23720f770cb5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMTo1NjoxNlrOGuRCCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMTo1NjoxNlrOGuRCCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE2NjcyOQ==", "bodyText": "Won't this include an exe file into the lib?", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r451166729", "createdAt": "2020-07-07T21:56:16Z", "author": {"login": "aloubyansky"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/AppModelGradleResolver.java", "diffHunk": "@@ -339,7 +344,7 @@ private void collectExtensionDeps(Set<ResolvedDependency> resolvedDeps,\n      * A {@link ResolvedArtifact} is valid if it's a JAR or a directory\n      */\n     private static boolean isDependency(ResolvedArtifact a) {\n-        return BootstrapConstants.JAR.equalsIgnoreCase(a.getExtension()) ||\n+        return BootstrapConstants.JAR.equalsIgnoreCase(a.getExtension()) || \"exe\".equalsIgnoreCase(a.getExtension()) ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6713217f451fa1a224c063ebf2cb23720f770cb5"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MjgxMzk0", "url": "https://github.com/quarkusio/quarkus/pull/9917#pullrequestreview-444281394", "createdAt": "2020-07-07T22:02:33Z", "commit": {"oid": "6713217f451fa1a224c063ebf2cb23720f770cb5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjowMjozNFrOGuRM4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjowMjozNFrOGuRM4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE2OTUwNA==", "bodyText": "If you look below you'll see SourceSet's. That'll be the proper way to get the sources dirs.", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r451169504", "createdAt": "2020-07-07T22:02:34Z", "author": {"login": "aloubyansky"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/QuarkusPlugin.java", "diffHunk": "@@ -112,6 +121,22 @@ public void execute(Task test) {\n                 JavaPlugin.class,\n                 javaPlugin -> {\n                     project.afterEvaluate(this::afterEvaluate);\n+                    JavaCompile compileJavaTask = (JavaCompile) tasks.getByName(JavaPlugin.COMPILE_JAVA_TASK_NAME);\n+                    compileJavaTask.mustRunAfter(quarkusPrepare);\n+                    quarkusPrepare.setSourceRegistrar(compileJavaTask::source);\n+\n+                    try {\n+                        // TODO: support kotlin\n+                        tasks.getByName(\"compileTestKotlin\");\n+                    } catch (UnknownTaskException noKotlin) {\n+                        JavaCompile compileTestJavaTask = (JavaCompile) tasks.getByName(JavaPlugin.COMPILE_TEST_JAVA_TASK_NAME);\n+                        compileTestJavaTask.dependsOn(quarkusPrepareTests);\n+                        quarkusPrepareTests.setSourceRegistrar(compileTestJavaTask::source);\n+                    }\n+\n+                    Path projectPath = project.getProjectDir().toPath();\n+                    quarkusPrepare.setSourcesDirectory(projectPath.resolve(\"src\").resolve(\"main\"));\n+                    quarkusPrepareTests.setSourcesDirectory(projectPath.resolve(\"src\").resolve(\"test\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6713217f451fa1a224c063ebf2cb23720f770cb5"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MjgzODk4", "url": "https://github.com/quarkusio/quarkus/pull/9917#pullrequestreview-444283898", "createdAt": "2020-07-07T22:07:39Z", "commit": {"oid": "6713217f451fa1a224c063ebf2cb23720f770cb5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjowNzo0MFrOGuRUoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjowNzo0MFrOGuRUoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3MTQ4OQ==", "bodyText": "I guess you should probably be using/checking sourcePaths. Most of the time it will be a singleton set.", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r451171489", "createdAt": "2020-07-07T22:07:40Z", "author": {"login": "aloubyansky"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusDev.java", "diffHunk": "@@ -457,7 +457,10 @@ private void addLocalProject(Project project, DevModeContext context, Set<AppArt\n                 sourcePaths,\n                 classesDir,\n                 resourcesSrcDir.getAbsolutePath(),\n-                resourcesOutputPath);\n+                resourcesOutputPath,\n+                Paths.get(\"src\", \"main\").toAbsolutePath().toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6713217f451fa1a224c063ebf2cb23720f770cb5"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0Mjg0ODgx", "url": "https://github.com/quarkusio/quarkus/pull/9917#pullrequestreview-444284881", "createdAt": "2020-07-07T22:09:44Z", "commit": {"oid": "6713217f451fa1a224c063ebf2cb23720f770cb5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjowOTo0NVrOGuRXsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjowOTo0NVrOGuRXsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3MjI3Mg==", "bodyText": "Was this necessary for dev mode? This is something to be avoided.", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r451172272", "createdAt": "2020-07-07T22:09:45Z", "author": {"login": "aloubyansky"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusPrepare.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package io.quarkus.gradle.tasks;\n+\n+import java.io.File;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.function.Consumer;\n+\n+import org.gradle.api.GradleException;\n+import org.gradle.api.plugins.Convention;\n+import org.gradle.api.plugins.JavaPluginConvention;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import io.quarkus.bootstrap.BootstrapException;\n+import io.quarkus.bootstrap.app.CuratedApplication;\n+import io.quarkus.bootstrap.app.QuarkusBootstrap;\n+import io.quarkus.bootstrap.classloading.QuarkusClassLoader;\n+import io.quarkus.bootstrap.model.AppArtifact;\n+import io.quarkus.bootstrap.resolver.AppModelResolver;\n+import io.quarkus.deployment.CodeGenerator;\n+\n+public class QuarkusPrepare extends QuarkusTask {\n+\n+    public static final String INIT_AND_RUN = \"initAndRun\";\n+    private Path sourcesDirectory;\n+    private Consumer<Path> sourceRegistrar;\n+    private boolean test = false;\n+\n+    public QuarkusPrepare() {\n+        super(\"Quarkus performs pre-build preparations, such as sources generation\");\n+    }\n+\n+    @TaskAction\n+    public void prepareQuarkus() {\n+        getLogger().lifecycle(\"preparing quarkus application\");\n+\n+        final AppArtifact appArtifact = extension().getAppArtifact();\n+        appArtifact.setPaths(QuarkusGradleUtils.getOutputPaths(getProject()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6713217f451fa1a224c063ebf2cb23720f770cb5"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0Mjg5Nzcy", "url": "https://github.com/quarkusio/quarkus/pull/9917#pullrequestreview-444289772", "createdAt": "2020-07-07T22:20:05Z", "commit": {"oid": "6713217f451fa1a224c063ebf2cb23720f770cb5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjoyMDowNVrOGuRnVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjoyMDowNVrOGuRnVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3NjI3Ng==", "bodyText": "This looks like a duplicate of getSourcesSourcesDir()?", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r451176276", "createdAt": "2020-07-07T22:20:05Z", "author": {"login": "aloubyansky"}, "path": "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/LocalProject.java", "diffHunk": "@@ -249,6 +253,11 @@ public Path getSourcesSourcesDir() {\n         return resolveRelativeToBaseDir(srcDir, \"src/main/java\");\n     }\n \n+    public Path getSourcesDir() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6713217f451fa1a224c063ebf2cb23720f770cb5"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MjkwNTM1", "url": "https://github.com/quarkusio/quarkus/pull/9917#pullrequestreview-444290535", "createdAt": "2020-07-07T22:21:46Z", "commit": {"oid": "6713217f451fa1a224c063ebf2cb23720f770cb5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjoyMTo0NlrOGuRp8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjoyMTo0NlrOGuRp8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3Njk0NA==", "bodyText": "Is this actually used anywhere?", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r451176944", "createdAt": "2020-07-07T22:21:46Z", "author": {"login": "aloubyansky"}, "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/app/CuratedApplication.java", "diffHunk": "@@ -302,4 +304,8 @@ public void close() {\n             baseRuntimeClassLoader.close();\n         }\n     }\n+\n+    public AppModelResolver getAppModelResolver() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6713217f451fa1a224c063ebf2cb23720f770cb5"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6713217f451fa1a224c063ebf2cb23720f770cb5", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/6713217f451fa1a224c063ebf2cb23720f770cb5", "committedDate": "2020-07-07T11:05:59Z", "message": "grpc hot reload\n\nfixes #9327\nfixes #9328"}, "afterCommit": {"oid": "d0ca4a21beb5874afd19d99b16906dab3fc07a57", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/d0ca4a21beb5874afd19d99b16906dab3fc07a57", "committedDate": "2020-07-08T15:18:42Z", "message": "codegenprovider: gradle mode rework"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d0ca4a21beb5874afd19d99b16906dab3fc07a57", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/d0ca4a21beb5874afd19d99b16906dab3fc07a57", "committedDate": "2020-07-08T15:18:42Z", "message": "codegenprovider: gradle mode rework"}, "afterCommit": {"oid": "384860fd310fa08f29723647db3363282737bbc3", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/384860fd310fa08f29723647db3363282737bbc3", "committedDate": "2020-07-08T16:09:47Z", "message": "codegenprovider: gradle mode rework"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "384860fd310fa08f29723647db3363282737bbc3", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/384860fd310fa08f29723647db3363282737bbc3", "committedDate": "2020-07-08T16:09:47Z", "message": "codegenprovider: gradle mode rework"}, "afterCommit": {"oid": "abf586be45d47f07f31f85c49ee0fa0a9ff2cee4", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/abf586be45d47f07f31f85c49ee0fa0a9ff2cee4", "committedDate": "2020-07-08T17:48:49Z", "message": "codegenprovider: gradle mode rework"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "abf586be45d47f07f31f85c49ee0fa0a9ff2cee4", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/abf586be45d47f07f31f85c49ee0fa0a9ff2cee4", "committedDate": "2020-07-08T17:48:49Z", "message": "codegenprovider: gradle mode rework"}, "afterCommit": {"oid": "505ebe81d5b42bee625313f6003b858a78ea2f11", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/505ebe81d5b42bee625313f6003b858a78ea2f11", "committedDate": "2020-07-10T06:16:02Z", "message": "codegenprovider: gradle rework"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8252f0c0fbe873fd2d3f149662a388a9cd6551a3", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/8252f0c0fbe873fd2d3f149662a388a9cd6551a3", "committedDate": "2020-07-10T10:53:56Z", "message": "give up on gradle dev mode code gen"}, "afterCommit": {"oid": "88a829eb979b9407a0d8095793305b88a8056c75", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/88a829eb979b9407a0d8095793305b88a8056c75", "committedDate": "2020-07-10T12:20:19Z", "message": "logging to figure out what's wrong with grpc reload"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7d99b7d5cf8320b423b3befd6f0d28fe43469284", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/7d99b7d5cf8320b423b3befd6f0d28fe43469284", "committedDate": "2020-07-10T13:41:29Z", "message": "even more logging"}, "afterCommit": {"oid": "0697a8469686bd5ce65d5b65dc792d803ad83115", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/0697a8469686bd5ce65d5b65dc792d803ad83115", "committedDate": "2020-07-10T14:21:31Z", "message": "even more logging"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0697a8469686bd5ce65d5b65dc792d803ad83115", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/0697a8469686bd5ce65d5b65dc792d803ad83115", "committedDate": "2020-07-10T14:21:31Z", "message": "even more logging"}, "afterCommit": {"oid": "1b706385ce5fb6aa0e0caded7c114d632e57a15d", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/1b706385ce5fb6aa0e0caded7c114d632e57a15d", "committedDate": "2020-07-10T15:08:33Z", "message": "even more logging"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fd9f0f39f4e42ea4b685308e79ba024c4b24e346", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/fd9f0f39f4e42ea4b685308e79ba024c4b24e346", "committedDate": "2020-07-10T22:09:00Z", "message": "even more logging"}, "afterCommit": {"oid": "3da5db2d19ff23ac106d6d86913781ad4bd4edcc", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/3da5db2d19ff23ac106d6d86913781ad4bd4edcc", "committedDate": "2020-07-11T20:13:42Z", "message": "even more logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93e1ba6f97fa2714fe67c42d8d197f0210437100", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/93e1ba6f97fa2714fe67c42d8d197f0210437100", "committedDate": "2020-07-12T19:48:06Z", "message": "code gen with grpc"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5aeda31ae666bcd2b66bbdea74589a379ef33300", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/5aeda31ae666bcd2b66bbdea74589a379ef33300", "committedDate": "2020-07-12T11:37:50Z", "message": "don't use verticles for grpc devmode"}, "afterCommit": {"oid": "7c6fb3b227e7339d9e448bd2664e5f4de7e1bcc5", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/7c6fb3b227e7339d9e448bd2664e5f4de7e1bcc5", "committedDate": "2020-07-12T19:48:06Z", "message": "grpc dev mode - use single server"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7c6fb3b227e7339d9e448bd2664e5f4de7e1bcc5", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/7c6fb3b227e7339d9e448bd2664e5f4de7e1bcc5", "committedDate": "2020-07-12T19:48:06Z", "message": "grpc dev mode - use single server"}, "afterCommit": {"oid": "dc343a7cf1cebca51f11f9f40c7dcfda5ad1f0e8", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/dc343a7cf1cebca51f11f9f40c7dcfda5ad1f0e8", "committedDate": "2020-07-12T20:33:32Z", "message": "grpc dev mode - use single server"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4OTQ0Njgw", "url": "https://github.com/quarkusio/quarkus/pull/9917#pullrequestreview-448944680", "createdAt": "2020-07-15T13:19:54Z", "commit": {"oid": "28b78b2b1aa09349850879fcc6daa72123097678"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzoxOTo1NFrOGx9vDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzoyNDoyMlrOGx97fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0NDg3Ng==", "bodyText": "Should we be more explicit in this message? We only skip the code gen part right?", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455044876", "createdAt": "2020-07-15T13:19:54Z", "author": {"login": "cescoffier"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/CodeGenMojo.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package io.quarkus.maven;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.function.Consumer;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.plugin.AbstractMojo;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.eclipse.aether.RepositorySystem;\n+import org.eclipse.aether.RepositorySystemSession;\n+import org.eclipse.aether.repository.RemoteRepository;\n+\n+import io.quarkus.bootstrap.app.CuratedApplication;\n+import io.quarkus.bootstrap.app.QuarkusBootstrap;\n+import io.quarkus.bootstrap.classloading.QuarkusClassLoader;\n+import io.quarkus.bootstrap.model.AppArtifact;\n+import io.quarkus.bootstrap.prebuild.CodeGenFailureException;\n+import io.quarkus.bootstrap.resolver.maven.MavenArtifactResolver;\n+import io.quarkus.deployment.CodeGenerator;\n+import io.quarkus.deployment.codegen.CodeGenData;\n+\n+@Mojo(name = \"prepare\", defaultPhase = LifecyclePhase.GENERATE_SOURCES, requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+public class CodeGenMojo extends AbstractMojo {\n+\n+    @Parameter(defaultValue = \"${project.build.directory}\")\n+    private File buildDir;\n+\n+    @Parameter(defaultValue = \"${project}\", readonly = true, required = true)\n+    protected MavenProject project;\n+\n+    @Component\n+    private RepositorySystem repoSystem;\n+\n+    @Parameter(defaultValue = \"${repositorySystemSession}\", readonly = true)\n+    private RepositorySystemSession repoSession;\n+\n+    @Parameter(defaultValue = \"${project.remoteProjectRepositories}\", readonly = true, required = true)\n+    private List<RemoteRepository> repos;\n+\n+    /** Skip the execution of this mojo */\n+    @Parameter(defaultValue = \"false\", property = \"quarkus.prepare.skip\")\n+    private boolean skipSourceGeneration = false;\n+\n+    @Override\n+    public void execute() throws MojoExecutionException, MojoFailureException {\n+        String projectDir = project.getBasedir().getAbsolutePath();\n+        Path sourcesDir = Paths.get(projectDir, \"src\", \"main\");\n+        doExecute(sourcesDir, path -> project.addCompileSourceRoot(path.toString()), false);\n+    }\n+\n+    void doExecute(Path sourcesDir,\n+            Consumer<Path> sourceRegistrar,\n+            boolean test) throws MojoFailureException, MojoExecutionException {\n+        if (project.getPackaging().equals(\"pom\")) {\n+            getLog().info(\"Type of the artifact is POM, skipping build goal\");\n+            return;\n+        }\n+        if (skipSourceGeneration) {\n+            getLog().info(\"Skipping Quarkus build\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b78b2b1aa09349850879fcc6daa72123097678"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0NjAzMg==", "bodyText": "Wouldn't it download all the variants even if you need only the one for the current OS/Arch?\nMaybe we can resolve it programmatically.", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455046032", "createdAt": "2020-07-15T13:21:26Z", "author": {"login": "cescoffier"}, "path": "extensions/grpc/deployment/pom.xml", "diffHunk": "@@ -39,6 +43,98 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-smallrye-health-spi</artifactId>\n         </dependency>\n+\n+        <dependency>\n+            <groupId>com.google.protobuf</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b78b2b1aa09349850879fcc6daa72123097678"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0NjY1NA==", "bodyText": "Can you remove the class javadoc?", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455046654", "createdAt": "2020-07-15T13:22:22Z", "author": {"login": "cescoffier"}, "path": "extensions/grpc/deployment/src/test/java/io/quarkus/grpc/server/devmode/DevModeTestRestResource.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package io.quarkus.grpc.server.devmode;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+/**\n+ * @author Michal Szynkiewicz, michal.l.szynkiewicz@gmail.com", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b78b2b1aa09349850879fcc6daa72123097678"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0Njc4Ng==", "bodyText": "Can you remove this javadoc block?", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455046786", "createdAt": "2020-07-15T13:22:33Z", "author": {"login": "cescoffier"}, "path": "extensions/grpc/deployment/src/test/java/io/quarkus/grpc/server/devmode/DevModeTestService.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package io.quarkus.grpc.server.devmode;\n+\n+import javax.inject.Singleton;\n+\n+import devmodetest.v1.Devmodetest;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.stub.StreamObserver;\n+\n+/**\n+ * @author Michal Szynkiewicz, michal.l.szynkiewicz@gmail.com\n+ *         <br>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b78b2b1aa09349850879fcc6daa72123097678"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0Njg5Mw==", "bodyText": "Same :-D", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455046893", "createdAt": "2020-07-15T13:22:42Z", "author": {"login": "cescoffier"}, "path": "extensions/grpc/deployment/src/test/java/io/quarkus/grpc/server/devmode/DevModeTestStreamService.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package io.quarkus.grpc.server.devmode;\n+\n+import java.time.Duration;\n+\n+import javax.inject.Singleton;\n+\n+import com.example.test.MutinyStreamsGrpc;\n+import com.example.test.StreamsOuterClass.Item;\n+\n+import io.smallrye.mutiny.Multi;\n+\n+/**\n+ * @author Michal Szynkiewicz, michal.l.szynkiewicz@gmail.com\n+ *         <br>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b78b2b1aa09349850879fcc6daa72123097678"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0NzAwOQ==", "bodyText": "Same :-D", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455047009", "createdAt": "2020-07-15T13:22:52Z", "author": {"login": "cescoffier"}, "path": "extensions/grpc/deployment/src/test/java/io/quarkus/grpc/server/devmode/GrpcDevModeTest.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package io.quarkus.grpc.server.devmode;\n+\n+import static io.restassured.RestAssured.when;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.awaitility.Awaitility;\n+import org.hamcrest.Matchers;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.example.test.MutinyStreamsGrpc;\n+import com.example.test.StreamsGrpc;\n+import com.example.test.StreamsOuterClass;\n+\n+import devmodetest.v1.Devmodetest;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.quarkus.test.QuarkusDevModeTest;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.subscription.Subscribers;\n+\n+/**\n+ * @author Michal Szynkiewicz, michal.l.szynkiewicz@gmail.com\n+ *         <br>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b78b2b1aa09349850879fcc6daa72123097678"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0ODA2Mw==", "bodyText": "This should be removed.", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455048063", "createdAt": "2020-07-15T13:24:22Z", "author": {"login": "cescoffier"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/devmode/GrpcDevModeTest.java", "diffHunk": "@@ -0,0 +1,24 @@\n+//package io.quarkus.gradle.devmode;\n+//\n+//import static org.assertj.core.api.Assertions.assertThat;\n+//\n+//import com.google.common.collect.ImmutableMap;\n+// // TODO: to be uncommented with #10631", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b78b2b1aa09349850879fcc6daa72123097678"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MjQxMjkz", "url": "https://github.com/quarkusio/quarkus/pull/9917#pullrequestreview-449241293", "createdAt": "2020-07-15T18:53:32Z", "commit": {"oid": "dccd9e401d30ff3089fb1bcf4b0851101f4ed213"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba16068f6b8f519fa42f236f03c021d135759b45", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/ba16068f6b8f519fa42f236f03c021d135759b45", "committedDate": "2020-07-15T19:25:39Z", "message": "grpc dev mode - use single server"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dccd9e401d30ff3089fb1bcf4b0851101f4ed213", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/dccd9e401d30ff3089fb1bcf4b0851101f4ed213", "committedDate": "2020-07-15T15:19:52Z", "message": "code gen grpc rework"}, "afterCommit": {"oid": "ba16068f6b8f519fa42f236f03c021d135759b45", "author": {"user": {"login": "michalszynkiewicz", "name": "Micha\u0142 Szynkiewicz"}}, "url": "https://github.com/quarkusio/quarkus/commit/ba16068f6b8f519fa42f236f03c021d135759b45", "committedDate": "2020-07-15T19:25:39Z", "message": "grpc dev mode - use single server"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NzM0NDM4", "url": "https://github.com/quarkusio/quarkus/pull/9917#pullrequestreview-449734438", "createdAt": "2020-07-16T10:50:13Z", "commit": {"oid": "ba16068f6b8f519fa42f236f03c021d135759b45"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDo1MDoxM1rOGylmRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDo1NzowMFrOGyl0hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY5Nzk5MA==", "bodyText": "This method does not return a collection", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455697990", "createdAt": "2020-07-16T10:50:13Z", "author": {"login": "ppalaga"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/CodeGenProvider.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package io.quarkus.deployment;\n+\n+import org.wildfly.common.annotation.NotNull;\n+\n+import io.quarkus.bootstrap.prebuild.CodeGenException;\n+\n+/**\n+ * Service providers for this interfaces are triggered during generate-sources phase of build of Quarkus applications\n+ */\n+public interface CodeGenProvider {\n+    /**\n+     *\n+     * @return unique name of the code gen provider, will correspond to the directory in <code>generated-sources</code>\n+     */\n+    @NotNull\n+    String providerId();\n+\n+    /**\n+     * File extensions that CodeGenProvider will generate code from\n+     *\n+     * @return collection of file extensions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba16068f6b8f519fa42f236f03c021d135759b45"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY5ODM5Mw==", "bodyText": "What is the purpose of this class?", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455698393", "createdAt": "2020-07-16T10:50:58Z", "author": {"login": "ppalaga"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/CodeGenerator.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package io.quarkus.deployment;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import io.quarkus.bootstrap.model.AppModel;\n+import io.quarkus.bootstrap.prebuild.CodeGenException;\n+import io.quarkus.deployment.codegen.CodeGenData;\n+\n+public class CodeGenerator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba16068f6b8f519fa42f236f03c021d135759b45"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY5ODU5Nw==", "bodyText": "What is \"code gen\"?", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455698597", "createdAt": "2020-07-16T10:51:23Z", "author": {"login": "ppalaga"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/CodeGenerator.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package io.quarkus.deployment;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import io.quarkus.bootstrap.model.AppModel;\n+import io.quarkus.bootstrap.prebuild.CodeGenException;\n+import io.quarkus.deployment.codegen.CodeGenData;\n+\n+public class CodeGenerator {\n+\n+    // used by Gradle\n+    @SuppressWarnings(\"unused\")\n+    public static void initAndRun(ClassLoader classLoader,\n+            Set<Path> sourceParentDirs, Path generatedSourcesDir, Path buildDir,\n+            Consumer<Path> sourceRegistrar,\n+            AppModel appModel) throws CodeGenException {\n+        List<CodeGenData> generators = init(classLoader, sourceParentDirs, generatedSourcesDir, buildDir, sourceRegistrar);\n+        for (CodeGenData generator : generators) {\n+            trigger(classLoader, generator, appModel);\n+        }\n+    }\n+\n+    public static List<CodeGenData> init(ClassLoader deploymentClassLoader,\n+            Set<Path> sourceParentDirs,\n+            Path generatedSourcesDir,\n+            Path buildDir,\n+            Consumer<Path> sourceRegistrar) throws CodeGenException {\n+        return callWithClassloader(deploymentClassLoader, () -> {\n+            List<CodeGenData> result = new ArrayList<>();\n+            Class<? extends CodeGenProvider> codeGenProviderClass;\n+            try {\n+                //noinspection unchecked\n+                codeGenProviderClass = (Class<? extends CodeGenProvider>) deploymentClassLoader\n+                        .loadClass(CodeGenProvider.class.getName());\n+            } catch (ClassNotFoundException e) {\n+                throw new CodeGenException(\"Failde to load CodeGenProvider class from deployment classloader\", e);\n+            }\n+            for (CodeGenProvider provider : ServiceLoader.load(codeGenProviderClass)) {\n+                Path outputDir = codeGenOutDir(generatedSourcesDir, provider, sourceRegistrar);\n+                for (Path sourceParentDir : sourceParentDirs) {\n+                    result.add(\n+                            new CodeGenData(provider, outputDir, sourceParentDir.resolve(provider.inputDirectory()), buildDir));\n+                }\n+            }\n+\n+            return result;\n+        });\n+    }\n+\n+    private static <T> T callWithClassloader(ClassLoader deploymentClassLoader, CodeGenAction<T> supplier)\n+            throws CodeGenException {\n+        ClassLoader originalClassloader = Thread.currentThread().getContextClassLoader();\n+        try {\n+            Thread.currentThread().setContextClassLoader(deploymentClassLoader);\n+            return supplier.fire();\n+        } finally {\n+            Thread.currentThread().setContextClassLoader(originalClassloader);\n+        }\n+    }\n+\n+    /**\n+     * generate sources for given code gen", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba16068f6b8f519fa42f236f03c021d135759b45"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcwMDUwNA==", "bodyText": "Perhaps better Performs Quarkus pre-build preparations, such as sources generation", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455700504", "createdAt": "2020-07-16T10:54:49Z", "author": {"login": "ppalaga"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusPrepare.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package io.quarkus.gradle.tasks;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+import org.gradle.api.GradleException;\n+import org.gradle.api.plugins.Convention;\n+import org.gradle.api.plugins.JavaPluginConvention;\n+import org.gradle.api.tasks.SourceSet;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import io.quarkus.bootstrap.BootstrapException;\n+import io.quarkus.bootstrap.app.CuratedApplication;\n+import io.quarkus.bootstrap.app.QuarkusBootstrap;\n+import io.quarkus.bootstrap.classloading.QuarkusClassLoader;\n+import io.quarkus.bootstrap.model.AppArtifact;\n+import io.quarkus.bootstrap.resolver.AppModelResolver;\n+import io.quarkus.deployment.CodeGenerator;\n+\n+public class QuarkusPrepare extends QuarkusTask {\n+\n+    public static final String INIT_AND_RUN = \"initAndRun\";\n+    private Set<Path> sourcesDirectories;\n+    private Consumer<Path> sourceRegistrar;\n+    private boolean test = false;\n+\n+    public QuarkusPrepare() {\n+        super(\"Quarkus performs pre-build preparations, such as sources generation\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba16068f6b8f519fa42f236f03c021d135759b45"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcwMTYzNw==", "bodyText": "Please add a single line of JavaDoc explaining the purpose of this mojo.\nIs there any reason against adding threadSafe = true?", "url": "https://github.com/quarkusio/quarkus/pull/9917#discussion_r455701637", "createdAt": "2020-07-16T10:57:00Z", "author": {"login": "ppalaga"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/CodeGenMojo.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package io.quarkus.maven;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.function.Consumer;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.plugin.AbstractMojo;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.apache.maven.plugins.annotations.Component;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.MavenProject;\n+import org.eclipse.aether.RepositorySystem;\n+import org.eclipse.aether.RepositorySystemSession;\n+import org.eclipse.aether.repository.RemoteRepository;\n+\n+import io.quarkus.bootstrap.app.CuratedApplication;\n+import io.quarkus.bootstrap.app.QuarkusBootstrap;\n+import io.quarkus.bootstrap.classloading.QuarkusClassLoader;\n+import io.quarkus.bootstrap.model.AppArtifact;\n+import io.quarkus.bootstrap.prebuild.CodeGenFailureException;\n+import io.quarkus.bootstrap.resolver.maven.MavenArtifactResolver;\n+import io.quarkus.deployment.CodeGenerator;\n+import io.quarkus.deployment.codegen.CodeGenData;\n+\n+@Mojo(name = \"prepare\", defaultPhase = LifecyclePhase.GENERATE_SOURCES, requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba16068f6b8f519fa42f236f03c021d135759b45"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4339, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}