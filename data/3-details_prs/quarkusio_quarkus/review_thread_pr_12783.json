{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1ODQ4NDI3", "number": 12783, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMToyNjoyMVrOEvuoPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzowMjo0NVrOEv46tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDgyNDkyOnYy", "diffSide": "RIGHT", "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMToyNjoyMVrOHk3nVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMToyNjoyMVrOHk3nVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyMTk3NA==", "bodyText": "I think we should have a proper parameter to passe the extension name and not the capability.", "url": "https://github.com/quarkusio/quarkus/pull/12783#discussion_r508421974", "createdAt": "2020-10-20T11:26:21Z", "author": {"login": "gsmet"}, "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java", "diffHunk": "@@ -341,6 +313,106 @@ void openTracingIntegration(Capabilities capabilities,\n         return classes;\n     }\n \n+    // Services Integrations\n+\n+    @BuildStep\n+    void activateMetrics(Capabilities capabilities,\n+            Optional<MetricsCapabilityBuildItem> metricsCapability,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties,\n+            BuildProducer<UnremovableBeanBuildItem> unremovableBeans) {\n+\n+        boolean activate = shouldActivateService(capabilities, quarkusConfig.metricsEnabled, metricsCapability.isPresent(),\n+                \"metrics\", \"quarkus.smallrye-graphql.metrics.enabled\");\n+        if (activate) {\n+            if (metricsCapability.isPresent() && metricsCapability.get().metricsSupported(MetricsFactory.MP_METRICS)) {\n+                unremovableBeans.produce(UnremovableBeanBuildItem.beanClassNames(\"io.smallrye.metrics.MetricRegistries\"));\n+            }\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_METRICS, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_METRICS, FALSE));\n+        }\n+    }\n+\n+    @BuildStep\n+    void activateTracing(Capabilities capabilities,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties) {\n+\n+        boolean activate = shouldActivateService(capabilities, quarkusConfig.tracingEnabled, Capability.OPENTRACING,\n+                \"quarkus.smallrye-graphql.tracing.enabled\");\n+        if (activate) {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_TRACING, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_TRACING, FALSE));\n+        }\n+    }\n+\n+    @BuildStep\n+    void activateValidation(Capabilities capabilities,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties) {\n+\n+        boolean activate = shouldActivateService(capabilities, quarkusConfig.validationEnabled, Capability.HIBERNATE_VALIDATOR,\n+                \"quarkus.smallrye-graphql.validation.enabled\");\n+        if (activate) {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_VALIDATION, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_VALIDATION, FALSE));\n+        }\n+    }\n+\n+    @BuildStep\n+    void activateEventing(BuildProducer<SystemPropertyBuildItem> systemProperties) {\n+        if (quarkusConfig.eventsEnabled) {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_EVENTS, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_EVENTS, FALSE));\n+        }\n+    }\n+\n+    private boolean shouldActivateService(Capabilities capabilities,\n+            Optional<Boolean> serviceEnabled,\n+            Capability linkedCapability,\n+            String configKey) {\n+\n+        return shouldActivateService(capabilities, serviceEnabled, capabilities.isPresent(linkedCapability),\n+                linkedCapability.getName(), configKey);\n+    }\n+\n+    private boolean shouldActivateService(Capabilities capabilities,\n+            Optional<Boolean> serviceEnabled,\n+            boolean linkedCapabilityIsPresent,\n+            String linkedCapabilityName,\n+            String configKey) {\n+\n+        if (serviceEnabled.isPresent()) {\n+            // The user explisitly asked from something\n+            boolean isEnabled = serviceEnabled.get();\n+            if (isEnabled) {\n+                if (linkedCapabilityIsPresent) {\n+                    // enable\n+                    return true;\n+                } else {\n+                    // Warn and disable\n+                    LOG.warnf(SERVICE_NOT_AVAILABLE_WARNING, configKey, linkedCapabilityName, linkedCapabilityName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c25332abfecab648867c25b15d2b2887742309b"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDgyNzg2OnYy", "diffSide": "RIGHT", "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMToyNzowOVrOHk3pHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjozOTo0MFrOHk6RGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyMjQzMA==", "bodyText": "Isn't Micrometer the extension that should be used for Metrics now? Not sure if it's supported by your GraphQL extension though?\n/cc @ebullient @jmartisk", "url": "https://github.com/quarkusio/quarkus/pull/12783#discussion_r508422430", "createdAt": "2020-10-20T11:27:09Z", "author": {"login": "gsmet"}, "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java", "diffHunk": "@@ -341,6 +313,106 @@ void openTracingIntegration(Capabilities capabilities,\n         return classes;\n     }\n \n+    // Services Integrations\n+\n+    @BuildStep\n+    void activateMetrics(Capabilities capabilities,\n+            Optional<MetricsCapabilityBuildItem> metricsCapability,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties,\n+            BuildProducer<UnremovableBeanBuildItem> unremovableBeans) {\n+\n+        boolean activate = shouldActivateService(capabilities, quarkusConfig.metricsEnabled, metricsCapability.isPresent(),\n+                \"metrics\", \"quarkus.smallrye-graphql.metrics.enabled\");\n+        if (activate) {\n+            if (metricsCapability.isPresent() && metricsCapability.get().metricsSupported(MetricsFactory.MP_METRICS)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c25332abfecab648867c25b15d2b2887742309b"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ0NTA5NQ==", "bodyText": "there is an additional issue open to sort out graphql and metrics.. this will be revisited at that time.\n(edited: phone keyboards)", "url": "https://github.com/quarkusio/quarkus/pull/12783#discussion_r508445095", "createdAt": "2020-10-20T12:07:34Z", "author": {"login": "ebullient"}, "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java", "diffHunk": "@@ -341,6 +313,106 @@ void openTracingIntegration(Capabilities capabilities,\n         return classes;\n     }\n \n+    // Services Integrations\n+\n+    @BuildStep\n+    void activateMetrics(Capabilities capabilities,\n+            Optional<MetricsCapabilityBuildItem> metricsCapability,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties,\n+            BuildProducer<UnremovableBeanBuildItem> unremovableBeans) {\n+\n+        boolean activate = shouldActivateService(capabilities, quarkusConfig.metricsEnabled, metricsCapability.isPresent(),\n+                \"metrics\", \"quarkus.smallrye-graphql.metrics.enabled\");\n+        if (activate) {\n+            if (metricsCapability.isPresent() && metricsCapability.get().metricsSupported(MetricsFactory.MP_METRICS)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyMjQzMA=="}, "originalCommit": {"oid": "6c25332abfecab648867c25b15d2b2887742309b"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2NTQzNA==", "bodyText": "I am leaving the Metrics as is, and we can do a new PR (@jmartisk can help) to update to the micrometer.", "url": "https://github.com/quarkusio/quarkus/pull/12783#discussion_r508465434", "createdAt": "2020-10-20T12:39:40Z", "author": {"login": "phillip-kruger"}, "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java", "diffHunk": "@@ -341,6 +313,106 @@ void openTracingIntegration(Capabilities capabilities,\n         return classes;\n     }\n \n+    // Services Integrations\n+\n+    @BuildStep\n+    void activateMetrics(Capabilities capabilities,\n+            Optional<MetricsCapabilityBuildItem> metricsCapability,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties,\n+            BuildProducer<UnremovableBeanBuildItem> unremovableBeans) {\n+\n+        boolean activate = shouldActivateService(capabilities, quarkusConfig.metricsEnabled, metricsCapability.isPresent(),\n+                \"metrics\", \"quarkus.smallrye-graphql.metrics.enabled\");\n+        if (activate) {\n+            if (metricsCapability.isPresent() && metricsCapability.get().metricsSupported(MetricsFactory.MP_METRICS)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyMjQzMA=="}, "originalCommit": {"oid": "6c25332abfecab648867c25b15d2b2887742309b"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDgyOTAwOnYy", "diffSide": "RIGHT", "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMToyNzoyNVrOHk3pxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMToyNzoyNVrOHk3pxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyMjU5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Enable validation. By default this will be enabled if the bean validation extension is added.\n          \n          \n            \n                 * Enable validation. By default this will be enabled if the Hibernate Validator extension is added.", "url": "https://github.com/quarkusio/quarkus/pull/12783#discussion_r508422598", "createdAt": "2020-10-20T11:27:25Z", "author": {"login": "gsmet"}, "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLConfig.java", "diffHunk": "@@ -15,10 +17,28 @@\n     String rootPath;\n \n     /**\n-     * Enable metrics\n+     * Enable metrics. By default this will be enabled if the metrics extension is added.\n+     */\n+    @ConfigItem(name = \"metrics.enabled\")\n+    Optional<Boolean> metricsEnabled;\n+\n+    /**\n+     * Enable tracing. By default this will be enabled if the tracing extension is added.\n+     */\n+    @ConfigItem(name = \"tracing.enabled\")\n+    Optional<Boolean> tracingEnabled;\n+\n+    /**\n+     * Enable validation. By default this will be enabled if the bean validation extension is added.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c25332abfecab648867c25b15d2b2887742309b"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjQ5OTgzOnYy", "diffSide": "RIGHT", "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjo1OTo1NFrOHlIHqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjo1OTo1NFrOHlIHqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5MjM5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // The user explisitly asked from something\n          \n          \n            \n                        // The user explicitly asked from something", "url": "https://github.com/quarkusio/quarkus/pull/12783#discussion_r508692393", "createdAt": "2020-10-20T16:59:54Z", "author": {"login": "gastaldi"}, "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java", "diffHunk": "@@ -341,6 +313,118 @@ void openTracingIntegration(Capabilities capabilities,\n         return classes;\n     }\n \n+    // Services Integrations\n+\n+    @BuildStep\n+    void activateMetrics(Capabilities capabilities,\n+            Optional<MetricsCapabilityBuildItem> metricsCapability,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties,\n+            BuildProducer<UnremovableBeanBuildItem> unremovableBeans) {\n+\n+        boolean activate = shouldActivateService(capabilities,\n+                quarkusConfig.metricsEnabled,\n+                metricsCapability.isPresent(),\n+                \"quarkus-smallrye-metrics\",\n+                \"metrics\",\n+                \"quarkus.smallrye-graphql.metrics.enabled\");\n+        if (activate) {\n+            if (metricsCapability.isPresent() && metricsCapability.get().metricsSupported(MetricsFactory.MP_METRICS)) {\n+                unremovableBeans.produce(UnremovableBeanBuildItem.beanClassNames(\"io.smallrye.metrics.MetricRegistries\"));\n+            }\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_METRICS, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_METRICS, FALSE));\n+        }\n+    }\n+\n+    @BuildStep\n+    void activateTracing(Capabilities capabilities,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties) {\n+\n+        boolean activate = shouldActivateService(capabilities,\n+                quarkusConfig.tracingEnabled,\n+                \"quarkus-smallrye-opentracing\",\n+                Capability.OPENTRACING,\n+                \"quarkus.smallrye-graphql.tracing.enabled\");\n+        if (activate) {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_TRACING, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_TRACING, FALSE));\n+        }\n+    }\n+\n+    @BuildStep\n+    void activateValidation(Capabilities capabilities,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties) {\n+\n+        boolean activate = shouldActivateService(capabilities,\n+                quarkusConfig.validationEnabled,\n+                \"quarkus-hibernate-validator\",\n+                Capability.HIBERNATE_VALIDATOR,\n+                \"quarkus.smallrye-graphql.validation.enabled\");\n+        if (activate) {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_VALIDATION, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_VALIDATION, FALSE));\n+        }\n+    }\n+\n+    @BuildStep\n+    void activateEventing(BuildProducer<SystemPropertyBuildItem> systemProperties) {\n+        if (quarkusConfig.eventsEnabled) {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_EVENTS, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_EVENTS, FALSE));\n+        }\n+    }\n+\n+    private boolean shouldActivateService(Capabilities capabilities,\n+            Optional<Boolean> serviceEnabled,\n+            String linkedExtensionName,\n+            Capability linkedCapability,\n+            String configKey) {\n+\n+        return shouldActivateService(capabilities, serviceEnabled, capabilities.isPresent(linkedCapability),\n+                linkedExtensionName, linkedCapability.getName(), configKey);\n+    }\n+\n+    private boolean shouldActivateService(Capabilities capabilities,\n+            Optional<Boolean> serviceEnabled,\n+            boolean linkedCapabilityIsPresent,\n+            String linkedExtensionName,\n+            String linkedCapabilityName,\n+            String configKey) {\n+\n+        if (serviceEnabled.isPresent()) {\n+            // The user explisitly asked from something", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e2167e97a0a5873c7816e5ab7ee0827be5fa76e"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjUxMDYyOnYy", "diffSide": "RIGHT", "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzowMjo0NVrOHlIOdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzowMjo0NVrOHlIOdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5NDEzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (isEnabled) {\n          \n          \n            \n                            if (linkedCapabilityIsPresent) {\n          \n          \n            \n                                // enable\n          \n          \n            \n                                return true;\n          \n          \n            \n                            } else {\n          \n          \n            \n                                // Warn and disable\n          \n          \n            \n                                LOG.warnf(SERVICE_NOT_AVAILABLE_WARNING, configKey, linkedExtensionName, linkedCapabilityName);\n          \n          \n            \n                                return false;\n          \n          \n            \n                            }\n          \n          \n            \n                        } else {\n          \n          \n            \n                            // disable\n          \n          \n            \n                            return false;\n          \n          \n            \n                        }\n          \n          \n            \n                    } else {\n          \n          \n            \n                        // Auto dis/enable\n          \n          \n            \n                        if (linkedCapabilityIsPresent) {\n          \n          \n            \n                            // enable\n          \n          \n            \n                            return true;\n          \n          \n            \n                        } else {\n          \n          \n            \n                            // disable\n          \n          \n            \n                            return false;\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                        if (isEnabled && !linkedCapabilityIsPresent) {\n          \n          \n            \n                        \t // Warn and disable\n          \n          \n            \n                                LOG.warnf(SERVICE_NOT_AVAILABLE_WARNING, configKey, linkedExtensionName, linkedCapabilityName);\n          \n          \n            \n                        }\n          \n          \n            \n                        return (isEnabled && linkedCapabilityIsPresent);\n          \n          \n            \n                    } else {\n          \n          \n            \n                       return linkedCapabilityIsPresent;", "url": "https://github.com/quarkusio/quarkus/pull/12783#discussion_r508694134", "createdAt": "2020-10-20T17:02:45Z", "author": {"login": "gastaldi"}, "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java", "diffHunk": "@@ -341,6 +313,118 @@ void openTracingIntegration(Capabilities capabilities,\n         return classes;\n     }\n \n+    // Services Integrations\n+\n+    @BuildStep\n+    void activateMetrics(Capabilities capabilities,\n+            Optional<MetricsCapabilityBuildItem> metricsCapability,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties,\n+            BuildProducer<UnremovableBeanBuildItem> unremovableBeans) {\n+\n+        boolean activate = shouldActivateService(capabilities,\n+                quarkusConfig.metricsEnabled,\n+                metricsCapability.isPresent(),\n+                \"quarkus-smallrye-metrics\",\n+                \"metrics\",\n+                \"quarkus.smallrye-graphql.metrics.enabled\");\n+        if (activate) {\n+            if (metricsCapability.isPresent() && metricsCapability.get().metricsSupported(MetricsFactory.MP_METRICS)) {\n+                unremovableBeans.produce(UnremovableBeanBuildItem.beanClassNames(\"io.smallrye.metrics.MetricRegistries\"));\n+            }\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_METRICS, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_METRICS, FALSE));\n+        }\n+    }\n+\n+    @BuildStep\n+    void activateTracing(Capabilities capabilities,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties) {\n+\n+        boolean activate = shouldActivateService(capabilities,\n+                quarkusConfig.tracingEnabled,\n+                \"quarkus-smallrye-opentracing\",\n+                Capability.OPENTRACING,\n+                \"quarkus.smallrye-graphql.tracing.enabled\");\n+        if (activate) {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_TRACING, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_TRACING, FALSE));\n+        }\n+    }\n+\n+    @BuildStep\n+    void activateValidation(Capabilities capabilities,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties) {\n+\n+        boolean activate = shouldActivateService(capabilities,\n+                quarkusConfig.validationEnabled,\n+                \"quarkus-hibernate-validator\",\n+                Capability.HIBERNATE_VALIDATOR,\n+                \"quarkus.smallrye-graphql.validation.enabled\");\n+        if (activate) {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_VALIDATION, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_VALIDATION, FALSE));\n+        }\n+    }\n+\n+    @BuildStep\n+    void activateEventing(BuildProducer<SystemPropertyBuildItem> systemProperties) {\n+        if (quarkusConfig.eventsEnabled) {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_EVENTS, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_EVENTS, FALSE));\n+        }\n+    }\n+\n+    private boolean shouldActivateService(Capabilities capabilities,\n+            Optional<Boolean> serviceEnabled,\n+            String linkedExtensionName,\n+            Capability linkedCapability,\n+            String configKey) {\n+\n+        return shouldActivateService(capabilities, serviceEnabled, capabilities.isPresent(linkedCapability),\n+                linkedExtensionName, linkedCapability.getName(), configKey);\n+    }\n+\n+    private boolean shouldActivateService(Capabilities capabilities,\n+            Optional<Boolean> serviceEnabled,\n+            boolean linkedCapabilityIsPresent,\n+            String linkedExtensionName,\n+            String linkedCapabilityName,\n+            String configKey) {\n+\n+        if (serviceEnabled.isPresent()) {\n+            // The user explisitly asked from something\n+            boolean isEnabled = serviceEnabled.get();\n+            if (isEnabled) {\n+                if (linkedCapabilityIsPresent) {\n+                    // enable\n+                    return true;\n+                } else {\n+                    // Warn and disable\n+                    LOG.warnf(SERVICE_NOT_AVAILABLE_WARNING, configKey, linkedExtensionName, linkedCapabilityName);\n+                    return false;\n+                }\n+            } else {\n+                // disable\n+                return false;\n+            }\n+        } else {\n+            // Auto dis/enable\n+            if (linkedCapabilityIsPresent) {\n+                // enable\n+                return true;\n+            } else {\n+                // disable\n+                return false;\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e2167e97a0a5873c7816e5ab7ee0827be5fa76e"}, "originalPosition": 170}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4159, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}