{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwMDk1Mzky", "number": 11908, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjowNzo0OFrOEgiPRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDo0MDoxM1rOEkeWvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTUwODU0OnYy", "diffSide": "RIGHT", "path": "extensions/redis-client/deployment/src/main/java/io/quarkus/redis/client/deployment/RedisClientProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjowNzo0OFrOHNcrDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMzoyNDoyMFrOHNdpEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2MzMwOA==", "bodyText": "The one two lines above is called Api not API. Could we be consistent?", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r483863308", "createdAt": "2020-09-04T22:07:48Z", "author": {"login": "gsmet"}, "path": "extensions/redis-client/deployment/src/main/java/io/quarkus/redis/client/deployment/RedisClientProcessor.java", "diffHunk": "@@ -39,4 +72,101 @@ HealthBuildItem addHealthCheck(RedisBuildTimeConfig buildTimeConfig) {\n     RuntimeInitializedClassBuildItem initializeBulkTypeDuringRuntime() {\n         return new RuntimeInitializedClassBuildItem(BulkType.class.getName());\n     }\n+\n+    @BuildStep\n+    @Record(ExecutionTime.RUNTIME_INIT)\n+    public void produceRedisClient(RedisClientRecorder recorder, ApplicationArchivesBuildItem applicationArchives,\n+            BuildProducer<SyntheticBeanBuildItem> syntheticBeans,\n+            VertxBuildItem vertxBuildItem) {\n+        Set<String> clientNames = new HashSet<>();\n+        clientNames.add(RedisClientUtil.DEFAULT_CLIENT);\n+\n+        IndexView indexView = applicationArchives.getRootArchive().getIndex();\n+        Collection<AnnotationInstance> clientAnnotations = indexView.getAnnotations(REDIS_CLIENT_ANNOTATION);\n+        for (AnnotationInstance annotation : clientAnnotations) {\n+            clientNames.add(annotation.value().asString());\n+        }\n+\n+        for (String clientName : clientNames) {\n+            syntheticBeans.produce(createBlockingSyntheticBean(recorder, clientName));\n+            syntheticBeans.produce(createReactiveSyntheticBean(recorder, clientName));\n+            syntheticBeans.produce(createMutinyRedisApiSyntheticBean(recorder, clientName));\n+            syntheticBeans.produce(createMutinyRedisClientSyntheticBean(recorder, clientName));\n+            syntheticBeans.produce(createVertxRedisAPISyntheticBean(recorder, clientName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6851f756c4e11866dd66220ebcc90ab46da78bb3"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3OTE4NA==", "bodyText": "Good point, thanks for spotting this. I had this mixed up all over the codebase and I've applied some clean up.", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r483879184", "createdAt": "2020-09-04T23:24:20Z", "author": {"login": "machi1990"}, "path": "extensions/redis-client/deployment/src/main/java/io/quarkus/redis/client/deployment/RedisClientProcessor.java", "diffHunk": "@@ -39,4 +72,101 @@ HealthBuildItem addHealthCheck(RedisBuildTimeConfig buildTimeConfig) {\n     RuntimeInitializedClassBuildItem initializeBulkTypeDuringRuntime() {\n         return new RuntimeInitializedClassBuildItem(BulkType.class.getName());\n     }\n+\n+    @BuildStep\n+    @Record(ExecutionTime.RUNTIME_INIT)\n+    public void produceRedisClient(RedisClientRecorder recorder, ApplicationArchivesBuildItem applicationArchives,\n+            BuildProducer<SyntheticBeanBuildItem> syntheticBeans,\n+            VertxBuildItem vertxBuildItem) {\n+        Set<String> clientNames = new HashSet<>();\n+        clientNames.add(RedisClientUtil.DEFAULT_CLIENT);\n+\n+        IndexView indexView = applicationArchives.getRootArchive().getIndex();\n+        Collection<AnnotationInstance> clientAnnotations = indexView.getAnnotations(REDIS_CLIENT_ANNOTATION);\n+        for (AnnotationInstance annotation : clientAnnotations) {\n+            clientNames.add(annotation.value().asString());\n+        }\n+\n+        for (String clientName : clientNames) {\n+            syntheticBeans.produce(createBlockingSyntheticBean(recorder, clientName));\n+            syntheticBeans.produce(createReactiveSyntheticBean(recorder, clientName));\n+            syntheticBeans.produce(createMutinyRedisApiSyntheticBean(recorder, clientName));\n+            syntheticBeans.produce(createMutinyRedisClientSyntheticBean(recorder, clientName));\n+            syntheticBeans.produce(createVertxRedisAPISyntheticBean(recorder, clientName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2MzMwOA=="}, "originalCommit": {"oid": "6851f756c4e11866dd66220ebcc90ab46da78bb3"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODEyNzA1OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/redis.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNToyMzoxNVrOHSHS9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNToyMzoxNVrOHSHS9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc1NTk1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Redis allows you to configure multiple clients.\n          \n          \n            \n            The Redis extension allows you to configure multiple clients.\n          \n      \n    \n    \n  \n\nmaybe?", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r488755957", "createdAt": "2020-09-15T15:23:15Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/redis.adoc", "diffHunk": "@@ -544,6 +544,40 @@ So when you access the `/health/ready` endpoint of your application you will hav\n \n This behavior can be disabled by setting the `quarkus.redis.health.enabled` property to `false` in your `application.properties`.\n \n+== Multiple Redis Clients\n+\n+Redis allows you to configure multiple clients.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8152dac3ba2bd37cc6974fcef1dd748f97c72e88"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODEzMTcxOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/redis.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNToyNDoxM1rOHSHVyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMToxOTozMlrOHSU7tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc1NjY4Mw==", "bodyText": "There's something weird with this sentence, isn't it? The each RedisClient part sounds weird.", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r488756683", "createdAt": "2020-09-15T15:24:13Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/redis.adoc", "diffHunk": "@@ -544,6 +544,40 @@ So when you access the `/health/ready` endpoint of your application you will hav\n \n This behavior can be disabled by setting the `quarkus.redis.health.enabled` property to `false` in your `application.properties`.\n \n+== Multiple Redis Clients\n+\n+Redis allows you to configure multiple clients.\n+Using several clients works the same way as having a single client.\n+\n+[source,properties]\n+----\n+quarkus.redis.hosts = localhost:6379\n+quarkus.redis.second.hosts = localhost:6379\n+----\n+\n+Notice there's an extra bit in the key (the `second` segment).\n+The syntax is as follows: `quarkus.redis.[optional name.][redis configuration property]`.\n+If the name is omitted, it configures the default client.\n+\n+=== Named Redis client Injection\n+\n+When using multiple clients, each `RedisClient`, you can select the client to inject using the `io.quarkus.redis.client.RedisClientName` qualifier.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8152dac3ba2bd37cc6974fcef1dd748f97c72e88"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk3OTM4MQ==", "bodyText": "Yeap. That part should not be there.", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r488979381", "createdAt": "2020-09-15T21:19:32Z", "author": {"login": "machi1990"}, "path": "docs/src/main/asciidoc/redis.adoc", "diffHunk": "@@ -544,6 +544,40 @@ So when you access the `/health/ready` endpoint of your application you will hav\n \n This behavior can be disabled by setting the `quarkus.redis.health.enabled` property to `false` in your `application.properties`.\n \n+== Multiple Redis Clients\n+\n+Redis allows you to configure multiple clients.\n+Using several clients works the same way as having a single client.\n+\n+[source,properties]\n+----\n+quarkus.redis.hosts = localhost:6379\n+quarkus.redis.second.hosts = localhost:6379\n+----\n+\n+Notice there's an extra bit in the key (the `second` segment).\n+The syntax is as follows: `quarkus.redis.[optional name.][redis configuration property]`.\n+If the name is omitted, it configures the default client.\n+\n+=== Named Redis client Injection\n+\n+When using multiple clients, each `RedisClient`, you can select the client to inject using the `io.quarkus.redis.client.RedisClientName` qualifier.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc1NjY4Mw=="}, "originalCommit": {"oid": "8152dac3ba2bd37cc6974fcef1dd748f97c72e88"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODIwODI3OnYy", "diffSide": "RIGHT", "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTo0MDozNFrOHSIEvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTo0MDozNFrOHSIEvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc2ODcwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Marker annotation to select redis client\n          \n          \n            \n             * Marker annotation to select the Redis client.", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r488768701", "createdAt": "2020-09-15T15:40:34Z", "author": {"login": "gsmet"}, "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package io.quarkus.redis.client;\n+\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import javax.inject.Qualifier;\n+\n+/**\n+ * Marker annotation to select redis client", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8152dac3ba2bd37cc6974fcef1dd748f97c72e88"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODIwOTcwOnYy", "diffSide": "RIGHT", "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTo0MDo1MVrOHSIFkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTo0MDo1MVrOHSIFkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc2ODkxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * For example, if a redis connection is configured like so in {@code application.properties}:\n          \n          \n            \n             * For example, if a Redis connection is configured like so in {@code application.properties}:", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r488768915", "createdAt": "2020-09-15T15:40:51Z", "author": {"login": "gsmet"}, "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package io.quarkus.redis.client;\n+\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import javax.inject.Qualifier;\n+\n+/**\n+ * Marker annotation to select redis client\n+ * Use name parameter to select it\n+ *\n+ * For example, if a redis connection is configured like so in {@code application.properties}:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8152dac3ba2bd37cc6974fcef1dd748f97c72e88"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODIxMTUyOnYy", "diffSide": "RIGHT", "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTo0MToxM1rOHSIGog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTo0MToxM1rOHSIGog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc2OTE4Ng==", "bodyText": "Let's just drop this sentence, it's just noise.", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r488769186", "createdAt": "2020-09-15T15:41:13Z", "author": {"login": "gsmet"}, "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package io.quarkus.redis.client;\n+\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import javax.inject.Qualifier;\n+\n+/**\n+ * Marker annotation to select redis client\n+ * Use name parameter to select it", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8152dac3ba2bd37cc6974fcef1dd748f97c72e88"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODIyMDI1OnYy", "diffSide": "RIGHT", "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisClientUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTo0MzowMlrOHSIL4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMToyMTozMVrOHSU_Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc3MDUyOQ==", "bodyText": "In the other extensions, we call it <default>.", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r488770529", "createdAt": "2020-09-15T15:43:02Z", "author": {"login": "gsmet"}, "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisClientUtil.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package io.quarkus.redis.client.runtime;\n+\n+import java.net.URI;\n+import java.util.Set;\n+\n+import io.quarkus.redis.client.runtime.RedisConfig.RedisConfiguration;\n+import io.quarkus.runtime.configuration.ConfigurationException;\n+import io.vertx.redis.client.RedisClientType;\n+import io.vertx.redis.client.RedisOptions;\n+\n+public class RedisClientUtil {\n+    public static final String DEFAULT_CLIENT = \"__redis_default_client__\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8152dac3ba2bd37cc6974fcef1dd748f97c72e88"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4MDIzMA==", "bodyText": "Sure, let's be consistent here too. I'll change it.", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r488980230", "createdAt": "2020-09-15T21:21:31Z", "author": {"login": "machi1990"}, "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisClientUtil.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package io.quarkus.redis.client.runtime;\n+\n+import java.net.URI;\n+import java.util.Set;\n+\n+import io.quarkus.redis.client.runtime.RedisConfig.RedisConfiguration;\n+import io.quarkus.runtime.configuration.ConfigurationException;\n+import io.vertx.redis.client.RedisClientType;\n+import io.vertx.redis.client.RedisOptions;\n+\n+public class RedisClientUtil {\n+    public static final String DEFAULT_CLIENT = \"__redis_default_client__\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc3MDUyOQ=="}, "originalCommit": {"oid": "8152dac3ba2bd37cc6974fcef1dd748f97c72e88"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODIyNDE0OnYy", "diffSide": "RIGHT", "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTo0Mzo0NVrOHSIONA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTo0Mzo0NVrOHSIONA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc3MTEyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Configures additional redis client connections.\n          \n          \n            \n                 * Configures additional Redis client connections.", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r488771124", "createdAt": "2020-09-15T15:43:45Z", "author": {"login": "gsmet"}, "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisConfig.java", "diffHunk": "@@ -1,77 +1,136 @@\n package io.quarkus.redis.client.runtime;\n \n-import java.net.InetSocketAddress;\n+import java.net.URI;\n import java.time.Duration;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n \n+import io.quarkus.runtime.annotations.ConfigGroup;\n import io.quarkus.runtime.annotations.ConfigItem;\n import io.quarkus.runtime.annotations.ConfigPhase;\n import io.quarkus.runtime.annotations.ConfigRoot;\n import io.vertx.redis.client.RedisClientType;\n+import io.vertx.redis.client.RedisRole;\n+import io.vertx.redis.client.RedisSlaves;\n \n @ConfigRoot(phase = ConfigPhase.RUN_TIME)\n public class RedisConfig {\n \n     /**\n-     * The redis password\n+     * The default redis client\n      */\n-    @ConfigItem\n-    public Optional<String> password;\n+    @ConfigItem(name = ConfigItem.PARENT)\n+    public RedisConfiguration defaultClient;\n \n     /**\n-     * The redis hosts\n+     * Configures additional redis client connections.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8152dac3ba2bd37cc6974fcef1dd748f97c72e88"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODIzMTc5OnYy", "diffSide": "RIGHT", "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTo0NToxOFrOHSISsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMToyNDo0OVrOHSVFCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc3MjI3Mg==", "bodyText": "Was it copy/pasted from elsewhere? All this Javadoc block could use some rework.", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r488772272", "createdAt": "2020-09-15T15:45:18Z", "author": {"login": "gsmet"}, "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisConfig.java", "diffHunk": "@@ -1,77 +1,136 @@\n package io.quarkus.redis.client.runtime;\n \n-import java.net.InetSocketAddress;\n+import java.net.URI;\n import java.time.Duration;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n \n+import io.quarkus.runtime.annotations.ConfigGroup;\n import io.quarkus.runtime.annotations.ConfigItem;\n import io.quarkus.runtime.annotations.ConfigPhase;\n import io.quarkus.runtime.annotations.ConfigRoot;\n import io.vertx.redis.client.RedisClientType;\n+import io.vertx.redis.client.RedisRole;\n+import io.vertx.redis.client.RedisSlaves;\n \n @ConfigRoot(phase = ConfigPhase.RUN_TIME)\n public class RedisConfig {\n \n     /**\n-     * The redis password\n+     * The default redis client\n      */\n-    @ConfigItem\n-    public Optional<String> password;\n+    @ConfigItem(name = ConfigItem.PARENT)\n+    public RedisConfiguration defaultClient;\n \n     /**\n-     * The redis hosts\n+     * Configures additional redis client connections.\n+     * <p>\n+     * each client have a unique identifier witch must be identified to select the right connection.\n+     * example:\n+     * <p>\n+     *\n+     * <pre>\n+     * quarkus.redis.client1.hosts = redis://localhost:6379\n+     * quarkus.redis.client2.hosts = redis://localhost:6380\n+     * </pre>\n+     * <p>\n+     * And then use annotations above the instances of RedisClient to indicate which instance we are going to use\n+     * <p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8152dac3ba2bd37cc6974fcef1dd748f97c72e88"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4MTc3MA==", "bodyText": "I'll push some updates. Let me know what you think.", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r488981770", "createdAt": "2020-09-15T21:24:49Z", "author": {"login": "machi1990"}, "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisConfig.java", "diffHunk": "@@ -1,77 +1,136 @@\n package io.quarkus.redis.client.runtime;\n \n-import java.net.InetSocketAddress;\n+import java.net.URI;\n import java.time.Duration;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n \n+import io.quarkus.runtime.annotations.ConfigGroup;\n import io.quarkus.runtime.annotations.ConfigItem;\n import io.quarkus.runtime.annotations.ConfigPhase;\n import io.quarkus.runtime.annotations.ConfigRoot;\n import io.vertx.redis.client.RedisClientType;\n+import io.vertx.redis.client.RedisRole;\n+import io.vertx.redis.client.RedisSlaves;\n \n @ConfigRoot(phase = ConfigPhase.RUN_TIME)\n public class RedisConfig {\n \n     /**\n-     * The redis password\n+     * The default redis client\n      */\n-    @ConfigItem\n-    public Optional<String> password;\n+    @ConfigItem(name = ConfigItem.PARENT)\n+    public RedisConfiguration defaultClient;\n \n     /**\n-     * The redis hosts\n+     * Configures additional redis client connections.\n+     * <p>\n+     * each client have a unique identifier witch must be identified to select the right connection.\n+     * example:\n+     * <p>\n+     *\n+     * <pre>\n+     * quarkus.redis.client1.hosts = redis://localhost:6379\n+     * quarkus.redis.client2.hosts = redis://localhost:6380\n+     * </pre>\n+     * <p>\n+     * And then use annotations above the instances of RedisClient to indicate which instance we are going to use\n+     * <p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc3MjI3Mg=="}, "originalCommit": {"oid": "8152dac3ba2bd37cc6974fcef1dd748f97c72e88"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjgwMjYzOnYy", "diffSide": "RIGHT", "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDozNjozN1rOHTb8RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDozNjozN1rOHTb8RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0Mjc4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Marker annotation to select the redis client\n          \n          \n            \n             * Marker annotation to select the Redis client.\n          \n      \n    \n    \n  \n\n(it's minor but this is public API so let's get it right)", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r490142789", "createdAt": "2020-09-17T10:36:37Z", "author": {"login": "gsmet"}, "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.redis.client;\n+\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import javax.inject.Qualifier;\n+\n+/**\n+ * Marker annotation to select the redis client", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5086d58e174b666d6152f24a7a43fea3f4bc8842"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjgwMzY4OnYy", "diffSide": "RIGHT", "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDozNjo1M1rOHTb83g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDozNjo1M1rOHTb83g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0Mjk0Mg==", "bodyText": "Let's drop this.", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r490142942", "createdAt": "2020-09-17T10:36:53Z", "author": {"login": "gsmet"}, "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.redis.client;\n+\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import javax.inject.Qualifier;\n+\n+/**\n+ * Marker annotation to select the redis client\n+ *\n+ * For example, if the Redis connection is configured like so in {@code application.properties}:\n+ *\n+ * <pre>\n+ * quarkus.redis.client1.hosts=localhost:6379\n+ * </pre>\n+ *\n+ * Then to inject the proper {@code redisClient}, you would need to use {@code RedisClientName} like indicated below:\n+ *\n+ * <pre>\n+ *     &#64Inject\n+ *     &#64RedisClientName(\"client1\")\n+ *     RedisClient client;\n+ * </pre>\n+ */\n+@Target({ ElementType.TYPE, ElementType.METHOD, ElementType.FIELD })\n+@Retention(RUNTIME)\n+@Documented\n+@Qualifier\n+public @interface RedisClientName {\n+    /**\n+     * Specify the cluster name of the connection.\n+     *\n+     * @return the value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5086d58e174b666d6152f24a7a43fea3f4bc8842"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjgwNDgyOnYy", "diffSide": "RIGHT", "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDozNzoxNFrOHTb9lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDozNzoxNFrOHTb9lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0MzEyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Specify the cluster name of the connection.\n          \n          \n            \n                 * The Redis client name.", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r490143126", "createdAt": "2020-09-17T10:37:14Z", "author": {"login": "gsmet"}, "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/RedisClientName.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.redis.client;\n+\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import javax.inject.Qualifier;\n+\n+/**\n+ * Marker annotation to select the redis client\n+ *\n+ * For example, if the Redis connection is configured like so in {@code application.properties}:\n+ *\n+ * <pre>\n+ * quarkus.redis.client1.hosts=localhost:6379\n+ * </pre>\n+ *\n+ * Then to inject the proper {@code redisClient}, you would need to use {@code RedisClientName} like indicated below:\n+ *\n+ * <pre>\n+ *     &#64Inject\n+ *     &#64RedisClientName(\"client1\")\n+ *     RedisClient client;\n+ * </pre>\n+ */\n+@Target({ ElementType.TYPE, ElementType.METHOD, ElementType.FIELD })\n+@Retention(RUNTIME)\n+@Documented\n+@Qualifier\n+public @interface RedisClientName {\n+    /**\n+     * Specify the cluster name of the connection.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5086d58e174b666d6152f24a7a43fea3f4bc8842"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjgwNzIwOnYy", "diffSide": "RIGHT", "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDozNzo1M1rOHTb_Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDozNzo1M1rOHTb_Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0MzQ5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Each client have a unique identifier which must be identified to select the right connection.\n          \n          \n            \n                 * Each client has a unique identifier which must be identified to select the right connection.", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r490143495", "createdAt": "2020-09-17T10:37:53Z", "author": {"login": "gsmet"}, "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisConfig.java", "diffHunk": "@@ -1,77 +1,140 @@\n package io.quarkus.redis.client.runtime;\n \n-import java.net.InetSocketAddress;\n+import java.net.URI;\n import java.time.Duration;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n \n+import io.quarkus.redis.client.RedisClient;\n+import io.quarkus.redis.client.RedisClientName;\n+import io.quarkus.runtime.annotations.ConfigGroup;\n import io.quarkus.runtime.annotations.ConfigItem;\n import io.quarkus.runtime.annotations.ConfigPhase;\n import io.quarkus.runtime.annotations.ConfigRoot;\n import io.vertx.redis.client.RedisClientType;\n+import io.vertx.redis.client.RedisRole;\n+import io.vertx.redis.client.RedisSlaves;\n \n @ConfigRoot(phase = ConfigPhase.RUN_TIME)\n public class RedisConfig {\n \n     /**\n-     * The redis password\n+     * The default redis client\n      */\n-    @ConfigItem\n-    public Optional<String> password;\n+    @ConfigItem(name = ConfigItem.PARENT)\n+    public RedisConfiguration defaultClient;\n \n     /**\n-     * The redis hosts\n+     * Configures additional Redis client connections.\n+     * <p>\n+     * Each client have a unique identifier which must be identified to select the right connection.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5086d58e174b666d6152f24a7a43fea3f4bc8842"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjgxMDY3OnYy", "diffSide": "RIGHT", "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDozODo1MlrOHTcBDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDozODo1MlrOHTcBDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0NDAxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * And then use the {@link RedisClientName} to select the {@link RedisClient} or\n          \n          \n            \n                 * {@link io.quarkus.redis.client.reactive.ReactiveRedisClient}\n          \n          \n            \n                 * we are going to use.\n          \n          \n            \n                 * And then use the {@link RedisClientName} annotation to select the {@link RedisClient} or\n          \n          \n            \n                 * {@link io.quarkus.redis.client.reactive.ReactiveRedisClient}.", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r490144012", "createdAt": "2020-09-17T10:38:52Z", "author": {"login": "gsmet"}, "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisConfig.java", "diffHunk": "@@ -1,77 +1,140 @@\n package io.quarkus.redis.client.runtime;\n \n-import java.net.InetSocketAddress;\n+import java.net.URI;\n import java.time.Duration;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n \n+import io.quarkus.redis.client.RedisClient;\n+import io.quarkus.redis.client.RedisClientName;\n+import io.quarkus.runtime.annotations.ConfigGroup;\n import io.quarkus.runtime.annotations.ConfigItem;\n import io.quarkus.runtime.annotations.ConfigPhase;\n import io.quarkus.runtime.annotations.ConfigRoot;\n import io.vertx.redis.client.RedisClientType;\n+import io.vertx.redis.client.RedisRole;\n+import io.vertx.redis.client.RedisSlaves;\n \n @ConfigRoot(phase = ConfigPhase.RUN_TIME)\n public class RedisConfig {\n \n     /**\n-     * The redis password\n+     * The default redis client\n      */\n-    @ConfigItem\n-    public Optional<String> password;\n+    @ConfigItem(name = ConfigItem.PARENT)\n+    public RedisConfiguration defaultClient;\n \n     /**\n-     * The redis hosts\n+     * Configures additional Redis client connections.\n+     * <p>\n+     * Each client have a unique identifier which must be identified to select the right connection.\n+     * For example:\n+     * <p>\n+     *\n+     * <pre>\n+     * quarkus.redis.client1.hosts = redis://localhost:6379\n+     * quarkus.redis.client2.hosts = redis://localhost:6380\n+     * </pre>\n+     * <p>\n+     * And then use the {@link RedisClientName} to select the {@link RedisClient} or\n+     * {@link io.quarkus.redis.client.reactive.ReactiveRedisClient}\n+     * we are going to use.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5086d58e174b666d6152f24a7a43fea3f4bc8842"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjgxNTM1OnYy", "diffSide": "RIGHT", "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisAPIProducer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDo0MDoxM1rOHTcD2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMjoxNjozOFrOHTfO9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0NDczMQ==", "bodyText": "Is there a reason why we are not being consistent and use the synthetic bean pattern for this too?", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r490144731", "createdAt": "2020-09-17T10:40:13Z", "author": {"login": "gsmet"}, "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisAPIProducer.java", "diffHunk": "@@ -1,137 +1,55 @@\n package io.quarkus.redis.client.runtime;\n \n-import java.net.InetSocketAddress;\n-import java.util.Set;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n \n import javax.annotation.PreDestroy;\n-import javax.enterprise.context.ApplicationScoped;\n-import javax.enterprise.inject.Produces;\n \n import io.quarkus.redis.client.RedisClient;\n import io.quarkus.redis.client.reactive.ReactiveRedisClient;\n-import io.quarkus.runtime.configuration.ConfigurationException;\n import io.vertx.core.Vertx;\n import io.vertx.redis.client.Redis;\n import io.vertx.redis.client.RedisAPI;\n-import io.vertx.redis.client.RedisClientType;\n import io.vertx.redis.client.RedisOptions;\n \n class RedisAPIProducer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5086d58e174b666d6152f24a7a43fea3f4bc8842"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE3NTIwNw==", "bodyText": "You mean drop this build item  \n  \n    \n      quarkus/extensions/redis-client/deployment/src/main/java/io/quarkus/redis/client/deployment/RedisClientProcessor.java\n    \n    \n        Lines 59 to 64\n      in\n      6a7ba55\n    \n    \n    \n    \n\n        \n          \n           AdditionalBeanBuildItem \n        \n\n        \n          \n                   .builder() \n        \n\n        \n          \n                   .addBeanClass(\"io.quarkus.redis.client.runtime.RedisAPIProducer\") \n        \n\n        \n          \n                   .setDefaultScope(SINGLETON.getName()) \n        \n\n        \n          \n                   .setUnremovable() \n        \n\n        \n          \n                   .build(), \n        \n    \n  \n\n  and use a synthetic bean instead?\nIf so, I saw no need of the synthetic bean for this one.", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r490175207", "createdAt": "2020-09-17T11:38:39Z", "author": {"login": "machi1990"}, "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisAPIProducer.java", "diffHunk": "@@ -1,137 +1,55 @@\n package io.quarkus.redis.client.runtime;\n \n-import java.net.InetSocketAddress;\n-import java.util.Set;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n \n import javax.annotation.PreDestroy;\n-import javax.enterprise.context.ApplicationScoped;\n-import javax.enterprise.inject.Produces;\n \n import io.quarkus.redis.client.RedisClient;\n import io.quarkus.redis.client.reactive.ReactiveRedisClient;\n-import io.quarkus.runtime.configuration.ConfigurationException;\n import io.vertx.core.Vertx;\n import io.vertx.redis.client.Redis;\n import io.vertx.redis.client.RedisAPI;\n-import io.vertx.redis.client.RedisClientType;\n import io.vertx.redis.client.RedisOptions;\n \n class RedisAPIProducer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0NDczMQ=="}, "originalCommit": {"oid": "5086d58e174b666d6152f24a7a43fea3f4bc8842"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE5NjcyNA==", "bodyText": "I was more referring to making the individual API instances beans and remove the producer altogether.\nBut maybe we don't want to expose them directly.\nLet's keep it this way for now and see how it goes.", "url": "https://github.com/quarkusio/quarkus/pull/11908#discussion_r490196724", "createdAt": "2020-09-17T12:16:38Z", "author": {"login": "gsmet"}, "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisAPIProducer.java", "diffHunk": "@@ -1,137 +1,55 @@\n package io.quarkus.redis.client.runtime;\n \n-import java.net.InetSocketAddress;\n-import java.util.Set;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n \n import javax.annotation.PreDestroy;\n-import javax.enterprise.context.ApplicationScoped;\n-import javax.enterprise.inject.Produces;\n \n import io.quarkus.redis.client.RedisClient;\n import io.quarkus.redis.client.reactive.ReactiveRedisClient;\n-import io.quarkus.runtime.configuration.ConfigurationException;\n import io.vertx.core.Vertx;\n import io.vertx.redis.client.Redis;\n import io.vertx.redis.client.RedisAPI;\n-import io.vertx.redis.client.RedisClientType;\n import io.vertx.redis.client.RedisOptions;\n \n class RedisAPIProducer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0NDczMQ=="}, "originalCommit": {"oid": "5086d58e174b666d6152f24a7a43fea3f4bc8842"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 350, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}