{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNjMzNDgy", "number": 7138, "title": "Gather and expose information about all known scopes before transforming annotations", "bodyText": "\u2026ing annotations.\nFixes #7076\nDoing this I realized that we already expose SCOPES within build extensions. However, this is of type ScopeInfo (whereas here we want DotName) and is created too late for annotation transformers to use that. So, I've created another Key that represents scopes as Collection<DotName>. That way we don't break backward compatibility with any usage of SCOPES.\nHowever, we still break compatibility with any existing custom scope definitions since ContextRegistrarBuildItem has an extra method. While I've fixed that for our own scopes (session and transactional), I highly doubt there are any other user defined custom scopes at this point as this feature was sparsely used even in pure CDI. And if they are, the fix is trivial.\nLet me know what you think @mkouba and I can adjust the PR accordingly.", "createdAt": "2020-02-11T12:32:47Z", "url": "https://github.com/quarkusio/quarkus/pull/7138", "merged": true, "mergeCommit": {"oid": "624860b4ecad1c3150610dd99b35dfcf4dc5cfe6"}, "closed": true, "closedAt": "2020-03-05T10:28:16Z", "author": {"login": "manovotn"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFfITnABqjMwNDY0OTEyMTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJtrmUgFqTM2NzE5Mzg1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "24f3aca72f7fb4f577cce5cc441a5bb7ea4010f5", "author": {"user": {"login": "manovotn", "name": "Matej Novotny"}}, "url": "https://github.com/quarkusio/quarkus/commit/24f3aca72f7fb4f577cce5cc441a5bb7ea4010f5", "committedDate": "2020-02-11T12:24:34Z", "message": "Gather and expose information about all known scopes before transforming annotations."}, "afterCommit": {"oid": "50447b176bcc324d0f40d9904e1af8545ebd9bd2", "author": {"user": {"login": "manovotn", "name": "Matej Novotny"}}, "url": "https://github.com/quarkusio/quarkus/commit/50447b176bcc324d0f40d9904e1af8545ebd9bd2", "committedDate": "2020-02-18T10:11:37Z", "message": "Gather and expose information about all known scopes before transforming annotations."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMjY2NzI3", "url": "https://github.com/quarkusio/quarkus/pull/7138#pullrequestreview-360266727", "createdAt": "2020-02-18T11:33:59Z", "commit": {"oid": "50447b176bcc324d0f40d9904e1af8545ebd9bd2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMTozMzo1OVrOFq_BTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMTo1NzozOVrOFq_qvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDYxNzAzOQ==", "bodyText": "I'm not so sure it was a good idea to add the annotation name to the ContextRegistrarBuildItem. In theory, you can use one ContextRegistrarBuildItem to register multiple contexts. It might make more sense to create a separate build item or to make it DotName[]...", "url": "https://github.com/quarkusio/quarkus/pull/7138#discussion_r380617039", "createdAt": "2020-02-18T11:33:59Z", "author": {"login": "mkouba"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/ContextRegistrarBuildItem.java", "diffHunk": "@@ -9,12 +11,18 @@\n public final class ContextRegistrarBuildItem extends MultiBuildItem {\n \n     private final ContextRegistrar contextRegistrar;\n+    private final DotName annotationName;\n \n-    public ContextRegistrarBuildItem(ContextRegistrar contextRegistrar) {\n+    public ContextRegistrarBuildItem(ContextRegistrar contextRegistrar, DotName annotationName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50447b176bcc324d0f40d9904e1af8545ebd9bd2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDYxNzI3OA==", "bodyText": "We should probably extract this method in a public util class.", "url": "https://github.com/quarkusio/quarkus/pull/7138#discussion_r380617278", "createdAt": "2020-02-18T11:34:35Z", "author": {"login": "mkouba"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/StartupBuildSteps.java", "diffHunk": "@@ -74,6 +76,15 @@ public void transform(TransformationContext context) {\n         });\n     }\n \n+    public static boolean isDeclaredOn(Collection<DotName> scopes, ClassInfo clazz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50447b176bcc324d0f40d9904e1af8545ebd9bd2"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDYyNjQ1MA==", "bodyText": "Also it would make sense to pass Class<? extends Annotation> and create a DotName  under the hood. Maybe we should create a a builder to avoid \"too many constructors hell\".", "url": "https://github.com/quarkusio/quarkus/pull/7138#discussion_r380626450", "createdAt": "2020-02-18T11:54:57Z", "author": {"login": "mkouba"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/ContextRegistrarBuildItem.java", "diffHunk": "@@ -9,12 +11,18 @@\n public final class ContextRegistrarBuildItem extends MultiBuildItem {\n \n     private final ContextRegistrar contextRegistrar;\n+    private final DotName annotationName;\n \n-    public ContextRegistrarBuildItem(ContextRegistrar contextRegistrar) {\n+    public ContextRegistrarBuildItem(ContextRegistrar contextRegistrar, DotName annotationName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDYxNzAzOQ=="}, "originalCommit": {"oid": "50447b176bcc324d0f40d9904e1af8545ebd9bd2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDYyNzY0NQ==", "bodyText": "I can see a little inconsistency here - build steps can simply inject the list of ContextRegistrarBuildItem, ie. Key.SCOPES_NAMES is not needed. However, regular ArC extensions have no way to register custom annotations and so Key.SCOPES_NAMES is not very useful outside quarkus.", "url": "https://github.com/quarkusio/quarkus/pull/7138#discussion_r380627645", "createdAt": "2020-02-18T11:57:39Z", "author": {"login": "mkouba"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/StartupBuildSteps.java", "diffHunk": "@@ -62,7 +64,7 @@ public boolean appliesTo(org.jboss.jandex.AnnotationTarget.Kind kind) {\n \n             @Override\n             public void transform(TransformationContext context) {\n-                if (context.isClass() && !BuiltinScope.isDeclaredOn(context.getTarget().asClass())) {\n+                if (context.isClass() && !isDeclaredOn(context.get(Key.SCOPES_NAMES), context.getTarget().asClass())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50447b176bcc324d0f40d9904e1af8545ebd9bd2"}, "originalPosition": 20}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "50447b176bcc324d0f40d9904e1af8545ebd9bd2", "author": {"user": {"login": "manovotn", "name": "Matej Novotny"}}, "url": "https://github.com/quarkusio/quarkus/commit/50447b176bcc324d0f40d9904e1af8545ebd9bd2", "committedDate": "2020-02-18T10:11:37Z", "message": "Gather and expose information about all known scopes before transforming annotations."}, "afterCommit": {"oid": "5c00e0ed2e370544e509ecdc866424d0f5275518", "author": {"user": {"login": "manovotn", "name": "Matej Novotny"}}, "url": "https://github.com/quarkusio/quarkus/commit/5c00e0ed2e370544e509ecdc866424d0f5275518", "committedDate": "2020-02-19T13:38:43Z", "message": "Gather and expose information about all known scopes before transforming annotations."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMjA5OTIx", "url": "https://github.com/quarkusio/quarkus/pull/7138#pullrequestreview-361209921", "createdAt": "2020-02-19T15:58:13Z", "commit": {"oid": "5c00e0ed2e370544e509ecdc866424d0f5275518"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNTo1ODoxNFrOFrs0qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNTo1ODoxNFrOFrs0qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM2NzQ2Ng==", "bodyText": "You could call the ContextRegistrarBuildItem(ContextRegistrar contextRegistrar, DotName... annotationsNames) constructor instead... something like:\nthis(contextRegistrar, annotationsClasses.stream().map(Class::getName).map(DotName::createSimple).toArray(DotName[]::new));", "url": "https://github.com/quarkusio/quarkus/pull/7138#discussion_r381367466", "createdAt": "2020-02-19T15:58:14Z", "author": {"login": "mkouba"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/ContextRegistrarBuildItem.java", "diffHunk": "@@ -1,20 +1,56 @@\n package io.quarkus.arc.deployment;\n \n+import java.lang.annotation.Annotation;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import org.jboss.jandex.DotName;\n+\n import io.quarkus.arc.processor.ContextRegistrar;\n import io.quarkus.builder.item.MultiBuildItem;\n \n /**\n- * Make it possible to register a custom CDI context.\n+ * Make it possible to register one or more custom CDI contexts.\n+ * If you are registering a new context, you should also pass in the annotation value into the constructor either in\n+ * {@link DotName} form, or as {@code Class<? extends Annotation>}.\n+ *\n+ * This information is then leveraged in {@link CustomScopeAnnotationsBuildItem} which allows consumers to browse\n+ * all known custom scoped within deployment even early in the build process.\n  */\n public final class ContextRegistrarBuildItem extends MultiBuildItem {\n \n     private final ContextRegistrar contextRegistrar;\n+    private final Collection<DotName> annotationNames;\n \n-    public ContextRegistrarBuildItem(ContextRegistrar contextRegistrar) {\n+    public ContextRegistrarBuildItem(ContextRegistrar contextRegistrar, DotName... annotationsNames) {\n         this.contextRegistrar = contextRegistrar;\n+        if (annotationsNames == null) {\n+            throw new IllegalArgumentException(\"Parameter annotationNames cannot be null!\");\n+        }\n+        Collection<DotName> names = new ArrayList<>(annotationsNames.length);\n+        for (DotName name : annotationsNames) {\n+            names.add(name);\n+        }\n+        this.annotationNames = names;\n+    }\n+\n+    public ContextRegistrarBuildItem(ContextRegistrar contextRegistrar, Class<? extends Annotation>... annotationsClasses) {\n+        this.contextRegistrar = contextRegistrar;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c00e0ed2e370544e509ecdc866424d0f5275518"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMjEwOTMw", "url": "https://github.com/quarkusio/quarkus/pull/7138#pullrequestreview-361210930", "createdAt": "2020-02-19T15:59:07Z", "commit": {"oid": "5c00e0ed2e370544e509ecdc866424d0f5275518"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNTo1OTowN1rOFrs3UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNTo1OTowN1rOFrs3UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM2ODE0NQ==", "bodyText": "I'd probably use the javabean convention here, ie. getCustomScopeNames().", "url": "https://github.com/quarkusio/quarkus/pull/7138#discussion_r381368145", "createdAt": "2020-02-19T15:59:07Z", "author": {"login": "mkouba"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/CustomScopeAnnotationsBuildItem.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package io.quarkus.arc.deployment;\n+\n+import java.util.Collection;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+\n+import io.quarkus.arc.processor.BuiltinScope;\n+import io.quarkus.builder.item.SimpleBuildItem;\n+\n+/**\n+ * Holds information about all known custom scopes in the deployment and has utility methods allowing to check\n+ * whether given class has some scope annotation.\n+ */\n+public final class CustomScopeAnnotationsBuildItem extends SimpleBuildItem {\n+\n+    private Collection<DotName> customScopeNames;\n+\n+    public CustomScopeAnnotationsBuildItem(Collection<DotName> customScopeNames) {\n+        this.customScopeNames = customScopeNames;\n+    }\n+\n+    /**\n+     * Returns a collection of all known custom scopes represented as {@link DotName}.\n+     *\n+     * @return collection of known custom scopes (built-in scopes are not included)\n+     */\n+    public Collection<DotName> getAllCustomScopeNames() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c00e0ed2e370544e509ecdc866424d0f5275518"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMjExOTA3", "url": "https://github.com/quarkusio/quarkus/pull/7138#pullrequestreview-361211907", "createdAt": "2020-02-19T16:00:01Z", "commit": {"oid": "5c00e0ed2e370544e509ecdc866424d0f5275518"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjowMDowMVrOFrs57g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjowMDowMVrOFrs57g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM2ODgxNA==", "bodyText": "return BuiltinScope.isDeclaredOn(clazz) || isDeclaredOn(clazz)? ;-)", "url": "https://github.com/quarkusio/quarkus/pull/7138#discussion_r381368814", "createdAt": "2020-02-19T16:00:01Z", "author": {"login": "mkouba"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/CustomScopeAnnotationsBuildItem.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package io.quarkus.arc.deployment;\n+\n+import java.util.Collection;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+\n+import io.quarkus.arc.processor.BuiltinScope;\n+import io.quarkus.builder.item.SimpleBuildItem;\n+\n+/**\n+ * Holds information about all known custom scopes in the deployment and has utility methods allowing to check\n+ * whether given class has some scope annotation.\n+ */\n+public final class CustomScopeAnnotationsBuildItem extends SimpleBuildItem {\n+\n+    private Collection<DotName> customScopeNames;\n+\n+    public CustomScopeAnnotationsBuildItem(Collection<DotName> customScopeNames) {\n+        this.customScopeNames = customScopeNames;\n+    }\n+\n+    /**\n+     * Returns a collection of all known custom scopes represented as {@link DotName}.\n+     *\n+     * @return collection of known custom scopes (built-in scopes are not included)\n+     */\n+    public Collection<DotName> getAllCustomScopeNames() {\n+        return customScopeNames;\n+    }\n+\n+    /**\n+     * Returns true if the given class has some of the custom scope annotations, false otherwise.\n+     * List of known custom scopes can be seen via {@link CustomScopeAnnotationsBuildItem#getAllCustomScopeNames()}.\n+     * In order to check for presence of any scope annotation (including built-in ones),\n+     * see {@link CustomScopeAnnotationsBuildItem#isScopeAnnotationDeclaredOn(ClassInfo)}.\n+     *\n+     * @param clazz Class to check for annotations\n+     * @return true if the clazz contains some of the custom scope annotations, false otherwise\n+     */\n+    public boolean isDeclaredOn(ClassInfo clazz) {\n+        for (DotName scope : customScopeNames) {\n+            if (clazz.classAnnotation(scope) != null) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns true if the given class has some scope annotations, false otherwise.\n+     * This method check for all scope annotations, including built-in ones as well as custom scopes.\n+     * List of known custom scopes can be seen via {@link CustomScopeAnnotationsBuildItem#getAllCustomScopeNames()}.\n+     *\n+     * @param clazz Class to check for annotations\n+     * @return true if the clazz contains any scope annotation, false otherwise\n+     */\n+    public boolean isScopeAnnotationDeclaredOn(ClassInfo clazz) {\n+        return BuiltinScope.isDeclaredOn(clazz) ? true : isDeclaredOn(clazz);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c00e0ed2e370544e509ecdc866424d0f5275518"}, "originalPosition": 59}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5c00e0ed2e370544e509ecdc866424d0f5275518", "author": {"user": {"login": "manovotn", "name": "Matej Novotny"}}, "url": "https://github.com/quarkusio/quarkus/commit/5c00e0ed2e370544e509ecdc866424d0f5275518", "committedDate": "2020-02-19T13:38:43Z", "message": "Gather and expose information about all known scopes before transforming annotations."}, "afterCommit": {"oid": "7370797f66b1a279cbd3cdd36d940befcd18e1a2", "author": {"user": {"login": "manovotn", "name": "Matej Novotny"}}, "url": "https://github.com/quarkusio/quarkus/commit/7370797f66b1a279cbd3cdd36d940befcd18e1a2", "committedDate": "2020-02-19T16:18:10Z", "message": "Gather and expose information about all known scopes before transforming annotations."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7370797f66b1a279cbd3cdd36d940befcd18e1a2", "author": {"user": {"login": "manovotn", "name": "Matej Novotny"}}, "url": "https://github.com/quarkusio/quarkus/commit/7370797f66b1a279cbd3cdd36d940befcd18e1a2", "committedDate": "2020-02-19T16:18:10Z", "message": "Gather and expose information about all known scopes before transforming annotations."}, "afterCommit": {"oid": "240d1c1a95d30a314f8dfae14dd46cb076b4bf8b", "author": {"user": {"login": "manovotn", "name": "Matej Novotny"}}, "url": "https://github.com/quarkusio/quarkus/commit/240d1c1a95d30a314f8dfae14dd46cb076b4bf8b", "committedDate": "2020-02-28T15:00:24Z", "message": "Gather and expose information about all known scopes before transforming annotations."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NTAxNDk4", "url": "https://github.com/quarkusio/quarkus/pull/7138#pullrequestreview-366501498", "createdAt": "2020-02-28T15:56:13Z", "commit": {"oid": "240d1c1a95d30a314f8dfae14dd46cb076b4bf8b"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTo1NjoxM1rOFv53kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjowOTozMlrOFv6UcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3NTUwNw==", "bodyText": "This method should be probably named isCustomScopeDeclaredOn...", "url": "https://github.com/quarkusio/quarkus/pull/7138#discussion_r385775507", "createdAt": "2020-02-28T15:56:13Z", "author": {"login": "mkouba"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/CustomScopeAnnotationsBuildItem.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package io.quarkus.arc.deployment;\n+\n+import java.util.Collection;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+\n+import io.quarkus.arc.processor.BuiltinScope;\n+import io.quarkus.builder.item.SimpleBuildItem;\n+\n+/**\n+ * Holds information about all known custom scopes in the deployment and has utility methods allowing to check\n+ * whether given class has some scope annotation.\n+ */\n+public final class CustomScopeAnnotationsBuildItem extends SimpleBuildItem {\n+\n+    private Collection<DotName> customScopeNames;\n+\n+    public CustomScopeAnnotationsBuildItem(Collection<DotName> customScopeNames) {\n+        this.customScopeNames = customScopeNames;\n+    }\n+\n+    /**\n+     * Returns a collection of all known custom scopes represented as {@link DotName}.\n+     *\n+     * @return collection of known custom scopes (built-in scopes are not included)\n+     */\n+    public Collection<DotName> getCustomScopeNames() {\n+        return customScopeNames;\n+    }\n+\n+    /**\n+     * Returns true if the given class has some of the custom scope annotations, false otherwise.\n+     * List of known custom scopes can be seen via {@link CustomScopeAnnotationsBuildItem#getCustomScopeNames()}.\n+     * In order to check for presence of any scope annotation (including built-in ones),\n+     * see {@link CustomScopeAnnotationsBuildItem#isScopeAnnotationDeclaredOn(ClassInfo)}.\n+     *\n+     * @param clazz Class to check for annotations\n+     * @return true if the clazz contains some of the custom scope annotations, false otherwise\n+     */\n+    public boolean isDeclaredOn(ClassInfo clazz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "240d1c1a95d30a314f8dfae14dd46cb076b4bf8b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3NTg0Mw==", "bodyText": "isScopeDeclaredOn?", "url": "https://github.com/quarkusio/quarkus/pull/7138#discussion_r385775843", "createdAt": "2020-02-28T15:56:47Z", "author": {"login": "mkouba"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/CustomScopeAnnotationsBuildItem.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package io.quarkus.arc.deployment;\n+\n+import java.util.Collection;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+\n+import io.quarkus.arc.processor.BuiltinScope;\n+import io.quarkus.builder.item.SimpleBuildItem;\n+\n+/**\n+ * Holds information about all known custom scopes in the deployment and has utility methods allowing to check\n+ * whether given class has some scope annotation.\n+ */\n+public final class CustomScopeAnnotationsBuildItem extends SimpleBuildItem {\n+\n+    private Collection<DotName> customScopeNames;\n+\n+    public CustomScopeAnnotationsBuildItem(Collection<DotName> customScopeNames) {\n+        this.customScopeNames = customScopeNames;\n+    }\n+\n+    /**\n+     * Returns a collection of all known custom scopes represented as {@link DotName}.\n+     *\n+     * @return collection of known custom scopes (built-in scopes are not included)\n+     */\n+    public Collection<DotName> getCustomScopeNames() {\n+        return customScopeNames;\n+    }\n+\n+    /**\n+     * Returns true if the given class has some of the custom scope annotations, false otherwise.\n+     * List of known custom scopes can be seen via {@link CustomScopeAnnotationsBuildItem#getCustomScopeNames()}.\n+     * In order to check for presence of any scope annotation (including built-in ones),\n+     * see {@link CustomScopeAnnotationsBuildItem#isScopeAnnotationDeclaredOn(ClassInfo)}.\n+     *\n+     * @param clazz Class to check for annotations\n+     * @return true if the clazz contains some of the custom scope annotations, false otherwise\n+     */\n+    public boolean isDeclaredOn(ClassInfo clazz) {\n+        for (DotName scope : customScopeNames) {\n+            if (clazz.classAnnotation(scope) != null) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns true if the given class has some scope annotations, false otherwise.\n+     * This method check for all scope annotations, including built-in ones as well as custom scopes.\n+     * List of known custom scopes can be seen via {@link CustomScopeAnnotationsBuildItem#getCustomScopeNames()}.\n+     *\n+     * @param clazz Class to check for annotations\n+     * @return true if the clazz contains any scope annotation, false otherwise\n+     */\n+    public boolean isScopeAnnotationDeclaredOn(ClassInfo clazz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "240d1c1a95d30a314f8dfae14dd46cb076b4bf8b"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3NzI5NQ==", "bodyText": "should is probably not accurate because we throw an IllegalArgumentException if no annotation is passed?", "url": "https://github.com/quarkusio/quarkus/pull/7138#discussion_r385777295", "createdAt": "2020-02-28T15:59:20Z", "author": {"login": "mkouba"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/ContextRegistrarBuildItem.java", "diffHunk": "@@ -1,20 +1,50 @@\n package io.quarkus.arc.deployment;\n \n+import java.lang.annotation.Annotation;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import org.jboss.jandex.DotName;\n+\n import io.quarkus.arc.processor.ContextRegistrar;\n import io.quarkus.builder.item.MultiBuildItem;\n \n /**\n- * Make it possible to register a custom CDI context.\n+ * Make it possible to register one or more custom CDI contexts.\n+ * If you are registering a new context, you should also pass in the annotation value into the constructor either in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "240d1c1a95d30a314f8dfae14dd46cb076b4bf8b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4Mjg5Nw==", "bodyText": "Hm, so if I pass an empty array it's OK? Also if you skip the annotationsNames completely on the call site the method receives an empty array. It could be compiler-specific though. This is what I get for oracle JDK 8.\nAnyway, I'm not quite sure whether throwing an IAE is the best approach. I'd rather just log a warning if a ContextRegistrarBuildItem has no annotations. In theory, the ContextRegistrar can register a context conditionally... I know that it's ugly :-(.", "url": "https://github.com/quarkusio/quarkus/pull/7138#discussion_r385782897", "createdAt": "2020-02-28T16:09:32Z", "author": {"login": "mkouba"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/ContextRegistrarBuildItem.java", "diffHunk": "@@ -1,20 +1,50 @@\n package io.quarkus.arc.deployment;\n \n+import java.lang.annotation.Annotation;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import org.jboss.jandex.DotName;\n+\n import io.quarkus.arc.processor.ContextRegistrar;\n import io.quarkus.builder.item.MultiBuildItem;\n \n /**\n- * Make it possible to register a custom CDI context.\n+ * Make it possible to register one or more custom CDI contexts.\n+ * If you are registering a new context, you should also pass in the annotation value into the constructor either in\n+ * {@link DotName} form, or as {@code Class<? extends Annotation>}.\n+ *\n+ * This information is then leveraged in {@link CustomScopeAnnotationsBuildItem} which allows consumers to browse\n+ * all known custom scoped within deployment even early in the build process.\n  */\n public final class ContextRegistrarBuildItem extends MultiBuildItem {\n \n     private final ContextRegistrar contextRegistrar;\n+    private final Collection<DotName> annotationNames;\n \n-    public ContextRegistrarBuildItem(ContextRegistrar contextRegistrar) {\n+    public ContextRegistrarBuildItem(ContextRegistrar contextRegistrar, DotName... annotationsNames) {\n         this.contextRegistrar = contextRegistrar;\n+        if (annotationsNames == null) {\n+            throw new IllegalArgumentException(\"Parameter annotationNames cannot be null!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "240d1c1a95d30a314f8dfae14dd46cb076b4bf8b"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5860f1ea774ba5321d733918e50afc0ad652c6c0", "author": {"user": {"login": "manovotn", "name": "Matej Novotny"}}, "url": "https://github.com/quarkusio/quarkus/commit/5860f1ea774ba5321d733918e50afc0ad652c6c0", "committedDate": "2020-03-02T13:13:26Z", "message": "Gather and expose information about all known scopes before transforming annotations."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "240d1c1a95d30a314f8dfae14dd46cb076b4bf8b", "author": {"user": {"login": "manovotn", "name": "Matej Novotny"}}, "url": "https://github.com/quarkusio/quarkus/commit/240d1c1a95d30a314f8dfae14dd46cb076b4bf8b", "committedDate": "2020-02-28T15:00:24Z", "message": "Gather and expose information about all known scopes before transforming annotations."}, "afterCommit": {"oid": "5860f1ea774ba5321d733918e50afc0ad652c6c0", "author": {"user": {"login": "manovotn", "name": "Matej Novotny"}}, "url": "https://github.com/quarkusio/quarkus/commit/5860f1ea774ba5321d733918e50afc0ad652c6c0", "committedDate": "2020-03-02T13:13:26Z", "message": "Gather and expose information about all known scopes before transforming annotations."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MTkzODU2", "url": "https://github.com/quarkusio/quarkus/pull/7138#pullrequestreview-367193856", "createdAt": "2020-03-02T13:24:45Z", "commit": {"oid": "5860f1ea774ba5321d733918e50afc0ad652c6c0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4902, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}