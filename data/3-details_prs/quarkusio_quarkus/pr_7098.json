{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyODE2MTA4", "number": 7098, "title": "Add support for Vert.x Mutiny", "bodyText": "This pull request is the first PR related to the #7097 epic.\nIt:\n\nCreates a Mutiny extension (kept simple for now, would but required for the context propagation part that will come in another PR)\nExposes the Vert.x Mutiny API\nAdd support for Uni with @ConsumeEvent\nUpdate the impacted documentation\n\nNote that this PR also changes a few things:\n\nA deprecation message is printed when the RX or Axle Vert.x and event bus instances are injected\nA deprecation message is printed if a @ConsumeEvent method  using an RX or Axle Message is used\nAdd explicit async failure support to @ConsumeEvent\n\nThis PR is the first of the epic. Once merged, I can work on several other PRs in parallel.", "createdAt": "2020-02-09T11:03:09Z", "url": "https://github.com/quarkusio/quarkus/pull/7098", "merged": true, "mergeCommit": {"oid": "801dcb28295721fd65f9d30d1f0ad340dd6b5dd7"}, "closed": true, "closedAt": "2020-02-12T21:06:04Z", "author": {"login": "cescoffier"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcC6ALQgFqTM1NTc5MzQ4NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDnlaYgFqTM1NzUxNzA4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NzkzNDg1", "url": "https://github.com/quarkusio/quarkus/pull/7098#pullrequestreview-355793485", "createdAt": "2020-02-10T09:36:21Z", "commit": {"oid": "cddfaab2bb60e2cd1299668b28ecb6806cf2d130"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTozNjoyMVrOFnfOBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTo0Nzo0NlrOFnfmXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1MDI3OQ==", "bodyText": "You don't need that one AFAICS.", "url": "https://github.com/quarkusio/quarkus/pull/7098#discussion_r376950279", "createdAt": "2020-02-10T09:36:21Z", "author": {"login": "gsmet"}, "path": "extensions/mutiny/runtime/pom.xml", "diffHunk": "@@ -0,0 +1,72 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-mutiny-parent</artifactId>\n+        <version>999-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>quarkus-mutiny</artifactId>\n+    <name>Quarkus - Mutiny - Runtime</name>\n+    <description>Mutiny is a Reactive Programming library</description>\n+    <dependencies>\n+\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.smallrye.reactive</groupId>\n+            <artifactId>mutiny</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.graalvm.nativeimage</groupId>\n+            <artifactId>svm</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cddfaab2bb60e2cd1299668b28ecb6806cf2d130"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1MTUxNA==", "bodyText": "Usually, we even say \"is deprecated and will be removed in a future version\". Because I suppose that's the case, isn't it?", "url": "https://github.com/quarkusio/quarkus/pull/7098#discussion_r376951514", "createdAt": "2020-02-10T09:38:35Z", "author": {"login": "gsmet"}, "path": "extensions/vertx/runtime/src/main/java/io/quarkus/vertx/runtime/VertxProducer.java", "diffHunk": "@@ -37,25 +41,58 @@ public EventBus eventbus() {\n \n     @Singleton\n     @Produces\n-    public io.vertx.axle.core.Vertx axle() {\n+    public synchronized io.vertx.mutiny.core.Vertx mutiny() {\n+        if (mutinyVertx == null) {\n+            mutinyVertx = io.vertx.mutiny.core.Vertx.newInstance(vertx);\n+        }\n+        return mutinyVertx;\n+    }\n+\n+    @Singleton\n+    @Produces\n+    @Deprecated\n+    public synchronized io.vertx.axle.core.Vertx axle() {\n+        if (axleVertx == null) {\n+            LOGGER.warn(\n+                    \"`io.vertx.axle.core.Vertx` is deprecated - it is recommended to switch to `io.vertx.mutiny.core.Vertx`\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4dc16edfc1751ed87e23d9e94323a3b5f9122b5"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1NDU0Nw==", "bodyText": "Looks like we lose the stacktrace here. That's expected?", "url": "https://github.com/quarkusio/quarkus/pull/7098#discussion_r376954547", "createdAt": "2020-02-10T09:44:20Z", "author": {"login": "gsmet"}, "path": "extensions/vertx/deployment/src/main/java/io/quarkus/vertx/deployment/EventBusConsumer.java", "diffHunk": "@@ -231,6 +243,58 @@ private static void invoke(BeanInfo bean, MethodInfo method, ResultHandle messag\n         }\n     }\n \n+    /**\n+     * If the return type is CompletionStage use:\n+     * <code><pre>\n+     * cs.whenComplete((whenResult, whenFailure) -> {\n+     *  if (failure != null) {\n+     *         message.fail(status, whenFailure.getMessage());\n+     *  } else {\n+     *         message.reply(whenResult);\n+     *  }\n+     * })\n+     * </pre></code>\n+     *\n+     * @param messageHandle the message variable\n+     * @param invoke the bytecode creator\n+     * @return the function\n+     */\n+    private static FunctionCreator generateWhenCompleteHandler(ResultHandle messageHandle, BytecodeCreator invoke) {\n+        FunctionCreator handler = invoke.createFunction(BiConsumer.class);\n+        BytecodeCreator bytecode = handler.getBytecode();\n+\n+        // This avoid having to check cast in the branches\n+        AssignableResultHandle whenResult = bytecode.createVariable(Object.class);\n+        bytecode.assign(whenResult, bytecode.getMethodParam(0));\n+        AssignableResultHandle whenFailure = bytecode.createVariable(Exception.class);\n+        bytecode.assign(whenFailure, bytecode.getMethodParam(1));\n+        AssignableResultHandle message = bytecode.createVariable(Message.class);\n+        bytecode.assign(message, messageHandle);\n+\n+        BranchResult ifFailureIfNull = bytecode.ifNull(whenFailure);\n+        // failure is not null branch - message.fail(failureStatus, failure.getMessage())\n+        // In this branch we use the EXPLICIT FAILURE CODE\n+        BytecodeCreator failureIsNotNull = ifFailureIfNull.falseBranch();\n+        ResultHandle failureStatus = failureIsNotNull.load(ConsumeEvent.EXPLICIT_FAILURE_CODE);\n+        ResultHandle failureMessage = failureIsNotNull\n+                .invokeVirtualMethod(THROWABLE_GET_MESSAGE, whenFailure);\n+        failureIsNotNull.invokeInterfaceMethod(\n+                MESSAGE_FAIL,\n+                message,\n+                failureStatus,\n+                failureMessage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f585219e9a4bced13ab8199212efa5f8d128e03"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1NTQ4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For instance _bare_ Vert.x uses callbacks, the Mutiny variants using `Uni` and `Multi`, the RX Java 2 version uses `Single`, `Maybe`, `Completable`, `Observable` and `Flowable`...\n          \n          \n            \n            For instance _bare_ Vert.x uses callbacks, the Mutiny variants uses `Uni` and `Multi`, the RX Java 2 version uses `Single`, `Maybe`, `Completable`, `Observable` and `Flowable`...", "url": "https://github.com/quarkusio/quarkus/pull/7098#discussion_r376955483", "createdAt": "2020-02-10T09:46:05Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/vertx.adoc", "diffHunk": "@@ -57,9 +59,9 @@ Once the extension has been added, you can access the _managed_ Vert.x instance\n ----\n \n If you are familiar with Vert.x, you know that Vert.x provides different API models.\n-For instance _bare_ Vert.x uses callbacks, the RX Java 2 version uses `Single`, `Maybe`, `Completable`, `Observable` and `Flowable`.\n+For instance _bare_ Vert.x uses callbacks, the Mutiny variants using `Uni` and `Multi`, the RX Java 2 version uses `Single`, `Maybe`, `Completable`, `Observable` and `Flowable`...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6c2fcbab016a13e2b8c9ffe4daad1ff7d535917"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1NjUwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can also return an `Uni<T>` or a `CompletionStage<T>` to handle asynchronous reply:\n          \n          \n            \n            You can also return a `Uni<T>` or a `CompletionStage<T>` to handle asynchronous reply:", "url": "https://github.com/quarkusio/quarkus/pull/7098#discussion_r376956508", "createdAt": "2020-02-10T09:47:46Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/reactive-messaging.adoc", "diffHunk": "@@ -116,16 +146,25 @@ public String consume(String name) {\n }\n ----\n \n-You can also return a `CompletionStage<T>` to handle asynchronous reply:\n+You can also return an `Uni<T>` or a `CompletionStage<T>` to handle asynchronous reply:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b33e3f27bb304378ddc4223940f7e80a214c36fc"}, "originalPosition": 42}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9814101828068f5a486227cd7d26f8e217fecd5f", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/9814101828068f5a486227cd7d26f8e217fecd5f", "committedDate": "2020-02-10T12:20:25Z", "message": "Merge branch 'features/vertx-mutiny' of github.com:cescoffier/quarkus into features/vertx-mutiny"}, "afterCommit": {"oid": "29bbe9a6d7b55926ba721710b88e5e57e422cf52", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/29bbe9a6d7b55926ba721710b88e5e57e422cf52", "committedDate": "2020-02-10T12:30:14Z", "message": "Extend deprecation message with a removal notice"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MDM1MTQw", "url": "https://github.com/quarkusio/quarkus/pull/7098#pullrequestreview-356035140", "createdAt": "2020-02-10T15:36:21Z", "commit": {"oid": "29bbe9a6d7b55926ba721710b88e5e57e422cf52"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MjYwMzg5", "url": "https://github.com/quarkusio/quarkus/pull/7098#pullrequestreview-356260389", "createdAt": "2020-02-10T21:02:28Z", "commit": {"oid": "29bbe9a6d7b55926ba721710b88e5e57e422cf52"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMTowMjoyOVrOFn1cZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMTowMjoyOVrOFn1cZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxNDQwNA==", "bodyText": "Remove any System.outs  from the code (including tests)", "url": "https://github.com/quarkusio/quarkus/pull/7098#discussion_r377314404", "createdAt": "2020-02-10T21:02:29Z", "author": {"login": "gastaldi"}, "path": "extensions/vertx/deployment/src/test/java/io/quarkus/vertx/deployment/MessageConsumerFailureTest.java", "diffHunk": "@@ -35,18 +38,24 @@\n \n     @Test\n     public void testFailure() throws InterruptedException {\n-        verifyFailure(\"foo\", \"java.lang.IllegalStateException: Foo is dead\");\n-        verifyFailure(\"foo-message\", \"java.lang.NullPointerException\");\n-        verifyFailure(\"foo-completion-stage\", \"java.lang.NullPointerException: Something is null\");\n+        verifyFailure(\"foo\", \"java.lang.IllegalStateException: Foo is dead\", false);\n+        verifyFailure(\"foo-message\", \"java.lang.NullPointerException\", false);\n+        verifyFailure(\"foo-completion-stage\", \"java.lang.NullPointerException: Something is null\", false);\n+        verifyFailure(\"foo-completion-stage-failure\", \"boom\", true);\n+        verifyFailure(\"foo-uni\", \"java.lang.NullPointerException: Something is null\", false);\n+        verifyFailure(\"foo-uni-failure\", \"boom\", true);\n     }\n \n-    void verifyFailure(String address, String expectedMessage) throws InterruptedException {\n+    void verifyFailure(String address, String expectedMessage, boolean explicit) throws InterruptedException {\n         BlockingQueue<Object> synchronizer = new LinkedBlockingQueue<>();\n+        System.out.println(\"sending to \" + address);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29bbe9a6d7b55926ba721710b88e5e57e422cf52"}, "originalPosition": 36}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "29bbe9a6d7b55926ba721710b88e5e57e422cf52", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/29bbe9a6d7b55926ba721710b88e5e57e422cf52", "committedDate": "2020-02-10T12:30:14Z", "message": "Extend deprecation message with a removal notice"}, "afterCommit": {"oid": "88dfd6924a8f301740b5f913bc0e2449b92eab86", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/88dfd6924a8f301740b5f913bc0e2449b92eab86", "committedDate": "2020-02-11T06:31:37Z", "message": "Extend deprecation message with a removal notice"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14341e7b4b263335ee01b3eb2520e475246068ba", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/14341e7b4b263335ee01b3eb2520e475246068ba", "committedDate": "2020-02-12T08:25:52Z", "message": "Update Axle and declare the Mutiny and Vert.x Mutiny dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34dc5aa710d865584e12aa03dbe1da566aed9111", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/34dc5aa710d865584e12aa03dbe1da566aed9111", "committedDate": "2020-02-12T08:25:52Z", "message": "Create the Mutiny extension\n\nNo substitution required in the extension"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7a1ab78d21f79033ea852c1e23c44570a2e84bf", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/d7a1ab78d21f79033ea852c1e23c44570a2e84bf", "committedDate": "2020-02-12T08:25:52Z", "message": "Produce the Mutiny Vert.x instance\n\nAlso log a deprecation message when the Axle or RX Java 2 instances are creation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a108a2be8a3eb831409fd9db94d24777c818a5d2", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/a108a2be8a3eb831409fd9db94d24777c818a5d2", "committedDate": "2020-02-12T08:25:52Z", "message": "Add support of the Mutiny variant of Message in @ConsumeEvent\n\nWhen a @ConsumeEvent using the Rx Java or Axle variant of Message a log message is printed indicating the deprecation of these types."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9557cb4c35670cd6eebe1350570fb8e6a7c17e0c", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/9557cb4c35670cd6eebe1350570fb8e6a7c17e0c", "committedDate": "2020-02-12T08:25:52Z", "message": "Allow @ConsumeEvent method to return Uni instances\n\nAlso implement the management of explicit async failure for CompletionStage and Uni."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81ce1185eb5dd3d4d78cdb901e985afbc529b5a8", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/81ce1185eb5dd3d4d78cdb901e985afbc529b5a8", "committedDate": "2020-02-12T08:25:52Z", "message": "Update the Vert.x guide to mention the Mutiny API\n\nCo-Authored-By: Guillaume Smet <guillaume.smet@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7db5c2f5f356a4b9e82c6832f1ae6277a9a6efc3", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/7db5c2f5f356a4b9e82c6832f1ae6277a9a6efc3", "committedDate": "2020-02-12T08:25:52Z", "message": "Update the async message passing documentation to mention Mutiny support\n\nCo-Authored-By: Guillaume Smet <guillaume.smet@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afb34c7e967f7d0bf974f8dcaff3a5e5468e7731", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/afb34c7e967f7d0bf974f8dcaff3a5e5468e7731", "committedDate": "2020-02-12T08:25:52Z", "message": "Extend deprecation message with a removal notice"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "88dfd6924a8f301740b5f913bc0e2449b92eab86", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/88dfd6924a8f301740b5f913bc0e2449b92eab86", "committedDate": "2020-02-11T06:31:37Z", "message": "Extend deprecation message with a removal notice"}, "afterCommit": {"oid": "afb34c7e967f7d0bf974f8dcaff3a5e5468e7731", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/afb34c7e967f7d0bf974f8dcaff3a5e5468e7731", "committedDate": "2020-02-12T08:25:52Z", "message": "Extend deprecation message with a removal notice"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NTE3MDg1", "url": "https://github.com/quarkusio/quarkus/pull/7098#pullrequestreview-357517085", "createdAt": "2020-02-12T14:55:00Z", "commit": {"oid": "afb34c7e967f7d0bf974f8dcaff3a5e5468e7731"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNDo1NTowMFrOFoxsaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNDo1NTowMFrOFoxsaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMwMTU0NA==", "bodyText": "Instead of booleans, it would be better to pass the expected replyException.failureCode(). That would get rid of the ifstatement in the verifyFailure method", "url": "https://github.com/quarkusio/quarkus/pull/7098#discussion_r378301544", "createdAt": "2020-02-12T14:55:00Z", "author": {"login": "gastaldi"}, "path": "extensions/vertx/deployment/src/test/java/io/quarkus/vertx/deployment/MessageConsumerFailureTest.java", "diffHunk": "@@ -35,12 +38,15 @@\n \n     @Test\n     public void testFailure() throws InterruptedException {\n-        verifyFailure(\"foo\", \"java.lang.IllegalStateException: Foo is dead\");\n-        verifyFailure(\"foo-message\", \"java.lang.NullPointerException\");\n-        verifyFailure(\"foo-completion-stage\", \"java.lang.NullPointerException: Something is null\");\n+        verifyFailure(\"foo\", \"java.lang.IllegalStateException: Foo is dead\", false);\n+        verifyFailure(\"foo-message\", \"java.lang.NullPointerException\", false);\n+        verifyFailure(\"foo-completion-stage\", \"java.lang.NullPointerException: Something is null\", false);\n+        verifyFailure(\"foo-completion-stage-failure\", \"boom\", true);\n+        verifyFailure(\"foo-uni\", \"java.lang.NullPointerException: Something is null\", false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afb34c7e967f7d0bf974f8dcaff3a5e5468e7731"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4859, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}