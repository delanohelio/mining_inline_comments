{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5NDM5NDIx", "number": 12197, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNzoyMDowMlrOElDbLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNzoyMDo1MVrOElDcRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3Mjg4ODc4OnYy", "diffSide": "RIGHT", "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNzoyMDowMlrOHUVmlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNzoyMDowMlrOHUVmlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA4NzUwOA==", "bodyText": "Could you also add the @deprecated Javadoc one?", "url": "https://github.com/quarkusio/quarkus/pull/12197#discussion_r491087508", "createdAt": "2020-09-18T17:20:02Z", "author": {"login": "gsmet"}, "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisConfig.java", "diffHunk": "@@ -54,6 +55,36 @@\n \n     @ConfigGroup\n     public static class RedisConfiguration {\n+        /**\n+         * The redis password\n+         * <p>\n+         * It should be removed in the 1.10 release.\n+         * Follows up https://github.com/quarkusio/quarkus/pull/11908#issuecomment-694794724", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8343b383e34f7b1ba47f2f1de3aab764f260cff8"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3Mjg5MTU4OnYy", "diffSide": "RIGHT", "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisClientUtil.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNzoyMDo1MVrOHUVoNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxOTo1OToyNVrOHUaLWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA4NzkyNA==", "bodyText": "I /think/ I would throw an error here if any of the deprecated Optional bits are defined.", "url": "https://github.com/quarkusio/quarkus/pull/12197#discussion_r491087924", "createdAt": "2020-09-18T17:20:51Z", "author": {"login": "gsmet"}, "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisClientUtil.java", "diffHunk": "@@ -60,4 +62,59 @@ public static boolean isDefault(String clientName) {\n     public static RedisConfiguration getConfiguration(RedisConfig config, String name) {\n         return isDefault(name) ? config.defaultClient : config.additionalRedisClients.get(name);\n     }\n+\n+    /**\n+     * This method was only added to support minimal backward compatibility.\n+     * <p>\n+     * It should be removed in the 1.10 release.\n+     * Follows up https://github.com/quarkusio/quarkus/pull/11908#issuecomment-694794724\n+     */\n+    private static String buildConnectionString(RedisConfiguration config, URI host, String clientName) {\n+        final String address = host.toString();\n+        if (address.contains(\"://\")) {\n+            return address;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8343b383e34f7b1ba47f2f1de3aab764f260cff8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA4ODU5Mw==", "bodyText": "If we throw an error we won't be backward compatible anymore.", "url": "https://github.com/quarkusio/quarkus/pull/12197#discussion_r491088593", "createdAt": "2020-09-18T17:22:14Z", "author": {"login": "machi1990"}, "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisClientUtil.java", "diffHunk": "@@ -60,4 +62,59 @@ public static boolean isDefault(String clientName) {\n     public static RedisConfiguration getConfiguration(RedisConfig config, String name) {\n         return isDefault(name) ? config.defaultClient : config.additionalRedisClients.get(name);\n     }\n+\n+    /**\n+     * This method was only added to support minimal backward compatibility.\n+     * <p>\n+     * It should be removed in the 1.10 release.\n+     * Follows up https://github.com/quarkusio/quarkus/pull/11908#issuecomment-694794724\n+     */\n+    private static String buildConnectionString(RedisConfiguration config, URI host, String clientName) {\n+        final String address = host.toString();\n+        if (address.contains(\"://\")) {\n+            return address;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA4NzkyNA=="}, "originalCommit": {"oid": "8343b383e34f7b1ba47f2f1de3aab764f260cff8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA4ODkyNQ==", "bodyText": "Did we support having :// in the address before?", "url": "https://github.com/quarkusio/quarkus/pull/12197#discussion_r491088925", "createdAt": "2020-09-18T17:22:57Z", "author": {"login": "gsmet"}, "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisClientUtil.java", "diffHunk": "@@ -60,4 +62,59 @@ public static boolean isDefault(String clientName) {\n     public static RedisConfiguration getConfiguration(RedisConfig config, String name) {\n         return isDefault(name) ? config.defaultClient : config.additionalRedisClients.get(name);\n     }\n+\n+    /**\n+     * This method was only added to support minimal backward compatibility.\n+     * <p>\n+     * It should be removed in the 1.10 release.\n+     * Follows up https://github.com/quarkusio/quarkus/pull/11908#issuecomment-694794724\n+     */\n+    private static String buildConnectionString(RedisConfiguration config, URI host, String clientName) {\n+        final String address = host.toString();\n+        if (address.contains(\"://\")) {\n+            return address;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA4NzkyNA=="}, "originalCommit": {"oid": "8343b383e34f7b1ba47f2f1de3aab764f260cff8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA4OTExNQ==", "bodyText": "If we did, yes, what I suggested is stupid :). If we didn't, it makes sense :).", "url": "https://github.com/quarkusio/quarkus/pull/12197#discussion_r491089115", "createdAt": "2020-09-18T17:23:20Z", "author": {"login": "gsmet"}, "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisClientUtil.java", "diffHunk": "@@ -60,4 +62,59 @@ public static boolean isDefault(String clientName) {\n     public static RedisConfiguration getConfiguration(RedisConfig config, String name) {\n         return isDefault(name) ? config.defaultClient : config.additionalRedisClients.get(name);\n     }\n+\n+    /**\n+     * This method was only added to support minimal backward compatibility.\n+     * <p>\n+     * It should be removed in the 1.10 release.\n+     * Follows up https://github.com/quarkusio/quarkus/pull/11908#issuecomment-694794724\n+     */\n+    private static String buildConnectionString(RedisConfiguration config, URI host, String clientName) {\n+        final String address = host.toString();\n+        if (address.contains(\"://\")) {\n+            return address;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA4NzkyNA=="}, "originalCommit": {"oid": "8343b383e34f7b1ba47f2f1de3aab764f260cff8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA5MTI2MA==", "bodyText": "No we did not.  The scheme got introduced only with the new way of configuring the Redis connection string.\nMeaning that if the host does not contain it, the it's the old way of doing things and throwing an error won't be backward compatible anymore. Hence me the need to re-construct the connection string as it was previous done.\nMaybe I am missing something.", "url": "https://github.com/quarkusio/quarkus/pull/12197#discussion_r491091260", "createdAt": "2020-09-18T17:27:40Z", "author": {"login": "machi1990"}, "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisClientUtil.java", "diffHunk": "@@ -60,4 +62,59 @@ public static boolean isDefault(String clientName) {\n     public static RedisConfiguration getConfiguration(RedisConfig config, String name) {\n         return isDefault(name) ? config.defaultClient : config.additionalRedisClients.get(name);\n     }\n+\n+    /**\n+     * This method was only added to support minimal backward compatibility.\n+     * <p>\n+     * It should be removed in the 1.10 release.\n+     * Follows up https://github.com/quarkusio/quarkus/pull/11908#issuecomment-694794724\n+     */\n+    private static String buildConnectionString(RedisConfiguration config, URI host, String clientName) {\n+        final String address = host.toString();\n+        if (address.contains(\"://\")) {\n+            return address;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA4NzkyNA=="}, "originalCommit": {"oid": "8343b383e34f7b1ba47f2f1de3aab764f260cff8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA5NzI5OA==", "bodyText": "I added my comment at exactly the place I wanted us to throw the error.\nIf address contains :// then it's the new way of doing things so, in this case if any of these fields is defined we could throw an error? Or am I missing something?", "url": "https://github.com/quarkusio/quarkus/pull/12197#discussion_r491097298", "createdAt": "2020-09-18T17:39:47Z", "author": {"login": "gsmet"}, "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisClientUtil.java", "diffHunk": "@@ -60,4 +62,59 @@ public static boolean isDefault(String clientName) {\n     public static RedisConfiguration getConfiguration(RedisConfig config, String name) {\n         return isDefault(name) ? config.defaultClient : config.additionalRedisClients.get(name);\n     }\n+\n+    /**\n+     * This method was only added to support minimal backward compatibility.\n+     * <p>\n+     * It should be removed in the 1.10 release.\n+     * Follows up https://github.com/quarkusio/quarkus/pull/11908#issuecomment-694794724\n+     */\n+    private static String buildConnectionString(RedisConfiguration config, URI host, String clientName) {\n+        final String address = host.toString();\n+        if (address.contains(\"://\")) {\n+            return address;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA4NzkyNA=="}, "originalCommit": {"oid": "8343b383e34f7b1ba47f2f1de3aab764f260cff8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA5NzgzMQ==", "bodyText": "(Note that I might be missing something, I'm exhausted :))", "url": "https://github.com/quarkusio/quarkus/pull/12197#discussion_r491097831", "createdAt": "2020-09-18T17:40:46Z", "author": {"login": "gsmet"}, "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisClientUtil.java", "diffHunk": "@@ -60,4 +62,59 @@ public static boolean isDefault(String clientName) {\n     public static RedisConfiguration getConfiguration(RedisConfig config, String name) {\n         return isDefault(name) ? config.defaultClient : config.additionalRedisClients.get(name);\n     }\n+\n+    /**\n+     * This method was only added to support minimal backward compatibility.\n+     * <p>\n+     * It should be removed in the 1.10 release.\n+     * Follows up https://github.com/quarkusio/quarkus/pull/11908#issuecomment-694794724\n+     */\n+    private static String buildConnectionString(RedisConfiguration config, URI host, String clientName) {\n+        final String address = host.toString();\n+        if (address.contains(\"://\")) {\n+            return address;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA4NzkyNA=="}, "originalCommit": {"oid": "8343b383e34f7b1ba47f2f1de3aab764f260cff8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE2MjQ1Ng==", "bodyText": "I added my comment at exactly the place I wanted us to throw the error.\nIf address contains :// then it's the new way of doing things so, in this case if any of these fields is defined we could throw an error? Or am I missing something?\n\nI get your comment now.\nSorry it took me long to realize it since the comment appear just after the return address; statement  and I read your comment all wrong - (that it concerned the old way).\nYes, you are right we could throw.  I think the old way made it impossible to define the host with the scheme  i.e :// part. So if they enter that line, it is by following the new way of doing things and chances are low that they'll mix it with the deprecated configs since they'll be hidden. If it happens to be the case,  I think we can be lenient here and just start the application with the right configuration and ignore the old ones. They'll get a nice warning message if they keep on using the old property once we remove them post 1.9.x release.\nHope it makes sense.", "url": "https://github.com/quarkusio/quarkus/pull/12197#discussion_r491162456", "createdAt": "2020-09-18T19:59:25Z", "author": {"login": "machi1990"}, "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/RedisClientUtil.java", "diffHunk": "@@ -60,4 +62,59 @@ public static boolean isDefault(String clientName) {\n     public static RedisConfiguration getConfiguration(RedisConfig config, String name) {\n         return isDefault(name) ? config.defaultClient : config.additionalRedisClients.get(name);\n     }\n+\n+    /**\n+     * This method was only added to support minimal backward compatibility.\n+     * <p>\n+     * It should be removed in the 1.10 release.\n+     * Follows up https://github.com/quarkusio/quarkus/pull/11908#issuecomment-694794724\n+     */\n+    private static String buildConnectionString(RedisConfiguration config, URI host, String clientName) {\n+        final String address = host.toString();\n+        if (address.contains(\"://\")) {\n+            return address;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA4NzkyNA=="}, "originalCommit": {"oid": "8343b383e34f7b1ba47f2f1de3aab764f260cff8"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 169, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}