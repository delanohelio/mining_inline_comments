{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MjY4NDU5", "number": 8746, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTo0NjozM1rOD01C3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjoxNjo1N1rOD01-7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzIxNjI4OnYy", "diffSide": "RIGHT", "path": "extensions/smallrye-opentracing/deployment/src/test/java/io/quarkus/smallrye/opentracing/deployment/NestedMdcScopesTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTo0NjozM1rOGJ9iLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjowNTo1MFrOGJ-ctw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA5ODU0Mg==", "bodyText": "Could be this test moved to Jaeger artifact - close to the MDC implementation?", "url": "https://github.com/quarkusio/quarkus/pull/8746#discussion_r413098542", "createdAt": "2020-04-22T15:46:33Z", "author": {"login": "pavolloffay"}, "path": "extensions/smallrye-opentracing/deployment/src/test/java/io/quarkus/smallrye/opentracing/deployment/NestedMdcScopesTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package io.quarkus.smallrye.opentracing.deployment;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+import java.util.Map;\n+\n+import org.jboss.logging.MDC;\n+import org.junit.jupiter.api.Test;\n+\n+import io.jaegertracing.internal.JaegerSpanContext;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.SpanContext;\n+import io.opentracing.util.ThreadLocalScopeManager;\n+import io.quarkus.jaeger.runtime.MDCScopeManager;\n+\n+public class NestedMdcScopesTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8daf8865c6750d72b9509910575ec91c0fd62b76"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzExMjQ0Nw==", "bodyText": "Hmm, I'm not sure why I added it to smallrye-opentracing, indeed this should be in jaeger. Thanks :-)", "url": "https://github.com/quarkusio/quarkus/pull/8746#discussion_r413112447", "createdAt": "2020-04-22T16:04:17Z", "author": {"login": "Ladicek"}, "path": "extensions/smallrye-opentracing/deployment/src/test/java/io/quarkus/smallrye/opentracing/deployment/NestedMdcScopesTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package io.quarkus.smallrye.opentracing.deployment;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+import java.util.Map;\n+\n+import org.jboss.logging.MDC;\n+import org.junit.jupiter.api.Test;\n+\n+import io.jaegertracing.internal.JaegerSpanContext;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.SpanContext;\n+import io.opentracing.util.ThreadLocalScopeManager;\n+import io.quarkus.jaeger.runtime.MDCScopeManager;\n+\n+public class NestedMdcScopesTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA5ODU0Mg=="}, "originalCommit": {"oid": "8daf8865c6750d72b9509910575ec91c0fd62b76"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzExMzUyNw==", "bodyText": "Done.", "url": "https://github.com/quarkusio/quarkus/pull/8746#discussion_r413113527", "createdAt": "2020-04-22T16:05:50Z", "author": {"login": "Ladicek"}, "path": "extensions/smallrye-opentracing/deployment/src/test/java/io/quarkus/smallrye/opentracing/deployment/NestedMdcScopesTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package io.quarkus.smallrye.opentracing.deployment;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+import java.util.Map;\n+\n+import org.jboss.logging.MDC;\n+import org.junit.jupiter.api.Test;\n+\n+import io.jaegertracing.internal.JaegerSpanContext;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.SpanContext;\n+import io.opentracing.util.ThreadLocalScopeManager;\n+import io.quarkus.jaeger.runtime.MDCScopeManager;\n+\n+public class NestedMdcScopesTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA5ODU0Mg=="}, "originalCommit": {"oid": "8daf8865c6750d72b9509910575ec91c0fd62b76"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzM3MDA1OnYy", "diffSide": "RIGHT", "path": "extensions/jaeger/runtime/src/main/java/io/quarkus/jaeger/runtime/MDCScope.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjoxNjo1N1rOGJ--fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNjoxMDowMVrOGKYLBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEyMjE3NQ==", "bodyText": "This certainly fixes the problem, but I am wondering whether it isn't better to just restore the old values of the keys that were removed. For instance they could be explicitly set by a user or other integration.", "url": "https://github.com/quarkusio/quarkus/pull/8746#discussion_r413122175", "createdAt": "2020-04-22T16:16:57Z", "author": {"login": "pavolloffay"}, "path": "extensions/jaeger/runtime/src/main/java/io/quarkus/jaeger/runtime/MDCScope.java", "diffHunk": "@@ -33,6 +35,10 @@ public void close() {\n         MDC.remove(TRACE_ID);\n         MDC.remove(SPAN_ID);\n         MDC.remove(SAMPLED);\n+\n+        if (toRestore != null && toRestore.span().context() instanceof JaegerSpanContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5081fecaf65a8d359f412b74d55fb7010cb1c027"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUzMzg5Mg==", "bodyText": "Hmm, yea, we could do that...", "url": "https://github.com/quarkusio/quarkus/pull/8746#discussion_r413533892", "createdAt": "2020-04-23T06:07:04Z", "author": {"login": "Ladicek"}, "path": "extensions/jaeger/runtime/src/main/java/io/quarkus/jaeger/runtime/MDCScope.java", "diffHunk": "@@ -33,6 +35,10 @@ public void close() {\n         MDC.remove(TRACE_ID);\n         MDC.remove(SPAN_ID);\n         MDC.remove(SAMPLED);\n+\n+        if (toRestore != null && toRestore.span().context() instanceof JaegerSpanContext) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEyMjE3NQ=="}, "originalCommit": {"oid": "5081fecaf65a8d359f412b74d55fb7010cb1c027"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUzNDk4MA==", "bodyText": "I've followed the ThreadLocalScopeManager / ThreadLocalScope example :-)\nBut I agree it's cleaner to just restore the MDC map content. I have also found that the test can be improved a bit. I will submit a subsequent PR.", "url": "https://github.com/quarkusio/quarkus/pull/8746#discussion_r413534980", "createdAt": "2020-04-23T06:10:01Z", "author": {"login": "Ladicek"}, "path": "extensions/jaeger/runtime/src/main/java/io/quarkus/jaeger/runtime/MDCScope.java", "diffHunk": "@@ -33,6 +35,10 @@ public void close() {\n         MDC.remove(TRACE_ID);\n         MDC.remove(SPAN_ID);\n         MDC.remove(SAMPLED);\n+\n+        if (toRestore != null && toRestore.span().context() instanceof JaegerSpanContext) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEyMjE3NQ=="}, "originalCommit": {"oid": "5081fecaf65a8d359f412b74d55fb7010cb1c027"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3409, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}