{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwOTQxNjYz", "number": 7961, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMToyMzowOFrODpd4UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMToyMzowOFrODpd4UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODA3NzYwOnYy", "diffSide": "RIGHT", "path": "integration-tests/kubernetes/standard/src/test/java/io/quarkus/it/kubernetes/KubernetesWithEnvFromSecretTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMToyMzowOFrOF4qM4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDoxNDoxM1rOF4wVHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk1NjAwMw==", "bodyText": "Maybe we should also assert that container.getEnv() is null?", "url": "https://github.com/quarkusio/quarkus/pull/7961#discussion_r394956003", "createdAt": "2020-03-19T11:23:08Z", "author": {"login": "geoand"}, "path": "integration-tests/kubernetes/standard/src/test/java/io/quarkus/it/kubernetes/KubernetesWithEnvFromSecretTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package io.quarkus.it.kubernetes;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.fabric8.kubernetes.api.model.HasMetadata;\n+import io.fabric8.kubernetes.api.model.apps.Deployment;\n+import io.quarkus.test.ProdBuildResults;\n+import io.quarkus.test.ProdModeTestResults;\n+import io.quarkus.test.QuarkusProdModeTest;\n+\n+public class KubernetesWithEnvFromSecretTest {\n+\n+    @RegisterExtension\n+    static final QuarkusProdModeTest config = new QuarkusProdModeTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class).addClasses(GreetingResource.class))\n+            .setApplicationName(\"env-from-secret\")\n+            .setApplicationVersion(\"0.1-SNAPSHOT\")\n+            .withConfigurationResource(\"kubernetes-with-env-from-secret.properties\");\n+\n+    @ProdBuildResults\n+    private ProdModeTestResults prodModeTestResults;\n+\n+    @Test\n+    public void assertGeneratedResources() throws IOException {\n+        Path kubernetesDir = prodModeTestResults.getBuildDir().resolve(\"kubernetes\");\n+        assertThat(kubernetesDir)\n+                .isDirectoryContaining(p -> p.getFileName().endsWith(\"kubernetes.json\"))\n+                .isDirectoryContaining(p -> p.getFileName().endsWith(\"kubernetes.yml\"));\n+        List<HasMetadata> kubernetesList = DeserializationUtil\n+                .deserializeAsList(kubernetesDir.resolve(\"kubernetes.yml\"));\n+        assertThat(kubernetesList.get(0)).isInstanceOfSatisfying(Deployment.class, d -> {\n+            assertThat(d.getMetadata()).satisfies(m -> {\n+                assertThat(m.getName()).isEqualTo(\"env-from-secret\");\n+            });\n+\n+            assertThat(d.getSpec()).satisfies(deploymentSpec -> {\n+                assertThat(deploymentSpec.getTemplate()).satisfies(t -> {\n+                    assertThat(t.getSpec()).satisfies(podSpec -> {\n+                        assertThat(podSpec.getContainers()).hasOnlyOneElementSatisfying(container -> {\n+                            assertThat(container.getEnvFrom()).hasOnlyOneElementSatisfying(env -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "642ccdff8dee16b5458a1470012a4288dd7d9e5c"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1NjQxNA==", "bodyText": "Never mind, doesn't apply", "url": "https://github.com/quarkusio/quarkus/pull/7961#discussion_r395056414", "createdAt": "2020-03-19T14:14:13Z", "author": {"login": "geoand"}, "path": "integration-tests/kubernetes/standard/src/test/java/io/quarkus/it/kubernetes/KubernetesWithEnvFromSecretTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package io.quarkus.it.kubernetes;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.fabric8.kubernetes.api.model.HasMetadata;\n+import io.fabric8.kubernetes.api.model.apps.Deployment;\n+import io.quarkus.test.ProdBuildResults;\n+import io.quarkus.test.ProdModeTestResults;\n+import io.quarkus.test.QuarkusProdModeTest;\n+\n+public class KubernetesWithEnvFromSecretTest {\n+\n+    @RegisterExtension\n+    static final QuarkusProdModeTest config = new QuarkusProdModeTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class).addClasses(GreetingResource.class))\n+            .setApplicationName(\"env-from-secret\")\n+            .setApplicationVersion(\"0.1-SNAPSHOT\")\n+            .withConfigurationResource(\"kubernetes-with-env-from-secret.properties\");\n+\n+    @ProdBuildResults\n+    private ProdModeTestResults prodModeTestResults;\n+\n+    @Test\n+    public void assertGeneratedResources() throws IOException {\n+        Path kubernetesDir = prodModeTestResults.getBuildDir().resolve(\"kubernetes\");\n+        assertThat(kubernetesDir)\n+                .isDirectoryContaining(p -> p.getFileName().endsWith(\"kubernetes.json\"))\n+                .isDirectoryContaining(p -> p.getFileName().endsWith(\"kubernetes.yml\"));\n+        List<HasMetadata> kubernetesList = DeserializationUtil\n+                .deserializeAsList(kubernetesDir.resolve(\"kubernetes.yml\"));\n+        assertThat(kubernetesList.get(0)).isInstanceOfSatisfying(Deployment.class, d -> {\n+            assertThat(d.getMetadata()).satisfies(m -> {\n+                assertThat(m.getName()).isEqualTo(\"env-from-secret\");\n+            });\n+\n+            assertThat(d.getSpec()).satisfies(deploymentSpec -> {\n+                assertThat(deploymentSpec.getTemplate()).satisfies(t -> {\n+                    assertThat(t.getSpec()).satisfies(podSpec -> {\n+                        assertThat(podSpec.getContainers()).hasOnlyOneElementSatisfying(container -> {\n+                            assertThat(container.getEnvFrom()).hasOnlyOneElementSatisfying(env -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk1NjAwMw=="}, "originalCommit": {"oid": "642ccdff8dee16b5458a1470012a4288dd7d9e5c"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4733, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}