{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMTE5NTI5", "number": 7049, "title": "OptaPlanner extension", "bodyText": "Works on GraalVM with -Dnative (see integration test).", "createdAt": "2020-02-06T21:25:11Z", "url": "https://github.com/quarkusio/quarkus/pull/7049", "merged": true, "mergeCommit": {"oid": "384ed5b34780b8163e68f0f3bf0606e8b843c4e9"}, "closed": true, "closedAt": "2020-02-19T10:25:40Z", "author": {"login": "ge0ffrey"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBxngDAFqTM1NDc4NDQzMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFz7GggFqTM2MDk5NjUzNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0Nzg0NDMz", "url": "https://github.com/quarkusio/quarkus/pull/7049#pullrequestreview-354784433", "createdAt": "2020-02-06T21:28:29Z", "commit": {"oid": "f4a6f97d8d9292fd7c73a187c9b70eb31befc661"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMToyODoyOVrOFmq0WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMToyODoyOVrOFmq0WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5MTczNw==", "bodyText": "We talked about removing this fail-fast in the previous PR, to follow hibernate-extension's approach, so I 'll do that in a next PR if that's ok, because of the open debate below.", "url": "https://github.com/quarkusio/quarkus/pull/7049#discussion_r376091737", "createdAt": "2020-02-06T21:28:29Z", "author": {"login": "ge0ffrey"}, "path": "extensions/optaplanner/deployment/src/main/java/io/quarkus/optaplanner/deployment/OptaPlannerProcessor.java", "diffHunk": "@@ -0,0 +1,250 @@\n+package io.quarkus.optaplanner.deployment;\n+\n+import static io.quarkus.deployment.annotations.ExecutionTime.STATIC_INIT;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.drools.core.base.ClassFieldAccessorFactory;\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.Type;\n+import org.optaplanner.core.api.domain.entity.PlanningEntity;\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.config.score.director.ScoreDirectorFactoryConfig;\n+import org.optaplanner.core.config.solver.SolverConfig;\n+import org.optaplanner.core.config.solver.SolverManagerConfig;\n+import org.optaplanner.core.config.solver.termination.TerminationConfig;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.arc.deployment.BeanContainerListenerBuildItem;\n+import io.quarkus.deployment.Capabilities;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveHierarchyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import io.quarkus.deployment.recording.RecorderContext;\n+import io.quarkus.optaplanner.OptaPlannerBeanProvider;\n+import io.quarkus.optaplanner.OptaPlannerObjectMapperCustomizer;\n+import io.quarkus.optaplanner.OptaPlannerRecorder;\n+\n+class OptaPlannerProcessor {\n+\n+    OptaPlannerQuarkusConfig optaPlannerQuarkusConfig;\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FeatureBuildItem.OPTAPLANNER);\n+    }\n+\n+    @BuildStep\n+    void registerAdditionalBeans(BuildProducer<AdditionalBeanBuildItem> additionalBeans) {\n+        // The bean encapsulating the SolverFactory\n+        additionalBeans.produce(new AdditionalBeanBuildItem(OptaPlannerBeanProvider.class));\n+    }\n+\n+    @BuildStep(loadsApplicationClasses = true)\n+    @Record(STATIC_INIT)\n+    void recordSolverFactory(OptaPlannerRecorder recorder, RecorderContext recorderContext,\n+            CombinedIndexBuildItem combinedIndex,\n+            BuildProducer<ReflectiveHierarchyBuildItem> reflectiveHierarchyClass,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n+            BuildProducer<BeanContainerListenerBuildItem> beanContainerListener) {\n+        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+        SolverConfig solverConfig;\n+        if (optaPlannerQuarkusConfig.solverConfigXml.isPresent()) {\n+            String solverConfigXML = optaPlannerQuarkusConfig.solverConfigXml.get();\n+            if (classLoader.getResource(solverConfigXML) == null) {\n+                throw new IllegalStateException(\"Invalid optaplanner.solverConfigXML property (\" + solverConfigXML\n+                        + \"): that classpath resource does not exist.\");\n+            }\n+            solverConfig = SolverConfig.createFromXmlResource(solverConfigXML, classLoader);\n+        } else if (classLoader.getResource(OptaPlannerQuarkusConfig.DEFAULT_SOLVER_CONFIG_URL) != null) {\n+            solverConfig = SolverConfig.createFromXmlResource(\n+                    OptaPlannerQuarkusConfig.DEFAULT_SOLVER_CONFIG_URL, classLoader);\n+        } else {\n+            solverConfig = new SolverConfig(classLoader);\n+        }\n+        // The deployment classLoader must not escape to runtime\n+        solverConfig.setClassLoader(null);\n+\n+        IndexView indexView = combinedIndex.getIndex();\n+        applySolverProperties(recorder, recorderContext, indexView, solverConfig);\n+\n+        if (solverConfig.getSolutionClass() != null) {\n+            Type jandexType = Type.create(DotName.createSimple(solverConfig.getSolutionClass().getName()), Type.Kind.CLASS);\n+            reflectiveHierarchyClass.produce(new ReflectiveHierarchyBuildItem(jandexType));\n+        }\n+        List<Class<?>> reflectiveClassList = new ArrayList<>();\n+        ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = solverConfig.getScoreDirectorFactoryConfig();\n+        if (scoreDirectorFactoryConfig != null) {\n+            if (scoreDirectorFactoryConfig.getEasyScoreCalculatorClass() != null) {\n+                reflectiveClassList.add(scoreDirectorFactoryConfig.getEasyScoreCalculatorClass());\n+            }\n+            if (scoreDirectorFactoryConfig.getConstraintProviderClass() != null) {\n+                reflectiveClassList.add(scoreDirectorFactoryConfig.getConstraintProviderClass());\n+            }\n+            if (scoreDirectorFactoryConfig.getIncrementalScoreCalculatorClass() != null) {\n+                reflectiveClassList.add(scoreDirectorFactoryConfig.getIncrementalScoreCalculatorClass());\n+            }\n+        }\n+        // TODO Add Config classes to workaround for https://issues.redhat.com/browse/PLANNER-1848\n+        reflectiveClassList.add(ScoreDirectorFactoryConfig.class);\n+        reflectiveClassList.add(TerminationConfig.class);\n+        reflectiveClass.produce(\n+                new ReflectiveClassBuildItem(true, false, false,\n+                        reflectiveClassList.stream().map(Class::getName).toArray(String[]::new)));\n+\n+        SolverManagerConfig solverManagerConfig = new SolverManagerConfig();\n+        optaPlannerQuarkusConfig.solverManager.parallelSolverCount.ifPresent(solverManagerConfig::setParallelSolverCount);\n+        beanContainerListener\n+                .produce(new BeanContainerListenerBuildItem(\n+                        recorder.initialize(solverConfig, solverManagerConfig)));\n+    }\n+\n+    private void applySolverProperties(OptaPlannerRecorder recorder, RecorderContext recorderContext,\n+            IndexView indexView, SolverConfig solverConfig) {\n+        if (solverConfig.getScanAnnotatedClassesConfig() != null) {\n+            throw new IllegalArgumentException(\"Do not use scanAnnotatedClasses with the Quarkus extension,\"\n+                    + \" because the Quarkus extension scans too.\\n\"\n+                    + \"Maybe delete the scanAnnotatedClasses element in the solver config.\");\n+        }\n+        if (solverConfig.getSolutionClass() == null) {\n+            solverConfig.setSolutionClass(findSolutionClass(recorderContext, indexView));\n+        }\n+        if (solverConfig.getEntityClassList() == null) {\n+            solverConfig.setEntityClassList(findEntityClassList(recorderContext, indexView));\n+        }\n+        if (solverConfig.getScoreDirectorFactoryConfig() == null) {\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = new ScoreDirectorFactoryConfig();\n+            scoreDirectorFactoryConfig.setConstraintProviderClass(findConstraintProviderClass(recorderContext, indexView));\n+            solverConfig.setScoreDirectorFactoryConfig(scoreDirectorFactoryConfig);\n+        }\n+        optaPlannerQuarkusConfig.solver.environmentMode.ifPresent(solverConfig::setEnvironmentMode);\n+        optaPlannerQuarkusConfig.solver.moveThreadCount.ifPresent(solverConfig::setMoveThreadCount);\n+        applyTerminationProperties(solverConfig);\n+    }\n+\n+    private Class<?> findSolutionClass(RecorderContext recorderContext, IndexView indexView) {\n+        Collection<AnnotationInstance> annotationInstances = indexView.getAnnotations(DotNames.PLANNING_SOLUTION);\n+        if (annotationInstances.size() > 1) {\n+            throw new IllegalStateException(\"Multiple classes (\" + convertAnnotationInstancesToString(annotationInstances)\n+                    + \") found with a @\" + PlanningSolution.class.getSimpleName() + \" annotation.\");\n+        }\n+        if (annotationInstances.isEmpty()) {\n+            throw new IllegalStateException(\"No classes (\" + convertAnnotationInstancesToString(annotationInstances)\n+                    + \") found with a @\" + PlanningSolution.class.getSimpleName() + \" annotation.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4a6f97d8d9292fd7c73a187c9b70eb31befc661"}, "originalPosition": 146}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0Nzk3MTI0", "url": "https://github.com/quarkusio/quarkus/pull/7049#pullrequestreview-354797124", "createdAt": "2020-02-06T21:50:22Z", "commit": {"oid": "f4a6f97d8d9292fd7c73a187c9b70eb31befc661"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cc50a5e3f7cc12e30c3d19326a46d958c0ff08ac", "author": {"user": {"login": "ge0ffrey", "name": "Geoffrey De Smet"}}, "url": "https://github.com/quarkusio/quarkus/commit/cc50a5e3f7cc12e30c3d19326a46d958c0ff08ac", "committedDate": "2020-02-07T15:21:21Z", "message": "Add optaplanner in stages.yml"}, "afterCommit": {"oid": "987bdf58bbe525a9891bbd1f204e1ba556923a2e", "author": {"user": {"login": "ge0ffrey", "name": "Geoffrey De Smet"}}, "url": "https://github.com/quarkusio/quarkus/commit/987bdf58bbe525a9891bbd1f204e1ba556923a2e", "committedDate": "2020-02-07T16:15:12Z", "message": "OptaPlanner extension\n\nDrop the capability for now (thanks Georgios)\n\nUse RecorderContext.proxyClass()\n\nFix type\n\nbom already includes optaplanner-core\n\nmvn optimizes imports apparently\n\nShorter description\n\nRead XML file (during the build of course!)\n\nSync test coverage of Quarkus extension tests with Spring Boot Starter ones\n\nRevert optaplanner version (no snapshot)\n\nPrefix Kogito to extension name\n\nRevert prefix Kogito to extension name\n\nUse thread context classloader instead\n\nFix unit tests + upgrade to optaplanner 7.32\n\nIntegration test for OptaPlanner extension + jackson JSON support for score\n\nConfiguration property solverConfigXml for OptaPlanner\n\nAdd termination support for application.properties + fix never-terminating integration test\n\nMove inner classes up\n\nfix jackson integration + itest: don't wait 5 seconds, terminate on reaching feasibility + add Timeout to test just in case\n\ncode style\n\nAdd illegal scan annotated classes test\n\nAdd solver properties and termination properties tests\n\nimprove test to verify exception during register extension\n\nThe setExceptionException doesn't actually do anything because there is an assertException (see quarkus issue 7000)\n\nInject SolverManager and ScoreManager\n\nInject SolverManager and ScoreManager\n\nRun optaplanner extension natively\n\nClean up dependencies\n\nFix rebase issues\n\nAdd optaplanner in stages.yml"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NDM2MDkx", "url": "https://github.com/quarkusio/quarkus/pull/7049#pullrequestreview-357436091", "createdAt": "2020-02-12T13:08:43Z", "commit": {"oid": "987bdf58bbe525a9891bbd1f204e1ba556923a2e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzowODo0M1rOFot2_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzowODo0M1rOFot2_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzODcxNw==", "bodyText": "Just out of curiosity, what CL will be used at runtime as a result of this?", "url": "https://github.com/quarkusio/quarkus/pull/7049#discussion_r378238717", "createdAt": "2020-02-12T13:08:43Z", "author": {"login": "geoand"}, "path": "extensions/optaplanner/deployment/src/main/java/io/quarkus/optaplanner/deployment/OptaPlannerProcessor.java", "diffHunk": "@@ -0,0 +1,250 @@\n+package io.quarkus.optaplanner.deployment;\n+\n+import static io.quarkus.deployment.annotations.ExecutionTime.STATIC_INIT;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.drools.core.base.ClassFieldAccessorFactory;\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.Type;\n+import org.optaplanner.core.api.domain.entity.PlanningEntity;\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.config.score.director.ScoreDirectorFactoryConfig;\n+import org.optaplanner.core.config.solver.SolverConfig;\n+import org.optaplanner.core.config.solver.SolverManagerConfig;\n+import org.optaplanner.core.config.solver.termination.TerminationConfig;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.arc.deployment.BeanContainerListenerBuildItem;\n+import io.quarkus.deployment.Capabilities;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveHierarchyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import io.quarkus.deployment.recording.RecorderContext;\n+import io.quarkus.optaplanner.OptaPlannerBeanProvider;\n+import io.quarkus.optaplanner.OptaPlannerObjectMapperCustomizer;\n+import io.quarkus.optaplanner.OptaPlannerRecorder;\n+\n+class OptaPlannerProcessor {\n+\n+    OptaPlannerQuarkusConfig optaPlannerQuarkusConfig;\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FeatureBuildItem.OPTAPLANNER);\n+    }\n+\n+    @BuildStep\n+    void registerAdditionalBeans(BuildProducer<AdditionalBeanBuildItem> additionalBeans) {\n+        // The bean encapsulating the SolverFactory\n+        additionalBeans.produce(new AdditionalBeanBuildItem(OptaPlannerBeanProvider.class));\n+    }\n+\n+    @BuildStep(loadsApplicationClasses = true)\n+    @Record(STATIC_INIT)\n+    void recordSolverFactory(OptaPlannerRecorder recorder, RecorderContext recorderContext,\n+            CombinedIndexBuildItem combinedIndex,\n+            BuildProducer<ReflectiveHierarchyBuildItem> reflectiveHierarchyClass,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n+            BuildProducer<BeanContainerListenerBuildItem> beanContainerListener) {\n+        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+        SolverConfig solverConfig;\n+        if (optaPlannerQuarkusConfig.solverConfigXml.isPresent()) {\n+            String solverConfigXML = optaPlannerQuarkusConfig.solverConfigXml.get();\n+            if (classLoader.getResource(solverConfigXML) == null) {\n+                throw new IllegalStateException(\"Invalid optaplanner.solverConfigXML property (\" + solverConfigXML\n+                        + \"): that classpath resource does not exist.\");\n+            }\n+            solverConfig = SolverConfig.createFromXmlResource(solverConfigXML, classLoader);\n+        } else if (classLoader.getResource(OptaPlannerQuarkusConfig.DEFAULT_SOLVER_CONFIG_URL) != null) {\n+            solverConfig = SolverConfig.createFromXmlResource(\n+                    OptaPlannerQuarkusConfig.DEFAULT_SOLVER_CONFIG_URL, classLoader);\n+        } else {\n+            solverConfig = new SolverConfig(classLoader);\n+        }\n+        // The deployment classLoader must not escape to runtime\n+        solverConfig.setClassLoader(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "987bdf58bbe525a9891bbd1f204e1ba556923a2e"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NDQzMDI1", "url": "https://github.com/quarkusio/quarkus/pull/7049#pullrequestreview-357443025", "createdAt": "2020-02-12T13:19:22Z", "commit": {"oid": "987bdf58bbe525a9891bbd1f204e1ba556923a2e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzoxOToyMlrOFouLyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzoxOToyMlrOFouLyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI0NDA0Mw==", "bodyText": "Maybe add a capacity, it looks like 5 is the max this can ever get, right?", "url": "https://github.com/quarkusio/quarkus/pull/7049#discussion_r378244043", "createdAt": "2020-02-12T13:19:22Z", "author": {"login": "geoand"}, "path": "extensions/optaplanner/deployment/src/main/java/io/quarkus/optaplanner/deployment/OptaPlannerProcessor.java", "diffHunk": "@@ -0,0 +1,250 @@\n+package io.quarkus.optaplanner.deployment;\n+\n+import static io.quarkus.deployment.annotations.ExecutionTime.STATIC_INIT;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.drools.core.base.ClassFieldAccessorFactory;\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.Type;\n+import org.optaplanner.core.api.domain.entity.PlanningEntity;\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.config.score.director.ScoreDirectorFactoryConfig;\n+import org.optaplanner.core.config.solver.SolverConfig;\n+import org.optaplanner.core.config.solver.SolverManagerConfig;\n+import org.optaplanner.core.config.solver.termination.TerminationConfig;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.arc.deployment.BeanContainerListenerBuildItem;\n+import io.quarkus.deployment.Capabilities;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveHierarchyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import io.quarkus.deployment.recording.RecorderContext;\n+import io.quarkus.optaplanner.OptaPlannerBeanProvider;\n+import io.quarkus.optaplanner.OptaPlannerObjectMapperCustomizer;\n+import io.quarkus.optaplanner.OptaPlannerRecorder;\n+\n+class OptaPlannerProcessor {\n+\n+    OptaPlannerQuarkusConfig optaPlannerQuarkusConfig;\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FeatureBuildItem.OPTAPLANNER);\n+    }\n+\n+    @BuildStep\n+    void registerAdditionalBeans(BuildProducer<AdditionalBeanBuildItem> additionalBeans) {\n+        // The bean encapsulating the SolverFactory\n+        additionalBeans.produce(new AdditionalBeanBuildItem(OptaPlannerBeanProvider.class));\n+    }\n+\n+    @BuildStep(loadsApplicationClasses = true)\n+    @Record(STATIC_INIT)\n+    void recordSolverFactory(OptaPlannerRecorder recorder, RecorderContext recorderContext,\n+            CombinedIndexBuildItem combinedIndex,\n+            BuildProducer<ReflectiveHierarchyBuildItem> reflectiveHierarchyClass,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n+            BuildProducer<BeanContainerListenerBuildItem> beanContainerListener) {\n+        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+        SolverConfig solverConfig;\n+        if (optaPlannerQuarkusConfig.solverConfigXml.isPresent()) {\n+            String solverConfigXML = optaPlannerQuarkusConfig.solverConfigXml.get();\n+            if (classLoader.getResource(solverConfigXML) == null) {\n+                throw new IllegalStateException(\"Invalid optaplanner.solverConfigXML property (\" + solverConfigXML\n+                        + \"): that classpath resource does not exist.\");\n+            }\n+            solverConfig = SolverConfig.createFromXmlResource(solverConfigXML, classLoader);\n+        } else if (classLoader.getResource(OptaPlannerQuarkusConfig.DEFAULT_SOLVER_CONFIG_URL) != null) {\n+            solverConfig = SolverConfig.createFromXmlResource(\n+                    OptaPlannerQuarkusConfig.DEFAULT_SOLVER_CONFIG_URL, classLoader);\n+        } else {\n+            solverConfig = new SolverConfig(classLoader);\n+        }\n+        // The deployment classLoader must not escape to runtime\n+        solverConfig.setClassLoader(null);\n+\n+        IndexView indexView = combinedIndex.getIndex();\n+        applySolverProperties(recorder, recorderContext, indexView, solverConfig);\n+\n+        if (solverConfig.getSolutionClass() != null) {\n+            Type jandexType = Type.create(DotName.createSimple(solverConfig.getSolutionClass().getName()), Type.Kind.CLASS);\n+            reflectiveHierarchyClass.produce(new ReflectiveHierarchyBuildItem(jandexType));\n+        }\n+        List<Class<?>> reflectiveClassList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "987bdf58bbe525a9891bbd1f204e1ba556923a2e"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NDQ5OTg1", "url": "https://github.com/quarkusio/quarkus/pull/7049#pullrequestreview-357449985", "createdAt": "2020-02-12T13:29:57Z", "commit": {"oid": "987bdf58bbe525a9891bbd1f204e1ba556923a2e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzoyOTo1OFrOFouhvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzoyOTo1OFrOFouhvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI0OTY2Mw==", "bodyText": "Hm, have you tested to make sure this behaves the way you expect it to? And are you sure that OptaPlannerObjectMapperCustomizer is never loaded it the user doesn't add quarkus-jackson.\n@gsmet WDYT about this pattern? I know it's not the way we have been doing things so far, but I do remember @ge0ffrey had a UX issue in mind when doing this, but I don't remember what it was :)", "url": "https://github.com/quarkusio/quarkus/pull/7049#discussion_r378249663", "createdAt": "2020-02-12T13:29:58Z", "author": {"login": "geoand"}, "path": "extensions/optaplanner/runtime/pom.xml", "diffHunk": "@@ -0,0 +1,113 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-optaplanner-parent</artifactId>\n+        <version>999-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>quarkus-optaplanner</artifactId>\n+    <name>Quarkus - OptaPlanner - Runtime</name>\n+    <description>Constraint solving AI for employee rostering, vehicle routing, maintenance scheduling, school timetabling, etc</description>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-arc</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-jackson</artifactId>\n+            <optional>true</optional>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "987bdf58bbe525a9891bbd1f204e1ba556923a2e"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NDUwOTY5", "url": "https://github.com/quarkusio/quarkus/pull/7049#pullrequestreview-357450969", "createdAt": "2020-02-12T13:31:20Z", "commit": {"oid": "987bdf58bbe525a9891bbd1f204e1ba556923a2e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzozMToyMFrOFouk6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzozMToyMFrOFouk6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI1MDQ3Mg==", "bodyText": "IIRC, this isn't picked up automatically because it's part of the module and therefore if the user doesn't have Jackson you don't register the bean.\nPerhaps this warrants a comment on this class as to how things have been done and why because I am sure we will forget about it in the future", "url": "https://github.com/quarkusio/quarkus/pull/7049#discussion_r378250472", "createdAt": "2020-02-12T13:31:20Z", "author": {"login": "geoand"}, "path": "extensions/optaplanner/runtime/src/main/java/io/quarkus/optaplanner/OptaPlannerObjectMapperCustomizer.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package io.quarkus.optaplanner;\n+\n+import javax.inject.Singleton;\n+\n+import org.optaplanner.persistence.jackson.api.OptaPlannerJacksonModule;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import io.quarkus.jackson.ObjectMapperCustomizer;\n+\n+@Singleton\n+public class OptaPlannerObjectMapperCustomizer implements ObjectMapperCustomizer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "987bdf58bbe525a9891bbd1f204e1ba556923a2e"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NDUzNDM3", "url": "https://github.com/quarkusio/quarkus/pull/7049#pullrequestreview-357453437", "createdAt": "2020-02-12T13:34:45Z", "commit": {"oid": "987bdf58bbe525a9891bbd1f204e1ba556923a2e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzozNDo0NVrOFousJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzozNDo0NVrOFousJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI1MjMyNA==", "bodyText": "Can you please update this profile to use what the spring-data-jpa integration test does please? Essentially most of the integration tests use the old way of configuing the native execution, but we want to move to the new way of doing things :)", "url": "https://github.com/quarkusio/quarkus/pull/7049#discussion_r378252324", "createdAt": "2020-02-12T13:34:45Z", "author": {"login": "geoand"}, "path": "integration-tests/optaplanner/pom.xml", "diffHunk": "@@ -0,0 +1,142 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>quarkus-integration-tests-parent</artifactId>\n+        <groupId>io.quarkus</groupId>\n+        <version>999-SNAPSHOT</version>\n+        <relativePath>../</relativePath>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>quarkus-integration-test-optaplanner</artifactId>\n+    <name>Quarkus - Integration Tests - OptaPlanner</name>\n+    <description>Module that contains OptaPlanner related tests</description>\n+\n+    <properties>\n+        <maven.compiler.parameters>true</maven.compiler.parameters>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-arc</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-resteasy</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-resteasy-jackson</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-optaplanner</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.optaplanner</groupId>\n+            <artifactId>optaplanner-persistence-jackson</artifactId>\n+        </dependency>\n+\n+        <!-- test dependencies -->\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-junit5</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.rest-assured</groupId>\n+            <artifactId>rest-assured</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <resources>\n+            <resource>\n+                <directory>src/main/resources</directory>\n+                <filtering>true</filtering>\n+            </resource>\n+        </resources>\n+        <plugins>\n+            <plugin>\n+                <groupId>io.quarkus</groupId>\n+                <artifactId>quarkus-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>build</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <!-- force the locale as we want to explicitly test message interpolation -->\n+                    <argLine>-Duser.language=en</argLine>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <profiles>\n+        <profile>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "987bdf58bbe525a9891bbd1f204e1ba556923a2e"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4Nzg2NTcx", "url": "https://github.com/quarkusio/quarkus/pull/7049#pullrequestreview-358786571", "createdAt": "2020-02-14T08:48:41Z", "commit": {"oid": "12d131b2ab6f9ead0462a8d9a555754444b21286"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODo0ODo0MVrOFpvP3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwOTowMDoyN1rOFpvj0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMxMDA0Nw==", "bodyText": "Would it be possible to change that logic to use the TCCL if null?", "url": "https://github.com/quarkusio/quarkus/pull/7049#discussion_r379310047", "createdAt": "2020-02-14T08:48:41Z", "author": {"login": "gsmet"}, "path": "extensions/optaplanner/deployment/src/main/java/io/quarkus/optaplanner/deployment/OptaPlannerProcessor.java", "diffHunk": "@@ -0,0 +1,250 @@\n+package io.quarkus.optaplanner.deployment;\n+\n+import static io.quarkus.deployment.annotations.ExecutionTime.STATIC_INIT;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.drools.core.base.ClassFieldAccessorFactory;\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.Type;\n+import org.optaplanner.core.api.domain.entity.PlanningEntity;\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.config.score.director.ScoreDirectorFactoryConfig;\n+import org.optaplanner.core.config.solver.SolverConfig;\n+import org.optaplanner.core.config.solver.SolverManagerConfig;\n+import org.optaplanner.core.config.solver.termination.TerminationConfig;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.arc.deployment.BeanContainerListenerBuildItem;\n+import io.quarkus.deployment.Capabilities;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveHierarchyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import io.quarkus.deployment.recording.RecorderContext;\n+import io.quarkus.optaplanner.OptaPlannerBeanProvider;\n+import io.quarkus.optaplanner.OptaPlannerObjectMapperCustomizer;\n+import io.quarkus.optaplanner.OptaPlannerRecorder;\n+\n+class OptaPlannerProcessor {\n+\n+    OptaPlannerQuarkusConfig optaPlannerQuarkusConfig;\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FeatureBuildItem.OPTAPLANNER);\n+    }\n+\n+    @BuildStep\n+    void registerAdditionalBeans(BuildProducer<AdditionalBeanBuildItem> additionalBeans) {\n+        // The bean encapsulating the SolverFactory\n+        additionalBeans.produce(new AdditionalBeanBuildItem(OptaPlannerBeanProvider.class));\n+    }\n+\n+    @BuildStep(loadsApplicationClasses = true)\n+    @Record(STATIC_INIT)\n+    void recordSolverFactory(OptaPlannerRecorder recorder, RecorderContext recorderContext,\n+            CombinedIndexBuildItem combinedIndex,\n+            BuildProducer<ReflectiveHierarchyBuildItem> reflectiveHierarchyClass,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n+            BuildProducer<BeanContainerListenerBuildItem> beanContainerListener) {\n+        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+        SolverConfig solverConfig;\n+        if (optaPlannerQuarkusConfig.solverConfigXml.isPresent()) {\n+            String solverConfigXML = optaPlannerQuarkusConfig.solverConfigXml.get();\n+            if (classLoader.getResource(solverConfigXML) == null) {\n+                throw new IllegalStateException(\"Invalid optaplanner.solverConfigXML property (\" + solverConfigXML\n+                        + \"): that classpath resource does not exist.\");\n+            }\n+            solverConfig = SolverConfig.createFromXmlResource(solverConfigXML, classLoader);\n+        } else if (classLoader.getResource(OptaPlannerQuarkusConfig.DEFAULT_SOLVER_CONFIG_URL) != null) {\n+            solverConfig = SolverConfig.createFromXmlResource(\n+                    OptaPlannerQuarkusConfig.DEFAULT_SOLVER_CONFIG_URL, classLoader);\n+        } else {\n+            solverConfig = new SolverConfig(classLoader);\n+        }\n+        // The deployment classLoader must not escape to runtime\n+        solverConfig.setClassLoader(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIzODcxNw=="}, "originalCommit": {"oid": "987bdf58bbe525a9891bbd1f204e1ba556923a2e"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMxMTA5NQ==", "bodyText": "Yeah. I would avoid A). I would do C with a warning instead of staying quiet if some configuration properties are defined.", "url": "https://github.com/quarkusio/quarkus/pull/7049#discussion_r379311095", "createdAt": "2020-02-14T08:51:05Z", "author": {"login": "gsmet"}, "path": "extensions/optaplanner/deployment/src/main/java/io/quarkus/optaplanner/deployment/OptaPlannerProcessor.java", "diffHunk": "@@ -0,0 +1,250 @@\n+package io.quarkus.optaplanner.deployment;\n+\n+import static io.quarkus.deployment.annotations.ExecutionTime.STATIC_INIT;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.drools.core.base.ClassFieldAccessorFactory;\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.Type;\n+import org.optaplanner.core.api.domain.entity.PlanningEntity;\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.config.score.director.ScoreDirectorFactoryConfig;\n+import org.optaplanner.core.config.solver.SolverConfig;\n+import org.optaplanner.core.config.solver.SolverManagerConfig;\n+import org.optaplanner.core.config.solver.termination.TerminationConfig;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.arc.deployment.BeanContainerListenerBuildItem;\n+import io.quarkus.deployment.Capabilities;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveHierarchyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import io.quarkus.deployment.recording.RecorderContext;\n+import io.quarkus.optaplanner.OptaPlannerBeanProvider;\n+import io.quarkus.optaplanner.OptaPlannerObjectMapperCustomizer;\n+import io.quarkus.optaplanner.OptaPlannerRecorder;\n+\n+class OptaPlannerProcessor {\n+\n+    OptaPlannerQuarkusConfig optaPlannerQuarkusConfig;\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FeatureBuildItem.OPTAPLANNER);\n+    }\n+\n+    @BuildStep\n+    void registerAdditionalBeans(BuildProducer<AdditionalBeanBuildItem> additionalBeans) {\n+        // The bean encapsulating the SolverFactory\n+        additionalBeans.produce(new AdditionalBeanBuildItem(OptaPlannerBeanProvider.class));\n+    }\n+\n+    @BuildStep(loadsApplicationClasses = true)\n+    @Record(STATIC_INIT)\n+    void recordSolverFactory(OptaPlannerRecorder recorder, RecorderContext recorderContext,\n+            CombinedIndexBuildItem combinedIndex,\n+            BuildProducer<ReflectiveHierarchyBuildItem> reflectiveHierarchyClass,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n+            BuildProducer<BeanContainerListenerBuildItem> beanContainerListener) {\n+        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+        SolverConfig solverConfig;\n+        if (optaPlannerQuarkusConfig.solverConfigXml.isPresent()) {\n+            String solverConfigXML = optaPlannerQuarkusConfig.solverConfigXml.get();\n+            if (classLoader.getResource(solverConfigXML) == null) {\n+                throw new IllegalStateException(\"Invalid optaplanner.solverConfigXML property (\" + solverConfigXML\n+                        + \"): that classpath resource does not exist.\");\n+            }\n+            solverConfig = SolverConfig.createFromXmlResource(solverConfigXML, classLoader);\n+        } else if (classLoader.getResource(OptaPlannerQuarkusConfig.DEFAULT_SOLVER_CONFIG_URL) != null) {\n+            solverConfig = SolverConfig.createFromXmlResource(\n+                    OptaPlannerQuarkusConfig.DEFAULT_SOLVER_CONFIG_URL, classLoader);\n+        } else {\n+            solverConfig = new SolverConfig(classLoader);\n+        }\n+        // The deployment classLoader must not escape to runtime\n+        solverConfig.setClassLoader(null);\n+\n+        IndexView indexView = combinedIndex.getIndex();\n+        applySolverProperties(recorder, recorderContext, indexView, solverConfig);\n+\n+        if (solverConfig.getSolutionClass() != null) {\n+            Type jandexType = Type.create(DotName.createSimple(solverConfig.getSolutionClass().getName()), Type.Kind.CLASS);\n+            reflectiveHierarchyClass.produce(new ReflectiveHierarchyBuildItem(jandexType));\n+        }\n+        List<Class<?>> reflectiveClassList = new ArrayList<>();\n+        ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = solverConfig.getScoreDirectorFactoryConfig();\n+        if (scoreDirectorFactoryConfig != null) {\n+            if (scoreDirectorFactoryConfig.getEasyScoreCalculatorClass() != null) {\n+                reflectiveClassList.add(scoreDirectorFactoryConfig.getEasyScoreCalculatorClass());\n+            }\n+            if (scoreDirectorFactoryConfig.getConstraintProviderClass() != null) {\n+                reflectiveClassList.add(scoreDirectorFactoryConfig.getConstraintProviderClass());\n+            }\n+            if (scoreDirectorFactoryConfig.getIncrementalScoreCalculatorClass() != null) {\n+                reflectiveClassList.add(scoreDirectorFactoryConfig.getIncrementalScoreCalculatorClass());\n+            }\n+        }\n+        // TODO Add Config classes to workaround for https://issues.redhat.com/browse/PLANNER-1848\n+        reflectiveClassList.add(ScoreDirectorFactoryConfig.class);\n+        reflectiveClassList.add(TerminationConfig.class);\n+        reflectiveClass.produce(\n+                new ReflectiveClassBuildItem(true, false, false,\n+                        reflectiveClassList.stream().map(Class::getName).toArray(String[]::new)));\n+\n+        SolverManagerConfig solverManagerConfig = new SolverManagerConfig();\n+        optaPlannerQuarkusConfig.solverManager.parallelSolverCount.ifPresent(solverManagerConfig::setParallelSolverCount);\n+        beanContainerListener\n+                .produce(new BeanContainerListenerBuildItem(\n+                        recorder.initialize(solverConfig, solverManagerConfig)));\n+    }\n+\n+    private void applySolverProperties(OptaPlannerRecorder recorder, RecorderContext recorderContext,\n+            IndexView indexView, SolverConfig solverConfig) {\n+        if (solverConfig.getScanAnnotatedClassesConfig() != null) {\n+            throw new IllegalArgumentException(\"Do not use scanAnnotatedClasses with the Quarkus extension,\"\n+                    + \" because the Quarkus extension scans too.\\n\"\n+                    + \"Maybe delete the scanAnnotatedClasses element in the solver config.\");\n+        }\n+        if (solverConfig.getSolutionClass() == null) {\n+            solverConfig.setSolutionClass(findSolutionClass(recorderContext, indexView));\n+        }\n+        if (solverConfig.getEntityClassList() == null) {\n+            solverConfig.setEntityClassList(findEntityClassList(recorderContext, indexView));\n+        }\n+        if (solverConfig.getScoreDirectorFactoryConfig() == null) {\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = new ScoreDirectorFactoryConfig();\n+            scoreDirectorFactoryConfig.setConstraintProviderClass(findConstraintProviderClass(recorderContext, indexView));\n+            solverConfig.setScoreDirectorFactoryConfig(scoreDirectorFactoryConfig);\n+        }\n+        optaPlannerQuarkusConfig.solver.environmentMode.ifPresent(solverConfig::setEnvironmentMode);\n+        optaPlannerQuarkusConfig.solver.moveThreadCount.ifPresent(solverConfig::setMoveThreadCount);\n+        applyTerminationProperties(solverConfig);\n+    }\n+\n+    private Class<?> findSolutionClass(RecorderContext recorderContext, IndexView indexView) {\n+        Collection<AnnotationInstance> annotationInstances = indexView.getAnnotations(DotNames.PLANNING_SOLUTION);\n+        if (annotationInstances.size() > 1) {\n+            throw new IllegalStateException(\"Multiple classes (\" + convertAnnotationInstancesToString(annotationInstances)\n+                    + \") found with a @\" + PlanningSolution.class.getSimpleName() + \" annotation.\");\n+        }\n+        if (annotationInstances.isEmpty()) {\n+            throw new IllegalStateException(\"No classes (\" + convertAnnotationInstancesToString(annotationInstances)\n+                    + \") found with a @\" + PlanningSolution.class.getSimpleName() + \" annotation.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5MTczNw=="}, "originalCommit": {"oid": "f4a6f97d8d9292fd7c73a187c9b70eb31befc661"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMxMTkyNw==", "bodyText": "What annoys me a bit here is that if you use Jackson for your REST services and OptaPlanner without Jackson persistence, you end up with this exception. Or did I misunderstand?", "url": "https://github.com/quarkusio/quarkus/pull/7049#discussion_r379311927", "createdAt": "2020-02-14T08:53:02Z", "author": {"login": "gsmet"}, "path": "extensions/optaplanner/deployment/src/main/java/io/quarkus/optaplanner/deployment/OptaPlannerProcessor.java", "diffHunk": "@@ -0,0 +1,250 @@\n+package io.quarkus.optaplanner.deployment;\n+\n+import static io.quarkus.deployment.annotations.ExecutionTime.STATIC_INIT;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.drools.core.base.ClassFieldAccessorFactory;\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.Type;\n+import org.optaplanner.core.api.domain.entity.PlanningEntity;\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.config.score.director.ScoreDirectorFactoryConfig;\n+import org.optaplanner.core.config.solver.SolverConfig;\n+import org.optaplanner.core.config.solver.SolverManagerConfig;\n+import org.optaplanner.core.config.solver.termination.TerminationConfig;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.arc.deployment.BeanContainerListenerBuildItem;\n+import io.quarkus.deployment.Capabilities;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveHierarchyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import io.quarkus.deployment.recording.RecorderContext;\n+import io.quarkus.optaplanner.OptaPlannerBeanProvider;\n+import io.quarkus.optaplanner.OptaPlannerObjectMapperCustomizer;\n+import io.quarkus.optaplanner.OptaPlannerRecorder;\n+\n+class OptaPlannerProcessor {\n+\n+    OptaPlannerQuarkusConfig optaPlannerQuarkusConfig;\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FeatureBuildItem.OPTAPLANNER);\n+    }\n+\n+    @BuildStep\n+    void registerAdditionalBeans(BuildProducer<AdditionalBeanBuildItem> additionalBeans) {\n+        // The bean encapsulating the SolverFactory\n+        additionalBeans.produce(new AdditionalBeanBuildItem(OptaPlannerBeanProvider.class));\n+    }\n+\n+    @BuildStep(loadsApplicationClasses = true)\n+    @Record(STATIC_INIT)\n+    void recordSolverFactory(OptaPlannerRecorder recorder, RecorderContext recorderContext,\n+            CombinedIndexBuildItem combinedIndex,\n+            BuildProducer<ReflectiveHierarchyBuildItem> reflectiveHierarchyClass,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n+            BuildProducer<BeanContainerListenerBuildItem> beanContainerListener) {\n+        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+        SolverConfig solverConfig;\n+        if (optaPlannerQuarkusConfig.solverConfigXml.isPresent()) {\n+            String solverConfigXML = optaPlannerQuarkusConfig.solverConfigXml.get();\n+            if (classLoader.getResource(solverConfigXML) == null) {\n+                throw new IllegalStateException(\"Invalid optaplanner.solverConfigXML property (\" + solverConfigXML\n+                        + \"): that classpath resource does not exist.\");\n+            }\n+            solverConfig = SolverConfig.createFromXmlResource(solverConfigXML, classLoader);\n+        } else if (classLoader.getResource(OptaPlannerQuarkusConfig.DEFAULT_SOLVER_CONFIG_URL) != null) {\n+            solverConfig = SolverConfig.createFromXmlResource(\n+                    OptaPlannerQuarkusConfig.DEFAULT_SOLVER_CONFIG_URL, classLoader);\n+        } else {\n+            solverConfig = new SolverConfig(classLoader);\n+        }\n+        // The deployment classLoader must not escape to runtime\n+        solverConfig.setClassLoader(null);\n+\n+        IndexView indexView = combinedIndex.getIndex();\n+        applySolverProperties(recorder, recorderContext, indexView, solverConfig);\n+\n+        if (solverConfig.getSolutionClass() != null) {\n+            Type jandexType = Type.create(DotName.createSimple(solverConfig.getSolutionClass().getName()), Type.Kind.CLASS);\n+            reflectiveHierarchyClass.produce(new ReflectiveHierarchyBuildItem(jandexType));\n+        }\n+        List<Class<?>> reflectiveClassList = new ArrayList<>(5);\n+        ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = solverConfig.getScoreDirectorFactoryConfig();\n+        if (scoreDirectorFactoryConfig != null) {\n+            if (scoreDirectorFactoryConfig.getEasyScoreCalculatorClass() != null) {\n+                reflectiveClassList.add(scoreDirectorFactoryConfig.getEasyScoreCalculatorClass());\n+            }\n+            if (scoreDirectorFactoryConfig.getConstraintProviderClass() != null) {\n+                reflectiveClassList.add(scoreDirectorFactoryConfig.getConstraintProviderClass());\n+            }\n+            if (scoreDirectorFactoryConfig.getIncrementalScoreCalculatorClass() != null) {\n+                reflectiveClassList.add(scoreDirectorFactoryConfig.getIncrementalScoreCalculatorClass());\n+            }\n+        }\n+        // TODO Add Config classes to workaround for https://issues.redhat.com/browse/PLANNER-1848, fixed in optaplanner 7.33.0.Final\n+        reflectiveClassList.add(ScoreDirectorFactoryConfig.class);\n+        reflectiveClassList.add(TerminationConfig.class);\n+        reflectiveClass.produce(\n+                new ReflectiveClassBuildItem(true, false, false,\n+                        reflectiveClassList.stream().map(Class::getName).toArray(String[]::new)));\n+\n+        SolverManagerConfig solverManagerConfig = new SolverManagerConfig();\n+        optaPlannerQuarkusConfig.solverManager.parallelSolverCount.ifPresent(solverManagerConfig::setParallelSolverCount);\n+        beanContainerListener\n+                .produce(new BeanContainerListenerBuildItem(\n+                        recorder.initialize(solverConfig, solverManagerConfig)));\n+    }\n+\n+    private void applySolverProperties(OptaPlannerRecorder recorder, RecorderContext recorderContext,\n+            IndexView indexView, SolverConfig solverConfig) {\n+        if (solverConfig.getScanAnnotatedClassesConfig() != null) {\n+            throw new IllegalArgumentException(\"Do not use scanAnnotatedClasses with the Quarkus extension,\"\n+                    + \" because the Quarkus extension scans too.\\n\"\n+                    + \"Maybe delete the scanAnnotatedClasses element in the solver config.\");\n+        }\n+        if (solverConfig.getSolutionClass() == null) {\n+            solverConfig.setSolutionClass(findSolutionClass(recorderContext, indexView));\n+        }\n+        if (solverConfig.getEntityClassList() == null) {\n+            solverConfig.setEntityClassList(findEntityClassList(recorderContext, indexView));\n+        }\n+        if (solverConfig.getScoreDirectorFactoryConfig() == null) {\n+            ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = new ScoreDirectorFactoryConfig();\n+            scoreDirectorFactoryConfig.setConstraintProviderClass(findConstraintProviderClass(recorderContext, indexView));\n+            solverConfig.setScoreDirectorFactoryConfig(scoreDirectorFactoryConfig);\n+        }\n+        optaPlannerQuarkusConfig.solver.environmentMode.ifPresent(solverConfig::setEnvironmentMode);\n+        optaPlannerQuarkusConfig.solver.moveThreadCount.ifPresent(solverConfig::setMoveThreadCount);\n+        applyTerminationProperties(solverConfig);\n+    }\n+\n+    private Class<?> findSolutionClass(RecorderContext recorderContext, IndexView indexView) {\n+        Collection<AnnotationInstance> annotationInstances = indexView.getAnnotations(DotNames.PLANNING_SOLUTION);\n+        if (annotationInstances.size() > 1) {\n+            throw new IllegalStateException(\"Multiple classes (\" + convertAnnotationInstancesToString(annotationInstances)\n+                    + \") found with a @\" + PlanningSolution.class.getSimpleName() + \" annotation.\");\n+        }\n+        if (annotationInstances.isEmpty()) {\n+            throw new IllegalStateException(\"No classes (\" + convertAnnotationInstancesToString(annotationInstances)\n+                    + \") found with a @\" + PlanningSolution.class.getSimpleName() + \" annotation.\");\n+        }\n+        AnnotationTarget solutionTarget = annotationInstances.iterator().next().target();\n+        if (solutionTarget.kind() != AnnotationTarget.Kind.CLASS) {\n+            throw new IllegalStateException(\"A target (\" + solutionTarget\n+                    + \") with a @\" + PlanningSolution.class.getSimpleName() + \" must be a class.\");\n+        }\n+\n+        return recorderContext.classProxy(solutionTarget.asClass().name().toString());\n+    }\n+\n+    private List<Class<?>> findEntityClassList(RecorderContext recorderContext, IndexView indexView) {\n+        Collection<AnnotationInstance> annotationInstances = indexView.getAnnotations(DotNames.PLANNING_ENTITY);\n+        if (annotationInstances.isEmpty()) {\n+            throw new IllegalStateException(\"No classes (\" + convertAnnotationInstancesToString(annotationInstances)\n+                    + \") found with a @\" + PlanningEntity.class.getSimpleName() + \" annotation.\");\n+        }\n+        List<AnnotationTarget> targetList = annotationInstances.stream()\n+                .map(AnnotationInstance::target)\n+                .collect(Collectors.toList());\n+        if (targetList.stream().anyMatch(target -> target.kind() != AnnotationTarget.Kind.CLASS)) {\n+            throw new IllegalStateException(\"All targets (\" + targetList\n+                    + \") with a @\" + PlanningEntity.class.getSimpleName() + \" must be a class.\");\n+        }\n+        return targetList.stream()\n+                .map(target -> recorderContext.classProxy(target.asClass().name().toString()))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private Class<? extends ConstraintProvider> findConstraintProviderClass(RecorderContext recorderContext,\n+            IndexView indexView) {\n+        Collection<ClassInfo> classInfos = indexView.getAllKnownImplementors(\n+                DotName.createSimple(ConstraintProvider.class.getName()));\n+        if (classInfos.size() > 1) {\n+            throw new IllegalStateException(\"Multiple classes (\" + convertClassInfosToString(classInfos)\n+                    + \") found that implement the interface \" + ConstraintProvider.class.getSimpleName() + \".\");\n+        }\n+        if (classInfos.isEmpty()) {\n+            throw new IllegalStateException(\"No classes (\" + convertClassInfosToString(classInfos)\n+                    + \") found that implement the interface \" + ConstraintProvider.class.getSimpleName() + \".\");\n+        }\n+        String constraintProviderClassName = classInfos.iterator().next().name().toString();\n+        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+        try {\n+            // Don't use recorderContext.classProxy(constraintProviderClassName)\n+            // because ReflectiveClassBuildItem cannot cope with a class proxy\n+            return (Class<? extends ConstraintProvider>) classLoader.loadClass(constraintProviderClassName);\n+        } catch (ClassNotFoundException e) {\n+            throw new IllegalStateException(\"The constraintProviderClass (\" + constraintProviderClassName\n+                    + \") cannot be created during deployment.\", e);\n+        }\n+    }\n+\n+    private void applyTerminationProperties(SolverConfig solverConfig) {\n+        TerminationConfig terminationConfig = solverConfig.getTerminationConfig();\n+        if (terminationConfig == null) {\n+            terminationConfig = new TerminationConfig();\n+            solverConfig.setTerminationConfig(terminationConfig);\n+        }\n+        optaPlannerQuarkusConfig.solver.termination.spentLimit.ifPresent(terminationConfig::setSpentLimit);\n+        optaPlannerQuarkusConfig.solver.termination.unimprovedSpentLimit.ifPresent(terminationConfig::setUnimprovedSpentLimit);\n+        optaPlannerQuarkusConfig.solver.termination.bestScoreLimit.ifPresent(terminationConfig::setBestScoreLimit);\n+    }\n+\n+    private String convertAnnotationInstancesToString(Collection<AnnotationInstance> annotationInstances) {\n+        return \"[\" + annotationInstances.stream().map(instance -> instance.target().toString())\n+                .collect(Collectors.joining(\", \")) + \"]\";\n+    }\n+\n+    private String convertClassInfosToString(Collection<ClassInfo> classInfos) {\n+        return \"[\" + classInfos.stream().map(instance -> instance.name().toString())\n+                .collect(Collectors.joining(\", \")) + \"]\";\n+    }\n+\n+    @BuildStep\n+    public RuntimeInitializedClassBuildItem nativeImageDroolsTricks() {\n+        return new RuntimeInitializedClassBuildItem(ClassFieldAccessorFactory.class.getName());\n+    }\n+\n+    // TODO health check\n+\n+    @BuildStep\n+    void registerOptaPlannerJacksonModule(BuildProducer<AdditionalBeanBuildItem> additionalBeans,\n+            Capabilities capabilities) {\n+        if (!capabilities.isCapabilityPresent(Capabilities.JACKSON)) {\n+            return;\n+        }\n+        try {\n+            Class.forName(\"org.optaplanner.persistence.jackson.api.OptaPlannerJacksonModule\", false,\n+                    Thread.currentThread().getContextClassLoader());\n+        } catch (Exception e) {\n+            // Fail fast during build to avoid a certain runtime failure\n+            throw new IllegalStateException(\n+                    \"When using both Jackson and OptaPlanner,\"\n+                            + \" add a dependency on org.optaplanner:optaplanner-persistence-jackson too.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12d131b2ab6f9ead0462a8d9a555754444b21286"}, "originalPosition": 240}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMxMjI0Ng==", "bodyText": "Call it OptaPlannerBuildTimeConfig and get rid of the comment.", "url": "https://github.com/quarkusio/quarkus/pull/7049#discussion_r379312246", "createdAt": "2020-02-14T08:53:44Z", "author": {"login": "gsmet"}, "path": "extensions/optaplanner/deployment/src/main/java/io/quarkus/optaplanner/deployment/OptaPlannerQuarkusConfig.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.quarkus.optaplanner.deployment;\n+\n+import java.util.Optional;\n+\n+import org.optaplanner.core.config.solver.SolverConfig;\n+import org.optaplanner.core.config.solver.SolverManagerConfig;\n+\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+\n+// Not named OptaPlannerConfig because classes ending with just \"Config\" collide with OptaPlanner's API\n+@ConfigRoot(name = \"optaplanner\")\n+public class OptaPlannerQuarkusConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12d131b2ab6f9ead0462a8d9a555754444b21286"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMxMjYwOQ==", "bodyText": "That looks like a runtime property to me.", "url": "https://github.com/quarkusio/quarkus/pull/7049#discussion_r379312609", "createdAt": "2020-02-14T08:54:31Z", "author": {"login": "gsmet"}, "path": "extensions/optaplanner/deployment/src/main/java/io/quarkus/optaplanner/deployment/SolverManagerQuarkusConfig.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package io.quarkus.optaplanner.deployment;\n+\n+import java.util.Optional;\n+\n+import org.optaplanner.core.config.solver.SolverManagerConfig;\n+\n+import io.quarkus.runtime.annotations.ConfigGroup;\n+import io.quarkus.runtime.annotations.ConfigItem;\n+\n+/**\n+ * Subset of OptaPlanner's {@link SolverManagerConfig}.\n+ */\n+@ConfigGroup\n+public class SolverManagerQuarkusConfig {\n+\n+    /**\n+     * The number of solvers that run in parallel. This directly influences CPU consumption.\n+     * Defaults to {@value SolverManagerConfig#PARALLEL_SOLVER_COUNT_AUTO}.\n+     * Other options include a number or formula based on the available processor count.\n+     */\n+    @ConfigItem\n+    Optional<String> parallelSolverCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12d131b2ab6f9ead0462a8d9a555754444b21286"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMxMjY1NA==", "bodyText": "That looks like a runtime property to me.", "url": "https://github.com/quarkusio/quarkus/pull/7049#discussion_r379312654", "createdAt": "2020-02-14T08:54:37Z", "author": {"login": "gsmet"}, "path": "extensions/optaplanner/deployment/src/main/java/io/quarkus/optaplanner/deployment/SolverQuarkusConfig.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.optaplanner.deployment;\n+\n+import java.util.Optional;\n+\n+import org.optaplanner.core.config.solver.EnvironmentMode;\n+import org.optaplanner.core.config.solver.SolverConfig;\n+import org.optaplanner.core.config.solver.termination.TerminationConfig;\n+\n+import io.quarkus.runtime.annotations.ConfigGroup;\n+import io.quarkus.runtime.annotations.ConfigItem;\n+\n+/**\n+ * Subset of OptaPlanner's {@link SolverConfig}.\n+ */\n+@ConfigGroup\n+public class SolverQuarkusConfig {\n+\n+    /**\n+     * Enable runtime assertions to detect common bugs in your implementation during development.\n+     * Defaults to {@link EnvironmentMode#REPRODUCIBLE}.\n+     */\n+    @ConfigItem\n+    Optional<EnvironmentMode> environmentMode;\n+    /**\n+     * Enable multithreaded solving for a single problem, which increases CPU consumption.\n+     * Defaults to {@value SolverConfig#MOVE_THREAD_COUNT_NONE}.\n+     * Other options include {@value SolverConfig#MOVE_THREAD_COUNT_AUTO}, a number\n+     * or formula based on the available processor count.\n+     */\n+    @ConfigItem\n+    Optional<String> moveThreadCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12d131b2ab6f9ead0462a8d9a555754444b21286"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMxMjgxOA==", "bodyText": "That looks like a runtime property to me.", "url": "https://github.com/quarkusio/quarkus/pull/7049#discussion_r379312818", "createdAt": "2020-02-14T08:55:05Z", "author": {"login": "gsmet"}, "path": "extensions/optaplanner/deployment/src/main/java/io/quarkus/optaplanner/deployment/TerminationQuarkusConfig.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.optaplanner.deployment;\n+\n+import java.time.Duration;\n+import java.util.Optional;\n+\n+import org.optaplanner.core.config.solver.termination.TerminationConfig;\n+\n+import io.quarkus.runtime.annotations.ConfigGroup;\n+import io.quarkus.runtime.annotations.ConfigItem;\n+\n+/**\n+ * Subset of OptaPlanner's {@link TerminationConfig}.\n+ */\n+@ConfigGroup\n+public class TerminationQuarkusConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12d131b2ab6f9ead0462a8d9a555754444b21286"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMxNDA2Mw==", "bodyText": "Well, they would have to add the optaplanner Jackson dependency anyway, no? That's not very different from adding an extension.\nI wouldn't make it a blocker to merge this PR if we are sure everything works when Jackson is not there.", "url": "https://github.com/quarkusio/quarkus/pull/7049#discussion_r379314063", "createdAt": "2020-02-14T08:57:55Z", "author": {"login": "gsmet"}, "path": "extensions/optaplanner/runtime/pom.xml", "diffHunk": "@@ -0,0 +1,113 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-optaplanner-parent</artifactId>\n+        <version>999-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>quarkus-optaplanner</artifactId>\n+    <name>Quarkus - OptaPlanner - Runtime</name>\n+    <description>Constraint solving AI for employee rostering, vehicle routing, maintenance scheduling, school timetabling, etc</description>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-arc</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-jackson</artifactId>\n+            <optional>true</optional>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI0OTY2Mw=="}, "originalCommit": {"oid": "987bdf58bbe525a9891bbd1f204e1ba556923a2e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMxNDQ1MQ==", "bodyText": "How do you expect Kogito to work in native mode if we don't depend on the Kogito extension?", "url": "https://github.com/quarkusio/quarkus/pull/7049#discussion_r379314451", "createdAt": "2020-02-14T08:58:48Z", "author": {"login": "gsmet"}, "path": "extensions/optaplanner/runtime/pom.xml", "diffHunk": "@@ -0,0 +1,113 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-optaplanner-parent</artifactId>\n+        <version>999-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>quarkus-optaplanner</artifactId>\n+    <name>Quarkus - OptaPlanner - Runtime</name>\n+    <description>Constraint solving AI for employee rostering, vehicle routing, maintenance scheduling, school timetabling, etc</description>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-core</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-arc</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-jackson</artifactId>\n+            <optional>true</optional>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.optaplanner</groupId>\n+            <artifactId>optaplanner-core</artifactId>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.kie</groupId>\n+                    <artifactId>kie-api</artifactId>\n+                </exclusion>\n+                <exclusion>\n+                    <groupId>org.kie</groupId>\n+                    <artifactId>kie-internal</artifactId>\n+                </exclusion>\n+                <exclusion>\n+                    <groupId>org.drools</groupId>\n+                    <artifactId>drools-core</artifactId>\n+                </exclusion>\n+                <exclusion>\n+                    <groupId>org.drools</groupId>\n+                    <artifactId>drools-compiler</artifactId>\n+                </exclusion>\n+                <exclusion>\n+                    <groupId>org.drools</groupId>\n+                    <artifactId>drools-canonical-model</artifactId>\n+                </exclusion>\n+                <exclusion>\n+                    <groupId>org.drools</groupId>\n+                    <artifactId>drools-model-compiler</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.kie.kogito</groupId>\n+            <artifactId>kogito-api</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.kie.kogito</groupId>\n+            <artifactId>kogito-drools</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12d131b2ab6f9ead0462a8d9a555754444b21286"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMxNDg2MA==", "bodyText": "Let's add the guide URL when we have one.", "url": "https://github.com/quarkusio/quarkus/pull/7049#discussion_r379314860", "createdAt": "2020-02-14T08:59:43Z", "author": {"login": "gsmet"}, "path": "extensions/optaplanner/runtime/src/main/resources/META-INF/quarkus-extension.yaml", "diffHunk": "@@ -0,0 +1,16 @@\n+---\n+name: \"OptaPlanner constraint solver AI\"\n+metadata:\n+  keywords:\n+  - \"optaplanner\"\n+  - \"kogito\"\n+  - \"constraint-solver\"\n+  - \"artificial-intelligence\"\n+  - \"employee-rostering\"\n+  - \"vehicle-routing-problem\"\n+  - \"maintenance-scheduling\"\n+  - \"timetabling\"\n+  guide: \"https://quarkus.io/guides/optaplanner\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12d131b2ab6f9ead0462a8d9a555754444b21286"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMxNTA2Mw==", "bodyText": "Please no license header.", "url": "https://github.com/quarkusio/quarkus/pull/7049#discussion_r379315063", "createdAt": "2020-02-14T09:00:15Z", "author": {"login": "gsmet"}, "path": "integration-tests/optaplanner/src/main/java/io/quarkus/it/optaplanner/domain/ITestdataPlanningSolution.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12d131b2ab6f9ead0462a8d9a555754444b21286"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMxNTE1Mg==", "bodyText": "Same here, well, remove all of them :).", "url": "https://github.com/quarkusio/quarkus/pull/7049#discussion_r379315152", "createdAt": "2020-02-14T09:00:27Z", "author": {"login": "gsmet"}, "path": "integration-tests/optaplanner/src/main/java/io/quarkus/it/optaplanner/solver/ITestdataPlanningConstraintProvider.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12d131b2ab6f9ead0462a8d9a555754444b21286"}, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "12d131b2ab6f9ead0462a8d9a555754444b21286", "author": {"user": {"login": "ge0ffrey", "name": "Geoffrey De Smet"}}, "url": "https://github.com/quarkusio/quarkus/commit/12d131b2ab6f9ead0462a8d9a555754444b21286", "committedDate": "2020-02-13T07:44:54Z", "message": "Follow spring-data-jpa IT test + ArrayList capacity + javadoc of ObjectMapperCustomizer"}, "afterCommit": {"oid": "1c8edb3203827a7b6bbbd08263b9795f4c352adf", "author": {"user": {"login": "ge0ffrey", "name": "Geoffrey De Smet"}}, "url": "https://github.com/quarkusio/quarkus/commit/1c8edb3203827a7b6bbbd08263b9795f4c352adf", "committedDate": "2020-02-14T10:04:22Z", "message": "Comment out guide until it's released"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "06a20a28456914c1d9e04993567e556941e10a17", "author": {"user": {"login": "ge0ffrey", "name": "Geoffrey De Smet"}}, "url": "https://github.com/quarkusio/quarkus/commit/06a20a28456914c1d9e04993567e556941e10a17", "committedDate": "2020-02-14T11:39:34Z", "message": "Rename to BuildTimeConfig"}, "afterCommit": {"oid": "a9d2fdb9388ecf94dc315ef363a0b2aa710d0cb8", "author": {"user": {"login": "ge0ffrey", "name": "Geoffrey De Smet"}}, "url": "https://github.com/quarkusio/quarkus/commit/a9d2fdb9388ecf94dc315ef363a0b2aa710d0cb8", "committedDate": "2020-02-17T10:32:52Z", "message": "OptaPlanner extension"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NzgxNzk0", "url": "https://github.com/quarkusio/quarkus/pull/7049#pullrequestreview-359781794", "createdAt": "2020-02-17T14:40:14Z", "commit": {"oid": "a9d2fdb9388ecf94dc315ef363a0b2aa710d0cb8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDo0MDoxNFrOFqmtew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDo0Nzo1OVrOFqm9-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxODc0Nw==", "bodyText": "There is an indentation issue.", "url": "https://github.com/quarkusio/quarkus/pull/7049#discussion_r380218747", "createdAt": "2020-02-17T14:40:14Z", "author": {"login": "gsmet"}, "path": "bom/runtime/pom.xml", "diffHunk": "@@ -166,6 +166,7 @@\n         <hibernate-quarkus-local-cache.version>0.1.0</hibernate-quarkus-local-cache.version>\n         <kogito.version>0.7.1</kogito.version>\n         <kubernetes-client.version>4.8.0</kubernetes-client.version>\n+      <optaplanner.version>7.32.0.Final</optaplanner.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d2fdb9388ecf94dc315ef363a0b2aa710d0cb8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxOTQ5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <description>Make Score, etc look pretty in JSON.</description>\n          \n          \n            \n                <description>Make Score, etc look pretty in JSON</description>\n          \n      \n    \n    \n  \n\nNote that this is the description that will be on code.quarkus.io. I'm not sure the current description is very helpful.", "url": "https://github.com/quarkusio/quarkus/pull/7049#discussion_r380219498", "createdAt": "2020-02-17T14:41:37Z", "author": {"login": "gsmet"}, "path": "extensions/optaplanner-jackson/runtime/pom.xml", "diffHunk": "@@ -0,0 +1,55 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-optaplanner-jackson-parent</artifactId>\n+        <version>999-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>quarkus-optaplanner-jackson</artifactId>\n+    <name>Quarkus - OptaPlanner Jackson - Runtime</name>\n+    <description>Make Score, etc look pretty in JSON.</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d2fdb9388ecf94dc315ef363a0b2aa710d0cb8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxOTg0MQ==", "bodyText": "Could it be consistently indented?", "url": "https://github.com/quarkusio/quarkus/pull/7049#discussion_r380219841", "createdAt": "2020-02-17T14:42:14Z", "author": {"login": "gsmet"}, "path": "extensions/optaplanner-jackson/runtime/src/main/resources/quarkus-extension.yaml", "diffHunk": "@@ -0,0 +1,12 @@\n+---\n+name: \"OptaPlanner Jackson\"\n+metadata:\n+  keywords:\n+  - \"optaplanner\"\n+  - \"kogito\"\n+  - \"jackson\"\n+  categories:\n+    - \"business-automation\"\n+    - \"web\"\n+    - \"serialization\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d2fdb9388ecf94dc315ef363a0b2aa710d0cb8"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyMDQ4OA==", "bodyText": "The name of the property should be the one used by the user. This is not the case here.\nAlso maybe a ConfigException would be better.", "url": "https://github.com/quarkusio/quarkus/pull/7049#discussion_r380220488", "createdAt": "2020-02-17T14:43:23Z", "author": {"login": "gsmet"}, "path": "extensions/optaplanner/deployment/src/main/java/io/quarkus/optaplanner/deployment/OptaPlannerProcessor.java", "diffHunk": "@@ -0,0 +1,236 @@\n+package io.quarkus.optaplanner.deployment;\n+\n+import static io.quarkus.deployment.annotations.ExecutionTime.STATIC_INIT;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.drools.core.base.ClassFieldAccessorFactory;\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.Type;\n+import org.optaplanner.core.api.domain.entity.PlanningEntity;\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+import org.optaplanner.core.config.score.director.ScoreDirectorFactoryConfig;\n+import org.optaplanner.core.config.solver.SolverConfig;\n+import org.optaplanner.core.config.solver.SolverManagerConfig;\n+import org.optaplanner.core.config.solver.termination.TerminationConfig;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.arc.deployment.BeanContainerListenerBuildItem;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.HotDeploymentWatchedFileBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveHierarchyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import io.quarkus.deployment.recording.RecorderContext;\n+import io.quarkus.optaplanner.OptaPlannerBeanProvider;\n+import io.quarkus.optaplanner.OptaPlannerRecorder;\n+\n+class OptaPlannerProcessor {\n+\n+    OptaPlannerBuildTimeConfig optaPlannerBuildTimeConfig;\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FeatureBuildItem.OPTAPLANNER);\n+    }\n+\n+    @BuildStep\n+    HotDeploymentWatchedFileBuildItem configFile() {\n+        String solverConfigXML;\n+        if (optaPlannerBuildTimeConfig.solverConfigXml.isPresent()) {\n+            solverConfigXML = optaPlannerBuildTimeConfig.solverConfigXml.get();\n+        } else {\n+            solverConfigXML = OptaPlannerBuildTimeConfig.DEFAULT_SOLVER_CONFIG_URL;\n+        }\n+        return new HotDeploymentWatchedFileBuildItem(solverConfigXML);\n+    }\n+\n+    @BuildStep\n+    void registerAdditionalBeans(BuildProducer<AdditionalBeanBuildItem> additionalBeans) {\n+        // The bean encapsulating the SolverFactory\n+        additionalBeans.produce(new AdditionalBeanBuildItem(OptaPlannerBeanProvider.class));\n+    }\n+\n+    @BuildStep(loadsApplicationClasses = true)\n+    @Record(STATIC_INIT)\n+    void recordSolverFactory(OptaPlannerRecorder recorder, RecorderContext recorderContext,\n+            CombinedIndexBuildItem combinedIndex,\n+            BuildProducer<ReflectiveHierarchyBuildItem> reflectiveHierarchyClass,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n+            BuildProducer<BeanContainerListenerBuildItem> beanContainerListener) {\n+        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+        SolverConfig solverConfig;\n+        if (optaPlannerBuildTimeConfig.solverConfigXml.isPresent()) {\n+            String solverConfigXML = optaPlannerBuildTimeConfig.solverConfigXml.get();\n+            if (classLoader.getResource(solverConfigXML) == null) {\n+                throw new IllegalStateException(\"Invalid optaplanner.solverConfigXML property (\" + solverConfigXML", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d2fdb9388ecf94dc315ef363a0b2aa710d0cb8"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyMTg1NA==", "bodyText": "I'm curious how this works without a LiveReloadBuildItem? I think we should probably have one to restart all the app in case of a change, similar to what we do elsewhere.", "url": "https://github.com/quarkusio/quarkus/pull/7049#discussion_r380221854", "createdAt": "2020-02-17T14:45:56Z", "author": {"login": "gsmet"}, "path": "extensions/optaplanner/deployment/src/test/java/io/quarkus/optaplanner/rest/OptaPlannerProcessorHotReloadTest.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.quarkus.optaplanner.rest;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.optaplanner.constraints.TestdataPlanningConstraintProvider;\n+import io.quarkus.optaplanner.domain.TestdataPlanningEntity;\n+import io.quarkus.optaplanner.domain.TestdataPlanningSolution;\n+import io.quarkus.test.QuarkusDevModeTest;\n+import io.restassured.RestAssured;\n+\n+public class OptaPlannerProcessorHotReloadTest {\n+\n+    // This fails in IntelliJ with \"Undeclared build item class\", but not in maven. That's normal in Quarkus for now.\n+    @RegisterExtension\n+    static final QuarkusDevModeTest test = new QuarkusDevModeTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(TestdataPlanningEntity.class,\n+                            TestdataPlanningSolution.class, TestdataPlanningConstraintProvider.class,\n+                            SolverConfigTestResource.class)\n+                    .addAsResource(\"solverConfig.xml\"));\n+\n+    @Test\n+    public void solverConfigHotReload() {\n+        String resp = RestAssured.get(\"/solver-config/seconds-spent-limit\").asString();\n+        Assertions.assertEquals(\"secondsSpentLimit=2\", resp);\n+        test.modifyResourceFile(\"solverConfig.xml\", s -> s.replace(\"<secondsSpentLimit>2</secondsSpentLimit>\",\n+                \"<secondsSpentLimit>9</secondsSpentLimit>\"));\n+        resp = RestAssured.get(\"/solver-config/seconds-spent-limit\").asString();\n+        Assertions.assertEquals(\"secondsSpentLimit=9\", resp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d2fdb9388ecf94dc315ef363a0b2aa710d0cb8"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyMjI2Mg==", "bodyText": "Same here, let's get the indentation consistent between keywords and categories.", "url": "https://github.com/quarkusio/quarkus/pull/7049#discussion_r380222262", "createdAt": "2020-02-17T14:46:41Z", "author": {"login": "gsmet"}, "path": "extensions/optaplanner/runtime/src/main/resources/META-INF/quarkus-extension.yaml", "diffHunk": "@@ -0,0 +1,16 @@\n+---\n+name: \"OptaPlanner constraint solver AI\"\n+metadata:\n+  keywords:\n+  - \"optaplanner\"\n+  - \"kogito\"\n+  - \"constraint-solver\"\n+  - \"artificial-intelligence\"\n+  - \"employee-rostering\"\n+  - \"vehicle-routing-problem\"\n+  - \"maintenance-scheduling\"\n+  - \"timetabling\"\n+  # guide: \"https://quarkus.io/guides/constraint-solving-ai-optaplanner\"\n+  categories:\n+    - \"business-automation\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d2fdb9388ecf94dc315ef363a0b2aa710d0cb8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyMjk3MQ==", "bodyText": "Isn't the IT module called optaplanner-jackson now?", "url": "https://github.com/quarkusio/quarkus/pull/7049#discussion_r380222971", "createdAt": "2020-02-17T14:47:59Z", "author": {"login": "gsmet"}, "path": "ci-templates/stages.yml", "diffHunk": "@@ -410,6 +410,7 @@ stages:\n           timeoutInMinutes: 35\n           modules:\n             - kogito\n+            - optaplanner", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d2fdb9388ecf94dc315ef363a0b2aa710d0cb8"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a9d2fdb9388ecf94dc315ef363a0b2aa710d0cb8", "author": {"user": {"login": "ge0ffrey", "name": "Geoffrey De Smet"}}, "url": "https://github.com/quarkusio/quarkus/commit/a9d2fdb9388ecf94dc315ef363a0b2aa710d0cb8", "committedDate": "2020-02-17T10:32:52Z", "message": "OptaPlanner extension"}, "afterCommit": {"oid": "48f23daee712a8f9a21b4794e357386053016174", "author": {"user": {"login": "ge0ffrey", "name": "Geoffrey De Smet"}}, "url": "https://github.com/quarkusio/quarkus/commit/48f23daee712a8f9a21b4794e357386053016174", "committedDate": "2020-02-18T18:41:01Z", "message": "OptaPlanner extension"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "48f23daee712a8f9a21b4794e357386053016174", "author": {"user": {"login": "ge0ffrey", "name": "Geoffrey De Smet"}}, "url": "https://github.com/quarkusio/quarkus/commit/48f23daee712a8f9a21b4794e357386053016174", "committedDate": "2020-02-18T18:41:01Z", "message": "OptaPlanner extension"}, "afterCommit": {"oid": "c3c0e693d0f2215fc222ffaf220f3e54f7b43666", "author": {"user": {"login": "ge0ffrey", "name": "Geoffrey De Smet"}}, "url": "https://github.com/quarkusio/quarkus/commit/c3c0e693d0f2215fc222ffaf220f3e54f7b43666", "committedDate": "2020-02-18T19:01:55Z", "message": "OptaPlanner extension"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc14ce6e0ec25a99c403f31ebbe188b406bf72a5", "author": {"user": {"login": "ge0ffrey", "name": "Geoffrey De Smet"}}, "url": "https://github.com/quarkusio/quarkus/commit/bc14ce6e0ec25a99c403f31ebbe188b406bf72a5", "committedDate": "2020-02-19T10:24:51Z", "message": "OptaPlanner extension"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c3c0e693d0f2215fc222ffaf220f3e54f7b43666", "author": {"user": {"login": "ge0ffrey", "name": "Geoffrey De Smet"}}, "url": "https://github.com/quarkusio/quarkus/commit/c3c0e693d0f2215fc222ffaf220f3e54f7b43666", "committedDate": "2020-02-18T19:01:55Z", "message": "OptaPlanner extension"}, "afterCommit": {"oid": "bc14ce6e0ec25a99c403f31ebbe188b406bf72a5", "author": {"user": {"login": "ge0ffrey", "name": "Geoffrey De Smet"}}, "url": "https://github.com/quarkusio/quarkus/commit/bc14ce6e0ec25a99c403f31ebbe188b406bf72a5", "committedDate": "2020-02-19T10:24:51Z", "message": "OptaPlanner extension"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwOTk2NTM3", "url": "https://github.com/quarkusio/quarkus/pull/7049#pullrequestreview-360996537", "createdAt": "2020-02-19T10:25:25Z", "commit": {"oid": "bc14ce6e0ec25a99c403f31ebbe188b406bf72a5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 96, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}