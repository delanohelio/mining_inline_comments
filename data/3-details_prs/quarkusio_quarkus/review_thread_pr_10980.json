{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2OTUxNzYx", "number": 10980, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODowMjoxMVrOESRzAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMjoyNzoyOFrOESXWxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjAxNDExOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/reactive-routes.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODowMjoxMVrOG3XuYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODowODo1M1rOG3X7Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMzU2OQ==", "bodyText": "Is this the correct way to navigate to a section in another document? CC @gsmet\nThe URL part is probably pretty stable but I think that <<openapi-swaggerui.adoc#use-swagger-ui-for-development,the Swagger UI>> should work as well.", "url": "https://github.com/quarkusio/quarkus/pull/10980#discussion_r460713569", "createdAt": "2020-07-27T08:02:11Z", "author": {"login": "mkouba"}, "path": "docs/src/main/asciidoc/reactive-routes.adoc", "diffHunk": "@@ -522,6 +522,171 @@ public class MyFilters {\n <1> The `RouteFilter#value()` defines the priority used to sort the filters - filters with higher priority are called first.\n <2> The filter is likely required to call the `next()` method to continue the chain.\n \n+== Adding OpenAPI and Swagger-UI\n+\n+You can add support for link:https://www.openapis.org/[OpenAPI] and link:https://swagger.io/tools/swagger-ui/[Swagger-UI] by using the `quarkus-smallrye-openapi` extension.\n+\n+Add the extension by running this command:\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"io.quarkus:quarkus-smallrye-openapi\"\n+----\n+\n+This will add the following to your `pom.xml`:\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.quarkus</groupId>\n+    <artifactId>quarkus-smallrye-openapi</artifactId>\n+</dependency>\n+----\n+\n+This is enough to generate a basic OpenAPI schema document from your Vert.x Routes:\n+\n+[source,bash]\n+----\n+curl http://localhost:8080/openapi\n+----\n+\n+You will see the generated OpenAPI schema document:\n+\n+[source, yaml]\n+----\n+---\n+openapi: 3.0.3\n+info:\n+  title: Generated API\n+  version: \"1.0\"\n+paths:\n+  /greetings:\n+    get:\n+      responses:\n+        \"204\":\n+          description: No Content\n+  /hello:\n+    get:\n+      responses:\n+        \"204\":\n+          description: No Content\n+  /world:\n+    get:\n+      responses:\n+        \"200\":\n+          description: OK\n+          content:\n+            '*/*':\n+              schema:\n+                type: string\n+----\n+\n+Also see link:https://quarkus.io/guides/openapi-swaggerui[the OpenAPI Guide]\n+\n+=== Adding MicroProfile OpenAPI Annotations\n+\n+You can use link:https://github.com/eclipse/microprofile-open-api[MicroProfile OpenAPI] to better document your schema, \n+example, adding header info, or specifying the return type on `void` methods might be usefull :\n+\n+[source, java]\n+----\n+@OpenAPIDefinition(<1>\n+    info = @Info(\n+        title=\"Greeting API\",\n+        version = \"1.0.1\",\n+        contact = @Contact(\n+            name = \"Greeting API Support\",\n+            url = \"http://exampleurl.com/contact\",\n+            email = \"techsupport@example.com\"),\n+        license = @License(\n+            name = \"Apache 2.0\",\n+            url = \"http://www.apache.org/licenses/LICENSE-2.0.html\"))\n+)\n+@ApplicationScoped\n+public class MyDeclarativeRoutes {\n+\n+    // neither path nor regex is set - match a path derived from the method name\n+    @Route(methods = HttpMethod.GET)\n+    @APIResponse(responseCode=\"200\", \n+            description=\"Say hello\", \n+            content=@Content(mediaType=\"application/json\", schema=@Schema(type=SchemaType.STRING)))<2>\n+    void hello(RoutingContext rc) {\n+        rc.response().end(\"hello\");\n+    }\n+    \n+    @Route(path = \"/world\") \n+    String helloWorld() {\n+        return \"Hello world!\";\n+    }\n+\n+    @Route(path = \"/greetings\", methods = HttpMethod.GET)\n+    @APIResponse(responseCode=\"200\", \n+            description=\"Greeting\", \n+            content=@Content(mediaType=\"application/json\", schema=@Schema(type=SchemaType.STRING)))\n+    void greetings(RoutingExchange ex) {\n+        ex.ok(\"hello \" + ex.getParam(\"name\").orElse(\"world\"));\n+    }\n+}\n+----\n+\n+<1> Header information about your API.\n+<2> Defining the response\n+\n+This will generate this OpenAPI schema:\n+\n+[source, yaml]\n+----\n+---\n+openapi: 3.0.3\n+info:\n+  title: Greeting API\n+  contact:\n+    name: Greeting API Support\n+    url: http://exampleurl.com/contact\n+    email: techsupport@example.com\n+  license:\n+    name: Apache 2.0\n+    url: http://www.apache.org/licenses/LICENSE-2.0.html\n+  version: 1.0.1\n+paths:\n+  /greetings:\n+    get:\n+      responses:\n+        \"200\":\n+          description: Greeting\n+          content:\n+            application/json:\n+              schema:\n+                type: string\n+  /hello:\n+    get:\n+      responses:\n+        \"200\":\n+          description: Say hello\n+          content:\n+            application/json:\n+              schema:\n+                type: string\n+  /world:\n+    get:\n+      responses:\n+        \"200\":\n+          description: OK\n+          content:\n+            '*/*':\n+              schema:\n+                type: string\n+----\n+\n+=== Using Swagger UI\n+\n+Swagger UI is included by default when running in `Dev` or `Test` mode, and can optionally added to `Prod` mode.\n+See link:https://quarkus.io/guides/openapi-swaggerui#use-swagger-ui-for-development[the Swagger UI] Guide for more details.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd0177b4a60fe7afb6c0831a323295915c6c21d6"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxNTY0Nw==", "bodyText": "@mkouba - the rest of the document use full URLs (see line 78 - 87) - should I change all of them. Or stay as is to be consistent ?", "url": "https://github.com/quarkusio/quarkus/pull/10980#discussion_r460715647", "createdAt": "2020-07-27T08:06:20Z", "author": {"login": "phillip-kruger"}, "path": "docs/src/main/asciidoc/reactive-routes.adoc", "diffHunk": "@@ -522,6 +522,171 @@ public class MyFilters {\n <1> The `RouteFilter#value()` defines the priority used to sort the filters - filters with higher priority are called first.\n <2> The filter is likely required to call the `next()` method to continue the chain.\n \n+== Adding OpenAPI and Swagger-UI\n+\n+You can add support for link:https://www.openapis.org/[OpenAPI] and link:https://swagger.io/tools/swagger-ui/[Swagger-UI] by using the `quarkus-smallrye-openapi` extension.\n+\n+Add the extension by running this command:\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"io.quarkus:quarkus-smallrye-openapi\"\n+----\n+\n+This will add the following to your `pom.xml`:\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.quarkus</groupId>\n+    <artifactId>quarkus-smallrye-openapi</artifactId>\n+</dependency>\n+----\n+\n+This is enough to generate a basic OpenAPI schema document from your Vert.x Routes:\n+\n+[source,bash]\n+----\n+curl http://localhost:8080/openapi\n+----\n+\n+You will see the generated OpenAPI schema document:\n+\n+[source, yaml]\n+----\n+---\n+openapi: 3.0.3\n+info:\n+  title: Generated API\n+  version: \"1.0\"\n+paths:\n+  /greetings:\n+    get:\n+      responses:\n+        \"204\":\n+          description: No Content\n+  /hello:\n+    get:\n+      responses:\n+        \"204\":\n+          description: No Content\n+  /world:\n+    get:\n+      responses:\n+        \"200\":\n+          description: OK\n+          content:\n+            '*/*':\n+              schema:\n+                type: string\n+----\n+\n+Also see link:https://quarkus.io/guides/openapi-swaggerui[the OpenAPI Guide]\n+\n+=== Adding MicroProfile OpenAPI Annotations\n+\n+You can use link:https://github.com/eclipse/microprofile-open-api[MicroProfile OpenAPI] to better document your schema, \n+example, adding header info, or specifying the return type on `void` methods might be usefull :\n+\n+[source, java]\n+----\n+@OpenAPIDefinition(<1>\n+    info = @Info(\n+        title=\"Greeting API\",\n+        version = \"1.0.1\",\n+        contact = @Contact(\n+            name = \"Greeting API Support\",\n+            url = \"http://exampleurl.com/contact\",\n+            email = \"techsupport@example.com\"),\n+        license = @License(\n+            name = \"Apache 2.0\",\n+            url = \"http://www.apache.org/licenses/LICENSE-2.0.html\"))\n+)\n+@ApplicationScoped\n+public class MyDeclarativeRoutes {\n+\n+    // neither path nor regex is set - match a path derived from the method name\n+    @Route(methods = HttpMethod.GET)\n+    @APIResponse(responseCode=\"200\", \n+            description=\"Say hello\", \n+            content=@Content(mediaType=\"application/json\", schema=@Schema(type=SchemaType.STRING)))<2>\n+    void hello(RoutingContext rc) {\n+        rc.response().end(\"hello\");\n+    }\n+    \n+    @Route(path = \"/world\") \n+    String helloWorld() {\n+        return \"Hello world!\";\n+    }\n+\n+    @Route(path = \"/greetings\", methods = HttpMethod.GET)\n+    @APIResponse(responseCode=\"200\", \n+            description=\"Greeting\", \n+            content=@Content(mediaType=\"application/json\", schema=@Schema(type=SchemaType.STRING)))\n+    void greetings(RoutingExchange ex) {\n+        ex.ok(\"hello \" + ex.getParam(\"name\").orElse(\"world\"));\n+    }\n+}\n+----\n+\n+<1> Header information about your API.\n+<2> Defining the response\n+\n+This will generate this OpenAPI schema:\n+\n+[source, yaml]\n+----\n+---\n+openapi: 3.0.3\n+info:\n+  title: Greeting API\n+  contact:\n+    name: Greeting API Support\n+    url: http://exampleurl.com/contact\n+    email: techsupport@example.com\n+  license:\n+    name: Apache 2.0\n+    url: http://www.apache.org/licenses/LICENSE-2.0.html\n+  version: 1.0.1\n+paths:\n+  /greetings:\n+    get:\n+      responses:\n+        \"200\":\n+          description: Greeting\n+          content:\n+            application/json:\n+              schema:\n+                type: string\n+  /hello:\n+    get:\n+      responses:\n+        \"200\":\n+          description: Say hello\n+          content:\n+            application/json:\n+              schema:\n+                type: string\n+  /world:\n+    get:\n+      responses:\n+        \"200\":\n+          description: OK\n+          content:\n+            '*/*':\n+              schema:\n+                type: string\n+----\n+\n+=== Using Swagger UI\n+\n+Swagger UI is included by default when running in `Dev` or `Test` mode, and can optionally added to `Prod` mode.\n+See link:https://quarkus.io/guides/openapi-swaggerui#use-swagger-ui-for-development[the Swagger UI] Guide for more details.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMzU2OQ=="}, "originalCommit": {"oid": "fd0177b4a60fe7afb6c0831a323295915c6c21d6"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxNjg2Mw==", "bodyText": "Forget that. Those are different domains. I am changing.", "url": "https://github.com/quarkusio/quarkus/pull/10980#discussion_r460716863", "createdAt": "2020-07-27T08:08:53Z", "author": {"login": "phillip-kruger"}, "path": "docs/src/main/asciidoc/reactive-routes.adoc", "diffHunk": "@@ -522,6 +522,171 @@ public class MyFilters {\n <1> The `RouteFilter#value()` defines the priority used to sort the filters - filters with higher priority are called first.\n <2> The filter is likely required to call the `next()` method to continue the chain.\n \n+== Adding OpenAPI and Swagger-UI\n+\n+You can add support for link:https://www.openapis.org/[OpenAPI] and link:https://swagger.io/tools/swagger-ui/[Swagger-UI] by using the `quarkus-smallrye-openapi` extension.\n+\n+Add the extension by running this command:\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"io.quarkus:quarkus-smallrye-openapi\"\n+----\n+\n+This will add the following to your `pom.xml`:\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.quarkus</groupId>\n+    <artifactId>quarkus-smallrye-openapi</artifactId>\n+</dependency>\n+----\n+\n+This is enough to generate a basic OpenAPI schema document from your Vert.x Routes:\n+\n+[source,bash]\n+----\n+curl http://localhost:8080/openapi\n+----\n+\n+You will see the generated OpenAPI schema document:\n+\n+[source, yaml]\n+----\n+---\n+openapi: 3.0.3\n+info:\n+  title: Generated API\n+  version: \"1.0\"\n+paths:\n+  /greetings:\n+    get:\n+      responses:\n+        \"204\":\n+          description: No Content\n+  /hello:\n+    get:\n+      responses:\n+        \"204\":\n+          description: No Content\n+  /world:\n+    get:\n+      responses:\n+        \"200\":\n+          description: OK\n+          content:\n+            '*/*':\n+              schema:\n+                type: string\n+----\n+\n+Also see link:https://quarkus.io/guides/openapi-swaggerui[the OpenAPI Guide]\n+\n+=== Adding MicroProfile OpenAPI Annotations\n+\n+You can use link:https://github.com/eclipse/microprofile-open-api[MicroProfile OpenAPI] to better document your schema, \n+example, adding header info, or specifying the return type on `void` methods might be usefull :\n+\n+[source, java]\n+----\n+@OpenAPIDefinition(<1>\n+    info = @Info(\n+        title=\"Greeting API\",\n+        version = \"1.0.1\",\n+        contact = @Contact(\n+            name = \"Greeting API Support\",\n+            url = \"http://exampleurl.com/contact\",\n+            email = \"techsupport@example.com\"),\n+        license = @License(\n+            name = \"Apache 2.0\",\n+            url = \"http://www.apache.org/licenses/LICENSE-2.0.html\"))\n+)\n+@ApplicationScoped\n+public class MyDeclarativeRoutes {\n+\n+    // neither path nor regex is set - match a path derived from the method name\n+    @Route(methods = HttpMethod.GET)\n+    @APIResponse(responseCode=\"200\", \n+            description=\"Say hello\", \n+            content=@Content(mediaType=\"application/json\", schema=@Schema(type=SchemaType.STRING)))<2>\n+    void hello(RoutingContext rc) {\n+        rc.response().end(\"hello\");\n+    }\n+    \n+    @Route(path = \"/world\") \n+    String helloWorld() {\n+        return \"Hello world!\";\n+    }\n+\n+    @Route(path = \"/greetings\", methods = HttpMethod.GET)\n+    @APIResponse(responseCode=\"200\", \n+            description=\"Greeting\", \n+            content=@Content(mediaType=\"application/json\", schema=@Schema(type=SchemaType.STRING)))\n+    void greetings(RoutingExchange ex) {\n+        ex.ok(\"hello \" + ex.getParam(\"name\").orElse(\"world\"));\n+    }\n+}\n+----\n+\n+<1> Header information about your API.\n+<2> Defining the response\n+\n+This will generate this OpenAPI schema:\n+\n+[source, yaml]\n+----\n+---\n+openapi: 3.0.3\n+info:\n+  title: Greeting API\n+  contact:\n+    name: Greeting API Support\n+    url: http://exampleurl.com/contact\n+    email: techsupport@example.com\n+  license:\n+    name: Apache 2.0\n+    url: http://www.apache.org/licenses/LICENSE-2.0.html\n+  version: 1.0.1\n+paths:\n+  /greetings:\n+    get:\n+      responses:\n+        \"200\":\n+          description: Greeting\n+          content:\n+            application/json:\n+              schema:\n+                type: string\n+  /hello:\n+    get:\n+      responses:\n+        \"200\":\n+          description: Say hello\n+          content:\n+            application/json:\n+              schema:\n+                type: string\n+  /world:\n+    get:\n+      responses:\n+        \"200\":\n+          description: OK\n+          content:\n+            '*/*':\n+              schema:\n+                type: string\n+----\n+\n+=== Using Swagger UI\n+\n+Swagger UI is included by default when running in `Dev` or `Test` mode, and can optionally added to `Prod` mode.\n+See link:https://quarkus.io/guides/openapi-swaggerui#use-swagger-ui-for-development[the Swagger UI] Guide for more details.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMzU2OQ=="}, "originalCommit": {"oid": "fd0177b4a60fe7afb6c0831a323295915c6c21d6"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjkyMjI2OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/reactive-routes.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMjoyNjozNFrOG3gOnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMjoyNjozNFrOG3gOnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg1Mjg5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can add support for link:https://www.openapis.org/[OpenAPI] and link:https://swagger.io/tools/swagger-ui/[Swagger-UI] by using the `quarkus-smallrye-openapi` extension.\n          \n          \n            \n            You can add support for link:https://www.openapis.org/[OpenAPI] and link:https://swagger.io/tools/swagger-ui/[Swagger UI] by using the `quarkus-smallrye-openapi` extension.", "url": "https://github.com/quarkusio/quarkus/pull/10980#discussion_r460852893", "createdAt": "2020-07-27T12:26:34Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/reactive-routes.adoc", "diffHunk": "@@ -522,6 +522,171 @@ public class MyFilters {\n <1> The `RouteFilter#value()` defines the priority used to sort the filters - filters with higher priority are called first.\n <2> The filter is likely required to call the `next()` method to continue the chain.\n \n+== Adding OpenAPI and Swagger-UI\n+\n+You can add support for link:https://www.openapis.org/[OpenAPI] and link:https://swagger.io/tools/swagger-ui/[Swagger-UI] by using the `quarkus-smallrye-openapi` extension.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37bd62ad05aa8aec273cfabe0351b6aab93022d1"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjkyMjYxOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/reactive-routes.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMjoyNjo0MVrOG3gOzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMjoyNjo0MVrOG3gOzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg1Mjk0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            == Adding OpenAPI and Swagger-UI\n          \n          \n            \n            == Adding OpenAPI and Swagger UI", "url": "https://github.com/quarkusio/quarkus/pull/10980#discussion_r460852942", "createdAt": "2020-07-27T12:26:41Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/reactive-routes.adoc", "diffHunk": "@@ -522,6 +522,171 @@ public class MyFilters {\n <1> The `RouteFilter#value()` defines the priority used to sort the filters - filters with higher priority are called first.\n <2> The filter is likely required to call the `next()` method to continue the chain.\n \n+== Adding OpenAPI and Swagger-UI", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37bd62ad05aa8aec273cfabe0351b6aab93022d1"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjkyNDg1OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/reactive-routes.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMjoyNzoyOFrOG3gQNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMjoyNzoyOFrOG3gQNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg1MzMwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Swagger UI is included by default when running in `Dev` or `Test` mode, and can optionally added to `Prod` mode.\n          \n          \n            \n            Swagger UI is included by default when running in `dev` or `test` mode, and can optionally added to `prod` mode.", "url": "https://github.com/quarkusio/quarkus/pull/10980#discussion_r460853303", "createdAt": "2020-07-27T12:27:28Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/reactive-routes.adoc", "diffHunk": "@@ -522,6 +522,171 @@ public class MyFilters {\n <1> The `RouteFilter#value()` defines the priority used to sort the filters - filters with higher priority are called first.\n <2> The filter is likely required to call the `next()` method to continue the chain.\n \n+== Adding OpenAPI and Swagger-UI\n+\n+You can add support for link:https://www.openapis.org/[OpenAPI] and link:https://swagger.io/tools/swagger-ui/[Swagger-UI] by using the `quarkus-smallrye-openapi` extension.\n+\n+Add the extension by running this command:\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"io.quarkus:quarkus-smallrye-openapi\"\n+----\n+\n+This will add the following to your `pom.xml`:\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.quarkus</groupId>\n+    <artifactId>quarkus-smallrye-openapi</artifactId>\n+</dependency>\n+----\n+\n+This is enough to generate a basic OpenAPI schema document from your Vert.x Routes:\n+\n+[source,bash]\n+----\n+curl http://localhost:8080/openapi\n+----\n+\n+You will see the generated OpenAPI schema document:\n+\n+[source, yaml]\n+----\n+---\n+openapi: 3.0.3\n+info:\n+  title: Generated API\n+  version: \"1.0\"\n+paths:\n+  /greetings:\n+    get:\n+      responses:\n+        \"204\":\n+          description: No Content\n+  /hello:\n+    get:\n+      responses:\n+        \"204\":\n+          description: No Content\n+  /world:\n+    get:\n+      responses:\n+        \"200\":\n+          description: OK\n+          content:\n+            '*/*':\n+              schema:\n+                type: string\n+----\n+\n+Also see <<openapi-swaggerui.adoc,the OpenAPI Guide>>\n+\n+=== Adding MicroProfile OpenAPI Annotations\n+\n+You can use link:https://github.com/eclipse/microprofile-open-api[MicroProfile OpenAPI] to better document your schema, \n+example, adding header info, or specifying the return type on `void` methods might be usefull :\n+\n+[source, java]\n+----\n+@OpenAPIDefinition(<1>\n+    info = @Info(\n+        title=\"Greeting API\",\n+        version = \"1.0.1\",\n+        contact = @Contact(\n+            name = \"Greeting API Support\",\n+            url = \"http://exampleurl.com/contact\",\n+            email = \"techsupport@example.com\"),\n+        license = @License(\n+            name = \"Apache 2.0\",\n+            url = \"http://www.apache.org/licenses/LICENSE-2.0.html\"))\n+)\n+@ApplicationScoped\n+public class MyDeclarativeRoutes {\n+\n+    // neither path nor regex is set - match a path derived from the method name\n+    @Route(methods = HttpMethod.GET)\n+    @APIResponse(responseCode=\"200\", \n+            description=\"Say hello\", \n+            content=@Content(mediaType=\"application/json\", schema=@Schema(type=SchemaType.STRING)))<2>\n+    void hello(RoutingContext rc) {\n+        rc.response().end(\"hello\");\n+    }\n+    \n+    @Route(path = \"/world\") \n+    String helloWorld() {\n+        return \"Hello world!\";\n+    }\n+\n+    @Route(path = \"/greetings\", methods = HttpMethod.GET)\n+    @APIResponse(responseCode=\"200\", \n+            description=\"Greeting\", \n+            content=@Content(mediaType=\"application/json\", schema=@Schema(type=SchemaType.STRING)))\n+    void greetings(RoutingExchange ex) {\n+        ex.ok(\"hello \" + ex.getParam(\"name\").orElse(\"world\"));\n+    }\n+}\n+----\n+\n+<1> Header information about your API.\n+<2> Defining the response\n+\n+This will generate this OpenAPI schema:\n+\n+[source, yaml]\n+----\n+---\n+openapi: 3.0.3\n+info:\n+  title: Greeting API\n+  contact:\n+    name: Greeting API Support\n+    url: http://exampleurl.com/contact\n+    email: techsupport@example.com\n+  license:\n+    name: Apache 2.0\n+    url: http://www.apache.org/licenses/LICENSE-2.0.html\n+  version: 1.0.1\n+paths:\n+  /greetings:\n+    get:\n+      responses:\n+        \"200\":\n+          description: Greeting\n+          content:\n+            application/json:\n+              schema:\n+                type: string\n+  /hello:\n+    get:\n+      responses:\n+        \"200\":\n+          description: Say hello\n+          content:\n+            application/json:\n+              schema:\n+                type: string\n+  /world:\n+    get:\n+      responses:\n+        \"200\":\n+          description: OK\n+          content:\n+            '*/*':\n+              schema:\n+                type: string\n+----\n+\n+=== Using Swagger UI\n+\n+Swagger UI is included by default when running in `Dev` or `Test` mode, and can optionally added to `Prod` mode.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37bd62ad05aa8aec273cfabe0351b6aab93022d1"}, "originalPosition": 180}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 882, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}