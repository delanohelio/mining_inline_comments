{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMDExNDk4", "number": 6444, "title": "Qute - support @TemplateExtension declared on a class", "bodyText": "also update docs and add some tests\nresolves #6438", "createdAt": "2020-01-07T14:20:30Z", "url": "https://github.com/quarkusio/quarkus/pull/6444", "merged": true, "mergeCommit": {"oid": "3fa3c72cfbc2fc69a7e89fe40418fc1792ea866b"}, "closed": true, "closedAt": "2020-01-08T16:11:26Z", "author": {"login": "mkouba"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4BfXPgH2gAyMzYwMDExNDk4OjM5YTU5ODBmMDQ3MDBhNDUxMDc0ODU5NzFkZjljNGM2MGYwOTU2YTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb4SwFZAFqTMzOTc2OTE4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "39a5980f04700a45107485971df9c4c60f0956a7", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/39a5980f04700a45107485971df9c4c60f0956a7", "committedDate": "2020-01-07T14:18:51Z", "message": "Qute - support @TemplateExtension declared on a class\n\n- also update docs and add some tests\n- resolves #6438"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5NzY5MTg5", "url": "https://github.com/quarkusio/quarkus/pull/6444#pullrequestreview-339769189", "createdAt": "2020-01-08T10:22:40Z", "commit": {"oid": "39a5980f04700a45107485971df9c4c60f0956a7"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMDoyMjo0MFrOFbShXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMDoyMjo0MFrOFbShXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE1OTMyNQ==", "bodyText": "So the method can be named Integer ANY(Integer i, String methodName)? I guess you should add an example for this, no?", "url": "https://github.com/quarkusio/quarkus/pull/6444#discussion_r364159325", "createdAt": "2020-01-08T10:22:40Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -538,10 +538,25 @@ NOTE: A value resolver is also generated for all types used in parameter declara\n [[template_extension_methods]]\n === Template Extension Methods\n \n-A value resolver is automatically generated for a template extension method annotated with `@TemplateExtension`.\n-The method must be static, must not return `void` and must accept at least one parameter. \n-The class of the first parameter is used to match the base object and the method name is used to match the property name.\n+Extension methods can be used to extend the data classes with new functionality.\n+For example, it is possible to add \"computed properties\" and \"virtual methods\".\n+A value resolver is automatically generated for a method annotated with `@TemplateExtension`.\n+If declared on a class a value resolver is generated for every non-private method declared on the class.\n+Methods that do not meet the following requirements are ignored.\n \n+A template extension method:\n+\n+* must be static, \n+* must not return `void`,\n+* must accept at least one parameter.\n+ \n+The class of the first parameter is always used to match the base object.\n+The method name is used to match the property name by default. \n+However, it is possible to specify the matching name with `TemplateExtension#matchName()`.\n+\n+NOTE: A special constant - `ANY` - may be used to specify that the extension method matches any name. In that case, the method must declare at least two parameters and the second parameter must be a string. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39a5980f04700a45107485971df9c4c60f0956a7"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 324, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}