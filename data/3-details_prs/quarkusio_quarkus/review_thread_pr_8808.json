{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MzMzNDQx", "number": 8808, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTo0NDoxM1rOD1migQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwODoxMzowN1rOD1pr0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTMyNTQ1OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/dev/JavaCompilationProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTo0NDoxM1rOGLHa-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTo0NDoxM1rOGLHa-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwOTExNQ==", "bodyText": "Does fileManager.close() need to be called before this?", "url": "https://github.com/quarkusio/quarkus/pull/8808#discussion_r414309115", "createdAt": "2020-04-24T05:44:13Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/dev/JavaCompilationProvider.java", "diffHunk": "@@ -64,6 +74,14 @@ public void compile(Set<File> filesToCompile, Context context) {\n                 System.out.format(\"%s, line %d in %s\", diagnostic.getMessage(null), diagnostic.getLineNumber(),\n                         diagnostic.getSource() == null ? \"[unknown source]\" : diagnostic.getSource().getName());\n             }\n+            if (!fileManagerDiagnostics.getDiagnostics().isEmpty()) {\n+                for (Diagnostic<? extends JavaFileObject> diagnostic : fileManagerDiagnostics.getDiagnostics()) {\n+                    System.out.format(\"%s, line %d in %s\", diagnostic.getMessage(null), diagnostic.getLineNumber(),\n+                            diagnostic.getSource() == null ? \"[unknown source]\" : diagnostic.getSource().getName());\n+                }\n+                fileManagerDiagnostics = null;\n+                fileManager = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3eaca20b3767e5a5afa22ea9fe7acebf964a12c"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTYwMDIyOnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/dev/CompilationProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzoxMjozMlrOGLJydw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwOTo0MzowMlrOGLPfww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM0Nzg5NQ==", "bodyText": "Maybe we could add default close method on this interface?\nSaying that because kogito's implementation (cc @evacchi) would break otherwise.", "url": "https://github.com/quarkusio/quarkus/pull/8808#discussion_r414347895", "createdAt": "2020-04-24T07:12:32Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/dev/CompilationProvider.java", "diffHunk": "@@ -9,7 +10,7 @@\n import java.util.List;\n import java.util.Set;\n \n-public interface CompilationProvider {\n+public interface CompilationProvider extends Closeable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dcf8c6f332eed4f6daeb200ca6e1740cd8dfcbb"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ0MTQxMQ==", "bodyText": "IIRC we extend JavaCompilationProvider /cc @mariofusco", "url": "https://github.com/quarkusio/quarkus/pull/8808#discussion_r414441411", "createdAt": "2020-04-24T09:43:02Z", "author": {"login": "evacchi"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/dev/CompilationProvider.java", "diffHunk": "@@ -9,7 +10,7 @@\n import java.util.List;\n import java.util.Set;\n \n-public interface CompilationProvider {\n+public interface CompilationProvider extends Closeable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM0Nzg5NQ=="}, "originalCommit": {"oid": "7dcf8c6f332eed4f6daeb200ca6e1740cd8dfcbb"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTg0MDgyOnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/recording/BytecodeRecorderImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwODoxMzowN1rOGLL81g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwODoxMzowN1rOGLL81g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM4MzMxOA==", "bodyText": "This won't work :).", "url": "https://github.com/quarkusio/quarkus/pull/8808#discussion_r414383318", "createdAt": "2020-04-24T08:13:07Z", "author": {"login": "gsmet"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/recording/BytecodeRecorderImpl.java", "diffHunk": "@@ -81,7 +81,7 @@\n  * - Any arbitrary object via the {@link #registerSubstitution(Class, Class, Class)} mechanism\n  * - arrays, lists and maps of the above\n  */\n-public class BytecodeRecorderImpl implements RecorderContext {\n+public class BytecodeRecorderImpl implements RecorderContext {proxy-cache", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ffee4ecbce2a2a3ba8b62df8168d163d84e13e1"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3436, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}