{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1MjI0OTQ3", "number": 14046, "title": "Only add json content-type when necessary", "bodyText": "Fixes: #14045", "createdAt": "2020-12-24T09:10:46Z", "url": "https://github.com/quarkusio/quarkus/pull/14046", "merged": true, "mergeCommit": {"oid": "36b04b3787c40136f26192b6bf8499c13c38ccd5"}, "closed": true, "closedAt": "2020-12-24T13:06:27Z", "author": {"login": "geoand"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdpQAzGgH2gAyNTQ1MjI0OTQ3Ojg3YWM5MjRiNjZlNzA5MmMxMjQzZjkxNzEyYWI0NWZlNThkYmZhOTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABds3rYeAFqTU2MTA5ODE0Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "87ac924b66e7092c1243f91712ab45fe58dbfa96", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/87ac924b66e7092c1243f91712ab45fe58dbfa96", "committedDate": "2020-12-24T09:07:29Z", "message": "Only add json content-type when necessary\n\nFixes: #14045"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de22493e38dde2b463048175a2318548b67dd868", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/de22493e38dde2b463048175a2318548b67dd868", "committedDate": "2020-12-24T09:30:36Z", "message": "Take suffix of media type into account when Response is used"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4NDk5NDE0", "url": "https://github.com/quarkusio/quarkus/pull/14046#pullrequestreview-558499414", "createdAt": "2020-12-24T13:06:23Z", "commit": {"oid": "de22493e38dde2b463048175a2318548b67dd868"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMDk4MTQ2", "url": "https://github.com/quarkusio/quarkus/pull/14046#pullrequestreview-561098146", "createdAt": "2021-01-04T15:02:04Z", "commit": {"oid": "de22493e38dde2b463048175a2318548b67dd868"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNTowMjowNFrOIN05tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNTowMjowNFrOIN05tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM2OTE0MQ==", "bodyText": "Pretty sure that's not how media type mapping works, as it will even match application/stef-hates-json which is not JSON at all ;)", "url": "https://github.com/quarkusio/quarkus/pull/14046#discussion_r551369141", "createdAt": "2021-01-04T15:02:04Z", "author": {"login": "FroMage"}, "path": "independent-projects/resteasy-reactive/server/vertx/src/main/java/org/jboss/resteasy/reactive/server/vertx/providers/serialisers/json/JsonMessageBodyWriterUtil.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.jboss.resteasy.reactive.server.vertx.providers.serialisers.json;\n+\n+import io.vertx.core.MultiMap;\n+import java.util.Map;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import org.jboss.resteasy.reactive.server.spi.ServerRequestContext;\n+\n+public final class JsonMessageBodyWriterUtil {\n+\n+    private JsonMessageBodyWriterUtil() {\n+    }\n+\n+    public static void setContentTypeIfNecessary(MultivaluedMap<String, Object> httpHeaders) {\n+        Object contentType = httpHeaders.getFirst(HttpHeaders.CONTENT_TYPE);\n+        if (isNotJson(contentType)) {\n+            httpHeaders.putSingle(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON);\n+        }\n+    }\n+\n+    public static void setContentTypeIfNecessary(ServerRequestContext context) {\n+        String currentContentType = null;\n+        Iterable<Map.Entry<String, String>> responseHeaders = context.serverResponse().getAllResponseHeaders();\n+        if (responseHeaders instanceof MultiMap) {\n+            currentContentType = ((MultiMap) responseHeaders).get(HttpHeaders.CONTENT_TYPE);\n+        } else {\n+            for (Map.Entry<String, String> entry : responseHeaders) {\n+                if (entry.getKey().equalsIgnoreCase(HttpHeaders.CONTENT_TYPE)) {\n+                    currentContentType = entry.getValue();\n+                    break;\n+                }\n+            }\n+        }\n+        if (isNotJson(currentContentType)) {\n+            context.serverResponse().setResponseHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON);\n+        }\n+    }\n+\n+    private static boolean isNotJson(Object contentType) {\n+        return (contentType == null) || !contentType.toString().contains(\"json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de22493e38dde2b463048175a2318548b67dd868"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4258, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}