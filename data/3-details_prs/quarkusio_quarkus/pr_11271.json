{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0Mjk4NDg0", "number": 11271, "title": "Move cache lock timeout logic to CacheResultInterceptor", "bodyText": "This PR lays some groundwork for #8631.\nWith the programmatic caching API in mind, I moved the cache lock timeout logic from the CaffeineCache implementation to CacheResultInterceptor since this is a feature that only makes sense while using the annotations caching API.\nPlease note that many things should change with #8631 if it ends up being merged, including the return types of all CaffeineCache methods which will all be async and rely on Mutiny. The purpose of this PR is only to move some misplaced code without changing anything to the cache extension behavior and performances.\n@ben-manes: Could you please confirm this PR doesn't do any harm in terms of performances?", "createdAt": "2020-08-06T22:44:37Z", "url": "https://github.com/quarkusio/quarkus/pull/11271", "merged": true, "mergeCommit": {"oid": "b9979aa553d67f1ef3d67f599ee63d39c0d39e9a"}, "closed": true, "closedAt": "2020-08-13T08:12:02Z", "author": {"login": "gwenneg"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc9d2iqgFqTQ2NDAzNjI3MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-bgJOAFqTQ2NjUzNzY2Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MDM2Mjcw", "url": "https://github.com/quarkusio/quarkus/pull/11271#pullrequestreview-464036270", "createdAt": "2020-08-10T08:21:51Z", "commit": {"oid": "00686bdc2542d003368d32cf657dc50440730edc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODoyMTo1MVrOG-FXbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODoyMTo1MVrOG-FXbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc1MjgxNA==", "bodyText": "General comment on this class: we try to avoid lambdas in runtime code.", "url": "https://github.com/quarkusio/quarkus/pull/11271#discussion_r467752814", "createdAt": "2020-08-10T08:21:51Z", "author": {"login": "gsmet"}, "path": "extensions/cache/runtime/src/main/java/io/quarkus/cache/runtime/CacheResultInterceptor.java", "diffHunk": "@@ -19,11 +24,63 @@\n     @AroundInvoke\n     public Object intercept(InvocationContext context) throws Exception {\n         CacheResultInterceptorBinding binding = getInterceptorBinding(context, CacheResultInterceptorBinding.class);\n+\n         CaffeineCache cache = cacheRepository.getCache(binding.cacheName());\n         Object key = getCacheKey(cache, binding.cacheKeyParameterPositions(), context.getParameters());\n         if (LOGGER.isDebugEnabled()) {\n             LOGGER.debugf(\"Loading entry with key [%s] from cache [%s]\", key, cache.getName());\n         }\n-        return cache.get(key, () -> context.proceed(), binding.lockTimeout());\n+\n+        if (binding.lockTimeout() <= 0) {\n+            CompletableFuture<Object> cacheValue = cache.get(key, (k, executor) -> {\n+                return getValueLoader(context, executor);\n+            });\n+            return cacheValue.get();\n+        } else {\n+\n+            // The lock timeout logic starts here.\n+\n+            /*\n+             * If the current key is not already associated with a value in the Caffeine cache, there's no way to know if the\n+             * current thread or another one started the missing value computation. The following variable will be used to\n+             * determine whether or not a timeout should be triggered during the computation depending on which thread started\n+             * it.\n+             */\n+            boolean[] isCurrentThreadComputation = { false };\n+\n+            CompletableFuture<Object> cacheValue = cache.get(key, (k, executor) -> {\n+                isCurrentThreadComputation[0] = true;\n+                return getValueLoader(context, executor);\n+            });\n+\n+            if (isCurrentThreadComputation[0]) {\n+                // The value is missing and its computation was started from the current thread.\n+                // We'll wait for the result no matter how long it takes.\n+                return cacheValue.get();\n+            } else {\n+                // The value is either already present in the cache or missing and its computation was started from another thread.\n+                // We want to retrieve it from the cache within the lock timeout delay.\n+                try {\n+                    return cacheValue.get(binding.lockTimeout(), TimeUnit.MILLISECONDS);\n+                } catch (TimeoutException e) {\n+                    // Timeout triggered! We don't want to wait any longer for the value computation and we'll simply invoke the\n+                    // cached method and return its result without caching it.\n+                    // TODO: Add statistics here to monitor the timeout.\n+                    return context.proceed();\n+                }\n+            }\n+        }\n+    }\n+\n+    private CompletableFuture<Object> getValueLoader(InvocationContext context, Executor executor) {\n+        return CompletableFuture.supplyAsync(() -> {\n+            try {\n+                return context.proceed();\n+            } catch (RuntimeException e) {\n+                throw e;\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        }, executor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00686bdc2542d003368d32cf657dc50440730edc"}, "originalPosition": 73}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ce7f22b38803e5586b6a6fb4f1208c3d9fc4f09", "author": {"user": {"login": "gwenneg", "name": "Gwenneg Lepage"}}, "url": "https://github.com/quarkusio/quarkus/commit/0ce7f22b38803e5586b6a6fb4f1208c3d9fc4f09", "committedDate": "2020-08-10T19:13:31Z", "message": "Move cache lock timeout logic to CacheResultInterceptor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "00686bdc2542d003368d32cf657dc50440730edc", "author": {"user": {"login": "gwenneg", "name": "Gwenneg Lepage"}}, "url": "https://github.com/quarkusio/quarkus/commit/00686bdc2542d003368d32cf657dc50440730edc", "committedDate": "2020-08-06T22:33:28Z", "message": "Move cache lock timeout logic to CacheResultInterceptor"}, "afterCommit": {"oid": "0ce7f22b38803e5586b6a6fb4f1208c3d9fc4f09", "author": {"user": {"login": "gwenneg", "name": "Gwenneg Lepage"}}, "url": "https://github.com/quarkusio/quarkus/commit/0ce7f22b38803e5586b6a6fb4f1208c3d9fc4f09", "committedDate": "2020-08-10T19:13:31Z", "message": "Move cache lock timeout logic to CacheResultInterceptor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2NTM3NjYy", "url": "https://github.com/quarkusio/quarkus/pull/11271#pullrequestreview-466537662", "createdAt": "2020-08-13T08:11:56Z", "commit": {"oid": "0ce7f22b38803e5586b6a6fb4f1208c3d9fc4f09"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 935, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}