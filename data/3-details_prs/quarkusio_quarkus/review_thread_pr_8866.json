{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MjkyMDAz", "number": 8866, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzo0MDozOVrOD2iMwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDoxMzoxNlrOD2tJrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTEwMDE4OnYy", "diffSide": "RIGHT", "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanGenerator.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzo0MDozOVrOGMVJjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMzo1OTo0N1rOGMkrrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU4MjYwNg==", "bodyText": "We can't do this for synthetic beans because they may depend on application classes, either any of the attribute or even the existence could be conditioned. An example - for every class X annotated with @Foo generate a synthetic bean with bean types X and all interfaces it implements.", "url": "https://github.com/quarkusio/quarkus/pull/8866#discussion_r415582606", "createdAt": "2020-04-27T07:40:39Z", "author": {"login": "mkouba"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanGenerator.java", "diffHunk": "@@ -96,28 +96,35 @@ public BeanGenerator(AnnotationLiteralProcessor annotationLiterals, Predicate<Do\n     /**\n      *\n      * @param bean\n+     * @param existingClasses\n+     * @param beanToGeneratedName\n      * @return a collection of resources\n      */\n-    Collection<Resource> generate(BeanInfo bean, ReflectionRegistration reflectionRegistration) {\n+    Collection<Resource> generate(BeanInfo bean, ReflectionRegistration reflectionRegistration, Set<String> existingClasses,\n+            Map<BeanInfo, String> beanToGeneratedName) {\n         if (bean.getTarget().isPresent()) {\n             AnnotationTarget target = bean.getTarget().get();\n             switch (target.kind()) {\n                 case CLASS:\n-                    return generateClassBean(bean, target.asClass(), reflectionRegistration);\n+                    return generateClassBean(bean, target.asClass(), reflectionRegistration, existingClasses,\n+                            beanToGeneratedName);\n                 case METHOD:\n-                    return generateProducerMethodBean(bean, target.asMethod(), reflectionRegistration);\n+                    return generateProducerMethodBean(bean, target.asMethod(), reflectionRegistration, existingClasses,\n+                            beanToGeneratedName);\n                 case FIELD:\n-                    return generateProducerFieldBean(bean, target.asField(), reflectionRegistration);\n+                    return generateProducerFieldBean(bean, target.asField(), reflectionRegistration, existingClasses,\n+                            beanToGeneratedName);\n                 default:\n                     throw new IllegalArgumentException(\"Unsupported bean type\");\n             }\n         } else {\n             // Synthetic beans\n-            return generateSyntheticBean(bean, reflectionRegistration);\n+            return generateSyntheticBean(bean, reflectionRegistration, existingClasses, beanToGeneratedName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88bc300b4f51ec0a141ffd48ce1238158823c0b6"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYwNzkwNQ==", "bodyText": "If it is loaded by the base CL then then the bean is immutable anyway, even if you generate it again the changes to not take effect.", "url": "https://github.com/quarkusio/quarkus/pull/8866#discussion_r415607905", "createdAt": "2020-04-27T08:18:50Z", "author": {"login": "stuartwdouglas"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanGenerator.java", "diffHunk": "@@ -96,28 +96,35 @@ public BeanGenerator(AnnotationLiteralProcessor annotationLiterals, Predicate<Do\n     /**\n      *\n      * @param bean\n+     * @param existingClasses\n+     * @param beanToGeneratedName\n      * @return a collection of resources\n      */\n-    Collection<Resource> generate(BeanInfo bean, ReflectionRegistration reflectionRegistration) {\n+    Collection<Resource> generate(BeanInfo bean, ReflectionRegistration reflectionRegistration, Set<String> existingClasses,\n+            Map<BeanInfo, String> beanToGeneratedName) {\n         if (bean.getTarget().isPresent()) {\n             AnnotationTarget target = bean.getTarget().get();\n             switch (target.kind()) {\n                 case CLASS:\n-                    return generateClassBean(bean, target.asClass(), reflectionRegistration);\n+                    return generateClassBean(bean, target.asClass(), reflectionRegistration, existingClasses,\n+                            beanToGeneratedName);\n                 case METHOD:\n-                    return generateProducerMethodBean(bean, target.asMethod(), reflectionRegistration);\n+                    return generateProducerMethodBean(bean, target.asMethod(), reflectionRegistration, existingClasses,\n+                            beanToGeneratedName);\n                 case FIELD:\n-                    return generateProducerFieldBean(bean, target.asField(), reflectionRegistration);\n+                    return generateProducerFieldBean(bean, target.asField(), reflectionRegistration, existingClasses,\n+                            beanToGeneratedName);\n                 default:\n                     throw new IllegalArgumentException(\"Unsupported bean type\");\n             }\n         } else {\n             // Synthetic beans\n-            return generateSyntheticBean(bean, reflectionRegistration);\n+            return generateSyntheticBean(bean, reflectionRegistration, existingClasses, beanToGeneratedName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU4MjYwNg=="}, "originalCommit": {"oid": "88bc300b4f51ec0a141ffd48ce1238158823c0b6"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYxOTYxOQ==", "bodyText": "But the CL for nonapp classes should be discarded, or?", "url": "https://github.com/quarkusio/quarkus/pull/8866#discussion_r415619619", "createdAt": "2020-04-27T08:35:39Z", "author": {"login": "mkouba"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanGenerator.java", "diffHunk": "@@ -96,28 +96,35 @@ public BeanGenerator(AnnotationLiteralProcessor annotationLiterals, Predicate<Do\n     /**\n      *\n      * @param bean\n+     * @param existingClasses\n+     * @param beanToGeneratedName\n      * @return a collection of resources\n      */\n-    Collection<Resource> generate(BeanInfo bean, ReflectionRegistration reflectionRegistration) {\n+    Collection<Resource> generate(BeanInfo bean, ReflectionRegistration reflectionRegistration, Set<String> existingClasses,\n+            Map<BeanInfo, String> beanToGeneratedName) {\n         if (bean.getTarget().isPresent()) {\n             AnnotationTarget target = bean.getTarget().get();\n             switch (target.kind()) {\n                 case CLASS:\n-                    return generateClassBean(bean, target.asClass(), reflectionRegistration);\n+                    return generateClassBean(bean, target.asClass(), reflectionRegistration, existingClasses,\n+                            beanToGeneratedName);\n                 case METHOD:\n-                    return generateProducerMethodBean(bean, target.asMethod(), reflectionRegistration);\n+                    return generateProducerMethodBean(bean, target.asMethod(), reflectionRegistration, existingClasses,\n+                            beanToGeneratedName);\n                 case FIELD:\n-                    return generateProducerFieldBean(bean, target.asField(), reflectionRegistration);\n+                    return generateProducerFieldBean(bean, target.asField(), reflectionRegistration, existingClasses,\n+                            beanToGeneratedName);\n                 default:\n                     throw new IllegalArgumentException(\"Unsupported bean type\");\n             }\n         } else {\n             // Synthetic beans\n-            return generateSyntheticBean(bean, reflectionRegistration);\n+            return generateSyntheticBean(bean, reflectionRegistration, existingClasses, beanToGeneratedName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU4MjYwNg=="}, "originalCommit": {"oid": "88bc300b4f51ec0a141ffd48ce1238158823c0b6"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYyMzgxNQ==", "bodyText": "the CL for non app beans is not discarded, only for app beans", "url": "https://github.com/quarkusio/quarkus/pull/8866#discussion_r415623815", "createdAt": "2020-04-27T08:41:37Z", "author": {"login": "stuartwdouglas"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanGenerator.java", "diffHunk": "@@ -96,28 +96,35 @@ public BeanGenerator(AnnotationLiteralProcessor annotationLiterals, Predicate<Do\n     /**\n      *\n      * @param bean\n+     * @param existingClasses\n+     * @param beanToGeneratedName\n      * @return a collection of resources\n      */\n-    Collection<Resource> generate(BeanInfo bean, ReflectionRegistration reflectionRegistration) {\n+    Collection<Resource> generate(BeanInfo bean, ReflectionRegistration reflectionRegistration, Set<String> existingClasses,\n+            Map<BeanInfo, String> beanToGeneratedName) {\n         if (bean.getTarget().isPresent()) {\n             AnnotationTarget target = bean.getTarget().get();\n             switch (target.kind()) {\n                 case CLASS:\n-                    return generateClassBean(bean, target.asClass(), reflectionRegistration);\n+                    return generateClassBean(bean, target.asClass(), reflectionRegistration, existingClasses,\n+                            beanToGeneratedName);\n                 case METHOD:\n-                    return generateProducerMethodBean(bean, target.asMethod(), reflectionRegistration);\n+                    return generateProducerMethodBean(bean, target.asMethod(), reflectionRegistration, existingClasses,\n+                            beanToGeneratedName);\n                 case FIELD:\n-                    return generateProducerFieldBean(bean, target.asField(), reflectionRegistration);\n+                    return generateProducerFieldBean(bean, target.asField(), reflectionRegistration, existingClasses,\n+                            beanToGeneratedName);\n                 default:\n                     throw new IllegalArgumentException(\"Unsupported bean type\");\n             }\n         } else {\n             // Synthetic beans\n-            return generateSyntheticBean(bean, reflectionRegistration);\n+            return generateSyntheticBean(bean, reflectionRegistration, existingClasses, beanToGeneratedName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU4MjYwNg=="}, "originalCommit": {"oid": "88bc300b4f51ec0a141ffd48ce1238158823c0b6"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYyODc1OA==", "bodyText": "I'm pretty sure we already run into this kind of problem. But I cannot find the relevant issue or code... AFAIR we pretended that the synthetic bean is an app class.", "url": "https://github.com/quarkusio/quarkus/pull/8866#discussion_r415628758", "createdAt": "2020-04-27T08:48:45Z", "author": {"login": "mkouba"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanGenerator.java", "diffHunk": "@@ -96,28 +96,35 @@ public BeanGenerator(AnnotationLiteralProcessor annotationLiterals, Predicate<Do\n     /**\n      *\n      * @param bean\n+     * @param existingClasses\n+     * @param beanToGeneratedName\n      * @return a collection of resources\n      */\n-    Collection<Resource> generate(BeanInfo bean, ReflectionRegistration reflectionRegistration) {\n+    Collection<Resource> generate(BeanInfo bean, ReflectionRegistration reflectionRegistration, Set<String> existingClasses,\n+            Map<BeanInfo, String> beanToGeneratedName) {\n         if (bean.getTarget().isPresent()) {\n             AnnotationTarget target = bean.getTarget().get();\n             switch (target.kind()) {\n                 case CLASS:\n-                    return generateClassBean(bean, target.asClass(), reflectionRegistration);\n+                    return generateClassBean(bean, target.asClass(), reflectionRegistration, existingClasses,\n+                            beanToGeneratedName);\n                 case METHOD:\n-                    return generateProducerMethodBean(bean, target.asMethod(), reflectionRegistration);\n+                    return generateProducerMethodBean(bean, target.asMethod(), reflectionRegistration, existingClasses,\n+                            beanToGeneratedName);\n                 case FIELD:\n-                    return generateProducerFieldBean(bean, target.asField(), reflectionRegistration);\n+                    return generateProducerFieldBean(bean, target.asField(), reflectionRegistration, existingClasses,\n+                            beanToGeneratedName);\n                 default:\n                     throw new IllegalArgumentException(\"Unsupported bean type\");\n             }\n         } else {\n             // Synthetic beans\n-            return generateSyntheticBean(bean, reflectionRegistration);\n+            return generateSyntheticBean(bean, reflectionRegistration, existingClasses, beanToGeneratedName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU4MjYwNg=="}, "originalCommit": {"oid": "88bc300b4f51ec0a141ffd48ce1238158823c0b6"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYyOTYyMQ==", "bodyText": "the CL for non app beans is not discarded, only for app beans\n\nYep, that was I typo I spotted too late ;-).", "url": "https://github.com/quarkusio/quarkus/pull/8866#discussion_r415629621", "createdAt": "2020-04-27T08:49:55Z", "author": {"login": "mkouba"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanGenerator.java", "diffHunk": "@@ -96,28 +96,35 @@ public BeanGenerator(AnnotationLiteralProcessor annotationLiterals, Predicate<Do\n     /**\n      *\n      * @param bean\n+     * @param existingClasses\n+     * @param beanToGeneratedName\n      * @return a collection of resources\n      */\n-    Collection<Resource> generate(BeanInfo bean, ReflectionRegistration reflectionRegistration) {\n+    Collection<Resource> generate(BeanInfo bean, ReflectionRegistration reflectionRegistration, Set<String> existingClasses,\n+            Map<BeanInfo, String> beanToGeneratedName) {\n         if (bean.getTarget().isPresent()) {\n             AnnotationTarget target = bean.getTarget().get();\n             switch (target.kind()) {\n                 case CLASS:\n-                    return generateClassBean(bean, target.asClass(), reflectionRegistration);\n+                    return generateClassBean(bean, target.asClass(), reflectionRegistration, existingClasses,\n+                            beanToGeneratedName);\n                 case METHOD:\n-                    return generateProducerMethodBean(bean, target.asMethod(), reflectionRegistration);\n+                    return generateProducerMethodBean(bean, target.asMethod(), reflectionRegistration, existingClasses,\n+                            beanToGeneratedName);\n                 case FIELD:\n-                    return generateProducerFieldBean(bean, target.asField(), reflectionRegistration);\n+                    return generateProducerFieldBean(bean, target.asField(), reflectionRegistration, existingClasses,\n+                            beanToGeneratedName);\n                 default:\n                     throw new IllegalArgumentException(\"Unsupported bean type\");\n             }\n         } else {\n             // Synthetic beans\n-            return generateSyntheticBean(bean, reflectionRegistration);\n+            return generateSyntheticBean(bean, reflectionRegistration, existingClasses, beanToGeneratedName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU4MjYwNg=="}, "originalCommit": {"oid": "88bc300b4f51ec0a141ffd48ce1238158823c0b6"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzNzEwMg==", "bodyText": "I've created #8877.", "url": "https://github.com/quarkusio/quarkus/pull/8866#discussion_r415837102", "createdAt": "2020-04-27T13:59:47Z", "author": {"login": "mkouba"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanGenerator.java", "diffHunk": "@@ -96,28 +96,35 @@ public BeanGenerator(AnnotationLiteralProcessor annotationLiterals, Predicate<Do\n     /**\n      *\n      * @param bean\n+     * @param existingClasses\n+     * @param beanToGeneratedName\n      * @return a collection of resources\n      */\n-    Collection<Resource> generate(BeanInfo bean, ReflectionRegistration reflectionRegistration) {\n+    Collection<Resource> generate(BeanInfo bean, ReflectionRegistration reflectionRegistration, Set<String> existingClasses,\n+            Map<BeanInfo, String> beanToGeneratedName) {\n         if (bean.getTarget().isPresent()) {\n             AnnotationTarget target = bean.getTarget().get();\n             switch (target.kind()) {\n                 case CLASS:\n-                    return generateClassBean(bean, target.asClass(), reflectionRegistration);\n+                    return generateClassBean(bean, target.asClass(), reflectionRegistration, existingClasses,\n+                            beanToGeneratedName);\n                 case METHOD:\n-                    return generateProducerMethodBean(bean, target.asMethod(), reflectionRegistration);\n+                    return generateProducerMethodBean(bean, target.asMethod(), reflectionRegistration, existingClasses,\n+                            beanToGeneratedName);\n                 case FIELD:\n-                    return generateProducerFieldBean(bean, target.asField(), reflectionRegistration);\n+                    return generateProducerFieldBean(bean, target.asField(), reflectionRegistration, existingClasses,\n+                            beanToGeneratedName);\n                 default:\n                     throw new IllegalArgumentException(\"Unsupported bean type\");\n             }\n         } else {\n             // Synthetic beans\n-            return generateSyntheticBean(bean, reflectionRegistration);\n+            return generateSyntheticBean(bean, reflectionRegistration, existingClasses, beanToGeneratedName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU4MjYwNg=="}, "originalCommit": {"oid": "88bc300b4f51ec0a141ffd48ce1238158823c0b6"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4Njg5NDUyOnYy", "diffSide": "RIGHT", "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDoxMzoxNlrOGMlV5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDozNToxOFrOGMmeRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg0NzkxMA==", "bodyText": "So I think that we could set both the existingClasses and the map to the BeanGenerator final fields and avoid passing more arguments in all those methods. The same applies to ReflectionRegistration BTW. @stuartwdouglas I can add a commit to your PR if you don't mind ;-).", "url": "https://github.com/quarkusio/quarkus/pull/8866#discussion_r415847910", "createdAt": "2020-04-27T14:13:16Z", "author": {"login": "mkouba"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanGenerator.java", "diffHunk": "@@ -96,28 +96,35 @@ public BeanGenerator(AnnotationLiteralProcessor annotationLiterals, Predicate<Do\n     /**\n      *\n      * @param bean\n+     * @param existingClasses", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88bc300b4f51ec0a141ffd48ce1238158823c0b6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg2NjQzOQ==", "bodyText": "Done :-)", "url": "https://github.com/quarkusio/quarkus/pull/8866#discussion_r415866439", "createdAt": "2020-04-27T14:35:18Z", "author": {"login": "mkouba"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanGenerator.java", "diffHunk": "@@ -96,28 +96,35 @@ public BeanGenerator(AnnotationLiteralProcessor annotationLiterals, Predicate<Do\n     /**\n      *\n      * @param bean\n+     * @param existingClasses", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg0NzkxMA=="}, "originalCommit": {"oid": "88bc300b4f51ec0a141ffd48ce1238158823c0b6"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3295, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}