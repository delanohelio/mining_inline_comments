{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4OTU5Mzg2", "number": 9373, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNToxODo0MVrOD9Pkxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTozNzowOFrOD9hxeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTQ0OTAzOnYy", "diffSide": "RIGHT", "path": "extensions/panache/rest-data-panache/runtime/src/main/java/io/quarkus/rest/data/panache/ResourceProperties.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNToxODo0MVrOGWn0-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNTozNDoxMlrOGW8l2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3NDM5NQ==", "bodyText": "I assume this is used in addition to whatever the Class uses, right?", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426374395", "createdAt": "2020-05-18T05:18:41Z", "author": {"login": "geoand"}, "path": "extensions/panache/rest-data-panache/runtime/src/main/java/io/quarkus/rest/data/panache/ResourceProperties.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package io.quarkus.rest.data.panache;\n+\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+@Documented\n+@Retention(RUNTIME)\n+@Target({ TYPE })\n+public @interface ResourceProperties {\n+\n+    /**\n+     * Generate operations that support HAL content type.\n+     * HAL methods are generated in addition to the standard methods. They accept the same parameters but return a content of\n+     * `application/hal+json` type.\n+     * The operations that support HAL responses are `get`, `list`, `add` and `update`.\n+     *\n+     * Default: false.\n+     */\n+    boolean hal() default false;\n+\n+    /**\n+     * URL path segment that should be used to access the resources.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eda585c9a00d7cd77468893f8e096e00e083e811"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4MjAxMA==", "bodyText": "Looking at the tests, I see it does :)", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426382010", "createdAt": "2020-05-18T05:48:49Z", "author": {"login": "geoand"}, "path": "extensions/panache/rest-data-panache/runtime/src/main/java/io/quarkus/rest/data/panache/ResourceProperties.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package io.quarkus.rest.data.panache;\n+\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+@Documented\n+@Retention(RUNTIME)\n+@Target({ TYPE })\n+public @interface ResourceProperties {\n+\n+    /**\n+     * Generate operations that support HAL content type.\n+     * HAL methods are generated in addition to the standard methods. They accept the same parameters but return a content of\n+     * `application/hal+json` type.\n+     * The operations that support HAL responses are `get`, `list`, `add` and `update`.\n+     *\n+     * Default: false.\n+     */\n+    boolean hal() default false;\n+\n+    /**\n+     * URL path segment that should be used to access the resources.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3NDM5NQ=="}, "originalCommit": {"oid": "eda585c9a00d7cd77468893f8e096e00e083e811"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxMjEwNQ==", "bodyText": "Yes, I've added a @Path annotation to the class too", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426412105", "createdAt": "2020-05-18T07:13:06Z", "author": {"login": "gytis"}, "path": "extensions/panache/rest-data-panache/runtime/src/main/java/io/quarkus/rest/data/panache/ResourceProperties.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package io.quarkus.rest.data.panache;\n+\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+@Documented\n+@Retention(RUNTIME)\n+@Target({ TYPE })\n+public @interface ResourceProperties {\n+\n+    /**\n+     * Generate operations that support HAL content type.\n+     * HAL methods are generated in addition to the standard methods. They accept the same parameters but return a content of\n+     * `application/hal+json` type.\n+     * The operations that support HAL responses are `get`, `list`, `add` and `update`.\n+     *\n+     * Default: false.\n+     */\n+    boolean hal() default false;\n+\n+    /**\n+     * URL path segment that should be used to access the resources.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3NDM5NQ=="}, "originalCommit": {"oid": "eda585c9a00d7cd77468893f8e096e00e083e811"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcxNDU4Nw==", "bodyText": "Probably worth mentioning in the javadoc both here and on the OperationsProperties.path one to explain they accumulate.", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426714587", "createdAt": "2020-05-18T15:34:12Z", "author": {"login": "FroMage"}, "path": "extensions/panache/rest-data-panache/runtime/src/main/java/io/quarkus/rest/data/panache/ResourceProperties.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package io.quarkus.rest.data.panache;\n+\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+@Documented\n+@Retention(RUNTIME)\n+@Target({ TYPE })\n+public @interface ResourceProperties {\n+\n+    /**\n+     * Generate operations that support HAL content type.\n+     * HAL methods are generated in addition to the standard methods. They accept the same parameters but return a content of\n+     * `application/hal+json` type.\n+     * The operations that support HAL responses are `get`, `list`, `add` and `update`.\n+     *\n+     * Default: false.\n+     */\n+    boolean hal() default false;\n+\n+    /**\n+     * URL path segment that should be used to access the resources.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3NDM5NQ=="}, "originalCommit": {"oid": "eda585c9a00d7cd77468893f8e096e00e083e811"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTQ1MzE4OnYy", "diffSide": "RIGHT", "path": "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/PanacheCrudResourceInfo.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNToyMTo1MlrOGWn3oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwODozNjo1N1rOGWs-IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3NTA3Mg==", "bodyText": "Any reason why this was renamed?", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426375072", "createdAt": "2020-05-18T05:21:52Z", "author": {"login": "geoand"}, "path": "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/PanacheCrudResourceInfo.java", "diffHunk": "@@ -1,10 +1,10 @@\n-package io.quarkus.panache.rest.common.deployment;\n+package io.quarkus.rest.data.panache.deployment;\n \n import org.jboss.jandex.ClassInfo;\n \n import io.quarkus.builder.item.MultiBuildItem;\n \n-public final class PanacheCrudResourceBuildItem extends MultiBuildItem {\n+public final class PanacheCrudResourceInfo extends MultiBuildItem {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eda585c9a00d7cd77468893f8e096e00e083e811"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxMzY4Ng==", "bodyText": "Before it was already used by a processor which would extract separate bits of information and only pass what's needed to a specific method implementor. I made the method implementors more abstract now so processor wouldn't have to know too much details about them. Now it just passes this object to each implementor. So I assumed the name without \"BuildItem\" suffix would be more suitable. What do you think?", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426413686", "createdAt": "2020-05-18T07:16:41Z", "author": {"login": "gytis"}, "path": "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/PanacheCrudResourceInfo.java", "diffHunk": "@@ -1,10 +1,10 @@\n-package io.quarkus.panache.rest.common.deployment;\n+package io.quarkus.rest.data.panache.deployment;\n \n import org.jboss.jandex.ClassInfo;\n \n import io.quarkus.builder.item.MultiBuildItem;\n \n-public final class PanacheCrudResourceBuildItem extends MultiBuildItem {\n+public final class PanacheCrudResourceInfo extends MultiBuildItem {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3NTA3Mg=="}, "originalCommit": {"oid": "eda585c9a00d7cd77468893f8e096e00e083e811"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxNTQ3NQ==", "bodyText": "It just feels weird to have being a build item and not being called that. What we usually do in similar cases is to have a build item that just holds a reference to the regular class. Then in the non-build-step code you can just pass around the regular class. The build step classes would of course the build items to communicate.", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426415475", "createdAt": "2020-05-18T07:20:33Z", "author": {"login": "geoand"}, "path": "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/PanacheCrudResourceInfo.java", "diffHunk": "@@ -1,10 +1,10 @@\n-package io.quarkus.panache.rest.common.deployment;\n+package io.quarkus.rest.data.panache.deployment;\n \n import org.jboss.jandex.ClassInfo;\n \n import io.quarkus.builder.item.MultiBuildItem;\n \n-public final class PanacheCrudResourceBuildItem extends MultiBuildItem {\n+public final class PanacheCrudResourceInfo extends MultiBuildItem {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3NTA3Mg=="}, "originalCommit": {"oid": "eda585c9a00d7cd77468893f8e096e00e083e811"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQyMDQ2Nw==", "bodyText": "Yeah that makes sense, I'll extract it to a separate class", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426420467", "createdAt": "2020-05-18T07:30:19Z", "author": {"login": "gytis"}, "path": "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/PanacheCrudResourceInfo.java", "diffHunk": "@@ -1,10 +1,10 @@\n-package io.quarkus.panache.rest.common.deployment;\n+package io.quarkus.rest.data.panache.deployment;\n \n import org.jboss.jandex.ClassInfo;\n \n import io.quarkus.builder.item.MultiBuildItem;\n \n-public final class PanacheCrudResourceBuildItem extends MultiBuildItem {\n+public final class PanacheCrudResourceInfo extends MultiBuildItem {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3NTA3Mg=="}, "originalCommit": {"oid": "eda585c9a00d7cd77468893f8e096e00e083e811"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1ODY1Nw==", "bodyText": "Done", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426458657", "createdAt": "2020-05-18T08:36:57Z", "author": {"login": "gytis"}, "path": "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/PanacheCrudResourceInfo.java", "diffHunk": "@@ -1,10 +1,10 @@\n-package io.quarkus.panache.rest.common.deployment;\n+package io.quarkus.rest.data.panache.deployment;\n \n import org.jboss.jandex.ClassInfo;\n \n import io.quarkus.builder.item.MultiBuildItem;\n \n-public final class PanacheCrudResourceBuildItem extends MultiBuildItem {\n+public final class PanacheCrudResourceInfo extends MultiBuildItem {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3NTA3Mg=="}, "originalCommit": {"oid": "eda585c9a00d7cd77468893f8e096e00e083e811"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTQ4MTk4OnYy", "diffSide": "RIGHT", "path": "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/properties/ResourcePropertiesAccessor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNTozOTozOVrOGWoIlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwODozNjo1MFrOGWs93A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3OTQxMw==", "bodyText": "Minor nipick (can be fixed later): The use of controller seems a little out of place. Perhaps use resource instead?", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426379413", "createdAt": "2020-05-18T05:39:39Z", "author": {"login": "geoand"}, "path": "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/properties/ResourcePropertiesAccessor.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package io.quarkus.rest.data.panache.deployment.properties;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+\n+import io.quarkus.rest.data.panache.ResourceProperties;\n+import io.quarkus.rest.data.panache.deployment.utils.ResourceName;\n+\n+public class ResourcePropertiesAccessor {\n+\n+    private static final DotName RESOURCE_PROPERTIES_ANNOTATION = DotName.createSimple(ResourceProperties.class.getName());\n+\n+    private final IndexView index;\n+\n+    public ResourcePropertiesAccessor(IndexView index) {\n+        this.index = index;\n+    }\n+\n+    public boolean isHal(ClassInfo classInfo) {\n+        AnnotationInstance annotation = getAnnotation(classInfo);\n+        return annotation != null\n+                && annotation.value(\"hal\") != null\n+                && annotation.value(\"hal\").asBoolean();\n+    }\n+\n+    public String path(ClassInfo classInfo) {\n+        AnnotationInstance annotation = getAnnotation(classInfo);\n+        if (annotation == null || annotation.value(\"path\") == null || \"\".equals(annotation.value(\"path\").asString())) {\n+            return ResourceName.fromClass(classInfo.simpleName());\n+        }\n+        return annotation.value(\"path\").asString();\n+    }\n+\n+    private AnnotationInstance getAnnotation(ClassInfo classInfo) {\n+        if (classInfo.classAnnotation(RESOURCE_PROPERTIES_ANNOTATION) != null) {\n+            return classInfo.classAnnotation(RESOURCE_PROPERTIES_ANNOTATION);\n+        }\n+        if (classInfo.superName() != null) {\n+            ClassInfo superControllerInterface = index.getClassByName(classInfo.superName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eda585c9a00d7cd77468893f8e096e00e083e811"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxMzg5Mg==", "bodyText": "True. I'll take a note of this and will fix it separately after the release.", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426413892", "createdAt": "2020-05-18T07:17:09Z", "author": {"login": "gytis"}, "path": "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/properties/ResourcePropertiesAccessor.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package io.quarkus.rest.data.panache.deployment.properties;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+\n+import io.quarkus.rest.data.panache.ResourceProperties;\n+import io.quarkus.rest.data.panache.deployment.utils.ResourceName;\n+\n+public class ResourcePropertiesAccessor {\n+\n+    private static final DotName RESOURCE_PROPERTIES_ANNOTATION = DotName.createSimple(ResourceProperties.class.getName());\n+\n+    private final IndexView index;\n+\n+    public ResourcePropertiesAccessor(IndexView index) {\n+        this.index = index;\n+    }\n+\n+    public boolean isHal(ClassInfo classInfo) {\n+        AnnotationInstance annotation = getAnnotation(classInfo);\n+        return annotation != null\n+                && annotation.value(\"hal\") != null\n+                && annotation.value(\"hal\").asBoolean();\n+    }\n+\n+    public String path(ClassInfo classInfo) {\n+        AnnotationInstance annotation = getAnnotation(classInfo);\n+        if (annotation == null || annotation.value(\"path\") == null || \"\".equals(annotation.value(\"path\").asString())) {\n+            return ResourceName.fromClass(classInfo.simpleName());\n+        }\n+        return annotation.value(\"path\").asString();\n+    }\n+\n+    private AnnotationInstance getAnnotation(ClassInfo classInfo) {\n+        if (classInfo.classAnnotation(RESOURCE_PROPERTIES_ANNOTATION) != null) {\n+            return classInfo.classAnnotation(RESOURCE_PROPERTIES_ANNOTATION);\n+        }\n+        if (classInfo.superName() != null) {\n+            ClassInfo superControllerInterface = index.getClassByName(classInfo.superName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3OTQxMw=="}, "originalCommit": {"oid": "eda585c9a00d7cd77468893f8e096e00e083e811"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1ODU4OA==", "bodyText": "Renamed", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426458588", "createdAt": "2020-05-18T08:36:50Z", "author": {"login": "gytis"}, "path": "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/properties/ResourcePropertiesAccessor.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package io.quarkus.rest.data.panache.deployment.properties;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+\n+import io.quarkus.rest.data.panache.ResourceProperties;\n+import io.quarkus.rest.data.panache.deployment.utils.ResourceName;\n+\n+public class ResourcePropertiesAccessor {\n+\n+    private static final DotName RESOURCE_PROPERTIES_ANNOTATION = DotName.createSimple(ResourceProperties.class.getName());\n+\n+    private final IndexView index;\n+\n+    public ResourcePropertiesAccessor(IndexView index) {\n+        this.index = index;\n+    }\n+\n+    public boolean isHal(ClassInfo classInfo) {\n+        AnnotationInstance annotation = getAnnotation(classInfo);\n+        return annotation != null\n+                && annotation.value(\"hal\") != null\n+                && annotation.value(\"hal\").asBoolean();\n+    }\n+\n+    public String path(ClassInfo classInfo) {\n+        AnnotationInstance annotation = getAnnotation(classInfo);\n+        if (annotation == null || annotation.value(\"path\") == null || \"\".equals(annotation.value(\"path\").asString())) {\n+            return ResourceName.fromClass(classInfo.simpleName());\n+        }\n+        return annotation.value(\"path\").asString();\n+    }\n+\n+    private AnnotationInstance getAnnotation(ClassInfo classInfo) {\n+        if (classInfo.classAnnotation(RESOURCE_PROPERTIES_ANNOTATION) != null) {\n+            return classInfo.classAnnotation(RESOURCE_PROPERTIES_ANNOTATION);\n+        }\n+        if (classInfo.superName() != null) {\n+            ClassInfo superControllerInterface = index.getClassByName(classInfo.superName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3OTQxMw=="}, "originalCommit": {"oid": "eda585c9a00d7cd77468893f8e096e00e083e811"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTQ4NTQ4OnYy", "diffSide": "RIGHT", "path": "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/utils/ResourceName.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNTo0MToxNlrOGWoKfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwODozNjo0NVrOGWs9tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3OTkwMw==", "bodyText": "This seems to be unused now, no?", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426379903", "createdAt": "2020-05-18T05:41:16Z", "author": {"login": "geoand"}, "path": "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/utils/ResourceName.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package io.quarkus.rest.data.panache.deployment.utils;\n+\n+import static io.quarkus.runtime.util.StringUtil.camelHumpsIterator;\n+import static io.quarkus.runtime.util.StringUtil.lowerCase;\n+import static io.quarkus.runtime.util.StringUtil.toList;\n+import static io.quarkus.runtime.util.StringUtil.withoutSuffix;\n+\n+public final class ResourceName {\n+\n+    private static final String[] SUFFIXES = { \"controller\", \"resource\" };\n+\n+    public static String fromClass(Class<?> resourceClass) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eda585c9a00d7cd77468893f8e096e00e083e811"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxNjM4Mg==", "bodyText": "True, I had a use for it initially. I'll get rid of it.", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426416382", "createdAt": "2020-05-18T07:22:31Z", "author": {"login": "gytis"}, "path": "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/utils/ResourceName.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package io.quarkus.rest.data.panache.deployment.utils;\n+\n+import static io.quarkus.runtime.util.StringUtil.camelHumpsIterator;\n+import static io.quarkus.runtime.util.StringUtil.lowerCase;\n+import static io.quarkus.runtime.util.StringUtil.toList;\n+import static io.quarkus.runtime.util.StringUtil.withoutSuffix;\n+\n+public final class ResourceName {\n+\n+    private static final String[] SUFFIXES = { \"controller\", \"resource\" };\n+\n+    public static String fromClass(Class<?> resourceClass) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3OTkwMw=="}, "originalCommit": {"oid": "eda585c9a00d7cd77468893f8e096e00e083e811"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1ODU0OA==", "bodyText": "Removed", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426458548", "createdAt": "2020-05-18T08:36:45Z", "author": {"login": "gytis"}, "path": "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/utils/ResourceName.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package io.quarkus.rest.data.panache.deployment.utils;\n+\n+import static io.quarkus.runtime.util.StringUtil.camelHumpsIterator;\n+import static io.quarkus.runtime.util.StringUtil.lowerCase;\n+import static io.quarkus.runtime.util.StringUtil.toList;\n+import static io.quarkus.runtime.util.StringUtil.withoutSuffix;\n+\n+public final class ResourceName {\n+\n+    private static final String[] SUFFIXES = { \"controller\", \"resource\" };\n+\n+    public static String fromClass(Class<?> resourceClass) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3OTkwMw=="}, "originalCommit": {"oid": "eda585c9a00d7cd77468893f8e096e00e083e811"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTUwNDYzOnYy", "diffSide": "RIGHT", "path": "extensions/panache/rest-data-panache/runtime/src/main/java/io/quarkus/rest/data/panache/ResourceProperties.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNTo1MTowNlrOGWoVUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzozMTozN1rOGWqrqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4MjY3NQ==", "bodyText": "Not that I think this will ever be an issue, but by using \"\" as the default value, you are effectively preventing users from making an panache rest data resource without a path. Now that's probably A good thing, but I am just bringing it up in case you hadn't considered it. In any case it would probably be safer to use some nonsensical default valur", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426382675", "createdAt": "2020-05-18T05:51:06Z", "author": {"login": "geoand"}, "path": "extensions/panache/rest-data-panache/runtime/src/main/java/io/quarkus/rest/data/panache/ResourceProperties.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package io.quarkus.rest.data.panache;\n+\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+@Documented\n+@Retention(RUNTIME)\n+@Target({ TYPE })\n+public @interface ResourceProperties {\n+\n+    /**\n+     * Generate operations that support HAL content type.\n+     * HAL methods are generated in addition to the standard methods. They accept the same parameters but return a content of\n+     * `application/hal+json` type.\n+     * The operations that support HAL responses are `get`, `list`, `add` and `update`.\n+     *\n+     * Default: false.\n+     */\n+    boolean hal() default false;\n+\n+    /**\n+     * URL path segment that should be used to access the resources.\n+     *\n+     * Default: hyphenated resource name without a suffix. Ignored suffixes are `Controller` and `Resource`.\n+     */\n+    String path() default \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eda585c9a00d7cd77468893f8e096e00e083e811"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxNDg2MQ==", "bodyText": "Hmm, we could maybe change this later too. Adding a nonsense value and based on that not add an annotation at all. I need to add some default value because otherwise user will always have to specify a path when using this annotation.", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426414861", "createdAt": "2020-05-18T07:19:19Z", "author": {"login": "gytis"}, "path": "extensions/panache/rest-data-panache/runtime/src/main/java/io/quarkus/rest/data/panache/ResourceProperties.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package io.quarkus.rest.data.panache;\n+\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+@Documented\n+@Retention(RUNTIME)\n+@Target({ TYPE })\n+public @interface ResourceProperties {\n+\n+    /**\n+     * Generate operations that support HAL content type.\n+     * HAL methods are generated in addition to the standard methods. They accept the same parameters but return a content of\n+     * `application/hal+json` type.\n+     * The operations that support HAL responses are `get`, `list`, `add` and `update`.\n+     *\n+     * Default: false.\n+     */\n+    boolean hal() default false;\n+\n+    /**\n+     * URL path segment that should be used to access the resources.\n+     *\n+     * Default: hyphenated resource name without a suffix. Ignored suffixes are `Controller` and `Resource`.\n+     */\n+    String path() default \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4MjY3NQ=="}, "originalCommit": {"oid": "eda585c9a00d7cd77468893f8e096e00e083e811"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxNjAxMg==", "bodyText": "Yeah, I understand the need for a default value, just saying that \"\" is not the proper one :)", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426416012", "createdAt": "2020-05-18T07:21:43Z", "author": {"login": "geoand"}, "path": "extensions/panache/rest-data-panache/runtime/src/main/java/io/quarkus/rest/data/panache/ResourceProperties.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package io.quarkus.rest.data.panache;\n+\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+@Documented\n+@Retention(RUNTIME)\n+@Target({ TYPE })\n+public @interface ResourceProperties {\n+\n+    /**\n+     * Generate operations that support HAL content type.\n+     * HAL methods are generated in addition to the standard methods. They accept the same parameters but return a content of\n+     * `application/hal+json` type.\n+     * The operations that support HAL responses are `get`, `list`, `add` and `update`.\n+     *\n+     * Default: false.\n+     */\n+    boolean hal() default false;\n+\n+    /**\n+     * URL path segment that should be used to access the resources.\n+     *\n+     * Default: hyphenated resource name without a suffix. Ignored suffixes are `Controller` and `Resource`.\n+     */\n+    String path() default \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4MjY3NQ=="}, "originalCommit": {"oid": "eda585c9a00d7cd77468893f8e096e00e083e811"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQyMDg5OA==", "bodyText": "Shall we change it separately after the release? I don't want to hold this PR for too long.", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426420898", "createdAt": "2020-05-18T07:31:06Z", "author": {"login": "gytis"}, "path": "extensions/panache/rest-data-panache/runtime/src/main/java/io/quarkus/rest/data/panache/ResourceProperties.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package io.quarkus.rest.data.panache;\n+\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+@Documented\n+@Retention(RUNTIME)\n+@Target({ TYPE })\n+public @interface ResourceProperties {\n+\n+    /**\n+     * Generate operations that support HAL content type.\n+     * HAL methods are generated in addition to the standard methods. They accept the same parameters but return a content of\n+     * `application/hal+json` type.\n+     * The operations that support HAL responses are `get`, `list`, `add` and `update`.\n+     *\n+     * Default: false.\n+     */\n+    boolean hal() default false;\n+\n+    /**\n+     * URL path segment that should be used to access the resources.\n+     *\n+     * Default: hyphenated resource name without a suffix. Ignored suffixes are `Controller` and `Resource`.\n+     */\n+    String path() default \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4MjY3NQ=="}, "originalCommit": {"oid": "eda585c9a00d7cd77468893f8e096e00e083e811"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQyMTE2MQ==", "bodyText": "Sure yeah", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426421161", "createdAt": "2020-05-18T07:31:37Z", "author": {"login": "geoand"}, "path": "extensions/panache/rest-data-panache/runtime/src/main/java/io/quarkus/rest/data/panache/ResourceProperties.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package io.quarkus.rest.data.panache;\n+\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+@Documented\n+@Retention(RUNTIME)\n+@Target({ TYPE })\n+public @interface ResourceProperties {\n+\n+    /**\n+     * Generate operations that support HAL content type.\n+     * HAL methods are generated in addition to the standard methods. They accept the same parameters but return a content of\n+     * `application/hal+json` type.\n+     * The operations that support HAL responses are `get`, `list`, `add` and `update`.\n+     *\n+     * Default: false.\n+     */\n+    boolean hal() default false;\n+\n+    /**\n+     * URL path segment that should be used to access the resources.\n+     *\n+     * Default: hyphenated resource name without a suffix. Ignored suffixes are `Controller` and `Resource`.\n+     */\n+    String path() default \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4MjY3NQ=="}, "originalCommit": {"oid": "eda585c9a00d7cd77468893f8e096e00e083e811"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzU0NDc4OnYy", "diffSide": "RIGHT", "path": "extensions/panache/hibernate-orm-rest-data-panache/deployment/src/test/java/io/quarkus/hibernate/orm/rest/data/panache/deployment/CustomPathItemsResource.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNToyNToyNlrOGW8Obw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjozMjozMVrOGW--XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcwODU5MQ==", "bodyText": "So you were against CRUD in the module name, but not here in the resource name? Should it be PanacheEntityDataResource?", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426708591", "createdAt": "2020-05-18T15:25:26Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-rest-data-panache/deployment/src/test/java/io/quarkus/hibernate/orm/rest/data/panache/deployment/CustomPathItemsResource.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package io.quarkus.hibernate.orm.rest.data.panache.deployment;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.core.Response;\n+\n+import io.quarkus.hibernate.orm.rest.data.panache.PanacheEntityCrudResource;\n+import io.quarkus.rest.data.panache.OperationProperties;\n+import io.quarkus.rest.data.panache.ResourceProperties;\n+\n+@ResourceProperties(path = \"custom-items\", hal = true)\n+public interface CustomPathItemsResource extends PanacheEntityCrudResource<Item, Long> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd4ae3d73c5e3ebec9a5d1e592e8bf945461a4b7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcyMzcwMw==", "bodyText": "It does sounds better to me without CRUD. I'll try to rename it quickly.", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426723703", "createdAt": "2020-05-18T15:47:24Z", "author": {"login": "gytis"}, "path": "extensions/panache/hibernate-orm-rest-data-panache/deployment/src/test/java/io/quarkus/hibernate/orm/rest/data/panache/deployment/CustomPathItemsResource.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package io.quarkus.hibernate.orm.rest.data.panache.deployment;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.core.Response;\n+\n+import io.quarkus.hibernate.orm.rest.data.panache.PanacheEntityCrudResource;\n+import io.quarkus.rest.data.panache.OperationProperties;\n+import io.quarkus.rest.data.panache.ResourceProperties;\n+\n+@ResourceProperties(path = \"custom-items\", hal = true)\n+public interface CustomPathItemsResource extends PanacheEntityCrudResource<Item, Long> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcwODU5MQ=="}, "originalCommit": {"oid": "cd4ae3d73c5e3ebec9a5d1e592e8bf945461a4b7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcyOTMzNg==", "bodyText": "Maybe just PanacheEntityResource?", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426729336", "createdAt": "2020-05-18T15:55:28Z", "author": {"login": "gytis"}, "path": "extensions/panache/hibernate-orm-rest-data-panache/deployment/src/test/java/io/quarkus/hibernate/orm/rest/data/panache/deployment/CustomPathItemsResource.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package io.quarkus.hibernate.orm.rest.data.panache.deployment;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.core.Response;\n+\n+import io.quarkus.hibernate.orm.rest.data.panache.PanacheEntityCrudResource;\n+import io.quarkus.rest.data.panache.OperationProperties;\n+import io.quarkus.rest.data.panache.ResourceProperties;\n+\n+@ResourceProperties(path = \"custom-items\", hal = true)\n+public interface CustomPathItemsResource extends PanacheEntityCrudResource<Item, Long> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcwODU5MQ=="}, "originalCommit": {"oid": "cd4ae3d73c5e3ebec9a5d1e592e8bf945461a4b7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjczMTgyOA==", "bodyText": "I guess, yes.", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426731828", "createdAt": "2020-05-18T15:58:17Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-rest-data-panache/deployment/src/test/java/io/quarkus/hibernate/orm/rest/data/panache/deployment/CustomPathItemsResource.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package io.quarkus.hibernate.orm.rest.data.panache.deployment;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.core.Response;\n+\n+import io.quarkus.hibernate.orm.rest.data.panache.PanacheEntityCrudResource;\n+import io.quarkus.rest.data.panache.OperationProperties;\n+import io.quarkus.rest.data.panache.ResourceProperties;\n+\n+@ResourceProperties(path = \"custom-items\", hal = true)\n+public interface CustomPathItemsResource extends PanacheEntityCrudResource<Item, Long> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcwODU5MQ=="}, "originalCommit": {"oid": "cd4ae3d73c5e3ebec9a5d1e592e8bf945461a4b7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjczMjI4Mw==", "bodyText": "Probably the same simplification could be done to the repository base name?", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426732283", "createdAt": "2020-05-18T15:58:56Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-rest-data-panache/deployment/src/test/java/io/quarkus/hibernate/orm/rest/data/panache/deployment/CustomPathItemsResource.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package io.quarkus.hibernate.orm.rest.data.panache.deployment;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.core.Response;\n+\n+import io.quarkus.hibernate.orm.rest.data.panache.PanacheEntityCrudResource;\n+import io.quarkus.rest.data.panache.OperationProperties;\n+import io.quarkus.rest.data.panache.ResourceProperties;\n+\n+@ResourceProperties(path = \"custom-items\", hal = true)\n+public interface CustomPathItemsResource extends PanacheEntityCrudResource<Item, Long> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcwODU5MQ=="}, "originalCommit": {"oid": "cd4ae3d73c5e3ebec9a5d1e592e8bf945461a4b7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjczNjkxMg==", "bodyText": "Yes of course. Will do PanacheEntityResource and PanacheRepositoryResource for the ones defined in the Hibernate extension. And RestDataResource for that one defined in the common module that is extended by the first two.", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426736912", "createdAt": "2020-05-18T16:06:01Z", "author": {"login": "gytis"}, "path": "extensions/panache/hibernate-orm-rest-data-panache/deployment/src/test/java/io/quarkus/hibernate/orm/rest/data/panache/deployment/CustomPathItemsResource.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package io.quarkus.hibernate.orm.rest.data.panache.deployment;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.core.Response;\n+\n+import io.quarkus.hibernate.orm.rest.data.panache.PanacheEntityCrudResource;\n+import io.quarkus.rest.data.panache.OperationProperties;\n+import io.quarkus.rest.data.panache.ResourceProperties;\n+\n+@ResourceProperties(path = \"custom-items\", hal = true)\n+public interface CustomPathItemsResource extends PanacheEntityCrudResource<Item, Long> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcwODU5MQ=="}, "originalCommit": {"oid": "cd4ae3d73c5e3ebec9a5d1e592e8bf945461a4b7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0NjA1NQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426746055", "createdAt": "2020-05-18T16:20:17Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-rest-data-panache/deployment/src/test/java/io/quarkus/hibernate/orm/rest/data/panache/deployment/CustomPathItemsResource.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package io.quarkus.hibernate.orm.rest.data.panache.deployment;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.core.Response;\n+\n+import io.quarkus.hibernate.orm.rest.data.panache.PanacheEntityCrudResource;\n+import io.quarkus.rest.data.panache.OperationProperties;\n+import io.quarkus.rest.data.panache.ResourceProperties;\n+\n+@ResourceProperties(path = \"custom-items\", hal = true)\n+public interface CustomPathItemsResource extends PanacheEntityCrudResource<Item, Long> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcwODU5MQ=="}, "originalCommit": {"oid": "cd4ae3d73c5e3ebec9a5d1e592e8bf945461a4b7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc1MzYyOQ==", "bodyText": "Done", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426753629", "createdAt": "2020-05-18T16:32:31Z", "author": {"login": "gytis"}, "path": "extensions/panache/hibernate-orm-rest-data-panache/deployment/src/test/java/io/quarkus/hibernate/orm/rest/data/panache/deployment/CustomPathItemsResource.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package io.quarkus.hibernate.orm.rest.data.panache.deployment;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.core.Response;\n+\n+import io.quarkus.hibernate.orm.rest.data.panache.PanacheEntityCrudResource;\n+import io.quarkus.rest.data.panache.OperationProperties;\n+import io.quarkus.rest.data.panache.ResourceProperties;\n+\n+@ResourceProperties(path = \"custom-items\", hal = true)\n+public interface CustomPathItemsResource extends PanacheEntityCrudResource<Item, Long> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcwODU5MQ=="}, "originalCommit": {"oid": "cd4ae3d73c5e3ebec9a5d1e592e8bf945461a4b7"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzU1ODA0OnYy", "diffSide": "RIGHT", "path": "extensions/panache/hibernate-orm-rest-data-panache/deployment/src/test/java/io/quarkus/hibernate/orm/rest/data/panache/deployment/CustomPathItemsResource.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNToyODoyNVrOGW8WuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjozMjozOFrOGW--nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcxMDcxMw==", "bodyText": "Given that you've called the class annotation ResourceProperties after JAX-RS's (horrible) choice, is there a colloquial term for methods too or did you pick Operation at random?\nFTR JAX-RS calls methods \"resource methods\":\n\nResource methods are methods of a resource class annotated with a request method designator. They are\nused to handle requests and MUST conform to certain restrictions described in this section.\nA request method designator is a runtime annotation that is annotated with the @HttpMethod annotation.\nJAX-RS defines a set of request method designators for the common HTTP methods: @get, @post, @put,\n@delete, @patch, @Head and @options. Users may define their own custom request method designators\nincluding alternate designators for the common HTTP methods\n\nI just want to make sure people are not going to object at us calling this an Operation.", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426710713", "createdAt": "2020-05-18T15:28:25Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-rest-data-panache/deployment/src/test/java/io/quarkus/hibernate/orm/rest/data/panache/deployment/CustomPathItemsResource.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package io.quarkus.hibernate.orm.rest.data.panache.deployment;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.core.Response;\n+\n+import io.quarkus.hibernate.orm.rest.data.panache.PanacheEntityCrudResource;\n+import io.quarkus.rest.data.panache.OperationProperties;\n+import io.quarkus.rest.data.panache.ResourceProperties;\n+\n+@ResourceProperties(path = \"custom-items\", hal = true)\n+public interface CustomPathItemsResource extends PanacheEntityCrudResource<Item, Long> {\n+\n+    @OperationProperties(path = \"api\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd4ae3d73c5e3ebec9a5d1e592e8bf945461a4b7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcyMDkyOA==", "bodyText": "I called them operations, because that term seems to be used in W3C https://www.w3.org/2001/sw/wiki/REST#Operations_on_Elements. I'm not a purist of any terminology. So whichever is more acceptable I'm fine with it.", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426720928", "createdAt": "2020-05-18T15:43:23Z", "author": {"login": "gytis"}, "path": "extensions/panache/hibernate-orm-rest-data-panache/deployment/src/test/java/io/quarkus/hibernate/orm/rest/data/panache/deployment/CustomPathItemsResource.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package io.quarkus.hibernate.orm.rest.data.panache.deployment;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.core.Response;\n+\n+import io.quarkus.hibernate.orm.rest.data.panache.PanacheEntityCrudResource;\n+import io.quarkus.rest.data.panache.OperationProperties;\n+import io.quarkus.rest.data.panache.ResourceProperties;\n+\n+@ResourceProperties(path = \"custom-items\", hal = true)\n+public interface CustomPathItemsResource extends PanacheEntityCrudResource<Item, Long> {\n+\n+    @OperationProperties(path = \"api\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcxMDcxMw=="}, "originalCommit": {"oid": "cd4ae3d73c5e3ebec9a5d1e592e8bf945461a4b7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcyNjY5Mw==", "bodyText": "If method is closer to JAX-RS which is what we're using I'm fine with it", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426726693", "createdAt": "2020-05-18T15:51:42Z", "author": {"login": "gytis"}, "path": "extensions/panache/hibernate-orm-rest-data-panache/deployment/src/test/java/io/quarkus/hibernate/orm/rest/data/panache/deployment/CustomPathItemsResource.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package io.quarkus.hibernate.orm.rest.data.panache.deployment;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.core.Response;\n+\n+import io.quarkus.hibernate.orm.rest.data.panache.PanacheEntityCrudResource;\n+import io.quarkus.rest.data.panache.OperationProperties;\n+import io.quarkus.rest.data.panache.ResourceProperties;\n+\n+@ResourceProperties(path = \"custom-items\", hal = true)\n+public interface CustomPathItemsResource extends PanacheEntityCrudResource<Item, Long> {\n+\n+    @OperationProperties(path = \"api\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcxMDcxMw=="}, "originalCommit": {"oid": "cd4ae3d73c5e3ebec9a5d1e592e8bf945461a4b7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjczMDE4Mg==", "bodyText": "I'm only mentioning it because we started with \u201ccontroller\u201d and we got forced to adhere to JAX-RS's (mistaken) \u201cresource\u201d. So if we need to map all the way to JAX-RS probably it should be @MethodProperties?\nBTW, that link you posted is non-normative. Reference for REST is https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm (and doesn't mention operations at all. I couldn't find at a glance how it refers to the operations you can do on the resources) but seems to call them \u201coperations\u201d.", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426730182", "createdAt": "2020-05-18T15:56:36Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-rest-data-panache/deployment/src/test/java/io/quarkus/hibernate/orm/rest/data/panache/deployment/CustomPathItemsResource.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package io.quarkus.hibernate.orm.rest.data.panache.deployment;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.core.Response;\n+\n+import io.quarkus.hibernate.orm.rest.data.panache.PanacheEntityCrudResource;\n+import io.quarkus.rest.data.panache.OperationProperties;\n+import io.quarkus.rest.data.panache.ResourceProperties;\n+\n+@ResourceProperties(path = \"custom-items\", hal = true)\n+public interface CustomPathItemsResource extends PanacheEntityCrudResource<Item, Long> {\n+\n+    @OperationProperties(path = \"api\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcxMDcxMw=="}, "originalCommit": {"oid": "cd4ae3d73c5e3ebec9a5d1e592e8bf945461a4b7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjczNTU2Mw==", "bodyText": "Yeah I'll just rename to @MethodProperties to be inline with JAX-RS. I'm renaming the interface anyway, so will do it at the same time.", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426735563", "createdAt": "2020-05-18T16:03:56Z", "author": {"login": "gytis"}, "path": "extensions/panache/hibernate-orm-rest-data-panache/deployment/src/test/java/io/quarkus/hibernate/orm/rest/data/panache/deployment/CustomPathItemsResource.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package io.quarkus.hibernate.orm.rest.data.panache.deployment;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.core.Response;\n+\n+import io.quarkus.hibernate.orm.rest.data.panache.PanacheEntityCrudResource;\n+import io.quarkus.rest.data.panache.OperationProperties;\n+import io.quarkus.rest.data.panache.ResourceProperties;\n+\n+@ResourceProperties(path = \"custom-items\", hal = true)\n+public interface CustomPathItemsResource extends PanacheEntityCrudResource<Item, Long> {\n+\n+    @OperationProperties(path = \"api\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcxMDcxMw=="}, "originalCommit": {"oid": "cd4ae3d73c5e3ebec9a5d1e592e8bf945461a4b7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc1MzY5Mg==", "bodyText": "Done", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426753692", "createdAt": "2020-05-18T16:32:38Z", "author": {"login": "gytis"}, "path": "extensions/panache/hibernate-orm-rest-data-panache/deployment/src/test/java/io/quarkus/hibernate/orm/rest/data/panache/deployment/CustomPathItemsResource.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package io.quarkus.hibernate.orm.rest.data.panache.deployment;\n+\n+import java.util.List;\n+\n+import javax.ws.rs.core.Response;\n+\n+import io.quarkus.hibernate.orm.rest.data.panache.PanacheEntityCrudResource;\n+import io.quarkus.rest.data.panache.OperationProperties;\n+import io.quarkus.rest.data.panache.ResourceProperties;\n+\n+@ResourceProperties(path = \"custom-items\", hal = true)\n+public interface CustomPathItemsResource extends PanacheEntityCrudResource<Item, Long> {\n+\n+    @OperationProperties(path = \"api\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcxMDcxMw=="}, "originalCommit": {"oid": "cd4ae3d73c5e3ebec9a5d1e592e8bf945461a4b7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzU3NTY2OnYy", "diffSide": "RIGHT", "path": "extensions/panache/rest-data-panache/runtime/src/main/java/io/quarkus/rest/data/panache/OperationProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNTozMjo0MlrOGW8h9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjozMjo1NVrOGW-_Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcxMzU5MA==", "bodyText": "Could probably do with javadoc to mention this annotation is not mandatory unless you want to override the defaults.", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426713590", "createdAt": "2020-05-18T15:32:42Z", "author": {"login": "FroMage"}, "path": "extensions/panache/rest-data-panache/runtime/src/main/java/io/quarkus/rest/data/panache/OperationProperties.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package io.quarkus.rest.data.panache;\n+\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+@Documented\n+@Retention(RUNTIME)\n+@Target({ METHOD })\n+public @interface OperationProperties {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd4ae3d73c5e3ebec9a5d1e592e8bf945461a4b7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc1Mzg2Mg==", "bodyText": "Done", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426753862", "createdAt": "2020-05-18T16:32:55Z", "author": {"login": "gytis"}, "path": "extensions/panache/rest-data-panache/runtime/src/main/java/io/quarkus/rest/data/panache/OperationProperties.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package io.quarkus.rest.data.panache;\n+\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+@Documented\n+@Retention(RUNTIME)\n+@Target({ METHOD })\n+public @interface OperationProperties {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcxMzU5MA=="}, "originalCommit": {"oid": "cd4ae3d73c5e3ebec9a5d1e592e8bf945461a4b7"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzU3NjM2OnYy", "diffSide": "RIGHT", "path": "extensions/panache/rest-data-panache/runtime/src/main/java/io/quarkus/rest/data/panache/ResourceProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNTozMjo1MVrOGW8iWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjozMzowMlrOGW-_fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcxMzY4OQ==", "bodyText": "Could probably do with javadoc to mention this annotation is not mandatory unless you want to override the defaults.", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426713689", "createdAt": "2020-05-18T15:32:51Z", "author": {"login": "FroMage"}, "path": "extensions/panache/rest-data-panache/runtime/src/main/java/io/quarkus/rest/data/panache/ResourceProperties.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package io.quarkus.rest.data.panache;\n+\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+@Documented\n+@Retention(RUNTIME)\n+@Target({ TYPE })\n+public @interface ResourceProperties {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd4ae3d73c5e3ebec9a5d1e592e8bf945461a4b7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc1MzkxOA==", "bodyText": "Done", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426753918", "createdAt": "2020-05-18T16:33:02Z", "author": {"login": "gytis"}, "path": "extensions/panache/rest-data-panache/runtime/src/main/java/io/quarkus/rest/data/panache/ResourceProperties.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package io.quarkus.rest.data.panache;\n+\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+@Documented\n+@Retention(RUNTIME)\n+@Target({ TYPE })\n+public @interface ResourceProperties {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcxMzY4OQ=="}, "originalCommit": {"oid": "cd4ae3d73c5e3ebec9a5d1e592e8bf945461a4b7"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODQxOTM0OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/rest-data-panache.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTozMzoxOFrOGXE04w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMTowMTozOFrOGXHXTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg0OTUwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            == Setting up Panache REST\n          \n          \n            \n            == Setting up REST Data with Panache", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426849507", "createdAt": "2020-05-18T19:33:18Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/rest-data-panache.adoc", "diffHunk": "@@ -0,0 +1,247 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Generating JAX-RS resources with Panache\n+\n+include::./attributes.adoc[]\n+:extension-status: experimental\n+\n+A lot of web applications are monotonous CRUD applications with REST APIs that are tedious to write.\n+To streamline this task, REST Data with Panache extension can generate the basic CRUD endpoints for your entities and repositories.\n+\n+While this extension is still experimental and provides a limited feature set, we hope to get an early feedback for it.\n+Currently this extension supports Hibernate ORM with Panache and can generate CRUD resources that work with `application/json` and `application/hal+json` content.\n+\n+include::./status-include.adoc[]\n+\n+== Setting up Panache REST", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81afeceac5ba7d94e62c05ead9ecb6021708983a"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg5MTA4Ng==", "bodyText": "Sorry I moved it over quick, missed some obvious stuff.", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426891086", "createdAt": "2020-05-18T21:01:38Z", "author": {"login": "gytis"}, "path": "docs/src/main/asciidoc/rest-data-panache.adoc", "diffHunk": "@@ -0,0 +1,247 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Generating JAX-RS resources with Panache\n+\n+include::./attributes.adoc[]\n+:extension-status: experimental\n+\n+A lot of web applications are monotonous CRUD applications with REST APIs that are tedious to write.\n+To streamline this task, REST Data with Panache extension can generate the basic CRUD endpoints for your entities and repositories.\n+\n+While this extension is still experimental and provides a limited feature set, we hope to get an early feedback for it.\n+Currently this extension supports Hibernate ORM with Panache and can generate CRUD resources that work with `application/json` and `application/hal+json` content.\n+\n+include::./status-include.adoc[]\n+\n+== Setting up Panache REST", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg0OTUwNw=="}, "originalCommit": {"oid": "81afeceac5ba7d94e62c05ead9ecb6021708983a"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODQyMDUxOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/rest-data-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTozMzo0NVrOGXE1oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTozMzo0NVrOGXE1oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg0OTY5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ** Hibernate ORM data REST with Panache extension (`quarkus-hibernate-orm-rest-data-panache`)\n          \n          \n            \n            ** Hibernate ORM REST Data with Panache extension (`quarkus-hibernate-orm-rest-data-panache`)", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426849696", "createdAt": "2020-05-18T19:33:45Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/rest-data-panache.adoc", "diffHunk": "@@ -0,0 +1,247 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Generating JAX-RS resources with Panache\n+\n+include::./attributes.adoc[]\n+:extension-status: experimental\n+\n+A lot of web applications are monotonous CRUD applications with REST APIs that are tedious to write.\n+To streamline this task, REST Data with Panache extension can generate the basic CRUD endpoints for your entities and repositories.\n+\n+While this extension is still experimental and provides a limited feature set, we hope to get an early feedback for it.\n+Currently this extension supports Hibernate ORM with Panache and can generate CRUD resources that work with `application/json` and `application/hal+json` content.\n+\n+include::./status-include.adoc[]\n+\n+== Setting up Panache REST\n+\n+To begin with:\n+\n+* Add the required dependencies to your `pom.xml`\n+** Hibernate ORM data REST with Panache extension (`quarkus-hibernate-orm-rest-data-panache`)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81afeceac5ba7d94e62c05ead9ecb6021708983a"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODQyMDkyOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/rest-data-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTozMzo1NVrOGXE16w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTozMzo1NVrOGXE16w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg0OTc3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ** One of the RestEasy JSON serialization extensions (`quarkus-resteasy-jackson` or `quarkus-resteasy-jsonb`)\n          \n          \n            \n            ** One of the RESTEasy JSON serialization extensions (`quarkus-resteasy-jackson` or `quarkus-resteasy-jsonb`)", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426849771", "createdAt": "2020-05-18T19:33:55Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/rest-data-panache.adoc", "diffHunk": "@@ -0,0 +1,247 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Generating JAX-RS resources with Panache\n+\n+include::./attributes.adoc[]\n+:extension-status: experimental\n+\n+A lot of web applications are monotonous CRUD applications with REST APIs that are tedious to write.\n+To streamline this task, REST Data with Panache extension can generate the basic CRUD endpoints for your entities and repositories.\n+\n+While this extension is still experimental and provides a limited feature set, we hope to get an early feedback for it.\n+Currently this extension supports Hibernate ORM with Panache and can generate CRUD resources that work with `application/json` and `application/hal+json` content.\n+\n+include::./status-include.adoc[]\n+\n+== Setting up Panache REST\n+\n+To begin with:\n+\n+* Add the required dependencies to your `pom.xml`\n+** Hibernate ORM data REST with Panache extension (`quarkus-hibernate-orm-rest-data-panache`)\n+** A JDBC driver extension (`quarkus-jdbc-postgresql`, `quarkus-jdbc-h2`, `quarkus-jdbc-mariadb`, ...)\n+** One of the RestEasy JSON serialization extensions (`quarkus-resteasy-jackson` or `quarkus-resteasy-jsonb`)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81afeceac5ba7d94e62c05ead9ecb6021708983a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODQyMTk2OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/rest-data-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTozNDoxOVrOGXE2qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTozNDoxOVrOGXE2qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg0OTk2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Panache REST generates JAX-RS resources based on the interfaces available in your application.\n          \n          \n            \n            REST Data with Panache generates JAX-RS resources based on the interfaces available in your application.", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426849960", "createdAt": "2020-05-18T19:34:19Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/rest-data-panache.adoc", "diffHunk": "@@ -0,0 +1,247 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Generating JAX-RS resources with Panache\n+\n+include::./attributes.adoc[]\n+:extension-status: experimental\n+\n+A lot of web applications are monotonous CRUD applications with REST APIs that are tedious to write.\n+To streamline this task, REST Data with Panache extension can generate the basic CRUD endpoints for your entities and repositories.\n+\n+While this extension is still experimental and provides a limited feature set, we hope to get an early feedback for it.\n+Currently this extension supports Hibernate ORM with Panache and can generate CRUD resources that work with `application/json` and `application/hal+json` content.\n+\n+include::./status-include.adoc[]\n+\n+== Setting up Panache REST\n+\n+To begin with:\n+\n+* Add the required dependencies to your `pom.xml`\n+** Hibernate ORM data REST with Panache extension (`quarkus-hibernate-orm-rest-data-panache`)\n+** A JDBC driver extension (`quarkus-jdbc-postgresql`, `quarkus-jdbc-h2`, `quarkus-jdbc-mariadb`, ...)\n+** One of the RestEasy JSON serialization extensions (`quarkus-resteasy-jackson` or `quarkus-resteasy-jsonb`)\n+\n+[source,xml]\n+----\n+<dependencies>\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-hibernate-orm-rest-data-panache</artifactId>\n+    </dependency>\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-jdbc-postgresql</artifactId>\n+    </dependency>\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-resteasy-jackson</artifactId>\n+    </dependency>\n+</dependencies>\n+----\n+\n+* Implement the Panache entities and/or repositories as explained in the link:hibernate-orm-panache[Hibernate ORM with Panache guide].\n+* Define the interfaces for generation as explained in the sections below.\n+\n+== Generating resources\n+\n+Panache REST generates JAX-RS resources based on the interfaces available in your application.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81afeceac5ba7d94e62c05ead9ecb6021708983a"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODQyMzAxOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/rest-data-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTozNDozOVrOGXE3Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTozNDozOVrOGXE3Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1MDExNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If your application has an entity (e.g. `Person`) that extends either `PanacheEntity` or `PanacheEntityBase` class, you could instruct Panache REST to generate its JAX-RS resource with the following interface:\n          \n          \n            \n            If your application has an entity (e.g. `Person`) that extends either `PanacheEntity` or `PanacheEntityBase` class, you could instruct REST Data with Panache to generate its JAX-RS resource with the following interface:", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426850115", "createdAt": "2020-05-18T19:34:39Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/rest-data-panache.adoc", "diffHunk": "@@ -0,0 +1,247 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Generating JAX-RS resources with Panache\n+\n+include::./attributes.adoc[]\n+:extension-status: experimental\n+\n+A lot of web applications are monotonous CRUD applications with REST APIs that are tedious to write.\n+To streamline this task, REST Data with Panache extension can generate the basic CRUD endpoints for your entities and repositories.\n+\n+While this extension is still experimental and provides a limited feature set, we hope to get an early feedback for it.\n+Currently this extension supports Hibernate ORM with Panache and can generate CRUD resources that work with `application/json` and `application/hal+json` content.\n+\n+include::./status-include.adoc[]\n+\n+== Setting up Panache REST\n+\n+To begin with:\n+\n+* Add the required dependencies to your `pom.xml`\n+** Hibernate ORM data REST with Panache extension (`quarkus-hibernate-orm-rest-data-panache`)\n+** A JDBC driver extension (`quarkus-jdbc-postgresql`, `quarkus-jdbc-h2`, `quarkus-jdbc-mariadb`, ...)\n+** One of the RestEasy JSON serialization extensions (`quarkus-resteasy-jackson` or `quarkus-resteasy-jsonb`)\n+\n+[source,xml]\n+----\n+<dependencies>\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-hibernate-orm-rest-data-panache</artifactId>\n+    </dependency>\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-jdbc-postgresql</artifactId>\n+    </dependency>\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-resteasy-jackson</artifactId>\n+    </dependency>\n+</dependencies>\n+----\n+\n+* Implement the Panache entities and/or repositories as explained in the link:hibernate-orm-panache[Hibernate ORM with Panache guide].\n+* Define the interfaces for generation as explained in the sections below.\n+\n+== Generating resources\n+\n+Panache REST generates JAX-RS resources based on the interfaces available in your application.\n+For each entity and repository that you want to generate, provide an interface that extends either `PanacheEntityResource` or `PanacheRepositoryResource` interface.\n+_Do not implement these interfaces and don't provide custom methods because they will be ignored._ You can, however, override the methods from the extended interface in order to customize them (see the section at the end).\n+\n+=== PanacheEntityResource\n+\n+If your application has an entity (e.g. `Person`) that extends either `PanacheEntity` or `PanacheEntityBase` class, you could instruct Panache REST to generate its JAX-RS resource with the following interface:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81afeceac5ba7d94e62c05ead9ecb6021708983a"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODQyMzkwOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/rest-data-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTozNDo1NlrOGXE3xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTozNDo1NlrOGXE3xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1MDI0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If your application has a simple entity (e.g. `Person`) and a repository (e.g. `PersonRepository`) that implements either `PanacheRepository` or `PanacheRepositoryBase` interface, you could instruct Panache REST to generate its JAX-RS resource with the following interface:\n          \n          \n            \n            If your application has a simple entity (e.g. `Person`) and a repository (e.g. `PersonRepository`) that implements either `PanacheRepository` or `PanacheRepositoryBase` interface, you could instruct REST Data with Panache to generate its JAX-RS resource with the following interface:", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426850245", "createdAt": "2020-05-18T19:34:56Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/rest-data-panache.adoc", "diffHunk": "@@ -0,0 +1,247 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Generating JAX-RS resources with Panache\n+\n+include::./attributes.adoc[]\n+:extension-status: experimental\n+\n+A lot of web applications are monotonous CRUD applications with REST APIs that are tedious to write.\n+To streamline this task, REST Data with Panache extension can generate the basic CRUD endpoints for your entities and repositories.\n+\n+While this extension is still experimental and provides a limited feature set, we hope to get an early feedback for it.\n+Currently this extension supports Hibernate ORM with Panache and can generate CRUD resources that work with `application/json` and `application/hal+json` content.\n+\n+include::./status-include.adoc[]\n+\n+== Setting up Panache REST\n+\n+To begin with:\n+\n+* Add the required dependencies to your `pom.xml`\n+** Hibernate ORM data REST with Panache extension (`quarkus-hibernate-orm-rest-data-panache`)\n+** A JDBC driver extension (`quarkus-jdbc-postgresql`, `quarkus-jdbc-h2`, `quarkus-jdbc-mariadb`, ...)\n+** One of the RestEasy JSON serialization extensions (`quarkus-resteasy-jackson` or `quarkus-resteasy-jsonb`)\n+\n+[source,xml]\n+----\n+<dependencies>\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-hibernate-orm-rest-data-panache</artifactId>\n+    </dependency>\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-jdbc-postgresql</artifactId>\n+    </dependency>\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-resteasy-jackson</artifactId>\n+    </dependency>\n+</dependencies>\n+----\n+\n+* Implement the Panache entities and/or repositories as explained in the link:hibernate-orm-panache[Hibernate ORM with Panache guide].\n+* Define the interfaces for generation as explained in the sections below.\n+\n+== Generating resources\n+\n+Panache REST generates JAX-RS resources based on the interfaces available in your application.\n+For each entity and repository that you want to generate, provide an interface that extends either `PanacheEntityResource` or `PanacheRepositoryResource` interface.\n+_Do not implement these interfaces and don't provide custom methods because they will be ignored._ You can, however, override the methods from the extended interface in order to customize them (see the section at the end).\n+\n+=== PanacheEntityResource\n+\n+If your application has an entity (e.g. `Person`) that extends either `PanacheEntity` or `PanacheEntityBase` class, you could instruct Panache REST to generate its JAX-RS resource with the following interface:\n+\n+[source,java]\n+----\n+public interface PeopleResource extends PanacheEntityResource<Person, Long> {\n+}\n+----\n+\n+=== PanacheRepositoryResource\n+\n+If your application has a simple entity (e.g. `Person`) and a repository (e.g. `PersonRepository`) that implements either `PanacheRepository` or `PanacheRepositoryBase` interface, you could instruct Panache REST to generate its JAX-RS resource with the following interface:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81afeceac5ba7d94e62c05ead9ecb6021708983a"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODQyNTA5OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/rest-data-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTozNToxNlrOGXE4dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTozNToxNlrOGXE4dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1MDQyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If you have defined one of the `PeopleResource` interfaces mentioned above, REST data Panache will generate a JAX-RS resource similar to this:\n          \n          \n            \n            If you have defined one of the `PeopleResource` interfaces mentioned above, REST Data with Panache will generate a JAX-RS resource similar to this:", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426850423", "createdAt": "2020-05-18T19:35:16Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/rest-data-panache.adoc", "diffHunk": "@@ -0,0 +1,247 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Generating JAX-RS resources with Panache\n+\n+include::./attributes.adoc[]\n+:extension-status: experimental\n+\n+A lot of web applications are monotonous CRUD applications with REST APIs that are tedious to write.\n+To streamline this task, REST Data with Panache extension can generate the basic CRUD endpoints for your entities and repositories.\n+\n+While this extension is still experimental and provides a limited feature set, we hope to get an early feedback for it.\n+Currently this extension supports Hibernate ORM with Panache and can generate CRUD resources that work with `application/json` and `application/hal+json` content.\n+\n+include::./status-include.adoc[]\n+\n+== Setting up Panache REST\n+\n+To begin with:\n+\n+* Add the required dependencies to your `pom.xml`\n+** Hibernate ORM data REST with Panache extension (`quarkus-hibernate-orm-rest-data-panache`)\n+** A JDBC driver extension (`quarkus-jdbc-postgresql`, `quarkus-jdbc-h2`, `quarkus-jdbc-mariadb`, ...)\n+** One of the RestEasy JSON serialization extensions (`quarkus-resteasy-jackson` or `quarkus-resteasy-jsonb`)\n+\n+[source,xml]\n+----\n+<dependencies>\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-hibernate-orm-rest-data-panache</artifactId>\n+    </dependency>\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-jdbc-postgresql</artifactId>\n+    </dependency>\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-resteasy-jackson</artifactId>\n+    </dependency>\n+</dependencies>\n+----\n+\n+* Implement the Panache entities and/or repositories as explained in the link:hibernate-orm-panache[Hibernate ORM with Panache guide].\n+* Define the interfaces for generation as explained in the sections below.\n+\n+== Generating resources\n+\n+Panache REST generates JAX-RS resources based on the interfaces available in your application.\n+For each entity and repository that you want to generate, provide an interface that extends either `PanacheEntityResource` or `PanacheRepositoryResource` interface.\n+_Do not implement these interfaces and don't provide custom methods because they will be ignored._ You can, however, override the methods from the extended interface in order to customize them (see the section at the end).\n+\n+=== PanacheEntityResource\n+\n+If your application has an entity (e.g. `Person`) that extends either `PanacheEntity` or `PanacheEntityBase` class, you could instruct Panache REST to generate its JAX-RS resource with the following interface:\n+\n+[source,java]\n+----\n+public interface PeopleResource extends PanacheEntityResource<Person, Long> {\n+}\n+----\n+\n+=== PanacheRepositoryResource\n+\n+If your application has a simple entity (e.g. `Person`) and a repository (e.g. `PersonRepository`) that implements either `PanacheRepository` or `PanacheRepositoryBase` interface, you could instruct Panache REST to generate its JAX-RS resource with the following interface:\n+\n+[source,java]\n+----\n+public interface PeopleResource extends PanacheRepositoryResource<PersonRepository, Person, Long> {\n+}\n+----\n+\n+=== The generated resource\n+\n+The generated resources will be functionally equivalent for both entities and repositories.\n+The only difference being the particular data access pattern in use.\n+\n+If you have defined one of the `PeopleResource` interfaces mentioned above, REST data Panache will generate a JAX-RS resource similar to this:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81afeceac5ba7d94e62c05ead9ecb6021708983a"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODQyOTEyOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/rest-data-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTozNjozM1rOGXE68g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTozNjozM1rOGXE68g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1MTA1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Panache REST provides a `@ResourceProperties` and `@MethodProperties` annotations that can be used to customize certain features of the resource.\n          \n          \n            \n            REST Data with Panache provides a `@ResourceProperties` and `@MethodProperties` annotations that can be used to customize certain features of the resource.", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426851058", "createdAt": "2020-05-18T19:36:33Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/rest-data-panache.adoc", "diffHunk": "@@ -0,0 +1,247 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Generating JAX-RS resources with Panache\n+\n+include::./attributes.adoc[]\n+:extension-status: experimental\n+\n+A lot of web applications are monotonous CRUD applications with REST APIs that are tedious to write.\n+To streamline this task, REST Data with Panache extension can generate the basic CRUD endpoints for your entities and repositories.\n+\n+While this extension is still experimental and provides a limited feature set, we hope to get an early feedback for it.\n+Currently this extension supports Hibernate ORM with Panache and can generate CRUD resources that work with `application/json` and `application/hal+json` content.\n+\n+include::./status-include.adoc[]\n+\n+== Setting up Panache REST\n+\n+To begin with:\n+\n+* Add the required dependencies to your `pom.xml`\n+** Hibernate ORM data REST with Panache extension (`quarkus-hibernate-orm-rest-data-panache`)\n+** A JDBC driver extension (`quarkus-jdbc-postgresql`, `quarkus-jdbc-h2`, `quarkus-jdbc-mariadb`, ...)\n+** One of the RestEasy JSON serialization extensions (`quarkus-resteasy-jackson` or `quarkus-resteasy-jsonb`)\n+\n+[source,xml]\n+----\n+<dependencies>\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-hibernate-orm-rest-data-panache</artifactId>\n+    </dependency>\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-jdbc-postgresql</artifactId>\n+    </dependency>\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-resteasy-jackson</artifactId>\n+    </dependency>\n+</dependencies>\n+----\n+\n+* Implement the Panache entities and/or repositories as explained in the link:hibernate-orm-panache[Hibernate ORM with Panache guide].\n+* Define the interfaces for generation as explained in the sections below.\n+\n+== Generating resources\n+\n+Panache REST generates JAX-RS resources based on the interfaces available in your application.\n+For each entity and repository that you want to generate, provide an interface that extends either `PanacheEntityResource` or `PanacheRepositoryResource` interface.\n+_Do not implement these interfaces and don't provide custom methods because they will be ignored._ You can, however, override the methods from the extended interface in order to customize them (see the section at the end).\n+\n+=== PanacheEntityResource\n+\n+If your application has an entity (e.g. `Person`) that extends either `PanacheEntity` or `PanacheEntityBase` class, you could instruct Panache REST to generate its JAX-RS resource with the following interface:\n+\n+[source,java]\n+----\n+public interface PeopleResource extends PanacheEntityResource<Person, Long> {\n+}\n+----\n+\n+=== PanacheRepositoryResource\n+\n+If your application has a simple entity (e.g. `Person`) and a repository (e.g. `PersonRepository`) that implements either `PanacheRepository` or `PanacheRepositoryBase` interface, you could instruct Panache REST to generate its JAX-RS resource with the following interface:\n+\n+[source,java]\n+----\n+public interface PeopleResource extends PanacheRepositoryResource<PersonRepository, Person, Long> {\n+}\n+----\n+\n+=== The generated resource\n+\n+The generated resources will be functionally equivalent for both entities and repositories.\n+The only difference being the particular data access pattern in use.\n+\n+If you have defined one of the `PeopleResource` interfaces mentioned above, REST data Panache will generate a JAX-RS resource similar to this:\n+\n+[source,java]\n+----\n+@Path(\"/people\") // Default path is a hyphenated lowercase resource name without a suffix of `resource` or `controller`.\n+public class PeopleResourceImpl implements PeopleResource { // The actual class name is going to be unique\n+    @GET\n+    @Produces(\"application/json\")\n+    @Path(\"{id}\")\n+    public Person get(@PathParam(\"id\") Long id){\n+        // ...\n+    }\n+\n+    @GET\n+    @Produces(\"application/json\")\n+    public List<Person> list(){\n+        // ...\n+    }\n+\n+    @Transactional\n+    @POST\n+    @Consumes(\"application/json\")\n+    @Produces(\"application/json\")\n+    public Response add(Person entity) {\n+        // ..\n+    }\n+\n+    @Transactional\n+    @PUT\n+    @Consumes(\"application/json\")\n+    @Produces(\"application/json\")\n+    @Path(\"{id}\")\n+    public Response update(@PathParam(\"id\") Long id, Person person) {\n+        // ..\n+    }\n+\n+    @Transactional\n+    @DELETE\n+    @Path(\"{id}\")\n+    public void delete(@PathParam(\"id\") Long id) {\n+        // ..\n+    }\n+}\n+----\n+\n+== Resource customisation\n+\n+Panache REST provides a `@ResourceProperties` and `@MethodProperties` annotations that can be used to customize certain features of the resource.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81afeceac5ba7d94e62c05ead9ecb6021708983a"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODQzMDY0OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/rest-data-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTozNzowOFrOGXE8AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTozNzowOFrOGXE8AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1MTMyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            As mentioned above Panache REST supports `application/json` and `application/hal+json` response content types.\n          \n          \n            \n            As mentioned above REST Data with Panache supports the `application/json` and `application/hal+json` response content types.", "url": "https://github.com/quarkusio/quarkus/pull/9373#discussion_r426851328", "createdAt": "2020-05-18T19:37:08Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/rest-data-panache.adoc", "diffHunk": "@@ -0,0 +1,247 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Generating JAX-RS resources with Panache\n+\n+include::./attributes.adoc[]\n+:extension-status: experimental\n+\n+A lot of web applications are monotonous CRUD applications with REST APIs that are tedious to write.\n+To streamline this task, REST Data with Panache extension can generate the basic CRUD endpoints for your entities and repositories.\n+\n+While this extension is still experimental and provides a limited feature set, we hope to get an early feedback for it.\n+Currently this extension supports Hibernate ORM with Panache and can generate CRUD resources that work with `application/json` and `application/hal+json` content.\n+\n+include::./status-include.adoc[]\n+\n+== Setting up Panache REST\n+\n+To begin with:\n+\n+* Add the required dependencies to your `pom.xml`\n+** Hibernate ORM data REST with Panache extension (`quarkus-hibernate-orm-rest-data-panache`)\n+** A JDBC driver extension (`quarkus-jdbc-postgresql`, `quarkus-jdbc-h2`, `quarkus-jdbc-mariadb`, ...)\n+** One of the RestEasy JSON serialization extensions (`quarkus-resteasy-jackson` or `quarkus-resteasy-jsonb`)\n+\n+[source,xml]\n+----\n+<dependencies>\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-hibernate-orm-rest-data-panache</artifactId>\n+    </dependency>\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-jdbc-postgresql</artifactId>\n+    </dependency>\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-resteasy-jackson</artifactId>\n+    </dependency>\n+</dependencies>\n+----\n+\n+* Implement the Panache entities and/or repositories as explained in the link:hibernate-orm-panache[Hibernate ORM with Panache guide].\n+* Define the interfaces for generation as explained in the sections below.\n+\n+== Generating resources\n+\n+Panache REST generates JAX-RS resources based on the interfaces available in your application.\n+For each entity and repository that you want to generate, provide an interface that extends either `PanacheEntityResource` or `PanacheRepositoryResource` interface.\n+_Do not implement these interfaces and don't provide custom methods because they will be ignored._ You can, however, override the methods from the extended interface in order to customize them (see the section at the end).\n+\n+=== PanacheEntityResource\n+\n+If your application has an entity (e.g. `Person`) that extends either `PanacheEntity` or `PanacheEntityBase` class, you could instruct Panache REST to generate its JAX-RS resource with the following interface:\n+\n+[source,java]\n+----\n+public interface PeopleResource extends PanacheEntityResource<Person, Long> {\n+}\n+----\n+\n+=== PanacheRepositoryResource\n+\n+If your application has a simple entity (e.g. `Person`) and a repository (e.g. `PersonRepository`) that implements either `PanacheRepository` or `PanacheRepositoryBase` interface, you could instruct Panache REST to generate its JAX-RS resource with the following interface:\n+\n+[source,java]\n+----\n+public interface PeopleResource extends PanacheRepositoryResource<PersonRepository, Person, Long> {\n+}\n+----\n+\n+=== The generated resource\n+\n+The generated resources will be functionally equivalent for both entities and repositories.\n+The only difference being the particular data access pattern in use.\n+\n+If you have defined one of the `PeopleResource` interfaces mentioned above, REST data Panache will generate a JAX-RS resource similar to this:\n+\n+[source,java]\n+----\n+@Path(\"/people\") // Default path is a hyphenated lowercase resource name without a suffix of `resource` or `controller`.\n+public class PeopleResourceImpl implements PeopleResource { // The actual class name is going to be unique\n+    @GET\n+    @Produces(\"application/json\")\n+    @Path(\"{id}\")\n+    public Person get(@PathParam(\"id\") Long id){\n+        // ...\n+    }\n+\n+    @GET\n+    @Produces(\"application/json\")\n+    public List<Person> list(){\n+        // ...\n+    }\n+\n+    @Transactional\n+    @POST\n+    @Consumes(\"application/json\")\n+    @Produces(\"application/json\")\n+    public Response add(Person entity) {\n+        // ..\n+    }\n+\n+    @Transactional\n+    @PUT\n+    @Consumes(\"application/json\")\n+    @Produces(\"application/json\")\n+    @Path(\"{id}\")\n+    public Response update(@PathParam(\"id\") Long id, Person person) {\n+        // ..\n+    }\n+\n+    @Transactional\n+    @DELETE\n+    @Path(\"{id}\")\n+    public void delete(@PathParam(\"id\") Long id) {\n+        // ..\n+    }\n+}\n+----\n+\n+== Resource customisation\n+\n+Panache REST provides a `@ResourceProperties` and `@MethodProperties` annotations that can be used to customize certain features of the resource.\n+It can be used in your resource interface:\n+\n+[source,java]\n+----\n+@ResourceProperties(hal = true, path = \"my-people\")\n+public interface PeopleResource extends PanacheEntityResource<Person, Long> {\n+    @MethodProperties(path = \"all\")\n+    List<Person> list();\n+\n+    @MethodProperties(exposed = false)\n+    void delete(Long id);\n+}\n+----\n+\n+=== Available options\n+\n+`@ResourceProperties`\n+\n+* `hal` - in addition to the standard `application/json` responses, generates additional methods that can return `application/hal+json` responses if requested via an `Accept` header.\n+Default is `false`.\n+* `path` - resource base path. Default path is a hyphenated lowercase resource name without a suffix of `resource` or `controller`.\n+\n+`@MethodProperties`\n+\n+* `exposed` - does not expose a particular HTTP verb when set to `false`. Default is `true`.\n+* `path` - operation path (this is appended to the resource base path). Default is an empty string.\n+\n+== Response body examples\n+\n+As mentioned above Panache REST supports `application/json` and `application/hal+json` response content types.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81afeceac5ba7d94e62c05ead9ecb6021708983a"}, "originalPosition": 157}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3060, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}