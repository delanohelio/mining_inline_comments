{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MjQ3ODM5", "number": 8865, "title": "New fast-jar packaging format", "bodyText": "This new format is now created in a subdirectory in the target dir.\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%.\nThis is currently in draft state, the implementation has been done however there is a lot more work that needs to happen around this such as documentation and docker file changes.\nWe also need to decide if we want to make this the default in the next release, or consider doing a staged release where we include this but don't make it the default so people can try it out, then make it the default at a later date.", "createdAt": "2020-04-27T04:50:37Z", "url": "https://github.com/quarkusio/quarkus/pull/8865", "merged": true, "mergeCommit": {"oid": "987a4db26d31057ea562d287d9b1d4566bc4a176"}, "closed": true, "closedAt": "2020-05-15T12:06:30Z", "author": {"login": "stuartwdouglas"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcbn6FrgBqjMyNzM5NTQwMzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchbbEPgFqTQxMjM2MDk5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0954fc7ac7ccaa9b39ae219a1ed45d269bfb06e1", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/0954fc7ac7ccaa9b39ae219a1ed45d269bfb06e1", "committedDate": "2020-04-27T04:46:59Z", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%."}, "afterCommit": {"oid": "259a6a66ef26913b8f032d9b5f5c81f35a99d3f8", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/259a6a66ef26913b8f032d9b5f5c81f35a99d3f8", "committedDate": "2020-04-27T04:51:36Z", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "259a6a66ef26913b8f032d9b5f5c81f35a99d3f8", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/259a6a66ef26913b8f032d9b5f5c81f35a99d3f8", "committedDate": "2020-04-27T04:51:36Z", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%."}, "afterCommit": {"oid": "931d532bb6ea357840f435b574ecdfd128fd3b5d", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/931d532bb6ea357840f435b574ecdfd128fd3b5d", "committedDate": "2020-05-07T22:54:11Z", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "931d532bb6ea357840f435b574ecdfd128fd3b5d", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/931d532bb6ea357840f435b574ecdfd128fd3b5d", "committedDate": "2020-05-07T22:54:11Z", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%."}, "afterCommit": {"oid": "d4a8944b436d9e9c137bd8929779e27b543b9543", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/d4a8944b436d9e9c137bd8929779e27b543b9543", "committedDate": "2020-05-07T23:12:37Z", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d4a8944b436d9e9c137bd8929779e27b543b9543", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/d4a8944b436d9e9c137bd8929779e27b543b9543", "committedDate": "2020-05-07T23:12:37Z", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%."}, "afterCommit": {"oid": "13695f57410805776433255a01317803614ad226", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/13695f57410805776433255a01317803614ad226", "committedDate": "2020-05-08T01:01:54Z", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "13695f57410805776433255a01317803614ad226", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/13695f57410805776433255a01317803614ad226", "committedDate": "2020-05-08T01:01:54Z", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%."}, "afterCommit": {"oid": "352597aada42684abb979ceaefa39642cac8dc8c", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/352597aada42684abb979ceaefa39642cac8dc8c", "committedDate": "2020-05-08T02:49:37Z", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "352597aada42684abb979ceaefa39642cac8dc8c", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/352597aada42684abb979ceaefa39642cac8dc8c", "committedDate": "2020-05-08T02:49:37Z", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%."}, "afterCommit": {"oid": "338feed118abe1a66480e6924f02d0c62fbae441", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/338feed118abe1a66480e6924f02d0c62fbae441", "committedDate": "2020-05-11T02:23:43Z", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "338feed118abe1a66480e6924f02d0c62fbae441", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/338feed118abe1a66480e6924f02d0c62fbae441", "committedDate": "2020-05-11T02:23:43Z", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%."}, "afterCommit": {"oid": "8b82f81cd407520ae800300375693d348ad56ac5", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/8b82f81cd407520ae800300375693d348ad56ac5", "committedDate": "2020-05-13T00:26:51Z", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8b82f81cd407520ae800300375693d348ad56ac5", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/8b82f81cd407520ae800300375693d348ad56ac5", "committedDate": "2020-05-13T00:26:51Z", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%."}, "afterCommit": {"oid": "0ba1ce82c0e8933b1137e54eb96e79c021a409d6", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/0ba1ce82c0e8933b1137e54eb96e79c021a409d6", "committedDate": "2020-05-13T01:47:05Z", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0ba1ce82c0e8933b1137e54eb96e79c021a409d6", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/0ba1ce82c0e8933b1137e54eb96e79c021a409d6", "committedDate": "2020-05-13T01:47:05Z", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%."}, "afterCommit": {"oid": "395f07c53fec658276f5159a3498fdf98295c08a", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/395f07c53fec658276f5159a3498fdf98295c08a", "committedDate": "2020-05-14T03:52:01Z", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNTc5MTcy", "url": "https://github.com/quarkusio/quarkus/pull/8865#pullrequestreview-411579172", "createdAt": "2020-05-14T08:31:25Z", "commit": {"oid": "395f07c53fec658276f5159a3498fdf98295c08a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwODozMToyNVrOGVRmJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwODozMToyNVrOGVRmJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk2MTU3Mg==", "bodyText": "Shouldn't this be throw new ClassNotFoundException(name);?", "url": "https://github.com/quarkusio/quarkus/pull/8865#discussion_r424961572", "createdAt": "2020-05-14T08:31:25Z", "author": {"login": "geoand"}, "path": "independent-projects/bootstrap/runner/src/main/java/io/quarkus/bootstrap/runner/RunnerClassLoader.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package io.quarkus.bootstrap.runner;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.security.ProtectionDomain;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Function;\n+\n+/**\n+ * Classloader used for production application, using the multi jar strategy\n+ *\n+ */\n+public class RunnerClassLoader extends ClassLoader {\n+\n+    /**\n+     * A map of resources by dir name. Root dir/default package is represented by the empty string\n+     */\n+    private final Map<String, ClassLoadingResource[]> resourceDirectoryMap;\n+\n+    private final ConcurrentMap<ClassLoadingResource, ProtectionDomain> protectionDomains = new ConcurrentHashMap<>();\n+\n+    static {\n+        registerAsParallelCapable();\n+    }\n+\n+    RunnerClassLoader(ClassLoader parent, Map<String, ClassLoadingResource[]> resourceDirectoryMap) {\n+        super(parent);\n+        this.resourceDirectoryMap = resourceDirectoryMap;\n+    }\n+\n+    @Override\n+    protected Class<?> findClass(String name) throws ClassNotFoundException {\n+        String packageName = getPackageNameFromClassName(name);\n+        ClassLoadingResource[] resources;\n+        if (packageName == null) {\n+            resources = resourceDirectoryMap.get(\"\");\n+        } else {\n+            String dirName = packageName.replace(\".\", \"/\");\n+            resources = resourceDirectoryMap.get(dirName);\n+        }\n+        if (resources == null) {\n+            throw new ClassNotFoundException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "395f07c53fec658276f5159a3498fdf98295c08a"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNTc5MzIz", "url": "https://github.com/quarkusio/quarkus/pull/8865#pullrequestreview-411579323", "createdAt": "2020-05-14T08:31:36Z", "commit": {"oid": "395f07c53fec658276f5159a3498fdf98295c08a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwODozMTozN1rOGVRmpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwODozMTozN1rOGVRmpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk2MTcwMA==", "bodyText": "Same comment as above", "url": "https://github.com/quarkusio/quarkus/pull/8865#discussion_r424961700", "createdAt": "2020-05-14T08:31:37Z", "author": {"login": "geoand"}, "path": "independent-projects/bootstrap/runner/src/main/java/io/quarkus/bootstrap/runner/RunnerClassLoader.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package io.quarkus.bootstrap.runner;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.security.ProtectionDomain;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.function.Function;\n+\n+/**\n+ * Classloader used for production application, using the multi jar strategy\n+ *\n+ */\n+public class RunnerClassLoader extends ClassLoader {\n+\n+    /**\n+     * A map of resources by dir name. Root dir/default package is represented by the empty string\n+     */\n+    private final Map<String, ClassLoadingResource[]> resourceDirectoryMap;\n+\n+    private final ConcurrentMap<ClassLoadingResource, ProtectionDomain> protectionDomains = new ConcurrentHashMap<>();\n+\n+    static {\n+        registerAsParallelCapable();\n+    }\n+\n+    RunnerClassLoader(ClassLoader parent, Map<String, ClassLoadingResource[]> resourceDirectoryMap) {\n+        super(parent);\n+        this.resourceDirectoryMap = resourceDirectoryMap;\n+    }\n+\n+    @Override\n+    protected Class<?> findClass(String name) throws ClassNotFoundException {\n+        String packageName = getPackageNameFromClassName(name);\n+        ClassLoadingResource[] resources;\n+        if (packageName == null) {\n+            resources = resourceDirectoryMap.get(\"\");\n+        } else {\n+            String dirName = packageName.replace(\".\", \"/\");\n+            resources = resourceDirectoryMap.get(dirName);\n+        }\n+        if (resources == null) {\n+            throw new ClassNotFoundException();\n+        }\n+        String classResource = name.replace(\".\", \"/\") + \".class\";\n+        for (ClassLoadingResource resource : resources) {\n+            byte[] data = resource.getResourceData(classResource);\n+            if (data == null) {\n+                continue;\n+            }\n+            definePackage(packageName, resources);\n+            return defineClass(name, data, 0, data.length,\n+                    protectionDomains.computeIfAbsent(resource, new Function<ClassLoadingResource, ProtectionDomain>() {\n+                        @Override\n+                        public ProtectionDomain apply(ClassLoadingResource ce) {\n+                            return ce.getProtectionDomain(RunnerClassLoader.this);\n+                        }\n+                    }));\n+        }\n+        throw new ClassNotFoundException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "395f07c53fec658276f5159a3498fdf98295c08a"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNjA2MDI5", "url": "https://github.com/quarkusio/quarkus/pull/8865#pullrequestreview-411606029", "createdAt": "2020-05-14T09:04:14Z", "commit": {"oid": "395f07c53fec658276f5159a3498fdf98295c08a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTowNDoxNFrOGVS6OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTowNDoxNFrOGVS6OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk4MzA5Nw==", "bodyText": "Not really important, but maybe base-lib should be called boot-lib to better reflect what it's about? base-lib sounds a little to generic", "url": "https://github.com/quarkusio/quarkus/pull/8865#discussion_r424983097", "createdAt": "2020-05-14T09:04:14Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java", "diffHunk": "@@ -338,6 +346,148 @@ private JarBuildItem buildThinJar(CurateOutcomeBuildItem curateOutcomeBuildItem,\n         return new JarBuildItem(runnerJar, null, libDir);\n     }\n \n+    private JarBuildItem buildThinJar(CurateOutcomeBuildItem curateOutcomeBuildItem,\n+            OutputTargetBuildItem outputTargetBuildItem,\n+            TransformedClassesBuildItem transformedClasses,\n+            ApplicationArchivesBuildItem applicationArchivesBuildItem,\n+            PackageConfig packageConfig,\n+            ApplicationInfoBuildItem applicationInfo,\n+            List<GeneratedClassBuildItem> generatedClasses,\n+            List<GeneratedResourceBuildItem> generatedResources,\n+            MainClassBuildItem mainClassBuildItem) throws Exception {\n+\n+        Path buildDir = outputTargetBuildItem.getOutputDirectory()\n+                .resolve(outputTargetBuildItem.getBaseName());\n+        IoUtils.recursiveDelete(buildDir);\n+        Files.createDirectories(buildDir);\n+\n+        //unmodified 3rd party dependencies\n+        Path libDir = buildDir.resolve(\"lib\");\n+        Files.createDirectories(libDir);\n+        //parent first entries\n+        Path baseLib = buildDir.resolve(\"base-lib\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "395f07c53fec658276f5159a3498fdf98295c08a"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNjI0NDIw", "url": "https://github.com/quarkusio/quarkus/pull/8865#pullrequestreview-411624420", "createdAt": "2020-05-14T09:26:55Z", "commit": {"oid": "395f07c53fec658276f5159a3498fdf98295c08a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOToyNjo1NVrOGVTx8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOToyNjo1NVrOGVTx8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk5NzM2MQ==", "bodyText": "This is redundant", "url": "https://github.com/quarkusio/quarkus/pull/8865#discussion_r424997361", "createdAt": "2020-05-14T09:26:55Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java", "diffHunk": "@@ -338,6 +346,148 @@ private JarBuildItem buildThinJar(CurateOutcomeBuildItem curateOutcomeBuildItem,\n         return new JarBuildItem(runnerJar, null, libDir);\n     }\n \n+    private JarBuildItem buildThinJar(CurateOutcomeBuildItem curateOutcomeBuildItem,\n+            OutputTargetBuildItem outputTargetBuildItem,\n+            TransformedClassesBuildItem transformedClasses,\n+            ApplicationArchivesBuildItem applicationArchivesBuildItem,\n+            PackageConfig packageConfig,\n+            ApplicationInfoBuildItem applicationInfo,\n+            List<GeneratedClassBuildItem> generatedClasses,\n+            List<GeneratedResourceBuildItem> generatedResources,\n+            MainClassBuildItem mainClassBuildItem) throws Exception {\n+\n+        Path buildDir = outputTargetBuildItem.getOutputDirectory()\n+                .resolve(outputTargetBuildItem.getBaseName());\n+        IoUtils.recursiveDelete(buildDir);\n+        Files.createDirectories(buildDir);\n+\n+        //unmodified 3rd party dependencies\n+        Path libDir = buildDir.resolve(\"lib\");\n+        Files.createDirectories(libDir);\n+        //parent first entries\n+        Path baseLib = buildDir.resolve(\"base-lib\");\n+        Files.createDirectories(baseLib);\n+\n+        Path appDir = buildDir.resolve(\"app\");\n+        Files.createDirectories(appDir);\n+\n+        Path quarkus = buildDir.resolve(\"quarkus\");\n+        Files.createDirectories(quarkus);\n+\n+        List<Path> jars = new ArrayList<>();\n+        //we process in order of priority\n+        //transformed classes first\n+        if (!transformedClasses.getTransformedClassesByJar().isEmpty()) {\n+            Path transformedZip = quarkus.resolve(\"transformed-bytecode.jar\");\n+            jars.add(transformedZip);\n+            try (FileSystem out = ZipUtils.newZip(transformedZip)) {\n+                for (Set<TransformedClassesBuildItem.TransformedClass> transformedSet : transformedClasses\n+                        .getTransformedClassesByJar().values()) {\n+                    for (TransformedClassesBuildItem.TransformedClass transformed : transformedSet) {\n+                        Path target = out.getPath(transformed.getFileName());\n+                        Files.createDirectories(target.getParent());\n+                        Files.write(target, transformed.getData());\n+                    }\n+                }\n+            }\n+        }\n+        //now generated classes and resources\n+        Path generatedZip = quarkus.resolve(\"generated-bytecode.jar\");\n+        jars.add(generatedZip);\n+        try (FileSystem out = ZipUtils.newZip(generatedZip)) {\n+            for (GeneratedClassBuildItem i : generatedClasses) {\n+                String fileName = i.getName().replace(\".\", \"/\") + \".class\";\n+                Path target = out.getPath(fileName);\n+                Files.createDirectories(target.getParent());\n+                Files.write(target, i.getClassData());\n+            }\n+\n+            for (GeneratedResourceBuildItem i : generatedResources) {\n+                Path target = out.getPath(i.getName());\n+                Files.createDirectories(target.getParent());\n+                Files.write(target, i.getClassData());\n+            }\n+        }\n+        //now the application classes\n+        Path runnerJar = appDir\n+                .resolve(outputTargetBuildItem.getBaseName() + \".jar\");\n+        jars.add(runnerJar);\n+\n+        try (FileSystem runnerZipFs = ZipUtils.newZip(runnerJar)) {\n+            for (Path root : applicationArchivesBuildItem.getRootArchive().getRootDirs()) {\n+                copyFiles(root, runnerZipFs, null);\n+            }\n+        }\n+\n+        StringBuilder classPath = new StringBuilder();\n+        for (AppDependency appDep : curateOutcomeBuildItem.getEffectiveModel().getUserDependencies()) {\n+            final AppArtifact depArtifact = appDep.getArtifact();\n+\n+            // Exclude files that are not jars (typically, we can have XML files here, see https://github.com/quarkusio/quarkus/issues/2852)\n+            if (!isAppDepAJar(depArtifact)) {\n+                continue;\n+            }\n+\n+            for (Path resolvedDep : depArtifact.getPaths()) {\n+                if (!Files.isDirectory(resolvedDep)) {\n+                    if (curateOutcomeBuildItem.getEffectiveModel().getParentFirstArtifacts()\n+                            .contains(depArtifact.getKey())) {\n+                        final String fileName = depArtifact.getGroupId() + \".\" + resolvedDep.getFileName();\n+                        final Path targetPath = baseLib.resolve(fileName);\n+                        Files.copy(resolvedDep, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+                        classPath.append(\" base-lib/\" + fileName);\n+                    } else {\n+                        final String fileName = depArtifact.getGroupId() + \".\" + resolvedDep.getFileName();\n+                        final Path targetPath = libDir.resolve(fileName);\n+                        Files.copy(resolvedDep, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+                        jars.add(targetPath);\n+                    }\n+                } else {\n+                    // This case can happen when we are building a jar from inside the Quarkus repository\n+                    // and Quarkus Bootstrap's localProjectDiscovery has been set to true. In such a case\n+                    // the non-jar dependencies are the Quarkus dependencies picked up on the file system\n+                    // these should never be parent first\n+\n+                    final String fileName = depArtifact.getGroupId() + \".\" + resolvedDep.getFileName();\n+                    final Path targetPath = libDir.resolve(fileName);\n+                    jars.add(targetPath);\n+                    try (FileSystem runnerZipFs = ZipUtils.newZip(targetPath)) {\n+                        Files.walkFileTree(resolvedDep, EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE,\n+                                new SimpleFileVisitor<Path>() {\n+                                    @Override\n+                                    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)\n+                                            throws IOException {\n+                                        final Path relativePath = resolvedDep.relativize(file);\n+                                        final Path targetPath = runnerZipFs.getPath(relativePath.toString());\n+                                        Files.createDirectories(targetPath.getParent());\n+                                        Files.copy(file, targetPath);\n+                                        return FileVisitResult.CONTINUE;\n+                                    }\n+                                });\n+                    }\n+                }\n+            }\n+        }\n+\n+        Path initJar = buildDir.resolve(\"quarkus-run.jar\");\n+        try (FileSystem runnerZipFs = ZipUtils.newZip(initJar)) {\n+            AppArtifact appArtifact = curateOutcomeBuildItem.getEffectiveModel().getAppArtifact();\n+            generateManifest(runnerZipFs, classPath.toString(), packageConfig, appArtifact, QuarkusEntryPoint.class.getName(),\n+                    applicationInfo);\n+            Path appInfo = runnerZipFs.getPath(QuarkusEntryPoint.QUARKUS_APPLICATION_DAT);\n+            try (OutputStream out = wrapForJDK8232879(Files.newOutputStream(appInfo, DEFAULT_OPEN_OPTIONS))) {\n+                ByteArrayOutputStream bs = new ByteArrayOutputStream();\n+                SerializedApplication.write(bs, mainClassBuildItem.getClassName(), buildDir, jars);\n+                out.write(bs.toByteArray());\n+                out.flush();\n+            }\n+            runnerZipFs.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "395f07c53fec658276f5159a3498fdf98295c08a"}, "originalPosition": 184}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNjI0Njg3", "url": "https://github.com/quarkusio/quarkus/pull/8865#pullrequestreview-411624687", "createdAt": "2020-05-14T09:27:13Z", "commit": {"oid": "395f07c53fec658276f5159a3498fdf98295c08a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOToyNzoxM1rOGVTyuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOToyNzoxM1rOGVTyuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk5NzU2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    classPath.append(\" base-lib/\" + fileName);\n          \n          \n            \n                                    classPath.append(\" base-lib/\").append(fileName);", "url": "https://github.com/quarkusio/quarkus/pull/8865#discussion_r424997561", "createdAt": "2020-05-14T09:27:13Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java", "diffHunk": "@@ -338,6 +346,148 @@ private JarBuildItem buildThinJar(CurateOutcomeBuildItem curateOutcomeBuildItem,\n         return new JarBuildItem(runnerJar, null, libDir);\n     }\n \n+    private JarBuildItem buildThinJar(CurateOutcomeBuildItem curateOutcomeBuildItem,\n+            OutputTargetBuildItem outputTargetBuildItem,\n+            TransformedClassesBuildItem transformedClasses,\n+            ApplicationArchivesBuildItem applicationArchivesBuildItem,\n+            PackageConfig packageConfig,\n+            ApplicationInfoBuildItem applicationInfo,\n+            List<GeneratedClassBuildItem> generatedClasses,\n+            List<GeneratedResourceBuildItem> generatedResources,\n+            MainClassBuildItem mainClassBuildItem) throws Exception {\n+\n+        Path buildDir = outputTargetBuildItem.getOutputDirectory()\n+                .resolve(outputTargetBuildItem.getBaseName());\n+        IoUtils.recursiveDelete(buildDir);\n+        Files.createDirectories(buildDir);\n+\n+        //unmodified 3rd party dependencies\n+        Path libDir = buildDir.resolve(\"lib\");\n+        Files.createDirectories(libDir);\n+        //parent first entries\n+        Path baseLib = buildDir.resolve(\"base-lib\");\n+        Files.createDirectories(baseLib);\n+\n+        Path appDir = buildDir.resolve(\"app\");\n+        Files.createDirectories(appDir);\n+\n+        Path quarkus = buildDir.resolve(\"quarkus\");\n+        Files.createDirectories(quarkus);\n+\n+        List<Path> jars = new ArrayList<>();\n+        //we process in order of priority\n+        //transformed classes first\n+        if (!transformedClasses.getTransformedClassesByJar().isEmpty()) {\n+            Path transformedZip = quarkus.resolve(\"transformed-bytecode.jar\");\n+            jars.add(transformedZip);\n+            try (FileSystem out = ZipUtils.newZip(transformedZip)) {\n+                for (Set<TransformedClassesBuildItem.TransformedClass> transformedSet : transformedClasses\n+                        .getTransformedClassesByJar().values()) {\n+                    for (TransformedClassesBuildItem.TransformedClass transformed : transformedSet) {\n+                        Path target = out.getPath(transformed.getFileName());\n+                        Files.createDirectories(target.getParent());\n+                        Files.write(target, transformed.getData());\n+                    }\n+                }\n+            }\n+        }\n+        //now generated classes and resources\n+        Path generatedZip = quarkus.resolve(\"generated-bytecode.jar\");\n+        jars.add(generatedZip);\n+        try (FileSystem out = ZipUtils.newZip(generatedZip)) {\n+            for (GeneratedClassBuildItem i : generatedClasses) {\n+                String fileName = i.getName().replace(\".\", \"/\") + \".class\";\n+                Path target = out.getPath(fileName);\n+                Files.createDirectories(target.getParent());\n+                Files.write(target, i.getClassData());\n+            }\n+\n+            for (GeneratedResourceBuildItem i : generatedResources) {\n+                Path target = out.getPath(i.getName());\n+                Files.createDirectories(target.getParent());\n+                Files.write(target, i.getClassData());\n+            }\n+        }\n+        //now the application classes\n+        Path runnerJar = appDir\n+                .resolve(outputTargetBuildItem.getBaseName() + \".jar\");\n+        jars.add(runnerJar);\n+\n+        try (FileSystem runnerZipFs = ZipUtils.newZip(runnerJar)) {\n+            for (Path root : applicationArchivesBuildItem.getRootArchive().getRootDirs()) {\n+                copyFiles(root, runnerZipFs, null);\n+            }\n+        }\n+\n+        StringBuilder classPath = new StringBuilder();\n+        for (AppDependency appDep : curateOutcomeBuildItem.getEffectiveModel().getUserDependencies()) {\n+            final AppArtifact depArtifact = appDep.getArtifact();\n+\n+            // Exclude files that are not jars (typically, we can have XML files here, see https://github.com/quarkusio/quarkus/issues/2852)\n+            if (!isAppDepAJar(depArtifact)) {\n+                continue;\n+            }\n+\n+            for (Path resolvedDep : depArtifact.getPaths()) {\n+                if (!Files.isDirectory(resolvedDep)) {\n+                    if (curateOutcomeBuildItem.getEffectiveModel().getParentFirstArtifacts()\n+                            .contains(depArtifact.getKey())) {\n+                        final String fileName = depArtifact.getGroupId() + \".\" + resolvedDep.getFileName();\n+                        final Path targetPath = baseLib.resolve(fileName);\n+                        Files.copy(resolvedDep, targetPath, StandardCopyOption.REPLACE_EXISTING);\n+                        classPath.append(\" base-lib/\" + fileName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "395f07c53fec658276f5159a3498fdf98295c08a"}, "originalPosition": 138}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "395f07c53fec658276f5159a3498fdf98295c08a", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/395f07c53fec658276f5159a3498fdf98295c08a", "committedDate": "2020-05-14T03:52:01Z", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%."}, "afterCommit": {"oid": "4b2b8369972e4b82a48a109f66adc9c9d20d620f", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/4b2b8369972e4b82a48a109f66adc9c9d20d620f", "committedDate": "2020-05-14T12:02:12Z", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "966b5045e8f874060be06c6c7aaa0a074a93bd9b", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/966b5045e8f874060be06c6c7aaa0a074a93bd9b", "committedDate": "2020-05-15T05:29:55Z", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "730bb4db602638d13a178adce10685b9b3156c72", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/730bb4db602638d13a178adce10685b9b3156c72", "committedDate": "2020-05-14T13:26:25Z", "message": "Fix JibProcessor to work with fast-jar"}, "afterCommit": {"oid": "966b5045e8f874060be06c6c7aaa0a074a93bd9b", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/966b5045e8f874060be06c6c7aaa0a074a93bd9b", "committedDate": "2020-05-15T05:29:55Z", "message": "New packaging format\n\nThis new format is now created in a subdirectory in the target dir.\n\nThis also introduces a new faster ClassLoader than improves startup\ntime by around 10%."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97a9a461ed22013079a2b8bcafddb57e50e7fb0e", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/97a9a461ed22013079a2b8bcafddb57e50e7fb0e", "committedDate": "2020-05-15T05:37:26Z", "message": "Fix JibProcessor to work with fast-jar"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMzYwOTkw", "url": "https://github.com/quarkusio/quarkus/pull/8865#pullrequestreview-412360990", "createdAt": "2020-05-15T05:42:35Z", "commit": {"oid": "97a9a461ed22013079a2b8bcafddb57e50e7fb0e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4360, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}