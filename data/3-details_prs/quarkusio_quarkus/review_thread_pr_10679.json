{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4MjMwOTcw", "number": 10679, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNTozMzoxMFrOEN30Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNTozMzo1N1rOEN31pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTgxNDM1OnYy", "diffSide": "RIGHT", "path": "extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/MessageBundleProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNTozMzoxMFrOGwt8ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMTo0ODoxNlrOGxQLSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzczNzYzNQ==", "bodyText": "I think there's a %s missing here or the method has one too many parameters.", "url": "https://github.com/quarkusio/quarkus/pull/10679#discussion_r453737635", "createdAt": "2020-07-13T15:33:10Z", "author": {"login": "gsmet"}, "path": "extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/MessageBundleProcessor.java", "diffHunk": "@@ -552,7 +560,8 @@ private String generateImplementation(ClassInfo defaultBundleInterface, String d\n \n             if (messageAnnotation == null) {\n                 throw new MessageBundleException(\n-                        \"A message bundle interface method must be annotated with @Message: \" + method);\n+                        String.format(\"A message bundle interface method must be annotated with @Message on %s: \",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5f78c6b092b12809141e8c105d0626bb86a8755"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI5ODQ0Mg==", "bodyText": "Good catch!", "url": "https://github.com/quarkusio/quarkus/pull/10679#discussion_r454298442", "createdAt": "2020-07-14T11:48:16Z", "author": {"login": "mkouba"}, "path": "extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/MessageBundleProcessor.java", "diffHunk": "@@ -552,7 +560,8 @@ private String generateImplementation(ClassInfo defaultBundleInterface, String d\n \n             if (messageAnnotation == null) {\n                 throw new MessageBundleException(\n-                        \"A message bundle interface method must be annotated with @Message: \" + method);\n+                        String.format(\"A message bundle interface method must be annotated with @Message on %s: \",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzczNzYzNQ=="}, "originalCommit": {"oid": "d5f78c6b092b12809141e8c105d0626bb86a8755"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTgxNzk5OnYy", "diffSide": "RIGHT", "path": "extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/MessageBundleProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNTozMzo1N1rOGwt-0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMTo1MzozMVrOGxQVLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzczODE5Mw==", "bodyText": "Should the -parameters recommendation come first?", "url": "https://github.com/quarkusio/quarkus/pull/10679#discussion_r453738193", "createdAt": "2020-07-13T15:33:57Z", "author": {"login": "gsmet"}, "path": "extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/MessageBundleProcessor.java", "diffHunk": "@@ -618,6 +623,27 @@ private String generateImplementation(ClassInfo defaultBundleInterface, String d\n         return generatedName.replace('/', '.');\n     }\n \n+    private String getParameterName(MethodInfo method, int position) {\n+        String name = method.parameterName(position);\n+        AnnotationInstance paramAnnotation = Annotations\n+                .find(Annotations.getParameterAnnotations(method.annotations()).stream()\n+                        .filter(a -> a.target().asMethodParameter().position() == position).collect(Collectors.toList()),\n+                        MESSAGE_PARAM);\n+        if (paramAnnotation != null) {\n+            AnnotationValue paramAnnotationValue = paramAnnotation.value();\n+            if (paramAnnotationValue != null && !paramAnnotationValue.asString().equals(Message.ELEMENT_NAME)) {\n+                name = paramAnnotationValue.asString();\n+            }\n+        }\n+        if (name == null) {\n+            throw new MessageBundleException(\"Unable to determine the name of the parameter at position \" + position\n+                    + \" in method \"\n+                    + method.declaringClass().name() + \"#\" + method.name()\n+                    + \"() - compile the class with debug info enabled (-g) or parameter names recorded (-parameters), or use @MessageParam to specify the value\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5f78c6b092b12809141e8c105d0626bb86a8755"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMwMDk3Mg==", "bodyText": "Well, it depends. From jandex POV it does not matter. Also maven compiler does -g by default so I don't expect this message to be logged very often.", "url": "https://github.com/quarkusio/quarkus/pull/10679#discussion_r454300972", "createdAt": "2020-07-14T11:53:31Z", "author": {"login": "mkouba"}, "path": "extensions/qute/deployment/src/main/java/io/quarkus/qute/deployment/MessageBundleProcessor.java", "diffHunk": "@@ -618,6 +623,27 @@ private String generateImplementation(ClassInfo defaultBundleInterface, String d\n         return generatedName.replace('/', '.');\n     }\n \n+    private String getParameterName(MethodInfo method, int position) {\n+        String name = method.parameterName(position);\n+        AnnotationInstance paramAnnotation = Annotations\n+                .find(Annotations.getParameterAnnotations(method.annotations()).stream()\n+                        .filter(a -> a.target().asMethodParameter().position() == position).collect(Collectors.toList()),\n+                        MESSAGE_PARAM);\n+        if (paramAnnotation != null) {\n+            AnnotationValue paramAnnotationValue = paramAnnotation.value();\n+            if (paramAnnotationValue != null && !paramAnnotationValue.asString().equals(Message.ELEMENT_NAME)) {\n+                name = paramAnnotationValue.asString();\n+            }\n+        }\n+        if (name == null) {\n+            throw new MessageBundleException(\"Unable to determine the name of the parameter at position \" + position\n+                    + \" in method \"\n+                    + method.declaringClass().name() + \"#\" + method.name()\n+                    + \"() - compile the class with debug info enabled (-g) or parameter names recorded (-parameters), or use @MessageParam to specify the value\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzczODE5Mw=="}, "originalCommit": {"oid": "d5f78c6b092b12809141e8c105d0626bb86a8755"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2478, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}