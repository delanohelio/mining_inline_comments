{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3NzgxMDYz", "number": 11817, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzoyODo1NlrOEfdGrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoxMzoxNlrOEfeYJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDE4MTU2OnYy", "diffSide": "RIGHT", "path": "extensions/resteasy-jaxb/deployment/src/main/java/io/quarkus/resteasy/jaxb/deployment/ResteasyJaxbProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzoyODo1NlrOHLvIeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzozNzo0MVrOHLvhLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA2ODYwMA==", "bodyText": "Maybe we could be a bit more clever and exit the for loop so that it's done only once?", "url": "https://github.com/quarkusio/quarkus/pull/11817#discussion_r482068600", "createdAt": "2020-09-02T13:28:56Z", "author": {"login": "gsmet"}, "path": "extensions/resteasy-jaxb/deployment/src/main/java/io/quarkus/resteasy/jaxb/deployment/ResteasyJaxbProcessor.java", "diffHunk": "@@ -1,14 +1,54 @@\n package io.quarkus.resteasy.jaxb.deployment;\n \n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.resteasy.annotations.providers.jaxb.Wrapped;\n+import org.jboss.resteasy.annotations.providers.jaxb.WrappedMap;\n+\n import io.quarkus.deployment.Feature;\n import io.quarkus.deployment.annotations.BuildProducer;\n import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n \n public class ResteasyJaxbProcessor {\n \n+    private static final List<Class<? extends Annotation>> RESTEASY_JAXB_ANNOTATIONS = Arrays.asList(\n+            Wrapped.class,\n+            WrappedMap.class);\n+\n+    @Inject\n+    BuildProducer<ReflectiveClassBuildItem> reflectiveClass;\n+\n+    @BuildStep\n+    void processAnnotations(CombinedIndexBuildItem combinedIndexBuildItem) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+\n+        // Handle RESTEasy annotations usage.\n+        for (Class annotationClazz : RESTEASY_JAXB_ANNOTATIONS) {\n+            DotName annotation = DotName.createSimple(annotationClazz.getName());\n+\n+            if (!index.getAnnotations(annotation).isEmpty()) {\n+                addReflectiveClass(true, true, \"org.jboss.resteasy.plugins.providers.jaxb.JaxbCollection\");\n+                addReflectiveClass(true, true, \"org.jboss.resteasy.plugins.providers.jaxb.JaxbMap\");\n+                addReflectiveClass(true, true, \"javax.xml.bind.annotation.W3CDomHandler\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b89121699bfe98e5e33c43dac1cab13b4f0d0f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA3NDkyNg==", "bodyText": "Absolutely! Will change that.", "url": "https://github.com/quarkusio/quarkus/pull/11817#discussion_r482074926", "createdAt": "2020-09-02T13:37:41Z", "author": {"login": "lbroudoux"}, "path": "extensions/resteasy-jaxb/deployment/src/main/java/io/quarkus/resteasy/jaxb/deployment/ResteasyJaxbProcessor.java", "diffHunk": "@@ -1,14 +1,54 @@\n package io.quarkus.resteasy.jaxb.deployment;\n \n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.resteasy.annotations.providers.jaxb.Wrapped;\n+import org.jboss.resteasy.annotations.providers.jaxb.WrappedMap;\n+\n import io.quarkus.deployment.Feature;\n import io.quarkus.deployment.annotations.BuildProducer;\n import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n \n public class ResteasyJaxbProcessor {\n \n+    private static final List<Class<? extends Annotation>> RESTEASY_JAXB_ANNOTATIONS = Arrays.asList(\n+            Wrapped.class,\n+            WrappedMap.class);\n+\n+    @Inject\n+    BuildProducer<ReflectiveClassBuildItem> reflectiveClass;\n+\n+    @BuildStep\n+    void processAnnotations(CombinedIndexBuildItem combinedIndexBuildItem) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+\n+        // Handle RESTEasy annotations usage.\n+        for (Class annotationClazz : RESTEASY_JAXB_ANNOTATIONS) {\n+            DotName annotation = DotName.createSimple(annotationClazz.getName());\n+\n+            if (!index.getAnnotations(annotation).isEmpty()) {\n+                addReflectiveClass(true, true, \"org.jboss.resteasy.plugins.providers.jaxb.JaxbCollection\");\n+                addReflectiveClass(true, true, \"org.jboss.resteasy.plugins.providers.jaxb.JaxbMap\");\n+                addReflectiveClass(true, true, \"javax.xml.bind.annotation.W3CDomHandler\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA2ODYwMA=="}, "originalCommit": {"oid": "d7b89121699bfe98e5e33c43dac1cab13b4f0d0f"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDE4MzE0OnYy", "diffSide": "RIGHT", "path": "extensions/resteasy-jaxb/deployment/src/main/java/io/quarkus/resteasy/jaxb/deployment/ResteasyJaxbProcessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzoyOToxNFrOHLvJYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTowNDoyOFrOHLzr2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA2ODgzMg==", "bodyText": "Are the providers automatically added to RESTEasy somehow? If so I'm surprised they are not added for reflection there.", "url": "https://github.com/quarkusio/quarkus/pull/11817#discussion_r482068832", "createdAt": "2020-09-02T13:29:14Z", "author": {"login": "gsmet"}, "path": "extensions/resteasy-jaxb/deployment/src/main/java/io/quarkus/resteasy/jaxb/deployment/ResteasyJaxbProcessor.java", "diffHunk": "@@ -1,14 +1,54 @@\n package io.quarkus.resteasy.jaxb.deployment;\n \n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.resteasy.annotations.providers.jaxb.Wrapped;\n+import org.jboss.resteasy.annotations.providers.jaxb.WrappedMap;\n+\n import io.quarkus.deployment.Feature;\n import io.quarkus.deployment.annotations.BuildProducer;\n import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n \n public class ResteasyJaxbProcessor {\n \n+    private static final List<Class<? extends Annotation>> RESTEASY_JAXB_ANNOTATIONS = Arrays.asList(\n+            Wrapped.class,\n+            WrappedMap.class);\n+\n+    @Inject\n+    BuildProducer<ReflectiveClassBuildItem> reflectiveClass;\n+\n+    @BuildStep\n+    void processAnnotations(CombinedIndexBuildItem combinedIndexBuildItem) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+\n+        // Handle RESTEasy annotations usage.\n+        for (Class annotationClazz : RESTEASY_JAXB_ANNOTATIONS) {\n+            DotName annotation = DotName.createSimple(annotationClazz.getName());\n+\n+            if (!index.getAnnotations(annotation).isEmpty()) {\n+                addReflectiveClass(true, true, \"org.jboss.resteasy.plugins.providers.jaxb.JaxbCollection\");\n+                addReflectiveClass(true, true, \"org.jboss.resteasy.plugins.providers.jaxb.JaxbMap\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b89121699bfe98e5e33c43dac1cab13b4f0d0f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA3ODI3NQ==", "bodyText": "Not sure to see what you mean... This solely based on experiment ;-) I do not have specific knowledge of RestEasy internal. Do you mean there's some other provider classes that should be required too ?", "url": "https://github.com/quarkusio/quarkus/pull/11817#discussion_r482078275", "createdAt": "2020-09-02T13:42:25Z", "author": {"login": "lbroudoux"}, "path": "extensions/resteasy-jaxb/deployment/src/main/java/io/quarkus/resteasy/jaxb/deployment/ResteasyJaxbProcessor.java", "diffHunk": "@@ -1,14 +1,54 @@\n package io.quarkus.resteasy.jaxb.deployment;\n \n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.resteasy.annotations.providers.jaxb.Wrapped;\n+import org.jboss.resteasy.annotations.providers.jaxb.WrappedMap;\n+\n import io.quarkus.deployment.Feature;\n import io.quarkus.deployment.annotations.BuildProducer;\n import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n \n public class ResteasyJaxbProcessor {\n \n+    private static final List<Class<? extends Annotation>> RESTEASY_JAXB_ANNOTATIONS = Arrays.asList(\n+            Wrapped.class,\n+            WrappedMap.class);\n+\n+    @Inject\n+    BuildProducer<ReflectiveClassBuildItem> reflectiveClass;\n+\n+    @BuildStep\n+    void processAnnotations(CombinedIndexBuildItem combinedIndexBuildItem) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+\n+        // Handle RESTEasy annotations usage.\n+        for (Class annotationClazz : RESTEASY_JAXB_ANNOTATIONS) {\n+            DotName annotation = DotName.createSimple(annotationClazz.getName());\n+\n+            if (!index.getAnnotations(annotation).isEmpty()) {\n+                addReflectiveClass(true, true, \"org.jboss.resteasy.plugins.providers.jaxb.JaxbCollection\");\n+                addReflectiveClass(true, true, \"org.jboss.resteasy.plugins.providers.jaxb.JaxbMap\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA2ODgzMg=="}, "originalCommit": {"oid": "d7b89121699bfe98e5e33c43dac1cab13b4f0d0f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwMjQxMA==", "bodyText": "I'm just a bit surprised that just registering them for reflection can make things work.\nI would have expected either it would work as is or adding them for reflection won't be enough.", "url": "https://github.com/quarkusio/quarkus/pull/11817#discussion_r482102410", "createdAt": "2020-09-02T14:14:15Z", "author": {"login": "gsmet"}, "path": "extensions/resteasy-jaxb/deployment/src/main/java/io/quarkus/resteasy/jaxb/deployment/ResteasyJaxbProcessor.java", "diffHunk": "@@ -1,14 +1,54 @@\n package io.quarkus.resteasy.jaxb.deployment;\n \n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.resteasy.annotations.providers.jaxb.Wrapped;\n+import org.jboss.resteasy.annotations.providers.jaxb.WrappedMap;\n+\n import io.quarkus.deployment.Feature;\n import io.quarkus.deployment.annotations.BuildProducer;\n import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n \n public class ResteasyJaxbProcessor {\n \n+    private static final List<Class<? extends Annotation>> RESTEASY_JAXB_ANNOTATIONS = Arrays.asList(\n+            Wrapped.class,\n+            WrappedMap.class);\n+\n+    @Inject\n+    BuildProducer<ReflectiveClassBuildItem> reflectiveClass;\n+\n+    @BuildStep\n+    void processAnnotations(CombinedIndexBuildItem combinedIndexBuildItem) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+\n+        // Handle RESTEasy annotations usage.\n+        for (Class annotationClazz : RESTEASY_JAXB_ANNOTATIONS) {\n+            DotName annotation = DotName.createSimple(annotationClazz.getName());\n+\n+            if (!index.getAnnotations(annotation).isEmpty()) {\n+                addReflectiveClass(true, true, \"org.jboss.resteasy.plugins.providers.jaxb.JaxbCollection\");\n+                addReflectiveClass(true, true, \"org.jboss.resteasy.plugins.providers.jaxb.JaxbMap\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA2ODgzMg=="}, "originalCommit": {"oid": "d7b89121699bfe98e5e33c43dac1cab13b4f0d0f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE0MzE5Mg==", "bodyText": "Yes just work as is ;-)", "url": "https://github.com/quarkusio/quarkus/pull/11817#discussion_r482143192", "createdAt": "2020-09-02T15:04:28Z", "author": {"login": "lbroudoux"}, "path": "extensions/resteasy-jaxb/deployment/src/main/java/io/quarkus/resteasy/jaxb/deployment/ResteasyJaxbProcessor.java", "diffHunk": "@@ -1,14 +1,54 @@\n package io.quarkus.resteasy.jaxb.deployment;\n \n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.resteasy.annotations.providers.jaxb.Wrapped;\n+import org.jboss.resteasy.annotations.providers.jaxb.WrappedMap;\n+\n import io.quarkus.deployment.Feature;\n import io.quarkus.deployment.annotations.BuildProducer;\n import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n \n public class ResteasyJaxbProcessor {\n \n+    private static final List<Class<? extends Annotation>> RESTEASY_JAXB_ANNOTATIONS = Arrays.asList(\n+            Wrapped.class,\n+            WrappedMap.class);\n+\n+    @Inject\n+    BuildProducer<ReflectiveClassBuildItem> reflectiveClass;\n+\n+    @BuildStep\n+    void processAnnotations(CombinedIndexBuildItem combinedIndexBuildItem) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+\n+        // Handle RESTEasy annotations usage.\n+        for (Class annotationClazz : RESTEASY_JAXB_ANNOTATIONS) {\n+            DotName annotation = DotName.createSimple(annotationClazz.getName());\n+\n+            if (!index.getAnnotations(annotation).isEmpty()) {\n+                addReflectiveClass(true, true, \"org.jboss.resteasy.plugins.providers.jaxb.JaxbCollection\");\n+                addReflectiveClass(true, true, \"org.jboss.resteasy.plugins.providers.jaxb.JaxbMap\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA2ODgzMg=="}, "originalCommit": {"oid": "d7b89121699bfe98e5e33c43dac1cab13b4f0d0f"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDE4ODkxOnYy", "diffSide": "RIGHT", "path": "extensions/resteasy-jaxb/deployment/src/main/java/io/quarkus/resteasy/jaxb/deployment/ResteasyJaxbProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzozMDoyOFrOHLvM3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzozOTowNFrOHLvlBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA2OTcyNQ==", "bodyText": "Also, could you make it a parameter of the build step rather than injecting it here? It helps keeping track of the dependencies.", "url": "https://github.com/quarkusio/quarkus/pull/11817#discussion_r482069725", "createdAt": "2020-09-02T13:30:28Z", "author": {"login": "gsmet"}, "path": "extensions/resteasy-jaxb/deployment/src/main/java/io/quarkus/resteasy/jaxb/deployment/ResteasyJaxbProcessor.java", "diffHunk": "@@ -1,14 +1,54 @@\n package io.quarkus.resteasy.jaxb.deployment;\n \n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.resteasy.annotations.providers.jaxb.Wrapped;\n+import org.jboss.resteasy.annotations.providers.jaxb.WrappedMap;\n+\n import io.quarkus.deployment.Feature;\n import io.quarkus.deployment.annotations.BuildProducer;\n import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n \n public class ResteasyJaxbProcessor {\n \n+    private static final List<Class<? extends Annotation>> RESTEASY_JAXB_ANNOTATIONS = Arrays.asList(\n+            Wrapped.class,\n+            WrappedMap.class);\n+\n+    @Inject\n+    BuildProducer<ReflectiveClassBuildItem> reflectiveClass;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b89121699bfe98e5e33c43dac1cab13b4f0d0f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA3NTkxMQ==", "bodyText": "Ok, will change that if it's a best practice.", "url": "https://github.com/quarkusio/quarkus/pull/11817#discussion_r482075911", "createdAt": "2020-09-02T13:39:04Z", "author": {"login": "lbroudoux"}, "path": "extensions/resteasy-jaxb/deployment/src/main/java/io/quarkus/resteasy/jaxb/deployment/ResteasyJaxbProcessor.java", "diffHunk": "@@ -1,14 +1,54 @@\n package io.quarkus.resteasy.jaxb.deployment;\n \n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.resteasy.annotations.providers.jaxb.Wrapped;\n+import org.jboss.resteasy.annotations.providers.jaxb.WrappedMap;\n+\n import io.quarkus.deployment.Feature;\n import io.quarkus.deployment.annotations.BuildProducer;\n import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n \n public class ResteasyJaxbProcessor {\n \n+    private static final List<Class<? extends Annotation>> RESTEASY_JAXB_ANNOTATIONS = Arrays.asList(\n+            Wrapped.class,\n+            WrappedMap.class);\n+\n+    @Inject\n+    BuildProducer<ReflectiveClassBuildItem> reflectiveClass;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA2OTcyNQ=="}, "originalCommit": {"oid": "d7b89121699bfe98e5e33c43dac1cab13b4f0d0f"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDM5MDEzOnYy", "diffSide": "RIGHT", "path": "extensions/resteasy-jaxb/deployment/src/test/java/io/quarkus/resteasy/jaxb/deployment/ProducesXMLTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoxMzoxNlrOHLxJpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoyMjoxM1rOHLxjtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwMTY3MA==", "bodyText": "I missed that one but we usually avoid star imports.", "url": "https://github.com/quarkusio/quarkus/pull/11817#discussion_r482101670", "createdAt": "2020-09-02T14:13:16Z", "author": {"login": "gsmet"}, "path": "extensions/resteasy-jaxb/deployment/src/test/java/io/quarkus/resteasy/jaxb/deployment/ProducesXMLTestCase.java", "diffHunk": "@@ -1,11 +1,18 @@\n package io.quarkus.resteasy.jaxb.deployment;\n \n+import static org.hamcrest.Matchers.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "287ea3385074ddb1ad6776ba41438a52f5ab61b3"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwODM0Mw==", "bodyText": "Will do.", "url": "https://github.com/quarkusio/quarkus/pull/11817#discussion_r482108343", "createdAt": "2020-09-02T14:22:13Z", "author": {"login": "lbroudoux"}, "path": "extensions/resteasy-jaxb/deployment/src/test/java/io/quarkus/resteasy/jaxb/deployment/ProducesXMLTestCase.java", "diffHunk": "@@ -1,11 +1,18 @@\n package io.quarkus.resteasy.jaxb.deployment;\n \n+import static org.hamcrest.Matchers.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwMTY3MA=="}, "originalCommit": {"oid": "287ea3385074ddb1ad6776ba41438a52f5ab61b3"}, "originalPosition": 3}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 472, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}