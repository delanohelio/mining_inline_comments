{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3ODgyNzcw", "number": 10660, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNDozMjo0MFrOENmlDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjoyODo1MFrOEN5R7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjk5MDIxOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/http-reference.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNDozMjo0MFrOGwUskA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNDozMjo0MFrOGwUskA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyMzkyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            access-control-allow-credentials=true\n          \n          \n            \n            quarkus.http.cors.access-control-allow-credentials=true\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/quarkusio/quarkus/pull/10660#discussion_r453323920", "createdAt": "2020-07-12T14:32:40Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/http-reference.adoc", "diffHunk": "@@ -199,6 +201,7 @@ quarkus.http.cors.methods=GET,PUT,POST\n quarkus.http.cors.headers=X-Custom\n quarkus.http.cors.exposed-headers=Content-Disposition\n quarkus.http.cors.access-control-max-age=24H\n+access-control-allow-credentials=true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42cff6982bec9c624926b9c28f5b12adc2a341b6"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzE0NjYzOnYy", "diffSide": "RIGHT", "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/cors/CORSConfig.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNzozNzozNVrOGwV4nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjoyMTo1OVrOGwwALg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM0MzM4OQ==", "bodyText": "I think it should be boolean, with the defaultValue=false", "url": "https://github.com/quarkusio/quarkus/pull/10660#discussion_r453343389", "createdAt": "2020-07-12T17:37:35Z", "author": {"login": "sberyozkin"}, "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/cors/CORSConfig.java", "diffHunk": "@@ -61,6 +61,14 @@\n     @ConfigItem\n     public Optional<Duration> accessControlMaxAge;\n \n+    /**\n+     * The `Access-Control-Allow-Credentials` header is used to tell the\n+     * browsers to expose the response to front-end JavaScript code when\n+     * the request\u2019s credentials mode Request.credentials is \u201cinclude\u201d.\n+     */\n+    @ConfigItem(defaultValueDocumentation = \"Default value is true when origins is present and does not include '*', else it is false\")\n+    public Optional<Boolean> accessControlAllowCredentials;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f72c6349c8f44ff698e7a283287436cf279967a2"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM0ODg1Ng==", "bodyText": "My rational here was that the user may want to force false. It can be strange to define the value as false, and in fact becoming true because the conditions match. No? I guess if it's documented there is no problem.", "url": "https://github.com/quarkusio/quarkus/pull/10660#discussion_r453348856", "createdAt": "2020-07-12T18:33:59Z", "author": {"login": "mcserra"}, "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/cors/CORSConfig.java", "diffHunk": "@@ -61,6 +61,14 @@\n     @ConfigItem\n     public Optional<Duration> accessControlMaxAge;\n \n+    /**\n+     * The `Access-Control-Allow-Credentials` header is used to tell the\n+     * browsers to expose the response to front-end JavaScript code when\n+     * the request\u2019s credentials mode Request.credentials is \u201cinclude\u201d.\n+     */\n+    @ConfigItem(defaultValueDocumentation = \"Default value is true when origins is present and does not include '*', else it is false\")\n+    public Optional<Boolean> accessControlAllowCredentials;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM0MzM4OQ=="}, "originalCommit": {"oid": "f72c6349c8f44ff698e7a283287436cf279967a2"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2OTk4Mg==", "bodyText": "@mcserra, makes sense", "url": "https://github.com/quarkusio/quarkus/pull/10660#discussion_r453769982", "createdAt": "2020-07-13T16:19:47Z", "author": {"login": "sberyozkin"}, "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/cors/CORSConfig.java", "diffHunk": "@@ -61,6 +61,14 @@\n     @ConfigItem\n     public Optional<Duration> accessControlMaxAge;\n \n+    /**\n+     * The `Access-Control-Allow-Credentials` header is used to tell the\n+     * browsers to expose the response to front-end JavaScript code when\n+     * the request\u2019s credentials mode Request.credentials is \u201cinclude\u201d.\n+     */\n+    @ConfigItem(defaultValueDocumentation = \"Default value is true when origins is present and does not include '*', else it is false\")\n+    public Optional<Boolean> accessControlAllowCredentials;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM0MzM4OQ=="}, "originalCommit": {"oid": "f72c6349c8f44ff698e7a283287436cf279967a2"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3MTMxMA==", "bodyText": "Ok, cool :) So you want me to revert it?", "url": "https://github.com/quarkusio/quarkus/pull/10660#discussion_r453771310", "createdAt": "2020-07-13T16:21:59Z", "author": {"login": "mcserra"}, "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/cors/CORSConfig.java", "diffHunk": "@@ -61,6 +61,14 @@\n     @ConfigItem\n     public Optional<Duration> accessControlMaxAge;\n \n+    /**\n+     * The `Access-Control-Allow-Credentials` header is used to tell the\n+     * browsers to expose the response to front-end JavaScript code when\n+     * the request\u2019s credentials mode Request.credentials is \u201cinclude\u201d.\n+     */\n+    @ConfigItem(defaultValueDocumentation = \"Default value is true when origins is present and does not include '*', else it is false\")\n+    public Optional<Boolean> accessControlAllowCredentials;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM0MzM4OQ=="}, "originalCommit": {"oid": "f72c6349c8f44ff698e7a283287436cf279967a2"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzE1NzIxOnYy", "diffSide": "RIGHT", "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/cors/CORSConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNzo1MDo0NFrOGwV9oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMDo1NzowOFrOGwXD4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM0NDY3Mg==", "bodyText": "I'm trying to figure out how to change either the docs or the defaultValueDocumentation and I'm getting confused for the 3rd time :-).\nOK, so, if this property is false (which is a default value of this property) then Access-Control-Allow-Credentials is false unless a matching non-wildcard Origins is present.\nIt feels it would be less confusing if we remove this defaultValueDocumentation and instead add to the javaDocs:\nThe value of this header will be set to `true` if either this property is set to `true` or `quarkus.http.cors.origins` property is set and does not include '*' which will require a precise `Origin` header check.\n\nHow does it sound ?", "url": "https://github.com/quarkusio/quarkus/pull/10660#discussion_r453344672", "createdAt": "2020-07-12T17:50:44Z", "author": {"login": "sberyozkin"}, "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/cors/CORSConfig.java", "diffHunk": "@@ -61,6 +61,14 @@\n     @ConfigItem\n     public Optional<Duration> accessControlMaxAge;\n \n+    /**\n+     * The `Access-Control-Allow-Credentials` header is used to tell the\n+     * browsers to expose the response to front-end JavaScript code when\n+     * the request\u2019s credentials mode Request.credentials is \u201cinclude\u201d.\n+     */\n+    @ConfigItem(defaultValueDocumentation = \"Default value is true when origins is present and does not include '*', else it is false\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f72c6349c8f44ff698e7a283287436cf279967a2"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM2MjY1Nw==", "bodyText": "Its clear, sounds good. Done", "url": "https://github.com/quarkusio/quarkus/pull/10660#discussion_r453362657", "createdAt": "2020-07-12T20:57:08Z", "author": {"login": "mcserra"}, "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/cors/CORSConfig.java", "diffHunk": "@@ -61,6 +61,14 @@\n     @ConfigItem\n     public Optional<Duration> accessControlMaxAge;\n \n+    /**\n+     * The `Access-Control-Allow-Credentials` header is used to tell the\n+     * browsers to expose the response to front-end JavaScript code when\n+     * the request\u2019s credentials mode Request.credentials is \u201cinclude\u201d.\n+     */\n+    @ConfigItem(defaultValueDocumentation = \"Default value is true when origins is present and does not include '*', else it is false\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM0NDY3Mg=="}, "originalCommit": {"oid": "f72c6349c8f44ff698e7a283287436cf279967a2"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzE2MTM1OnYy", "diffSide": "RIGHT", "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/cors/CORSFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNzo1NjoxOVrOGwV_qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMDo1NzoyOFrOGwXEBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM0NTE5NQ==", "bodyText": "Can you also have a boolean var recording the result of the origin comparison checked here ? It is probably not very critical but it is better to return true only if the exact origin match happened...", "url": "https://github.com/quarkusio/quarkus/pull/10660#discussion_r453345195", "createdAt": "2020-07-12T17:56:19Z", "author": {"login": "sberyozkin"}, "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/cors/CORSFilter.java", "diffHunk": "@@ -97,7 +97,10 @@ public void handle(RoutingContext event) {\n                 response.headers().set(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, origin);\n             }\n \n-            response.headers().set(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS, \"true\");\n+            boolean allowCredentials = corsConfig.accessControlAllowCredentials\n+                    .orElseGet(() -> (corsConfig.origins.isPresent() && !corsConfig.origins.get().contains(\"*\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f72c6349c8f44ff698e7a283287436cf279967a2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM2MjY5NQ==", "bodyText": "Done. Thanks :)", "url": "https://github.com/quarkusio/quarkus/pull/10660#discussion_r453362695", "createdAt": "2020-07-12T20:57:28Z", "author": {"login": "mcserra"}, "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/cors/CORSFilter.java", "diffHunk": "@@ -97,7 +97,10 @@ public void handle(RoutingContext event) {\n                 response.headers().set(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, origin);\n             }\n \n-            response.headers().set(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS, \"true\");\n+            boolean allowCredentials = corsConfig.accessControlAllowCredentials\n+                    .orElseGet(() -> (corsConfig.origins.isPresent() && !corsConfig.origins.get().contains(\"*\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM0NTE5NQ=="}, "originalCommit": {"oid": "f72c6349c8f44ff698e7a283287436cf279967a2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDAzNTM2OnYy", "diffSide": "RIGHT", "path": "extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/cors/CORSHandlerTestWildcardOriginCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjoyNDoxOFrOGwwGRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjoyNjowNVrOGwwKjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3Mjg3MQ==", "bodyText": "Hi @mcserra, interesting case, I actually think it should be true here because a precise match possible, I think we may need to tweak the check, please see below", "url": "https://github.com/quarkusio/quarkus/pull/10660#discussion_r453772871", "createdAt": "2020-07-13T16:24:18Z", "author": {"login": "sberyozkin"}, "path": "extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/cors/CORSHandlerTestWildcardOriginCase.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package io.quarkus.vertx.http.cors;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class CORSHandlerTestWildcardOriginCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a4d829b12b28cdc1b9aeb7ecbe4f893837c808e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3Mzk2Ng==", "bodyText": "Yes, sure, I suppose if the origin match the '*' is irrelevant", "url": "https://github.com/quarkusio/quarkus/pull/10660#discussion_r453773966", "createdAt": "2020-07-13T16:26:05Z", "author": {"login": "mcserra"}, "path": "extensions/vertx-http/deployment/src/test/java/io/quarkus/vertx/http/cors/CORSHandlerTestWildcardOriginCase.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package io.quarkus.vertx.http.cors;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class CORSHandlerTestWildcardOriginCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3Mjg3MQ=="}, "originalCommit": {"oid": "8a4d829b12b28cdc1b9aeb7ecbe4f893837c808e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDA1NDIyOnYy", "diffSide": "RIGHT", "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/cors/CORSFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjoyODo1MFrOGwwR0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzo0Mjo0NlrOGwy_sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3NTgyNQ==", "bodyText": "@mcserra Looks like we can drop !corsConfig.origins.get().contains(\"*\") because we have corsConfig.origins.get().contains(origin) which ensures the precise match, but instead we should check that the Origin header does no contain *.\nThis will ensure that, assuming Origin is something like https://origin, then if we have the allowed origins as https://origin,* then true will be returned due to a precise match.\nDo you agree ?", "url": "https://github.com/quarkusio/quarkus/pull/10660#discussion_r453775825", "createdAt": "2020-07-13T16:28:50Z", "author": {"login": "sberyozkin"}, "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/cors/CORSFilter.java", "diffHunk": "@@ -97,7 +97,11 @@ public void handle(RoutingContext event) {\n                 response.headers().set(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, origin);\n             }\n \n-            response.headers().set(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS, \"true\");\n+            boolean allowCredentials = corsConfig.accessControlAllowCredentials\n+                    || (corsConfig.origins.isPresent() && !corsConfig.origins.get().contains(\"*\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a4d829b12b28cdc1b9aeb7ecbe4f893837c808e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgyMDMzOQ==", "bodyText": "I do. I'll do a commit.", "url": "https://github.com/quarkusio/quarkus/pull/10660#discussion_r453820339", "createdAt": "2020-07-13T17:42:46Z", "author": {"login": "mcserra"}, "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/cors/CORSFilter.java", "diffHunk": "@@ -97,7 +97,11 @@ public void handle(RoutingContext event) {\n                 response.headers().set(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, origin);\n             }\n \n-            response.headers().set(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS, \"true\");\n+            boolean allowCredentials = corsConfig.accessControlAllowCredentials\n+                    || (corsConfig.origins.isPresent() && !corsConfig.origins.get().contains(\"*\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3NTgyNQ=="}, "originalCommit": {"oid": "8a4d829b12b28cdc1b9aeb7ecbe4f893837c808e"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2456, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}