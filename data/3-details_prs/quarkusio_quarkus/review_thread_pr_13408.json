{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0OTM3Mjg3", "number": 13408, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwOToxOTo1MFrOFEnn1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0zMFQxNjo1MzozMlrOGodtJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzg3Nzk5OnYy", "diffSide": "RIGHT", "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwOToxOTo1MFrOIEx_jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yOFQxMDoxODoyNlrOKZhVjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTg4NDMwMw==", "bodyText": "maybe use File.separatorChar or separator.\nhttps://docs.oracle.com/javase/8/docs/api/java/io/File.html#separator", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r541884303", "createdAt": "2020-12-13T09:19:50Z", "author": {"login": "Dufgui"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -210,7 +268,8 @@ private void handleJaxbFile(Path p, BuildProducer<NativeImageResourceBuildItem>\n             BuildProducer<ReflectiveClassBuildItem> reflectiveClass) {\n         try {\n             String path = p.toAbsolutePath().toString().substring(1);\n-            String pkg = p.toAbsolutePath().getParent().toString().substring(1).replace(\"/\", \".\") + \".\";\n+            String pkg = p.toAbsolutePath().getParent().toString().substring(1)\n+                    .replace(FileSystems.getDefault().getSeparator(), \".\") + \".\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bc7a596d43ca6313fc1764a3c843f5284706487"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NTAwNg==", "bodyText": "Yes, that would be better.", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r551445006", "createdAt": "2021-01-04T17:03:12Z", "author": {"login": "gsmet"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -210,7 +268,8 @@ private void handleJaxbFile(Path p, BuildProducer<NativeImageResourceBuildItem>\n             BuildProducer<ReflectiveClassBuildItem> reflectiveClass) {\n         try {\n             String path = p.toAbsolutePath().toString().substring(1);\n-            String pkg = p.toAbsolutePath().getParent().toString().substring(1).replace(\"/\", \".\") + \".\";\n+            String pkg = p.toAbsolutePath().getParent().toString().substring(1)\n+                    .replace(FileSystems.getDefault().getSeparator(), \".\") + \".\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTg4NDMwMw=="}, "originalCommit": {"oid": "5bc7a596d43ca6313fc1764a3c843f5284706487"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NTIwMA==", "bodyText": "Also, we need a test that shows it's broken and now works on Windows.", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r551445200", "createdAt": "2021-01-04T17:03:31Z", "author": {"login": "gsmet"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -210,7 +268,8 @@ private void handleJaxbFile(Path p, BuildProducer<NativeImageResourceBuildItem>\n             BuildProducer<ReflectiveClassBuildItem> reflectiveClass) {\n         try {\n             String path = p.toAbsolutePath().toString().substring(1);\n-            String pkg = p.toAbsolutePath().getParent().toString().substring(1).replace(\"/\", \".\") + \".\";\n+            String pkg = p.toAbsolutePath().getParent().toString().substring(1)\n+                    .replace(FileSystems.getDefault().getSeparator(), \".\") + \".\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTg4NDMwMw=="}, "originalCommit": {"oid": "5bc7a596d43ca6313fc1764a3c843f5284706487"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NTQ1Njc4OQ==", "bodyText": "@gsmet you mean a unit test because there are none in jaxb extension currently. or test from user ?\nif unit test , in deployment or in integration test ?", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r695456789", "createdAt": "2021-08-25T07:01:33Z", "author": {"login": "dufoli"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -210,7 +268,8 @@ private void handleJaxbFile(Path p, BuildProducer<NativeImageResourceBuildItem>\n             BuildProducer<ReflectiveClassBuildItem> reflectiveClass) {\n         try {\n             String path = p.toAbsolutePath().toString().substring(1);\n-            String pkg = p.toAbsolutePath().getParent().toString().substring(1).replace(\"/\", \".\") + \".\";\n+            String pkg = p.toAbsolutePath().getParent().toString().substring(1)\n+                    .replace(FileSystems.getDefault().getSeparator(), \".\") + \".\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTg4NDMwMw=="}, "originalCommit": {"oid": "5bc7a596d43ca6313fc1764a3c843f5284706487"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Nzg0OTIzMQ==", "bodyText": "I have add a test in integration test.", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r697849231", "createdAt": "2021-08-28T10:18:26Z", "author": {"login": "dufoli"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -210,7 +268,8 @@ private void handleJaxbFile(Path p, BuildProducer<NativeImageResourceBuildItem>\n             BuildProducer<ReflectiveClassBuildItem> reflectiveClass) {\n         try {\n             String path = p.toAbsolutePath().toString().substring(1);\n-            String pkg = p.toAbsolutePath().getParent().toString().substring(1).replace(\"/\", \".\") + \".\";\n+            String pkg = p.toAbsolutePath().getParent().toString().substring(1)\n+                    .replace(FileSystems.getDefault().getSeparator(), \".\") + \".\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTg4NDMwMw=="}, "originalCommit": {"oid": "5bc7a596d43ca6313fc1764a3c843f5284706487"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDUwNzc1OnYy", "diffSide": "RIGHT", "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzowNDozOVrOIN5lcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yNVQxMjo1MToxOFrOKXfX1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NTg3Mw==", "bodyText": "Why ifExist? If the JAXB extension is there, don't we have them? Or are they different on various versions of the JDK?", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r551445873", "createdAt": "2021-01-04T17:04:39Z", "author": {"login": "gsmet"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -169,6 +177,18 @@ void processAnnotationsAndIndexFiles(\n                     proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.bind.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.internal.bind.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.core.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.txw2.output.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.characterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.marshaller.CharacterEscapeHandler\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bc7a596d43ca6313fc1764a3c843f5284706487"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUzNzAzOA==", "bodyText": "Package has moved between Java 8 and 13", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r551537038", "createdAt": "2021-01-04T20:00:37Z", "author": {"login": "dufoli"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -169,6 +177,18 @@ void processAnnotationsAndIndexFiles(\n                     proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.bind.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.internal.bind.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.core.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.txw2.output.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.characterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.marshaller.CharacterEscapeHandler\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NTg3Mw=="}, "originalCommit": {"oid": "5bc7a596d43ca6313fc1764a3c843f5284706487"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MTgxMDc4Mg==", "bodyText": "@dufoli can you check this is still needed since Quarkus 2.x now requires JDK 11 as a minimum?", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r661810782", "createdAt": "2021-06-30T21:05:35Z", "author": {"login": "gastaldi"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -169,6 +177,18 @@ void processAnnotationsAndIndexFiles(\n                     proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.bind.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.internal.bind.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.core.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.txw2.output.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.characterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.marshaller.CharacterEscapeHandler\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NTg3Mw=="}, "originalCommit": {"oid": "5bc7a596d43ca6313fc1764a3c843f5284706487"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NTQ0MjgwNg==", "bodyText": "to be more precise it depend of version of jaxb.\njaxb 3.0 use org.glassfish.jaxb.core.marshaller.CharacterEscapeHandler\nbefore it was on com.sun.xml.txw2.output.CharacterEscapeHandler\nhere is the commit:\neclipse-ee4j/jaxb-ri@e863464#diff-e5024e3cbb151f1d566536f1f1b29c2553073b623d3586d97948fcb715461728\nit is detail in release note :\nhttps://github.com/eclipse-ee4j/jaxb-ri/releases\nI see that quarkus still use 2.3.3-b02 version which is on old package format .\n2 solutions:\n\nsupport old package path only\nswitch to new package version 3.0 and support new package path only\n\nwhat do you prefer ?", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r695442806", "createdAt": "2021-08-25T06:39:16Z", "author": {"login": "dufoli"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -169,6 +177,18 @@ void processAnnotationsAndIndexFiles(\n                     proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.bind.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.internal.bind.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.core.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.txw2.output.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.characterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.marshaller.CharacterEscapeHandler\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NTg3Mw=="}, "originalCommit": {"oid": "5bc7a596d43ca6313fc1764a3c843f5284706487"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NTQ0Mjg4Mg==", "bodyText": "@gastaldi", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r695442882", "createdAt": "2021-08-25T06:39:26Z", "author": {"login": "dufoli"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -169,6 +177,18 @@ void processAnnotationsAndIndexFiles(\n                     proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.bind.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.internal.bind.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.core.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.txw2.output.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.characterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.marshaller.CharacterEscapeHandler\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NTg3Mw=="}, "originalCommit": {"oid": "5bc7a596d43ca6313fc1764a3c843f5284706487"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NTcxOTg5NA==", "bodyText": "I don't know what is the impact of bumping to version 3.0, maybe it's worth doing it and see if there are any failed tests", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r695719894", "createdAt": "2021-08-25T12:51:18Z", "author": {"login": "gastaldi"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -169,6 +177,18 @@ void processAnnotationsAndIndexFiles(\n                     proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.bind.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.internal.bind.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.core.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.txw2.output.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.characterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.marshaller.CharacterEscapeHandler\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NTg3Mw=="}, "originalCommit": {"oid": "5bc7a596d43ca6313fc1764a3c843f5284706487"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDUxNDQ2OnYy", "diffSide": "RIGHT", "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzowNjoyMlrOIN5pcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzowNjoyMlrOIN5pcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0Njg5OA==", "bodyText": "Please avoid using one character variables that are meaningless. Here it's an interfaceName.", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r551446898", "createdAt": "2021-01-04T17:06:22Z", "author": {"login": "gsmet"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -178,6 +198,44 @@ void processAnnotationsAndIndexFiles(\n         }\n     }\n \n+    private void produceProxyIfExist(BuildProducer<NativeImageProxyDefinitionBuildItem> proxies, String s) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bc7a596d43ca6313fc1764a3c843f5284706487"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDUxNTg1OnYy", "diffSide": "RIGHT", "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzowNjo0MlrOIN5qOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yN1QxNjoyODoyMVrOKZQYEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NzA5Ng==", "bodyText": "Not sure I understand what you're trying to do here. Could you explain?", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r551447096", "createdAt": "2021-01-04T17:06:42Z", "author": {"login": "gsmet"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -169,6 +177,18 @@ void processAnnotationsAndIndexFiles(\n                     proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.bind.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.internal.bind.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.core.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.txw2.output.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.characterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.marshaller.CharacterEscapeHandler\");\n+\n+        proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.TypedXmlWriter\"));\n+        Set<String> proxiesCreated = new HashSet<>();\n+        DotName typedXmlWriterDN = DotName.createSimple(\"com.sun.xml.txw2.TypedXmlWriter\");\n+        // getAllKnownDirectImplementors skip interface, so use own recursion\n+        produceRecursiveProxies(index, typedXmlWriterDN, proxyDefinitions, proxiesCreated);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bc7a596d43ca6313fc1764a3c843f5284706487"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYxMjEyMw==", "bodyText": "Cxf use jaxb xmlSchemaGeneratorwhich can only works with proxy...", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r551612123", "createdAt": "2021-01-04T22:41:50Z", "author": {"login": "dufoli"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -169,6 +177,18 @@ void processAnnotationsAndIndexFiles(\n                     proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.bind.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.internal.bind.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.core.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.txw2.output.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.characterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.marshaller.CharacterEscapeHandler\");\n+\n+        proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.TypedXmlWriter\"));\n+        Set<String> proxiesCreated = new HashSet<>();\n+        DotName typedXmlWriterDN = DotName.createSimple(\"com.sun.xml.txw2.TypedXmlWriter\");\n+        // getAllKnownDirectImplementors skip interface, so use own recursion\n+        produceRecursiveProxies(index, typedXmlWriterDN, proxyDefinitions, proxiesCreated);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NzA5Ng=="}, "originalCommit": {"oid": "5bc7a596d43ca6313fc1764a3c843f5284706487"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NTQ0Mzg2NQ==", "bodyText": "and all inherited class of TypedXmlWriter use proxy. I just avoid to maintain a big list of class. But If you prefer, I have the list of class.", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r695443865", "createdAt": "2021-08-25T06:41:05Z", "author": {"login": "dufoli"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -169,6 +177,18 @@ void processAnnotationsAndIndexFiles(\n                     proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.bind.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.internal.bind.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.core.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.txw2.output.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.characterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.marshaller.CharacterEscapeHandler\");\n+\n+        proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.TypedXmlWriter\"));\n+        Set<String> proxiesCreated = new HashSet<>();\n+        DotName typedXmlWriterDN = DotName.createSimple(\"com.sun.xml.txw2.TypedXmlWriter\");\n+        // getAllKnownDirectImplementors skip interface, so use own recursion\n+        produceRecursiveProxies(index, typedXmlWriterDN, proxyDefinitions, proxiesCreated);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NzA5Ng=="}, "originalCommit": {"oid": "5bc7a596d43ca6313fc1764a3c843f5284706487"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NzU0Nzc4Mw==", "bodyText": "It looks like this method is really specific. The Set<String> proxiesCreatedand the DotName typedXmlWriterDN are only useful inside the method. Maybe move it to its own @buildstep and rename it to something more appropriate like processTypedXmlWriters?", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r697547783", "createdAt": "2021-08-27T15:51:52Z", "author": {"login": "gastaldi"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -169,6 +177,18 @@ void processAnnotationsAndIndexFiles(\n                     proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.bind.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.internal.bind.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.core.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.txw2.output.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.characterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.marshaller.CharacterEscapeHandler\");\n+\n+        proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.TypedXmlWriter\"));\n+        Set<String> proxiesCreated = new HashSet<>();\n+        DotName typedXmlWriterDN = DotName.createSimple(\"com.sun.xml.txw2.TypedXmlWriter\");\n+        // getAllKnownDirectImplementors skip interface, so use own recursion\n+        produceRecursiveProxies(index, typedXmlWriterDN, proxyDefinitions, proxiesCreated);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NzA5Ng=="}, "originalCommit": {"oid": "5bc7a596d43ca6313fc1764a3c843f5284706487"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NzU1MzcwOQ==", "bodyText": "indeed cxf use JAXBContextImpl\nhttps://github.com/eclipse-ee4j/jaxb-ri/blob/master/jaxb-ri/runtime/impl/src/main/java/org/glassfish/jaxb/runtime/v2/runtime/JAXBContextImpl.java\nhere is the chain of call\nJAXBContextImpl  => XmlSchemaGenerator =>TXW=>ContainerElement. And containerElement contain dynamic proxy to declare :\nhttps://github.com/eclipse-ee4j/jaxb-ri/blob/002aa3d6738622110ebcb6e1dc0fb99fe07faafd/jaxb-ri/txw/runtime/src/main/java/com/sun/xml/txw2/ContainerElement.java\nA lot of class inherit of ContainerElement store in because it is a tree model:\nhttps://github.com/eclipse-ee4j/jaxb-ri/tree/002aa3d6738622110ebcb6e1dc0fb99fe07faafd/jaxb-ri/runtime/impl/src/main/java/org/glassfish/jaxb/runtime/v2/schemagen/xmlschema\nso all class must be define as proxy.", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r697553709", "createdAt": "2021-08-27T16:00:26Z", "author": {"login": "dufoli"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -169,6 +177,18 @@ void processAnnotationsAndIndexFiles(\n                     proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.bind.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.internal.bind.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.core.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.txw2.output.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.characterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.marshaller.CharacterEscapeHandler\");\n+\n+        proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.TypedXmlWriter\"));\n+        Set<String> proxiesCreated = new HashSet<>();\n+        DotName typedXmlWriterDN = DotName.createSimple(\"com.sun.xml.txw2.TypedXmlWriter\");\n+        // getAllKnownDirectImplementors skip interface, so use own recursion\n+        produceRecursiveProxies(index, typedXmlWriterDN, proxyDefinitions, proxiesCreated);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NzA5Ng=="}, "originalCommit": {"oid": "5bc7a596d43ca6313fc1764a3c843f5284706487"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NzU2MTAwMQ==", "bodyText": "I am not sure I'm following how this is related to the refactoring suggestion I gave earlier \ud83d\ude03", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r697561001", "createdAt": "2021-08-27T16:11:30Z", "author": {"login": "gastaldi"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -169,6 +177,18 @@ void processAnnotationsAndIndexFiles(\n                     proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.bind.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.internal.bind.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.core.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.txw2.output.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.characterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.marshaller.CharacterEscapeHandler\");\n+\n+        proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.TypedXmlWriter\"));\n+        Set<String> proxiesCreated = new HashSet<>();\n+        DotName typedXmlWriterDN = DotName.createSimple(\"com.sun.xml.txw2.TypedXmlWriter\");\n+        // getAllKnownDirectImplementors skip interface, so use own recursion\n+        produceRecursiveProxies(index, typedXmlWriterDN, proxyDefinitions, proxiesCreated);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NzA5Ng=="}, "originalCommit": {"oid": "5bc7a596d43ca6313fc1764a3c843f5284706487"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NzU3MTM0NQ==", "bodyText": "When I start to write it, your comment was not post \ud83d\ude09", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r697571345", "createdAt": "2021-08-27T16:28:21Z", "author": {"login": "dufoli"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -169,6 +177,18 @@ void processAnnotationsAndIndexFiles(\n                     proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.bind.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.internal.bind.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.core.marshaller.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"com.sun.xml.txw2.output.CharacterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.characterEscapeHandler\");\n+        produceProxyIfExist(proxyDefinitions, \"org.glassfish.jaxb.marshaller.CharacterEscapeHandler\");\n+\n+        proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.TypedXmlWriter\"));\n+        Set<String> proxiesCreated = new HashSet<>();\n+        DotName typedXmlWriterDN = DotName.createSimple(\"com.sun.xml.txw2.TypedXmlWriter\");\n+        // getAllKnownDirectImplementors skip interface, so use own recursion\n+        produceRecursiveProxies(index, typedXmlWriterDN, proxyDefinitions, proxiesCreated);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NzA5Ng=="}, "originalCommit": {"oid": "5bc7a596d43ca6313fc1764a3c843f5284706487"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQzMjQ5OTI4OnYy", "diffSide": "RIGHT", "path": "bom/application/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yNVQxNjo0ODoxNVrOKXsbBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yNlQxMDo0MjoyMlrOKYPpew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NTkzMzcwMg==", "bodyText": "You need to bump the jaxb-api too no?", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r695933702", "createdAt": "2021-08-25T16:48:15Z", "author": {"login": "gastaldi"}, "path": "bom/application/pom.xml", "diffHunk": "@@ -71,7 +71,7 @@\n         <jakarta.validation-api.version>2.0.2</jakarta.validation-api.version>\n         <jakarta.websocket-api.version>1.1.2</jakarta.websocket-api.version>\n         <jakarta.xml.bind-api.version>2.3.3</jakarta.xml.bind-api.version>\n-        <jaxb-runtime.version>2.3.3-b02</jaxb-runtime.version>\n+        <jaxb-runtime.version>3.0.0</jaxb-runtime.version>\n         <!-- just for test dependency convergence -->\n         <jaxb-api.version>2.3.1</jaxb-api.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bfde42dea5c524c284d6b6df1b4c439b5380578"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjUxMDg0Mw==", "bodyText": "I have rollback because cxf seems to not support new version yet.", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r696510843", "createdAt": "2021-08-26T10:42:22Z", "author": {"login": "dufoli"}, "path": "bom/application/pom.xml", "diffHunk": "@@ -71,7 +71,7 @@\n         <jakarta.validation-api.version>2.0.2</jakarta.validation-api.version>\n         <jakarta.websocket-api.version>1.1.2</jakarta.websocket-api.version>\n         <jakarta.xml.bind-api.version>2.3.3</jakarta.xml.bind-api.version>\n-        <jaxb-runtime.version>2.3.3-b02</jaxb-runtime.version>\n+        <jaxb-runtime.version>3.0.0</jaxb-runtime.version>\n         <!-- just for test dependency convergence -->\n         <jaxb-api.version>2.3.1</jaxb-api.version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NTkzMzcwMg=="}, "originalCommit": {"oid": "2bfde42dea5c524c284d6b6df1b4c439b5380578"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQzMjUwNTAwOnYy", "diffSide": "RIGHT", "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yNVQxNjo0OTozMFrOKXseoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yNVQxNjo0OTozMFrOKXseoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NTkzNDYyNA==", "bodyText": "Delete these lines", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r695934624", "createdAt": "2021-08-25T16:49:30Z", "author": {"login": "gastaldi"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -170,9 +177,25 @@ void processAnnotationsAndIndexFiles(\n         JAXB_ANNOTATIONS.stream()\n                 .map(Class::getName)\n                 .forEach(className -> {\n-                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n+                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className,\n+                            \"org.glassfish.jaxb.core.v2.model.annotation.Locatable\"));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"org.glassfish.jaxb.core.marshaller.CharacterEscapeHandler\"));\n+        proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"org.glassfish.jaxb.characterEscapeHandler\"));\n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"org.glassfish.jaxb.marshaller.CharacterEscapeHandler\"));\n+        // old 2.3 package path\n+        //proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.bind.marshaller.CharacterEscapeHandler\"));\n+        //proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.internal.bind.marshaller.CharacterEscapeHandler\"));\n+        //proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.output.CharacterEscapeHandler\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bfde42dea5c524c284d6b6df1b4c439b5380578"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQzMjUxMzM3OnYy", "diffSide": "RIGHT", "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yNVQxNjo1MToyMVrOKXsj8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yNVQxNjo1MToyMVrOKXsj8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NTkzNTk4Nw==", "bodyText": "Is this a class? I only found org.glassfish.jaxb.core.marshaller.CharacterEscapeHandler", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r695935987", "createdAt": "2021-08-25T16:51:21Z", "author": {"login": "gastaldi"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -170,9 +177,25 @@ void processAnnotationsAndIndexFiles(\n         JAXB_ANNOTATIONS.stream()\n                 .map(Class::getName)\n                 .forEach(className -> {\n-                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n+                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className,\n+                            \"org.glassfish.jaxb.core.v2.model.annotation.Locatable\"));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"org.glassfish.jaxb.core.marshaller.CharacterEscapeHandler\"));\n+        proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"org.glassfish.jaxb.characterEscapeHandler\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bfde42dea5c524c284d6b6df1b4c439b5380578"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQzNjY5NjkxOnYy", "diffSide": "RIGHT", "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yNlQxMjoyNjo1M1rOKYT0uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yOVQxMzoxNzo0OVrOKZrcAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjU3OTI1Ng==", "bodyText": "I am not sure if I have to add this in order to use yandex to get\ncom.sun.xml.txw2.TypedXmlWriter\ninherited class. Else I can add the big list of class inheritance. (it is a tree so long list)", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r696579256", "createdAt": "2021-08-26T12:26:53Z", "author": {"login": "dufoli"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -182,6 +201,42 @@ void processAnnotationsAndIndexFiles(\n         }\n     }\n \n+    @BuildStep\n+    void seeAlso(CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveItems) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        for (AnnotationInstance xmlSeeAlsoAnn : index.getAnnotations(XML_SEE_ALSO)) {\n+            AnnotationValue value = xmlSeeAlsoAnn.value();\n+            Type[] types = value.asClassArray();\n+            for (Type t : types) {\n+                reflectiveItems.produce(new ReflectiveClassBuildItem(false, false, t.name().toString()));\n+            }\n+        }\n+    }\n+\n+    void produceRecursiveProxies(IndexView index,\n+            DotName interfaceDN,\n+            BuildProducer<NativeImageProxyDefinitionBuildItem> proxies, Set<String> proxiesCreated) {\n+        index.getKnownDirectImplementors(interfaceDN).stream()\n+                .filter(classinfo -> Modifier.isInterface(classinfo.flags()))\n+                .map(ClassInfo::name)\n+                .forEach((className) -> {\n+                    if (!proxiesCreated.contains(className.toString())) {\n+                        proxies.produce(new NativeImageProxyDefinitionBuildItem(className.toString()));\n+                        produceRecursiveProxies(index, className, proxies, proxiesCreated);\n+                        proxiesCreated.add(className.toString());\n+                    }\n+                });\n+\n+    }\n+\n+    @BuildStep\n+    void addDependencies(BuildProducer<IndexDependencyBuildItem> indexDependency) {\n+        //call by jaxb-runtime => jaxb-core => txw2\n+        //indexDependency.produce(new IndexDependencyBuildItem(\"org.glassfish.jaxb\", \"txw2\"));\n+        indexDependency.produce(new IndexDependencyBuildItem(\"org.glassfish.jaxb\", \"jaxb-runtime\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb6efb772a0fbfd89502556db56c564ff962a884"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NzU3MDEzMw==", "bodyText": "Yes, I think that's needed, otherwise Jandex won't index any class hierarchy from this JAR", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r697570133", "createdAt": "2021-08-27T16:26:23Z", "author": {"login": "gastaldi"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -182,6 +201,42 @@ void processAnnotationsAndIndexFiles(\n         }\n     }\n \n+    @BuildStep\n+    void seeAlso(CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveItems) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        for (AnnotationInstance xmlSeeAlsoAnn : index.getAnnotations(XML_SEE_ALSO)) {\n+            AnnotationValue value = xmlSeeAlsoAnn.value();\n+            Type[] types = value.asClassArray();\n+            for (Type t : types) {\n+                reflectiveItems.produce(new ReflectiveClassBuildItem(false, false, t.name().toString()));\n+            }\n+        }\n+    }\n+\n+    void produceRecursiveProxies(IndexView index,\n+            DotName interfaceDN,\n+            BuildProducer<NativeImageProxyDefinitionBuildItem> proxies, Set<String> proxiesCreated) {\n+        index.getKnownDirectImplementors(interfaceDN).stream()\n+                .filter(classinfo -> Modifier.isInterface(classinfo.flags()))\n+                .map(ClassInfo::name)\n+                .forEach((className) -> {\n+                    if (!proxiesCreated.contains(className.toString())) {\n+                        proxies.produce(new NativeImageProxyDefinitionBuildItem(className.toString()));\n+                        produceRecursiveProxies(index, className, proxies, proxiesCreated);\n+                        proxiesCreated.add(className.toString());\n+                    }\n+                });\n+\n+    }\n+\n+    @BuildStep\n+    void addDependencies(BuildProducer<IndexDependencyBuildItem> indexDependency) {\n+        //call by jaxb-runtime => jaxb-core => txw2\n+        //indexDependency.produce(new IndexDependencyBuildItem(\"org.glassfish.jaxb\", \"txw2\"));\n+        indexDependency.produce(new IndexDependencyBuildItem(\"org.glassfish.jaxb\", \"jaxb-runtime\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjU3OTI1Ng=="}, "originalCommit": {"oid": "fb6efb772a0fbfd89502556db56c564ff962a884"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5ODAxNDcyMA==", "bodyText": "@dufoli it just occurs to me that you just need the com.sun.xml.txw2.TypedXmlWriter subinterfaces from this JAR? I haven't fully checked, but is that the big list you're talking about?", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r698014720", "createdAt": "2021-08-29T13:17:49Z", "author": {"login": "gastaldi"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -182,6 +201,42 @@ void processAnnotationsAndIndexFiles(\n         }\n     }\n \n+    @BuildStep\n+    void seeAlso(CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveItems) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        for (AnnotationInstance xmlSeeAlsoAnn : index.getAnnotations(XML_SEE_ALSO)) {\n+            AnnotationValue value = xmlSeeAlsoAnn.value();\n+            Type[] types = value.asClassArray();\n+            for (Type t : types) {\n+                reflectiveItems.produce(new ReflectiveClassBuildItem(false, false, t.name().toString()));\n+            }\n+        }\n+    }\n+\n+    void produceRecursiveProxies(IndexView index,\n+            DotName interfaceDN,\n+            BuildProducer<NativeImageProxyDefinitionBuildItem> proxies, Set<String> proxiesCreated) {\n+        index.getKnownDirectImplementors(interfaceDN).stream()\n+                .filter(classinfo -> Modifier.isInterface(classinfo.flags()))\n+                .map(ClassInfo::name)\n+                .forEach((className) -> {\n+                    if (!proxiesCreated.contains(className.toString())) {\n+                        proxies.produce(new NativeImageProxyDefinitionBuildItem(className.toString()));\n+                        produceRecursiveProxies(index, className, proxies, proxiesCreated);\n+                        proxiesCreated.add(className.toString());\n+                    }\n+                });\n+\n+    }\n+\n+    @BuildStep\n+    void addDependencies(BuildProducer<IndexDependencyBuildItem> indexDependency) {\n+        //call by jaxb-runtime => jaxb-core => txw2\n+        //indexDependency.produce(new IndexDependencyBuildItem(\"org.glassfish.jaxb\", \"txw2\"));\n+        indexDependency.produce(new IndexDependencyBuildItem(\"org.glassfish.jaxb\", \"jaxb-runtime\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjU3OTI1Ng=="}, "originalCommit": {"oid": "fb6efb772a0fbfd89502556db56c564ff962a884"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQ0MzE1NDIzOnYy", "diffSide": "RIGHT", "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yN1QxNjoyODozNlrOKZQYpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yOFQxMDoxNzo1NVrOKZhVfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NzU3MTQ5Mw==", "bodyText": "I think you can use index.getAllKnownImplementors(..) instead. Also try to avoid using Lambdas.", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r697571493", "createdAt": "2021-08-27T16:28:36Z", "author": {"login": "gastaldi"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -170,18 +174,66 @@ void processAnnotationsAndIndexFiles(\n         JAXB_ANNOTATIONS.stream()\n                 .map(Class::getName)\n                 .forEach(className -> {\n-                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n+                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className,\n+                            \"com.sun.xml.bind.v2.model.annotation.Locatable\"));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n \n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.bind.marshaller.CharacterEscapeHandler\"));\n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.output.CharacterEscapeHandler\"));\n+\n+        proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.TypedXmlWriter\"));\n+        Set<String> proxiesCreated = new HashSet<>();\n+        DotName typedXmlWriterDN = DotName.createSimple(\"com.sun.xml.txw2.TypedXmlWriter\");\n+        // getAllKnownDirectImplementors skip interface, so use own recursion\n+        produceRecursiveProxies(index, typedXmlWriterDN, proxyDefinitions, proxiesCreated);\n+\n         for (JaxbFileRootBuildItem i : fileRoots) {\n-            try (Stream<Path> stream = iterateResources(i.getFileRoot())) {\n+            try (Stream<Path> stream = iterateResources(applicationArchivesBuildItem, i.getFileRoot())) {\n                 stream.filter(p -> p.getFileName().toString().equals(\"jaxb.index\"))\n                         .forEach(p1 -> handleJaxbFile(p1, resource, reflectiveClass));\n             }\n         }\n     }\n \n+    @BuildStep\n+    void seeAlso(CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveItems) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        for (AnnotationInstance xmlSeeAlsoAnn : index.getAnnotations(XML_SEE_ALSO)) {\n+            AnnotationValue value = xmlSeeAlsoAnn.value();\n+            Type[] types = value.asClassArray();\n+            for (Type t : types) {\n+                reflectiveItems.produce(new ReflectiveClassBuildItem(false, false, t.name().toString()));\n+            }\n+        }\n+    }\n+\n+    void produceRecursiveProxies(IndexView index,\n+            DotName interfaceDN,\n+            BuildProducer<NativeImageProxyDefinitionBuildItem> proxies, Set<String> proxiesCreated) {\n+        index.getKnownDirectImplementors(interfaceDN).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9c38a3f2bdbdb55f481d535cbb65257fe401066"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Nzg0MjE4MQ==", "bodyText": "@gastaldi getAllKnownImplementors return only class and not interface and I need interface only. That s why I use this. I request to have a open a request to have equivalent on jandex.\nwildfly/jandex#94\nI do not remember why I close it.", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r697842181", "createdAt": "2021-08-28T09:17:48Z", "author": {"login": "dufoli"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -170,18 +174,66 @@ void processAnnotationsAndIndexFiles(\n         JAXB_ANNOTATIONS.stream()\n                 .map(Class::getName)\n                 .forEach(className -> {\n-                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n+                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className,\n+                            \"com.sun.xml.bind.v2.model.annotation.Locatable\"));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n \n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.bind.marshaller.CharacterEscapeHandler\"));\n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.output.CharacterEscapeHandler\"));\n+\n+        proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.TypedXmlWriter\"));\n+        Set<String> proxiesCreated = new HashSet<>();\n+        DotName typedXmlWriterDN = DotName.createSimple(\"com.sun.xml.txw2.TypedXmlWriter\");\n+        // getAllKnownDirectImplementors skip interface, so use own recursion\n+        produceRecursiveProxies(index, typedXmlWriterDN, proxyDefinitions, proxiesCreated);\n+\n         for (JaxbFileRootBuildItem i : fileRoots) {\n-            try (Stream<Path> stream = iterateResources(i.getFileRoot())) {\n+            try (Stream<Path> stream = iterateResources(applicationArchivesBuildItem, i.getFileRoot())) {\n                 stream.filter(p -> p.getFileName().toString().equals(\"jaxb.index\"))\n                         .forEach(p1 -> handleJaxbFile(p1, resource, reflectiveClass));\n             }\n         }\n     }\n \n+    @BuildStep\n+    void seeAlso(CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveItems) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        for (AnnotationInstance xmlSeeAlsoAnn : index.getAnnotations(XML_SEE_ALSO)) {\n+            AnnotationValue value = xmlSeeAlsoAnn.value();\n+            Type[] types = value.asClassArray();\n+            for (Type t : types) {\n+                reflectiveItems.produce(new ReflectiveClassBuildItem(false, false, t.name().toString()));\n+            }\n+        }\n+    }\n+\n+    void produceRecursiveProxies(IndexView index,\n+            DotName interfaceDN,\n+            BuildProducer<NativeImageProxyDefinitionBuildItem> proxies, Set<String> proxiesCreated) {\n+        index.getKnownDirectImplementors(interfaceDN).stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NzU3MTQ5Mw=="}, "originalCommit": {"oid": "f9c38a3f2bdbdb55f481d535cbb65257fe401066"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Nzg0OTIxNA==", "bodyText": "@gastaldi I have refactor to limit the lambda. Hope it is fine now.", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r697849214", "createdAt": "2021-08-28T10:17:55Z", "author": {"login": "dufoli"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -170,18 +174,66 @@ void processAnnotationsAndIndexFiles(\n         JAXB_ANNOTATIONS.stream()\n                 .map(Class::getName)\n                 .forEach(className -> {\n-                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n+                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className,\n+                            \"com.sun.xml.bind.v2.model.annotation.Locatable\"));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n \n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.bind.marshaller.CharacterEscapeHandler\"));\n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.output.CharacterEscapeHandler\"));\n+\n+        proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.TypedXmlWriter\"));\n+        Set<String> proxiesCreated = new HashSet<>();\n+        DotName typedXmlWriterDN = DotName.createSimple(\"com.sun.xml.txw2.TypedXmlWriter\");\n+        // getAllKnownDirectImplementors skip interface, so use own recursion\n+        produceRecursiveProxies(index, typedXmlWriterDN, proxyDefinitions, proxiesCreated);\n+\n         for (JaxbFileRootBuildItem i : fileRoots) {\n-            try (Stream<Path> stream = iterateResources(i.getFileRoot())) {\n+            try (Stream<Path> stream = iterateResources(applicationArchivesBuildItem, i.getFileRoot())) {\n                 stream.filter(p -> p.getFileName().toString().equals(\"jaxb.index\"))\n                         .forEach(p1 -> handleJaxbFile(p1, resource, reflectiveClass));\n             }\n         }\n     }\n \n+    @BuildStep\n+    void seeAlso(CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveItems) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        for (AnnotationInstance xmlSeeAlsoAnn : index.getAnnotations(XML_SEE_ALSO)) {\n+            AnnotationValue value = xmlSeeAlsoAnn.value();\n+            Type[] types = value.asClassArray();\n+            for (Type t : types) {\n+                reflectiveItems.produce(new ReflectiveClassBuildItem(false, false, t.name().toString()));\n+            }\n+        }\n+    }\n+\n+    void produceRecursiveProxies(IndexView index,\n+            DotName interfaceDN,\n+            BuildProducer<NativeImageProxyDefinitionBuildItem> proxies, Set<String> proxiesCreated) {\n+        index.getKnownDirectImplementors(interfaceDN).stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NzU3MTQ5Mw=="}, "originalCommit": {"oid": "f9c38a3f2bdbdb55f481d535cbb65257fe401066"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQ0NjQ5NDEwOnYy", "diffSide": "RIGHT", "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yOVQxMjo0OTo1NVrOKZrNbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yOVQxMjo0OTo1NVrOKZrNbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5ODAxMDk5MQ==", "bodyText": "This method should not be public nor start with a capital letter", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r698010991", "createdAt": "2021-08-29T12:49:55Z", "author": {"login": "gastaldi"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -170,18 +172,73 @@ void processAnnotationsAndIndexFiles(\n         JAXB_ANNOTATIONS.stream()\n                 .map(Class::getName)\n                 .forEach(className -> {\n-                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n+                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className,\n+                            \"com.sun.xml.bind.v2.model.annotation.Locatable\"));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n \n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.bind.marshaller.CharacterEscapeHandler\"));\n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.output.CharacterEscapeHandler\"));\n+\n+        proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.TypedXmlWriter\"));\n+\n         for (JaxbFileRootBuildItem i : fileRoots) {\n-            try (Stream<Path> stream = iterateResources(i.getFileRoot())) {\n+            try (Stream<Path> stream = iterateResources(applicationArchivesBuildItem, i.getFileRoot())) {\n                 stream.filter(p -> p.getFileName().toString().equals(\"jaxb.index\"))\n                         .forEach(p1 -> handleJaxbFile(p1, resource, reflectiveClass));\n             }\n         }\n     }\n \n+    @BuildStep\n+    void processTypedXmlWriters(\n+            CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<NativeImageProxyDefinitionBuildItem> proxyDefinitions) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        DotName typedXmlWriterDN = DotName.createSimple(\"com.sun.xml.txw2.TypedXmlWriter\");\n+        // getAllKnownDirectImplementors skip interface, so use own recursion\n+        produceRecursiveProxies(index, typedXmlWriterDN)\n+                .map(DotName::toString)\n+                .map(NativeImageProxyDefinitionBuildItem::new)\n+                .forEach(proxyDefinitions::produce);\n+    }\n+\n+    @BuildStep\n+    void seeAlso(CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveItems) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        for (AnnotationInstance xmlSeeAlsoAnn : index.getAnnotations(XML_SEE_ALSO)) {\n+            AnnotationValue value = xmlSeeAlsoAnn.value();\n+            Type[] types = value.asClassArray();\n+            for (Type t : types) {\n+                reflectiveItems.produce(new ReflectiveClassBuildItem(false, false, t.name().toString()));\n+            }\n+        }\n+    }\n+\n+    public static boolean ModifierIsInterface(ClassInfo classinfo) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "081fa573a33f7ba24c611eaf40580fb645bc83a1"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQ0NjQ5OTgzOnYy", "diffSide": "RIGHT", "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yOVQxMjo1NDoyNVrOKZrQBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0zMFQxNjoxNjozOFrOKaQjpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5ODAxMTY1NQ==", "bodyText": "We prefer to avoid using streams and lambdas because it is costly computation-wise. I'd suggest using a plain for-each here.", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r698011655", "createdAt": "2021-08-29T12:54:25Z", "author": {"login": "gastaldi"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -170,18 +172,73 @@ void processAnnotationsAndIndexFiles(\n         JAXB_ANNOTATIONS.stream()\n                 .map(Class::getName)\n                 .forEach(className -> {\n-                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n+                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className,\n+                            \"com.sun.xml.bind.v2.model.annotation.Locatable\"));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n \n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.bind.marshaller.CharacterEscapeHandler\"));\n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.output.CharacterEscapeHandler\"));\n+\n+        proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.TypedXmlWriter\"));\n+\n         for (JaxbFileRootBuildItem i : fileRoots) {\n-            try (Stream<Path> stream = iterateResources(i.getFileRoot())) {\n+            try (Stream<Path> stream = iterateResources(applicationArchivesBuildItem, i.getFileRoot())) {\n                 stream.filter(p -> p.getFileName().toString().equals(\"jaxb.index\"))\n                         .forEach(p1 -> handleJaxbFile(p1, resource, reflectiveClass));\n             }\n         }\n     }\n \n+    @BuildStep\n+    void processTypedXmlWriters(\n+            CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<NativeImageProxyDefinitionBuildItem> proxyDefinitions) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        DotName typedXmlWriterDN = DotName.createSimple(\"com.sun.xml.txw2.TypedXmlWriter\");\n+        // getAllKnownDirectImplementors skip interface, so use own recursion\n+        produceRecursiveProxies(index, typedXmlWriterDN)\n+                .map(DotName::toString)\n+                .map(NativeImageProxyDefinitionBuildItem::new)\n+                .forEach(proxyDefinitions::produce);\n+    }\n+\n+    @BuildStep\n+    void seeAlso(CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveItems) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        for (AnnotationInstance xmlSeeAlsoAnn : index.getAnnotations(XML_SEE_ALSO)) {\n+            AnnotationValue value = xmlSeeAlsoAnn.value();\n+            Type[] types = value.asClassArray();\n+            for (Type t : types) {\n+                reflectiveItems.produce(new ReflectiveClassBuildItem(false, false, t.name().toString()));\n+            }\n+        }\n+    }\n+\n+    public static boolean ModifierIsInterface(ClassInfo classinfo) {\n+        return Modifier.isInterface(classinfo.flags());\n+    }\n+\n+    Stream<DotName> produceRecursiveProxies(IndexView index,\n+            DotName interfaceDN) {\n+        Stream<DotName> itf = Stream.of(interfaceDN);\n+        Stream<DotName> subItf = index.getKnownDirectImplementors(interfaceDN).stream()\n+                .filter(JaxbProcessor::ModifierIsInterface)\n+                .map(ClassInfo::name)\n+                .flatMap((className) -> produceRecursiveProxies(index, className));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "081fa573a33f7ba24c611eaf40580fb645bc83a1"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5ODYwNDM0OA==", "bodyText": "hmm, I am lost I have switch from foreach to that for you and now you want that I go back to forEach.\nCan you provide a little pseudo code about stream you want ?\nI find very eleguante to have Steam in return\nyou mean something like:\n//call\nproduceRecursiveProxies(index, typedXmlWriterDN, proxyDefinitions)\n//function def\nvoid produceRecursiveProxies(IndexView index, DotName interfaceDN, BuildProducer<NativeImageProxyDefinitionBuildItem> proxyDefinitions)\nfor (ClassInfo cls : index.getKnownDirectImplementors(interfaceDN)) {\n    if(Modifier.isInterface(cls.flags()) {\n        produceRecursiveProxies(index, cls.name());\n        proxyDefinitions::produce(new NativeImageProxyDefinitionBuildItem(cls.name().toString()));\n    }\n}", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r698604348", "createdAt": "2021-08-30T15:51:19Z", "author": {"login": "dufoli"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -170,18 +172,73 @@ void processAnnotationsAndIndexFiles(\n         JAXB_ANNOTATIONS.stream()\n                 .map(Class::getName)\n                 .forEach(className -> {\n-                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n+                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className,\n+                            \"com.sun.xml.bind.v2.model.annotation.Locatable\"));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n \n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.bind.marshaller.CharacterEscapeHandler\"));\n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.output.CharacterEscapeHandler\"));\n+\n+        proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.TypedXmlWriter\"));\n+\n         for (JaxbFileRootBuildItem i : fileRoots) {\n-            try (Stream<Path> stream = iterateResources(i.getFileRoot())) {\n+            try (Stream<Path> stream = iterateResources(applicationArchivesBuildItem, i.getFileRoot())) {\n                 stream.filter(p -> p.getFileName().toString().equals(\"jaxb.index\"))\n                         .forEach(p1 -> handleJaxbFile(p1, resource, reflectiveClass));\n             }\n         }\n     }\n \n+    @BuildStep\n+    void processTypedXmlWriters(\n+            CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<NativeImageProxyDefinitionBuildItem> proxyDefinitions) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        DotName typedXmlWriterDN = DotName.createSimple(\"com.sun.xml.txw2.TypedXmlWriter\");\n+        // getAllKnownDirectImplementors skip interface, so use own recursion\n+        produceRecursiveProxies(index, typedXmlWriterDN)\n+                .map(DotName::toString)\n+                .map(NativeImageProxyDefinitionBuildItem::new)\n+                .forEach(proxyDefinitions::produce);\n+    }\n+\n+    @BuildStep\n+    void seeAlso(CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveItems) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        for (AnnotationInstance xmlSeeAlsoAnn : index.getAnnotations(XML_SEE_ALSO)) {\n+            AnnotationValue value = xmlSeeAlsoAnn.value();\n+            Type[] types = value.asClassArray();\n+            for (Type t : types) {\n+                reflectiveItems.produce(new ReflectiveClassBuildItem(false, false, t.name().toString()));\n+            }\n+        }\n+    }\n+\n+    public static boolean ModifierIsInterface(ClassInfo classinfo) {\n+        return Modifier.isInterface(classinfo.flags());\n+    }\n+\n+    Stream<DotName> produceRecursiveProxies(IndexView index,\n+            DotName interfaceDN) {\n+        Stream<DotName> itf = Stream.of(interfaceDN);\n+        Stream<DotName> subItf = index.getKnownDirectImplementors(interfaceDN).stream()\n+                .filter(JaxbProcessor::ModifierIsInterface)\n+                .map(ClassInfo::name)\n+                .flatMap((className) -> produceRecursiveProxies(index, className));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5ODAxMTY1NQ=="}, "originalCommit": {"oid": "081fa573a33f7ba24c611eaf40580fb645bc83a1"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5ODYyMjg4Ng==", "bodyText": "if we just use the list of class it disapear so I guess review is ok ? ^^", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r698622886", "createdAt": "2021-08-30T16:16:38Z", "author": {"login": "dufoli"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -170,18 +172,73 @@ void processAnnotationsAndIndexFiles(\n         JAXB_ANNOTATIONS.stream()\n                 .map(Class::getName)\n                 .forEach(className -> {\n-                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n+                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className,\n+                            \"com.sun.xml.bind.v2.model.annotation.Locatable\"));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n \n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.bind.marshaller.CharacterEscapeHandler\"));\n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.output.CharacterEscapeHandler\"));\n+\n+        proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.TypedXmlWriter\"));\n+\n         for (JaxbFileRootBuildItem i : fileRoots) {\n-            try (Stream<Path> stream = iterateResources(i.getFileRoot())) {\n+            try (Stream<Path> stream = iterateResources(applicationArchivesBuildItem, i.getFileRoot())) {\n                 stream.filter(p -> p.getFileName().toString().equals(\"jaxb.index\"))\n                         .forEach(p1 -> handleJaxbFile(p1, resource, reflectiveClass));\n             }\n         }\n     }\n \n+    @BuildStep\n+    void processTypedXmlWriters(\n+            CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<NativeImageProxyDefinitionBuildItem> proxyDefinitions) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        DotName typedXmlWriterDN = DotName.createSimple(\"com.sun.xml.txw2.TypedXmlWriter\");\n+        // getAllKnownDirectImplementors skip interface, so use own recursion\n+        produceRecursiveProxies(index, typedXmlWriterDN)\n+                .map(DotName::toString)\n+                .map(NativeImageProxyDefinitionBuildItem::new)\n+                .forEach(proxyDefinitions::produce);\n+    }\n+\n+    @BuildStep\n+    void seeAlso(CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveItems) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        for (AnnotationInstance xmlSeeAlsoAnn : index.getAnnotations(XML_SEE_ALSO)) {\n+            AnnotationValue value = xmlSeeAlsoAnn.value();\n+            Type[] types = value.asClassArray();\n+            for (Type t : types) {\n+                reflectiveItems.produce(new ReflectiveClassBuildItem(false, false, t.name().toString()));\n+            }\n+        }\n+    }\n+\n+    public static boolean ModifierIsInterface(ClassInfo classinfo) {\n+        return Modifier.isInterface(classinfo.flags());\n+    }\n+\n+    Stream<DotName> produceRecursiveProxies(IndexView index,\n+            DotName interfaceDN) {\n+        Stream<DotName> itf = Stream.of(interfaceDN);\n+        Stream<DotName> subItf = index.getKnownDirectImplementors(interfaceDN).stream()\n+                .filter(JaxbProcessor::ModifierIsInterface)\n+                .map(ClassInfo::name)\n+                .flatMap((className) -> produceRecursiveProxies(index, className));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5ODAxMTY1NQ=="}, "originalCommit": {"oid": "081fa573a33f7ba24c611eaf40580fb645bc83a1"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQ0NjUwMzMzOnYy", "diffSide": "RIGHT", "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0yOVQxMjo1NzozMlrOKZrRxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0zMFQxNjoxNjowNlrOKaQiKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5ODAxMjEwMg==", "bodyText": "This method isn't producing anything, just collecting DotNames", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r698012102", "createdAt": "2021-08-29T12:57:32Z", "author": {"login": "gastaldi"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -170,18 +172,73 @@ void processAnnotationsAndIndexFiles(\n         JAXB_ANNOTATIONS.stream()\n                 .map(Class::getName)\n                 .forEach(className -> {\n-                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n+                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className,\n+                            \"com.sun.xml.bind.v2.model.annotation.Locatable\"));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n \n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.bind.marshaller.CharacterEscapeHandler\"));\n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.output.CharacterEscapeHandler\"));\n+\n+        proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.TypedXmlWriter\"));\n+\n         for (JaxbFileRootBuildItem i : fileRoots) {\n-            try (Stream<Path> stream = iterateResources(i.getFileRoot())) {\n+            try (Stream<Path> stream = iterateResources(applicationArchivesBuildItem, i.getFileRoot())) {\n                 stream.filter(p -> p.getFileName().toString().equals(\"jaxb.index\"))\n                         .forEach(p1 -> handleJaxbFile(p1, resource, reflectiveClass));\n             }\n         }\n     }\n \n+    @BuildStep\n+    void processTypedXmlWriters(\n+            CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<NativeImageProxyDefinitionBuildItem> proxyDefinitions) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        DotName typedXmlWriterDN = DotName.createSimple(\"com.sun.xml.txw2.TypedXmlWriter\");\n+        // getAllKnownDirectImplementors skip interface, so use own recursion\n+        produceRecursiveProxies(index, typedXmlWriterDN)\n+                .map(DotName::toString)\n+                .map(NativeImageProxyDefinitionBuildItem::new)\n+                .forEach(proxyDefinitions::produce);\n+    }\n+\n+    @BuildStep\n+    void seeAlso(CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveItems) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        for (AnnotationInstance xmlSeeAlsoAnn : index.getAnnotations(XML_SEE_ALSO)) {\n+            AnnotationValue value = xmlSeeAlsoAnn.value();\n+            Type[] types = value.asClassArray();\n+            for (Type t : types) {\n+                reflectiveItems.produce(new ReflectiveClassBuildItem(false, false, t.name().toString()));\n+            }\n+        }\n+    }\n+\n+    public static boolean ModifierIsInterface(ClassInfo classinfo) {\n+        return Modifier.isInterface(classinfo.flags());\n+    }\n+\n+    Stream<DotName> produceRecursiveProxies(IndexView index,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "081fa573a33f7ba24c611eaf40580fb645bc83a1"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5ODYxMDk3Mg==", "bodyText": "yes that s the purpose because it is a tree of inheritance with interface that I need to produce NativeImageProxyDefinitionBuildItem for each interface.\nWe have 2 solutions:\n\nlist all class and hardcode the class from jaxbri. it can be found there : quarkiverse/quarkus-cxf@8ee8b23#diff-ab6082b1f5a32014ec91e75ab14715d38b1d3e2bd2cab287562542c1af6a37b6L1577-L1623 (about 50 classes)\ndo this inheritance calculation on build time with recurssive.", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r698610972", "createdAt": "2021-08-30T15:59:57Z", "author": {"login": "dufoli"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -170,18 +172,73 @@ void processAnnotationsAndIndexFiles(\n         JAXB_ANNOTATIONS.stream()\n                 .map(Class::getName)\n                 .forEach(className -> {\n-                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n+                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className,\n+                            \"com.sun.xml.bind.v2.model.annotation.Locatable\"));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n \n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.bind.marshaller.CharacterEscapeHandler\"));\n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.output.CharacterEscapeHandler\"));\n+\n+        proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.TypedXmlWriter\"));\n+\n         for (JaxbFileRootBuildItem i : fileRoots) {\n-            try (Stream<Path> stream = iterateResources(i.getFileRoot())) {\n+            try (Stream<Path> stream = iterateResources(applicationArchivesBuildItem, i.getFileRoot())) {\n                 stream.filter(p -> p.getFileName().toString().equals(\"jaxb.index\"))\n                         .forEach(p1 -> handleJaxbFile(p1, resource, reflectiveClass));\n             }\n         }\n     }\n \n+    @BuildStep\n+    void processTypedXmlWriters(\n+            CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<NativeImageProxyDefinitionBuildItem> proxyDefinitions) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        DotName typedXmlWriterDN = DotName.createSimple(\"com.sun.xml.txw2.TypedXmlWriter\");\n+        // getAllKnownDirectImplementors skip interface, so use own recursion\n+        produceRecursiveProxies(index, typedXmlWriterDN)\n+                .map(DotName::toString)\n+                .map(NativeImageProxyDefinitionBuildItem::new)\n+                .forEach(proxyDefinitions::produce);\n+    }\n+\n+    @BuildStep\n+    void seeAlso(CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveItems) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        for (AnnotationInstance xmlSeeAlsoAnn : index.getAnnotations(XML_SEE_ALSO)) {\n+            AnnotationValue value = xmlSeeAlsoAnn.value();\n+            Type[] types = value.asClassArray();\n+            for (Type t : types) {\n+                reflectiveItems.produce(new ReflectiveClassBuildItem(false, false, t.name().toString()));\n+            }\n+        }\n+    }\n+\n+    public static boolean ModifierIsInterface(ClassInfo classinfo) {\n+        return Modifier.isInterface(classinfo.flags());\n+    }\n+\n+    Stream<DotName> produceRecursiveProxies(IndexView index,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5ODAxMjEwMg=="}, "originalCommit": {"oid": "081fa573a33f7ba24c611eaf40580fb645bc83a1"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5ODYxNzQ3OQ==", "bodyText": "Both solutions are OK, but I'd prefer to have the classes hardcoded from the jaxb-ri in this case instead for these reasons:\n\nThat would make it more deterministic (and faster than calculating the inheritance on build time  that we know it will never change).\nYou can simplify the Processor by not indexing the JAXB-RI dependency", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r698617479", "createdAt": "2021-08-30T16:09:08Z", "author": {"login": "gastaldi"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -170,18 +172,73 @@ void processAnnotationsAndIndexFiles(\n         JAXB_ANNOTATIONS.stream()\n                 .map(Class::getName)\n                 .forEach(className -> {\n-                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n+                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className,\n+                            \"com.sun.xml.bind.v2.model.annotation.Locatable\"));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n \n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.bind.marshaller.CharacterEscapeHandler\"));\n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.output.CharacterEscapeHandler\"));\n+\n+        proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.TypedXmlWriter\"));\n+\n         for (JaxbFileRootBuildItem i : fileRoots) {\n-            try (Stream<Path> stream = iterateResources(i.getFileRoot())) {\n+            try (Stream<Path> stream = iterateResources(applicationArchivesBuildItem, i.getFileRoot())) {\n                 stream.filter(p -> p.getFileName().toString().equals(\"jaxb.index\"))\n                         .forEach(p1 -> handleJaxbFile(p1, resource, reflectiveClass));\n             }\n         }\n     }\n \n+    @BuildStep\n+    void processTypedXmlWriters(\n+            CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<NativeImageProxyDefinitionBuildItem> proxyDefinitions) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        DotName typedXmlWriterDN = DotName.createSimple(\"com.sun.xml.txw2.TypedXmlWriter\");\n+        // getAllKnownDirectImplementors skip interface, so use own recursion\n+        produceRecursiveProxies(index, typedXmlWriterDN)\n+                .map(DotName::toString)\n+                .map(NativeImageProxyDefinitionBuildItem::new)\n+                .forEach(proxyDefinitions::produce);\n+    }\n+\n+    @BuildStep\n+    void seeAlso(CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveItems) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        for (AnnotationInstance xmlSeeAlsoAnn : index.getAnnotations(XML_SEE_ALSO)) {\n+            AnnotationValue value = xmlSeeAlsoAnn.value();\n+            Type[] types = value.asClassArray();\n+            for (Type t : types) {\n+                reflectiveItems.produce(new ReflectiveClassBuildItem(false, false, t.name().toString()));\n+            }\n+        }\n+    }\n+\n+    public static boolean ModifierIsInterface(ClassInfo classinfo) {\n+        return Modifier.isInterface(classinfo.flags());\n+    }\n+\n+    Stream<DotName> produceRecursiveProxies(IndexView index,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5ODAxMjEwMg=="}, "originalCommit": {"oid": "081fa573a33f7ba24c611eaf40580fb645bc83a1"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5ODYyMjUwNA==", "bodyText": "to avoid computation, I have just provide list of class.", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r698622504", "createdAt": "2021-08-30T16:16:06Z", "author": {"login": "dufoli"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -170,18 +172,73 @@ void processAnnotationsAndIndexFiles(\n         JAXB_ANNOTATIONS.stream()\n                 .map(Class::getName)\n                 .forEach(className -> {\n-                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n+                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className,\n+                            \"com.sun.xml.bind.v2.model.annotation.Locatable\"));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n \n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.bind.marshaller.CharacterEscapeHandler\"));\n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.output.CharacterEscapeHandler\"));\n+\n+        proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.txw2.TypedXmlWriter\"));\n+\n         for (JaxbFileRootBuildItem i : fileRoots) {\n-            try (Stream<Path> stream = iterateResources(i.getFileRoot())) {\n+            try (Stream<Path> stream = iterateResources(applicationArchivesBuildItem, i.getFileRoot())) {\n                 stream.filter(p -> p.getFileName().toString().equals(\"jaxb.index\"))\n                         .forEach(p1 -> handleJaxbFile(p1, resource, reflectiveClass));\n             }\n         }\n     }\n \n+    @BuildStep\n+    void processTypedXmlWriters(\n+            CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<NativeImageProxyDefinitionBuildItem> proxyDefinitions) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        DotName typedXmlWriterDN = DotName.createSimple(\"com.sun.xml.txw2.TypedXmlWriter\");\n+        // getAllKnownDirectImplementors skip interface, so use own recursion\n+        produceRecursiveProxies(index, typedXmlWriterDN)\n+                .map(DotName::toString)\n+                .map(NativeImageProxyDefinitionBuildItem::new)\n+                .forEach(proxyDefinitions::produce);\n+    }\n+\n+    @BuildStep\n+    void seeAlso(CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveItems) {\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        for (AnnotationInstance xmlSeeAlsoAnn : index.getAnnotations(XML_SEE_ALSO)) {\n+            AnnotationValue value = xmlSeeAlsoAnn.value();\n+            Type[] types = value.asClassArray();\n+            for (Type t : types) {\n+                reflectiveItems.produce(new ReflectiveClassBuildItem(false, false, t.name().toString()));\n+            }\n+        }\n+    }\n+\n+    public static boolean ModifierIsInterface(ClassInfo classinfo) {\n+        return Modifier.isInterface(classinfo.flags());\n+    }\n+\n+    Stream<DotName> produceRecursiveProxies(IndexView index,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5ODAxMjEwMg=="}, "originalCommit": {"oid": "081fa573a33f7ba24c611eaf40580fb645bc83a1"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQ1MDczNjU0OnYy", "diffSide": "RIGHT", "path": "integration-tests/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0zMFQxNjozMzozOVrOKaRTRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0zMFQxNjozMzozOVrOKaRTRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5ODYzNTA3Ng==", "bodyText": "You need to add this new module to an existing slot in https://github.com/quarkusio/quarkus/blob/main/.github/native-tests.json", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r698635076", "createdAt": "2021-08-30T16:33:39Z", "author": {"login": "gastaldi"}, "path": "integration-tests/pom.xml", "diffHunk": "@@ -267,6 +267,7 @@\n                 <module>micrometer-prometheus</module>\n                 <module>opentelemetry</module>\n                 <module>logging-json</module>\n+                <module>jaxb</module>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bfa2db71c2d1b0ad7ff95837da46d78c49d8a6c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDQ1MDgyOTE5OnYy", "diffSide": "RIGHT", "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0zMFQxNjo1MzozMlrOKaSKJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0zMFQxNjo1MzozMlrOKaSKJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5ODY0OTEyNg==", "bodyText": "Remove this line", "url": "https://github.com/quarkusio/quarkus/pull/13408#discussion_r698649126", "createdAt": "2021-08-30T16:53:32Z", "author": {"login": "gastaldi"}, "path": "extensions/jaxb/deployment/src/main/java/io/quarkus/jaxb/deployment/JaxbProcessor.java", "diffHunk": "@@ -170,18 +169,84 @@ void processAnnotationsAndIndexFiles(\n         JAXB_ANNOTATIONS.stream()\n                 .map(Class::getName)\n                 .forEach(className -> {\n-                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className, Locatable.class.getName()));\n+                    proxyDefinitions.produce(new NativeImageProxyDefinitionBuildItem(className,\n+                            \"com.sun.xml.bind.v2.model.annotation.Locatable\"));\n                     addReflectiveClass(reflectiveClass, true, false, className);\n                 });\n \n+        proxyDefinitions\n+                .produce(new NativeImageProxyDefinitionBuildItem(\"com.sun.xml.bind.marshaller.CharacterEscapeHandler\",\n+                        \"com.sun.xml.txw2.output.CharacterEscapeHandler\",\n+                        \"com.sun.xml.txw2.TypedXmlWriter\",\n+                        \"com.sun.xml.bind.v2.schemagen.episode.Bindings\",\n+                        \"com.sun.xml.bind.v2.schemagen.episode.SchemaBindings\",\n+                        \"com.sun.xml.bind.v2.schemagen.episode.Klass\",\n+                        \"com.sun.xml.bind.v2.schemagen.episode.Package\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.Annotated\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.Annotation\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.Any\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.Appinfo\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.AttrDecls\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.AttributeType\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.ComplexContent\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.ComplexExtension\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.ComplexRestriction\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.ComplexType\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.ComplexTypeHost\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.ComplexTypeModel\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.ContentModelContainer\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.Documentation\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.Element\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.ExplicitGroup\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.ExtensionType\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.FixedOrDefault\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.Import\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.List\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.LocalAttribute\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.LocalElement\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.NestedParticle\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.NoFixedFacet\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.Occurs\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.Particle\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.Redefinable\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.Schema\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.SchemaTop\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.SimpleContent\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.SimpleDerivation\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.SimpleExtension\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.SimpleRestriction\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.SimpleRestrictionModel\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.SimpleType\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.SimpleTypeHost\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.TopLevelAttribute\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.TopLevelElement\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.TypeDefParticle\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.TypeHost\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.Union\",\n+                        \"com.sun.xml.bind.v2.schemagen.xmlschema.Wildcard\",\n+                        \"com.sun.xml.txw2.TypedXmlWriter\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bfa2db71c2d1b0ad7ff95837da46d78c49d8a6c"}, "originalPosition": 115}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3988, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}