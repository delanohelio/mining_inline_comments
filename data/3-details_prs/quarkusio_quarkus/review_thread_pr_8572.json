{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMjk5NzI2", "number": 8572, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjo1OToyMlrODxvOGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozMzowNVrODxwBcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDgwNDc1OnYy", "diffSide": "RIGHT", "path": ".github/NativeBuildReport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjo1OToyMlrOGFYNXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzowNDowNlrOGFYZJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI5MjcwMw==", "bodyText": "Minor nitpick: this comment looks useless?", "url": "https://github.com/quarkusio/quarkus/pull/8572#discussion_r408292703", "createdAt": "2020-04-14T16:59:22Z", "author": {"login": "gsmet"}, "path": ".github/NativeBuildReport.java", "diffHunk": "@@ -0,0 +1,97 @@\n+//usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n+\n+//DEPS org.kohsuke:github-api:1.101\n+//DEPS info.picocli:picocli:4.2.0\n+\n+import org.kohsuke.github.*;\n+import picocli.CommandLine;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Option;\n+import picocli.CommandLine.Parameters;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.concurrent.TimeUnit;\n+\n+@Command(name = \"report\", mixinStandardHelpOptions = true,\n+\t\tdescription = \"Takes care of updating the an issue depending on the status of the build\")\n+class Report implements Runnable {\n+\n+\t@Option(names = \"token\", description = \"Github token to use when calling the Github API\")\n+\tprivate String token;\n+\n+\t@Option(names = \"status\", description = \"The status of the CI run\")\n+\tprivate String status;\n+\n+\t@Option(names = \"issueRepo\", description = \"The repository where the issue resides (i.e. quarkusio/quarkus)\")\n+\tprivate String issueRepo;\n+\n+\t@Option(names = \"issueNumber\", description = \"The issue to update\")\n+\tprivate Integer issueNumber;\n+\n+\t@Option(names = \"thisRepo\", description = \"The repository for which we are reporting the CI status\")\n+\tprivate String thisRepo;\n+\n+\t@Option(names = \"runId\", description = \"The ID of the Github Action run for  which we are reporting the CI status\")\n+\tprivate String runId;\n+\n+\t@Override\n+\tpublic void run() {\n+\t\ttry {\n+\t\t\tfinal boolean succeed = \"success\".equalsIgnoreCase(status);\n+\t\t\tif (\"cancelled\".equalsIgnoreCase(status)) {\n+\t\t\t\tSystem.out.println(\"Job status is `cancelled` - exiting\");\n+\t\t\t\tSystem.exit(0);\n+\t\t\t}\n+\n+\t\t\tSystem.out.println(String.format(\"The CI build had status %s.\", status));\n+\n+\t\t\tfinal GitHub github = new GitHubBuilder().withOAuthToken(token).build();\n+\t\t\tfinal GHRepository repository = github.getRepository(issueRepo);\n+\n+\t\t\tfinal GHIssue issue = repository.getIssue(issueNumber);\n+\t\t\tif (issue == null) {\n+\t\t\t\tSystem.out.println(String.format(\"Unable to find the issue %s in project %s\", issueNumber, issueRepo));\n+\t\t\t\tSystem.exit(-1);\n+\t\t\t} else {\n+\t\t\t\tSystem.out.println(String.format(\"Report issue found: %s - %s\", issue.getTitle(), issue.getHtmlUrl().toString()));\n+\t\t\t\tSystem.out.println(String.format(\"The issue is currently %s\", issue.getState().toString()));\n+\t\t\t}\n+\n+\t\t\tif (succeed) {\n+\t\t\t\tif (issue != null  && isOpen(issue)) {\n+\t\t\t\t\t// close issue with a comment\n+\t\t\t\t\tfinal GHIssueComment comment = issue.comment(String.format(\"Build fixed:\\n* Link to latest CI run: https://github.com/%s/actions/runs/%s\", thisRepo, runId));\n+\t\t\t\t\tissue.close();\n+\t\t\t\t\tSystem.out.println(String.format(\"Comment added on issue %s - %s, the issue has also been closed\", issue.getHtmlUrl().toString(), comment.getHtmlUrl().toString()));\n+\t\t\t\t} else {\n+\t\t\t\t\tSystem.out.println(\"Nothing to do - the build passed and the issue is already closed\");\n+\t\t\t\t}\n+\t\t\t} else  {\n+\t\t\t\tif (isOpen(issue)) {\n+\t\t\t\t\tfinal GHIssueComment comment = issue.comment(String.format(\"The build is still failing:\\n* Link to latest CI run: https://github.com/%s/actions/runs/%s\", thisRepo, runId));\n+\t\t\t\t\tSystem.out.println(String.format(\"Comment added on issue %s - %s\", issue.getHtmlUrl().toString(), comment.getHtmlUrl().toString()));\n+\t\t\t\t} else {\n+\t\t\t\t\tissue.reopen();\n+\t\t\t\t\tfinal GHIssueComment comment = issue.comment(String.format(\"Unfortunately, the build failed:\\n* Link to latest CI run: https://github.com/%s/actions/runs/%s\", thisRepo, runId));\n+\t\t\t\t\tSystem.out.println(String.format(\"Comment added on issue %s - %s, the issue has been re-opened\", issue.getHtmlUrl().toString(), comment.getHtmlUrl().toString()));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tcatch (IOException e) {\n+\t\t\tthrow new UncheckedIOException(e);\n+\t\t}\n+\t}\n+\n+\tprivate static boolean isOpen(GHIssue issue) {\n+\t\treturn (issue.getState() == GHIssueState.OPEN);\n+\t}\n+\n+\t// this example implements Callable, so parsing, error handling and handling user\n+\t// requests for usage help or version help can be done with one line of code.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6292ae6742de3034648726cd4d3acfd4474de36"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI5NTcxNw==", "bodyText": "Oooops, fixed :)", "url": "https://github.com/quarkusio/quarkus/pull/8572#discussion_r408295717", "createdAt": "2020-04-14T17:04:06Z", "author": {"login": "geoand"}, "path": ".github/NativeBuildReport.java", "diffHunk": "@@ -0,0 +1,97 @@\n+//usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n+\n+//DEPS org.kohsuke:github-api:1.101\n+//DEPS info.picocli:picocli:4.2.0\n+\n+import org.kohsuke.github.*;\n+import picocli.CommandLine;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Option;\n+import picocli.CommandLine.Parameters;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.concurrent.TimeUnit;\n+\n+@Command(name = \"report\", mixinStandardHelpOptions = true,\n+\t\tdescription = \"Takes care of updating the an issue depending on the status of the build\")\n+class Report implements Runnable {\n+\n+\t@Option(names = \"token\", description = \"Github token to use when calling the Github API\")\n+\tprivate String token;\n+\n+\t@Option(names = \"status\", description = \"The status of the CI run\")\n+\tprivate String status;\n+\n+\t@Option(names = \"issueRepo\", description = \"The repository where the issue resides (i.e. quarkusio/quarkus)\")\n+\tprivate String issueRepo;\n+\n+\t@Option(names = \"issueNumber\", description = \"The issue to update\")\n+\tprivate Integer issueNumber;\n+\n+\t@Option(names = \"thisRepo\", description = \"The repository for which we are reporting the CI status\")\n+\tprivate String thisRepo;\n+\n+\t@Option(names = \"runId\", description = \"The ID of the Github Action run for  which we are reporting the CI status\")\n+\tprivate String runId;\n+\n+\t@Override\n+\tpublic void run() {\n+\t\ttry {\n+\t\t\tfinal boolean succeed = \"success\".equalsIgnoreCase(status);\n+\t\t\tif (\"cancelled\".equalsIgnoreCase(status)) {\n+\t\t\t\tSystem.out.println(\"Job status is `cancelled` - exiting\");\n+\t\t\t\tSystem.exit(0);\n+\t\t\t}\n+\n+\t\t\tSystem.out.println(String.format(\"The CI build had status %s.\", status));\n+\n+\t\t\tfinal GitHub github = new GitHubBuilder().withOAuthToken(token).build();\n+\t\t\tfinal GHRepository repository = github.getRepository(issueRepo);\n+\n+\t\t\tfinal GHIssue issue = repository.getIssue(issueNumber);\n+\t\t\tif (issue == null) {\n+\t\t\t\tSystem.out.println(String.format(\"Unable to find the issue %s in project %s\", issueNumber, issueRepo));\n+\t\t\t\tSystem.exit(-1);\n+\t\t\t} else {\n+\t\t\t\tSystem.out.println(String.format(\"Report issue found: %s - %s\", issue.getTitle(), issue.getHtmlUrl().toString()));\n+\t\t\t\tSystem.out.println(String.format(\"The issue is currently %s\", issue.getState().toString()));\n+\t\t\t}\n+\n+\t\t\tif (succeed) {\n+\t\t\t\tif (issue != null  && isOpen(issue)) {\n+\t\t\t\t\t// close issue with a comment\n+\t\t\t\t\tfinal GHIssueComment comment = issue.comment(String.format(\"Build fixed:\\n* Link to latest CI run: https://github.com/%s/actions/runs/%s\", thisRepo, runId));\n+\t\t\t\t\tissue.close();\n+\t\t\t\t\tSystem.out.println(String.format(\"Comment added on issue %s - %s, the issue has also been closed\", issue.getHtmlUrl().toString(), comment.getHtmlUrl().toString()));\n+\t\t\t\t} else {\n+\t\t\t\t\tSystem.out.println(\"Nothing to do - the build passed and the issue is already closed\");\n+\t\t\t\t}\n+\t\t\t} else  {\n+\t\t\t\tif (isOpen(issue)) {\n+\t\t\t\t\tfinal GHIssueComment comment = issue.comment(String.format(\"The build is still failing:\\n* Link to latest CI run: https://github.com/%s/actions/runs/%s\", thisRepo, runId));\n+\t\t\t\t\tSystem.out.println(String.format(\"Comment added on issue %s - %s\", issue.getHtmlUrl().toString(), comment.getHtmlUrl().toString()));\n+\t\t\t\t} else {\n+\t\t\t\t\tissue.reopen();\n+\t\t\t\t\tfinal GHIssueComment comment = issue.comment(String.format(\"Unfortunately, the build failed:\\n* Link to latest CI run: https://github.com/%s/actions/runs/%s\", thisRepo, runId));\n+\t\t\t\t\tSystem.out.println(String.format(\"Comment added on issue %s - %s, the issue has been re-opened\", issue.getHtmlUrl().toString(), comment.getHtmlUrl().toString()));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tcatch (IOException e) {\n+\t\t\tthrow new UncheckedIOException(e);\n+\t\t}\n+\t}\n+\n+\tprivate static boolean isOpen(GHIssue issue) {\n+\t\treturn (issue.getState() == GHIssueState.OPEN);\n+\t}\n+\n+\t// this example implements Callable, so parsing, error handling and handling user\n+\t// requests for usage help or version help can be done with one line of code.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI5MjcwMw=="}, "originalCommit": {"oid": "e6292ae6742de3034648726cd4d3acfd4474de36"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDkzNjE4OnYy", "diffSide": "RIGHT", "path": ".github/NativeBuildReport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozMzowNVrOGFZfaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzo0MzoxOVrOGFZ3wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxMzcwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tdescription = \"Takes care of updating the an issue depending on the status of the build\")\n          \n          \n            \n            \t\tdescription = \"Takes care of updating an issue depending on the status of the build\")", "url": "https://github.com/quarkusio/quarkus/pull/8572#discussion_r408313705", "createdAt": "2020-04-14T17:33:05Z", "author": {"login": "machi1990"}, "path": ".github/NativeBuildReport.java", "diffHunk": "@@ -0,0 +1,95 @@\n+//usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n+\n+//DEPS org.kohsuke:github-api:1.101\n+//DEPS info.picocli:picocli:4.2.0\n+\n+import org.kohsuke.github.*;\n+import picocli.CommandLine;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Option;\n+import picocli.CommandLine.Parameters;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.concurrent.TimeUnit;\n+\n+@Command(name = \"report\", mixinStandardHelpOptions = true,\n+\t\tdescription = \"Takes care of updating the an issue depending on the status of the build\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7fdfc0d0b3459e8264ac04994065272d4463211"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxOTkzNw==", "bodyText": "Updated, thanks", "url": "https://github.com/quarkusio/quarkus/pull/8572#discussion_r408319937", "createdAt": "2020-04-14T17:43:19Z", "author": {"login": "geoand"}, "path": ".github/NativeBuildReport.java", "diffHunk": "@@ -0,0 +1,95 @@\n+//usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n+\n+//DEPS org.kohsuke:github-api:1.101\n+//DEPS info.picocli:picocli:4.2.0\n+\n+import org.kohsuke.github.*;\n+import picocli.CommandLine;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Option;\n+import picocli.CommandLine.Parameters;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.concurrent.TimeUnit;\n+\n+@Command(name = \"report\", mixinStandardHelpOptions = true,\n+\t\tdescription = \"Takes care of updating the an issue depending on the status of the build\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxMzcwNQ=="}, "originalCommit": {"oid": "c7fdfc0d0b3459e8264ac04994065272d4463211"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3501, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}