{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNDgxNTMy", "number": 8934, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzozODo0OVrOD3gr7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODozMzozN1rOD3h0DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTMzODA2OnYy", "diffSide": "RIGHT", "path": "extensions/liquibase/deployment/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzozODo0OVrOGNzIFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzozODo0OVrOGNzIFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEyMjMyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    <id>extract-liqibase-for-indexing</id>\n          \n          \n            \n                                    <id>extract-liquibase-for-indexing</id>", "url": "https://github.com/quarkusio/quarkus/pull/8934#discussion_r417122325", "createdAt": "2020-04-29T07:38:49Z", "author": {"login": "gsmet"}, "path": "extensions/liquibase/deployment/pom.xml", "diffHunk": "@@ -64,6 +64,72 @@\n                     </annotationProcessorPaths>\n                 </configuration>\n             </plugin>\n+\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-dependency-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>extract-liqibase-for-indexing</id>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbea372e749bf6c55043fe02dc85c66f958a0996"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTMzOTc5OnYy", "diffSide": "RIGHT", "path": "extensions/liquibase/deployment/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzozOToyMlrOGNzJLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzozOToyMlrOGNzJLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEyMjYwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    <id>copy-liqibase-index</id>\n          \n          \n            \n                                    <id>copy-liquibase-index</id>", "url": "https://github.com/quarkusio/quarkus/pull/8934#discussion_r417122604", "createdAt": "2020-04-29T07:39:22Z", "author": {"login": "gsmet"}, "path": "extensions/liquibase/deployment/pom.xml", "diffHunk": "@@ -64,6 +64,72 @@\n                     </annotationProcessorPaths>\n                 </configuration>\n             </plugin>\n+\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-dependency-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>extract-liqibase-for-indexing</id>\n+                        <phase>generate-sources</phase>\n+                        <goals>\n+                            <goal>unpack-dependencies</goal>\n+                        </goals>\n+                        <configuration>\n+                            <includeGroupIds>org.liquibase</includeGroupIds>\n+                            <outputDirectory>${project.build.directory}/liquibase-extracted</outputDirectory>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+\n+            <plugin>\n+                <groupId>org.jboss.jandex</groupId>\n+                <artifactId>jandex-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>make-index</id>\n+                        <goals>\n+                            <goal>jandex</goal>\n+                        </goals>\n+                        <phase>process-sources</phase>\n+                        <configuration>\n+                            <indexName>liquibase.idx</indexName>\n+                            <processDefaultFileSet>false</processDefaultFileSet>\n+                            <fileSets>\n+                                <fileSet>\n+                                    <directory>${project.build.directory}/liquibase-extracted</directory>\n+                                </fileSet>\n+                            </fileSets>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+\n+            <plugin>\n+                <artifactId>maven-resources-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>copy-liqibase-index</id>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbea372e749bf6c55043fe02dc85c66f958a0996"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTM0NTIyOnYy", "diffSide": "RIGHT", "path": "extensions/liquibase/deployment/src/main/java/io/quarkus/liquibase/LiquibaseProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzo0MTowNlrOGNzMjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzo0MTowNlrOGNzMjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEyMzQ2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        //if we known what DB types are in use we limit them\n          \n          \n            \n                        //if we know what DB types are in use we limit them", "url": "https://github.com/quarkusio/quarkus/pull/8934#discussion_r417123468", "createdAt": "2020-04-29T07:41:06Z", "author": {"login": "gsmet"}, "path": "extensions/liquibase/deployment/src/main/java/io/quarkus/liquibase/LiquibaseProcessor.java", "diffHunk": "@@ -55,11 +74,92 @@\n \n     LiquibaseBuildTimeConfig liquibaseBuildConfig;\n \n+    private static final Map<String, String> KIND_TO_IMPL;\n+\n+    static {\n+        Map<String, String> knownKindsToImpl = new HashMap<>();\n+        knownKindsToImpl.put(DatabaseKind.DERBY, DerbyDatabase.class.getName());\n+        knownKindsToImpl.put(DatabaseKind.H2, H2Database.class.getName());\n+        knownKindsToImpl.put(DatabaseKind.MARIADB, MariaDBDatabase.class.getName());\n+        knownKindsToImpl.put(DatabaseKind.MSSQL, MSSQLDatabase.class.getName());\n+        knownKindsToImpl.put(DatabaseKind.MYSQL, MySQLDatabase.class.getName());\n+        knownKindsToImpl.put(DatabaseKind.POSTGRESQL, PostgresDatabase.class.getName());\n+        KIND_TO_IMPL = Collections.unmodifiableMap(knownKindsToImpl);\n+    }\n+\n     @BuildStep\n     CapabilityBuildItem capability() {\n         return new CapabilityBuildItem(Capabilities.LIQUIBASE);\n     }\n \n+    /**\n+     * The default service loader is super slow\n+     *\n+     * As part of the extension build we index liquibase, then we use this index to find all implementations of services\n+     */\n+    @BuildStep(onlyIfNot = NativeBuild.class)\n+    @Record(STATIC_INIT)\n+    public void fastServiceLoader(LiquibaseRecorder recorder,\n+            List<JdbcDataSourceBuildItem> jdbcDataSourceBuildItems) throws IOException {\n+        DotName liquibaseServiceName = DotName.createSimple(LiquibaseService.class.getName());\n+        try (InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"META-INF/liquibase.idx\")) {\n+            IndexReader reader = new IndexReader(in);\n+            Index index = reader.read();\n+            Map<String, List<String>> services = new HashMap<>();\n+            for (Class<?> c : Arrays.asList(liquibase.diff.compare.DatabaseObjectComparator.class,\n+                    liquibase.parser.NamespaceDetails.class,\n+                    liquibase.precondition.Precondition.class,\n+                    liquibase.database.Database.class,\n+                    liquibase.parser.ChangeLogParser.class,\n+                    liquibase.change.Change.class,\n+                    liquibase.snapshot.SnapshotGenerator.class,\n+                    liquibase.changelog.ChangeLogHistoryService.class,\n+                    liquibase.datatype.LiquibaseDataType.class,\n+                    liquibase.executor.Executor.class,\n+                    liquibase.lockservice.LockService.class,\n+                    liquibase.sqlgenerator.SqlGenerator.class,\n+                    liquibase.license.LicenseService.class)) {\n+                List<String> impls = new ArrayList<>();\n+                services.put(c.getName(), impls);\n+                Set<ClassInfo> classes = new HashSet<>();\n+                if (c.isInterface()) {\n+                    classes.addAll(index.getAllKnownImplementors(DotName.createSimple(c.getName())));\n+                } else {\n+                    classes.addAll(index.getAllKnownSubclasses(DotName.createSimple(c.getName())));\n+                }\n+                for (ClassInfo found : classes) {\n+                    if (Modifier.isAbstract(found.flags()) ||\n+                            Modifier.isInterface(found.flags()) ||\n+                            !found.hasNoArgsConstructor() ||\n+                            !Modifier.isPublic(found.flags())) {\n+                        continue;\n+                    }\n+                    AnnotationInstance annotationInstance = found.classAnnotation(liquibaseServiceName);\n+                    if (annotationInstance == null || !annotationInstance.value(\"skip\").asBoolean()) {\n+                        impls.add(found.name().toString());\n+                    }\n+                }\n+            }\n+            //if we known what DB types are in use we limit them", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbea372e749bf6c55043fe02dc85c66f958a0996"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTQxNjUxOnYy", "diffSide": "RIGHT", "path": "extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseRecorder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODowMTo0N1rOGNz4EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODowMTo0N1rOGNz4EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzNDYwOQ==", "bodyText": "liquibase", "url": "https://github.com/quarkusio/quarkus/pull/8934#discussion_r417134609", "createdAt": "2020-04-29T08:01:47Z", "author": {"login": "fbricon"}, "path": "extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseRecorder.java", "diffHunk": "@@ -100,4 +107,28 @@ private void validate(BeanContainer container, AnnotationLiteral<? extends Annot\n             liquibase.validate();\n         }\n     }\n+\n+    public void setJvmServiceImplementations(Map<String, List<String>> services) {\n+        ServiceLocator.setInstance(new ServiceLocator() {\n+\n+            @Override\n+            public <T> Class<? extends T>[] findClasses(Class<T> requiredInterface) throws ServiceNotFoundException {\n+                List<String> found = services.get(requiredInterface.getName());\n+                if (found == null) {\n+                    log.warnf(\"Failed to find pre-indexed service %s, falling back to slow classpath scanning\",\n+                            requiredInterface);\n+                    return super.findClasses(requiredInterface);\n+                }\n+                List<Class<? extends T>> ret = new ArrayList<>();\n+                for (String i : found) {\n+                    try {\n+                        ret.add((Class<? extends T>) Class.forName(i, false, Thread.currentThread().getContextClassLoader()));\n+                    } catch (ClassNotFoundException e) {\n+                        log.error(\"Failed to load liqibase service\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbea372e749bf6c55043fe02dc85c66f958a0996"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTUyMjY4OnYy", "diffSide": "RIGHT", "path": "extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseRecorder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODozMzozN1rOGN06Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODozMzozN1rOGN06Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1MTU3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    log.error(\"Failed to load liqibase service\", e);\n          \n          \n            \n                                    log.error(\"Failed to load Liquibase service\", e);", "url": "https://github.com/quarkusio/quarkus/pull/8934#discussion_r417151579", "createdAt": "2020-04-29T08:33:37Z", "author": {"login": "gsmet"}, "path": "extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseRecorder.java", "diffHunk": "@@ -100,4 +107,28 @@ private void validate(BeanContainer container, AnnotationLiteral<? extends Annot\n             liquibase.validate();\n         }\n     }\n+\n+    public void setJvmServiceImplementations(Map<String, List<String>> services) {\n+        ServiceLocator.setInstance(new ServiceLocator() {\n+\n+            @Override\n+            public <T> Class<? extends T>[] findClasses(Class<T> requiredInterface) throws ServiceNotFoundException {\n+                List<String> found = services.get(requiredInterface.getName());\n+                if (found == null) {\n+                    log.warnf(\"Failed to find pre-indexed service %s, falling back to slow classpath scanning\",\n+                            requiredInterface);\n+                    return super.findClasses(requiredInterface);\n+                }\n+                List<Class<? extends T>> ret = new ArrayList<>();\n+                for (String i : found) {\n+                    try {\n+                        ret.add((Class<? extends T>) Class.forName(i, false, Thread.currentThread().getContextClassLoader()));\n+                    } catch (ClassNotFoundException e) {\n+                        log.error(\"Failed to load liqibase service\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbea372e749bf6c55043fe02dc85c66f958a0996"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3320, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}