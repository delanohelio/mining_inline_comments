{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4NDc4NzU0", "number": 12888, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMToxNjoyMlrOEyTLSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMToxNjoyMlrOEyTLSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTc4NDQwOnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMToxNjoyMlrOHo3AWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMjo1ODoxMVrOHo62yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYwNjI5OQ==", "bodyText": "Why have you done this? You don't need a special interface and implementation for this, just run the code directly inside getChallenge", "url": "https://github.com/quarkusio/quarkus/pull/12888#discussion_r512606299", "createdAt": "2020-10-27T11:16:22Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -600,4 +621,45 @@ static String getCookieSuffix(String tenantId) {\n         return !\"Default\".equals(tenantId) ? \"_\" + tenantId : \"\";\n     }\n \n+    interface AuthenticationChallegeContext {\n+\n+        Uni<ChallengeData> runBlocking(Supplier<ChallengeData> function);\n+\n+    }\n+\n+    private final AuthenticationChallegeContext blockingChallengeContext = new AuthenticationChallegeContext() {\n+        @Override\n+        public Uni<ChallengeData> runBlocking(Supplier<ChallengeData> function) {\n+            return Uni.createFrom().deferred(new Supplier<Uni<? extends ChallengeData>>() {\n+                @Override\n+                public Uni<ChallengeData> get() {\n+                    if (BlockingOperationControl.isBlockingAllowed()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d6219c97cf6d3c5b0e01d6631d58dc6cd986abf"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYxMzU2NA==", "bodyText": "@stuartwdouglas Yeah, I just copied and kept it like that in case an idea of passing that interface as getChallenge parameter, similarly to how it is done for the identity provider, will be considered, but indeed, for now it is redundant so I'll simplify", "url": "https://github.com/quarkusio/quarkus/pull/12888#discussion_r512613564", "createdAt": "2020-10-27T11:29:19Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -600,4 +621,45 @@ static String getCookieSuffix(String tenantId) {\n         return !\"Default\".equals(tenantId) ? \"_\" + tenantId : \"\";\n     }\n \n+    interface AuthenticationChallegeContext {\n+\n+        Uni<ChallengeData> runBlocking(Supplier<ChallengeData> function);\n+\n+    }\n+\n+    private final AuthenticationChallegeContext blockingChallengeContext = new AuthenticationChallegeContext() {\n+        @Override\n+        public Uni<ChallengeData> runBlocking(Supplier<ChallengeData> function) {\n+            return Uni.createFrom().deferred(new Supplier<Uni<? extends ChallengeData>>() {\n+                @Override\n+                public Uni<ChallengeData> get() {\n+                    if (BlockingOperationControl.isBlockingAllowed()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYwNjI5OQ=="}, "originalCommit": {"oid": "5d6219c97cf6d3c5b0e01d6631d58dc6cd986abf"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY2OTM4NA==", "bodyText": "@stuartwdouglas it should be better now, have a look please", "url": "https://github.com/quarkusio/quarkus/pull/12888#discussion_r512669384", "createdAt": "2020-10-27T12:58:11Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -600,4 +621,45 @@ static String getCookieSuffix(String tenantId) {\n         return !\"Default\".equals(tenantId) ? \"_\" + tenantId : \"\";\n     }\n \n+    interface AuthenticationChallegeContext {\n+\n+        Uni<ChallengeData> runBlocking(Supplier<ChallengeData> function);\n+\n+    }\n+\n+    private final AuthenticationChallegeContext blockingChallengeContext = new AuthenticationChallegeContext() {\n+        @Override\n+        public Uni<ChallengeData> runBlocking(Supplier<ChallengeData> function) {\n+            return Uni.createFrom().deferred(new Supplier<Uni<? extends ChallengeData>>() {\n+                @Override\n+                public Uni<ChallengeData> get() {\n+                    if (BlockingOperationControl.isBlockingAllowed()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYwNjI5OQ=="}, "originalCommit": {"oid": "5d6219c97cf6d3c5b0e01d6631d58dc6cd986abf"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4231, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}