{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxMjg4Nzc1", "number": 11506, "title": "Hibernate Validator: status 400 instead of 500 if JAX-RS method is defined in interface", "bodyText": "Follow up to #11429, fixes #11341 (comment).\nSee also: #11429 (comment)\nI basically just gather all JAX-RS methods (whether or not defined in interfaces).\nThis is my first time working with the Quarkus deployment framework so please bear with me in case I did something stupid or inefficient. \ud83d\ude09", "createdAt": "2020-08-20T23:21:53Z", "url": "https://github.com/quarkusio/quarkus/pull/11506", "merged": true, "mergeCommit": {"oid": "c5365d4b13886a9c008c1104e55326b632055cdc"}, "closed": true, "closedAt": "2020-08-25T08:30:17Z", "author": {"login": "famod"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdBAXNxgFqTQ3MjI4OTM4NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCS8uPAFqTQ3NDI1MzgyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMjg5Mzg0", "url": "https://github.com/quarkusio/quarkus/pull/11506#pullrequestreview-472289384", "createdAt": "2020-08-21T08:08:39Z", "commit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODowODo0MFrOHEhU8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODoxNjowNVrOHEhuvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwMjM4Nw==", "bodyText": "Please use standard imperative code. This is far less readable.", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474502387", "createdAt": "2020-08-21T08:08:40Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/MethodValidatedAnnotationsTransformer.java", "diffHunk": "@@ -96,11 +81,10 @@ private boolean requiresValidation(MethodInfo method) {\n     }\n \n     private boolean isJaxrsMethod(MethodInfo method) {\n-        for (DotName jaxrsMethodAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n-            if (method.hasAnnotation(jaxrsMethodAnnotation)) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        ClassInfo clazz = method.declaringClass();\n+        return Stream.concat(Stream.of(clazz.name()), clazz.interfaceNames().stream())\n+                .anyMatch(dotName -> Optional.ofNullable(jaxRsMethods.get(dotName))\n+                        .map(methodNames -> methodNames.contains(method.name()))\n+                        .orElse(false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwMzc5MA==", "bodyText": "I think it would be better conceptually to pass the full list to the method rather than building it inside.", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474503790", "createdAt": "2020-08-21T08:10:17Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java", "diffHunk": "@@ -327,6 +339,34 @@ private static void contributeMethodsWithInheritedValidation(Map<DotName, Set<St\n         }\n     }\n \n+    private static Map<DotName, Set<String>> gatherJaxRsMethods(\n+            List<AdditionalJaxRsResourceMethodAnnotationsBuildItem> additionalJaxRsResourceMethodAnnotations,\n+            IndexView indexView) {\n+        Map<DotName, Set<String>> jaxRsMethods = new HashMap<>();\n+\n+        Collection<DotName> effectiveJaxRsMethodDefiningAnnotations = new ArrayList<>(\n+                JAXRS_METHOD_ANNOTATIONS.length + additionalJaxRsResourceMethodAnnotations.size());\n+        effectiveJaxRsMethodDefiningAnnotations.addAll(Arrays.asList(JAXRS_METHOD_ANNOTATIONS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNDE4MQ==", "bodyText": "You also need to check that the kind of the target is a method.", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474504181", "createdAt": "2020-08-21T08:10:42Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java", "diffHunk": "@@ -327,6 +339,34 @@ private static void contributeMethodsWithInheritedValidation(Map<DotName, Set<St\n         }\n     }\n \n+    private static Map<DotName, Set<String>> gatherJaxRsMethods(\n+            List<AdditionalJaxRsResourceMethodAnnotationsBuildItem> additionalJaxRsResourceMethodAnnotations,\n+            IndexView indexView) {\n+        Map<DotName, Set<String>> jaxRsMethods = new HashMap<>();\n+\n+        Collection<DotName> effectiveJaxRsMethodDefiningAnnotations = new ArrayList<>(\n+                JAXRS_METHOD_ANNOTATIONS.length + additionalJaxRsResourceMethodAnnotations.size());\n+        effectiveJaxRsMethodDefiningAnnotations.addAll(Arrays.asList(JAXRS_METHOD_ANNOTATIONS));\n+        for (AdditionalJaxRsResourceMethodAnnotationsBuildItem additionalJaxRsResourceMethodAnnotation : additionalJaxRsResourceMethodAnnotations) {\n+            effectiveJaxRsMethodDefiningAnnotations.addAll(additionalJaxRsResourceMethodAnnotation.getAnnotationClasses());\n+        }\n+\n+        for (DotName jaxRsAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n+            Collection<AnnotationInstance> annotationInstances = indexView.getAnnotations(jaxRsAnnotation);\n+\n+            if (annotationInstances.isEmpty()) {\n+                continue;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNTk3MQ==", "bodyText": "The name is not sufficient, you need to build the signature.", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474505971", "createdAt": "2020-08-21T08:12:44Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java", "diffHunk": "@@ -327,6 +339,34 @@ private static void contributeMethodsWithInheritedValidation(Map<DotName, Set<St\n         }\n     }\n \n+    private static Map<DotName, Set<String>> gatherJaxRsMethods(\n+            List<AdditionalJaxRsResourceMethodAnnotationsBuildItem> additionalJaxRsResourceMethodAnnotations,\n+            IndexView indexView) {\n+        Map<DotName, Set<String>> jaxRsMethods = new HashMap<>();\n+\n+        Collection<DotName> effectiveJaxRsMethodDefiningAnnotations = new ArrayList<>(\n+                JAXRS_METHOD_ANNOTATIONS.length + additionalJaxRsResourceMethodAnnotations.size());\n+        effectiveJaxRsMethodDefiningAnnotations.addAll(Arrays.asList(JAXRS_METHOD_ANNOTATIONS));\n+        for (AdditionalJaxRsResourceMethodAnnotationsBuildItem additionalJaxRsResourceMethodAnnotation : additionalJaxRsResourceMethodAnnotations) {\n+            effectiveJaxRsMethodDefiningAnnotations.addAll(additionalJaxRsResourceMethodAnnotation.getAnnotationClasses());\n+        }\n+\n+        for (DotName jaxRsAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n+            Collection<AnnotationInstance> annotationInstances = indexView.getAnnotations(jaxRsAnnotation);\n+\n+            if (annotationInstances.isEmpty()) {\n+                continue;\n+            }\n+\n+            for (AnnotationInstance annotation : annotationInstances) {\n+                MethodInfo method = annotation.target().asMethod();\n+                jaxRsMethods.computeIfAbsent(method.declaringClass().name(), k -> new HashSet<String>())\n+                        .add(method.name().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNjgwMQ==", "bodyText": "Same here, you need to use the signature.", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474506801", "createdAt": "2020-08-21T08:13:40Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/MethodValidatedAnnotationsTransformer.java", "diffHunk": "@@ -96,11 +81,10 @@ private boolean requiresValidation(MethodInfo method) {\n     }\n \n     private boolean isJaxrsMethod(MethodInfo method) {\n-        for (DotName jaxrsMethodAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n-            if (method.hasAnnotation(jaxrsMethodAnnotation)) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        ClassInfo clazz = method.declaringClass();\n+        return Stream.concat(Stream.of(clazz.name()), clazz.interfaceNames().stream())\n+                .anyMatch(dotName -> Optional.ofNullable(jaxRsMethods.get(dotName))\n+                        .map(methodNames -> methodNames.contains(method.name()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwNzUyMA==", "bodyText": "I have another patch moving ResteasyDotNames to a common SPI so we will be able to use the constants there rather than have a copy.", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474507520", "createdAt": "2020-08-21T08:14:29Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/HibernateValidatorProcessor.java", "diffHunk": "@@ -92,6 +94,16 @@\n \n     private static final DotName REPEATABLE = DotName.createSimple(Repeatable.class.getName());\n \n+    private static final DotName[] JAXRS_METHOD_ANNOTATIONS = {\n+            DotName.createSimple(\"javax.ws.rs.GET\"),\n+            DotName.createSimple(\"javax.ws.rs.HEAD\"),\n+            DotName.createSimple(\"javax.ws.rs.DELETE\"),\n+            DotName.createSimple(\"javax.ws.rs.OPTIONS\"),\n+            DotName.createSimple(\"javax.ws.rs.PATCH\"),\n+            DotName.createSimple(\"javax.ws.rs.POST\"),\n+            DotName.createSimple(\"javax.ws.rs.PUT\"),\n+    };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUwODk4OA==", "bodyText": "Don't you also need to consider the superclasses?", "url": "https://github.com/quarkusio/quarkus/pull/11506#discussion_r474508988", "createdAt": "2020-08-21T08:16:05Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-validator/deployment/src/main/java/io/quarkus/hibernate/validator/deployment/MethodValidatedAnnotationsTransformer.java", "diffHunk": "@@ -96,11 +81,10 @@ private boolean requiresValidation(MethodInfo method) {\n     }\n \n     private boolean isJaxrsMethod(MethodInfo method) {\n-        for (DotName jaxrsMethodAnnotation : effectiveJaxRsMethodDefiningAnnotations) {\n-            if (method.hasAnnotation(jaxrsMethodAnnotation)) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        ClassInfo clazz = method.declaringClass();\n+        return Stream.concat(Stream.of(clazz.name()), clazz.interfaceNames().stream())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc95482166927b0615af06892eb6bac0c629bb45"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ea1124d50641fe84960796d27e8a8c0d35d736b", "author": {"user": {"login": "famod", "name": "Falko Modler"}}, "url": "https://github.com/quarkusio/quarkus/commit/2ea1124d50641fe84960796d27e8a8c0d35d736b", "committedDate": "2020-08-24T11:11:19Z", "message": "Hibernate Validator: status 400 instead of 500 if JAX-RS method is defined in interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b49249e02c2929809d7acdbceb02bfcb30c503ea", "author": {"user": {"login": "famod", "name": "Falko Modler"}}, "url": "https://github.com/quarkusio/quarkus/commit/b49249e02c2929809d7acdbceb02bfcb30c503ea", "committedDate": "2020-08-24T11:11:19Z", "message": "Use ResteasyDotNames in hibernate-validator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28bc0808ff6c43a611d808a2330d14a7849609d1", "author": {"user": {"login": "gsmet", "name": "Guillaume Smet"}}, "url": "https://github.com/quarkusio/quarkus/commit/28bc0808ff6c43a611d808a2330d14a7849609d1", "committedDate": "2020-08-24T11:11:19Z", "message": "Revert \"Disable the JDK 14 build for now as it's totally unstable\"\n\nThis reverts commit df381123c04c1c060e88974c93d4927f8602f0df."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MjUzODI3", "url": "https://github.com/quarkusio/quarkus/pull/11506#pullrequestreview-474253827", "createdAt": "2020-08-25T08:29:42Z", "commit": {"oid": "28bc0808ff6c43a611d808a2330d14a7849609d1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 854, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}