{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2OTc5OTYw", "number": 11772, "title": "Support multitenancy with multiple persistence units ", "bodyText": "I have to add more tests to fully test it but given the timeframe, it would be nice if @geoand and @machi1990 could have a look to what I did.\n/cc @michael-schnell\nMichael, I have some questions for you, could you please ping me when you're available? Thanks!", "createdAt": "2020-09-01T10:24:28Z", "url": "https://github.com/quarkusio/quarkus/pull/11772", "merged": true, "mergeCommit": {"oid": "2466510a8d786b1ac9d76ae42c97874e3e23b17d"}, "closed": true, "closedAt": "2020-09-02T08:06:08Z", "author": {"login": "gsmet"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEk3BmgFqTQ3OTYwOTI1OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEn7UGgBqjM3MTUxMTAzNzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5NjA5MjU4", "url": "https://github.com/quarkusio/quarkus/pull/11772#pullrequestreview-479609258", "createdAt": "2020-09-01T10:29:36Z", "commit": {"oid": "4a6421fbec78e8cdbbf7e5935ba5c8359d40a02d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDoyOTozNlrOHKwPkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDoyOTozNlrOHKwPkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAzODIyNQ==", "bodyText": "@michael-schnell @Sanne I'm not entirely sure this is useful now that we can define a datasource for a PU. Or in the case of the schema do you want to use another datasource when the tenant is defined?", "url": "https://github.com/quarkusio/quarkus/pull/11772#discussion_r481038225", "createdAt": "2020-09-01T10:29:36Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmConfigPersistenceUnit.java", "diffHunk": "@@ -149,16 +149,40 @@\n     @ConfigItem(defaultValue = \"true\")\n     public boolean secondLevelCachingEnabled;\n \n+    /**\n+     * Defines the method for multi-tenancy (DATABASE, NONE, SCHEMA). The complete list of allowed values is available in the\n+     * https://docs.jboss.org/hibernate/stable/orm/javadocs/org/hibernate/MultiTenancyStrategy.html[Hibernate ORM JavaDoc].\n+     * The type DISCRIMINATOR is currently not supported. The default value is NONE (no multi-tenancy).\n+     *\n+     * @asciidoclet\n+     */\n+    @ConfigItem\n+    public Optional<String> multitenant;\n+\n+    /**\n+     * Defines the name of the datasource to use in case of SCHEMA approach. The datasource of the persistence unit will be used\n+     * if not set.\n+     */\n+    @ConfigItem\n+    public Optional<String> multitenantSchemaDatasource;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a6421fbec78e8cdbbf7e5935ba5c8359d40a02d"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5NjA5ODY3", "url": "https://github.com/quarkusio/quarkus/pull/11772#pullrequestreview-479609867", "createdAt": "2020-09-01T10:30:18Z", "commit": {"oid": "4a6421fbec78e8cdbbf7e5935ba5c8359d40a02d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDozMDoxOFrOHKwQ9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDozMDoxOFrOHKwQ9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAzODU4Mw==", "bodyText": "@michael-schnell @Sanne I'm not sure I understand the need to somehow copy the existing datasource?", "url": "https://github.com/quarkusio/quarkus/pull/11772#discussion_r481038583", "createdAt": "2020-09-01T10:30:18Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/tenant/DataSourceTenantConnectionResolver.java", "diffHunk": "@@ -25,73 +23,90 @@\n  * @author Michael Schnell\n  *\n  */\n-@DefaultBean\n-@ApplicationScoped\n public class DataSourceTenantConnectionResolver implements TenantConnectionResolver {\n \n     private static final Logger LOG = Logger.getLogger(DataSourceTenantConnectionResolver.class);\n \n-    @Inject\n-    JPAConfig jpaConfig;\n+    private String persistenceUnitName;\n+\n+    private String dataSourceName;\n+\n+    private MultiTenancyStrategy multiTenancyStrategy;\n+\n+    private String multiTenancySchemaDataSourceName;\n+\n+    public DataSourceTenantConnectionResolver() {\n+    }\n+\n+    public DataSourceTenantConnectionResolver(String persistenceUnitName, String dataSourceName,\n+            MultiTenancyStrategy multiTenancyStrategy, String multiTenancySchemaDataSourceName) {\n+        this.persistenceUnitName = persistenceUnitName;\n+        this.dataSourceName = dataSourceName;\n+        this.multiTenancyStrategy = multiTenancyStrategy;\n+        this.multiTenancySchemaDataSourceName = multiTenancySchemaDataSourceName;\n+    }\n \n     @Override\n     public ConnectionProvider resolve(String tenantId) {\n+        LOG.debugv(\"resolve((persistenceUnitName={0}, tenantIdentifier={1})\", persistenceUnitName, tenantId);\n+        LOG.debugv(\"multitenancy strategy: {0}\", multiTenancyStrategy);\n \n-        LOG.debugv(\"resolve({0})\", tenantId);\n-\n-        final MultiTenancyStrategy strategy = jpaConfig.getMultiTenancyStrategy();\n-        LOG.debugv(\"multitenancy strategy: {0}\", strategy);\n-        AgroalDataSource dataSource = tenantDataSource(jpaConfig, tenantId, strategy);\n+        AgroalDataSource dataSource = tenantDataSource(dataSourceName, tenantId, multiTenancyStrategy,\n+                multiTenancySchemaDataSourceName);\n         if (dataSource == null) {\n-            throw new IllegalStateException(\"No instance of datasource found for tenant: \" + tenantId);\n+            throw new IllegalStateException(\n+                    String.format(\"No instance of datasource found for persistence unit '%1$s' and tenant '%2$s'\",\n+                            persistenceUnitName, tenantId));\n         }\n-        if (strategy == MultiTenancyStrategy.SCHEMA) {\n-            return new TenantConnectionProvider(tenantId, dataSource);\n+        if (multiTenancyStrategy == MultiTenancyStrategy.SCHEMA) {\n+            return new SchemaTenantConnectionProvider(tenantId, dataSource);\n         }\n         return new QuarkusConnectionProvider(dataSource);\n     }\n \n     /**\n      * Create a new data source from the given configuration.\n-     * \n+     *\n      * @param config Configuration to use.\n-     * \n+     *\n      * @return New data source instance.\n      */\n     private static AgroalDataSource createFrom(AgroalDataSourceConfiguration config) {\n         try {\n             return AgroalDataSource.from(config);\n         } catch (SQLException ex) {\n-            throw new IllegalStateException(\"Failed to create a new data source based on the default config\", ex);\n+            throw new IllegalStateException(\"Failed to create a new data source based on the existing datasource configuration\",\n+                    ex);\n         }\n     }\n \n-    /**\n-     * Returns either the default data source or the tenant specific one.\n-     * \n-     * @param tenantId Tenant identifier. The value is required (non-{@literal null}) in case of\n-     *        {@link MultiTenancyStrategy#DATABASE}.\n-     * @param strategy Current multitenancy strategy Required value that cannot be {@literal null}.\n-     * \n-     * @return Data source.\n-     */\n-    private static AgroalDataSource tenantDataSource(JPAConfig jpaConfig, String tenantId, MultiTenancyStrategy strategy) {\n+    private static AgroalDataSource tenantDataSource(String dataSourceName, String tenantId, MultiTenancyStrategy strategy,\n+            String multiTenancySchemaDataSourceName) {\n         if (strategy != MultiTenancyStrategy.SCHEMA) {\n             return Arc.container().instance(AgroalDataSource.class, new DataSource.DataSourceLiteral(tenantId)).get();\n         }\n-        String dataSourceName = jpaConfig.getMultiTenancySchemaDataSource();\n-        if (dataSourceName == null) {\n-            AgroalDataSource dataSource = Arc.container().instance(AgroalDataSource.class).get();\n+\n+        if (multiTenancySchemaDataSourceName == null) {\n+            AgroalDataSource dataSource = getDataSource(dataSourceName);\n             return createFrom(dataSource.getConfiguration());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a6421fbec78e8cdbbf7e5935ba5c8359d40a02d"}, "originalPosition": 117}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5NjE0OTY3", "url": "https://github.com/quarkusio/quarkus/pull/11772#pullrequestreview-479614967", "createdAt": "2020-09-01T10:37:03Z", "commit": {"oid": "4a6421fbec78e8cdbbf7e5935ba5c8359d40a02d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDozNzowM1rOHKweWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDozNzowM1rOHKweWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0MjAwOQ==", "bodyText": "Shouldn't this be \"name\"?", "url": "https://github.com/quarkusio/quarkus/pull/11772#discussion_r481042009", "createdAt": "2020-09-01T10:37:03Z", "author": {"login": "geoand"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -504,6 +504,39 @@ public void startPersistenceUnits(HibernateOrmRecorder recorder, BeanContainerBu\n         recorder.startAllPersistenceUnits(beanContainer.getValue());\n     }\n \n+    @BuildStep\n+    @Record(RUNTIME_INIT)\n+    public void multitenancy(HibernateOrmRecorder recorder,\n+            List<PersistenceUnitDescriptorBuildItem> persistenceUnitDescriptors,\n+            BuildProducer<SyntheticBeanBuildItem> syntheticBeans) {\n+        for (PersistenceUnitDescriptorBuildItem persistenceUnitDescriptor : persistenceUnitDescriptors) {\n+            if (persistenceUnitDescriptor.getMultiTenancyStrategy() == MultiTenancyStrategy.NONE) {\n+                continue;\n+            }\n+\n+            ExtendedBeanConfigurator configurator = SyntheticBeanBuildItem.configure(DataSourceTenantConnectionResolver.class)\n+                    .scope(ApplicationScoped.class)\n+                    .types(TenantConnectionResolver.class)\n+                    .setRuntimeInit()\n+                    .defaultBean()\n+                    .unremovable()\n+                    .supplier(recorder.dataSourceTenantConnectionResolver(persistenceUnitDescriptor.getPersistenceUnitName(),\n+                            persistenceUnitDescriptor.getDataSource(), persistenceUnitDescriptor.getMultiTenancyStrategy(),\n+                            persistenceUnitDescriptor.getMultiTenancySchemaDataSource()));\n+\n+            if (PersistenceUnitUtil.isDefaultPersistenceUnit(persistenceUnitDescriptor.getPersistenceUnitName())) {\n+                configurator.addQualifier(Default.class);\n+            } else {\n+                configurator.addQualifier().annotation(DotNames.NAMED)\n+                        .addValue(\"value\", persistenceUnitDescriptor.getPersistenceUnitName()).done();\n+                configurator.addQualifier().annotation(PersistenceUnit.class)\n+                        .addValue(\"value\", persistenceUnitDescriptor.getPersistenceUnitName()).done();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a6421fbec78e8cdbbf7e5935ba5c8359d40a02d"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5NzA3MDMz", "url": "https://github.com/quarkusio/quarkus/pull/11772#pullrequestreview-479707033", "createdAt": "2020-09-01T12:49:22Z", "commit": {"oid": "280aefaf5a2f700d9e50a85fc0b5d5152ca29610"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0af95bbf8fb7e4df4c9e13b04f324a7a07ebd0bc", "author": {"user": {"login": "gsmet", "name": "Guillaume Smet"}}, "url": "https://github.com/quarkusio/quarkus/commit/0af95bbf8fb7e4df4c9e13b04f324a7a07ebd0bc", "committedDate": "2020-09-01T14:03:43Z", "message": "Add elements missing in Hibernate ORM config isAnyPropertySet() methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aabda577e2b50efc77228192829bf3b93fa3af41", "author": {"user": {"login": "gsmet", "name": "Guillaume Smet"}}, "url": "https://github.com/quarkusio/quarkus/commit/aabda577e2b50efc77228192829bf3b93fa3af41", "committedDate": "2020-09-01T14:03:43Z", "message": "Support multitenancy with multiple persistence units"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "280aefaf5a2f700d9e50a85fc0b5d5152ca29610", "author": {"user": {"login": "gsmet", "name": "Guillaume Smet"}}, "url": "https://github.com/quarkusio/quarkus/commit/280aefaf5a2f700d9e50a85fc0b5d5152ca29610", "committedDate": "2020-09-01T12:47:14Z", "message": "Revert \"Fix for #11461\"\n\nThis reverts commit 2a5cd97f23302e987de357e5a53a4a215af4d223."}, "afterCommit": {"oid": "aabda577e2b50efc77228192829bf3b93fa3af41", "author": {"user": {"login": "gsmet", "name": "Guillaume Smet"}}, "url": "https://github.com/quarkusio/quarkus/commit/aabda577e2b50efc77228192829bf3b93fa3af41", "committedDate": "2020-09-01T14:03:43Z", "message": "Support multitenancy with multiple persistence units"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 655, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}