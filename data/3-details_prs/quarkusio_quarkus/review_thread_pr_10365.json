{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxODY3NzM3", "number": 10365, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODozMzoyNFrOEJ_iRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODozMzo1NFrOEJ_jLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTEzNjA2OnYy", "diffSide": "RIGHT", "path": "extensions/spring-cloud-config-client/runtime/src/main/java/io/quarkus/spring/cloud/config/client/runtime/DefaultSpringCloudConfigClientGateway.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODozMzoyNFrOGqxy5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOTowMjo0M1rOGqy-Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwOTIyMQ==", "bodyText": "Maybe we could have a message here?", "url": "https://github.com/quarkusio/quarkus/pull/10365#discussion_r447509221", "createdAt": "2020-06-30T08:33:24Z", "author": {"login": "gsmet"}, "path": "extensions/spring-cloud-config-client/runtime/src/main/java/io/quarkus/spring/cloud/config/client/runtime/DefaultSpringCloudConfigClientGateway.java", "diffHunk": "@@ -30,57 +34,74 @@\n             .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n \n     private final SpringCloudConfigClientConfig springCloudConfigClientConfig;\n-    private final String baseUri;\n+    private final URI baseURI;\n \n     public DefaultSpringCloudConfigClientGateway(SpringCloudConfigClientConfig springCloudConfigClientConfig) {\n         this.springCloudConfigClientConfig = springCloudConfigClientConfig;\n-        this.baseUri = determineBaseUri(springCloudConfigClientConfig);\n+        try {\n+            this.baseURI = determineBaseUri(springCloudConfigClientConfig);\n+        } catch (URISyntaxException e) {\n+            throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88de6da48b85b26a802f4f0ac3ce6cbd03f1a0b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUyODQ2Mw==", "bodyText": "Sure", "url": "https://github.com/quarkusio/quarkus/pull/10365#discussion_r447528463", "createdAt": "2020-06-30T09:02:43Z", "author": {"login": "geoand"}, "path": "extensions/spring-cloud-config-client/runtime/src/main/java/io/quarkus/spring/cloud/config/client/runtime/DefaultSpringCloudConfigClientGateway.java", "diffHunk": "@@ -30,57 +34,74 @@\n             .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n \n     private final SpringCloudConfigClientConfig springCloudConfigClientConfig;\n-    private final String baseUri;\n+    private final URI baseURI;\n \n     public DefaultSpringCloudConfigClientGateway(SpringCloudConfigClientConfig springCloudConfigClientConfig) {\n         this.springCloudConfigClientConfig = springCloudConfigClientConfig;\n-        this.baseUri = determineBaseUri(springCloudConfigClientConfig);\n+        try {\n+            this.baseURI = determineBaseUri(springCloudConfigClientConfig);\n+        } catch (URISyntaxException e) {\n+            throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwOTIyMQ=="}, "originalCommit": {"oid": "c88de6da48b85b26a802f4f0ac3ce6cbd03f1a0b"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTEzODM2OnYy", "diffSide": "RIGHT", "path": "extensions/spring-cloud-config-client/runtime/src/main/java/io/quarkus/spring/cloud/config/client/runtime/DefaultSpringCloudConfigClientGateway.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODozMzo1NFrOGqx0SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOTowMjozOVrOGqy98A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwOTU3Ng==", "bodyText": "I would make the message more explicit by adding some context (typically which extension or the full property name)?", "url": "https://github.com/quarkusio/quarkus/pull/10365#discussion_r447509576", "createdAt": "2020-06-30T08:33:54Z", "author": {"login": "gsmet"}, "path": "extensions/spring-cloud-config-client/runtime/src/main/java/io/quarkus/spring/cloud/config/client/runtime/DefaultSpringCloudConfigClientGateway.java", "diffHunk": "@@ -30,57 +34,74 @@\n             .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n \n     private final SpringCloudConfigClientConfig springCloudConfigClientConfig;\n-    private final String baseUri;\n+    private final URI baseURI;\n \n     public DefaultSpringCloudConfigClientGateway(SpringCloudConfigClientConfig springCloudConfigClientConfig) {\n         this.springCloudConfigClientConfig = springCloudConfigClientConfig;\n-        this.baseUri = determineBaseUri(springCloudConfigClientConfig);\n+        try {\n+            this.baseURI = determineBaseUri(springCloudConfigClientConfig);\n+        } catch (URISyntaxException e) {\n+            throw new RuntimeException(e);\n+        }\n     }\n \n-    private String determineBaseUri(SpringCloudConfigClientConfig springCloudConfigClientConfig) {\n-        String baseUri = springCloudConfigClientConfig.url;\n-        if (null == baseUri || baseUri.isEmpty()) {\n-            throw new IllegalArgumentException(\"baseUri cannot be empty\");\n+    private URI determineBaseUri(SpringCloudConfigClientConfig springCloudConfigClientConfig) throws URISyntaxException {\n+        String url = springCloudConfigClientConfig.url;\n+        if (null == url || url.isEmpty()) {\n+            throw new IllegalArgumentException(\"baseUrl cannot be empty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88de6da48b85b26a802f4f0ac3ce6cbd03f1a0b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUyODQzMg==", "bodyText": "Right, that makes sense", "url": "https://github.com/quarkusio/quarkus/pull/10365#discussion_r447528432", "createdAt": "2020-06-30T09:02:39Z", "author": {"login": "geoand"}, "path": "extensions/spring-cloud-config-client/runtime/src/main/java/io/quarkus/spring/cloud/config/client/runtime/DefaultSpringCloudConfigClientGateway.java", "diffHunk": "@@ -30,57 +34,74 @@\n             .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n \n     private final SpringCloudConfigClientConfig springCloudConfigClientConfig;\n-    private final String baseUri;\n+    private final URI baseURI;\n \n     public DefaultSpringCloudConfigClientGateway(SpringCloudConfigClientConfig springCloudConfigClientConfig) {\n         this.springCloudConfigClientConfig = springCloudConfigClientConfig;\n-        this.baseUri = determineBaseUri(springCloudConfigClientConfig);\n+        try {\n+            this.baseURI = determineBaseUri(springCloudConfigClientConfig);\n+        } catch (URISyntaxException e) {\n+            throw new RuntimeException(e);\n+        }\n     }\n \n-    private String determineBaseUri(SpringCloudConfigClientConfig springCloudConfigClientConfig) {\n-        String baseUri = springCloudConfigClientConfig.url;\n-        if (null == baseUri || baseUri.isEmpty()) {\n-            throw new IllegalArgumentException(\"baseUri cannot be empty\");\n+    private URI determineBaseUri(SpringCloudConfigClientConfig springCloudConfigClientConfig) throws URISyntaxException {\n+        String url = springCloudConfigClientConfig.url;\n+        if (null == url || url.isEmpty()) {\n+            throw new IllegalArgumentException(\"baseUrl cannot be empty\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwOTU3Ng=="}, "originalCommit": {"oid": "c88de6da48b85b26a802f4f0ac3ce6cbd03f1a0b"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2723, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}