{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzNzY2ODUx", "number": 13737, "title": "Introduce first version for supporting K8S Service Binding Specification", "bodyText": "Fixes: #13617", "createdAt": "2020-12-07T15:44:37Z", "url": "https://github.com/quarkusio/quarkus/pull/13737", "merged": true, "mergeCommit": {"oid": "6e91408168131f1a6f0cfad4b448d115772462bb"}, "closed": true, "closedAt": "2020-12-09T13:11:01Z", "author": {"login": "geoand"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdj-S0LgFqTU0NjYyNzIxNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkyi9kgFqTU0OTE0OTM3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NjI3MjE0", "url": "https://github.com/quarkusio/quarkus/pull/13737#pullrequestreview-546627214", "createdAt": "2020-12-07T23:28:55Z", "commit": {"oid": "063f23b548875d37cd455668f96c77edc1e54288"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzoyODo1NlrOIA_qKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzozODo0NFrOIA_6rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkxMzg5OQ==", "bodyText": "We should probably add a ConfigSource with the raw bindings, so you can use property expressions replacement if you wish.", "url": "https://github.com/quarkusio/quarkus/pull/13737#discussion_r537913899", "createdAt": "2020-12-07T23:28:56Z", "author": {"login": "radcortez"}, "path": "extensions/kubernetes-service-binding/runtime/src/main/java/io/quarkus/kubernetes/service/binding/runtime/KubernetesServiceBindingConfigSourceProvider.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package io.quarkus.kubernetes.service.binding.runtime;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.ServiceLoader;\n+\n+import org.eclipse.microprofile.config.spi.ConfigSource;\n+import org.eclipse.microprofile.config.spi.ConfigSourceProvider;\n+\n+public class KubernetesServiceBindingConfigSourceProvider implements ConfigSourceProvider {\n+\n+    private final List<ServiceBinding> serviceBindings;\n+    private final List<ServiceBindingConverter> serviceBindingConverters;\n+\n+    public KubernetesServiceBindingConfigSourceProvider(String bindingRoot) {\n+        this(bindingRoot, determineConverters());\n+    }\n+\n+    //visible for testing\n+    KubernetesServiceBindingConfigSourceProvider(String bindingRoot, List<ServiceBindingConverter> serviceBindingConverters) {\n+        this.serviceBindingConverters = serviceBindingConverters;\n+        Path p = Paths.get(bindingRoot);\n+        if (!Files.exists(p)) {\n+            serviceBindings = Collections.emptyList();\n+            return;\n+        }\n+        if (!Files.isDirectory(p)) {\n+            throw new IllegalArgumentException(\"Service Binding root '\" + p + \"' is not a directory\");\n+        }\n+\n+        File[] files = p.toFile().listFiles();\n+        if (files == null) {\n+            serviceBindings = Collections.emptyList();\n+        } else {\n+            serviceBindings = new ArrayList<>(files.length);\n+            for (File f : files) {\n+                serviceBindings.add(new ServiceBinding(f.toPath()));\n+            }\n+            serviceBindings.sort(new Comparator<ServiceBinding>() {\n+                @Override\n+                public int compare(ServiceBinding o1, ServiceBinding o2) {\n+                    if (!o1.getName().equals(o2.getName())) {\n+                        return o1.getName().compareTo(o2.getName());\n+                    }\n+                    return o1.getProvider().compareTo(o2.getProvider());\n+                }\n+            });\n+        }\n+    }\n+\n+    private static List<ServiceBindingConverter> determineConverters() {\n+        List<ServiceBindingConverter> result = new ArrayList<>();\n+        ServiceLoader<ServiceBindingConverter> loader = ServiceLoader.load(ServiceBindingConverter.class,\n+                Thread.currentThread().getContextClassLoader());\n+        for (ServiceBindingConverter c : loader) {\n+            result.add(c);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public Iterable<ConfigSource> getConfigSources(ClassLoader forClassLoader) {\n+        if (serviceBindings.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+\n+        List<ConfigSource> result = new ArrayList<>();\n+        for (ServiceBindingConverter converter : serviceBindingConverters) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "063f23b548875d37cd455668f96c77edc1e54288"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkxODEyNw==", "bodyText": "I'm wondering how we should map other properties available in the ServiceBinding? For instance if I want to use the url directly, should that be in a file jdbc.url and we add the required prefixes?", "url": "https://github.com/quarkusio/quarkus/pull/13737#discussion_r537918127", "createdAt": "2020-12-07T23:38:44Z", "author": {"login": "radcortez"}, "path": "extensions/jdbc/jdbc-postgresql/runtime/src/main/java/io/quarkus/jdbc/postgresql/runtime/PostgreSqlServiceBindingConverter.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package io.quarkus.jdbc.postgresql.runtime;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.kubernetes.service.binding.runtime.ServiceBinding;\n+import io.quarkus.kubernetes.service.binding.runtime.ServiceBindingConfigSource;\n+import io.quarkus.kubernetes.service.binding.runtime.ServiceBindingConverter;\n+\n+public class PostgreSqlServiceBindingConverter implements ServiceBindingConverter {\n+\n+    private static final Logger log = Logger.getLogger(ServiceBinding.class);\n+\n+    @Override\n+    public Optional<ServiceBindingConfigSource> convert(List<ServiceBinding> serviceBindings) {\n+        Optional<ServiceBinding> matchingByType = ServiceBinding.singleMatchingByType(\"postgresql\", serviceBindings);\n+        if (!matchingByType.isPresent()) {\n+            return Optional.empty();\n+        }\n+\n+        Map<String, String> properties = new HashMap<>();\n+        ServiceBinding binding = matchingByType.get();\n+\n+        String username = binding.getProperties().get(\"username\");\n+        if (username != null) {\n+            properties.put(\"quarkus.datasource.username\", username);\n+        } else {\n+            log.debug(\"Property 'username' was not found\");\n+        }\n+        String password = binding.getProperties().get(\"password\");\n+        if (password != null) {\n+            properties.put(\"quarkus.datasource.password\", password);\n+        } else {\n+            log.debug(\"Property 'password' was not found\");\n+        }\n+        String host = binding.getProperties().get(\"host\");\n+        String port = binding.getProperties().get(\"port\");\n+        String database = binding.getProperties().get(\"database\");\n+        if ((host != null) && (database != null)) {\n+            String portPart = \"\";\n+            if (port != null) {\n+                portPart = \":\" + port;\n+            }\n+            properties.put(\"quarkus.datasource.jdbc.url\", String.format(\"jdbc:postgresql://%s%s/%s\", host, portPart, database));\n+        } else {\n+            log.debug(\"One or more of 'host' or 'database' properties were not found\");\n+        }\n+        return Optional.of(new ServiceBindingConfigSource(\"postgresql-k8s-service-binding-source\", properties));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "063f23b548875d37cd455668f96c77edc1e54288"}, "originalPosition": 52}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "063f23b548875d37cd455668f96c77edc1e54288", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/063f23b548875d37cd455668f96c77edc1e54288", "committedDate": "2020-12-07T15:39:46Z", "message": "Add bare-bones example of PostgreSQL k8s service binding handling"}, "afterCommit": {"oid": "4af532284ff9460f5301f9e38f6523b0e9f5443b", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/4af532284ff9460f5301f9e38f6523b0e9f5443b", "committedDate": "2020-12-08T07:13:47Z", "message": "Add bare-bones example of PostgreSQL k8s service binding handling"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4af532284ff9460f5301f9e38f6523b0e9f5443b", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/4af532284ff9460f5301f9e38f6523b0e9f5443b", "committedDate": "2020-12-08T07:13:47Z", "message": "Add bare-bones example of PostgreSQL k8s service binding handling"}, "afterCommit": {"oid": "195153c6a0f49661e5c69e1724adafec50afada1", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/195153c6a0f49661e5c69e1724adafec50afada1", "committedDate": "2020-12-08T07:43:04Z", "message": "Add bare-bones example of PostgreSQL k8s service binding handling"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "195153c6a0f49661e5c69e1724adafec50afada1", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/195153c6a0f49661e5c69e1724adafec50afada1", "committedDate": "2020-12-08T07:43:04Z", "message": "Add bare-bones example of PostgreSQL k8s service binding handling"}, "afterCommit": {"oid": "84bad614b138b4a9536857110343a77790ce2386", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/84bad614b138b4a9536857110343a77790ce2386", "committedDate": "2020-12-08T07:59:04Z", "message": "Add bare-bones example of PostgreSQL k8s service binding handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1769a9fecd77fa0fdebe03a73be29111e9d8273b", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/1769a9fecd77fa0fdebe03a73be29111e9d8273b", "committedDate": "2020-12-08T14:16:13Z", "message": "Create basic structure for k8s service binding handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64950319e3cd20b2e1fe34b01c7bf38b8375a168", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/64950319e3cd20b2e1fe34b01c7bf38b8375a168", "committedDate": "2020-12-08T14:16:13Z", "message": "Add bare-bones example of PostgreSQL k8s service binding handling"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "84bad614b138b4a9536857110343a77790ce2386", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/84bad614b138b4a9536857110343a77790ce2386", "committedDate": "2020-12-08T07:59:04Z", "message": "Add bare-bones example of PostgreSQL k8s service binding handling"}, "afterCommit": {"oid": "64950319e3cd20b2e1fe34b01c7bf38b8375a168", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/64950319e3cd20b2e1fe34b01c7bf38b8375a168", "committedDate": "2020-12-08T14:16:13Z", "message": "Add bare-bones example of PostgreSQL k8s service binding handling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MDI3NzY4", "url": "https://github.com/quarkusio/quarkus/pull/13737#pullrequestreview-548027768", "createdAt": "2020-12-09T10:11:48Z", "commit": {"oid": "64950319e3cd20b2e1fe34b01c7bf38b8375a168"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MTQ5Mzcz", "url": "https://github.com/quarkusio/quarkus/pull/13737#pullrequestreview-549149373", "createdAt": "2020-12-10T12:31:56Z", "commit": {"oid": "64950319e3cd20b2e1fe34b01c7bf38b8375a168"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjozMTo1N1rOIDHAlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjozMTo1N1rOIDHAlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEzMTQ3Nw==", "bodyText": "Missing @ConfigItem? Mostly for generated docs ;-)\nOtherwise, looks great. Thanks.", "url": "https://github.com/quarkusio/quarkus/pull/13737#discussion_r540131477", "createdAt": "2020-12-10T12:31:57Z", "author": {"login": "machi1990"}, "path": "extensions/kubernetes-service-binding/runtime/src/main/java/io/quarkus/kubernetes/service/binding/runtime/KubernetesServiceBindingConfig.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.quarkus.kubernetes.service.binding.runtime;\n+\n+import java.util.Optional;\n+\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigPhase;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+\n+@ConfigRoot(name = \"kubernetes-service-binding\", phase = ConfigPhase.BOOTSTRAP)\n+public class KubernetesServiceBindingConfig {\n+\n+    /**\n+     * If enabled, Service Bindings will be looked in the file system\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64950319e3cd20b2e1fe34b01c7bf38b8375a168"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1259, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}