{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5MTYwMDI4", "number": 10221, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjoxMTowNFrOEIVuIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwOToxNTowMlrOEIrdZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTc5OTM5OnYy", "diffSide": "RIGHT", "path": "test-framework/junit5-internal/src/main/java/io/quarkus/test/QuarkusDevModeTest.java", "isResolved": false, "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjoxMTowNFrOGoPYDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMTo1MjoxNVrOGo3OaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0ODE0Mg==", "bodyText": "I'm not too familiar with loggers and junit extensions, but isn't this going to leak in the testsuite?\nLooks like it will keep adding new InMemoryLogHandler instances, and also it's not emptying each of them after usage. I suppose the rootLogger is a global static so this might get nasty?", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444848142", "createdAt": "2020-06-24T12:11:04Z", "author": {"login": "Sanne"}, "path": "test-framework/junit5-internal/src/main/java/io/quarkus/test/QuarkusDevModeTest.java", "diffHunk": "@@ -110,6 +127,7 @@ public Object createTestInstance(TestInstanceFactoryContext factoryContext, Exte\n \n     @Override\n     public void beforeEach(ExtensionContext extensionContext) throws Exception {\n+        rootLogger.addHandler(inMemoryLogHandler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2MTI3NQ==", "bodyText": "@geoand any opinion? I copied this from your QuarkusProdModeTest.", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444861275", "createdAt": "2020-06-24T12:35:57Z", "author": {"login": "FroMage"}, "path": "test-framework/junit5-internal/src/main/java/io/quarkus/test/QuarkusDevModeTest.java", "diffHunk": "@@ -110,6 +127,7 @@ public Object createTestInstance(TestInstanceFactoryContext factoryContext, Exte\n \n     @Override\n     public void beforeEach(ExtensionContext extensionContext) throws Exception {\n+        rootLogger.addHandler(inMemoryLogHandler);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0ODE0Mg=="}, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2NjEwOQ==", "bodyText": "In QuarkusProdModeTest this is done in beforeAll, is there any specific reason why it was added to beforeEach here?", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444866109", "createdAt": "2020-06-24T12:44:51Z", "author": {"login": "geoand"}, "path": "test-framework/junit5-internal/src/main/java/io/quarkus/test/QuarkusDevModeTest.java", "diffHunk": "@@ -110,6 +127,7 @@ public Object createTestInstance(TestInstanceFactoryContext factoryContext, Exte\n \n     @Override\n     public void beforeEach(ExtensionContext extensionContext) throws Exception {\n+        rootLogger.addHandler(inMemoryLogHandler);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0ODE0Mg=="}, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2NzI3MA==", "bodyText": "Having it in beforeAll might be slightly better, but would still leak no?", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444867270", "createdAt": "2020-06-24T12:47:04Z", "author": {"login": "Sanne"}, "path": "test-framework/junit5-internal/src/main/java/io/quarkus/test/QuarkusDevModeTest.java", "diffHunk": "@@ -110,6 +127,7 @@ public Object createTestInstance(TestInstanceFactoryContext factoryContext, Exte\n \n     @Override\n     public void beforeEach(ExtensionContext extensionContext) throws Exception {\n+        rootLogger.addHandler(inMemoryLogHandler);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0ODE0Mg=="}, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2Nzg4MQ==", "bodyText": "Sorry I don't follow, what would leak?", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444867881", "createdAt": "2020-06-24T12:48:13Z", "author": {"login": "geoand"}, "path": "test-framework/junit5-internal/src/main/java/io/quarkus/test/QuarkusDevModeTest.java", "diffHunk": "@@ -110,6 +127,7 @@ public Object createTestInstance(TestInstanceFactoryContext factoryContext, Exte\n \n     @Override\n     public void beforeEach(ExtensionContext extensionContext) throws Exception {\n+        rootLogger.addHandler(inMemoryLogHandler);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0ODE0Mg=="}, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2ODMyNA==", "bodyText": "Maybe just add it in a static block, so you're sure it's done once across the whole classloader.\nThen, I'd use an \"afterEach\" or \"afterAll\" to clear its contents after each unit of testing.", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444868324", "createdAt": "2020-06-24T12:49:02Z", "author": {"login": "Sanne"}, "path": "test-framework/junit5-internal/src/main/java/io/quarkus/test/QuarkusDevModeTest.java", "diffHunk": "@@ -110,6 +127,7 @@ public Object createTestInstance(TestInstanceFactoryContext factoryContext, Exte\n \n     @Override\n     public void beforeEach(ExtensionContext extensionContext) throws Exception {\n+        rootLogger.addHandler(inMemoryLogHandler);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0ODE0Mg=="}, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg3MTQxMQ==", "bodyText": "Sorry I don't follow, what would leak?\n\nI suspect two leaks, although I haven't debugged this and I'm not too familiar with this code so I might be wrong:\n\n\nThe root logger is a global static instance, so each time we invoke addHandler we're adding more and more loghandlers.\n\n\neach such logHandler will keep containing all messages, from since it was added to the root onwards - so also all text generated from other tests running later in the testsuite.", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444871411", "createdAt": "2020-06-24T12:54:34Z", "author": {"login": "Sanne"}, "path": "test-framework/junit5-internal/src/main/java/io/quarkus/test/QuarkusDevModeTest.java", "diffHunk": "@@ -110,6 +127,7 @@ public Object createTestInstance(TestInstanceFactoryContext factoryContext, Exte\n \n     @Override\n     public void beforeEach(ExtensionContext extensionContext) throws Exception {\n+        rootLogger.addHandler(inMemoryLogHandler);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0ODE0Mg=="}, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg3NTQyMw==", "bodyText": "@geoand I've put it where we start the dev mode, which is in \"beforeEach\", while the prod test is started in \"beforeAll\".", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444875423", "createdAt": "2020-06-24T13:01:21Z", "author": {"login": "FroMage"}, "path": "test-framework/junit5-internal/src/main/java/io/quarkus/test/QuarkusDevModeTest.java", "diffHunk": "@@ -110,6 +127,7 @@ public Object createTestInstance(TestInstanceFactoryContext factoryContext, Exte\n \n     @Override\n     public void beforeEach(ExtensionContext extensionContext) throws Exception {\n+        rootLogger.addHandler(inMemoryLogHandler);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0ODE0Mg=="}, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg3NzIwNQ==", "bodyText": "I've now removed it in afterEach, should be enough no?", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444877205", "createdAt": "2020-06-24T13:04:18Z", "author": {"login": "FroMage"}, "path": "test-framework/junit5-internal/src/main/java/io/quarkus/test/QuarkusDevModeTest.java", "diffHunk": "@@ -110,6 +127,7 @@ public Object createTestInstance(TestInstanceFactoryContext factoryContext, Exte\n \n     @Override\n     public void beforeEach(ExtensionContext extensionContext) throws Exception {\n+        rootLogger.addHandler(inMemoryLogHandler);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0ODE0Mg=="}, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg3OTYwNw==", "bodyText": "That isn't really needed because each time a the extension is run (that is each time we write a QuarkusDevModeTest or QuarkusProdModeTest), the handler that is used for that test replaces the global static.", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444879607", "createdAt": "2020-06-24T13:08:18Z", "author": {"login": "geoand"}, "path": "test-framework/junit5-internal/src/main/java/io/quarkus/test/QuarkusDevModeTest.java", "diffHunk": "@@ -110,6 +127,7 @@ public Object createTestInstance(TestInstanceFactoryContext factoryContext, Exte\n \n     @Override\n     public void beforeEach(ExtensionContext extensionContext) throws Exception {\n+        rootLogger.addHandler(inMemoryLogHandler);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0ODE0Mg=="}, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg4MTcwNA==", "bodyText": "the handler that is used for that test replaces the global static.\n\nBut the private static final Logger rootLogger; isn't replaced is it? Or is each test running in its own classloader?", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444881704", "createdAt": "2020-06-24T13:11:35Z", "author": {"login": "Sanne"}, "path": "test-framework/junit5-internal/src/main/java/io/quarkus/test/QuarkusDevModeTest.java", "diffHunk": "@@ -110,6 +127,7 @@ public Object createTestInstance(TestInstanceFactoryContext factoryContext, Exte\n \n     @Override\n     public void beforeEach(ExtensionContext extensionContext) throws Exception {\n+        rootLogger.addHandler(inMemoryLogHandler);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0ODE0Mg=="}, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg5NTUwOA==", "bodyText": "The rootLogger is the same for all tests (they don't run in isolared classloaders), but because each test replaces it, it shouldn't be a problem.\nThere could be an issue when running QuarkusDevModeTest other tests inside the same test execution (read surefire execution) as in that case indeed the handler set from QuarkusDevModeTest will persist.\nSo the safest thing would indeed be to restore the original handlers.\nShould just be a matter of calling and saving getHandlers before addHandler and then in the afterAll, restoring the handlers using setHandlers (after casting to org.jboss.logmanager.Logger).\nWould you like me to do that @FroMage or do you want to include it here?\nAll in all, although it's unlikely to cause a problem, we should fix it and it's a very good catch @Sanne", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444895508", "createdAt": "2020-06-24T13:32:14Z", "author": {"login": "geoand"}, "path": "test-framework/junit5-internal/src/main/java/io/quarkus/test/QuarkusDevModeTest.java", "diffHunk": "@@ -110,6 +127,7 @@ public Object createTestInstance(TestInstanceFactoryContext factoryContext, Exte\n \n     @Override\n     public void beforeEach(ExtensionContext extensionContext) throws Exception {\n+        rootLogger.addHandler(inMemoryLogHandler);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0ODE0Mg=="}, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk4ODA2MA==", "bodyText": "I'm still not understanding what you mean by \"but because each test replaces it, it shouldn't be a problem\" but it's ok, we can avoid blocking this PR just because I don't get it :)\nWith @FroMage having added the afterEach I'm happy.", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444988060", "createdAt": "2020-06-24T15:38:27Z", "author": {"login": "Sanne"}, "path": "test-framework/junit5-internal/src/main/java/io/quarkus/test/QuarkusDevModeTest.java", "diffHunk": "@@ -110,6 +127,7 @@ public Object createTestInstance(TestInstanceFactoryContext factoryContext, Exte\n \n     @Override\n     public void beforeEach(ExtensionContext extensionContext) throws Exception {\n+        rootLogger.addHandler(inMemoryLogHandler);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0ODE0Mg=="}, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk5Njg0Nw==", "bodyText": "I mean that each new instance of QuarkusDevModeTest will provide a new handler thus replacing the old one.\nBut for sure the best solution is to get a hold of the initial handlers in beforeAll and then restore them in afterAll", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444996847", "createdAt": "2020-06-24T15:51:21Z", "author": {"login": "geoand"}, "path": "test-framework/junit5-internal/src/main/java/io/quarkus/test/QuarkusDevModeTest.java", "diffHunk": "@@ -110,6 +127,7 @@ public Object createTestInstance(TestInstanceFactoryContext factoryContext, Exte\n \n     @Override\n     public void beforeEach(ExtensionContext extensionContext) throws Exception {\n+        rootLogger.addHandler(inMemoryLogHandler);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0ODE0Mg=="}, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk5ODU1NQ==", "bodyText": "it's adding handlers, not replacing existing ones.", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444998555", "createdAt": "2020-06-24T15:53:56Z", "author": {"login": "Sanne"}, "path": "test-framework/junit5-internal/src/main/java/io/quarkus/test/QuarkusDevModeTest.java", "diffHunk": "@@ -110,6 +127,7 @@ public Object createTestInstance(TestInstanceFactoryContext factoryContext, Exte\n \n     @Override\n     public void beforeEach(ExtensionContext extensionContext) throws Exception {\n+        rootLogger.addHandler(inMemoryLogHandler);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0ODE0Mg=="}, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3Njk4Mw==", "bodyText": "I'll take care of this in a separate PR", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r445076983", "createdAt": "2020-06-24T18:05:46Z", "author": {"login": "geoand"}, "path": "test-framework/junit5-internal/src/main/java/io/quarkus/test/QuarkusDevModeTest.java", "diffHunk": "@@ -110,6 +127,7 @@ public Object createTestInstance(TestInstanceFactoryContext factoryContext, Exte\n \n     @Override\n     public void beforeEach(ExtensionContext extensionContext) throws Exception {\n+        rootLogger.addHandler(inMemoryLogHandler);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0ODE0Mg=="}, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUwMTAzMw==", "bodyText": "#10262", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r445501033", "createdAt": "2020-06-25T11:52:15Z", "author": {"login": "geoand"}, "path": "test-framework/junit5-internal/src/main/java/io/quarkus/test/QuarkusDevModeTest.java", "diffHunk": "@@ -110,6 +127,7 @@ public Object createTestInstance(TestInstanceFactoryContext factoryContext, Exte\n \n     @Override\n     public void beforeEach(ExtensionContext extensionContext) throws Exception {\n+        rootLogger.addHandler(inMemoryLogHandler);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0ODE0Mg=="}, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTgwMzYyOnYy", "diffSide": "RIGHT", "path": "integration-tests/reactive-pg-client/src/test/java/io/quarkus/it/reactive/pg/client/HotReloadTestCase.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjoxMjozMVrOGoPauQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMzoyNjo0MFrOGoSBzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0ODgyNQ==", "bodyText": "what is the goal of this replacement? Might need a comment?", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444848825", "createdAt": "2020-06-24T12:12:31Z", "author": {"login": "Sanne"}, "path": "integration-tests/reactive-pg-client/src/test/java/io/quarkus/it/reactive/pg/client/HotReloadTestCase.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package io.quarkus.it.reactive.pg.client;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.containsString;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.logging.LogRecord;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusDevModeTest;\n+\n+public class HotReloadTestCase {\n+    @RegisterExtension\n+    final static QuarkusDevModeTest TEST = new QuarkusDevModeTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(HotReloadFruitResource.class)\n+                    .addAsResource(\"application-tl.properties\", \"application.properties\"))\n+            .setLogRecordPredicate(record -> {\n+                return record.getLoggerName().startsWith(\"io.quarkus.reactive.datasource\");\n+            });\n+\n+    @AfterAll\n+    public static void afterAll() {\n+        List<LogRecord> records = TEST.getLogRecords();\n+        Assertions.assertEquals(8, records.size());\n+        // make sure that we closed all thread-local pools on reload and close\n+        Assertions.assertEquals(\"Making pool for thread: %s\", records.get(0).getMessage());\n+        Assertions.assertEquals(\"Making pool for thread: %s\", records.get(1).getMessage());\n+        Assertions.assertEquals(\"Closing pool: %s\", records.get(2).getMessage());\n+        Assertions.assertEquals(\"Closing pool: %s\", records.get(3).getMessage());\n+        Assertions.assertEquals(\"Making pool for thread: %s\", records.get(4).getMessage());\n+        Assertions.assertEquals(\"Making pool for thread: %s\", records.get(5).getMessage());\n+        Assertions.assertEquals(\"Closing pool: %s\", records.get(6).getMessage());\n+        Assertions.assertEquals(\"Closing pool: %s\", records.get(7).getMessage());\n+    }\n+\n+    @Test\n+    public void testAddNewFieldToEntity() {\n+        checkRequest(\"Orange\");\n+        TEST.modifySourceFile(HotReloadFruitResource.class, new Function<String, String>() {\n+            @Override\n+            public String apply(String s) {\n+                return s.replace(\"'Orange'\", \"'Strawberry'\");\n+            }\n+        });\n+        TEST.modifyResourceFile(\"application.properties\", new Function<String, String>() {\n+            @Override\n+            public String apply(String s) {\n+                return s.replace(\"quarkus.datasource.reactive.thread-local=true\",\n+                        \"quarkus.datasource.reactive.thread-local = true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2MTQwOQ==", "bodyText": "Just to trigger a hot reload.", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444861409", "createdAt": "2020-06-24T12:36:11Z", "author": {"login": "FroMage"}, "path": "integration-tests/reactive-pg-client/src/test/java/io/quarkus/it/reactive/pg/client/HotReloadTestCase.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package io.quarkus.it.reactive.pg.client;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.containsString;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.logging.LogRecord;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusDevModeTest;\n+\n+public class HotReloadTestCase {\n+    @RegisterExtension\n+    final static QuarkusDevModeTest TEST = new QuarkusDevModeTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(HotReloadFruitResource.class)\n+                    .addAsResource(\"application-tl.properties\", \"application.properties\"))\n+            .setLogRecordPredicate(record -> {\n+                return record.getLoggerName().startsWith(\"io.quarkus.reactive.datasource\");\n+            });\n+\n+    @AfterAll\n+    public static void afterAll() {\n+        List<LogRecord> records = TEST.getLogRecords();\n+        Assertions.assertEquals(8, records.size());\n+        // make sure that we closed all thread-local pools on reload and close\n+        Assertions.assertEquals(\"Making pool for thread: %s\", records.get(0).getMessage());\n+        Assertions.assertEquals(\"Making pool for thread: %s\", records.get(1).getMessage());\n+        Assertions.assertEquals(\"Closing pool: %s\", records.get(2).getMessage());\n+        Assertions.assertEquals(\"Closing pool: %s\", records.get(3).getMessage());\n+        Assertions.assertEquals(\"Making pool for thread: %s\", records.get(4).getMessage());\n+        Assertions.assertEquals(\"Making pool for thread: %s\", records.get(5).getMessage());\n+        Assertions.assertEquals(\"Closing pool: %s\", records.get(6).getMessage());\n+        Assertions.assertEquals(\"Closing pool: %s\", records.get(7).getMessage());\n+    }\n+\n+    @Test\n+    public void testAddNewFieldToEntity() {\n+        checkRequest(\"Orange\");\n+        TEST.modifySourceFile(HotReloadFruitResource.class, new Function<String, String>() {\n+            @Override\n+            public String apply(String s) {\n+                return s.replace(\"'Orange'\", \"'Strawberry'\");\n+            }\n+        });\n+        TEST.modifyResourceFile(\"application.properties\", new Function<String, String>() {\n+            @Override\n+            public String apply(String s) {\n+                return s.replace(\"quarkus.datasource.reactive.thread-local=true\",\n+                        \"quarkus.datasource.reactive.thread-local = true\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0ODgyNQ=="}, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2MjEwOA==", "bodyText": "Please add a comment. And is the change to the entity not enought to trigger one?", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444862108", "createdAt": "2020-06-24T12:37:33Z", "author": {"login": "Sanne"}, "path": "integration-tests/reactive-pg-client/src/test/java/io/quarkus/it/reactive/pg/client/HotReloadTestCase.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package io.quarkus.it.reactive.pg.client;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.containsString;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.logging.LogRecord;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusDevModeTest;\n+\n+public class HotReloadTestCase {\n+    @RegisterExtension\n+    final static QuarkusDevModeTest TEST = new QuarkusDevModeTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(HotReloadFruitResource.class)\n+                    .addAsResource(\"application-tl.properties\", \"application.properties\"))\n+            .setLogRecordPredicate(record -> {\n+                return record.getLoggerName().startsWith(\"io.quarkus.reactive.datasource\");\n+            });\n+\n+    @AfterAll\n+    public static void afterAll() {\n+        List<LogRecord> records = TEST.getLogRecords();\n+        Assertions.assertEquals(8, records.size());\n+        // make sure that we closed all thread-local pools on reload and close\n+        Assertions.assertEquals(\"Making pool for thread: %s\", records.get(0).getMessage());\n+        Assertions.assertEquals(\"Making pool for thread: %s\", records.get(1).getMessage());\n+        Assertions.assertEquals(\"Closing pool: %s\", records.get(2).getMessage());\n+        Assertions.assertEquals(\"Closing pool: %s\", records.get(3).getMessage());\n+        Assertions.assertEquals(\"Making pool for thread: %s\", records.get(4).getMessage());\n+        Assertions.assertEquals(\"Making pool for thread: %s\", records.get(5).getMessage());\n+        Assertions.assertEquals(\"Closing pool: %s\", records.get(6).getMessage());\n+        Assertions.assertEquals(\"Closing pool: %s\", records.get(7).getMessage());\n+    }\n+\n+    @Test\n+    public void testAddNewFieldToEntity() {\n+        checkRequest(\"Orange\");\n+        TEST.modifySourceFile(HotReloadFruitResource.class, new Function<String, String>() {\n+            @Override\n+            public String apply(String s) {\n+                return s.replace(\"'Orange'\", \"'Strawberry'\");\n+            }\n+        });\n+        TEST.modifyResourceFile(\"application.properties\", new Function<String, String>() {\n+            @Override\n+            public String apply(String s) {\n+                return s.replace(\"quarkus.datasource.reactive.thread-local=true\",\n+                        \"quarkus.datasource.reactive.thread-local = true\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0ODgyNQ=="}, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg3NzU2OA==", "bodyText": "No, it does not reload the pools. The entity change is to verify that a reload happened. I've added a comment.", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444877568", "createdAt": "2020-06-24T13:04:56Z", "author": {"login": "FroMage"}, "path": "integration-tests/reactive-pg-client/src/test/java/io/quarkus/it/reactive/pg/client/HotReloadTestCase.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package io.quarkus.it.reactive.pg.client;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.containsString;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.logging.LogRecord;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusDevModeTest;\n+\n+public class HotReloadTestCase {\n+    @RegisterExtension\n+    final static QuarkusDevModeTest TEST = new QuarkusDevModeTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(HotReloadFruitResource.class)\n+                    .addAsResource(\"application-tl.properties\", \"application.properties\"))\n+            .setLogRecordPredicate(record -> {\n+                return record.getLoggerName().startsWith(\"io.quarkus.reactive.datasource\");\n+            });\n+\n+    @AfterAll\n+    public static void afterAll() {\n+        List<LogRecord> records = TEST.getLogRecords();\n+        Assertions.assertEquals(8, records.size());\n+        // make sure that we closed all thread-local pools on reload and close\n+        Assertions.assertEquals(\"Making pool for thread: %s\", records.get(0).getMessage());\n+        Assertions.assertEquals(\"Making pool for thread: %s\", records.get(1).getMessage());\n+        Assertions.assertEquals(\"Closing pool: %s\", records.get(2).getMessage());\n+        Assertions.assertEquals(\"Closing pool: %s\", records.get(3).getMessage());\n+        Assertions.assertEquals(\"Making pool for thread: %s\", records.get(4).getMessage());\n+        Assertions.assertEquals(\"Making pool for thread: %s\", records.get(5).getMessage());\n+        Assertions.assertEquals(\"Closing pool: %s\", records.get(6).getMessage());\n+        Assertions.assertEquals(\"Closing pool: %s\", records.get(7).getMessage());\n+    }\n+\n+    @Test\n+    public void testAddNewFieldToEntity() {\n+        checkRequest(\"Orange\");\n+        TEST.modifySourceFile(HotReloadFruitResource.class, new Function<String, String>() {\n+            @Override\n+            public String apply(String s) {\n+                return s.replace(\"'Orange'\", \"'Strawberry'\");\n+            }\n+        });\n+        TEST.modifyResourceFile(\"application.properties\", new Function<String, String>() {\n+            @Override\n+            public String apply(String s) {\n+                return s.replace(\"quarkus.datasource.reactive.thread-local=true\",\n+                        \"quarkus.datasource.reactive.thread-local = true\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0ODgyNQ=="}, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg5MTU5Nw==", "bodyText": "Ok thanks. Off topic, but I wonder if we should improve on that: the configuration isn't really different so there shouldn't be any need to reload :)", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444891597", "createdAt": "2020-06-24T13:26:40Z", "author": {"login": "Sanne"}, "path": "integration-tests/reactive-pg-client/src/test/java/io/quarkus/it/reactive/pg/client/HotReloadTestCase.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package io.quarkus.it.reactive.pg.client;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.containsString;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.logging.LogRecord;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusDevModeTest;\n+\n+public class HotReloadTestCase {\n+    @RegisterExtension\n+    final static QuarkusDevModeTest TEST = new QuarkusDevModeTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(HotReloadFruitResource.class)\n+                    .addAsResource(\"application-tl.properties\", \"application.properties\"))\n+            .setLogRecordPredicate(record -> {\n+                return record.getLoggerName().startsWith(\"io.quarkus.reactive.datasource\");\n+            });\n+\n+    @AfterAll\n+    public static void afterAll() {\n+        List<LogRecord> records = TEST.getLogRecords();\n+        Assertions.assertEquals(8, records.size());\n+        // make sure that we closed all thread-local pools on reload and close\n+        Assertions.assertEquals(\"Making pool for thread: %s\", records.get(0).getMessage());\n+        Assertions.assertEquals(\"Making pool for thread: %s\", records.get(1).getMessage());\n+        Assertions.assertEquals(\"Closing pool: %s\", records.get(2).getMessage());\n+        Assertions.assertEquals(\"Closing pool: %s\", records.get(3).getMessage());\n+        Assertions.assertEquals(\"Making pool for thread: %s\", records.get(4).getMessage());\n+        Assertions.assertEquals(\"Making pool for thread: %s\", records.get(5).getMessage());\n+        Assertions.assertEquals(\"Closing pool: %s\", records.get(6).getMessage());\n+        Assertions.assertEquals(\"Closing pool: %s\", records.get(7).getMessage());\n+    }\n+\n+    @Test\n+    public void testAddNewFieldToEntity() {\n+        checkRequest(\"Orange\");\n+        TEST.modifySourceFile(HotReloadFruitResource.class, new Function<String, String>() {\n+            @Override\n+            public String apply(String s) {\n+                return s.replace(\"'Orange'\", \"'Strawberry'\");\n+            }\n+        });\n+        TEST.modifyResourceFile(\"application.properties\", new Function<String, String>() {\n+            @Override\n+            public String apply(String s) {\n+                return s.replace(\"quarkus.datasource.reactive.thread-local=true\",\n+                        \"quarkus.datasource.reactive.thread-local = true\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0ODgyNQ=="}, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTgwOTAyOnYy", "diffSide": "RIGHT", "path": "extensions/reactive-pg-client/runtime/src/main/java/io/quarkus/reactive/pg/client/runtime/ThreadLocalPgPool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjoxNDoxN1rOGoPeFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjoxNDoxN1rOGoPeFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0OTY4NQ==", "bodyText": "make it final ?", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444849685", "createdAt": "2020-06-24T12:14:17Z", "author": {"login": "Sanne"}, "path": "extensions/reactive-pg-client/runtime/src/main/java/io/quarkus/reactive/pg/client/runtime/ThreadLocalPgPool.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.quarkus.reactive.pg.client.runtime;\n+\n+import io.quarkus.reactive.datasource.runtime.ThreadLocalPool;\n+import io.vertx.core.Vertx;\n+import io.vertx.pgclient.PgConnectOptions;\n+import io.vertx.pgclient.PgPool;\n+import io.vertx.sqlclient.PoolOptions;\n+\n+public class ThreadLocalPgPool extends ThreadLocalPool<PgPool> implements PgPool {\n+\n+    private PgConnectOptions pgConnectOptions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTgxMDE3OnYy", "diffSide": "RIGHT", "path": "extensions/reactive-mysql-client/runtime/src/main/java/io/quarkus/reactive/mysql/client/runtime/ThreadLocalMySQLPool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjoxNDozN1rOGoPezA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjoxNDozN1rOGoPezA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0OTg2OA==", "bodyText": "I think it requires final", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444849868", "createdAt": "2020-06-24T12:14:37Z", "author": {"login": "Sanne"}, "path": "extensions/reactive-mysql-client/runtime/src/main/java/io/quarkus/reactive/mysql/client/runtime/ThreadLocalMySQLPool.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.quarkus.reactive.mysql.client.runtime;\n+\n+import io.quarkus.reactive.datasource.runtime.ThreadLocalPool;\n+import io.vertx.core.Vertx;\n+import io.vertx.mysqlclient.MySQLConnectOptions;\n+import io.vertx.mysqlclient.MySQLPool;\n+import io.vertx.sqlclient.PoolOptions;\n+\n+public class ThreadLocalMySQLPool extends ThreadLocalPool<MySQLPool> implements MySQLPool {\n+\n+    private MySQLConnectOptions mySQLConnectOptions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTgxMTQ4OnYy", "diffSide": "RIGHT", "path": "extensions/reactive-db2-client/runtime/src/main/java/io/quarkus/reactive/db2/client/runtime/ThreadLocalDB2Pool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjoxNTowM1rOGoPfqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjoxNTowM1rOGoPfqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1MDA4OQ==", "bodyText": "Needs final", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444850089", "createdAt": "2020-06-24T12:15:03Z", "author": {"login": "Sanne"}, "path": "extensions/reactive-db2-client/runtime/src/main/java/io/quarkus/reactive/db2/client/runtime/ThreadLocalDB2Pool.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.quarkus.reactive.db2.client.runtime;\n+\n+import io.quarkus.reactive.datasource.runtime.ThreadLocalPool;\n+import io.vertx.core.Vertx;\n+import io.vertx.db2client.DB2ConnectOptions;\n+import io.vertx.db2client.DB2Pool;\n+import io.vertx.sqlclient.PoolOptions;\n+\n+public class ThreadLocalDB2Pool extends ThreadLocalPool<DB2Pool> implements DB2Pool {\n+\n+    private DB2ConnectOptions db2ConnectOptions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTgxODc5OnYy", "diffSide": "RIGHT", "path": "extensions/reactive-datasource/runtime/src/main/java/io/quarkus/reactive/datasource/runtime/ThreadLocalPool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjoxNzoxOVrOGoPkMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjo0NzozNFrOGoQj3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1MTI1MA==", "bodyText": "This will likely need either volatile or an AtomicReference ?\nI'd suggest using an AtomicReference, so that we can grab & clear it atomically and make sure no other concurreent user manages to race within the close().", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444851250", "createdAt": "2020-06-24T12:17:19Z", "author": {"login": "Sanne"}, "path": "extensions/reactive-datasource/runtime/src/main/java/io/quarkus/reactive/datasource/runtime/ThreadLocalPool.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package io.quarkus.reactive.datasource.runtime;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Vertx;\n+import io.vertx.sqlclient.Pool;\n+import io.vertx.sqlclient.PoolOptions;\n+import io.vertx.sqlclient.PreparedQuery;\n+import io.vertx.sqlclient.Query;\n+import io.vertx.sqlclient.Row;\n+import io.vertx.sqlclient.RowSet;\n+import io.vertx.sqlclient.SqlConnection;\n+import io.vertx.sqlclient.Transaction;\n+\n+public abstract class ThreadLocalPool<PoolType extends Pool> implements Pool {\n+\n+    private static final Logger log = Logger.getLogger(ThreadLocalPool.class);\n+\n+    private ThreadLocal<PoolType> pool = new ThreadLocal<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2NzU1MA==", "bodyText": "OK done", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444867550", "createdAt": "2020-06-24T12:47:34Z", "author": {"login": "FroMage"}, "path": "extensions/reactive-datasource/runtime/src/main/java/io/quarkus/reactive/datasource/runtime/ThreadLocalPool.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package io.quarkus.reactive.datasource.runtime;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Vertx;\n+import io.vertx.sqlclient.Pool;\n+import io.vertx.sqlclient.PoolOptions;\n+import io.vertx.sqlclient.PreparedQuery;\n+import io.vertx.sqlclient.Query;\n+import io.vertx.sqlclient.Row;\n+import io.vertx.sqlclient.RowSet;\n+import io.vertx.sqlclient.SqlConnection;\n+import io.vertx.sqlclient.Transaction;\n+\n+public abstract class ThreadLocalPool<PoolType extends Pool> implements Pool {\n+\n+    private static final Logger log = Logger.getLogger(ThreadLocalPool.class);\n+\n+    private ThreadLocal<PoolType> pool = new ThreadLocal<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1MTI1MA=="}, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTgyNjQ4OnYy", "diffSide": "RIGHT", "path": "extensions/reactive-datasource/runtime/src/main/java/io/quarkus/reactive/datasource/runtime/ThreadLocalPool.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjoxOTozNVrOGoPo1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMzowNTo1MFrOGoRNFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1MjQzNw==", "bodyText": "Seems like this need to be a Vector, and final. Or just final and synchronized..", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444852437", "createdAt": "2020-06-24T12:19:35Z", "author": {"login": "Sanne"}, "path": "extensions/reactive-datasource/runtime/src/main/java/io/quarkus/reactive/datasource/runtime/ThreadLocalPool.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package io.quarkus.reactive.datasource.runtime;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Vertx;\n+import io.vertx.sqlclient.Pool;\n+import io.vertx.sqlclient.PoolOptions;\n+import io.vertx.sqlclient.PreparedQuery;\n+import io.vertx.sqlclient.Query;\n+import io.vertx.sqlclient.Row;\n+import io.vertx.sqlclient.RowSet;\n+import io.vertx.sqlclient.SqlConnection;\n+import io.vertx.sqlclient.Transaction;\n+\n+public abstract class ThreadLocalPool<PoolType extends Pool> implements Pool {\n+\n+    private static final Logger log = Logger.getLogger(ThreadLocalPool.class);\n+\n+    private ThreadLocal<PoolType> pool = new ThreadLocal<>();\n+    private static List<Pool> threadLocalPools = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2NzM1NQ==", "bodyText": "I added some synchronization, is it enough?", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444867355", "createdAt": "2020-06-24T12:47:13Z", "author": {"login": "FroMage"}, "path": "extensions/reactive-datasource/runtime/src/main/java/io/quarkus/reactive/datasource/runtime/ThreadLocalPool.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package io.quarkus.reactive.datasource.runtime;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Vertx;\n+import io.vertx.sqlclient.Pool;\n+import io.vertx.sqlclient.PoolOptions;\n+import io.vertx.sqlclient.PreparedQuery;\n+import io.vertx.sqlclient.Query;\n+import io.vertx.sqlclient.Row;\n+import io.vertx.sqlclient.RowSet;\n+import io.vertx.sqlclient.SqlConnection;\n+import io.vertx.sqlclient.Transaction;\n+\n+public abstract class ThreadLocalPool<PoolType extends Pool> implements Pool {\n+\n+    private static final Logger log = Logger.getLogger(ThreadLocalPool.class);\n+\n+    private ThreadLocal<PoolType> pool = new ThreadLocal<>();\n+    private static List<Pool> threadLocalPools = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1MjQzNw=="}, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg3NjIzOA==", "bodyText": "Looks good. I found one more possible race, but I don't think it's possible in practice: one thread might be doing pool() and could get a live reference to the tlocal while another thread is closing.\nThis shouldn't happen while we're closing so I'd say this is good enough - I might send a follow-up PR just for fun :)", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444876238", "createdAt": "2020-06-24T13:02:40Z", "author": {"login": "Sanne"}, "path": "extensions/reactive-datasource/runtime/src/main/java/io/quarkus/reactive/datasource/runtime/ThreadLocalPool.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package io.quarkus.reactive.datasource.runtime;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Vertx;\n+import io.vertx.sqlclient.Pool;\n+import io.vertx.sqlclient.PoolOptions;\n+import io.vertx.sqlclient.PreparedQuery;\n+import io.vertx.sqlclient.Query;\n+import io.vertx.sqlclient.Row;\n+import io.vertx.sqlclient.RowSet;\n+import io.vertx.sqlclient.SqlConnection;\n+import io.vertx.sqlclient.Transaction;\n+\n+public abstract class ThreadLocalPool<PoolType extends Pool> implements Pool {\n+\n+    private static final Logger log = Logger.getLogger(ThreadLocalPool.class);\n+\n+    private ThreadLocal<PoolType> pool = new ThreadLocal<>();\n+    private static List<Pool> threadLocalPools = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1MjQzNw=="}, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg3ODEwMQ==", "bodyText": "Fair enough :)", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444878101", "createdAt": "2020-06-24T13:05:50Z", "author": {"login": "FroMage"}, "path": "extensions/reactive-datasource/runtime/src/main/java/io/quarkus/reactive/datasource/runtime/ThreadLocalPool.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package io.quarkus.reactive.datasource.runtime;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Vertx;\n+import io.vertx.sqlclient.Pool;\n+import io.vertx.sqlclient.PoolOptions;\n+import io.vertx.sqlclient.PreparedQuery;\n+import io.vertx.sqlclient.Query;\n+import io.vertx.sqlclient.Row;\n+import io.vertx.sqlclient.RowSet;\n+import io.vertx.sqlclient.SqlConnection;\n+import io.vertx.sqlclient.Transaction;\n+\n+public abstract class ThreadLocalPool<PoolType extends Pool> implements Pool {\n+\n+    private static final Logger log = Logger.getLogger(ThreadLocalPool.class);\n+\n+    private ThreadLocal<PoolType> pool = new ThreadLocal<>();\n+    private static List<Pool> threadLocalPools = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1MjQzNw=="}, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTgyNzkxOnYy", "diffSide": "RIGHT", "path": "extensions/reactive-datasource/runtime/src/main/java/io/quarkus/reactive/datasource/runtime/ThreadLocalPool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjoxOTo1NlrOGoPpnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjoxOTo1NlrOGoPpnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1MjYzOQ==", "bodyText": "Best to make these both final as well.", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444852639", "createdAt": "2020-06-24T12:19:56Z", "author": {"login": "Sanne"}, "path": "extensions/reactive-datasource/runtime/src/main/java/io/quarkus/reactive/datasource/runtime/ThreadLocalPool.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package io.quarkus.reactive.datasource.runtime;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Vertx;\n+import io.vertx.sqlclient.Pool;\n+import io.vertx.sqlclient.PoolOptions;\n+import io.vertx.sqlclient.PreparedQuery;\n+import io.vertx.sqlclient.Query;\n+import io.vertx.sqlclient.Row;\n+import io.vertx.sqlclient.RowSet;\n+import io.vertx.sqlclient.SqlConnection;\n+import io.vertx.sqlclient.Transaction;\n+\n+public abstract class ThreadLocalPool<PoolType extends Pool> implements Pool {\n+\n+    private static final Logger log = Logger.getLogger(ThreadLocalPool.class);\n+\n+    private ThreadLocal<PoolType> pool = new ThreadLocal<>();\n+    private static List<Pool> threadLocalPools = new ArrayList<>();\n+\n+    protected PoolOptions poolOptions;\n+    protected Vertx vertx;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTg0MDMyOnYy", "diffSide": "RIGHT", "path": "integration-tests/reactive-pg-client/src/test/resources/application-tl.properties", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjoyMzoyOVrOGoPxMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTo1MTo0MVrOGoYd9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1NDU3Ng==", "bodyText": "The configuration property isn't suggesting that it relates to an enhanced connection pool.\nMaybe threadlocal-pool ? Or pool-strategy= [enum: \"threadlocal\" | \"simple\" ] ?", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444854576", "createdAt": "2020-06-24T12:23:29Z", "author": {"login": "Sanne"}, "path": "integration-tests/reactive-pg-client/src/test/resources/application-tl.properties", "diffHunk": "@@ -0,0 +1,6 @@\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=hibernate_orm_test\n+quarkus.datasource.password=hibernate_orm_test\n+quarkus.datasource.reactive.url=${reactive-postgres.url}\n+quarkus.datasource.reactive.thread-local=true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2NTUyNA==", "bodyText": "Fair enough, but max-size also relates to the pool without saying it, so\u2026", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444865524", "createdAt": "2020-06-24T12:43:46Z", "author": {"login": "FroMage"}, "path": "integration-tests/reactive-pg-client/src/test/resources/application-tl.properties", "diffHunk": "@@ -0,0 +1,6 @@\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=hibernate_orm_test\n+quarkus.datasource.password=hibernate_orm_test\n+quarkus.datasource.reactive.url=${reactive-postgres.url}\n+quarkus.datasource.reactive.thread-local=true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1NDU3Ng=="}, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2OTE3Nw==", "bodyText": "@gsmet how would you name it? You recently refactored all datasource configuration right?", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444869177", "createdAt": "2020-06-24T12:50:34Z", "author": {"login": "Sanne"}, "path": "integration-tests/reactive-pg-client/src/test/resources/application-tl.properties", "diffHunk": "@@ -0,0 +1,6 @@\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=hibernate_orm_test\n+quarkus.datasource.password=hibernate_orm_test\n+quarkus.datasource.reactive.url=${reactive-postgres.url}\n+quarkus.datasource.reactive.thread-local=true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1NDU3Ng=="}, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk5NzExMA==", "bodyText": "I've un-blocked the PR. Let's go ahead with the feature as we need it asap for benchmarking, but I'd still like to revisit the configuration in a follow up.", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444997110", "createdAt": "2020-06-24T15:51:41Z", "author": {"login": "Sanne"}, "path": "integration-tests/reactive-pg-client/src/test/resources/application-tl.properties", "diffHunk": "@@ -0,0 +1,6 @@\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=hibernate_orm_test\n+quarkus.datasource.password=hibernate_orm_test\n+quarkus.datasource.reactive.url=${reactive-postgres.url}\n+quarkus.datasource.reactive.thread-local=true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1NDU3Ng=="}, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NTM0NTkwOnYy", "diffSide": "RIGHT", "path": "extensions/reactive-datasource/runtime/src/main/java/io/quarkus/reactive/datasource/runtime/ThreadLocalPool.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwOToxMDozMlrOGoyJFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwOTo0MToyNlrOGozPmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQxNzc0OQ==", "bodyText": "This could be a copy on write list and relieve from synchronization, given the list will not change often.", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r445417749", "createdAt": "2020-06-25T09:10:32Z", "author": {"login": "tsegismont"}, "path": "extensions/reactive-datasource/runtime/src/main/java/io/quarkus/reactive/datasource/runtime/ThreadLocalPool.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package io.quarkus.reactive.datasource.runtime;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Vertx;\n+import io.vertx.sqlclient.Pool;\n+import io.vertx.sqlclient.PoolOptions;\n+import io.vertx.sqlclient.PreparedQuery;\n+import io.vertx.sqlclient.Query;\n+import io.vertx.sqlclient.Row;\n+import io.vertx.sqlclient.RowSet;\n+import io.vertx.sqlclient.SqlConnection;\n+import io.vertx.sqlclient.Transaction;\n+\n+public abstract class ThreadLocalPool<PoolType extends Pool> implements Pool {\n+\n+    private static final Logger log = Logger.getLogger(ThreadLocalPool.class);\n+\n+    private final AtomicReference<ThreadLocal<PoolType>> pool = new AtomicReference<>(new ThreadLocal<>());\n+    private static final List<Pool> threadLocalPools = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2433d84651bbb714b4bafd8a2a2b8cf7734f36c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQzMDk5NQ==", "bodyText": "+1 that's probably a good idea.", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r445430995", "createdAt": "2020-06-25T09:33:07Z", "author": {"login": "Sanne"}, "path": "extensions/reactive-datasource/runtime/src/main/java/io/quarkus/reactive/datasource/runtime/ThreadLocalPool.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package io.quarkus.reactive.datasource.runtime;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Vertx;\n+import io.vertx.sqlclient.Pool;\n+import io.vertx.sqlclient.PoolOptions;\n+import io.vertx.sqlclient.PreparedQuery;\n+import io.vertx.sqlclient.Query;\n+import io.vertx.sqlclient.Row;\n+import io.vertx.sqlclient.RowSet;\n+import io.vertx.sqlclient.SqlConnection;\n+import io.vertx.sqlclient.Transaction;\n+\n+public abstract class ThreadLocalPool<PoolType extends Pool> implements Pool {\n+\n+    private static final Logger log = Logger.getLogger(ThreadLocalPool.class);\n+\n+    private final AtomicReference<ThreadLocal<PoolType>> pool = new AtomicReference<>(new ThreadLocal<>());\n+    private static final List<Pool> threadLocalPools = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQxNzc0OQ=="}, "originalCommit": {"oid": "d2433d84651bbb714b4bafd8a2a2b8cf7734f36c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQzMjU0OQ==", "bodyText": "BTW github UI seems confusing: we're now commenting on FroMage 's original PR but looking at the version of code I had modified further in a follow-up PR..  weird.", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r445432549", "createdAt": "2020-06-25T09:35:48Z", "author": {"login": "Sanne"}, "path": "extensions/reactive-datasource/runtime/src/main/java/io/quarkus/reactive/datasource/runtime/ThreadLocalPool.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package io.quarkus.reactive.datasource.runtime;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Vertx;\n+import io.vertx.sqlclient.Pool;\n+import io.vertx.sqlclient.PoolOptions;\n+import io.vertx.sqlclient.PreparedQuery;\n+import io.vertx.sqlclient.Query;\n+import io.vertx.sqlclient.Row;\n+import io.vertx.sqlclient.RowSet;\n+import io.vertx.sqlclient.SqlConnection;\n+import io.vertx.sqlclient.Transaction;\n+\n+public abstract class ThreadLocalPool<PoolType extends Pool> implements Pool {\n+\n+    private static final Logger log = Logger.getLogger(ThreadLocalPool.class);\n+\n+    private final AtomicReference<ThreadLocal<PoolType>> pool = new AtomicReference<>(new ThreadLocal<>());\n+    private static final List<Pool> threadLocalPools = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQxNzc0OQ=="}, "originalCommit": {"oid": "d2433d84651bbb714b4bafd8a2a2b8cf7734f36c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQzNTgwMA==", "bodyText": "ah nevermind, for some reason it looked like my follow up PR. Please check the new version, now in master ;)", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r445435800", "createdAt": "2020-06-25T09:41:26Z", "author": {"login": "Sanne"}, "path": "extensions/reactive-datasource/runtime/src/main/java/io/quarkus/reactive/datasource/runtime/ThreadLocalPool.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package io.quarkus.reactive.datasource.runtime;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Vertx;\n+import io.vertx.sqlclient.Pool;\n+import io.vertx.sqlclient.PoolOptions;\n+import io.vertx.sqlclient.PreparedQuery;\n+import io.vertx.sqlclient.Query;\n+import io.vertx.sqlclient.Row;\n+import io.vertx.sqlclient.RowSet;\n+import io.vertx.sqlclient.SqlConnection;\n+import io.vertx.sqlclient.Transaction;\n+\n+public abstract class ThreadLocalPool<PoolType extends Pool> implements Pool {\n+\n+    private static final Logger log = Logger.getLogger(ThreadLocalPool.class);\n+\n+    private final AtomicReference<ThreadLocal<PoolType>> pool = new AtomicReference<>(new ThreadLocal<>());\n+    private static final List<Pool> threadLocalPools = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQxNzc0OQ=="}, "originalCommit": {"oid": "d2433d84651bbb714b4bafd8a2a2b8cf7734f36c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NTM2MTAzOnYy", "diffSide": "RIGHT", "path": "extensions/reactive-datasource/runtime/src/main/java/io/quarkus/reactive/datasource/runtime/ThreadLocalPool.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwOToxNTowMlrOGoyS3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMzo1MjowOVrOGo7uGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQyMDI1Mw==", "bodyText": "Since you have an AtomicReference, you could use compare and swap and avoid adding a superfluous ThreadLocalPool to the list if two threads execute this part concurrently.", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r445420253", "createdAt": "2020-06-25T09:15:02Z", "author": {"login": "tsegismont"}, "path": "extensions/reactive-datasource/runtime/src/main/java/io/quarkus/reactive/datasource/runtime/ThreadLocalPool.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package io.quarkus.reactive.datasource.runtime;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Vertx;\n+import io.vertx.sqlclient.Pool;\n+import io.vertx.sqlclient.PoolOptions;\n+import io.vertx.sqlclient.PreparedQuery;\n+import io.vertx.sqlclient.Query;\n+import io.vertx.sqlclient.Row;\n+import io.vertx.sqlclient.RowSet;\n+import io.vertx.sqlclient.SqlConnection;\n+import io.vertx.sqlclient.Transaction;\n+\n+public abstract class ThreadLocalPool<PoolType extends Pool> implements Pool {\n+\n+    private static final Logger log = Logger.getLogger(ThreadLocalPool.class);\n+\n+    private final AtomicReference<ThreadLocal<PoolType>> pool = new AtomicReference<>(new ThreadLocal<>());\n+    private static final List<Pool> threadLocalPools = new ArrayList<>();\n+\n+    protected final PoolOptions poolOptions;\n+    protected final Vertx vertx;\n+\n+    public ThreadLocalPool(Vertx vertx, PoolOptions poolOptions) {\n+        this.vertx = vertx;\n+        this.poolOptions = poolOptions;\n+    }\n+\n+    private PoolType pool() {\n+        ThreadLocal<PoolType> poolThreadLocal = pool.get();\n+        PoolType ret = poolThreadLocal.get();\n+        if (ret == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2433d84651bbb714b4bafd8a2a2b8cf7734f36c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ3MzQ2Mw==", "bodyText": "+1 I've done something similar in the follow-up PR, I was more concerned about making sure we'd not leak than getting most performance out of it: having chatted with @johnaohara we believe there's actually room for a better design (similar to what Agroal and Hikari have) and we should do that, but then contribute it into the pgclient project.", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r445473463", "createdAt": "2020-06-25T10:53:43Z", "author": {"login": "Sanne"}, "path": "extensions/reactive-datasource/runtime/src/main/java/io/quarkus/reactive/datasource/runtime/ThreadLocalPool.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package io.quarkus.reactive.datasource.runtime;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Vertx;\n+import io.vertx.sqlclient.Pool;\n+import io.vertx.sqlclient.PoolOptions;\n+import io.vertx.sqlclient.PreparedQuery;\n+import io.vertx.sqlclient.Query;\n+import io.vertx.sqlclient.Row;\n+import io.vertx.sqlclient.RowSet;\n+import io.vertx.sqlclient.SqlConnection;\n+import io.vertx.sqlclient.Transaction;\n+\n+public abstract class ThreadLocalPool<PoolType extends Pool> implements Pool {\n+\n+    private static final Logger log = Logger.getLogger(ThreadLocalPool.class);\n+\n+    private final AtomicReference<ThreadLocal<PoolType>> pool = new AtomicReference<>(new ThreadLocal<>());\n+    private static final List<Pool> threadLocalPools = new ArrayList<>();\n+\n+    protected final PoolOptions poolOptions;\n+    protected final Vertx vertx;\n+\n+    public ThreadLocalPool(Vertx vertx, PoolOptions poolOptions) {\n+        this.vertx = vertx;\n+        this.poolOptions = poolOptions;\n+    }\n+\n+    private PoolType pool() {\n+        ThreadLocal<PoolType> poolThreadLocal = pool.get();\n+        PoolType ret = poolThreadLocal.get();\n+        if (ret == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQyMDI1Mw=="}, "originalCommit": {"oid": "d2433d84651bbb714b4bafd8a2a2b8cf7734f36c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3NDY4Mg==", "bodyText": "Ok, looking forward to it", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r445574682", "createdAt": "2020-06-25T13:52:09Z", "author": {"login": "tsegismont"}, "path": "extensions/reactive-datasource/runtime/src/main/java/io/quarkus/reactive/datasource/runtime/ThreadLocalPool.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package io.quarkus.reactive.datasource.runtime;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Vertx;\n+import io.vertx.sqlclient.Pool;\n+import io.vertx.sqlclient.PoolOptions;\n+import io.vertx.sqlclient.PreparedQuery;\n+import io.vertx.sqlclient.Query;\n+import io.vertx.sqlclient.Row;\n+import io.vertx.sqlclient.RowSet;\n+import io.vertx.sqlclient.SqlConnection;\n+import io.vertx.sqlclient.Transaction;\n+\n+public abstract class ThreadLocalPool<PoolType extends Pool> implements Pool {\n+\n+    private static final Logger log = Logger.getLogger(ThreadLocalPool.class);\n+\n+    private final AtomicReference<ThreadLocal<PoolType>> pool = new AtomicReference<>(new ThreadLocal<>());\n+    private static final List<Pool> threadLocalPools = new ArrayList<>();\n+\n+    protected final PoolOptions poolOptions;\n+    protected final Vertx vertx;\n+\n+    public ThreadLocalPool(Vertx vertx, PoolOptions poolOptions) {\n+        this.vertx = vertx;\n+        this.poolOptions = poolOptions;\n+    }\n+\n+    private PoolType pool() {\n+        ThreadLocal<PoolType> poolThreadLocal = pool.get();\n+        PoolType ret = poolThreadLocal.get();\n+        if (ret == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQyMDI1Mw=="}, "originalCommit": {"oid": "d2433d84651bbb714b4bafd8a2a2b8cf7734f36c"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2628, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}