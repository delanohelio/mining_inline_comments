{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzOTcyMjU0", "number": 8175, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwOToxODo0MFrODrjgkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTowMDozMlrODtDhHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTk3MTM5OnYy", "diffSide": "RIGHT", "path": "integration-tests/main/src/test/java/io/quarkus/it/main/MockTestCase.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwOToxODo0MFrOF79rKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwOToyNjowN1rOF7997A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQyMDc3OA==", "bodyText": "You could just use QuarkusMock.installMock(mockableBean1, new HiGreeter()), right?", "url": "https://github.com/quarkusio/quarkus/pull/8175#discussion_r398420778", "createdAt": "2020-03-26T09:18:40Z", "author": {"login": "mkouba"}, "path": "integration-tests/main/src/test/java/io/quarkus/it/main/MockTestCase.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package io.quarkus.it.main;\n+\n+import javax.enterprise.inject.spi.CDI;\n+import javax.inject.Inject;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.it.mock.MockableBean1;\n+import io.quarkus.it.mock.MockableBean2;\n+import io.quarkus.test.junit.MockSupport;\n+import io.quarkus.test.junit.QuarkusMock;\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+@QuarkusTest\n+public class MockTestCase {\n+\n+    protected static final String HI = \"Hi \";\n+    protected static final String BONJOUR = \"Bonjour \";\n+\n+    @Inject\n+    MockableBean1 mockableBean1;\n+\n+    @Inject\n+    MockableBean2 mockableBean2;\n+\n+    @BeforeAll\n+    public static void setup() {\n+        QuarkusMock.installMock(CDI.current().select(MockableBean1.class).get(), new HiGreeter());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b8c09ff85b9a185b39abe3a7eac7dab76ca49a0"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQyMzg1NA==", "bodyText": "It's a static method", "url": "https://github.com/quarkusio/quarkus/pull/8175#discussion_r398423854", "createdAt": "2020-03-26T09:23:30Z", "author": {"login": "stuartwdouglas"}, "path": "integration-tests/main/src/test/java/io/quarkus/it/main/MockTestCase.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package io.quarkus.it.main;\n+\n+import javax.enterprise.inject.spi.CDI;\n+import javax.inject.Inject;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.it.mock.MockableBean1;\n+import io.quarkus.it.mock.MockableBean2;\n+import io.quarkus.test.junit.MockSupport;\n+import io.quarkus.test.junit.QuarkusMock;\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+@QuarkusTest\n+public class MockTestCase {\n+\n+    protected static final String HI = \"Hi \";\n+    protected static final String BONJOUR = \"Bonjour \";\n+\n+    @Inject\n+    MockableBean1 mockableBean1;\n+\n+    @Inject\n+    MockableBean2 mockableBean2;\n+\n+    @BeforeAll\n+    public static void setup() {\n+        QuarkusMock.installMock(CDI.current().select(MockableBean1.class).get(), new HiGreeter());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQyMDc3OA=="}, "originalCommit": {"oid": "8b8c09ff85b9a185b39abe3a7eac7dab76ca49a0"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQyNTQzOA==", "bodyText": "I see. That's not very nice though. How about specifying the required type/qualifiers, i.e. in this case something like QuarkusMock.installMock(MockableBean1.class, new HiGreeter())?", "url": "https://github.com/quarkusio/quarkus/pull/8175#discussion_r398425438", "createdAt": "2020-03-26T09:25:52Z", "author": {"login": "mkouba"}, "path": "integration-tests/main/src/test/java/io/quarkus/it/main/MockTestCase.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package io.quarkus.it.main;\n+\n+import javax.enterprise.inject.spi.CDI;\n+import javax.inject.Inject;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.it.mock.MockableBean1;\n+import io.quarkus.it.mock.MockableBean2;\n+import io.quarkus.test.junit.MockSupport;\n+import io.quarkus.test.junit.QuarkusMock;\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+@QuarkusTest\n+public class MockTestCase {\n+\n+    protected static final String HI = \"Hi \";\n+    protected static final String BONJOUR = \"Bonjour \";\n+\n+    @Inject\n+    MockableBean1 mockableBean1;\n+\n+    @Inject\n+    MockableBean2 mockableBean2;\n+\n+    @BeforeAll\n+    public static void setup() {\n+        QuarkusMock.installMock(CDI.current().select(MockableBean1.class).get(), new HiGreeter());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQyMDc3OA=="}, "originalCommit": {"oid": "8b8c09ff85b9a185b39abe3a7eac7dab76ca49a0"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQyNTU4MA==", "bodyText": "And do the lookup under the hood.", "url": "https://github.com/quarkusio/quarkus/pull/8175#discussion_r398425580", "createdAt": "2020-03-26T09:26:07Z", "author": {"login": "mkouba"}, "path": "integration-tests/main/src/test/java/io/quarkus/it/main/MockTestCase.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package io.quarkus.it.main;\n+\n+import javax.enterprise.inject.spi.CDI;\n+import javax.inject.Inject;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.it.mock.MockableBean1;\n+import io.quarkus.it.mock.MockableBean2;\n+import io.quarkus.test.junit.MockSupport;\n+import io.quarkus.test.junit.QuarkusMock;\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+@QuarkusTest\n+public class MockTestCase {\n+\n+    protected static final String HI = \"Hi \";\n+    protected static final String BONJOUR = \"Bonjour \";\n+\n+    @Inject\n+    MockableBean1 mockableBean1;\n+\n+    @Inject\n+    MockableBean2 mockableBean2;\n+\n+    @BeforeAll\n+    public static void setup() {\n+        QuarkusMock.installMock(CDI.current().select(MockableBean1.class).get(), new HiGreeter());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQyMDc3OA=="}, "originalCommit": {"oid": "8b8c09ff85b9a185b39abe3a7eac7dab76ca49a0"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTk5MDM4OnYy", "diffSide": "RIGHT", "path": "integration-tests/main/src/test/java/io/quarkus/it/main/MockTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwOToyMzoxNVrOF792hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwOTo1OTozMVrOF7_SUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQyMzY4Nw==", "bodyText": "MockSupport is not part of the user API, or? In fact, it could be package-private...", "url": "https://github.com/quarkusio/quarkus/pull/8175#discussion_r398423687", "createdAt": "2020-03-26T09:23:15Z", "author": {"login": "mkouba"}, "path": "integration-tests/main/src/test/java/io/quarkus/it/main/MockTestCase.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package io.quarkus.it.main;\n+\n+import javax.enterprise.inject.spi.CDI;\n+import javax.inject.Inject;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.it.mock.MockableBean1;\n+import io.quarkus.it.mock.MockableBean2;\n+import io.quarkus.test.junit.MockSupport;\n+import io.quarkus.test.junit.QuarkusMock;\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+@QuarkusTest\n+public class MockTestCase {\n+\n+    protected static final String HI = \"Hi \";\n+    protected static final String BONJOUR = \"Bonjour \";\n+\n+    @Inject\n+    MockableBean1 mockableBean1;\n+\n+    @Inject\n+    MockableBean2 mockableBean2;\n+\n+    @BeforeAll\n+    public static void setup() {\n+        QuarkusMock.installMock(CDI.current().select(MockableBean1.class).get(), new HiGreeter());\n+    }\n+\n+    @Test\n+    public void testBeforeAll() {\n+        Assertions.assertEquals(\"Hi Stuart\", mockableBean1.greet(\"Stuart\"));\n+        Assertions.assertEquals(\"Hello Stuart\", mockableBean2.greet(\"Stuart\"));\n+    }\n+\n+    @Test\n+    public void testPerTestMock() {\n+        MockSupport.installMock(mockableBean2, new BonourGreeter());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b8c09ff85b9a185b39abe3a7eac7dab76ca49a0"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ0NzE4NA==", "bodyText": "Yea, it should be. Originally this was in the common module and I did not update it.", "url": "https://github.com/quarkusio/quarkus/pull/8175#discussion_r398447184", "createdAt": "2020-03-26T09:59:31Z", "author": {"login": "stuartwdouglas"}, "path": "integration-tests/main/src/test/java/io/quarkus/it/main/MockTestCase.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package io.quarkus.it.main;\n+\n+import javax.enterprise.inject.spi.CDI;\n+import javax.inject.Inject;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.it.mock.MockableBean1;\n+import io.quarkus.it.mock.MockableBean2;\n+import io.quarkus.test.junit.MockSupport;\n+import io.quarkus.test.junit.QuarkusMock;\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+@QuarkusTest\n+public class MockTestCase {\n+\n+    protected static final String HI = \"Hi \";\n+    protected static final String BONJOUR = \"Bonjour \";\n+\n+    @Inject\n+    MockableBean1 mockableBean1;\n+\n+    @Inject\n+    MockableBean2 mockableBean2;\n+\n+    @BeforeAll\n+    public static void setup() {\n+        QuarkusMock.installMock(CDI.current().select(MockableBean1.class).get(), new HiGreeter());\n+    }\n+\n+    @Test\n+    public void testBeforeAll() {\n+        Assertions.assertEquals(\"Hi Stuart\", mockableBean1.greet(\"Stuart\"));\n+        Assertions.assertEquals(\"Hello Stuart\", mockableBean2.greet(\"Stuart\"));\n+    }\n+\n+    @Test\n+    public void testPerTestMock() {\n+        MockSupport.installMock(mockableBean2, new BonourGreeter());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQyMzY4Nw=="}, "originalCommit": {"oid": "8b8c09ff85b9a185b39abe3a7eac7dab76ca49a0"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDg0NjQ0OnYy", "diffSide": "RIGHT", "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusTestExtension.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMToxMToxNVrOF8sqdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMToxMToxNVrOF8sqdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE5MDY0Nw==", "bodyText": "This method should probably be called after the failedBoot because if we do fail to boot, pushMockContext (and popMockContext will throw a NPE, thus masking the real problem)", "url": "https://github.com/quarkusio/quarkus/pull/8175#discussion_r399190647", "createdAt": "2020-03-27T11:11:15Z", "author": {"login": "geoand"}, "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusTestExtension.java", "diffHunk": "@@ -176,6 +177,7 @@ public void beforeEach(ExtensionContext context) throws Exception {\n         if (isNativeTest(context)) {\n             return;\n         }\n+        pushMockContext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ced4ac427af5a16af87d0d9055f79e6dcbf2d8c3"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDI3MzM3OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/getting-started-testing.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMjowNjozMVrOF-Cr3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMjowNjozMVrOF-Cr3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYwMDAyOQ==", "bodyText": "typo", "url": "https://github.com/quarkusio/quarkus/pull/8175#discussion_r400600029", "createdAt": "2020-03-31T02:06:31Z", "author": {"login": "paraita"}, "path": "docs/src/main/asciidoc/getting-started-testing.adoc", "diffHunk": "@@ -302,7 +302,11 @@ public class TestStereotypeTestCase {\n \n == Mock Support\n \n-Quarkus supports the use of mock objects using the CDI `@Alternative` mechanism.\n+Quarkus supports the use of mock objects using two different apporoaches. You can either use CDI alternatives to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db2f00d2fdfe58dba21d67ae611007d4ff6387f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTcwMTQyOnYy", "diffSide": "RIGHT", "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusMock.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTowMDozMlrOF-QVRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo0MTozN1rOF-2hEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgyMzYyMg==", "bodyText": "We should probably add a check that the instance is an instance of io.quarkus.arc.ClientProxy and throw an IAE if it's not? I know that we throw a RuntimeException inside the MockSupport but it would be probably better to fail fast.", "url": "https://github.com/quarkusio/quarkus/pull/8175#discussion_r400823622", "createdAt": "2020-03-31T11:00:32Z", "author": {"login": "mkouba"}, "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusMock.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.quarkus.test.junit;\n+\n+import java.lang.annotation.Annotation;\n+\n+import javax.enterprise.inject.spi.CDI;\n+\n+import org.junit.jupiter.api.TestInstance;\n+\n+/**\n+ * Utility class that can be used to mock CDI normal scoped beans.\n+ * \n+ * This includes beans that are {@link javax.enterprise.context.ApplicationScoped} and\n+ * {@link javax.enterprise.context.RequestScoped}.\n+ * \n+ * To use this inject the bean into a test, and then invoke the mock\n+ * method with your mock.\n+ *\n+ * Mocks installed in {@link org.junit.jupiter.api.BeforeAll} will be present for every test,\n+ * while mocks installed within a test are cleared after the test has run. Note that you will\n+ * likely need to use {@link TestInstance.Lifecycle#PER_CLASS} to have a non-static before all method\n+ * that can access injected beans.\n+ *\n+ * Note that as the bean is replaced globally you cannot use parallel test execution, as this will\n+ * result in race conditions where mocks from one test are active in another.\n+ *\n+ */\n+public class QuarkusMock {\n+\n+    /**\n+     * Installs a mock for a CDI normal scoped bean\n+     *\n+     * @param mock The mock object\n+     * @param instance The CDI normal scoped bean that was injected into your test\n+     * @param <T> The bean type\n+     */\n+    public static <T> void installMockForInstance(T mock, T instance) {\n+        //mock support does the actual work, but exposes other methods that are not part of the user API\n+        MockSupport.installMock(instance, mock);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd14e8821d08af37a22d5e052fa70251a12ba7ec"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5Njg3MQ==", "bodyText": "It does not make any real difference, and this is significantly more complex than it sounds, as MockSupport is inside the application class loader. This would mean a lot of extra logic to duplicate a check that is done first thing in the method call.", "url": "https://github.com/quarkusio/quarkus/pull/8175#discussion_r401196871", "createdAt": "2020-03-31T20:32:35Z", "author": {"login": "stuartwdouglas"}, "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusMock.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.quarkus.test.junit;\n+\n+import java.lang.annotation.Annotation;\n+\n+import javax.enterprise.inject.spi.CDI;\n+\n+import org.junit.jupiter.api.TestInstance;\n+\n+/**\n+ * Utility class that can be used to mock CDI normal scoped beans.\n+ * \n+ * This includes beans that are {@link javax.enterprise.context.ApplicationScoped} and\n+ * {@link javax.enterprise.context.RequestScoped}.\n+ * \n+ * To use this inject the bean into a test, and then invoke the mock\n+ * method with your mock.\n+ *\n+ * Mocks installed in {@link org.junit.jupiter.api.BeforeAll} will be present for every test,\n+ * while mocks installed within a test are cleared after the test has run. Note that you will\n+ * likely need to use {@link TestInstance.Lifecycle#PER_CLASS} to have a non-static before all method\n+ * that can access injected beans.\n+ *\n+ * Note that as the bean is replaced globally you cannot use parallel test execution, as this will\n+ * result in race conditions where mocks from one test are active in another.\n+ *\n+ */\n+public class QuarkusMock {\n+\n+    /**\n+     * Installs a mock for a CDI normal scoped bean\n+     *\n+     * @param mock The mock object\n+     * @param instance The CDI normal scoped bean that was injected into your test\n+     * @param <T> The bean type\n+     */\n+    public static <T> void installMockForInstance(T mock, T instance) {\n+        //mock support does the actual work, but exposes other methods that are not part of the user API\n+        MockSupport.installMock(instance, mock);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgyMzYyMg=="}, "originalCommit": {"oid": "bd14e8821d08af37a22d5e052fa70251a12ba7ec"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0OTIzNA==", "bodyText": "Ok.", "url": "https://github.com/quarkusio/quarkus/pull/8175#discussion_r401449234", "createdAt": "2020-04-01T08:41:37Z", "author": {"login": "mkouba"}, "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusMock.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package io.quarkus.test.junit;\n+\n+import java.lang.annotation.Annotation;\n+\n+import javax.enterprise.inject.spi.CDI;\n+\n+import org.junit.jupiter.api.TestInstance;\n+\n+/**\n+ * Utility class that can be used to mock CDI normal scoped beans.\n+ * \n+ * This includes beans that are {@link javax.enterprise.context.ApplicationScoped} and\n+ * {@link javax.enterprise.context.RequestScoped}.\n+ * \n+ * To use this inject the bean into a test, and then invoke the mock\n+ * method with your mock.\n+ *\n+ * Mocks installed in {@link org.junit.jupiter.api.BeforeAll} will be present for every test,\n+ * while mocks installed within a test are cleared after the test has run. Note that you will\n+ * likely need to use {@link TestInstance.Lifecycle#PER_CLASS} to have a non-static before all method\n+ * that can access injected beans.\n+ *\n+ * Note that as the bean is replaced globally you cannot use parallel test execution, as this will\n+ * result in race conditions where mocks from one test are active in another.\n+ *\n+ */\n+public class QuarkusMock {\n+\n+    /**\n+     * Installs a mock for a CDI normal scoped bean\n+     *\n+     * @param mock The mock object\n+     * @param instance The CDI normal scoped bean that was injected into your test\n+     * @param <T> The bean type\n+     */\n+    public static <T> void installMockForInstance(T mock, T instance) {\n+        //mock support does the actual work, but exposes other methods that are not part of the user API\n+        MockSupport.installMock(instance, mock);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgyMzYyMg=="}, "originalCommit": {"oid": "bd14e8821d08af37a22d5e052fa70251a12ba7ec"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4635, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}