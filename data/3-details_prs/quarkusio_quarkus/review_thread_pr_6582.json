{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNTYyNzcy", "number": 6582, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMDoxOToxMFrODYdCqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMToxODo1M1rODYpR4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTY4MjMzOnYy", "diffSide": "RIGHT", "path": "extensions/kubernetes/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMDoxOToxMFrOFeUeBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMTo1MTo0MlrOFeW3xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMzNjk2Nw==", "bodyText": "How about making this a Set so contains will be O(1) complexity?", "url": "https://github.com/quarkusio/quarkus/pull/6582#discussion_r367336967", "createdAt": "2020-01-16T10:19:10Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "diffHunk": "@@ -51,7 +51,8 @@\n class KubernetesProcessor {\n \n     private static final String PROPERTY_PREFIX = \"dekorate.\";\n-    private static final String ALLOWED_GENERATOR = \"kubernetes\";\n+    private static final List<String> ALLOWED_GENERATORS = Arrays.asList(\"kubernetes\", \"openshift\", \"knative\", \"docker\", \"s2i\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8a82f151abc7630c3f0cd673365caa200f0cb29"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM3NjMyNw==", "bodyText": "Done", "url": "https://github.com/quarkusio/quarkus/pull/6582#discussion_r367376327", "createdAt": "2020-01-16T11:51:42Z", "author": {"login": "iocanel"}, "path": "extensions/kubernetes/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "diffHunk": "@@ -51,7 +51,8 @@\n class KubernetesProcessor {\n \n     private static final String PROPERTY_PREFIX = \"dekorate.\";\n-    private static final String ALLOWED_GENERATOR = \"kubernetes\";\n+    private static final List<String> ALLOWED_GENERATORS = Arrays.asList(\"kubernetes\", \"openshift\", \"knative\", \"docker\", \"s2i\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMzNjk2Nw=="}, "originalCommit": {"oid": "f8a82f151abc7630c3f0cd673365caa200f0cb29"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTkzOTQyOnYy", "diffSide": "RIGHT", "path": "extensions/kubernetes/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMTo1NDoxOVrOFeW7tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMTo1NDoxOVrOFeW7tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM3NzMzNQ==", "bodyText": "Just nitpicking here, but the codebase generally shies away from this syntax and uses the more verbose new HashSet(Arrays.asList())", "url": "https://github.com/quarkusio/quarkus/pull/6582#discussion_r367377335", "createdAt": "2020-01-16T11:54:19Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "diffHunk": "@@ -51,7 +51,22 @@\n class KubernetesProcessor {\n \n     private static final String PROPERTY_PREFIX = \"dekorate.\";\n-    private static final String ALLOWED_GENERATOR = \"kubernetes\";\n+    private static final Set<String> ALLOWED_GENERATORS = new HashSet<String>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea34827db1d39438e8efea18e012860c7ce17d4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTY4Njg3OnYy", "diffSide": "RIGHT", "path": "extensions/kubernetes/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMToxODo0MlrOFen4Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwNzo0NDoxMFrOFfVjqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY1NDk5NA==", "bodyText": "Does this comment still apply?", "url": "https://github.com/quarkusio/quarkus/pull/6582#discussion_r367654994", "createdAt": "2020-01-16T21:18:42Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "diffHunk": "@@ -97,18 +99,25 @@ public void build(ApplicationInfoBuildItem applicationInfo,\n                 .collect(Collectors.toList());\n \n         Map<String, Object> configAsMap = StreamSupport.stream(config.getPropertyNames().spliterator(), false)\n-                .filter(k -> ALLOWED_GENERATOR.equals(generatorName(k)))\n+                .filter(k -> ALLOWED_GENERATORS.contains(generatorName(k)))\n                 .collect(Collectors.toMap(k -> PROPERTY_PREFIX + k, k -> config.getValue(k, String.class)));\n+\n         // this is a hack to get kubernetes.registry working because currently it's not supported as is in Dekorate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bff3e11458c9fa6e761db00c3a8c11400e0cd31"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc5ODkxNQ==", "bodyText": "I don't remember why it was initially added.", "url": "https://github.com/quarkusio/quarkus/pull/6582#discussion_r367798915", "createdAt": "2020-01-17T07:25:38Z", "author": {"login": "iocanel"}, "path": "extensions/kubernetes/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "diffHunk": "@@ -97,18 +99,25 @@ public void build(ApplicationInfoBuildItem applicationInfo,\n                 .collect(Collectors.toList());\n \n         Map<String, Object> configAsMap = StreamSupport.stream(config.getPropertyNames().spliterator(), false)\n-                .filter(k -> ALLOWED_GENERATOR.equals(generatorName(k)))\n+                .filter(k -> ALLOWED_GENERATORS.contains(generatorName(k)))\n                 .collect(Collectors.toMap(k -> PROPERTY_PREFIX + k, k -> config.getValue(k, String.class)));\n+\n         // this is a hack to get kubernetes.registry working because currently it's not supported as is in Dekorate", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY1NDk5NA=="}, "originalCommit": {"oid": "6bff3e11458c9fa6e761db00c3a8c11400e0cd31"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgxMzM1OQ==", "bodyText": "I had added it because setting kubernetes.registry was not having an effect. I assume this has been fixed now? If so, the comment is no longer needed", "url": "https://github.com/quarkusio/quarkus/pull/6582#discussion_r367813359", "createdAt": "2020-01-17T08:17:02Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "diffHunk": "@@ -97,18 +99,25 @@ public void build(ApplicationInfoBuildItem applicationInfo,\n                 .collect(Collectors.toList());\n \n         Map<String, Object> configAsMap = StreamSupport.stream(config.getPropertyNames().spliterator(), false)\n-                .filter(k -> ALLOWED_GENERATOR.equals(generatorName(k)))\n+                .filter(k -> ALLOWED_GENERATORS.contains(generatorName(k)))\n                 .collect(Collectors.toMap(k -> PROPERTY_PREFIX + k, k -> config.getValue(k, String.class)));\n+\n         // this is a hack to get kubernetes.registry working because currently it's not supported as is in Dekorate", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY1NDk5NA=="}, "originalCommit": {"oid": "6bff3e11458c9fa6e761db00c3a8c11400e0cd31"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwMzM3MQ==", "bodyText": "OK, let's leave it for now", "url": "https://github.com/quarkusio/quarkus/pull/6582#discussion_r368403371", "createdAt": "2020-01-20T07:44:10Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "diffHunk": "@@ -97,18 +99,25 @@ public void build(ApplicationInfoBuildItem applicationInfo,\n                 .collect(Collectors.toList());\n \n         Map<String, Object> configAsMap = StreamSupport.stream(config.getPropertyNames().spliterator(), false)\n-                .filter(k -> ALLOWED_GENERATOR.equals(generatorName(k)))\n+                .filter(k -> ALLOWED_GENERATORS.contains(generatorName(k)))\n                 .collect(Collectors.toMap(k -> PROPERTY_PREFIX + k, k -> config.getValue(k, String.class)));\n+\n         // this is a hack to get kubernetes.registry working because currently it's not supported as is in Dekorate", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY1NDk5NA=="}, "originalCommit": {"oid": "6bff3e11458c9fa6e761db00c3a8c11400e0cd31"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTY4NzM3OnYy", "diffSide": "RIGHT", "path": "extensions/kubernetes/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMToxODo1M1rOFen4nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMToxODo1M1rOFen4nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY1NTA3MQ==", "bodyText": "Same for this", "url": "https://github.com/quarkusio/quarkus/pull/6582#discussion_r367655071", "createdAt": "2020-01-16T21:18:53Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "diffHunk": "@@ -97,18 +99,25 @@ public void build(ApplicationInfoBuildItem applicationInfo,\n                 .collect(Collectors.toList());\n \n         Map<String, Object> configAsMap = StreamSupport.stream(config.getPropertyNames().spliterator(), false)\n-                .filter(k -> ALLOWED_GENERATOR.equals(generatorName(k)))\n+                .filter(k -> ALLOWED_GENERATORS.contains(generatorName(k)))\n                 .collect(Collectors.toMap(k -> PROPERTY_PREFIX + k, k -> config.getValue(k, String.class)));\n+\n         // this is a hack to get kubernetes.registry working because currently it's not supported as is in Dekorate\n-        Optional<String> kubernetesRegistry = config.getOptionalValue(ALLOWED_GENERATOR + \".registry\", String.class);\n-        if (kubernetesRegistry.isPresent()) {\n-            System.setProperty(DOCKER_REGISTRY_PROPERTY, kubernetesRegistry.get());\n-        }\n+        Optional<String> dockerRegistry = IMAGE_GENERATORS.stream()\n+                .map(g -> config.getOptionalValue(g + \".registry\", String.class))\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .findFirst();\n+\n+        dockerRegistry.ifPresent(v -> System.setProperty(DOCKER_REGISTRY_PROPERTY, v));\n+\n         // this is a hack to work around Dekorate using the default group for some of the properties", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bff3e11458c9fa6e761db00c3a8c11400e0cd31"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1222, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}