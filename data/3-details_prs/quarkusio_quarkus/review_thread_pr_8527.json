{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxOTc0NTYw", "number": 8527, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjoyNDoxNlrODwyx5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjoyNDoxNlrODwyx5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDkwMjEyOnYy", "diffSide": "RIGHT", "path": "extensions/container-image/container-image-docker/deployment/src/main/java/io/quarkus/container/image/docker/deployment/DockerWorking.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjoyNDoxNlrOGD_G9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjozMDoxM1rOGD_Qhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMjg4Nw==", "bodyText": "This returns a single line and can be faster than reading the whole output of docker help\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (!ExecUtil.execSilent(\"docker\", \"help\")) {\n          \n          \n            \n                        if (!ExecUtil.execSilent(\"docker\", \"-v\")) {", "url": "https://github.com/quarkusio/quarkus/pull/8527#discussion_r406832887", "createdAt": "2020-04-10T16:24:16Z", "author": {"login": "gastaldi"}, "path": "extensions/container-image/container-image-docker/deployment/src/main/java/io/quarkus/container/image/docker/deployment/DockerWorking.java", "diffHunk": "@@ -11,38 +11,35 @@\n \n import org.jboss.logging.Logger;\n \n-import io.quarkus.container.image.deployment.ContainerImageConfig;\n import io.quarkus.deployment.util.ExecUtil;\n \n-public class DockerBuild implements BooleanSupplier {\n+public class DockerWorking implements BooleanSupplier {\n \n-    private static final Logger LOGGER = Logger.getLogger(DockerBuild.class.getName());\n-    private static boolean daemonFound = false;\n-\n-    private final ContainerImageConfig containerImageConfig;\n-\n-    public DockerBuild(ContainerImageConfig containerImageConfig) {\n-        this.containerImageConfig = containerImageConfig;\n-    }\n+    private static final Logger LOGGER = Logger.getLogger(DockerWorking.class.getName());\n \n     @Override\n     public boolean getAsBoolean() {\n-        // No need to perform the check multiple times.\n-        if (daemonFound) {\n-            return true;\n+        try {\n+            if (!ExecUtil.execSilent(\"docker\", \"help\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6f040744c4d595a2c1fe41c723d798d8855f8f1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzNDgxMw==", "bodyText": "Good suggestion! I was looking for something like that and I totally missed it!", "url": "https://github.com/quarkusio/quarkus/pull/8527#discussion_r406834813", "createdAt": "2020-04-10T16:28:58Z", "author": {"login": "geoand"}, "path": "extensions/container-image/container-image-docker/deployment/src/main/java/io/quarkus/container/image/docker/deployment/DockerWorking.java", "diffHunk": "@@ -11,38 +11,35 @@\n \n import org.jboss.logging.Logger;\n \n-import io.quarkus.container.image.deployment.ContainerImageConfig;\n import io.quarkus.deployment.util.ExecUtil;\n \n-public class DockerBuild implements BooleanSupplier {\n+public class DockerWorking implements BooleanSupplier {\n \n-    private static final Logger LOGGER = Logger.getLogger(DockerBuild.class.getName());\n-    private static boolean daemonFound = false;\n-\n-    private final ContainerImageConfig containerImageConfig;\n-\n-    public DockerBuild(ContainerImageConfig containerImageConfig) {\n-        this.containerImageConfig = containerImageConfig;\n-    }\n+    private static final Logger LOGGER = Logger.getLogger(DockerWorking.class.getName());\n \n     @Override\n     public boolean getAsBoolean() {\n-        // No need to perform the check multiple times.\n-        if (daemonFound) {\n-            return true;\n+        try {\n+            if (!ExecUtil.execSilent(\"docker\", \"help\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMjg4Nw=="}, "originalCommit": {"oid": "a6f040744c4d595a2c1fe41c723d798d8855f8f1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzNTMzNA==", "bodyText": "Fixed", "url": "https://github.com/quarkusio/quarkus/pull/8527#discussion_r406835334", "createdAt": "2020-04-10T16:30:13Z", "author": {"login": "geoand"}, "path": "extensions/container-image/container-image-docker/deployment/src/main/java/io/quarkus/container/image/docker/deployment/DockerWorking.java", "diffHunk": "@@ -11,38 +11,35 @@\n \n import org.jboss.logging.Logger;\n \n-import io.quarkus.container.image.deployment.ContainerImageConfig;\n import io.quarkus.deployment.util.ExecUtil;\n \n-public class DockerBuild implements BooleanSupplier {\n+public class DockerWorking implements BooleanSupplier {\n \n-    private static final Logger LOGGER = Logger.getLogger(DockerBuild.class.getName());\n-    private static boolean daemonFound = false;\n-\n-    private final ContainerImageConfig containerImageConfig;\n-\n-    public DockerBuild(ContainerImageConfig containerImageConfig) {\n-        this.containerImageConfig = containerImageConfig;\n-    }\n+    private static final Logger LOGGER = Logger.getLogger(DockerWorking.class.getName());\n \n     @Override\n     public boolean getAsBoolean() {\n-        // No need to perform the check multiple times.\n-        if (daemonFound) {\n-            return true;\n+        try {\n+            if (!ExecUtil.execSilent(\"docker\", \"help\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMjg4Nw=="}, "originalCommit": {"oid": "a6f040744c4d595a2c1fe41c723d798d8855f8f1"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3474, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}