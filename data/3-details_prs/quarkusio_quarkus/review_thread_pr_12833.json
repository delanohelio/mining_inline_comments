{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2OTMzMzI4", "number": 12833, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMToyMzo1M1rOEwuE3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMToyMzo1M1rOEwuE3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTIyMDE0OnYy", "diffSide": "RIGHT", "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/health/RedisHealthCheck.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMToyMzo1M1rOHmc_fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTowODo1MFrOHoeblw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA4Mjk0Mg==", "bodyText": "So we're not exactly on par with the MongoDB impl here where the name of the default reactive client is different?", "url": "https://github.com/quarkusio/quarkus/pull/12833#discussion_r510082942", "createdAt": "2020-10-22T11:23:53Z", "author": {"login": "gsmet"}, "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/health/RedisHealthCheck.java", "diffHunk": "@@ -17,41 +18,87 @@\n import org.eclipse.microprofile.health.Readiness;\n \n import io.quarkus.arc.Arc;\n+import io.quarkus.arc.InstanceHandle;\n import io.quarkus.redis.client.RedisClient;\n+import io.quarkus.redis.client.RedisClientName;\n+import io.quarkus.redis.client.reactive.ReactiveRedisClient;\n+import io.quarkus.redis.client.runtime.RedisClientUtil;\n+import io.quarkus.redis.client.runtime.RedisConfig;\n+import io.quarkus.redis.client.runtime.RedisConfig.RedisConfiguration;\n import io.vertx.redis.client.Response;\n \n @Readiness\n @ApplicationScoped\n class RedisHealthCheck implements HealthCheck {\n-    private Map<String, RedisClient> clients = new HashMap<>();\n+    private final Map<String, RedisClient> clients = new HashMap<>();\n+    private final Map<String, ReactiveRedisClient> reactiveClients = new HashMap<>();\n+    private final RedisConfig redisConfig;\n+\n+    public RedisHealthCheck(RedisConfig redisConfig) {\n+        this.redisConfig = redisConfig;\n+    }\n \n     @PostConstruct\n     protected void init() {\n-        Set<Bean<?>> beans = Arc.container().beanManager().getBeans(RedisClient.class);\n-        for (Bean<?> bean : beans) {\n-            if (bean.getName() == null) {\n-                // this is the default redis client: retrieve it by type\n-                RedisClient defaultClient = Arc.container().instance(RedisClient.class).get();\n-                clients.put(DEFAULT_CLIENT, defaultClient);\n-            } else {\n-                RedisClient client = (RedisClient) Arc.container().instance(bean.getName()).get();\n-                clients.put(bean.getName(), client);\n+        for (InstanceHandle<RedisClient> handle : Arc.container().select(RedisClient.class, Any.Literal.INSTANCE).handles()) {\n+            String clientName = getClientName(handle.getBean());\n+            clients.put(clientName == null ? DEFAULT_CLIENT : clientName, handle.get());\n+        }\n+\n+        for (InstanceHandle<ReactiveRedisClient> handle : Arc.container()\n+                .select(ReactiveRedisClient.class, Any.Literal.INSTANCE).handles()) {\n+            String clientName = getClientName(handle.getBean());\n+            reactiveClients.put(clientName == null ? DEFAULT_CLIENT : clientName, handle.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ada742b828128bbe3f6d1fa45b843686b524cdd"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE4NzU1Nw==", "bodyText": "My reason was to produce healthcheck status for each individual redis client without caring much whether that was done with a reactive client or a blocking one (as it does not matter much).", "url": "https://github.com/quarkusio/quarkus/pull/12833#discussion_r510187557", "createdAt": "2020-10-22T14:02:40Z", "author": {"login": "machi1990"}, "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/health/RedisHealthCheck.java", "diffHunk": "@@ -17,41 +18,87 @@\n import org.eclipse.microprofile.health.Readiness;\n \n import io.quarkus.arc.Arc;\n+import io.quarkus.arc.InstanceHandle;\n import io.quarkus.redis.client.RedisClient;\n+import io.quarkus.redis.client.RedisClientName;\n+import io.quarkus.redis.client.reactive.ReactiveRedisClient;\n+import io.quarkus.redis.client.runtime.RedisClientUtil;\n+import io.quarkus.redis.client.runtime.RedisConfig;\n+import io.quarkus.redis.client.runtime.RedisConfig.RedisConfiguration;\n import io.vertx.redis.client.Response;\n \n @Readiness\n @ApplicationScoped\n class RedisHealthCheck implements HealthCheck {\n-    private Map<String, RedisClient> clients = new HashMap<>();\n+    private final Map<String, RedisClient> clients = new HashMap<>();\n+    private final Map<String, ReactiveRedisClient> reactiveClients = new HashMap<>();\n+    private final RedisConfig redisConfig;\n+\n+    public RedisHealthCheck(RedisConfig redisConfig) {\n+        this.redisConfig = redisConfig;\n+    }\n \n     @PostConstruct\n     protected void init() {\n-        Set<Bean<?>> beans = Arc.container().beanManager().getBeans(RedisClient.class);\n-        for (Bean<?> bean : beans) {\n-            if (bean.getName() == null) {\n-                // this is the default redis client: retrieve it by type\n-                RedisClient defaultClient = Arc.container().instance(RedisClient.class).get();\n-                clients.put(DEFAULT_CLIENT, defaultClient);\n-            } else {\n-                RedisClient client = (RedisClient) Arc.container().instance(bean.getName()).get();\n-                clients.put(bean.getName(), client);\n+        for (InstanceHandle<RedisClient> handle : Arc.container().select(RedisClient.class, Any.Literal.INSTANCE).handles()) {\n+            String clientName = getClientName(handle.getBean());\n+            clients.put(clientName == null ? DEFAULT_CLIENT : clientName, handle.get());\n+        }\n+\n+        for (InstanceHandle<ReactiveRedisClient> handle : Arc.container()\n+                .select(ReactiveRedisClient.class, Any.Literal.INSTANCE).handles()) {\n+            String clientName = getClientName(handle.getBean());\n+            reactiveClients.put(clientName == null ? DEFAULT_CLIENT : clientName, handle.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA4Mjk0Mg=="}, "originalCommit": {"oid": "7ada742b828128bbe3f6d1fa45b843686b524cdd"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwMzY3MQ==", "bodyText": "I think we should be consistent but that can probably be done in another PR.\nMerging.", "url": "https://github.com/quarkusio/quarkus/pull/12833#discussion_r512203671", "createdAt": "2020-10-26T19:08:50Z", "author": {"login": "gsmet"}, "path": "extensions/redis-client/runtime/src/main/java/io/quarkus/redis/client/runtime/health/RedisHealthCheck.java", "diffHunk": "@@ -17,41 +18,87 @@\n import org.eclipse.microprofile.health.Readiness;\n \n import io.quarkus.arc.Arc;\n+import io.quarkus.arc.InstanceHandle;\n import io.quarkus.redis.client.RedisClient;\n+import io.quarkus.redis.client.RedisClientName;\n+import io.quarkus.redis.client.reactive.ReactiveRedisClient;\n+import io.quarkus.redis.client.runtime.RedisClientUtil;\n+import io.quarkus.redis.client.runtime.RedisConfig;\n+import io.quarkus.redis.client.runtime.RedisConfig.RedisConfiguration;\n import io.vertx.redis.client.Response;\n \n @Readiness\n @ApplicationScoped\n class RedisHealthCheck implements HealthCheck {\n-    private Map<String, RedisClient> clients = new HashMap<>();\n+    private final Map<String, RedisClient> clients = new HashMap<>();\n+    private final Map<String, ReactiveRedisClient> reactiveClients = new HashMap<>();\n+    private final RedisConfig redisConfig;\n+\n+    public RedisHealthCheck(RedisConfig redisConfig) {\n+        this.redisConfig = redisConfig;\n+    }\n \n     @PostConstruct\n     protected void init() {\n-        Set<Bean<?>> beans = Arc.container().beanManager().getBeans(RedisClient.class);\n-        for (Bean<?> bean : beans) {\n-            if (bean.getName() == null) {\n-                // this is the default redis client: retrieve it by type\n-                RedisClient defaultClient = Arc.container().instance(RedisClient.class).get();\n-                clients.put(DEFAULT_CLIENT, defaultClient);\n-            } else {\n-                RedisClient client = (RedisClient) Arc.container().instance(bean.getName()).get();\n-                clients.put(bean.getName(), client);\n+        for (InstanceHandle<RedisClient> handle : Arc.container().select(RedisClient.class, Any.Literal.INSTANCE).handles()) {\n+            String clientName = getClientName(handle.getBean());\n+            clients.put(clientName == null ? DEFAULT_CLIENT : clientName, handle.get());\n+        }\n+\n+        for (InstanceHandle<ReactiveRedisClient> handle : Arc.container()\n+                .select(ReactiveRedisClient.class, Any.Literal.INSTANCE).handles()) {\n+            String clientName = getClientName(handle.getBean());\n+            reactiveClients.put(clientName == null ? DEFAULT_CLIENT : clientName, handle.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA4Mjk0Mg=="}, "originalCommit": {"oid": "7ada742b828128bbe3f6d1fa45b843686b524cdd"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4203, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}