{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MDUwOTY1", "number": 11043, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMTowMjowM1rOETob5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTowMDoyMVrOEV3ffQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDIwOTAxOnYy", "diffSide": "RIGHT", "path": "extensions/panache/mongodb-panache-common/runtime/src/main/java/io/quarkus/mongodb/panache/PanacheUpdate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMTowMjowM1rOG5eVHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzoxOTo1N1rOG5iqxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkxODk0Mg==", "bodyText": "This is legit but a lot of interfaces inside Quarkus defines the default modifier like this.\nPlease, avoid this kind of changes not related to the PR especially for such a big PR as it adds another file to review !\nBut, OK to keep the change now that it's done.", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r462918942", "createdAt": "2020-07-30T11:02:03Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/mongodb-panache-common/runtime/src/main/java/io/quarkus/mongodb/panache/PanacheUpdate.java", "diffHunk": "@@ -18,7 +18,7 @@\n      * @param params params optional sequence of indexed parameters\n      * @return the number of entities updated.\n      */\n-    public long where(String query, Object... params);\n+    long where(String query, Object... params);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5MDAyMg==", "bodyText": "I actually thought i had cleaned all those up and then saw I'd missed one.  i can roll that one back.  but generally, public shouldn't be added to interface methods because it's redundant.", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r462990022", "createdAt": "2020-07-30T13:19:57Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/mongodb-panache-common/runtime/src/main/java/io/quarkus/mongodb/panache/PanacheUpdate.java", "diffHunk": "@@ -18,7 +18,7 @@\n      * @param params params optional sequence of indexed parameters\n      * @return the number of entities updated.\n      */\n-    public long where(String query, Object... params);\n+    long where(String query, Object... params);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkxODk0Mg=="}, "originalCommit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDIzMDA4OnYy", "diffSide": "RIGHT", "path": "extensions/panache/mongodb-panache-kotlin/runtime/src/main/kotlin/io/quarkus/mongodb/panache/kotlin/PanacheMongoEntityBase.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMTowOToyMVrOG5eiSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzoyMDo0OFrOG5is5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyMjMxMw==", "bodyText": "Why is there multiple @see for .persist.\nSame for update, delete, ...", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r462922313", "createdAt": "2020-07-30T11:09:21Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/mongodb-panache-kotlin/runtime/src/main/kotlin/io/quarkus/mongodb/panache/kotlin/PanacheMongoEntityBase.kt", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.mongodb.panache.kotlin\n+\n+import io.quarkus.mongodb.panache.kotlin.runtime.KotlinMongoOperations\n+\n+/**\n+ * Represents an entity. If your Mongo entities extend this class they gain auto-generated accessors\n+ * to all their public fields, as well as a lot of useful methods. Unless you have a custom ID strategy, you\n+ * should not extend this class directly but extend [PanacheMongoEntity] instead.\n+ *\n+ * @see PanacheMongoEntity\n+ */\n+@Suppress(\"unused\")\n+abstract class PanacheMongoEntityBase {\n+    companion object {\n+        @JvmStatic\n+        val operations = KotlinMongoOperations()\n+    }\n+\n+    /**\n+     * Persist this entity in the database.\n+     * This will set it's ID field if not already set.\n+     *\n+     * @see .persist\n+     * @see .persist\n+     * @see .persist", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5MDU2NQ==", "bodyText": "These are weird artifacts of the conversion to kotlin.  I'll need to rewrite them in dokka.  But if I can pull off that common interface definition between java and kotlin, this would all go away.", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r462990565", "createdAt": "2020-07-30T13:20:48Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/mongodb-panache-kotlin/runtime/src/main/kotlin/io/quarkus/mongodb/panache/kotlin/PanacheMongoEntityBase.kt", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.mongodb.panache.kotlin\n+\n+import io.quarkus.mongodb.panache.kotlin.runtime.KotlinMongoOperations\n+\n+/**\n+ * Represents an entity. If your Mongo entities extend this class they gain auto-generated accessors\n+ * to all their public fields, as well as a lot of useful methods. Unless you have a custom ID strategy, you\n+ * should not extend this class directly but extend [PanacheMongoEntity] instead.\n+ *\n+ * @see PanacheMongoEntity\n+ */\n+@Suppress(\"unused\")\n+abstract class PanacheMongoEntityBase {\n+    companion object {\n+        @JvmStatic\n+        val operations = KotlinMongoOperations()\n+    }\n+\n+    /**\n+     * Persist this entity in the database.\n+     * This will set it's ID field if not already set.\n+     *\n+     * @see .persist\n+     * @see .persist\n+     * @see .persist", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyMjMxMw=="}, "originalCommit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDIzODA3OnYy", "diffSide": "RIGHT", "path": "extensions/panache/mongodb-panache-kotlin/runtime/src/main/kotlin/io/quarkus/mongodb/panache/kotlin/PanacheMongoRepositoryBase.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMToxMTo0NVrOG5em2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMToxMTo0NVrOG5em2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyMzQ4Mw==", "bodyText": "Same here, the @see tags seems not correct ...", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r462923483", "createdAt": "2020-07-30T11:11:45Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/mongodb-panache-kotlin/runtime/src/main/kotlin/io/quarkus/mongodb/panache/kotlin/PanacheMongoRepositoryBase.kt", "diffHunk": "@@ -0,0 +1,821 @@\n+@file:Suppress(\"unused\")\n+\n+package io.quarkus.mongodb.panache.kotlin\n+\n+import com.mongodb.client.MongoCollection\n+import com.mongodb.client.MongoDatabase\n+import io.quarkus.mongodb.panache.kotlin.PanacheMongoEntityBase.Companion.operations\n+import io.quarkus.panache.common.Parameters\n+import io.quarkus.panache.common.Sort\n+import io.quarkus.panache.common.impl.GenerateBridge\n+import org.bson.Document\n+import java.util.stream.Stream\n+\n+/**\n+ * Represents a Repository for a specific type of entity `Entity`, with an ID type\n+ * of `Id`. Implementing this repository will gain you the exact same useful methods\n+ * that are on [PanacheMongoEntityBase]. Unless you have a custom ID strategy, you should not\n+ * implement this interface directly but implement [PanacheMongoRepository] instead.\n+ *\n+ * @param <Entity> The type of entity to operate on\n+ * @param <Id> The ID type of the entity\n+ * @see PanacheMongoRepository<Id><Entity>\n+ */\n+interface PanacheMongoRepositoryBase<Entity: Any, Id: Any> {\n+    /**\n+     * Persist the given entity in the database.\n+     * This will set it's ID field if not already set.\n+     *\n+     * @param entity the entity to insert.\n+     * @see .persist\n+     * @see .persist\n+     * @see .persist\n+     */\n+    fun persist(entity: Entity) = operations.persist(entity)\n+\n+    /**\n+     * Update the given entity in the database.\n+     *\n+     * @param entity the entity to update.\n+     * @see .update\n+     * @see .update\n+     * @see .update", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDI2MDIwOnYy", "diffSide": "RIGHT", "path": "extensions/panache/mongodb-panache-kotlin/runtime/src/main/kotlin/io/quarkus/mongodb/panache/kotlin/PanacheMongoCompanion.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMToxOToyNlrOG5e0Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzozNzozOFrOG5jYag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyNjk1MA==", "bodyText": "On Hibernate you don't have two companions but only one.\nCan you explain quickly why you need two here ?", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r462926950", "createdAt": "2020-07-30T11:19:26Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/mongodb-panache-kotlin/runtime/src/main/kotlin/io/quarkus/mongodb/panache/kotlin/PanacheMongoCompanion.kt", "diffHunk": "@@ -0,0 +1,770 @@\n+package io.quarkus.mongodb.panache.kotlin\n+\n+import com.mongodb.client.MongoCollection\n+import com.mongodb.client.MongoDatabase\n+import io.quarkus.mongodb.panache.kotlin.PanacheMongoEntityBase.Companion.operations\n+import io.quarkus.panache.common.Parameters\n+import io.quarkus.panache.common.Sort\n+import io.quarkus.panache.common.impl.GenerateBridge\n+import org.bson.Document\n+import org.bson.types.ObjectId\n+import java.util.stream.Stream\n+\n+interface PanacheMongoCompanion<Entity : PanacheMongoEntityBase>: PanacheMongoCompanionBase<Entity, ObjectId>\n+\n+interface PanacheMongoCompanionBase<Entity : PanacheMongoEntityBase, Id: Any> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAwMTcwNg==", "bodyText": "This is the mirror of the Entity/EntityBase split.  this allows users to parameterize the ID type while allowing a default type to apply in the common case.", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r463001706", "createdAt": "2020-07-30T13:37:38Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/mongodb-panache-kotlin/runtime/src/main/kotlin/io/quarkus/mongodb/panache/kotlin/PanacheMongoCompanion.kt", "diffHunk": "@@ -0,0 +1,770 @@\n+package io.quarkus.mongodb.panache.kotlin\n+\n+import com.mongodb.client.MongoCollection\n+import com.mongodb.client.MongoDatabase\n+import io.quarkus.mongodb.panache.kotlin.PanacheMongoEntityBase.Companion.operations\n+import io.quarkus.panache.common.Parameters\n+import io.quarkus.panache.common.Sort\n+import io.quarkus.panache.common.impl.GenerateBridge\n+import org.bson.Document\n+import org.bson.types.ObjectId\n+import java.util.stream.Stream\n+\n+interface PanacheMongoCompanion<Entity : PanacheMongoEntityBase>: PanacheMongoCompanionBase<Entity, ObjectId>\n+\n+interface PanacheMongoCompanionBase<Entity : PanacheMongoEntityBase, Id: Any> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyNjk1MA=="}, "originalCommit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDI4NTA4OnYy", "diffSide": "RIGHT", "path": "extensions/panache/mongodb-panache-kotlin/runtime/src/main/kotlin/io/quarkus/mongodb/panache/kotlin/reactive/ReactivePanacheMongoRepositoryBase.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMToyNzoyNVrOG5fDUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzoyNDoxNlrOG5i1zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkzMDc3MA==", "bodyText": "It seems strange to me to reuse the companion object of the entity base class ...", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r462930770", "createdAt": "2020-07-30T11:27:25Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/mongodb-panache-kotlin/runtime/src/main/kotlin/io/quarkus/mongodb/panache/kotlin/reactive/ReactivePanacheMongoRepositoryBase.kt", "diffHunk": "@@ -0,0 +1,832 @@\n+@file:Suppress(\"unused\")\n+\n+package io.quarkus.mongodb.panache.kotlin.reactive\n+\n+import io.quarkus.mongodb.panache.kotlin.reactive.ReactivePanacheMongoEntityBase.Companion.operations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5Mjg0Ng==", "bodyText": "It's not reusing the object.  it's just defining one instance of the operations class.  this simplifies the bytecode generation in that we can always delegate to the same place.  this way we have one set of code generating the necessary bytecode between the active record and repository approaches.  Otherwise we'd need two sets of code to generate that byte code or we'd have to paramterize the owner of that reference.  This way was just vastly simpler.  It's invisible to devs at that point.", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r462992846", "createdAt": "2020-07-30T13:24:16Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/mongodb-panache-kotlin/runtime/src/main/kotlin/io/quarkus/mongodb/panache/kotlin/reactive/ReactivePanacheMongoRepositoryBase.kt", "diffHunk": "@@ -0,0 +1,832 @@\n+@file:Suppress(\"unused\")\n+\n+package io.quarkus.mongodb.panache.kotlin.reactive\n+\n+import io.quarkus.mongodb.panache.kotlin.reactive.ReactivePanacheMongoEntityBase.Companion.operations", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkzMDc3MA=="}, "originalCommit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDI4OTMzOnYy", "diffSide": "RIGHT", "path": "extensions/panache/mongodb-panache-kotlin/runtime/src/main/kotlin/io/quarkus/mongodb/panache/kotlin/reactive/ReactivePanacheMongoEntityBase.kt", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMToyODo0M1rOG5fF3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDo1ODowMFrOG83YFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkzMTQyMw==", "bodyText": "What is the advantage to use it as a companion object instead of using it statically like this is done inside the Hibernate extension ?", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r462931423", "createdAt": "2020-07-30T11:28:43Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/mongodb-panache-kotlin/runtime/src/main/kotlin/io/quarkus/mongodb/panache/kotlin/reactive/ReactivePanacheMongoEntityBase.kt", "diffHunk": "@@ -0,0 +1,56 @@\n+package io.quarkus.mongodb.panache.kotlin.reactive\n+\n+import io.quarkus.mongodb.panache.kotlin.reactive.runtime.KotlinReactiveMongoOperations\n+import io.smallrye.mutiny.Uni\n+\n+/**\n+ * Represents an entity. If your Mongo entities extend this class they gain auto-generated accessors\n+ * to all their public fields, as well as a lot of useful\n+ * methods. Unless you have a custom ID strategy, you should not extend this class directly but extend\n+ * [ReactivePanacheMongoEntity] instead.\n+ *\n+ * @see ReactivePanacheMongoEntity\n+ */\n+abstract class ReactivePanacheMongoEntityBase {\n+    companion object {\n+        val operations = KotlinReactiveMongoOperations()\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5NDMyMg==", "bodyText": "This was part of that reuse effort.  By making things non-static, they can be inherited and overridden etc.  If you look at the hibernate version of all this, there are some awkward contortions needed to get the kotlin versions of types in to the mix while sharing some of them.  This uses inheritance and type parameterization to greatly simplify that integration.  If this all works out, the hibernate code will be updated to work this way as well.  This approach is much \"better\" in my experience.", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r462994322", "createdAt": "2020-07-30T13:26:29Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/mongodb-panache-kotlin/runtime/src/main/kotlin/io/quarkus/mongodb/panache/kotlin/reactive/ReactivePanacheMongoEntityBase.kt", "diffHunk": "@@ -0,0 +1,56 @@\n+package io.quarkus.mongodb.panache.kotlin.reactive\n+\n+import io.quarkus.mongodb.panache.kotlin.reactive.runtime.KotlinReactiveMongoOperations\n+import io.smallrye.mutiny.Uni\n+\n+/**\n+ * Represents an entity. If your Mongo entities extend this class they gain auto-generated accessors\n+ * to all their public fields, as well as a lot of useful\n+ * methods. Unless you have a custom ID strategy, you should not extend this class directly but extend\n+ * [ReactivePanacheMongoEntity] instead.\n+ *\n+ * @see ReactivePanacheMongoEntity\n+ */\n+abstract class ReactivePanacheMongoEntityBase {\n+    companion object {\n+        val operations = KotlinReactiveMongoOperations()\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkzMTQyMw=="}, "originalCommit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY0NjM3Nw==", "bodyText": "I understand the idea but as I said, this changes an inner API that I saw some direct usage in the wild so this may not be backward compatible.\nI want @FroMage advice on this, as people directly using MongoOperations or JpaOperations should not have done it so maybe we can break this.", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r465646377", "createdAt": "2020-08-05T11:05:29Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/mongodb-panache-kotlin/runtime/src/main/kotlin/io/quarkus/mongodb/panache/kotlin/reactive/ReactivePanacheMongoEntityBase.kt", "diffHunk": "@@ -0,0 +1,56 @@\n+package io.quarkus.mongodb.panache.kotlin.reactive\n+\n+import io.quarkus.mongodb.panache.kotlin.reactive.runtime.KotlinReactiveMongoOperations\n+import io.smallrye.mutiny.Uni\n+\n+/**\n+ * Represents an entity. If your Mongo entities extend this class they gain auto-generated accessors\n+ * to all their public fields, as well as a lot of useful\n+ * methods. Unless you have a custom ID strategy, you should not extend this class directly but extend\n+ * [ReactivePanacheMongoEntity] instead.\n+ *\n+ * @see ReactivePanacheMongoEntity\n+ */\n+abstract class ReactivePanacheMongoEntityBase {\n+    companion object {\n+        val operations = KotlinReactiveMongoOperations()\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkzMTQyMw=="}, "originalCommit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ3NTAyOA==", "bodyText": "We can break this. I didn't want to break it for ORM, but in retrospect we should have.", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466475028", "createdAt": "2020-08-06T14:58:00Z", "author": {"login": "FroMage"}, "path": "extensions/panache/mongodb-panache-kotlin/runtime/src/main/kotlin/io/quarkus/mongodb/panache/kotlin/reactive/ReactivePanacheMongoEntityBase.kt", "diffHunk": "@@ -0,0 +1,56 @@\n+package io.quarkus.mongodb.panache.kotlin.reactive\n+\n+import io.quarkus.mongodb.panache.kotlin.reactive.runtime.KotlinReactiveMongoOperations\n+import io.smallrye.mutiny.Uni\n+\n+/**\n+ * Represents an entity. If your Mongo entities extend this class they gain auto-generated accessors\n+ * to all their public fields, as well as a lot of useful\n+ * methods. Unless you have a custom ID strategy, you should not extend this class directly but extend\n+ * [ReactivePanacheMongoEntity] instead.\n+ *\n+ * @see ReactivePanacheMongoEntity\n+ */\n+abstract class ReactivePanacheMongoEntityBase {\n+    companion object {\n+        val operations = KotlinReactiveMongoOperations()\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkzMTQyMw=="}, "originalCommit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDM0NTI4OnYy", "diffSide": "RIGHT", "path": "integration-tests/hibernate-orm-panache/src/main/java/io/quarkus/it/panache/BookResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMTo0NzoyOVrOG5foEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzoyNjo1NlrOG5i8ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk0MDE3OQ==", "bodyText": "Please don't use System.out", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r462940179", "createdAt": "2020-07-30T11:47:29Z", "author": {"login": "loicmathieu"}, "path": "integration-tests/hibernate-orm-panache/src/main/java/io/quarkus/it/panache/BookResource.java", "diffHunk": "@@ -22,6 +22,8 @@\n     @Produces(MediaType.APPLICATION_JSON)\n     public List<Book> addAndListAll(@PathParam(\"name\") String name, @PathParam(\"author\") String author) {\n         bookDao.persist(new Book(name, author));\n-        return bookDao.listAll();\n+        List<Book> books = bookDao.listAll();\n+        System.out.println(\"****** addAndListAll books = \" + books);\n+        return books;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5NDU5MA==", "bodyText": "It's just debug I missed when cleaning up pre-PR.  I'll clean it up now.", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r462994590", "createdAt": "2020-07-30T13:26:56Z", "author": {"login": "evanchooly"}, "path": "integration-tests/hibernate-orm-panache/src/main/java/io/quarkus/it/panache/BookResource.java", "diffHunk": "@@ -22,6 +22,8 @@\n     @Produces(MediaType.APPLICATION_JSON)\n     public List<Book> addAndListAll(@PathParam(\"name\") String name, @PathParam(\"author\") String author) {\n         bookDao.persist(new Book(name, author));\n-        return bookDao.listAll();\n+        List<Book> books = bookDao.listAll();\n+        System.out.println(\"****** addAndListAll books = \" + books);\n+        return books;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk0MDE3OQ=="}, "originalCommit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDM0NjAwOnYy", "diffSide": "RIGHT", "path": "integration-tests/hibernate-orm-panache/src/test/java/io/quarkus/it/panache/JacksonTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMTo0Nzo0OFrOG5fokg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMTo0Nzo0OFrOG5fokg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk0MDMwNg==", "bodyText": "System.out ?", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r462940306", "createdAt": "2020-07-30T11:47:48Z", "author": {"login": "loicmathieu"}, "path": "integration-tests/hibernate-orm-panache/src/test/java/io/quarkus/it/panache/JacksonTest.java", "diffHunk": "@@ -16,6 +16,8 @@\n     public void testJsonIgnoreHonoured() {\n         List<Book> books = RestAssured.when().get(\"/book/Berlin/Beevor\").then().extract().body().jsonPath().getList(\".\",\n                 Book.class);\n+        System.out.println(\"****** testJsonIgnoreHonoured books = \" + books);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDQ3OTE0OnYy", "diffSide": "RIGHT", "path": "integration-tests/mongodb-panache-kotlin/src/main/kotlin/io/quarkus/it/mongodb/panache/book/BookEntityResource.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjozMDowOVrOG5g5TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjozMDowOVrOG5g5TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2MDk3Mg==", "bodyText": "Can you please remove your debugging println ?", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r462960972", "createdAt": "2020-07-30T12:30:09Z", "author": {"login": "loicmathieu"}, "path": "integration-tests/mongodb-panache-kotlin/src/main/kotlin/io/quarkus/it/mongodb/panache/book/BookEntityResource.kt", "diffHunk": "@@ -0,0 +1,114 @@\n+package io.quarkus.it.mongodb.panache.book\n+\n+import io.quarkus.panache.common.Parameters\n+import io.quarkus.panache.common.Sort\n+import org.bson.types.ObjectId\n+import org.jboss.logging.Logger\n+import java.net.URI\n+import java.time.LocalDate\n+import javax.annotation.PostConstruct\n+import javax.ws.rs.Consumes\n+import javax.ws.rs.DELETE\n+import javax.ws.rs.GET\n+import javax.ws.rs.NotFoundException\n+import javax.ws.rs.PATCH\n+import javax.ws.rs.POST\n+import javax.ws.rs.PUT\n+import javax.ws.rs.Path\n+import javax.ws.rs.PathParam\n+import javax.ws.rs.Produces\n+import javax.ws.rs.QueryParam\n+import javax.ws.rs.core.MediaType\n+import javax.ws.rs.core.Response\n+\n+@Path(\"/books/entity\")\n+@Produces(MediaType.APPLICATION_JSON)\n+@Consumes(MediaType.APPLICATION_JSON)\n+class BookEntityResource {\n+    @PostConstruct\n+    fun init() {\n+        val databaseName: String = BookEntity.mongoDatabase().name\n+        val collectionName: String = BookEntity.mongoCollection().namespace.collectionName\n+        LOGGER.infov(\"Using BookEntity[database={0}, collection={1}]\", databaseName, collectionName)\n+    }\n+\n+    @GET\n+    fun getBooks(@QueryParam(\"sort\") sort: String?): List<BookEntity> {\n+        return if (sort != null) {\n+            BookEntity.listAll(Sort.ascending(sort))\n+        } else BookEntity.listAll()\n+    }\n+\n+    @POST\n+    fun addBook(book: BookEntity): Response {\n+        println(\"book = ${book}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDUxODgwOnYy", "diffSide": "RIGHT", "path": "integration-tests/mongodb-panache-kotlin/src/test/kotlin/io/quarkus/it/mongodb/panache/MongodbPanacheMockingTest.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjo0MTozM1rOG5hRLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzozODo1OFrOG5jb1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2NzA4NA==", "bodyText": "PanacheMock provides the capability to mock entity static methods.\nIf the test can be done by mocking on the companion object, cool, if not, it should be documented somewhere that we cannot mock entity static methods in Kotlin", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r462967084", "createdAt": "2020-07-30T12:41:33Z", "author": {"login": "loicmathieu"}, "path": "integration-tests/mongodb-panache-kotlin/src/test/kotlin/io/quarkus/it/mongodb/panache/MongodbPanacheMockingTest.kt", "diffHunk": "@@ -0,0 +1,107 @@\n+package io.quarkus.it.mongodb.panache\n+\n+import io.quarkus.it.mongodb.panache.person.MockablePersonRepository\n+import io.quarkus.it.mongodb.panache.person.Person\n+import io.quarkus.it.mongodb.panache.person.PersonEntity\n+import io.quarkus.it.mongodb.panache.person.PersonRepository\n+import io.quarkus.mongodb.panache.kotlin.PanacheMongoRepositoryBase\n+import io.quarkus.test.common.QuarkusTestResource\n+import io.quarkus.test.junit.QuarkusTest\n+import io.quarkus.test.junit.mockito.InjectMock\n+import org.junit.jupiter.api.Assertions\n+import org.junit.jupiter.api.Test\n+import org.mockito.Mockito\n+import java.util.Collections\n+import javax.inject.Inject\n+import javax.ws.rs.WebApplicationException\n+\n+@QuarkusTest\n+@QuarkusTestResource(MongoTestResource::class)\n+class MongodbPanacheMockingTest {\n+    @Inject\n+    lateinit var realPersonRepository: PersonRepository\n+\n+    @InjectMock\n+    lateinit var mockablePersonRepository: MockablePersonRepository\n+\n+    // These mocks are trying to call methods against instances but kotlin doesn't allow these kinds of method calls.\n+    // they must be called against the companion object (invoked against the type not a reference).  removing these tests\n+    // for now as I neither know how to correct this at this point nor am I convinced of the utility of these tests.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAwMjU4Mw==", "bodyText": "This is what we discussed last week.  I have a better understanding of how the mocking stuff is set up now so I can take another shot at enabling this before it goes out in a release.", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r463002583", "createdAt": "2020-07-30T13:38:58Z", "author": {"login": "evanchooly"}, "path": "integration-tests/mongodb-panache-kotlin/src/test/kotlin/io/quarkus/it/mongodb/panache/MongodbPanacheMockingTest.kt", "diffHunk": "@@ -0,0 +1,107 @@\n+package io.quarkus.it.mongodb.panache\n+\n+import io.quarkus.it.mongodb.panache.person.MockablePersonRepository\n+import io.quarkus.it.mongodb.panache.person.Person\n+import io.quarkus.it.mongodb.panache.person.PersonEntity\n+import io.quarkus.it.mongodb.panache.person.PersonRepository\n+import io.quarkus.mongodb.panache.kotlin.PanacheMongoRepositoryBase\n+import io.quarkus.test.common.QuarkusTestResource\n+import io.quarkus.test.junit.QuarkusTest\n+import io.quarkus.test.junit.mockito.InjectMock\n+import org.junit.jupiter.api.Assertions\n+import org.junit.jupiter.api.Test\n+import org.mockito.Mockito\n+import java.util.Collections\n+import javax.inject.Inject\n+import javax.ws.rs.WebApplicationException\n+\n+@QuarkusTest\n+@QuarkusTestResource(MongoTestResource::class)\n+class MongodbPanacheMockingTest {\n+    @Inject\n+    lateinit var realPersonRepository: PersonRepository\n+\n+    @InjectMock\n+    lateinit var mockablePersonRepository: MockablePersonRepository\n+\n+    // These mocks are trying to call methods against instances but kotlin doesn't allow these kinds of method calls.\n+    // they must be called against the companion object (invoked against the type not a reference).  removing these tests\n+    // for now as I neither know how to correct this at this point nor am I convinced of the utility of these tests.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2NzA4NA=="}, "originalCommit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzQzNDM4OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDoxMzoxNlrOG81a4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDowMzowNlrOG9CYHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0Mjk3Ng==", "bodyText": "Generally I prefer to split those sort of methods in two, with one taking a mutable List result parameter to avoid creating one collection per class just to throw it away in addAll.\nAlso, won't this behaviour change impact other users?", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466442976", "createdAt": "2020-08-06T14:13:16Z", "author": {"login": "FroMage"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -963,6 +967,15 @@ public String toString() {\n         return chainConfig;\n     }\n \n+    protected static List<Method> getMethods(Class<?> clazz) {\n+        List<Method> declaredMethods = new ArrayList<>();\n+        if (!clazz.getName().equals(Object.class.getName())) {\n+            declaredMethods.addAll(getMethods(clazz.getSuperclass()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1NTI2MQ==", "bodyText": "I generally don't, obviously, but i'm happy to break that up if you want.  It doesn't seem to affect anyone else as it would only affect someone who'd defined BuildStep on a class with a parent which doesn't seem to be happening anywhere else.  All the other tests I've run still pass, though.", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466655261", "createdAt": "2020-08-06T20:03:06Z", "author": {"login": "evanchooly"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -963,6 +967,15 @@ public String toString() {\n         return chainConfig;\n     }\n \n+    protected static List<Method> getMethods(Class<?> clazz) {\n+        List<Method> declaredMethods = new ArrayList<>();\n+        if (!clazz.getName().equals(Object.class.getName())) {\n+            declaredMethods.addAll(getMethods(clazz.getSuperclass()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0Mjk3Ng=="}, "originalCommit": {"oid": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzQ0MTI2OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/util/AsmUtil.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDoxNDo1NVrOG81fLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDowOTowMVrOG9CjAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0NDA3OA==", "bodyText": "Not sure who calls this, but you can't box Void, so that's dodgy.", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466444078", "createdAt": "2020-08-06T14:14:55Z", "author": {"login": "FroMage"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/util/AsmUtil.java", "diffHunk": "@@ -20,6 +33,36 @@\n  */\n public class AsmUtil {\n \n+    public static final List<org.objectweb.asm.Type> PRIMITIVES = asList(\n+            VOID_TYPE,\n+            BOOLEAN_TYPE,\n+            CHAR_TYPE,\n+            BYTE_TYPE,\n+            SHORT_TYPE,\n+            INT_TYPE,\n+            FLOAT_TYPE,\n+            LONG_TYPE);\n+    public static final List<org.objectweb.asm.Type> WRAPPERS = asList(\n+            getType(Void.class),\n+            getType(Boolean.class),\n+            getType(Character.class),\n+            getType(Byte.class),\n+            getType(Short.class),\n+            getType(Integer.class),\n+            getType(Float.class),\n+            getType(Long.class));\n+    public static final Map<org.objectweb.asm.Type, org.objectweb.asm.Type> WRAPPER_TO_PRIMITIVE = new HashMap<>();\n+\n+    static {\n+        for (int i = 0; i < AsmUtil.PRIMITIVES.size(); i++) {\n+            AsmUtil.WRAPPER_TO_PRIMITIVE.put(AsmUtil.WRAPPERS.get(i), AsmUtil.PRIMITIVES.get(i));\n+        }\n+    }\n+\n+    public static org.objectweb.asm.Type autobox(org.objectweb.asm.Type primitive) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1Njc1MQ==", "bodyText": "It would actually convert void to Void but in this case that can't happen as it's only applied to method parameters in this case.  It's called here.", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466656751", "createdAt": "2020-08-06T20:06:14Z", "author": {"login": "evanchooly"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/util/AsmUtil.java", "diffHunk": "@@ -20,6 +33,36 @@\n  */\n public class AsmUtil {\n \n+    public static final List<org.objectweb.asm.Type> PRIMITIVES = asList(\n+            VOID_TYPE,\n+            BOOLEAN_TYPE,\n+            CHAR_TYPE,\n+            BYTE_TYPE,\n+            SHORT_TYPE,\n+            INT_TYPE,\n+            FLOAT_TYPE,\n+            LONG_TYPE);\n+    public static final List<org.objectweb.asm.Type> WRAPPERS = asList(\n+            getType(Void.class),\n+            getType(Boolean.class),\n+            getType(Character.class),\n+            getType(Byte.class),\n+            getType(Short.class),\n+            getType(Integer.class),\n+            getType(Float.class),\n+            getType(Long.class));\n+    public static final Map<org.objectweb.asm.Type, org.objectweb.asm.Type> WRAPPER_TO_PRIMITIVE = new HashMap<>();\n+\n+    static {\n+        for (int i = 0; i < AsmUtil.PRIMITIVES.size(); i++) {\n+            AsmUtil.WRAPPER_TO_PRIMITIVE.put(AsmUtil.WRAPPERS.get(i), AsmUtil.PRIMITIVES.get(i));\n+        }\n+    }\n+\n+    public static org.objectweb.asm.Type autobox(org.objectweb.asm.Type primitive) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0NDA3OA=="}, "originalCommit": {"oid": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1ODA1MA==", "bodyText": "and here.", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466658050", "createdAt": "2020-08-06T20:09:01Z", "author": {"login": "evanchooly"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/util/AsmUtil.java", "diffHunk": "@@ -20,6 +33,36 @@\n  */\n public class AsmUtil {\n \n+    public static final List<org.objectweb.asm.Type> PRIMITIVES = asList(\n+            VOID_TYPE,\n+            BOOLEAN_TYPE,\n+            CHAR_TYPE,\n+            BYTE_TYPE,\n+            SHORT_TYPE,\n+            INT_TYPE,\n+            FLOAT_TYPE,\n+            LONG_TYPE);\n+    public static final List<org.objectweb.asm.Type> WRAPPERS = asList(\n+            getType(Void.class),\n+            getType(Boolean.class),\n+            getType(Character.class),\n+            getType(Byte.class),\n+            getType(Short.class),\n+            getType(Integer.class),\n+            getType(Float.class),\n+            getType(Long.class));\n+    public static final Map<org.objectweb.asm.Type, org.objectweb.asm.Type> WRAPPER_TO_PRIMITIVE = new HashMap<>();\n+\n+    static {\n+        for (int i = 0; i < AsmUtil.PRIMITIVES.size(); i++) {\n+            AsmUtil.WRAPPER_TO_PRIMITIVE.put(AsmUtil.WRAPPERS.get(i), AsmUtil.PRIMITIVES.get(i));\n+        }\n+    }\n+\n+    public static org.objectweb.asm.Type autobox(org.objectweb.asm.Type primitive) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0NDA3OA=="}, "originalCommit": {"oid": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzQ3ODgzOnYy", "diffSide": "RIGHT", "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheEntityClassVisitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDoyMzoyN1rOG812bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDowMDoyOVrOG9CTfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1MDAzMA==", "bodyText": "This introduces confusion wrt what is an internal vs binary name, why?", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466450030", "createdAt": "2020-08-06T14:23:27Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheEntityClassVisitor.java", "diffHunk": "@@ -52,20 +50,10 @@ public MethodVisitor visitMethod(int access, String name, String descriptor, Str\n     }\n \n     @Override\n-    protected String getModelDescriptor() {\n-        return \"Ljava/lang/Class;\";\n-    }\n-\n-    @Override\n-    protected String getPanacheOperationsBinaryName() {\n+    protected String getPanacheOperationsInternalName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1NDA3OA==", "bodyText": "I would actually like to entirely eliminate the use of \"binary name\" as that does not appear (that I can find) in either asm or jandex but appears to have been crafted with quarkus.  Usually the use of the different forms of these name is either as a descriptor  (L/java/lang/String;) or an internal name (java/lang/String).  But making that change now is far reaching and I didn't want to unilaterally make that decision.  I think only changed that in this case because I kept getting confused as to what that form should in this case.  But the formal/official term is \"internal name\" at any rate.", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466654078", "createdAt": "2020-08-06T20:00:29Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheEntityClassVisitor.java", "diffHunk": "@@ -52,20 +50,10 @@ public MethodVisitor visitMethod(int access, String name, String descriptor, Str\n     }\n \n     @Override\n-    protected String getModelDescriptor() {\n-        return \"Ljava/lang/Class;\";\n-    }\n-\n-    @Override\n-    protected String getPanacheOperationsBinaryName() {\n+    protected String getPanacheOperationsInternalName() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1MDAzMA=="}, "originalCommit": {"oid": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzQ5NjY1OnYy", "diffSide": "RIGHT", "path": "extensions/panache/mongodb-panache-common/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/BasePanacheMongoResourceProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDoyNjo1MVrOG82A4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDowODowOFrOG9ChZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1MjcwNA==", "bodyText": "This is confusing because descriptors and signatures are different, and this seems to confuse the two.", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466452704", "createdAt": "2020-08-06T14:26:51Z", "author": {"login": "FroMage"}, "path": "extensions/panache/mongodb-panache-common/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/BasePanacheMongoResourceProcessor.java", "diffHunk": "@@ -0,0 +1,384 @@\n+package io.quarkus.mongodb.panache.deployment;\n+\n+import static io.quarkus.deployment.util.JandexUtil.resolveTypeParameters;\n+import static org.jboss.jandex.DotName.createSimple;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+\n+import org.bson.codecs.pojo.annotations.BsonId;\n+import org.bson.codecs.pojo.annotations.BsonIgnore;\n+import org.bson.codecs.pojo.annotations.BsonProperty;\n+import org.bson.types.ObjectId;\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.CompositeIndex;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.FieldInfo;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.Indexer;\n+import org.jboss.jandex.MethodInfo;\n+import org.jboss.jandex.Type;\n+\n+import io.quarkus.arc.deployment.ValidationPhaseBuildItem;\n+import io.quarkus.builder.BuildException;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.ExecutionTime;\n+import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.bean.JavaBeanUtil;\n+import io.quarkus.deployment.builditem.ApplicationArchivesBuildItem;\n+import io.quarkus.deployment.builditem.ApplicationIndexBuildItem;\n+import io.quarkus.deployment.builditem.BytecodeTransformerBuildItem;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveHierarchyBuildItem;\n+import io.quarkus.deployment.index.IndexingUtil;\n+import io.quarkus.deployment.util.JandexUtil;\n+import io.quarkus.jackson.spi.JacksonModuleBuildItem;\n+import io.quarkus.jsonb.spi.JsonbDeserializerBuildItem;\n+import io.quarkus.jsonb.spi.JsonbSerializerBuildItem;\n+import io.quarkus.mongodb.deployment.MongoClientNameBuildItem;\n+import io.quarkus.mongodb.deployment.MongoUnremovableClientsBuildItem;\n+import io.quarkus.mongodb.panache.MongoEntity;\n+import io.quarkus.mongodb.panache.PanacheMongoRecorder;\n+import io.quarkus.mongodb.panache.ProjectionFor;\n+import io.quarkus.mongodb.panache.jackson.ObjectIdDeserializer;\n+import io.quarkus.mongodb.panache.jackson.ObjectIdSerializer;\n+import io.quarkus.panache.common.deployment.PanacheEntityClassesBuildItem;\n+import io.quarkus.panache.common.deployment.PanacheEntityEnhancer;\n+import io.quarkus.panache.common.deployment.PanacheMethodCustomizer;\n+import io.quarkus.panache.common.deployment.PanacheMethodCustomizerBuildItem;\n+import io.quarkus.panache.common.deployment.PanacheRepositoryEnhancer;\n+\n+public abstract class BasePanacheMongoResourceProcessor {\n+    public static final DotName BSON_ID = createSimple(BsonId.class.getName());\n+    public static final DotName BSON_IGNORE = createSimple(BsonIgnore.class.getName());\n+    public static final DotName BSON_PROPERTY = createSimple(BsonProperty.class.getName());\n+    public static final DotName MONGO_ENTITY = createSimple(MongoEntity.class.getName());\n+    public static final DotName OBJECT_ID = createSimple(ObjectId.class.getName());\n+    public static final String OBJECT_SIGNATURE = toBinarySignature(Object.class);\n+    public static final DotName PROJECTION_FOR = createSimple(ProjectionFor.class.getName());\n+\n+    protected static String toBinarySignature(Class<?> type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1NzYzOQ==", "bodyText": "Yeah.  I can rename it to toDescriptor() but I'm actually hoping to change the type to a ByteCodeType as i feel that's a bit of cleaner type than a raw String.  Makes it easier to under stand in context where it's used.", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466657639", "createdAt": "2020-08-06T20:08:08Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/mongodb-panache-common/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/BasePanacheMongoResourceProcessor.java", "diffHunk": "@@ -0,0 +1,384 @@\n+package io.quarkus.mongodb.panache.deployment;\n+\n+import static io.quarkus.deployment.util.JandexUtil.resolveTypeParameters;\n+import static org.jboss.jandex.DotName.createSimple;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+\n+import org.bson.codecs.pojo.annotations.BsonId;\n+import org.bson.codecs.pojo.annotations.BsonIgnore;\n+import org.bson.codecs.pojo.annotations.BsonProperty;\n+import org.bson.types.ObjectId;\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.CompositeIndex;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.FieldInfo;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.Indexer;\n+import org.jboss.jandex.MethodInfo;\n+import org.jboss.jandex.Type;\n+\n+import io.quarkus.arc.deployment.ValidationPhaseBuildItem;\n+import io.quarkus.builder.BuildException;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.ExecutionTime;\n+import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.bean.JavaBeanUtil;\n+import io.quarkus.deployment.builditem.ApplicationArchivesBuildItem;\n+import io.quarkus.deployment.builditem.ApplicationIndexBuildItem;\n+import io.quarkus.deployment.builditem.BytecodeTransformerBuildItem;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveHierarchyBuildItem;\n+import io.quarkus.deployment.index.IndexingUtil;\n+import io.quarkus.deployment.util.JandexUtil;\n+import io.quarkus.jackson.spi.JacksonModuleBuildItem;\n+import io.quarkus.jsonb.spi.JsonbDeserializerBuildItem;\n+import io.quarkus.jsonb.spi.JsonbSerializerBuildItem;\n+import io.quarkus.mongodb.deployment.MongoClientNameBuildItem;\n+import io.quarkus.mongodb.deployment.MongoUnremovableClientsBuildItem;\n+import io.quarkus.mongodb.panache.MongoEntity;\n+import io.quarkus.mongodb.panache.PanacheMongoRecorder;\n+import io.quarkus.mongodb.panache.ProjectionFor;\n+import io.quarkus.mongodb.panache.jackson.ObjectIdDeserializer;\n+import io.quarkus.mongodb.panache.jackson.ObjectIdSerializer;\n+import io.quarkus.panache.common.deployment.PanacheEntityClassesBuildItem;\n+import io.quarkus.panache.common.deployment.PanacheEntityEnhancer;\n+import io.quarkus.panache.common.deployment.PanacheMethodCustomizer;\n+import io.quarkus.panache.common.deployment.PanacheMethodCustomizerBuildItem;\n+import io.quarkus.panache.common.deployment.PanacheRepositoryEnhancer;\n+\n+public abstract class BasePanacheMongoResourceProcessor {\n+    public static final DotName BSON_ID = createSimple(BsonId.class.getName());\n+    public static final DotName BSON_IGNORE = createSimple(BsonIgnore.class.getName());\n+    public static final DotName BSON_PROPERTY = createSimple(BsonProperty.class.getName());\n+    public static final DotName MONGO_ENTITY = createSimple(MongoEntity.class.getName());\n+    public static final DotName OBJECT_ID = createSimple(ObjectId.class.getName());\n+    public static final String OBJECT_SIGNATURE = toBinarySignature(Object.class);\n+    public static final DotName PROJECTION_FOR = createSimple(ProjectionFor.class.getName());\n+\n+    protected static String toBinarySignature(Class<?> type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1MjcwNA=="}, "originalCommit": {"oid": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzYwMTk3OnYy", "diffSide": "RIGHT", "path": "extensions/panache/mongodb-panache-kotlin/deployment/src/main/java/io/quarkus/mongodb/panache/kotlin/deployment/visitors/KotlinPanacheMongoRepositoryClassVisitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDo1MDowNVrOG83B-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxMjoyOVrOG9Cpbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ2OTM3MA==", "bodyText": "Are you really sure about this unboxed type?", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466469370", "createdAt": "2020-08-06T14:50:05Z", "author": {"login": "FroMage"}, "path": "extensions/panache/mongodb-panache-kotlin/deployment/src/main/java/io/quarkus/mongodb/panache/kotlin/deployment/visitors/KotlinPanacheMongoRepositoryClassVisitor.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package io.quarkus.mongodb.panache.kotlin.deployment.visitors;\n+\n+import static io.quarkus.deployment.util.AsmUtil.getDescriptor;\n+import static io.quarkus.mongodb.panache.kotlin.deployment.KotlinGenerator.findEntityTypeArguments;\n+\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.MethodInfo;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+\n+import io.quarkus.mongodb.panache.deployment.ByteCodeType;\n+import io.quarkus.mongodb.panache.deployment.TypeBundle;\n+import io.quarkus.mongodb.panache.kotlin.deployment.KotlinGenerator;\n+import io.quarkus.panache.common.deployment.PanacheEntityEnhancer;\n+import io.quarkus.panache.common.deployment.visitors.PanacheRepositoryClassVisitor;\n+\n+public class KotlinPanacheMongoRepositoryClassVisitor extends PanacheRepositoryClassVisitor {\n+    private final TypeBundle types;\n+    private KotlinGenerator generator;\n+    final Map<String, MethodInfo> toGenerate = new TreeMap<>();\n+    final Map<String, MethodInfo> toElide = new TreeMap<>();\n+\n+    public KotlinPanacheMongoRepositoryClassVisitor(IndexView indexView, ClassVisitor outputClassVisitor, String className,\n+            TypeBundle types) {\n+        super(className, outputClassVisitor, indexView);\n+        this.types = types;\n+    }\n+\n+    @Override\n+    protected final DotName getPanacheRepositoryDotName() {\n+        return types.repository().dotName();\n+    }\n+\n+    @Override\n+    protected final DotName getPanacheRepositoryBaseDotName() {\n+        return types.repositoryBase().dotName();\n+    }\n+\n+    @Override\n+    protected final String getPanacheOperationsInternalName() {\n+        return types.operations().internalName();\n+    }\n+\n+    @Override\n+    public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {\n+        super.visit(version, access, name, signature, superName, interfaces);\n+        final String repositoryClassName = name.replace('/', '.');\n+\n+        ByteCodeType[] foundTypeArguments = findEntityTypeArguments(indexView, repositoryClassName,\n+                getPanacheRepositoryBaseDotName());\n+\n+        ByteCodeType idType = foundTypeArguments[1].unbox();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1OTY5NA==", "bodyText": "In this case, yes, because the Id parameter has an upper bound of Any and not Any? which means the actual type used in method signatures would be the primitive types and not the wrappers.  So it would be safe to unbox() there because any non-wrapper type just gets passed through while the wrappers would get unboxed.", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466659694", "createdAt": "2020-08-06T20:12:29Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/mongodb-panache-kotlin/deployment/src/main/java/io/quarkus/mongodb/panache/kotlin/deployment/visitors/KotlinPanacheMongoRepositoryClassVisitor.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package io.quarkus.mongodb.panache.kotlin.deployment.visitors;\n+\n+import static io.quarkus.deployment.util.AsmUtil.getDescriptor;\n+import static io.quarkus.mongodb.panache.kotlin.deployment.KotlinGenerator.findEntityTypeArguments;\n+\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.MethodInfo;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+\n+import io.quarkus.mongodb.panache.deployment.ByteCodeType;\n+import io.quarkus.mongodb.panache.deployment.TypeBundle;\n+import io.quarkus.mongodb.panache.kotlin.deployment.KotlinGenerator;\n+import io.quarkus.panache.common.deployment.PanacheEntityEnhancer;\n+import io.quarkus.panache.common.deployment.visitors.PanacheRepositoryClassVisitor;\n+\n+public class KotlinPanacheMongoRepositoryClassVisitor extends PanacheRepositoryClassVisitor {\n+    private final TypeBundle types;\n+    private KotlinGenerator generator;\n+    final Map<String, MethodInfo> toGenerate = new TreeMap<>();\n+    final Map<String, MethodInfo> toElide = new TreeMap<>();\n+\n+    public KotlinPanacheMongoRepositoryClassVisitor(IndexView indexView, ClassVisitor outputClassVisitor, String className,\n+            TypeBundle types) {\n+        super(className, outputClassVisitor, indexView);\n+        this.types = types;\n+    }\n+\n+    @Override\n+    protected final DotName getPanacheRepositoryDotName() {\n+        return types.repository().dotName();\n+    }\n+\n+    @Override\n+    protected final DotName getPanacheRepositoryBaseDotName() {\n+        return types.repositoryBase().dotName();\n+    }\n+\n+    @Override\n+    protected final String getPanacheOperationsInternalName() {\n+        return types.operations().internalName();\n+    }\n+\n+    @Override\n+    public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {\n+        super.visit(version, access, name, signature, superName, interfaces);\n+        final String repositoryClassName = name.replace('/', '.');\n+\n+        ByteCodeType[] foundTypeArguments = findEntityTypeArguments(indexView, repositoryClassName,\n+                getPanacheRepositoryBaseDotName());\n+\n+        ByteCodeType idType = foundTypeArguments[1].unbox();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ2OTM3MA=="}, "originalCommit": {"oid": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzYxMjkyOnYy", "diffSide": "RIGHT", "path": "extensions/panache/mongodb-panache-kotlin/runtime/src/main/java/io/quarkus/mongodb/panache/kotlin/reactive/runtime/ReactivePanacheQueryImpl.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDo1MjozMVrOG83Itg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNjowMzowNVrOG9faPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ3MTA5NA==", "bodyText": "So why don't we have a single impl for java/kotlin of the query like we do for ORM?", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466471094", "createdAt": "2020-08-06T14:52:31Z", "author": {"login": "FroMage"}, "path": "extensions/panache/mongodb-panache-kotlin/runtime/src/main/java/io/quarkus/mongodb/panache/kotlin/reactive/runtime/ReactivePanacheQueryImpl.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package io.quarkus.mongodb.panache.kotlin.reactive.runtime;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.bson.Document;\n+import org.bson.conversions.Bson;\n+\n+import com.mongodb.client.model.Collation;\n+\n+import io.quarkus.mongodb.FindOptions;\n+import io.quarkus.mongodb.panache.kotlin.reactive.ReactivePanacheQuery;\n+import io.quarkus.mongodb.panache.runtime.MongoPropertyUtil;\n+import io.quarkus.mongodb.reactive.ReactiveMongoCollection;\n+import io.quarkus.panache.common.Page;\n+import io.quarkus.panache.common.Range;\n+import io.quarkus.panache.common.exception.PanacheQueryException;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+\n+public class ReactivePanacheQueryImpl<Entity> implements ReactivePanacheQuery<Entity> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MDI1NQ==", "bodyText": "I actually noticed that delegation after Loic had mentioned it.  I hadn't noticed that detail when you did all that refactoring to common code in the hibernate modules.  It's on my list to rectify today.", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466660255", "createdAt": "2020-08-06T20:13:38Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/mongodb-panache-kotlin/runtime/src/main/java/io/quarkus/mongodb/panache/kotlin/reactive/runtime/ReactivePanacheQueryImpl.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package io.quarkus.mongodb.panache.kotlin.reactive.runtime;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.bson.Document;\n+import org.bson.conversions.Bson;\n+\n+import com.mongodb.client.model.Collation;\n+\n+import io.quarkus.mongodb.FindOptions;\n+import io.quarkus.mongodb.panache.kotlin.reactive.ReactivePanacheQuery;\n+import io.quarkus.mongodb.panache.runtime.MongoPropertyUtil;\n+import io.quarkus.mongodb.reactive.ReactiveMongoCollection;\n+import io.quarkus.panache.common.Page;\n+import io.quarkus.panache.common.Range;\n+import io.quarkus.panache.common.exception.PanacheQueryException;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+\n+public class ReactivePanacheQueryImpl<Entity> implements ReactivePanacheQuery<Entity> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ3MTA5NA=="}, "originalCommit": {"oid": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzEwOTAwMw==", "bodyText": "just pushed that update", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r467109003", "createdAt": "2020-08-07T15:23:44Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/mongodb-panache-kotlin/runtime/src/main/java/io/quarkus/mongodb/panache/kotlin/reactive/runtime/ReactivePanacheQueryImpl.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package io.quarkus.mongodb.panache.kotlin.reactive.runtime;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.bson.Document;\n+import org.bson.conversions.Bson;\n+\n+import com.mongodb.client.model.Collation;\n+\n+import io.quarkus.mongodb.FindOptions;\n+import io.quarkus.mongodb.panache.kotlin.reactive.ReactivePanacheQuery;\n+import io.quarkus.mongodb.panache.runtime.MongoPropertyUtil;\n+import io.quarkus.mongodb.reactive.ReactiveMongoCollection;\n+import io.quarkus.panache.common.Page;\n+import io.quarkus.panache.common.Range;\n+import io.quarkus.panache.common.exception.PanacheQueryException;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+\n+public class ReactivePanacheQueryImpl<Entity> implements ReactivePanacheQuery<Entity> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ3MTA5NA=="}, "originalCommit": {"oid": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExMzk3OA==", "bodyText": "You only did it for the imperative PanacheQuery not for the ReactivePanacheQuery.", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r467113978", "createdAt": "2020-08-07T15:32:27Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/mongodb-panache-kotlin/runtime/src/main/java/io/quarkus/mongodb/panache/kotlin/reactive/runtime/ReactivePanacheQueryImpl.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package io.quarkus.mongodb.panache.kotlin.reactive.runtime;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.bson.Document;\n+import org.bson.conversions.Bson;\n+\n+import com.mongodb.client.model.Collation;\n+\n+import io.quarkus.mongodb.FindOptions;\n+import io.quarkus.mongodb.panache.kotlin.reactive.ReactivePanacheQuery;\n+import io.quarkus.mongodb.panache.runtime.MongoPropertyUtil;\n+import io.quarkus.mongodb.reactive.ReactiveMongoCollection;\n+import io.quarkus.panache.common.Page;\n+import io.quarkus.panache.common.Range;\n+import io.quarkus.panache.common.exception.PanacheQueryException;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+\n+public class ReactivePanacheQueryImpl<Entity> implements ReactivePanacheQuery<Entity> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ3MTA5NA=="}, "originalCommit": {"oid": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzEzMDk0MQ==", "bodyText": "sigh  i knew that was going to happen.  i even made a mental note and then got distracted by the kid.  sorry.  one moment.", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r467130941", "createdAt": "2020-08-07T16:03:05Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/mongodb-panache-kotlin/runtime/src/main/java/io/quarkus/mongodb/panache/kotlin/reactive/runtime/ReactivePanacheQueryImpl.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package io.quarkus.mongodb.panache.kotlin.reactive.runtime;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.bson.Document;\n+import org.bson.conversions.Bson;\n+\n+import com.mongodb.client.model.Collation;\n+\n+import io.quarkus.mongodb.FindOptions;\n+import io.quarkus.mongodb.panache.kotlin.reactive.ReactivePanacheQuery;\n+import io.quarkus.mongodb.panache.runtime.MongoPropertyUtil;\n+import io.quarkus.mongodb.reactive.ReactiveMongoCollection;\n+import io.quarkus.panache.common.Page;\n+import io.quarkus.panache.common.Range;\n+import io.quarkus.panache.common.exception.PanacheQueryException;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+\n+public class ReactivePanacheQueryImpl<Entity> implements ReactivePanacheQuery<Entity> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ3MTA5NA=="}, "originalCommit": {"oid": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzY0NzMzOnYy", "diffSide": "RIGHT", "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/ImperativeTypeBundle.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTowMDoyMVrOG83eww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxNjoyMVrOG9Cw4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ3NjczOQ==", "bodyText": "Feels weird to have this method defined in the Java base interface if it's only meant for Kotlin implementations. Is it called by the abstract processor? If not, it should probably belong in a Kotlin subinterface.", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466476739", "createdAt": "2020-08-06T15:00:21Z", "author": {"login": "FroMage"}, "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/ImperativeTypeBundle.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package io.quarkus.mongodb.panache.deployment;\n+\n+import io.quarkus.mongodb.panache.PanacheMongoEntity;\n+import io.quarkus.mongodb.panache.PanacheMongoEntityBase;\n+import io.quarkus.mongodb.panache.PanacheMongoRepository;\n+import io.quarkus.mongodb.panache.PanacheMongoRepositoryBase;\n+import io.quarkus.mongodb.panache.PanacheQuery;\n+import io.quarkus.mongodb.panache.PanacheUpdate;\n+import io.quarkus.mongodb.panache.runtime.MongoOperations;\n+\n+public class ImperativeTypeBundle implements TypeBundle {\n+    @Override\n+    public ByteCodeType entity() {\n+        return new ByteCodeType(PanacheMongoEntity.class);\n+    }\n+\n+    @Override\n+    public ByteCodeType entityBase() {\n+        return new ByteCodeType(PanacheMongoEntityBase.class);\n+    }\n+\n+    @Override\n+    public ByteCodeType entityBaseCompanion() {\n+        throw new UnsupportedOperationException(\"Companions are not supported in Java.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MTYwMA==", "bodyText": "Well, the idea was to have a single interface.  Generally the java side would never call that because it doesn't make sense but it means we can simply pass around TypeBundle references and not need to worry about subtypes.  I had actually thought about bumping the definition of those methods to default methods and then the java implementations can simply ignore them.  But I did have a case once early on when I was experimenting with this approach where I had passed in the wrong type and got the java type defs instead and this exception revealed that error quite quickly.", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466661600", "createdAt": "2020-08-06T20:16:21Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/ImperativeTypeBundle.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package io.quarkus.mongodb.panache.deployment;\n+\n+import io.quarkus.mongodb.panache.PanacheMongoEntity;\n+import io.quarkus.mongodb.panache.PanacheMongoEntityBase;\n+import io.quarkus.mongodb.panache.PanacheMongoRepository;\n+import io.quarkus.mongodb.panache.PanacheMongoRepositoryBase;\n+import io.quarkus.mongodb.panache.PanacheQuery;\n+import io.quarkus.mongodb.panache.PanacheUpdate;\n+import io.quarkus.mongodb.panache.runtime.MongoOperations;\n+\n+public class ImperativeTypeBundle implements TypeBundle {\n+    @Override\n+    public ByteCodeType entity() {\n+        return new ByteCodeType(PanacheMongoEntity.class);\n+    }\n+\n+    @Override\n+    public ByteCodeType entityBase() {\n+        return new ByteCodeType(PanacheMongoEntityBase.class);\n+    }\n+\n+    @Override\n+    public ByteCodeType entityBaseCompanion() {\n+        throw new UnsupportedOperationException(\"Companions are not supported in Java.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ3NjczOQ=="}, "originalCommit": {"oid": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 751, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}