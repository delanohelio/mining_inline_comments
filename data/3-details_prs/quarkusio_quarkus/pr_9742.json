{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3MTM4OTcy", "number": 9742, "title": "REST Data with Panache pagination", "bodyText": "I know we've discussed about adding a more generic JAX-RS pagination feature a couple of weeks ago. But since it seems that it would go to a Panache RESTEasy extension, which might take a while, I've decided to implement a basic pagination for the REST Data module because not having it limits the usefulness of the extension a lot.\nWDYT @geoand @FroMage", "createdAt": "2020-06-03T11:26:33Z", "url": "https://github.com/quarkusio/quarkus/pull/9742", "merged": true, "mergeCommit": {"oid": "a1685c57bfa30ecb1cfbd40beffcd141ed871847"}, "closed": true, "closedAt": "2020-06-17T08:30:18Z", "author": {"login": "gytis"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnpC6WgFqTQyMzUwNjc0OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcrzAWbABqjM0NDgzOTM4OTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNTA2NzQ5", "url": "https://github.com/quarkusio/quarkus/pull/9742#pullrequestreview-423506749", "createdAt": "2020-06-03T12:35:50Z", "commit": {"oid": "486489ed5b3b90bea56c5da17dd5b9cd7bff6aa1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjozNTo1MFrOGeZyBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjo1ODoyMVrOGeanOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUzMjg2OA==", "bodyText": "Are you sure those are good headers? I though user headers had to start with X-?", "url": "https://github.com/quarkusio/quarkus/pull/9742#discussion_r434532868", "createdAt": "2020-06-03T12:35:50Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-rest-data-panache/deployment/src/test/java/io/quarkus/hibernate/orm/rest/data/panache/deployment/AbstractGetMethodTest.java", "diffHunk": "@@ -127,4 +128,96 @@ void shouldListComplexHalObjects() {\n                 .and().body(\"_links.add.href\", endsWith(\"/collections\"))\n                 .and().body(\"_links.list.href\", endsWith(\"/collections\"));\n     }\n+\n+    @Test\n+    void shouldNotGetNonExistentPage() {\n+        given().accept(\"application/json\")\n+                .and().queryParam(\"page\", 100)\n+                .when().get(\"/items\")\n+                .then().statusCode(200)\n+                .and().body(\"id\", is(empty()));\n+    }\n+\n+    @Test\n+    void shouldNotGetNegativePageOrSize() {\n+        given().accept(\"application/json\")\n+                .and().queryParam(\"page\", -1)\n+                .and().queryParam(\"size\", -1)\n+                .when().get(\"/items\")\n+                .then().statusCode(200)\n+                // Invalid page and size parameters are replaced with defaults\n+                .and().body(\"id\", contains(1, 2));\n+    }\n+\n+    @Test\n+    void shouldGetFirstPage() {\n+        given().accept(\"application/json\")\n+                .and().queryParam(\"page\", 0)\n+                .and().queryParam(\"size\", 1)\n+                .when().get(\"/items\")\n+                .then().statusCode(200)\n+                .and().body(\"id\", contains(1))\n+                .and().body(\"name\", contains(\"first\"))\n+                .and().header(\"first\", endsWith(\"/items?page=0&size=1\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "486489ed5b3b90bea56c5da17dd5b9cd7bff6aa1"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU0MDE5MA==", "bodyText": "Why not via query params?", "url": "https://github.com/quarkusio/quarkus/pull/9742#discussion_r434540190", "createdAt": "2020-06-03T12:48:13Z", "author": {"login": "FroMage"}, "path": "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/ListMethodImplementor.java", "diffHunk": "@@ -29,8 +42,19 @@\n      *         rel = \"list\",\n      *         entityClassName = \"com.example.Entity\"\n      *     )\n-     *     public List list() {\n-     *         return Entity.listAll();\n+     *     public Response list() {\n+     *         if (this.isPaged()) {\n+     *            Page page = ...; // Extract page index and size from a UriInfo field and create a page instance.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "486489ed5b3b90bea56c5da17dd5b9cd7bff6aa1"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU0MTY1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    MethodDescriptor idPagedMethod = ofMethod(methodCreator.getMethodDescriptor().getDeclaringClass(), IS_PAGED.getName(),\n          \n          \n            \n                    MethodDescriptor isPagedMethod = ofMethod(methodCreator.getMethodDescriptor().getDeclaringClass(), IS_PAGED.getName(),", "url": "https://github.com/quarkusio/quarkus/pull/9742#discussion_r434541659", "createdAt": "2020-06-03T12:50:33Z", "author": {"login": "FroMage"}, "path": "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/hal/ListHalMethodImplementor.java", "diffHunk": "@@ -26,29 +41,84 @@\n      *     &#64;GET\n      *     &#64;Path(\"\")\n      *     &#64;Produces({\"application/hal+json\"})\n-     *     public HalCollectionWrapper listHal() {\n-     *         List entities = BookEntity.listAll();\n-     *         return new HalCollectionWrapper(entities, Entity.class, \"entities\");\n+     *     public Response listHal() {\n+     *         if (this.isPaged()) {\n+     *            Page page = ...; // Extract page index and size from a UriInfo field and create a page instance.\n+     *            PanacheQuery query = Entity.findAll();\n+     *            query.page(page);\n+     *            List entities = query.list();\n+     *            // Get the page count, and build first, last, next, previous page instances\n+     *            HalCollectionWrapper wrapper = new HalCollectionWrapper(entities, Entity.class, \"entities\");\n+     *            // Add first, last, next and previous page URIs to the wrapper if they exist\n+     *            Response.ResponseBuilder responseBuilder = Response.status(200);\n+     *            responseBuilder.entity(wrapper);\n+     *            // Add headers with first, last, next and previous page URIs if they exist\n+     *            return responseBuilder.build();\n+     *         } else {\n+     *             List entities = Entity.listAll();\n+     *             return Response.ok(new HalCollectionWrapper(entities, Entity.class, \"entities\")).build();\n+     *         }\n      *     }\n      * }\n      * </pre>\n      */\n     @Override\n     protected void implementInternal(ClassCreator classCreator, IndexView index, MethodPropertiesAccessor propertiesAccessor,\n             RestDataResourceInfo resourceInfo) {\n-        MethodCreator methodCreator = classCreator.getMethodCreator(NAME, HalCollectionWrapper.class);\n+        MethodCreator methodCreator = classCreator.getMethodCreator(NAME, Response.class);\n         addGetAnnotation(methodCreator);\n         addPathAnnotation(methodCreator,\n                 propertiesAccessor.getPath(resourceInfo.getClassInfo(), getStandardMethodMetadata(resourceInfo)));\n         addProducesAnnotation(methodCreator, MethodImplementor.APPLICATION_HAL_JSON);\n \n-        ResultHandle entities = resourceInfo.getDataAccessImplementor().listAll(methodCreator);\n-        methodCreator.returnValue(wrapEntities(methodCreator, entities, resourceInfo));\n+        FieldDescriptor uriInfoField = of(methodCreator.getMethodDescriptor().getDeclaringClass(), URI_INFO.getName(),\n+                URI_INFO.getType());\n+        MethodDescriptor idPagedMethod = ofMethod(methodCreator.getMethodDescriptor().getDeclaringClass(), IS_PAGED.getName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "486489ed5b3b90bea56c5da17dd5b9cd7bff6aa1"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU0NjQ5MA==", "bodyText": "Actually TIL X- prefixes are deprecated now: https://tools.ietf.org/html/rfc6648\nStill, shouldn't this rather use the Link header? https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Link", "url": "https://github.com/quarkusio/quarkus/pull/9742#discussion_r434546490", "createdAt": "2020-06-03T12:58:21Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-rest-data-panache/deployment/src/test/java/io/quarkus/hibernate/orm/rest/data/panache/deployment/AbstractGetMethodTest.java", "diffHunk": "@@ -127,4 +128,96 @@ void shouldListComplexHalObjects() {\n                 .and().body(\"_links.add.href\", endsWith(\"/collections\"))\n                 .and().body(\"_links.list.href\", endsWith(\"/collections\"));\n     }\n+\n+    @Test\n+    void shouldNotGetNonExistentPage() {\n+        given().accept(\"application/json\")\n+                .and().queryParam(\"page\", 100)\n+                .when().get(\"/items\")\n+                .then().statusCode(200)\n+                .and().body(\"id\", is(empty()));\n+    }\n+\n+    @Test\n+    void shouldNotGetNegativePageOrSize() {\n+        given().accept(\"application/json\")\n+                .and().queryParam(\"page\", -1)\n+                .and().queryParam(\"size\", -1)\n+                .when().get(\"/items\")\n+                .then().statusCode(200)\n+                // Invalid page and size parameters are replaced with defaults\n+                .and().body(\"id\", contains(1, 2));\n+    }\n+\n+    @Test\n+    void shouldGetFirstPage() {\n+        given().accept(\"application/json\")\n+                .and().queryParam(\"page\", 0)\n+                .and().queryParam(\"size\", 1)\n+                .when().get(\"/items\")\n+                .then().statusCode(200)\n+                .and().body(\"id\", contains(1))\n+                .and().body(\"name\", contains(\"first\"))\n+                .and().header(\"first\", endsWith(\"/items?page=0&size=1\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUzMjg2OA=="}, "originalCommit": {"oid": "486489ed5b3b90bea56c5da17dd5b9cd7bff6aa1"}, "originalPosition": 42}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "42943771b94c70332eaa438f9669d025372dc694", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/42943771b94c70332eaa438f9669d025372dc694", "committedDate": "2020-06-03T14:03:58Z", "message": "Update extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/hal/ListHalMethodImplementor.java\n\nCo-authored-by: St\u00e9phane \u00c9pardaud <stef@inforealm.org>"}, "afterCommit": {"oid": "2a553944cac0aef1eee2f1138bdfea1144d566a7", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/2a553944cac0aef1eee2f1138bdfea1144d566a7", "committedDate": "2020-06-08T17:40:54Z", "message": "REST Data with Panache pagination"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2a553944cac0aef1eee2f1138bdfea1144d566a7", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/2a553944cac0aef1eee2f1138bdfea1144d566a7", "committedDate": "2020-06-08T17:40:54Z", "message": "REST Data with Panache pagination"}, "afterCommit": {"oid": "82a4d0ce800e1375cc1fd07b9748364c23a3bf78", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/82a4d0ce800e1375cc1fd07b9748364c23a3bf78", "committedDate": "2020-06-09T07:10:27Z", "message": "REST Data with Panache pagination"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "82a4d0ce800e1375cc1fd07b9748364c23a3bf78", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/82a4d0ce800e1375cc1fd07b9748364c23a3bf78", "committedDate": "2020-06-09T07:10:27Z", "message": "REST Data with Panache pagination"}, "afterCommit": {"oid": "50c32406c08002a4b1d79dc72df45baa3fd4219d", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/50c32406c08002a4b1d79dc72df45baa3fd4219d", "committedDate": "2020-06-09T07:21:33Z", "message": "REST Data with Panache pagination"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "50c32406c08002a4b1d79dc72df45baa3fd4219d", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/50c32406c08002a4b1d79dc72df45baa3fd4219d", "committedDate": "2020-06-09T07:21:33Z", "message": "REST Data with Panache pagination"}, "afterCommit": {"oid": "bfd03b31cd3d2dfb3633c8e9b23fdca80b09cc80", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/bfd03b31cd3d2dfb3633c8e9b23fdca80b09cc80", "committedDate": "2020-06-09T07:26:30Z", "message": "REST Data with Panache pagination"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwODA3MjM3", "url": "https://github.com/quarkusio/quarkus/pull/9742#pullrequestreview-430807237", "createdAt": "2020-06-15T16:30:30Z", "commit": {"oid": "bfd03b31cd3d2dfb3633c8e9b23fdca80b09cc80"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjozMDozMFrOGj50Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjozMToxNFrOGj52Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMDY0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    MethodDescriptor idPagedMethod = ofMethod(methodCreator.getMethodDescriptor().getDeclaringClass(), IS_PAGED.getName(),\n          \n          \n            \n                    MethodDescriptor isPagedMethod = ofMethod(methodCreator.getMethodDescriptor().getDeclaringClass(), IS_PAGED.getName(),", "url": "https://github.com/quarkusio/quarkus/pull/9742#discussion_r440300647", "createdAt": "2020-06-15T16:30:30Z", "author": {"login": "FroMage"}, "path": "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/ListMethodImplementor.java", "diffHunk": "@@ -39,18 +63,40 @@\n     protected void implementInternal(ClassCreator classCreator, IndexView index, MethodPropertiesAccessor propertiesAccessor,\n             RestDataResourceInfo resourceInfo) {\n         MethodMetadata methodMetadata = getMethodMetadata(resourceInfo);\n-        MethodCreator methodCreator = classCreator.getMethodCreator(methodMetadata.getName(), List.class);\n+        MethodCreator methodCreator = classCreator.getMethodCreator(methodMetadata.getName(), Response.class);\n         addGetAnnotation(methodCreator);\n         addPathAnnotation(methodCreator, propertiesAccessor.getPath(resourceInfo.getClassInfo(), methodMetadata));\n         addProducesAnnotation(methodCreator, APPLICATION_JSON);\n         addLinksAnnotation(methodCreator, resourceInfo.getEntityClassName(), REL);\n \n-        methodCreator.returnValue(resourceInfo.getDataAccessImplementor().listAll(methodCreator));\n+        FieldDescriptor uriInfoField = of(methodCreator.getMethodDescriptor().getDeclaringClass(), URI_INFO.getName(),\n+                URI_INFO.getType());\n+        MethodDescriptor idPagedMethod = ofMethod(methodCreator.getMethodDescriptor().getDeclaringClass(), IS_PAGED.getName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfd03b31cd3d2dfb3633c8e9b23fdca80b09cc80"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMDgzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    BranchResult isPaged = methodCreator.ifTrue(methodCreator.invokeVirtualMethod(idPagedMethod, methodCreator.getThis()));\n          \n          \n            \n                    BranchResult isPaged = methodCreator.ifTrue(methodCreator.invokeVirtualMethod(isPagedMethod, methodCreator.getThis()));", "url": "https://github.com/quarkusio/quarkus/pull/9742#discussion_r440300833", "createdAt": "2020-06-15T16:30:48Z", "author": {"login": "FroMage"}, "path": "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/ListMethodImplementor.java", "diffHunk": "@@ -39,18 +63,40 @@\n     protected void implementInternal(ClassCreator classCreator, IndexView index, MethodPropertiesAccessor propertiesAccessor,\n             RestDataResourceInfo resourceInfo) {\n         MethodMetadata methodMetadata = getMethodMetadata(resourceInfo);\n-        MethodCreator methodCreator = classCreator.getMethodCreator(methodMetadata.getName(), List.class);\n+        MethodCreator methodCreator = classCreator.getMethodCreator(methodMetadata.getName(), Response.class);\n         addGetAnnotation(methodCreator);\n         addPathAnnotation(methodCreator, propertiesAccessor.getPath(resourceInfo.getClassInfo(), methodMetadata));\n         addProducesAnnotation(methodCreator, APPLICATION_JSON);\n         addLinksAnnotation(methodCreator, resourceInfo.getEntityClassName(), REL);\n \n-        methodCreator.returnValue(resourceInfo.getDataAccessImplementor().listAll(methodCreator));\n+        FieldDescriptor uriInfoField = of(methodCreator.getMethodDescriptor().getDeclaringClass(), URI_INFO.getName(),\n+                URI_INFO.getType());\n+        MethodDescriptor idPagedMethod = ofMethod(methodCreator.getMethodDescriptor().getDeclaringClass(), IS_PAGED.getName(),\n+                IS_PAGED.getType(), IS_PAGED.getParams());\n+\n+        BranchResult isPaged = methodCreator.ifTrue(methodCreator.invokeVirtualMethod(idPagedMethod, methodCreator.getThis()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfd03b31cd3d2dfb3633c8e9b23fdca80b09cc80"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMDk4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    MethodDescriptor idPagedMethod = ofMethod(methodCreator.getMethodDescriptor().getDeclaringClass(), IS_PAGED.getName(),\n          \n          \n            \n                    MethodDescriptor isPagedMethod = ofMethod(methodCreator.getMethodDescriptor().getDeclaringClass(), IS_PAGED.getName(),", "url": "https://github.com/quarkusio/quarkus/pull/9742#discussion_r440300984", "createdAt": "2020-06-15T16:31:03Z", "author": {"login": "FroMage"}, "path": "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/hal/ListHalMethodImplementor.java", "diffHunk": "@@ -26,29 +40,66 @@\n      *     &#64;GET\n      *     &#64;Path(\"\")\n      *     &#64;Produces({\"application/hal+json\"})\n-     *     public HalCollectionWrapper listHal() {\n-     *         List entities = BookEntity.listAll();\n-     *         return new HalCollectionWrapper(entities, Entity.class, \"entities\");\n+     *     public Response listHal() {\n+     *         if (this.isPaged()) {\n+     *            Page page = ...; // Extract page index and size from a UriInfo field and create a page instance.\n+     *            PanacheQuery query = Entity.findAll();\n+     *            query.page(page);\n+     *            List entities = query.list();\n+     *            // Get the page count, and build first, last, next, previous page instances\n+     *            HalCollectionWrapper wrapper = new HalCollectionWrapper(entities, Entity.class, \"entities\");\n+     *            // Add first, last, next and previous page URIs to the wrapper if they exist\n+     *            Response.ResponseBuilder responseBuilder = Response.status(200);\n+     *            responseBuilder.entity(wrapper);\n+     *            // Add headers with first, last, next and previous page URIs if they exist\n+     *            return responseBuilder.build();\n+     *         } else {\n+     *             List entities = Entity.listAll();\n+     *             return Response.ok(new HalCollectionWrapper(entities, Entity.class, \"entities\")).build();\n+     *         }\n      *     }\n      * }\n      * </pre>\n      */\n     @Override\n     protected void implementInternal(ClassCreator classCreator, IndexView index, MethodPropertiesAccessor propertiesAccessor,\n             RestDataResourceInfo resourceInfo) {\n-        MethodCreator methodCreator = classCreator.getMethodCreator(NAME, HalCollectionWrapper.class);\n+        MethodCreator methodCreator = classCreator.getMethodCreator(NAME, Response.class);\n         addGetAnnotation(methodCreator);\n         addPathAnnotation(methodCreator,\n                 propertiesAccessor.getPath(resourceInfo.getClassInfo(), getStandardMethodMetadata(resourceInfo)));\n         addProducesAnnotation(methodCreator, MethodImplementor.APPLICATION_HAL_JSON);\n \n-        ResultHandle entities = resourceInfo.getDataAccessImplementor().listAll(methodCreator);\n-        methodCreator.returnValue(wrapEntities(methodCreator, entities, resourceInfo));\n+        FieldDescriptor uriInfoField = of(methodCreator.getMethodDescriptor().getDeclaringClass(), URI_INFO.getName(),\n+                URI_INFO.getType());\n+        MethodDescriptor idPagedMethod = ofMethod(methodCreator.getMethodDescriptor().getDeclaringClass(), IS_PAGED.getName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfd03b31cd3d2dfb3633c8e9b23fdca80b09cc80"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMTA5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    BranchResult isPaged = methodCreator.ifTrue(methodCreator.invokeVirtualMethod(idPagedMethod, methodCreator.getThis()));\n          \n          \n            \n                    BranchResult isPaged = methodCreator.ifTrue(methodCreator.invokeVirtualMethod(isPagedMethod, methodCreator.getThis()));", "url": "https://github.com/quarkusio/quarkus/pull/9742#discussion_r440301098", "createdAt": "2020-06-15T16:31:14Z", "author": {"login": "FroMage"}, "path": "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/hal/ListHalMethodImplementor.java", "diffHunk": "@@ -26,29 +40,66 @@\n      *     &#64;GET\n      *     &#64;Path(\"\")\n      *     &#64;Produces({\"application/hal+json\"})\n-     *     public HalCollectionWrapper listHal() {\n-     *         List entities = BookEntity.listAll();\n-     *         return new HalCollectionWrapper(entities, Entity.class, \"entities\");\n+     *     public Response listHal() {\n+     *         if (this.isPaged()) {\n+     *            Page page = ...; // Extract page index and size from a UriInfo field and create a page instance.\n+     *            PanacheQuery query = Entity.findAll();\n+     *            query.page(page);\n+     *            List entities = query.list();\n+     *            // Get the page count, and build first, last, next, previous page instances\n+     *            HalCollectionWrapper wrapper = new HalCollectionWrapper(entities, Entity.class, \"entities\");\n+     *            // Add first, last, next and previous page URIs to the wrapper if they exist\n+     *            Response.ResponseBuilder responseBuilder = Response.status(200);\n+     *            responseBuilder.entity(wrapper);\n+     *            // Add headers with first, last, next and previous page URIs if they exist\n+     *            return responseBuilder.build();\n+     *         } else {\n+     *             List entities = Entity.listAll();\n+     *             return Response.ok(new HalCollectionWrapper(entities, Entity.class, \"entities\")).build();\n+     *         }\n      *     }\n      * }\n      * </pre>\n      */\n     @Override\n     protected void implementInternal(ClassCreator classCreator, IndexView index, MethodPropertiesAccessor propertiesAccessor,\n             RestDataResourceInfo resourceInfo) {\n-        MethodCreator methodCreator = classCreator.getMethodCreator(NAME, HalCollectionWrapper.class);\n+        MethodCreator methodCreator = classCreator.getMethodCreator(NAME, Response.class);\n         addGetAnnotation(methodCreator);\n         addPathAnnotation(methodCreator,\n                 propertiesAccessor.getPath(resourceInfo.getClassInfo(), getStandardMethodMetadata(resourceInfo)));\n         addProducesAnnotation(methodCreator, MethodImplementor.APPLICATION_HAL_JSON);\n \n-        ResultHandle entities = resourceInfo.getDataAccessImplementor().listAll(methodCreator);\n-        methodCreator.returnValue(wrapEntities(methodCreator, entities, resourceInfo));\n+        FieldDescriptor uriInfoField = of(methodCreator.getMethodDescriptor().getDeclaringClass(), URI_INFO.getName(),\n+                URI_INFO.getType());\n+        MethodDescriptor idPagedMethod = ofMethod(methodCreator.getMethodDescriptor().getDeclaringClass(), IS_PAGED.getName(),\n+                IS_PAGED.getType(), IS_PAGED.getParams());\n+\n+        BranchResult isPaged = methodCreator.ifTrue(methodCreator.invokeVirtualMethod(idPagedMethod, methodCreator.getThis()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfd03b31cd3d2dfb3633c8e9b23fdca80b09cc80"}, "originalPosition": 76}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5f919790b2af88d8ee6d94a6d4ea44733126f18c", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/5f919790b2af88d8ee6d94a6d4ea44733126f18c", "committedDate": "2020-06-15T17:26:47Z", "message": "Update extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/methods/hal/ListHalMethodImplementor.java\n\nCo-authored-by: St\u00e9phane \u00c9pardaud <stef@inforealm.org>"}, "afterCommit": {"oid": "485878a7fe2c6303b53e377a27eb9371f984aa80", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/485878a7fe2c6303b53e377a27eb9371f984aa80", "committedDate": "2020-06-15T17:52:13Z", "message": "REST Data with Panache pagination"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMjU4MjI3", "url": "https://github.com/quarkusio/quarkus/pull/9742#pullrequestreview-431258227", "createdAt": "2020-06-16T08:06:29Z", "commit": {"oid": "485878a7fe2c6303b53e377a27eb9371f984aa80"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4f6628ac235d726be7b5a9ac28002c68d318aec", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/d4f6628ac235d726be7b5a9ac28002c68d318aec", "committedDate": "2020-06-16T10:50:07Z", "message": "REST Data with Panache pagination"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "485878a7fe2c6303b53e377a27eb9371f984aa80", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/485878a7fe2c6303b53e377a27eb9371f984aa80", "committedDate": "2020-06-15T17:52:13Z", "message": "REST Data with Panache pagination"}, "afterCommit": {"oid": "d4f6628ac235d726be7b5a9ac28002c68d318aec", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/d4f6628ac235d726be7b5a9ac28002c68d318aec", "committedDate": "2020-06-16T10:50:07Z", "message": "REST Data with Panache pagination"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4416, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}