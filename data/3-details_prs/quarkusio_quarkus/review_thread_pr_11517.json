{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNTQ1Nzc2", "number": 11517, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMDoyNzowNFrOEa6lQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoyOToxNlrOEcbl1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NjU4MjQzOnYy", "diffSide": "RIGHT", "path": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/buildfile/AbstractGradleBuildFile.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMDoyNzowNFrOHEoGLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzozNTo0OVrOHFX8hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYxMzI5Mw==", "bodyText": "Can't you remove this from addDependencyInModel now that we check before?:\nif (buildContent.indexOf(newDependency) == -1) {", "url": "https://github.com/quarkusio/quarkus/pull/11517#discussion_r474613293", "createdAt": "2020-08-21T10:27:04Z", "author": {"login": "ia3andy"}, "path": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/buildfile/AbstractGradleBuildFile.java", "diffHunk": "@@ -57,23 +56,17 @@ public void writeToDisk() throws IOException {\n         writeToProjectFile(getBuildGradlePath(), getModel().getBuildContent().getBytes());\n     }\n \n-    static String createDependencyCoordinatesString(Model model, AppArtifactCoords coords, boolean managed, char quoteChar) {\n-        boolean isBOM = \"pom\".equals(coords.getType());\n-        // Special case for platform dependency. We will create properties based dependency string.\n-        // It will be ignored if it is already in \"dependencies\" section.\n-        // Note that we ignore version here - if someone tries to add platform with different version, we will still use\n-        // version from properties.\n-        if (isBOM && !managed\n-                && Objects.equals(coords.getGroupId(), getProperty(model, \"quarkusPlatformGroupId\"))\n-                && Objects.equals(coords.getArtifactId(), getProperty(model, \"quarkusPlatformArtifactId\"))) {\n-            return \"enforcedPlatform(\\\"${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}\\\")\";\n-        }\n+    static String createDependencyCoordinatesString(AppArtifactCoords coords, boolean managed, char quoteChar) {\n         StringBuilder newDependency = new StringBuilder().append(quoteChar)\n                 .append(coords.getGroupId()).append(\":\").append(coords.getArtifactId());\n         if (!managed &&\n                 (coords.getVersion() != null && !coords.getVersion().isEmpty())) {\n             newDependency.append(\":\").append(coords.getVersion());\n         }\n+        boolean isBOM = \"pom\".equals(coords.getType());\n+        if (isBOM && !managed) {\n+            return String.format(\"enforcedPlatform(%s)\", newDependency.append(quoteChar).toString());\n+        }\n         return newDependency.append(quoteChar).toString();\n     }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d67b3b1ec9b5d6c32b3b474e13c8250ae7a6f25c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM4MzE0MQ==", "bodyText": "Yes, I think we can remove this check now.", "url": "https://github.com/quarkusio/quarkus/pull/11517#discussion_r475383141", "createdAt": "2020-08-24T07:05:53Z", "author": {"login": "mgorniew"}, "path": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/buildfile/AbstractGradleBuildFile.java", "diffHunk": "@@ -57,23 +56,17 @@ public void writeToDisk() throws IOException {\n         writeToProjectFile(getBuildGradlePath(), getModel().getBuildContent().getBytes());\n     }\n \n-    static String createDependencyCoordinatesString(Model model, AppArtifactCoords coords, boolean managed, char quoteChar) {\n-        boolean isBOM = \"pom\".equals(coords.getType());\n-        // Special case for platform dependency. We will create properties based dependency string.\n-        // It will be ignored if it is already in \"dependencies\" section.\n-        // Note that we ignore version here - if someone tries to add platform with different version, we will still use\n-        // version from properties.\n-        if (isBOM && !managed\n-                && Objects.equals(coords.getGroupId(), getProperty(model, \"quarkusPlatformGroupId\"))\n-                && Objects.equals(coords.getArtifactId(), getProperty(model, \"quarkusPlatformArtifactId\"))) {\n-            return \"enforcedPlatform(\\\"${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}\\\")\";\n-        }\n+    static String createDependencyCoordinatesString(AppArtifactCoords coords, boolean managed, char quoteChar) {\n         StringBuilder newDependency = new StringBuilder().append(quoteChar)\n                 .append(coords.getGroupId()).append(\":\").append(coords.getArtifactId());\n         if (!managed &&\n                 (coords.getVersion() != null && !coords.getVersion().isEmpty())) {\n             newDependency.append(\":\").append(coords.getVersion());\n         }\n+        boolean isBOM = \"pom\".equals(coords.getType());\n+        if (isBOM && !managed) {\n+            return String.format(\"enforcedPlatform(%s)\", newDependency.append(quoteChar).toString());\n+        }\n         return newDependency.append(quoteChar).toString();\n     }\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYxMzI5Mw=="}, "originalCommit": {"oid": "d67b3b1ec9b5d6c32b3b474e13c8250ae7a6f25c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5NzI1Mg==", "bodyText": "@mgorniew ok I am waiting for this PR to be \"ready for review\" with this change, let me know ;-)", "url": "https://github.com/quarkusio/quarkus/pull/11517#discussion_r475397252", "createdAt": "2020-08-24T07:35:49Z", "author": {"login": "ia3andy"}, "path": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/buildfile/AbstractGradleBuildFile.java", "diffHunk": "@@ -57,23 +56,17 @@ public void writeToDisk() throws IOException {\n         writeToProjectFile(getBuildGradlePath(), getModel().getBuildContent().getBytes());\n     }\n \n-    static String createDependencyCoordinatesString(Model model, AppArtifactCoords coords, boolean managed, char quoteChar) {\n-        boolean isBOM = \"pom\".equals(coords.getType());\n-        // Special case for platform dependency. We will create properties based dependency string.\n-        // It will be ignored if it is already in \"dependencies\" section.\n-        // Note that we ignore version here - if someone tries to add platform with different version, we will still use\n-        // version from properties.\n-        if (isBOM && !managed\n-                && Objects.equals(coords.getGroupId(), getProperty(model, \"quarkusPlatformGroupId\"))\n-                && Objects.equals(coords.getArtifactId(), getProperty(model, \"quarkusPlatformArtifactId\"))) {\n-            return \"enforcedPlatform(\\\"${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}\\\")\";\n-        }\n+    static String createDependencyCoordinatesString(AppArtifactCoords coords, boolean managed, char quoteChar) {\n         StringBuilder newDependency = new StringBuilder().append(quoteChar)\n                 .append(coords.getGroupId()).append(\":\").append(coords.getArtifactId());\n         if (!managed &&\n                 (coords.getVersion() != null && !coords.getVersion().isEmpty())) {\n             newDependency.append(\":\").append(coords.getVersion());\n         }\n+        boolean isBOM = \"pom\".equals(coords.getType());\n+        if (isBOM && !managed) {\n+            return String.format(\"enforcedPlatform(%s)\", newDependency.append(quoteChar).toString());\n+        }\n         return newDependency.append(quoteChar).toString();\n     }\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYxMzI5Mw=="}, "originalCommit": {"oid": "d67b3b1ec9b5d6c32b3b474e13c8250ae7a6f25c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzQzNDU5OnYy", "diffSide": "RIGHT", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/builder/QuarkusModelBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNDo0ODoxMVrOHEwMmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzo1MToyN1rOHGZGFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc0NjAwOA==", "bodyText": "If you are collecting platforms here, deploymentDeps isn't just the platforms (BOMs), it includes the extension deployment artifacts as well.", "url": "https://github.com/quarkusio/quarkus/pull/11517#discussion_r474746008", "createdAt": "2020-08-21T14:48:11Z", "author": {"login": "aloubyansky"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/builder/QuarkusModelBuilder.java", "diffHunk": "@@ -101,7 +104,9 @@ public Object buildAll(String modelName, ModelParameter parameter, Project proje\n \n         return new QuarkusModelImpl(new WorkspaceImpl(appArtifactCoords, getWorkspace(project.getRootProject(), mode)),\n                 new LinkedList<>(appDependencies.values()),\n-                extensionDependencies);\n+                extensionDependencies,\n+                deploymentDeps.stream().map(QuarkusModelBuilder::toEnforcedPlatformDependency)\n+                        .filter(Objects::nonNull).collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d67b3b1ec9b5d6c32b3b474e13c8250ae7a6f25c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQzMDU0NA==", "bodyText": "@aloubyansky I didn't really get what you mean here, @mgorniew maybe you did?", "url": "https://github.com/quarkusio/quarkus/pull/11517#discussion_r476430544", "createdAt": "2020-08-25T13:02:18Z", "author": {"login": "ia3andy"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/builder/QuarkusModelBuilder.java", "diffHunk": "@@ -101,7 +104,9 @@ public Object buildAll(String modelName, ModelParameter parameter, Project proje\n \n         return new QuarkusModelImpl(new WorkspaceImpl(appArtifactCoords, getWorkspace(project.getRootProject(), mode)),\n                 new LinkedList<>(appDependencies.values()),\n-                extensionDependencies);\n+                extensionDependencies,\n+                deploymentDeps.stream().map(QuarkusModelBuilder::toEnforcedPlatformDependency)\n+                        .filter(Objects::nonNull).collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc0NjAwOA=="}, "originalCommit": {"oid": "d67b3b1ec9b5d6c32b3b474e13c8250ae7a6f25c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ2NDY2MQ==", "bodyText": "It looks ok now. Alternatively, @mgorniew getEnforcedPlatforms(project) at line 88 returns the enforced platforms. So at that point you could simply make a copy of that set.", "url": "https://github.com/quarkusio/quarkus/pull/11517#discussion_r476464661", "createdAt": "2020-08-25T13:51:27Z", "author": {"login": "aloubyansky"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/builder/QuarkusModelBuilder.java", "diffHunk": "@@ -101,7 +104,9 @@ public Object buildAll(String modelName, ModelParameter parameter, Project proje\n \n         return new QuarkusModelImpl(new WorkspaceImpl(appArtifactCoords, getWorkspace(project.getRootProject(), mode)),\n                 new LinkedList<>(appDependencies.values()),\n-                extensionDependencies);\n+                extensionDependencies,\n+                deploymentDeps.stream().map(QuarkusModelBuilder::toEnforcedPlatformDependency)\n+                        .filter(Objects::nonNull).collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc0NjAwOA=="}, "originalCommit": {"oid": "d67b3b1ec9b5d6c32b3b474e13c8250ae7a6f25c"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzM1Nzc2OnYy", "diffSide": "RIGHT", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/ConnectorDependencyResolver.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzo0MjoxM1rOHGLhqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMToyNzoxNFrOHGTlmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0MjM0Nw==", "bodyText": "@mgorniew why are we using org.apache.maven.model.Dependency here?", "url": "https://github.com/quarkusio/quarkus/pull/11517#discussion_r476242347", "createdAt": "2020-08-25T07:42:13Z", "author": {"login": "ia3andy"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/ConnectorDependencyResolver.java", "diffHunk": "@@ -3,38 +3,37 @@\n import java.nio.file.Path;\n import java.util.Collections;\n import java.util.List;\n-import java.util.Objects;\n import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n import org.apache.maven.model.Dependency;\n import org.gradle.tooling.BuildException;\n-import org.gradle.tooling.GradleConnector;\n-import org.gradle.tooling.ProjectConnection;\n-import org.gradle.tooling.model.eclipse.EclipseExternalDependency;\n-import org.gradle.tooling.model.eclipse.EclipseProject;\n+\n+import io.quarkus.bootstrap.resolver.QuarkusGradleModelFactory;\n+import io.quarkus.bootstrap.resolver.model.QuarkusModel;\n+import io.quarkus.runtime.LaunchMode;\n \n public final class ConnectorDependencyResolver {\n \n     private List<Dependency> dependencies = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "035c58305887e1c03e52fba4184dece8802319a0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxNTcxOQ==", "bodyText": "This is model used by io.quarkus.devtools.project.buildfile.BuildFile.", "url": "https://github.com/quarkusio/quarkus/pull/11517#discussion_r476315719", "createdAt": "2020-08-25T09:36:24Z", "author": {"login": "mgorniew"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/ConnectorDependencyResolver.java", "diffHunk": "@@ -3,38 +3,37 @@\n import java.nio.file.Path;\n import java.util.Collections;\n import java.util.List;\n-import java.util.Objects;\n import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n import org.apache.maven.model.Dependency;\n import org.gradle.tooling.BuildException;\n-import org.gradle.tooling.GradleConnector;\n-import org.gradle.tooling.ProjectConnection;\n-import org.gradle.tooling.model.eclipse.EclipseExternalDependency;\n-import org.gradle.tooling.model.eclipse.EclipseProject;\n+\n+import io.quarkus.bootstrap.resolver.QuarkusGradleModelFactory;\n+import io.quarkus.bootstrap.resolver.model.QuarkusModel;\n+import io.quarkus.runtime.LaunchMode;\n \n public final class ConnectorDependencyResolver {\n \n     private List<Dependency> dependencies = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0MjM0Nw=="}, "originalCommit": {"oid": "035c58305887e1c03e52fba4184dece8802319a0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMyMDMxMw==", "bodyText": "@mgorniew I think we can easily change that :) just remove getDependencies and have getDependenciesKeys abstract, and move the current getDependenciesKeys logic to the MavenBuildFile, then you can avoid this dependency in Gradle..", "url": "https://github.com/quarkusio/quarkus/pull/11517#discussion_r476320313", "createdAt": "2020-08-25T09:43:53Z", "author": {"login": "ia3andy"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/ConnectorDependencyResolver.java", "diffHunk": "@@ -3,38 +3,37 @@\n import java.nio.file.Path;\n import java.util.Collections;\n import java.util.List;\n-import java.util.Objects;\n import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n import org.apache.maven.model.Dependency;\n import org.gradle.tooling.BuildException;\n-import org.gradle.tooling.GradleConnector;\n-import org.gradle.tooling.ProjectConnection;\n-import org.gradle.tooling.model.eclipse.EclipseExternalDependency;\n-import org.gradle.tooling.model.eclipse.EclipseProject;\n+\n+import io.quarkus.bootstrap.resolver.QuarkusGradleModelFactory;\n+import io.quarkus.bootstrap.resolver.model.QuarkusModel;\n+import io.quarkus.runtime.LaunchMode;\n \n public final class ConnectorDependencyResolver {\n \n     private List<Dependency> dependencies = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0MjM0Nw=="}, "originalCommit": {"oid": "035c58305887e1c03e52fba4184dece8802319a0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM1MjU0MA==", "bodyText": "AppArtifactKey doesn't contain version and there is getInstalled method which uses getDependencies to create AppArtifactCoords.", "url": "https://github.com/quarkusio/quarkus/pull/11517#discussion_r476352540", "createdAt": "2020-08-25T10:42:42Z", "author": {"login": "mgorniew"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/ConnectorDependencyResolver.java", "diffHunk": "@@ -3,38 +3,37 @@\n import java.nio.file.Path;\n import java.util.Collections;\n import java.util.List;\n-import java.util.Objects;\n import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n import org.apache.maven.model.Dependency;\n import org.gradle.tooling.BuildException;\n-import org.gradle.tooling.GradleConnector;\n-import org.gradle.tooling.ProjectConnection;\n-import org.gradle.tooling.model.eclipse.EclipseExternalDependency;\n-import org.gradle.tooling.model.eclipse.EclipseProject;\n+\n+import io.quarkus.bootstrap.resolver.QuarkusGradleModelFactory;\n+import io.quarkus.bootstrap.resolver.model.QuarkusModel;\n+import io.quarkus.runtime.LaunchMode;\n \n public final class ConnectorDependencyResolver {\n \n     private List<Dependency> dependencies = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0MjM0Nw=="}, "originalCommit": {"oid": "035c58305887e1c03e52fba4184dece8802319a0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM1NzI2NA==", "bodyText": "Then use AppArtifactCoords isnted of keys :)", "url": "https://github.com/quarkusio/quarkus/pull/11517#discussion_r476357264", "createdAt": "2020-08-25T10:52:12Z", "author": {"login": "ia3andy"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/ConnectorDependencyResolver.java", "diffHunk": "@@ -3,38 +3,37 @@\n import java.nio.file.Path;\n import java.util.Collections;\n import java.util.List;\n-import java.util.Objects;\n import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n import org.apache.maven.model.Dependency;\n import org.gradle.tooling.BuildException;\n-import org.gradle.tooling.GradleConnector;\n-import org.gradle.tooling.ProjectConnection;\n-import org.gradle.tooling.model.eclipse.EclipseExternalDependency;\n-import org.gradle.tooling.model.eclipse.EclipseProject;\n+\n+import io.quarkus.bootstrap.resolver.QuarkusGradleModelFactory;\n+import io.quarkus.bootstrap.resolver.model.QuarkusModel;\n+import io.quarkus.runtime.LaunchMode;\n \n public final class ConnectorDependencyResolver {\n \n     private List<Dependency> dependencies = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0MjM0Nw=="}, "originalCommit": {"oid": "035c58305887e1c03e52fba4184dece8802319a0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM2OTQxMg==", "bodyText": "The issue is that we are using Maven's model Dependency in QuarkusPlatformDescriptor. So either way, we are going to be converting unless we change it in QuarkusPlatformDescriptor and everywhere else.", "url": "https://github.com/quarkusio/quarkus/pull/11517#discussion_r476369412", "createdAt": "2020-08-25T11:17:09Z", "author": {"login": "aloubyansky"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/ConnectorDependencyResolver.java", "diffHunk": "@@ -3,38 +3,37 @@\n import java.nio.file.Path;\n import java.util.Collections;\n import java.util.List;\n-import java.util.Objects;\n import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n import org.apache.maven.model.Dependency;\n import org.gradle.tooling.BuildException;\n-import org.gradle.tooling.GradleConnector;\n-import org.gradle.tooling.ProjectConnection;\n-import org.gradle.tooling.model.eclipse.EclipseExternalDependency;\n-import org.gradle.tooling.model.eclipse.EclipseProject;\n+\n+import io.quarkus.bootstrap.resolver.QuarkusGradleModelFactory;\n+import io.quarkus.bootstrap.resolver.model.QuarkusModel;\n+import io.quarkus.runtime.LaunchMode;\n \n public final class ConnectorDependencyResolver {\n \n     private List<Dependency> dependencies = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0MjM0Nw=="}, "originalCommit": {"oid": "035c58305887e1c03e52fba4184dece8802319a0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM3MDE1Mg==", "bodyText": "It could put a start to it though.", "url": "https://github.com/quarkusio/quarkus/pull/11517#discussion_r476370152", "createdAt": "2020-08-25T11:18:40Z", "author": {"login": "aloubyansky"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/ConnectorDependencyResolver.java", "diffHunk": "@@ -3,38 +3,37 @@\n import java.nio.file.Path;\n import java.util.Collections;\n import java.util.List;\n-import java.util.Objects;\n import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n import org.apache.maven.model.Dependency;\n import org.gradle.tooling.BuildException;\n-import org.gradle.tooling.GradleConnector;\n-import org.gradle.tooling.ProjectConnection;\n-import org.gradle.tooling.model.eclipse.EclipseExternalDependency;\n-import org.gradle.tooling.model.eclipse.EclipseProject;\n+\n+import io.quarkus.bootstrap.resolver.QuarkusGradleModelFactory;\n+import io.quarkus.bootstrap.resolver.model.QuarkusModel;\n+import io.quarkus.runtime.LaunchMode;\n \n public final class ConnectorDependencyResolver {\n \n     private List<Dependency> dependencies = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0MjM0Nw=="}, "originalCommit": {"oid": "035c58305887e1c03e52fba4184dece8802319a0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM3NDQyNg==", "bodyText": "Sure, I will change maven Dependency to AppArtifactCoords.", "url": "https://github.com/quarkusio/quarkus/pull/11517#discussion_r476374426", "createdAt": "2020-08-25T11:27:14Z", "author": {"login": "mgorniew"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/ConnectorDependencyResolver.java", "diffHunk": "@@ -3,38 +3,37 @@\n import java.nio.file.Path;\n import java.util.Collections;\n import java.util.List;\n-import java.util.Objects;\n import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n import org.apache.maven.model.Dependency;\n import org.gradle.tooling.BuildException;\n-import org.gradle.tooling.GradleConnector;\n-import org.gradle.tooling.ProjectConnection;\n-import org.gradle.tooling.model.eclipse.EclipseExternalDependency;\n-import org.gradle.tooling.model.eclipse.EclipseProject;\n+\n+import io.quarkus.bootstrap.resolver.QuarkusGradleModelFactory;\n+import io.quarkus.bootstrap.resolver.model.QuarkusModel;\n+import io.quarkus.runtime.LaunchMode;\n \n public final class ConnectorDependencyResolver {\n \n     private List<Dependency> dependencies = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0MjM0Nw=="}, "originalCommit": {"oid": "035c58305887e1c03e52fba4184dece8802319a0"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODkxMzQxOnYy", "diffSide": "RIGHT", "path": "integration-tests/devtools/src/test/java/io/quarkus/devtools/commands/AddGradleExtensionsTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDoxNzoyOVrOHGaUPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoyNzoxMlrOHG9lUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ4NDY2OA==", "bodyText": "We need to make this less brittle in the future (maybe regexp?)", "url": "https://github.com/quarkusio/quarkus/pull/11517#discussion_r476484668", "createdAt": "2020-08-25T14:17:29Z", "author": {"login": "gastaldi"}, "path": "integration-tests/devtools/src/test/java/io/quarkus/devtools/commands/AddGradleExtensionsTest.java", "diffHunk": "@@ -71,18 +70,26 @@ public TestingGradleBuildFile(Path projectDirPath, QuarkusPlatformDescriptor pla\n         }\n \n         @Override\n-        protected List<Dependency> getDependencies() throws IOException {\n+        protected List<AppArtifactCoords> getDependencies() throws IOException {\n             final Matcher matcher = Pattern.compile(\"\\\\s*implementation\\\\s+'([^\\\\v:]+):([^\\\\v:]+)(:[^:\\\\v]+)?'\")\n                     .matcher(getBuildContent());\n-            final ArrayList<Dependency> builder = new ArrayList<>();\n+            final ArrayList<AppArtifactCoords> builder = new ArrayList<>();\n             while (matcher.find()) {\n-                final Dependency dep = new Dependency();\n-                dep.setGroupId(matcher.group(1));\n-                dep.setArtifactId(matcher.group(2));\n-                dep.setVersion(matcher.group(3));\n-                builder.add(dep);\n+                builder.add(createDependency(matcher.group(1), matcher.group(2), matcher.group(3), \"jar\"));\n+            }\n+            if (getBuildContent().contains(\n+                    \"implementation enforcedPlatform(\\\"${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}\\\")\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6617aee71880473ba0a2eafb1114b36cbc241986"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ5NTU5Mg==", "bodyText": "In the future it should NOT be checking for any specific property names at all.", "url": "https://github.com/quarkusio/quarkus/pull/11517#discussion_r476495592", "createdAt": "2020-08-25T14:31:36Z", "author": {"login": "aloubyansky"}, "path": "integration-tests/devtools/src/test/java/io/quarkus/devtools/commands/AddGradleExtensionsTest.java", "diffHunk": "@@ -71,18 +70,26 @@ public TestingGradleBuildFile(Path projectDirPath, QuarkusPlatformDescriptor pla\n         }\n \n         @Override\n-        protected List<Dependency> getDependencies() throws IOException {\n+        protected List<AppArtifactCoords> getDependencies() throws IOException {\n             final Matcher matcher = Pattern.compile(\"\\\\s*implementation\\\\s+'([^\\\\v:]+):([^\\\\v:]+)(:[^:\\\\v]+)?'\")\n                     .matcher(getBuildContent());\n-            final ArrayList<Dependency> builder = new ArrayList<>();\n+            final ArrayList<AppArtifactCoords> builder = new ArrayList<>();\n             while (matcher.find()) {\n-                final Dependency dep = new Dependency();\n-                dep.setGroupId(matcher.group(1));\n-                dep.setArtifactId(matcher.group(2));\n-                dep.setVersion(matcher.group(3));\n-                builder.add(dep);\n+                builder.add(createDependency(matcher.group(1), matcher.group(2), matcher.group(3), \"jar\"));\n+            }\n+            if (getBuildContent().contains(\n+                    \"implementation enforcedPlatform(\\\"${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}\\\")\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ4NDY2OA=="}, "originalCommit": {"oid": "6617aee71880473ba0a2eafb1114b36cbc241986"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ5NjkzNw==", "bodyText": "Ah, it's a test, sorry. Ignore my comment above.", "url": "https://github.com/quarkusio/quarkus/pull/11517#discussion_r476496937", "createdAt": "2020-08-25T14:33:22Z", "author": {"login": "aloubyansky"}, "path": "integration-tests/devtools/src/test/java/io/quarkus/devtools/commands/AddGradleExtensionsTest.java", "diffHunk": "@@ -71,18 +70,26 @@ public TestingGradleBuildFile(Path projectDirPath, QuarkusPlatformDescriptor pla\n         }\n \n         @Override\n-        protected List<Dependency> getDependencies() throws IOException {\n+        protected List<AppArtifactCoords> getDependencies() throws IOException {\n             final Matcher matcher = Pattern.compile(\"\\\\s*implementation\\\\s+'([^\\\\v:]+):([^\\\\v:]+)(:[^:\\\\v]+)?'\")\n                     .matcher(getBuildContent());\n-            final ArrayList<Dependency> builder = new ArrayList<>();\n+            final ArrayList<AppArtifactCoords> builder = new ArrayList<>();\n             while (matcher.find()) {\n-                final Dependency dep = new Dependency();\n-                dep.setGroupId(matcher.group(1));\n-                dep.setArtifactId(matcher.group(2));\n-                dep.setVersion(matcher.group(3));\n-                builder.add(dep);\n+                builder.add(createDependency(matcher.group(1), matcher.group(2), matcher.group(3), \"jar\"));\n+            }\n+            if (getBuildContent().contains(\n+                    \"implementation enforcedPlatform(\\\"${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}\\\")\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ4NDY2OA=="}, "originalCommit": {"oid": "6617aee71880473ba0a2eafb1114b36cbc241986"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2MjQ4Mw==", "bodyText": "@gastaldi this is just for testing ;-)", "url": "https://github.com/quarkusio/quarkus/pull/11517#discussion_r477062483", "createdAt": "2020-08-26T06:27:12Z", "author": {"login": "ia3andy"}, "path": "integration-tests/devtools/src/test/java/io/quarkus/devtools/commands/AddGradleExtensionsTest.java", "diffHunk": "@@ -71,18 +70,26 @@ public TestingGradleBuildFile(Path projectDirPath, QuarkusPlatformDescriptor pla\n         }\n \n         @Override\n-        protected List<Dependency> getDependencies() throws IOException {\n+        protected List<AppArtifactCoords> getDependencies() throws IOException {\n             final Matcher matcher = Pattern.compile(\"\\\\s*implementation\\\\s+'([^\\\\v:]+):([^\\\\v:]+)(:[^:\\\\v]+)?'\")\n                     .matcher(getBuildContent());\n-            final ArrayList<Dependency> builder = new ArrayList<>();\n+            final ArrayList<AppArtifactCoords> builder = new ArrayList<>();\n             while (matcher.find()) {\n-                final Dependency dep = new Dependency();\n-                dep.setGroupId(matcher.group(1));\n-                dep.setArtifactId(matcher.group(2));\n-                dep.setVersion(matcher.group(3));\n-                builder.add(dep);\n+                builder.add(createDependency(matcher.group(1), matcher.group(2), matcher.group(3), \"jar\"));\n+            }\n+            if (getBuildContent().contains(\n+                    \"implementation enforcedPlatform(\\\"${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}\\\")\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ4NDY2OA=="}, "originalCommit": {"oid": "6617aee71880473ba0a2eafb1114b36cbc241986"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjQ3NjM5OnYy", "diffSide": "RIGHT", "path": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/buildfile/AbstractGradleBuildFile.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoyOToxNlrOHG9pLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjoyOToxNlrOHG9pLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA2MzQ3MA==", "bodyText": "@mgorniew maybe a regexp here?", "url": "https://github.com/quarkusio/quarkus/pull/11517#discussion_r477063470", "createdAt": "2020-08-26T06:29:16Z", "author": {"login": "ia3andy"}, "path": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/buildfile/AbstractGradleBuildFile.java", "diffHunk": "@@ -57,46 +56,36 @@ public void writeToDisk() throws IOException {\n         writeToProjectFile(getBuildGradlePath(), getModel().getBuildContent().getBytes());\n     }\n \n-    static String createDependencyCoordinatesString(Model model, AppArtifactCoords coords, boolean managed, char quoteChar) {\n-        boolean isBOM = \"pom\".equals(coords.getType());\n-        // Special case for platform dependency. We will create properties based dependency string.\n-        // It will be ignored if it is already in \"dependencies\" section.\n-        // Note that we ignore version here - if someone tries to add platform with different version, we will still use\n-        // version from properties.\n-        if (isBOM && !managed\n-                && Objects.equals(coords.getGroupId(), getProperty(model, \"quarkusPlatformGroupId\"))\n-                && Objects.equals(coords.getArtifactId(), getProperty(model, \"quarkusPlatformArtifactId\"))) {\n-            return \"enforcedPlatform(\\\"${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}\\\")\";\n-        }\n+    static String createDependencyCoordinatesString(AppArtifactCoords coords, boolean managed, char quoteChar) {\n         StringBuilder newDependency = new StringBuilder().append(quoteChar)\n                 .append(coords.getGroupId()).append(\":\").append(coords.getArtifactId());\n         if (!managed &&\n                 (coords.getVersion() != null && !coords.getVersion().isEmpty())) {\n             newDependency.append(\":\").append(coords.getVersion());\n         }\n+        boolean isBOM = \"pom\".equals(coords.getType());\n+        if (isBOM && !managed) {\n+            return String.format(\"enforcedPlatform(%s)\", newDependency.append(quoteChar).toString());\n+        }\n         return newDependency.append(quoteChar).toString();\n     }\n \n     static boolean addDependencyInModel(Model model, String newDependency) {\n         StringBuilder buildContent = new StringBuilder(model.getBuildContent());\n-        boolean changed = false;\n-        if (buildContent.indexOf(newDependency) == -1) {\n-            changed = true;\n-            // Add dependency after \"dependencies {\"\n-            int indexOfDeps = buildContent.indexOf(\"dependencies {\");\n-            if (indexOfDeps > -1) {\n-                // The line below fails on Windows if System.lineSeparator() is used\n-                int nextLine = buildContent.indexOf(\"\\n\", indexOfDeps) + 1;\n-                buildContent.insert(nextLine, newDependency);\n-            } else {\n-                // if no \"dependencies {\" found, add one\n-                buildContent.append(\"dependencies {\").append(System.lineSeparator())\n-                        .append(newDependency)\n-                        .append(\"}\").append(System.lineSeparator());\n-            }\n-            model.setBuildContent(buildContent.toString());\n+        // Add dependency after \"dependencies {\"\n+        int indexOfDeps = buildContent.indexOf(\"dependencies {\");\n+        if (indexOfDeps > -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6617aee71880473ba0a2eafb1114b36cbc241986"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 630, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}