{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwNjU3Mjc4", "number": 13283, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNTozNTowNFrOE7l1eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNTo0NDoxOVrOE7mFNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwOTIxMzM2OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/qute-reference.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNTozNTowNFrOH3Uq5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNTozNTowNFrOH3Uq5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc3MjM4OA==", "bodyText": "In general I don't like when there's two names for the same thing and I think swich/case should be enough. But if you say that's what Kotlin uses, then perhaps that's a good justification for having both.", "url": "https://github.com/quarkusio/quarkus/pull/13283#discussion_r527772388", "createdAt": "2020-11-20T15:35:04Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -619,6 +619,97 @@ You can also add any number of `else` blocks:\n {/if}\n ----\n \n+[[when_section]]\n+==== When/Switch Section\n+\n+This section is similar to Java's `switch` or Kotlin's `when` constructs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73cfed1ea347450b638858774e42feb3b820046d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwOTIyODI5OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/qute-reference.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNTozODo0MlrOH3U0Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNzo1NToxNFrOH4CLxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc3NDczOA==", "bodyText": "I get why you have special operators, because the LHS is implicit, but we should really fix expressions so that they're not tag-dependent. For example I expect people will want to write {#is 2 || > 20} and {#is (other.fu + stuff.bar)} and I'm not sure there's a good reason to prevent that. Besides the implicit LHS.\nHell, I wonder if we shouldn't also allow non-implitic operators like {#case 2 || something == fu}.", "url": "https://github.com/quarkusio/quarkus/pull/13283#discussion_r527774738", "createdAt": "2020-11-20T15:38:42Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -619,6 +619,97 @@ You can also add any number of `else` blocks:\n {/if}\n ----\n \n+[[when_section]]\n+==== When/Switch Section\n+\n+This section is similar to Java's `switch` or Kotlin's `when` constructs.\n+It matches a _tested value_ against all blocks sequentially until a condition is satisfied.\n+The first matching block is executed.\n+All other blocks are ignored (this behavior differs to the Java `switch` where a `break` statement is necessary).\n+\n+.Example using the `when`/`is` name aliases\n+[source]\n+----\n+{#when items.size}\n+  {#is 1} <1>\n+    There is exactly one item!\n+  {#is > 10} <2>\n+    There are more than 10 items!\n+  {#else} <3>\n+    There are 2 -10 items!\n+{/when}\n+----\n+<1> If there is exactly one parameter it's tested for equality.\n+<2> It's possible to use <<when_operators,an operator>> to specify the matching logic. Unlike in the <<if_section>> nested operators are not supported.\n+<3> `else` is block is executed if no other block matches the value.\n+\n+.Example using the `switch`/`case` name aliases\n+[source]\n+----\n+{#switch person.name}\n+  {#case 'John'} <1>\n+    Hey John!\n+  {#case 'Mary'} <1>\n+    Hey Mary!\n+{/switch}\n+----\n+<1> `case` is an alias for `is`.\n+\n+A tested value that resolves to an enum is handled specifically.\n+The parameters of an `is`/`case` block are not evaluated as expressions but compared with the result of `toString()` invocation upon the tested value.\n+\n+[source]\n+----\n+{#when machine.status}\n+  {#is ON} \n+    It's running. <1>\n+  {#is in OFF BROKEN}\n+    It's broken or OFF. <2>\n+{/when}\n+----\n+<1> This block is executed if `machine.status.toString().equals(\"ON\")`.\n+<2> This block is executed if  `machine.status.toString().equals(\"OFF\")` or `machine.status.toString().equals(\"BROKEN\")`.\n+\n+NOTE: The enum constants are validated if there is a parameter declaration mapped to a tested value and the declared type is an enum.\n+\n+The following operators are supported in `is`/`case` block conditions:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73cfed1ea347450b638858774e42feb3b820046d"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUxODA4NQ==", "bodyText": "Yes, we could do a lot of things but the current API is probably not the best fit. I'm all for continuous refactoring and improvements though!", "url": "https://github.com/quarkusio/quarkus/pull/13283#discussion_r528518085", "createdAt": "2020-11-23T07:55:14Z", "author": {"login": "mkouba"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -619,6 +619,97 @@ You can also add any number of `else` blocks:\n {/if}\n ----\n \n+[[when_section]]\n+==== When/Switch Section\n+\n+This section is similar to Java's `switch` or Kotlin's `when` constructs.\n+It matches a _tested value_ against all blocks sequentially until a condition is satisfied.\n+The first matching block is executed.\n+All other blocks are ignored (this behavior differs to the Java `switch` where a `break` statement is necessary).\n+\n+.Example using the `when`/`is` name aliases\n+[source]\n+----\n+{#when items.size}\n+  {#is 1} <1>\n+    There is exactly one item!\n+  {#is > 10} <2>\n+    There are more than 10 items!\n+  {#else} <3>\n+    There are 2 -10 items!\n+{/when}\n+----\n+<1> If there is exactly one parameter it's tested for equality.\n+<2> It's possible to use <<when_operators,an operator>> to specify the matching logic. Unlike in the <<if_section>> nested operators are not supported.\n+<3> `else` is block is executed if no other block matches the value.\n+\n+.Example using the `switch`/`case` name aliases\n+[source]\n+----\n+{#switch person.name}\n+  {#case 'John'} <1>\n+    Hey John!\n+  {#case 'Mary'} <1>\n+    Hey Mary!\n+{/switch}\n+----\n+<1> `case` is an alias for `is`.\n+\n+A tested value that resolves to an enum is handled specifically.\n+The parameters of an `is`/`case` block are not evaluated as expressions but compared with the result of `toString()` invocation upon the tested value.\n+\n+[source]\n+----\n+{#when machine.status}\n+  {#is ON} \n+    It's running. <1>\n+  {#is in OFF BROKEN}\n+    It's broken or OFF. <2>\n+{/when}\n+----\n+<1> This block is executed if `machine.status.toString().equals(\"ON\")`.\n+<2> This block is executed if  `machine.status.toString().equals(\"OFF\")` or `machine.status.toString().equals(\"BROKEN\")`.\n+\n+NOTE: The enum constants are validated if there is a parameter declaration mapped to a tested value and the declared type is an enum.\n+\n+The following operators are supported in `is`/`case` block conditions:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc3NDczOA=="}, "originalCommit": {"oid": "73cfed1ea347450b638858774e42feb3b820046d"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwOTIzMjgxOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/qute-reference.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNTozOTo0NVrOH3U2yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwODowNTowN1rOH4CcSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc3NTQzNA==", "bodyText": "I guess that works.", "url": "https://github.com/quarkusio/quarkus/pull/13283#discussion_r527775434", "createdAt": "2020-11-20T15:39:45Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -619,6 +619,97 @@ You can also add any number of `else` blocks:\n {/if}\n ----\n \n+[[when_section]]\n+==== When/Switch Section\n+\n+This section is similar to Java's `switch` or Kotlin's `when` constructs.\n+It matches a _tested value_ against all blocks sequentially until a condition is satisfied.\n+The first matching block is executed.\n+All other blocks are ignored (this behavior differs to the Java `switch` where a `break` statement is necessary).\n+\n+.Example using the `when`/`is` name aliases\n+[source]\n+----\n+{#when items.size}\n+  {#is 1} <1>\n+    There is exactly one item!\n+  {#is > 10} <2>\n+    There are more than 10 items!\n+  {#else} <3>\n+    There are 2 -10 items!\n+{/when}\n+----\n+<1> If there is exactly one parameter it's tested for equality.\n+<2> It's possible to use <<when_operators,an operator>> to specify the matching logic. Unlike in the <<if_section>> nested operators are not supported.\n+<3> `else` is block is executed if no other block matches the value.\n+\n+.Example using the `switch`/`case` name aliases\n+[source]\n+----\n+{#switch person.name}\n+  {#case 'John'} <1>\n+    Hey John!\n+  {#case 'Mary'} <1>\n+    Hey Mary!\n+{/switch}\n+----\n+<1> `case` is an alias for `is`.\n+\n+A tested value that resolves to an enum is handled specifically.\n+The parameters of an `is`/`case` block are not evaluated as expressions but compared with the result of `toString()` invocation upon the tested value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73cfed1ea347450b638858774e42feb3b820046d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc3NjY1NA==", "bodyText": "But if you make this generic and say that \"if a comparison operator operand (including implicit operands such as in case/is) is an enum then both operands are compared using toString on both operands\" then this works for every operator in every expression context.", "url": "https://github.com/quarkusio/quarkus/pull/13283#discussion_r527776654", "createdAt": "2020-11-20T15:41:30Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -619,6 +619,97 @@ You can also add any number of `else` blocks:\n {/if}\n ----\n \n+[[when_section]]\n+==== When/Switch Section\n+\n+This section is similar to Java's `switch` or Kotlin's `when` constructs.\n+It matches a _tested value_ against all blocks sequentially until a condition is satisfied.\n+The first matching block is executed.\n+All other blocks are ignored (this behavior differs to the Java `switch` where a `break` statement is necessary).\n+\n+.Example using the `when`/`is` name aliases\n+[source]\n+----\n+{#when items.size}\n+  {#is 1} <1>\n+    There is exactly one item!\n+  {#is > 10} <2>\n+    There are more than 10 items!\n+  {#else} <3>\n+    There are 2 -10 items!\n+{/when}\n+----\n+<1> If there is exactly one parameter it's tested for equality.\n+<2> It's possible to use <<when_operators,an operator>> to specify the matching logic. Unlike in the <<if_section>> nested operators are not supported.\n+<3> `else` is block is executed if no other block matches the value.\n+\n+.Example using the `switch`/`case` name aliases\n+[source]\n+----\n+{#switch person.name}\n+  {#case 'John'} <1>\n+    Hey John!\n+  {#case 'Mary'} <1>\n+    Hey Mary!\n+{/switch}\n+----\n+<1> `case` is an alias for `is`.\n+\n+A tested value that resolves to an enum is handled specifically.\n+The parameters of an `is`/`case` block are not evaluated as expressions but compared with the result of `toString()` invocation upon the tested value.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc3NTQzNA=="}, "originalCommit": {"oid": "73cfed1ea347450b638858774e42feb3b820046d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUyMjMxNQ==", "bodyText": "Well, currently there is no such thing like \"expression context\".\nWe have \"expressions\" that are used to output a single value, i.e. {foo}. These expressions basically follow the object.property (dot notation) or object[property_name] (bracket notation) syntax, plus the property can be replaced with a virtual method, e.g. {foo.bar(1)} and we also support \"infix notation\" for virtual methods with single parameter, i.e. {name or 'John'}.\nAnd then we have sections, e.g. {#if} which can have any number of parameters (with optional names) and it's completely up to the section to decide what to do with these params. For example {#for item in foo.items} has 3 params, item, in and foo.items... first is used as an alias, second is ignored and third is used to resolve an iterable object...", "url": "https://github.com/quarkusio/quarkus/pull/13283#discussion_r528522315", "createdAt": "2020-11-23T08:05:07Z", "author": {"login": "mkouba"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -619,6 +619,97 @@ You can also add any number of `else` blocks:\n {/if}\n ----\n \n+[[when_section]]\n+==== When/Switch Section\n+\n+This section is similar to Java's `switch` or Kotlin's `when` constructs.\n+It matches a _tested value_ against all blocks sequentially until a condition is satisfied.\n+The first matching block is executed.\n+All other blocks are ignored (this behavior differs to the Java `switch` where a `break` statement is necessary).\n+\n+.Example using the `when`/`is` name aliases\n+[source]\n+----\n+{#when items.size}\n+  {#is 1} <1>\n+    There is exactly one item!\n+  {#is > 10} <2>\n+    There are more than 10 items!\n+  {#else} <3>\n+    There are 2 -10 items!\n+{/when}\n+----\n+<1> If there is exactly one parameter it's tested for equality.\n+<2> It's possible to use <<when_operators,an operator>> to specify the matching logic. Unlike in the <<if_section>> nested operators are not supported.\n+<3> `else` is block is executed if no other block matches the value.\n+\n+.Example using the `switch`/`case` name aliases\n+[source]\n+----\n+{#switch person.name}\n+  {#case 'John'} <1>\n+    Hey John!\n+  {#case 'Mary'} <1>\n+    Hey Mary!\n+{/switch}\n+----\n+<1> `case` is an alias for `is`.\n+\n+A tested value that resolves to an enum is handled specifically.\n+The parameters of an `is`/`case` block are not evaluated as expressions but compared with the result of `toString()` invocation upon the tested value.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc3NTQzNA=="}, "originalCommit": {"oid": "73cfed1ea347450b638858774e42feb3b820046d"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwOTI1MzY1OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/qute-reference.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNTo0NDoxOVrOH3VDnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwODoxMDozMlrOH4CmVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc3ODcxNg==", "bodyText": "Why not validate it even if it doesn't come directly from a parameter? It can come from any typed expression, after all, no?", "url": "https://github.com/quarkusio/quarkus/pull/13283#discussion_r527778716", "createdAt": "2020-11-20T15:44:19Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -619,6 +619,97 @@ You can also add any number of `else` blocks:\n {/if}\n ----\n \n+[[when_section]]\n+==== When/Switch Section\n+\n+This section is similar to Java's `switch` or Kotlin's `when` constructs.\n+It matches a _tested value_ against all blocks sequentially until a condition is satisfied.\n+The first matching block is executed.\n+All other blocks are ignored (this behavior differs to the Java `switch` where a `break` statement is necessary).\n+\n+.Example using the `when`/`is` name aliases\n+[source]\n+----\n+{#when items.size}\n+  {#is 1} <1>\n+    There is exactly one item!\n+  {#is > 10} <2>\n+    There are more than 10 items!\n+  {#else} <3>\n+    There are 2 -10 items!\n+{/when}\n+----\n+<1> If there is exactly one parameter it's tested for equality.\n+<2> It's possible to use <<when_operators,an operator>> to specify the matching logic. Unlike in the <<if_section>> nested operators are not supported.\n+<3> `else` is block is executed if no other block matches the value.\n+\n+.Example using the `switch`/`case` name aliases\n+[source]\n+----\n+{#switch person.name}\n+  {#case 'John'} <1>\n+    Hey John!\n+  {#case 'Mary'} <1>\n+    Hey Mary!\n+{/switch}\n+----\n+<1> `case` is an alias for `is`.\n+\n+A tested value that resolves to an enum is handled specifically.\n+The parameters of an `is`/`case` block are not evaluated as expressions but compared with the result of `toString()` invocation upon the tested value.\n+\n+[source]\n+----\n+{#when machine.status}\n+  {#is ON} \n+    It's running. <1>\n+  {#is in OFF BROKEN}\n+    It's broken or OFF. <2>\n+{/when}\n+----\n+<1> This block is executed if `machine.status.toString().equals(\"ON\")`.\n+<2> This block is executed if  `machine.status.toString().equals(\"OFF\")` or `machine.status.toString().equals(\"BROKEN\")`.\n+\n+NOTE: The enum constants are validated if there is a parameter declaration mapped to a tested value and the declared type is an enum.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73cfed1ea347450b638858774e42feb3b820046d"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODUyNDg4NA==", "bodyText": "Ah, sorry. Wrong wording... we do validate the enum constants in a {#when foo.whatever} iff foo.whatever has a type info and resolves to an enum (which means that it maps to some implicit/explicit parameter declaration under the hood...). I'll try to change the wording...", "url": "https://github.com/quarkusio/quarkus/pull/13283#discussion_r528524884", "createdAt": "2020-11-23T08:10:32Z", "author": {"login": "mkouba"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -619,6 +619,97 @@ You can also add any number of `else` blocks:\n {/if}\n ----\n \n+[[when_section]]\n+==== When/Switch Section\n+\n+This section is similar to Java's `switch` or Kotlin's `when` constructs.\n+It matches a _tested value_ against all blocks sequentially until a condition is satisfied.\n+The first matching block is executed.\n+All other blocks are ignored (this behavior differs to the Java `switch` where a `break` statement is necessary).\n+\n+.Example using the `when`/`is` name aliases\n+[source]\n+----\n+{#when items.size}\n+  {#is 1} <1>\n+    There is exactly one item!\n+  {#is > 10} <2>\n+    There are more than 10 items!\n+  {#else} <3>\n+    There are 2 -10 items!\n+{/when}\n+----\n+<1> If there is exactly one parameter it's tested for equality.\n+<2> It's possible to use <<when_operators,an operator>> to specify the matching logic. Unlike in the <<if_section>> nested operators are not supported.\n+<3> `else` is block is executed if no other block matches the value.\n+\n+.Example using the `switch`/`case` name aliases\n+[source]\n+----\n+{#switch person.name}\n+  {#case 'John'} <1>\n+    Hey John!\n+  {#case 'Mary'} <1>\n+    Hey Mary!\n+{/switch}\n+----\n+<1> `case` is an alias for `is`.\n+\n+A tested value that resolves to an enum is handled specifically.\n+The parameters of an `is`/`case` block are not evaluated as expressions but compared with the result of `toString()` invocation upon the tested value.\n+\n+[source]\n+----\n+{#when machine.status}\n+  {#is ON} \n+    It's running. <1>\n+  {#is in OFF BROKEN}\n+    It's broken or OFF. <2>\n+{/when}\n+----\n+<1> This block is executed if `machine.status.toString().equals(\"ON\")`.\n+<2> This block is executed if  `machine.status.toString().equals(\"OFF\")` or `machine.status.toString().equals(\"BROKEN\")`.\n+\n+NOTE: The enum constants are validated if there is a parameter declaration mapped to a tested value and the declared type is an enum.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc3ODcxNg=="}, "originalCommit": {"oid": "73cfed1ea347450b638858774e42feb3b820046d"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3912, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}