{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MDYyOTU2", "number": 8641, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjoxODoyMVrODy4Pfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDowMzowOFrODy6ggQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Njc2ODYzOnYy", "diffSide": "RIGHT", "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/ConfigBuildStep.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjoxODoyMVrOGHLqKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjoyNDo0N1rOGHL2Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4NDIzNQ==", "bodyText": "It might be a stupid question but why a Dependent scope?", "url": "https://github.com/quarkusio/quarkus/pull/8641#discussion_r410184235", "createdAt": "2020-04-17T12:18:21Z", "author": {"login": "gsmet"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/ConfigBuildStep.java", "diffHunk": "@@ -137,6 +143,25 @@ void validateConfigProperties(ConfigRecorder recorder, List<ConfigPropertyBuildI\n         recorder.validateConfigProperties(propNamesToClasses);\n     }\n \n+    @BuildStep\n+    BeanRegistrarBuildItem registerConfigRootsAsBeans(ConfigurationBuildItem configItem) {\n+        return new BeanRegistrarBuildItem(new BeanRegistrar() {\n+            @Override\n+            public void register(RegistrationContext context) {\n+                for (RootDefinition rootDefinition : configItem.getReadResult().getAllRoots()) {\n+                    if (rootDefinition.getConfigPhase() == ConfigPhase.BUILD_AND_RUN_TIME_FIXED\n+                            || rootDefinition.getConfigPhase() == ConfigPhase.RUN_TIME) {\n+                        context.configure(rootDefinition.getConfigurationClass()).types(rootDefinition.getConfigurationClass())\n+                                .scope(Dependent.class).creator(mc -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a60264ea2e26290425bf91e5fac3ecd43cd0041e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4NzI4Mw==", "bodyText": "Well, we could use @Singleton but since we don't create any instance but just delegate to a static field it does not make sense to store the reference in the context. Having @Dependent means that Contextual.create() is invoked for every injetion point. In our case, Config.ApplicationConfig is read instead of context lookup (i.e. Map.get() for singleton).\nAnd normal scopes don't make sense either. A client proxy would be useless (one more useless delegation layer).", "url": "https://github.com/quarkusio/quarkus/pull/8641#discussion_r410187283", "createdAt": "2020-04-17T12:24:47Z", "author": {"login": "mkouba"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/ConfigBuildStep.java", "diffHunk": "@@ -137,6 +143,25 @@ void validateConfigProperties(ConfigRecorder recorder, List<ConfigPropertyBuildI\n         recorder.validateConfigProperties(propNamesToClasses);\n     }\n \n+    @BuildStep\n+    BeanRegistrarBuildItem registerConfigRootsAsBeans(ConfigurationBuildItem configItem) {\n+        return new BeanRegistrarBuildItem(new BeanRegistrar() {\n+            @Override\n+            public void register(RegistrationContext context) {\n+                for (RootDefinition rootDefinition : configItem.getReadResult().getAllRoots()) {\n+                    if (rootDefinition.getConfigPhase() == ConfigPhase.BUILD_AND_RUN_TIME_FIXED\n+                            || rootDefinition.getConfigPhase() == ConfigPhase.RUN_TIME) {\n+                        context.configure(rootDefinition.getConfigurationClass()).types(rootDefinition.getConfigurationClass())\n+                                .scope(Dependent.class).creator(mc -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4NDIzNQ=="}, "originalCommit": {"oid": "a60264ea2e26290425bf91e5fac3ecd43cd0041e"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzEzOTg1OnYy", "diffSide": "RIGHT", "path": "extensions/arc/deployment/src/test/java/io/quarkus/arc/test/configroot/ConfigRootInjectionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDowMzowOFrOGHPUhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDowMzowOFrOGHPUhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI0NDIzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ThreadPoolConfig thredPoolConfig;\n          \n          \n            \n                    ThreadPoolConfig threadPoolConfig;", "url": "https://github.com/quarkusio/quarkus/pull/8641#discussion_r410244231", "createdAt": "2020-04-17T14:03:08Z", "author": {"login": "gsmet"}, "path": "extensions/arc/deployment/src/test/java/io/quarkus/arc/test/configroot/ConfigRootInjectionTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package io.quarkus.arc.test.configroot;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.runtime.ApplicationConfig;\n+import io.quarkus.runtime.ThreadPoolConfig;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class ConfigRootInjectionTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(ConfigRootInjectionTest.class, Client.class));\n+\n+    @Inject\n+    Client client;\n+\n+    @Test\n+    public void testInjectionWorks() {\n+        assertNotNull(client.applicationConfig);\n+        assertNotNull(client.applicationConfig.name);\n+        assertEquals(1, client.thredPoolConfig.coreThreads);\n+    }\n+\n+    @Singleton\n+    static class Client {\n+\n+        @Inject\n+        ApplicationConfig applicationConfig;\n+\n+        @Inject\n+        ThreadPoolConfig thredPoolConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a60264ea2e26290425bf91e5fac3ecd43cd0041e"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3549, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}