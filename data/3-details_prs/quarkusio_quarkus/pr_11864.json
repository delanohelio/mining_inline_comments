{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4Nzc3MDMx", "number": 11864, "title": "Bean Validation support in reactive routes", "bodyText": "Implement the support of bean validation with reactive routes:\n\nparameters are checked\nsynchronous returns objects, and Uni<X> are validated - only @Valid is supported in this case\n\nMultis are not supported, as the use case is not clear.\n\ufeffThs PR also fixes the Quarkus Error Handler. It  was not enforcing the status code that could have been configured in the context.", "createdAt": "2020-09-03T17:23:12Z", "url": "https://github.com/quarkusio/quarkus/pull/11864", "merged": true, "mergeCommit": {"oid": "6b6ad0128645af5813b7640f36c69c00504f1cc4"}, "closed": true, "closedAt": "2020-09-08T14:41:32Z", "author": {"login": "cescoffier"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFg6aKgFqTQ4MjQ2MDExOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdG4p21gFqTQ4NDIxMDc5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNDYwMTE4", "url": "https://github.com/quarkusio/quarkus/pull/11864#pullrequestreview-482460118", "createdAt": "2020-09-04T08:27:37Z", "commit": {"oid": "2d8d0282b51f7b7ef9bc54114a01d569ed018eea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwODoyNzozN1rOHNEk8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwODoyNzozN1rOHNEk8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ2ODUzMQ==", "bodyText": "This should probably be avoided :)", "url": "https://github.com/quarkusio/quarkus/pull/11864#discussion_r483468531", "createdAt": "2020-09-04T08:27:37Z", "author": {"login": "geoand"}, "path": "extensions/vertx-web/deployment/src/main/java/io/quarkus/vertx/web/deployment/VertxWebProcessor.java", "diffHunk": "@@ -4,21 +4,10 @@\n import static io.quarkus.vertx.web.deployment.DotNames.PARAM;\n import static org.objectweb.asm.Opcodes.ACC_FINAL;\n import static org.objectweb.asm.Opcodes.ACC_PRIVATE;\n+import static org.objectweb.asm.Opcodes.ACC_PUBLIC;\n \n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.LinkedHashSet;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d8d0282b51f7b7ef9bc54114a01d569ed018eea"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNTAyNDA3", "url": "https://github.com/quarkusio/quarkus/pull/11864#pullrequestreview-482502407", "createdAt": "2020-09-04T09:28:06Z", "commit": {"oid": "2d8d0282b51f7b7ef9bc54114a01d569ed018eea"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOToyODowNlrOHNGmjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOToyOTo0M1rOHNGp1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwMTcxMQ==", "bodyText": "Hmmm, no, that won't work :). We have org.hibernate specific constraints and users develop custom constraints.\nMaybe I should add a build item that can send you the list of constraints?", "url": "https://github.com/quarkusio/quarkus/pull/11864#discussion_r483501711", "createdAt": "2020-09-04T09:28:06Z", "author": {"login": "gsmet"}, "path": "extensions/vertx-web/deployment/src/main/java/io/quarkus/vertx/web/deployment/HandlerDescriptor.java", "diffHunk": "@@ -31,6 +35,34 @@ boolean isReturningMulti() {\n         return method.returnType().name().equals(DotNames.MULTI);\n     }\n \n+    /**\n+     * @return {@code true} if the method is annotated with a constraint or {@code @Valid} or any parameter has such kind of\n+     *         annotation.\n+     */\n+    boolean requireValidation() {\n+        return method.annotations().stream()\n+                .anyMatch(new Predicate<AnnotationInstance>() {\n+                    @Override\n+                    public boolean test(AnnotationInstance ai) {\n+                        return ai.name().toString().startsWith(\"javax.validation\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d8d0282b51f7b7ef9bc54114a01d569ed018eea"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwMjU0OQ==", "bodyText": "All this makes me a bit nervous?", "url": "https://github.com/quarkusio/quarkus/pull/11864#discussion_r483502549", "createdAt": "2020-09-04T09:29:43Z", "author": {"login": "gsmet"}, "path": "extensions/vertx-web/deployment/src/test/java/io/quarkus/vertx/web/mutiny/JsonMultiRouteTest.java", "diffHunk": "@@ -27,37 +25,38 @@\n \n     @Test\n     public void testMultiRoute() {\n-        when().get(\"/hello\").then().statusCode(200)\n-                .body(is(\"[\\\"Hello world!\\\"]\"))\n-                .header(\"content-type\", \"application/json\");\n-        when().get(\"/hellos\").then().statusCode(200)\n-                .body(is(\"[\\\"hello\\\",\\\"world\\\",\\\"!\\\"]\"))\n-                .header(\"content-type\", \"application/json\");\n-        when().get(\"/no-hello\").then().statusCode(200).body(is(\"[]\"))\n-                .header(\"content-type\", \"application/json\");\n-        // status already sent, but not the end of the array\n-        when().get(\"/hello-and-fail\").then().statusCode(200)\n-                .body(containsString(\"[\\\"Hello\\\"\"))\n-                .body(not(containsString(\"]\")));\n-\n-        when().get(\"/buffers\").then().statusCode(500);\n-\n-        when().get(\"/void\").then().statusCode(200).body(is(\"[]\"));\n-\n-        when().get(\"/people\").then().statusCode(200)\n-                .body(\"size()\", is(3))\n-                .body(\"[0].name\", is(\"superman\"))\n-                .body(\"[1].name\", is(\"batman\"))\n-                .body(\"[2].name\", is(\"spiderman\"))\n-                .header(\"content-type\", \"application/json\");\n-\n-        when().get(\"/people-content-type\").then().statusCode(200)\n-                .body(\"size()\", is(3))\n-                .body(\"[0].name\", is(\"superman\"))\n-                .body(\"[1].name\", is(\"batman\"))\n-                .body(\"[2].name\", is(\"spiderman\"))\n-                .header(\"content-type\", \"application/json;charset=utf-8\");\n-\n+        //        when().get(\"/hello\").then().statusCode(200)\n+        //                .body(is(\"[\\\"Hello world!\\\"]\"))\n+        //                .header(\"content-type\", \"application/json\");\n+        //        when().get(\"/hellos\").then().statusCode(200)\n+        //                .body(is(\"[\\\"hello\\\",\\\"world\\\",\\\"!\\\"]\"))\n+        //                .header(\"content-type\", \"application/json\");\n+        //        when().get(\"/no-hello\").then().statusCode(200).body(is(\"[]\"))\n+        //                .header(\"content-type\", \"application/json\");\n+        //        // status already sent, but not the end of the array\n+        //        when().get(\"/hello-and-fail\").then().statusCode(200)\n+        //                .body(containsString(\"[\\\"Hello\\\"\"))\n+        //                .body(not(containsString(\"]\")));\n+        //\n+        //        when().get(\"/buffers\").then().statusCode(500);\n+        //\n+        //        when().get(\"/void\").then().statusCode(200).body(is(\"[]\"));\n+        //\n+        //        when().get(\"/people\").then().statusCode(200)\n+        //                .body(\"size()\", is(3))\n+        //                .body(\"[0].name\", is(\"superman\"))\n+        //                .body(\"[1].name\", is(\"batman\"))\n+        //                .body(\"[2].name\", is(\"spiderman\"))\n+        //                .header(\"content-type\", \"application/json\");\n+        //\n+        //        when().get(\"/people-content-type\").then().statusCode(200)\n+        //                .body(\"size()\", is(3))\n+        //                .body(\"[0].name\", is(\"superman\"))\n+        //                .body(\"[1].name\", is(\"batman\"))\n+        //                .body(\"[2].name\", is(\"spiderman\"))\n+        //                .header(\"content-type\", \"application/json;charset=utf-8\");\n+\n+        System.out.println(when().get(\"/failure\").asString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d8d0282b51f7b7ef9bc54114a01d569ed018eea"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNTIxNDk5", "url": "https://github.com/quarkusio/quarkus/pull/11864#pullrequestreview-482521499", "createdAt": "2020-09-04T09:56:42Z", "commit": {"oid": "2d8d0282b51f7b7ef9bc54114a01d569ed018eea"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOTo1Njo0MlrOHNHgaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMDowODowNVrOHNH1nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUxNjUyMw==", "bodyText": "a HTTP response -> an HTTP response", "url": "https://github.com/quarkusio/quarkus/pull/11864#discussion_r483516523", "createdAt": "2020-09-04T09:56:42Z", "author": {"login": "mkouba"}, "path": "docs/src/main/asciidoc/reactive-routes.adoc", "diffHunk": "@@ -475,6 +475,40 @@ id: 3\n \n ----\n \n+=== Using Bean Validation\n+\n+You can combine reactive routes and Bean Validation.\n+First, don't forget to add the `quarkus-hibernate-validator` extension to your project.\n+Then, you can add constraints to your route parameter (annotated with `@Param` or `@Body`):\n+\n+[source,java]\n+----\n+@Route(produces = \"application/json\")\n+Person createPerson(@Body @Valid Person person, @NonNull @Param(\"id\") String primaryKey) {\n+  // ...\n+}\n+----\n+\n+If the parameters do not pass the tests, it returns a HTTP 400 response.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d8d0282b51f7b7ef9bc54114a01d569ed018eea"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUxODczNA==", "bodyText": "BTW I also like streams but a loop returning true once a constraint annotation is found would be more readable ;-)", "url": "https://github.com/quarkusio/quarkus/pull/11864#discussion_r483518734", "createdAt": "2020-09-04T10:01:14Z", "author": {"login": "mkouba"}, "path": "extensions/vertx-web/deployment/src/main/java/io/quarkus/vertx/web/deployment/HandlerDescriptor.java", "diffHunk": "@@ -31,6 +35,34 @@ boolean isReturningMulti() {\n         return method.returnType().name().equals(DotNames.MULTI);\n     }\n \n+    /**\n+     * @return {@code true} if the method is annotated with a constraint or {@code @Valid} or any parameter has such kind of\n+     *         annotation.\n+     */\n+    boolean requireValidation() {\n+        return method.annotations().stream()\n+                .anyMatch(new Predicate<AnnotationInstance>() {\n+                    @Override\n+                    public boolean test(AnnotationInstance ai) {\n+                        return ai.name().toString().startsWith(\"javax.validation\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwMTcxMQ=="}, "originalCommit": {"oid": "2d8d0282b51f7b7ef9bc54114a01d569ed018eea"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUyMDk0NQ==", "bodyText": "I'd suggest to use constants for repeating strings...", "url": "https://github.com/quarkusio/quarkus/pull/11864#discussion_r483520945", "createdAt": "2020-09-04T10:05:51Z", "author": {"login": "mkouba"}, "path": "extensions/vertx-web/deployment/src/main/java/io/quarkus/vertx/web/deployment/VertxWebProcessor.java", "diffHunk": "@@ -574,7 +602,32 @@ void implementInvoke(HandlerDescriptor descriptor, BeanInfo bean, MethodInfo met\n                 defaultProduces == null ? invoke.loadNull() : invoke.load(defaultProduces));\n \n         // Invoke the business method handler\n-        ResultHandle res = invoke.invokeVirtualMethod(methodDescriptor, beanInstanceHandle, paramHandles);\n+        AssignableResultHandle res;\n+        if (descriptor.isReturningUni()) {\n+            res = invoke.createVariable(Uni.class);\n+        } else if (descriptor.isReturningMulti()) {\n+            res = invoke.createVariable(Multi.class);\n+        } else {\n+            res = invoke.createVariable(Object.class);\n+        }\n+        invoke.assign(res, invoke.loadNull());\n+        if (!descriptor.requireValidation()) {\n+            ResultHandle value = invoke.invokeVirtualMethod(methodDescriptor, beanInstanceHandle, paramHandles);\n+            if (value != null) {\n+                invoke.assign(res, value);\n+            }\n+        } else {\n+            TryBlock block = invoke.tryBlock();\n+            ResultHandle value = block.invokeVirtualMethod(methodDescriptor, beanInstanceHandle, paramHandles);\n+            if (value != null) {\n+                block.assign(res, value);\n+            }\n+            CatchBlockCreator caught = block.addCatch(\"javax.validation.ConstraintViolationException\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d8d0282b51f7b7ef9bc54114a01d569ed018eea"}, "originalPosition": 271}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUyMTk1MQ==", "bodyText": "Why public? private final is probably better...", "url": "https://github.com/quarkusio/quarkus/pull/11864#discussion_r483521951", "createdAt": "2020-09-04T10:08:05Z", "author": {"login": "mkouba"}, "path": "extensions/vertx-web/deployment/src/main/java/io/quarkus/vertx/web/deployment/VertxWebProcessor.java", "diffHunk": "@@ -468,8 +479,16 @@ private String generateHandler(HandlerDescriptor desc, BeanInfo bean, MethodInfo\n                     .setModifiers(ACC_PRIVATE | ACC_FINAL);\n         }\n \n-        implementConstructor(bean, invokerCreator, beanField, contextField, containerField);\n-        implementInvoke(desc, bean, method, invokerCreator, beanField, contextField, containerField, transformedAnnotations,\n+        FieldCreator validatorField = null;\n+        if (desc.isProducedResponseValidated()) {\n+            // Is the produced item needs to be validated, we inject the Validator\n+            validatorField = invokerCreator.getFieldCreator(\"validator\", \"javax.validation.Validator\")\n+                    .setModifiers(ACC_PUBLIC);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d8d0282b51f7b7ef9bc54114a01d569ed018eea"}, "originalPosition": 181}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNTMyNDc3", "url": "https://github.com/quarkusio/quarkus/pull/11864#pullrequestreview-482532477", "createdAt": "2020-09-04T10:13:53Z", "commit": {"oid": "2d8d0282b51f7b7ef9bc54114a01d569ed018eea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMDoxMzo1M1rOHNIA4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMDoxMzo1M1rOHNIA4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUyNDgzMw==", "bodyText": "Hmmm, should we really use System.out.println here and below?", "url": "https://github.com/quarkusio/quarkus/pull/11864#discussion_r483524833", "createdAt": "2020-09-04T10:13:53Z", "author": {"login": "gsmet"}, "path": "extensions/vertx-web/runtime/src/main/java/io/quarkus/vertx/web/runtime/ValidationSupport.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package io.quarkus.vertx.web.runtime;\n+\n+import java.util.Set;\n+\n+import javax.validation.ConstraintViolation;\n+import javax.validation.ConstraintViolationException;\n+import javax.validation.Validator;\n+\n+import io.quarkus.arc.ArcContainer;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.RoutingContext;\n+\n+public class ValidationSupport {\n+\n+    public static final String APPLICATION_JSON = \"application/json\";\n+    public static final String ACCEPT_HEADER = \"Accept\";\n+    public static final String PROBLEM_TITLE = \"title\";\n+    public static final String PROBLEM_DETAIL = \"details\";\n+    public static final String PROBLEM_FIELD = \"field\";\n+    public static final String PROBLEM_MESSAGE = \"message\";\n+    public static final String PROBLEM_STATUS = \"status\";\n+    public static final String PROBLEM_VIOLATIONS = \"violations\";\n+\n+    private ValidationSupport() {\n+        // Avoid direct instantiation\n+    }\n+\n+    public static Validator getValidator(ArcContainer container) {\n+        return container.instance(Validator.class).get();\n+    }\n+\n+    public static String mapViolationsToJson(Set<ConstraintViolation<?>> violations, HttpServerResponse response) {\n+        response.setStatusCode(500);\n+        JsonObject json = generateJsonResponse(violations, true);\n+        return json.encode();\n+    }\n+\n+    /**\n+     * Generates a JSON response following https://opensource.zalando.com/problem/constraint-violation/\n+     * \n+     * @param violations the violations\n+     * @return the json object\n+     */\n+    private static JsonObject generateJsonResponse(Set<ConstraintViolation<?>> violations, boolean violationInProducedItem) {\n+        JsonObject json = new JsonObject()\n+                .put(PROBLEM_TITLE, \"Constraint Violation\")\n+                .put(PROBLEM_DETAIL, \"validation constraint violations\");\n+\n+        JsonArray array = new JsonArray();\n+        boolean isProduced = false;\n+        for (ConstraintViolation<?> cv : violations) {\n+            if (cv.getExecutableReturnValue() != null) {\n+                isProduced = true;\n+            }\n+            JsonObject violation = new JsonObject();\n+            violation.put(PROBLEM_FIELD, cv.getPropertyPath().toString());\n+            violation.put(PROBLEM_MESSAGE, cv.getMessage());\n+            array.add(violation);\n+        }\n+        json.put(PROBLEM_STATUS, isProduced || violationInProducedItem ? 500 : 400);\n+        json.put(PROBLEM_VIOLATIONS, array);\n+        return json;\n+    }\n+\n+    public static void handleViolationException(ConstraintViolationException ex, RoutingContext rc) {\n+        String accept = rc.request().getHeader(ACCEPT_HEADER);\n+        if (accept != null && accept.contains(APPLICATION_JSON)) {\n+            rc.response().putHeader(RouteHandlers.CONTENT_TYPE, APPLICATION_JSON);\n+            JsonObject json = generateJsonResponse(ex.getConstraintViolations(), false);\n+            rc.response().setStatusCode(json.getInteger(PROBLEM_STATUS));\n+            rc.response().end(json.encode());\n+        } else {\n+            // Check status\n+            int status = 400;\n+            for (ConstraintViolation<?> constraintViolation : ex.getConstraintViolations()) {\n+                if (constraintViolation.getExecutableReturnValue() != null) {\n+                    status = 500;\n+                    break;\n+                }\n+            }\n+            // If not JSON just fails.\n+            rc.fail(status, ex);\n+        }\n+    }\n+\n+    public static void log(String s) {\n+        System.out.println(\"[LOG] - \" + s);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d8d0282b51f7b7ef9bc54114a01d569ed018eea"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNTM0NjM3", "url": "https://github.com/quarkusio/quarkus/pull/11864#pullrequestreview-482534637", "createdAt": "2020-09-04T10:17:39Z", "commit": {"oid": "2d8d0282b51f7b7ef9bc54114a01d569ed018eea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMDoxNzo0MFrOHNIIEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMDoxNzo0MFrOHNIIEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUyNjY3NQ==", "bodyText": "\"Is the produced item\" -> \"If the produced item\"", "url": "https://github.com/quarkusio/quarkus/pull/11864#discussion_r483526675", "createdAt": "2020-09-04T10:17:40Z", "author": {"login": "mkouba"}, "path": "extensions/vertx-web/deployment/src/main/java/io/quarkus/vertx/web/deployment/VertxWebProcessor.java", "diffHunk": "@@ -468,8 +479,16 @@ private String generateHandler(HandlerDescriptor desc, BeanInfo bean, MethodInfo\n                     .setModifiers(ACC_PRIVATE | ACC_FINAL);\n         }\n \n-        implementConstructor(bean, invokerCreator, beanField, contextField, containerField);\n-        implementInvoke(desc, bean, method, invokerCreator, beanField, contextField, containerField, transformedAnnotations,\n+        FieldCreator validatorField = null;\n+        if (desc.isProducedResponseValidated()) {\n+            // Is the produced item needs to be validated, we inject the Validator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d8d0282b51f7b7ef9bc54114a01d569ed018eea"}, "originalPosition": 179}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNTM2NTc0", "url": "https://github.com/quarkusio/quarkus/pull/11864#pullrequestreview-482536574", "createdAt": "2020-09-04T10:20:56Z", "commit": {"oid": "2d8d0282b51f7b7ef9bc54114a01d569ed018eea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMDoyMDo1N1rOHNIOWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMDoyMDo1N1rOHNIOWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUyODI4Mw==", "bodyText": "It's good to start the name of a constant with the class/domain name, e.g. VALIDATION_GET_VALIDATOR, SET_IS_EMPTY...", "url": "https://github.com/quarkusio/quarkus/pull/11864#discussion_r483528283", "createdAt": "2020-09-04T10:20:57Z", "author": {"login": "mkouba"}, "path": "extensions/vertx-web/deployment/src/main/java/io/quarkus/vertx/web/deployment/Methods.java", "diffHunk": "@@ -168,6 +173,17 @@\n     static final MethodDescriptor OPTIONAL_OF_NULLABLE = MethodDescriptor\n             .ofMethod(Optional.class, \"ofNullable\", Optional.class, Object.class);\n \n+    static final MethodDescriptor GET_VALIDATOR = MethodDescriptor.ofMethod(ValidationSupport.class, \"getValidator\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d8d0282b51f7b7ef9bc54114a01d569ed018eea"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNTQ0MTkx", "url": "https://github.com/quarkusio/quarkus/pull/11864#pullrequestreview-482544191", "createdAt": "2020-09-04T10:33:52Z", "commit": {"oid": "2d8d0282b51f7b7ef9bc54114a01d569ed018eea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMDozMzo1M1rOHNIloA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMDozMzo1M1rOHNIloA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUzNDI0MA==", "bodyText": "These tests will fail on systems with non-EN locale...", "url": "https://github.com/quarkusio/quarkus/pull/11864#discussion_r483534240", "createdAt": "2020-09-04T10:33:53Z", "author": {"login": "mkouba"}, "path": "extensions/vertx-web/deployment/src/test/java/io/quarkus/vertx/web/validation/SyncValidationTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package io.quarkus.vertx.web.validation;\n+\n+import static io.restassured.RestAssured.get;\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.anyOf;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.validation.Valid;\n+import javax.validation.constraints.NotNull;\n+import javax.validation.constraints.Pattern;\n+\n+import org.hibernate.validator.constraints.Length;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+import io.quarkus.vertx.web.Param;\n+import io.quarkus.vertx.web.Route;\n+import io.vertx.core.http.HttpMethod;\n+\n+public class SyncValidationTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(MyRoutes.class));\n+\n+    @Test\n+    public void test() {\n+        // Valid result\n+        get(\"/valid\").then().statusCode(200)\n+                .body(\"name\", is(\"luke\"))\n+                .body(\"welcome\", is(\"hello\"));\n+\n+        // Valid parameter\n+        given()\n+                .queryParam(\"name\", \"neo\")\n+                .when()\n+                .get(\"/query\")\n+                .then().statusCode(200);\n+\n+        // JSON output\n+        given()\n+                .header(\"Accept\", \"application/json\")\n+                .when()\n+                .get(\"/invalid\")\n+                .then()\n+                .statusCode(500)\n+                .body(\"title\", containsString(\"Constraint Violation\"))\n+                .body(\"status\", is(500))\n+                .body(\"details\", containsString(\"validation constraint violations\"))\n+                .body(\"violations[0].field\", containsString(\"name\"))\n+                .body(\"violations[0].message\", containsString(\"length\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d8d0282b51f7b7ef9bc54114a01d569ed018eea"}, "originalPosition": 57}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2d8d0282b51f7b7ef9bc54114a01d569ed018eea", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/2d8d0282b51f7b7ef9bc54114a01d569ed018eea", "committedDate": "2020-09-03T17:20:27Z", "message": "Fix #10990\n\nAdd support for bean validation to reactive routes"}, "afterCommit": {"oid": "a3841d4780f993a43a2c62dae4b6bcd1d1cf96c6", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/a3841d4780f993a43a2c62dae4b6bcd1d1cf96c6", "committedDate": "2020-09-04T12:11:12Z", "message": "Fix #10990\n\nAdd support for bean validation to reactive routes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNTg0NjQy", "url": "https://github.com/quarkusio/quarkus/pull/11864#pullrequestreview-482584642", "createdAt": "2020-09-04T11:46:44Z", "commit": {"oid": "2d8d0282b51f7b7ef9bc54114a01d569ed018eea"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMTo0Njo0NFrOHNKfyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjoxMjo1OFrOHNLMgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU2NTUxMw==", "bodyText": "Oh, I see...\nSo I can only check for non-nullity.", "url": "https://github.com/quarkusio/quarkus/pull/11864#discussion_r483565513", "createdAt": "2020-09-04T11:46:44Z", "author": {"login": "cescoffier"}, "path": "extensions/vertx-web/deployment/src/test/java/io/quarkus/vertx/web/validation/SyncValidationTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package io.quarkus.vertx.web.validation;\n+\n+import static io.restassured.RestAssured.get;\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.anyOf;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.validation.Valid;\n+import javax.validation.constraints.NotNull;\n+import javax.validation.constraints.Pattern;\n+\n+import org.hibernate.validator.constraints.Length;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+import io.quarkus.vertx.web.Param;\n+import io.quarkus.vertx.web.Route;\n+import io.vertx.core.http.HttpMethod;\n+\n+public class SyncValidationTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(MyRoutes.class));\n+\n+    @Test\n+    public void test() {\n+        // Valid result\n+        get(\"/valid\").then().statusCode(200)\n+                .body(\"name\", is(\"luke\"))\n+                .body(\"welcome\", is(\"hello\"));\n+\n+        // Valid parameter\n+        given()\n+                .queryParam(\"name\", \"neo\")\n+                .when()\n+                .get(\"/query\")\n+                .then().statusCode(200);\n+\n+        // JSON output\n+        given()\n+                .header(\"Accept\", \"application/json\")\n+                .when()\n+                .get(\"/invalid\")\n+                .then()\n+                .statusCode(500)\n+                .body(\"title\", containsString(\"Constraint Violation\"))\n+                .body(\"status\", is(500))\n+                .body(\"details\", containsString(\"validation constraint violations\"))\n+                .body(\"violations[0].field\", containsString(\"name\"))\n+                .body(\"violations[0].message\", containsString(\"length\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUzNDI0MA=="}, "originalCommit": {"oid": "2d8d0282b51f7b7ef9bc54114a01d569ed018eea"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3NjY2Mw==", "bodyText": "@gsmet @mkouba Not great, but a temporary approach until we get the build item.", "url": "https://github.com/quarkusio/quarkus/pull/11864#discussion_r483576663", "createdAt": "2020-09-04T12:12:19Z", "author": {"login": "cescoffier"}, "path": "extensions/vertx-web/deployment/src/main/java/io/quarkus/vertx/web/deployment/HandlerDescriptor.java", "diffHunk": "@@ -31,6 +33,34 @@ boolean isReturningMulti() {\n         return method.returnType().name().equals(DotNames.MULTI);\n     }\n \n+    /**\n+     * @return {@code true} if the method is annotated with a constraint or {@code @Valid} or any parameter has such kind of\n+     *         annotation.\n+     */\n+    boolean requireValidation() {\n+        for (AnnotationInstance annotation : method.annotations()) {\n+            String name = annotation.name().toString();\n+            if (name.startsWith(\"javax.validation\") || name.startsWith(\"org.hibernate.validator.constraints\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3841d4780f993a43a2c62dae4b6bcd1d1cf96c6"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3Njk2Mw==", "bodyText": "The field is accessed from another class (a callback). Made it public final after discussion with @mkouba", "url": "https://github.com/quarkusio/quarkus/pull/11864#discussion_r483576963", "createdAt": "2020-09-04T12:12:58Z", "author": {"login": "cescoffier"}, "path": "extensions/vertx-web/deployment/src/main/java/io/quarkus/vertx/web/deployment/VertxWebProcessor.java", "diffHunk": "@@ -468,8 +489,16 @@ private String generateHandler(HandlerDescriptor desc, BeanInfo bean, MethodInfo\n                     .setModifiers(ACC_PRIVATE | ACC_FINAL);\n         }\n \n-        implementConstructor(bean, invokerCreator, beanField, contextField, containerField);\n-        implementInvoke(desc, bean, method, invokerCreator, beanField, contextField, containerField, transformedAnnotations,\n+        FieldCreator validatorField = null;\n+        if (desc.isProducedResponseValidated()) {\n+            // If the produced item needs to be validated, we inject the Validator\n+            validatorField = invokerCreator.getFieldCreator(\"validator\", Methods.VALIDATION_VALIDATOR)\n+                    .setModifiers(ACC_PUBLIC | ACC_FINAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3841d4780f993a43a2c62dae4b6bcd1d1cf96c6"}, "originalPosition": 164}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNjk4MDgz", "url": "https://github.com/quarkusio/quarkus/pull/11864#pullrequestreview-482698083", "createdAt": "2020-09-04T14:27:48Z", "commit": {"oid": "a3841d4780f993a43a2c62dae4b6bcd1d1cf96c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNDoyNzo0OFrOHNPqhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNDoyNzo0OFrOHNPqhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY1MDE4Mw==", "bodyText": "If the item producesd by the route...", "url": "https://github.com/quarkusio/quarkus/pull/11864#discussion_r483650183", "createdAt": "2020-09-04T14:27:48Z", "author": {"login": "mkouba"}, "path": "docs/src/main/asciidoc/reactive-routes.adoc", "diffHunk": "@@ -475,6 +475,40 @@ id: 3\n \n ----\n \n+=== Using Bean Validation\n+\n+You can combine reactive routes and Bean Validation.\n+First, don't forget to add the `quarkus-hibernate-validator` extension to your project.\n+Then, you can add constraints to your route parameter (annotated with `@Param` or `@Body`):\n+\n+[source,java]\n+----\n+@Route(produces = \"application/json\")\n+Person createPerson(@Body @Valid Person person, @NonNull @Param(\"id\") String primaryKey) {\n+  // ...\n+}\n+----\n+\n+If the parameters do not pass the tests, it returns an HTTP 400 response.\n+If the request accepts JSON payload, the response follows the https://opensource.zalando.com/problem/constraint-violation/[Problem] format.\n+\n+When returning an object or a `Uni`, you can also use the `@Valid` annotation:\n+\n+[source,java]\n+----\n+@Route(...)\n+@Valid Uni<Person> createPerson(@Body @Valid Person person, @NonNull @Param(\"id\") String primaryKey) {\n+  // ...\n+}\n+----\n+\n+If the item produces by the route does not pass the validation, it returns a HTTP 500 response.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3841d4780f993a43a2c62dae4b6bcd1d1cf96c6"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNzAwMzU1", "url": "https://github.com/quarkusio/quarkus/pull/11864#pullrequestreview-482700355", "createdAt": "2020-09-04T14:30:33Z", "commit": {"oid": "a3841d4780f993a43a2c62dae4b6bcd1d1cf96c6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ded1804bf748ccc28e12ccaa3b35b88e3d17434", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/3ded1804bf748ccc28e12ccaa3b35b88e3d17434", "committedDate": "2020-09-05T16:26:38Z", "message": "The Quarkus Error Handler was not enforcing the status code that could have been configured in the context.\n\nWhen the application uses routingContext.fail(xxx, exception) the xxx (status) was ignored. This commits uses that status if configured."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a3841d4780f993a43a2c62dae4b6bcd1d1cf96c6", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/a3841d4780f993a43a2c62dae4b6bcd1d1cf96c6", "committedDate": "2020-09-04T12:11:12Z", "message": "Fix #10990\n\nAdd support for bean validation to reactive routes"}, "afterCommit": {"oid": "84af783ab5926baf36231fbe917ec66d1fc904fa", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/84af783ab5926baf36231fbe917ec66d1fc904fa", "committedDate": "2020-09-05T16:37:23Z", "message": "Fix #10990\n\nAdd support for bean validation to reactive routes\nUse the newly provided Build Item to retrieve the set of supported constraints."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNzAyMDc5", "url": "https://github.com/quarkusio/quarkus/pull/11864#pullrequestreview-483702079", "createdAt": "2020-09-07T20:14:31Z", "commit": {"oid": "84af783ab5926baf36231fbe917ec66d1fc904fa"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMDoxNDozMVrOHOHH9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMDoxNDozMVrOHOHH9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU1ODgzOA==", "bodyText": "This is incorrect, you only test for Valid.", "url": "https://github.com/quarkusio/quarkus/pull/11864#discussion_r484558838", "createdAt": "2020-09-07T20:14:31Z", "author": {"login": "gsmet"}, "path": "extensions/vertx-web/deployment/src/main/java/io/quarkus/vertx/web/deployment/HandlerDescriptor.java", "diffHunk": "@@ -31,6 +36,39 @@ boolean isReturningMulti() {\n         return method.returnType().name().equals(DotNames.MULTI);\n     }\n \n+    /**\n+     * @return {@code true} if the method is annotated with a constraint or {@code @Valid} or any parameter has such kind of\n+     *         annotation.\n+     */\n+    boolean requireValidation() {\n+        if (validationAnnotations == null) {\n+            return false;\n+        }\n+        for (AnnotationInstance annotation : method.annotations()) {\n+            String name = annotation.name().toString();\n+            if (validationAnnotations.getAllAnnotations().contains(name)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * @return {@code true} if the method is annotated with a constraint or {@code @Valid}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84af783ab5926baf36231fbe917ec66d1fc904fa"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e330f5226d6f311fbd9705821251137ffb123d38", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/e330f5226d6f311fbd9705821251137ffb123d38", "committedDate": "2020-09-08T06:16:07Z", "message": "Fix #10990\n\nAdd support for bean validation to reactive routes\nUse the newly provided Build Item to retrieve the set of supported constraints."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "84af783ab5926baf36231fbe917ec66d1fc904fa", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/84af783ab5926baf36231fbe917ec66d1fc904fa", "committedDate": "2020-09-05T16:37:23Z", "message": "Fix #10990\n\nAdd support for bean validation to reactive routes\nUse the newly provided Build Item to retrieve the set of supported constraints."}, "afterCommit": {"oid": "e330f5226d6f311fbd9705821251137ffb123d38", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/e330f5226d6f311fbd9705821251137ffb123d38", "committedDate": "2020-09-08T06:16:07Z", "message": "Fix #10990\n\nAdd support for bean validation to reactive routes\nUse the newly provided Build Item to retrieve the set of supported constraints."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MjEwNzkw", "url": "https://github.com/quarkusio/quarkus/pull/11864#pullrequestreview-484210790", "createdAt": "2020-09-08T14:41:11Z", "commit": {"oid": "e330f5226d6f311fbd9705821251137ffb123d38"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 693, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}