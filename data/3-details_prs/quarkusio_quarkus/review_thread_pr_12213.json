{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5ODc4MTMz", "number": 12213, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNjoxNDoyN1rOElg15Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNjoxNjozMVrOElg3qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzcwODUzOnYy", "diffSide": "RIGHT", "path": "extensions/mutiny/deployment/src/main/java/io/quarkus/mutiny/deployment/MutinyProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNjoxNDoyN1rOHVBwRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzo1NzozMlrOHVEUkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgxMDg4Nw==", "bodyText": "[Picky] - We could have done everything in a single method.", "url": "https://github.com/quarkusio/quarkus/pull/12213#discussion_r491810887", "createdAt": "2020-09-21T06:14:27Z", "author": {"login": "cescoffier"}, "path": "extensions/mutiny/deployment/src/main/java/io/quarkus/mutiny/deployment/MutinyProcessor.java", "diffHunk": "@@ -23,4 +23,16 @@ public void initExecutor(ExecutorBuildItem executorBuildItem, MutinyInfrastructu\n         ExecutorService executor = executorBuildItem.getExecutorProxy();\n         recorder.configureMutinyInfrastructure(executor);\n     }\n+\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    public void defineDroppedExceptionHandler(MutinyInfrastructure recorder) {\n+        recorder.configureDroppedExceptionHandler();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcd0acef18a66e07b455a3f078501671bf5e83c1"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgzOTQ0Mg==", "bodyText": "Ok let me change that. I was wondering if that was a pattern to delegate to a class there, but since the actual code is in runtime and we're in a static init... yeah \ud83d\udc4d", "url": "https://github.com/quarkusio/quarkus/pull/12213#discussion_r491839442", "createdAt": "2020-09-21T07:30:41Z", "author": {"login": "jponge"}, "path": "extensions/mutiny/deployment/src/main/java/io/quarkus/mutiny/deployment/MutinyProcessor.java", "diffHunk": "@@ -23,4 +23,16 @@ public void initExecutor(ExecutorBuildItem executorBuildItem, MutinyInfrastructu\n         ExecutorService executor = executorBuildItem.getExecutorProxy();\n         recorder.configureMutinyInfrastructure(executor);\n     }\n+\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    public void defineDroppedExceptionHandler(MutinyInfrastructure recorder) {\n+        recorder.configureDroppedExceptionHandler();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgxMDg4Nw=="}, "originalCommit": {"oid": "fcd0acef18a66e07b455a3f078501671bf5e83c1"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg1Mjk0Ng==", "bodyText": "Nevermind I get it now", "url": "https://github.com/quarkusio/quarkus/pull/12213#discussion_r491852946", "createdAt": "2020-09-21T07:57:32Z", "author": {"login": "jponge"}, "path": "extensions/mutiny/deployment/src/main/java/io/quarkus/mutiny/deployment/MutinyProcessor.java", "diffHunk": "@@ -23,4 +23,16 @@ public void initExecutor(ExecutorBuildItem executorBuildItem, MutinyInfrastructu\n         ExecutorService executor = executorBuildItem.getExecutorProxy();\n         recorder.configureMutinyInfrastructure(executor);\n     }\n+\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    public void defineDroppedExceptionHandler(MutinyInfrastructure recorder) {\n+        recorder.configureDroppedExceptionHandler();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgxMDg4Nw=="}, "originalCommit": {"oid": "fcd0acef18a66e07b455a3f078501671bf5e83c1"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzcxMDI0OnYy", "diffSide": "RIGHT", "path": "extensions/mutiny/runtime/src/main/java/io/quarkus/mutiny/runtime/MutinyInfrastructure.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNjoxNToxM1rOHVBxPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODowMDo0OVrOHVEbSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgxMTEzMg==", "bodyText": "Should we cache the logger?", "url": "https://github.com/quarkusio/quarkus/pull/12213#discussion_r491811132", "createdAt": "2020-09-21T06:15:13Z", "author": {"login": "cescoffier"}, "path": "extensions/mutiny/runtime/src/main/java/io/quarkus/mutiny/runtime/MutinyInfrastructure.java", "diffHunk": "@@ -11,4 +15,23 @@\n     public void configureMutinyInfrastructure(ExecutorService exec) {\n         Infrastructure.setDefaultExecutor(exec);\n     }\n+\n+    public void configureDroppedExceptionHandler() {\n+        Infrastructure.setDroppedExceptionHandler(new Consumer<Throwable>() {\n+            @Override\n+            public void accept(Throwable throwable) {\n+                Logger.getLogger(MutinyInfrastructure.class).error(\"Mutiny had to drop the following exception\", throwable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcd0acef18a66e07b455a3f078501671bf5e83c1"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgxMTI1NQ==", "bodyText": "Can we add the drop site too?", "url": "https://github.com/quarkusio/quarkus/pull/12213#discussion_r491811255", "createdAt": "2020-09-21T06:15:37Z", "author": {"login": "cescoffier"}, "path": "extensions/mutiny/runtime/src/main/java/io/quarkus/mutiny/runtime/MutinyInfrastructure.java", "diffHunk": "@@ -11,4 +15,23 @@\n     public void configureMutinyInfrastructure(ExecutorService exec) {\n         Infrastructure.setDefaultExecutor(exec);\n     }\n+\n+    public void configureDroppedExceptionHandler() {\n+        Infrastructure.setDroppedExceptionHandler(new Consumer<Throwable>() {\n+            @Override\n+            public void accept(Throwable throwable) {\n+                Logger.getLogger(MutinyInfrastructure.class).error(\"Mutiny had to drop the following exception\", throwable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgxMTEzMg=="}, "originalCommit": {"oid": "fcd0acef18a66e07b455a3f078501671bf5e83c1"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg0MDE5NQ==", "bodyText": "It should be infrequent enough, but I can try moving it back to the heap. In earlier iterations I had GraalVM compilation issues, but it was my bad understanding of the ExecutionTime scopes.", "url": "https://github.com/quarkusio/quarkus/pull/12213#discussion_r491840195", "createdAt": "2020-09-21T07:32:23Z", "author": {"login": "jponge"}, "path": "extensions/mutiny/runtime/src/main/java/io/quarkus/mutiny/runtime/MutinyInfrastructure.java", "diffHunk": "@@ -11,4 +15,23 @@\n     public void configureMutinyInfrastructure(ExecutorService exec) {\n         Infrastructure.setDefaultExecutor(exec);\n     }\n+\n+    public void configureDroppedExceptionHandler() {\n+        Infrastructure.setDroppedExceptionHandler(new Consumer<Throwable>() {\n+            @Override\n+            public void accept(Throwable throwable) {\n+                Logger.getLogger(MutinyInfrastructure.class).error(\"Mutiny had to drop the following exception\", throwable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgxMTEzMg=="}, "originalCommit": {"oid": "fcd0acef18a66e07b455a3f078501671bf5e83c1"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg1NDY2NA==", "bodyText": "Can we add the drop site too?\n\nSo far we get an exception like:\n2020-09-21 09:56:44,922 ERROR [io.qua.mut.run.MutinyInfrastructure] (main) Mutiny had to drop the following exception: java.io.IOException: boom\n\tat io.quarkus.mutiny.deployment.test.MutinyTest$BeanUsingMutiny.lambda$droppedException$2(MutinyTest.java:123)\n\tat io.smallrye.mutiny.operators.UniOnCancellationCall$1$1.execute(UniOnCancellationCall.java:40)\n\tat io.smallrye.mutiny.operators.UniOnCancellationCall$1$1.cancel(UniOnCancellationCall.java:30)\n\tat io.smallrye.mutiny.operators.UniSerializedSubscriber.cancel(UniSerializedSubscriber.java:124)\n\tat io.smallrye.mutiny.operators.UniSerializedSubscriber.cancel(UniSerializedSubscriber.java:124)\n\tat io.smallrye.mutiny.helpers.UniCallbackSubscriber.cancel(UniCallbackSubscriber.java:79)\n\tat io.quarkus.mutiny.deployment.test.MutinyTest.testDroppedException(MutinyTest.java:61)\n(...)\n\nWe will likely make the stack trace better when we tackle smallrye/smallrye-mutiny#177", "url": "https://github.com/quarkusio/quarkus/pull/12213#discussion_r491854664", "createdAt": "2020-09-21T08:00:49Z", "author": {"login": "jponge"}, "path": "extensions/mutiny/runtime/src/main/java/io/quarkus/mutiny/runtime/MutinyInfrastructure.java", "diffHunk": "@@ -11,4 +15,23 @@\n     public void configureMutinyInfrastructure(ExecutorService exec) {\n         Infrastructure.setDefaultExecutor(exec);\n     }\n+\n+    public void configureDroppedExceptionHandler() {\n+        Infrastructure.setDroppedExceptionHandler(new Consumer<Throwable>() {\n+            @Override\n+            public void accept(Throwable throwable) {\n+                Logger.getLogger(MutinyInfrastructure.class).error(\"Mutiny had to drop the following exception\", throwable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgxMTEzMg=="}, "originalCommit": {"oid": "fcd0acef18a66e07b455a3f078501671bf5e83c1"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzcxMzA1OnYy", "diffSide": "RIGHT", "path": "extensions/mutiny/runtime/src/main/java/io/quarkus/mutiny/runtime/MutinyInfrastructure.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNjoxNjozMVrOHVByww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzozMToxMFrOHVDglw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgxMTUyMw==", "bodyText": "Can you add a comment about why we use that strategy (avoid depending on Vert.x explicitly, also avoid to select worker threads).", "url": "https://github.com/quarkusio/quarkus/pull/12213#discussion_r491811523", "createdAt": "2020-09-21T06:16:31Z", "author": {"login": "cescoffier"}, "path": "extensions/mutiny/runtime/src/main/java/io/quarkus/mutiny/runtime/MutinyInfrastructure.java", "diffHunk": "@@ -11,4 +15,23 @@\n     public void configureMutinyInfrastructure(ExecutorService exec) {\n         Infrastructure.setDefaultExecutor(exec);\n     }\n+\n+    public void configureDroppedExceptionHandler() {\n+        Infrastructure.setDroppedExceptionHandler(new Consumer<Throwable>() {\n+            @Override\n+            public void accept(Throwable throwable) {\n+                Logger.getLogger(MutinyInfrastructure.class).error(\"Mutiny had to drop the following exception\", throwable);\n+            }\n+        });\n+    }\n+\n+    public void configureThreadBlockingChecker() {\n+        Infrastructure.setCanCallerThreadBeBlockedSupplier(new BooleanSupplier() {\n+            @Override\n+            public boolean getAsBoolean() {\n+                String threadName = Thread.currentThread().getName();\n+                return !threadName.contains(\"vertx-eventloop-thread-\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcd0acef18a66e07b455a3f078501671bf5e83c1"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgzOTYzOQ==", "bodyText": "Yep", "url": "https://github.com/quarkusio/quarkus/pull/12213#discussion_r491839639", "createdAt": "2020-09-21T07:31:10Z", "author": {"login": "jponge"}, "path": "extensions/mutiny/runtime/src/main/java/io/quarkus/mutiny/runtime/MutinyInfrastructure.java", "diffHunk": "@@ -11,4 +15,23 @@\n     public void configureMutinyInfrastructure(ExecutorService exec) {\n         Infrastructure.setDefaultExecutor(exec);\n     }\n+\n+    public void configureDroppedExceptionHandler() {\n+        Infrastructure.setDroppedExceptionHandler(new Consumer<Throwable>() {\n+            @Override\n+            public void accept(Throwable throwable) {\n+                Logger.getLogger(MutinyInfrastructure.class).error(\"Mutiny had to drop the following exception\", throwable);\n+            }\n+        });\n+    }\n+\n+    public void configureThreadBlockingChecker() {\n+        Infrastructure.setCanCallerThreadBeBlockedSupplier(new BooleanSupplier() {\n+            @Override\n+            public boolean getAsBoolean() {\n+                String threadName = Thread.currentThread().getName();\n+                return !threadName.contains(\"vertx-eventloop-thread-\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgxMTUyMw=="}, "originalCommit": {"oid": "fcd0acef18a66e07b455a3f078501671bf5e83c1"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 184, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}