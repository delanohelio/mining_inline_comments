{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNjEwMzIz", "number": 10396, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDo0NTo0NVrOEKdcJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNToxODoxMFrOEKjeqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDAzNTU5OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/security-oauth2.adoc", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDo0NTo0NVrOGrgu2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMToyNzoxOFrOGrh85w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3ODIzMg==", "bodyText": "I am pretty sure that we want to do something like \n  \n    \n      quarkus/docs/src/main/asciidoc/rest-client.adoc\n    \n    \n         Line 478\n      in\n      db21557\n    \n    \n    \n    \n\n        \n          \n           public class WiremockCountries implements QuarkusTestResourceLifecycleManager {  // <2> \n        \n    \n  \n\n instead of this per pest configuration", "url": "https://github.com/quarkusio/quarkus/pull/10396#discussion_r448278232", "createdAt": "2020-07-01T10:45:45Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/security-oauth2.adoc", "diffHunk": "@@ -342,3 +342,74 @@ $ ./target/security-oauth2-quickstart-runner\n 2019-03-28 14:31:37,315 INFO  [io.quarkus] (main) Quarkus 0.20.0 started in 0.006s. Listening on: http://[::]:8080\n 2019-03-28 14:31:37,316 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy, resteasy-jsonb, security, security-oauth2]\n ----\n+\n+== Integration testing\n+\n+If you don't want to use a real OAuth2 authorization server for your integration tests, you can use the\n+link:security-properties[Properties based security] extension for your test, or mock an authorization server using Wiremock.\n+\n+To mock an authentication server via Wiremock, you first need to add the Wiremock library inside your `pom.xml`.\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>com.github.tomakehurst</groupId>\n+    <artifactId>wiremock-jre8</artifactId>\n+    <scope>test</scope>\n+</dependency>\n+----\n+\n+Then you setup Wiremock to always return a valid response for any OAuth2 token send to the `/introspect` endpoint,\n+you must adapt the response to fit your needs (at least the scope).\n+\n+[source,java]\n+----\n+private static WireMockServer wireMockServer = new WireMockServer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3cca0832d93734cb522ddaf52dcdd5a13974ec2"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI4Njc1NA==", "bodyText": "Bot approache are good for different reason.\nIf we prefere TestResource I'm OK to switch to it inside our integration test and update the guide.", "url": "https://github.com/quarkusio/quarkus/pull/10396#discussion_r448286754", "createdAt": "2020-07-01T11:03:10Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/security-oauth2.adoc", "diffHunk": "@@ -342,3 +342,74 @@ $ ./target/security-oauth2-quickstart-runner\n 2019-03-28 14:31:37,315 INFO  [io.quarkus] (main) Quarkus 0.20.0 started in 0.006s. Listening on: http://[::]:8080\n 2019-03-28 14:31:37,316 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy, resteasy-jsonb, security, security-oauth2]\n ----\n+\n+== Integration testing\n+\n+If you don't want to use a real OAuth2 authorization server for your integration tests, you can use the\n+link:security-properties[Properties based security] extension for your test, or mock an authorization server using Wiremock.\n+\n+To mock an authentication server via Wiremock, you first need to add the Wiremock library inside your `pom.xml`.\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>com.github.tomakehurst</groupId>\n+    <artifactId>wiremock-jre8</artifactId>\n+    <scope>test</scope>\n+</dependency>\n+----\n+\n+Then you setup Wiremock to always return a valid response for any OAuth2 token send to the `/introspect` endpoint,\n+you must adapt the response to fit your needs (at least the scope).\n+\n+[source,java]\n+----\n+private static WireMockServer wireMockServer = new WireMockServer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3ODIzMg=="}, "originalCommit": {"oid": "a3cca0832d93734cb522ddaf52dcdd5a13974ec2"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI4OTU1Nw==", "bodyText": "Not really, when you use %test.quarkus.oauth2.introspection-url=http://localhost:8080/introspect it applies to all tests, so best make sure that you have a Wiremock server up for all tests", "url": "https://github.com/quarkusio/quarkus/pull/10396#discussion_r448289557", "createdAt": "2020-07-01T11:08:47Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/security-oauth2.adoc", "diffHunk": "@@ -342,3 +342,74 @@ $ ./target/security-oauth2-quickstart-runner\n 2019-03-28 14:31:37,315 INFO  [io.quarkus] (main) Quarkus 0.20.0 started in 0.006s. Listening on: http://[::]:8080\n 2019-03-28 14:31:37,316 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy, resteasy-jsonb, security, security-oauth2]\n ----\n+\n+== Integration testing\n+\n+If you don't want to use a real OAuth2 authorization server for your integration tests, you can use the\n+link:security-properties[Properties based security] extension for your test, or mock an authorization server using Wiremock.\n+\n+To mock an authentication server via Wiremock, you first need to add the Wiremock library inside your `pom.xml`.\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>com.github.tomakehurst</groupId>\n+    <artifactId>wiremock-jre8</artifactId>\n+    <scope>test</scope>\n+</dependency>\n+----\n+\n+Then you setup Wiremock to always return a valid response for any OAuth2 token send to the `/introspect` endpoint,\n+you must adapt the response to fit your needs (at least the scope).\n+\n+[source,java]\n+----\n+private static WireMockServer wireMockServer = new WireMockServer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3ODIzMg=="}, "originalCommit": {"oid": "a3cca0832d93734cb522ddaf52dcdd5a13974ec2"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI5Njk5MQ==", "bodyText": "This is a good point indead ;)", "url": "https://github.com/quarkusio/quarkus/pull/10396#discussion_r448296991", "createdAt": "2020-07-01T11:24:46Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/security-oauth2.adoc", "diffHunk": "@@ -342,3 +342,74 @@ $ ./target/security-oauth2-quickstart-runner\n 2019-03-28 14:31:37,315 INFO  [io.quarkus] (main) Quarkus 0.20.0 started in 0.006s. Listening on: http://[::]:8080\n 2019-03-28 14:31:37,316 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy, resteasy-jsonb, security, security-oauth2]\n ----\n+\n+== Integration testing\n+\n+If you don't want to use a real OAuth2 authorization server for your integration tests, you can use the\n+link:security-properties[Properties based security] extension for your test, or mock an authorization server using Wiremock.\n+\n+To mock an authentication server via Wiremock, you first need to add the Wiremock library inside your `pom.xml`.\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>com.github.tomakehurst</groupId>\n+    <artifactId>wiremock-jre8</artifactId>\n+    <scope>test</scope>\n+</dependency>\n+----\n+\n+Then you setup Wiremock to always return a valid response for any OAuth2 token send to the `/introspect` endpoint,\n+you must adapt the response to fit your needs (at least the scope).\n+\n+[source,java]\n+----\n+private static WireMockServer wireMockServer = new WireMockServer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3ODIzMg=="}, "originalCommit": {"oid": "a3cca0832d93734cb522ddaf52dcdd5a13974ec2"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI5ODIxNQ==", "bodyText": ":)", "url": "https://github.com/quarkusio/quarkus/pull/10396#discussion_r448298215", "createdAt": "2020-07-01T11:27:18Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/security-oauth2.adoc", "diffHunk": "@@ -342,3 +342,74 @@ $ ./target/security-oauth2-quickstart-runner\n 2019-03-28 14:31:37,315 INFO  [io.quarkus] (main) Quarkus 0.20.0 started in 0.006s. Listening on: http://[::]:8080\n 2019-03-28 14:31:37,316 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy, resteasy-jsonb, security, security-oauth2]\n ----\n+\n+== Integration testing\n+\n+If you don't want to use a real OAuth2 authorization server for your integration tests, you can use the\n+link:security-properties[Properties based security] extension for your test, or mock an authorization server using Wiremock.\n+\n+To mock an authentication server via Wiremock, you first need to add the Wiremock library inside your `pom.xml`.\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>com.github.tomakehurst</groupId>\n+    <artifactId>wiremock-jre8</artifactId>\n+    <scope>test</scope>\n+</dependency>\n+----\n+\n+Then you setup Wiremock to always return a valid response for any OAuth2 token send to the `/introspect` endpoint,\n+you must adapt the response to fit your needs (at least the scope).\n+\n+[source,java]\n+----\n+private static WireMockServer wireMockServer = new WireMockServer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3ODIzMg=="}, "originalCommit": {"oid": "a3cca0832d93734cb522ddaf52dcdd5a13974ec2"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTAyNTA2OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/security-oauth2.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNToxODoxMFrOGrqa_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNTo1NToyNFrOGrr4hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQzNjk5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Bellow is an example of a test that uses the `MockAuthorizationServerTestResource`.\n          \n          \n            \n            Below is an example of a test that uses the `MockAuthorizationServerTestResource`.", "url": "https://github.com/quarkusio/quarkus/pull/10396#discussion_r448436991", "createdAt": "2020-07-01T15:18:10Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/security-oauth2.adoc", "diffHunk": "@@ -342,3 +342,122 @@ $ ./target/security-oauth2-quickstart-runner\n 2019-03-28 14:31:37,315 INFO  [io.quarkus] (main) Quarkus 0.20.0 started in 0.006s. Listening on: http://[::]:8080\n 2019-03-28 14:31:37,316 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy, resteasy-jsonb, security, security-oauth2]\n ----\n+\n+== Integration testing\n+\n+If you don't want to use a real OAuth2 authorization server for your integration tests, you can use the\n+link:security-properties[Properties based security] extension for your test, or mock an authorization server using Wiremock.\n+\n+First of all, Wiremock needs to be added as a test dependency. For a Maven project that would happen like so:\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>com.github.tomakehurst</groupId>\n+    <artifactId>wiremock-jre8</artifactId>\n+    <scope>test</scope>\n+    <version>${wiremock.version}</version> // <1>\n+</dependency>\n+----\n+\n+<1> Use a proper Wiremock version. All available versions can be found link:https://search.maven.org/artifact/com.github.tomakehurst/wiremock-jre8[here].\n+\n+In Quarkus tests when some service needs to be started before the Quarkus tests are ran, we utilize the `@io.quarkus.test.common.QuarkusTestResource`\n+annotation to specify a `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which can start the service and supply configuration\n+values that Quarkus will use.\n+\n+[NOTE]\n+====\n+For more details about `@QuarkusTestResource` refer to  link:getting-started-testing#quarkus-test-resource[this part of the documentation].\n+====\n+\n+Let's create an implementation of `QuarkusTestResourceLifecycleManager` called `MockAuthorizationServerTestResource` like so:\n+\n+[source,java]\n+----\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import com.github.tomakehurst.wiremock.client.WireMock;\n+import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+public class MockAuthorizationServerTestResource implements QuarkusTestResourceLifecycleManager {  // <1>\n+\n+    private WireMockServer wireMockServer;\n+\n+    @Override\n+    public Map<String, String> start() {\n+        wireMockServer = new WireMockServer();\n+        wireMockServer.start(); // <2>\n+\n+        // define the mock for the introspect endpoint\n+        WireMock.stubFor(WireMock.post(\"/introspect\").willReturn(WireMock.aResponse() // <3>\n+                .withBody(\n+                        \"{\\\"active\\\":true,\\\"scope\\\":\\\"Echoer\\\",\\\"username\\\":null,\\\"iat\\\":1562315654,\\\"exp\\\":1562317454,\\\"expires_in\\\":1458,\\\"client_id\\\":\\\"my_client_id\\\"}\")));\n+\n+\n+        return Collections.singletonMap(\"quarkus.oauth2.introspection-url\", wireMockServer.baseUrl() + \"/introspect\"); // <4>\n+    }\n+\n+    @Override\n+    public void stop() {\n+        if (null != wireMockServer) {\n+            wireMockServer.stop();  // (5)\n+        }\n+    }\n+}\n+----\n+\n+<1> The `start` method is invoked by Quarkus before any test is run and returns a `Map` of configuration properties that apply during the test execution.\n+<2> Launch Wiremock.\n+<3> Configure Wiremock to stub the calls to `/introspect` by returning an OAuth2 introspect response. You need to customize this line to return what's needed for your application (at least the scope property as roles are derived from the scope).\n+<5> As the `start` method returns configuration that applies for tests, we set the `quarkus.oauth2.introspection-url` property that controls the URL of the introspect endpoint used by the OAuth2 extension.\n+<5> When all tests have finished, shutdown Wiremock.\n+\n+\n+Your test class needs to be annotated like with `@QuarkusTestResource(MockAuthorizationServerTestResource.class)` to use this `QuarkusTestResourceLifecycleManager`.\n+\n+Bellow is an example of a test that uses the `MockAuthorizationServerTestResource`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6956c3ccf55250858fdba6a765f3bbf75048fcc4"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ2MDkzMg==", "bodyText": "Fixed", "url": "https://github.com/quarkusio/quarkus/pull/10396#discussion_r448460932", "createdAt": "2020-07-01T15:55:24Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/security-oauth2.adoc", "diffHunk": "@@ -342,3 +342,122 @@ $ ./target/security-oauth2-quickstart-runner\n 2019-03-28 14:31:37,315 INFO  [io.quarkus] (main) Quarkus 0.20.0 started in 0.006s. Listening on: http://[::]:8080\n 2019-03-28 14:31:37,316 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy, resteasy-jsonb, security, security-oauth2]\n ----\n+\n+== Integration testing\n+\n+If you don't want to use a real OAuth2 authorization server for your integration tests, you can use the\n+link:security-properties[Properties based security] extension for your test, or mock an authorization server using Wiremock.\n+\n+First of all, Wiremock needs to be added as a test dependency. For a Maven project that would happen like so:\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>com.github.tomakehurst</groupId>\n+    <artifactId>wiremock-jre8</artifactId>\n+    <scope>test</scope>\n+    <version>${wiremock.version}</version> // <1>\n+</dependency>\n+----\n+\n+<1> Use a proper Wiremock version. All available versions can be found link:https://search.maven.org/artifact/com.github.tomakehurst/wiremock-jre8[here].\n+\n+In Quarkus tests when some service needs to be started before the Quarkus tests are ran, we utilize the `@io.quarkus.test.common.QuarkusTestResource`\n+annotation to specify a `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which can start the service and supply configuration\n+values that Quarkus will use.\n+\n+[NOTE]\n+====\n+For more details about `@QuarkusTestResource` refer to  link:getting-started-testing#quarkus-test-resource[this part of the documentation].\n+====\n+\n+Let's create an implementation of `QuarkusTestResourceLifecycleManager` called `MockAuthorizationServerTestResource` like so:\n+\n+[source,java]\n+----\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import com.github.tomakehurst.wiremock.client.WireMock;\n+import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+public class MockAuthorizationServerTestResource implements QuarkusTestResourceLifecycleManager {  // <1>\n+\n+    private WireMockServer wireMockServer;\n+\n+    @Override\n+    public Map<String, String> start() {\n+        wireMockServer = new WireMockServer();\n+        wireMockServer.start(); // <2>\n+\n+        // define the mock for the introspect endpoint\n+        WireMock.stubFor(WireMock.post(\"/introspect\").willReturn(WireMock.aResponse() // <3>\n+                .withBody(\n+                        \"{\\\"active\\\":true,\\\"scope\\\":\\\"Echoer\\\",\\\"username\\\":null,\\\"iat\\\":1562315654,\\\"exp\\\":1562317454,\\\"expires_in\\\":1458,\\\"client_id\\\":\\\"my_client_id\\\"}\")));\n+\n+\n+        return Collections.singletonMap(\"quarkus.oauth2.introspection-url\", wireMockServer.baseUrl() + \"/introspect\"); // <4>\n+    }\n+\n+    @Override\n+    public void stop() {\n+        if (null != wireMockServer) {\n+            wireMockServer.stop();  // (5)\n+        }\n+    }\n+}\n+----\n+\n+<1> The `start` method is invoked by Quarkus before any test is run and returns a `Map` of configuration properties that apply during the test execution.\n+<2> Launch Wiremock.\n+<3> Configure Wiremock to stub the calls to `/introspect` by returning an OAuth2 introspect response. You need to customize this line to return what's needed for your application (at least the scope property as roles are derived from the scope).\n+<5> As the `start` method returns configuration that applies for tests, we set the `quarkus.oauth2.introspection-url` property that controls the URL of the introspect endpoint used by the OAuth2 extension.\n+<5> When all tests have finished, shutdown Wiremock.\n+\n+\n+Your test class needs to be annotated like with `@QuarkusTestResource(MockAuthorizationServerTestResource.class)` to use this `QuarkusTestResourceLifecycleManager`.\n+\n+Bellow is an example of a test that uses the `MockAuthorizationServerTestResource`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQzNjk5MQ=="}, "originalCommit": {"oid": "6956c3ccf55250858fdba6a765f3bbf75048fcc4"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2521, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}