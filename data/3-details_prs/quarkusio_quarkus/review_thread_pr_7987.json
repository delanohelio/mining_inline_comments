{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMDc5MTE5", "number": 7987, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTo0Mjo1NlrODpkJyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNjoyMTowOVrODuOOGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTEwNTM5OnYy", "diffSide": "RIGHT", "path": "extensions/smallrye-opentracing/deployment/pom.xml", "isResolved": true, "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTo0Mjo1NlrOF40fqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMzo1Nzo1NlrOF7cTNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyNDY0OA==", "bodyText": "So this is what I'd like to ask about. I'm not exactly sure where to add this dependency so that it also works in user applications (it obviously works in the unit test, which is in the same module :-) ).\nThe intent is that this module is available when both quarkus-smallrye-fault-tolerance and quarkus-smallrye-opentracing are present.", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r395124648", "createdAt": "2020-03-19T15:42:56Z", "author": {"login": "Ladicek"}, "path": "extensions/smallrye-opentracing/deployment/pom.xml", "diffHunk": "@@ -30,6 +30,20 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-smallrye-opentracing</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.smallrye</groupId>\n+            <artifactId>smallrye-fault-tolerance-tracing-propagation</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c599c08e48692926f88d072bce86241035df48cd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEzMjc5NQ==", "bodyText": "/cc @aloubyansky @stuartwdouglas\nI don't think we have anything for that. Not sure how we could solve this.", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r397132795", "createdAt": "2020-03-24T13:00:12Z", "author": {"login": "gsmet"}, "path": "extensions/smallrye-opentracing/deployment/pom.xml", "diffHunk": "@@ -30,6 +30,20 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-smallrye-opentracing</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.smallrye</groupId>\n+            <artifactId>smallrye-fault-tolerance-tracing-propagation</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyNDY0OA=="}, "originalCommit": {"oid": "c599c08e48692926f88d072bce86241035df48cd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2Nzg4Ng==", "bodyText": "Some extensions already bring other extensions transitively (e.g. I think Fault Tolerance brings Context Propagation). We can do the same here, but not sure from which side :-)", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r397167886", "createdAt": "2020-03-24T13:52:18Z", "author": {"login": "Ladicek"}, "path": "extensions/smallrye-opentracing/deployment/pom.xml", "diffHunk": "@@ -30,6 +30,20 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-smallrye-opentracing</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.smallrye</groupId>\n+            <artifactId>smallrye-fault-tolerance-tracing-propagation</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyNDY0OA=="}, "originalCommit": {"oid": "c599c08e48692926f88d072bce86241035df48cd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2ODYzMw==", "bodyText": "@Ladicek by work in user applications you mean as a runtime dependency?\nTo this day, runtime dependencies remain in user's hands, expressed in traditional maven/gradle way. And e.g. dependency:tree (and the gradle equivalents) is still showing the actual runtime dependency tree. From this perspective, it's not like we don't have anything for that, it's the driving build system.\nWe could definitely come up with an enhancement to be able to stick other dependencies into the runtime classpath, it will break what's mentioned above though.\nI think today, you'd have to either add it as a dependency of the runtime artifact or ask users to add it explicitly as an application dependency.", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r397168633", "createdAt": "2020-03-24T13:53:18Z", "author": {"login": "aloubyansky"}, "path": "extensions/smallrye-opentracing/deployment/pom.xml", "diffHunk": "@@ -30,6 +30,20 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-smallrye-opentracing</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.smallrye</groupId>\n+            <artifactId>smallrye-fault-tolerance-tracing-propagation</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyNDY0OA=="}, "originalCommit": {"oid": "c599c08e48692926f88d072bce86241035df48cd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE3MzI0OQ==", "bodyText": "Some extensions already bring other extensions transitively (e.g. I think Fault Tolerance brings Context Propagation). We can do the same here, but not sure from which side :-)\n\nThe least popular one :)", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r397173249", "createdAt": "2020-03-24T13:59:22Z", "author": {"login": "aloubyansky"}, "path": "extensions/smallrye-opentracing/deployment/pom.xml", "diffHunk": "@@ -30,6 +30,20 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-smallrye-opentracing</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.smallrye</groupId>\n+            <artifactId>smallrye-fault-tolerance-tracing-propagation</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyNDY0OA=="}, "originalCommit": {"oid": "c599c08e48692926f88d072bce86241035df48cd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwOTI2Ng==", "bodyText": "Hi @michalszynkiewicz @pavolloffay @loicmathieu, do you have an opinion here? Would it be better for Fault Tolerance to automatically bring OpenTracing, or the other way around?\nI'm personally thinking it should probably be OpenTracing who should automatically bring Fault Tolerance, but I'd be curious to hear what you think.", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r397209266", "createdAt": "2020-03-24T14:46:17Z", "author": {"login": "Ladicek"}, "path": "extensions/smallrye-opentracing/deployment/pom.xml", "diffHunk": "@@ -30,6 +30,20 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-smallrye-opentracing</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.smallrye</groupId>\n+            <artifactId>smallrye-fault-tolerance-tracing-propagation</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyNDY0OA=="}, "originalCommit": {"oid": "c599c08e48692926f88d072bce86241035df48cd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIyMzkzMw==", "bodyText": "@Ladicek isn't a mistake (my mistake :D) that smallrye-fault-tolerance-tracing-propagation depends on smallrye-fault-tolerance?\nIf we could drop this dependency, we don't need to bring the whole fault tolerance with opentracing, right?", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r397223933", "createdAt": "2020-03-24T15:04:27Z", "author": {"login": "michalszynkiewicz"}, "path": "extensions/smallrye-opentracing/deployment/pom.xml", "diffHunk": "@@ -30,6 +30,20 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-smallrye-opentracing</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.smallrye</groupId>\n+            <artifactId>smallrye-fault-tolerance-tracing-propagation</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyNDY0OA=="}, "originalCommit": {"oid": "c599c08e48692926f88d072bce86241035df48cd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0MjQ0Ng==", "bodyText": "Yea, correct. In fact, just moving the dependency on smallrye-fault-tolerance-tracing-propagation to the runtime module should do, no? It brings some unnecessary dependencies on SmallRye FT, but those should basically be ignored, because the Quarkus extension isn't present. Or is that a complete misunderstanding?", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r397242446", "createdAt": "2020-03-24T15:28:04Z", "author": {"login": "Ladicek"}, "path": "extensions/smallrye-opentracing/deployment/pom.xml", "diffHunk": "@@ -30,6 +30,20 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-smallrye-opentracing</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.smallrye</groupId>\n+            <artifactId>smallrye-fault-tolerance-tracing-propagation</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyNDY0OA=="}, "originalCommit": {"oid": "c599c08e48692926f88d072bce86241035df48cd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzOTUzNA==", "bodyText": "This is actually a relatively common use case, so I think we should add something to handle it in our resolution/classloading infrasturucture.\nThere are lots of cases like this where you only want an integration module if two different dependencies are present, I am not 100% sure what the best way to express/handle this would be though.", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r397539534", "createdAt": "2020-03-25T00:20:04Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/smallrye-opentracing/deployment/pom.xml", "diffHunk": "@@ -30,6 +30,20 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-smallrye-opentracing</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.smallrye</groupId>\n+            <artifactId>smallrye-fault-tolerance-tracing-propagation</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyNDY0OA=="}, "originalCommit": {"oid": "c599c08e48692926f88d072bce86241035df48cd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY4NjU0MA==", "bodyText": "It brings some unnecessary dependencies on SmallRye FT, but those should basically be ignored, because the Quarkus extension isn't present.\n\nIn JVM mode the JAR will be included inside the final artifact by Maven. We do nothing about it. I'm not sure we can prune some dependencies out of the build easily.\nYou should use one of these two Maven tricks to avoid pulling all dependencies :\n\nAdd your dependency as optional: it's what we do for health and metrics, not sure it can be used here as you want to include this one if both are present ...\nExclude all transitive dependencies that will be included if the other libary (fault tolerance) is included.\n\nThen use the Capabilities facility to check if both FT and context-propagation are present and add the functionality inside the Quarkus build. But apparently the fonctionality is automatically added thanks to the presence of the dependency so this can be tricky.\nI think the best is what @michalszynkiewicz suggest: make smallrye-fault-tolerance-tracing-propagation not depending on smallrye-fault-tolerance if possible.", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r397686540", "createdAt": "2020-03-25T08:43:58Z", "author": {"login": "loicmathieu"}, "path": "extensions/smallrye-opentracing/deployment/pom.xml", "diffHunk": "@@ -30,6 +30,20 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-smallrye-opentracing</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.smallrye</groupId>\n+            <artifactId>smallrye-fault-tolerance-tracing-propagation</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyNDY0OA=="}, "originalCommit": {"oid": "c599c08e48692926f88d072bce86241035df48cd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyODgxNw==", "bodyText": "Oh, dependency exclusions should work. Basically, quarkus-smallrye-opentracing would depend on smallrye-fault-tolerance-tracing-propagation (but that dependency would exclude all transitive dependencies). It only contains 1 class and a ServiceLoader file for MP Context Propagation. Hmm, I wonder what would happen if this would be present, ConProp would be present, but FT would be missing... Well, since smallrye-fault-tolerance-tracing-propagation doesn't really depend on anything FT, we would probably do just the right thing -- have tracing context propagated. I need to test this.\n(Rant: OpenTracing needs to integrate with ConProp, then we could remove this from FT entirely. We need ConProp in MP Platform!)", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r397728817", "createdAt": "2020-03-25T09:54:25Z", "author": {"login": "Ladicek"}, "path": "extensions/smallrye-opentracing/deployment/pom.xml", "diffHunk": "@@ -30,6 +30,20 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-smallrye-opentracing</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.smallrye</groupId>\n+            <artifactId>smallrye-fault-tolerance-tracing-propagation</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyNDY0OA=="}, "originalCommit": {"oid": "c599c08e48692926f88d072bce86241035df48cd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg3MTUzMg==", "bodyText": "OK, that works, I've updated the PR.", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r397871532", "createdAt": "2020-03-25T13:54:50Z", "author": {"login": "Ladicek"}, "path": "extensions/smallrye-opentracing/deployment/pom.xml", "diffHunk": "@@ -30,6 +30,20 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-smallrye-opentracing</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.smallrye</groupId>\n+            <artifactId>smallrye-fault-tolerance-tracing-propagation</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyNDY0OA=="}, "originalCommit": {"oid": "c599c08e48692926f88d072bce86241035df48cd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg3Mzk3Mg==", "bodyText": "I mean: I have made smallrye-fault-tolerance-tracing-propagation a dependency of quarkus-smallrye-opentracing (the \"runtime\" module, not \"deployment\"), but all transitive dependencies are excluded. This works both when Fault Tolerance is present and missing. This is because smallrye-fault-tolerance-tracing-propagation in fact integrates MP OpenTracing with MP Context Propagation, and it only lives in SRye Fault Tolerance by accident.\nI've tested that in an external test suite; adding tests to Quarkus would require adding 1 or 2 Maven modules, which is something I'd like to avoid.\nI've also filed an MP OpenTracing issue about synchronous behavior of @Traced here: eclipse/microprofile-opentracing#189 That's something we should figure out somehow, IMHO.", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r397873972", "createdAt": "2020-03-25T13:57:56Z", "author": {"login": "Ladicek"}, "path": "extensions/smallrye-opentracing/deployment/pom.xml", "diffHunk": "@@ -30,6 +30,20 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-smallrye-opentracing</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.smallrye</groupId>\n+            <artifactId>smallrye-fault-tolerance-tracing-propagation</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyNDY0OA=="}, "originalCommit": {"oid": "c599c08e48692926f88d072bce86241035df48cd"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Nzk0MDczOnYy", "diffSide": "RIGHT", "path": "extensions/jaeger/runtime/src/main/java/io/quarkus/jaeger/runtime/QuarkusJaegerMetricsFactory.java", "isResolved": false, "comments": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNjoyMToxMFrOGAGevg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMToxNTo1NlrOGDUXlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1OTM1OA==", "bodyText": "After #7018 we automatically drop and re-create all metric registries during shutdown before a hot reload, so it should not happen anymore that the gauge is still registered. Are you sure we still need this? That would mean the registry dropping is wrong?!", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r402759358", "createdAt": "2020-04-03T06:21:10Z", "author": {"login": "jmartisk"}, "path": "extensions/jaeger/runtime/src/main/java/io/quarkus/jaeger/runtime/QuarkusJaegerMetricsFactory.java", "diffHunk": "@@ -45,12 +46,17 @@ public void durationMicros(long time) {\n \n     @Override\n     public Gauge createGauge(final String name, final Map<String, String> tags) {\n-        JaegerGauge gauge = registry.register(meta(name, MetricType.GAUGE), new JaegerGauge(), toTagArray(tags));\n+        Tag[] tagArray = toTagArray(tags);\n+        JaegerGauge gauge = (JaegerGauge) registry.getGauges().get(new MetricID(name, tagArray));\n+        if (gauge == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72358326329c6b77a7f344bc65bd8ff3defda7f3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3NDUyOQ==", "bodyText": "I've seen an exception during hot reload on this. I'll try again.", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r402774529", "createdAt": "2020-04-03T07:02:32Z", "author": {"login": "Ladicek"}, "path": "extensions/jaeger/runtime/src/main/java/io/quarkus/jaeger/runtime/QuarkusJaegerMetricsFactory.java", "diffHunk": "@@ -45,12 +46,17 @@ public void durationMicros(long time) {\n \n     @Override\n     public Gauge createGauge(final String name, final Map<String, String> tags) {\n-        JaegerGauge gauge = registry.register(meta(name, MetricType.GAUGE), new JaegerGauge(), toTagArray(tags));\n+        Tag[] tagArray = toTagArray(tags);\n+        JaegerGauge gauge = (JaegerGauge) registry.getGauges().get(new MetricID(name, tagArray));\n+        if (gauge == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1OTM1OA=="}, "originalCommit": {"oid": "72358326329c6b77a7f344bc65bd8ff3defda7f3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzMTA4MQ==", "bodyText": "No, this is still required. When I revert this change, I get this on hot reload:\norg.jboss.resteasy.spi.UnhandledException: java.lang.RuntimeException: No reflection exceptions should be thrown unless there is a fundamental error in your code set up.\n        at org.jboss.resteasy.core.ExceptionHandler.handleException(ExceptionHandler.java:381)\n        at org.jboss.resteasy.core.SynchronousDispatcher.writeException(SynchronousDispatcher.java:216)\n        at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:515)\n        at org.jboss.resteasy.core.SynchronousDispatcher.lambda$invoke$4(SynchronousDispatcher.java:259)\n        at org.jboss.resteasy.core.SynchronousDispatcher.lambda$preprocess$0(SynchronousDispatcher.java:160)\n        at org.jboss.resteasy.core.interception.jaxrs.PreMatchContainerRequestContext.filter(PreMatchContainerRequestContext.java:362)\n        at org.jboss.resteasy.core.SynchronousDispatcher.preprocess(SynchronousDispatcher.java:163)\n        at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:245)\n        at io.quarkus.resteasy.runtime.standalone.RequestDispatcher.service(RequestDispatcher.java:73)\n        at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler.dispatch(VertxRequestHandler.java:122)\n        at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler.access$000(VertxRequestHandler.java:36)\n        at io.quarkus.resteasy.runtime.standalone.VertxRequestHandler$1.run(VertxRequestHandler.java:87)\n        at io.quarkus.runtime.CleanableExecutor$CleaningRunnable.run(CleanableExecutor.java:231)\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n        at java.util.concurrent.FutureTask.run(FutureTask.java:266)\n        at org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35)\n        at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:2027)\n        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1551)\n        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1442)\n        at org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:29)\n        at org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:29)\n        at java.lang.Thread.run(Thread.java:748)\n        at org.jboss.threads.JBossThread.run(JBossThread.java:479)\nCaused by: java.lang.RuntimeException: No reflection exceptions should be thrown unless there is a fundamental error in your code set up.\n        at io.jaegertracing.internal.metrics.Metrics.createMetrics(Metrics.java:76)\n        at io.jaegertracing.internal.metrics.Metrics.<init>(Metrics.java:32)\n        at io.jaegertracing.internal.metrics.Metrics.<init>(Metrics.java:28)\n        at io.jaegertracing.Configuration.getTracerBuilder(Configuration.java:221)\n        at io.quarkus.jaeger.runtime.QuarkusJaegerTracer.tracer(QuarkusJaegerTracer.java:40)\n        at io.quarkus.jaeger.runtime.QuarkusJaegerTracer.buildSpan(QuarkusJaegerTracer.java:59)\n        at io.opentracing.util.GlobalTracer.buildSpan(GlobalTracer.java:133)\n        at io.quarkus.smallrye.opentracing.runtime.TracerProducer_ProducerMethod_tracer_96dadb3d6afa0cccadfe742c3e06ad433737c844_ClientProxy.buildSpan(TracerProducer_ProducerMethod_tracer_96dadb3d6afa0cccadfe742c3e06ad433737c844_ClientProxy.zig:238)\n        at io.opentracing.contrib.jaxrs2.server.ServerTracingFilter.filter(ServerTracingFilter.java:69)\n        at org.jboss.resteasy.core.interception.jaxrs.PreMatchContainerRequestContext.filter(PreMatchContainerRequestContext.java:310)\n        at org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTarget(ResourceMethodInvoker.java:439)\n        at org.jboss.resteasy.core.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:400)\n        at org.jboss.resteasy.core.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:374)\n        at org.jboss.resteasy.core.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:67)\n        at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:488)\n        ... 20 more\nCaused by: java.lang.IllegalArgumentException: A metric with metricID MetricID{name='jaeger_tracer_reporter_queue_length', tags=[]} already exists\n        at io.smallrye.metrics.MetricsRegistryImpl.register(MetricsRegistryImpl.java:131)\n        at io.quarkus.jaeger.runtime.QuarkusJaegerMetricsFactory.createGauge(QuarkusJaegerMetricsFactory.java:48)\n        at io.jaegertracing.internal.metrics.Metrics.createMetrics(Metrics.java:66)\n        ... 34 more", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r403131081", "createdAt": "2020-04-03T16:33:02Z", "author": {"login": "Ladicek"}, "path": "extensions/jaeger/runtime/src/main/java/io/quarkus/jaeger/runtime/QuarkusJaegerMetricsFactory.java", "diffHunk": "@@ -45,12 +46,17 @@ public void durationMicros(long time) {\n \n     @Override\n     public Gauge createGauge(final String name, final Map<String, String> tags) {\n-        JaegerGauge gauge = registry.register(meta(name, MetricType.GAUGE), new JaegerGauge(), toTagArray(tags));\n+        Tag[] tagArray = toTagArray(tags);\n+        JaegerGauge gauge = (JaegerGauge) registry.getGauges().get(new MetricID(name, tagArray));\n+        if (gauge == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1OTM1OA=="}, "originalCommit": {"oid": "72358326329c6b77a7f344bc65bd8ff3defda7f3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyNzg0MQ==", "bodyText": "@jmartisk Any idea? Thanks! :-)", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r405327841", "createdAt": "2020-04-08T07:54:45Z", "author": {"login": "Ladicek"}, "path": "extensions/jaeger/runtime/src/main/java/io/quarkus/jaeger/runtime/QuarkusJaegerMetricsFactory.java", "diffHunk": "@@ -45,12 +46,17 @@ public void durationMicros(long time) {\n \n     @Override\n     public Gauge createGauge(final String name, final Map<String, String> tags) {\n-        JaegerGauge gauge = registry.register(meta(name, MetricType.GAUGE), new JaegerGauge(), toTagArray(tags));\n+        Tag[] tagArray = toTagArray(tags);\n+        JaegerGauge gauge = (JaegerGauge) registry.getGauges().get(new MetricID(name, tagArray));\n+        if (gauge == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1OTM1OA=="}, "originalCommit": {"oid": "72358326329c6b77a7f344bc65bd8ff3defda7f3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM0MDM3MA==", "bodyText": "That's fishy, I'll try to reproduce this and let you know", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r405340370", "createdAt": "2020-04-08T08:16:01Z", "author": {"login": "jmartisk"}, "path": "extensions/jaeger/runtime/src/main/java/io/quarkus/jaeger/runtime/QuarkusJaegerMetricsFactory.java", "diffHunk": "@@ -45,12 +46,17 @@ public void durationMicros(long time) {\n \n     @Override\n     public Gauge createGauge(final String name, final Map<String, String> tags) {\n-        JaegerGauge gauge = registry.register(meta(name, MetricType.GAUGE), new JaegerGauge(), toTagArray(tags));\n+        Tag[] tagArray = toTagArray(tags);\n+        JaegerGauge gauge = (JaegerGauge) registry.getGauges().get(new MetricID(name, tagArray));\n+        if (gauge == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1OTM1OA=="}, "originalCommit": {"oid": "72358326329c6b77a7f344bc65bd8ff3defda7f3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MzQwOQ==", "bodyText": "@Ladicek I can't reproduce that - I created a simple app which uses tracing and metrics, called one traced method, triggered a reload, called that traced method again, the jaeger_tracer_reporter_queue_length gauge was re-registered correctly and no errors occurred.\nI used Quarkus built from this PR branch, but with this one change reverted. Any other specific thing that I should try? :)", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r405353409", "createdAt": "2020-04-08T08:37:27Z", "author": {"login": "jmartisk"}, "path": "extensions/jaeger/runtime/src/main/java/io/quarkus/jaeger/runtime/QuarkusJaegerMetricsFactory.java", "diffHunk": "@@ -45,12 +46,17 @@ public void durationMicros(long time) {\n \n     @Override\n     public Gauge createGauge(final String name, final Map<String, String> tags) {\n-        JaegerGauge gauge = registry.register(meta(name, MetricType.GAUGE), new JaegerGauge(), toTagArray(tags));\n+        Tag[] tagArray = toTagArray(tags);\n+        JaegerGauge gauge = (JaegerGauge) registry.getGauges().get(new MetricID(name, tagArray));\n+        if (gauge == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1OTM1OA=="}, "originalCommit": {"oid": "72358326329c6b77a7f344bc65bd8ff3defda7f3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNjU5Nw==", "bodyText": "Oh well. I've just verified this still occurs, even if I rebase this PR on top of current master. I'll put together a detailed reproducer.", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r406026597", "createdAt": "2020-04-09T08:04:15Z", "author": {"login": "Ladicek"}, "path": "extensions/jaeger/runtime/src/main/java/io/quarkus/jaeger/runtime/QuarkusJaegerMetricsFactory.java", "diffHunk": "@@ -45,12 +46,17 @@ public void durationMicros(long time) {\n \n     @Override\n     public Gauge createGauge(final String name, final Map<String, String> tags) {\n-        JaegerGauge gauge = registry.register(meta(name, MetricType.GAUGE), new JaegerGauge(), toTagArray(tags));\n+        Tag[] tagArray = toTagArray(tags);\n+        JaegerGauge gauge = (JaegerGauge) registry.getGauges().get(new MetricID(name, tagArray));\n+        if (gauge == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1OTM1OA=="}, "originalCommit": {"oid": "72358326329c6b77a7f344bc65bd8ff3defda7f3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA1MzE1NA==", "bodyText": "@jmartisk Here's a reproducer with detailed instructions: https://github.com/Ladicek/quarkus-jaeger-metrics-hot-reload-issue", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r406053154", "createdAt": "2020-04-09T08:49:30Z", "author": {"login": "Ladicek"}, "path": "extensions/jaeger/runtime/src/main/java/io/quarkus/jaeger/runtime/QuarkusJaegerMetricsFactory.java", "diffHunk": "@@ -45,12 +46,17 @@ public void durationMicros(long time) {\n \n     @Override\n     public Gauge createGauge(final String name, final Map<String, String> tags) {\n-        JaegerGauge gauge = registry.register(meta(name, MetricType.GAUGE), new JaegerGauge(), toTagArray(tags));\n+        Tag[] tagArray = toTagArray(tags);\n+        JaegerGauge gauge = (JaegerGauge) registry.getGauges().get(new MetricID(name, tagArray));\n+        if (gauge == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1OTM1OA=="}, "originalCommit": {"oid": "72358326329c6b77a7f344bc65bd8ff3defda7f3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA2NjUxMA==", "bodyText": "@Ladicek  Ha! Thanks for the reproducer. I think I understand why this happens now and why it didn't happen with my reproducer: your application does not have a dependency on the quarkus-smallrye-metrics module, so the metrics processor doesn't run and doesn't register the task to clean up registries during reload.\nBut what now? Is it correct that Jaeger registers metrics even if the application does not declare a dependency on quarkus-smallrye-metrics? In other extensions, we generally try to make their dependency on metrics optional, so metrics are activated only if the user explicitly adds the  quarkus-smallrye-metrics dependency.", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r406066510", "createdAt": "2020-04-09T09:12:47Z", "author": {"login": "jmartisk"}, "path": "extensions/jaeger/runtime/src/main/java/io/quarkus/jaeger/runtime/QuarkusJaegerMetricsFactory.java", "diffHunk": "@@ -45,12 +46,17 @@ public void durationMicros(long time) {\n \n     @Override\n     public Gauge createGauge(final String name, final Map<String, String> tags) {\n-        JaegerGauge gauge = registry.register(meta(name, MetricType.GAUGE), new JaegerGauge(), toTagArray(tags));\n+        Tag[] tagArray = toTagArray(tags);\n+        JaegerGauge gauge = (JaegerGauge) registry.getGauges().get(new MetricID(name, tagArray));\n+        if (gauge == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1OTM1OA=="}, "originalCommit": {"oid": "72358326329c6b77a7f344bc65bd8ff3defda7f3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA2ODQ4Mw==", "bodyText": "And if we can't make changes to the Jaeger extension such that metrics become optional (and we can run without them completely), then I suppose we should make the Jaeger extension depend on quarkus-smallrye-metrics-deployment in order to make sure that the metrics processor is always applied and can do proper cleanup", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r406068483", "createdAt": "2020-04-09T09:16:11Z", "author": {"login": "jmartisk"}, "path": "extensions/jaeger/runtime/src/main/java/io/quarkus/jaeger/runtime/QuarkusJaegerMetricsFactory.java", "diffHunk": "@@ -45,12 +46,17 @@ public void durationMicros(long time) {\n \n     @Override\n     public Gauge createGauge(final String name, final Map<String, String> tags) {\n-        JaegerGauge gauge = registry.register(meta(name, MetricType.GAUGE), new JaegerGauge(), toTagArray(tags));\n+        Tag[] tagArray = toTagArray(tags);\n+        JaegerGauge gauge = (JaegerGauge) registry.getGauges().get(new MetricID(name, tagArray));\n+        if (gauge == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1OTM1OA=="}, "originalCommit": {"oid": "72358326329c6b77a7f344bc65bd8ff3defda7f3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA3NTEyMw==", "bodyText": "It also happens that if the Metrics extension is not present (as in your reproducer), then metrics are not being exposed on the /metrics endpoint, so they are quite useless.", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r406075123", "createdAt": "2020-04-09T09:27:16Z", "author": {"login": "jmartisk"}, "path": "extensions/jaeger/runtime/src/main/java/io/quarkus/jaeger/runtime/QuarkusJaegerMetricsFactory.java", "diffHunk": "@@ -45,12 +46,17 @@ public void durationMicros(long time) {\n \n     @Override\n     public Gauge createGauge(final String name, final Map<String, String> tags) {\n-        JaegerGauge gauge = registry.register(meta(name, MetricType.GAUGE), new JaegerGauge(), toTagArray(tags));\n+        Tag[] tagArray = toTagArray(tags);\n+        JaegerGauge gauge = (JaegerGauge) registry.getGauges().get(new MetricID(name, tagArray));\n+        if (gauge == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1OTM1OA=="}, "originalCommit": {"oid": "72358326329c6b77a7f344bc65bd8ff3defda7f3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA4NzkwMg==", "bodyText": "Now that is ... interesting. quarkus-jaeger depends on smallrye-metrics and microprofile-metrics-api, but not on quarkus-smallrye-metrics. That is ... wrong, for sure.", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r406087902", "createdAt": "2020-04-09T09:49:22Z", "author": {"login": "Ladicek"}, "path": "extensions/jaeger/runtime/src/main/java/io/quarkus/jaeger/runtime/QuarkusJaegerMetricsFactory.java", "diffHunk": "@@ -45,12 +46,17 @@ public void durationMicros(long time) {\n \n     @Override\n     public Gauge createGauge(final String name, final Map<String, String> tags) {\n-        JaegerGauge gauge = registry.register(meta(name, MetricType.GAUGE), new JaegerGauge(), toTagArray(tags));\n+        Tag[] tagArray = toTagArray(tags);\n+        JaegerGauge gauge = (JaegerGauge) registry.getGauges().get(new MetricID(name, tagArray));\n+        if (gauge == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1OTM1OA=="}, "originalCommit": {"oid": "72358326329c6b77a7f344bc65bd8ff3defda7f3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA4ODM2MA==", "bodyText": "Or perhaps that was done to make metrics semi-optional...", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r406088360", "createdAt": "2020-04-09T09:50:12Z", "author": {"login": "Ladicek"}, "path": "extensions/jaeger/runtime/src/main/java/io/quarkus/jaeger/runtime/QuarkusJaegerMetricsFactory.java", "diffHunk": "@@ -45,12 +46,17 @@ public void durationMicros(long time) {\n \n     @Override\n     public Gauge createGauge(final String name, final Map<String, String> tags) {\n-        JaegerGauge gauge = registry.register(meta(name, MetricType.GAUGE), new JaegerGauge(), toTagArray(tags));\n+        Tag[] tagArray = toTagArray(tags);\n+        JaegerGauge gauge = (JaegerGauge) registry.getGauges().get(new MetricID(name, tagArray));\n+        if (gauge == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1OTM1OA=="}, "originalCommit": {"oid": "72358326329c6b77a7f344bc65bd8ff3defda7f3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA5MjcyMQ==", "bodyText": "@jmartisk What's the way to detect if metrics are enabled? I guess capabilities.isCapabilityPresent(Capabilities.METRICS)? If so, then we could decide on that and add either NoopMetricsFactory or QuarkusJaegerMetricsFactory. And probably make the dependencies on smallrye-metrics and microprofile-metrics-api <scope>provided</scope>, because they are only present to be able to compile QuarkusJaegerMetricsFactory. Does that sound about right? If so, I can check if that works and submit a PR.", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r406092721", "createdAt": "2020-04-09T09:57:37Z", "author": {"login": "Ladicek"}, "path": "extensions/jaeger/runtime/src/main/java/io/quarkus/jaeger/runtime/QuarkusJaegerMetricsFactory.java", "diffHunk": "@@ -45,12 +46,17 @@ public void durationMicros(long time) {\n \n     @Override\n     public Gauge createGauge(final String name, final Map<String, String> tags) {\n-        JaegerGauge gauge = registry.register(meta(name, MetricType.GAUGE), new JaegerGauge(), toTagArray(tags));\n+        Tag[] tagArray = toTagArray(tags);\n+        JaegerGauge gauge = (JaegerGauge) registry.getGauges().get(new MetricID(name, tagArray));\n+        if (gauge == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1OTM1OA=="}, "originalCommit": {"oid": "72358326329c6b77a7f344bc65bd8ff3defda7f3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjExMjM4Mg==", "bodyText": "@Ladicek yes, checking for the capability is ok.\nI think the correct way is have an optional dependency on quarkus-smallrye-metrics, like Agroal does it:\nhttps://github.com/quarkusio/quarkus/blob/master/extensions/agroal/runtime/pom.xml#L44", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r406112382", "createdAt": "2020-04-09T10:33:40Z", "author": {"login": "jmartisk"}, "path": "extensions/jaeger/runtime/src/main/java/io/quarkus/jaeger/runtime/QuarkusJaegerMetricsFactory.java", "diffHunk": "@@ -45,12 +46,17 @@ public void durationMicros(long time) {\n \n     @Override\n     public Gauge createGauge(final String name, final Map<String, String> tags) {\n-        JaegerGauge gauge = registry.register(meta(name, MetricType.GAUGE), new JaegerGauge(), toTagArray(tags));\n+        Tag[] tagArray = toTagArray(tags);\n+        JaegerGauge gauge = (JaegerGauge) registry.getGauges().get(new MetricID(name, tagArray));\n+        if (gauge == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1OTM1OA=="}, "originalCommit": {"oid": "72358326329c6b77a7f344bc65bd8ff3defda7f3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjExNTIyNw==", "bodyText": "And what would be absolutely optimal and consistent with most other extensions, would be that the metrics from the extension are disabled by default (even if the metrics dependency is present) and have to be enabled by a config property quarkus.jaeger.metrics.enabled. See https://quarkus.io/guides/writing-extensions#extension-metrics\nEven more optimal would be using the Metrics SPI (mentioned in the linked document) to register metrics eagerly, but if you feel that's too much for now, I guess we can leave that for later :)", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r406115227", "createdAt": "2020-04-09T10:39:18Z", "author": {"login": "jmartisk"}, "path": "extensions/jaeger/runtime/src/main/java/io/quarkus/jaeger/runtime/QuarkusJaegerMetricsFactory.java", "diffHunk": "@@ -45,12 +46,17 @@ public void durationMicros(long time) {\n \n     @Override\n     public Gauge createGauge(final String name, final Map<String, String> tags) {\n-        JaegerGauge gauge = registry.register(meta(name, MetricType.GAUGE), new JaegerGauge(), toTagArray(tags));\n+        Tag[] tagArray = toTagArray(tags);\n+        JaegerGauge gauge = (JaegerGauge) registry.getGauges().get(new MetricID(name, tagArray));\n+        if (gauge == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1OTM1OA=="}, "originalCommit": {"oid": "72358326329c6b77a7f344bc65bd8ff3defda7f3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjExNzY5Mw==", "bodyText": "Seriously? \ud83d\ude2e \ud83d\ude01", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r406117693", "createdAt": "2020-04-09T10:44:11Z", "author": {"login": "Ladicek"}, "path": "extensions/jaeger/runtime/src/main/java/io/quarkus/jaeger/runtime/QuarkusJaegerMetricsFactory.java", "diffHunk": "@@ -45,12 +46,17 @@ public void durationMicros(long time) {\n \n     @Override\n     public Gauge createGauge(final String name, final Map<String, String> tags) {\n-        JaegerGauge gauge = registry.register(meta(name, MetricType.GAUGE), new JaegerGauge(), toTagArray(tags));\n+        Tag[] tagArray = toTagArray(tags);\n+        JaegerGauge gauge = (JaegerGauge) registry.getGauges().get(new MetricID(name, tagArray));\n+        if (gauge == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1OTM1OA=="}, "originalCommit": {"oid": "72358326329c6b77a7f344bc65bd8ff3defda7f3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEyNDAzMw==", "bodyText": "I mean, I would probably be able to do all that, but that would make this PR pretty large. I just wanted to fix the trace context propagation, found a dev mode issue, included a fix which was tiny, and now this :-/\nHere's my proposal: I already have finished the conditional inclusion/exclusion of metrics based on the capability. I have also changed quarkus-jaeger to no longer depend on smallrye-metrics and microprofile-metrics-api; instead, it uses an optional dependency on quarkus-smallrye-metrics as you suggest. It seems to work (didn't try native \ud83d\ude01). What's is not done is addressing your 2nd comment, the one starting with \"And what would be absolutely optimal\" -- I'd leave that for future. Agree?", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r406124033", "createdAt": "2020-04-09T10:57:30Z", "author": {"login": "Ladicek"}, "path": "extensions/jaeger/runtime/src/main/java/io/quarkus/jaeger/runtime/QuarkusJaegerMetricsFactory.java", "diffHunk": "@@ -45,12 +46,17 @@ public void durationMicros(long time) {\n \n     @Override\n     public Gauge createGauge(final String name, final Map<String, String> tags) {\n-        JaegerGauge gauge = registry.register(meta(name, MetricType.GAUGE), new JaegerGauge(), toTagArray(tags));\n+        Tag[] tagArray = toTagArray(tags);\n+        JaegerGauge gauge = (JaegerGauge) registry.getGauges().get(new MetricID(name, tagArray));\n+        if (gauge == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1OTM1OA=="}, "originalCommit": {"oid": "72358326329c6b77a7f344bc65bd8ff3defda7f3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEzMDA2MQ==", "bodyText": "Sure, that's clearly not the goal of this PR.\nI created #8502 for that", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r406130061", "createdAt": "2020-04-09T11:10:28Z", "author": {"login": "jmartisk"}, "path": "extensions/jaeger/runtime/src/main/java/io/quarkus/jaeger/runtime/QuarkusJaegerMetricsFactory.java", "diffHunk": "@@ -45,12 +46,17 @@ public void durationMicros(long time) {\n \n     @Override\n     public Gauge createGauge(final String name, final Map<String, String> tags) {\n-        JaegerGauge gauge = registry.register(meta(name, MetricType.GAUGE), new JaegerGauge(), toTagArray(tags));\n+        Tag[] tagArray = toTagArray(tags);\n+        JaegerGauge gauge = (JaegerGauge) registry.getGauges().get(new MetricID(name, tagArray));\n+        if (gauge == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1OTM1OA=="}, "originalCommit": {"oid": "72358326329c6b77a7f344bc65bd8ff3defda7f3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEzMDY4OA==", "bodyText": "Nice, thanks! I'll update this PR in a few minutes.", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r406130688", "createdAt": "2020-04-09T11:11:51Z", "author": {"login": "Ladicek"}, "path": "extensions/jaeger/runtime/src/main/java/io/quarkus/jaeger/runtime/QuarkusJaegerMetricsFactory.java", "diffHunk": "@@ -45,12 +46,17 @@ public void durationMicros(long time) {\n \n     @Override\n     public Gauge createGauge(final String name, final Map<String, String> tags) {\n-        JaegerGauge gauge = registry.register(meta(name, MetricType.GAUGE), new JaegerGauge(), toTagArray(tags));\n+        Tag[] tagArray = toTagArray(tags);\n+        JaegerGauge gauge = (JaegerGauge) registry.getGauges().get(new MetricID(name, tagArray));\n+        if (gauge == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1OTM1OA=="}, "originalCommit": {"oid": "72358326329c6b77a7f344bc65bd8ff3defda7f3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEzMjYzMQ==", "bodyText": "PR rebased and updated per discussion above.", "url": "https://github.com/quarkusio/quarkus/pull/7987#discussion_r406132631", "createdAt": "2020-04-09T11:15:56Z", "author": {"login": "Ladicek"}, "path": "extensions/jaeger/runtime/src/main/java/io/quarkus/jaeger/runtime/QuarkusJaegerMetricsFactory.java", "diffHunk": "@@ -45,12 +46,17 @@ public void durationMicros(long time) {\n \n     @Override\n     public Gauge createGauge(final String name, final Map<String, String> tags) {\n-        JaegerGauge gauge = registry.register(meta(name, MetricType.GAUGE), new JaegerGauge(), toTagArray(tags));\n+        Tag[] tagArray = toTagArray(tags);\n+        JaegerGauge gauge = (JaegerGauge) registry.getGauges().get(new MetricID(name, tagArray));\n+        if (gauge == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1OTM1OA=="}, "originalCommit": {"oid": "72358326329c6b77a7f344bc65bd8ff3defda7f3"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4749, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}