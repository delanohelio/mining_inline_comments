{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2ODc0NTgw", "number": 6771, "title": "Fix FaultTolerance perf issue related to the creation of FaultToleranceOperation", "bodyText": "Fixes #6761\nStill a draft PR as I want some feedback on the implementation before polishing it (if needed).\nAs discuss on the mailing list and on the issue, there is some performance issue as currently the FaultToleranceOperation is re-created on each request.\nThe first commit address this issue by using a cache that is filled at RUNTIME_INIT by the recorder. It works except for FT annotations on interfaces (like the one on RestClient interfaces). So there is a fallback that create it on the fly. If we only keep this change we need to store inside the cache the FaultToleranceOperation created on the fly to fix the issue correctly.\nI made a second change when I discover that the recorder load all bean classes to analyse them for FT annotations. I restrict the list of bean classes to analyse using Jandex indexes and it improve a lot the performance of scanning the classpath for FT annotations. On the main integration test, the time to validate the annotations drop from 200ms to 7ms => improvement of 20x at runtime !\nIf we keep the second commit, we will also create FaultToleranceOperation for RestClient interfaces correctly at RUNTIME_INIT by the recorder as Jandex indexe interfaces.\n@Ladicek @mkouba @michalszynkiewicz WDYT ?", "createdAt": "2020-01-24T14:55:22Z", "url": "https://github.com/quarkusio/quarkus/pull/6771", "merged": true, "mergeCommit": {"oid": "47d88097fec396914129b1e89b73ce9757ddc6dd"}, "closed": true, "closedAt": "2020-01-30T09:55:32Z", "author": {"login": "loicmathieu"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9gmDRAFqTM0ODAyNDMxNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_XgW1gFqTM1MDY5ODE0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MDI0MzE2", "url": "https://github.com/quarkusio/quarkus/pull/6771#pullrequestreview-348024316", "createdAt": "2020-01-24T15:20:02Z", "commit": {"oid": "771d3f57d83e8db9342f05bcf3b15bf56a0ba277"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNToyMDowM1rOFhhApg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNToyMTo0MFrOFhhD5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY4ODE2Ng==", "bodyText": "You can make the QuarkusFaultToleranceOperationProvider a @Singleton and then there is no need to use static field here. Instead, you can use Arc.container().instance(QuarkusFaultToleranceOperationProvider.class).init(Map<String,FaultToleranceOperation> ops) in the recorder.", "url": "https://github.com/quarkusio/quarkus/pull/6771#discussion_r370688166", "createdAt": "2020-01-24T15:20:03Z", "author": {"login": "mkouba"}, "path": "extensions/smallrye-fault-tolerance/runtime/src/main/java/io/quarkus/smallrye/faulttolerance/runtime/QuarkusFaultToleranceOperationProvider.java", "diffHunk": "@@ -1,22 +1,39 @@\n package io.quarkus.smallrye.faulttolerance.runtime;\n \n import java.lang.reflect.Method;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n \n import javax.annotation.Priority;\n import javax.enterprise.context.Dependent;\n import javax.enterprise.inject.Alternative;\n \n+import org.jboss.logging.Logger;\n+\n import io.smallrye.faulttolerance.FaultToleranceOperationProvider;\n import io.smallrye.faulttolerance.config.FaultToleranceOperation;\n \n @Dependent\n @Alternative\n @Priority(1)\n public class QuarkusFaultToleranceOperationProvider implements FaultToleranceOperationProvider {\n+    private static final Logger LOG = Logger.getLogger(QuarkusFaultToleranceOperationProvider.class);\n+    static final Map<String, FaultToleranceOperation> OPERATIONS = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "771d3f57d83e8db9342f05bcf3b15bf56a0ba277"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY4ODgzNQ==", "bodyText": "We could use Map.computeIfAbsent() if a FaultToleranceOperation is not found in the cache...", "url": "https://github.com/quarkusio/quarkus/pull/6771#discussion_r370688835", "createdAt": "2020-01-24T15:21:21Z", "author": {"login": "mkouba"}, "path": "extensions/smallrye-fault-tolerance/runtime/src/main/java/io/quarkus/smallrye/faulttolerance/runtime/QuarkusFaultToleranceOperationProvider.java", "diffHunk": "@@ -1,22 +1,39 @@\n package io.quarkus.smallrye.faulttolerance.runtime;\n \n import java.lang.reflect.Method;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n \n import javax.annotation.Priority;\n import javax.enterprise.context.Dependent;\n import javax.enterprise.inject.Alternative;\n \n+import org.jboss.logging.Logger;\n+\n import io.smallrye.faulttolerance.FaultToleranceOperationProvider;\n import io.smallrye.faulttolerance.config.FaultToleranceOperation;\n \n @Dependent\n @Alternative\n @Priority(1)\n public class QuarkusFaultToleranceOperationProvider implements FaultToleranceOperationProvider {\n+    private static final Logger LOG = Logger.getLogger(QuarkusFaultToleranceOperationProvider.class);\n+    static final Map<String, FaultToleranceOperation> OPERATIONS = new ConcurrentHashMap<>();\n \n     @Override\n     public FaultToleranceOperation get(Class<?> beanClass, Method method) {\n+        String key = getCacheKey(beanClass, method);\n+        FaultToleranceOperation operation = OPERATIONS.get(key);\n+        return operation != null ? operation : createAtRuntime(beanClass, method, key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "771d3f57d83e8db9342f05bcf3b15bf56a0ba277"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY4ODk5OA==", "bodyText": "No System.out.print please ;-)", "url": "https://github.com/quarkusio/quarkus/pull/6771#discussion_r370688998", "createdAt": "2020-01-24T15:21:40Z", "author": {"login": "mkouba"}, "path": "extensions/smallrye-fault-tolerance/runtime/src/main/java/io/quarkus/smallrye/faulttolerance/runtime/SmallryeFaultToleranceRecorder.java", "diffHunk": "@@ -66,11 +70,12 @@ public void validate(List<String> beanNames) {\n     private Set<Method> getMethodsForValidation(Class<?> beanClass) {\n         Set<Method> allMethods = new HashSet<>();\n         Class<?> currentClass = beanClass;\n-        while (!currentClass.equals(Object.class)) {\n+        System.out.println(currentClass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "771d3f57d83e8db9342f05bcf3b15bf56a0ba277"}, "originalPosition": 25}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "771d3f57d83e8db9342f05bcf3b15bf56a0ba277", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/771d3f57d83e8db9342f05bcf3b15bf56a0ba277", "committedDate": "2020-01-24T14:34:17Z", "message": "Use Jandex to avoid loading all beans for FT annotations"}, "afterCommit": {"oid": "f4d9701f9d742301c9dc278dda4bf1daa263c2ab", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/f4d9701f9d742301c9dc278dda4bf1daa263c2ab", "committedDate": "2020-01-24T15:54:34Z", "message": "Use Jandex to avoid loading all beans for FT annotations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f4d9701f9d742301c9dc278dda4bf1daa263c2ab", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/f4d9701f9d742301c9dc278dda4bf1daa263c2ab", "committedDate": "2020-01-24T15:54:34Z", "message": "Use Jandex to avoid loading all beans for FT annotations"}, "afterCommit": {"oid": "a4a53ffc832e529edb3313e0483e7a6b0d067c78", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/a4a53ffc832e529edb3313e0483e7a6b0d067c78", "committedDate": "2020-01-24T16:34:32Z", "message": "Use Jandex to avoid loading all beans for FT annotations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MzQyMjk0", "url": "https://github.com/quarkusio/quarkus/pull/6771#pullrequestreview-348342294", "createdAt": "2020-01-25T19:49:14Z", "commit": {"oid": "a4a53ffc832e529edb3313e0483e7a6b0d067c78"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxOTo0OToxNFrOFhxIWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxOTo1MDowMVrOFhxIfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1MjI4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // gather all beans that uses FT annotations\n          \n          \n            \n                    // gather all beans that use FT annotations", "url": "https://github.com/quarkusio/quarkus/pull/6771#discussion_r370952283", "createdAt": "2020-01-25T19:49:14Z", "author": {"login": "gsmet"}, "path": "extensions/smallrye-fault-tolerance/deployment/src/main/java/io/quarkus/smallrye/faulttolerance/deployment/SmallRyeFaultToleranceProcessor.java", "diffHunk": "@@ -153,6 +153,27 @@ public void transform(TransformationContext context) {\n                     .setDefaultScope(DotName.createSimple(Singleton.class.getName())).build());\n             systemProperty.produce(new SystemPropertyBuildItem(\"MP_Fault_Tolerance_Metrics_Enabled\", \"false\"));\n         }\n+\n+        // gather all beans that uses FT annotations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a53ffc832e529edb3313e0483e7a6b0d067c78"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1MjMxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    throw new RuntimeException(\"FT annotations should only be present on CLASS or METHOD targets\");\n          \n          \n            \n                                    throw new RuntimeException(\"MicroProfile Fault Tolerance annotations should only be present on class or method targets\");", "url": "https://github.com/quarkusio/quarkus/pull/6771#discussion_r370952318", "createdAt": "2020-01-25T19:50:01Z", "author": {"login": "gsmet"}, "path": "extensions/smallrye-fault-tolerance/deployment/src/main/java/io/quarkus/smallrye/faulttolerance/deployment/SmallRyeFaultToleranceProcessor.java", "diffHunk": "@@ -153,6 +153,27 @@ public void transform(TransformationContext context) {\n                     .setDefaultScope(DotName.createSimple(Singleton.class.getName())).build());\n             systemProperty.produce(new SystemPropertyBuildItem(\"MP_Fault_Tolerance_Metrics_Enabled\", \"false\"));\n         }\n+\n+        // gather all beans that uses FT annotations\n+        for (DotName ftAnno : ftAnnotations) {\n+            for (AnnotationInstance annotationInstance : index.getAnnotations(ftAnno)) {\n+                switch (annotationInstance.target().kind()) {\n+                    case CLASS: {\n+                        ClassInfo classInfo = annotationInstance.target().asClass();\n+                        ftOperations.produce(new FaultToleranceOperationBuildItem(classInfo));\n+                        break;\n+                    }\n+                    case METHOD: {\n+                        MethodInfo methodInfo = annotationInstance.target().asMethod();\n+                        ftOperations.produce(new FaultToleranceOperationBuildItem(methodInfo.declaringClass(), methodInfo));\n+                        break;\n+                    }\n+                    default:\n+                        throw new RuntimeException(\"FT annotations should only be present on CLASS or METHOD targets\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a53ffc832e529edb3313e0483e7a6b0d067c78"}, "originalPosition": 60}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5fe4a476c113b80ed9f68229fd777ac8d9aa901c", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/5fe4a476c113b80ed9f68229fd777ac8d9aa901c", "committedDate": "2020-01-27T09:09:45Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: Guillaume Smet <guillaume.smet@gmail.com>"}, "afterCommit": {"oid": "669bc16abc10ef1dda7732761fbb35c605825741", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/669bc16abc10ef1dda7732761fbb35c605825741", "committedDate": "2020-01-27T09:11:02Z", "message": "Use Jandex to avoid loading all beans for FT annotations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "669bc16abc10ef1dda7732761fbb35c605825741", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/669bc16abc10ef1dda7732761fbb35c605825741", "committedDate": "2020-01-27T09:11:02Z", "message": "Use Jandex to avoid loading all beans for FT annotations"}, "afterCommit": {"oid": "93806db1aa65622323ffcb4536fc9b23a7c2662f", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/93806db1aa65622323ffcb4536fc9b23a7c2662f", "committedDate": "2020-01-27T09:42:36Z", "message": "Use Jandex to avoid loading all beans for FT annotations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4NzE3OTgw", "url": "https://github.com/quarkusio/quarkus/pull/6771#pullrequestreview-348717980", "createdAt": "2020-01-27T14:49:12Z", "commit": {"oid": "59cac3a4b791378e56f5eaff3b30621a52d20029"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNDo0OToxMlrOFiFTVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNDo1NDozNlrOFiFfrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI4Mjc3NA==", "bodyText": "We're only interested in class beans which have at least one around invoke interceptor... so something like this could slightly improve the perf: validationPhase.getContext().beans().stream().filter(BeanInfo::hasAroundInvokeInterceptors).iterator()", "url": "https://github.com/quarkusio/quarkus/pull/6771#discussion_r371282774", "createdAt": "2020-01-27T14:49:12Z", "author": {"login": "mkouba"}, "path": "extensions/smallrye-fault-tolerance/deployment/src/main/java/io/quarkus/smallrye/faulttolerance/deployment/SmallRyeFaultToleranceProcessor.java", "diffHunk": "@@ -187,13 +192,42 @@ public void transform(TransformationContext ctx) {\n     @BuildStep\n     // needs to be RUNTIME_INIT because we need to read MP Config\n     @Record(ExecutionTime.RUNTIME_INIT)\n-    void validateFaultToleranceAnnotations(\n-            ValidationPhaseBuildItem validationPhase, SmallryeFaultToleranceRecorder recorder) {\n-        List<String> beanNames = new ArrayList<>();\n-        for (BeanInfo bean : validationPhase.getContext().beans().classBeans()) {\n-            beanNames.add(bean.getBeanClass().toString());\n+    void validateFaultToleranceAnnotations(SmallryeFaultToleranceRecorder recorder,\n+            ValidationPhaseBuildItem validationPhase) {\n+        AnnotationStore annotationStore = validationPhase.getContext().get(BuildExtension.Key.ANNOTATION_STORE);\n+        Set<String> beanNames = new HashSet<>();\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+\n+        for (BeanInfo info : validationPhase.getContext().beans()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59cac3a4b791378e56f5eaff3b30621a52d20029"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI4Mjg3MA==", "bodyText": "Unused variable?", "url": "https://github.com/quarkusio/quarkus/pull/6771#discussion_r371282870", "createdAt": "2020-01-27T14:49:22Z", "author": {"login": "mkouba"}, "path": "extensions/smallrye-fault-tolerance/deployment/src/main/java/io/quarkus/smallrye/faulttolerance/deployment/SmallRyeFaultToleranceProcessor.java", "diffHunk": "@@ -187,13 +192,42 @@ public void transform(TransformationContext ctx) {\n     @BuildStep\n     // needs to be RUNTIME_INIT because we need to read MP Config\n     @Record(ExecutionTime.RUNTIME_INIT)\n-    void validateFaultToleranceAnnotations(\n-            ValidationPhaseBuildItem validationPhase, SmallryeFaultToleranceRecorder recorder) {\n-        List<String> beanNames = new ArrayList<>();\n-        for (BeanInfo bean : validationPhase.getContext().beans().classBeans()) {\n-            beanNames.add(bean.getBeanClass().toString());\n+    void validateFaultToleranceAnnotations(SmallryeFaultToleranceRecorder recorder,\n+            ValidationPhaseBuildItem validationPhase) {\n+        AnnotationStore annotationStore = validationPhase.getContext().get(BuildExtension.Key.ANNOTATION_STORE);\n+        Set<String> beanNames = new HashSet<>();\n+        IndexView index = combinedIndexBuildItem.getIndex();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59cac3a4b791378e56f5eaff3b30621a52d20029"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI4NTUyOQ==", "bodyText": "I think that using BeanArchiveIndexBuildItem would be more appropriate in this case. Also the injected fields of SmallRyeFaultToleranceProcessor should be probably turned into injected params of the SmallRyeFaultToleranceProcessor.build() build step (they're not shared so it does not make much sense to use fields). I know that it's not a subject of this PR but it would deserve a small refactoring ;-).", "url": "https://github.com/quarkusio/quarkus/pull/6771#discussion_r371285529", "createdAt": "2020-01-27T14:53:57Z", "author": {"login": "mkouba"}, "path": "extensions/smallrye-fault-tolerance/deployment/src/main/java/io/quarkus/smallrye/faulttolerance/deployment/SmallRyeFaultToleranceProcessor.java", "diffHunk": "@@ -187,13 +192,42 @@ public void transform(TransformationContext ctx) {\n     @BuildStep\n     // needs to be RUNTIME_INIT because we need to read MP Config\n     @Record(ExecutionTime.RUNTIME_INIT)\n-    void validateFaultToleranceAnnotations(\n-            ValidationPhaseBuildItem validationPhase, SmallryeFaultToleranceRecorder recorder) {\n-        List<String> beanNames = new ArrayList<>();\n-        for (BeanInfo bean : validationPhase.getContext().beans().classBeans()) {\n-            beanNames.add(bean.getBeanClass().toString());\n+    void validateFaultToleranceAnnotations(SmallryeFaultToleranceRecorder recorder,\n+            ValidationPhaseBuildItem validationPhase) {\n+        AnnotationStore annotationStore = validationPhase.getContext().get(BuildExtension.Key.ANNOTATION_STORE);\n+        Set<String> beanNames = new HashSet<>();\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+\n+        for (BeanInfo info : validationPhase.getContext().beans()) {\n+            if (hasFTAnnotations(annotationStore, info.getImplClazz())) {\n+                beanNames.add(info.getBeanClass().toString());\n+            }\n         }\n-        recorder.validate(beanNames);\n+\n+        recorder.createFaultToleranceOperation(beanNames);\n+    }\n+\n+    private boolean hasFTAnnotations(AnnotationStore annotationStore, ClassInfo info) {\n+        // first check annotations on type\n+        if (annotationStore.hasAnyAnnotation(info, FT_ANNOTATIONS)) {\n+            return true;\n+        }\n+\n+        // then check on the methods\n+        for (MethodInfo method : info.methods()) {\n+            if (annotationStore.hasAnyAnnotation(method, FT_ANNOTATIONS)) {\n+                return true;\n+            }\n+        }\n+\n+        // then check on the parent\n+        DotName parentClassName = info.superName();\n+        ClassInfo parentClassInfo = combinedIndexBuildItem.getIndex().getClassByName(parentClassName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59cac3a4b791378e56f5eaff3b30621a52d20029"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI4NTkzNQ==", "bodyText": "You can reuse io.quarkus.arc.processor.DotNames.OBJECT.", "url": "https://github.com/quarkusio/quarkus/pull/6771#discussion_r371285935", "createdAt": "2020-01-27T14:54:36Z", "author": {"login": "mkouba"}, "path": "extensions/smallrye-fault-tolerance/deployment/src/main/java/io/quarkus/smallrye/faulttolerance/deployment/SmallRyeFaultToleranceProcessor.java", "diffHunk": "@@ -187,13 +192,42 @@ public void transform(TransformationContext ctx) {\n     @BuildStep\n     // needs to be RUNTIME_INIT because we need to read MP Config\n     @Record(ExecutionTime.RUNTIME_INIT)\n-    void validateFaultToleranceAnnotations(\n-            ValidationPhaseBuildItem validationPhase, SmallryeFaultToleranceRecorder recorder) {\n-        List<String> beanNames = new ArrayList<>();\n-        for (BeanInfo bean : validationPhase.getContext().beans().classBeans()) {\n-            beanNames.add(bean.getBeanClass().toString());\n+    void validateFaultToleranceAnnotations(SmallryeFaultToleranceRecorder recorder,\n+            ValidationPhaseBuildItem validationPhase) {\n+        AnnotationStore annotationStore = validationPhase.getContext().get(BuildExtension.Key.ANNOTATION_STORE);\n+        Set<String> beanNames = new HashSet<>();\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+\n+        for (BeanInfo info : validationPhase.getContext().beans()) {\n+            if (hasFTAnnotations(annotationStore, info.getImplClazz())) {\n+                beanNames.add(info.getBeanClass().toString());\n+            }\n         }\n-        recorder.validate(beanNames);\n+\n+        recorder.createFaultToleranceOperation(beanNames);\n+    }\n+\n+    private boolean hasFTAnnotations(AnnotationStore annotationStore, ClassInfo info) {\n+        // first check annotations on type\n+        if (annotationStore.hasAnyAnnotation(info, FT_ANNOTATIONS)) {\n+            return true;\n+        }\n+\n+        // then check on the methods\n+        for (MethodInfo method : info.methods()) {\n+            if (annotationStore.hasAnyAnnotation(method, FT_ANNOTATIONS)) {\n+                return true;\n+            }\n+        }\n+\n+        // then check on the parent\n+        DotName parentClassName = info.superName();\n+        ClassInfo parentClassInfo = combinedIndexBuildItem.getIndex().getClassByName(parentClassName);\n+        if (parentClassName.equals(DOTNAME_OBJECT) || parentClassInfo == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59cac3a4b791378e56f5eaff3b30621a52d20029"}, "originalPosition": 130}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4Nzk4NTcx", "url": "https://github.com/quarkusio/quarkus/pull/6771#pullrequestreview-348798571", "createdAt": "2020-01-27T16:27:58Z", "commit": {"oid": "5e4f267d5f52c862802c82d3beba4c1815437be8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5e4f267d5f52c862802c82d3beba4c1815437be8", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/5e4f267d5f52c862802c82d3beba4c1815437be8", "committedDate": "2020-01-27T15:44:04Z", "message": "fix: improve FT processor"}, "afterCommit": {"oid": "0504e5defe80e972f1a77e1194e849d7b139f2fa", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/0504e5defe80e972f1a77e1194e849d7b139f2fa", "committedDate": "2020-01-28T12:08:47Z", "message": "fix: improve FT processor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MzUxMjQ0", "url": "https://github.com/quarkusio/quarkus/pull/6771#pullrequestreview-349351244", "createdAt": "2020-01-28T12:55:58Z", "commit": {"oid": "0504e5defe80e972f1a77e1194e849d7b139f2fa"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMjo1NTo1OVrOFij8dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMjo1OToxMVrOFikCJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4NDgyMA==", "bodyText": "We have to use a thread-safe Map impl here. I'd make this field final and use the ConcurrentHashMap. And then in the init() method use Map.putAll().", "url": "https://github.com/quarkusio/quarkus/pull/6771#discussion_r371784820", "createdAt": "2020-01-28T12:55:59Z", "author": {"login": "mkouba"}, "path": "extensions/smallrye-fault-tolerance/runtime/src/main/java/io/quarkus/smallrye/faulttolerance/runtime/QuarkusFaultToleranceOperationProvider.java", "diffHunk": "@@ -1,22 +1,50 @@\n package io.quarkus.smallrye.faulttolerance.runtime;\n \n import java.lang.reflect.Method;\n+import java.util.Map;\n+import java.util.function.Function;\n \n import javax.annotation.Priority;\n-import javax.enterprise.context.Dependent;\n import javax.enterprise.inject.Alternative;\n+import javax.inject.Singleton;\n+\n+import org.jboss.logging.Logger;\n \n import io.smallrye.faulttolerance.FaultToleranceOperationProvider;\n import io.smallrye.faulttolerance.config.FaultToleranceOperation;\n \n-@Dependent\n+@Singleton\n @Alternative\n @Priority(1)\n public class QuarkusFaultToleranceOperationProvider implements FaultToleranceOperationProvider {\n+    private static final Logger LOG = Logger.getLogger(QuarkusFaultToleranceOperationProvider.class);\n+    private Map<String, FaultToleranceOperation> operationCache;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0504e5defe80e972f1a77e1194e849d7b139f2fa"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4NTkzMw==", "bodyText": "It's a pity that we have to create a new Function for each invocation of get(). But that's something we can live with ;-).", "url": "https://github.com/quarkusio/quarkus/pull/6771#discussion_r371785933", "createdAt": "2020-01-28T12:58:26Z", "author": {"login": "mkouba"}, "path": "extensions/smallrye-fault-tolerance/runtime/src/main/java/io/quarkus/smallrye/faulttolerance/runtime/QuarkusFaultToleranceOperationProvider.java", "diffHunk": "@@ -1,22 +1,50 @@\n package io.quarkus.smallrye.faulttolerance.runtime;\n \n import java.lang.reflect.Method;\n+import java.util.Map;\n+import java.util.function.Function;\n \n import javax.annotation.Priority;\n-import javax.enterprise.context.Dependent;\n import javax.enterprise.inject.Alternative;\n+import javax.inject.Singleton;\n+\n+import org.jboss.logging.Logger;\n \n import io.smallrye.faulttolerance.FaultToleranceOperationProvider;\n import io.smallrye.faulttolerance.config.FaultToleranceOperation;\n \n-@Dependent\n+@Singleton\n @Alternative\n @Priority(1)\n public class QuarkusFaultToleranceOperationProvider implements FaultToleranceOperationProvider {\n+    private static final Logger LOG = Logger.getLogger(QuarkusFaultToleranceOperationProvider.class);\n+    private Map<String, FaultToleranceOperation> operationCache;\n+\n+    /**\n+     * Called by SmallryeFaultToleranceRecorder to init the operation cache.\n+     */\n+    void init(Map<String, FaultToleranceOperation> operationCache) {\n+        this.operationCache = operationCache;\n+    }\n \n     @Override\n     public FaultToleranceOperation get(Class<?> beanClass, Method method) {\n+        String key = getCacheKey(beanClass, method);\n+        return operationCache.computeIfAbsent(key, new Function<String, FaultToleranceOperation>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0504e5defe80e972f1a77e1194e849d7b139f2fa"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc4NjI3OQ==", "bodyText": "WARN seems to be a bit strict. I think that INFO would be enough...", "url": "https://github.com/quarkusio/quarkus/pull/6771#discussion_r371786279", "createdAt": "2020-01-28T12:59:11Z", "author": {"login": "mkouba"}, "path": "extensions/smallrye-fault-tolerance/runtime/src/main/java/io/quarkus/smallrye/faulttolerance/runtime/QuarkusFaultToleranceOperationProvider.java", "diffHunk": "@@ -1,22 +1,50 @@\n package io.quarkus.smallrye.faulttolerance.runtime;\n \n import java.lang.reflect.Method;\n+import java.util.Map;\n+import java.util.function.Function;\n \n import javax.annotation.Priority;\n-import javax.enterprise.context.Dependent;\n import javax.enterprise.inject.Alternative;\n+import javax.inject.Singleton;\n+\n+import org.jboss.logging.Logger;\n \n import io.smallrye.faulttolerance.FaultToleranceOperationProvider;\n import io.smallrye.faulttolerance.config.FaultToleranceOperation;\n \n-@Dependent\n+@Singleton\n @Alternative\n @Priority(1)\n public class QuarkusFaultToleranceOperationProvider implements FaultToleranceOperationProvider {\n+    private static final Logger LOG = Logger.getLogger(QuarkusFaultToleranceOperationProvider.class);\n+    private Map<String, FaultToleranceOperation> operationCache;\n+\n+    /**\n+     * Called by SmallryeFaultToleranceRecorder to init the operation cache.\n+     */\n+    void init(Map<String, FaultToleranceOperation> operationCache) {\n+        this.operationCache = operationCache;\n+    }\n \n     @Override\n     public FaultToleranceOperation get(Class<?> beanClass, Method method) {\n+        String key = getCacheKey(beanClass, method);\n+        return operationCache.computeIfAbsent(key, new Function<String, FaultToleranceOperation>() {\n+            @Override\n+            public FaultToleranceOperation apply(String key) {\n+                return createAtRuntime(beanClass, method, key);\n+            }\n+        });\n+    }\n+\n+    private FaultToleranceOperation createAtRuntime(Class<?> beanClass, Method method, String key) {\n+        LOG.warnf(\"FaultToleranceOperation not found in the cache for %s creating it at runtime\", key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0504e5defe80e972f1a77e1194e849d7b139f2fa"}, "originalPosition": 44}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0504e5defe80e972f1a77e1194e849d7b139f2fa", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/0504e5defe80e972f1a77e1194e849d7b139f2fa", "committedDate": "2020-01-28T12:08:47Z", "message": "fix: improve FT processor"}, "afterCommit": {"oid": "04898a3b7ec67b3e50afd1e3bad5d0b4d7cee76b", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/04898a3b7ec67b3e50afd1e3bad5d0b4d7cee76b", "committedDate": "2020-01-28T14:25:34Z", "message": "Avoid to re-create Fault Tolerance metadata for each request"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NDMwMzUx", "url": "https://github.com/quarkusio/quarkus/pull/6771#pullrequestreview-349430351", "createdAt": "2020-01-28T14:46:11Z", "commit": {"oid": "04898a3b7ec67b3e50afd1e3bad5d0b4d7cee76b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NDYwMjUy", "url": "https://github.com/quarkusio/quarkus/pull/6771#pullrequestreview-349460252", "createdAt": "2020-01-28T15:21:22Z", "commit": {"oid": "6c42b2d64df62f76b8ccaf9348c798c191f072f6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNToyMToyMlrOFipCDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNToyMToyMlrOFipCDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg2ODE3Mg==", "bodyText": "What are the getters/setters for?", "url": "https://github.com/quarkusio/quarkus/pull/6771#discussion_r371868172", "createdAt": "2020-01-28T15:21:22Z", "author": {"login": "mkouba"}, "path": "extensions/smallrye-fault-tolerance/runtime/src/main/java/io/quarkus/smallrye/faulttolerance/runtime/QuarkusFaultToleranceOperationProvider.java", "diffHunk": "@@ -19,33 +20,73 @@\n @Priority(1)\n public class QuarkusFaultToleranceOperationProvider implements FaultToleranceOperationProvider {\n     private static final Logger LOG = Logger.getLogger(QuarkusFaultToleranceOperationProvider.class);\n-    private final Map<String, FaultToleranceOperation> operationCache = new ConcurrentHashMap<>();\n+\n+    private final Map<CacheKey, FaultToleranceOperation> operationCache = new ConcurrentHashMap<>();\n+    private final Function<CacheKey, FaultToleranceOperation> cacheFunction = new Function<CacheKey, FaultToleranceOperation>() {\n+        @Override\n+        public FaultToleranceOperation apply(CacheKey key) {\n+            return createAtRuntime(key);\n+        }\n+    };\n \n     /**\n      * Called by SmallryeFaultToleranceRecorder to init the operation cache.\n      */\n-    void init(Map<String, FaultToleranceOperation> operationCache) {\n+    void init(Map<CacheKey, FaultToleranceOperation> operationCache) {\n         this.operationCache.putAll(operationCache);\n     }\n \n     @Override\n     public FaultToleranceOperation get(Class<?> beanClass, Method method) {\n-        String key = getCacheKey(beanClass, method);\n-        return operationCache.computeIfAbsent(key, new Function<String, FaultToleranceOperation>() {\n-            @Override\n-            public FaultToleranceOperation apply(String key) {\n-                return createAtRuntime(beanClass, method, key);\n-            }\n-        });\n+        CacheKey key = new CacheKey(beanClass, method);\n+        FaultToleranceOperation existing = operationCache.get(key);\n+        return existing != null ? existing : operationCache.computeIfAbsent(key, cacheFunction);\n     }\n \n-    private FaultToleranceOperation createAtRuntime(Class<?> beanClass, Method method, String key) {\n-        LOG.infof(\"FaultToleranceOperation not found in the cache for %s creating it at runtime\", key);\n-        return FaultToleranceOperation.of(beanClass, method);\n+    private FaultToleranceOperation createAtRuntime(CacheKey key) {\n+        LOG.debugf(\"FaultToleranceOperation not found in the cache for %s creating it at runtime\", key);\n+        return FaultToleranceOperation.of(key.beanClass, key.method);\n     }\n \n-    static String getCacheKey(Class<?> beanClass, Method method) {\n-        return beanClass.getName() + \"::\" + method.toGenericString();\n-    }\n+    static class CacheKey {\n+        private Class<?> beanClass;\n+        private Method method;\n+\n+        public CacheKey(Class<?> beanClass, Method method) {\n+            this.beanClass = beanClass;\n+            this.method = method;\n+        }\n+\n+        public Class<?> getBeanClass() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c42b2d64df62f76b8ccaf9348c798c191f072f6"}, "originalPosition": 64}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6c42b2d64df62f76b8ccaf9348c798c191f072f6", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/6c42b2d64df62f76b8ccaf9348c798c191f072f6", "committedDate": "2020-01-28T15:19:42Z", "message": "Optimise the FT operation cache mechanism"}, "afterCommit": {"oid": "28749f113c759af330f31ccfd48fd978885b2028", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/28749f113c759af330f31ccfd48fd978885b2028", "committedDate": "2020-01-28T15:28:35Z", "message": "Optimise the FT operation cache mechanism"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMDQ5MTM5", "url": "https://github.com/quarkusio/quarkus/pull/6771#pullrequestreview-350049139", "createdAt": "2020-01-29T11:51:54Z", "commit": {"oid": "28749f113c759af330f31ccfd48fd978885b2028"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMTo1MTo1NVrOFjFwEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMTo1MTo1NVrOFjFwEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMzODcwNg==", "bodyText": "It's minor but I would compute the hashCode in the constructor if it can become a hot path. That's what we do in HV.\nThat allows to cache the hashCode once and for all for all the items that are in the map.", "url": "https://github.com/quarkusio/quarkus/pull/6771#discussion_r372338706", "createdAt": "2020-01-29T11:51:55Z", "author": {"login": "gsmet"}, "path": "extensions/smallrye-fault-tolerance/runtime/src/main/java/io/quarkus/smallrye/faulttolerance/runtime/QuarkusFaultToleranceOperationProvider.java", "diffHunk": "@@ -1,22 +1,76 @@\n package io.quarkus.smallrye.faulttolerance.runtime;\n \n import java.lang.reflect.Method;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n \n import javax.annotation.Priority;\n-import javax.enterprise.context.Dependent;\n import javax.enterprise.inject.Alternative;\n+import javax.inject.Singleton;\n+\n+import org.jboss.logging.Logger;\n \n import io.smallrye.faulttolerance.FaultToleranceOperationProvider;\n import io.smallrye.faulttolerance.config.FaultToleranceOperation;\n \n-@Dependent\n+@Singleton\n @Alternative\n @Priority(1)\n public class QuarkusFaultToleranceOperationProvider implements FaultToleranceOperationProvider {\n+    private static final Logger LOG = Logger.getLogger(QuarkusFaultToleranceOperationProvider.class);\n+\n+    private final Map<CacheKey, FaultToleranceOperation> operationCache = new ConcurrentHashMap<>();\n+    private final Function<CacheKey, FaultToleranceOperation> cacheFunction = new Function<CacheKey, FaultToleranceOperation>() {\n+        @Override\n+        public FaultToleranceOperation apply(CacheKey key) {\n+            return createAtRuntime(key);\n+        }\n+    };\n+\n+    /**\n+     * Called by SmallryeFaultToleranceRecorder to init the operation cache.\n+     */\n+    void init(Map<CacheKey, FaultToleranceOperation> operationCache) {\n+        this.operationCache.putAll(operationCache);\n+    }\n \n     @Override\n     public FaultToleranceOperation get(Class<?> beanClass, Method method) {\n-        return FaultToleranceOperation.of(beanClass, method);\n+        CacheKey key = new CacheKey(beanClass, method);\n+        FaultToleranceOperation existing = operationCache.get(key);\n+        return existing != null ? existing : operationCache.computeIfAbsent(key, cacheFunction);\n+    }\n+\n+    private FaultToleranceOperation createAtRuntime(CacheKey key) {\n+        LOG.debugf(\"FaultToleranceOperation not found in the cache for %s creating it at runtime\", key);\n+        return FaultToleranceOperation.of(key.beanClass, key.method);\n     }\n \n+    static class CacheKey {\n+        private Class<?> beanClass;\n+        private Method method;\n+\n+        public CacheKey(Class<?> beanClass, Method method) {\n+            this.beanClass = beanClass;\n+            this.method = method;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o)\n+                return true;\n+            if (o == null || getClass() != o.getClass())\n+                return false;\n+            CacheKey cacheKey = (CacheKey) o;\n+            return Objects.equals(beanClass, cacheKey.beanClass) &&\n+                    Objects.equals(method, cacheKey.method);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(beanClass, method);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28749f113c759af330f31ccfd48fd978885b2028"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMDQ5NDAy", "url": "https://github.com/quarkusio/quarkus/pull/6771#pullrequestreview-350049402", "createdAt": "2020-01-29T11:52:26Z", "commit": {"oid": "28749f113c759af330f31ccfd48fd978885b2028"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMTo1MjoyN1rOFjFw0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMTo1MjoyN1rOFjFw0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMzODg5OQ==", "bodyText": "If you end up taking into account my comment below, please use curly braces for the two statements above.", "url": "https://github.com/quarkusio/quarkus/pull/6771#discussion_r372338899", "createdAt": "2020-01-29T11:52:27Z", "author": {"login": "gsmet"}, "path": "extensions/smallrye-fault-tolerance/runtime/src/main/java/io/quarkus/smallrye/faulttolerance/runtime/QuarkusFaultToleranceOperationProvider.java", "diffHunk": "@@ -1,22 +1,76 @@\n package io.quarkus.smallrye.faulttolerance.runtime;\n \n import java.lang.reflect.Method;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n \n import javax.annotation.Priority;\n-import javax.enterprise.context.Dependent;\n import javax.enterprise.inject.Alternative;\n+import javax.inject.Singleton;\n+\n+import org.jboss.logging.Logger;\n \n import io.smallrye.faulttolerance.FaultToleranceOperationProvider;\n import io.smallrye.faulttolerance.config.FaultToleranceOperation;\n \n-@Dependent\n+@Singleton\n @Alternative\n @Priority(1)\n public class QuarkusFaultToleranceOperationProvider implements FaultToleranceOperationProvider {\n+    private static final Logger LOG = Logger.getLogger(QuarkusFaultToleranceOperationProvider.class);\n+\n+    private final Map<CacheKey, FaultToleranceOperation> operationCache = new ConcurrentHashMap<>();\n+    private final Function<CacheKey, FaultToleranceOperation> cacheFunction = new Function<CacheKey, FaultToleranceOperation>() {\n+        @Override\n+        public FaultToleranceOperation apply(CacheKey key) {\n+            return createAtRuntime(key);\n+        }\n+    };\n+\n+    /**\n+     * Called by SmallryeFaultToleranceRecorder to init the operation cache.\n+     */\n+    void init(Map<CacheKey, FaultToleranceOperation> operationCache) {\n+        this.operationCache.putAll(operationCache);\n+    }\n \n     @Override\n     public FaultToleranceOperation get(Class<?> beanClass, Method method) {\n-        return FaultToleranceOperation.of(beanClass, method);\n+        CacheKey key = new CacheKey(beanClass, method);\n+        FaultToleranceOperation existing = operationCache.get(key);\n+        return existing != null ? existing : operationCache.computeIfAbsent(key, cacheFunction);\n+    }\n+\n+    private FaultToleranceOperation createAtRuntime(CacheKey key) {\n+        LOG.debugf(\"FaultToleranceOperation not found in the cache for %s creating it at runtime\", key);\n+        return FaultToleranceOperation.of(key.beanClass, key.method);\n     }\n \n+    static class CacheKey {\n+        private Class<?> beanClass;\n+        private Method method;\n+\n+        public CacheKey(Class<?> beanClass, Method method) {\n+            this.beanClass = beanClass;\n+            this.method = method;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o)\n+                return true;\n+            if (o == null || getClass() != o.getClass())\n+                return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28749f113c759af330f31ccfd48fd978885b2028"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7e9de00d8d3d559da54a99a9e0cea347fd02a4d", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/d7e9de00d8d3d559da54a99a9e0cea347fd02a4d", "committedDate": "2020-01-29T17:19:42Z", "message": "fix: no need to check if it's a classBean when using beans.classBeans()\n\nclassBeans() uses `filter(BeanInfo::isClassBean)` so the check is already done"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "28749f113c759af330f31ccfd48fd978885b2028", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/28749f113c759af330f31ccfd48fd978885b2028", "committedDate": "2020-01-28T15:28:35Z", "message": "Optimise the FT operation cache mechanism"}, "afterCommit": {"oid": "54e8087de64b06ebbbd23c01cd914e0b158b0595", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/54e8087de64b06ebbbd23c01cd914e0b158b0595", "committedDate": "2020-01-29T17:19:42Z", "message": "Avoid to re-create Fault Tolerance metadata for each request"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4af812bba979680bb3cd3ed77e3d958645d83f2c", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/4af812bba979680bb3cd3ed77e3d958645d83f2c", "committedDate": "2020-01-30T06:30:34Z", "message": "Avoid to re-create Fault Tolerance metadata for each request"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "54e8087de64b06ebbbd23c01cd914e0b158b0595", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/54e8087de64b06ebbbd23c01cd914e0b158b0595", "committedDate": "2020-01-29T17:19:42Z", "message": "Avoid to re-create Fault Tolerance metadata for each request"}, "afterCommit": {"oid": "4af812bba979680bb3cd3ed77e3d958645d83f2c", "author": {"user": {"login": "loicmathieu", "name": "Lo\u00efc Mathieu"}}, "url": "https://github.com/quarkusio/quarkus/commit/4af812bba979680bb3cd3ed77e3d958645d83f2c", "committedDate": "2020-01-30T06:30:34Z", "message": "Avoid to re-create Fault Tolerance metadata for each request"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNjk4MTQy", "url": "https://github.com/quarkusio/quarkus/pull/6771#pullrequestreview-350698142", "createdAt": "2020-01-30T09:55:19Z", "commit": {"oid": "4af812bba979680bb3cd3ed77e3d958645d83f2c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 144, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}