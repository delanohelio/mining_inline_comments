{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4NjgxMDc3", "number": 11410, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMjo1ODoxN1rOEZCNCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDowMzozNlrOEacyzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Njg1OTYzOnYy", "diffSide": "RIGHT", "path": "extensions/arc/deployment/src/test/java/io/quarkus/arc/test/unproxyable/SynthProxiableBeanWithoutNoArgConstructorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMjo1ODoxOFrOHBnprg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMjo1OTowOVrOHBnrqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2MDI3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public class SynthBean {\n          \n          \n            \n                static class SynthBean {", "url": "https://github.com/quarkusio/quarkus/pull/11410#discussion_r471460270", "createdAt": "2020-08-17T12:58:18Z", "author": {"login": "manovotn"}, "path": "extensions/arc/deployment/src/test/java/io/quarkus/arc/test/unproxyable/SynthProxiableBeanWithoutNoArgConstructorTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package io.quarkus.arc.test.unproxyable;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.function.Consumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Vetoed;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.arc.InstanceHandle;\n+import io.quarkus.arc.deployment.BeanRegistrarBuildItem;\n+import io.quarkus.arc.processor.BeanRegistrar;\n+import io.quarkus.builder.BuildChainBuilder;\n+import io.quarkus.builder.BuildContext;\n+import io.quarkus.builder.BuildStep;\n+import io.quarkus.gizmo.MethodDescriptor;\n+import io.quarkus.gizmo.ResultHandle;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class SynthProxiableBeanWithoutNoArgConstructorTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(SynthBean.class))\n+            .addBuildChainCustomizer(buildCustomizer());\n+\n+    static Consumer<BuildChainBuilder> buildCustomizer() {\n+        return new Consumer<BuildChainBuilder>() {\n+\n+            @Override\n+            public void accept(BuildChainBuilder builder) {\n+                builder.addBuildStep(new BuildStep() {\n+\n+                    @Override\n+                    public void execute(BuildContext context) {\n+                        context.produce(new BeanRegistrarBuildItem(new BeanRegistrar() {\n+                            @Override\n+                            public void register(RegistrationContext context) {\n+                                context.configure(SynthBean.class)\n+                                        .scope(ApplicationScoped.class)\n+                                        .types(SynthBean.class)\n+                                        .unremovable()\n+                                        .creator(mc -> {\n+                                            ResultHandle ret = mc.newInstance(\n+                                                    MethodDescriptor.ofConstructor(SynthBean.class, String.class),\n+                                                    mc.load(\"foo\"));\n+                                            mc.returnValue(ret);\n+                                        })\n+                                        .done();\n+                            }\n+                        }));\n+                    }\n+                }).produces(BeanRegistrarBuildItem.class).build();\n+            }\n+        };\n+    }\n+\n+    @Test\n+    public void testSyntheticBean() {\n+        InstanceHandle<SynthBean> instance = Arc.container().instance(SynthBean.class);\n+        assertTrue(instance.isAvailable());\n+        assertEquals(\"foo\", instance.get().getString());\n+    }\n+\n+    @Vetoed\n+    public class SynthBean {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14fe38c5ac511c6fd3fd19c4f1ab430588920bef"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2MDc3OA==", "bodyText": "@FroMage this should do it. Sorry, it's my bad, I forgot to push that into my branch on Thu once I figured why it fails...", "url": "https://github.com/quarkusio/quarkus/pull/11410#discussion_r471460778", "createdAt": "2020-08-17T12:59:09Z", "author": {"login": "manovotn"}, "path": "extensions/arc/deployment/src/test/java/io/quarkus/arc/test/unproxyable/SynthProxiableBeanWithoutNoArgConstructorTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package io.quarkus.arc.test.unproxyable;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.function.Consumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Vetoed;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.arc.InstanceHandle;\n+import io.quarkus.arc.deployment.BeanRegistrarBuildItem;\n+import io.quarkus.arc.processor.BeanRegistrar;\n+import io.quarkus.builder.BuildChainBuilder;\n+import io.quarkus.builder.BuildContext;\n+import io.quarkus.builder.BuildStep;\n+import io.quarkus.gizmo.MethodDescriptor;\n+import io.quarkus.gizmo.ResultHandle;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class SynthProxiableBeanWithoutNoArgConstructorTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(SynthBean.class))\n+            .addBuildChainCustomizer(buildCustomizer());\n+\n+    static Consumer<BuildChainBuilder> buildCustomizer() {\n+        return new Consumer<BuildChainBuilder>() {\n+\n+            @Override\n+            public void accept(BuildChainBuilder builder) {\n+                builder.addBuildStep(new BuildStep() {\n+\n+                    @Override\n+                    public void execute(BuildContext context) {\n+                        context.produce(new BeanRegistrarBuildItem(new BeanRegistrar() {\n+                            @Override\n+                            public void register(RegistrationContext context) {\n+                                context.configure(SynthBean.class)\n+                                        .scope(ApplicationScoped.class)\n+                                        .types(SynthBean.class)\n+                                        .unremovable()\n+                                        .creator(mc -> {\n+                                            ResultHandle ret = mc.newInstance(\n+                                                    MethodDescriptor.ofConstructor(SynthBean.class, String.class),\n+                                                    mc.load(\"foo\"));\n+                                            mc.returnValue(ret);\n+                                        })\n+                                        .done();\n+                            }\n+                        }));\n+                    }\n+                }).produces(BeanRegistrarBuildItem.class).build();\n+            }\n+        };\n+    }\n+\n+    @Test\n+    public void testSyntheticBean() {\n+        InstanceHandle<SynthBean> instance = Arc.container().instance(SynthBean.class);\n+        assertTrue(instance.isAvailable());\n+        assertEquals(\"foo\", instance.get().getString());\n+    }\n+\n+    @Vetoed\n+    public class SynthBean {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2MDI3MA=="}, "originalCommit": {"oid": "14fe38c5ac511c6fd3fd19c4f1ab430588920bef"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTcwMTI2OnYy", "diffSide": "RIGHT", "path": "test-framework/arquillian/src/main/java/io/quarkus/arquillian/QuarkusDeployableContainer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDowMzoyOFrOHD47JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDoxMDo0N1rOHD5S4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg0MDQyMQ==", "bodyText": "@FroMage forgot to erase debugging evidence? ;-)", "url": "https://github.com/quarkusio/quarkus/pull/11410#discussion_r473840421", "createdAt": "2020-08-20T10:03:28Z", "author": {"login": "manovotn"}, "path": "test-framework/arquillian/src/main/java/io/quarkus/arquillian/QuarkusDeployableContainer.java", "diffHunk": "@@ -195,6 +195,7 @@ public void execute(BuildContext context) {\n             Thread.currentThread().setContextClassLoader(runningQuarkusApplication.getClassLoader());\n             // Instantiate the real test instance\n             testInstance = TestInstantiator.instantiateTest(testJavaClass, runningQuarkusApplication.getClassLoader());\n+            System.err.println(\"Setting testInstance to \" + testInstance);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "800f73f759401c112b6f3feb62e6c055244703dd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg0Mjc0MQ==", "bodyText": "DAMNIT", "url": "https://github.com/quarkusio/quarkus/pull/11410#discussion_r473842741", "createdAt": "2020-08-20T10:06:18Z", "author": {"login": "FroMage"}, "path": "test-framework/arquillian/src/main/java/io/quarkus/arquillian/QuarkusDeployableContainer.java", "diffHunk": "@@ -195,6 +195,7 @@ public void execute(BuildContext context) {\n             Thread.currentThread().setContextClassLoader(runningQuarkusApplication.getClassLoader());\n             // Instantiate the real test instance\n             testInstance = TestInstantiator.instantiateTest(testJavaClass, runningQuarkusApplication.getClassLoader());\n+            System.err.println(\"Setting testInstance to \" + testInstance);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg0MDQyMQ=="}, "originalCommit": {"oid": "800f73f759401c112b6f3feb62e6c055244703dd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg0NjQ5OQ==", "bodyText": "OK should be fixed, thanks a lot :)", "url": "https://github.com/quarkusio/quarkus/pull/11410#discussion_r473846499", "createdAt": "2020-08-20T10:10:47Z", "author": {"login": "FroMage"}, "path": "test-framework/arquillian/src/main/java/io/quarkus/arquillian/QuarkusDeployableContainer.java", "diffHunk": "@@ -195,6 +195,7 @@ public void execute(BuildContext context) {\n             Thread.currentThread().setContextClassLoader(runningQuarkusApplication.getClassLoader());\n             // Instantiate the real test instance\n             testInstance = TestInstantiator.instantiateTest(testJavaClass, runningQuarkusApplication.getClassLoader());\n+            System.err.println(\"Setting testInstance to \" + testInstance);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg0MDQyMQ=="}, "originalCommit": {"oid": "800f73f759401c112b6f3feb62e6c055244703dd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTcwMTkxOnYy", "diffSide": "RIGHT", "path": "test-framework/arquillian/src/main/java/io/quarkus/arquillian/QuarkusDeployableContainer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDowMzozNlrOHD47kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDowMzozNlrOHD47kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg0MDUzMQ==", "bodyText": "Same as above", "url": "https://github.com/quarkusio/quarkus/pull/11410#discussion_r473840531", "createdAt": "2020-08-20T10:03:36Z", "author": {"login": "manovotn"}, "path": "test-framework/arquillian/src/main/java/io/quarkus/arquillian/QuarkusDeployableContainer.java", "diffHunk": "@@ -259,6 +260,7 @@ public void undeploy(Archive<?> archive) throws DeploymentException {\n                 Thread.currentThread().setContextClassLoader(runningApp.get().getClassLoader());\n             }\n             testInstance = null;\n+            System.err.println(\"UnSetting testInstance\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "800f73f759401c112b6f3feb62e6c055244703dd"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 577, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}