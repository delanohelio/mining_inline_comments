{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MTIwMDIx", "number": 7394, "title": "Resolve Gradle's project's classes dir in case the JAR isn't availablable", "bodyText": "This is another way of fixing what #7353 is meant to fix.\nIt looks like the NPE during the serialization of the model happens only for the application's main module. The rest of the modules appear to be properly resolved as their classes dirs.\nThis PR resolves the classes dir of the main module the same way we do it in quarkusDev.\nFixes #7290\nFixes #7357", "createdAt": "2020-02-24T17:44:16Z", "url": "https://github.com/quarkusio/quarkus/pull/7394", "merged": true, "mergeCommit": {"oid": "084b4bdb430f2f394a7b9c83000b627ba3b652c9"}, "closed": true, "closedAt": "2020-02-25T19:38:41Z", "author": {"login": "aloubyansky"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHoFkLAFqTM2MzgxOTIwOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcH0hQAAFqTM2NDI3MzkxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzODE5MjA4", "url": "https://github.com/quarkusio/quarkus/pull/7394#pullrequestreview-363819208", "createdAt": "2020-02-25T01:37:33Z", "commit": {"oid": "60c6c67468527ce677cbee14903a5a268b401565"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMTozNzozNFrOFt16yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMTo0NDo1M1rOFt2B0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxMzY0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);\n          \n          \n            \n                        throw new UncheckedIOException(ERROR_COLLECTING_PROJECT_CLASSES, e);", "url": "https://github.com/quarkusio/quarkus/pull/7394#discussion_r383613640", "createdAt": "2020-02-25T01:37:34Z", "author": {"login": "gastaldi"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusGradleUtils.java", "diffHunk": "@@ -1,19 +1,79 @@\n package io.quarkus.gradle.tasks;\n \n+import java.io.File;\n import java.io.IOException;\n import java.io.ObjectOutputStream;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.gradle.api.file.FileCollection;\n+import org.gradle.api.internal.AbstractTask;\n+import org.gradle.api.tasks.SourceSet;\n \n import io.quarkus.bootstrap.model.AppModel;\n \n public class QuarkusGradleUtils {\n \n+    private static final String ERROR_COLLECTING_PROJECT_CLASSES = \"Failed to collect project's classes in a temporary dir\";\n+\n     public static Path serializeAppModel(final AppModel appModel) throws IOException {\n         final Path serializedModel = Files.createTempFile(\"quarkus-\", \"-gradle-test\");\n         try (ObjectOutputStream out = new ObjectOutputStream(Files.newOutputStream(serializedModel))) {\n             out.writeObject(appModel);\n         }\n         return serializedModel;\n     }\n+\n+    public static String getClassesDir(SourceSet sourceSet, AbstractTask context) {\n+        final Set<String> sourcePaths = new HashSet<>();\n+        for (File sourceDir : sourceSet.getAllJava().getSrcDirs()) {\n+            sourcePaths.add(sourceDir.getAbsolutePath());\n+        }\n+\n+        FileCollection classesDirs = sourceSet.getOutput().getClassesDirs();\n+        Set<File> classDirFiles = classesDirs.getFiles();\n+        if (classDirFiles.size() == 1) {\n+            return classesDirs.getAsPath();\n+        }\n+\n+        //there does not seem to be any sane way of dealing with multiple output dirs, as there does not seem\n+        //to be a way to map them. We will need to address this at some point, but for now we just stick them\n+        //all in a temp dir\n+\n+        final Path tmpClassesDir = context.getTemporaryDir().toPath().resolve(\"quarkus-app-classes\");\n+        try {\n+            Files.createDirectories(tmpClassesDir);\n+        } catch (IOException e) {\n+            throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60c6c67468527ce677cbee14903a5a268b401565"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxNDg0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            stream.forEach(s -> {\n          \n          \n            \n                            stream.filter(Files::isRegularFile).forEach (s-> {", "url": "https://github.com/quarkusio/quarkus/pull/7394#discussion_r383614849", "createdAt": "2020-02-25T01:42:26Z", "author": {"login": "gastaldi"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusGradleUtils.java", "diffHunk": "@@ -1,19 +1,79 @@\n package io.quarkus.gradle.tasks;\n \n+import java.io.File;\n import java.io.IOException;\n import java.io.ObjectOutputStream;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.gradle.api.file.FileCollection;\n+import org.gradle.api.internal.AbstractTask;\n+import org.gradle.api.tasks.SourceSet;\n \n import io.quarkus.bootstrap.model.AppModel;\n \n public class QuarkusGradleUtils {\n \n+    private static final String ERROR_COLLECTING_PROJECT_CLASSES = \"Failed to collect project's classes in a temporary dir\";\n+\n     public static Path serializeAppModel(final AppModel appModel) throws IOException {\n         final Path serializedModel = Files.createTempFile(\"quarkus-\", \"-gradle-test\");\n         try (ObjectOutputStream out = new ObjectOutputStream(Files.newOutputStream(serializedModel))) {\n             out.writeObject(appModel);\n         }\n         return serializedModel;\n     }\n+\n+    public static String getClassesDir(SourceSet sourceSet, AbstractTask context) {\n+        final Set<String> sourcePaths = new HashSet<>();\n+        for (File sourceDir : sourceSet.getAllJava().getSrcDirs()) {\n+            sourcePaths.add(sourceDir.getAbsolutePath());\n+        }\n+\n+        FileCollection classesDirs = sourceSet.getOutput().getClassesDirs();\n+        Set<File> classDirFiles = classesDirs.getFiles();\n+        if (classDirFiles.size() == 1) {\n+            return classesDirs.getAsPath();\n+        }\n+\n+        //there does not seem to be any sane way of dealing with multiple output dirs, as there does not seem\n+        //to be a way to map them. We will need to address this at some point, but for now we just stick them\n+        //all in a temp dir\n+\n+        final Path tmpClassesDir = context.getTemporaryDir().toPath().resolve(\"quarkus-app-classes\");\n+        try {\n+            Files.createDirectories(tmpClassesDir);\n+        } catch (IOException e) {\n+            throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);\n+        }\n+        for (File c : classDirFiles) {\n+            Path cd = c.toPath();\n+            if (!Files.exists(cd)) {\n+                continue;\n+            }\n+            try (Stream<Path> stream = Files.walk(cd)) {\n+                stream.forEach(s -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60c6c67468527ce677cbee14903a5a268b401565"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxNTE2NA==", "bodyText": "Files.copy(s, targetPath) is faster", "url": "https://github.com/quarkusio/quarkus/pull/7394#discussion_r383615164", "createdAt": "2020-02-25T01:43:45Z", "author": {"login": "gastaldi"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusGradleUtils.java", "diffHunk": "@@ -1,19 +1,79 @@\n package io.quarkus.gradle.tasks;\n \n+import java.io.File;\n import java.io.IOException;\n import java.io.ObjectOutputStream;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.gradle.api.file.FileCollection;\n+import org.gradle.api.internal.AbstractTask;\n+import org.gradle.api.tasks.SourceSet;\n \n import io.quarkus.bootstrap.model.AppModel;\n \n public class QuarkusGradleUtils {\n \n+    private static final String ERROR_COLLECTING_PROJECT_CLASSES = \"Failed to collect project's classes in a temporary dir\";\n+\n     public static Path serializeAppModel(final AppModel appModel) throws IOException {\n         final Path serializedModel = Files.createTempFile(\"quarkus-\", \"-gradle-test\");\n         try (ObjectOutputStream out = new ObjectOutputStream(Files.newOutputStream(serializedModel))) {\n             out.writeObject(appModel);\n         }\n         return serializedModel;\n     }\n+\n+    public static String getClassesDir(SourceSet sourceSet, AbstractTask context) {\n+        final Set<String> sourcePaths = new HashSet<>();\n+        for (File sourceDir : sourceSet.getAllJava().getSrcDirs()) {\n+            sourcePaths.add(sourceDir.getAbsolutePath());\n+        }\n+\n+        FileCollection classesDirs = sourceSet.getOutput().getClassesDirs();\n+        Set<File> classDirFiles = classesDirs.getFiles();\n+        if (classDirFiles.size() == 1) {\n+            return classesDirs.getAsPath();\n+        }\n+\n+        //there does not seem to be any sane way of dealing with multiple output dirs, as there does not seem\n+        //to be a way to map them. We will need to address this at some point, but for now we just stick them\n+        //all in a temp dir\n+\n+        final Path tmpClassesDir = context.getTemporaryDir().toPath().resolve(\"quarkus-app-classes\");\n+        try {\n+            Files.createDirectories(tmpClassesDir);\n+        } catch (IOException e) {\n+            throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);\n+        }\n+        for (File c : classDirFiles) {\n+            Path cd = c.toPath();\n+            if (!Files.exists(cd)) {\n+                continue;\n+            }\n+            try (Stream<Path> stream = Files.walk(cd)) {\n+                stream.forEach(s -> {\n+                    try {\n+                        if (Files.isDirectory(s)) {\n+                            return;\n+                        }\n+                        final Path file = cd.relativize(tmpClassesDir);\n+                        final Path targetPath = tmpClassesDir.resolve(file.toString());\n+                        Files.createDirectories(targetPath.getParent());\n+                        byte[] data = Files.readAllBytes(s);\n+                        Files.write(targetPath, data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60c6c67468527ce677cbee14903a5a268b401565"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxNTIzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);\n          \n          \n            \n                                    throw new UncheckedIOException(ERROR_COLLECTING_PROJECT_CLASSES, e);", "url": "https://github.com/quarkusio/quarkus/pull/7394#discussion_r383615233", "createdAt": "2020-02-25T01:44:02Z", "author": {"login": "gastaldi"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusGradleUtils.java", "diffHunk": "@@ -1,19 +1,79 @@\n package io.quarkus.gradle.tasks;\n \n+import java.io.File;\n import java.io.IOException;\n import java.io.ObjectOutputStream;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.gradle.api.file.FileCollection;\n+import org.gradle.api.internal.AbstractTask;\n+import org.gradle.api.tasks.SourceSet;\n \n import io.quarkus.bootstrap.model.AppModel;\n \n public class QuarkusGradleUtils {\n \n+    private static final String ERROR_COLLECTING_PROJECT_CLASSES = \"Failed to collect project's classes in a temporary dir\";\n+\n     public static Path serializeAppModel(final AppModel appModel) throws IOException {\n         final Path serializedModel = Files.createTempFile(\"quarkus-\", \"-gradle-test\");\n         try (ObjectOutputStream out = new ObjectOutputStream(Files.newOutputStream(serializedModel))) {\n             out.writeObject(appModel);\n         }\n         return serializedModel;\n     }\n+\n+    public static String getClassesDir(SourceSet sourceSet, AbstractTask context) {\n+        final Set<String> sourcePaths = new HashSet<>();\n+        for (File sourceDir : sourceSet.getAllJava().getSrcDirs()) {\n+            sourcePaths.add(sourceDir.getAbsolutePath());\n+        }\n+\n+        FileCollection classesDirs = sourceSet.getOutput().getClassesDirs();\n+        Set<File> classDirFiles = classesDirs.getFiles();\n+        if (classDirFiles.size() == 1) {\n+            return classesDirs.getAsPath();\n+        }\n+\n+        //there does not seem to be any sane way of dealing with multiple output dirs, as there does not seem\n+        //to be a way to map them. We will need to address this at some point, but for now we just stick them\n+        //all in a temp dir\n+\n+        final Path tmpClassesDir = context.getTemporaryDir().toPath().resolve(\"quarkus-app-classes\");\n+        try {\n+            Files.createDirectories(tmpClassesDir);\n+        } catch (IOException e) {\n+            throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);\n+        }\n+        for (File c : classDirFiles) {\n+            Path cd = c.toPath();\n+            if (!Files.exists(cd)) {\n+                continue;\n+            }\n+            try (Stream<Path> stream = Files.walk(cd)) {\n+                stream.forEach(s -> {\n+                    try {\n+                        if (Files.isDirectory(s)) {\n+                            return;\n+                        }\n+                        final Path file = cd.relativize(tmpClassesDir);\n+                        final Path targetPath = tmpClassesDir.resolve(file.toString());\n+                        Files.createDirectories(targetPath.getParent());\n+                        byte[] data = Files.readAllBytes(s);\n+                        Files.write(targetPath, data);\n+                    } catch (IOException e) {\n+                        throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60c6c67468527ce677cbee14903a5a268b401565"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxNTI4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);\n          \n          \n            \n                            throw new UncheckedIOException(ERROR_COLLECTING_PROJECT_CLASSES, e);", "url": "https://github.com/quarkusio/quarkus/pull/7394#discussion_r383615286", "createdAt": "2020-02-25T01:44:17Z", "author": {"login": "gastaldi"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusGradleUtils.java", "diffHunk": "@@ -1,19 +1,79 @@\n package io.quarkus.gradle.tasks;\n \n+import java.io.File;\n import java.io.IOException;\n import java.io.ObjectOutputStream;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.gradle.api.file.FileCollection;\n+import org.gradle.api.internal.AbstractTask;\n+import org.gradle.api.tasks.SourceSet;\n \n import io.quarkus.bootstrap.model.AppModel;\n \n public class QuarkusGradleUtils {\n \n+    private static final String ERROR_COLLECTING_PROJECT_CLASSES = \"Failed to collect project's classes in a temporary dir\";\n+\n     public static Path serializeAppModel(final AppModel appModel) throws IOException {\n         final Path serializedModel = Files.createTempFile(\"quarkus-\", \"-gradle-test\");\n         try (ObjectOutputStream out = new ObjectOutputStream(Files.newOutputStream(serializedModel))) {\n             out.writeObject(appModel);\n         }\n         return serializedModel;\n     }\n+\n+    public static String getClassesDir(SourceSet sourceSet, AbstractTask context) {\n+        final Set<String> sourcePaths = new HashSet<>();\n+        for (File sourceDir : sourceSet.getAllJava().getSrcDirs()) {\n+            sourcePaths.add(sourceDir.getAbsolutePath());\n+        }\n+\n+        FileCollection classesDirs = sourceSet.getOutput().getClassesDirs();\n+        Set<File> classDirFiles = classesDirs.getFiles();\n+        if (classDirFiles.size() == 1) {\n+            return classesDirs.getAsPath();\n+        }\n+\n+        //there does not seem to be any sane way of dealing with multiple output dirs, as there does not seem\n+        //to be a way to map them. We will need to address this at some point, but for now we just stick them\n+        //all in a temp dir\n+\n+        final Path tmpClassesDir = context.getTemporaryDir().toPath().resolve(\"quarkus-app-classes\");\n+        try {\n+            Files.createDirectories(tmpClassesDir);\n+        } catch (IOException e) {\n+            throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);\n+        }\n+        for (File c : classDirFiles) {\n+            Path cd = c.toPath();\n+            if (!Files.exists(cd)) {\n+                continue;\n+            }\n+            try (Stream<Path> stream = Files.walk(cd)) {\n+                stream.forEach(s -> {\n+                    try {\n+                        if (Files.isDirectory(s)) {\n+                            return;\n+                        }\n+                        final Path file = cd.relativize(tmpClassesDir);\n+                        final Path targetPath = tmpClassesDir.resolve(file.toString());\n+                        Files.createDirectories(targetPath.getParent());\n+                        byte[] data = Files.readAllBytes(s);\n+                        Files.write(targetPath, data);\n+                    } catch (IOException e) {\n+                        throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);\n+                    }\n+\n+                });\n+            } catch (IOException e) {\n+                throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60c6c67468527ce677cbee14903a5a268b401565"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxNTQ0MQ==", "bodyText": "Better also add an assert in the constructor to make sure root is never null", "url": "https://github.com/quarkusio/quarkus/pull/7394#discussion_r383615441", "createdAt": "2020-02-25T01:44:53Z", "author": {"login": "gastaldi"}, "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/classloading/DirectoryClassPathElement.java", "diffHunk": "@@ -102,4 +102,9 @@ public ProtectionDomain getProtectionDomain(ClassLoader classLoader) {\n     public void close() throws IOException {\n         //noop\n     }\n+\n+    @Override\n+    public String toString() {\n+        return root.toAbsolutePath().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60c6c67468527ce677cbee14903a5a268b401565"}, "originalPosition": 7}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "60c6c67468527ce677cbee14903a5a268b401565", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/60c6c67468527ce677cbee14903a5a268b401565", "committedDate": "2020-02-24T17:36:51Z", "message": "Resolve Gradle's project's classes dir in case the JAR isn't available yet"}, "afterCommit": {"oid": "e245f48cd93cb37359e45c37a20c1c60cdd1083a", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/e245f48cd93cb37359e45c37a20c1c60cdd1083a", "committedDate": "2020-02-25T10:00:01Z", "message": "Resolve Gradle's project's classes dir in case the JAR isn't available yet"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6dc99743f7b0ef941191ec596bb3283ddf054455", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/6dc99743f7b0ef941191ec596bb3283ddf054455", "committedDate": "2020-02-25T15:56:02Z", "message": "* Resolve Gradle's project's classes dir in case the JAR isn't available yet\n* Use only the direct extension deps when creating a detached deployment classpath config"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e245f48cd93cb37359e45c37a20c1c60cdd1083a", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/e245f48cd93cb37359e45c37a20c1c60cdd1083a", "committedDate": "2020-02-25T10:00:01Z", "message": "Resolve Gradle's project's classes dir in case the JAR isn't available yet"}, "afterCommit": {"oid": "6dc99743f7b0ef941191ec596bb3283ddf054455", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/6dc99743f7b0ef941191ec596bb3283ddf054455", "committedDate": "2020-02-25T15:56:02Z", "message": "* Resolve Gradle's project's classes dir in case the JAR isn't available yet\n* Use only the direct extension deps when creating a detached deployment classpath config"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MjczOTE5", "url": "https://github.com/quarkusio/quarkus/pull/7394#pullrequestreview-364273919", "createdAt": "2020-02-25T16:14:56Z", "commit": {"oid": "6dc99743f7b0ef941191ec596bb3283ddf054455"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3996, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}