{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNzE1MTU5", "number": 8162, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzozMjoxMlrODrpXYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDozMzowMFrODyGZbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDkzMDkxOnYy", "diffSide": "RIGHT", "path": "extensions/panache/hibernate-orm-panache/runtime/src/main/java/io/quarkus/hibernate/orm/panache/runtime/PanacheQueryImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzozMjoxMlrOF8G_iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOTowOTowNlrOF8WV4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU3MzQ1MQ==", "bodyText": "Well that's a change in behaviour: we used to have a single page encompassing all results. Perhaps it's fine, but at the very least, this has to be mentioned in the javadocs for the PanacheQuery interface.", "url": "https://github.com/quarkusio/quarkus/pull/8162#discussion_r398573451", "createdAt": "2020-03-26T13:32:12Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache/runtime/src/main/java/io/quarkus/hibernate/orm/panache/runtime/PanacheQueryImpl.java", "diffHunk": "@@ -100,11 +97,15 @@ public int pageCount() {\n \n     @Override\n     public Page page() {\n-        checkNotInRange();\n+        checkPagination();\n         return page;\n     }\n \n-    private void checkNotInRange() {\n+    private void checkPagination() {\n+        if (page == null) {\n+            throw new UnsupportedOperationException(\"Cannot call a page related method, \" +\n+                    \"call page(Page) or page(int, int) to initiate pagination first\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d7e818c90cf1a0fd18e613ea3ac516044ba5af8"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyNDkzMA==", "bodyText": "Javadoc updated, Noticed too that there is another interface ReactivePanacheQuery that has the same behaviour, so I updated it too so all three of them match.", "url": "https://github.com/quarkusio/quarkus/pull/8162#discussion_r398824930", "createdAt": "2020-03-26T19:09:06Z", "author": {"login": "robmv"}, "path": "extensions/panache/hibernate-orm-panache/runtime/src/main/java/io/quarkus/hibernate/orm/panache/runtime/PanacheQueryImpl.java", "diffHunk": "@@ -100,11 +97,15 @@ public int pageCount() {\n \n     @Override\n     public Page page() {\n-        checkNotInRange();\n+        checkPagination();\n         return page;\n     }\n \n-    private void checkNotInRange() {\n+    private void checkPagination() {\n+        if (page == null) {\n+            throw new UnsupportedOperationException(\"Cannot call a page related method, \" +\n+                    \"call page(Page) or page(int, int) to initiate pagination first\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU3MzQ1MQ=="}, "originalCommit": {"oid": "0d7e818c90cf1a0fd18e613ea3ac516044ba5af8"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODU5NzkyOnYy", "diffSide": "RIGHT", "path": "integration-tests/hibernate-orm-panache/src/test/java/io/quarkus/it/panache/NoPagingPMT.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDozMjowNFrOGF8lcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo1MzowMVrOGF9m0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4ODY5MQ==", "bodyText": "This worries me a bit, why is it needed and where is it stopped?", "url": "https://github.com/quarkusio/quarkus/pull/8162#discussion_r408888691", "createdAt": "2020-04-15T14:32:04Z", "author": {"login": "FroMage"}, "path": "integration-tests/hibernate-orm-panache/src/test/java/io/quarkus/it/panache/NoPagingPMT.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package io.quarkus.it.panache;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.await;\n+import static org.hamcrest.Matchers.is;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.h2.tools.Server;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.builder.Version;\n+import io.quarkus.test.LogFile;\n+import io.quarkus.test.QuarkusProdModeTest;\n+import io.restassured.RestAssured;\n+\n+/**\n+ * Test if PanacheQuery is using unnecessary SQL for limiting the number of output rows, the log output is tested for the\n+ * presence of <code>offset</code> or <code>limit</code> in the SQL.\n+ */\n+public class NoPagingPMT {\n+\n+    static {\n+        // WORKAROUND\n+        try {\n+            Server.createTcpServer().start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6710ff3ab05d1292b2e216e6c618509e4b26a6eb"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5OTE4Mg==", "bodyText": "As ProdModeTest build a small JAR and run the test on a different JVM, There is a need to start the H2 Database server, My question to @geoand that I will detail later is about this, The workaround to start it manually is because the ProdModeTest isn't starting it even when I am adding TestResources that has the @QuarkusTestResource(H2DatabaseTestResource.class) annotation\nAs a temporary workaround didn't closed it myself because it is closed when that specific test JVM is closed.", "url": "https://github.com/quarkusio/quarkus/pull/8162#discussion_r408899182", "createdAt": "2020-04-15T14:45:22Z", "author": {"login": "robmv"}, "path": "integration-tests/hibernate-orm-panache/src/test/java/io/quarkus/it/panache/NoPagingPMT.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package io.quarkus.it.panache;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.await;\n+import static org.hamcrest.Matchers.is;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.h2.tools.Server;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.builder.Version;\n+import io.quarkus.test.LogFile;\n+import io.quarkus.test.QuarkusProdModeTest;\n+import io.restassured.RestAssured;\n+\n+/**\n+ * Test if PanacheQuery is using unnecessary SQL for limiting the number of output rows, the log output is tested for the\n+ * presence of <code>offset</code> or <code>limit</code> in the SQL.\n+ */\n+public class NoPagingPMT {\n+\n+    static {\n+        // WORKAROUND\n+        try {\n+            Server.createTcpServer().start();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4ODY5MQ=="}, "originalCommit": {"oid": "6710ff3ab05d1292b2e216e6c618509e4b26a6eb"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkwMDkwNQ==", "bodyText": "Yeah, the prod mode test doesn't handle resources...", "url": "https://github.com/quarkusio/quarkus/pull/8162#discussion_r408900905", "createdAt": "2020-04-15T14:47:29Z", "author": {"login": "geoand"}, "path": "integration-tests/hibernate-orm-panache/src/test/java/io/quarkus/it/panache/NoPagingPMT.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package io.quarkus.it.panache;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.await;\n+import static org.hamcrest.Matchers.is;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.h2.tools.Server;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.builder.Version;\n+import io.quarkus.test.LogFile;\n+import io.quarkus.test.QuarkusProdModeTest;\n+import io.restassured.RestAssured;\n+\n+/**\n+ * Test if PanacheQuery is using unnecessary SQL for limiting the number of output rows, the log output is tested for the\n+ * presence of <code>offset</code> or <code>limit</code> in the SQL.\n+ */\n+public class NoPagingPMT {\n+\n+    static {\n+        // WORKAROUND\n+        try {\n+            Server.createTcpServer().start();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4ODY5MQ=="}, "originalCommit": {"oid": "6710ff3ab05d1292b2e216e6c618509e4b26a6eb"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkwNTQyNA==", "bodyText": "We could make it handle them for sure, but currently it doesn't.", "url": "https://github.com/quarkusio/quarkus/pull/8162#discussion_r408905424", "createdAt": "2020-04-15T14:53:01Z", "author": {"login": "geoand"}, "path": "integration-tests/hibernate-orm-panache/src/test/java/io/quarkus/it/panache/NoPagingPMT.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package io.quarkus.it.panache;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.await;\n+import static org.hamcrest.Matchers.is;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.h2.tools.Server;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.builder.Version;\n+import io.quarkus.test.LogFile;\n+import io.quarkus.test.QuarkusProdModeTest;\n+import io.restassured.RestAssured;\n+\n+/**\n+ * Test if PanacheQuery is using unnecessary SQL for limiting the number of output rows, the log output is tested for the\n+ * presence of <code>offset</code> or <code>limit</code> in the SQL.\n+ */\n+public class NoPagingPMT {\n+\n+    static {\n+        // WORKAROUND\n+        try {\n+            Server.createTcpServer().start();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4ODY5MQ=="}, "originalCommit": {"oid": "6710ff3ab05d1292b2e216e6c618509e4b26a6eb"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODYwMjA3OnYy", "diffSide": "RIGHT", "path": "integration-tests/hibernate-orm-panache/pom.xml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDozMzowMFrOGF8oJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo1MjoxN1rOGF9kmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4OTM4Mw==", "bodyText": "Are we sure we need to split the test runs in two parts?", "url": "https://github.com/quarkusio/quarkus/pull/8162#discussion_r408889383", "createdAt": "2020-04-15T14:33:00Z", "author": {"login": "FroMage"}, "path": "integration-tests/hibernate-orm-panache/pom.xml", "diffHunk": "@@ -109,6 +119,30 @@\n                     </execution>\n                 </executions>\n             </plugin>\n+            <plugin>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <executions>\n+                    <!--\n+                    The prod mode tests need to be part of a different execution to ensure that they don't mess with the standard tests.\n+                    By adding this configuration we ensure that the maven surefire plugin will execute twice, one for the regular **/*Test.java\n+                    tests (using the 'default-test' execution), and one for the prod mode tests (this 'prod-mode' execution)\n+                    -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6710ff3ab05d1292b2e216e6c618509e4b26a6eb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5MDYxNA==", "bodyText": "Yes, this is needed because of classpath issues - I've encountered it before.", "url": "https://github.com/quarkusio/quarkus/pull/8162#discussion_r408890614", "createdAt": "2020-04-15T14:34:26Z", "author": {"login": "geoand"}, "path": "integration-tests/hibernate-orm-panache/pom.xml", "diffHunk": "@@ -109,6 +119,30 @@\n                     </execution>\n                 </executions>\n             </plugin>\n+            <plugin>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <executions>\n+                    <!--\n+                    The prod mode tests need to be part of a different execution to ensure that they don't mess with the standard tests.\n+                    By adding this configuration we ensure that the maven surefire plugin will execute twice, one for the regular **/*Test.java\n+                    tests (using the 'default-test' execution), and one for the prod mode tests (this 'prod-mode' execution)\n+                    -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4OTM4Mw=="}, "originalCommit": {"oid": "6710ff3ab05d1292b2e216e6c618509e4b26a6eb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkwMTQ3Mw==", "bodyText": "and in this case it wasn't for the classpath but because the regular tests already start an H2 database instance, and the *PMT test run on its own JVM, so there are TCP port conflicts.", "url": "https://github.com/quarkusio/quarkus/pull/8162#discussion_r408901473", "createdAt": "2020-04-15T14:48:08Z", "author": {"login": "robmv"}, "path": "integration-tests/hibernate-orm-panache/pom.xml", "diffHunk": "@@ -109,6 +119,30 @@\n                     </execution>\n                 </executions>\n             </plugin>\n+            <plugin>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <executions>\n+                    <!--\n+                    The prod mode tests need to be part of a different execution to ensure that they don't mess with the standard tests.\n+                    By adding this configuration we ensure that the maven surefire plugin will execute twice, one for the regular **/*Test.java\n+                    tests (using the 'default-test' execution), and one for the prod mode tests (this 'prod-mode' execution)\n+                    -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4OTM4Mw=="}, "originalCommit": {"oid": "6710ff3ab05d1292b2e216e6c618509e4b26a6eb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkwNDg1Nw==", "bodyText": "Right, good find", "url": "https://github.com/quarkusio/quarkus/pull/8162#discussion_r408904857", "createdAt": "2020-04-15T14:52:17Z", "author": {"login": "geoand"}, "path": "integration-tests/hibernate-orm-panache/pom.xml", "diffHunk": "@@ -109,6 +119,30 @@\n                     </execution>\n                 </executions>\n             </plugin>\n+            <plugin>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <executions>\n+                    <!--\n+                    The prod mode tests need to be part of a different execution to ensure that they don't mess with the standard tests.\n+                    By adding this configuration we ensure that the maven surefire plugin will execute twice, one for the regular **/*Test.java\n+                    tests (using the 'default-test' execution), and one for the prod mode tests (this 'prod-mode' execution)\n+                    -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4OTM4Mw=="}, "originalCommit": {"oid": "6710ff3ab05d1292b2e216e6c618509e4b26a6eb"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4632, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}