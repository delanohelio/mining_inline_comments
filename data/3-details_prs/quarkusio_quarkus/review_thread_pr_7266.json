{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2NzM1NzU1", "number": 7266, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo1MDo1MVrODgz-uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo1MDo1MVrODgz-uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzMyNjY1OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/kafka-streams.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo1MDo1MVrOFrOPew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxOToyNzoyNFrOFrPbNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2NjQyNw==", "bodyText": "This is incorrect isn't it?", "url": "https://github.com/quarkusio/quarkus/pull/7266#discussion_r380866427", "createdAt": "2020-02-18T18:50:51Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/kafka-streams.adoc", "diffHunk": "@@ -149,25 +149,23 @@ public class ValuesGenerator {\n \n \n     @Outgoing(\"temperature-values\")                             // <1>\n-    public Flowable<KafkaMessage<Integer, String>> generate() {\n+    public Flowable<KafkaRecord<Integer, String>> generate() {\n \n         return Flowable.interval(500, TimeUnit.MILLISECONDS)    // <2>\n                 .onBackpressureDrop()\n                 .map(tick -> {\n                     WeatherStation station = stations.get(random.nextInt(stations.size()));\n-                    double temperature = new BigDecimal(\n-                                random.nextGaussian() * 15 + station.averageTemperature\n-                            )\n+                    double temperature = BigDecimal.valueOf(random.nextGaussian() * 15 + station.averageTemperature)\n                             .setScale(1, RoundingMode.HALF_UP)\n                             .doubleValue();\n \n                     LOG.info(\"station: {}, temperature: {}\", station.name, temperature);\n-                    return KafkaMessage.of(station.id, Instant.now() + \";\" + temperature);\n+                    return KafkaRecord.of(station.id, Instant.now() + \";\" + temperature);\n                 });\n     }\n \n     @Outgoing(\"weather-stations\")                               // <3>\n-    public Flowable<KafkaMessage<Integer, String>> weatherStations() {\n+    public Flowable<KafkaRecord<Integer, String>> weatherStations() {\n         List<KafkaMessage<Integer, String>> stationsAsJson = stations.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb0ed2240f21ec04e1968487352e5f9c190642ab"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4NTgxMg==", "bodyText": "forgot one. Fixed.", "url": "https://github.com/quarkusio/quarkus/pull/7266#discussion_r380885812", "createdAt": "2020-02-18T19:27:24Z", "author": {"login": "cescoffier"}, "path": "docs/src/main/asciidoc/kafka-streams.adoc", "diffHunk": "@@ -149,25 +149,23 @@ public class ValuesGenerator {\n \n \n     @Outgoing(\"temperature-values\")                             // <1>\n-    public Flowable<KafkaMessage<Integer, String>> generate() {\n+    public Flowable<KafkaRecord<Integer, String>> generate() {\n \n         return Flowable.interval(500, TimeUnit.MILLISECONDS)    // <2>\n                 .onBackpressureDrop()\n                 .map(tick -> {\n                     WeatherStation station = stations.get(random.nextInt(stations.size()));\n-                    double temperature = new BigDecimal(\n-                                random.nextGaussian() * 15 + station.averageTemperature\n-                            )\n+                    double temperature = BigDecimal.valueOf(random.nextGaussian() * 15 + station.averageTemperature)\n                             .setScale(1, RoundingMode.HALF_UP)\n                             .doubleValue();\n \n                     LOG.info(\"station: {}, temperature: {}\", station.name, temperature);\n-                    return KafkaMessage.of(station.id, Instant.now() + \";\" + temperature);\n+                    return KafkaRecord.of(station.id, Instant.now() + \";\" + temperature);\n                 });\n     }\n \n     @Outgoing(\"weather-stations\")                               // <3>\n-    public Flowable<KafkaMessage<Integer, String>> weatherStations() {\n+    public Flowable<KafkaRecord<Integer, String>> weatherStations() {\n         List<KafkaMessage<Integer, String>> stationsAsJson = stations.stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2NjQyNw=="}, "originalCommit": {"oid": "cb0ed2240f21ec04e1968487352e5f9c190642ab"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 94, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}