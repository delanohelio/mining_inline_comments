{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNDE4NDQ3", "number": 7073, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNzoxMTo0OFrODeWXWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNzoxNzoxM1rODeWbBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTUwMjk2OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb.adoc", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNzoxMTo0OVrOFnb3kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwODo0ODoyM1rOFnd0og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg5NTM3OA==", "bodyText": "I don't think this sentence provides any useful information. I propose we drop it and add the link to the next sentence", "url": "https://github.com/quarkusio/quarkus/pull/7073#discussion_r376895378", "createdAt": "2020-02-10T07:11:49Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/mongodb.adoc", "diffHunk": "@@ -502,6 +502,18 @@ public class CodecFruitService {\n }\n ----\n \n+== The POJO Codec\n+\n+Quarkus initializes the link:http://mongodb.github.io/mongo-java-driver/3.12/bson/pojos[MongoDB POJO Codec], this codec is capable of automatically working with POJOs so in many cases,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a896a63e66f1f9f36200f7ce195416ddd55ebf"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkyNDgwNQ==", "bodyText": "I think we need to tell the user that the POJO codec is initialized by Quarkus in some way, and in the previous section we talk about creating custom codec so I wanted to make it clear that this is not mandatory as in most cases the pojo codec will works OOTB.", "url": "https://github.com/quarkusio/quarkus/pull/7073#discussion_r376924805", "createdAt": "2020-02-10T08:42:28Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/mongodb.adoc", "diffHunk": "@@ -502,6 +502,18 @@ public class CodecFruitService {\n }\n ----\n \n+== The POJO Codec\n+\n+Quarkus initializes the link:http://mongodb.github.io/mongo-java-driver/3.12/bson/pojos[MongoDB POJO Codec], this codec is capable of automatically working with POJOs so in many cases,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg5NTM3OA=="}, "originalCommit": {"oid": "c6a896a63e66f1f9f36200f7ce195416ddd55ebf"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkyNzM5NA==", "bodyText": "Then perhaps the 2 sentences can be combined like so:\nThe POJO Codec provides a set of annotations that enable the customization of the way a POJO is mapped to a MongoDB collection and this codec is initialized automatically by Quarkus", "url": "https://github.com/quarkusio/quarkus/pull/7073#discussion_r376927394", "createdAt": "2020-02-10T08:48:23Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/mongodb.adoc", "diffHunk": "@@ -502,6 +502,18 @@ public class CodecFruitService {\n }\n ----\n \n+== The POJO Codec\n+\n+Quarkus initializes the link:http://mongodb.github.io/mongo-java-driver/3.12/bson/pojos[MongoDB POJO Codec], this codec is capable of automatically working with POJOs so in many cases,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg5NTM3OA=="}, "originalCommit": {"oid": "c6a896a63e66f1f9f36200f7ce195416ddd55ebf"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTUwNjg3OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNzoxNDowM1rOFnb5-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNzoxNDowM1rOFnb5-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg5NTk5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The POJO Codec provides a rich set of features to customize the way your POJO is mapped to a collection using a set of annotations.\n          \n          \n            \n            The POJO Codec provides a set of annotations that enable the customization of the way a POJO is mapped to a MongoDB collection.", "url": "https://github.com/quarkusio/quarkus/pull/7073#discussion_r376895995", "createdAt": "2020-02-10T07:14:03Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/mongodb.adoc", "diffHunk": "@@ -502,6 +502,18 @@ public class CodecFruitService {\n }\n ----\n \n+== The POJO Codec\n+\n+Quarkus initializes the link:http://mongodb.github.io/mongo-java-driver/3.12/bson/pojos[MongoDB POJO Codec], this codec is capable of automatically working with POJOs so in many cases,\n+you will be able to avoid the creation of a specific codec.\n+\n+The POJO Codec provides a rich set of features to customize the way your POJO is mapped to a collection using a set of annotations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a896a63e66f1f9f36200f7ce195416ddd55ebf"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTUwOTQ0OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNzoxNToyNlrOFnb7aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNzoxNToyNlrOFnb7aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg5NjM2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            One of these annotations is the `@BsonDiscriminator` annotation that allows to store in a single collection multiple Java types by adding\n          \n          \n            \n            One of these annotations is the `@BsonDiscriminator` annotation that allows to storage multiple Java types in a single MongoDB collection by adding", "url": "https://github.com/quarkusio/quarkus/pull/7073#discussion_r376896361", "createdAt": "2020-02-10T07:15:26Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/mongodb.adoc", "diffHunk": "@@ -502,6 +502,18 @@ public class CodecFruitService {\n }\n ----\n \n+== The POJO Codec\n+\n+Quarkus initializes the link:http://mongodb.github.io/mongo-java-driver/3.12/bson/pojos[MongoDB POJO Codec], this codec is capable of automatically working with POJOs so in many cases,\n+you will be able to avoid the creation of a specific codec.\n+\n+The POJO Codec provides a rich set of features to customize the way your POJO is mapped to a collection using a set of annotations.\n+\n+One of these annotations is the `@BsonDiscriminator` annotation that allows to store in a single collection multiple Java types by adding", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a896a63e66f1f9f36200f7ce195416ddd55ebf"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTUxMTA5OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNzoxNjoyOFrOFnb8YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNzoxNjoyOFrOFnb8YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg5NjYwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Quarkus will automatically register all the classes annotated with `@BsonDiscriminator` inside the POJO codec, so you don't have to do it by yourself.\n          \n          \n            \n            Quarkus will automatically register all the classes annotated with `@BsonDiscriminator` with the POJO codec.", "url": "https://github.com/quarkusio/quarkus/pull/7073#discussion_r376896608", "createdAt": "2020-02-10T07:16:28Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/mongodb.adoc", "diffHunk": "@@ -502,6 +502,18 @@ public class CodecFruitService {\n }\n ----\n \n+== The POJO Codec\n+\n+Quarkus initializes the link:http://mongodb.github.io/mongo-java-driver/3.12/bson/pojos[MongoDB POJO Codec], this codec is capable of automatically working with POJOs so in many cases,\n+you will be able to avoid the creation of a specific codec.\n+\n+The POJO Codec provides a rich set of features to customize the way your POJO is mapped to a collection using a set of annotations.\n+\n+One of these annotations is the `@BsonDiscriminator` annotation that allows to store in a single collection multiple Java types by adding\n+a discriminator field inside the document. It can be useful when working with abstract types or interfaces.\n+\n+Quarkus will automatically register all the classes annotated with `@BsonDiscriminator` inside the POJO codec, so you don't have to do it by yourself.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a896a63e66f1f9f36200f7ce195416ddd55ebf"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTUxMjM3OnYy", "diffSide": "RIGHT", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/AbstractMongoClientProducer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNzoxNzoxM1rOFnb9Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwODo1NDo0M1rOFnd_Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg5Njc5MA==", "bodyText": "I don't think this can happen really... And if it does it's doubtful that AbstractMongoClientProducer.class.getClassLoader() will save you (certainly not dev mode that is :))", "url": "https://github.com/quarkusio/quarkus/pull/7073#discussion_r376896790", "createdAt": "2020-02-10T07:17:13Z", "author": {"login": "geoand"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/AbstractMongoClientProducer.java", "diffHunk": "@@ -217,11 +219,24 @@ private MongoClientSettings createMongoConfiguration(MongoClientConfig config) {\n         }\n         // add pojo codec provider with automatic capabilities\n         // it always needs to be the last codec provided\n-        CodecProvider pojoCodecProvider = PojoCodecProvider.builder()\n+        PojoCodecProvider.Builder pojoCodecProviderBuilder = PojoCodecProvider.builder()\n                 .automatic(true)\n-                .conventions(Conventions.DEFAULT_CONVENTIONS)\n-                .build();\n-        providers.add(pojoCodecProvider);\n+                .conventions(Conventions.DEFAULT_CONVENTIONS);\n+        // register bson discriminators\n+        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+        if (classLoader == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a896a63e66f1f9f36200f7ce195416ddd55ebf"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkyODA5Nw==", "bodyText": "I copied this pattern from the Smallrye Fault Tolerance extension, and I just check almost all extensions directly used Thread.currentThread().getContextClassLoader() so it should be safe to use it.", "url": "https://github.com/quarkusio/quarkus/pull/7073#discussion_r376928097", "createdAt": "2020-02-10T08:50:05Z", "author": {"login": "loicmathieu"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/AbstractMongoClientProducer.java", "diffHunk": "@@ -217,11 +219,24 @@ private MongoClientSettings createMongoConfiguration(MongoClientConfig config) {\n         }\n         // add pojo codec provider with automatic capabilities\n         // it always needs to be the last codec provided\n-        CodecProvider pojoCodecProvider = PojoCodecProvider.builder()\n+        PojoCodecProvider.Builder pojoCodecProviderBuilder = PojoCodecProvider.builder()\n                 .automatic(true)\n-                .conventions(Conventions.DEFAULT_CONVENTIONS)\n-                .build();\n-        providers.add(pojoCodecProvider);\n+                .conventions(Conventions.DEFAULT_CONVENTIONS);\n+        // register bson discriminators\n+        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+        if (classLoader == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg5Njc5MA=="}, "originalCommit": {"oid": "c6a896a63e66f1f9f36200f7ce195416ddd55ebf"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkzMDEzOQ==", "bodyText": "Yeah, I can't see a scenario where Thread.currentThread().getContextClassLoader() will return null. In any case this is very minor so it's not worth putting too much thought into it", "url": "https://github.com/quarkusio/quarkus/pull/7073#discussion_r376930139", "createdAt": "2020-02-10T08:54:43Z", "author": {"login": "geoand"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/AbstractMongoClientProducer.java", "diffHunk": "@@ -217,11 +219,24 @@ private MongoClientSettings createMongoConfiguration(MongoClientConfig config) {\n         }\n         // add pojo codec provider with automatic capabilities\n         // it always needs to be the last codec provided\n-        CodecProvider pojoCodecProvider = PojoCodecProvider.builder()\n+        PojoCodecProvider.Builder pojoCodecProviderBuilder = PojoCodecProvider.builder()\n                 .automatic(true)\n-                .conventions(Conventions.DEFAULT_CONVENTIONS)\n-                .build();\n-        providers.add(pojoCodecProvider);\n+                .conventions(Conventions.DEFAULT_CONVENTIONS);\n+        // register bson discriminators\n+        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+        if (classLoader == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg5Njc5MA=="}, "originalCommit": {"oid": "c6a896a63e66f1f9f36200f7ce195416ddd55ebf"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 922, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}