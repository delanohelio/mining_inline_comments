{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1ODU5NTg4", "number": 12785, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMDoyODoxMlrOEvP4PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMjo1NjozOFrOE0y2WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3OTc4Njg0OnYy", "diffSide": "RIGHT", "path": "core/deployment/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMDoyODoxMlrOHkH2PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMDoyODoxMlrOHkH2PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYzOTM1Nw==", "bodyText": "This could probably be removed. I added it to make sure the build order is always correct even when it's concurrent.", "url": "https://github.com/quarkusio/quarkus/pull/12785#discussion_r507639357", "createdAt": "2020-10-19T10:28:12Z", "author": {"login": "aloubyansky"}, "path": "core/deployment/pom.xml", "diffHunk": "@@ -15,6 +15,18 @@\n     <name>Quarkus - Core - Deployment</name>\n \n     <dependencies>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-platform-properties</artifactId>\n+            <type>pom</type>\n+            <version>${project.version}</version>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>*</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "398e4cee9972f80956df0245d853c071c560c274"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTAzNTU3OnYy", "diffSide": "RIGHT", "path": "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/BootstrapAppModelResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoyMzoyOFrOHk5nhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDoyMzo0N1rOHk_o9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1NDc5MQ==", "bodyText": "should be endsWith, right?", "url": "https://github.com/quarkusio/quarkus/pull/12785#discussion_r508454791", "createdAt": "2020-10-20T12:23:28Z", "author": {"login": "michalszynkiewicz"}, "path": "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/BootstrapAppModelResolver.java", "diffHunk": "@@ -281,6 +291,31 @@ public boolean visitLeave(DependencyNode node) {\n                 .build();\n     }\n \n+    private void collectPlatformProperties(AppModel.Builder appBuilder, List<Dependency> managedDeps)\n+            throws AppModelResolverException {\n+        for (Dependency d : managedDeps) {\n+            // assuming platform properties artifacts have the same reserved groupId\n+            Artifact artifact = d.getArtifact();\n+            if (artifact.getArtifactId().contains(BootstrapConstants.PLATFORM_PROPERTIES_ARTIFACT_ID_SUFFIX)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41835820cff3630ff9f4049fe70955506b7d7aa0"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU1MzQ2MQ==", "bodyText": "Yes, fixed. Thanks!", "url": "https://github.com/quarkusio/quarkus/pull/12785#discussion_r508553461", "createdAt": "2020-10-20T14:23:47Z", "author": {"login": "aloubyansky"}, "path": "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/BootstrapAppModelResolver.java", "diffHunk": "@@ -281,6 +291,31 @@ public boolean visitLeave(DependencyNode node) {\n                 .build();\n     }\n \n+    private void collectPlatformProperties(AppModel.Builder appBuilder, List<Dependency> managedDeps)\n+            throws AppModelResolverException {\n+        for (Dependency d : managedDeps) {\n+            // assuming platform properties artifacts have the same reserved groupId\n+            Artifact artifact = d.getArtifact();\n+            if (artifact.getArtifactId().contains(BootstrapConstants.PLATFORM_PROPERTIES_ARTIFACT_ID_SUFFIX)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1NDc5MQ=="}, "originalCommit": {"oid": "41835820cff3630ff9f4049fe70955506b7d7aa0"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTg2NjA3OnYy", "diffSide": "RIGHT", "path": "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/BootstrapAppModelResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTowNDo0M1rOHlBxaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTowNzoxNVrOHlB5Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU4ODM5Mg==", "bodyText": "is the extension here the file extension?", "url": "https://github.com/quarkusio/quarkus/pull/12785#discussion_r508588392", "createdAt": "2020-10-20T15:04:43Z", "author": {"login": "michalszynkiewicz"}, "path": "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/BootstrapAppModelResolver.java", "diffHunk": "@@ -281,6 +291,31 @@ public boolean visitLeave(DependencyNode node) {\n                 .build();\n     }\n \n+    private void collectPlatformProperties(AppModel.Builder appBuilder, List<Dependency> managedDeps)\n+            throws AppModelResolverException {\n+        for (Dependency d : managedDeps) {\n+            // assuming platform properties artifacts have the same reserved groupId\n+            Artifact artifact = d.getArtifact();\n+            if (artifact.getArtifactId().endsWith(BootstrapConstants.PLATFORM_PROPERTIES_ARTIFACT_ID_SUFFIX)) {\n+                final AppArtifact appArtifact = artifact.getExtension().equals(\"properties\") ? toAppArtifact(artifact)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9da89271cb0bb351742e280c2582048dcf1ff820"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU5MDQxNA==", "bodyText": "yes, it's the file extension.", "url": "https://github.com/quarkusio/quarkus/pull/12785#discussion_r508590414", "createdAt": "2020-10-20T15:07:15Z", "author": {"login": "aloubyansky"}, "path": "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/BootstrapAppModelResolver.java", "diffHunk": "@@ -281,6 +291,31 @@ public boolean visitLeave(DependencyNode node) {\n                 .build();\n     }\n \n+    private void collectPlatformProperties(AppModel.Builder appBuilder, List<Dependency> managedDeps)\n+            throws AppModelResolverException {\n+        for (Dependency d : managedDeps) {\n+            // assuming platform properties artifacts have the same reserved groupId\n+            Artifact artifact = d.getArtifact();\n+            if (artifact.getArtifactId().endsWith(BootstrapConstants.PLATFORM_PROPERTIES_ARTIFACT_ID_SUFFIX)) {\n+                final AppArtifact appArtifact = artifact.getExtension().equals(\"properties\") ? toAppArtifact(artifact)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU4ODM5Mg=="}, "originalCommit": {"oid": "9da89271cb0bb351742e280c2582048dcf1ff820"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTg3MTAxOnYy", "diffSide": "RIGHT", "path": "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/BootstrapAppModelResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTowNTo0OVrOHlB0wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNToxNDo1MlrOHlCQiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU4OTI1MA==", "bodyText": "creating new AppArtifact looks a bit weird to me. When will it be necessary to create it? Are we sure that resolve(appArtifact) in this case returns an existing thing?", "url": "https://github.com/quarkusio/quarkus/pull/12785#discussion_r508589250", "createdAt": "2020-10-20T15:05:49Z", "author": {"login": "michalszynkiewicz"}, "path": "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/BootstrapAppModelResolver.java", "diffHunk": "@@ -281,6 +291,31 @@ public boolean visitLeave(DependencyNode node) {\n                 .build();\n     }\n \n+    private void collectPlatformProperties(AppModel.Builder appBuilder, List<Dependency> managedDeps)\n+            throws AppModelResolverException {\n+        for (Dependency d : managedDeps) {\n+            // assuming platform properties artifacts have the same reserved groupId\n+            Artifact artifact = d.getArtifact();\n+            if (artifact.getArtifactId().endsWith(BootstrapConstants.PLATFORM_PROPERTIES_ARTIFACT_ID_SUFFIX)) {\n+                final AppArtifact appArtifact = artifact.getExtension().equals(\"properties\") ? toAppArtifact(artifact)\n+                        : new AppArtifact(artifact.getGroupId(), artifact.getArtifactId(), artifact.getClassifier(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9da89271cb0bb351742e280c2582048dcf1ff820"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU5NjM2MQ==", "bodyText": "It's just making sure the type of the artifact is always properties. If we go with this approach then BootstrapConstants.PLATFORM_PROPERTIES_ARTIFACT_ID_SUFFIX is becoming a reserved suffix requiring artifacts with this suffix to be of properties type. Because that's what we are looking for. OTOH, we could support other formats too.\nYou have a point. The reason I did it this way was I didn't add the type of the artifact to the BOM, so it appeared here as a jar, so I thought that could be a typical \"mistake\" and decided to not require <type>properties</type> in the BOM.", "url": "https://github.com/quarkusio/quarkus/pull/12785#discussion_r508596361", "createdAt": "2020-10-20T15:14:52Z", "author": {"login": "aloubyansky"}, "path": "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/BootstrapAppModelResolver.java", "diffHunk": "@@ -281,6 +291,31 @@ public boolean visitLeave(DependencyNode node) {\n                 .build();\n     }\n \n+    private void collectPlatformProperties(AppModel.Builder appBuilder, List<Dependency> managedDeps)\n+            throws AppModelResolverException {\n+        for (Dependency d : managedDeps) {\n+            // assuming platform properties artifacts have the same reserved groupId\n+            Artifact artifact = d.getArtifact();\n+            if (artifact.getArtifactId().endsWith(BootstrapConstants.PLATFORM_PROPERTIES_ARTIFACT_ID_SUFFIX)) {\n+                final AppArtifact appArtifact = artifact.getExtension().equals(\"properties\") ? toAppArtifact(artifact)\n+                        : new AppArtifact(artifact.getGroupId(), artifact.getArtifactId(), artifact.getClassifier(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU4OTI1MA=="}, "originalCommit": {"oid": "9da89271cb0bb351742e280c2582048dcf1ff820"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTg3MTczOnYy", "diffSide": "RIGHT", "path": "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/BootstrapAppModelResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTowNTo1NlrOHlB1Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNToxNTo0NFrOHlCTVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU4OTM1OA==", "bodyText": "where is this assumption in the code?", "url": "https://github.com/quarkusio/quarkus/pull/12785#discussion_r508589358", "createdAt": "2020-10-20T15:05:56Z", "author": {"login": "michalszynkiewicz"}, "path": "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/BootstrapAppModelResolver.java", "diffHunk": "@@ -281,6 +291,31 @@ public boolean visitLeave(DependencyNode node) {\n                 .build();\n     }\n \n+    private void collectPlatformProperties(AppModel.Builder appBuilder, List<Dependency> managedDeps)\n+            throws AppModelResolverException {\n+        for (Dependency d : managedDeps) {\n+            // assuming platform properties artifacts have the same reserved groupId", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9da89271cb0bb351742e280c2582048dcf1ff820"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU5NzA3Nw==", "bodyText": "ah, it's a leftover, i'll remove the comment.", "url": "https://github.com/quarkusio/quarkus/pull/12785#discussion_r508597077", "createdAt": "2020-10-20T15:15:44Z", "author": {"login": "aloubyansky"}, "path": "independent-projects/bootstrap/maven-resolver/src/main/java/io/quarkus/bootstrap/resolver/BootstrapAppModelResolver.java", "diffHunk": "@@ -281,6 +291,31 @@ public boolean visitLeave(DependencyNode node) {\n                 .build();\n     }\n \n+    private void collectPlatformProperties(AppModel.Builder appBuilder, List<Dependency> managedDeps)\n+            throws AppModelResolverException {\n+        for (Dependency d : managedDeps) {\n+            // assuming platform properties artifacts have the same reserved groupId", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU4OTM1OA=="}, "originalCommit": {"oid": "9da89271cb0bb351742e280c2582048dcf1ff820"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzk5ODc2OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMDoxMTowN1rOHqs2pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzo0MDozMlrOHrZtpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUzNzEyNw==", "bodyText": "Since these would be default values, they should have a low ordinal.  The constant DEFAULT_ORDINAL is the default ordinal for config sources, not the ordinal for default config sources, in case that was a point of confusion.  Using the default ordinal means that the defaults may take precedence over some explicitly configured values.\nOur default value configuration source is using an ordinal of Integer.MIN_VALUE (see io.quarkus.deployment.configuration.DefaultValuesConfigurationSource), so I think it would be appropriate to use, say, Integer.MIN_VALUE + 1000 or something along those lines.", "url": "https://github.com/quarkusio/quarkus/pull/12785#discussion_r514537127", "createdAt": "2020-10-29T20:11:07Z", "author": {"login": "dmlloyd"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -183,9 +201,11 @@ private static boolean isRecorder(AnnotatedElement element) {\n                 reader.getBuildTimePatternMap());\n         final DefaultValuesConfigurationSource ds2 = new DefaultValuesConfigurationSource(\n                 reader.getBuildTimeRunTimePatternMap());\n+        final PropertiesConfigSource platformConfigSource = new PropertiesConfigSource(platformProperties, \"Quarkus platform\",\n+                ConfigSource.DEFAULT_ORDINAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54cb0a545d87365e18e2e5ce3ba166b6b8d176ca"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3MjEwMw==", "bodyText": "Thanks, fixed it and also added a couple tests to make sure the platform properties can be overriden in the application.properties and the command line with -D.", "url": "https://github.com/quarkusio/quarkus/pull/12785#discussion_r515272103", "createdAt": "2020-10-30T17:40:32Z", "author": {"login": "aloubyansky"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -183,9 +201,11 @@ private static boolean isRecorder(AnnotatedElement element) {\n                 reader.getBuildTimePatternMap());\n         final DefaultValuesConfigurationSource ds2 = new DefaultValuesConfigurationSource(\n                 reader.getBuildTimeRunTimePatternMap());\n+        final PropertiesConfigSource platformConfigSource = new PropertiesConfigSource(platformProperties, \"Quarkus platform\",\n+                ConfigSource.DEFAULT_ORDINAL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUzNzEyNw=="}, "originalCommit": {"oid": "54cb0a545d87365e18e2e5ce3ba166b6b8d176ca"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTI0NDY0OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMDoyMzowMVrOHsUWcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMDo1Mzo0MVrOHsVQ4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIzMjgxOQ==", "bodyText": "I was thinking about this further and I had a concern.  The platform configuration source most likely should be based on a io.smallrye.config.KeyMapBackedConfigSource which can have a default value that matches a pattern.  This would allow configuration keys which have map key components to have a default value.", "url": "https://github.com/quarkusio/quarkus/pull/12785#discussion_r516232819", "createdAt": "2020-11-02T20:23:01Z", "author": {"login": "dmlloyd"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -183,9 +200,13 @@ private static boolean isRecorder(AnnotatedElement element) {\n                 reader.getBuildTimePatternMap());\n         final DefaultValuesConfigurationSource ds2 = new DefaultValuesConfigurationSource(\n                 reader.getBuildTimeRunTimePatternMap());\n+        final PropertiesConfigSource platformConfigSource = new PropertiesConfigSource(platformProperties, \"Quarkus platform\",\n+                // Our default value configuration source is using an ordinal of Integer.MIN_VALUE\n+                // (see io.quarkus.deployment.configuration.DefaultValuesConfigurationSource)\n+                Integer.MIN_VALUE + 1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fcbf48ac8a88bfa6d249d98b656f3991ca7349"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI0MDM0NQ==", "bodyText": "Should I be looking into creating values as nesed KeyMaps?", "url": "https://github.com/quarkusio/quarkus/pull/12785#discussion_r516240345", "createdAt": "2020-11-02T20:38:28Z", "author": {"login": "aloubyansky"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -183,9 +200,13 @@ private static boolean isRecorder(AnnotatedElement element) {\n                 reader.getBuildTimePatternMap());\n         final DefaultValuesConfigurationSource ds2 = new DefaultValuesConfigurationSource(\n                 reader.getBuildTimeRunTimePatternMap());\n+        final PropertiesConfigSource platformConfigSource = new PropertiesConfigSource(platformProperties, \"Quarkus platform\",\n+                // Our default value configuration source is using an ordinal of Integer.MIN_VALUE\n+                // (see io.quarkus.deployment.configuration.DefaultValuesConfigurationSource)\n+                Integer.MIN_VALUE + 1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIzMjgxOQ=="}, "originalCommit": {"oid": "29fcbf48ac8a88bfa6d249d98b656f3991ca7349"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI0Mjc0MQ==", "bodyText": "Right, IIRC it would look something like this to add some key under quarkus.foo.bar.*.baz:\nkeyMap.findOrCreate(\"quarkus\", \"foo\", \"bar\").getOrCreateAny().findOrCreate(\"baz\").putRootValue(\"the-default-value\");", "url": "https://github.com/quarkusio/quarkus/pull/12785#discussion_r516242741", "createdAt": "2020-11-02T20:43:28Z", "author": {"login": "dmlloyd"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -183,9 +200,13 @@ private static boolean isRecorder(AnnotatedElement element) {\n                 reader.getBuildTimePatternMap());\n         final DefaultValuesConfigurationSource ds2 = new DefaultValuesConfigurationSource(\n                 reader.getBuildTimeRunTimePatternMap());\n+        final PropertiesConfigSource platformConfigSource = new PropertiesConfigSource(platformProperties, \"Quarkus platform\",\n+                // Our default value configuration source is using an ordinal of Integer.MIN_VALUE\n+                // (see io.quarkus.deployment.configuration.DefaultValuesConfigurationSource)\n+                Integer.MIN_VALUE + 1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIzMjgxOQ=="}, "originalCommit": {"oid": "29fcbf48ac8a88bfa6d249d98b656f3991ca7349"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI0NjQyOA==", "bodyText": "Is there some kind of utility for that I should be splitting the key \"manually\"?", "url": "https://github.com/quarkusio/quarkus/pull/12785#discussion_r516246428", "createdAt": "2020-11-02T20:50:53Z", "author": {"login": "aloubyansky"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -183,9 +200,13 @@ private static boolean isRecorder(AnnotatedElement element) {\n                 reader.getBuildTimePatternMap());\n         final DefaultValuesConfigurationSource ds2 = new DefaultValuesConfigurationSource(\n                 reader.getBuildTimeRunTimePatternMap());\n+        final PropertiesConfigSource platformConfigSource = new PropertiesConfigSource(platformProperties, \"Quarkus platform\",\n+                // Our default value configuration source is using an ordinal of Integer.MIN_VALUE\n+                // (see io.quarkus.deployment.configuration.DefaultValuesConfigurationSource)\n+                Integer.MIN_VALUE + 1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIzMjgxOQ=="}, "originalCommit": {"oid": "29fcbf48ac8a88bfa6d249d98b656f3991ca7349"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI0Nzc3Nw==", "bodyText": "There's no canonical input format for key patterns (just the conventional style I used above), so there isn't really an answer to that question.  Ideally we could avoid having any kind of flat map (e.g. properties) as an input source.  Something hierarchical (e.g. YAML) could sidestep the problem.  Otherwise, yes, you'll have to devise an unambiguous syntax and a splitter for that syntax.", "url": "https://github.com/quarkusio/quarkus/pull/12785#discussion_r516247777", "createdAt": "2020-11-02T20:53:41Z", "author": {"login": "dmlloyd"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -183,9 +200,13 @@ private static boolean isRecorder(AnnotatedElement element) {\n                 reader.getBuildTimePatternMap());\n         final DefaultValuesConfigurationSource ds2 = new DefaultValuesConfigurationSource(\n                 reader.getBuildTimeRunTimePatternMap());\n+        final PropertiesConfigSource platformConfigSource = new PropertiesConfigSource(platformProperties, \"Quarkus platform\",\n+                // Our default value configuration source is using an ordinal of Integer.MIN_VALUE\n+                // (see io.quarkus.deployment.configuration.DefaultValuesConfigurationSource)\n+                Integer.MIN_VALUE + 1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIzMjgxOQ=="}, "originalCommit": {"oid": "29fcbf48ac8a88bfa6d249d98b656f3991ca7349"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzA5Mjg0OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwOTowNTo1M1rOHslcUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMjo1NDo1NlrOHstgcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxMjg1MA==", "bodyText": "@dmlloyd is this looking ok?", "url": "https://github.com/quarkusio/quarkus/pull/12785#discussion_r516512850", "createdAt": "2020-11-03T09:05:53Z", "author": {"login": "aloubyansky"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -184,8 +203,19 @@ private static boolean isRecorder(AnnotatedElement element) {\n         final DefaultValuesConfigurationSource ds2 = new DefaultValuesConfigurationSource(\n                 reader.getBuildTimeRunTimePatternMap());\n         final PropertiesConfigSource pcs = new PropertiesConfigSource(buildSystemProps, \"Build system\");\n-\n-        builder.withSources(ds1, ds2, pcs);\n+        if (platformProperties.isEmpty()) {\n+            builder.withSources(ds1, ds2, pcs);\n+        } else {\n+            final KeyMap<String> props = new KeyMap<>(platformProperties.size());\n+            for (Map.Entry<String, String> prop : platformProperties.entrySet()) {\n+                props.findOrAdd(prop.getKey().split(\"\\\\.\")).putRootValue(prop.getValue());\n+            }\n+            final KeyMapBackedConfigSource platformConfigSource = new KeyMapBackedConfigSource(\"Quarkus platform\",\n+                    // Our default value configuration source is using an ordinal of Integer.MIN_VALUE\n+                    // (see io.quarkus.deployment.configuration.DefaultValuesConfigurationSource)\n+                    Integer.MIN_VALUE + 1000, props);\n+            builder.withSources(ds1, ds2, platformConfigSource, pcs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fe2adf7cbba95fc0bb95df6c038198508fcfdab"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY0NDk3OQ==", "bodyText": "Yes, except the simple split above doesn't allow for embedded . in segments.  Actually there is a helpful utility, now that I remember a bit better... let me make a suggestion.", "url": "https://github.com/quarkusio/quarkus/pull/12785#discussion_r516644979", "createdAt": "2020-11-03T12:54:56Z", "author": {"login": "dmlloyd"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -184,8 +203,19 @@ private static boolean isRecorder(AnnotatedElement element) {\n         final DefaultValuesConfigurationSource ds2 = new DefaultValuesConfigurationSource(\n                 reader.getBuildTimeRunTimePatternMap());\n         final PropertiesConfigSource pcs = new PropertiesConfigSource(buildSystemProps, \"Build system\");\n-\n-        builder.withSources(ds1, ds2, pcs);\n+        if (platformProperties.isEmpty()) {\n+            builder.withSources(ds1, ds2, pcs);\n+        } else {\n+            final KeyMap<String> props = new KeyMap<>(platformProperties.size());\n+            for (Map.Entry<String, String> prop : platformProperties.entrySet()) {\n+                props.findOrAdd(prop.getKey().split(\"\\\\.\")).putRootValue(prop.getValue());\n+            }\n+            final KeyMapBackedConfigSource platformConfigSource = new KeyMapBackedConfigSource(\"Quarkus platform\",\n+                    // Our default value configuration source is using an ordinal of Integer.MIN_VALUE\n+                    // (see io.quarkus.deployment.configuration.DefaultValuesConfigurationSource)\n+                    Integer.MIN_VALUE + 1000, props);\n+            builder.withSources(ds1, ds2, platformConfigSource, pcs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxMjg1MA=="}, "originalCommit": {"oid": "4fe2adf7cbba95fc0bb95df6c038198508fcfdab"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzk0NTIwOnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMjo1NjozOFrOHstkXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDozODowNVrOHsxwjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY0NTk4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            props.findOrAdd(prop.getKey().split(\"\\\\.\")).putRootValue(prop.getValue());\n          \n          \n            \n                            props.findOrAdd(new NameIterator(prop.getKey())).putRootValue(prop.getValue());\n          \n      \n    \n    \n  \n\nYou'll have to add an import for NameIterator too.  But it occurred to me that NameIterator already handles interior \" and escaping for you, and is more efficient than split anyway.", "url": "https://github.com/quarkusio/quarkus/pull/12785#discussion_r516645981", "createdAt": "2020-11-03T12:56:38Z", "author": {"login": "dmlloyd"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -184,8 +203,19 @@ private static boolean isRecorder(AnnotatedElement element) {\n         final DefaultValuesConfigurationSource ds2 = new DefaultValuesConfigurationSource(\n                 reader.getBuildTimeRunTimePatternMap());\n         final PropertiesConfigSource pcs = new PropertiesConfigSource(buildSystemProps, \"Build system\");\n-\n-        builder.withSources(ds1, ds2, pcs);\n+        if (platformProperties.isEmpty()) {\n+            builder.withSources(ds1, ds2, pcs);\n+        } else {\n+            final KeyMap<String> props = new KeyMap<>(platformProperties.size());\n+            for (Map.Entry<String, String> prop : platformProperties.entrySet()) {\n+                props.findOrAdd(prop.getKey().split(\"\\\\.\")).putRootValue(prop.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fe2adf7cbba95fc0bb95df6c038198508fcfdab"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcxNDYzOA==", "bodyText": "Thanks, @dmlloyd! Applied.", "url": "https://github.com/quarkusio/quarkus/pull/12785#discussion_r516714638", "createdAt": "2020-11-03T14:38:05Z", "author": {"login": "aloubyansky"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -184,8 +203,19 @@ private static boolean isRecorder(AnnotatedElement element) {\n         final DefaultValuesConfigurationSource ds2 = new DefaultValuesConfigurationSource(\n                 reader.getBuildTimeRunTimePatternMap());\n         final PropertiesConfigSource pcs = new PropertiesConfigSource(buildSystemProps, \"Build system\");\n-\n-        builder.withSources(ds1, ds2, pcs);\n+        if (platformProperties.isEmpty()) {\n+            builder.withSources(ds1, ds2, pcs);\n+        } else {\n+            final KeyMap<String> props = new KeyMap<>(platformProperties.size());\n+            for (Map.Entry<String, String> prop : platformProperties.entrySet()) {\n+                props.findOrAdd(prop.getKey().split(\"\\\\.\")).putRootValue(prop.getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY0NTk4MQ=="}, "originalCommit": {"oid": "4fe2adf7cbba95fc0bb95df6c038198508fcfdab"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4167, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}