{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMzg5OTAy", "number": 9552, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxNzowOTo1OVrOD_NimA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDowMjoyMlrOD_VTng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjA4NzI4OnYy", "diffSide": "RIGHT", "path": "extensions/credentials/runtime/src/main/java/io/quarkus/credentials/CredentialsProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxNzowOTo1OVrOGZwJCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODo1MTo0OVrOGaH-wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NjMyOA==", "bodyText": "Small typo in th but may be this doc can be simplified a bit, may be just Provides an indirection between credentials consumers such as Agroal and implementers such as Vault....", "url": "https://github.com/quarkusio/quarkus/pull/9552#discussion_r429656328", "createdAt": "2020-05-24T17:09:59Z", "author": {"login": "sberyozkin"}, "path": "extensions/credentials/runtime/src/main/java/io/quarkus/credentials/CredentialsProvider.java", "diffHunk": "@@ -2,11 +2,21 @@\n \n import java.util.Map;\n \n+/**\n+ * Service Programming Interface that provides an indirection between credentials consumers (e.g. agroal)\n+ * and implementers (e.g. vault). Detailed information is available in th dedicated guide.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a572ea6ee0aa329402cc7aae90a5c6dc3070de69"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0NjkxMg==", "bodyText": "done. thanks.", "url": "https://github.com/quarkusio/quarkus/pull/9552#discussion_r430046912", "createdAt": "2020-05-25T18:51:49Z", "author": {"login": "vsevel"}, "path": "extensions/credentials/runtime/src/main/java/io/quarkus/credentials/CredentialsProvider.java", "diffHunk": "@@ -2,11 +2,21 @@\n \n import java.util.Map;\n \n+/**\n+ * Service Programming Interface that provides an indirection between credentials consumers (e.g. agroal)\n+ * and implementers (e.g. vault). Detailed information is available in th dedicated guide.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1NjMyOA=="}, "originalCommit": {"oid": "a572ea6ee0aa329402cc7aae90a5c6dc3070de69"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Njk5NDQ0OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/credentials-provider.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODowNDozM1rOGZ4ZeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODowNDozM1rOGZ4ZeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MTYwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Username/password based authentication is very common, but that is not by far the only one.\n          \n          \n            \n            Username/password based authentication is very common, but that is not by any means the only one.", "url": "https://github.com/quarkusio/quarkus/pull/9552#discussion_r429791609", "createdAt": "2020-05-25T08:04:33Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/credentials-provider.adoc", "diffHunk": "@@ -0,0 +1,194 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Using a Credentials Provider\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+:vault-datasource-guide: link:vault-datasource[Vault Datasource guide]\n+\n+Interacting with a datastore typically implies first connecting using credentials.\n+Those credentials will allow the client to be identified, authenticated and eventually authorized.\n+Username/password based authentication is very common, but that is not by far the only one.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a572ea6ee0aa329402cc7aae90a5c6dc3070de69"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Njk5NjQ4OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/credentials-provider.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODowNToxNFrOGZ4awg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODowNToxNFrOGZ4awg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MTkzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Quarkus introduces a middle abstraction called `Credentials Provider`,\n          \n          \n            \n            Quarkus introduces an intermediate abstraction called `Credentials Provider`,", "url": "https://github.com/quarkusio/quarkus/pull/9552#discussion_r429791938", "createdAt": "2020-05-25T08:05:14Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/credentials-provider.adoc", "diffHunk": "@@ -0,0 +1,194 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Using a Credentials Provider\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+:vault-datasource-guide: link:vault-datasource[Vault Datasource guide]\n+\n+Interacting with a datastore typically implies first connecting using credentials.\n+Those credentials will allow the client to be identified, authenticated and eventually authorized.\n+Username/password based authentication is very common, but that is not by far the only one.\n+Such credentials information may appear in the application configuration,\n+but it is becoming increasingly popular to store this type of sensitive information in secure stores,\n+such as HashiCorp Vault, Azure Key Vault or the AWS Secrets Manager to name just a few.\n+\n+To bridge datastores that consume credentials, which can take different forms,\n+and secure stores that provide those credentials,\n+Quarkus introduces a middle abstraction called `Credentials Provider`,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a572ea6ee0aa329402cc7aae90a5c6dc3070de69"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzAwMzQ3OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/credentials-provider.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODowNzozMlrOGZ4e_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODowNzozMlrOGZ4e_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MzAyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            All extensions that rely on username/password authentication do provide also the possibility to set configuration\n          \n          \n            \n            properties in the `application.properties` as an alternative. But the `Credentials Provider` is the only option\n          \n          \n            \n            All extensions that rely on username/password authentication also allow setting configuration\n          \n          \n            \n            properties in `application.properties` as an alternative. But the `Credentials Provider` is the only option", "url": "https://github.com/quarkusio/quarkus/pull/9552#discussion_r429793021", "createdAt": "2020-05-25T08:07:32Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/credentials-provider.adoc", "diffHunk": "@@ -0,0 +1,194 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Using a Credentials Provider\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+:vault-datasource-guide: link:vault-datasource[Vault Datasource guide]\n+\n+Interacting with a datastore typically implies first connecting using credentials.\n+Those credentials will allow the client to be identified, authenticated and eventually authorized.\n+Username/password based authentication is very common, but that is not by far the only one.\n+Such credentials information may appear in the application configuration,\n+but it is becoming increasingly popular to store this type of sensitive information in secure stores,\n+such as HashiCorp Vault, Azure Key Vault or the AWS Secrets Manager to name just a few.\n+\n+To bridge datastores that consume credentials, which can take different forms,\n+and secure stores that provide those credentials,\n+Quarkus introduces a middle abstraction called `Credentials Provider`,\n+that some extensions may support to consume credentials (e.g. `agroal`),\n+and some others may implement to produce credentials (e.g. `vault`).\n+\n+This Service Programming Interface (SPI) may also be used by implementers that want to support custom providers\n+not yet  implemented in Quarkus (e.g. Azure Key Vault ).\n+\n+Currently, the `Credentials Provider` interface is implemented by the `vault` extension, and is supported\n+by the following credentials consumer extensions:\n+\n+* `agroal`\n+* `reactive-mysql-client`\n+* `reactive-pg-client`\n+\n+All extensions that rely on username/password authentication do provide also the possibility to set configuration\n+properties in the `application.properties` as an alternative. But the `Credentials Provider` is the only option", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a572ea6ee0aa329402cc7aae90a5c6dc3070de69"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzAwNjY2OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/credentials-provider.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODowODoyOVrOGZ4g4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDowNzoxN1rOGZ8GxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MzUwNQ==", "bodyText": "Does {vault-datasource-guide}  work?\nI'm not an adoc expert, so just asking :)", "url": "https://github.com/quarkusio/quarkus/pull/9552#discussion_r429793505", "createdAt": "2020-05-25T08:08:29Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/credentials-provider.adoc", "diffHunk": "@@ -0,0 +1,194 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Using a Credentials Provider\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+:vault-datasource-guide: link:vault-datasource[Vault Datasource guide]\n+\n+Interacting with a datastore typically implies first connecting using credentials.\n+Those credentials will allow the client to be identified, authenticated and eventually authorized.\n+Username/password based authentication is very common, but that is not by far the only one.\n+Such credentials information may appear in the application configuration,\n+but it is becoming increasingly popular to store this type of sensitive information in secure stores,\n+such as HashiCorp Vault, Azure Key Vault or the AWS Secrets Manager to name just a few.\n+\n+To bridge datastores that consume credentials, which can take different forms,\n+and secure stores that provide those credentials,\n+Quarkus introduces a middle abstraction called `Credentials Provider`,\n+that some extensions may support to consume credentials (e.g. `agroal`),\n+and some others may implement to produce credentials (e.g. `vault`).\n+\n+This Service Programming Interface (SPI) may also be used by implementers that want to support custom providers\n+not yet  implemented in Quarkus (e.g. Azure Key Vault ).\n+\n+Currently, the `Credentials Provider` interface is implemented by the `vault` extension, and is supported\n+by the following credentials consumer extensions:\n+\n+* `agroal`\n+* `reactive-mysql-client`\n+* `reactive-pg-client`\n+\n+All extensions that rely on username/password authentication do provide also the possibility to set configuration\n+properties in the `application.properties` as an alternative. But the `Credentials Provider` is the only option\n+if credentials are generated (e.g. `Vault Dynamic DB Credentials`) or if a custom credentials provider is required.\n+\n+This guide will show how to use the `Credentials Provider` provided in the `vault` extension,\n+then we will look at implementing a custom `Credentials Provider`, and finally we will talk about additional\n+considerations regarding implementing a `Credentials Provider` in a new extension.\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* roughly 20 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+* Docker installed\n+\n+== Vault Credentials Provider\n+\n+To configure a `Vault Credentials Provider` you need to provide the following property(ies):\n+\n+[source, properties]\n+----\n+quarkus.vault.credentials-provider.<name>.<property>=<value>\n+----\n+\n+The `<name>` will be used in the consumer to refer to this provider. The `<property>` and `<value>` fields are specific to the `Vault Credentials Provider`. For complete details, please refer to the {vault-datasource-guide}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a572ea6ee0aa329402cc7aae90a5c6dc3070de69"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0ODU5Mw==", "bodyText": "Yes, it's defined in the attributes at the top of the document.", "url": "https://github.com/quarkusio/quarkus/pull/9552#discussion_r429848593", "createdAt": "2020-05-25T09:59:20Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/credentials-provider.adoc", "diffHunk": "@@ -0,0 +1,194 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Using a Credentials Provider\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+:vault-datasource-guide: link:vault-datasource[Vault Datasource guide]\n+\n+Interacting with a datastore typically implies first connecting using credentials.\n+Those credentials will allow the client to be identified, authenticated and eventually authorized.\n+Username/password based authentication is very common, but that is not by far the only one.\n+Such credentials information may appear in the application configuration,\n+but it is becoming increasingly popular to store this type of sensitive information in secure stores,\n+such as HashiCorp Vault, Azure Key Vault or the AWS Secrets Manager to name just a few.\n+\n+To bridge datastores that consume credentials, which can take different forms,\n+and secure stores that provide those credentials,\n+Quarkus introduces a middle abstraction called `Credentials Provider`,\n+that some extensions may support to consume credentials (e.g. `agroal`),\n+and some others may implement to produce credentials (e.g. `vault`).\n+\n+This Service Programming Interface (SPI) may also be used by implementers that want to support custom providers\n+not yet  implemented in Quarkus (e.g. Azure Key Vault ).\n+\n+Currently, the `Credentials Provider` interface is implemented by the `vault` extension, and is supported\n+by the following credentials consumer extensions:\n+\n+* `agroal`\n+* `reactive-mysql-client`\n+* `reactive-pg-client`\n+\n+All extensions that rely on username/password authentication do provide also the possibility to set configuration\n+properties in the `application.properties` as an alternative. But the `Credentials Provider` is the only option\n+if credentials are generated (e.g. `Vault Dynamic DB Credentials`) or if a custom credentials provider is required.\n+\n+This guide will show how to use the `Credentials Provider` provided in the `vault` extension,\n+then we will look at implementing a custom `Credentials Provider`, and finally we will talk about additional\n+considerations regarding implementing a `Credentials Provider` in a new extension.\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* roughly 20 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+* Docker installed\n+\n+== Vault Credentials Provider\n+\n+To configure a `Vault Credentials Provider` you need to provide the following property(ies):\n+\n+[source, properties]\n+----\n+quarkus.vault.credentials-provider.<name>.<property>=<value>\n+----\n+\n+The `<name>` will be used in the consumer to refer to this provider. The `<property>` and `<value>` fields are specific to the `Vault Credentials Provider`. For complete details, please refer to the {vault-datasource-guide}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MzUwNQ=="}, "originalCommit": {"oid": "a572ea6ee0aa329402cc7aae90a5c6dc3070de69"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1MjM1Nw==", "bodyText": "Got it, thanks", "url": "https://github.com/quarkusio/quarkus/pull/9552#discussion_r429852357", "createdAt": "2020-05-25T10:07:17Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/credentials-provider.adoc", "diffHunk": "@@ -0,0 +1,194 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Using a Credentials Provider\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+:vault-datasource-guide: link:vault-datasource[Vault Datasource guide]\n+\n+Interacting with a datastore typically implies first connecting using credentials.\n+Those credentials will allow the client to be identified, authenticated and eventually authorized.\n+Username/password based authentication is very common, but that is not by far the only one.\n+Such credentials information may appear in the application configuration,\n+but it is becoming increasingly popular to store this type of sensitive information in secure stores,\n+such as HashiCorp Vault, Azure Key Vault or the AWS Secrets Manager to name just a few.\n+\n+To bridge datastores that consume credentials, which can take different forms,\n+and secure stores that provide those credentials,\n+Quarkus introduces a middle abstraction called `Credentials Provider`,\n+that some extensions may support to consume credentials (e.g. `agroal`),\n+and some others may implement to produce credentials (e.g. `vault`).\n+\n+This Service Programming Interface (SPI) may also be used by implementers that want to support custom providers\n+not yet  implemented in Quarkus (e.g. Azure Key Vault ).\n+\n+Currently, the `Credentials Provider` interface is implemented by the `vault` extension, and is supported\n+by the following credentials consumer extensions:\n+\n+* `agroal`\n+* `reactive-mysql-client`\n+* `reactive-pg-client`\n+\n+All extensions that rely on username/password authentication do provide also the possibility to set configuration\n+properties in the `application.properties` as an alternative. But the `Credentials Provider` is the only option\n+if credentials are generated (e.g. `Vault Dynamic DB Credentials`) or if a custom credentials provider is required.\n+\n+This guide will show how to use the `Credentials Provider` provided in the `vault` extension,\n+then we will look at implementing a custom `Credentials Provider`, and finally we will talk about additional\n+considerations regarding implementing a `Credentials Provider` in a new extension.\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* roughly 20 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+* Docker installed\n+\n+== Vault Credentials Provider\n+\n+To configure a `Vault Credentials Provider` you need to provide the following property(ies):\n+\n+[source, properties]\n+----\n+quarkus.vault.credentials-provider.<name>.<property>=<value>\n+----\n+\n+The `<name>` will be used in the consumer to refer to this provider. The `<property>` and `<value>` fields are specific to the `Vault Credentials Provider`. For complete details, please refer to the {vault-datasource-guide}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MzUwNQ=="}, "originalCommit": {"oid": "a572ea6ee0aa329402cc7aae90a5c6dc3070de69"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzAxMzM4OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/credentials-provider.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODoxMDo0M1rOGZ4lAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxOTowNDowOVrOGaIJQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5NDU2MQ==", "bodyText": "I think these need a little explaining as it's not mentioned in the docs below or above that the implementation of CredentialsProvider needs to be a CDI bean", "url": "https://github.com/quarkusio/quarkus/pull/9552#discussion_r429794561", "createdAt": "2020-05-25T08:10:43Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/credentials-provider.adoc", "diffHunk": "@@ -0,0 +1,194 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Using a Credentials Provider\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+:vault-datasource-guide: link:vault-datasource[Vault Datasource guide]\n+\n+Interacting with a datastore typically implies first connecting using credentials.\n+Those credentials will allow the client to be identified, authenticated and eventually authorized.\n+Username/password based authentication is very common, but that is not by far the only one.\n+Such credentials information may appear in the application configuration,\n+but it is becoming increasingly popular to store this type of sensitive information in secure stores,\n+such as HashiCorp Vault, Azure Key Vault or the AWS Secrets Manager to name just a few.\n+\n+To bridge datastores that consume credentials, which can take different forms,\n+and secure stores that provide those credentials,\n+Quarkus introduces a middle abstraction called `Credentials Provider`,\n+that some extensions may support to consume credentials (e.g. `agroal`),\n+and some others may implement to produce credentials (e.g. `vault`).\n+\n+This Service Programming Interface (SPI) may also be used by implementers that want to support custom providers\n+not yet  implemented in Quarkus (e.g. Azure Key Vault ).\n+\n+Currently, the `Credentials Provider` interface is implemented by the `vault` extension, and is supported\n+by the following credentials consumer extensions:\n+\n+* `agroal`\n+* `reactive-mysql-client`\n+* `reactive-pg-client`\n+\n+All extensions that rely on username/password authentication do provide also the possibility to set configuration\n+properties in the `application.properties` as an alternative. But the `Credentials Provider` is the only option\n+if credentials are generated (e.g. `Vault Dynamic DB Credentials`) or if a custom credentials provider is required.\n+\n+This guide will show how to use the `Credentials Provider` provided in the `vault` extension,\n+then we will look at implementing a custom `Credentials Provider`, and finally we will talk about additional\n+considerations regarding implementing a `Credentials Provider` in a new extension.\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* roughly 20 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+* Docker installed\n+\n+== Vault Credentials Provider\n+\n+To configure a `Vault Credentials Provider` you need to provide the following property(ies):\n+\n+[source, properties]\n+----\n+quarkus.vault.credentials-provider.<name>.<property>=<value>\n+----\n+\n+The `<name>` will be used in the consumer to refer to this provider. The `<property>` and `<value>` fields are specific to the `Vault Credentials Provider`. For complete details, please refer to the {vault-datasource-guide}.\n+\n+For instance:\n+\n+[source, properties]\n+----\n+quarkus.vault.credentials-provider.mydatabase.kv-path=myapps/vault-quickstart/db\n+----\n+\n+Once defined, the `mydatabase` provider can be used in any extension that supports the `Credentials Provider` interface. For instance in `agroal`:\n+\n+[source, properties]\n+----\n+# configure your datasource\n+quarkus.datasource.db-kind = postgresql\n+quarkus.datasource.username = sarah\n+quarkus.datasource.credentials-provider = mydatabase\n+quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/mydatabase\n+----\n+\n+Note that `quarkus.datasource.username` is the original `agroal` property, whereas the `password` property\n+is not included because the value will come from the `mydatabase` credentials provider we just defined.\n+An alternative is to define both username and password in Vault and drop the `quarkus.datasource.username`\n+property from configuration. All consuming extensions do support the ability to fetch both the username\n+and password from the provider, or just the password.\n+\n+== Custom Credentials Provider\n+\n+Implementing a custom credentials provider is the only option when a vault product is not yet supported in Quarkus, or if credentials need to be retrieved from a custom store.\n+\n+The only interface to implement is:\n+\n+[source, java]\n+----\n+public interface CredentialsProvider {\n+\n+    String USER_PROPERTY_NAME = \"user\";\n+    String PASSWORD_PROPERTY_NAME = \"password\";\n+\n+    Map<String, String> getCredentials(String credentialsProviderName);\n+\n+}\n+----\n+\n+`USER_PROPERTY_NAME` and `PASSWORD_PROPERTY_NAME` are standard properties that should be recognized by any consuming extension that support username/password based authentication.\n+\n+Here is a simple implementation example:\n+\n+[source, java]\n+----\n+@ApplicationScoped\n+@Unremovable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a572ea6ee0aa329402cc7aae90a5c6dc3070de69"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0OTYwMQ==", "bodyText": "I have added:\n\nIt is required that implementations be valid ApplicationScoped CDI beans.\nHere is a simple example:\n...", "url": "https://github.com/quarkusio/quarkus/pull/9552#discussion_r430049601", "createdAt": "2020-05-25T19:04:09Z", "author": {"login": "vsevel"}, "path": "docs/src/main/asciidoc/credentials-provider.adoc", "diffHunk": "@@ -0,0 +1,194 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Using a Credentials Provider\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+:vault-datasource-guide: link:vault-datasource[Vault Datasource guide]\n+\n+Interacting with a datastore typically implies first connecting using credentials.\n+Those credentials will allow the client to be identified, authenticated and eventually authorized.\n+Username/password based authentication is very common, but that is not by far the only one.\n+Such credentials information may appear in the application configuration,\n+but it is becoming increasingly popular to store this type of sensitive information in secure stores,\n+such as HashiCorp Vault, Azure Key Vault or the AWS Secrets Manager to name just a few.\n+\n+To bridge datastores that consume credentials, which can take different forms,\n+and secure stores that provide those credentials,\n+Quarkus introduces a middle abstraction called `Credentials Provider`,\n+that some extensions may support to consume credentials (e.g. `agroal`),\n+and some others may implement to produce credentials (e.g. `vault`).\n+\n+This Service Programming Interface (SPI) may also be used by implementers that want to support custom providers\n+not yet  implemented in Quarkus (e.g. Azure Key Vault ).\n+\n+Currently, the `Credentials Provider` interface is implemented by the `vault` extension, and is supported\n+by the following credentials consumer extensions:\n+\n+* `agroal`\n+* `reactive-mysql-client`\n+* `reactive-pg-client`\n+\n+All extensions that rely on username/password authentication do provide also the possibility to set configuration\n+properties in the `application.properties` as an alternative. But the `Credentials Provider` is the only option\n+if credentials are generated (e.g. `Vault Dynamic DB Credentials`) or if a custom credentials provider is required.\n+\n+This guide will show how to use the `Credentials Provider` provided in the `vault` extension,\n+then we will look at implementing a custom `Credentials Provider`, and finally we will talk about additional\n+considerations regarding implementing a `Credentials Provider` in a new extension.\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* roughly 20 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+* Docker installed\n+\n+== Vault Credentials Provider\n+\n+To configure a `Vault Credentials Provider` you need to provide the following property(ies):\n+\n+[source, properties]\n+----\n+quarkus.vault.credentials-provider.<name>.<property>=<value>\n+----\n+\n+The `<name>` will be used in the consumer to refer to this provider. The `<property>` and `<value>` fields are specific to the `Vault Credentials Provider`. For complete details, please refer to the {vault-datasource-guide}.\n+\n+For instance:\n+\n+[source, properties]\n+----\n+quarkus.vault.credentials-provider.mydatabase.kv-path=myapps/vault-quickstart/db\n+----\n+\n+Once defined, the `mydatabase` provider can be used in any extension that supports the `Credentials Provider` interface. For instance in `agroal`:\n+\n+[source, properties]\n+----\n+# configure your datasource\n+quarkus.datasource.db-kind = postgresql\n+quarkus.datasource.username = sarah\n+quarkus.datasource.credentials-provider = mydatabase\n+quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/mydatabase\n+----\n+\n+Note that `quarkus.datasource.username` is the original `agroal` property, whereas the `password` property\n+is not included because the value will come from the `mydatabase` credentials provider we just defined.\n+An alternative is to define both username and password in Vault and drop the `quarkus.datasource.username`\n+property from configuration. All consuming extensions do support the ability to fetch both the username\n+and password from the provider, or just the password.\n+\n+== Custom Credentials Provider\n+\n+Implementing a custom credentials provider is the only option when a vault product is not yet supported in Quarkus, or if credentials need to be retrieved from a custom store.\n+\n+The only interface to implement is:\n+\n+[source, java]\n+----\n+public interface CredentialsProvider {\n+\n+    String USER_PROPERTY_NAME = \"user\";\n+    String PASSWORD_PROPERTY_NAME = \"password\";\n+\n+    Map<String, String> getCredentials(String credentialsProviderName);\n+\n+}\n+----\n+\n+`USER_PROPERTY_NAME` and `PASSWORD_PROPERTY_NAME` are standard properties that should be recognized by any consuming extension that support username/password based authentication.\n+\n+Here is a simple implementation example:\n+\n+[source, java]\n+----\n+@ApplicationScoped\n+@Unremovable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5NDU2MQ=="}, "originalCommit": {"oid": "a572ea6ee0aa329402cc7aae90a5c6dc3070de69"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzAxOTY0OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/credentials-provider.adoc", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODoxMjo1MVrOGZ4o6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMTo0NDo1MFrOGaahKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5NTU2MA==", "bodyText": "It might be too late now to change this, but this seems inconsistent. The value of credentials-provider-type is the CDI name, where I would expect that it would either be the class, or the property be named credentials-provider-name", "url": "https://github.com/quarkusio/quarkus/pull/9552#discussion_r429795560", "createdAt": "2020-05-25T08:12:51Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/credentials-provider.adoc", "diffHunk": "@@ -0,0 +1,194 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Using a Credentials Provider\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+:vault-datasource-guide: link:vault-datasource[Vault Datasource guide]\n+\n+Interacting with a datastore typically implies first connecting using credentials.\n+Those credentials will allow the client to be identified, authenticated and eventually authorized.\n+Username/password based authentication is very common, but that is not by far the only one.\n+Such credentials information may appear in the application configuration,\n+but it is becoming increasingly popular to store this type of sensitive information in secure stores,\n+such as HashiCorp Vault, Azure Key Vault or the AWS Secrets Manager to name just a few.\n+\n+To bridge datastores that consume credentials, which can take different forms,\n+and secure stores that provide those credentials,\n+Quarkus introduces a middle abstraction called `Credentials Provider`,\n+that some extensions may support to consume credentials (e.g. `agroal`),\n+and some others may implement to produce credentials (e.g. `vault`).\n+\n+This Service Programming Interface (SPI) may also be used by implementers that want to support custom providers\n+not yet  implemented in Quarkus (e.g. Azure Key Vault ).\n+\n+Currently, the `Credentials Provider` interface is implemented by the `vault` extension, and is supported\n+by the following credentials consumer extensions:\n+\n+* `agroal`\n+* `reactive-mysql-client`\n+* `reactive-pg-client`\n+\n+All extensions that rely on username/password authentication do provide also the possibility to set configuration\n+properties in the `application.properties` as an alternative. But the `Credentials Provider` is the only option\n+if credentials are generated (e.g. `Vault Dynamic DB Credentials`) or if a custom credentials provider is required.\n+\n+This guide will show how to use the `Credentials Provider` provided in the `vault` extension,\n+then we will look at implementing a custom `Credentials Provider`, and finally we will talk about additional\n+considerations regarding implementing a `Credentials Provider` in a new extension.\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* roughly 20 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+* Docker installed\n+\n+== Vault Credentials Provider\n+\n+To configure a `Vault Credentials Provider` you need to provide the following property(ies):\n+\n+[source, properties]\n+----\n+quarkus.vault.credentials-provider.<name>.<property>=<value>\n+----\n+\n+The `<name>` will be used in the consumer to refer to this provider. The `<property>` and `<value>` fields are specific to the `Vault Credentials Provider`. For complete details, please refer to the {vault-datasource-guide}.\n+\n+For instance:\n+\n+[source, properties]\n+----\n+quarkus.vault.credentials-provider.mydatabase.kv-path=myapps/vault-quickstart/db\n+----\n+\n+Once defined, the `mydatabase` provider can be used in any extension that supports the `Credentials Provider` interface. For instance in `agroal`:\n+\n+[source, properties]\n+----\n+# configure your datasource\n+quarkus.datasource.db-kind = postgresql\n+quarkus.datasource.username = sarah\n+quarkus.datasource.credentials-provider = mydatabase\n+quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/mydatabase\n+----\n+\n+Note that `quarkus.datasource.username` is the original `agroal` property, whereas the `password` property\n+is not included because the value will come from the `mydatabase` credentials provider we just defined.\n+An alternative is to define both username and password in Vault and drop the `quarkus.datasource.username`\n+property from configuration. All consuming extensions do support the ability to fetch both the username\n+and password from the provider, or just the password.\n+\n+== Custom Credentials Provider\n+\n+Implementing a custom credentials provider is the only option when a vault product is not yet supported in Quarkus, or if credentials need to be retrieved from a custom store.\n+\n+The only interface to implement is:\n+\n+[source, java]\n+----\n+public interface CredentialsProvider {\n+\n+    String USER_PROPERTY_NAME = \"user\";\n+    String PASSWORD_PROPERTY_NAME = \"password\";\n+\n+    Map<String, String> getCredentials(String credentialsProviderName);\n+\n+}\n+----\n+\n+`USER_PROPERTY_NAME` and `PASSWORD_PROPERTY_NAME` are standard properties that should be recognized by any consuming extension that support username/password based authentication.\n+\n+Here is a simple implementation example:\n+\n+[source, java]\n+----\n+@ApplicationScoped\n+@Unremovable\n+public class MyCredentialsProvider implements CredentialsProvider {\n+\n+\t@Override\n+\tpublic Map<String, String> getCredentials(String credentialsProviderName) {\n+\n+\t\tMap<String, String> properties = new HashMap<>();\n+\t\tproperties.put(USER_PROPERTY_NAME, \"hibernate_orm_test\");\n+\t\tproperties.put(PASSWORD_PROPERTY_NAME, \"hibernate_orm_test\");\n+\t\treturn properties;\n+\t}\n+\n+}\n+----\n+\n+Note that we decided here to return both the username and the password.\n+\n+This provider may be used in a datasource definition like this:\n+\n+[source, properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.credentials-provider=custom\n+quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5431/hibernate_orm_test\n+----\n+\n+It is also possible to pass configuration properties to the provider using standard MicroProfile `Config` injection:\n+\n+[source, properties]\n+----\n+custom.foo=bar\n+----\n+\n+And in the provider implementation:\n+\n+[source, java]\n+----\n+@Inject\n+Config config;\n+\n+@Override\n+public Map<String, String> getCredentials(String credentialsProviderName) {\n+\n+    System.out.println(\"MyCredentialsProvider called with foo=\" + config.getValue(credentialsProviderName + \".foo\", String.class));\n+    ...\n+----\n+\n+== New Credentials Provider extension\n+\n+When creating a custom `Credentials Provider` in a new extension, there are a few additional considerations.\n+\n+First, you need to name it to avoid collisions in case multiple credentials providers are available in the project:\n+\n+[source, java]\n+----\n+@ApplicationScoped\n+@Unremovable\n+@Named(\"my-credentials-provider\")\n+public class MyCredentialsProvider implements CredentialsProvider {\n+----\n+\n+It is the responsibility of the consumer to allow a `credentials-provider-type` property:\n+\n+[source, properties]\n+----\n+quarkus.datasource.credentials-provider = custom\n+quarkus.datasource.credentials-provider-type = my-credentials-provider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a572ea6ee0aa329402cc7aae90a5c6dc3070de69"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA1ODMzNg==", "bodyText": "good point.\nto me, the name is mydatabase, as in:\nquarkus.vault.credentials-provider.mydatabase.kv-path=myapps/vault-quickstart/db\n\nquarkus.datasource.credentials-provider = mydatabase\n\nand reflected in the method parameter:\nMap<String, String> getCredentials(String credentialsProviderName);\n\ninstead of credentials-provider-type or credentials-provider-name, may be credentials-provider-cdi-name or credentials-provider-bean-name would be more appropriate.\nor we replace the name by an id:\nMap<String, String> getCredentials(String credentialsProviderId);\n\nand use credentials-provider-name as you suggest in place of credentials-provider-type.\nas far as being too late, I suppose you are talking about 1.5? it is an easy change, and I would be surprised if anybody was using the credentials-provider-type property today. so we can do it now, or I can schedule this small evolution for 1.6. Let me know.\ncc @gsmet", "url": "https://github.com/quarkusio/quarkus/pull/9552#discussion_r430058336", "createdAt": "2020-05-25T19:46:36Z", "author": {"login": "vsevel"}, "path": "docs/src/main/asciidoc/credentials-provider.adoc", "diffHunk": "@@ -0,0 +1,194 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Using a Credentials Provider\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+:vault-datasource-guide: link:vault-datasource[Vault Datasource guide]\n+\n+Interacting with a datastore typically implies first connecting using credentials.\n+Those credentials will allow the client to be identified, authenticated and eventually authorized.\n+Username/password based authentication is very common, but that is not by far the only one.\n+Such credentials information may appear in the application configuration,\n+but it is becoming increasingly popular to store this type of sensitive information in secure stores,\n+such as HashiCorp Vault, Azure Key Vault or the AWS Secrets Manager to name just a few.\n+\n+To bridge datastores that consume credentials, which can take different forms,\n+and secure stores that provide those credentials,\n+Quarkus introduces a middle abstraction called `Credentials Provider`,\n+that some extensions may support to consume credentials (e.g. `agroal`),\n+and some others may implement to produce credentials (e.g. `vault`).\n+\n+This Service Programming Interface (SPI) may also be used by implementers that want to support custom providers\n+not yet  implemented in Quarkus (e.g. Azure Key Vault ).\n+\n+Currently, the `Credentials Provider` interface is implemented by the `vault` extension, and is supported\n+by the following credentials consumer extensions:\n+\n+* `agroal`\n+* `reactive-mysql-client`\n+* `reactive-pg-client`\n+\n+All extensions that rely on username/password authentication do provide also the possibility to set configuration\n+properties in the `application.properties` as an alternative. But the `Credentials Provider` is the only option\n+if credentials are generated (e.g. `Vault Dynamic DB Credentials`) or if a custom credentials provider is required.\n+\n+This guide will show how to use the `Credentials Provider` provided in the `vault` extension,\n+then we will look at implementing a custom `Credentials Provider`, and finally we will talk about additional\n+considerations regarding implementing a `Credentials Provider` in a new extension.\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* roughly 20 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+* Docker installed\n+\n+== Vault Credentials Provider\n+\n+To configure a `Vault Credentials Provider` you need to provide the following property(ies):\n+\n+[source, properties]\n+----\n+quarkus.vault.credentials-provider.<name>.<property>=<value>\n+----\n+\n+The `<name>` will be used in the consumer to refer to this provider. The `<property>` and `<value>` fields are specific to the `Vault Credentials Provider`. For complete details, please refer to the {vault-datasource-guide}.\n+\n+For instance:\n+\n+[source, properties]\n+----\n+quarkus.vault.credentials-provider.mydatabase.kv-path=myapps/vault-quickstart/db\n+----\n+\n+Once defined, the `mydatabase` provider can be used in any extension that supports the `Credentials Provider` interface. For instance in `agroal`:\n+\n+[source, properties]\n+----\n+# configure your datasource\n+quarkus.datasource.db-kind = postgresql\n+quarkus.datasource.username = sarah\n+quarkus.datasource.credentials-provider = mydatabase\n+quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/mydatabase\n+----\n+\n+Note that `quarkus.datasource.username` is the original `agroal` property, whereas the `password` property\n+is not included because the value will come from the `mydatabase` credentials provider we just defined.\n+An alternative is to define both username and password in Vault and drop the `quarkus.datasource.username`\n+property from configuration. All consuming extensions do support the ability to fetch both the username\n+and password from the provider, or just the password.\n+\n+== Custom Credentials Provider\n+\n+Implementing a custom credentials provider is the only option when a vault product is not yet supported in Quarkus, or if credentials need to be retrieved from a custom store.\n+\n+The only interface to implement is:\n+\n+[source, java]\n+----\n+public interface CredentialsProvider {\n+\n+    String USER_PROPERTY_NAME = \"user\";\n+    String PASSWORD_PROPERTY_NAME = \"password\";\n+\n+    Map<String, String> getCredentials(String credentialsProviderName);\n+\n+}\n+----\n+\n+`USER_PROPERTY_NAME` and `PASSWORD_PROPERTY_NAME` are standard properties that should be recognized by any consuming extension that support username/password based authentication.\n+\n+Here is a simple implementation example:\n+\n+[source, java]\n+----\n+@ApplicationScoped\n+@Unremovable\n+public class MyCredentialsProvider implements CredentialsProvider {\n+\n+\t@Override\n+\tpublic Map<String, String> getCredentials(String credentialsProviderName) {\n+\n+\t\tMap<String, String> properties = new HashMap<>();\n+\t\tproperties.put(USER_PROPERTY_NAME, \"hibernate_orm_test\");\n+\t\tproperties.put(PASSWORD_PROPERTY_NAME, \"hibernate_orm_test\");\n+\t\treturn properties;\n+\t}\n+\n+}\n+----\n+\n+Note that we decided here to return both the username and the password.\n+\n+This provider may be used in a datasource definition like this:\n+\n+[source, properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.credentials-provider=custom\n+quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5431/hibernate_orm_test\n+----\n+\n+It is also possible to pass configuration properties to the provider using standard MicroProfile `Config` injection:\n+\n+[source, properties]\n+----\n+custom.foo=bar\n+----\n+\n+And in the provider implementation:\n+\n+[source, java]\n+----\n+@Inject\n+Config config;\n+\n+@Override\n+public Map<String, String> getCredentials(String credentialsProviderName) {\n+\n+    System.out.println(\"MyCredentialsProvider called with foo=\" + config.getValue(credentialsProviderName + \".foo\", String.class));\n+    ...\n+----\n+\n+== New Credentials Provider extension\n+\n+When creating a custom `Credentials Provider` in a new extension, there are a few additional considerations.\n+\n+First, you need to name it to avoid collisions in case multiple credentials providers are available in the project:\n+\n+[source, java]\n+----\n+@ApplicationScoped\n+@Unremovable\n+@Named(\"my-credentials-provider\")\n+public class MyCredentialsProvider implements CredentialsProvider {\n+----\n+\n+It is the responsibility of the consumer to allow a `credentials-provider-type` property:\n+\n+[source, properties]\n+----\n+quarkus.datasource.credentials-provider = custom\n+quarkus.datasource.credentials-provider-type = my-credentials-provider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5NTU2MA=="}, "originalCommit": {"oid": "a572ea6ee0aa329402cc7aae90a5c6dc3070de69"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA1OTIwNg==", "bodyText": "I am personally in favor of making the change now if we have the time, but I'll let @gsmet decide", "url": "https://github.com/quarkusio/quarkus/pull/9552#discussion_r430059206", "createdAt": "2020-05-25T19:50:23Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/credentials-provider.adoc", "diffHunk": "@@ -0,0 +1,194 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Using a Credentials Provider\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+:vault-datasource-guide: link:vault-datasource[Vault Datasource guide]\n+\n+Interacting with a datastore typically implies first connecting using credentials.\n+Those credentials will allow the client to be identified, authenticated and eventually authorized.\n+Username/password based authentication is very common, but that is not by far the only one.\n+Such credentials information may appear in the application configuration,\n+but it is becoming increasingly popular to store this type of sensitive information in secure stores,\n+such as HashiCorp Vault, Azure Key Vault or the AWS Secrets Manager to name just a few.\n+\n+To bridge datastores that consume credentials, which can take different forms,\n+and secure stores that provide those credentials,\n+Quarkus introduces a middle abstraction called `Credentials Provider`,\n+that some extensions may support to consume credentials (e.g. `agroal`),\n+and some others may implement to produce credentials (e.g. `vault`).\n+\n+This Service Programming Interface (SPI) may also be used by implementers that want to support custom providers\n+not yet  implemented in Quarkus (e.g. Azure Key Vault ).\n+\n+Currently, the `Credentials Provider` interface is implemented by the `vault` extension, and is supported\n+by the following credentials consumer extensions:\n+\n+* `agroal`\n+* `reactive-mysql-client`\n+* `reactive-pg-client`\n+\n+All extensions that rely on username/password authentication do provide also the possibility to set configuration\n+properties in the `application.properties` as an alternative. But the `Credentials Provider` is the only option\n+if credentials are generated (e.g. `Vault Dynamic DB Credentials`) or if a custom credentials provider is required.\n+\n+This guide will show how to use the `Credentials Provider` provided in the `vault` extension,\n+then we will look at implementing a custom `Credentials Provider`, and finally we will talk about additional\n+considerations regarding implementing a `Credentials Provider` in a new extension.\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* roughly 20 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+* Docker installed\n+\n+== Vault Credentials Provider\n+\n+To configure a `Vault Credentials Provider` you need to provide the following property(ies):\n+\n+[source, properties]\n+----\n+quarkus.vault.credentials-provider.<name>.<property>=<value>\n+----\n+\n+The `<name>` will be used in the consumer to refer to this provider. The `<property>` and `<value>` fields are specific to the `Vault Credentials Provider`. For complete details, please refer to the {vault-datasource-guide}.\n+\n+For instance:\n+\n+[source, properties]\n+----\n+quarkus.vault.credentials-provider.mydatabase.kv-path=myapps/vault-quickstart/db\n+----\n+\n+Once defined, the `mydatabase` provider can be used in any extension that supports the `Credentials Provider` interface. For instance in `agroal`:\n+\n+[source, properties]\n+----\n+# configure your datasource\n+quarkus.datasource.db-kind = postgresql\n+quarkus.datasource.username = sarah\n+quarkus.datasource.credentials-provider = mydatabase\n+quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/mydatabase\n+----\n+\n+Note that `quarkus.datasource.username` is the original `agroal` property, whereas the `password` property\n+is not included because the value will come from the `mydatabase` credentials provider we just defined.\n+An alternative is to define both username and password in Vault and drop the `quarkus.datasource.username`\n+property from configuration. All consuming extensions do support the ability to fetch both the username\n+and password from the provider, or just the password.\n+\n+== Custom Credentials Provider\n+\n+Implementing a custom credentials provider is the only option when a vault product is not yet supported in Quarkus, or if credentials need to be retrieved from a custom store.\n+\n+The only interface to implement is:\n+\n+[source, java]\n+----\n+public interface CredentialsProvider {\n+\n+    String USER_PROPERTY_NAME = \"user\";\n+    String PASSWORD_PROPERTY_NAME = \"password\";\n+\n+    Map<String, String> getCredentials(String credentialsProviderName);\n+\n+}\n+----\n+\n+`USER_PROPERTY_NAME` and `PASSWORD_PROPERTY_NAME` are standard properties that should be recognized by any consuming extension that support username/password based authentication.\n+\n+Here is a simple implementation example:\n+\n+[source, java]\n+----\n+@ApplicationScoped\n+@Unremovable\n+public class MyCredentialsProvider implements CredentialsProvider {\n+\n+\t@Override\n+\tpublic Map<String, String> getCredentials(String credentialsProviderName) {\n+\n+\t\tMap<String, String> properties = new HashMap<>();\n+\t\tproperties.put(USER_PROPERTY_NAME, \"hibernate_orm_test\");\n+\t\tproperties.put(PASSWORD_PROPERTY_NAME, \"hibernate_orm_test\");\n+\t\treturn properties;\n+\t}\n+\n+}\n+----\n+\n+Note that we decided here to return both the username and the password.\n+\n+This provider may be used in a datasource definition like this:\n+\n+[source, properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.credentials-provider=custom\n+quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5431/hibernate_orm_test\n+----\n+\n+It is also possible to pass configuration properties to the provider using standard MicroProfile `Config` injection:\n+\n+[source, properties]\n+----\n+custom.foo=bar\n+----\n+\n+And in the provider implementation:\n+\n+[source, java]\n+----\n+@Inject\n+Config config;\n+\n+@Override\n+public Map<String, String> getCredentials(String credentialsProviderName) {\n+\n+    System.out.println(\"MyCredentialsProvider called with foo=\" + config.getValue(credentialsProviderName + \".foo\", String.class));\n+    ...\n+----\n+\n+== New Credentials Provider extension\n+\n+When creating a custom `Credentials Provider` in a new extension, there are a few additional considerations.\n+\n+First, you need to name it to avoid collisions in case multiple credentials providers are available in the project:\n+\n+[source, java]\n+----\n+@ApplicationScoped\n+@Unremovable\n+@Named(\"my-credentials-provider\")\n+public class MyCredentialsProvider implements CredentialsProvider {\n+----\n+\n+It is the responsibility of the consumer to allow a `credentials-provider-type` property:\n+\n+[source, properties]\n+----\n+quarkus.datasource.credentials-provider = custom\n+quarkus.datasource.credentials-provider-type = my-credentials-provider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5NTU2MA=="}, "originalCommit": {"oid": "a572ea6ee0aa329402cc7aae90a5c6dc3070de69"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI1NTk1OA==", "bodyText": "Let's go with credentials-provider-bean-name but it needs to happen fast if we want it for 1.5 as I will cut the release at the beginning of the afternoon if all goes well.", "url": "https://github.com/quarkusio/quarkus/pull/9552#discussion_r430255958", "createdAt": "2020-05-26T08:51:21Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/credentials-provider.adoc", "diffHunk": "@@ -0,0 +1,194 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Using a Credentials Provider\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+:vault-datasource-guide: link:vault-datasource[Vault Datasource guide]\n+\n+Interacting with a datastore typically implies first connecting using credentials.\n+Those credentials will allow the client to be identified, authenticated and eventually authorized.\n+Username/password based authentication is very common, but that is not by far the only one.\n+Such credentials information may appear in the application configuration,\n+but it is becoming increasingly popular to store this type of sensitive information in secure stores,\n+such as HashiCorp Vault, Azure Key Vault or the AWS Secrets Manager to name just a few.\n+\n+To bridge datastores that consume credentials, which can take different forms,\n+and secure stores that provide those credentials,\n+Quarkus introduces a middle abstraction called `Credentials Provider`,\n+that some extensions may support to consume credentials (e.g. `agroal`),\n+and some others may implement to produce credentials (e.g. `vault`).\n+\n+This Service Programming Interface (SPI) may also be used by implementers that want to support custom providers\n+not yet  implemented in Quarkus (e.g. Azure Key Vault ).\n+\n+Currently, the `Credentials Provider` interface is implemented by the `vault` extension, and is supported\n+by the following credentials consumer extensions:\n+\n+* `agroal`\n+* `reactive-mysql-client`\n+* `reactive-pg-client`\n+\n+All extensions that rely on username/password authentication do provide also the possibility to set configuration\n+properties in the `application.properties` as an alternative. But the `Credentials Provider` is the only option\n+if credentials are generated (e.g. `Vault Dynamic DB Credentials`) or if a custom credentials provider is required.\n+\n+This guide will show how to use the `Credentials Provider` provided in the `vault` extension,\n+then we will look at implementing a custom `Credentials Provider`, and finally we will talk about additional\n+considerations regarding implementing a `Credentials Provider` in a new extension.\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* roughly 20 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+* Docker installed\n+\n+== Vault Credentials Provider\n+\n+To configure a `Vault Credentials Provider` you need to provide the following property(ies):\n+\n+[source, properties]\n+----\n+quarkus.vault.credentials-provider.<name>.<property>=<value>\n+----\n+\n+The `<name>` will be used in the consumer to refer to this provider. The `<property>` and `<value>` fields are specific to the `Vault Credentials Provider`. For complete details, please refer to the {vault-datasource-guide}.\n+\n+For instance:\n+\n+[source, properties]\n+----\n+quarkus.vault.credentials-provider.mydatabase.kv-path=myapps/vault-quickstart/db\n+----\n+\n+Once defined, the `mydatabase` provider can be used in any extension that supports the `Credentials Provider` interface. For instance in `agroal`:\n+\n+[source, properties]\n+----\n+# configure your datasource\n+quarkus.datasource.db-kind = postgresql\n+quarkus.datasource.username = sarah\n+quarkus.datasource.credentials-provider = mydatabase\n+quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/mydatabase\n+----\n+\n+Note that `quarkus.datasource.username` is the original `agroal` property, whereas the `password` property\n+is not included because the value will come from the `mydatabase` credentials provider we just defined.\n+An alternative is to define both username and password in Vault and drop the `quarkus.datasource.username`\n+property from configuration. All consuming extensions do support the ability to fetch both the username\n+and password from the provider, or just the password.\n+\n+== Custom Credentials Provider\n+\n+Implementing a custom credentials provider is the only option when a vault product is not yet supported in Quarkus, or if credentials need to be retrieved from a custom store.\n+\n+The only interface to implement is:\n+\n+[source, java]\n+----\n+public interface CredentialsProvider {\n+\n+    String USER_PROPERTY_NAME = \"user\";\n+    String PASSWORD_PROPERTY_NAME = \"password\";\n+\n+    Map<String, String> getCredentials(String credentialsProviderName);\n+\n+}\n+----\n+\n+`USER_PROPERTY_NAME` and `PASSWORD_PROPERTY_NAME` are standard properties that should be recognized by any consuming extension that support username/password based authentication.\n+\n+Here is a simple implementation example:\n+\n+[source, java]\n+----\n+@ApplicationScoped\n+@Unremovable\n+public class MyCredentialsProvider implements CredentialsProvider {\n+\n+\t@Override\n+\tpublic Map<String, String> getCredentials(String credentialsProviderName) {\n+\n+\t\tMap<String, String> properties = new HashMap<>();\n+\t\tproperties.put(USER_PROPERTY_NAME, \"hibernate_orm_test\");\n+\t\tproperties.put(PASSWORD_PROPERTY_NAME, \"hibernate_orm_test\");\n+\t\treturn properties;\n+\t}\n+\n+}\n+----\n+\n+Note that we decided here to return both the username and the password.\n+\n+This provider may be used in a datasource definition like this:\n+\n+[source, properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.credentials-provider=custom\n+quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5431/hibernate_orm_test\n+----\n+\n+It is also possible to pass configuration properties to the provider using standard MicroProfile `Config` injection:\n+\n+[source, properties]\n+----\n+custom.foo=bar\n+----\n+\n+And in the provider implementation:\n+\n+[source, java]\n+----\n+@Inject\n+Config config;\n+\n+@Override\n+public Map<String, String> getCredentials(String credentialsProviderName) {\n+\n+    System.out.println(\"MyCredentialsProvider called with foo=\" + config.getValue(credentialsProviderName + \".foo\", String.class));\n+    ...\n+----\n+\n+== New Credentials Provider extension\n+\n+When creating a custom `Credentials Provider` in a new extension, there are a few additional considerations.\n+\n+First, you need to name it to avoid collisions in case multiple credentials providers are available in the project:\n+\n+[source, java]\n+----\n+@ApplicationScoped\n+@Unremovable\n+@Named(\"my-credentials-provider\")\n+public class MyCredentialsProvider implements CredentialsProvider {\n+----\n+\n+It is the responsibility of the consumer to allow a `credentials-provider-type` property:\n+\n+[source, properties]\n+----\n+quarkus.datasource.credentials-provider = custom\n+quarkus.datasource.credentials-provider-type = my-credentials-provider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5NTU2MA=="}, "originalCommit": {"oid": "a572ea6ee0aa329402cc7aae90a5c6dc3070de69"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM0OTYwOQ==", "bodyText": "credentials-provider-bean-name sounds a bit too technical (will it always be a bean ?), credentials-provider-name seems a good compromise", "url": "https://github.com/quarkusio/quarkus/pull/9552#discussion_r430349609", "createdAt": "2020-05-26T11:42:40Z", "author": {"login": "sberyozkin"}, "path": "docs/src/main/asciidoc/credentials-provider.adoc", "diffHunk": "@@ -0,0 +1,194 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Using a Credentials Provider\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+:vault-datasource-guide: link:vault-datasource[Vault Datasource guide]\n+\n+Interacting with a datastore typically implies first connecting using credentials.\n+Those credentials will allow the client to be identified, authenticated and eventually authorized.\n+Username/password based authentication is very common, but that is not by far the only one.\n+Such credentials information may appear in the application configuration,\n+but it is becoming increasingly popular to store this type of sensitive information in secure stores,\n+such as HashiCorp Vault, Azure Key Vault or the AWS Secrets Manager to name just a few.\n+\n+To bridge datastores that consume credentials, which can take different forms,\n+and secure stores that provide those credentials,\n+Quarkus introduces a middle abstraction called `Credentials Provider`,\n+that some extensions may support to consume credentials (e.g. `agroal`),\n+and some others may implement to produce credentials (e.g. `vault`).\n+\n+This Service Programming Interface (SPI) may also be used by implementers that want to support custom providers\n+not yet  implemented in Quarkus (e.g. Azure Key Vault ).\n+\n+Currently, the `Credentials Provider` interface is implemented by the `vault` extension, and is supported\n+by the following credentials consumer extensions:\n+\n+* `agroal`\n+* `reactive-mysql-client`\n+* `reactive-pg-client`\n+\n+All extensions that rely on username/password authentication do provide also the possibility to set configuration\n+properties in the `application.properties` as an alternative. But the `Credentials Provider` is the only option\n+if credentials are generated (e.g. `Vault Dynamic DB Credentials`) or if a custom credentials provider is required.\n+\n+This guide will show how to use the `Credentials Provider` provided in the `vault` extension,\n+then we will look at implementing a custom `Credentials Provider`, and finally we will talk about additional\n+considerations regarding implementing a `Credentials Provider` in a new extension.\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* roughly 20 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+* Docker installed\n+\n+== Vault Credentials Provider\n+\n+To configure a `Vault Credentials Provider` you need to provide the following property(ies):\n+\n+[source, properties]\n+----\n+quarkus.vault.credentials-provider.<name>.<property>=<value>\n+----\n+\n+The `<name>` will be used in the consumer to refer to this provider. The `<property>` and `<value>` fields are specific to the `Vault Credentials Provider`. For complete details, please refer to the {vault-datasource-guide}.\n+\n+For instance:\n+\n+[source, properties]\n+----\n+quarkus.vault.credentials-provider.mydatabase.kv-path=myapps/vault-quickstart/db\n+----\n+\n+Once defined, the `mydatabase` provider can be used in any extension that supports the `Credentials Provider` interface. For instance in `agroal`:\n+\n+[source, properties]\n+----\n+# configure your datasource\n+quarkus.datasource.db-kind = postgresql\n+quarkus.datasource.username = sarah\n+quarkus.datasource.credentials-provider = mydatabase\n+quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/mydatabase\n+----\n+\n+Note that `quarkus.datasource.username` is the original `agroal` property, whereas the `password` property\n+is not included because the value will come from the `mydatabase` credentials provider we just defined.\n+An alternative is to define both username and password in Vault and drop the `quarkus.datasource.username`\n+property from configuration. All consuming extensions do support the ability to fetch both the username\n+and password from the provider, or just the password.\n+\n+== Custom Credentials Provider\n+\n+Implementing a custom credentials provider is the only option when a vault product is not yet supported in Quarkus, or if credentials need to be retrieved from a custom store.\n+\n+The only interface to implement is:\n+\n+[source, java]\n+----\n+public interface CredentialsProvider {\n+\n+    String USER_PROPERTY_NAME = \"user\";\n+    String PASSWORD_PROPERTY_NAME = \"password\";\n+\n+    Map<String, String> getCredentials(String credentialsProviderName);\n+\n+}\n+----\n+\n+`USER_PROPERTY_NAME` and `PASSWORD_PROPERTY_NAME` are standard properties that should be recognized by any consuming extension that support username/password based authentication.\n+\n+Here is a simple implementation example:\n+\n+[source, java]\n+----\n+@ApplicationScoped\n+@Unremovable\n+public class MyCredentialsProvider implements CredentialsProvider {\n+\n+\t@Override\n+\tpublic Map<String, String> getCredentials(String credentialsProviderName) {\n+\n+\t\tMap<String, String> properties = new HashMap<>();\n+\t\tproperties.put(USER_PROPERTY_NAME, \"hibernate_orm_test\");\n+\t\tproperties.put(PASSWORD_PROPERTY_NAME, \"hibernate_orm_test\");\n+\t\treturn properties;\n+\t}\n+\n+}\n+----\n+\n+Note that we decided here to return both the username and the password.\n+\n+This provider may be used in a datasource definition like this:\n+\n+[source, properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.credentials-provider=custom\n+quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5431/hibernate_orm_test\n+----\n+\n+It is also possible to pass configuration properties to the provider using standard MicroProfile `Config` injection:\n+\n+[source, properties]\n+----\n+custom.foo=bar\n+----\n+\n+And in the provider implementation:\n+\n+[source, java]\n+----\n+@Inject\n+Config config;\n+\n+@Override\n+public Map<String, String> getCredentials(String credentialsProviderName) {\n+\n+    System.out.println(\"MyCredentialsProvider called with foo=\" + config.getValue(credentialsProviderName + \".foo\", String.class));\n+    ...\n+----\n+\n+== New Credentials Provider extension\n+\n+When creating a custom `Credentials Provider` in a new extension, there are a few additional considerations.\n+\n+First, you need to name it to avoid collisions in case multiple credentials providers are available in the project:\n+\n+[source, java]\n+----\n+@ApplicationScoped\n+@Unremovable\n+@Named(\"my-credentials-provider\")\n+public class MyCredentialsProvider implements CredentialsProvider {\n+----\n+\n+It is the responsibility of the consumer to allow a `credentials-provider-type` property:\n+\n+[source, properties]\n+----\n+quarkus.datasource.credentials-provider = custom\n+quarkus.datasource.credentials-provider-type = my-credentials-provider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5NTU2MA=="}, "originalCommit": {"oid": "a572ea6ee0aa329402cc7aae90a5c6dc3070de69"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM1MDIwNQ==", "bodyText": "Looking at the code it seems to always be a bean name.\nI am fine with the compromise suggestion", "url": "https://github.com/quarkusio/quarkus/pull/9552#discussion_r430350205", "createdAt": "2020-05-26T11:43:54Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/credentials-provider.adoc", "diffHunk": "@@ -0,0 +1,194 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Using a Credentials Provider\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+:vault-datasource-guide: link:vault-datasource[Vault Datasource guide]\n+\n+Interacting with a datastore typically implies first connecting using credentials.\n+Those credentials will allow the client to be identified, authenticated and eventually authorized.\n+Username/password based authentication is very common, but that is not by far the only one.\n+Such credentials information may appear in the application configuration,\n+but it is becoming increasingly popular to store this type of sensitive information in secure stores,\n+such as HashiCorp Vault, Azure Key Vault or the AWS Secrets Manager to name just a few.\n+\n+To bridge datastores that consume credentials, which can take different forms,\n+and secure stores that provide those credentials,\n+Quarkus introduces a middle abstraction called `Credentials Provider`,\n+that some extensions may support to consume credentials (e.g. `agroal`),\n+and some others may implement to produce credentials (e.g. `vault`).\n+\n+This Service Programming Interface (SPI) may also be used by implementers that want to support custom providers\n+not yet  implemented in Quarkus (e.g. Azure Key Vault ).\n+\n+Currently, the `Credentials Provider` interface is implemented by the `vault` extension, and is supported\n+by the following credentials consumer extensions:\n+\n+* `agroal`\n+* `reactive-mysql-client`\n+* `reactive-pg-client`\n+\n+All extensions that rely on username/password authentication do provide also the possibility to set configuration\n+properties in the `application.properties` as an alternative. But the `Credentials Provider` is the only option\n+if credentials are generated (e.g. `Vault Dynamic DB Credentials`) or if a custom credentials provider is required.\n+\n+This guide will show how to use the `Credentials Provider` provided in the `vault` extension,\n+then we will look at implementing a custom `Credentials Provider`, and finally we will talk about additional\n+considerations regarding implementing a `Credentials Provider` in a new extension.\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* roughly 20 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+* Docker installed\n+\n+== Vault Credentials Provider\n+\n+To configure a `Vault Credentials Provider` you need to provide the following property(ies):\n+\n+[source, properties]\n+----\n+quarkus.vault.credentials-provider.<name>.<property>=<value>\n+----\n+\n+The `<name>` will be used in the consumer to refer to this provider. The `<property>` and `<value>` fields are specific to the `Vault Credentials Provider`. For complete details, please refer to the {vault-datasource-guide}.\n+\n+For instance:\n+\n+[source, properties]\n+----\n+quarkus.vault.credentials-provider.mydatabase.kv-path=myapps/vault-quickstart/db\n+----\n+\n+Once defined, the `mydatabase` provider can be used in any extension that supports the `Credentials Provider` interface. For instance in `agroal`:\n+\n+[source, properties]\n+----\n+# configure your datasource\n+quarkus.datasource.db-kind = postgresql\n+quarkus.datasource.username = sarah\n+quarkus.datasource.credentials-provider = mydatabase\n+quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/mydatabase\n+----\n+\n+Note that `quarkus.datasource.username` is the original `agroal` property, whereas the `password` property\n+is not included because the value will come from the `mydatabase` credentials provider we just defined.\n+An alternative is to define both username and password in Vault and drop the `quarkus.datasource.username`\n+property from configuration. All consuming extensions do support the ability to fetch both the username\n+and password from the provider, or just the password.\n+\n+== Custom Credentials Provider\n+\n+Implementing a custom credentials provider is the only option when a vault product is not yet supported in Quarkus, or if credentials need to be retrieved from a custom store.\n+\n+The only interface to implement is:\n+\n+[source, java]\n+----\n+public interface CredentialsProvider {\n+\n+    String USER_PROPERTY_NAME = \"user\";\n+    String PASSWORD_PROPERTY_NAME = \"password\";\n+\n+    Map<String, String> getCredentials(String credentialsProviderName);\n+\n+}\n+----\n+\n+`USER_PROPERTY_NAME` and `PASSWORD_PROPERTY_NAME` are standard properties that should be recognized by any consuming extension that support username/password based authentication.\n+\n+Here is a simple implementation example:\n+\n+[source, java]\n+----\n+@ApplicationScoped\n+@Unremovable\n+public class MyCredentialsProvider implements CredentialsProvider {\n+\n+\t@Override\n+\tpublic Map<String, String> getCredentials(String credentialsProviderName) {\n+\n+\t\tMap<String, String> properties = new HashMap<>();\n+\t\tproperties.put(USER_PROPERTY_NAME, \"hibernate_orm_test\");\n+\t\tproperties.put(PASSWORD_PROPERTY_NAME, \"hibernate_orm_test\");\n+\t\treturn properties;\n+\t}\n+\n+}\n+----\n+\n+Note that we decided here to return both the username and the password.\n+\n+This provider may be used in a datasource definition like this:\n+\n+[source, properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.credentials-provider=custom\n+quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5431/hibernate_orm_test\n+----\n+\n+It is also possible to pass configuration properties to the provider using standard MicroProfile `Config` injection:\n+\n+[source, properties]\n+----\n+custom.foo=bar\n+----\n+\n+And in the provider implementation:\n+\n+[source, java]\n+----\n+@Inject\n+Config config;\n+\n+@Override\n+public Map<String, String> getCredentials(String credentialsProviderName) {\n+\n+    System.out.println(\"MyCredentialsProvider called with foo=\" + config.getValue(credentialsProviderName + \".foo\", String.class));\n+    ...\n+----\n+\n+== New Credentials Provider extension\n+\n+When creating a custom `Credentials Provider` in a new extension, there are a few additional considerations.\n+\n+First, you need to name it to avoid collisions in case multiple credentials providers are available in the project:\n+\n+[source, java]\n+----\n+@ApplicationScoped\n+@Unremovable\n+@Named(\"my-credentials-provider\")\n+public class MyCredentialsProvider implements CredentialsProvider {\n+----\n+\n+It is the responsibility of the consumer to allow a `credentials-provider-type` property:\n+\n+[source, properties]\n+----\n+quarkus.datasource.credentials-provider = custom\n+quarkus.datasource.credentials-provider-type = my-credentials-provider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5NTU2MA=="}, "originalCommit": {"oid": "a572ea6ee0aa329402cc7aae90a5c6dc3070de69"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM1MDYzMg==", "bodyText": "@gsmet I am just seeing your message now. I think the renaming is too short since there are code changes. I would suggest that you merge the doc PR, and I am creating now a different PR for the naming change, that you may decide to apply on 1.5 or not.", "url": "https://github.com/quarkusio/quarkus/pull/9552#discussion_r430350632", "createdAt": "2020-05-26T11:44:50Z", "author": {"login": "vsevel"}, "path": "docs/src/main/asciidoc/credentials-provider.adoc", "diffHunk": "@@ -0,0 +1,194 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Using a Credentials Provider\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+:vault-datasource-guide: link:vault-datasource[Vault Datasource guide]\n+\n+Interacting with a datastore typically implies first connecting using credentials.\n+Those credentials will allow the client to be identified, authenticated and eventually authorized.\n+Username/password based authentication is very common, but that is not by far the only one.\n+Such credentials information may appear in the application configuration,\n+but it is becoming increasingly popular to store this type of sensitive information in secure stores,\n+such as HashiCorp Vault, Azure Key Vault or the AWS Secrets Manager to name just a few.\n+\n+To bridge datastores that consume credentials, which can take different forms,\n+and secure stores that provide those credentials,\n+Quarkus introduces a middle abstraction called `Credentials Provider`,\n+that some extensions may support to consume credentials (e.g. `agroal`),\n+and some others may implement to produce credentials (e.g. `vault`).\n+\n+This Service Programming Interface (SPI) may also be used by implementers that want to support custom providers\n+not yet  implemented in Quarkus (e.g. Azure Key Vault ).\n+\n+Currently, the `Credentials Provider` interface is implemented by the `vault` extension, and is supported\n+by the following credentials consumer extensions:\n+\n+* `agroal`\n+* `reactive-mysql-client`\n+* `reactive-pg-client`\n+\n+All extensions that rely on username/password authentication do provide also the possibility to set configuration\n+properties in the `application.properties` as an alternative. But the `Credentials Provider` is the only option\n+if credentials are generated (e.g. `Vault Dynamic DB Credentials`) or if a custom credentials provider is required.\n+\n+This guide will show how to use the `Credentials Provider` provided in the `vault` extension,\n+then we will look at implementing a custom `Credentials Provider`, and finally we will talk about additional\n+considerations regarding implementing a `Credentials Provider` in a new extension.\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* roughly 20 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+* Docker installed\n+\n+== Vault Credentials Provider\n+\n+To configure a `Vault Credentials Provider` you need to provide the following property(ies):\n+\n+[source, properties]\n+----\n+quarkus.vault.credentials-provider.<name>.<property>=<value>\n+----\n+\n+The `<name>` will be used in the consumer to refer to this provider. The `<property>` and `<value>` fields are specific to the `Vault Credentials Provider`. For complete details, please refer to the {vault-datasource-guide}.\n+\n+For instance:\n+\n+[source, properties]\n+----\n+quarkus.vault.credentials-provider.mydatabase.kv-path=myapps/vault-quickstart/db\n+----\n+\n+Once defined, the `mydatabase` provider can be used in any extension that supports the `Credentials Provider` interface. For instance in `agroal`:\n+\n+[source, properties]\n+----\n+# configure your datasource\n+quarkus.datasource.db-kind = postgresql\n+quarkus.datasource.username = sarah\n+quarkus.datasource.credentials-provider = mydatabase\n+quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/mydatabase\n+----\n+\n+Note that `quarkus.datasource.username` is the original `agroal` property, whereas the `password` property\n+is not included because the value will come from the `mydatabase` credentials provider we just defined.\n+An alternative is to define both username and password in Vault and drop the `quarkus.datasource.username`\n+property from configuration. All consuming extensions do support the ability to fetch both the username\n+and password from the provider, or just the password.\n+\n+== Custom Credentials Provider\n+\n+Implementing a custom credentials provider is the only option when a vault product is not yet supported in Quarkus, or if credentials need to be retrieved from a custom store.\n+\n+The only interface to implement is:\n+\n+[source, java]\n+----\n+public interface CredentialsProvider {\n+\n+    String USER_PROPERTY_NAME = \"user\";\n+    String PASSWORD_PROPERTY_NAME = \"password\";\n+\n+    Map<String, String> getCredentials(String credentialsProviderName);\n+\n+}\n+----\n+\n+`USER_PROPERTY_NAME` and `PASSWORD_PROPERTY_NAME` are standard properties that should be recognized by any consuming extension that support username/password based authentication.\n+\n+Here is a simple implementation example:\n+\n+[source, java]\n+----\n+@ApplicationScoped\n+@Unremovable\n+public class MyCredentialsProvider implements CredentialsProvider {\n+\n+\t@Override\n+\tpublic Map<String, String> getCredentials(String credentialsProviderName) {\n+\n+\t\tMap<String, String> properties = new HashMap<>();\n+\t\tproperties.put(USER_PROPERTY_NAME, \"hibernate_orm_test\");\n+\t\tproperties.put(PASSWORD_PROPERTY_NAME, \"hibernate_orm_test\");\n+\t\treturn properties;\n+\t}\n+\n+}\n+----\n+\n+Note that we decided here to return both the username and the password.\n+\n+This provider may be used in a datasource definition like this:\n+\n+[source, properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.credentials-provider=custom\n+quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5431/hibernate_orm_test\n+----\n+\n+It is also possible to pass configuration properties to the provider using standard MicroProfile `Config` injection:\n+\n+[source, properties]\n+----\n+custom.foo=bar\n+----\n+\n+And in the provider implementation:\n+\n+[source, java]\n+----\n+@Inject\n+Config config;\n+\n+@Override\n+public Map<String, String> getCredentials(String credentialsProviderName) {\n+\n+    System.out.println(\"MyCredentialsProvider called with foo=\" + config.getValue(credentialsProviderName + \".foo\", String.class));\n+    ...\n+----\n+\n+== New Credentials Provider extension\n+\n+When creating a custom `Credentials Provider` in a new extension, there are a few additional considerations.\n+\n+First, you need to name it to avoid collisions in case multiple credentials providers are available in the project:\n+\n+[source, java]\n+----\n+@ApplicationScoped\n+@Unremovable\n+@Named(\"my-credentials-provider\")\n+public class MyCredentialsProvider implements CredentialsProvider {\n+----\n+\n+It is the responsibility of the consumer to allow a `credentials-provider-type` property:\n+\n+[source, properties]\n+----\n+quarkus.datasource.credentials-provider = custom\n+quarkus.datasource.credentials-provider-type = my-credentials-provider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5NTU2MA=="}, "originalCommit": {"oid": "a572ea6ee0aa329402cc7aae90a5c6dc3070de69"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzM0NTE4OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/credentials-provider.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOTo1NzoyNlrOGZ70Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOTo1NzoyNlrOGZ70Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0NzY0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            not yet  implemented in Quarkus (e.g. Azure Key Vault ).\n          \n          \n            \n            not yet  implemented in Quarkus (e.g. Azure Key Vault).", "url": "https://github.com/quarkusio/quarkus/pull/9552#discussion_r429847647", "createdAt": "2020-05-25T09:57:26Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/credentials-provider.adoc", "diffHunk": "@@ -0,0 +1,194 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Using a Credentials Provider\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+:vault-datasource-guide: link:vault-datasource[Vault Datasource guide]\n+\n+Interacting with a datastore typically implies first connecting using credentials.\n+Those credentials will allow the client to be identified, authenticated and eventually authorized.\n+Username/password based authentication is very common, but that is not by far the only one.\n+Such credentials information may appear in the application configuration,\n+but it is becoming increasingly popular to store this type of sensitive information in secure stores,\n+such as HashiCorp Vault, Azure Key Vault or the AWS Secrets Manager to name just a few.\n+\n+To bridge datastores that consume credentials, which can take different forms,\n+and secure stores that provide those credentials,\n+Quarkus introduces a middle abstraction called `Credentials Provider`,\n+that some extensions may support to consume credentials (e.g. `agroal`),\n+and some others may implement to produce credentials (e.g. `vault`).\n+\n+This Service Programming Interface (SPI) may also be used by implementers that want to support custom providers\n+not yet  implemented in Quarkus (e.g. Azure Key Vault ).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a572ea6ee0aa329402cc7aae90a5c6dc3070de69"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzM0OTI3OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/credentials-provider.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOTo1ODozOFrOGZ72zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOTo1ODozOFrOGZ72zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0ODI3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To configure a `Vault Credentials Provider` you need to provide the following property(ies):\n          \n          \n            \n            To configure a `Vault Credentials Provider` you need to provide the following properties:\n          \n      \n    \n    \n  \n\nlet's not make things awkward :)", "url": "https://github.com/quarkusio/quarkus/pull/9552#discussion_r429848270", "createdAt": "2020-05-25T09:58:38Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/credentials-provider.adoc", "diffHunk": "@@ -0,0 +1,194 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Using a Credentials Provider\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+:vault-datasource-guide: link:vault-datasource[Vault Datasource guide]\n+\n+Interacting with a datastore typically implies first connecting using credentials.\n+Those credentials will allow the client to be identified, authenticated and eventually authorized.\n+Username/password based authentication is very common, but that is not by far the only one.\n+Such credentials information may appear in the application configuration,\n+but it is becoming increasingly popular to store this type of sensitive information in secure stores,\n+such as HashiCorp Vault, Azure Key Vault or the AWS Secrets Manager to name just a few.\n+\n+To bridge datastores that consume credentials, which can take different forms,\n+and secure stores that provide those credentials,\n+Quarkus introduces a middle abstraction called `Credentials Provider`,\n+that some extensions may support to consume credentials (e.g. `agroal`),\n+and some others may implement to produce credentials (e.g. `vault`).\n+\n+This Service Programming Interface (SPI) may also be used by implementers that want to support custom providers\n+not yet  implemented in Quarkus (e.g. Azure Key Vault ).\n+\n+Currently, the `Credentials Provider` interface is implemented by the `vault` extension, and is supported\n+by the following credentials consumer extensions:\n+\n+* `agroal`\n+* `reactive-mysql-client`\n+* `reactive-pg-client`\n+\n+All extensions that rely on username/password authentication do provide also the possibility to set configuration\n+properties in the `application.properties` as an alternative. But the `Credentials Provider` is the only option\n+if credentials are generated (e.g. `Vault Dynamic DB Credentials`) or if a custom credentials provider is required.\n+\n+This guide will show how to use the `Credentials Provider` provided in the `vault` extension,\n+then we will look at implementing a custom `Credentials Provider`, and finally we will talk about additional\n+considerations regarding implementing a `Credentials Provider` in a new extension.\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* roughly 20 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+* Docker installed\n+\n+== Vault Credentials Provider\n+\n+To configure a `Vault Credentials Provider` you need to provide the following property(ies):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a572ea6ee0aa329402cc7aae90a5c6dc3070de69"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzM1NjAwOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/credentials-provider.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDowMDo1OFrOGZ77FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDowMDo1OFrOGZ77FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0OTM2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            It is also possible to pass configuration properties to the provider using standard MicroProfile `Config` injection:\n          \n          \n            \n            It is also possible to pass configuration properties to the provider using standard MicroProfile Config injection:", "url": "https://github.com/quarkusio/quarkus/pull/9552#discussion_r429849364", "createdAt": "2020-05-25T10:00:58Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/credentials-provider.adoc", "diffHunk": "@@ -0,0 +1,194 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Using a Credentials Provider\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+:vault-datasource-guide: link:vault-datasource[Vault Datasource guide]\n+\n+Interacting with a datastore typically implies first connecting using credentials.\n+Those credentials will allow the client to be identified, authenticated and eventually authorized.\n+Username/password based authentication is very common, but that is not by far the only one.\n+Such credentials information may appear in the application configuration,\n+but it is becoming increasingly popular to store this type of sensitive information in secure stores,\n+such as HashiCorp Vault, Azure Key Vault or the AWS Secrets Manager to name just a few.\n+\n+To bridge datastores that consume credentials, which can take different forms,\n+and secure stores that provide those credentials,\n+Quarkus introduces a middle abstraction called `Credentials Provider`,\n+that some extensions may support to consume credentials (e.g. `agroal`),\n+and some others may implement to produce credentials (e.g. `vault`).\n+\n+This Service Programming Interface (SPI) may also be used by implementers that want to support custom providers\n+not yet  implemented in Quarkus (e.g. Azure Key Vault ).\n+\n+Currently, the `Credentials Provider` interface is implemented by the `vault` extension, and is supported\n+by the following credentials consumer extensions:\n+\n+* `agroal`\n+* `reactive-mysql-client`\n+* `reactive-pg-client`\n+\n+All extensions that rely on username/password authentication do provide also the possibility to set configuration\n+properties in the `application.properties` as an alternative. But the `Credentials Provider` is the only option\n+if credentials are generated (e.g. `Vault Dynamic DB Credentials`) or if a custom credentials provider is required.\n+\n+This guide will show how to use the `Credentials Provider` provided in the `vault` extension,\n+then we will look at implementing a custom `Credentials Provider`, and finally we will talk about additional\n+considerations regarding implementing a `Credentials Provider` in a new extension.\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* roughly 20 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+* Docker installed\n+\n+== Vault Credentials Provider\n+\n+To configure a `Vault Credentials Provider` you need to provide the following property(ies):\n+\n+[source, properties]\n+----\n+quarkus.vault.credentials-provider.<name>.<property>=<value>\n+----\n+\n+The `<name>` will be used in the consumer to refer to this provider. The `<property>` and `<value>` fields are specific to the `Vault Credentials Provider`. For complete details, please refer to the {vault-datasource-guide}.\n+\n+For instance:\n+\n+[source, properties]\n+----\n+quarkus.vault.credentials-provider.mydatabase.kv-path=myapps/vault-quickstart/db\n+----\n+\n+Once defined, the `mydatabase` provider can be used in any extension that supports the `Credentials Provider` interface. For instance in `agroal`:\n+\n+[source, properties]\n+----\n+# configure your datasource\n+quarkus.datasource.db-kind = postgresql\n+quarkus.datasource.username = sarah\n+quarkus.datasource.credentials-provider = mydatabase\n+quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/mydatabase\n+----\n+\n+Note that `quarkus.datasource.username` is the original `agroal` property, whereas the `password` property\n+is not included because the value will come from the `mydatabase` credentials provider we just defined.\n+An alternative is to define both username and password in Vault and drop the `quarkus.datasource.username`\n+property from configuration. All consuming extensions do support the ability to fetch both the username\n+and password from the provider, or just the password.\n+\n+== Custom Credentials Provider\n+\n+Implementing a custom credentials provider is the only option when a vault product is not yet supported in Quarkus, or if credentials need to be retrieved from a custom store.\n+\n+The only interface to implement is:\n+\n+[source, java]\n+----\n+public interface CredentialsProvider {\n+\n+    String USER_PROPERTY_NAME = \"user\";\n+    String PASSWORD_PROPERTY_NAME = \"password\";\n+\n+    Map<String, String> getCredentials(String credentialsProviderName);\n+\n+}\n+----\n+\n+`USER_PROPERTY_NAME` and `PASSWORD_PROPERTY_NAME` are standard properties that should be recognized by any consuming extension that support username/password based authentication.\n+\n+Here is a simple implementation example:\n+\n+[source, java]\n+----\n+@ApplicationScoped\n+@Unremovable\n+public class MyCredentialsProvider implements CredentialsProvider {\n+\n+\t@Override\n+\tpublic Map<String, String> getCredentials(String credentialsProviderName) {\n+\n+\t\tMap<String, String> properties = new HashMap<>();\n+\t\tproperties.put(USER_PROPERTY_NAME, \"hibernate_orm_test\");\n+\t\tproperties.put(PASSWORD_PROPERTY_NAME, \"hibernate_orm_test\");\n+\t\treturn properties;\n+\t}\n+\n+}\n+----\n+\n+Note that we decided here to return both the username and the password.\n+\n+This provider may be used in a datasource definition like this:\n+\n+[source, properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.credentials-provider=custom\n+quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5431/hibernate_orm_test\n+----\n+\n+It is also possible to pass configuration properties to the provider using standard MicroProfile `Config` injection:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a572ea6ee0aa329402cc7aae90a5c6dc3070de69"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzM1NzAyOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/credentials-provider.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDowMToyNFrOGZ77xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDowMToyNFrOGZ77xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0OTU0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When creating a custom `Credentials Provider` in a new extension, there are a few additional considerations.\n          \n          \n            \n            When creating a custom credentials provider in a new extension, there are a few additional considerations.", "url": "https://github.com/quarkusio/quarkus/pull/9552#discussion_r429849543", "createdAt": "2020-05-25T10:01:24Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/credentials-provider.adoc", "diffHunk": "@@ -0,0 +1,194 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Using a Credentials Provider\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+:vault-datasource-guide: link:vault-datasource[Vault Datasource guide]\n+\n+Interacting with a datastore typically implies first connecting using credentials.\n+Those credentials will allow the client to be identified, authenticated and eventually authorized.\n+Username/password based authentication is very common, but that is not by far the only one.\n+Such credentials information may appear in the application configuration,\n+but it is becoming increasingly popular to store this type of sensitive information in secure stores,\n+such as HashiCorp Vault, Azure Key Vault or the AWS Secrets Manager to name just a few.\n+\n+To bridge datastores that consume credentials, which can take different forms,\n+and secure stores that provide those credentials,\n+Quarkus introduces a middle abstraction called `Credentials Provider`,\n+that some extensions may support to consume credentials (e.g. `agroal`),\n+and some others may implement to produce credentials (e.g. `vault`).\n+\n+This Service Programming Interface (SPI) may also be used by implementers that want to support custom providers\n+not yet  implemented in Quarkus (e.g. Azure Key Vault ).\n+\n+Currently, the `Credentials Provider` interface is implemented by the `vault` extension, and is supported\n+by the following credentials consumer extensions:\n+\n+* `agroal`\n+* `reactive-mysql-client`\n+* `reactive-pg-client`\n+\n+All extensions that rely on username/password authentication do provide also the possibility to set configuration\n+properties in the `application.properties` as an alternative. But the `Credentials Provider` is the only option\n+if credentials are generated (e.g. `Vault Dynamic DB Credentials`) or if a custom credentials provider is required.\n+\n+This guide will show how to use the `Credentials Provider` provided in the `vault` extension,\n+then we will look at implementing a custom `Credentials Provider`, and finally we will talk about additional\n+considerations regarding implementing a `Credentials Provider` in a new extension.\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* roughly 20 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+* Docker installed\n+\n+== Vault Credentials Provider\n+\n+To configure a `Vault Credentials Provider` you need to provide the following property(ies):\n+\n+[source, properties]\n+----\n+quarkus.vault.credentials-provider.<name>.<property>=<value>\n+----\n+\n+The `<name>` will be used in the consumer to refer to this provider. The `<property>` and `<value>` fields are specific to the `Vault Credentials Provider`. For complete details, please refer to the {vault-datasource-guide}.\n+\n+For instance:\n+\n+[source, properties]\n+----\n+quarkus.vault.credentials-provider.mydatabase.kv-path=myapps/vault-quickstart/db\n+----\n+\n+Once defined, the `mydatabase` provider can be used in any extension that supports the `Credentials Provider` interface. For instance in `agroal`:\n+\n+[source, properties]\n+----\n+# configure your datasource\n+quarkus.datasource.db-kind = postgresql\n+quarkus.datasource.username = sarah\n+quarkus.datasource.credentials-provider = mydatabase\n+quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/mydatabase\n+----\n+\n+Note that `quarkus.datasource.username` is the original `agroal` property, whereas the `password` property\n+is not included because the value will come from the `mydatabase` credentials provider we just defined.\n+An alternative is to define both username and password in Vault and drop the `quarkus.datasource.username`\n+property from configuration. All consuming extensions do support the ability to fetch both the username\n+and password from the provider, or just the password.\n+\n+== Custom Credentials Provider\n+\n+Implementing a custom credentials provider is the only option when a vault product is not yet supported in Quarkus, or if credentials need to be retrieved from a custom store.\n+\n+The only interface to implement is:\n+\n+[source, java]\n+----\n+public interface CredentialsProvider {\n+\n+    String USER_PROPERTY_NAME = \"user\";\n+    String PASSWORD_PROPERTY_NAME = \"password\";\n+\n+    Map<String, String> getCredentials(String credentialsProviderName);\n+\n+}\n+----\n+\n+`USER_PROPERTY_NAME` and `PASSWORD_PROPERTY_NAME` are standard properties that should be recognized by any consuming extension that support username/password based authentication.\n+\n+Here is a simple implementation example:\n+\n+[source, java]\n+----\n+@ApplicationScoped\n+@Unremovable\n+public class MyCredentialsProvider implements CredentialsProvider {\n+\n+\t@Override\n+\tpublic Map<String, String> getCredentials(String credentialsProviderName) {\n+\n+\t\tMap<String, String> properties = new HashMap<>();\n+\t\tproperties.put(USER_PROPERTY_NAME, \"hibernate_orm_test\");\n+\t\tproperties.put(PASSWORD_PROPERTY_NAME, \"hibernate_orm_test\");\n+\t\treturn properties;\n+\t}\n+\n+}\n+----\n+\n+Note that we decided here to return both the username and the password.\n+\n+This provider may be used in a datasource definition like this:\n+\n+[source, properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.credentials-provider=custom\n+quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5431/hibernate_orm_test\n+----\n+\n+It is also possible to pass configuration properties to the provider using standard MicroProfile `Config` injection:\n+\n+[source, properties]\n+----\n+custom.foo=bar\n+----\n+\n+And in the provider implementation:\n+\n+[source, java]\n+----\n+@Inject\n+Config config;\n+\n+@Override\n+public Map<String, String> getCredentials(String credentialsProviderName) {\n+\n+    System.out.println(\"MyCredentialsProvider called with foo=\" + config.getValue(credentialsProviderName + \".foo\", String.class));\n+    ...\n+----\n+\n+== New Credentials Provider extension\n+\n+When creating a custom `Credentials Provider` in a new extension, there are a few additional considerations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a572ea6ee0aa329402cc7aae90a5c6dc3070de69"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzM1OTY2OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/credentials-provider.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDowMjoyMlrOGZ79jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDowMjoyMlrOGZ79jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0OTk5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            by the credentials provider, not just the username and password. So when you design the new `Credentials Provider`\n          \n          \n            \n            by the credentials provider, not just the username and password. So when you design the new credentials provider", "url": "https://github.com/quarkusio/quarkus/pull/9552#discussion_r429849997", "createdAt": "2020-05-25T10:02:22Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/credentials-provider.adoc", "diffHunk": "@@ -0,0 +1,194 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Using a Credentials Provider\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+:vault-datasource-guide: link:vault-datasource[Vault Datasource guide]\n+\n+Interacting with a datastore typically implies first connecting using credentials.\n+Those credentials will allow the client to be identified, authenticated and eventually authorized.\n+Username/password based authentication is very common, but that is not by far the only one.\n+Such credentials information may appear in the application configuration,\n+but it is becoming increasingly popular to store this type of sensitive information in secure stores,\n+such as HashiCorp Vault, Azure Key Vault or the AWS Secrets Manager to name just a few.\n+\n+To bridge datastores that consume credentials, which can take different forms,\n+and secure stores that provide those credentials,\n+Quarkus introduces a middle abstraction called `Credentials Provider`,\n+that some extensions may support to consume credentials (e.g. `agroal`),\n+and some others may implement to produce credentials (e.g. `vault`).\n+\n+This Service Programming Interface (SPI) may also be used by implementers that want to support custom providers\n+not yet  implemented in Quarkus (e.g. Azure Key Vault ).\n+\n+Currently, the `Credentials Provider` interface is implemented by the `vault` extension, and is supported\n+by the following credentials consumer extensions:\n+\n+* `agroal`\n+* `reactive-mysql-client`\n+* `reactive-pg-client`\n+\n+All extensions that rely on username/password authentication do provide also the possibility to set configuration\n+properties in the `application.properties` as an alternative. But the `Credentials Provider` is the only option\n+if credentials are generated (e.g. `Vault Dynamic DB Credentials`) or if a custom credentials provider is required.\n+\n+This guide will show how to use the `Credentials Provider` provided in the `vault` extension,\n+then we will look at implementing a custom `Credentials Provider`, and finally we will talk about additional\n+considerations regarding implementing a `Credentials Provider` in a new extension.\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* roughly 20 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+* Docker installed\n+\n+== Vault Credentials Provider\n+\n+To configure a `Vault Credentials Provider` you need to provide the following property(ies):\n+\n+[source, properties]\n+----\n+quarkus.vault.credentials-provider.<name>.<property>=<value>\n+----\n+\n+The `<name>` will be used in the consumer to refer to this provider. The `<property>` and `<value>` fields are specific to the `Vault Credentials Provider`. For complete details, please refer to the {vault-datasource-guide}.\n+\n+For instance:\n+\n+[source, properties]\n+----\n+quarkus.vault.credentials-provider.mydatabase.kv-path=myapps/vault-quickstart/db\n+----\n+\n+Once defined, the `mydatabase` provider can be used in any extension that supports the `Credentials Provider` interface. For instance in `agroal`:\n+\n+[source, properties]\n+----\n+# configure your datasource\n+quarkus.datasource.db-kind = postgresql\n+quarkus.datasource.username = sarah\n+quarkus.datasource.credentials-provider = mydatabase\n+quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/mydatabase\n+----\n+\n+Note that `quarkus.datasource.username` is the original `agroal` property, whereas the `password` property\n+is not included because the value will come from the `mydatabase` credentials provider we just defined.\n+An alternative is to define both username and password in Vault and drop the `quarkus.datasource.username`\n+property from configuration. All consuming extensions do support the ability to fetch both the username\n+and password from the provider, or just the password.\n+\n+== Custom Credentials Provider\n+\n+Implementing a custom credentials provider is the only option when a vault product is not yet supported in Quarkus, or if credentials need to be retrieved from a custom store.\n+\n+The only interface to implement is:\n+\n+[source, java]\n+----\n+public interface CredentialsProvider {\n+\n+    String USER_PROPERTY_NAME = \"user\";\n+    String PASSWORD_PROPERTY_NAME = \"password\";\n+\n+    Map<String, String> getCredentials(String credentialsProviderName);\n+\n+}\n+----\n+\n+`USER_PROPERTY_NAME` and `PASSWORD_PROPERTY_NAME` are standard properties that should be recognized by any consuming extension that support username/password based authentication.\n+\n+Here is a simple implementation example:\n+\n+[source, java]\n+----\n+@ApplicationScoped\n+@Unremovable\n+public class MyCredentialsProvider implements CredentialsProvider {\n+\n+\t@Override\n+\tpublic Map<String, String> getCredentials(String credentialsProviderName) {\n+\n+\t\tMap<String, String> properties = new HashMap<>();\n+\t\tproperties.put(USER_PROPERTY_NAME, \"hibernate_orm_test\");\n+\t\tproperties.put(PASSWORD_PROPERTY_NAME, \"hibernate_orm_test\");\n+\t\treturn properties;\n+\t}\n+\n+}\n+----\n+\n+Note that we decided here to return both the username and the password.\n+\n+This provider may be used in a datasource definition like this:\n+\n+[source, properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.credentials-provider=custom\n+quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5431/hibernate_orm_test\n+----\n+\n+It is also possible to pass configuration properties to the provider using standard MicroProfile `Config` injection:\n+\n+[source, properties]\n+----\n+custom.foo=bar\n+----\n+\n+And in the provider implementation:\n+\n+[source, java]\n+----\n+@Inject\n+Config config;\n+\n+@Override\n+public Map<String, String> getCredentials(String credentialsProviderName) {\n+\n+    System.out.println(\"MyCredentialsProvider called with foo=\" + config.getValue(credentialsProviderName + \".foo\", String.class));\n+    ...\n+----\n+\n+== New Credentials Provider extension\n+\n+When creating a custom `Credentials Provider` in a new extension, there are a few additional considerations.\n+\n+First, you need to name it to avoid collisions in case multiple credentials providers are available in the project:\n+\n+[source, java]\n+----\n+@ApplicationScoped\n+@Unremovable\n+@Named(\"my-credentials-provider\")\n+public class MyCredentialsProvider implements CredentialsProvider {\n+----\n+\n+It is the responsibility of the consumer to allow a `credentials-provider-type` property:\n+\n+[source, properties]\n+----\n+quarkus.datasource.credentials-provider = custom\n+quarkus.datasource.credentials-provider-type = my-credentials-provider\n+----\n+\n+The extension should allow runtime config, such as the `CredentialsProviderConfig` from the `vault` extension\n+to configure any custom property in the provider. For an AWS Secrets Manager extension, this could be:\n+\n+* `region`\n+* `credentials-type`\n+* `secrets-id`\n+\n+Note also that some consumers such as `agroal` will add to their connection configuration any properties returned\n+by the credentials provider, not just the username and password. So when you design the new `Credentials Provider`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a572ea6ee0aa329402cc7aae90a5c6dc3070de69"}, "originalPosition": 192}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2976, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}