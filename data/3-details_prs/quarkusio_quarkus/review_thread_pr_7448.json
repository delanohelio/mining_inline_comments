{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNTY5MTk1", "number": 7448, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDoyNzozOVrODjSsuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjowMToyNVrODjoHAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzMzMTEyOnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDoyNzozOVrOFvBRzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjo0OToxMlrOFvj9Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0ODMzNA==", "bodyText": "Can this be called in an IO thread?", "url": "https://github.com/quarkusio/quarkus/pull/7448#discussion_r384848334", "createdAt": "2020-02-27T00:27:39Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java", "diffHunk": "@@ -119,16 +120,22 @@ public void handle(AsyncResult<OAuth2Auth> event) {\n \n                 auth = cf.join();\n                 break;\n-            } catch (OIDCException ex) {\n-                if (i + 1 < connectionRetryCount) {\n-                    try {\n-                        Thread.sleep(2000);\n-                    } catch (InterruptedException iex) {\n-                        // continue connecting\n+            } catch (Throwable throwable) {\n+                while (throwable instanceof CompletionException && throwable.getCause() != null) {\n+                    throwable = throwable.getCause();\n+                }\n+                if (throwable instanceof OIDCException) {\n+                    if (i + 1 < connectionRetryCount) {\n+                        try {\n+                            Thread.sleep(2000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cace3a4d1a503d05dbc9ce33eb726b8c8113875f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4NjE1OA==", "bodyText": "Hi Stuart @stuartwdouglas Good question, I don't know, do you mean avoid using the future at all ? It just joins till the OIDC server has been contacted, may be it is not needed. This is done at the application start up, no client requests are involved.", "url": "https://github.com/quarkusio/quarkus/pull/7448#discussion_r385086158", "createdAt": "2020-02-27T12:07:34Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java", "diffHunk": "@@ -119,16 +120,22 @@ public void handle(AsyncResult<OAuth2Auth> event) {\n \n                 auth = cf.join();\n                 break;\n-            } catch (OIDCException ex) {\n-                if (i + 1 < connectionRetryCount) {\n-                    try {\n-                        Thread.sleep(2000);\n-                    } catch (InterruptedException iex) {\n-                        // continue connecting\n+            } catch (Throwable throwable) {\n+                while (throwable instanceof CompletionException && throwable.getCause() != null) {\n+                    throwable = throwable.getCause();\n+                }\n+                if (throwable instanceof OIDCException) {\n+                    if (i + 1 < connectionRetryCount) {\n+                        try {\n+                            Thread.sleep(2000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0ODMzNA=="}, "originalCommit": {"oid": "cace3a4d1a503d05dbc9ce33eb726b8c8113875f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4ODAxMQ==", "bodyText": "@stuartwdouglas runAsync I guess, let me try, though I'd not've guessed it implies a more optimal thread consumption in this case :-)", "url": "https://github.com/quarkusio/quarkus/pull/7448#discussion_r385088011", "createdAt": "2020-02-27T12:11:26Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java", "diffHunk": "@@ -119,16 +120,22 @@ public void handle(AsyncResult<OAuth2Auth> event) {\n \n                 auth = cf.join();\n                 break;\n-            } catch (OIDCException ex) {\n-                if (i + 1 < connectionRetryCount) {\n-                    try {\n-                        Thread.sleep(2000);\n-                    } catch (InterruptedException iex) {\n-                        // continue connecting\n+            } catch (Throwable throwable) {\n+                while (throwable instanceof CompletionException && throwable.getCause() != null) {\n+                    throwable = throwable.getCause();\n+                }\n+                if (throwable instanceof OIDCException) {\n+                    if (i + 1 < connectionRetryCount) {\n+                        try {\n+                            Thread.sleep(2000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0ODMzNA=="}, "originalCommit": {"oid": "cace3a4d1a503d05dbc9ce33eb726b8c8113875f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5NjMyMA==", "bodyText": "@stuartwdouglas Should be better now", "url": "https://github.com/quarkusio/quarkus/pull/7448#discussion_r385096320", "createdAt": "2020-02-27T12:30:20Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java", "diffHunk": "@@ -119,16 +120,22 @@ public void handle(AsyncResult<OAuth2Auth> event) {\n \n                 auth = cf.join();\n                 break;\n-            } catch (OIDCException ex) {\n-                if (i + 1 < connectionRetryCount) {\n-                    try {\n-                        Thread.sleep(2000);\n-                    } catch (InterruptedException iex) {\n-                        // continue connecting\n+            } catch (Throwable throwable) {\n+                while (throwable instanceof CompletionException && throwable.getCause() != null) {\n+                    throwable = throwable.getCause();\n+                }\n+                if (throwable instanceof OIDCException) {\n+                    if (i + 1 < connectionRetryCount) {\n+                        try {\n+                            Thread.sleep(2000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0ODMzNA=="}, "originalCommit": {"oid": "cace3a4d1a503d05dbc9ce33eb726b8c8113875f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5NjM4MQ==", "bodyText": "what I was actually getting at was should we change this to register a timer and callback, rather than blocking a thread for 2s?", "url": "https://github.com/quarkusio/quarkus/pull/7448#discussion_r385396381", "createdAt": "2020-02-27T22:00:24Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java", "diffHunk": "@@ -119,16 +120,22 @@ public void handle(AsyncResult<OAuth2Auth> event) {\n \n                 auth = cf.join();\n                 break;\n-            } catch (OIDCException ex) {\n-                if (i + 1 < connectionRetryCount) {\n-                    try {\n-                        Thread.sleep(2000);\n-                    } catch (InterruptedException iex) {\n-                        // continue connecting\n+            } catch (Throwable throwable) {\n+                while (throwable instanceof CompletionException && throwable.getCause() != null) {\n+                    throwable = throwable.getCause();\n+                }\n+                if (throwable instanceof OIDCException) {\n+                    if (i + 1 < connectionRetryCount) {\n+                        try {\n+                            Thread.sleep(2000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0ODMzNA=="}, "originalCommit": {"oid": "cace3a4d1a503d05dbc9ce33eb726b8c8113875f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQxNjUzOA==", "bodyText": "@stuartwdouglas Callback to what condition though ? Vertx tells us OIDC is not contactable. It won't let us save 1 sec out of those 2 secs by calling back when OIDC becomes contactable unless this timer you are proposing will be pinging OIDC every 100 milliseconds. Is it what you suggest be done here ? I'm not sure it is really worth it, we are not dealing with the actual client request here. May be just reducing a wait period from 2 secs to 200 milliseconds is a simpler version of the timer/callback approach ?", "url": "https://github.com/quarkusio/quarkus/pull/7448#discussion_r385416538", "createdAt": "2020-02-27T22:49:12Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java", "diffHunk": "@@ -119,16 +120,22 @@ public void handle(AsyncResult<OAuth2Auth> event) {\n \n                 auth = cf.join();\n                 break;\n-            } catch (OIDCException ex) {\n-                if (i + 1 < connectionRetryCount) {\n-                    try {\n-                        Thread.sleep(2000);\n-                    } catch (InterruptedException iex) {\n-                        // continue connecting\n+            } catch (Throwable throwable) {\n+                while (throwable instanceof CompletionException && throwable.getCause() != null) {\n+                    throwable = throwable.getCause();\n+                }\n+                if (throwable instanceof OIDCException) {\n+                    if (i + 1 < connectionRetryCount) {\n+                        try {\n+                            Thread.sleep(2000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg0ODMzNA=="}, "originalCommit": {"oid": "cace3a4d1a503d05dbc9ce33eb726b8c8113875f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjgzNzk5OnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjowMDo1N1rOFvivtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjo1MDowNVrOFvj-iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5NjY2MQ==", "bodyText": "runAsync should never be used, it uses the default fork join pool that we have no control over.", "url": "https://github.com/quarkusio/quarkus/pull/7448#discussion_r385396661", "createdAt": "2020-02-27T22:00:57Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java", "diffHunk": "@@ -119,16 +120,29 @@ public void handle(AsyncResult<OAuth2Auth> event) {\n \n                 auth = cf.join();\n                 break;\n-            } catch (OIDCException ex) {\n-                if (i + 1 < connectionRetryCount) {\n-                    try {\n-                        Thread.sleep(2000);\n-                    } catch (InterruptedException iex) {\n-                        // continue connecting\n+            } catch (Throwable throwable) {\n+                while (throwable instanceof CompletionException && throwable.getCause() != null) {\n+                    throwable = throwable.getCause();\n+                }\n+                if (throwable instanceof OIDCException) {\n+                    if (i + 1 < connectionRetryCount) {\n+                        CompletableFuture.runAsync(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cef6530304e67282788d2cd025bee45dd43b9c5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQxNjg0Mw==", "bodyText": "Right, recall you were saying in context of the CL work...", "url": "https://github.com/quarkusio/quarkus/pull/7448#discussion_r385416843", "createdAt": "2020-02-27T22:50:05Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java", "diffHunk": "@@ -119,16 +120,29 @@ public void handle(AsyncResult<OAuth2Auth> event) {\n \n                 auth = cf.join();\n                 break;\n-            } catch (OIDCException ex) {\n-                if (i + 1 < connectionRetryCount) {\n-                    try {\n-                        Thread.sleep(2000);\n-                    } catch (InterruptedException iex) {\n-                        // continue connecting\n+            } catch (Throwable throwable) {\n+                while (throwable instanceof CompletionException && throwable.getCause() != null) {\n+                    throwable = throwable.getCause();\n+                }\n+                if (throwable instanceof OIDCException) {\n+                    if (i + 1 < connectionRetryCount) {\n+                        CompletableFuture.runAsync(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5NjY2MQ=="}, "originalCommit": {"oid": "4cef6530304e67282788d2cd025bee45dd43b9c5"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjgzOTA3OnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjowMToyNVrOFviwdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoxMjowNlrOFwZ_sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5Njg1Mg==", "bodyText": "Also this blocks the thread anyway, so now you are blocking 2 threads instead of just one.", "url": "https://github.com/quarkusio/quarkus/pull/7448#discussion_r385396852", "createdAt": "2020-02-27T22:01:25Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java", "diffHunk": "@@ -119,16 +120,29 @@ public void handle(AsyncResult<OAuth2Auth> event) {\n \n                 auth = cf.join();\n                 break;\n-            } catch (OIDCException ex) {\n-                if (i + 1 < connectionRetryCount) {\n-                    try {\n-                        Thread.sleep(2000);\n-                    } catch (InterruptedException iex) {\n-                        // continue connecting\n+            } catch (Throwable throwable) {\n+                while (throwable instanceof CompletionException && throwable.getCause() != null) {\n+                    throwable = throwable.getCause();\n+                }\n+                if (throwable instanceof OIDCException) {\n+                    if (i + 1 < connectionRetryCount) {\n+                        CompletableFuture.runAsync(\n+                                new Runnable() {\n+                                    @Override\n+                                    public void run() {\n+                                        try {\n+                                            Thread.sleep(2000);\n+                                        } catch (InterruptedException iex) {\n+                                            // continue connecting\n+                                        }\n+                                    }\n+                                })\n+                                .join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cef6530304e67282788d2cd025bee45dd43b9c5"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQxNzU3MA==", "bodyText": "Well it can be concluded I did not draw the right conclusion based on the io thread proposal :-)", "url": "https://github.com/quarkusio/quarkus/pull/7448#discussion_r385417570", "createdAt": "2020-02-27T22:52:07Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java", "diffHunk": "@@ -119,16 +120,29 @@ public void handle(AsyncResult<OAuth2Auth> event) {\n \n                 auth = cf.join();\n                 break;\n-            } catch (OIDCException ex) {\n-                if (i + 1 < connectionRetryCount) {\n-                    try {\n-                        Thread.sleep(2000);\n-                    } catch (InterruptedException iex) {\n-                        // continue connecting\n+            } catch (Throwable throwable) {\n+                while (throwable instanceof CompletionException && throwable.getCause() != null) {\n+                    throwable = throwable.getCause();\n+                }\n+                if (throwable instanceof OIDCException) {\n+                    if (i + 1 < connectionRetryCount) {\n+                        CompletableFuture.runAsync(\n+                                new Runnable() {\n+                                    @Override\n+                                    public void run() {\n+                                        try {\n+                                            Thread.sleep(2000);\n+                                        } catch (InterruptedException iex) {\n+                                            // continue connecting\n+                                        }\n+                                    }\n+                                })\n+                                .join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5Njg1Mg=="}, "originalCommit": {"oid": "4cef6530304e67282788d2cd025bee45dd43b9c5"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE5NjQ1Mw==", "bodyText": "I misread this, I thought it was happening at runtime. It's not ideal that it connects to each tenant sequentially but it is probably fine for now, sorry for the noise.", "url": "https://github.com/quarkusio/quarkus/pull/7448#discussion_r386196453", "createdAt": "2020-03-02T04:50:39Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java", "diffHunk": "@@ -119,16 +120,29 @@ public void handle(AsyncResult<OAuth2Auth> event) {\n \n                 auth = cf.join();\n                 break;\n-            } catch (OIDCException ex) {\n-                if (i + 1 < connectionRetryCount) {\n-                    try {\n-                        Thread.sleep(2000);\n-                    } catch (InterruptedException iex) {\n-                        // continue connecting\n+            } catch (Throwable throwable) {\n+                while (throwable instanceof CompletionException && throwable.getCause() != null) {\n+                    throwable = throwable.getCause();\n+                }\n+                if (throwable instanceof OIDCException) {\n+                    if (i + 1 < connectionRetryCount) {\n+                        CompletableFuture.runAsync(\n+                                new Runnable() {\n+                                    @Override\n+                                    public void run() {\n+                                        try {\n+                                            Thread.sleep(2000);\n+                                        } catch (InterruptedException iex) {\n+                                            // continue connecting\n+                                        }\n+                                    }\n+                                })\n+                                .join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5Njg1Mg=="}, "originalCommit": {"oid": "4cef6530304e67282788d2cd025bee45dd43b9c5"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwMTg3Mg==", "bodyText": "@stuartwdouglas Hi Stuart, no problems at all, it has been awhile since I had to think so hard, trying to figure out how to link all those Functions and Consumers :-).\nGood point about the runtime, in fact we have 2 cases here, one is when the static TenantContextConfigs are created, those in the application.properties and a new case when the multi-tenancy resolvers may need it, during the client request, and I was thinking may be we should not even support the connection-delay property in this latter case, if someone sets to even 10 sec it won't be good. This property has been added to help in the cases when at the initial start up, the OIDC server is a few secs behind, to help with the tests mainly...I'll create a small issue afterwards, so that we can decide if to ignore this property in those cases or if not then at least make the more optimal use of the current io thread as per your proposal", "url": "https://github.com/quarkusio/quarkus/pull/7448#discussion_r386301872", "createdAt": "2020-03-02T10:12:06Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java", "diffHunk": "@@ -119,16 +120,29 @@ public void handle(AsyncResult<OAuth2Auth> event) {\n \n                 auth = cf.join();\n                 break;\n-            } catch (OIDCException ex) {\n-                if (i + 1 < connectionRetryCount) {\n-                    try {\n-                        Thread.sleep(2000);\n-                    } catch (InterruptedException iex) {\n-                        // continue connecting\n+            } catch (Throwable throwable) {\n+                while (throwable instanceof CompletionException && throwable.getCause() != null) {\n+                    throwable = throwable.getCause();\n+                }\n+                if (throwable instanceof OIDCException) {\n+                    if (i + 1 < connectionRetryCount) {\n+                        CompletableFuture.runAsync(\n+                                new Runnable() {\n+                                    @Override\n+                                    public void run() {\n+                                        try {\n+                                            Thread.sleep(2000);\n+                                        } catch (InterruptedException iex) {\n+                                            // continue connecting\n+                                        }\n+                                    }\n+                                })\n+                                .join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5Njg1Mg=="}, "originalCommit": {"oid": "4cef6530304e67282788d2cd025bee45dd43b9c5"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4995, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}