{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMjMwOTg2", "number": 7439, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzowMzoyNVrODjEUQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoxNDoxN1rODjEhkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDk3NDc1OnYy", "diffSide": "RIGHT", "path": "extensions/kubernetes/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzowMzoyNVrOFuqqKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzowNjowMlrOFuqvIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ3NzczOA==", "bodyText": "Maybe it would be nice to log.debug here", "url": "https://github.com/quarkusio/quarkus/pull/7439#discussion_r384477738", "createdAt": "2020-02-26T13:03:25Z", "author": {"login": "gastaldi"}, "path": "extensions/kubernetes/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "diffHunk": "@@ -200,6 +200,11 @@ public void build(ApplicationInfoBuildItem applicationInfo,\n                             resourceEntry.getValue().getBytes(StandardCharsets.UTF_8)));\n         }\n \n+        try {\n+            Files.delete(root);\n+        } catch (IOException ignored) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b95e4a131ddb6ad4e55fc77868a7d39963ec5bb"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ3OTAxMA==", "bodyText": "Sure, fixed", "url": "https://github.com/quarkusio/quarkus/pull/7439#discussion_r384479010", "createdAt": "2020-02-26T13:06:02Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "diffHunk": "@@ -200,6 +200,11 @@ public void build(ApplicationInfoBuildItem applicationInfo,\n                             resourceEntry.getValue().getBytes(StandardCharsets.UTF_8)));\n         }\n \n+        try {\n+            Files.delete(root);\n+        } catch (IOException ignored) {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ3NzczOA=="}, "originalCommit": {"oid": "7b95e4a131ddb6ad4e55fc77868a7d39963ec5bb"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDk3Nzg0OnYy", "diffSide": "RIGHT", "path": "test-framework/junit5-internal/src/main/java/io/quarkus/test/QuarkusProdModeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzowNDoxOVrOFuqsBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzowNTowMlrOFuqtLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ3ODIxNQ==", "bodyText": "Can we use a logger here instead?", "url": "https://github.com/quarkusio/quarkus/pull/7439#discussion_r384478215", "createdAt": "2020-02-26T13:04:19Z", "author": {"login": "gastaldi"}, "path": "test-framework/junit5-internal/src/main/java/io/quarkus/test/QuarkusProdModeTest.java", "diffHunk": "@@ -237,48 +240,53 @@ public void run() {\n             exportArchive(deploymentDir, testClass);\n \n             Path testLocation = PathTestHelper.getTestClassesLocation(testClass);\n-            try {\n-                QuarkusBootstrap.Builder builder = QuarkusBootstrap.builder(deploymentDir)\n-                        .setMode(QuarkusBootstrap.Mode.PROD)\n-                        .setLocalProjectDiscovery(true)\n-                        .addExcludedPath(testLocation)\n-                        .setProjectRoot(testLocation)\n-                        .setTargetDirectory(buildDir)\n-                        .setForcedDependencies(forcedDependencies.stream().map(d -> new AppDependency(d, \"compile\"))\n-                                .collect(Collectors.toList()));\n-                if (applicationName != null) {\n-                    builder.setBaseName(applicationName);\n-                }\n-                curatedApplication = builder.build().bootstrap();\n+            QuarkusBootstrap.Builder builder = QuarkusBootstrap.builder(deploymentDir)\n+                    .setMode(QuarkusBootstrap.Mode.PROD)\n+                    .setLocalProjectDiscovery(true)\n+                    .addExcludedPath(testLocation)\n+                    .setProjectRoot(testLocation)\n+                    .setTargetDirectory(buildDir)\n+                    .setForcedDependencies(forcedDependencies.stream().map(d -> new AppDependency(d, \"compile\"))\n+                            .collect(Collectors.toList()));\n+            if (applicationName != null) {\n+                builder.setBaseName(applicationName);\n+            }\n+            curatedApplication = builder.build().bootstrap();\n \n-                AugmentAction action = curatedApplication.createAugmentor();\n-                AugmentResult result = action.createProductionApplication();\n+            AugmentAction action = curatedApplication.createAugmentor();\n+            AugmentResult result = action.createProductionApplication();\n \n-                Path builtResultArtifact = setupProdModeResults(testClass, buildDir, result);\n+            Path builtResultArtifact = setupProdModeResults(testClass, buildDir, result);\n \n-                if (run) {\n-                    startBuiltResult(builtResultArtifact);\n-                    RestAssuredURLManager.setURL(false,\n-                            runtimeProperties.get(QUARKUS_HTTP_PORT_PROPERTY) != null\n-                                    ? Integer.parseInt(runtimeProperties.get(QUARKUS_HTTP_PORT_PROPERTY))\n-                                    : DEFAULT_HTTP_PORT_INT);\n+            if (run) {\n+                startBuiltResult(builtResultArtifact);\n+                RestAssuredURLManager.setURL(false,\n+                        runtimeProperties.get(QUARKUS_HTTP_PORT_PROPERTY) != null\n+                                ? Integer.parseInt(runtimeProperties.get(QUARKUS_HTTP_PORT_PROPERTY))\n+                                : DEFAULT_HTTP_PORT_INT);\n \n-                    if (logfilePath != null) {\n-                        logfileField = Arrays.stream(testClass.getDeclaredFields()).filter(\n-                                f -> f.isAnnotationPresent(LogFile.class) && Path.class.equals(f.getType()))\n-                                .findAny();\n-                        logfileField.ifPresent(f -> f.setAccessible(true));\n-                    }\n+                if (logfilePath != null) {\n+                    logfileField = Arrays.stream(testClass.getDeclaredFields()).filter(\n+                            f -> f.isAnnotationPresent(LogFile.class) && Path.class.equals(f.getType()))\n+                            .findAny();\n+                    logfileField.ifPresent(f -> f.setAccessible(true));\n                 }\n-\n-            } catch (Throwable e) {\n-                throw e;\n             }\n+\n         } catch (Exception e) {\n+            preventOutputDirCleanup = true;\n+            logOutputPathForPostMortem();\n             throw new RuntimeException(e);\n         }\n     }\n \n+    private void logOutputPathForPostMortem() {\n+        if (buildDir != null) {\n+            String message = \"The output of the Quarkus build can be found at \" + buildDir.toAbsolutePath().toString();\n+            System.err.println(message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b95e4a131ddb6ad4e55fc77868a7d39963ec5bb"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ3ODUxMA==", "bodyText": "I tried, it didn't work :)", "url": "https://github.com/quarkusio/quarkus/pull/7439#discussion_r384478510", "createdAt": "2020-02-26T13:05:02Z", "author": {"login": "geoand"}, "path": "test-framework/junit5-internal/src/main/java/io/quarkus/test/QuarkusProdModeTest.java", "diffHunk": "@@ -237,48 +240,53 @@ public void run() {\n             exportArchive(deploymentDir, testClass);\n \n             Path testLocation = PathTestHelper.getTestClassesLocation(testClass);\n-            try {\n-                QuarkusBootstrap.Builder builder = QuarkusBootstrap.builder(deploymentDir)\n-                        .setMode(QuarkusBootstrap.Mode.PROD)\n-                        .setLocalProjectDiscovery(true)\n-                        .addExcludedPath(testLocation)\n-                        .setProjectRoot(testLocation)\n-                        .setTargetDirectory(buildDir)\n-                        .setForcedDependencies(forcedDependencies.stream().map(d -> new AppDependency(d, \"compile\"))\n-                                .collect(Collectors.toList()));\n-                if (applicationName != null) {\n-                    builder.setBaseName(applicationName);\n-                }\n-                curatedApplication = builder.build().bootstrap();\n+            QuarkusBootstrap.Builder builder = QuarkusBootstrap.builder(deploymentDir)\n+                    .setMode(QuarkusBootstrap.Mode.PROD)\n+                    .setLocalProjectDiscovery(true)\n+                    .addExcludedPath(testLocation)\n+                    .setProjectRoot(testLocation)\n+                    .setTargetDirectory(buildDir)\n+                    .setForcedDependencies(forcedDependencies.stream().map(d -> new AppDependency(d, \"compile\"))\n+                            .collect(Collectors.toList()));\n+            if (applicationName != null) {\n+                builder.setBaseName(applicationName);\n+            }\n+            curatedApplication = builder.build().bootstrap();\n \n-                AugmentAction action = curatedApplication.createAugmentor();\n-                AugmentResult result = action.createProductionApplication();\n+            AugmentAction action = curatedApplication.createAugmentor();\n+            AugmentResult result = action.createProductionApplication();\n \n-                Path builtResultArtifact = setupProdModeResults(testClass, buildDir, result);\n+            Path builtResultArtifact = setupProdModeResults(testClass, buildDir, result);\n \n-                if (run) {\n-                    startBuiltResult(builtResultArtifact);\n-                    RestAssuredURLManager.setURL(false,\n-                            runtimeProperties.get(QUARKUS_HTTP_PORT_PROPERTY) != null\n-                                    ? Integer.parseInt(runtimeProperties.get(QUARKUS_HTTP_PORT_PROPERTY))\n-                                    : DEFAULT_HTTP_PORT_INT);\n+            if (run) {\n+                startBuiltResult(builtResultArtifact);\n+                RestAssuredURLManager.setURL(false,\n+                        runtimeProperties.get(QUARKUS_HTTP_PORT_PROPERTY) != null\n+                                ? Integer.parseInt(runtimeProperties.get(QUARKUS_HTTP_PORT_PROPERTY))\n+                                : DEFAULT_HTTP_PORT_INT);\n \n-                    if (logfilePath != null) {\n-                        logfileField = Arrays.stream(testClass.getDeclaredFields()).filter(\n-                                f -> f.isAnnotationPresent(LogFile.class) && Path.class.equals(f.getType()))\n-                                .findAny();\n-                        logfileField.ifPresent(f -> f.setAccessible(true));\n-                    }\n+                if (logfilePath != null) {\n+                    logfileField = Arrays.stream(testClass.getDeclaredFields()).filter(\n+                            f -> f.isAnnotationPresent(LogFile.class) && Path.class.equals(f.getType()))\n+                            .findAny();\n+                    logfileField.ifPresent(f -> f.setAccessible(true));\n                 }\n-\n-            } catch (Throwable e) {\n-                throw e;\n             }\n+\n         } catch (Exception e) {\n+            preventOutputDirCleanup = true;\n+            logOutputPathForPostMortem();\n             throw new RuntimeException(e);\n         }\n     }\n \n+    private void logOutputPathForPostMortem() {\n+        if (buildDir != null) {\n+            String message = \"The output of the Quarkus build can be found at \" + buildDir.toAbsolutePath().toString();\n+            System.err.println(message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ3ODIxNQ=="}, "originalCommit": {"oid": "7b95e4a131ddb6ad4e55fc77868a7d39963ec5bb"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDk5ODgzOnYy", "diffSide": "RIGHT", "path": "extensions/kubernetes/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoxMToxN1rOFuq5Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoxMjoyNFrOFuq7cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4MTU5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOG.debug(\"Unable to delete file\", e);\n          \n          \n            \n                        LOG.debug(\"Unable to delete \" + root, e);", "url": "https://github.com/quarkusio/quarkus/pull/7439#discussion_r384481590", "createdAt": "2020-02-26T13:11:17Z", "author": {"login": "gastaldi"}, "path": "extensions/kubernetes/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "diffHunk": "@@ -200,6 +200,11 @@ public void build(ApplicationInfoBuildItem applicationInfo,\n                             resourceEntry.getValue().getBytes(StandardCharsets.UTF_8)));\n         }\n \n+        try {\n+            Files.delete(root);\n+        } catch (IOException e) {\n+            LOG.debug(\"Unable to delete file\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6266c065e78fcd078bd5ef5393ea59e36b52c0a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4MjE2Mg==", "bodyText": "Done", "url": "https://github.com/quarkusio/quarkus/pull/7439#discussion_r384482162", "createdAt": "2020-02-26T13:12:24Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "diffHunk": "@@ -200,6 +200,11 @@ public void build(ApplicationInfoBuildItem applicationInfo,\n                             resourceEntry.getValue().getBytes(StandardCharsets.UTF_8)));\n         }\n \n+        try {\n+            Files.delete(root);\n+        } catch (IOException e) {\n+            LOG.debug(\"Unable to delete file\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4MTU5MA=="}, "originalCommit": {"oid": "c6266c065e78fcd078bd5ef5393ea59e36b52c0a"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTAwODgxOnYy", "diffSide": "RIGHT", "path": "extensions/kubernetes/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoxNDoxN1rOFuq_Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoxOTo1NlrOFurK0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4MzEzOQ==", "bodyText": "root is a directory, you need to recurse into its subfolders to delete it", "url": "https://github.com/quarkusio/quarkus/pull/7439#discussion_r384483139", "createdAt": "2020-02-26T13:14:17Z", "author": {"login": "gastaldi"}, "path": "extensions/kubernetes/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "diffHunk": "@@ -200,6 +200,11 @@ public void build(ApplicationInfoBuildItem applicationInfo,\n                             resourceEntry.getValue().getBytes(StandardCharsets.UTF_8)));\n         }\n \n+        try {\n+            Files.delete(root);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f11827b494f948b7a01d9c5705e7c995d09800d5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4MzM2NA==", "bodyText": "I think there is an utility method somewhere", "url": "https://github.com/quarkusio/quarkus/pull/7439#discussion_r384483364", "createdAt": "2020-02-26T13:14:43Z", "author": {"login": "gastaldi"}, "path": "extensions/kubernetes/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "diffHunk": "@@ -200,6 +200,11 @@ public void build(ApplicationInfoBuildItem applicationInfo,\n                             resourceEntry.getValue().getBytes(StandardCharsets.UTF_8)));\n         }\n \n+        try {\n+            Files.delete(root);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4MzEzOQ=="}, "originalCommit": {"oid": "f11827b494f948b7a01d9c5705e7c995d09800d5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4NDEzOA==", "bodyText": "io.quarkus.deployment.util.FileUtil#deleteDirectory", "url": "https://github.com/quarkusio/quarkus/pull/7439#discussion_r384484138", "createdAt": "2020-02-26T13:16:05Z", "author": {"login": "gastaldi"}, "path": "extensions/kubernetes/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "diffHunk": "@@ -200,6 +200,11 @@ public void build(ApplicationInfoBuildItem applicationInfo,\n                             resourceEntry.getValue().getBytes(StandardCharsets.UTF_8)));\n         }\n \n+        try {\n+            Files.delete(root);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4MzEzOQ=="}, "originalCommit": {"oid": "f11827b494f948b7a01d9c5705e7c995d09800d5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4NDQ2MQ==", "bodyText": "Actually we don't because the contents have already been deleted by Dekorate. But Dekorate doesn't delete the directory itself, which is what this commit addresses", "url": "https://github.com/quarkusio/quarkus/pull/7439#discussion_r384484461", "createdAt": "2020-02-26T13:16:40Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "diffHunk": "@@ -200,6 +200,11 @@ public void build(ApplicationInfoBuildItem applicationInfo,\n                             resourceEntry.getValue().getBytes(StandardCharsets.UTF_8)));\n         }\n \n+        try {\n+            Files.delete(root);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4MzEzOQ=="}, "originalCommit": {"oid": "f11827b494f948b7a01d9c5705e7c995d09800d5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4NDYwOQ==", "bodyText": "or io.quarkus.bootstrap.util.IoUtils#recursiveDelete", "url": "https://github.com/quarkusio/quarkus/pull/7439#discussion_r384484609", "createdAt": "2020-02-26T13:16:58Z", "author": {"login": "gastaldi"}, "path": "extensions/kubernetes/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "diffHunk": "@@ -200,6 +200,11 @@ public void build(ApplicationInfoBuildItem applicationInfo,\n                             resourceEntry.getValue().getBytes(StandardCharsets.UTF_8)));\n         }\n \n+        try {\n+            Files.delete(root);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4MzEzOQ=="}, "originalCommit": {"oid": "f11827b494f948b7a01d9c5705e7c995d09800d5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4NTgxMg==", "bodyText": "Note: we should really merge similar utility methods someday :)", "url": "https://github.com/quarkusio/quarkus/pull/7439#discussion_r384485812", "createdAt": "2020-02-26T13:19:18Z", "author": {"login": "gastaldi"}, "path": "extensions/kubernetes/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "diffHunk": "@@ -200,6 +200,11 @@ public void build(ApplicationInfoBuildItem applicationInfo,\n                             resourceEntry.getValue().getBytes(StandardCharsets.UTF_8)));\n         }\n \n+        try {\n+            Files.delete(root);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4MzEzOQ=="}, "originalCommit": {"oid": "f11827b494f948b7a01d9c5705e7c995d09800d5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4NjA5OA==", "bodyText": "In any case, I added it and made it a little more fool-proof", "url": "https://github.com/quarkusio/quarkus/pull/7439#discussion_r384486098", "createdAt": "2020-02-26T13:19:56Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "diffHunk": "@@ -200,6 +200,11 @@ public void build(ApplicationInfoBuildItem applicationInfo,\n                             resourceEntry.getValue().getBytes(StandardCharsets.UTF_8)));\n         }\n \n+        try {\n+            Files.delete(root);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4MzEzOQ=="}, "originalCommit": {"oid": "f11827b494f948b7a01d9c5705e7c995d09800d5"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4986, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}