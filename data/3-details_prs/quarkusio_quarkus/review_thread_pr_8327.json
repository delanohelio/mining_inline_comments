{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2OTEzNDg2", "number": 8327, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNDoyNjoxMlrODtjpsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNDo0ODoyM1rODtkSNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDk2NjI0OnYy", "diffSide": "RIGHT", "path": "test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/CreateMockitoMocksCallback.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNDoyNjoxMlrOF_DNTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjo0Njo0MVrOF_dXxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY1NzE2NQ==", "bodyText": "If you store the InstanceHandle you can use it later to destroy a @Dependent bean correctly. See io.quarkus.arc.InstanceHandle.close().", "url": "https://github.com/quarkusio/quarkus/pull/8327#discussion_r401657165", "createdAt": "2020-04-01T14:26:12Z", "author": {"login": "mkouba"}, "path": "test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/CreateMockitoMocksCallback.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package io.quarkus.test.junit.mockito.internal;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Qualifier;\n+\n+import org.mockito.Mockito;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.arc.InstanceHandle;\n+import io.quarkus.test.junit.callback.QuarkusTestBeforeAllCallback;\n+import io.quarkus.test.junit.mockito.MockBean;\n+\n+public class CreateMockitoMocksCallback implements QuarkusTestBeforeAllCallback {\n+\n+    @Override\n+    public void beforeAll(Object testInstance) {\n+        Class<?> current = testInstance.getClass();\n+        while (current.getSuperclass() != null) {\n+            for (Field field : current.getDeclaredFields()) {\n+                MockBean mockBeanAnnotation = field.getAnnotation(MockBean.class);\n+                if (mockBeanAnnotation != null) {\n+                    Object beanInstance = getBeanInstance(testInstance, field);\n+                    Object mock = createMockAndSetTestField(testInstance, field, beanInstance);\n+                    MockitoMocksTracker.track(testInstance, mock, beanInstance);\n+                }\n+            }\n+            current = current.getSuperclass();\n+        }\n+    }\n+\n+    private Object createMockAndSetTestField(Object testInstance, Field field, Object beanInstance) {\n+        Object mock = Mockito.mock(beanInstance.getClass());\n+        field.setAccessible(true);\n+        try {\n+            field.set(testInstance, mock);\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return mock;\n+    }\n+\n+    private Object getBeanInstance(Object testInstance, Field field) {\n+        Class<?> fieldClass = field.getType();\n+        InstanceHandle<?> instance = Arc.container().instance(fieldClass, getQualifiers(field));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa3f510a221c4301fac90bd6bd302de4238af9f9"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkyNzg5Ng==", "bodyText": "We can't really mock @dependent beans anyway.", "url": "https://github.com/quarkusio/quarkus/pull/8327#discussion_r401927896", "createdAt": "2020-04-01T21:43:43Z", "author": {"login": "stuartwdouglas"}, "path": "test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/CreateMockitoMocksCallback.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package io.quarkus.test.junit.mockito.internal;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Qualifier;\n+\n+import org.mockito.Mockito;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.arc.InstanceHandle;\n+import io.quarkus.test.junit.callback.QuarkusTestBeforeAllCallback;\n+import io.quarkus.test.junit.mockito.MockBean;\n+\n+public class CreateMockitoMocksCallback implements QuarkusTestBeforeAllCallback {\n+\n+    @Override\n+    public void beforeAll(Object testInstance) {\n+        Class<?> current = testInstance.getClass();\n+        while (current.getSuperclass() != null) {\n+            for (Field field : current.getDeclaredFields()) {\n+                MockBean mockBeanAnnotation = field.getAnnotation(MockBean.class);\n+                if (mockBeanAnnotation != null) {\n+                    Object beanInstance = getBeanInstance(testInstance, field);\n+                    Object mock = createMockAndSetTestField(testInstance, field, beanInstance);\n+                    MockitoMocksTracker.track(testInstance, mock, beanInstance);\n+                }\n+            }\n+            current = current.getSuperclass();\n+        }\n+    }\n+\n+    private Object createMockAndSetTestField(Object testInstance, Field field, Object beanInstance) {\n+        Object mock = Mockito.mock(beanInstance.getClass());\n+        field.setAccessible(true);\n+        try {\n+            field.set(testInstance, mock);\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return mock;\n+    }\n+\n+    private Object getBeanInstance(Object testInstance, Field field) {\n+        Class<?> fieldClass = field.getType();\n+        InstanceHandle<?> instance = Arc.container().instance(fieldClass, getQualifiers(field));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY1NzE2NQ=="}, "originalCommit": {"oid": "fa3f510a221c4301fac90bd6bd302de4238af9f9"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA0ODM2OA==", "bodyText": "Hm... Here we aren't storing the references, just using them to check and then obtain the bean. So we don't need to close them anywhere, no?", "url": "https://github.com/quarkusio/quarkus/pull/8327#discussion_r402048368", "createdAt": "2020-04-02T04:43:43Z", "author": {"login": "geoand"}, "path": "test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/CreateMockitoMocksCallback.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package io.quarkus.test.junit.mockito.internal;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Qualifier;\n+\n+import org.mockito.Mockito;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.arc.InstanceHandle;\n+import io.quarkus.test.junit.callback.QuarkusTestBeforeAllCallback;\n+import io.quarkus.test.junit.mockito.MockBean;\n+\n+public class CreateMockitoMocksCallback implements QuarkusTestBeforeAllCallback {\n+\n+    @Override\n+    public void beforeAll(Object testInstance) {\n+        Class<?> current = testInstance.getClass();\n+        while (current.getSuperclass() != null) {\n+            for (Field field : current.getDeclaredFields()) {\n+                MockBean mockBeanAnnotation = field.getAnnotation(MockBean.class);\n+                if (mockBeanAnnotation != null) {\n+                    Object beanInstance = getBeanInstance(testInstance, field);\n+                    Object mock = createMockAndSetTestField(testInstance, field, beanInstance);\n+                    MockitoMocksTracker.track(testInstance, mock, beanInstance);\n+                }\n+            }\n+            current = current.getSuperclass();\n+        }\n+    }\n+\n+    private Object createMockAndSetTestField(Object testInstance, Field field, Object beanInstance) {\n+        Object mock = Mockito.mock(beanInstance.getClass());\n+        field.setAccessible(true);\n+        try {\n+            field.set(testInstance, mock);\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return mock;\n+    }\n+\n+    private Object getBeanInstance(Object testInstance, Field field) {\n+        Class<?> fieldClass = field.getType();\n+        InstanceHandle<?> instance = Arc.container().instance(fieldClass, getQualifiers(field));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY1NzE2NQ=="}, "originalCommit": {"oid": "fa3f510a221c4301fac90bd6bd302de4238af9f9"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4NDY2NA==", "bodyText": "We can't really mock @dependent beans anyway.\n\nAh, that's correct. For @Dependent it would fail later when we try to install the mock by means of QuarkusMock.\n\nSo we don't need to close them anywhere, no?\n\nIt's ok for normal scoped beans and @Singleton. Nok for @Dependent.", "url": "https://github.com/quarkusio/quarkus/pull/8327#discussion_r402084664", "createdAt": "2020-04-02T06:44:00Z", "author": {"login": "mkouba"}, "path": "test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/CreateMockitoMocksCallback.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package io.quarkus.test.junit.mockito.internal;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Qualifier;\n+\n+import org.mockito.Mockito;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.arc.InstanceHandle;\n+import io.quarkus.test.junit.callback.QuarkusTestBeforeAllCallback;\n+import io.quarkus.test.junit.mockito.MockBean;\n+\n+public class CreateMockitoMocksCallback implements QuarkusTestBeforeAllCallback {\n+\n+    @Override\n+    public void beforeAll(Object testInstance) {\n+        Class<?> current = testInstance.getClass();\n+        while (current.getSuperclass() != null) {\n+            for (Field field : current.getDeclaredFields()) {\n+                MockBean mockBeanAnnotation = field.getAnnotation(MockBean.class);\n+                if (mockBeanAnnotation != null) {\n+                    Object beanInstance = getBeanInstance(testInstance, field);\n+                    Object mock = createMockAndSetTestField(testInstance, field, beanInstance);\n+                    MockitoMocksTracker.track(testInstance, mock, beanInstance);\n+                }\n+            }\n+            current = current.getSuperclass();\n+        }\n+    }\n+\n+    private Object createMockAndSetTestField(Object testInstance, Field field, Object beanInstance) {\n+        Object mock = Mockito.mock(beanInstance.getClass());\n+        field.setAccessible(true);\n+        try {\n+            field.set(testInstance, mock);\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return mock;\n+    }\n+\n+    private Object getBeanInstance(Object testInstance, Field field) {\n+        Class<?> fieldClass = field.getType();\n+        InstanceHandle<?> instance = Arc.container().instance(fieldClass, getQualifiers(field));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY1NzE2NQ=="}, "originalCommit": {"oid": "fa3f510a221c4301fac90bd6bd302de4238af9f9"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4NTgyOQ==", "bodyText": "Ah, now I see what your concern was! So yeah, no @Dependent - no problem :)", "url": "https://github.com/quarkusio/quarkus/pull/8327#discussion_r402085829", "createdAt": "2020-04-02T06:46:41Z", "author": {"login": "geoand"}, "path": "test-framework/junit5-mockito/src/main/java/io/quarkus/test/junit/mockito/internal/CreateMockitoMocksCallback.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package io.quarkus.test.junit.mockito.internal;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Qualifier;\n+\n+import org.mockito.Mockito;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.arc.InstanceHandle;\n+import io.quarkus.test.junit.callback.QuarkusTestBeforeAllCallback;\n+import io.quarkus.test.junit.mockito.MockBean;\n+\n+public class CreateMockitoMocksCallback implements QuarkusTestBeforeAllCallback {\n+\n+    @Override\n+    public void beforeAll(Object testInstance) {\n+        Class<?> current = testInstance.getClass();\n+        while (current.getSuperclass() != null) {\n+            for (Field field : current.getDeclaredFields()) {\n+                MockBean mockBeanAnnotation = field.getAnnotation(MockBean.class);\n+                if (mockBeanAnnotation != null) {\n+                    Object beanInstance = getBeanInstance(testInstance, field);\n+                    Object mock = createMockAndSetTestField(testInstance, field, beanInstance);\n+                    MockitoMocksTracker.track(testInstance, mock, beanInstance);\n+                }\n+            }\n+            current = current.getSuperclass();\n+        }\n+    }\n+\n+    private Object createMockAndSetTestField(Object testInstance, Field field, Object beanInstance) {\n+        Object mock = Mockito.mock(beanInstance.getClass());\n+        field.setAccessible(true);\n+        try {\n+            field.set(testInstance, mock);\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return mock;\n+    }\n+\n+    private Object getBeanInstance(Object testInstance, Field field) {\n+        Class<?> fieldClass = field.getType();\n+        InstanceHandle<?> instance = Arc.container().instance(fieldClass, getQualifiers(field));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY1NzE2NQ=="}, "originalCommit": {"oid": "fa3f510a221c4301fac90bd6bd302de4238af9f9"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTAxNTA4OnYy", "diffSide": "RIGHT", "path": "integration-tests/mockbean/src/test/java/io/quarkus/it/mockbean/GreetingResourceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNDozNjoyNlrOF_DsjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNDo0ODoyMlrOF_bJcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY2NTE2NA==", "bodyText": "Since these are not CDI injection points it could happen that ArC will consider the resolved beans removable. Maybe we should handle this use case and mark them unremovable?", "url": "https://github.com/quarkusio/quarkus/pull/8327#discussion_r401665164", "createdAt": "2020-04-01T14:36:26Z", "author": {"login": "mkouba"}, "path": "integration-tests/mockbean/src/test/java/io/quarkus/it/mockbean/GreetingResourceTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.quarkus.it.mockbean;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.Matchers.is;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.mockito.MockBean;\n+\n+@QuarkusTest\n+class GreetingResourceTest {\n+\n+    @MockBean\n+    MessageService messageService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa3f510a221c4301fac90bd6bd302de4238af9f9"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA0OTM5NA==", "bodyText": "Like @stuartwdouglas said, if the bean has been removed, mocking won't change anything, so how would the user see the results of the their test?\nI don't think this scenario is actually possible.\nIt's likely I think that if normally the bean would be removed in the prod app, the user would be injecting some other bean into the test to check the effect of the mock, thus making the mock unremovable.", "url": "https://github.com/quarkusio/quarkus/pull/8327#discussion_r402049394", "createdAt": "2020-04-02T04:48:22Z", "author": {"login": "geoand"}, "path": "integration-tests/mockbean/src/test/java/io/quarkus/it/mockbean/GreetingResourceTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.quarkus.it.mockbean;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.Matchers.is;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.mockito.MockBean;\n+\n+@QuarkusTest\n+class GreetingResourceTest {\n+\n+    @MockBean\n+    MessageService messageService;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY2NTE2NA=="}, "originalCommit": {"oid": "fa3f510a221c4301fac90bd6bd302de4238af9f9"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTA2OTk2OnYy", "diffSide": "RIGHT", "path": "integration-tests/mockbean/src/test/java/io/quarkus/it/mockbean/GreetingResourceTest.java", "isResolved": false, "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNDo0ODoyM1rOF_EP0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDoyOToxOFrOF_lBuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3NDE5NA==", "bodyText": "So I wonder if we could just get rid of the injection part and provide an API like this:\n@Test\npublic void testGreet() {\n   Mockito.when(MockBean.of(MessageService.class).getMessage()).thenReturn(\"hi\");\n   ...\n}\n... where MockBean.of() would basically do QuarkusMock.installMockForType(Mockito.mock(MessageService.class), MessageService.class) and return the mock instance (and possibly cache the instance or something like that).", "url": "https://github.com/quarkusio/quarkus/pull/8327#discussion_r401674194", "createdAt": "2020-04-01T14:48:23Z", "author": {"login": "mkouba"}, "path": "integration-tests/mockbean/src/test/java/io/quarkus/it/mockbean/GreetingResourceTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.quarkus.it.mockbean;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.Matchers.is;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.mockito.MockBean;\n+\n+@QuarkusTest\n+class GreetingResourceTest {\n+\n+    @MockBean\n+    MessageService messageService;\n+\n+    @MockBean\n+    SuffixService suffixService;\n+\n+    @Test\n+    public void testGreet() {\n+        Mockito.when(messageService.getMessage()).thenReturn(\"hi\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa3f510a221c4301fac90bd6bd302de4238af9f9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3OTg2MQ==", "bodyText": "Hm, maybe it's not a good idea. The injection points can be reused and allow us to mark the beans unremovable. Another idea - if we do @Inject @MockBean the client proxies will be injected first and we could wrap it afterwards. @MockBean is ignored by ArC but allows CreateMockitoMocksCallback to wrap the stuff. The advantage of this approach would be (1) no need to mark the beans unremovable, (2) no need to hold the instance handles and destroy them correctly.", "url": "https://github.com/quarkusio/quarkus/pull/8327#discussion_r401679861", "createdAt": "2020-04-01T14:55:44Z", "author": {"login": "mkouba"}, "path": "integration-tests/mockbean/src/test/java/io/quarkus/it/mockbean/GreetingResourceTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.quarkus.it.mockbean;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.Matchers.is;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.mockito.MockBean;\n+\n+@QuarkusTest\n+class GreetingResourceTest {\n+\n+    @MockBean\n+    MessageService messageService;\n+\n+    @MockBean\n+    SuffixService suffixService;\n+\n+    @Test\n+    public void testGreet() {\n+        Mockito.when(messageService.getMessage()).thenReturn(\"hi\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3NDE5NA=="}, "originalCommit": {"oid": "fa3f510a221c4301fac90bd6bd302de4238af9f9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4Njc2MQ==", "bodyText": "Let me think about it and get back to you tomorrow :)", "url": "https://github.com/quarkusio/quarkus/pull/8327#discussion_r401686761", "createdAt": "2020-04-01T15:04:30Z", "author": {"login": "geoand"}, "path": "integration-tests/mockbean/src/test/java/io/quarkus/it/mockbean/GreetingResourceTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.quarkus.it.mockbean;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.Matchers.is;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.mockito.MockBean;\n+\n+@QuarkusTest\n+class GreetingResourceTest {\n+\n+    @MockBean\n+    MessageService messageService;\n+\n+    @MockBean\n+    SuffixService suffixService;\n+\n+    @Test\n+    public void testGreet() {\n+        Mockito.when(messageService.getMessage()).thenReturn(\"hi\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3NDE5NA=="}, "originalCommit": {"oid": "fa3f510a221c4301fac90bd6bd302de4238af9f9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5NDk0NA==", "bodyText": "Feel free to ping me to discuss the API ;-)", "url": "https://github.com/quarkusio/quarkus/pull/8327#discussion_r401694944", "createdAt": "2020-04-01T15:15:21Z", "author": {"login": "mkouba"}, "path": "integration-tests/mockbean/src/test/java/io/quarkus/it/mockbean/GreetingResourceTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.quarkus.it.mockbean;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.Matchers.is;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.mockito.MockBean;\n+\n+@QuarkusTest\n+class GreetingResourceTest {\n+\n+    @MockBean\n+    MessageService messageService;\n+\n+    @MockBean\n+    SuffixService suffixService;\n+\n+    @Test\n+    public void testGreet() {\n+        Mockito.when(messageService.getMessage()).thenReturn(\"hi\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3NDE5NA=="}, "originalCommit": {"oid": "fa3f510a221c4301fac90bd6bd302de4238af9f9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkyNzIyMg==", "bodyText": "If a bean is removable then then mocking it would have no effect anyway.", "url": "https://github.com/quarkusio/quarkus/pull/8327#discussion_r401927222", "createdAt": "2020-04-01T21:42:10Z", "author": {"login": "stuartwdouglas"}, "path": "integration-tests/mockbean/src/test/java/io/quarkus/it/mockbean/GreetingResourceTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.quarkus.it.mockbean;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.Matchers.is;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.mockito.MockBean;\n+\n+@QuarkusTest\n+class GreetingResourceTest {\n+\n+    @MockBean\n+    MessageService messageService;\n+\n+    @MockBean\n+    SuffixService suffixService;\n+\n+    @Test\n+    public void testGreet() {\n+        Mockito.when(messageService.getMessage()).thenReturn(\"hi\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3NDE5NA=="}, "originalCommit": {"oid": "fa3f510a221c4301fac90bd6bd302de4238af9f9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA0ODIwNQ==", "bodyText": "@mkouba if we do @Inject @MockBean in the test, then how would the user control the mocks?\nMy idea about @MockBean is that it should just be a Mockito mock that users already know how to handle without having to do anything else.  If we add @Inject in the mix, won't that complicate the mock usage on the user side?", "url": "https://github.com/quarkusio/quarkus/pull/8327#discussion_r402048205", "createdAt": "2020-04-02T04:42:56Z", "author": {"login": "geoand"}, "path": "integration-tests/mockbean/src/test/java/io/quarkus/it/mockbean/GreetingResourceTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.quarkus.it.mockbean;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.Matchers.is;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.mockito.MockBean;\n+\n+@QuarkusTest\n+class GreetingResourceTest {\n+\n+    @MockBean\n+    MessageService messageService;\n+\n+    @MockBean\n+    SuffixService suffixService;\n+\n+    @Test\n+    public void testGreet() {\n+        Mockito.when(messageService.getMessage()).thenReturn(\"hi\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3NDE5NA=="}, "originalCommit": {"oid": "fa3f510a221c4301fac90bd6bd302de4238af9f9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4MDY4MA==", "bodyText": "If a bean is removable then then mocking it would have no effect anyway.\n\nIf a bean is removable then a null would be injected or an exception would be thrown - depends on the CreateMockitoMocksCallback impl. My point is that right now you can test a bean in a @QuarkusTest even if it would be normally removed in production because test class is considered a bean.\n\nif we do @Inject @MockBean in the test, then how would the user control the mocks?\n\nLike I said - the client proxies could be injected by ArC and then wrapped in the CreateMockitoMocksCallback and the wrapped mocks could be set back to the fields. So you would do Mockito.when(messageService.getMessage()).thenReturn(\"hi\") like you do now.", "url": "https://github.com/quarkusio/quarkus/pull/8327#discussion_r402080680", "createdAt": "2020-04-02T06:33:53Z", "author": {"login": "mkouba"}, "path": "integration-tests/mockbean/src/test/java/io/quarkus/it/mockbean/GreetingResourceTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.quarkus.it.mockbean;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.Matchers.is;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.mockito.MockBean;\n+\n+@QuarkusTest\n+class GreetingResourceTest {\n+\n+    @MockBean\n+    MessageService messageService;\n+\n+    @MockBean\n+    SuffixService suffixService;\n+\n+    @Test\n+    public void testGreet() {\n+        Mockito.when(messageService.getMessage()).thenReturn(\"hi\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3NDE5NA=="}, "originalCommit": {"oid": "fa3f510a221c4301fac90bd6bd302de4238af9f9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4NTMwMQ==", "bodyText": "@mkouba I agree completely about testing beans injected into a class - they are made unremovable because you are actually testing those beans.\nIn the mock case however, you aren't testing the injected mocks, you are testing whatever component uses the mocks - so making them unremovable should have no effect.\nAm I missing something?", "url": "https://github.com/quarkusio/quarkus/pull/8327#discussion_r402085301", "createdAt": "2020-04-02T06:45:30Z", "author": {"login": "geoand"}, "path": "integration-tests/mockbean/src/test/java/io/quarkus/it/mockbean/GreetingResourceTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.quarkus.it.mockbean;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.Matchers.is;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.mockito.MockBean;\n+\n+@QuarkusTest\n+class GreetingResourceTest {\n+\n+    @MockBean\n+    MessageService messageService;\n+\n+    @MockBean\n+    SuffixService suffixService;\n+\n+    @Test\n+    public void testGreet() {\n+        Mockito.when(messageService.getMessage()).thenReturn(\"hi\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3NDE5NA=="}, "originalCommit": {"oid": "fa3f510a221c4301fac90bd6bd302de4238af9f9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEwMTQwMw==", "bodyText": "You're probably right. It's a bit confusing though. We should probably add some docs and explain the intention...", "url": "https://github.com/quarkusio/quarkus/pull/8327#discussion_r402101403", "createdAt": "2020-04-02T07:20:49Z", "author": {"login": "mkouba"}, "path": "integration-tests/mockbean/src/test/java/io/quarkus/it/mockbean/GreetingResourceTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.quarkus.it.mockbean;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.Matchers.is;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.mockito.MockBean;\n+\n+@QuarkusTest\n+class GreetingResourceTest {\n+\n+    @MockBean\n+    MessageService messageService;\n+\n+    @MockBean\n+    SuffixService suffixService;\n+\n+    @Test\n+    public void testGreet() {\n+        Mockito.when(messageService.getMessage()).thenReturn(\"hi\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3NDE5NA=="}, "originalCommit": {"oid": "fa3f510a221c4301fac90bd6bd302de4238af9f9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEwMjIzOQ==", "bodyText": "Yes of course, I haven't added any docs yet but I absolutely plan to do so.", "url": "https://github.com/quarkusio/quarkus/pull/8327#discussion_r402102239", "createdAt": "2020-04-02T07:22:38Z", "author": {"login": "geoand"}, "path": "integration-tests/mockbean/src/test/java/io/quarkus/it/mockbean/GreetingResourceTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.quarkus.it.mockbean;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.Matchers.is;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.mockito.MockBean;\n+\n+@QuarkusTest\n+class GreetingResourceTest {\n+\n+    @MockBean\n+    MessageService messageService;\n+\n+    @MockBean\n+    SuffixService suffixService;\n+\n+    @Test\n+    public void testGreet() {\n+        Mockito.when(messageService.getMessage()).thenReturn(\"hi\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3NDE5NA=="}, "originalCommit": {"oid": "fa3f510a221c4301fac90bd6bd302de4238af9f9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxMTI1Nw==", "bodyText": "I added some documentation. WDYT @mkouba ?", "url": "https://github.com/quarkusio/quarkus/pull/8327#discussion_r402211257", "createdAt": "2020-04-02T10:29:18Z", "author": {"login": "geoand"}, "path": "integration-tests/mockbean/src/test/java/io/quarkus/it/mockbean/GreetingResourceTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.quarkus.it.mockbean;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.Matchers.is;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.mockito.MockBean;\n+\n+@QuarkusTest\n+class GreetingResourceTest {\n+\n+    @MockBean\n+    MessageService messageService;\n+\n+    @MockBean\n+    SuffixService suffixService;\n+\n+    @Test\n+    public void testGreet() {\n+        Mockito.when(messageService.getMessage()).thenReturn(\"hi\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3NDE5NA=="}, "originalCommit": {"oid": "fa3f510a221c4301fac90bd6bd302de4238af9f9"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3581, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}