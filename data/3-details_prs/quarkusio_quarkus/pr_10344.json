{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNDYyODE2", "number": 10344, "title": "[#10295] Allow using the informer interface, and trace down all types", "bodyText": "This change also evaluates implementations of ResourceEventHandler,\nwhich is the corresponding interface for the informer. This allows to\nuse watchers or informers the same way.\nAlso it traverses through the type information, adding all required\ntypes to the list of types enabling reflection. If only the direct class\nis added, deserialization will fail, unless all the references classes\nare manually annotated with @RegisterForReflection.\nSigned-off-by: Jens Reimann jreimann@redhat.com", "createdAt": "2020-06-29T14:43:21Z", "url": "https://github.com/quarkusio/quarkus/pull/10344", "merged": true, "mergeCommit": {"oid": "3ffd2fcb0887f3279d1e870fa8df224eaeb91103"}, "closed": true, "closedAt": "2020-07-01T12:37:15Z", "author": {"login": "ctron"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwQTI7AFqTQzOTczMDc0NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwphB_AFqTQ0MDgyODM0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NzMwNzQ0", "url": "https://github.com/quarkusio/quarkus/pull/10344#pullrequestreview-439730744", "createdAt": "2020-06-30T07:13:49Z", "commit": {"oid": "16ef3cac0b687b55aa1f8c72d8272e224914f244"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzoxMzo0OVrOGqu02A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzoxMzo0OVrOGqu02A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ2MDU2OA==", "bodyText": "I think that we'll need a better name for this, it's a little too generic IMHO", "url": "https://github.com/quarkusio/quarkus/pull/10344#discussion_r447460568", "createdAt": "2020-06-30T07:13:49Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes-client/deployment/src/main/java/io/quarkus/kubernetes/client/deployment/KubernetesClientProcessor.java", "diffHunk": "@@ -23,12 +30,25 @@\n import io.quarkus.jackson.deployment.IgnoreJsonDeserializeClassBuildItem;\n import io.quarkus.kubernetes.client.runtime.KubernetesClientProducer;\n import io.quarkus.kubernetes.spi.KubernetesRoleBuildItem;\n+import io.quarkus.runtime.annotations.RegisterForReflection;\n \n public class KubernetesClientProcessor {\n \n     private static final DotName WATCHER = DotName.createSimple(\"io.fabric8.kubernetes.client.Watcher\");\n+    private static final DotName RESOURCE_EVENT_HANDLER = DotName\n+            .createSimple(\"io.fabric8.kubernetes.client.informers.ResourceEventHandler\");\n     private static final DotName KUBERNETES_RESOURCE = DotName\n             .createSimple(\"io.fabric8.kubernetes.api.model.KubernetesResource\");\n+    private static final DotName KUBERNETES_RESOURCE_LIST = DotName\n+            .createSimple(\"io.fabric8.kubernetes.api.model.KubernetesResourceList\");\n+    private static final Set<String> EXCLUDED_CLASSES;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ef3cac0b687b55aa1f8c72d8272e224914f244"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "567d9cfcb550a48aeca274a618e6e94d847c2e09", "author": {"user": {"login": "ctron", "name": "Jens Reimann"}}, "url": "https://github.com/quarkusio/quarkus/commit/567d9cfcb550a48aeca274a618e6e94d847c2e09", "committedDate": "2020-07-01T07:47:41Z", "message": "[#10295] Allow using the informer interface, and track down all types\n\nThis change also evaluates implementations of `ResourceEventHandler`,\nwhich is the corresponding interface for the informer. This allows to\nuse watchers or informers the same way.\n\nAlso it traverses through the type information, adding all required\ntypes to the list of types enabling reflection. If only the direct class\nis added, deserialization will fail, unless all the references classes\nare manually annotated with @RegisterForReflection.\n\nSigned-off-by: Jens Reimann <jreimann@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "16ef3cac0b687b55aa1f8c72d8272e224914f244", "author": {"user": {"login": "ctron", "name": "Jens Reimann"}}, "url": "https://github.com/quarkusio/quarkus/commit/16ef3cac0b687b55aa1f8c72d8272e224914f244", "committedDate": "2020-06-29T14:42:11Z", "message": "[#10295] Allow using the informer interface, and trace down all types\n\nThis change also evaluates implementations of `ResourceEventHandler`,\nwhich is the corresponding interface for the informer. This allows to\nuse watchers or informers the same way.\n\nAlso it traverses through the type information, adding all required\ntypes to the list of types enabling reflection. If only the direct class\nis added, deserialization will fail, unless all the references classes\nare manually annotated with @RegisterForReflection.\n\nSigned-off-by: Jens Reimann <jreimann@redhat.com>"}, "afterCommit": {"oid": "567d9cfcb550a48aeca274a618e6e94d847c2e09", "author": {"user": {"login": "ctron", "name": "Jens Reimann"}}, "url": "https://github.com/quarkusio/quarkus/commit/567d9cfcb550a48aeca274a618e6e94d847c2e09", "committedDate": "2020-07-01T07:47:41Z", "message": "[#10295] Allow using the informer interface, and track down all types\n\nThis change also evaluates implementations of `ResourceEventHandler`,\nwhich is the corresponding interface for the informer. This allows to\nuse watchers or informers the same way.\n\nAlso it traverses through the type information, adding all required\ntypes to the list of types enabling reflection. If only the direct class\nis added, deserialization will fail, unless all the references classes\nare manually annotated with @RegisterForReflection.\n\nSigned-off-by: Jens Reimann <jreimann@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwODI4MzQz", "url": "https://github.com/quarkusio/quarkus/pull/10344#pullrequestreview-440828343", "createdAt": "2020-07-01T12:36:38Z", "commit": {"oid": "567d9cfcb550a48aeca274a618e6e94d847c2e09"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4192, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}