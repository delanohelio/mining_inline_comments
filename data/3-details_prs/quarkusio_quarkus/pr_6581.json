{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNTU4Mzg1", "number": 6581, "title": "Introduce transactional observer support", "bodyText": "Adds support for transactional observers. Tests are under Narayana module so that we have their registry available.\nFixes #2224", "createdAt": "2020-01-16T10:04:37Z", "url": "https://github.com/quarkusio/quarkus/pull/6581", "merged": true, "mergeCommit": {"oid": "19e0ad5b41f0e008c359a95bd4de83e07a980923"}, "closed": true, "closedAt": "2020-01-20T07:43:04Z", "author": {"login": "manovotn"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb63Q1PAFqTM0Mzc5Nzc3Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb7TqE8gFqTM0NDc4NDEyMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNzk3Nzc3", "url": "https://github.com/quarkusio/quarkus/pull/6581#pullrequestreview-343797777", "createdAt": "2020-01-16T10:05:41Z", "commit": {"oid": "0fb3e1b7b256ebc6e3266d3a60201d4a55bc32ec"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMDowNTo0MlrOFeUD-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMDowNTo0MlrOFeUD-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMzMDI5OA==", "bodyText": "Not sure if we should log this somehow - we know there are tx observers but either Narayna isn't present (no access to SyncRegistry) or no tx is in progress ATM.", "url": "https://github.com/quarkusio/quarkus/pull/6581#discussion_r367330298", "createdAt": "2020-01-16T10:05:42Z", "author": {"login": "manovotn"}, "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/EventImpl.java", "diffHunk": "@@ -209,8 +228,42 @@ void notify(T event) {\n         }\n \n         void notify(T event, ObserverExceptionHandler exceptionHandler, boolean async) {\n-            if (!isEmpty()) {\n+            if (!transactionalObserverMethodsEmpty()) {\n+                InstanceHandle<TransactionSynchronizationRegistry> registryInstance = Arc.container()\n+                        .instance(TransactionSynchronizationRegistry.class);\n+                if (registryInstance.isAvailable() && registryInstance.get().getTransactionStatus() == 0) {\n+                    // we have one or more transactional OM, and TransactionSynchronizationRegistry is available\n+                    // we attempts to register JTA synchronization\n+                    List<DeferredEventNotification<?>> deferredEvents = new ArrayList<>();\n+                    EventContext eventContext = new EventContextImpl<>(event, eventMetadata);\n+                    for (ObserverMethod<? super T> om : transactionalObserverMethods) {\n+                        deferredEvents\n+                                .add(new DeferredEventNotification(om, eventContext, Status.valueOf(om.getTransactionPhase())));\n+                    }\n+                    Synchronization sync = new ArcSynchronization(deferredEvents);\n+                    TransactionSynchronizationRegistry registry = registryInstance.get();\n+                    try {\n+                        registry.registerInterposedSynchronization(sync);\n+                    } catch (Exception e) {\n+                        if (e.getCause() instanceof RollbackException || e.getCause() instanceof IllegalStateException) {\n+                            // registration failed, merge back with non-transactional methods\n+                            // AFTER_SUCCESS are accordingly to CDI spec left out\n+                            observerMethods.addAll(transactionalObserverMethods.stream()\n+                                    .filter(observerMethod -> !observerMethod.getTransactionPhase()\n+                                            .equals(TransactionPhase.AFTER_SUCCESS))\n+                                    .collect(Collectors.toList()));\n+                        }\n+                    }\n+                } else {\n+                    // no JTA available, we will have to notify transactional OM along with all other OM\n+                    observerMethods.addAll(transactionalObserverMethods);\n+                    // TODO log this somehow?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fb3e1b7b256ebc6e3266d3a60201d4a55bc32ec"}, "originalPosition": 117}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzODE4NTY2", "url": "https://github.com/quarkusio/quarkus/pull/6581#pullrequestreview-343818566", "createdAt": "2020-01-16T10:39:17Z", "commit": {"oid": "0fb3e1b7b256ebc6e3266d3a60201d4a55bc32ec"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMDozOToxN1rOFeVDXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMToxNDoxNVrOFeV98A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM0NjUyNA==", "bodyText": "I don't think we should log anything here...", "url": "https://github.com/quarkusio/quarkus/pull/6581#discussion_r367346524", "createdAt": "2020-01-16T10:39:17Z", "author": {"login": "mkouba"}, "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/EventImpl.java", "diffHunk": "@@ -209,8 +228,42 @@ void notify(T event) {\n         }\n \n         void notify(T event, ObserverExceptionHandler exceptionHandler, boolean async) {\n-            if (!isEmpty()) {\n+            if (!transactionalObserverMethodsEmpty()) {\n+                InstanceHandle<TransactionSynchronizationRegistry> registryInstance = Arc.container()\n+                        .instance(TransactionSynchronizationRegistry.class);\n+                if (registryInstance.isAvailable() && registryInstance.get().getTransactionStatus() == 0) {\n+                    // we have one or more transactional OM, and TransactionSynchronizationRegistry is available\n+                    // we attempts to register JTA synchronization\n+                    List<DeferredEventNotification<?>> deferredEvents = new ArrayList<>();\n+                    EventContext eventContext = new EventContextImpl<>(event, eventMetadata);\n+                    for (ObserverMethod<? super T> om : transactionalObserverMethods) {\n+                        deferredEvents\n+                                .add(new DeferredEventNotification(om, eventContext, Status.valueOf(om.getTransactionPhase())));\n+                    }\n+                    Synchronization sync = new ArcSynchronization(deferredEvents);\n+                    TransactionSynchronizationRegistry registry = registryInstance.get();\n+                    try {\n+                        registry.registerInterposedSynchronization(sync);\n+                    } catch (Exception e) {\n+                        if (e.getCause() instanceof RollbackException || e.getCause() instanceof IllegalStateException) {\n+                            // registration failed, merge back with non-transactional methods\n+                            // AFTER_SUCCESS are accordingly to CDI spec left out\n+                            observerMethods.addAll(transactionalObserverMethods.stream()\n+                                    .filter(observerMethod -> !observerMethod.getTransactionPhase()\n+                                            .equals(TransactionPhase.AFTER_SUCCESS))\n+                                    .collect(Collectors.toList()));\n+                        }\n+                    }\n+                } else {\n+                    // no JTA available, we will have to notify transactional OM along with all other OM\n+                    observerMethods.addAll(transactionalObserverMethods);\n+                    // TODO log this somehow?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMzMDI5OA=="}, "originalCommit": {"oid": "0fb3e1b7b256ebc6e3266d3a60201d4a55bc32ec"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM0NjgyOA==", "bodyText": "I'd keep this warning (with a modified message) when JTA is not available...", "url": "https://github.com/quarkusio/quarkus/pull/6581#discussion_r367346828", "createdAt": "2020-01-16T10:39:52Z", "author": {"login": "mkouba"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/ObserverInfo.java", "diffHunk": "@@ -73,12 +72,6 @@ static ObserverInfo create(BeanInfo declaringBean, MethodInfo observerMethod, In\n             isAsync = context.isAsync();\n         }\n \n-        if (!TransactionPhase.IN_PROGRESS.equals(transactionPhase)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fb3e1b7b256ebc6e3266d3a60201d4a55bc32ec"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MDYzOA==", "bodyText": "Why do you remove this line? We can sort them once and then it's not necessary to sort them every time a notifier is executed, or?", "url": "https://github.com/quarkusio/quarkus/pull/6581#discussion_r367360638", "createdAt": "2020-01-16T11:12:08Z", "author": {"login": "mkouba"}, "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/ArcContainerImpl.java", "diffHunk": "@@ -541,8 +541,6 @@ private static int compareAlternativeBeans(InjectableBean<?> bean1, InjectableBe\n                 }\n             }\n         }\n-        // Observers with smaller priority values are called first\n-        Collections.sort(resolvedObservers, InjectableObserverMethod::compare);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fb3e1b7b256ebc6e3266d3a60201d4a55bc32ec"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MDk2Mw==", "bodyText": "\"We attempt to...\" ;-)", "url": "https://github.com/quarkusio/quarkus/pull/6581#discussion_r367360963", "createdAt": "2020-01-16T11:12:56Z", "author": {"login": "mkouba"}, "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/EventImpl.java", "diffHunk": "@@ -209,8 +228,42 @@ void notify(T event) {\n         }\n \n         void notify(T event, ObserverExceptionHandler exceptionHandler, boolean async) {\n-            if (!isEmpty()) {\n+            if (!transactionalObserverMethodsEmpty()) {\n+                InstanceHandle<TransactionSynchronizationRegistry> registryInstance = Arc.container()\n+                        .instance(TransactionSynchronizationRegistry.class);\n+                if (registryInstance.isAvailable() && registryInstance.get().getTransactionStatus() == 0) {\n+                    // we have one or more transactional OM, and TransactionSynchronizationRegistry is available\n+                    // we attempts to register JTA synchronization", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fb3e1b7b256ebc6e3266d3a60201d4a55bc32ec"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MTUyMA==", "bodyText": "We should use the constant from javax.transaction.Status...", "url": "https://github.com/quarkusio/quarkus/pull/6581#discussion_r367361520", "createdAt": "2020-01-16T11:14:15Z", "author": {"login": "mkouba"}, "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/EventImpl.java", "diffHunk": "@@ -209,8 +228,42 @@ void notify(T event) {\n         }\n \n         void notify(T event, ObserverExceptionHandler exceptionHandler, boolean async) {\n-            if (!isEmpty()) {\n+            if (!transactionalObserverMethodsEmpty()) {\n+                InstanceHandle<TransactionSynchronizationRegistry> registryInstance = Arc.container()\n+                        .instance(TransactionSynchronizationRegistry.class);\n+                if (registryInstance.isAvailable() && registryInstance.get().getTransactionStatus() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fb3e1b7b256ebc6e3266d3a60201d4a55bc32ec"}, "originalPosition": 91}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0fb3e1b7b256ebc6e3266d3a60201d4a55bc32ec", "author": {"user": {"login": "manovotn", "name": "Matej Novotny"}}, "url": "https://github.com/quarkusio/quarkus/commit/0fb3e1b7b256ebc6e3266d3a60201d4a55bc32ec", "committedDate": "2020-01-16T10:01:18Z", "message": "Introduce transactional observer support."}, "afterCommit": {"oid": "b90efea297c54ac27e37b303a9912b6db93dd1b7", "author": {"user": {"login": "manovotn", "name": "Matej Novotny"}}, "url": "https://github.com/quarkusio/quarkus/commit/b90efea297c54ac27e37b303a9912b6db93dd1b7", "committedDate": "2020-01-16T11:44:55Z", "message": "Introduce transactional observer support."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b90efea297c54ac27e37b303a9912b6db93dd1b7", "author": {"user": {"login": "manovotn", "name": "Matej Novotny"}}, "url": "https://github.com/quarkusio/quarkus/commit/b90efea297c54ac27e37b303a9912b6db93dd1b7", "committedDate": "2020-01-16T11:44:55Z", "message": "Introduce transactional observer support."}, "afterCommit": {"oid": "18e8c99aac1c9794ee06f19085d73367c0dad071", "author": {"user": {"login": "manovotn", "name": "Matej Novotny"}}, "url": "https://github.com/quarkusio/quarkus/commit/18e8c99aac1c9794ee06f19085d73367c0dad071", "committedDate": "2020-01-16T15:53:19Z", "message": "Introduce transactional observer support."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "18e8c99aac1c9794ee06f19085d73367c0dad071", "author": {"user": {"login": "manovotn", "name": "Matej Novotny"}}, "url": "https://github.com/quarkusio/quarkus/commit/18e8c99aac1c9794ee06f19085d73367c0dad071", "committedDate": "2020-01-16T15:53:19Z", "message": "Introduce transactional observer support."}, "afterCommit": {"oid": "1edde52adb347b446f7bfbcdc1e2bbbec7509359", "author": {"user": {"login": "manovotn", "name": "Matej Novotny"}}, "url": "https://github.com/quarkusio/quarkus/commit/1edde52adb347b446f7bfbcdc1e2bbbec7509359", "committedDate": "2020-01-16T15:59:03Z", "message": "Introduce transactional observer support."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1edde52adb347b446f7bfbcdc1e2bbbec7509359", "author": {"user": {"login": "manovotn", "name": "Matej Novotny"}}, "url": "https://github.com/quarkusio/quarkus/commit/1edde52adb347b446f7bfbcdc1e2bbbec7509359", "committedDate": "2020-01-16T15:59:03Z", "message": "Introduce transactional observer support."}, "afterCommit": {"oid": "925948c9462435ad1a3ee46530e72d9233bdc4dd", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/925948c9462435ad1a3ee46530e72d9233bdc4dd", "committedDate": "2020-01-17T08:04:44Z", "message": "Tx observers - minor cleanup plus reduce the number of lamdas"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NDE1NzE4", "url": "https://github.com/quarkusio/quarkus/pull/6581#pullrequestreview-344415718", "createdAt": "2020-01-17T08:10:06Z", "commit": {"oid": "925948c9462435ad1a3ee46530e72d9233bdc4dd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "925948c9462435ad1a3ee46530e72d9233bdc4dd", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/925948c9462435ad1a3ee46530e72d9233bdc4dd", "committedDate": "2020-01-17T08:04:44Z", "message": "Tx observers - minor cleanup plus reduce the number of lamdas"}, "afterCommit": {"oid": "e854d2d119065861f01c4376d280b1cecc6cba7b", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/e854d2d119065861f01c4376d280b1cecc6cba7b", "committedDate": "2020-01-17T09:07:30Z", "message": "Tx observers - minor cleanup plus reduce the number of lamdas"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NDQ4OTM1", "url": "https://github.com/quarkusio/quarkus/pull/6581#pullrequestreview-344448935", "createdAt": "2020-01-17T09:20:09Z", "commit": {"oid": "e854d2d119065861f01c4376d280b1cecc6cba7b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b19802ce1d65894c794398fa6b6b46c781ff2a46", "author": {"user": {"login": "manovotn", "name": "Matej Novotny"}}, "url": "https://github.com/quarkusio/quarkus/commit/b19802ce1d65894c794398fa6b6b46c781ff2a46", "committedDate": "2020-01-17T15:46:19Z", "message": "Introduce transactional observer support."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62e08deaca47f485d695b61cb8e6d9c770d198e5", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/62e08deaca47f485d695b61cb8e6d9c770d198e5", "committedDate": "2020-01-17T15:46:19Z", "message": "Tx observers - minor cleanup plus reduce the number of lamdas"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e854d2d119065861f01c4376d280b1cecc6cba7b", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/e854d2d119065861f01c4376d280b1cecc6cba7b", "committedDate": "2020-01-17T09:07:30Z", "message": "Tx observers - minor cleanup plus reduce the number of lamdas"}, "afterCommit": {"oid": "62e08deaca47f485d695b61cb8e6d9c770d198e5", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/62e08deaca47f485d695b61cb8e6d9c770d198e5", "committedDate": "2020-01-17T15:46:19Z", "message": "Tx observers - minor cleanup plus reduce the number of lamdas"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c190f5ded7924152a74d3ee44d23a7d239809f98", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/c190f5ded7924152a74d3ee44d23a7d239809f98", "committedDate": "2020-01-17T19:01:33Z", "message": "Update CDI ref guide"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0Nzg0MTIz", "url": "https://github.com/quarkusio/quarkus/pull/6581#pullrequestreview-344784123", "createdAt": "2020-01-17T19:10:37Z", "commit": {"oid": "c190f5ded7924152a74d3ee44d23a7d239809f98"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 214, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}