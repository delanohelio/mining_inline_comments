{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5NDA2OTUy", "number": 13553, "title": "Allow repeatable interceptor bindings", "bodyText": "Fixes #13332.", "createdAt": "2020-11-30T09:15:47Z", "url": "https://github.com/quarkusio/quarkus/pull/13553", "merged": true, "mergeCommit": {"oid": "862cfd7054f2278ce836e7dd5405077b527c7ffc"}, "closed": true, "closedAt": "2020-12-10T20:33:06Z", "author": {"login": "Ladicek"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdhiueIABqjQwNTExODU3MTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdk3dANAFqTU0OTQ3NTQyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5f55bd684ea688734c5a52c6abfe97cb833da7d2", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/5f55bd684ea688734c5a52c6abfe97cb833da7d2", "committedDate": "2020-11-30T09:12:29Z", "message": "Allow repeatable interceptor bindings"}, "afterCommit": {"oid": "70374a0c4491e2a0411cee9dc82d5a9d4d76f5e9", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/70374a0c4491e2a0411cee9dc82d5a9d4d76f5e9", "committedDate": "2020-11-30T10:24:08Z", "message": "Allow repeatable interceptor bindings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNzc3OTMx", "url": "https://github.com/quarkusio/quarkus/pull/13553#pullrequestreview-540777931", "createdAt": "2020-11-30T10:30:21Z", "commit": {"oid": "70374a0c4491e2a0411cee9dc82d5a9d4d76f5e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMDozMDoyMVrOH700Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMDozMDoyMVrOH700Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ5MzMyNw==", "bodyText": "Isn't having multiple bindings of the same type (and all on class level) an error according to the specification?", "url": "https://github.com/quarkusio/quarkus/pull/13553#discussion_r532493327", "createdAt": "2020-11-30T10:30:21Z", "author": {"login": "manovotn"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanInfo.java", "diffHunk": "@@ -449,9 +449,11 @@ private void putLifecycleInterceptors(Map<InterceptionType, InterceptionInfo> li\n \n     private void addClassLevelBindings(ClassInfo classInfo, Collection<AnnotationInstance> bindings) {\n         beanDeployment.getAnnotations(classInfo).stream()\n-                .filter(a -> beanDeployment.getInterceptorBinding(a.name()) != null\n-                        && bindings.stream().noneMatch(e -> e.name().equals(a.name())))\n-                .forEach(a -> bindings.add(a));\n+                .flatMap(a -> beanDeployment.extractInterceptorBindings(a).stream())\n+                // TODO this is weird -- either we allow multiple class-level interceptor bindings of the same type,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70374a0c4491e2a0411cee9dc82d5a9d4d76f5e9"}, "originalPosition": 8}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "70374a0c4491e2a0411cee9dc82d5a9d4d76f5e9", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/70374a0c4491e2a0411cee9dc82d5a9d4d76f5e9", "committedDate": "2020-11-30T10:24:08Z", "message": "Allow repeatable interceptor bindings"}, "afterCommit": {"oid": "78dafeffd811e28b668a41a0bf1f8eb6d04ba84e", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/78dafeffd811e28b668a41a0bf1f8eb6d04ba84e", "committedDate": "2020-11-30T10:40:47Z", "message": "Allow repeatable interceptor bindings"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "78dafeffd811e28b668a41a0bf1f8eb6d04ba84e", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/78dafeffd811e28b668a41a0bf1f8eb6d04ba84e", "committedDate": "2020-11-30T10:40:47Z", "message": "Allow repeatable interceptor bindings"}, "afterCommit": {"oid": "62f40724e4bbe40ab316a8339e42c99a43d14700", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/62f40724e4bbe40ab316a8339e42c99a43d14700", "committedDate": "2020-12-01T10:54:23Z", "message": "Allow repeatable interceptor bindings"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "62f40724e4bbe40ab316a8339e42c99a43d14700", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/62f40724e4bbe40ab316a8339e42c99a43d14700", "committedDate": "2020-12-01T10:54:23Z", "message": "Allow repeatable interceptor bindings"}, "afterCommit": {"oid": "8cbfd8787e5ad36249d093110530278b8cf0b91e", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/8cbfd8787e5ad36249d093110530278b8cf0b91e", "committedDate": "2020-12-01T14:10:03Z", "message": "Allow repeatable interceptor bindings"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8cbfd8787e5ad36249d093110530278b8cf0b91e", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/8cbfd8787e5ad36249d093110530278b8cf0b91e", "committedDate": "2020-12-01T14:10:03Z", "message": "Allow repeatable interceptor bindings"}, "afterCommit": {"oid": "00985a489ba1db4321c6537440c827c47e0adcda", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/00985a489ba1db4321c6537440c827c47e0adcda", "committedDate": "2020-12-01T14:23:30Z", "message": "Allow repeatable interceptor bindings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNzk2MTcz", "url": "https://github.com/quarkusio/quarkus/pull/13553#pullrequestreview-542796173", "createdAt": "2020-12-02T12:41:55Z", "commit": {"oid": "00985a489ba1db4321c6537440c827c47e0adcda"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMjo0MTo1NVrOH9ZIMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMjo0MTo1NVrOH9ZIMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEzNjg4Mg==", "bodyText": "Shouldn't the expected value be 11 because ClassInterceptedBean#foo() declares @MyBinding(\"foo\") and @MyBinding(\"bar\") is inherited from the superclass?", "url": "https://github.com/quarkusio/quarkus/pull/13553#discussion_r534136882", "createdAt": "2020-12-02T12:41:55Z", "author": {"login": "mkouba"}, "path": "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/bindings/repeatable/InheritedRepeatableInterceptorBindingTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+package io.quarkus.arc.test.interceptors.bindings.repeatable;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.arc.test.ArcTestContainer;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Repeatable;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.interceptor.AroundInvoke;\n+import javax.interceptor.Interceptor;\n+import javax.interceptor.InterceptorBinding;\n+import javax.interceptor.InvocationContext;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+/**\n+ * Tests usage of inherited repeating interceptor binding.\n+ */\n+public class InheritedRepeatableInterceptorBindingTest {\n+    @RegisterExtension\n+    public ArcTestContainer container = new ArcTestContainer(MyBinding.class, MyBinding.List.class,\n+            SuperclassWithMethodLevelBindings.class, MethodInterceptedBean.class,\n+            SuperclassWithClassLevelBindings.class, ClassInterceptedBean.class, IncrementingInterceptor.class);\n+\n+    @Test\n+    public void methodLevelInterceptor() {\n+        MethodInterceptedBean bean = Arc.container().instance(MethodInterceptedBean.class).get();\n+\n+        assertEquals(10, bean.foo());\n+        assertEquals(21, bean.foobar());\n+        assertEquals(30, bean.foobaz());\n+        assertEquals(41, bean.foobarbaz());\n+        assertEquals(50, bean.nonannotated());\n+    }\n+\n+    @Test\n+    public void classLevelInterceptor() {\n+        ClassInterceptedBean bean = Arc.container().instance(ClassInterceptedBean.class).get();\n+\n+        assertEquals(10, bean.foo());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00985a489ba1db4321c6537440c827c47e0adcda"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyODAwMTU3", "url": "https://github.com/quarkusio/quarkus/pull/13553#pullrequestreview-542800157", "createdAt": "2020-12-02T12:47:11Z", "commit": {"oid": "00985a489ba1db4321c6537440c827c47e0adcda"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMjo0NzoxMVrOH9ZUGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMjo0NzoxMVrOH9ZUGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEzOTkzMA==", "bodyText": "Hm, I don't think this should be supported. A stereotype with interceptor bindings is inherently a class-level-only concept and so I would expect the same limitations as with bindings declared on a class...", "url": "https://github.com/quarkusio/quarkus/pull/13553#discussion_r534139930", "createdAt": "2020-12-02T12:47:11Z", "author": {"login": "mkouba"}, "path": "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/interceptors/bindings/repeatable/InheritedStereotypeWithRepeatableInterceptorBindingTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package io.quarkus.arc.test.interceptors.bindings.repeatable;\n+\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.arc.test.ArcTestContainer;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Repeatable;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import javax.enterprise.inject.Stereotype;\n+import javax.inject.Singleton;\n+import javax.interceptor.AroundInvoke;\n+import javax.interceptor.Interceptor;\n+import javax.interceptor.InterceptorBinding;\n+import javax.interceptor.InvocationContext;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+/**\n+ * Tests usage of inherited stereotype containing a repeating interceptor binding.\n+ */\n+public class InheritedStereotypeWithRepeatableInterceptorBindingTest {\n+    @RegisterExtension\n+    public ArcTestContainer container = new ArcTestContainer(MyBinding.class, MyBinding.List.class, MyStereotype.class,\n+            MyBeanDefiningAnnotation.class, MySuperclass.class, MyBean.class, IncrementingInterceptor.class);\n+\n+    @Test\n+    @Disabled(\"ArC doesn't have stereotype inheritance yet\")\n+    public void test() {\n+        MyBean bean = Arc.container().instance(MyBean.class).get();\n+\n+        assertEquals(10, bean.foo());\n+        assertEquals(21, bean.foobar());\n+        assertEquals(30, bean.foobaz());\n+        assertEquals(41, bean.foobarbaz());\n+        assertEquals(51, bean.nonannotated());\n+    }\n+\n+    @Target({ ElementType.TYPE, ElementType.METHOD, ElementType.CONSTRUCTOR })\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Repeatable(MyBinding.List.class)\n+    @InterceptorBinding\n+    @interface MyBinding {\n+        String value();\n+\n+        @Target({ ElementType.TYPE, ElementType.METHOD, ElementType.CONSTRUCTOR })\n+        @Retention(RetentionPolicy.RUNTIME)\n+        @interface List {\n+            MyBinding[] value();\n+        }\n+    }\n+\n+    @MyBinding(\"foo\")\n+    @MyBinding(\"bar\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00985a489ba1db4321c6537440c827c47e0adcda"}, "originalPosition": 62}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "00985a489ba1db4321c6537440c827c47e0adcda", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/00985a489ba1db4321c6537440c827c47e0adcda", "committedDate": "2020-12-01T14:23:30Z", "message": "Allow repeatable interceptor bindings"}, "afterCommit": {"oid": "503e3067d8dfa9f6eaa0e60ecff1134f11b38122", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/503e3067d8dfa9f6eaa0e60ecff1134f11b38122", "committedDate": "2020-12-03T17:24:47Z", "message": "Allow repeatable interceptor bindings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0Nzk3NDk3", "url": "https://github.com/quarkusio/quarkus/pull/13553#pullrequestreview-544797497", "createdAt": "2020-12-04T09:39:32Z", "commit": {"oid": "503e3067d8dfa9f6eaa0e60ecff1134f11b38122"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOTozOTozM1rOH_IssQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOTozOTozM1rOH_IssQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk2NDg0OQ==", "bodyText": "Maybe we should clarify that repeatable interceptor bindings declared on interceptor classes are supported?", "url": "https://github.com/quarkusio/quarkus/pull/13553#discussion_r535964849", "createdAt": "2020-12-04T09:39:33Z", "author": {"login": "mkouba"}, "path": "docs/src/main/asciidoc/cdi-reference.adoc", "diffHunk": "@@ -734,6 +734,29 @@ class SharedService {\n <2> `@Lock(Lock.Type.READ)` overrides the value specified at class level. It means that any number of clients can invoke the method concurrently, unless the bean instance is locked by `@Lock(Lock.Type.WRITE)`. \n <3> You can also specify the \"wait time\". If it's not possible to acquire the lock in the given time a `LockException` is thrown.\n \n+=== Repeatable interceptor bindings\n+\n+Quarkus supports `@Repeatable` interceptor binding annotations, if they are declared on methods.\n+For example:\n+\n+[source,java]\n+----\n+@ApplicationScoped\n+class AllEncompassingService {\n+  @Cached(cacheName = \"foo\") // <1>\n+  @Cached(cacheName = \"bar\")\n+  BigData heavyComputation() {\n+    // ...\n+  }\n+}\n+----\n+<1> We have an imaginary interceptor that stores data to a cache.\n+The corresponding interceptor binding is called `@Cached` and is declared as `@Repeatable`.\n+In this example, the interceptor will store the method's return value in two caches, because we add `@Cached` twice.\n+\n+Repeatable interceptor bindings declared on classes and stereotypes are not supported, because there are some open questions around interactions with the Interceptors specification.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "503e3067d8dfa9f6eaa0e60ecff1134f11b38122"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0ODM3MzQy", "url": "https://github.com/quarkusio/quarkus/pull/13553#pullrequestreview-544837342", "createdAt": "2020-12-04T10:31:29Z", "commit": {"oid": "503e3067d8dfa9f6eaa0e60ecff1134f11b38122"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMDozMToyOVrOH_Kvhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMDo1Nzo1OVrOH_LwkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk5ODM0Mg==", "bodyText": "The @Cached annotation example might be misleading since it's not part of the Quarkus annotations caching API. @CacheResult (from our API) would almost fit here, but it's not repeatable.\n@CacheInvalidate or @CacheInvalidateAll could be used here if this example should match a real-life situation.\nSee https://quarkus.io/guides/cache#caching-annotations for more details about the annotations caching API.\nBut maybe this is all OK since it's imaginary... \ud83d\ude04", "url": "https://github.com/quarkusio/quarkus/pull/13553#discussion_r535998342", "createdAt": "2020-12-04T10:31:29Z", "author": {"login": "gwenneg"}, "path": "docs/src/main/asciidoc/cdi-reference.adoc", "diffHunk": "@@ -734,6 +734,29 @@ class SharedService {\n <2> `@Lock(Lock.Type.READ)` overrides the value specified at class level. It means that any number of clients can invoke the method concurrently, unless the bean instance is locked by `@Lock(Lock.Type.WRITE)`. \n <3> You can also specify the \"wait time\". If it's not possible to acquire the lock in the given time a `LockException` is thrown.\n \n+=== Repeatable interceptor bindings\n+\n+Quarkus supports `@Repeatable` interceptor binding annotations, if they are declared on methods.\n+For example:\n+\n+[source,java]\n+----\n+@ApplicationScoped\n+class AllEncompassingService {\n+  @Cached(cacheName = \"foo\") // <1>\n+  @Cached(cacheName = \"bar\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "503e3067d8dfa9f6eaa0e60ecff1134f11b38122"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk5ODQ5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @Cached(cacheName = \"foo\") // <1>\n          \n          \n            \n              @Cached(cacheName = \"foo\") <1>", "url": "https://github.com/quarkusio/quarkus/pull/13553#discussion_r535998490", "createdAt": "2020-12-04T10:31:43Z", "author": {"login": "gwenneg"}, "path": "docs/src/main/asciidoc/cdi-reference.adoc", "diffHunk": "@@ -734,6 +734,29 @@ class SharedService {\n <2> `@Lock(Lock.Type.READ)` overrides the value specified at class level. It means that any number of clients can invoke the method concurrently, unless the bean instance is locked by `@Lock(Lock.Type.WRITE)`. \n <3> You can also specify the \"wait time\". If it's not possible to acquire the lock in the given time a `LockException` is thrown.\n \n+=== Repeatable interceptor bindings\n+\n+Quarkus supports `@Repeatable` interceptor binding annotations, if they are declared on methods.\n+For example:\n+\n+[source,java]\n+----\n+@ApplicationScoped\n+class AllEncompassingService {\n+  @Cached(cacheName = \"foo\") // <1>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "503e3067d8dfa9f6eaa0e60ecff1134f11b38122"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwMjU2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * For most instances this will be a singleton instance (if given annotatation is an interceptor binding) or\n          \n          \n            \n                 * For most instances this will be a singleton instance (if given annotation is an interceptor binding) or", "url": "https://github.com/quarkusio/quarkus/pull/13553#discussion_r536002567", "createdAt": "2020-12-04T10:38:11Z", "author": {"login": "gwenneg"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanDeployment.java", "diffHunk": "@@ -409,24 +412,42 @@ ClassInfo getQualifier(DotName name) {\n      * @return a collection of qualifiers or an empty collection\n      */\n     Collection<AnnotationInstance> extractQualifiers(AnnotationInstance annotation) {\n+        return extractAnnotations(annotation, qualifiers, repeatingQualifierAnnotations);\n+    }\n+\n+    ClassInfo getInterceptorBinding(DotName name) {\n+        return interceptorBindings.get(name);\n+    }\n+\n+    /**\n+     * Extracts interceptor bindings from given annotation instance.\n+     * This returns a collection because in case of repeating interceptor bindings there can be multiple.\n+     * For most instances this will be a singleton instance (if given annotatation is an interceptor binding) or", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "503e3067d8dfa9f6eaa0e60ecff1134f11b38122"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwMzAwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param annotation instance to be inspected\n          \n          \n            \n                 * @param annotation instance to be extracted", "url": "https://github.com/quarkusio/quarkus/pull/13553#discussion_r536003009", "createdAt": "2020-12-04T10:38:53Z", "author": {"login": "gwenneg"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanDeployment.java", "diffHunk": "@@ -409,24 +412,42 @@ ClassInfo getQualifier(DotName name) {\n      * @return a collection of qualifiers or an empty collection\n      */\n     Collection<AnnotationInstance> extractQualifiers(AnnotationInstance annotation) {\n+        return extractAnnotations(annotation, qualifiers, repeatingQualifierAnnotations);\n+    }\n+\n+    ClassInfo getInterceptorBinding(DotName name) {\n+        return interceptorBindings.get(name);\n+    }\n+\n+    /**\n+     * Extracts interceptor bindings from given annotation instance.\n+     * This returns a collection because in case of repeating interceptor bindings there can be multiple.\n+     * For most instances this will be a singleton instance (if given annotatation is an interceptor binding) or\n+     * an empty list for cases where the annotation is not an interceptor binding.\n+     *\n+     * @param annotation instance to be inspected", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "503e3067d8dfa9f6eaa0e60ecff1134f11b38122"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAxNDk5Mg==", "bodyText": "findContainerAnnotations could be renamed to better reflect the focus on @Repeatable annotations.", "url": "https://github.com/quarkusio/quarkus/pull/13553#discussion_r536014992", "createdAt": "2020-12-04T10:57:59Z", "author": {"login": "gwenneg"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanDeployment.java", "diffHunk": "@@ -151,6 +153,7 @@\n                 }\n             }\n         }\n+        this.repeatingInterceptorBindingAnnotations = findContainerAnnotations(interceptorBindings, this.beanArchiveIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "503e3067d8dfa9f6eaa0e60ecff1134f11b38122"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "503e3067d8dfa9f6eaa0e60ecff1134f11b38122", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/503e3067d8dfa9f6eaa0e60ecff1134f11b38122", "committedDate": "2020-12-03T17:24:47Z", "message": "Allow repeatable interceptor bindings"}, "afterCommit": {"oid": "b5a13042d9440d58860638e08f367abef121b73c", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/b5a13042d9440d58860638e08f367abef121b73c", "committedDate": "2020-12-08T09:53:01Z", "message": "Allow repeatable interceptor bindings"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b5a13042d9440d58860638e08f367abef121b73c", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/b5a13042d9440d58860638e08f367abef121b73c", "committedDate": "2020-12-08T09:53:01Z", "message": "Allow repeatable interceptor bindings"}, "afterCommit": {"oid": "751efe38af09c45beb036bad215dd994e60a27db", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/751efe38af09c45beb036bad215dd994e60a27db", "committedDate": "2020-12-10T12:52:40Z", "message": "Allow repeatable interceptor bindings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MjA5MDIz", "url": "https://github.com/quarkusio/quarkus/pull/13553#pullrequestreview-549209023", "createdAt": "2020-12-10T13:45:28Z", "commit": {"oid": "751efe38af09c45beb036bad215dd994e60a27db"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzo0NToyOVrOIDJ8-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzo0NToyOVrOIDJ8-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE3OTcwNg==", "bodyText": "Here's a proposal which is really close from the current Quarkus caching API.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            As an example, suppose we have an interceptor that stores method's return values into a cache.\n          \n          \n            \n            The corresponding interceptor binding would be called `@Cached` and would be declared as `@Repeatable`.\n          \n          \n            \n            If we wanted to store the return value into two caches at the same time, we would add `@Cached` twice:\n          \n          \n            \n            \n          \n          \n            \n            [source,java]\n          \n          \n            \n            ----\n          \n          \n            \n            @ApplicationScoped\n          \n          \n            \n            class AllEncompassingService {\n          \n          \n            \n              @Cached(cacheName = \"foo\")\n          \n          \n            \n              @Cached(cacheName = \"bar\")\n          \n          \n            \n              BigData heavyComputation() {\n          \n          \n            \n                // ...\n          \n          \n            \n              }\n          \n          \n            \n            As an example, suppose we have an interceptor that removes all entries from a cache.\n          \n          \n            \n            The corresponding interceptor binding would be called `@CacheInvalidateAll` and would be declared as `@Repeatable`.\n          \n          \n            \n            If we wanted to clear two caches at the same time, we would add `@CacheInvalidateAll` twice:\n          \n          \n            \n            \n          \n          \n            \n            [source,java]\n          \n          \n            \n            ----\n          \n          \n            \n            @ApplicationScoped\n          \n          \n            \n            class AllEncompassingService {\n          \n          \n            \n              @CacheInvalidateAll(cacheName = \"foo\")\n          \n          \n            \n              @CacheInvalidateAll(cacheName = \"bar\")\n          \n          \n            \n              void clearBothCaches() {\n          \n          \n            \n                // ...\n          \n          \n            \n              }\n          \n      \n    \n    \n  \n\nWhen this PR is merged, @CacheInvalidateAll will even become an interceptor binding (it's a simple annotation right now).", "url": "https://github.com/quarkusio/quarkus/pull/13553#discussion_r540179706", "createdAt": "2020-12-10T13:45:29Z", "author": {"login": "gwenneg"}, "path": "docs/src/main/asciidoc/cdi-reference.adoc", "diffHunk": "@@ -735,6 +735,52 @@ class SharedService {\n <2> `@Lock(Lock.Type.READ)` overrides the value specified at class level. It means that any number of clients can invoke the method concurrently, unless the bean instance is locked by `@Lock(Lock.Type.WRITE)`. \n <3> You can also specify the \"wait time\". If it's not possible to acquire the lock in the given time a `LockException` is thrown.\n \n+=== Repeatable interceptor bindings\n+\n+Quarkus has limited support for `@Repeatable` interceptor binding annotations.\n+\n+When binding an interceptor to a component, you can declare multiple `@Repeatable` annotations on methods.\n+Repeatable interceptor bindings declared on classes and stereotypes are not supported, because there are some open questions around interactions with the Interceptors specification.\n+This might be added in the future.\n+\n+As an example, suppose we have an interceptor that stores method's return values into a cache.\n+The corresponding interceptor binding would be called `@Cached` and would be declared as `@Repeatable`.\n+If we wanted to store the return value into two caches at the same time, we would add `@Cached` twice:\n+\n+[source,java]\n+----\n+@ApplicationScoped\n+class AllEncompassingService {\n+  @Cached(cacheName = \"foo\")\n+  @Cached(cacheName = \"bar\")\n+  BigData heavyComputation() {\n+    // ...\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "751efe38af09c45beb036bad215dd994e60a27db"}, "originalPosition": 24}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "751efe38af09c45beb036bad215dd994e60a27db", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/751efe38af09c45beb036bad215dd994e60a27db", "committedDate": "2020-12-10T12:52:40Z", "message": "Allow repeatable interceptor bindings"}, "afterCommit": {"oid": "efdc6a37ed410209680c6a1e69f4a3282a59f922", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/efdc6a37ed410209680c6a1e69f4a3282a59f922", "committedDate": "2020-12-10T14:10:21Z", "message": "Allow repeatable interceptor bindings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MjQwNzkz", "url": "https://github.com/quarkusio/quarkus/pull/13553#pullrequestreview-549240793", "createdAt": "2020-12-10T14:19:16Z", "commit": {"oid": "efdc6a37ed410209680c6a1e69f4a3282a59f922"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1cc18f40b83c5fb28422cfd5b4cb1a9fd04b6bb", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/a1cc18f40b83c5fb28422cfd5b4cb1a9fd04b6bb", "committedDate": "2020-12-10T15:54:21Z", "message": "Allow repeatable interceptor bindings"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "efdc6a37ed410209680c6a1e69f4a3282a59f922", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/efdc6a37ed410209680c6a1e69f4a3282a59f922", "committedDate": "2020-12-10T14:10:21Z", "message": "Allow repeatable interceptor bindings"}, "afterCommit": {"oid": "a1cc18f40b83c5fb28422cfd5b4cb1a9fd04b6bb", "author": {"user": {"login": "Ladicek", "name": "Ladislav Thon"}}, "url": "https://github.com/quarkusio/quarkus/commit/a1cc18f40b83c5fb28422cfd5b4cb1a9fd04b6bb", "committedDate": "2020-12-10T15:54:21Z", "message": "Allow repeatable interceptor bindings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NDEyMjk0", "url": "https://github.com/quarkusio/quarkus/pull/13553#pullrequestreview-549412294", "createdAt": "2020-12-10T17:02:21Z", "commit": {"oid": "a1cc18f40b83c5fb28422cfd5b4cb1a9fd04b6bb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NDc1NDI4", "url": "https://github.com/quarkusio/quarkus/pull/13553#pullrequestreview-549475428", "createdAt": "2020-12-10T18:14:59Z", "commit": {"oid": "a1cc18f40b83c5fb28422cfd5b4cb1a9fd04b6bb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1337, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}