{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MzU3Nzkw", "number": 11797, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMTo1NTozOVrOEfGBtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTowMDo1MlrOEfmTbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDQwMDUzOnYy", "diffSide": "RIGHT", "path": "core/runtime/src/main/java/io/quarkus/runtime/ApplicationLifecycleManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMTo1NTozOVrOHLJolw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMTo1NTozOVrOHLJolw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ1NDIzMQ==", "bodyText": "This was what I observed with the reproducer project in the issue", "url": "https://github.com/quarkusio/quarkus/pull/11797#discussion_r481454231", "createdAt": "2020-09-01T21:55:39Z", "author": {"login": "gastaldi"}, "path": "core/runtime/src/main/java/io/quarkus/runtime/ApplicationLifecycleManager.java", "diffHunk": "@@ -294,6 +294,12 @@ public void run() {\n             } finally {\n                 stateLock.unlock();\n             }\n+            if (currentApplication.isStarted()) {\n+                // On CLI apps, SIGINT won't call io.quarkus.runtime.Application#stop(),\n+                // making the awaitShutdown() below block the application termination process\n+                // It should be a noop if called twice anyway", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32764a82ed4de768bb2d41ea963732aaa29b7aa7"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTY4ODc3OnYy", "diffSide": "RIGHT", "path": "core/runtime/src/main/java/io/quarkus/runtime/ApplicationLifecycleManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTowMDo1MlrOHL-BEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMDozOToyN1rOHMFZdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMxMjQ2NQ==", "bodyText": "It was there before but I'm not sure it's a good idea to use an util coming from GraalVM svm artifact for such a low level thing.", "url": "https://github.com/quarkusio/quarkus/pull/11797#discussion_r482312465", "createdAt": "2020-09-02T19:00:52Z", "author": {"login": "gsmet"}, "path": "core/runtime/src/main/java/io/quarkus/runtime/ApplicationLifecycleManager.java", "diffHunk": "@@ -159,36 +159,36 @@ public static void run(Application application, Class<? extends QuarkusApplicati\n         (exitCodeHandler == null ? defaultExitCodeHandler : exitCodeHandler).accept(getExitCode()); //this may not be called if shutdown was initiated by a signal\n     }\n \n-    private static void registerHooks() {\n+    private static void registerHooks(final Consumer<Integer> exitCodeHandler) {\n         if (ImageInfo.inImageRuntimeCode() && System.getenv(DISABLE_SIGNAL_HANDLERS) == null) {\n-            registerSignalHandlers();\n+            registerSignalHandlers(exitCodeHandler);\n         }\n         final ShutdownHookThread shutdownHookThread = new ShutdownHookThread();\n         Runtime.getRuntime().addShutdownHook(shutdownHookThread);\n     }\n \n-    private static void registerSignalHandlers() {\n-        final SignalHandler handler = new SignalHandler() {\n+    private static void registerSignalHandlers(final Consumer<Integer> exitCodeHandler) {\n+        final SignalHandler exitHandler = new SignalHandler() {\n             @Override\n             public void handle(Signal signal) {\n-                System.exit(signal.getNumber() + 0x80);\n+                exitCodeHandler.accept(signal.getNumber() + 0x80);\n             }\n         };\n-        final SignalHandler quitHandler = new SignalHandler() {\n+        final SignalHandler diagnosticsHandler = new SignalHandler() {\n             @Override\n             public void handle(Signal signal) {\n                 DiagnosticPrinter.printDiagnostics(System.out);\n             }\n         };\n-        handleSignal(\"INT\", handler);\n-        handleSignal(\"TERM\", handler);\n+        handleSignal(\"INT\", exitHandler);\n+        handleSignal(\"TERM\", exitHandler);\n         // the HUP and QUIT signals are not defined for the Windows OpenJDK implementation:\n         // https://hg.openjdk.java.net/jdk8u/jdk8u-dev/hotspot/file/7d5c800dae75/src/os/windows/vm/jvm_windows.cpp\n-        if (OS.getCurrent() == OS.WINDOWS) {\n-            handleSignal(\"BREAK\", quitHandler);\n+        if (OS.WINDOWS.isCurrent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32764a82ed4de768bb2d41ea963732aaa29b7aa7"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQzMzM5Nw==", "bodyText": "Changed to use System.getProperty(\"os.name\"). We need an utility to reuse that in various places", "url": "https://github.com/quarkusio/quarkus/pull/11797#discussion_r482433397", "createdAt": "2020-09-02T20:39:27Z", "author": {"login": "gastaldi"}, "path": "core/runtime/src/main/java/io/quarkus/runtime/ApplicationLifecycleManager.java", "diffHunk": "@@ -159,36 +159,36 @@ public static void run(Application application, Class<? extends QuarkusApplicati\n         (exitCodeHandler == null ? defaultExitCodeHandler : exitCodeHandler).accept(getExitCode()); //this may not be called if shutdown was initiated by a signal\n     }\n \n-    private static void registerHooks() {\n+    private static void registerHooks(final Consumer<Integer> exitCodeHandler) {\n         if (ImageInfo.inImageRuntimeCode() && System.getenv(DISABLE_SIGNAL_HANDLERS) == null) {\n-            registerSignalHandlers();\n+            registerSignalHandlers(exitCodeHandler);\n         }\n         final ShutdownHookThread shutdownHookThread = new ShutdownHookThread();\n         Runtime.getRuntime().addShutdownHook(shutdownHookThread);\n     }\n \n-    private static void registerSignalHandlers() {\n-        final SignalHandler handler = new SignalHandler() {\n+    private static void registerSignalHandlers(final Consumer<Integer> exitCodeHandler) {\n+        final SignalHandler exitHandler = new SignalHandler() {\n             @Override\n             public void handle(Signal signal) {\n-                System.exit(signal.getNumber() + 0x80);\n+                exitCodeHandler.accept(signal.getNumber() + 0x80);\n             }\n         };\n-        final SignalHandler quitHandler = new SignalHandler() {\n+        final SignalHandler diagnosticsHandler = new SignalHandler() {\n             @Override\n             public void handle(Signal signal) {\n                 DiagnosticPrinter.printDiagnostics(System.out);\n             }\n         };\n-        handleSignal(\"INT\", handler);\n-        handleSignal(\"TERM\", handler);\n+        handleSignal(\"INT\", exitHandler);\n+        handleSignal(\"TERM\", exitHandler);\n         // the HUP and QUIT signals are not defined for the Windows OpenJDK implementation:\n         // https://hg.openjdk.java.net/jdk8u/jdk8u-dev/hotspot/file/7d5c800dae75/src/os/windows/vm/jvm_windows.cpp\n-        if (OS.getCurrent() == OS.WINDOWS) {\n-            handleSignal(\"BREAK\", quitHandler);\n+        if (OS.WINDOWS.isCurrent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMxMjQ2NQ=="}, "originalCommit": {"oid": "32764a82ed4de768bb2d41ea963732aaa29b7aa7"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 459, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}