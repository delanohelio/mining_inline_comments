{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NjYxMDE0", "number": 10968, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzowMDowMlrOESQnVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOTozNDowNVrOETLKfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTgyMDM3OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/funqy-http.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzowMDowMlrOG3V6Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMjozODo0NlrOG5Mt0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4Mzg2Nw==", "bodyText": "Why OffsetDateTime and not Date of the other date types inside java.time ?", "url": "https://github.com/quarkusio/quarkus/pull/10968#discussion_r460683867", "createdAt": "2020-07-27T07:00:02Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/funqy-http.adoc", "diffHunk": "@@ -97,15 +107,198 @@ curl \"http://localhost:8080/double\" \\\n -d '2'\n ----\n \n-== Maven Dependencies\n+== GET Query Parameter Mapping\n \n-To write Funqy HTTP functions, simply include the `quarkus-funqy-http` dependency into your Quarkus `pom.xml` file:\n+For GET requests, the Funqy HTTP Binding also has a query parameter mapping for function input parameters.\n+Only bean style classes and `java.util.Map` can be used for your input parameter.  For bean style\n+classes, query parameter names are mapped to properties on the bean class.  Here's an example of a simple\n+`Map`:\n \n-[source, xml]\n+[source, java]\n ----\n-<dependency>\n-    <groupId>io.quarkus</groupId>\n-    <artifactId>quarkus-funqy-http</artifactId>\n-</dependency>\n+@Funq\n+public String hello(Map<String, Integer> map) {\n+...\n+}\n+----\n+\n+Key values must be a primitive type or `String`.  Values can be primitives, `String`, `OffsetDateTime` or a complex", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5fd09686d1a6fb530880f55a83c98842a2ba8b2"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzMDM1Mw==", "bodyText": "Its parse() method is a specific format ISO-8601 where Date requires a DateFormat.  Using offset for date time queries is also a better data structure as dates are usually stored by absolute time.", "url": "https://github.com/quarkusio/quarkus/pull/10968#discussion_r462630353", "createdAt": "2020-07-29T22:38:46Z", "author": {"login": "patriot1burke"}, "path": "docs/src/main/asciidoc/funqy-http.adoc", "diffHunk": "@@ -97,15 +107,198 @@ curl \"http://localhost:8080/double\" \\\n -d '2'\n ----\n \n-== Maven Dependencies\n+== GET Query Parameter Mapping\n \n-To write Funqy HTTP functions, simply include the `quarkus-funqy-http` dependency into your Quarkus `pom.xml` file:\n+For GET requests, the Funqy HTTP Binding also has a query parameter mapping for function input parameters.\n+Only bean style classes and `java.util.Map` can be used for your input parameter.  For bean style\n+classes, query parameter names are mapped to properties on the bean class.  Here's an example of a simple\n+`Map`:\n \n-[source, xml]\n+[source, java]\n ----\n-<dependency>\n-    <groupId>io.quarkus</groupId>\n-    <artifactId>quarkus-funqy-http</artifactId>\n-</dependency>\n+@Funq\n+public String hello(Map<String, Integer> map) {\n+...\n+}\n+----\n+\n+Key values must be a primitive type or `String`.  Values can be primitives, `String`, `OffsetDateTime` or a complex", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4Mzg2Nw=="}, "originalCommit": {"oid": "c5fd09686d1a6fb530880f55a83c98842a2ba8b2"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTgyMzUxOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/funqy-http.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzowMToxMVrOG3V8Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzowMToxMVrOG3V8Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4NDMzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            curl \"http://localhost:8080/greet?pets=itchy&pets.scratchy\"\n          \n          \n            \n            curl \"http://localhost:8080/greet?pets=itchy&pets=scratchy\"", "url": "https://github.com/quarkusio/quarkus/pull/10968#discussion_r460684334", "createdAt": "2020-07-27T07:01:11Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/funqy-http.adoc", "diffHunk": "@@ -97,15 +107,198 @@ curl \"http://localhost:8080/double\" \\\n -d '2'\n ----\n \n-== Maven Dependencies\n+== GET Query Parameter Mapping\n \n-To write Funqy HTTP functions, simply include the `quarkus-funqy-http` dependency into your Quarkus `pom.xml` file:\n+For GET requests, the Funqy HTTP Binding also has a query parameter mapping for function input parameters.\n+Only bean style classes and `java.util.Map` can be used for your input parameter.  For bean style\n+classes, query parameter names are mapped to properties on the bean class.  Here's an example of a simple\n+`Map`:\n \n-[source, xml]\n+[source, java]\n ----\n-<dependency>\n-    <groupId>io.quarkus</groupId>\n-    <artifactId>quarkus-funqy-http</artifactId>\n-</dependency>\n+@Funq\n+public String hello(Map<String, Integer> map) {\n+...\n+}\n+----\n+\n+Key values must be a primitive type or `String`.  Values can be primitives, `String`, `OffsetDateTime` or a complex\n+bean style class.  For the above example, here's the corresponding curl request:\n+\n+[source, shell]\n+----\n+curl \"http://localhost:8080/a=1&b=2\"\n+----\n+\n+The `map` input parameter of the `hello` function would have the key value pairs: `a`->1, `b`->2.\n+\n+Bean style classes can also be use as the input parameter type.  Here's an example:\n+\n+[source, java]\n+----\n+public class Person {\n+    String first;\n+    String last;\n+\n+    public String getFirst() { return first; }\n+    public void setFirst(String first) { this.first = first; }\n+    public String getLast() { return last; }\n+    public void setLast(String last) { this.last = last; }\n+}\n+\n+public class MyFunctions {\n+    @Funq\n+    public String greet(Person p) {\n+       return \"Hello \" + p.getFirst() + \" \" + p.getLast();\n+    }\n+}\n+----\n+\n+Property values can be any primitive type except `char`, `String`, and `OffsetDateTime`.\n+\n+You can invoke on this using an HTTP GET and query parameters:\n+\n+[source, shell]\n+----\n+curl \"http://localhost:8080/greet?first=Bill&last=Burke\"\n+----\n+\n+In the above request, the query parameter names are mapped to corresponding properties in the input class.\n+\n+The input class can also have nested bean classes.  Expanding on the previous example:\n+\n+[source, java]\n+----\n+public class Family {\n+    private Person dad;\n+    private Person mom;\n+\n+    public Person getDad() { return dad; }\n+    public void setDad(Person dad) { this.dad = dad; }\n+    public Person getMom() { return mom; }\n+    public void setMom(Person mom) { this.mom = mom; }\n+}\n+\n+public class MyFunctions {\n+    @Funq\n+    public String greet(Family family) {\n+       ...\n+    }\n+}\n+\n+----\n+\n+In this case, query parameters for nested values use the `.` notation.  For example:\n+\n+[source, shell]\n+----\n+curl \"http://localhost:8080/greet?dad.first=John&dad.last=Smith&mom.first=Martha&mom.last=Smith\"\n+----\n+\n+`java.util.List` and `Set` are also supported as property values.  For example:\n+\n+[source, java]\n+----\n+public class Family {\n+    ...\n+\n+    List<String> pets;\n+}\n+\n+public class MyFunctions {\n+    @Funq\n+    public String greet(Family family) {\n+       ...\n+    }\n+}\n+\n+----\n+\n+To invoke a GET request, just list the `pets` query parameter multiple times.\n+\n+[source, shell]\n+----\n+curl \"http://localhost:8080/greet?pets=itchy&pets.scratchy\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5fd09686d1a6fb530880f55a83c98842a2ba8b2"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTg1MzMxOnYy", "diffSide": "RIGHT", "path": "extensions/funqy/funqy-server-common/runtime/src/main/java/io/quarkus/funqy/runtime/query/QueryObjectMapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzoxMjo0OFrOG3WOVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMjo0ODowOFrOG5M7DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4ODk4Mg==", "bodyText": "I didn't saw any test with OffsetDateTime.", "url": "https://github.com/quarkusio/quarkus/pull/10968#discussion_r460688982", "createdAt": "2020-07-27T07:12:48Z", "author": {"login": "loicmathieu"}, "path": "extensions/funqy/funqy-server-common/runtime/src/main/java/io/quarkus/funqy/runtime/query/QueryObjectMapper.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package io.quarkus.funqy.runtime.query;\n+\n+import java.lang.reflect.Type;\n+import java.time.OffsetDateTime;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import io.quarkus.arc.impl.Reflections;\n+\n+/**\n+ * Turn URI parameter map into an object\n+ *\n+ */\n+public class QueryObjectMapper {\n+    Function<String, Object> extractor(Type type) {\n+        return extractor(Reflections.getRawType(type));\n+    }\n+\n+    Function<String, Object> extractor(Class clz) {\n+        if (String.class.equals(clz)) {\n+            return (strVal) -> {\n+                return strVal;\n+            };\n+        }\n+        if (clz.equals(long.class) || clz.equals(Long.class)) {\n+            return (strVal) -> {\n+                return Long.valueOf(strVal);\n+            };\n+        }\n+        if (clz.equals(int.class) || clz.equals(Integer.class)) {\n+            return (strVal) -> {\n+                return Integer.valueOf(strVal);\n+            };\n+        }\n+        if (clz.equals(short.class) || clz.equals(Short.class)) {\n+            return (strVal) -> {\n+                return Short.valueOf(strVal);\n+            };\n+        }\n+        if (clz.equals(float.class) || clz.equals(Float.class)) {\n+            return (strVal) -> {\n+                return Float.valueOf(strVal);\n+            };\n+        }\n+        if (clz.equals(double.class) || clz.equals(Double.class)) {\n+            return (strVal) -> {\n+                return Double.valueOf(strVal);\n+            };\n+        }\n+        if (clz.equals(boolean.class) || clz.equals(Boolean.class)) {\n+            return (strVal) -> {\n+                return Boolean.valueOf(strVal);\n+            };\n+        }\n+        if (clz.equals(byte.class) || clz.equals(Byte.class)) {\n+            return (strVal) -> {\n+                return Byte.valueOf(strVal);\n+            };\n+        }\n+        if (clz.equals(OffsetDateTime.class)) {\n+            return (strVal) -> {\n+                return OffsetDateTime.parse(strVal);\n+            };\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5fd09686d1a6fb530880f55a83c98842a2ba8b2"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzMzc0MQ==", "bodyText": "test added", "url": "https://github.com/quarkusio/quarkus/pull/10968#discussion_r462633741", "createdAt": "2020-07-29T22:48:08Z", "author": {"login": "patriot1burke"}, "path": "extensions/funqy/funqy-server-common/runtime/src/main/java/io/quarkus/funqy/runtime/query/QueryObjectMapper.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package io.quarkus.funqy.runtime.query;\n+\n+import java.lang.reflect.Type;\n+import java.time.OffsetDateTime;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import io.quarkus.arc.impl.Reflections;\n+\n+/**\n+ * Turn URI parameter map into an object\n+ *\n+ */\n+public class QueryObjectMapper {\n+    Function<String, Object> extractor(Type type) {\n+        return extractor(Reflections.getRawType(type));\n+    }\n+\n+    Function<String, Object> extractor(Class clz) {\n+        if (String.class.equals(clz)) {\n+            return (strVal) -> {\n+                return strVal;\n+            };\n+        }\n+        if (clz.equals(long.class) || clz.equals(Long.class)) {\n+            return (strVal) -> {\n+                return Long.valueOf(strVal);\n+            };\n+        }\n+        if (clz.equals(int.class) || clz.equals(Integer.class)) {\n+            return (strVal) -> {\n+                return Integer.valueOf(strVal);\n+            };\n+        }\n+        if (clz.equals(short.class) || clz.equals(Short.class)) {\n+            return (strVal) -> {\n+                return Short.valueOf(strVal);\n+            };\n+        }\n+        if (clz.equals(float.class) || clz.equals(Float.class)) {\n+            return (strVal) -> {\n+                return Float.valueOf(strVal);\n+            };\n+        }\n+        if (clz.equals(double.class) || clz.equals(Double.class)) {\n+            return (strVal) -> {\n+                return Double.valueOf(strVal);\n+            };\n+        }\n+        if (clz.equals(boolean.class) || clz.equals(Boolean.class)) {\n+            return (strVal) -> {\n+                return Boolean.valueOf(strVal);\n+            };\n+        }\n+        if (clz.equals(byte.class) || clz.equals(Byte.class)) {\n+            return (strVal) -> {\n+                return Byte.valueOf(strVal);\n+            };\n+        }\n+        if (clz.equals(OffsetDateTime.class)) {\n+            return (strVal) -> {\n+                return OffsetDateTime.parse(strVal);\n+            };\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4ODk4Mg=="}, "originalCommit": {"oid": "c5fd09686d1a6fb530880f55a83c98842a2ba8b2"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTQxMzA4OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/funqy-http.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOTozNDowNVrOG4whtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOTozNDowNVrOG4whtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2ODUwMQ==", "bodyText": "You don't rule out char in your list above?", "url": "https://github.com/quarkusio/quarkus/pull/10968#discussion_r462168501", "createdAt": "2020-07-29T09:34:05Z", "author": {"login": "gunnarmorling"}, "path": "docs/src/main/asciidoc/funqy-http.adoc", "diffHunk": "@@ -97,15 +107,198 @@ curl \"http://localhost:8080/double\" \\\n -d '2'\n ----\n \n-== Maven Dependencies\n+== GET Query Parameter Mapping\n \n-To write Funqy HTTP functions, simply include the `quarkus-funqy-http` dependency into your Quarkus `pom.xml` file:\n+For GET requests, the Funqy HTTP Binding also has a query parameter mapping for function input parameters.\n+Only bean style classes and `java.util.Map` can be used for your input parameter.  For bean style\n+classes, query parameter names are mapped to properties on the bean class.  Here's an example of a simple\n+`Map`:\n \n-[source, xml]\n+[source, java]\n ----\n-<dependency>\n-    <groupId>io.quarkus</groupId>\n-    <artifactId>quarkus-funqy-http</artifactId>\n-</dependency>\n+@Funq\n+public String hello(Map<String, Integer> map) {\n+...\n+}\n+----\n+\n+Key values must be a primitive type or `String`.  Values can be primitives, `String`, `OffsetDateTime` or a complex\n+bean style class.  For the above example, here's the corresponding curl request:\n+\n+[source, shell]\n+----\n+curl \"http://localhost:8080/a=1&b=2\"\n+----\n+\n+The `map` input parameter of the `hello` function would have the key value pairs: `a`->1, `b`->2.\n+\n+Bean style classes can also be use as the input parameter type.  Here's an example:\n+\n+[source, java]\n+----\n+public class Person {\n+    String first;\n+    String last;\n+\n+    public String getFirst() { return first; }\n+    public void setFirst(String first) { this.first = first; }\n+    public String getLast() { return last; }\n+    public void setLast(String last) { this.last = last; }\n+}\n+\n+public class MyFunctions {\n+    @Funq\n+    public String greet(Person p) {\n+       return \"Hello \" + p.getFirst() + \" \" + p.getLast();\n+    }\n+}\n+----\n+\n+Property values can be any primitive type except `char`, `String`, and `OffsetDateTime`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5fd09686d1a6fb530880f55a83c98842a2ba8b2"}, "originalPosition": 106}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 879, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}