{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNDUyNzM5", "number": 10294, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMzowMTowNVrOELhnAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMzowMTowNVrOELhnAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTIwNDQ5OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/MainClassBuildStep.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwMzowMTowNVrOGtHebA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNToxMDo1N1rOGtI_pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk2MTU4MA==", "bodyText": "Does this actually need to be generated? Can't it just be a static utility method?", "url": "https://github.com/quarkusio/quarkus/pull/10294#discussion_r449961580", "createdAt": "2020-07-06T03:01:05Z", "author": {"login": "stuartwdouglas"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/MainClassBuildStep.java", "diffHunk": "@@ -308,6 +333,78 @@ void build(List<StaticBytecodeRecorderBuildItem> staticInitTasks,\n         file.close();\n     }\n \n+    /**\n+     * Step timing is enabled only if 'quarkus.debug.print-startup-times' is set.\n+     * This method should be called both in static init and runtime init in order to\n+     * make sure that the system properly works properly in native mode\n+     */\n+    private void setStepTimingField(MethodCreator mv) {\n+        ResultHandle timingEnabledProp = mv.invokeStaticMethod(\n+                ofMethod(System.class, \"getProperty\", String.class, String.class, String.class),\n+                mv.load(MainClassBuildStep.PRINT_STARTUP_TIMES_PROPERTY), mv.load(\"false\"));\n+        mv.writeStaticField(STEP_TIMING_ENABLED_FIELD, mv.invokeStaticMethod(\n+                ofMethod(Boolean.class, \"parseBoolean\", boolean.class, String.class), timingEnabledProp));\n+    }\n+\n+    /**\n+     * Generates the following bytecode:\n+     * \n+     * <pre>\n+     *\n+     * private static void printStepTime() {\n+     *     if (stepTimingEnabled) {\n+     *         long var2 = System.currentTimeMillis();\n+     *         String var0 = STARTUP_CONTEXT.getCurrentBuildStepName();\n+     *         StringBuilder var1 = new StringBuilder(\"Build step \");\n+     *         var1.append(var0);\n+     *         var1.append(\" completed in: \");\n+     *         long var4 = stepTimingStart;\n+     *         String var6 = String.valueOf(Math.subtractExact(var2, var4));\n+     *         var1.append(var6);\n+     *         var1.append(\"ms\");\n+     *         PrintStream var7 = System.out;\n+     *         String var8 = var1.toString();\n+     *         var7.println(var8);\n+     *         stepTimingStart = System.currentTimeMillis();\n+     *     }\n+     * }\n+     *\n+     * </pre>\n+     *\n+     * This is used to print the time it took for a build step to execute. The first invocation of this method\n+     * assumes that the static {@code stepTimingStart} field has been set.\n+     *\n+     * After printing the time, it also resets {@code stepTimingStart} because steps are executed one after the other.\n+     */\n+    private void generationPrintStepTimeMethod(ClassCreator file) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9faf62ef3cd9498e546058775ee122fded6ee5c"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3NzM3OA==", "bodyText": "In it's current form yes because it changes uses the classes static fields. Do you prefer this not be generated and instead have the  stepTimingEnabled check and setting of stepTimingStart outside the method?", "url": "https://github.com/quarkusio/quarkus/pull/10294#discussion_r449977378", "createdAt": "2020-07-06T04:26:57Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/MainClassBuildStep.java", "diffHunk": "@@ -308,6 +333,78 @@ void build(List<StaticBytecodeRecorderBuildItem> staticInitTasks,\n         file.close();\n     }\n \n+    /**\n+     * Step timing is enabled only if 'quarkus.debug.print-startup-times' is set.\n+     * This method should be called both in static init and runtime init in order to\n+     * make sure that the system properly works properly in native mode\n+     */\n+    private void setStepTimingField(MethodCreator mv) {\n+        ResultHandle timingEnabledProp = mv.invokeStaticMethod(\n+                ofMethod(System.class, \"getProperty\", String.class, String.class, String.class),\n+                mv.load(MainClassBuildStep.PRINT_STARTUP_TIMES_PROPERTY), mv.load(\"false\"));\n+        mv.writeStaticField(STEP_TIMING_ENABLED_FIELD, mv.invokeStaticMethod(\n+                ofMethod(Boolean.class, \"parseBoolean\", boolean.class, String.class), timingEnabledProp));\n+    }\n+\n+    /**\n+     * Generates the following bytecode:\n+     * \n+     * <pre>\n+     *\n+     * private static void printStepTime() {\n+     *     if (stepTimingEnabled) {\n+     *         long var2 = System.currentTimeMillis();\n+     *         String var0 = STARTUP_CONTEXT.getCurrentBuildStepName();\n+     *         StringBuilder var1 = new StringBuilder(\"Build step \");\n+     *         var1.append(var0);\n+     *         var1.append(\" completed in: \");\n+     *         long var4 = stepTimingStart;\n+     *         String var6 = String.valueOf(Math.subtractExact(var2, var4));\n+     *         var1.append(var6);\n+     *         var1.append(\"ms\");\n+     *         PrintStream var7 = System.out;\n+     *         String var8 = var1.toString();\n+     *         var7.println(var8);\n+     *         stepTimingStart = System.currentTimeMillis();\n+     *     }\n+     * }\n+     *\n+     * </pre>\n+     *\n+     * This is used to print the time it took for a build step to execute. The first invocation of this method\n+     * assumes that the static {@code stepTimingStart} field has been set.\n+     *\n+     * After printing the time, it also resets {@code stepTimingStart} because steps are executed one after the other.\n+     */\n+    private void generationPrintStepTimeMethod(ClassCreator file) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk2MTU4MA=="}, "originalCommit": {"oid": "c9faf62ef3cd9498e546058775ee122fded6ee5c"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3ODEzNQ==", "bodyText": "Or we could move the fields to the utility class as well :)", "url": "https://github.com/quarkusio/quarkus/pull/10294#discussion_r449978135", "createdAt": "2020-07-06T04:30:29Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/MainClassBuildStep.java", "diffHunk": "@@ -308,6 +333,78 @@ void build(List<StaticBytecodeRecorderBuildItem> staticInitTasks,\n         file.close();\n     }\n \n+    /**\n+     * Step timing is enabled only if 'quarkus.debug.print-startup-times' is set.\n+     * This method should be called both in static init and runtime init in order to\n+     * make sure that the system properly works properly in native mode\n+     */\n+    private void setStepTimingField(MethodCreator mv) {\n+        ResultHandle timingEnabledProp = mv.invokeStaticMethod(\n+                ofMethod(System.class, \"getProperty\", String.class, String.class, String.class),\n+                mv.load(MainClassBuildStep.PRINT_STARTUP_TIMES_PROPERTY), mv.load(\"false\"));\n+        mv.writeStaticField(STEP_TIMING_ENABLED_FIELD, mv.invokeStaticMethod(\n+                ofMethod(Boolean.class, \"parseBoolean\", boolean.class, String.class), timingEnabledProp));\n+    }\n+\n+    /**\n+     * Generates the following bytecode:\n+     * \n+     * <pre>\n+     *\n+     * private static void printStepTime() {\n+     *     if (stepTimingEnabled) {\n+     *         long var2 = System.currentTimeMillis();\n+     *         String var0 = STARTUP_CONTEXT.getCurrentBuildStepName();\n+     *         StringBuilder var1 = new StringBuilder(\"Build step \");\n+     *         var1.append(var0);\n+     *         var1.append(\" completed in: \");\n+     *         long var4 = stepTimingStart;\n+     *         String var6 = String.valueOf(Math.subtractExact(var2, var4));\n+     *         var1.append(var6);\n+     *         var1.append(\"ms\");\n+     *         PrintStream var7 = System.out;\n+     *         String var8 = var1.toString();\n+     *         var7.println(var8);\n+     *         stepTimingStart = System.currentTimeMillis();\n+     *     }\n+     * }\n+     *\n+     * </pre>\n+     *\n+     * This is used to print the time it took for a build step to execute. The first invocation of this method\n+     * assumes that the static {@code stepTimingStart} field has been set.\n+     *\n+     * After printing the time, it also resets {@code stepTimingStart} because steps are executed one after the other.\n+     */\n+    private void generationPrintStepTimeMethod(ClassCreator file) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk2MTU4MA=="}, "originalCommit": {"oid": "c9faf62ef3cd9498e546058775ee122fded6ee5c"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4Mjk4Mg==", "bodyText": "Yea, I was thinking just move as much as possible to the utility class.", "url": "https://github.com/quarkusio/quarkus/pull/10294#discussion_r449982982", "createdAt": "2020-07-06T04:54:39Z", "author": {"login": "stuartwdouglas"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/MainClassBuildStep.java", "diffHunk": "@@ -308,6 +333,78 @@ void build(List<StaticBytecodeRecorderBuildItem> staticInitTasks,\n         file.close();\n     }\n \n+    /**\n+     * Step timing is enabled only if 'quarkus.debug.print-startup-times' is set.\n+     * This method should be called both in static init and runtime init in order to\n+     * make sure that the system properly works properly in native mode\n+     */\n+    private void setStepTimingField(MethodCreator mv) {\n+        ResultHandle timingEnabledProp = mv.invokeStaticMethod(\n+                ofMethod(System.class, \"getProperty\", String.class, String.class, String.class),\n+                mv.load(MainClassBuildStep.PRINT_STARTUP_TIMES_PROPERTY), mv.load(\"false\"));\n+        mv.writeStaticField(STEP_TIMING_ENABLED_FIELD, mv.invokeStaticMethod(\n+                ofMethod(Boolean.class, \"parseBoolean\", boolean.class, String.class), timingEnabledProp));\n+    }\n+\n+    /**\n+     * Generates the following bytecode:\n+     * \n+     * <pre>\n+     *\n+     * private static void printStepTime() {\n+     *     if (stepTimingEnabled) {\n+     *         long var2 = System.currentTimeMillis();\n+     *         String var0 = STARTUP_CONTEXT.getCurrentBuildStepName();\n+     *         StringBuilder var1 = new StringBuilder(\"Build step \");\n+     *         var1.append(var0);\n+     *         var1.append(\" completed in: \");\n+     *         long var4 = stepTimingStart;\n+     *         String var6 = String.valueOf(Math.subtractExact(var2, var4));\n+     *         var1.append(var6);\n+     *         var1.append(\"ms\");\n+     *         PrintStream var7 = System.out;\n+     *         String var8 = var1.toString();\n+     *         var7.println(var8);\n+     *         stepTimingStart = System.currentTimeMillis();\n+     *     }\n+     * }\n+     *\n+     * </pre>\n+     *\n+     * This is used to print the time it took for a build step to execute. The first invocation of this method\n+     * assumes that the static {@code stepTimingStart} field has been set.\n+     *\n+     * After printing the time, it also resets {@code stepTimingStart} because steps are executed one after the other.\n+     */\n+    private void generationPrintStepTimeMethod(ClassCreator file) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk2MTU4MA=="}, "originalCommit": {"oid": "c9faf62ef3cd9498e546058775ee122fded6ee5c"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4NDk3MQ==", "bodyText": "On it", "url": "https://github.com/quarkusio/quarkus/pull/10294#discussion_r449984971", "createdAt": "2020-07-06T05:04:02Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/MainClassBuildStep.java", "diffHunk": "@@ -308,6 +333,78 @@ void build(List<StaticBytecodeRecorderBuildItem> staticInitTasks,\n         file.close();\n     }\n \n+    /**\n+     * Step timing is enabled only if 'quarkus.debug.print-startup-times' is set.\n+     * This method should be called both in static init and runtime init in order to\n+     * make sure that the system properly works properly in native mode\n+     */\n+    private void setStepTimingField(MethodCreator mv) {\n+        ResultHandle timingEnabledProp = mv.invokeStaticMethod(\n+                ofMethod(System.class, \"getProperty\", String.class, String.class, String.class),\n+                mv.load(MainClassBuildStep.PRINT_STARTUP_TIMES_PROPERTY), mv.load(\"false\"));\n+        mv.writeStaticField(STEP_TIMING_ENABLED_FIELD, mv.invokeStaticMethod(\n+                ofMethod(Boolean.class, \"parseBoolean\", boolean.class, String.class), timingEnabledProp));\n+    }\n+\n+    /**\n+     * Generates the following bytecode:\n+     * \n+     * <pre>\n+     *\n+     * private static void printStepTime() {\n+     *     if (stepTimingEnabled) {\n+     *         long var2 = System.currentTimeMillis();\n+     *         String var0 = STARTUP_CONTEXT.getCurrentBuildStepName();\n+     *         StringBuilder var1 = new StringBuilder(\"Build step \");\n+     *         var1.append(var0);\n+     *         var1.append(\" completed in: \");\n+     *         long var4 = stepTimingStart;\n+     *         String var6 = String.valueOf(Math.subtractExact(var2, var4));\n+     *         var1.append(var6);\n+     *         var1.append(\"ms\");\n+     *         PrintStream var7 = System.out;\n+     *         String var8 = var1.toString();\n+     *         var7.println(var8);\n+     *         stepTimingStart = System.currentTimeMillis();\n+     *     }\n+     * }\n+     *\n+     * </pre>\n+     *\n+     * This is used to print the time it took for a build step to execute. The first invocation of this method\n+     * assumes that the static {@code stepTimingStart} field has been set.\n+     *\n+     * After printing the time, it also resets {@code stepTimingStart} because steps are executed one after the other.\n+     */\n+    private void generationPrintStepTimeMethod(ClassCreator file) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk2MTU4MA=="}, "originalCommit": {"oid": "c9faf62ef3cd9498e546058775ee122fded6ee5c"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4NjQ3MQ==", "bodyText": "PR updated", "url": "https://github.com/quarkusio/quarkus/pull/10294#discussion_r449986471", "createdAt": "2020-07-06T05:10:57Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/MainClassBuildStep.java", "diffHunk": "@@ -308,6 +333,78 @@ void build(List<StaticBytecodeRecorderBuildItem> staticInitTasks,\n         file.close();\n     }\n \n+    /**\n+     * Step timing is enabled only if 'quarkus.debug.print-startup-times' is set.\n+     * This method should be called both in static init and runtime init in order to\n+     * make sure that the system properly works properly in native mode\n+     */\n+    private void setStepTimingField(MethodCreator mv) {\n+        ResultHandle timingEnabledProp = mv.invokeStaticMethod(\n+                ofMethod(System.class, \"getProperty\", String.class, String.class, String.class),\n+                mv.load(MainClassBuildStep.PRINT_STARTUP_TIMES_PROPERTY), mv.load(\"false\"));\n+        mv.writeStaticField(STEP_TIMING_ENABLED_FIELD, mv.invokeStaticMethod(\n+                ofMethod(Boolean.class, \"parseBoolean\", boolean.class, String.class), timingEnabledProp));\n+    }\n+\n+    /**\n+     * Generates the following bytecode:\n+     * \n+     * <pre>\n+     *\n+     * private static void printStepTime() {\n+     *     if (stepTimingEnabled) {\n+     *         long var2 = System.currentTimeMillis();\n+     *         String var0 = STARTUP_CONTEXT.getCurrentBuildStepName();\n+     *         StringBuilder var1 = new StringBuilder(\"Build step \");\n+     *         var1.append(var0);\n+     *         var1.append(\" completed in: \");\n+     *         long var4 = stepTimingStart;\n+     *         String var6 = String.valueOf(Math.subtractExact(var2, var4));\n+     *         var1.append(var6);\n+     *         var1.append(\"ms\");\n+     *         PrintStream var7 = System.out;\n+     *         String var8 = var1.toString();\n+     *         var7.println(var8);\n+     *         stepTimingStart = System.currentTimeMillis();\n+     *     }\n+     * }\n+     *\n+     * </pre>\n+     *\n+     * This is used to print the time it took for a build step to execute. The first invocation of this method\n+     * assumes that the static {@code stepTimingStart} field has been set.\n+     *\n+     * After printing the time, it also resets {@code stepTimingStart} because steps are executed one after the other.\n+     */\n+    private void generationPrintStepTimeMethod(ClassCreator file) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk2MTU4MA=="}, "originalCommit": {"oid": "c9faf62ef3cd9498e546058775ee122fded6ee5c"}, "originalPosition": 121}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2667, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}