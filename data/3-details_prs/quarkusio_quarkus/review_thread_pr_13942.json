{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxNzQxMTky", "number": 13942, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxNzo0NzoyOVrOFSua6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxNzo0NzoyOVrOFSua6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1MTc5MjQzOnYy", "diffSide": "RIGHT", "path": "extensions/kubernetes-service-binding/runtime/src/main/java/io/quarkus/kubernetes/service/binding/runtime/JdbcDatasourceUtil.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxNzo0NzoyOVrOIZy99A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxNzo1OTo0N1rOIZzi_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzkyMDM3Mg==", "bodyText": "Does this really work with all the datasources? I'm wondering if the datasource shouldn't be providing the format?", "url": "https://github.com/quarkusio/quarkus/pull/13942#discussion_r563920372", "createdAt": "2021-01-25T17:47:29Z", "author": {"login": "gsmet"}, "path": "extensions/kubernetes-service-binding/runtime/src/main/java/io/quarkus/kubernetes/service/binding/runtime/JdbcDatasourceUtil.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package io.quarkus.kubernetes.service.binding.runtime;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.jboss.logging.Logger;\n+\n+/**\n+ * This utility collects the conversion of Service types that correspond to JDBC data-sources\n+ * into a single place as the code for all is the same.\n+ * This inevitably results in datasource related logic being places inside this (otherwise)\n+ * service binding agnostic module, but it's a small price to pay compared to the alternative\n+ * of copying and pasting the same code for all JDBC data-sources.\n+ */\n+public class JdbcDatasourceUtil {\n+\n+    private static final Logger log = Logger.getLogger(JdbcDatasourceUtil.class);\n+\n+    public static Optional<ServiceBindingConfigSource> convert(List<ServiceBinding> serviceBindings, String type) {\n+        return convert(serviceBindings, type, type);\n+    }\n+\n+    public static Optional<ServiceBindingConfigSource> convert(List<ServiceBinding> serviceBindings, String bindingType,\n+            String urlType) {\n+        Optional<ServiceBinding> matchingByType = ServiceBinding.singleMatchingByType(bindingType, serviceBindings);\n+        if (!matchingByType.isPresent()) {\n+            return Optional.empty();\n+        }\n+\n+        Map<String, String> properties = new HashMap<>();\n+        ServiceBinding binding = matchingByType.get();\n+\n+        String username = binding.getProperties().get(\"username\");\n+        if (username != null) {\n+            properties.put(\"quarkus.datasource.username\", username);\n+        } else {\n+            log.debug(\"Property 'username' was not found\");\n+        }\n+        String password = binding.getProperties().get(\"password\");\n+        if (password != null) {\n+            properties.put(\"quarkus.datasource.password\", password);\n+        } else {\n+            log.debug(\"Property 'password' was not found\");\n+        }\n+        String host = binding.getProperties().get(\"host\");\n+        String port = binding.getProperties().get(\"port\");\n+        String database = binding.getProperties().get(\"database\");\n+        if ((host != null) && (database != null)) {\n+            String portPart = \"\";\n+            if (port != null) {\n+                portPart = \":\" + port;\n+            }\n+            properties.put(\"quarkus.datasource.jdbc.url\",\n+                    String.format(\"jdbc:%s://%s%s/%s\", urlType, host, portPart, database));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "031e5bf4eddb2f6399ef8c726e8df8e63bb8439c"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzkyMTI0Mw==", "bodyText": "It seems to be common for all the ones we support, no?", "url": "https://github.com/quarkusio/quarkus/pull/13942#discussion_r563921243", "createdAt": "2021-01-25T17:48:46Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes-service-binding/runtime/src/main/java/io/quarkus/kubernetes/service/binding/runtime/JdbcDatasourceUtil.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package io.quarkus.kubernetes.service.binding.runtime;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.jboss.logging.Logger;\n+\n+/**\n+ * This utility collects the conversion of Service types that correspond to JDBC data-sources\n+ * into a single place as the code for all is the same.\n+ * This inevitably results in datasource related logic being places inside this (otherwise)\n+ * service binding agnostic module, but it's a small price to pay compared to the alternative\n+ * of copying and pasting the same code for all JDBC data-sources.\n+ */\n+public class JdbcDatasourceUtil {\n+\n+    private static final Logger log = Logger.getLogger(JdbcDatasourceUtil.class);\n+\n+    public static Optional<ServiceBindingConfigSource> convert(List<ServiceBinding> serviceBindings, String type) {\n+        return convert(serviceBindings, type, type);\n+    }\n+\n+    public static Optional<ServiceBindingConfigSource> convert(List<ServiceBinding> serviceBindings, String bindingType,\n+            String urlType) {\n+        Optional<ServiceBinding> matchingByType = ServiceBinding.singleMatchingByType(bindingType, serviceBindings);\n+        if (!matchingByType.isPresent()) {\n+            return Optional.empty();\n+        }\n+\n+        Map<String, String> properties = new HashMap<>();\n+        ServiceBinding binding = matchingByType.get();\n+\n+        String username = binding.getProperties().get(\"username\");\n+        if (username != null) {\n+            properties.put(\"quarkus.datasource.username\", username);\n+        } else {\n+            log.debug(\"Property 'username' was not found\");\n+        }\n+        String password = binding.getProperties().get(\"password\");\n+        if (password != null) {\n+            properties.put(\"quarkus.datasource.password\", password);\n+        } else {\n+            log.debug(\"Property 'password' was not found\");\n+        }\n+        String host = binding.getProperties().get(\"host\");\n+        String port = binding.getProperties().get(\"port\");\n+        String database = binding.getProperties().get(\"database\");\n+        if ((host != null) && (database != null)) {\n+            String portPart = \"\";\n+            if (port != null) {\n+                portPart = \":\" + port;\n+            }\n+            properties.put(\"quarkus.datasource.jdbc.url\",\n+                    String.format(\"jdbc:%s://%s%s/%s\", urlType, host, portPart, database));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzkyMDM3Mg=="}, "originalCommit": {"oid": "031e5bf4eddb2f6399ef8c726e8df8e63bb8439c"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzkyNzQ0MA==", "bodyText": "Maybe. If you have checked them then we can probably live with it for the time being.", "url": "https://github.com/quarkusio/quarkus/pull/13942#discussion_r563927440", "createdAt": "2021-01-25T17:56:48Z", "author": {"login": "gsmet"}, "path": "extensions/kubernetes-service-binding/runtime/src/main/java/io/quarkus/kubernetes/service/binding/runtime/JdbcDatasourceUtil.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package io.quarkus.kubernetes.service.binding.runtime;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.jboss.logging.Logger;\n+\n+/**\n+ * This utility collects the conversion of Service types that correspond to JDBC data-sources\n+ * into a single place as the code for all is the same.\n+ * This inevitably results in datasource related logic being places inside this (otherwise)\n+ * service binding agnostic module, but it's a small price to pay compared to the alternative\n+ * of copying and pasting the same code for all JDBC data-sources.\n+ */\n+public class JdbcDatasourceUtil {\n+\n+    private static final Logger log = Logger.getLogger(JdbcDatasourceUtil.class);\n+\n+    public static Optional<ServiceBindingConfigSource> convert(List<ServiceBinding> serviceBindings, String type) {\n+        return convert(serviceBindings, type, type);\n+    }\n+\n+    public static Optional<ServiceBindingConfigSource> convert(List<ServiceBinding> serviceBindings, String bindingType,\n+            String urlType) {\n+        Optional<ServiceBinding> matchingByType = ServiceBinding.singleMatchingByType(bindingType, serviceBindings);\n+        if (!matchingByType.isPresent()) {\n+            return Optional.empty();\n+        }\n+\n+        Map<String, String> properties = new HashMap<>();\n+        ServiceBinding binding = matchingByType.get();\n+\n+        String username = binding.getProperties().get(\"username\");\n+        if (username != null) {\n+            properties.put(\"quarkus.datasource.username\", username);\n+        } else {\n+            log.debug(\"Property 'username' was not found\");\n+        }\n+        String password = binding.getProperties().get(\"password\");\n+        if (password != null) {\n+            properties.put(\"quarkus.datasource.password\", password);\n+        } else {\n+            log.debug(\"Property 'password' was not found\");\n+        }\n+        String host = binding.getProperties().get(\"host\");\n+        String port = binding.getProperties().get(\"port\");\n+        String database = binding.getProperties().get(\"database\");\n+        if ((host != null) && (database != null)) {\n+            String portPart = \"\";\n+            if (port != null) {\n+                portPart = \":\" + port;\n+            }\n+            properties.put(\"quarkus.datasource.jdbc.url\",\n+                    String.format(\"jdbc:%s://%s%s/%s\", urlType, host, portPart, database));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzkyMDM3Mg=="}, "originalCommit": {"oid": "031e5bf4eddb2f6399ef8c726e8df8e63bb8439c"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzkyOTg1NA==", "bodyText": "I checked the URLs we use in the integration tests and they are all the same.\nI agree that long term we'll probably need a better strategy (which most likely will that into the various DB specifc properties that Service Binding might give us), but for the time being I think it's OK", "url": "https://github.com/quarkusio/quarkus/pull/13942#discussion_r563929854", "createdAt": "2021-01-25T17:59:47Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes-service-binding/runtime/src/main/java/io/quarkus/kubernetes/service/binding/runtime/JdbcDatasourceUtil.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package io.quarkus.kubernetes.service.binding.runtime;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.jboss.logging.Logger;\n+\n+/**\n+ * This utility collects the conversion of Service types that correspond to JDBC data-sources\n+ * into a single place as the code for all is the same.\n+ * This inevitably results in datasource related logic being places inside this (otherwise)\n+ * service binding agnostic module, but it's a small price to pay compared to the alternative\n+ * of copying and pasting the same code for all JDBC data-sources.\n+ */\n+public class JdbcDatasourceUtil {\n+\n+    private static final Logger log = Logger.getLogger(JdbcDatasourceUtil.class);\n+\n+    public static Optional<ServiceBindingConfigSource> convert(List<ServiceBinding> serviceBindings, String type) {\n+        return convert(serviceBindings, type, type);\n+    }\n+\n+    public static Optional<ServiceBindingConfigSource> convert(List<ServiceBinding> serviceBindings, String bindingType,\n+            String urlType) {\n+        Optional<ServiceBinding> matchingByType = ServiceBinding.singleMatchingByType(bindingType, serviceBindings);\n+        if (!matchingByType.isPresent()) {\n+            return Optional.empty();\n+        }\n+\n+        Map<String, String> properties = new HashMap<>();\n+        ServiceBinding binding = matchingByType.get();\n+\n+        String username = binding.getProperties().get(\"username\");\n+        if (username != null) {\n+            properties.put(\"quarkus.datasource.username\", username);\n+        } else {\n+            log.debug(\"Property 'username' was not found\");\n+        }\n+        String password = binding.getProperties().get(\"password\");\n+        if (password != null) {\n+            properties.put(\"quarkus.datasource.password\", password);\n+        } else {\n+            log.debug(\"Property 'password' was not found\");\n+        }\n+        String host = binding.getProperties().get(\"host\");\n+        String port = binding.getProperties().get(\"port\");\n+        String database = binding.getProperties().get(\"database\");\n+        if ((host != null) && (database != null)) {\n+            String portPart = \"\";\n+            if (port != null) {\n+                portPart = \":\" + port;\n+            }\n+            properties.put(\"quarkus.datasource.jdbc.url\",\n+                    String.format(\"jdbc:%s://%s%s/%s\", urlType, host, portPart, database));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzkyMDM3Mg=="}, "originalCommit": {"oid": "031e5bf4eddb2f6399ef8c726e8df8e63bb8439c"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4412, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}