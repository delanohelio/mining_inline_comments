{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NTM3NDY0", "number": 9186, "title": "Simplify Mongo Client integration with CDI", "bodyText": "", "createdAt": "2020-05-09T08:12:56Z", "url": "https://github.com/quarkusio/quarkus/pull/9186", "merged": true, "mergeCommit": {"oid": "745ff1b64242fadbfb651360808fcbc2ae47e729"}, "closed": true, "closedAt": "2020-05-11T15:50:26Z", "author": {"login": "geoand"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgPMySAFqTQwOTEzODUzNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgRuCmAFqTQwOTMwMTk0Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MTM4NTM1", "url": "https://github.com/quarkusio/quarkus/pull/9186#pullrequestreview-409138535", "createdAt": "2020-05-11T12:47:54Z", "commit": {"oid": "78068ad0b0fe5464e01adee37e1e38d4cfe84f3d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjo0Nzo1NVrOGTauSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjo0OToxMVrOGTaxDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAxMzk2Mw==", "bodyText": "I don't like the boolean to switch from the sync and reactive client. I found it not really readable.\nCan we have two methods instead ?", "url": "https://github.com/quarkusio/quarkus/pull/9186#discussion_r423013963", "createdAt": "2020-05-11T12:47:55Z", "author": {"login": "loicmathieu"}, "path": "extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/MongoClientProcessor.java", "diffHunk": "@@ -119,233 +103,105 @@ public void mongoClientNames(ApplicationArchivesBuildItem applicationArchivesBui\n         }\n     }\n \n-    /**\n-     * Create a producer bean managing the lifecycle of the MongoClient.\n-     * <p>\n-     * The generated class will look like\n-     * \n-     * <pre>\n-     * public class myclass extends AbstractMongoClientProducer {\n-     *     &#64;Singleton\n-     *     &#64;Produces\n-     *     &#64;Default\n-     *     public MongoClient createDefaultMongoClient() {\n-     *         MongoClientConfig cfg = getDefaultMongoClientConfig();\n-     *         return createMongoClient(cfg);\n-     *     }\n-     * \n-     *     &#64;Singleton\n-     *     &#64;Produces\n-     *     &#64;Default\n-     *     public ReactiveMongoClient createDefaultReactiveMongoClient() {\n-     *         MongoClientConfig cfg = getDefaultMongoClientConfig();\n-     *         return createReactiveMongoClient(cfg);\n-     *     }\n-     * \n-     *     // for each named mongoclient configuration\n-     *     // example:\n-     *     // quarkus.mongodb.cluster1.connection-string = mongodb://mongo1:27017,mongo2:27017\n-     *     &#64;Singleton\n-     *     &#64;Produces\n-     *     &#64;Named(\"cluster1\")\n-     *     &#64;MongoClientName(\"cluster1\")\n-     *     public MongoClient createNamedMongoClient_123456() {\n-     *         MongoClientConfig cfg = getMongoClientConfig(\"cluster1\");\n-     *         return createMongoClient(cfg);\n-     *     }\n-     * \n-     *     &#64;Singleton\n-     *     &#64;Produces\n-     *     &#64;Named(\"cluster1\")\n-     *     &#64;MongoClientName(\"cluster1\")\n-     *     public ReactiveMongoClient createNamedReactiveMongoClient_123456() {\n-     *         MongoClientConfig cfg = getMongoClientConfig(\"cluster1\");\n-     *         return createReactiveMongoClient(cfg);\n-     *     }\n-     * }\n-     * </pre>\n-     */\n-    private void createMongoClientProducerBean(List<MongoClientNameBuildItem> mongoClientNames,\n-            BuildProducer<GeneratedBeanBuildItem> generatedBean,\n-            String mongoClientProducerClassName, boolean makeUnremovable) {\n-\n-        ClassOutput classOutput = new GeneratedBeanGizmoAdaptor(generatedBean);\n-\n-        try (ClassCreator classCreator = ClassCreator.builder().classOutput(classOutput)\n-                .className(mongoClientProducerClassName)\n-                .superClass(AbstractMongoClientProducer.class)\n-                .build()) {\n-            classCreator.addAnnotation(Singleton.class);\n-\n-            try (MethodCreator defaultMongoClientMethodCreator = classCreator.getMethodCreator(\"createDefaultMongoClient\",\n-                    MongoClient.class)) {\n-                defaultMongoClientMethodCreator.addAnnotation(Singleton.class);\n-                defaultMongoClientMethodCreator.addAnnotation(Produces.class);\n-                defaultMongoClientMethodCreator.addAnnotation(Default.class);\n-                if (makeUnremovable) {\n-                    defaultMongoClientMethodCreator.addAnnotation(Unremovable.class);\n-                }\n-\n-                ResultHandle mongoClientConfig = defaultMongoClientMethodCreator.invokeVirtualMethod(\n-                        MethodDescriptor.ofMethod(AbstractMongoClientProducer.class, \"getDefaultMongoClientConfig\",\n-                                MongoClientConfig.class),\n-                        defaultMongoClientMethodCreator.getThis());\n-                ResultHandle defaultMongoClientNameRH = defaultMongoClientMethodCreator\n-                        .load(MongoClientRecorder.DEFAULT_MONGOCLIENT_NAME);\n-\n-                defaultMongoClientMethodCreator.returnValue(\n-                        defaultMongoClientMethodCreator.invokeVirtualMethod(\n-                                MethodDescriptor.ofMethod(AbstractMongoClientProducer.class, \"createMongoClient\",\n-                                        MongoClient.class,\n-                                        MongoClientConfig.class, String.class),\n-                                defaultMongoClientMethodCreator.getThis(),\n-                                mongoClientConfig, defaultMongoClientNameRH));\n-            }\n-\n-            // Default Mutiny reactive client\n-            try (MethodCreator defaultReactiveMongoClientMethodCreator = classCreator.getMethodCreator(\n-                    \"createDefaultReactiveMongoClient\",\n-                    ReactiveMongoClient.class)) {\n-                defaultReactiveMongoClientMethodCreator.addAnnotation(Singleton.class);\n-                defaultReactiveMongoClientMethodCreator.addAnnotation(Produces.class);\n-                defaultReactiveMongoClientMethodCreator.addAnnotation(Default.class);\n-                if (makeUnremovable) {\n-                    defaultReactiveMongoClientMethodCreator.addAnnotation(Unremovable.class);\n-                }\n-\n-                ResultHandle mongoReactiveClientConfig = defaultReactiveMongoClientMethodCreator.invokeVirtualMethod(\n-                        MethodDescriptor.ofMethod(AbstractMongoClientProducer.class, \"getDefaultMongoClientConfig\",\n-                                MongoClientConfig.class),\n-                        defaultReactiveMongoClientMethodCreator.getThis());\n-\n-                ResultHandle defaultReactiveMongoClientNameRH = defaultReactiveMongoClientMethodCreator\n-                        .load(MongoClientRecorder.DEFAULT_MONGOCLIENT_NAME);\n-                defaultReactiveMongoClientMethodCreator.returnValue(\n-                        defaultReactiveMongoClientMethodCreator.invokeVirtualMethod(\n-                                MethodDescriptor.ofMethod(AbstractMongoClientProducer.class, \"createReactiveMongoClient\",\n-                                        ReactiveMongoClient.class,\n-                                        MongoClientConfig.class, String.class),\n-                                defaultReactiveMongoClientMethodCreator.getThis(),\n-                                mongoReactiveClientConfig, defaultReactiveMongoClientNameRH));\n-            }\n-\n-            for (MongoClientNameBuildItem bi : mongoClientNames) {\n-                String namedMongoClientName = bi.getName();\n-                try (MethodCreator namedMongoClientMethodCreator = classCreator.getMethodCreator(\n-                        \"createNamedMongoClient_\" + HashUtil.sha1(namedMongoClientName),\n-                        MongoClient.class)) {\n-                    namedMongoClientMethodCreator.addAnnotation(Singleton.class);\n-                    namedMongoClientMethodCreator.addAnnotation(Produces.class);\n-                    namedMongoClientMethodCreator.addAnnotation(AnnotationInstance.create(DotNames.NAMED, null,\n-                            new AnnotationValue[] { AnnotationValue.createStringValue(\"value\", namedMongoClientName) }));\n-                    namedMongoClientMethodCreator\n-                            .addAnnotation(AnnotationInstance.create(MONGOCLIENT_ANNOTATION, null,\n-                                    new AnnotationValue[] {\n-                                            AnnotationValue.createStringValue(\"value\", namedMongoClientName) }));\n-                    if (makeUnremovable) {\n-                        namedMongoClientMethodCreator.addAnnotation(Unremovable.class);\n-                    }\n-\n-                    ResultHandle namedMongoClientNameRH = namedMongoClientMethodCreator.load(namedMongoClientName);\n-\n-                    ResultHandle namedMongoClientConfig = namedMongoClientMethodCreator.invokeVirtualMethod(\n-                            MethodDescriptor.ofMethod(AbstractMongoClientProducer.class, \"getMongoClientConfig\",\n-                                    MongoClientConfig.class, String.class),\n-                            namedMongoClientMethodCreator.getThis(), namedMongoClientNameRH);\n-\n-                    namedMongoClientMethodCreator.returnValue(\n-                            namedMongoClientMethodCreator.invokeVirtualMethod(\n-                                    MethodDescriptor.ofMethod(AbstractMongoClientProducer.class, \"createMongoClient\",\n-                                            MongoClient.class,\n-                                            MongoClientConfig.class, String.class),\n-                                    namedMongoClientMethodCreator.getThis(),\n-                                    namedMongoClientConfig, namedMongoClientNameRH));\n-                }\n-\n-                // Mutiny reactive clients\n-                try (MethodCreator namedReactiveMongoClientMethodCreator = classCreator.getMethodCreator(\n-                        \"createNamedReactiveMongoClient_\" + HashUtil.sha1(namedMongoClientName),\n-                        ReactiveMongoClient.class)) {\n-                    namedReactiveMongoClientMethodCreator.addAnnotation(Singleton.class);\n-                    namedReactiveMongoClientMethodCreator.addAnnotation(Produces.class);\n-                    namedReactiveMongoClientMethodCreator.addAnnotation(AnnotationInstance.create(DotNames.NAMED, null,\n-                            new AnnotationValue[] {\n-                                    AnnotationValue.createStringValue(\"value\",\n-                                            namedMongoClientName + MongoClientRecorder.REACTIVE_CLIENT_NAME_SUFFIX) }));\n-                    namedReactiveMongoClientMethodCreator\n-                            .addAnnotation(AnnotationInstance.create(MONGOCLIENT_ANNOTATION, null,\n-                                    new AnnotationValue[] {\n-                                            AnnotationValue.createStringValue(\"value\", namedMongoClientName) }));\n-                    if (makeUnremovable) {\n-                        namedReactiveMongoClientMethodCreator.addAnnotation(Unremovable.class);\n-                    }\n-\n-                    ResultHandle namedReactiveMongoClientNameRH = namedReactiveMongoClientMethodCreator\n-                            .load(namedMongoClientName);\n-\n-                    ResultHandle namedReactiveMongoClientConfig = namedReactiveMongoClientMethodCreator.invokeVirtualMethod(\n-                            MethodDescriptor.ofMethod(AbstractMongoClientProducer.class, \"getMongoClientConfig\",\n-                                    MongoClientConfig.class, String.class),\n-                            namedReactiveMongoClientMethodCreator.getThis(), namedReactiveMongoClientNameRH);\n-\n-                    namedReactiveMongoClientMethodCreator.returnValue(\n-                            namedReactiveMongoClientMethodCreator.invokeVirtualMethod(\n-                                    MethodDescriptor.ofMethod(AbstractMongoClientProducer.class, \"createReactiveMongoClient\",\n-                                            ReactiveMongoClient.class,\n-                                            MongoClientConfig.class, String.class),\n-                                    namedReactiveMongoClientMethodCreator.getThis(),\n-                                    namedReactiveMongoClientConfig, namedReactiveMongoClientNameRH));\n-                }\n-            }\n-        }\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FeatureBuildItem.MONGODB_CLIENT);\n+    }\n+\n+    @BuildStep\n+    ExtensionSslNativeSupportBuildItem ssl() {\n+        return new ExtensionSslNativeSupportBuildItem(FeatureBuildItem.MONGODB_CLIENT);\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     @Record(STATIC_INIT)\n     @BuildStep\n-    BeanContainerListenerBuildItem build(\n+    void build(\n             List<MongoClientNameBuildItem> mongoClientNames,\n-            RecorderContext recorderContext,\n             MongoClientRecorder recorder,\n-            BuildProducer<FeatureBuildItem> feature,\n-            Optional<MongoUnremovableClientsBuildItem> mongoUnremovableClientsBuildItem,\n-            SslNativeConfigBuildItem sslNativeConfig, BuildProducer<ExtensionSslNativeSupportBuildItem> sslNativeSupport,\n-            BuildProducer<GeneratedBeanBuildItem> generatedBean) throws Exception {\n+            SslNativeConfigBuildItem sslNativeConfig,\n+            CodecProviderBuildItem codecProvider,\n+            BsonDiscriminatorBuildItem bsonDiscriminator,\n+            List<MongoConnectionPoolListenerBuildItem> connectionPoolListenerProvider,\n+            BuildProducer<MongoConnectionNameBuildItem> mongoConnections,\n+            BuildProducer<SyntheticBeanBuildItem> syntheticBeanBuildItemBuildProducer,\n+            BuildProducer<AdditionalBeanBuildItem> additionalBeans) {\n+\n+        List<ConnectionPoolListener> poolListenerList = connectionPoolListenerProvider.stream()\n+                .map(MongoConnectionPoolListenerBuildItem::getConnectionPoolListener)\n+                .collect(Collectors.toList());\n \n-        feature.produce(new FeatureBuildItem(FeatureBuildItem.MONGODB_CLIENT));\n-        sslNativeSupport.produce(new ExtensionSslNativeSupportBuildItem(FeatureBuildItem.MONGODB_CLIENT));\n+        // make MongoClients an unremoveable bean\n+        additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClasses(MongoClients.class).setUnremovable().build());\n \n-        String mongoClientProducerClassName = getMongoClientProducerClassName();\n-        createMongoClientProducerBean(mongoClientNames, generatedBean, mongoClientProducerClassName,\n-                mongoUnremovableClientsBuildItem.isPresent());\n+        // create MongoClientSupport as a synthetic bean as it's used in AbstractMongoClientProducer\n+        syntheticBeanBuildItemBuildProducer.produce(SyntheticBeanBuildItem.configure(MongoClientSupport.class)\n+                .scope(Singleton.class)\n+                .supplier(recorder.mongoClientSupportSupplier(codecProvider.getCodecProviderClassNames(),\n+                        bsonDiscriminator.getBsonDiscriminatorClassNames(),\n+                        poolListenerList, sslNativeConfig.isExplicitlyDisabled()))\n+                .done());\n \n-        return new BeanContainerListenerBuildItem(recorder.addMongoClient(\n-                (Class<? extends AbstractMongoClientProducer>) recorderContext.classProxy(mongoClientProducerClassName),\n-                sslNativeConfig.isExplicitlyDisabled()));\n+        mongoConnections.produce(new MongoConnectionNameBuildItem(MongoClientBeanUtil.DEFAULT_MONGOCLIENT_NAME));\n+        for (MongoClientNameBuildItem bi : mongoClientNames) {\n+            mongoConnections.produce(new MongoConnectionNameBuildItem(bi.getName()));\n+        }\n     }\n \n-    @Record(RUNTIME_INIT)\n+    @Record(ExecutionTime.RUNTIME_INIT)\n     @BuildStep\n-    void configureRuntimePropertiesAndBuildClients(MongoClientRecorder recorder,\n-            CodecProviderBuildItem codecProvider, BsonDiscriminatorBuildItem bsonDiscriminator,\n-            List<MongoConnectionPoolListenerBuildItem> connectionPoolListenerProvider,\n+    void generateClientBeans(MongoClientRecorder recorder,\n             List<MongoClientNameBuildItem> mongoClientNames,\n-            MongodbConfig mongodbConfig, ConfigurationBuildItem config,\n-            BuildProducer<MongoConnectionNameBuildItem> mongoConnections) {\n+            MongodbConfig mongodbConfig,\n+            Optional<MongoUnremovableClientsBuildItem> mongoUnremovableClientsBuildItem,\n+            BuildProducer<SyntheticBeanBuildItem> syntheticBeanBuildItemBuildProducer) {\n+\n+        boolean makeUnremovable = mongoUnremovableClientsBuildItem.isPresent();\n+\n+        // default blocking client\n+        syntheticBeanBuildItemBuildProducer.produce(createSyntheticBean(recorder, mongodbConfig, makeUnremovable,\n+                MongoClientBeanUtil.DEFAULT_MONGOCLIENT_NAME, false));\n+        // default reactive client\n+        syntheticBeanBuildItemBuildProducer.produce(createSyntheticBean(recorder, mongodbConfig, makeUnremovable,\n+                MongoClientBeanUtil.DEFAULT_MONGOCLIENT_NAME, true));\n+\n+        for (MongoClientNameBuildItem mongoClientName : mongoClientNames) {\n+            // named blocking client\n+            syntheticBeanBuildItemBuildProducer\n+                    .produce(createSyntheticBean(recorder, mongodbConfig, makeUnremovable, mongoClientName.getName(), false));\n+            // named reactive client\n+            syntheticBeanBuildItemBuildProducer\n+                    .produce(createSyntheticBean(recorder, mongodbConfig, makeUnremovable, mongoClientName.getName(), true));\n+        }\n+    }\n \n-        List<ConnectionPoolListener> poolListenerList = connectionPoolListenerProvider.stream()\n-                .map(MongoConnectionPoolListenerBuildItem::getConnectionPoolListener)\n-                .collect(Collectors.toList());\n+    private SyntheticBeanBuildItem createSyntheticBean(MongoClientRecorder recorder, MongodbConfig mongodbConfig,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78068ad0b0fe5464e01adee37e1e38d4cfe84f3d"}, "originalPosition": 356}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAxNDU1NQ==", "bodyText": "If it's unsed, why keeping it ?", "url": "https://github.com/quarkusio/quarkus/pull/9186#discussion_r423014555", "createdAt": "2020-05-11T12:49:00Z", "author": {"login": "loicmathieu"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClientRecorder.java", "diffHunk": "@@ -10,44 +11,44 @@\n import com.mongodb.event.ConnectionPoolListener;\n \n import io.quarkus.arc.Arc;\n-import io.quarkus.arc.runtime.BeanContainer;\n-import io.quarkus.arc.runtime.BeanContainerListener;\n import io.quarkus.mongodb.reactive.ReactiveMongoClient;\n import io.quarkus.runtime.RuntimeValue;\n import io.quarkus.runtime.annotations.Recorder;\n \n @Recorder\n public class MongoClientRecorder {\n \n-    public static final String DEFAULT_MONGOCLIENT_NAME = \"<default>\";\n-    public static final String REACTIVE_CLIENT_NAME_SUFFIX = \"reactive\";\n+    public Supplier<MongoClientSupport> mongoClientSupportSupplier(List<String> codecProviders, List<String> bsonDiscriminators,\n+            List<ConnectionPoolListener> connectionPoolListeners, boolean disableSslSupport) {\n+        return new Supplier<MongoClientSupport>() {\n+            @Override\n+            public MongoClientSupport get() {\n+                return new MongoClientSupport(codecProviders, bsonDiscriminators, connectionPoolListeners, disableSslSupport);\n+            }\n+        };\n+    }\n \n-    public BeanContainerListener addMongoClient(\n-            Class<? extends AbstractMongoClientProducer> mongoClientProducerClass,\n-            boolean disableSslSupport) {\n-        return new BeanContainerListener() {\n+    public Supplier<MongoClient> mongoClientSupplier(String clientName,\n+            @SuppressWarnings(\"usused\") MongodbConfig mongodbConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78068ad0b0fe5464e01adee37e1e38d4cfe84f3d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAxNDY2OQ==", "bodyText": "If it's unsed, why keeping it ?", "url": "https://github.com/quarkusio/quarkus/pull/9186#discussion_r423014669", "createdAt": "2020-05-11T12:49:11Z", "author": {"login": "loicmathieu"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClientRecorder.java", "diffHunk": "@@ -10,44 +11,44 @@\n import com.mongodb.event.ConnectionPoolListener;\n \n import io.quarkus.arc.Arc;\n-import io.quarkus.arc.runtime.BeanContainer;\n-import io.quarkus.arc.runtime.BeanContainerListener;\n import io.quarkus.mongodb.reactive.ReactiveMongoClient;\n import io.quarkus.runtime.RuntimeValue;\n import io.quarkus.runtime.annotations.Recorder;\n \n @Recorder\n public class MongoClientRecorder {\n \n-    public static final String DEFAULT_MONGOCLIENT_NAME = \"<default>\";\n-    public static final String REACTIVE_CLIENT_NAME_SUFFIX = \"reactive\";\n+    public Supplier<MongoClientSupport> mongoClientSupportSupplier(List<String> codecProviders, List<String> bsonDiscriminators,\n+            List<ConnectionPoolListener> connectionPoolListeners, boolean disableSslSupport) {\n+        return new Supplier<MongoClientSupport>() {\n+            @Override\n+            public MongoClientSupport get() {\n+                return new MongoClientSupport(codecProviders, bsonDiscriminators, connectionPoolListeners, disableSslSupport);\n+            }\n+        };\n+    }\n \n-    public BeanContainerListener addMongoClient(\n-            Class<? extends AbstractMongoClientProducer> mongoClientProducerClass,\n-            boolean disableSslSupport) {\n-        return new BeanContainerListener() {\n+    public Supplier<MongoClient> mongoClientSupplier(String clientName,\n+            @SuppressWarnings(\"usused\") MongodbConfig mongodbConfig) {\n+        MongoClient mongoClient = Arc.container().instance(MongoClients.class).get().createMongoClient(clientName);\n+        return new Supplier<MongoClient>() {\n             @Override\n-            public void created(BeanContainer beanContainer) {\n-                AbstractMongoClientProducer producer = beanContainer.instance(mongoClientProducerClass);\n-                if (disableSslSupport) {\n-                    producer.disableSslSupport();\n-                }\n+            public MongoClient get() {\n+                return mongoClient;\n             }\n         };\n     }\n \n-    public void configureRuntimeProperties(List<String> codecs, List<String> bsonDiscriminators, MongodbConfig config,\n-            List<ConnectionPoolListener> connectionPoolListeners) {\n-        // TODO @dmlloyd\n-        // Same here, the map is entirely empty (obviously, I didn't expect the values\n-        // that were not properly injected but at least the config objects present in\n-        // the map)\n-        // The elements from the default mongoClient are there\n-        AbstractMongoClientProducer producer = Arc.container().instance(AbstractMongoClientProducer.class).get();\n-        producer.setCodecs(codecs);\n-        producer.setBsonDiscriminators(bsonDiscriminators);\n-        producer.setConfig(config);\n-        producer.setConnectionPoolListeners(connectionPoolListeners);\n+    public Supplier<ReactiveMongoClient> reactiveMongoClientSupplier(String clientName,\n+            @SuppressWarnings(\"usused\") MongodbConfig mongodbConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78068ad0b0fe5464e01adee37e1e38d4cfe84f3d"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "870d32c5d24ad6b7c917a74586eec1c93e2dba89", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/870d32c5d24ad6b7c917a74586eec1c93e2dba89", "committedDate": "2020-05-11T12:57:54Z", "message": "Simplify Mongo Client by introducing better CDI integration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bbe71b98a6c197bb535d26be9461c86357f10a5", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/1bbe71b98a6c197bb535d26be9461c86357f10a5", "committedDate": "2020-05-11T13:05:57Z", "message": "Replace manually generated bytecode with synthetic beans for Mongo"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "78068ad0b0fe5464e01adee37e1e38d4cfe84f3d", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/78068ad0b0fe5464e01adee37e1e38d4cfe84f3d", "committedDate": "2020-05-09T11:43:58Z", "message": "Replace manually generated bytecode with synthetic beans for Mongo"}, "afterCommit": {"oid": "1bbe71b98a6c197bb535d26be9461c86357f10a5", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/1bbe71b98a6c197bb535d26be9461c86357f10a5", "committedDate": "2020-05-11T13:05:57Z", "message": "Replace manually generated bytecode with synthetic beans for Mongo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MTk0MzA5", "url": "https://github.com/quarkusio/quarkus/pull/9186#pullrequestreview-409194309", "createdAt": "2020-05-11T13:54:17Z", "commit": {"oid": "1bbe71b98a6c197bb535d26be9461c86357f10a5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MzAxOTQ3", "url": "https://github.com/quarkusio/quarkus/pull/9186#pullrequestreview-409301947", "createdAt": "2020-05-11T15:50:20Z", "commit": {"oid": "1bbe71b98a6c197bb535d26be9461c86357f10a5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3387, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}