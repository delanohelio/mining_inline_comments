{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMjk0NDQ3", "number": 7059, "title": "Update to SmallRye Reactive Messaging 1.1.0", "bodyText": "This version brings a new set of features:\n\nMetadata propagation\nNew Emitter support (part of the spec, the old one is deprecated but still supported)\n@Stream has been removed (already deprecated)", "createdAt": "2020-02-07T08:36:53Z", "url": "https://github.com/quarkusio/quarkus/pull/7059", "merged": true, "mergeCommit": {"oid": "46d40bc86d2d93372a3ae1821c47a4dd8b8ae392"}, "closed": true, "closedAt": "2020-02-18T13:34:24Z", "author": {"login": "cescoffier"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcB7UePAFqTM1NTAwMzU3Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFiBfLAFqTM2MDMzOTE5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MDAzNTc2", "url": "https://github.com/quarkusio/quarkus/pull/7059#pullrequestreview-355003576", "createdAt": "2020-02-07T08:46:45Z", "commit": {"oid": "2bba9a75be5159974866ea8c50da2406411a5858"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODo0Njo0NlrOFm16jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODo0Njo0NlrOFm16jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI3MzU1MA==", "bodyText": "Minor complaint: Maybe all this old stuff should be renamed to deprecated?", "url": "https://github.com/quarkusio/quarkus/pull/7059#discussion_r376273550", "createdAt": "2020-02-07T08:46:46Z", "author": {"login": "geoand"}, "path": "extensions/smallrye-reactive-messaging/deployment/src/main/java/io/quarkus/smallrye/reactivemessaging/deployment/DotNames.java", "diffHunk": "@@ -10,17 +10,19 @@\n import io.smallrye.reactive.messaging.annotations.Emitter;\n import io.smallrye.reactive.messaging.annotations.Merge;\n import io.smallrye.reactive.messaging.annotations.OnOverflow;\n-import io.smallrye.reactive.messaging.annotations.Stream;\n \n public final class DotNames {\n \n     static final DotName VOID = DotName.createSimple(void.class.getName());\n     static final DotName INCOMING = DotName.createSimple(Incoming.class.getName());\n     static final DotName OUTGOING = DotName.createSimple(Outgoing.class.getName());\n-    static final DotName CHANNEL = DotName.createSimple(Stream.class.getName());\n-    static final DotName STREAM = DotName.createSimple(Channel.class.getName());\n-    static final DotName EMITTER = DotName.createSimple(Emitter.class.getName());\n-    static final DotName ON_OVERFLOW = DotName.createSimple(OnOverflow.class.getName());\n+    static final DotName CHANNEL = DotName.createSimple(org.eclipse.microprofile.reactive.messaging.Channel.class.getName());\n+    static final DotName OLD_CHANNEL = DotName.createSimple(Channel.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bba9a75be5159974866ea8c50da2406411a5858"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1Nzk5Mzc0", "url": "https://github.com/quarkusio/quarkus/pull/7059#pullrequestreview-355799374", "createdAt": "2020-02-10T09:45:20Z", "commit": {"oid": "b30a826ca93685fb0b7e5a8e9a230d489666725f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1ODQ4MTAz", "url": "https://github.com/quarkusio/quarkus/pull/7059#pullrequestreview-355848103", "createdAt": "2020-02-10T10:59:05Z", "commit": {"oid": "b30a826ca93685fb0b7e5a8e9a230d489666725f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMDo1OTowNVrOFnh4qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMDo1OTowNVrOFnh4qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk5Mzk2MQ==", "bodyText": "I'm trying it and it looks like the MetricDecorator is included always (!), even without this line for some reason. And if the Metrics dependency is not present on the application, then it fails to boot due to a ClassNotFoundException: org.eclipse.microprofile.metrics.MetricRegistry because the MetricDecorator references that class. We need to find out why this bean is being included even when we don't want it.", "url": "https://github.com/quarkusio/quarkus/pull/7059#discussion_r376993961", "createdAt": "2020-02-10T10:59:05Z", "author": {"login": "jmartisk"}, "path": "extensions/smallrye-reactive-messaging/deployment/src/main/java/io/quarkus/smallrye/reactivemessaging/deployment/SmallRyeReactiveMessagingProcessor.java", "diffHunk": "@@ -143,54 +149,98 @@ void validateBeanDeployment(\n \n         for (InjectionPointInfo injectionPoint : validationPhase.getContext()\n                 .get(BuildExtension.Key.INJECTION_POINTS)) {\n-            if (injectionPoint.getRequiredType().name()\n-                    .equals(io.quarkus.smallrye.reactivemessaging.deployment.DotNames.EMITTER)) {\n+            // New emitter from the spec.\n+            if (injectionPoint.getRequiredType().name().equals(\n+                    io.quarkus.smallrye.reactivemessaging.deployment.DotNames.EMITTER)) {\n                 AnnotationInstance instance = injectionPoint\n                         .getRequiredQualifier(io.quarkus.smallrye.reactivemessaging.deployment.DotNames.CHANNEL);\n                 if (instance == null) {\n-                    instance = injectionPoint\n-                            .getRequiredQualifier(io.quarkus.smallrye.reactivemessaging.deployment.DotNames.STREAM); //@Channel is the replacement of deprecated @Stream\n-                }\n-                if (instance != null) {\n-                    // Stream.value() is mandatory\n-                    String name = instance.value().asString();\n-                    Optional<AnnotationInstance> maybeOverflow = annotationStore.getAnnotations(injectionPoint.getTarget())\n+                    validationPhase.getContext().addDeploymentProblem(\n+                            new DeploymentException(\n+                                    \"Invalid emitter injection - @Channel is required for \" + injectionPoint\n+                                            .getTargetInfo()));\n+                } else {\n+                    String channelName = instance.value().asString();\n+                    Optional<AnnotationInstance> overflow = annotationStore.getAnnotations(injectionPoint.getTarget())\n                             .stream()\n                             .filter(ai -> io.quarkus.smallrye.reactivemessaging.deployment.DotNames.ON_OVERFLOW\n                                     .equals(ai.name()))\n                             .filter(ai -> {\n-                                if (ai.target().kind() == AnnotationTarget.Kind.METHOD_PARAMETER && injectionPoint.isParam()) {\n+                                if (ai.target().kind() == AnnotationTarget.Kind.METHOD_PARAMETER && injectionPoint\n+                                        .isParam()) {\n                                     return ai.target().asMethodParameter().position() == injectionPoint.getPosition();\n                                 }\n                                 return true;\n                             })\n                             .findAny();\n-                    LOGGER.debugf(\"Emitter injection point '%s' detected, stream name: '%s'\",\n-                            injectionPoint.getTargetInfo(), name);\n-\n-                    if (maybeOverflow.isPresent()) {\n-                        AnnotationInstance annotation = maybeOverflow.get();\n-                        AnnotationValue maybeBufferSize = annotation.value(\"bufferSize\");\n-                        int bufferSize = maybeBufferSize != null ? maybeBufferSize.asInt() : 0;\n-                        emitters.produce(\n-                                EmitterBuildItem.of(name,\n-                                        annotation.value().asString(),\n-                                        bufferSize));\n-                    } else {\n-                        emitters.produce(EmitterBuildItem.of(name));\n-                    }\n+                    createEmitter(emitters, injectionPoint, channelName, overflow);\n+                }\n+            }\n+\n+            // Deprecated Emitter from SmallRye (emitter, channel and on overflow have been added to the spec)\n+            if (injectionPoint.getRequiredType().name()\n+                    .equals(io.quarkus.smallrye.reactivemessaging.deployment.DotNames.LEGACY_EMITTER)) {\n+                AnnotationInstance instance = injectionPoint\n+                        .getRequiredQualifier(io.quarkus.smallrye.reactivemessaging.deployment.DotNames.LEGACY_CHANNEL);\n+                if (instance == null) {\n+                    validationPhase.getContext().addDeploymentProblem(\n+                            new DeploymentException(\n+                                    \"Invalid emitter injection - @Channel is required for \" + injectionPoint\n+                                            .getTargetInfo()));\n+                } else {\n+                    String channelName = instance.value().asString();\n+                    Optional<AnnotationInstance> overflow = annotationStore.getAnnotations(injectionPoint.getTarget())\n+                            .stream()\n+                            .filter(ai -> io.quarkus.smallrye.reactivemessaging.deployment.DotNames.LEGACY_ON_OVERFLOW\n+                                    .equals(ai.name()))\n+                            .filter(ai -> {\n+                                if (ai.target().kind() == AnnotationTarget.Kind.METHOD_PARAMETER && injectionPoint\n+                                        .isParam()) {\n+                                    return ai.target().asMethodParameter().position() == injectionPoint.getPosition();\n+                                }\n+                                return true;\n+                            })\n+                            .findAny();\n+                    createEmitter(emitters, injectionPoint, channelName, overflow);\n                 }\n             }\n         }\n     }\n \n+    @SuppressWarnings(\"OptionalUsedAsFieldOrParameterType\")\n+    private void createEmitter(BuildProducer<EmitterBuildItem> emitters, InjectionPointInfo injectionPoint,\n+            String channelName,\n+            Optional<AnnotationInstance> overflow) {\n+        LOGGER.debugf(\"Emitter injection point '%s' detected, channel name: '%s'\",\n+                injectionPoint.getTargetInfo(), channelName);\n+        if (overflow.isPresent()) {\n+            AnnotationInstance annotation = overflow.get();\n+            AnnotationValue maybeBufferSize = annotation.value(\"bufferSize\");\n+            int bufferSize = maybeBufferSize != null ? maybeBufferSize.asInt() : 0;\n+            emitters.produce(\n+                    EmitterBuildItem.of(channelName, annotation.value().asString(), bufferSize));\n+        } else {\n+            emitters.produce(EmitterBuildItem.of(channelName));\n+        }\n+    }\n+\n     @BuildStep\n     public List<UnremovableBeanBuildItem> removalExclusions() {\n         return Arrays.asList(\n                 new UnremovableBeanBuildItem(\n-                        new BeanClassAnnotationExclusion(io.quarkus.smallrye.reactivemessaging.deployment.DotNames.INCOMING)),\n+                        new BeanClassAnnotationExclusion(\n+                                io.quarkus.smallrye.reactivemessaging.deployment.DotNames.INCOMING)),\n                 new UnremovableBeanBuildItem(\n-                        new BeanClassAnnotationExclusion(io.quarkus.smallrye.reactivemessaging.deployment.DotNames.OUTGOING)));\n+                        new BeanClassAnnotationExclusion(\n+                                io.quarkus.smallrye.reactivemessaging.deployment.DotNames.OUTGOING)));\n+    }\n+\n+    @BuildStep\n+    public void enableMetrics(Capabilities capabilities, ReactiveMessagingConfiguration configuration,\n+            BuildProducer<AdditionalBeanBuildItem> beans) {\n+        if (capabilities.isCapabilityPresent(Capabilities.METRICS) && configuration.metricsEnabled) {\n+            beans.produce(new AdditionalBeanBuildItem(MetricDecorator.class.getName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b30a826ca93685fb0b7e5a8e9a230d489666725f"}, "originalPosition": 173}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38800b090135e3578d6fbd83622d9b72321ac2cb", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/38800b090135e3578d6fbd83622d9b72321ac2cb", "committedDate": "2020-02-17T13:54:24Z", "message": "Update SmallRye Reactive Messaging version to 1.1.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01f9dd5a607650ccaad210f026ebbc15c7ca6809", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/01f9dd5a607650ccaad210f026ebbc15c7ca6809", "committedDate": "2020-02-17T13:54:24Z", "message": "Update Reactive Messaging support to the new model used by SmallRye Reactive Messaging 1.1.0\n\n* @Stream has been removed\n* The Emitter is now part of the spec\n* The old emitter, channel and on overflow are now deprecated"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef8d161f1903333a401e3d9ecca7b4c03586b749", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/ef8d161f1903333a401e3d9ecca7b4c03586b749", "committedDate": "2020-02-17T13:54:24Z", "message": "Update test to the new Reactive Messaging API\n\nWe test both the old emitter support and the new one."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "736e284cb619cb4563375fd81bec67c24f9ca5cb", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/736e284cb619cb4563375fd81bec67c24f9ca5cb", "committedDate": "2020-02-17T13:54:24Z", "message": "Add a specific Reactive Messaging configuration to enable/disable the metrics\n\nThis follows the common convention used by the other extensions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f57338ae88a66c7e16b6c0c3e820aec5f714c714", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/f57338ae88a66c7e16b6c0c3e820aec5f714c714", "committedDate": "2020-02-17T13:54:24Z", "message": "Instead of the Old prefix use Deprecated to refer to the SmallRye versions of Emitter, Channel and OnOverflow\n\nAlso renamed the tests classes to follow the same convention."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c14de05f5f1f620003976930f5182b38f44f0dcc", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/c14de05f5f1f620003976930f5182b38f44f0dcc", "committedDate": "2020-02-17T13:54:24Z", "message": "Work around the Reactive Messaging TCK issue\n\nFirst the TCK is checking the metrics support - so need metrics\nThen, some method signatures are now considered invalid (harmful) and the upcoming version of the TCK contains fixes for these tests. For now skip these."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "435291a1188cb28b4397c8e3e693845e30f997bf", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/435291a1188cb28b4397c8e3e693845e30f997bf", "committedDate": "2020-02-17T13:54:24Z", "message": "Update the Reactive Messaging documentation\n\n* Mention the deprecation of the SmallRye Emitter / Channel / OnOverflow classes\n* Update code snippet (import statements)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "445b7c6557fa80e3d1685d5f4f63ae5789775312", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/445b7c6557fa80e3d1685d5f4f63ae5789775312", "committedDate": "2020-02-17T13:54:24Z", "message": "Change the constant name prefix from DEPRECATED to LEGACY\n\nAs suggested in https://github.com/quarkusio/quarkus/pull/7059#discussion_r376273550."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35f8c8fe6dfb94c0ce09b8e6bc870dcf76435e46", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/35f8c8fe6dfb94c0ce09b8e6bc870dcf76435e46", "committedDate": "2020-02-17T14:27:52Z", "message": "Veto the MetricDecorator is the metrics are not enabled\n\nThis avoids a depending on metrics directly."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b30a826ca93685fb0b7e5a8e9a230d489666725f", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/b30a826ca93685fb0b7e5a8e9a230d489666725f", "committedDate": "2020-02-10T08:01:44Z", "message": "Change the constant name prefix from DEPRECATED to LEGACY\n\nAs suggested in https://github.com/quarkusio/quarkus/pull/7059#discussion_r376273550."}, "afterCommit": {"oid": "35f8c8fe6dfb94c0ce09b8e6bc870dcf76435e46", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/35f8c8fe6dfb94c0ce09b8e6bc870dcf76435e46", "committedDate": "2020-02-17T14:27:52Z", "message": "Veto the MetricDecorator is the metrics are not enabled\n\nThis avoids a depending on metrics directly."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMzM3NjI0", "url": "https://github.com/quarkusio/quarkus/pull/7059#pullrequestreview-360337624", "createdAt": "2020-02-18T13:31:55Z", "commit": {"oid": "35f8c8fe6dfb94c0ce09b8e6bc870dcf76435e46"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMzM5MTk1", "url": "https://github.com/quarkusio/quarkus/pull/7059#pullrequestreview-360339195", "createdAt": "2020-02-18T13:34:06Z", "commit": {"oid": "35f8c8fe6dfb94c0ce09b8e6bc870dcf76435e46"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 102, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}