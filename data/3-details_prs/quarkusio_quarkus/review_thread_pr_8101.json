{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyODQwNzk1", "number": 8101, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODoxNzoyNlrODq6imA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODoyMTozMlrODq6ojg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzI1OTEyOnYy", "diffSide": "RIGHT", "path": "devtools/platform-descriptor-json-plugin/src/main/java/io/quarkus/maven/GenerateExtensionsJsonMojo.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODoxNzoyNlrOF69TMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjowNToxOVrOF7wImQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2NjA2Nw==", "bodyText": "We don't use star imports, can you use the appropriate code formatter?", "url": "https://github.com/quarkusio/quarkus/pull/8101#discussion_r397366067", "createdAt": "2020-03-24T18:17:26Z", "author": {"login": "gastaldi"}, "path": "devtools/platform-descriptor-json-plugin/src/main/java/io/quarkus/maven/GenerateExtensionsJsonMojo.java", "diffHunk": "@@ -9,20 +9,10 @@\n import java.nio.file.FileSystem;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-import javax.json.Json;\n-import javax.json.JsonArray;\n-import javax.json.JsonArrayBuilder;\n-import javax.json.JsonObject;\n-import javax.json.JsonObjectBuilder;\n-import javax.json.JsonReader;\n-import javax.json.JsonValue;\n-import javax.json.JsonWriter;\n-import javax.json.JsonWriterFactory;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7530442d1cd40ea350a75c962d88f37418c32397"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4MzU0MQ==", "bodyText": "the build passes so I assume I am already using the appropriate code formatter.", "url": "https://github.com/quarkusio/quarkus/pull/8101#discussion_r398183541", "createdAt": "2020-03-25T21:33:08Z", "author": {"login": "maxandersen"}, "path": "devtools/platform-descriptor-json-plugin/src/main/java/io/quarkus/maven/GenerateExtensionsJsonMojo.java", "diffHunk": "@@ -9,20 +9,10 @@\n import java.nio.file.FileSystem;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-import javax.json.Json;\n-import javax.json.JsonArray;\n-import javax.json.JsonArrayBuilder;\n-import javax.json.JsonObject;\n-import javax.json.JsonObjectBuilder;\n-import javax.json.JsonReader;\n-import javax.json.JsonValue;\n-import javax.json.JsonWriter;\n-import javax.json.JsonWriterFactory;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2NjA2Nw=="}, "originalCommit": {"oid": "7530442d1cd40ea350a75c962d88f37418c32397"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4Mzg1OQ==", "bodyText": "oh damn - is the PR's i made on having devtools share the formatting still not in master. ? gddmmit", "url": "https://github.com/quarkusio/quarkus/pull/8101#discussion_r398183859", "createdAt": "2020-03-25T21:33:44Z", "author": {"login": "maxandersen"}, "path": "devtools/platform-descriptor-json-plugin/src/main/java/io/quarkus/maven/GenerateExtensionsJsonMojo.java", "diffHunk": "@@ -9,20 +9,10 @@\n import java.nio.file.FileSystem;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-import javax.json.Json;\n-import javax.json.JsonArray;\n-import javax.json.JsonArrayBuilder;\n-import javax.json.JsonObject;\n-import javax.json.JsonObjectBuilder;\n-import javax.json.JsonReader;\n-import javax.json.JsonValue;\n-import javax.json.JsonWriter;\n-import javax.json.JsonWriterFactory;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2NjA2Nw=="}, "originalCommit": {"oid": "7530442d1cd40ea350a75c962d88f37418c32397"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE5ODkzNw==", "bodyText": "fixed manually", "url": "https://github.com/quarkusio/quarkus/pull/8101#discussion_r398198937", "createdAt": "2020-03-25T22:05:19Z", "author": {"login": "maxandersen"}, "path": "devtools/platform-descriptor-json-plugin/src/main/java/io/quarkus/maven/GenerateExtensionsJsonMojo.java", "diffHunk": "@@ -9,20 +9,10 @@\n import java.nio.file.FileSystem;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-import javax.json.Json;\n-import javax.json.JsonArray;\n-import javax.json.JsonArrayBuilder;\n-import javax.json.JsonObject;\n-import javax.json.JsonObjectBuilder;\n-import javax.json.JsonReader;\n-import javax.json.JsonValue;\n-import javax.json.JsonWriter;\n-import javax.json.JsonWriterFactory;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2NjA2Nw=="}, "originalCommit": {"oid": "7530442d1cd40ea350a75c962d88f37418c32397"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzI2MDc5OnYy", "diffSide": "RIGHT", "path": "devtools/platform-descriptor-json-plugin/src/main/java/io/quarkus/maven/GenerateExtensionsJsonMojo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODoxNzo1MFrOF69UPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODoxNzo1MFrOF69UPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2NjMzMg==", "bodyText": "Remove commented out code", "url": "https://github.com/quarkusio/quarkus/pull/8101#discussion_r397366332", "createdAt": "2020-03-24T18:17:50Z", "author": {"login": "gastaldi"}, "path": "devtools/platform-descriptor-json-plugin/src/main/java/io/quarkus/maven/GenerateExtensionsJsonMojo.java", "diffHunk": "@@ -121,29 +112,25 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n             return;\n         }\n \n-        // Read the overrides file for the extensions (if it exists)\n-        Map<String, JsonObject> extOverrides = new HashMap<>();\n-        JsonObject theRest = null;\n-        if (overridesFile.isFile()) {\n-            info(\"Found overrides file %s\", overridesFile);\n-            try (JsonReader jsonReader = Json.createReader(new FileInputStream(overridesFile))) {\n-                JsonObject overridesObject = jsonReader.readObject();\n-                JsonArray extOverrideObjects = overridesObject.getJsonArray(\"extensions\");\n-                if (extOverrideObjects != null) {\n-                    // Put the extension overrides into a map keyed to their GAV\n-                    for (JsonValue val : extOverrideObjects) {\n-                        JsonObject extOverrideObject = val.asJsonObject();\n-                        String key = extensionId(extOverrideObject);\n-                        extOverrides.put(key, extOverrideObject);\n-                    }\n-                }\n+        List<File> overrides = new ArrayList<>();\n \n-                theRest = overridesObject;\n-            } catch (IOException e) {\n-                throw new MojoExecutionException(\"Failed to read \" + overridesFile, e);\n+        overrides.addAll(Arrays.stream(overridesFile.split(\",\"))\n+                .map(s -> {\n+                    return new File(s.trim());\n+                })\n+                .collect(Collectors.toList()));\n+\n+        List<OverrideInfo> allOverrides = new ArrayList();\n+        for (File file : overrides) {\n+            OverrideInfo overrideInfo = getOverrideInfo(file);\n+            if (overrideInfo != null) {\n+                allOverrides.add(overrideInfo);\n             }\n         }\n \n+        //Map<String, JsonObject> extOverrides = overrideInfo.getExtOverrides();\n+        //JsonObject theRest = overrideInfo.getTheRest();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7530442d1cd40ea350a75c962d88f37418c32397"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzI2ODUwOnYy", "diffSide": "RIGHT", "path": "devtools/platform-descriptor-json-plugin/src/main/java/io/quarkus/maven/GenerateExtensionsJsonMojo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODoxOTo1NlrOF69ZUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODoxOTo1NlrOF69ZUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2NzYzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    overrides.addAll(Arrays.stream(overridesFile.split(\",\"))\n          \n          \n            \n                            .map(s -> {\n          \n          \n            \n                                return new File(s.trim());\n          \n          \n            \n                            })\n          \n          \n            \n                            .collect(Collectors.toList()));\n          \n          \n            \n                    for (String file: overridesFile.split(\",\")) {\n          \n          \n            \n                       overrides.add(new File(file.trim()));\n          \n          \n            \n                    }", "url": "https://github.com/quarkusio/quarkus/pull/8101#discussion_r397367635", "createdAt": "2020-03-24T18:19:56Z", "author": {"login": "gastaldi"}, "path": "devtools/platform-descriptor-json-plugin/src/main/java/io/quarkus/maven/GenerateExtensionsJsonMojo.java", "diffHunk": "@@ -121,29 +112,25 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n             return;\n         }\n \n-        // Read the overrides file for the extensions (if it exists)\n-        Map<String, JsonObject> extOverrides = new HashMap<>();\n-        JsonObject theRest = null;\n-        if (overridesFile.isFile()) {\n-            info(\"Found overrides file %s\", overridesFile);\n-            try (JsonReader jsonReader = Json.createReader(new FileInputStream(overridesFile))) {\n-                JsonObject overridesObject = jsonReader.readObject();\n-                JsonArray extOverrideObjects = overridesObject.getJsonArray(\"extensions\");\n-                if (extOverrideObjects != null) {\n-                    // Put the extension overrides into a map keyed to their GAV\n-                    for (JsonValue val : extOverrideObjects) {\n-                        JsonObject extOverrideObject = val.asJsonObject();\n-                        String key = extensionId(extOverrideObject);\n-                        extOverrides.put(key, extOverrideObject);\n-                    }\n-                }\n+        List<File> overrides = new ArrayList<>();\n \n-                theRest = overridesObject;\n-            } catch (IOException e) {\n-                throw new MojoExecutionException(\"Failed to read \" + overridesFile, e);\n+        overrides.addAll(Arrays.stream(overridesFile.split(\",\"))\n+                .map(s -> {\n+                    return new File(s.trim());\n+                })\n+                .collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7530442d1cd40ea350a75c962d88f37418c32397"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzI3NDM4OnYy", "diffSide": "RIGHT", "path": "devtools/platform-descriptor-json-plugin/src/main/java/io/quarkus/maven/GenerateExtensionsJsonMojo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODoyMTozMlrOF69dGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMTozNzo1OVrOF7vVzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2ODYwMg==", "bodyText": "You can iterate overridesFile.split(\",\") and delete the List<File> overrides above :)", "url": "https://github.com/quarkusio/quarkus/pull/8101#discussion_r397368602", "createdAt": "2020-03-24T18:21:32Z", "author": {"login": "gastaldi"}, "path": "devtools/platform-descriptor-json-plugin/src/main/java/io/quarkus/maven/GenerateExtensionsJsonMojo.java", "diffHunk": "@@ -121,29 +112,25 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n             return;\n         }\n \n-        // Read the overrides file for the extensions (if it exists)\n-        Map<String, JsonObject> extOverrides = new HashMap<>();\n-        JsonObject theRest = null;\n-        if (overridesFile.isFile()) {\n-            info(\"Found overrides file %s\", overridesFile);\n-            try (JsonReader jsonReader = Json.createReader(new FileInputStream(overridesFile))) {\n-                JsonObject overridesObject = jsonReader.readObject();\n-                JsonArray extOverrideObjects = overridesObject.getJsonArray(\"extensions\");\n-                if (extOverrideObjects != null) {\n-                    // Put the extension overrides into a map keyed to their GAV\n-                    for (JsonValue val : extOverrideObjects) {\n-                        JsonObject extOverrideObject = val.asJsonObject();\n-                        String key = extensionId(extOverrideObject);\n-                        extOverrides.put(key, extOverrideObject);\n-                    }\n-                }\n+        List<File> overrides = new ArrayList<>();\n \n-                theRest = overridesObject;\n-            } catch (IOException e) {\n-                throw new MojoExecutionException(\"Failed to read \" + overridesFile, e);\n+        overrides.addAll(Arrays.stream(overridesFile.split(\",\"))\n+                .map(s -> {\n+                    return new File(s.trim());\n+                })\n+                .collect(Collectors.toList()));\n+\n+        List<OverrideInfo> allOverrides = new ArrayList();\n+        for (File file : overrides) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7530442d1cd40ea350a75c962d88f37418c32397"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4NTkzMg==", "bodyText": "true - good catch. it became this way as I was originally merging two lists but that\u2019s not relevant anymore fixing.", "url": "https://github.com/quarkusio/quarkus/pull/8101#discussion_r398185932", "createdAt": "2020-03-25T21:37:59Z", "author": {"login": "maxandersen"}, "path": "devtools/platform-descriptor-json-plugin/src/main/java/io/quarkus/maven/GenerateExtensionsJsonMojo.java", "diffHunk": "@@ -121,29 +112,25 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n             return;\n         }\n \n-        // Read the overrides file for the extensions (if it exists)\n-        Map<String, JsonObject> extOverrides = new HashMap<>();\n-        JsonObject theRest = null;\n-        if (overridesFile.isFile()) {\n-            info(\"Found overrides file %s\", overridesFile);\n-            try (JsonReader jsonReader = Json.createReader(new FileInputStream(overridesFile))) {\n-                JsonObject overridesObject = jsonReader.readObject();\n-                JsonArray extOverrideObjects = overridesObject.getJsonArray(\"extensions\");\n-                if (extOverrideObjects != null) {\n-                    // Put the extension overrides into a map keyed to their GAV\n-                    for (JsonValue val : extOverrideObjects) {\n-                        JsonObject extOverrideObject = val.asJsonObject();\n-                        String key = extensionId(extOverrideObject);\n-                        extOverrides.put(key, extOverrideObject);\n-                    }\n-                }\n+        List<File> overrides = new ArrayList<>();\n \n-                theRest = overridesObject;\n-            } catch (IOException e) {\n-                throw new MojoExecutionException(\"Failed to read \" + overridesFile, e);\n+        overrides.addAll(Arrays.stream(overridesFile.split(\",\"))\n+                .map(s -> {\n+                    return new File(s.trim());\n+                })\n+                .collect(Collectors.toList()));\n+\n+        List<OverrideInfo> allOverrides = new ArrayList();\n+        for (File file : overrides) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2ODYwMg=="}, "originalCommit": {"oid": "7530442d1cd40ea350a75c962d88f37418c32397"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4596, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}