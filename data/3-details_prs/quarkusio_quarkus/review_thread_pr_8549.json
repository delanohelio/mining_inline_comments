{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyNjAxMjMx", "number": 8549, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMjo1ODoyMlrODxO-Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODoyMDo1MFrOD1aX9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyOTUyMTA3OnYy", "diffSide": "RIGHT", "path": "extensions/panache/hibernate-orm-panache/deployment/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMjo1ODoyMlrOGEluKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo0MzozNlrOGFCHGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ2NTUxMg==", "bodyText": "Where is this dependency used? I wonder if we should add to quarkus-junit5-internal instead?", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r407465512", "createdAt": "2020-04-13T12:58:22Z", "author": {"login": "gastaldi"}, "path": "extensions/panache/hibernate-orm-panache/deployment/pom.xml", "diffHunk": "@@ -72,6 +72,12 @@\n             <artifactId>rest-assured</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.junit.platform</groupId>\n+            <artifactId>junit-platform-launcher</artifactId>\n+            <version>1.6.1</version>\n+            <scope>test</scope>\n+        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3cab3ecaa189266224a763f32327cec2109c6fb"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ2NTk2NQ==", "bodyText": "Also fixing the version is a bad idea, the dependency is already declared in the junit-bom that is imported in the runtime BOM.", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r407465965", "createdAt": "2020-04-13T12:59:24Z", "author": {"login": "gastaldi"}, "path": "extensions/panache/hibernate-orm-panache/deployment/pom.xml", "diffHunk": "@@ -72,6 +72,12 @@\n             <artifactId>rest-assured</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.junit.platform</groupId>\n+            <artifactId>junit-platform-launcher</artifactId>\n+            <version>1.6.1</version>\n+            <scope>test</scope>\n+        </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ2NTUxMg=="}, "originalCommit": {"oid": "d3cab3ecaa189266224a763f32327cec2109c6fb"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzMDY1MQ==", "bodyText": "I used .setExpectedException(BuildException.class) instead of the JUnit platform Launcher so this is no longuer needed.", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r407930651", "createdAt": "2020-04-14T07:43:36Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/hibernate-orm-panache/deployment/pom.xml", "diffHunk": "@@ -72,6 +72,12 @@\n             <artifactId>rest-assured</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.junit.platform</groupId>\n+            <artifactId>junit-platform-launcher</artifactId>\n+            <version>1.6.1</version>\n+            <scope>test</scope>\n+        </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ2NTUxMg=="}, "originalCommit": {"oid": "d3cab3ecaa189266224a763f32327cec2109c6fb"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyOTYxOTY2OnYy", "diffSide": "RIGHT", "path": "extensions/panache/mongodb-panache/deployment/src/test/java/io/quarkus/mongodb/panache/DuplicateIdReactiveMongoEntityTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMzozNDozMVrOGEmosA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo0Mjo0NlrOGFCFaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ4MDQ5Ng==", "bodyText": "Hmm, I think we do not need to specify the configuration file since it is application.properties so it'll be picked by default.", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r407480496", "createdAt": "2020-04-13T13:34:31Z", "author": {"login": "machi1990"}, "path": "extensions/panache/mongodb-panache/deployment/src/test/java/io/quarkus/mongodb/panache/DuplicateIdReactiveMongoEntityTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package io.quarkus.mongodb.panache;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.junit.platform.launcher.Launcher;\n+import org.junit.platform.launcher.LauncherDiscoveryRequest;\n+import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;\n+import org.junit.platform.launcher.core.LauncherFactory;\n+import org.junit.platform.launcher.listeners.SummaryGeneratingListener;\n+import org.junit.platform.launcher.listeners.TestExecutionSummary;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DuplicateIdReactiveMongoEntityTest {\n+    public static class DuplicateIdReactiveMongoEntityTestTest {\n+        @RegisterExtension\n+        static QuarkusUnitTest runner = new QuarkusUnitTest()\n+                .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                        .addClasses(DuplicateIdReactiveMongoEntity.class))\n+                .withConfigurationResource(\"application.properties\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3cab3ecaa189266224a763f32327cec2109c6fb"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzMDIxNw==", "bodyText": "True: this was copied from an existing test but not needed.\nRemoved.", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r407930217", "createdAt": "2020-04-14T07:42:46Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/mongodb-panache/deployment/src/test/java/io/quarkus/mongodb/panache/DuplicateIdReactiveMongoEntityTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package io.quarkus.mongodb.panache;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.junit.platform.launcher.Launcher;\n+import org.junit.platform.launcher.LauncherDiscoveryRequest;\n+import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;\n+import org.junit.platform.launcher.core.LauncherFactory;\n+import org.junit.platform.launcher.listeners.SummaryGeneratingListener;\n+import org.junit.platform.launcher.listeners.TestExecutionSummary;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DuplicateIdReactiveMongoEntityTest {\n+    public static class DuplicateIdReactiveMongoEntityTestTest {\n+        @RegisterExtension\n+        static QuarkusUnitTest runner = new QuarkusUnitTest()\n+                .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                        .addClasses(DuplicateIdReactiveMongoEntity.class))\n+                .withConfigurationResource(\"application.properties\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ4MDQ5Ng=="}, "originalCommit": {"oid": "d3cab3ecaa189266224a763f32327cec2109c6fb"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyOTYyNjU4OnYy", "diffSide": "RIGHT", "path": "extensions/panache/mongodb-panache/deployment/src/test/java/io/quarkus/mongodb/panache/DuplicateIdReactiveMongoEntityTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMzozNzowNFrOGEms2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo0MjoxNVrOGFCELw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ4MTU2Mg==", "bodyText": "I wonder if in this test case we could have used this pattern instead https://github.com/quarkusio/quarkus/blob/master/extensions/hibernate-orm/deployment/src/test/java/io/quarkus/hibernate/orm/sql_load_script/InvalidMultilineSqlLoadScriptTestCase.java#L17 ?", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r407481562", "createdAt": "2020-04-13T13:37:04Z", "author": {"login": "machi1990"}, "path": "extensions/panache/mongodb-panache/deployment/src/test/java/io/quarkus/mongodb/panache/DuplicateIdReactiveMongoEntityTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package io.quarkus.mongodb.panache;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.junit.platform.launcher.Launcher;\n+import org.junit.platform.launcher.LauncherDiscoveryRequest;\n+import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;\n+import org.junit.platform.launcher.core.LauncherFactory;\n+import org.junit.platform.launcher.listeners.SummaryGeneratingListener;\n+import org.junit.platform.launcher.listeners.TestExecutionSummary;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DuplicateIdReactiveMongoEntityTest {\n+    public static class DuplicateIdReactiveMongoEntityTestTest {\n+        @RegisterExtension\n+        static QuarkusUnitTest runner = new QuarkusUnitTest()\n+                .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                        .addClasses(DuplicateIdReactiveMongoEntity.class))\n+                .withConfigurationResource(\"application.properties\");\n+\n+        @Test\n+        void shouldThrow() {\n+            DuplicateIdMongoEntity.findAll();\n+        }\n+    }\n+\n+    @Test\n+    void verifyIdTest() {\n+        // as the test will fail to be created, we need a way to launch it manually to assert\n+        // that there was a build issue (the BuildException will be thrown at test instanciation time).\n+        SummaryGeneratingListener listener = new SummaryGeneratingListener();\n+        LauncherDiscoveryRequest request = LauncherDiscoveryRequestBuilder.request()\n+                .selectors(selectClass(DuplicateIdReactiveMongoEntityTestTest.class))\n+                .build();\n+        Launcher launcher = LauncherFactory.create();\n+        launcher.registerTestExecutionListeners(listener);\n+        launcher.execute(request);\n+\n+        // we check that the test failed\n+        TestExecutionSummary summary = listener.getSummary();\n+        assertEquals(1, summary.getFailures().size());\n+        String exceptionMsg = summary.getFailures().get(0).getException().getMessage();\n+        assertTrue(exceptionMsg.contains(\"io.quarkus.builder.BuildException\"));\n+        assertTrue(exceptionMsg.contains(\"You provide a MongoDB identifier via @BsonId inside\"));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3cab3ecaa189266224a763f32327cec2109c6fb"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkyNTgxNA==", "bodyText": "Yes, this was even documented in the extionsion guide, I need to re-read it carefully ;)\n\nIf you want to test that an extension properly fails at build time, use the setExpectedException method:", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r407925814", "createdAt": "2020-04-14T07:35:00Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/mongodb-panache/deployment/src/test/java/io/quarkus/mongodb/panache/DuplicateIdReactiveMongoEntityTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package io.quarkus.mongodb.panache;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.junit.platform.launcher.Launcher;\n+import org.junit.platform.launcher.LauncherDiscoveryRequest;\n+import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;\n+import org.junit.platform.launcher.core.LauncherFactory;\n+import org.junit.platform.launcher.listeners.SummaryGeneratingListener;\n+import org.junit.platform.launcher.listeners.TestExecutionSummary;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DuplicateIdReactiveMongoEntityTest {\n+    public static class DuplicateIdReactiveMongoEntityTestTest {\n+        @RegisterExtension\n+        static QuarkusUnitTest runner = new QuarkusUnitTest()\n+                .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                        .addClasses(DuplicateIdReactiveMongoEntity.class))\n+                .withConfigurationResource(\"application.properties\");\n+\n+        @Test\n+        void shouldThrow() {\n+            DuplicateIdMongoEntity.findAll();\n+        }\n+    }\n+\n+    @Test\n+    void verifyIdTest() {\n+        // as the test will fail to be created, we need a way to launch it manually to assert\n+        // that there was a build issue (the BuildException will be thrown at test instanciation time).\n+        SummaryGeneratingListener listener = new SummaryGeneratingListener();\n+        LauncherDiscoveryRequest request = LauncherDiscoveryRequestBuilder.request()\n+                .selectors(selectClass(DuplicateIdReactiveMongoEntityTestTest.class))\n+                .build();\n+        Launcher launcher = LauncherFactory.create();\n+        launcher.registerTestExecutionListeners(listener);\n+        launcher.execute(request);\n+\n+        // we check that the test failed\n+        TestExecutionSummary summary = listener.getSummary();\n+        assertEquals(1, summary.getFailures().size());\n+        String exceptionMsg = summary.getFailures().get(0).getException().getMessage();\n+        assertTrue(exceptionMsg.contains(\"io.quarkus.builder.BuildException\"));\n+        assertTrue(exceptionMsg.contains(\"You provide a MongoDB identifier via @BsonId inside\"));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ4MTU2Mg=="}, "originalCommit": {"oid": "d3cab3ecaa189266224a763f32327cec2109c6fb"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkyOTkwMw==", "bodyText": "I updated the test with .setExpectedException(BuildException.class) instead of using the Launcher", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r407929903", "createdAt": "2020-04-14T07:42:15Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/mongodb-panache/deployment/src/test/java/io/quarkus/mongodb/panache/DuplicateIdReactiveMongoEntityTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package io.quarkus.mongodb.panache;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.junit.platform.launcher.Launcher;\n+import org.junit.platform.launcher.LauncherDiscoveryRequest;\n+import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;\n+import org.junit.platform.launcher.core.LauncherFactory;\n+import org.junit.platform.launcher.listeners.SummaryGeneratingListener;\n+import org.junit.platform.launcher.listeners.TestExecutionSummary;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DuplicateIdReactiveMongoEntityTest {\n+    public static class DuplicateIdReactiveMongoEntityTestTest {\n+        @RegisterExtension\n+        static QuarkusUnitTest runner = new QuarkusUnitTest()\n+                .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                        .addClasses(DuplicateIdReactiveMongoEntity.class))\n+                .withConfigurationResource(\"application.properties\");\n+\n+        @Test\n+        void shouldThrow() {\n+            DuplicateIdMongoEntity.findAll();\n+        }\n+    }\n+\n+    @Test\n+    void verifyIdTest() {\n+        // as the test will fail to be created, we need a way to launch it manually to assert\n+        // that there was a build issue (the BuildException will be thrown at test instanciation time).\n+        SummaryGeneratingListener listener = new SummaryGeneratingListener();\n+        LauncherDiscoveryRequest request = LauncherDiscoveryRequestBuilder.request()\n+                .selectors(selectClass(DuplicateIdReactiveMongoEntityTestTest.class))\n+                .build();\n+        Launcher launcher = LauncherFactory.create();\n+        launcher.registerTestExecutionListeners(listener);\n+        launcher.execute(request);\n+\n+        // we check that the test failed\n+        TestExecutionSummary summary = listener.getSummary();\n+        assertEquals(1, summary.getFailures().size());\n+        String exceptionMsg = summary.getFailures().get(0).getException().getMessage();\n+        assertTrue(exceptionMsg.contains(\"io.quarkus.builder.BuildException\"));\n+        assertTrue(exceptionMsg.contains(\"You provide a MongoDB identifier via @BsonId inside\"));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ4MTU2Mg=="}, "originalCommit": {"oid": "d3cab3ecaa189266224a763f32327cec2109c6fb"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyOTYyODI3OnYy", "diffSide": "RIGHT", "path": "extensions/panache/mongodb-panache/deployment/src/test/java/io/quarkus/mongodb/panache/DuplicateIdMongoEntityTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMzozNzo0NlrOGEmt9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMzozNzo0NlrOGEmt9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ4MTg0NQ==", "bodyText": "see this comment https://github.com/quarkusio/quarkus/pull/8549/files#r407481562 and let me know what you think", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r407481845", "createdAt": "2020-04-13T13:37:46Z", "author": {"login": "machi1990"}, "path": "extensions/panache/mongodb-panache/deployment/src/test/java/io/quarkus/mongodb/panache/DuplicateIdMongoEntityTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package io.quarkus.mongodb.panache;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.junit.platform.launcher.Launcher;\n+import org.junit.platform.launcher.LauncherDiscoveryRequest;\n+import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;\n+import org.junit.platform.launcher.core.LauncherFactory;\n+import org.junit.platform.launcher.listeners.SummaryGeneratingListener;\n+import org.junit.platform.launcher.listeners.TestExecutionSummary;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DuplicateIdMongoEntityTest {\n+    public static class DuplicateIdMongoEntityTestTest {\n+        @RegisterExtension\n+        static QuarkusUnitTest runner = new QuarkusUnitTest()\n+                .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                        .addClasses(DuplicateIdMongoEntity.class))\n+                .withConfigurationResource(\"application.properties\");\n+\n+        @Test\n+        void shouldThrow() {\n+            DuplicateIdMongoEntity.findAll();\n+        }\n+    }\n+\n+    @Test\n+    void verifyIdTest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3cab3ecaa189266224a763f32327cec2109c6fb"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODc3MTg3OnYy", "diffSide": "RIGHT", "path": "extensions/panache/hibernate-orm-panache/deployment/src/main/java/io/quarkus/hibernate/orm/panache/deployment/PanacheResourceProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTowODoyM1rOGF-VTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODo1NDoxOFrOGGbTMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxNzMyNA==", "bodyText": "This should be recursive: it is possible that we have superclasses between the entity class and PanacheEntity.", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r408917324", "createdAt": "2020-04-15T15:08:23Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache/deployment/src/main/java/io/quarkus/hibernate/orm/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -78,6 +81,16 @@ void build(CombinedIndexBuildItem index,\n             BuildProducer<PanacheEntityClassesBuildItem> entityClasses,\n             BuildProducer<NamedQueryEntityClassBuildStep> namedQueries) throws Exception {\n \n+        // we verify that no ID fields are defined (via @BsonId) when extending PanacheMongoEntity\n+        for (AnnotationInstance annotationInstance : index.getIndex().getAnnotations(DOTNAME_ID)) {\n+            ClassInfo info = io.quarkus.panache.common.deployment.JandexUtil.getEnclosingClass(annotationInstance);\n+            if (info.superName().equals(DOTNAME_PANACHE_ENTITY)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "408d8faba5c6f0dcb998de6e9a5916ef238b450f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5MTkyMw==", "bodyText": "Done, I climb up the hierarchy of classes.", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r409391923", "createdAt": "2020-04-16T08:54:18Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/hibernate-orm-panache/deployment/src/main/java/io/quarkus/hibernate/orm/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -78,6 +81,16 @@ void build(CombinedIndexBuildItem index,\n             BuildProducer<PanacheEntityClassesBuildItem> entityClasses,\n             BuildProducer<NamedQueryEntityClassBuildStep> namedQueries) throws Exception {\n \n+        // we verify that no ID fields are defined (via @BsonId) when extending PanacheMongoEntity\n+        for (AnnotationInstance annotationInstance : index.getIndex().getAnnotations(DOTNAME_ID)) {\n+            ClassInfo info = io.quarkus.panache.common.deployment.JandexUtil.getEnclosingClass(annotationInstance);\n+            if (info.superName().equals(DOTNAME_PANACHE_ENTITY)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxNzMyNA=="}, "originalCommit": {"oid": "408d8faba5c6f0dcb998de6e9a5916ef238b450f"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODc3NDc2OnYy", "diffSide": "RIGHT", "path": "extensions/panache/hibernate-orm-panache/deployment/src/main/java/io/quarkus/hibernate/orm/panache/deployment/PanacheResourceProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTowODo1NVrOGF-XGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTowODo1NVrOGF-XGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxNzc4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    \"your class should extend PanacheEntityBase instead\", Collections.emptyList());\n          \n          \n            \n                                    \"your class should extend PanacheEntityBase instead, or use the id provided by PanacheEntity\", Collections.emptyList());", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r408917786", "createdAt": "2020-04-15T15:08:55Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache/deployment/src/main/java/io/quarkus/hibernate/orm/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -78,6 +81,16 @@ void build(CombinedIndexBuildItem index,\n             BuildProducer<PanacheEntityClassesBuildItem> entityClasses,\n             BuildProducer<NamedQueryEntityClassBuildStep> namedQueries) throws Exception {\n \n+        // we verify that no ID fields are defined (via @BsonId) when extending PanacheMongoEntity\n+        for (AnnotationInstance annotationInstance : index.getIndex().getAnnotations(DOTNAME_ID)) {\n+            ClassInfo info = io.quarkus.panache.common.deployment.JandexUtil.getEnclosingClass(annotationInstance);\n+            if (info.superName().equals(DOTNAME_PANACHE_ENTITY)) {\n+                throw new BuildException(\"You provide a JPA identifier via @Id inside '\" + info.name() +\n+                        \"' but one is already provided by PanacheEntity, \" +\n+                        \"your class should extend PanacheEntityBase instead\", Collections.emptyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "408d8faba5c6f0dcb998de6e9a5916ef238b450f"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODc5MDk3OnYy", "diffSide": "RIGHT", "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToxMjoyNVrOGF-hkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODo1NDoyMlrOGGbTYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMDQ2NA==", "bodyText": "Same remark about inheritance.", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r408920464", "createdAt": "2020-04-15T15:12:25Z", "author": {"login": "FroMage"}, "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -133,7 +136,17 @@ void buildImperative(CombinedIndexBuildItem index,\n             BuildProducer<BytecodeTransformerBuildItem> transformers,\n             BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n             BuildProducer<PropertyMappingClassBuildStep> propertyMappingClass,\n-            BuildProducer<PanacheEntityClassesBuildItem> entityClasses) {\n+            BuildProducer<PanacheEntityClassesBuildItem> entityClasses) throws BuildException {\n+\n+        // we verify that no ID fields are defined (via @BsonId) when extending PanacheMongoEntity\n+        for (AnnotationInstance annotationInstance : index.getIndex().getAnnotations(DOTNAME_BSON_ID)) {\n+            ClassInfo info = io.quarkus.panache.common.deployment.JandexUtil.getEnclosingClass(annotationInstance);\n+            if (info.superName().equals(DOTNAME_PANACHE_ENTITY)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "408d8faba5c6f0dcb998de6e9a5916ef238b450f"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5MTk2OQ==", "bodyText": "Done, I climb up the hierarchy of classes.", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r409391969", "createdAt": "2020-04-16T08:54:22Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -133,7 +136,17 @@ void buildImperative(CombinedIndexBuildItem index,\n             BuildProducer<BytecodeTransformerBuildItem> transformers,\n             BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n             BuildProducer<PropertyMappingClassBuildStep> propertyMappingClass,\n-            BuildProducer<PanacheEntityClassesBuildItem> entityClasses) {\n+            BuildProducer<PanacheEntityClassesBuildItem> entityClasses) throws BuildException {\n+\n+        // we verify that no ID fields are defined (via @BsonId) when extending PanacheMongoEntity\n+        for (AnnotationInstance annotationInstance : index.getIndex().getAnnotations(DOTNAME_BSON_ID)) {\n+            ClassInfo info = io.quarkus.panache.common.deployment.JandexUtil.getEnclosingClass(annotationInstance);\n+            if (info.superName().equals(DOTNAME_PANACHE_ENTITY)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMDQ2NA=="}, "originalCommit": {"oid": "408d8faba5c6f0dcb998de6e9a5916ef238b450f"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODc5MjY5OnYy", "diffSide": "RIGHT", "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToxMjo0OFrOGF-iyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToxMjo0OFrOGF-iyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMDc3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    \"your class should extend PanacheMongoEntityBase instead\", Collections.emptyList());\n          \n          \n            \n                                    \"your class should extend PanacheMongoEntityBase instead, or use the id provided by PanageMongoEntity\", Collections.emptyList());", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r408920776", "createdAt": "2020-04-15T15:12:48Z", "author": {"login": "FroMage"}, "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -133,7 +136,17 @@ void buildImperative(CombinedIndexBuildItem index,\n             BuildProducer<BytecodeTransformerBuildItem> transformers,\n             BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n             BuildProducer<PropertyMappingClassBuildStep> propertyMappingClass,\n-            BuildProducer<PanacheEntityClassesBuildItem> entityClasses) {\n+            BuildProducer<PanacheEntityClassesBuildItem> entityClasses) throws BuildException {\n+\n+        // we verify that no ID fields are defined (via @BsonId) when extending PanacheMongoEntity\n+        for (AnnotationInstance annotationInstance : index.getIndex().getAnnotations(DOTNAME_BSON_ID)) {\n+            ClassInfo info = io.quarkus.panache.common.deployment.JandexUtil.getEnclosingClass(annotationInstance);\n+            if (info.superName().equals(DOTNAME_PANACHE_ENTITY)) {\n+                throw new BuildException(\"You provide a MongoDB identifier via @BsonId inside '\" + info.name() +\n+                        \"' but one is already provided by PanacheMongoEntity, \" +\n+                        \"your class should extend PanacheMongoEntityBase instead\", Collections.emptyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "408d8faba5c6f0dcb998de6e9a5916ef238b450f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODc5NDI5OnYy", "diffSide": "RIGHT", "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToxMzowNVrOGF-jwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODo1NDoyOFrOGGbTrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMTAyNA==", "bodyText": "Same remark about inheritance.", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r408921024", "createdAt": "2020-04-15T15:13:05Z", "author": {"login": "FroMage"}, "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -214,7 +227,17 @@ void buildMutiny(CombinedIndexBuildItem index,\n             ApplicationIndexBuildItem applicationIndex,\n             BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n             BuildProducer<PropertyMappingClassBuildStep> propertyMappingClass,\n-            BuildProducer<BytecodeTransformerBuildItem> transformers) {\n+            BuildProducer<BytecodeTransformerBuildItem> transformers) throws BuildException {\n+\n+        // we verify that no ID fields are defined (via @BsonId) when extending ReactivePanacheMongoEntity\n+        for (AnnotationInstance annotationInstance : index.getIndex().getAnnotations(DOTNAME_BSON_ID)) {\n+            ClassInfo info = io.quarkus.panache.common.deployment.JandexUtil.getEnclosingClass(annotationInstance);\n+            if (info.superName().equals(DOTNAME_MUTINY_PANACHE_ENTITY)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "408d8faba5c6f0dcb998de6e9a5916ef238b450f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5MjA0NA==", "bodyText": "Done, I climb up the hierarchy of classes.", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r409392044", "createdAt": "2020-04-16T08:54:28Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -214,7 +227,17 @@ void buildMutiny(CombinedIndexBuildItem index,\n             ApplicationIndexBuildItem applicationIndex,\n             BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n             BuildProducer<PropertyMappingClassBuildStep> propertyMappingClass,\n-            BuildProducer<BytecodeTransformerBuildItem> transformers) {\n+            BuildProducer<BytecodeTransformerBuildItem> transformers) throws BuildException {\n+\n+        // we verify that no ID fields are defined (via @BsonId) when extending ReactivePanacheMongoEntity\n+        for (AnnotationInstance annotationInstance : index.getIndex().getAnnotations(DOTNAME_BSON_ID)) {\n+            ClassInfo info = io.quarkus.panache.common.deployment.JandexUtil.getEnclosingClass(annotationInstance);\n+            if (info.superName().equals(DOTNAME_MUTINY_PANACHE_ENTITY)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMTAyNA=="}, "originalCommit": {"oid": "408d8faba5c6f0dcb998de6e9a5916ef238b450f"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODc5NTYzOnYy", "diffSide": "RIGHT", "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToxMzoyNFrOGF-kqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToxMzoyNFrOGF-kqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMTI1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    \"your class should extend ReactivePanacheMongoEntityBase instead\", Collections.emptyList());\n          \n          \n            \n                                    \"your class should extend ReactivePanacheMongoEntityBase instead, or use the id provided by ReactivePanacheMongoEntity\", Collections.emptyList());", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r408921257", "createdAt": "2020-04-15T15:13:24Z", "author": {"login": "FroMage"}, "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -214,7 +227,17 @@ void buildMutiny(CombinedIndexBuildItem index,\n             ApplicationIndexBuildItem applicationIndex,\n             BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n             BuildProducer<PropertyMappingClassBuildStep> propertyMappingClass,\n-            BuildProducer<BytecodeTransformerBuildItem> transformers) {\n+            BuildProducer<BytecodeTransformerBuildItem> transformers) throws BuildException {\n+\n+        // we verify that no ID fields are defined (via @BsonId) when extending ReactivePanacheMongoEntity\n+        for (AnnotationInstance annotationInstance : index.getIndex().getAnnotations(DOTNAME_BSON_ID)) {\n+            ClassInfo info = io.quarkus.panache.common.deployment.JandexUtil.getEnclosingClass(annotationInstance);\n+            if (info.superName().equals(DOTNAME_MUTINY_PANACHE_ENTITY)) {\n+                throw new BuildException(\"You provide a MongoDB identifier via @BsonId inside '\" + info.name() +\n+                        \"' but one is already provided by ReactivePanacheMongoEntity, \" +\n+                        \"your class should extend ReactivePanacheMongoEntityBase instead\", Collections.emptyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "408d8faba5c6f0dcb998de6e9a5916ef238b450f"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjU5Nzc1OnYy", "diffSide": "RIGHT", "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/JandexUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjozNTowMVrOGGjGOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjozNTowMVrOGGjGOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUxOTY3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static boolean isChildOf(IndexView index, ClassInfo info, DotName parentName) throws BuildException {\n          \n          \n            \n                public static boolean isSubclassOf(IndexView index, ClassInfo info, DotName parentName) throws BuildException {\n          \n      \n    \n    \n  \n\nGiven that this is only for superclasses (not interfaces) the name should make it clear.", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r409519675", "createdAt": "2020-04-16T12:35:01Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/JandexUtil.java", "diffHunk": "@@ -201,4 +206,40 @@ public static boolean containsMethod(ClassInfo classInfo, MethodInfo methodInfo)\n         }\n         return false;\n     }\n+\n+    public static ClassInfo getEnclosingClass(AnnotationInstance annotationInstance) {\n+        switch (annotationInstance.target().kind()) {\n+            case FIELD:\n+                return annotationInstance.target().asField().declaringClass();\n+            case METHOD:\n+                return annotationInstance.target().asMethod().declaringClass();\n+            case METHOD_PARAMETER:\n+                return annotationInstance.target().asMethodParameter().method().declaringClass();\n+            case CLASS:\n+                return annotationInstance.target().asClass();\n+            case TYPE:\n+                return annotationInstance.target().asType().asClass(); // TODO is it legal here or should I throw ?\n+            default:\n+                throw new RuntimeException(); // this should not occurs\n+        }\n+    }\n+\n+    public static boolean isChildOf(IndexView index, ClassInfo info, DotName parentName) throws BuildException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9a3443053d0e561a6cce87924c35fe59e71eb37"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzMwMTczOnYy", "diffSide": "RIGHT", "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODoxMzoyNFrOGK1mEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzozOTo1NFrOGLKuzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxNzA0MA==", "bodyText": "Seems like the exception is not thrown anymore..", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414017040", "createdAt": "2020-04-23T18:13:24Z", "author": {"login": "machi1990"}, "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -137,7 +139,7 @@ void buildImperative(CombinedIndexBuildItem index,\n             BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n             BuildProducer<PropertyMappingClassBuildStep> propertyMappingClass,\n             BuildProducer<PanacheEntityClassesBuildItem> entityClasses,\n-            List<PanacheMethodCustomizerBuildItem> methodCustomizersBuildItems) {\n+            List<PanacheMethodCustomizerBuildItem> methodCustomizersBuildItems) throws BuildException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32dc77c5746c53bd734894477591de4335a96a83"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM2MzM0MA==", "bodyText": "Removed", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414363340", "createdAt": "2020-04-24T07:39:54Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -137,7 +139,7 @@ void buildImperative(CombinedIndexBuildItem index,\n             BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n             BuildProducer<PropertyMappingClassBuildStep> propertyMappingClass,\n             BuildProducer<PanacheEntityClassesBuildItem> entityClasses,\n-            List<PanacheMethodCustomizerBuildItem> methodCustomizersBuildItems) {\n+            List<PanacheMethodCustomizerBuildItem> methodCustomizersBuildItems) throws BuildException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxNzA0MA=="}, "originalCommit": {"oid": "32dc77c5746c53bd734894477591de4335a96a83"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzMwMjk5OnYy", "diffSide": "RIGHT", "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODoxMzo0MlrOGK1mxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzo0MDowM1rOGLKvUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxNzIyMw==", "bodyText": "Same here the exception is not thrown anymore", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414017223", "createdAt": "2020-04-23T18:13:42Z", "author": {"login": "machi1990"}, "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -222,11 +224,10 @@ void buildMutiny(CombinedIndexBuildItem index,\n             BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n             BuildProducer<PropertyMappingClassBuildStep> propertyMappingClass,\n             BuildProducer<BytecodeTransformerBuildItem> transformers,\n-            List<PanacheMethodCustomizerBuildItem> methodCustomizersBuildItems) {\n+            List<PanacheMethodCustomizerBuildItem> methodCustomizersBuildItems) throws BuildException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32dc77c5746c53bd734894477591de4335a96a83"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM2MzQ3Mg==", "bodyText": "Remove", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414363472", "createdAt": "2020-04-24T07:40:03Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -222,11 +224,10 @@ void buildMutiny(CombinedIndexBuildItem index,\n             BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n             BuildProducer<PropertyMappingClassBuildStep> propertyMappingClass,\n             BuildProducer<BytecodeTransformerBuildItem> transformers,\n-            List<PanacheMethodCustomizerBuildItem> methodCustomizersBuildItems) {\n+            List<PanacheMethodCustomizerBuildItem> methodCustomizersBuildItems) throws BuildException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxNzIyMw=="}, "originalCommit": {"oid": "32dc77c5746c53bd734894477591de4335a96a83"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzMwODUwOnYy", "diffSide": "RIGHT", "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODoxNTowNVrOGK1qPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODozMjowOFrOGN03QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxODEwOQ==", "bodyText": "nitpick: We could maybe have an import of DOTNAME_OBJECT  and avoid this long line", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414018109", "createdAt": "2020-04-23T18:15:05Z", "author": {"login": "machi1990"}, "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -344,7 +370,7 @@ private void extractMappings(Map<String, String> classPropertyMapping, ClassInfo\n         }\n \n         // climb up the hierarchy of types\n-        if (!target.superClassType().name().equals(DOTNAME_OBJECT)) {\n+        if (!target.superClassType().name().equals(io.quarkus.panache.common.deployment.JandexUtil.DOTNAME_OBJECT)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32dc77c5746c53bd734894477591de4335a96a83"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyMzIzMQ==", "bodyText": "Or we could just import JandexUtil since it seems to be used everywhere", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414023231", "createdAt": "2020-04-23T18:22:55Z", "author": {"login": "machi1990"}, "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -344,7 +370,7 @@ private void extractMappings(Map<String, String> classPropertyMapping, ClassInfo\n         }\n \n         // climb up the hierarchy of types\n-        if (!target.superClassType().name().equals(DOTNAME_OBJECT)) {\n+        if (!target.superClassType().name().equals(io.quarkus.panache.common.deployment.JandexUtil.DOTNAME_OBJECT)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxODEwOQ=="}, "originalCommit": {"oid": "32dc77c5746c53bd734894477591de4335a96a83"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM1OTMyOQ==", "bodyText": "There is two JandexUtil, one from core deployment and one from Panache.\nI think we need to rename the panache one PanacheJandexUtil to be able to import it.\nI'll need @FroMage blessing on this rename as he is the original author ;)", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414359329", "createdAt": "2020-04-24T07:33:19Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -344,7 +370,7 @@ private void extractMappings(Map<String, String> classPropertyMapping, ClassInfo\n         }\n \n         // climb up the hierarchy of types\n-        if (!target.superClassType().name().equals(DOTNAME_OBJECT)) {\n+        if (!target.superClassType().name().equals(io.quarkus.panache.common.deployment.JandexUtil.DOTNAME_OBJECT)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxODEwOQ=="}, "originalCommit": {"oid": "32dc77c5746c53bd734894477591de4335a96a83"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM2NDIxOA==", "bodyText": "Okay. Can be done in another PR I suppose. Not a biggie.", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414364218", "createdAt": "2020-04-24T07:41:17Z", "author": {"login": "machi1990"}, "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -344,7 +370,7 @@ private void extractMappings(Map<String, String> classPropertyMapping, ClassInfo\n         }\n \n         // climb up the hierarchy of types\n-        if (!target.superClassType().name().equals(DOTNAME_OBJECT)) {\n+        if (!target.superClassType().name().equals(io.quarkus.panache.common.deployment.JandexUtil.DOTNAME_OBJECT)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxODEwOQ=="}, "originalCommit": {"oid": "32dc77c5746c53bd734894477591de4335a96a83"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQxMjk1NQ==", "bodyText": "If I get @stuartwdouglas 's blessing I would move most of our JandexUtil's methods into the deployment one, because it has so many useful methods for everyone, dealing with producing ASM from jandex-using code, that I'm sure other extensions had to reimplement a lot of it.", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414412955", "createdAt": "2020-04-24T08:59:06Z", "author": {"login": "FroMage"}, "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -344,7 +370,7 @@ private void extractMappings(Map<String, String> classPropertyMapping, ClassInfo\n         }\n \n         // climb up the hierarchy of types\n-        if (!target.superClassType().name().equals(DOTNAME_OBJECT)) {\n+        if (!target.superClassType().name().equals(io.quarkus.panache.common.deployment.JandexUtil.DOTNAME_OBJECT)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxODEwOQ=="}, "originalCommit": {"oid": "32dc77c5746c53bd734894477591de4335a96a83"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI3ODY3Mw==", "bodyText": "Sounds reasonable.", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r416278673", "createdAt": "2020-04-28T02:22:16Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -344,7 +370,7 @@ private void extractMappings(Map<String, String> classPropertyMapping, ClassInfo\n         }\n \n         // climb up the hierarchy of types\n-        if (!target.superClassType().name().equals(DOTNAME_OBJECT)) {\n+        if (!target.superClassType().name().equals(io.quarkus.panache.common.deployment.JandexUtil.DOTNAME_OBJECT)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxODEwOQ=="}, "originalCommit": {"oid": "32dc77c5746c53bd734894477591de4335a96a83"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1MDc4NA==", "bodyText": "OK thanks. I'll open a mail discussion before doing that PR, to make sure other JandeUtil classes don't already exist.", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r417150784", "createdAt": "2020-04-29T08:32:08Z", "author": {"login": "FroMage"}, "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -344,7 +370,7 @@ private void extractMappings(Map<String, String> classPropertyMapping, ClassInfo\n         }\n \n         // climb up the hierarchy of types\n-        if (!target.superClassType().name().equals(DOTNAME_OBJECT)) {\n+        if (!target.superClassType().name().equals(io.quarkus.panache.common.deployment.JandexUtil.DOTNAME_OBJECT)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxODEwOQ=="}, "originalCommit": {"oid": "32dc77c5746c53bd734894477591de4335a96a83"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzMxNTA3OnYy", "diffSide": "RIGHT", "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/JandexUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODoxNjo0MFrOGK1uQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzo0MDoyMVrOGLKv9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxOTEzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // this can happens if the parent is not inside the Yandex index\n          \n          \n            \n                        // this can happens if the parent is not inside the Jandex index", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414019139", "createdAt": "2020-04-23T18:16:40Z", "author": {"login": "machi1990"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/JandexUtil.java", "diffHunk": "@@ -308,6 +314,42 @@ public static int getLoadOpcode(Type jandexType) {\n         return Opcodes.ALOAD;\n     }\n \n+    public static ClassInfo getEnclosingClass(AnnotationInstance annotationInstance) {\n+        switch (annotationInstance.target().kind()) {\n+            case FIELD:\n+                return annotationInstance.target().asField().declaringClass();\n+            case METHOD:\n+                return annotationInstance.target().asMethod().declaringClass();\n+            case METHOD_PARAMETER:\n+                return annotationInstance.target().asMethodParameter().method().declaringClass();\n+            case CLASS:\n+                return annotationInstance.target().asClass();\n+            case TYPE:\n+                return annotationInstance.target().asType().asClass(); // TODO is it legal here or should I throw ?\n+            default:\n+                throw new RuntimeException(); // this should not occurs\n+        }\n+    }\n+\n+    public static boolean isSubclassOf(IndexView index, ClassInfo info, DotName parentName) throws BuildException {\n+        if (info.superName().equals(DOTNAME_OBJECT)) {\n+            return false;\n+        }\n+        if (info.superName().equals(parentName)) {\n+            return true;\n+        }\n+\n+        // climb up the hierarchy of classes\n+        Type superType = info.superClassType();\n+        ClassInfo superClass = index.getClassByName(superType.name());\n+        if (superClass == null) {\n+            // this can happens if the parent is not inside the Yandex index", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32dc77c5746c53bd734894477591de4335a96a83"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM2MTI4MA==", "bodyText": "Ah funny, I always pronounce Jandex Yandex and this time I wrote it ;)\nYandex is the equivalent of Google in Russia ... integrated once in a website for Russia Maps ...", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414361280", "createdAt": "2020-04-24T07:36:22Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/JandexUtil.java", "diffHunk": "@@ -308,6 +314,42 @@ public static int getLoadOpcode(Type jandexType) {\n         return Opcodes.ALOAD;\n     }\n \n+    public static ClassInfo getEnclosingClass(AnnotationInstance annotationInstance) {\n+        switch (annotationInstance.target().kind()) {\n+            case FIELD:\n+                return annotationInstance.target().asField().declaringClass();\n+            case METHOD:\n+                return annotationInstance.target().asMethod().declaringClass();\n+            case METHOD_PARAMETER:\n+                return annotationInstance.target().asMethodParameter().method().declaringClass();\n+            case CLASS:\n+                return annotationInstance.target().asClass();\n+            case TYPE:\n+                return annotationInstance.target().asType().asClass(); // TODO is it legal here or should I throw ?\n+            default:\n+                throw new RuntimeException(); // this should not occurs\n+        }\n+    }\n+\n+    public static boolean isSubclassOf(IndexView index, ClassInfo info, DotName parentName) throws BuildException {\n+        if (info.superName().equals(DOTNAME_OBJECT)) {\n+            return false;\n+        }\n+        if (info.superName().equals(parentName)) {\n+            return true;\n+        }\n+\n+        // climb up the hierarchy of classes\n+        Type superType = info.superClassType();\n+        ClassInfo superClass = index.getClassByName(superType.name());\n+        if (superClass == null) {\n+            // this can happens if the parent is not inside the Yandex index", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxOTEzOQ=="}, "originalCommit": {"oid": "32dc77c5746c53bd734894477591de4335a96a83"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM2MzYzNw==", "bodyText": "Fixed", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414363637", "createdAt": "2020-04-24T07:40:21Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/JandexUtil.java", "diffHunk": "@@ -308,6 +314,42 @@ public static int getLoadOpcode(Type jandexType) {\n         return Opcodes.ALOAD;\n     }\n \n+    public static ClassInfo getEnclosingClass(AnnotationInstance annotationInstance) {\n+        switch (annotationInstance.target().kind()) {\n+            case FIELD:\n+                return annotationInstance.target().asField().declaringClass();\n+            case METHOD:\n+                return annotationInstance.target().asMethod().declaringClass();\n+            case METHOD_PARAMETER:\n+                return annotationInstance.target().asMethodParameter().method().declaringClass();\n+            case CLASS:\n+                return annotationInstance.target().asClass();\n+            case TYPE:\n+                return annotationInstance.target().asType().asClass(); // TODO is it legal here or should I throw ?\n+            default:\n+                throw new RuntimeException(); // this should not occurs\n+        }\n+    }\n+\n+    public static boolean isSubclassOf(IndexView index, ClassInfo info, DotName parentName) throws BuildException {\n+        if (info.superName().equals(DOTNAME_OBJECT)) {\n+            return false;\n+        }\n+        if (info.superName().equals(parentName)) {\n+            return true;\n+        }\n+\n+        // climb up the hierarchy of classes\n+        Type superType = info.superClassType();\n+        ClassInfo superClass = index.getClassByName(superType.name());\n+        if (superClass == null) {\n+            // this can happens if the parent is not inside the Yandex index", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxOTEzOQ=="}, "originalCommit": {"oid": "32dc77c5746c53bd734894477591de4335a96a83"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzMxNjY0OnYy", "diffSide": "RIGHT", "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/JandexUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODoxNjo1OVrOGK1vKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzo0MDozMVrOGLKwTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxOTM3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new RuntimeException(); // this should not occurs\n          \n          \n            \n                            throw new RuntimeException(); // this should not occur", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414019371", "createdAt": "2020-04-23T18:16:59Z", "author": {"login": "machi1990"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/JandexUtil.java", "diffHunk": "@@ -308,6 +314,42 @@ public static int getLoadOpcode(Type jandexType) {\n         return Opcodes.ALOAD;\n     }\n \n+    public static ClassInfo getEnclosingClass(AnnotationInstance annotationInstance) {\n+        switch (annotationInstance.target().kind()) {\n+            case FIELD:\n+                return annotationInstance.target().asField().declaringClass();\n+            case METHOD:\n+                return annotationInstance.target().asMethod().declaringClass();\n+            case METHOD_PARAMETER:\n+                return annotationInstance.target().asMethodParameter().method().declaringClass();\n+            case CLASS:\n+                return annotationInstance.target().asClass();\n+            case TYPE:\n+                return annotationInstance.target().asType().asClass(); // TODO is it legal here or should I throw ?\n+            default:\n+                throw new RuntimeException(); // this should not occurs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32dc77c5746c53bd734894477591de4335a96a83"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM2MzcyNw==", "bodyText": "Fixed", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414363727", "createdAt": "2020-04-24T07:40:31Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/JandexUtil.java", "diffHunk": "@@ -308,6 +314,42 @@ public static int getLoadOpcode(Type jandexType) {\n         return Opcodes.ALOAD;\n     }\n \n+    public static ClassInfo getEnclosingClass(AnnotationInstance annotationInstance) {\n+        switch (annotationInstance.target().kind()) {\n+            case FIELD:\n+                return annotationInstance.target().asField().declaringClass();\n+            case METHOD:\n+                return annotationInstance.target().asMethod().declaringClass();\n+            case METHOD_PARAMETER:\n+                return annotationInstance.target().asMethodParameter().method().declaringClass();\n+            case CLASS:\n+                return annotationInstance.target().asClass();\n+            case TYPE:\n+                return annotationInstance.target().asType().asClass(); // TODO is it legal here or should I throw ?\n+            default:\n+                throw new RuntimeException(); // this should not occurs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxOTM3MQ=="}, "originalCommit": {"oid": "32dc77c5746c53bd734894477591de4335a96a83"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzMyMzg5OnYy", "diffSide": "RIGHT", "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODoxODo0MlrOGK1zeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzozODoyN1rOGLKrkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyMDQ3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        CombinedIndexBuildItem index) throws BuildException {\n          \n          \n            \n                        CombinedIndexBuildItem index)  {\n          \n      \n    \n    \n  \n\nNo exception is thrown", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414020473", "createdAt": "2020-04-23T18:18:42Z", "author": {"login": "machi1990"}, "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -300,6 +301,31 @@ void buildMutiny(CombinedIndexBuildItem index,\n         }\n     }\n \n+    @BuildStep\n+    ValidationPhaseBuildItem.ValidationErrorBuildItem validate(ValidationPhaseBuildItem validationPhase,\n+            CombinedIndexBuildItem index) throws BuildException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32dc77c5746c53bd734894477591de4335a96a83"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM2MjUxMg==", "bodyText": "It can be thrown by io.quarkus.panache.common.deployment.JandexUtil.isSubclassOf that delcares it as a checked exception.", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414362512", "createdAt": "2020-04-24T07:38:27Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -300,6 +301,31 @@ void buildMutiny(CombinedIndexBuildItem index,\n         }\n     }\n \n+    @BuildStep\n+    ValidationPhaseBuildItem.ValidationErrorBuildItem validate(ValidationPhaseBuildItem validationPhase,\n+            CombinedIndexBuildItem index) throws BuildException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyMDQ3Mw=="}, "originalCommit": {"oid": "32dc77c5746c53bd734894477591de4335a96a83"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzMyOTA0OnYy", "diffSide": "RIGHT", "path": "extensions/panache/hibernate-orm-panache/deployment/src/main/java/io/quarkus/hibernate/orm/panache/deployment/PanacheResourceProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODoxOTo1OFrOGK12hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzo0MDoyNVrOGLKwEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyMTI1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        CombinedIndexBuildItem index) throws BuildException {\n          \n          \n            \n                        CombinedIndexBuildItem index)  {\n          \n      \n    \n    \n  \n\nWe do not throw any exception", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414021252", "createdAt": "2020-04-23T18:19:58Z", "author": {"login": "machi1990"}, "path": "extensions/panache/hibernate-orm-panache/deployment/src/main/java/io/quarkus/hibernate/orm/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -154,6 +157,23 @@ void build(CombinedIndexBuildItem index,\n         }\n     }\n \n+    @BuildStep\n+    ValidationPhaseBuildItem.ValidationErrorBuildItem validate(ValidationPhaseBuildItem validationPhase,\n+            CombinedIndexBuildItem index) throws BuildException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32dc77c5746c53bd734894477591de4335a96a83"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM2MjYxNQ==", "bodyText": "It can be thrown by io.quarkus.panache.common.deployment.JandexUtil.isSubclassOf that delcares it as a checked exception.", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414362615", "createdAt": "2020-04-24T07:38:37Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/hibernate-orm-panache/deployment/src/main/java/io/quarkus/hibernate/orm/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -154,6 +157,23 @@ void build(CombinedIndexBuildItem index,\n         }\n     }\n \n+    @BuildStep\n+    ValidationPhaseBuildItem.ValidationErrorBuildItem validate(ValidationPhaseBuildItem validationPhase,\n+            CombinedIndexBuildItem index) throws BuildException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyMTI1Mg=="}, "originalCommit": {"oid": "32dc77c5746c53bd734894477591de4335a96a83"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM2MzY2NQ==", "bodyText": "Ah I might have missed it, sorry.", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414363665", "createdAt": "2020-04-24T07:40:25Z", "author": {"login": "machi1990"}, "path": "extensions/panache/hibernate-orm-panache/deployment/src/main/java/io/quarkus/hibernate/orm/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -154,6 +157,23 @@ void build(CombinedIndexBuildItem index,\n         }\n     }\n \n+    @BuildStep\n+    ValidationPhaseBuildItem.ValidationErrorBuildItem validate(ValidationPhaseBuildItem validationPhase,\n+            CombinedIndexBuildItem index) throws BuildException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyMTI1Mg=="}, "originalCommit": {"oid": "32dc77c5746c53bd734894477591de4335a96a83"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzMzMjM5OnYy", "diffSide": "RIGHT", "path": "extensions/panache/hibernate-orm-panache/deployment/src/main/java/io/quarkus/hibernate/orm/panache/deployment/PanacheResourceProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODoyMDo1MFrOGK14mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODoyMDo1MFrOGK14mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyMTc4Ng==", "bodyText": "static import of DOTNAME_OBJECT  would be better instead of this very long line.\nor we could import JandexUtil at the very least since it seems to be used everywhere.", "url": "https://github.com/quarkusio/quarkus/pull/8549#discussion_r414021786", "createdAt": "2020-04-23T18:20:50Z", "author": {"login": "machi1990"}, "path": "extensions/panache/hibernate-orm-panache/deployment/src/main/java/io/quarkus/hibernate/orm/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -191,7 +211,7 @@ private void lookupNamedQueries(CombinedIndexBuildItem index, DotName name, Set<\n         }\n \n         // climb up the hierarchy of types\n-        if (!classInfo.superClassType().name().equals(DOTNAME_OBJECT)) {\n+        if (!classInfo.superClassType().name().equals(io.quarkus.panache.common.deployment.JandexUtil.DOTNAME_OBJECT)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32dc77c5746c53bd734894477591de4335a96a83"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3484, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}