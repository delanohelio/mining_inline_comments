{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMTU1MjU2", "number": 8566, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjozNzowMlrODxn9ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjoxNDo1N1rODy4LhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzYxNTMxOnYy", "diffSide": "RIGHT", "path": "extensions/quartz/deployment/src/main/java/io/quarkus/quartz/deployment/QuartzProcessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjozNzowMlrOGFMhWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzo0MDo0MlrOGFPJgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwMTIxMQ==", "bodyText": "Do we need to load the class here? We could use something like String.lastIndexOf(\".\"), or?", "url": "https://github.com/quarkusio/quarkus/pull/8566#discussion_r408101211", "createdAt": "2020-04-14T12:37:02Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/deployment/src/main/java/io/quarkus/quartz/deployment/QuartzProcessor.java", "diffHunk": "@@ -169,6 +168,10 @@ private String guessDriver(Optional<JdbcDataSourceBuildItem> jdbcDataSource) {\n         return logCleanUps;\n     }\n \n+    private String getStoreClassSimpleName(String clazz) throws ClassNotFoundException {\n+        return Class.forName(clazz).getSimpleName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea40260133ba029bdb99829aa27f425e9d91d3a8"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwMzgwNQ==", "bodyText": "Yes, thought about that but I assumed it is okay since we are at build time?", "url": "https://github.com/quarkusio/quarkus/pull/8566#discussion_r408103805", "createdAt": "2020-04-14T12:41:05Z", "author": {"login": "machi1990"}, "path": "extensions/quartz/deployment/src/main/java/io/quarkus/quartz/deployment/QuartzProcessor.java", "diffHunk": "@@ -169,6 +168,10 @@ private String guessDriver(Optional<JdbcDataSourceBuildItem> jdbcDataSource) {\n         return logCleanUps;\n     }\n \n+    private String getStoreClassSimpleName(String clazz) throws ClassNotFoundException {\n+        return Class.forName(clazz).getSimpleName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwMTIxMQ=="}, "originalCommit": {"oid": "ea40260133ba029bdb99829aa27f425e9d91d3a8"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODExMjY5Mg==", "bodyText": "Yes, it's probably ok. But still, we load a class just to get the simple name...", "url": "https://github.com/quarkusio/quarkus/pull/8566#discussion_r408112692", "createdAt": "2020-04-14T12:54:35Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/deployment/src/main/java/io/quarkus/quartz/deployment/QuartzProcessor.java", "diffHunk": "@@ -169,6 +168,10 @@ private String guessDriver(Optional<JdbcDataSourceBuildItem> jdbcDataSource) {\n         return logCleanUps;\n     }\n \n+    private String getStoreClassSimpleName(String clazz) throws ClassNotFoundException {\n+        return Class.forName(clazz).getSimpleName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwMTIxMQ=="}, "originalCommit": {"oid": "ea40260133ba029bdb99829aa27f425e9d91d3a8"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE0NDI1Ng==", "bodyText": "Okay, gotcha. I have updated the code to take into account this feedback.", "url": "https://github.com/quarkusio/quarkus/pull/8566#discussion_r408144256", "createdAt": "2020-04-14T13:40:42Z", "author": {"login": "machi1990"}, "path": "extensions/quartz/deployment/src/main/java/io/quarkus/quartz/deployment/QuartzProcessor.java", "diffHunk": "@@ -169,6 +168,10 @@ private String guessDriver(Optional<JdbcDataSourceBuildItem> jdbcDataSource) {\n         return logCleanUps;\n     }\n \n+    private String getStoreClassSimpleName(String clazz) throws ClassNotFoundException {\n+        return Class.forName(clazz).getSimpleName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwMTIxMQ=="}, "originalCommit": {"oid": "ea40260133ba029bdb99829aa27f425e9d91d3a8"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzYyNDA4OnYy", "diffSide": "RIGHT", "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjozOTowOVrOGFMmcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjo1NTo0M1rOGFNRSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwMjUxNQ==", "bodyText": "What is this used for? It wasn't used before, or?", "url": "https://github.com/quarkusio/quarkus/pull/8566#discussion_r408102515", "createdAt": "2020-04-14T12:39:09Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -256,6 +258,10 @@ private Properties getSchedulerConfigurationProperties(QuartzSupport quartzSuppo\n                 props.put(StdSchedulerFactory.PROP_JOB_STORE_PREFIX + \".isClustered\", \"true\");\n                 props.put(StdSchedulerFactory.PROP_JOB_STORE_PREFIX + \".clusterCheckinInterval\", \"20000\"); // 20 seconds\n             }\n+\n+            if (storeClass.equals(JobStoreCMT.class.getName())) {\n+                props.put(StdSchedulerFactory.PROP_JOB_STORE_PREFIX + \".nonManagedTXDataSource\", dataSource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea40260133ba029bdb99829aa27f425e9d91d3a8"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwNDIyNg==", "bodyText": "Yes, it was not need before since the non managed datasource was not configured. Now we need it so configure the JobStoreCMT class.", "url": "https://github.com/quarkusio/quarkus/pull/8566#discussion_r408104226", "createdAt": "2020-04-14T12:41:45Z", "author": {"login": "machi1990"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -256,6 +258,10 @@ private Properties getSchedulerConfigurationProperties(QuartzSupport quartzSuppo\n                 props.put(StdSchedulerFactory.PROP_JOB_STORE_PREFIX + \".isClustered\", \"true\");\n                 props.put(StdSchedulerFactory.PROP_JOB_STORE_PREFIX + \".clusterCheckinInterval\", \"20000\"); // 20 seconds\n             }\n+\n+            if (storeClass.equals(JobStoreCMT.class.getName())) {\n+                props.put(StdSchedulerFactory.PROP_JOB_STORE_PREFIX + \".nonManagedTXDataSource\", dataSource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwMjUxNQ=="}, "originalCommit": {"oid": "ea40260133ba029bdb99829aa27f425e9d91d3a8"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODExMzQ4Mw==", "bodyText": "I see. It was JobStoreTX before...", "url": "https://github.com/quarkusio/quarkus/pull/8566#discussion_r408113483", "createdAt": "2020-04-14T12:55:43Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -256,6 +258,10 @@ private Properties getSchedulerConfigurationProperties(QuartzSupport quartzSuppo\n                 props.put(StdSchedulerFactory.PROP_JOB_STORE_PREFIX + \".isClustered\", \"true\");\n                 props.put(StdSchedulerFactory.PROP_JOB_STORE_PREFIX + \".clusterCheckinInterval\", \"20000\"); // 20 seconds\n             }\n+\n+            if (storeClass.equals(JobStoreCMT.class.getName())) {\n+                props.put(StdSchedulerFactory.PROP_JOB_STORE_PREFIX + \".nonManagedTXDataSource\", dataSource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwMjUxNQ=="}, "originalCommit": {"oid": "ea40260133ba029bdb99829aa27f425e9d91d3a8"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDkwODI4OnYy", "diffSide": "RIGHT", "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzBuildTimeConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzoyNTo1M1rOGFZNyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozNDozMlrOGFZixA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMwOTE5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * There are actually two seperate JDBCJobStore classes {@link org.quartz.impl.jdbcjobstore.JobStoreCMT}\n          \n          \n            \n                 * There are actually two separate JDBCJobStore classes {@link org.quartz.impl.jdbcjobstore.JobStoreCMT}", "url": "https://github.com/quarkusio/quarkus/pull/8566#discussion_r408309193", "createdAt": "2020-04-14T17:25:53Z", "author": {"login": "gsmet"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzBuildTimeConfig.java", "diffHunk": "@@ -38,4 +42,29 @@\n      */\n     @ConfigItem(name = \"datasource\")\n     public Optional<String> dataSourceName;\n+\n+    /**\n+     * The jdbc store class to use when the `db` store type is set.\n+     * <p>\n+     * There are actually two seperate JDBCJobStore classes {@link org.quartz.impl.jdbcjobstore.JobStoreCMT}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4d67b360d5883a13da294e1f995079e00d91ab7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxNDU2NA==", "bodyText": "Good catch.", "url": "https://github.com/quarkusio/quarkus/pull/8566#discussion_r408314564", "createdAt": "2020-04-14T17:34:32Z", "author": {"login": "machi1990"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzBuildTimeConfig.java", "diffHunk": "@@ -38,4 +42,29 @@\n      */\n     @ConfigItem(name = \"datasource\")\n     public Optional<String> dataSourceName;\n+\n+    /**\n+     * The jdbc store class to use when the `db` store type is set.\n+     * <p>\n+     * There are actually two seperate JDBCJobStore classes {@link org.quartz.impl.jdbcjobstore.JobStoreCMT}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMwOTE5Mw=="}, "originalCommit": {"oid": "b4d67b360d5883a13da294e1f995079e00d91ab7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDkxMDQ3OnYy", "diffSide": "RIGHT", "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzBuildTimeConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzoyNjoyN1rOGFZPKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzoyNjoyN1rOGFZPKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMwOTU0NQ==", "bodyText": "You can remove that, the config doc generation will do that for you.", "url": "https://github.com/quarkusio/quarkus/pull/8566#discussion_r408309545", "createdAt": "2020-04-14T17:26:27Z", "author": {"login": "gsmet"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzBuildTimeConfig.java", "diffHunk": "@@ -38,4 +42,29 @@\n      */\n     @ConfigItem(name = \"datasource\")\n     public Optional<String> dataSourceName;\n+\n+    /**\n+     * The jdbc store class to use when the `db` store type is set.\n+     * <p>\n+     * There are actually two seperate JDBCJobStore classes {@link org.quartz.impl.jdbcjobstore.JobStoreCMT}\n+     * and {@link org.quartz.impl.jdbcjobstore.JobStoreTX} that you can select between, depending on the transactional\n+     * behaviour you need.\n+     * <p>\n+     * The {@link org.quartz.impl.jdbcjobstore.JobStoreCMT} is meant to be used in an application-server\n+     * environment that provides container-managed-transactions. No commit / rollback will be handled by this class.\n+     * <p>\n+     * The {@link org.quartz.impl.jdbcjobstore.JobStoreTX} manages all transactions for you by handling commit and rollback.\n+     * <p>\n+     * If not specified, defaults to using {@link org.quartz.impl.jdbcjobstore.JobStoreCMT}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4d67b360d5883a13da294e1f995079e00d91ab7"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDkzMDk0OnYy", "diffSide": "RIGHT", "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzBuildTimeConfig.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozMTo0M1rOGFZb_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDozNDoyN1rOGFzvKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxMjgzMQ==", "bodyText": "I wonder if it should be more generic and not tied to jdbc. I could envision some customization even if not jdbc.", "url": "https://github.com/quarkusio/quarkus/pull/8566#discussion_r408312831", "createdAt": "2020-04-14T17:31:43Z", "author": {"login": "gsmet"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzBuildTimeConfig.java", "diffHunk": "@@ -38,4 +42,29 @@\n      */\n     @ConfigItem(name = \"datasource\")\n     public Optional<String> dataSourceName;\n+\n+    /**\n+     * The jdbc store class to use when the `db` store type is set.\n+     * <p>\n+     * There are actually two seperate JDBCJobStore classes {@link org.quartz.impl.jdbcjobstore.JobStoreCMT}\n+     * and {@link org.quartz.impl.jdbcjobstore.JobStoreTX} that you can select between, depending on the transactional\n+     * behaviour you need.\n+     * <p>\n+     * The {@link org.quartz.impl.jdbcjobstore.JobStoreCMT} is meant to be used in an application-server\n+     * environment that provides container-managed-transactions. No commit / rollback will be handled by this class.\n+     * <p>\n+     * The {@link org.quartz.impl.jdbcjobstore.JobStoreTX} manages all transactions for you by handling commit and rollback.\n+     * <p>\n+     * If not specified, defaults to using {@link org.quartz.impl.jdbcjobstore.JobStoreCMT}.\n+     */\n+    @ConfigItem(defaultValue = \"org.quartz.impl.jdbcjobstore.JobStoreCMT\")\n+    public Optional<String> jdbcStoreClass;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4d67b360d5883a13da294e1f995079e00d91ab7"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxNzgxNQ==", "bodyText": "Since we have only two possible classes I was thinking of an enum:\nenum TransactionStrategy {\n  MANAGED, // this will be JobStoreTX\n  UNMANAGED;  // this will be JobStoreCMT\n}\n\nThe we could have a config property named like quarkus.quartz.transaction-strategy, I was just not sure if it is the good way to go. Are you thinking of something like that or along those lines?", "url": "https://github.com/quarkusio/quarkus/pull/8566#discussion_r408317815", "createdAt": "2020-04-14T17:39:55Z", "author": {"login": "machi1990"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzBuildTimeConfig.java", "diffHunk": "@@ -38,4 +42,29 @@\n      */\n     @ConfigItem(name = \"datasource\")\n     public Optional<String> dataSourceName;\n+\n+    /**\n+     * The jdbc store class to use when the `db` store type is set.\n+     * <p>\n+     * There are actually two seperate JDBCJobStore classes {@link org.quartz.impl.jdbcjobstore.JobStoreCMT}\n+     * and {@link org.quartz.impl.jdbcjobstore.JobStoreTX} that you can select between, depending on the transactional\n+     * behaviour you need.\n+     * <p>\n+     * The {@link org.quartz.impl.jdbcjobstore.JobStoreCMT} is meant to be used in an application-server\n+     * environment that provides container-managed-transactions. No commit / rollback will be handled by this class.\n+     * <p>\n+     * The {@link org.quartz.impl.jdbcjobstore.JobStoreTX} manages all transactions for you by handling commit and rollback.\n+     * <p>\n+     * If not specified, defaults to using {@link org.quartz.impl.jdbcjobstore.JobStoreCMT}.\n+     */\n+    @ConfigItem(defaultValue = \"org.quartz.impl.jdbcjobstore.JobStoreCMT\")\n+    public Optional<String> jdbcStoreClass;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxMjgzMQ=="}, "originalCommit": {"oid": "b4d67b360d5883a13da294e1f995079e00d91ab7"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4NTQ0NA==", "bodyText": "I'm not sure it makes sense to use generic names here. It's Quartz-specific. On the other hand, it could make sense to use the enum. In fact, it could make sense to change the enum for the QuartzBuildTimeConfig.storeType to RAM, DB, JDBC_TX and JDBC_CMT (where DB is an alias of JDBC_CMT) or something like that.", "url": "https://github.com/quarkusio/quarkus/pull/8566#discussion_r408685444", "createdAt": "2020-04-15T08:54:54Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzBuildTimeConfig.java", "diffHunk": "@@ -38,4 +42,29 @@\n      */\n     @ConfigItem(name = \"datasource\")\n     public Optional<String> dataSourceName;\n+\n+    /**\n+     * The jdbc store class to use when the `db` store type is set.\n+     * <p>\n+     * There are actually two seperate JDBCJobStore classes {@link org.quartz.impl.jdbcjobstore.JobStoreCMT}\n+     * and {@link org.quartz.impl.jdbcjobstore.JobStoreTX} that you can select between, depending on the transactional\n+     * behaviour you need.\n+     * <p>\n+     * The {@link org.quartz.impl.jdbcjobstore.JobStoreCMT} is meant to be used in an application-server\n+     * environment that provides container-managed-transactions. No commit / rollback will be handled by this class.\n+     * <p>\n+     * The {@link org.quartz.impl.jdbcjobstore.JobStoreTX} manages all transactions for you by handling commit and rollback.\n+     * <p>\n+     * If not specified, defaults to using {@link org.quartz.impl.jdbcjobstore.JobStoreCMT}.\n+     */\n+    @ConfigItem(defaultValue = \"org.quartz.impl.jdbcjobstore.JobStoreCMT\")\n+    public Optional<String> jdbcStoreClass;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxMjgzMQ=="}, "originalCommit": {"oid": "b4d67b360d5883a13da294e1f995079e00d91ab7"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0MzcyMQ==", "bodyText": "+1, I like this better.\nLet's go this way and not add another configuration knob.", "url": "https://github.com/quarkusio/quarkus/pull/8566#discussion_r408743721", "createdAt": "2020-04-15T10:34:27Z", "author": {"login": "machi1990"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzBuildTimeConfig.java", "diffHunk": "@@ -38,4 +42,29 @@\n      */\n     @ConfigItem(name = \"datasource\")\n     public Optional<String> dataSourceName;\n+\n+    /**\n+     * The jdbc store class to use when the `db` store type is set.\n+     * <p>\n+     * There are actually two seperate JDBCJobStore classes {@link org.quartz.impl.jdbcjobstore.JobStoreCMT}\n+     * and {@link org.quartz.impl.jdbcjobstore.JobStoreTX} that you can select between, depending on the transactional\n+     * behaviour you need.\n+     * <p>\n+     * The {@link org.quartz.impl.jdbcjobstore.JobStoreCMT} is meant to be used in an application-server\n+     * environment that provides container-managed-transactions. No commit / rollback will be handled by this class.\n+     * <p>\n+     * The {@link org.quartz.impl.jdbcjobstore.JobStoreTX} manages all transactions for you by handling commit and rollback.\n+     * <p>\n+     * If not specified, defaults to using {@link org.quartz.impl.jdbcjobstore.JobStoreCMT}.\n+     */\n+    @ConfigItem(defaultValue = \"org.quartz.impl.jdbcjobstore.JobStoreCMT\")\n+    public Optional<String> jdbcStoreClass;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxMjgzMQ=="}, "originalCommit": {"oid": "b4d67b360d5883a13da294e1f995079e00d91ab7"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzM0OTMwOnYy", "diffSide": "RIGHT", "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTowMjoyNlrOGFwd7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDozMTozOFrOGFzpHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5MDE1Nw==", "bodyText": "I think that this should be an error, or?", "url": "https://github.com/quarkusio/quarkus/pull/8566#discussion_r408690157", "createdAt": "2020-04-15T09:02:26Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -89,6 +98,19 @@ public QuartzScheduler(SchedulerContext context, QuartzSupport quartzSupport, Co\n                 CronDefinition def = CronDefinitionBuilder.instanceDefinitionFor(cronType);\n                 CronParser parser = new CronParser(def);\n \n+                InstanceHandle<UserTransaction> handle = Arc.container().instance(UserTransaction.class);\n+\n+                boolean nonManagedTx = quartzSupport.getBuildTimeConfig().getStoreClass()\n+                        .equals(\"org.quartz.impl.jdbcjobstore.JobStoreCMT\");\n+\n+                if (nonManagedTx) {\n+                    if (handle.isAvailable()) {\n+                        handle.get().begin();\n+                    } else {\n+                        LOGGER.debugf(\"Unable to start transaction for JobStoreCMT job store class. \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17dd1e843af443345ddf110b19a7d02ed1f13704"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0MjE3NA==", "bodyText": "I think we can as well remove this message since, transaction support will be brought transitively by the agroal extension. In build time we have a check that the datasource is properly configured.\nWDYT?", "url": "https://github.com/quarkusio/quarkus/pull/8566#discussion_r408742174", "createdAt": "2020-04-15T10:31:38Z", "author": {"login": "machi1990"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -89,6 +98,19 @@ public QuartzScheduler(SchedulerContext context, QuartzSupport quartzSupport, Co\n                 CronDefinition def = CronDefinitionBuilder.instanceDefinitionFor(cronType);\n                 CronParser parser = new CronParser(def);\n \n+                InstanceHandle<UserTransaction> handle = Arc.container().instance(UserTransaction.class);\n+\n+                boolean nonManagedTx = quartzSupport.getBuildTimeConfig().getStoreClass()\n+                        .equals(\"org.quartz.impl.jdbcjobstore.JobStoreCMT\");\n+\n+                if (nonManagedTx) {\n+                    if (handle.isAvailable()) {\n+                        handle.get().begin();\n+                    } else {\n+                        LOGGER.debugf(\"Unable to start transaction for JobStoreCMT job store class. \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5MDE1Nw=="}, "originalCommit": {"oid": "17dd1e843af443345ddf110b19a7d02ed1f13704"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzM1NTI4OnYy", "diffSide": "RIGHT", "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTowMzo1OFrOGFwhqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTowMzo1OFrOGFwhqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5MTExMg==", "bodyText": "I believe that we should always rollback if something goes wrong, ie. right before throw new IllegalStateException(\"Unable to create Scheduler\", e). Actually, we could change the catch block below to catch Throwable...", "url": "https://github.com/quarkusio/quarkus/pull/8566#discussion_r408691112", "createdAt": "2020-04-15T09:03:58Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -155,7 +177,18 @@ public QuartzScheduler(SchedulerContext context, QuartzSupport quartzSupport, Co\n                                 scheduled);\n                     }\n                 }\n-            } catch (SchedulerException e) {\n+                if (nonManagedTx) {\n+                    if (handle.isAvailable()) {\n+                        try {\n+                            handle.get().commit();\n+                        } catch (HeuristicMixedException | HeuristicRollbackException | RollbackException e) {\n+                            handle.get().rollback();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17dd1e843af443345ddf110b19a7d02ed1f13704"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Njc0MzcwOnYy", "diffSide": "RIGHT", "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjowOTo0OVrOGHLamA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjowOTo0OVrOGHLamA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4MDI0OA==", "bodyText": "InstanceHandle is AutoCloseable so you can just use try-with-catch (although it's not necessary in this case because the UserTransaction is @ApplicationScoped, but better safe than sorry ;-).", "url": "https://github.com/quarkusio/quarkus/pull/8566#discussion_r410180248", "createdAt": "2020-04-17T12:09:49Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -155,8 +165,20 @@ public QuartzScheduler(SchedulerContext context, QuartzSupport quartzSupport, Co\n                                 scheduled);\n                     }\n                 }\n-            } catch (SchedulerException e) {\n+                if (manageTx) {\n+                    handle.get().commit();\n+                }\n+            } catch (Throwable e) {\n+                if (manageTx) {\n+                    try {\n+                        handle.get().rollback();\n+                    } catch (SystemException ex) {\n+                        LOGGER.error(\"Unable to rollback transaction\", ex);\n+                    }\n+                }\n                 throw new IllegalStateException(\"Unable to create Scheduler\", e);\n+            } finally {\n+                handle.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f9ad0da5a2f17c704b4dcdffee8e7ffb576e7d3"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Njc1NTYyOnYy", "diffSide": "RIGHT", "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjoxNDowMFrOGHLiFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjoxNDowMFrOGHLiFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4MjE2Nw==", "bodyText": "I'd rather use the enum constants, i.e. buildTimeConfig.storeType == DB || buildTimeConfig.storeType == JDBC_CMT.", "url": "https://github.com/quarkusio/quarkus/pull/8566#discussion_r410182167", "createdAt": "2020-04-17T12:14:00Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -256,6 +278,10 @@ private Properties getSchedulerConfigurationProperties(QuartzSupport quartzSuppo\n                 props.put(StdSchedulerFactory.PROP_JOB_STORE_PREFIX + \".isClustered\", \"true\");\n                 props.put(StdSchedulerFactory.PROP_JOB_STORE_PREFIX + \".clusterCheckinInterval\", \"20000\"); // 20 seconds\n             }\n+\n+            if (buildTimeConfig.storeType.clazz.equals(JobStoreCMT.class.getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f9ad0da5a2f17c704b4dcdffee8e7ffb576e7d3"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Njc1ODQ1OnYy", "diffSide": "RIGHT", "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/StoreType.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjoxNDo1N1rOGHLjzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMzowMjo0MVrOGHNCyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4MjYwNg==", "bodyText": "I would deprecate this value and add a comment that it's retained for compatibility reasons and will be removed in 1.6 (or just \"in future versions\").", "url": "https://github.com/quarkusio/quarkus/pull/8566#discussion_r410182606", "createdAt": "2020-04-17T12:14:57Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/StoreType.java", "diffHunk": "@@ -1,17 +1,24 @@\n package io.quarkus.quartz.runtime;\n \n-import org.quartz.impl.jdbcjobstore.JobStoreTX;\n-import org.quartz.simpl.RAMJobStore;\n-\n public enum StoreType {\n-    RAM(RAMJobStore.class.getName(), RAMJobStore.class.getSimpleName()),\n-    DB(JobStoreTX.class.getName(), JobStoreTX.class.getSimpleName());\n+    RAM(\"org.quartz.simpl.RAMJobStore\", \"RAMJobStore\"),\n+    DB(\"org.quartz.impl.jdbcjobstore.JobStoreCMT\", \"JobStoreCMT\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f9ad0da5a2f17c704b4dcdffee8e7ffb576e7d3"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4Njg1NA==", "bodyText": "Great, I was not sure how to go about this. Thanks clarifying it. I'll do it and go ahead and upgrade the quickstarts too.", "url": "https://github.com/quarkusio/quarkus/pull/8566#discussion_r410186854", "createdAt": "2020-04-17T12:23:53Z", "author": {"login": "machi1990"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/StoreType.java", "diffHunk": "@@ -1,17 +1,24 @@\n package io.quarkus.quartz.runtime;\n \n-import org.quartz.impl.jdbcjobstore.JobStoreTX;\n-import org.quartz.simpl.RAMJobStore;\n-\n public enum StoreType {\n-    RAM(RAMJobStore.class.getName(), RAMJobStore.class.getSimpleName()),\n-    DB(JobStoreTX.class.getName(), JobStoreTX.class.getSimpleName());\n+    RAM(\"org.quartz.simpl.RAMJobStore\", \"RAMJobStore\"),\n+    DB(\"org.quartz.impl.jdbcjobstore.JobStoreCMT\", \"JobStoreCMT\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4MjYwNg=="}, "originalCommit": {"oid": "2f9ad0da5a2f17c704b4dcdffee8e7ffb576e7d3"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4ODIzNQ==", "bodyText": "Something like this should be OK:\nhttps://github.com/quarkusio/quarkus/blob/1.4/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanDeploymentValidator.java#L25-L36", "url": "https://github.com/quarkusio/quarkus/pull/8566#discussion_r410188235", "createdAt": "2020-04-17T12:26:49Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/StoreType.java", "diffHunk": "@@ -1,17 +1,24 @@\n package io.quarkus.quartz.runtime;\n \n-import org.quartz.impl.jdbcjobstore.JobStoreTX;\n-import org.quartz.simpl.RAMJobStore;\n-\n public enum StoreType {\n-    RAM(RAMJobStore.class.getName(), RAMJobStore.class.getSimpleName()),\n-    DB(JobStoreTX.class.getName(), JobStoreTX.class.getSimpleName());\n+    RAM(\"org.quartz.simpl.RAMJobStore\", \"RAMJobStore\"),\n+    DB(\"org.quartz.impl.jdbcjobstore.JobStoreCMT\", \"JobStoreCMT\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4MjYwNg=="}, "originalCommit": {"oid": "2f9ad0da5a2f17c704b4dcdffee8e7ffb576e7d3"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIwNjkyMw==", "bodyText": "Done, thanks for the pointer.", "url": "https://github.com/quarkusio/quarkus/pull/8566#discussion_r410206923", "createdAt": "2020-04-17T13:02:41Z", "author": {"login": "machi1990"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/StoreType.java", "diffHunk": "@@ -1,17 +1,24 @@\n package io.quarkus.quartz.runtime;\n \n-import org.quartz.impl.jdbcjobstore.JobStoreTX;\n-import org.quartz.simpl.RAMJobStore;\n-\n public enum StoreType {\n-    RAM(RAMJobStore.class.getName(), RAMJobStore.class.getSimpleName()),\n-    DB(JobStoreTX.class.getName(), JobStoreTX.class.getSimpleName());\n+    RAM(\"org.quartz.simpl.RAMJobStore\", \"RAMJobStore\"),\n+    DB(\"org.quartz.impl.jdbcjobstore.JobStoreCMT\", \"JobStoreCMT\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4MjYwNg=="}, "originalCommit": {"oid": "2f9ad0da5a2f17c704b4dcdffee8e7ffb576e7d3"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3498, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}