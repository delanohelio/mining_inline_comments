{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2NjgwNTMx", "number": 7260, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzozMzozNlrODgyb7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzozNjo0MFrODgyfqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzA3MzcyOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/security-openid-connect-multitenancy.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzozMzozNlrOFrLydg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzozMzozNlrOFrLydg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyNjIzMA==", "bodyText": "config.setTenantId(\"tenant-b\") is now required :-)", "url": "https://github.com/quarkusio/quarkus/pull/7260#discussion_r380826230", "createdAt": "2020-02-18T17:33:36Z", "author": {"login": "sberyozkin"}, "path": "docs/src/main/asciidoc/security-openid-connect-multitenancy.adoc", "diffHunk": "@@ -0,0 +1,331 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Supporting Multi-Tenancy in OpenID Connect Applications \n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide demonstrates how your OpenID Connect application can support multi-tenancy so that you can serve multiple tenants from a single application. Tenants can be distinct realms or security domains within the same OpenID Provider or even distinct OpenID Providers.\n+\n+When serving multiple customers from the same application (e.g.: SaaS), each customer is a tenant. By enabling multi-tenancy support to your applications you are allowed to also support distinct authentication policies for each tenant even though if that means authenticating against different OpenID Providers, such as Keycloak and Google.\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+* https://stedolan.github.io/jq/[jq tool]\n+* Docker\n+\n+== Architecture\n+\n+In this example, we build a very simple application which offers a single land page:\n+\n+* `/{tenant}`\n+\n+The land page is served by a JAX-RS Resource and shows information obtained from the OpenID Provider about the authenticated user and the current tenant.\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `security-openid-connect-multi-tenancy` {quickstarts-tree-url}/security-openid-connect-multi-tenancy[directory].\n+\n+== Creating the Maven Project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source, subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=security-openid-connect-multi-tenancy \\\n+    -Dextensions=\"oidc, resteasy-jsonb\"\n+cd security-openid-connect-multi-tenancy\n+----\n+\n+== Writing the application\n+\n+Let's start by implementing the `/{tenant}` endpoint. As you can see from the source code below it is just a regular JAX-RS resource:\n+\n+[source,java]\n+----\n+package org.acme.quickstart.oidc;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+\n+import org.eclipse.microprofile.jwt.JsonWebToken;\n+\n+import io.quarkus.oidc.IdToken;\n+\n+@Path(\"/{tenant}\")\n+public class HomeResource {\n+\n+    /**\n+     * Injection point for the ID Token issued by the OpenID Connect Provider \n+     */\n+    @Inject\n+    @IdToken\n+    JsonWebToken idToken;\n+\n+    /**\n+     * Returns the tokens available to the application. This endpoint exists only for demonstration purposes, you should not\n+     * expose these tokens in a real application.\n+     * \n+     * @return the landing page HTML\n+     */\n+    @GET\n+    public String getHome() {\n+        StringBuilder response = new StringBuilder().append(\"<html>\").append(\"<body>\");\n+        \n+        response.append(\"<h2>Welcome, \").append(this.idToken.getClaim(\"email\").toString()).append(\"</h2>\\n\");\n+        response.append(\"<h3>You are accessing the application within tenant <b>\").append(idToken.getIssuer()).append(\" boundaries</b></h3>\");\n+        \n+        return response.append(\"</body>\").append(\"</html>\").toString();\n+    }\n+}\n+\n+----\n+\n+In order to resolve the tenant from incoming requests and map it to a specific `quarkus-oidc` configuration, you need to create an implementation for the `io.quarkus.oidc.TenantResolver` interface.\n+\n+[source,java]\n+----\n+package org.acme.quickstart.oidc;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import io.quarkus.oidc.TenantResolver;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@ApplicationScoped\n+public class CustomTenantResolver implements TenantResolver {\n+\n+    @Override \n+    public String resolve(RoutingContext context) {\n+        String path = context.request().path();\n+        String[] parts = path.split(\"/\");\n+\n+        if (parts.length == 0) {\n+            // resolve to default tenant config\n+            return null;\n+        }\n+\n+        return parts[1];\n+    }\n+}\n+----\n+\n+From the implementation above, tenants are resolved from the request path so that in case no tenant could be inferred, `null` is returned to indicate that the default configuration should be used.\n+\n+== Configuring the application\n+\n+[source,properties]\n+----\n+# Default Tenant Configuration\n+quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus\n+quarkus.oidc.client-id=multi-tenant-client\n+quarkus.oidc.application-type=web-app\n+\n+# Tenant A Configuration\n+quarkus.oidc.tenant-a.auth-server-url=http://localhost:8180/auth/realms/tenant-a\n+quarkus.oidc.tenant-a.client-id=multi-tenant-client\n+quarkus.oidc.tenant-a.application-type=web-app\n+\n+# HTTP Security Configuration\n+quarkus.http.auth.permission.authenticated.paths=/*\n+quarkus.http.auth.permission.authenticated.policy=authenticated\n+----\n+\n+The first configuration is the configuration that should be used when the tenant can not be inferred from the request. This configuration is using a Keycloak instance to authenticate users.\n+\n+The second configuration is the configuration that will be used when an incoming request is mapped to the tenant `tenant-a`.\n+\n+Note that both configurations map to the same Keycloak server instance while using distinct `realms`.\n+\n+You can define multiple tenants in your configuration file, just make sure they have a unique alias so that you can map them properly when resolving a tenant from your `TenantResolver` implementation.\n+\n+=== Google OpenID Provider Configuration\n+\n+In order to set-up the `tenant-a` configuration to use Google OpenID Provider, you need to create a project as described https://developers.google.com/identity/protocols/OpenIDConnect[here].\n+\n+Once you create the project and have your project's `client_id` and `client_secret`, you can try to configure a tenant as follows:\n+\n+[source, properties]\n+---\n+# Tenant configuration using Google OpenID Provider\n+quarkus.oidc.tenant-a.auth-server-url=https://accounts.google.com\n+quarkus.oidc.tenant-a.application-type=web-app\n+quarkus.oidc.tenant-a.client-id={GOOGLE_CLIENT_ID}\n+quarkus.oidc.tenant-a.credentials.secret={GOOGLE_CLIENT_SECRET}\n+quarkus.oidc.tenant-a.token.issuer=https://accounts.google.com\n+quarkus.oidc.tenant-a.authentication.scopes=email,profile,openid\n+---\n+\n+== Starting and Configuring the Keycloak Server\n+\n+To start a Keycloak Server you can use Docker and just run the following command:\n+\n+[source,bash,subs=attributes+]\n+----\n+docker run --name keycloak -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin -p 8180:8080 {keycloak-docker-image}\n+----\n+\n+You should be able to access your Keycloak Server at http://localhost:8180/auth[localhost:8180/auth].\n+\n+Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`.\n+\n+Now, follow the steps below to import the realms for the two tenants:\n+\n+* Import the {quickstarts-tree-url}/security-openid-connect-multi-tenancy/config/default-tenant-realm.json[default-tenant-realm.json] to create the default realm\n+* Import the {quickstarts-tree-url}/security-openid-connect-multi-tenancy/config/tenant-a-realm.json[tenant-a-realm.json] to create the realm for the tenant `tenant-a`.\n+\n+For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm].\n+\n+== Running and Using the Application\n+\n+=== Running in Developer Mode\n+\n+To run the microservice in dev mode, use `./mvnw clean compile quarkus:dev`.\n+\n+=== Running in JVM Mode\n+\n+When you're done playing with \"dev-mode\" you can run it as a standard Java application.\n+\n+First compile it:\n+\n+[source,bash]\n+----\n+./mvnw package\n+----\n+\n+Then run it:\n+\n+[source,bash]\n+----\n+java -jar ./target/security-openid-connect-multi-tenancy-quickstart-runner.jar\n+----\n+\n+=== Running in Native Mode\n+\n+This same demo can be compiled into native code: no modifications required.\n+\n+This implies that you no longer need to install a JVM on your\n+production environment, as the runtime technology is included in\n+the produced binary, and optimized to run with minimal resource overhead.\n+\n+Compilation will take a bit longer, so this step is disabled by default;\n+let's build again by enabling the `native` profile:\n+\n+[source,bash]\n+----\n+./mvnw package -Pnative\n+----\n+\n+After getting a cup of coffee, you'll be able to run this binary directly:\n+\n+[source,bash]\n+----\n+./target/security-openid-connect-web-authentication-quickstart-runner\n+----\n+\n+== Testing the Application\n+\n+To test the application, you should open your browser and access the following URL:\n+\n+* http://localhost:8080/default[http://localhost:8080/default]\n+\n+If everything is working as expected, you should be redirected to the Keycloak server to authenticate. Note that the requested path\n+defines a `default` tenant which we don't have mapped in the configuration file. In this case, the default configuration will be used.\n+\n+In order to authenticate to the application you should type the following credentials when at the Keycloak login page:\n+\n+* Username: *alice*\n+* Password: *alice*\n+\n+After clicking the `Login` button you should be redirected back to the application.\n+\n+If you try now to access the application at the following URL:\n+\n+* http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]\n+\n+You should be redirected again to the login page at Keycloak. However, now you are going to authenticate using a different `realm`.\n+\n+In both cases, if the user is successfully authenticated, the landing page will show the user's name and e-mail. Even though\n+user `alice` exists in both tenants, for the application they are distinct users belonging to different realms/tenants.\n+\n+== Programmatically Resolving Tenants Configuration\n+\n+If you need a more dynamic configuration for the different tenants you want to support and don't want to end up with multiple\n+entries in your configuration file, you can use the `io.quarkus.oidc.TenantConfigResolver`.\n+\n+This interface allows you to dynamically create tenant configurations at runtime:\n+\n+[source,java]\n+----\n+package io.quarkus.it.keycloak;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import io.quarkus.oidc.TenantConfigResolver;\n+import io.quarkus.oidc.runtime.OidcTenantConfig;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@ApplicationScoped\n+public class CustomTenantConfigResolver implements TenantConfigResolver {\n+\n+    @Override\n+    public OidcTenantConfig resolve(RoutingContext context) {\n+        String path = context.request().path();\n+        String[] parts = path.split(\"/\");\n+\n+        if (parts.length == 0) {\n+            // resolve to default tenant config\n+            return null;\n+        }\n+\n+        if (\"tenant-b\".equals(parts[1])) {\n+            OidcTenantConfig config = new OidcTenantConfig();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfac14431b8fd9b506e4b35637e9dfa8b2c1aadf"}, "originalPosition": 301}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzA4MzMxOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/security-openid-connect-multitenancy.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzozNjo0MFrOFrL4ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzozNjo0MFrOFrL4ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyNzgxMQ==", "bodyText": "Minor comment here, it can be simpler to copy and paste it into application.properties if the tenant id does not clash with the existing tenant-a there, may be just google or tenant-c, etc", "url": "https://github.com/quarkusio/quarkus/pull/7260#discussion_r380827811", "createdAt": "2020-02-18T17:36:40Z", "author": {"login": "sberyozkin"}, "path": "docs/src/main/asciidoc/security-openid-connect-multitenancy.adoc", "diffHunk": "@@ -0,0 +1,331 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Supporting Multi-Tenancy in OpenID Connect Applications \n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide demonstrates how your OpenID Connect application can support multi-tenancy so that you can serve multiple tenants from a single application. Tenants can be distinct realms or security domains within the same OpenID Provider or even distinct OpenID Providers.\n+\n+When serving multiple customers from the same application (e.g.: SaaS), each customer is a tenant. By enabling multi-tenancy support to your applications you are allowed to also support distinct authentication policies for each tenant even though if that means authenticating against different OpenID Providers, such as Keycloak and Google.\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+* https://stedolan.github.io/jq/[jq tool]\n+* Docker\n+\n+== Architecture\n+\n+In this example, we build a very simple application which offers a single land page:\n+\n+* `/{tenant}`\n+\n+The land page is served by a JAX-RS Resource and shows information obtained from the OpenID Provider about the authenticated user and the current tenant.\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `security-openid-connect-multi-tenancy` {quickstarts-tree-url}/security-openid-connect-multi-tenancy[directory].\n+\n+== Creating the Maven Project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source, subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=security-openid-connect-multi-tenancy \\\n+    -Dextensions=\"oidc, resteasy-jsonb\"\n+cd security-openid-connect-multi-tenancy\n+----\n+\n+== Writing the application\n+\n+Let's start by implementing the `/{tenant}` endpoint. As you can see from the source code below it is just a regular JAX-RS resource:\n+\n+[source,java]\n+----\n+package org.acme.quickstart.oidc;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+\n+import org.eclipse.microprofile.jwt.JsonWebToken;\n+\n+import io.quarkus.oidc.IdToken;\n+\n+@Path(\"/{tenant}\")\n+public class HomeResource {\n+\n+    /**\n+     * Injection point for the ID Token issued by the OpenID Connect Provider \n+     */\n+    @Inject\n+    @IdToken\n+    JsonWebToken idToken;\n+\n+    /**\n+     * Returns the tokens available to the application. This endpoint exists only for demonstration purposes, you should not\n+     * expose these tokens in a real application.\n+     * \n+     * @return the landing page HTML\n+     */\n+    @GET\n+    public String getHome() {\n+        StringBuilder response = new StringBuilder().append(\"<html>\").append(\"<body>\");\n+        \n+        response.append(\"<h2>Welcome, \").append(this.idToken.getClaim(\"email\").toString()).append(\"</h2>\\n\");\n+        response.append(\"<h3>You are accessing the application within tenant <b>\").append(idToken.getIssuer()).append(\" boundaries</b></h3>\");\n+        \n+        return response.append(\"</body>\").append(\"</html>\").toString();\n+    }\n+}\n+\n+----\n+\n+In order to resolve the tenant from incoming requests and map it to a specific `quarkus-oidc` configuration, you need to create an implementation for the `io.quarkus.oidc.TenantResolver` interface.\n+\n+[source,java]\n+----\n+package org.acme.quickstart.oidc;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import io.quarkus.oidc.TenantResolver;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@ApplicationScoped\n+public class CustomTenantResolver implements TenantResolver {\n+\n+    @Override \n+    public String resolve(RoutingContext context) {\n+        String path = context.request().path();\n+        String[] parts = path.split(\"/\");\n+\n+        if (parts.length == 0) {\n+            // resolve to default tenant config\n+            return null;\n+        }\n+\n+        return parts[1];\n+    }\n+}\n+----\n+\n+From the implementation above, tenants are resolved from the request path so that in case no tenant could be inferred, `null` is returned to indicate that the default configuration should be used.\n+\n+== Configuring the application\n+\n+[source,properties]\n+----\n+# Default Tenant Configuration\n+quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus\n+quarkus.oidc.client-id=multi-tenant-client\n+quarkus.oidc.application-type=web-app\n+\n+# Tenant A Configuration\n+quarkus.oidc.tenant-a.auth-server-url=http://localhost:8180/auth/realms/tenant-a\n+quarkus.oidc.tenant-a.client-id=multi-tenant-client\n+quarkus.oidc.tenant-a.application-type=web-app\n+\n+# HTTP Security Configuration\n+quarkus.http.auth.permission.authenticated.paths=/*\n+quarkus.http.auth.permission.authenticated.policy=authenticated\n+----\n+\n+The first configuration is the configuration that should be used when the tenant can not be inferred from the request. This configuration is using a Keycloak instance to authenticate users.\n+\n+The second configuration is the configuration that will be used when an incoming request is mapped to the tenant `tenant-a`.\n+\n+Note that both configurations map to the same Keycloak server instance while using distinct `realms`.\n+\n+You can define multiple tenants in your configuration file, just make sure they have a unique alias so that you can map them properly when resolving a tenant from your `TenantResolver` implementation.\n+\n+=== Google OpenID Provider Configuration\n+\n+In order to set-up the `tenant-a` configuration to use Google OpenID Provider, you need to create a project as described https://developers.google.com/identity/protocols/OpenIDConnect[here].\n+\n+Once you create the project and have your project's `client_id` and `client_secret`, you can try to configure a tenant as follows:\n+\n+[source, properties]\n+---\n+# Tenant configuration using Google OpenID Provider\n+quarkus.oidc.tenant-a.auth-server-url=https://accounts.google.com", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfac14431b8fd9b506e4b35637e9dfa8b2c1aadf"}, "originalPosition": 170}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 84, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}