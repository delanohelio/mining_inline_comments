{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1MjQ1OTM1", "number": 9180, "title": "Create picocli extension", "bodyText": "Hi,\nThis extension will add support for Picocli Command Mode.", "createdAt": "2020-05-08T13:51:32Z", "url": "https://github.com/quarkusio/quarkus/pull/9180", "merged": true, "mergeCommit": {"oid": "090a8c0e51d52e2070c21e0274c5b3c8acac88b3"}, "closed": true, "closedAt": "2020-05-18T09:13:41Z", "author": {"login": "mgorniew"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcfT412gFqTQwODMyNzA4MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcicPH1AFqTQxMzQxMDkwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4MzI3MDgx", "url": "https://github.com/quarkusio/quarkus/pull/9180#pullrequestreview-408327081", "createdAt": "2020-05-08T15:37:58Z", "commit": {"oid": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNTozNzo1OFrOGSp6Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNTo0NzoxNFrOGSqNkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIxNDIxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            IMPORTANT: If you are not familiar with the Quarkus Command Mode, consider reading the link:command-mode-reference[Command Mode Applications] first.\n          \n          \n            \n            IMPORTANT: If you are not familiar with the Quarkus Command Mode, consider reading the link:command-mode-reference[Command Mode reference guide] first.", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r422214210", "createdAt": "2020-05-08T15:37:58Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/picocli.adoc", "diffHunk": "@@ -0,0 +1,178 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Command Mode with Picocli\n+:extension-status: experimental\n+\n+include::./attributes.adoc[]\n+\n+https://picocli.info/[Picocli] is an open source tool for creating rich command line applications.\n+\n+Quarkus provides support for using Picocli. This guide contains examples of `picocli` extension usage.\n+\n+include::./status-include.adoc[]\n+\n+IMPORTANT: If you are not familiar with the Quarkus Command Mode, consider reading the link:command-mode-reference[Command Mode Applications] first.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIxNDY0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <2> All classes annotated with `picocli.CommandLine.Command` are register as beans in CDI.\n          \n          \n            \n            <2> All classes annotated with `picocli.CommandLine.Command` are registered as CDI beans.", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r422214649", "createdAt": "2020-05-08T15:38:45Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/picocli.adoc", "diffHunk": "@@ -0,0 +1,178 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Command Mode with Picocli\n+:extension-status: experimental\n+\n+include::./attributes.adoc[]\n+\n+https://picocli.info/[Picocli] is an open source tool for creating rich command line applications.\n+\n+Quarkus provides support for using Picocli. This guide contains examples of `picocli` extension usage.\n+\n+include::./status-include.adoc[]\n+\n+IMPORTANT: If you are not familiar with the Quarkus Command Mode, consider reading the link:command-mode-reference[Command Mode Applications] first.\n+\n+== Configuration\n+\n+Once you have your Quarkus project configured you can add the `picocli` extension\n+to your project by running the following command in your project base directory.\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"picocli\"\n+----\n+\n+This will add the following to your pom.xml:\n+\n+[source,xml]\n+----\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-picocli</artifactId>\n+    </dependency>\n+----\n+\n+== Simple Picocli Application with one Command\n+\n+Simple PicocliApplication with only one Command can be created as follows:\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import picocli.CommandLine;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+@CommandLine.Command // <1>\n+public class HelloCommand implements Runnable {\n+\n+    @CommandLine.Option(names = {\"-n\", \"--name\"}, description = \"Who will we greet?\", defaultValue = \"World\")\n+    String name;\n+\n+    private final GreetingService greetingService;\n+\n+    @Inject // <2>\n+    public HelloCommand(GreetingService greetingService) {\n+        this.greetingService = greetingService;\n+    }\n+\n+    @Override\n+    public void run() {\n+        greetingService.sayHello(name);\n+    }\n+}\n+\n+@Dependent\n+class GreetingService {\n+    void sayHello(String name) {\n+        System.out.println(\"Hello \" + name + \"!\");\n+    }\n+}\n+----\n+<1> If there is only one class annotated with `picocli.CommandLine.Command` it will be used as entry point to Picocli CommandLine.\n+<2> All classes annotated with `picocli.CommandLine.Command` are register as beans in CDI.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIxNDg3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When multiple classes has `picocli.CommandLine.Command` annotation, then one of them need to be also annotated with `io.quarkus.picocli.runtime.annotations.TopCommand`.\n          \n          \n            \n            When multiple classes have the `picocli.CommandLine.Command` annotation, then one of them needs to be also annotated with `io.quarkus.picocli.runtime.annotations.TopCommand`.", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r422214870", "createdAt": "2020-05-08T15:39:08Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/picocli.adoc", "diffHunk": "@@ -0,0 +1,178 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Command Mode with Picocli\n+:extension-status: experimental\n+\n+include::./attributes.adoc[]\n+\n+https://picocli.info/[Picocli] is an open source tool for creating rich command line applications.\n+\n+Quarkus provides support for using Picocli. This guide contains examples of `picocli` extension usage.\n+\n+include::./status-include.adoc[]\n+\n+IMPORTANT: If you are not familiar with the Quarkus Command Mode, consider reading the link:command-mode-reference[Command Mode Applications] first.\n+\n+== Configuration\n+\n+Once you have your Quarkus project configured you can add the `picocli` extension\n+to your project by running the following command in your project base directory.\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"picocli\"\n+----\n+\n+This will add the following to your pom.xml:\n+\n+[source,xml]\n+----\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-picocli</artifactId>\n+    </dependency>\n+----\n+\n+== Simple Picocli Application with one Command\n+\n+Simple PicocliApplication with only one Command can be created as follows:\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import picocli.CommandLine;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+@CommandLine.Command // <1>\n+public class HelloCommand implements Runnable {\n+\n+    @CommandLine.Option(names = {\"-n\", \"--name\"}, description = \"Who will we greet?\", defaultValue = \"World\")\n+    String name;\n+\n+    private final GreetingService greetingService;\n+\n+    @Inject // <2>\n+    public HelloCommand(GreetingService greetingService) {\n+        this.greetingService = greetingService;\n+    }\n+\n+    @Override\n+    public void run() {\n+        greetingService.sayHello(name);\n+    }\n+}\n+\n+@Dependent\n+class GreetingService {\n+    void sayHello(String name) {\n+        System.out.println(\"Hello \" + name + \"!\");\n+    }\n+}\n+----\n+<1> If there is only one class annotated with `picocli.CommandLine.Command` it will be used as entry point to Picocli CommandLine.\n+<2> All classes annotated with `picocli.CommandLine.Command` are register as beans in CDI.\n+\n+== Picocli Application with multiple Commands\n+\n+When multiple classes has `picocli.CommandLine.Command` annotation, then one of them need to be also annotated with `io.quarkus.picocli.runtime.annotations.TopCommand`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIxNDk4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This can be overwritten with `quarkus.picocli.top-command` property.\n          \n          \n            \n            This can be overwritten with the `quarkus.picocli.top-command` property.", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r422214981", "createdAt": "2020-05-08T15:39:19Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/picocli.adoc", "diffHunk": "@@ -0,0 +1,178 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Command Mode with Picocli\n+:extension-status: experimental\n+\n+include::./attributes.adoc[]\n+\n+https://picocli.info/[Picocli] is an open source tool for creating rich command line applications.\n+\n+Quarkus provides support for using Picocli. This guide contains examples of `picocli` extension usage.\n+\n+include::./status-include.adoc[]\n+\n+IMPORTANT: If you are not familiar with the Quarkus Command Mode, consider reading the link:command-mode-reference[Command Mode Applications] first.\n+\n+== Configuration\n+\n+Once you have your Quarkus project configured you can add the `picocli` extension\n+to your project by running the following command in your project base directory.\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"picocli\"\n+----\n+\n+This will add the following to your pom.xml:\n+\n+[source,xml]\n+----\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-picocli</artifactId>\n+    </dependency>\n+----\n+\n+== Simple Picocli Application with one Command\n+\n+Simple PicocliApplication with only one Command can be created as follows:\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import picocli.CommandLine;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+@CommandLine.Command // <1>\n+public class HelloCommand implements Runnable {\n+\n+    @CommandLine.Option(names = {\"-n\", \"--name\"}, description = \"Who will we greet?\", defaultValue = \"World\")\n+    String name;\n+\n+    private final GreetingService greetingService;\n+\n+    @Inject // <2>\n+    public HelloCommand(GreetingService greetingService) {\n+        this.greetingService = greetingService;\n+    }\n+\n+    @Override\n+    public void run() {\n+        greetingService.sayHello(name);\n+    }\n+}\n+\n+@Dependent\n+class GreetingService {\n+    void sayHello(String name) {\n+        System.out.println(\"Hello \" + name + \"!\");\n+    }\n+}\n+----\n+<1> If there is only one class annotated with `picocli.CommandLine.Command` it will be used as entry point to Picocli CommandLine.\n+<2> All classes annotated with `picocli.CommandLine.Command` are register as beans in CDI.\n+\n+== Picocli Application with multiple Commands\n+\n+When multiple classes has `picocli.CommandLine.Command` annotation, then one of them need to be also annotated with `io.quarkus.picocli.runtime.annotations.TopCommand`.\n+This can be overwritten with `quarkus.picocli.top-command` property.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIxNTIzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can customize CommandLine classes used by `picocli` extension by producing your own bean instance:\n          \n          \n            \n            You can customize CommandLine classes used by the `picocli` extension by producing your own bean instance:", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r422215232", "createdAt": "2020-05-08T15:39:45Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/picocli.adoc", "diffHunk": "@@ -0,0 +1,178 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Command Mode with Picocli\n+:extension-status: experimental\n+\n+include::./attributes.adoc[]\n+\n+https://picocli.info/[Picocli] is an open source tool for creating rich command line applications.\n+\n+Quarkus provides support for using Picocli. This guide contains examples of `picocli` extension usage.\n+\n+include::./status-include.adoc[]\n+\n+IMPORTANT: If you are not familiar with the Quarkus Command Mode, consider reading the link:command-mode-reference[Command Mode Applications] first.\n+\n+== Configuration\n+\n+Once you have your Quarkus project configured you can add the `picocli` extension\n+to your project by running the following command in your project base directory.\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"picocli\"\n+----\n+\n+This will add the following to your pom.xml:\n+\n+[source,xml]\n+----\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-picocli</artifactId>\n+    </dependency>\n+----\n+\n+== Simple Picocli Application with one Command\n+\n+Simple PicocliApplication with only one Command can be created as follows:\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import picocli.CommandLine;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+@CommandLine.Command // <1>\n+public class HelloCommand implements Runnable {\n+\n+    @CommandLine.Option(names = {\"-n\", \"--name\"}, description = \"Who will we greet?\", defaultValue = \"World\")\n+    String name;\n+\n+    private final GreetingService greetingService;\n+\n+    @Inject // <2>\n+    public HelloCommand(GreetingService greetingService) {\n+        this.greetingService = greetingService;\n+    }\n+\n+    @Override\n+    public void run() {\n+        greetingService.sayHello(name);\n+    }\n+}\n+\n+@Dependent\n+class GreetingService {\n+    void sayHello(String name) {\n+        System.out.println(\"Hello \" + name + \"!\");\n+    }\n+}\n+----\n+<1> If there is only one class annotated with `picocli.CommandLine.Command` it will be used as entry point to Picocli CommandLine.\n+<2> All classes annotated with `picocli.CommandLine.Command` are register as beans in CDI.\n+\n+== Picocli Application with multiple Commands\n+\n+When multiple classes has `picocli.CommandLine.Command` annotation, then one of them need to be also annotated with `io.quarkus.picocli.runtime.annotations.TopCommand`.\n+This can be overwritten with `quarkus.picocli.top-command` property.\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import io.quarkus.picocli.runtime.annotations.TopCommand;\n+import picocli.CommandLine;\n+\n+@TopCommand\n+@CommandLine.Command(mixinStandardHelpOptions = true, subcommands = {HelloCommand.class, GoodByeCommand.class})\n+public class EntryCommand {\n+}\n+\n+@CommandLine.Command(name = \"hello\", description = \"Greet World!\")\n+class HelloCommand implements Runnable {\n+\n+    @Override\n+    public void run() {\n+        System.out.println(\"Hello World!\");\n+    }\n+}\n+\n+@CommandLine.Command(name = \"goodbye\", description = \"Say goodbye to World!\")\n+class GoodByeCommand implements Runnable {\n+\n+    @Override\n+    public void run() {\n+        System.out.println(\"Goodbye World!\");\n+    }\n+}\n+----\n+\n+== Customizing Picocli CommandLine instance\n+\n+You can customize CommandLine classes used by `picocli` extension by producing your own bean instance:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIxNTQ4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Picocli tool provides annotation processor which will generate a configuration for GraalVM Native images.\n          \n          \n            \n            The Picocli tool provides an annotation processor which will generate a configuration for GraalVM Native images.", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r422215489", "createdAt": "2020-05-08T15:40:14Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/picocli.adoc", "diffHunk": "@@ -0,0 +1,178 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Command Mode with Picocli\n+:extension-status: experimental\n+\n+include::./attributes.adoc[]\n+\n+https://picocli.info/[Picocli] is an open source tool for creating rich command line applications.\n+\n+Quarkus provides support for using Picocli. This guide contains examples of `picocli` extension usage.\n+\n+include::./status-include.adoc[]\n+\n+IMPORTANT: If you are not familiar with the Quarkus Command Mode, consider reading the link:command-mode-reference[Command Mode Applications] first.\n+\n+== Configuration\n+\n+Once you have your Quarkus project configured you can add the `picocli` extension\n+to your project by running the following command in your project base directory.\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"picocli\"\n+----\n+\n+This will add the following to your pom.xml:\n+\n+[source,xml]\n+----\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-picocli</artifactId>\n+    </dependency>\n+----\n+\n+== Simple Picocli Application with one Command\n+\n+Simple PicocliApplication with only one Command can be created as follows:\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import picocli.CommandLine;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+@CommandLine.Command // <1>\n+public class HelloCommand implements Runnable {\n+\n+    @CommandLine.Option(names = {\"-n\", \"--name\"}, description = \"Who will we greet?\", defaultValue = \"World\")\n+    String name;\n+\n+    private final GreetingService greetingService;\n+\n+    @Inject // <2>\n+    public HelloCommand(GreetingService greetingService) {\n+        this.greetingService = greetingService;\n+    }\n+\n+    @Override\n+    public void run() {\n+        greetingService.sayHello(name);\n+    }\n+}\n+\n+@Dependent\n+class GreetingService {\n+    void sayHello(String name) {\n+        System.out.println(\"Hello \" + name + \"!\");\n+    }\n+}\n+----\n+<1> If there is only one class annotated with `picocli.CommandLine.Command` it will be used as entry point to Picocli CommandLine.\n+<2> All classes annotated with `picocli.CommandLine.Command` are register as beans in CDI.\n+\n+== Picocli Application with multiple Commands\n+\n+When multiple classes has `picocli.CommandLine.Command` annotation, then one of them need to be also annotated with `io.quarkus.picocli.runtime.annotations.TopCommand`.\n+This can be overwritten with `quarkus.picocli.top-command` property.\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import io.quarkus.picocli.runtime.annotations.TopCommand;\n+import picocli.CommandLine;\n+\n+@TopCommand\n+@CommandLine.Command(mixinStandardHelpOptions = true, subcommands = {HelloCommand.class, GoodByeCommand.class})\n+public class EntryCommand {\n+}\n+\n+@CommandLine.Command(name = \"hello\", description = \"Greet World!\")\n+class HelloCommand implements Runnable {\n+\n+    @Override\n+    public void run() {\n+        System.out.println(\"Hello World!\");\n+    }\n+}\n+\n+@CommandLine.Command(name = \"goodbye\", description = \"Say goodbye to World!\")\n+class GoodByeCommand implements Runnable {\n+\n+    @Override\n+    public void run() {\n+        System.out.println(\"Goodbye World!\");\n+    }\n+}\n+----\n+\n+== Customizing Picocli CommandLine instance\n+\n+You can customize CommandLine classes used by `picocli` extension by producing your own bean instance:\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import io.quarkus.picocli.runtime.PicocliCommandLineFactory;\n+import io.quarkus.picocli.runtime.annotations.TopCommand;\n+import picocli.CommandLine;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+\n+@TopCommand\n+@CommandLine.Command\n+public class EntryCommand implements Runnable {\n+    @CommandLine.Spec\n+    CommandLine.Model.CommandSpec spec;\n+\n+    @Override\n+    public void run() {\n+        System.out.println(\"My name is: \" + spec.name());\n+    }\n+}\n+\n+@ApplicationScoped\n+class CustomConfiguration {\n+\n+    @Produces\n+    CommandLine customCommandLine(PicocliCommandLineFactory factory) { // <1>\n+        return factory.create().setCommandName(\"CustomizedName\");\n+    }\n+}\n+----\n+<1> `PicocliCommandLineFactory` will create an instance of CommandLine with `TopCommand` and `CommandLine.IFactory` injected.\n+\n+== Native mode support\n+\n+Picocli tool provides annotation processor which will generate a configuration for GraalVM Native images.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIxNTYzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For gradle you need to add following in `dependencies` section of `build.gradle` file:\n          \n          \n            \n            For Gradle you need to add the following in the `dependencies` section of the `build.gradle` file:", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r422215639", "createdAt": "2020-05-08T15:40:29Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/picocli.adoc", "diffHunk": "@@ -0,0 +1,178 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Command Mode with Picocli\n+:extension-status: experimental\n+\n+include::./attributes.adoc[]\n+\n+https://picocli.info/[Picocli] is an open source tool for creating rich command line applications.\n+\n+Quarkus provides support for using Picocli. This guide contains examples of `picocli` extension usage.\n+\n+include::./status-include.adoc[]\n+\n+IMPORTANT: If you are not familiar with the Quarkus Command Mode, consider reading the link:command-mode-reference[Command Mode Applications] first.\n+\n+== Configuration\n+\n+Once you have your Quarkus project configured you can add the `picocli` extension\n+to your project by running the following command in your project base directory.\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"picocli\"\n+----\n+\n+This will add the following to your pom.xml:\n+\n+[source,xml]\n+----\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-picocli</artifactId>\n+    </dependency>\n+----\n+\n+== Simple Picocli Application with one Command\n+\n+Simple PicocliApplication with only one Command can be created as follows:\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import picocli.CommandLine;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+@CommandLine.Command // <1>\n+public class HelloCommand implements Runnable {\n+\n+    @CommandLine.Option(names = {\"-n\", \"--name\"}, description = \"Who will we greet?\", defaultValue = \"World\")\n+    String name;\n+\n+    private final GreetingService greetingService;\n+\n+    @Inject // <2>\n+    public HelloCommand(GreetingService greetingService) {\n+        this.greetingService = greetingService;\n+    }\n+\n+    @Override\n+    public void run() {\n+        greetingService.sayHello(name);\n+    }\n+}\n+\n+@Dependent\n+class GreetingService {\n+    void sayHello(String name) {\n+        System.out.println(\"Hello \" + name + \"!\");\n+    }\n+}\n+----\n+<1> If there is only one class annotated with `picocli.CommandLine.Command` it will be used as entry point to Picocli CommandLine.\n+<2> All classes annotated with `picocli.CommandLine.Command` are register as beans in CDI.\n+\n+== Picocli Application with multiple Commands\n+\n+When multiple classes has `picocli.CommandLine.Command` annotation, then one of them need to be also annotated with `io.quarkus.picocli.runtime.annotations.TopCommand`.\n+This can be overwritten with `quarkus.picocli.top-command` property.\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import io.quarkus.picocli.runtime.annotations.TopCommand;\n+import picocli.CommandLine;\n+\n+@TopCommand\n+@CommandLine.Command(mixinStandardHelpOptions = true, subcommands = {HelloCommand.class, GoodByeCommand.class})\n+public class EntryCommand {\n+}\n+\n+@CommandLine.Command(name = \"hello\", description = \"Greet World!\")\n+class HelloCommand implements Runnable {\n+\n+    @Override\n+    public void run() {\n+        System.out.println(\"Hello World!\");\n+    }\n+}\n+\n+@CommandLine.Command(name = \"goodbye\", description = \"Say goodbye to World!\")\n+class GoodByeCommand implements Runnable {\n+\n+    @Override\n+    public void run() {\n+        System.out.println(\"Goodbye World!\");\n+    }\n+}\n+----\n+\n+== Customizing Picocli CommandLine instance\n+\n+You can customize CommandLine classes used by `picocli` extension by producing your own bean instance:\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import io.quarkus.picocli.runtime.PicocliCommandLineFactory;\n+import io.quarkus.picocli.runtime.annotations.TopCommand;\n+import picocli.CommandLine;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+\n+@TopCommand\n+@CommandLine.Command\n+public class EntryCommand implements Runnable {\n+    @CommandLine.Spec\n+    CommandLine.Model.CommandSpec spec;\n+\n+    @Override\n+    public void run() {\n+        System.out.println(\"My name is: \" + spec.name());\n+    }\n+}\n+\n+@ApplicationScoped\n+class CustomConfiguration {\n+\n+    @Produces\n+    CommandLine customCommandLine(PicocliCommandLineFactory factory) { // <1>\n+        return factory.create().setCommandName(\"CustomizedName\");\n+    }\n+}\n+----\n+<1> `PicocliCommandLineFactory` will create an instance of CommandLine with `TopCommand` and `CommandLine.IFactory` injected.\n+\n+== Native mode support\n+\n+Picocli tool provides annotation processor which will generate a configuration for GraalVM Native images.\n+To use this annotation processor you need to add following dependency to `pom.xml` file:\n+\n+[source,xml]\n+--\n+<dependency>\n+  <groupId>info.picocli</groupId>\n+  <artifactId>picocli-codegen</artifactId>\n+</dependency>\n+--\n+\n+For gradle you need to add following in `dependencies` section of `build.gradle` file:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIxNTk2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To use this annotation processor you need to add following dependency to `pom.xml` file:\n          \n          \n            \n            To use this annotation processor you need to add the following dependency to the `pom.xml` file:", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r422215962", "createdAt": "2020-05-08T15:41:05Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/picocli.adoc", "diffHunk": "@@ -0,0 +1,178 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Command Mode with Picocli\n+:extension-status: experimental\n+\n+include::./attributes.adoc[]\n+\n+https://picocli.info/[Picocli] is an open source tool for creating rich command line applications.\n+\n+Quarkus provides support for using Picocli. This guide contains examples of `picocli` extension usage.\n+\n+include::./status-include.adoc[]\n+\n+IMPORTANT: If you are not familiar with the Quarkus Command Mode, consider reading the link:command-mode-reference[Command Mode Applications] first.\n+\n+== Configuration\n+\n+Once you have your Quarkus project configured you can add the `picocli` extension\n+to your project by running the following command in your project base directory.\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"picocli\"\n+----\n+\n+This will add the following to your pom.xml:\n+\n+[source,xml]\n+----\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-picocli</artifactId>\n+    </dependency>\n+----\n+\n+== Simple Picocli Application with one Command\n+\n+Simple PicocliApplication with only one Command can be created as follows:\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import picocli.CommandLine;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+@CommandLine.Command // <1>\n+public class HelloCommand implements Runnable {\n+\n+    @CommandLine.Option(names = {\"-n\", \"--name\"}, description = \"Who will we greet?\", defaultValue = \"World\")\n+    String name;\n+\n+    private final GreetingService greetingService;\n+\n+    @Inject // <2>\n+    public HelloCommand(GreetingService greetingService) {\n+        this.greetingService = greetingService;\n+    }\n+\n+    @Override\n+    public void run() {\n+        greetingService.sayHello(name);\n+    }\n+}\n+\n+@Dependent\n+class GreetingService {\n+    void sayHello(String name) {\n+        System.out.println(\"Hello \" + name + \"!\");\n+    }\n+}\n+----\n+<1> If there is only one class annotated with `picocli.CommandLine.Command` it will be used as entry point to Picocli CommandLine.\n+<2> All classes annotated with `picocli.CommandLine.Command` are register as beans in CDI.\n+\n+== Picocli Application with multiple Commands\n+\n+When multiple classes has `picocli.CommandLine.Command` annotation, then one of them need to be also annotated with `io.quarkus.picocli.runtime.annotations.TopCommand`.\n+This can be overwritten with `quarkus.picocli.top-command` property.\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import io.quarkus.picocli.runtime.annotations.TopCommand;\n+import picocli.CommandLine;\n+\n+@TopCommand\n+@CommandLine.Command(mixinStandardHelpOptions = true, subcommands = {HelloCommand.class, GoodByeCommand.class})\n+public class EntryCommand {\n+}\n+\n+@CommandLine.Command(name = \"hello\", description = \"Greet World!\")\n+class HelloCommand implements Runnable {\n+\n+    @Override\n+    public void run() {\n+        System.out.println(\"Hello World!\");\n+    }\n+}\n+\n+@CommandLine.Command(name = \"goodbye\", description = \"Say goodbye to World!\")\n+class GoodByeCommand implements Runnable {\n+\n+    @Override\n+    public void run() {\n+        System.out.println(\"Goodbye World!\");\n+    }\n+}\n+----\n+\n+== Customizing Picocli CommandLine instance\n+\n+You can customize CommandLine classes used by `picocli` extension by producing your own bean instance:\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import io.quarkus.picocli.runtime.PicocliCommandLineFactory;\n+import io.quarkus.picocli.runtime.annotations.TopCommand;\n+import picocli.CommandLine;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+\n+@TopCommand\n+@CommandLine.Command\n+public class EntryCommand implements Runnable {\n+    @CommandLine.Spec\n+    CommandLine.Model.CommandSpec spec;\n+\n+    @Override\n+    public void run() {\n+        System.out.println(\"My name is: \" + spec.name());\n+    }\n+}\n+\n+@ApplicationScoped\n+class CustomConfiguration {\n+\n+    @Produces\n+    CommandLine customCommandLine(PicocliCommandLineFactory factory) { // <1>\n+        return factory.create().setCommandName(\"CustomizedName\");\n+    }\n+}\n+----\n+<1> `PicocliCommandLineFactory` will create an instance of CommandLine with `TopCommand` and `CommandLine.IFactory` injected.\n+\n+== Native mode support\n+\n+Picocli tool provides annotation processor which will generate a configuration for GraalVM Native images.\n+To use this annotation processor you need to add following dependency to `pom.xml` file:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIxNjMzNw==", "bodyText": "Can't we generate this configuration as part of the Quarkus build? I reckon there might be some redundancy but that's the Quarkus way of doing things.", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r422216337", "createdAt": "2020-05-08T15:41:51Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/picocli.adoc", "diffHunk": "@@ -0,0 +1,178 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Command Mode with Picocli\n+:extension-status: experimental\n+\n+include::./attributes.adoc[]\n+\n+https://picocli.info/[Picocli] is an open source tool for creating rich command line applications.\n+\n+Quarkus provides support for using Picocli. This guide contains examples of `picocli` extension usage.\n+\n+include::./status-include.adoc[]\n+\n+IMPORTANT: If you are not familiar with the Quarkus Command Mode, consider reading the link:command-mode-reference[Command Mode Applications] first.\n+\n+== Configuration\n+\n+Once you have your Quarkus project configured you can add the `picocli` extension\n+to your project by running the following command in your project base directory.\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"picocli\"\n+----\n+\n+This will add the following to your pom.xml:\n+\n+[source,xml]\n+----\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-picocli</artifactId>\n+    </dependency>\n+----\n+\n+== Simple Picocli Application with one Command\n+\n+Simple PicocliApplication with only one Command can be created as follows:\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import picocli.CommandLine;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+@CommandLine.Command // <1>\n+public class HelloCommand implements Runnable {\n+\n+    @CommandLine.Option(names = {\"-n\", \"--name\"}, description = \"Who will we greet?\", defaultValue = \"World\")\n+    String name;\n+\n+    private final GreetingService greetingService;\n+\n+    @Inject // <2>\n+    public HelloCommand(GreetingService greetingService) {\n+        this.greetingService = greetingService;\n+    }\n+\n+    @Override\n+    public void run() {\n+        greetingService.sayHello(name);\n+    }\n+}\n+\n+@Dependent\n+class GreetingService {\n+    void sayHello(String name) {\n+        System.out.println(\"Hello \" + name + \"!\");\n+    }\n+}\n+----\n+<1> If there is only one class annotated with `picocli.CommandLine.Command` it will be used as entry point to Picocli CommandLine.\n+<2> All classes annotated with `picocli.CommandLine.Command` are register as beans in CDI.\n+\n+== Picocli Application with multiple Commands\n+\n+When multiple classes has `picocli.CommandLine.Command` annotation, then one of them need to be also annotated with `io.quarkus.picocli.runtime.annotations.TopCommand`.\n+This can be overwritten with `quarkus.picocli.top-command` property.\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import io.quarkus.picocli.runtime.annotations.TopCommand;\n+import picocli.CommandLine;\n+\n+@TopCommand\n+@CommandLine.Command(mixinStandardHelpOptions = true, subcommands = {HelloCommand.class, GoodByeCommand.class})\n+public class EntryCommand {\n+}\n+\n+@CommandLine.Command(name = \"hello\", description = \"Greet World!\")\n+class HelloCommand implements Runnable {\n+\n+    @Override\n+    public void run() {\n+        System.out.println(\"Hello World!\");\n+    }\n+}\n+\n+@CommandLine.Command(name = \"goodbye\", description = \"Say goodbye to World!\")\n+class GoodByeCommand implements Runnable {\n+\n+    @Override\n+    public void run() {\n+        System.out.println(\"Goodbye World!\");\n+    }\n+}\n+----\n+\n+== Customizing Picocli CommandLine instance\n+\n+You can customize CommandLine classes used by `picocli` extension by producing your own bean instance:\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import io.quarkus.picocli.runtime.PicocliCommandLineFactory;\n+import io.quarkus.picocli.runtime.annotations.TopCommand;\n+import picocli.CommandLine;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+\n+@TopCommand\n+@CommandLine.Command\n+public class EntryCommand implements Runnable {\n+    @CommandLine.Spec\n+    CommandLine.Model.CommandSpec spec;\n+\n+    @Override\n+    public void run() {\n+        System.out.println(\"My name is: \" + spec.name());\n+    }\n+}\n+\n+@ApplicationScoped\n+class CustomConfiguration {\n+\n+    @Produces\n+    CommandLine customCommandLine(PicocliCommandLineFactory factory) { // <1>\n+        return factory.create().setCommandName(\"CustomizedName\");\n+    }\n+}\n+----\n+<1> `PicocliCommandLineFactory` will create an instance of CommandLine with `TopCommand` and `CommandLine.IFactory` injected.\n+\n+== Native mode support", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIxNjUxOQ==", "bodyText": "You don't need the version here as it's in the BOM.", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r422216519", "createdAt": "2020-05-08T15:42:13Z", "author": {"login": "gsmet"}, "path": "extensions/picocli/deployment/pom.xml", "diffHunk": "@@ -0,0 +1,53 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-picocli-parent</artifactId>\n+        <version>999-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>quarkus-picocli-deployment</artifactId>\n+    <name>Quarkus - Picocli - Deployment</name>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-core-deployment</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-arc-deployment</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-picocli</artifactId>\n+            <version>${project.version}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIxNjc3Mg==", "bodyText": "Please move that one to the FeatureBuildItem with the other. They are sorted in alphabetical order.", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r422216772", "createdAt": "2020-05-08T15:42:41Z", "author": {"login": "gsmet"}, "path": "extensions/picocli/deployment/src/main/java/io/quarkus/picocli/deployment/PicocliProcessor.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package io.quarkus.picocli.deployment;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.arc.deployment.AnnotationsTransformerBuildItem;\n+import io.quarkus.arc.deployment.BeanDefiningAnnotationBuildItem;\n+import io.quarkus.arc.processor.AnnotationsTransformer;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.ApplicationIndexBuildItem;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.IndexDependencyBuildItem;\n+import io.quarkus.deployment.builditem.QuarkusApplicationClassBuildItem;\n+import io.quarkus.picocli.runtime.PicocliRunner;\n+import io.quarkus.picocli.runtime.annotations.TopCommand;\n+import io.quarkus.runtime.annotations.QuarkusMain;\n+import picocli.CommandLine;\n+\n+class PicocliProcessor {\n+\n+    private static final String FEATURE = \"picocli\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIxNzEwOA==", "bodyText": "Maybe an IllegalStateException would be better?", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r422217108", "createdAt": "2020-05-08T15:43:18Z", "author": {"login": "gsmet"}, "path": "extensions/picocli/deployment/src/main/java/io/quarkus/picocli/deployment/PicocliProcessor.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package io.quarkus.picocli.deployment;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.arc.deployment.AnnotationsTransformerBuildItem;\n+import io.quarkus.arc.deployment.BeanDefiningAnnotationBuildItem;\n+import io.quarkus.arc.processor.AnnotationsTransformer;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.ApplicationIndexBuildItem;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.IndexDependencyBuildItem;\n+import io.quarkus.deployment.builditem.QuarkusApplicationClassBuildItem;\n+import io.quarkus.picocli.runtime.PicocliRunner;\n+import io.quarkus.picocli.runtime.annotations.TopCommand;\n+import io.quarkus.runtime.annotations.QuarkusMain;\n+import picocli.CommandLine;\n+\n+class PicocliProcessor {\n+\n+    private static final String FEATURE = \"picocli\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    BeanDefiningAnnotationBuildItem commandBeanDefiningAnnotation() {\n+        return new BeanDefiningAnnotationBuildItem(DotName.createSimple(CommandLine.Command.class.getName()));\n+    }\n+\n+    @BuildStep\n+    IndexDependencyBuildItem picocliIndexDependency() {\n+        return new IndexDependencyBuildItem(\"info.picocli\", \"picocli\");\n+    }\n+\n+    @BuildStep\n+    void picocliRunner(ApplicationIndexBuildItem applicationIndex,\n+            CombinedIndexBuildItem combinedIndex,\n+            BuildProducer<AdditionalBeanBuildItem> additionalBean,\n+            BuildProducer<QuarkusApplicationClassBuildItem> quarkusApplicationClass,\n+            BuildProducer<AnnotationsTransformerBuildItem> annotationsTransformer) {\n+        IndexView index = combinedIndex.getIndex();\n+        Collection<DotName> topCommands = classesAnnotatedWith(index, TopCommand.class.getName());\n+        if (topCommands.size() > 1) {\n+            throw new RuntimeException(\"Multiple classes annotated with TopCommand: \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIxNzUzMA==", "bodyText": "Maybe Develop command line applications with Picocli would be better. This is the description you have on code.quarkus.io.", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r422217530", "createdAt": "2020-05-08T15:44:02Z", "author": {"login": "gsmet"}, "path": "extensions/picocli/runtime/pom.xml", "diffHunk": "@@ -0,0 +1,64 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-picocli-parent</artifactId>\n+        <version>999-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>quarkus-picocli</artifactId>\n+    <name>Quarkus - Picocli - Runtime</name>\n+    <description>Command line mode with Picocli</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIxNzc5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * This class need to be annotated with {@link picocli.CommandLine.Command}.\n          \n          \n            \n                 * This class needs to be annotated with {@link picocli.CommandLine.Command}.", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r422217794", "createdAt": "2020-05-08T15:44:34Z", "author": {"login": "gsmet"}, "path": "extensions/picocli/runtime/src/main/java/io/quarkus/picocli/runtime/PicocliConfiguration.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.quarkus.picocli.runtime;\n+\n+import java.util.Optional;\n+\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigPhase;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+\n+@ConfigRoot(phase = ConfigPhase.RUN_TIME)\n+public class PicocliConfiguration {\n+    /**\n+     * Name of class which will be used as entry point for Picocli CommandLine instance.\n+     * This class need to be annotated with {@link picocli.CommandLine.Command}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIxOTA3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            --\n          \n          \n            \n            ----", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r422219079", "createdAt": "2020-05-08T15:47:07Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/picocli.adoc", "diffHunk": "@@ -0,0 +1,178 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Command Mode with Picocli\n+:extension-status: experimental\n+\n+include::./attributes.adoc[]\n+\n+https://picocli.info/[Picocli] is an open source tool for creating rich command line applications.\n+\n+Quarkus provides support for using Picocli. This guide contains examples of `picocli` extension usage.\n+\n+include::./status-include.adoc[]\n+\n+IMPORTANT: If you are not familiar with the Quarkus Command Mode, consider reading the link:command-mode-reference[Command Mode Applications] first.\n+\n+== Configuration\n+\n+Once you have your Quarkus project configured you can add the `picocli` extension\n+to your project by running the following command in your project base directory.\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"picocli\"\n+----\n+\n+This will add the following to your pom.xml:\n+\n+[source,xml]\n+----\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-picocli</artifactId>\n+    </dependency>\n+----\n+\n+== Simple Picocli Application with one Command\n+\n+Simple PicocliApplication with only one Command can be created as follows:\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import picocli.CommandLine;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+@CommandLine.Command // <1>\n+public class HelloCommand implements Runnable {\n+\n+    @CommandLine.Option(names = {\"-n\", \"--name\"}, description = \"Who will we greet?\", defaultValue = \"World\")\n+    String name;\n+\n+    private final GreetingService greetingService;\n+\n+    @Inject // <2>\n+    public HelloCommand(GreetingService greetingService) {\n+        this.greetingService = greetingService;\n+    }\n+\n+    @Override\n+    public void run() {\n+        greetingService.sayHello(name);\n+    }\n+}\n+\n+@Dependent\n+class GreetingService {\n+    void sayHello(String name) {\n+        System.out.println(\"Hello \" + name + \"!\");\n+    }\n+}\n+----\n+<1> If there is only one class annotated with `picocli.CommandLine.Command` it will be used as entry point to Picocli CommandLine.\n+<2> All classes annotated with `picocli.CommandLine.Command` are register as beans in CDI.\n+\n+== Picocli Application with multiple Commands\n+\n+When multiple classes has `picocli.CommandLine.Command` annotation, then one of them need to be also annotated with `io.quarkus.picocli.runtime.annotations.TopCommand`.\n+This can be overwritten with `quarkus.picocli.top-command` property.\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import io.quarkus.picocli.runtime.annotations.TopCommand;\n+import picocli.CommandLine;\n+\n+@TopCommand\n+@CommandLine.Command(mixinStandardHelpOptions = true, subcommands = {HelloCommand.class, GoodByeCommand.class})\n+public class EntryCommand {\n+}\n+\n+@CommandLine.Command(name = \"hello\", description = \"Greet World!\")\n+class HelloCommand implements Runnable {\n+\n+    @Override\n+    public void run() {\n+        System.out.println(\"Hello World!\");\n+    }\n+}\n+\n+@CommandLine.Command(name = \"goodbye\", description = \"Say goodbye to World!\")\n+class GoodByeCommand implements Runnable {\n+\n+    @Override\n+    public void run() {\n+        System.out.println(\"Goodbye World!\");\n+    }\n+}\n+----\n+\n+== Customizing Picocli CommandLine instance\n+\n+You can customize CommandLine classes used by `picocli` extension by producing your own bean instance:\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import io.quarkus.picocli.runtime.PicocliCommandLineFactory;\n+import io.quarkus.picocli.runtime.annotations.TopCommand;\n+import picocli.CommandLine;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+\n+@TopCommand\n+@CommandLine.Command\n+public class EntryCommand implements Runnable {\n+    @CommandLine.Spec\n+    CommandLine.Model.CommandSpec spec;\n+\n+    @Override\n+    public void run() {\n+        System.out.println(\"My name is: \" + spec.name());\n+    }\n+}\n+\n+@ApplicationScoped\n+class CustomConfiguration {\n+\n+    @Produces\n+    CommandLine customCommandLine(PicocliCommandLineFactory factory) { // <1>\n+        return factory.create().setCommandName(\"CustomizedName\");\n+    }\n+}\n+----\n+<1> `PicocliCommandLineFactory` will create an instance of CommandLine with `TopCommand` and `CommandLine.IFactory` injected.\n+\n+== Native mode support\n+\n+Picocli tool provides annotation processor which will generate a configuration for GraalVM Native images.\n+To use this annotation processor you need to add following dependency to `pom.xml` file:\n+\n+[source,xml]\n+--", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIxOTE1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            --\n          \n          \n            \n            ----", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r422219155", "createdAt": "2020-05-08T15:47:14Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/picocli.adoc", "diffHunk": "@@ -0,0 +1,178 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Command Mode with Picocli\n+:extension-status: experimental\n+\n+include::./attributes.adoc[]\n+\n+https://picocli.info/[Picocli] is an open source tool for creating rich command line applications.\n+\n+Quarkus provides support for using Picocli. This guide contains examples of `picocli` extension usage.\n+\n+include::./status-include.adoc[]\n+\n+IMPORTANT: If you are not familiar with the Quarkus Command Mode, consider reading the link:command-mode-reference[Command Mode Applications] first.\n+\n+== Configuration\n+\n+Once you have your Quarkus project configured you can add the `picocli` extension\n+to your project by running the following command in your project base directory.\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"picocli\"\n+----\n+\n+This will add the following to your pom.xml:\n+\n+[source,xml]\n+----\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-picocli</artifactId>\n+    </dependency>\n+----\n+\n+== Simple Picocli Application with one Command\n+\n+Simple PicocliApplication with only one Command can be created as follows:\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import picocli.CommandLine;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+@CommandLine.Command // <1>\n+public class HelloCommand implements Runnable {\n+\n+    @CommandLine.Option(names = {\"-n\", \"--name\"}, description = \"Who will we greet?\", defaultValue = \"World\")\n+    String name;\n+\n+    private final GreetingService greetingService;\n+\n+    @Inject // <2>\n+    public HelloCommand(GreetingService greetingService) {\n+        this.greetingService = greetingService;\n+    }\n+\n+    @Override\n+    public void run() {\n+        greetingService.sayHello(name);\n+    }\n+}\n+\n+@Dependent\n+class GreetingService {\n+    void sayHello(String name) {\n+        System.out.println(\"Hello \" + name + \"!\");\n+    }\n+}\n+----\n+<1> If there is only one class annotated with `picocli.CommandLine.Command` it will be used as entry point to Picocli CommandLine.\n+<2> All classes annotated with `picocli.CommandLine.Command` are register as beans in CDI.\n+\n+== Picocli Application with multiple Commands\n+\n+When multiple classes has `picocli.CommandLine.Command` annotation, then one of them need to be also annotated with `io.quarkus.picocli.runtime.annotations.TopCommand`.\n+This can be overwritten with `quarkus.picocli.top-command` property.\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import io.quarkus.picocli.runtime.annotations.TopCommand;\n+import picocli.CommandLine;\n+\n+@TopCommand\n+@CommandLine.Command(mixinStandardHelpOptions = true, subcommands = {HelloCommand.class, GoodByeCommand.class})\n+public class EntryCommand {\n+}\n+\n+@CommandLine.Command(name = \"hello\", description = \"Greet World!\")\n+class HelloCommand implements Runnable {\n+\n+    @Override\n+    public void run() {\n+        System.out.println(\"Hello World!\");\n+    }\n+}\n+\n+@CommandLine.Command(name = \"goodbye\", description = \"Say goodbye to World!\")\n+class GoodByeCommand implements Runnable {\n+\n+    @Override\n+    public void run() {\n+        System.out.println(\"Goodbye World!\");\n+    }\n+}\n+----\n+\n+== Customizing Picocli CommandLine instance\n+\n+You can customize CommandLine classes used by `picocli` extension by producing your own bean instance:\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import io.quarkus.picocli.runtime.PicocliCommandLineFactory;\n+import io.quarkus.picocli.runtime.annotations.TopCommand;\n+import picocli.CommandLine;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+\n+@TopCommand\n+@CommandLine.Command\n+public class EntryCommand implements Runnable {\n+    @CommandLine.Spec\n+    CommandLine.Model.CommandSpec spec;\n+\n+    @Override\n+    public void run() {\n+        System.out.println(\"My name is: \" + spec.name());\n+    }\n+}\n+\n+@ApplicationScoped\n+class CustomConfiguration {\n+\n+    @Produces\n+    CommandLine customCommandLine(PicocliCommandLineFactory factory) { // <1>\n+        return factory.create().setCommandName(\"CustomizedName\");\n+    }\n+}\n+----\n+<1> `PicocliCommandLineFactory` will create an instance of CommandLine with `TopCommand` and `CommandLine.IFactory` injected.\n+\n+== Native mode support\n+\n+Picocli tool provides annotation processor which will generate a configuration for GraalVM Native images.\n+To use this annotation processor you need to add following dependency to `pom.xml` file:\n+\n+[source,xml]\n+--\n+<dependency>\n+  <groupId>info.picocli</groupId>\n+  <artifactId>picocli-codegen</artifactId>\n+</dependency>\n+--", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d"}, "originalPosition": 166}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTY3MjM0", "url": "https://github.com/quarkusio/quarkus/pull/9180#pullrequestreview-408567234", "createdAt": "2020-05-08T22:46:24Z", "commit": {"oid": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjo0NjoyNVrOGS1y8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjo0NjoyNVrOGS1y8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQwODk0NQ==", "bodyText": "It is important that the factory falls back to the picocli default factory: the default factory has logic to instantiate collections (Lists, Sets, Maps) that picocli relies on. How about something like this:\nclass PicocliBeansFactory implements CommandLine.IFactory {\n\n    private final IFactory defaultFactory = CommandLine.defaultFactory();\n\n    @Override\n    public <K> K create(Class<K> aClass) throws Exception {\n        Instance<K> instance = CDI.current().select(aClass);\n        if (instance.isResolvable()) {\n            // question: does Quarkus provide some internal logging facility?\n            //System.out.println(\"Got instance \" + instance + \" via \" + CDI.current());\n            return instance.get();\n        }\n        //System.out.println(\"Instantiating \" + aClass + \" via default picocli factory\");\n        return defaultFactory.create(aClass);\n    }\n}", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r422408945", "createdAt": "2020-05-08T22:46:25Z", "author": {"login": "remkop"}, "path": "extensions/picocli/runtime/src/main/java/io/quarkus/picocli/runtime/PicocliBeansFactory.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package io.quarkus.picocli.runtime;\n+\n+import javax.enterprise.inject.spi.CDI;\n+\n+import picocli.CommandLine;\n+\n+class PicocliBeansFactory implements CommandLine.IFactory {\n+    @Override\n+    public <K> K create(Class<K> aClass) {\n+        return CDI.current().select(aClass).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NjE3Mzk4", "url": "https://github.com/quarkusio/quarkus/pull/9180#pullrequestreview-408617398", "createdAt": "2020-05-09T06:24:01Z", "commit": {"oid": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjoyNDowMVrOGS41pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjoyNDowMVrOGS41pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1ODc4OQ==", "bodyText": "what is this fixing ? (I assume its unrelated to picocli support ?)", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r422458789", "createdAt": "2020-05-09T06:24:01Z", "author": {"login": "maxandersen"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/MainClassBuildStep.java", "diffHunk": "@@ -300,17 +302,22 @@ public MainClassBuildItem mainClassBuildStep(BuildProducer<GeneratedClassBuildIt\n             mainClassName = quarkusMainAnnotations.get(\"\");\n         }\n         if (mainClassName.equals(MAIN_CLASS)) {\n-            //generate a main that just runs the app, the user has not supplied a main class\n-            ClassCreator file = new ClassCreator(new GeneratedClassGizmoAdaptor(generatedClass, true), MAIN_CLASS, null,\n-                    Object.class.getName());\n+            if (quarkusApplicationClass.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NjE3NDY4", "url": "https://github.com/quarkusio/quarkus/pull/9180#pullrequestreview-408617468", "createdAt": "2020-05-09T06:25:08Z", "commit": {"oid": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjoyNTowOFrOGS415g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjoyNTowOFrOGS415g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1ODg1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Simple PicocliApplication with only one Command can be created as follows:\n          \n          \n            \n            Simple Picocli Application with only one Command can be created as follows:", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r422458854", "createdAt": "2020-05-09T06:25:08Z", "author": {"login": "maxandersen"}, "path": "docs/src/main/asciidoc/picocli.adoc", "diffHunk": "@@ -0,0 +1,178 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Command Mode with Picocli\n+:extension-status: experimental\n+\n+include::./attributes.adoc[]\n+\n+https://picocli.info/[Picocli] is an open source tool for creating rich command line applications.\n+\n+Quarkus provides support for using Picocli. This guide contains examples of `picocli` extension usage.\n+\n+include::./status-include.adoc[]\n+\n+IMPORTANT: If you are not familiar with the Quarkus Command Mode, consider reading the link:command-mode-reference[Command Mode Applications] first.\n+\n+== Configuration\n+\n+Once you have your Quarkus project configured you can add the `picocli` extension\n+to your project by running the following command in your project base directory.\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"picocli\"\n+----\n+\n+This will add the following to your pom.xml:\n+\n+[source,xml]\n+----\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-picocli</artifactId>\n+    </dependency>\n+----\n+\n+== Simple Picocli Application with one Command\n+\n+Simple PicocliApplication with only one Command can be created as follows:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NjE3NzMz", "url": "https://github.com/quarkusio/quarkus/pull/9180#pullrequestreview-408617733", "createdAt": "2020-05-09T06:28:56Z", "commit": {"oid": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjoyODo1NlrOGS43Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjoyODo1NlrOGS43Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTE2Nw==", "bodyText": "having @TopCommand does not feel right - could it not reuse @QuarkusMain logic or at least similar logic to pick the main one ?", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r422459167", "createdAt": "2020-05-09T06:28:56Z", "author": {"login": "maxandersen"}, "path": "docs/src/main/asciidoc/picocli.adoc", "diffHunk": "@@ -0,0 +1,178 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Command Mode with Picocli\n+:extension-status: experimental\n+\n+include::./attributes.adoc[]\n+\n+https://picocli.info/[Picocli] is an open source tool for creating rich command line applications.\n+\n+Quarkus provides support for using Picocli. This guide contains examples of `picocli` extension usage.\n+\n+include::./status-include.adoc[]\n+\n+IMPORTANT: If you are not familiar with the Quarkus Command Mode, consider reading the link:command-mode-reference[Command Mode Applications] first.\n+\n+== Configuration\n+\n+Once you have your Quarkus project configured you can add the `picocli` extension\n+to your project by running the following command in your project base directory.\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"picocli\"\n+----\n+\n+This will add the following to your pom.xml:\n+\n+[source,xml]\n+----\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-picocli</artifactId>\n+    </dependency>\n+----\n+\n+== Simple Picocli Application with one Command\n+\n+Simple PicocliApplication with only one Command can be created as follows:\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import picocli.CommandLine;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+@CommandLine.Command // <1>\n+public class HelloCommand implements Runnable {\n+\n+    @CommandLine.Option(names = {\"-n\", \"--name\"}, description = \"Who will we greet?\", defaultValue = \"World\")\n+    String name;\n+\n+    private final GreetingService greetingService;\n+\n+    @Inject // <2>\n+    public HelloCommand(GreetingService greetingService) {\n+        this.greetingService = greetingService;\n+    }\n+\n+    @Override\n+    public void run() {\n+        greetingService.sayHello(name);\n+    }\n+}\n+\n+@Dependent\n+class GreetingService {\n+    void sayHello(String name) {\n+        System.out.println(\"Hello \" + name + \"!\");\n+    }\n+}\n+----\n+<1> If there is only one class annotated with `picocli.CommandLine.Command` it will be used as entry point to Picocli CommandLine.\n+<2> All classes annotated with `picocli.CommandLine.Command` are register as beans in CDI.\n+\n+== Picocli Application with multiple Commands\n+\n+When multiple classes has `picocli.CommandLine.Command` annotation, then one of them need to be also annotated with `io.quarkus.picocli.runtime.annotations.TopCommand`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NjE4MjUz", "url": "https://github.com/quarkusio/quarkus/pull/9180#pullrequestreview-408618253", "createdAt": "2020-05-09T06:37:43Z", "commit": {"oid": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NjQ2NTAw", "url": "https://github.com/quarkusio/quarkus/pull/9180#pullrequestreview-408646500", "createdAt": "2020-05-09T12:34:14Z", "commit": {"oid": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxMjozNDoxNFrOGS6xkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxMjozOToxNlrOGS6zkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ5MDUxMg==", "bodyText": "You might want to add to the dependabot descriptor too", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r422490512", "createdAt": "2020-05-09T12:34:14Z", "author": {"login": "gastaldi"}, "path": "bom/runtime/pom.xml", "diffHunk": "@@ -191,6 +191,7 @@\n         <jib-core.version>0.13.1</jib-core.version>\n         <google-http-client.version>1.34.0</google-http-client.version>\n         <scram-client.version>2.1</scram-client.version>\n+        <picocli.version>4.2.0</picocli.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ5MTAyNw==", "bodyText": "not really fan of calling this \"Picocli Application\" it is still an Quarkus Application just enhanced with command line parsing done by picocli.\n\n+1\n\nHow about something like this:\n\n== Standalone picocli-based command line application\nA standalone command line application with a single picocli command can be created as follows:\n\nI'm finding the term \"standalone\" command/application, useful when distinguishing from a \"command suite\" with subcommands.\n\nBut can't we also create subcommands with this extension? I think calling simply a command line application may be good enough", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r422491027", "createdAt": "2020-05-09T12:39:16Z", "author": {"login": "gastaldi"}, "path": "docs/src/main/asciidoc/picocli.adoc", "diffHunk": "@@ -0,0 +1,178 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Command Mode with Picocli\n+:extension-status: experimental\n+\n+include::./attributes.adoc[]\n+\n+https://picocli.info/[Picocli] is an open source tool for creating rich command line applications.\n+\n+Quarkus provides support for using Picocli. This guide contains examples of `picocli` extension usage.\n+\n+include::./status-include.adoc[]\n+\n+IMPORTANT: If you are not familiar with the Quarkus Command Mode, consider reading the link:command-mode-reference[Command Mode Applications] first.\n+\n+== Configuration\n+\n+Once you have your Quarkus project configured you can add the `picocli` extension\n+to your project by running the following command in your project base directory.\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"picocli\"\n+----\n+\n+This will add the following to your pom.xml:\n+\n+[source,xml]\n+----\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-picocli</artifactId>\n+    </dependency>\n+----\n+\n+== Simple Picocli Application with one Command\n+\n+Simple PicocliApplication with only one Command can be created as follows:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1ODg1NA=="}, "originalCommit": {"oid": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d"}, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d", "author": {"user": {"login": "mgorniew", "name": "Micha\u0142 G\u00f3rniewski"}}, "url": "https://github.com/quarkusio/quarkus/commit/dadaf1cc3c87456d0e7029ba85f0ebe88d3fd82d", "committedDate": "2020-05-08T12:04:50Z", "message": "Create picocli extension"}, "afterCommit": {"oid": "75a7d3d5e309c60a79c1e3131f0c2c8a36262389", "author": {"user": {"login": "mgorniew", "name": "Micha\u0142 G\u00f3rniewski"}}, "url": "https://github.com/quarkusio/quarkus/commit/75a7d3d5e309c60a79c1e3131f0c2c8a36262389", "committedDate": "2020-05-10T00:45:49Z", "message": "Create picocli extension"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "75a7d3d5e309c60a79c1e3131f0c2c8a36262389", "author": {"user": {"login": "mgorniew", "name": "Micha\u0142 G\u00f3rniewski"}}, "url": "https://github.com/quarkusio/quarkus/commit/75a7d3d5e309c60a79c1e3131f0c2c8a36262389", "committedDate": "2020-05-10T00:45:49Z", "message": "Create picocli extension"}, "afterCommit": {"oid": "0d4a33585dfe15668f9c97091d306da73f21cdd1", "author": {"user": {"login": "mgorniew", "name": "Micha\u0142 G\u00f3rniewski"}}, "url": "https://github.com/quarkusio/quarkus/commit/0d4a33585dfe15668f9c97091d306da73f21cdd1", "committedDate": "2020-05-10T01:04:47Z", "message": "Create picocli extension"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0d4a33585dfe15668f9c97091d306da73f21cdd1", "author": {"user": {"login": "mgorniew", "name": "Micha\u0142 G\u00f3rniewski"}}, "url": "https://github.com/quarkusio/quarkus/commit/0d4a33585dfe15668f9c97091d306da73f21cdd1", "committedDate": "2020-05-10T01:04:47Z", "message": "Create picocli extension"}, "afterCommit": {"oid": "578ca88d95c0b860861c8ba6559149645de60935", "author": {"user": {"login": "mgorniew", "name": "Micha\u0142 G\u00f3rniewski"}}, "url": "https://github.com/quarkusio/quarkus/commit/578ca88d95c0b860861c8ba6559149645de60935", "committedDate": "2020-05-10T12:49:44Z", "message": "Create picocli extension"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "578ca88d95c0b860861c8ba6559149645de60935", "author": {"user": {"login": "mgorniew", "name": "Micha\u0142 G\u00f3rniewski"}}, "url": "https://github.com/quarkusio/quarkus/commit/578ca88d95c0b860861c8ba6559149645de60935", "committedDate": "2020-05-10T12:49:44Z", "message": "Create picocli extension"}, "afterCommit": {"oid": "cab293bbd3d890e199092c2257ac9927c774158a", "author": {"user": {"login": "mgorniew", "name": "Micha\u0142 G\u00f3rniewski"}}, "url": "https://github.com/quarkusio/quarkus/commit/cab293bbd3d890e199092c2257ac9927c774158a", "committedDate": "2020-05-11T09:39:53Z", "message": "Create picocli extension"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cab293bbd3d890e199092c2257ac9927c774158a", "author": {"user": {"login": "mgorniew", "name": "Micha\u0142 G\u00f3rniewski"}}, "url": "https://github.com/quarkusio/quarkus/commit/cab293bbd3d890e199092c2257ac9927c774158a", "committedDate": "2020-05-11T09:39:53Z", "message": "Create picocli extension"}, "afterCommit": {"oid": "0478762e8da217a908db1ad84765f9d1e6acfb94", "author": {"user": {"login": "mgorniew", "name": "Micha\u0142 G\u00f3rniewski"}}, "url": "https://github.com/quarkusio/quarkus/commit/0478762e8da217a908db1ad84765f9d1e6acfb94", "committedDate": "2020-05-12T11:57:26Z", "message": "Create picocli extension"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0478762e8da217a908db1ad84765f9d1e6acfb94", "author": {"user": {"login": "mgorniew", "name": "Micha\u0142 G\u00f3rniewski"}}, "url": "https://github.com/quarkusio/quarkus/commit/0478762e8da217a908db1ad84765f9d1e6acfb94", "committedDate": "2020-05-12T11:57:26Z", "message": "Create picocli extension"}, "afterCommit": {"oid": "e1f797215bfe713a9f39dd46d0d96fdcd95765d5", "author": {"user": {"login": "mgorniew", "name": "Micha\u0142 G\u00f3rniewski"}}, "url": "https://github.com/quarkusio/quarkus/commit/e1f797215bfe713a9f39dd46d0d96fdcd95765d5", "committedDate": "2020-05-13T12:11:58Z", "message": "Create picocli extension"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e1f797215bfe713a9f39dd46d0d96fdcd95765d5", "author": {"user": {"login": "mgorniew", "name": "Micha\u0142 G\u00f3rniewski"}}, "url": "https://github.com/quarkusio/quarkus/commit/e1f797215bfe713a9f39dd46d0d96fdcd95765d5", "committedDate": "2020-05-13T12:11:58Z", "message": "Create picocli extension"}, "afterCommit": {"oid": "73690f666c561037fea584223dcf226e518f1737", "author": {"user": {"login": "mgorniew", "name": "Micha\u0142 G\u00f3rniewski"}}, "url": "https://github.com/quarkusio/quarkus/commit/73690f666c561037fea584223dcf226e518f1737", "committedDate": "2020-05-15T09:13:53Z", "message": "Create picocli extension"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "73690f666c561037fea584223dcf226e518f1737", "author": {"user": {"login": "mgorniew", "name": "Micha\u0142 G\u00f3rniewski"}}, "url": "https://github.com/quarkusio/quarkus/commit/73690f666c561037fea584223dcf226e518f1737", "committedDate": "2020-05-15T09:13:53Z", "message": "Create picocli extension"}, "afterCommit": {"oid": "f3946e8f8caa164c851f566645265fcc65d40ab2", "author": {"user": {"login": "mgorniew", "name": "Micha\u0142 G\u00f3rniewski"}}, "url": "https://github.com/quarkusio/quarkus/commit/f3946e8f8caa164c851f566645265fcc65d40ab2", "committedDate": "2020-05-15T09:56:17Z", "message": "Create picocli extension"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f3946e8f8caa164c851f566645265fcc65d40ab2", "author": {"user": {"login": "mgorniew", "name": "Micha\u0142 G\u00f3rniewski"}}, "url": "https://github.com/quarkusio/quarkus/commit/f3946e8f8caa164c851f566645265fcc65d40ab2", "committedDate": "2020-05-15T09:56:17Z", "message": "Create picocli extension"}, "afterCommit": {"oid": "7e70cd111caf44e959fb2836a0bcc323e8ea8e88", "author": {"user": {"login": "mgorniew", "name": "Micha\u0142 G\u00f3rniewski"}}, "url": "https://github.com/quarkusio/quarkus/commit/7e70cd111caf44e959fb2836a0bcc323e8ea8e88", "committedDate": "2020-05-15T17:35:03Z", "message": "Create picocli extension"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyOTc1ODgy", "url": "https://github.com/quarkusio/quarkus/pull/9180#pullrequestreview-412975882", "createdAt": "2020-05-15T21:22:05Z", "commit": {"oid": "7e70cd111caf44e959fb2836a0bcc323e8ea8e88"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDc0Njc1", "url": "https://github.com/quarkusio/quarkus/pull/9180#pullrequestreview-413074675", "createdAt": "2020-05-16T12:54:29Z", "commit": {"oid": "7e70cd111caf44e959fb2836a0bcc323e8ea8e88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMjo1NDozMFrOGWaNPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMjo1NDozMFrOGWaNPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTIzMA==", "bodyText": "I am a little hesitant about mentioning this TBH... Nowhere in any other extension are we telling users to add some additional process to get their GraalVM native image working.\nWe should strive to make everything work in native image and treat things that don't as bugs to be fixed here, instead of relying on an annotation processor.", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r426151230", "createdAt": "2020-05-16T12:54:30Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/picocli.adoc", "diffHunk": "@@ -0,0 +1,238 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Command Mode with Picocli\n+:extension-status: experimental\n+\n+include::./attributes.adoc[]\n+\n+https://picocli.info/[Picocli] is an open source tool for creating rich command line applications.\n+\n+Quarkus provides support for using Picocli. This guide contains examples of `picocli` extension usage.\n+\n+include::./status-include.adoc[]\n+\n+IMPORTANT: If you are not familiar with the Quarkus Command Mode, consider reading the link:command-mode-reference[Command Mode reference guide] first.\n+\n+== Configuration\n+\n+Once you have your Quarkus project configured you can add the `picocli` extension\n+to your project by running the following command in your project base directory.\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"picocli\"\n+----\n+\n+This will add the following to your pom.xml:\n+\n+[source,xml]\n+----\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-picocli</artifactId>\n+    </dependency>\n+----\n+\n+== Simple command line application\n+\n+Simple PicocliApplication with only one `Command` can be created as follows:\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import picocli.CommandLine;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+@CommandLine.Command // <1>\n+public class HelloCommand implements Runnable {\n+\n+    @CommandLine.Option(names = {\"-n\", \"--name\"}, description = \"Who will we greet?\", defaultValue = \"World\")\n+    String name;\n+\n+    private final GreetingService greetingService;\n+\n+    @Inject // <2>\n+    public HelloCommand(GreetingService greetingService) {\n+        this.greetingService = greetingService;\n+    }\n+\n+    @Override\n+    public void run() {\n+        greetingService.sayHello(name);\n+    }\n+}\n+\n+@Dependent\n+class GreetingService {\n+    void sayHello(String name) {\n+        System.out.println(\"Hello \" + name + \"!\");\n+    }\n+}\n+----\n+<1> If there is only one class annotated with `picocli.CommandLine.Command` it will be used as entry point to Picocli CommandLine.\n+<2> All classes annotated with `picocli.CommandLine.Command` are registered as CDI beans.\n+\n+== Command line application with multiple Commands\n+\n+When multiple classes have the `picocli.CommandLine.Command` annotation, then one of them needs to be also annotated with `io.quarkus.picocli.runtime.annotations.TopCommand`.\n+This can be overwritten with the `quarkus.picocli.top-command` property.\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import io.quarkus.picocli.runtime.annotations.TopCommand;\n+import picocli.CommandLine;\n+\n+@TopCommand\n+@CommandLine.Command(mixinStandardHelpOptions = true, subcommands = {HelloCommand.class, GoodByeCommand.class})\n+public class EntryCommand {\n+}\n+\n+@CommandLine.Command(name = \"hello\", description = \"Greet World!\")\n+class HelloCommand implements Runnable {\n+\n+    @Override\n+    public void run() {\n+        System.out.println(\"Hello World!\");\n+    }\n+}\n+\n+@CommandLine.Command(name = \"goodbye\", description = \"Say goodbye to World!\")\n+class GoodByeCommand implements Runnable {\n+\n+    @Override\n+    public void run() {\n+        System.out.println(\"Goodbye World!\");\n+    }\n+}\n+----\n+\n+== Customizing Picocli CommandLine instance\n+\n+You can customize CommandLine classes used by the `picocli` extension by producing your own bean instance:\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import io.quarkus.picocli.runtime.PicocliCommandLineFactory;\n+import io.quarkus.picocli.runtime.annotations.TopCommand;\n+import picocli.CommandLine;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+\n+@TopCommand\n+@CommandLine.Command\n+public class EntryCommand implements Runnable {\n+    @CommandLine.Spec\n+    CommandLine.Model.CommandSpec spec;\n+\n+    @Override\n+    public void run() {\n+        System.out.println(\"My name is: \" + spec.name());\n+    }\n+}\n+\n+@ApplicationScoped\n+class CustomConfiguration {\n+\n+    @Produces\n+    CommandLine customCommandLine(PicocliCommandLineFactory factory) { // <1>\n+        return factory.create().setCommandName(\"CustomizedName\");\n+    }\n+}\n+----\n+<1> `PicocliCommandLineFactory` will create an instance of CommandLine with `TopCommand` and `CommandLine.IFactory` injected.\n+\n+== Different entry command for each profile\n+\n+It is possible to create different entry command for each profile, using `@IfBuildProfile`:\n+\n+[source,java]\n+----\n+@ApplicationScoped\n+public class Config {\n+\n+    @Produces\n+    @TopCommand\n+    @IfBuildProfile(\"dev\")\n+    public Object devCommand() {\n+        return DevCommand.class; // <1>\n+    }\n+\n+    @Produces\n+    @TopCommand\n+    @IfBuildProfile(\"prod\")\n+    public Object prodCommand() {\n+        return new ProdCommand(\"Configured by me!\");\n+    }\n+\n+}\n+----\n+<1> You can return instance of `java.lang.Class` here. In such case `CommandLine` will try to instantiate this class using `CommandLine.IFactory`.\n+\n+== Providing own QuarkusMain\n+\n+You can also provide your own application entry point annotated with `QuarkusMain` (as described in link:command-mode-reference[Command Mode reference guide]).\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import io.quarkus.runtime.QuarkusApplication;\n+import io.quarkus.runtime.annotations.QuarkusMain;\n+import picocli.CommandLine;\n+\n+import javax.inject.Inject;\n+\n+@QuarkusMain\n+@CommandLine.Command(name = \"demo\", mixinStandardHelpOptions = true)\n+public class ExampleApp implements Runnable, QuarkusApplication {\n+    @Inject\n+    CommandLine.IFactory factory; // <1>\n+\n+    @Override\n+    public void run() {\n+        // business logic\n+    }\n+\n+    @Override\n+    public int run(String... args) throws Exception {\n+        return new CommandLine(this, factory).execute(args);\n+    }\n+}\n+----\n+<1> Quarkus-compatible `CommandLine.IFactory` bean created by `picocli` extension.\n+\n+== Native mode support\n+\n+GraalVM Native images should work out-of-box, but in case of any issues it is still possible to use annotation processor from `picocli` project.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e70cd111caf44e959fb2836a0bcc323e8ea8e88"}, "originalPosition": 217}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDc0ODIz", "url": "https://github.com/quarkusio/quarkus/pull/9180#pullrequestreview-413074823", "createdAt": "2020-05-16T12:56:49Z", "commit": {"oid": "7e70cd111caf44e959fb2836a0bcc323e8ea8e88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMjo1Njo0OVrOGWaN2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMjo1Njo0OVrOGWaN2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTM4Nw==", "bodyText": "As mentioned in my comment above, I am very reluctant about this...", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r426151387", "createdAt": "2020-05-16T12:56:49Z", "author": {"login": "geoand"}, "path": "extensions/picocli/deployment/src/main/java/io/quarkus/picocli/deployment/PicocliDeploymentConfiguration.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package io.quarkus.picocli.deployment;\n+\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+\n+@ConfigRoot(name = \"picocli\")\n+class PicocliDeploymentConfiguration {\n+\n+    /**\n+     * Whether or not a native image processing build steps should be enabled.\n+     * This should be set to false if `picocli-codegen` annotation processor is used.\n+     */\n+    @ConfigItem(name = \"native-image.processing.enable\", defaultValue = \"true\")\n+    boolean nativeImageProcessingEnabled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e70cd111caf44e959fb2836a0bcc323e8ea8e88"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDc0OTMw", "url": "https://github.com/quarkusio/quarkus/pull/9180#pullrequestreview-413074930", "createdAt": "2020-05-16T12:58:37Z", "commit": {"oid": "7e70cd111caf44e959fb2836a0bcc323e8ea8e88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMjo1ODozOFrOGWaOVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMjo1ODozOFrOGWaOVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTUxMQ==", "bodyText": "I would urge to use Arc.container() here instead of CDI.current()", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r426151511", "createdAt": "2020-05-16T12:58:38Z", "author": {"login": "geoand"}, "path": "extensions/picocli/runtime/src/main/java/io/quarkus/picocli/runtime/PicocliBeansFactory.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package io.quarkus.picocli.runtime;\n+\n+import javax.enterprise.inject.Instance;\n+import javax.enterprise.inject.spi.CDI;\n+\n+import picocli.CommandLine;\n+\n+class PicocliBeansFactory implements CommandLine.IFactory {\n+    private final CommandLine.IFactory defaultFactory = CommandLine.defaultFactory();\n+\n+    @Override\n+    public <K> K create(Class<K> aClass) throws Exception {\n+        Instance<K> instance = CDI.current().select(aClass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e70cd111caf44e959fb2836a0bcc323e8ea8e88"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDc0OTg3", "url": "https://github.com/quarkusio/quarkus/pull/9180#pullrequestreview-413074987", "createdAt": "2020-05-16T12:59:39Z", "commit": {"oid": "7e70cd111caf44e959fb2836a0bcc323e8ea8e88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMjo1OTozOVrOGWaOkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMjo1OTozOVrOGWaOkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTU3MA==", "bodyText": "This is redundant since Arc knows to use the constructor even without the annotations", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r426151570", "createdAt": "2020-05-16T12:59:39Z", "author": {"login": "geoand"}, "path": "extensions/picocli/runtime/src/main/java/io/quarkus/picocli/runtime/PicocliCommandLineProducer.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package io.quarkus.picocli.runtime;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Instance;\n+import javax.enterprise.inject.Produces;\n+import javax.enterprise.inject.literal.NamedLiteral;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import io.quarkus.arc.DefaultBean;\n+import io.quarkus.picocli.runtime.annotations.TopCommand;\n+import picocli.CommandLine;\n+\n+@ApplicationScoped\n+public class PicocliCommandLineProducer {\n+\n+    private final Instance<Object> topCommand;\n+    private final PicocliConfiguration picocliConfiguration;\n+\n+    @Inject", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e70cd111caf44e959fb2836a0bcc323e8ea8e88"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDc1MDU0", "url": "https://github.com/quarkusio/quarkus/pull/9180#pullrequestreview-413075054", "createdAt": "2020-05-16T13:00:39Z", "commit": {"oid": "7e70cd111caf44e959fb2836a0bcc323e8ea8e88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMzowMDozOVrOGWaO4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMzowMDozOVrOGWaO4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTY0OQ==", "bodyText": "Are users expected to be able to provide their own CommandLine.IFactory? If not, then there is no need to have this annotation.", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r426151649", "createdAt": "2020-05-16T13:00:39Z", "author": {"login": "geoand"}, "path": "extensions/picocli/runtime/src/main/java/io/quarkus/picocli/runtime/PicocliCommandLineProducer.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package io.quarkus.picocli.runtime;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Instance;\n+import javax.enterprise.inject.Produces;\n+import javax.enterprise.inject.literal.NamedLiteral;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import io.quarkus.arc.DefaultBean;\n+import io.quarkus.picocli.runtime.annotations.TopCommand;\n+import picocli.CommandLine;\n+\n+@ApplicationScoped\n+public class PicocliCommandLineProducer {\n+\n+    private final Instance<Object> topCommand;\n+    private final PicocliConfiguration picocliConfiguration;\n+\n+    @Inject\n+    public PicocliCommandLineProducer(@TopCommand Instance<Object> topCommand, PicocliConfiguration picocliConfiguration) {\n+        this.topCommand = topCommand;\n+        this.picocliConfiguration = picocliConfiguration;\n+    }\n+\n+    private Class<?> classForName(String name) {\n+        try {\n+            return Class.forName(name);\n+        } catch (ClassNotFoundException ex) {\n+            throw new IllegalArgumentException(ex);\n+        }\n+    }\n+\n+    @Produces\n+    @DefaultBean", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e70cd111caf44e959fb2836a0bcc323e8ea8e88"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDc1MDY3", "url": "https://github.com/quarkusio/quarkus/pull/9180#pullrequestreview-413075067", "createdAt": "2020-05-16T13:00:48Z", "commit": {"oid": "7e70cd111caf44e959fb2836a0bcc323e8ea8e88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMzowMDo0OFrOGWaO_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMzowMDo0OFrOGWaO_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTY3Ng==", "bodyText": "Same here", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r426151676", "createdAt": "2020-05-16T13:00:48Z", "author": {"login": "geoand"}, "path": "extensions/picocli/runtime/src/main/java/io/quarkus/picocli/runtime/PicocliCommandLineProducer.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package io.quarkus.picocli.runtime;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Instance;\n+import javax.enterprise.inject.Produces;\n+import javax.enterprise.inject.literal.NamedLiteral;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import io.quarkus.arc.DefaultBean;\n+import io.quarkus.picocli.runtime.annotations.TopCommand;\n+import picocli.CommandLine;\n+\n+@ApplicationScoped\n+public class PicocliCommandLineProducer {\n+\n+    private final Instance<Object> topCommand;\n+    private final PicocliConfiguration picocliConfiguration;\n+\n+    @Inject\n+    public PicocliCommandLineProducer(@TopCommand Instance<Object> topCommand, PicocliConfiguration picocliConfiguration) {\n+        this.topCommand = topCommand;\n+        this.picocliConfiguration = picocliConfiguration;\n+    }\n+\n+    private Class<?> classForName(String name) {\n+        try {\n+            return Class.forName(name);\n+        } catch (ClassNotFoundException ex) {\n+            throw new IllegalArgumentException(ex);\n+        }\n+    }\n+\n+    @Produces\n+    @DefaultBean\n+    @Singleton\n+    public CommandLine.IFactory picocliFactory() {\n+        return new PicocliBeansFactory();\n+    }\n+\n+    @Produces\n+    @DefaultBean", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e70cd111caf44e959fb2836a0bcc323e8ea8e88"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDc1MTEz", "url": "https://github.com/quarkusio/quarkus/pull/9180#pullrequestreview-413075113", "createdAt": "2020-05-16T13:01:34Z", "commit": {"oid": "7e70cd111caf44e959fb2836a0bcc323e8ea8e88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMzowMTozNFrOGWaPLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMzowMTozNFrOGWaPLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTcyNw==", "bodyText": "We generally try to avoid using lamdbas in runtime code as much as possible, due to their non-zero (albeit very small) runtime overhead.", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r426151727", "createdAt": "2020-05-16T13:01:34Z", "author": {"login": "geoand"}, "path": "extensions/picocli/runtime/src/main/java/io/quarkus/picocli/runtime/PicocliCommandLineProducer.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package io.quarkus.picocli.runtime;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Instance;\n+import javax.enterprise.inject.Produces;\n+import javax.enterprise.inject.literal.NamedLiteral;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import io.quarkus.arc.DefaultBean;\n+import io.quarkus.picocli.runtime.annotations.TopCommand;\n+import picocli.CommandLine;\n+\n+@ApplicationScoped\n+public class PicocliCommandLineProducer {\n+\n+    private final Instance<Object> topCommand;\n+    private final PicocliConfiguration picocliConfiguration;\n+\n+    @Inject\n+    public PicocliCommandLineProducer(@TopCommand Instance<Object> topCommand, PicocliConfiguration picocliConfiguration) {\n+        this.topCommand = topCommand;\n+        this.picocliConfiguration = picocliConfiguration;\n+    }\n+\n+    private Class<?> classForName(String name) {\n+        try {\n+            return Class.forName(name);\n+        } catch (ClassNotFoundException ex) {\n+            throw new IllegalArgumentException(ex);\n+        }\n+    }\n+\n+    @Produces\n+    @DefaultBean\n+    @Singleton\n+    public CommandLine.IFactory picocliFactory() {\n+        return new PicocliBeansFactory();\n+    }\n+\n+    @Produces\n+    @DefaultBean\n+    public PicocliCommandLineFactory picocliCommandLineFactory(CommandLine.IFactory picocliFactory) {\n+        return () -> picocliConfiguration.topCommand", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e70cd111caf44e959fb2836a0bcc323e8ea8e88"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDc1MjUx", "url": "https://github.com/quarkusio/quarkus/pull/9180#pullrequestreview-413075251", "createdAt": "2020-05-16T13:03:28Z", "commit": {"oid": "7e70cd111caf44e959fb2836a0bcc323e8ea8e88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMzowMzoyOFrOGWaPzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMzowMzoyOFrOGWaPzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MTg4Nw==", "bodyText": "Let's drop this annotation as it isn't needed when there is a single constuctor", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r426151887", "createdAt": "2020-05-16T13:03:28Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/picocli.adoc", "diffHunk": "@@ -0,0 +1,238 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Command Mode with Picocli\n+:extension-status: experimental\n+\n+include::./attributes.adoc[]\n+\n+https://picocli.info/[Picocli] is an open source tool for creating rich command line applications.\n+\n+Quarkus provides support for using Picocli. This guide contains examples of `picocli` extension usage.\n+\n+include::./status-include.adoc[]\n+\n+IMPORTANT: If you are not familiar with the Quarkus Command Mode, consider reading the link:command-mode-reference[Command Mode reference guide] first.\n+\n+== Configuration\n+\n+Once you have your Quarkus project configured you can add the `picocli` extension\n+to your project by running the following command in your project base directory.\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"picocli\"\n+----\n+\n+This will add the following to your pom.xml:\n+\n+[source,xml]\n+----\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-picocli</artifactId>\n+    </dependency>\n+----\n+\n+== Simple command line application\n+\n+Simple PicocliApplication with only one `Command` can be created as follows:\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import picocli.CommandLine;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+@CommandLine.Command // <1>\n+public class HelloCommand implements Runnable {\n+\n+    @CommandLine.Option(names = {\"-n\", \"--name\"}, description = \"Who will we greet?\", defaultValue = \"World\")\n+    String name;\n+\n+    private final GreetingService greetingService;\n+\n+    @Inject // <2>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e70cd111caf44e959fb2836a0bcc323e8ea8e88"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDc1Mjk1", "url": "https://github.com/quarkusio/quarkus/pull/9180#pullrequestreview-413075295", "createdAt": "2020-05-16T13:04:16Z", "commit": {"oid": "7e70cd111caf44e959fb2836a0bcc323e8ea8e88"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDc1MzYy", "url": "https://github.com/quarkusio/quarkus/pull/9180#pullrequestreview-413075362", "createdAt": "2020-05-16T13:05:31Z", "commit": {"oid": "7e70cd111caf44e959fb2836a0bcc323e8ea8e88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMzowNTozMlrOGWaQSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMzowNTozMlrOGWaQSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MjAxMA==", "bodyText": "Is the 20min increase warranted by adding a single integration test?", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r426152010", "createdAt": "2020-05-16T13:05:32Z", "author": {"login": "geoand"}, "path": ".github/workflows/ci-actions.yml", "diffHunk": "@@ -467,9 +467,10 @@ jobs:\n             test-modules: >\n               kubernetes-client\n           - category: Misc4\n-            timeout: 10\n+            timeout: 30", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e70cd111caf44e959fb2836a0bcc323e8ea8e88"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDc1NTEw", "url": "https://github.com/quarkusio/quarkus/pull/9180#pullrequestreview-413075510", "createdAt": "2020-05-16T13:07:32Z", "commit": {"oid": "7e70cd111caf44e959fb2836a0bcc323e8ea8e88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMzowNzozM1rOGWaQ9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMzowNzozM1rOGWaQ9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MjE4MA==", "bodyText": "Very good idea to mention this!", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r426152180", "createdAt": "2020-05-16T13:07:33Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/picocli.adoc", "diffHunk": "@@ -0,0 +1,238 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Command Mode with Picocli\n+:extension-status: experimental\n+\n+include::./attributes.adoc[]\n+\n+https://picocli.info/[Picocli] is an open source tool for creating rich command line applications.\n+\n+Quarkus provides support for using Picocli. This guide contains examples of `picocli` extension usage.\n+\n+include::./status-include.adoc[]\n+\n+IMPORTANT: If you are not familiar with the Quarkus Command Mode, consider reading the link:command-mode-reference[Command Mode reference guide] first.\n+\n+== Configuration\n+\n+Once you have your Quarkus project configured you can add the `picocli` extension\n+to your project by running the following command in your project base directory.\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"picocli\"\n+----\n+\n+This will add the following to your pom.xml:\n+\n+[source,xml]\n+----\n+    <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-picocli</artifactId>\n+    </dependency>\n+----\n+\n+== Simple command line application\n+\n+Simple PicocliApplication with only one `Command` can be created as follows:\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import picocli.CommandLine;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+@CommandLine.Command // <1>\n+public class HelloCommand implements Runnable {\n+\n+    @CommandLine.Option(names = {\"-n\", \"--name\"}, description = \"Who will we greet?\", defaultValue = \"World\")\n+    String name;\n+\n+    private final GreetingService greetingService;\n+\n+    @Inject // <2>\n+    public HelloCommand(GreetingService greetingService) {\n+        this.greetingService = greetingService;\n+    }\n+\n+    @Override\n+    public void run() {\n+        greetingService.sayHello(name);\n+    }\n+}\n+\n+@Dependent\n+class GreetingService {\n+    void sayHello(String name) {\n+        System.out.println(\"Hello \" + name + \"!\");\n+    }\n+}\n+----\n+<1> If there is only one class annotated with `picocli.CommandLine.Command` it will be used as entry point to Picocli CommandLine.\n+<2> All classes annotated with `picocli.CommandLine.Command` are registered as CDI beans.\n+\n+== Command line application with multiple Commands\n+\n+When multiple classes have the `picocli.CommandLine.Command` annotation, then one of them needs to be also annotated with `io.quarkus.picocli.runtime.annotations.TopCommand`.\n+This can be overwritten with the `quarkus.picocli.top-command` property.\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import io.quarkus.picocli.runtime.annotations.TopCommand;\n+import picocli.CommandLine;\n+\n+@TopCommand\n+@CommandLine.Command(mixinStandardHelpOptions = true, subcommands = {HelloCommand.class, GoodByeCommand.class})\n+public class EntryCommand {\n+}\n+\n+@CommandLine.Command(name = \"hello\", description = \"Greet World!\")\n+class HelloCommand implements Runnable {\n+\n+    @Override\n+    public void run() {\n+        System.out.println(\"Hello World!\");\n+    }\n+}\n+\n+@CommandLine.Command(name = \"goodbye\", description = \"Say goodbye to World!\")\n+class GoodByeCommand implements Runnable {\n+\n+    @Override\n+    public void run() {\n+        System.out.println(\"Goodbye World!\");\n+    }\n+}\n+----\n+\n+== Customizing Picocli CommandLine instance\n+\n+You can customize CommandLine classes used by the `picocli` extension by producing your own bean instance:\n+\n+[source,java]\n+----\n+package com.acme.picocli;\n+\n+import io.quarkus.picocli.runtime.PicocliCommandLineFactory;\n+import io.quarkus.picocli.runtime.annotations.TopCommand;\n+import picocli.CommandLine;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+\n+@TopCommand\n+@CommandLine.Command\n+public class EntryCommand implements Runnable {\n+    @CommandLine.Spec\n+    CommandLine.Model.CommandSpec spec;\n+\n+    @Override\n+    public void run() {\n+        System.out.println(\"My name is: \" + spec.name());\n+    }\n+}\n+\n+@ApplicationScoped\n+class CustomConfiguration {\n+\n+    @Produces\n+    CommandLine customCommandLine(PicocliCommandLineFactory factory) { // <1>\n+        return factory.create().setCommandName(\"CustomizedName\");\n+    }\n+}\n+----\n+<1> `PicocliCommandLineFactory` will create an instance of CommandLine with `TopCommand` and `CommandLine.IFactory` injected.\n+\n+== Different entry command for each profile\n+\n+It is possible to create different entry command for each profile, using `@IfBuildProfile`:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e70cd111caf44e959fb2836a0bcc323e8ea8e88"}, "originalPosition": 157}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7e70cd111caf44e959fb2836a0bcc323e8ea8e88", "author": {"user": {"login": "mgorniew", "name": "Micha\u0142 G\u00f3rniewski"}}, "url": "https://github.com/quarkusio/quarkus/commit/7e70cd111caf44e959fb2836a0bcc323e8ea8e88", "committedDate": "2020-05-15T17:35:03Z", "message": "Create picocli extension"}, "afterCommit": {"oid": "deb179c8a03ec3174257513c253fcdc3927b3792", "author": {"user": {"login": "mgorniew", "name": "Micha\u0142 G\u00f3rniewski"}}, "url": "https://github.com/quarkusio/quarkus/commit/deb179c8a03ec3174257513c253fcdc3927b3792", "committedDate": "2020-05-16T21:10:19Z", "message": "Create picocli extension"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "deb179c8a03ec3174257513c253fcdc3927b3792", "author": {"user": {"login": "mgorniew", "name": "Micha\u0142 G\u00f3rniewski"}}, "url": "https://github.com/quarkusio/quarkus/commit/deb179c8a03ec3174257513c253fcdc3927b3792", "committedDate": "2020-05-16T21:10:19Z", "message": "Create picocli extension"}, "afterCommit": {"oid": "36b7a325e64dcc6c7e5167a29583880eb20e1370", "author": {"user": {"login": "mgorniew", "name": "Micha\u0142 G\u00f3rniewski"}}, "url": "https://github.com/quarkusio/quarkus/commit/36b7a325e64dcc6c7e5167a29583880eb20e1370", "committedDate": "2020-05-16T21:21:54Z", "message": "Create picocli extension"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMTE5ODg2", "url": "https://github.com/quarkusio/quarkus/pull/9180#pullrequestreview-413119886", "createdAt": "2020-05-17T01:26:45Z", "commit": {"oid": "36b7a325e64dcc6c7e5167a29583880eb20e1370"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMToyNjo0NVrOGWdlGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMToyNjo0NVrOGWdlGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwNjQ4OQ==", "bodyText": "The latest picocli version is now 4.3.2.", "url": "https://github.com/quarkusio/quarkus/pull/9180#discussion_r426206489", "createdAt": "2020-05-17T01:26:45Z", "author": {"login": "remkop"}, "path": "bom/runtime/pom.xml", "diffHunk": "@@ -195,6 +195,7 @@\n         <scram-client.version>2.1</scram-client.version>\n         <grpc-jprotoc.version>1.0.1</grpc-jprotoc.version>\n         <grpc.version>1.29.0</grpc.version>\n+        <picocli.version>4.2.0</picocli.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36b7a325e64dcc6c7e5167a29583880eb20e1370"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e510cf42edffd1d6243f2d2c3079f4be0ce832d8", "author": {"user": {"login": "mgorniew", "name": "Micha\u0142 G\u00f3rniewski"}}, "url": "https://github.com/quarkusio/quarkus/commit/e510cf42edffd1d6243f2d2c3079f4be0ce832d8", "committedDate": "2020-05-17T11:49:22Z", "message": "Create picocli extension"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "36b7a325e64dcc6c7e5167a29583880eb20e1370", "author": {"user": {"login": "mgorniew", "name": "Micha\u0142 G\u00f3rniewski"}}, "url": "https://github.com/quarkusio/quarkus/commit/36b7a325e64dcc6c7e5167a29583880eb20e1370", "committedDate": "2020-05-16T21:21:54Z", "message": "Create picocli extension"}, "afterCommit": {"oid": "e510cf42edffd1d6243f2d2c3079f4be0ce832d8", "author": {"user": {"login": "mgorniew", "name": "Micha\u0142 G\u00f3rniewski"}}, "url": "https://github.com/quarkusio/quarkus/commit/e510cf42edffd1d6243f2d2c3079f4be0ce832d8", "committedDate": "2020-05-17T11:49:22Z", "message": "Create picocli extension"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMzA4NzYy", "url": "https://github.com/quarkusio/quarkus/pull/9180#pullrequestreview-413308762", "createdAt": "2020-05-18T06:44:10Z", "commit": {"oid": "e510cf42edffd1d6243f2d2c3079f4be0ce832d8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNDEwOTAz", "url": "https://github.com/quarkusio/quarkus/pull/9180#pullrequestreview-413410903", "createdAt": "2020-05-18T09:13:22Z", "commit": {"oid": "e510cf42edffd1d6243f2d2c3079f4be0ce832d8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3381, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}