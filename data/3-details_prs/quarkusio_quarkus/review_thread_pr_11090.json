{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5MDM3MTE2", "number": 11090, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDozNzo1M1rOETn_KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDozNzo1M1rOETn_KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDEzNTQ1OnYy", "diffSide": "RIGHT", "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesDeployer.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDozNzo1M1rOG5doQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMToxMjowM1rOG5enXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwNzQ1Ng==", "bodyText": "Two things:\n\nThis would print all deployed routes. Most of the time, there will be just 1, but wouldn't it be better to print only the application's route? That is, the one with the same name as all the other generated resources.\nIf TLS is configured in the route, shouldn't we print https://...?", "url": "https://github.com/quarkusio/quarkus/pull/11090#discussion_r462907456", "createdAt": "2020-07-30T10:37:53Z", "author": {"login": "Ladicek"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesDeployer.java", "diffHunk": "@@ -192,6 +196,21 @@ private DeploymentResultBuildItem deploy(DeploymentTargetEntry deploymentTarget,\n \n     }\n \n+    private void printExposeInformation(KubernetesClient client, KubernetesList list) {\n+        List<HasMetadata> items = list.getItems();\n+        for (HasMetadata item : items) {\n+            if (Constants.ROUTE_API_GROUP.equals(item.getApiVersion()) && Constants.ROUTE.equals(item.getKind())) {\n+                try {\n+                    DefaultOpenShiftClient openShiftClient = new DefaultOpenShiftClient(client.getConfiguration());\n+                    Route route = openShiftClient.routes().withName(item.getMetadata().getName()).get();\n+                    log.infov(\"The deployed application can be accessed at: http://{0}\", route.getSpec().getHost());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf1b9ee148faf452dd7e534f77fd73a85d912d39"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwNzk0Ng==", "bodyText": "Ah, also -- new DefaultOpenShiftClient for each deployed route?\nAnd do we even need to create an OpenShiftClient when we already have the KubernetesClient? Isn't it enough to .adapt?", "url": "https://github.com/quarkusio/quarkus/pull/11090#discussion_r462907946", "createdAt": "2020-07-30T10:38:54Z", "author": {"login": "Ladicek"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesDeployer.java", "diffHunk": "@@ -192,6 +196,21 @@ private DeploymentResultBuildItem deploy(DeploymentTargetEntry deploymentTarget,\n \n     }\n \n+    private void printExposeInformation(KubernetesClient client, KubernetesList list) {\n+        List<HasMetadata> items = list.getItems();\n+        for (HasMetadata item : items) {\n+            if (Constants.ROUTE_API_GROUP.equals(item.getApiVersion()) && Constants.ROUTE.equals(item.getKind())) {\n+                try {\n+                    DefaultOpenShiftClient openShiftClient = new DefaultOpenShiftClient(client.getConfiguration());\n+                    Route route = openShiftClient.routes().withName(item.getMetadata().getName()).get();\n+                    log.infov(\"The deployed application can be accessed at: http://{0}\", route.getSpec().getHost());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwNzQ1Ng=="}, "originalCommit": {"oid": "bf1b9ee148faf452dd7e534f77fd73a85d912d39"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwOTk4Mg==", "bodyText": "I don't see how that can happen - as the code reads the Route from the generated manifest\nGood idea. I assume just checking if tls is part of the spec would suffice?", "url": "https://github.com/quarkusio/quarkus/pull/11090#discussion_r462909982", "createdAt": "2020-07-30T10:43:12Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesDeployer.java", "diffHunk": "@@ -192,6 +196,21 @@ private DeploymentResultBuildItem deploy(DeploymentTargetEntry deploymentTarget,\n \n     }\n \n+    private void printExposeInformation(KubernetesClient client, KubernetesList list) {\n+        List<HasMetadata> items = list.getItems();\n+        for (HasMetadata item : items) {\n+            if (Constants.ROUTE_API_GROUP.equals(item.getApiVersion()) && Constants.ROUTE.equals(item.getKind())) {\n+                try {\n+                    DefaultOpenShiftClient openShiftClient = new DefaultOpenShiftClient(client.getConfiguration());\n+                    Route route = openShiftClient.routes().withName(item.getMetadata().getName()).get();\n+                    log.infov(\"The deployed application can be accessed at: http://{0}\", route.getSpec().getHost());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwNzQ1Ng=="}, "originalCommit": {"oid": "bf1b9ee148faf452dd7e534f77fd73a85d912d39"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkxMDMyNQ==", "bodyText": "And do we even need to create an OpenShiftClient when we already have the KubernetesClient? Isn't it enough to .adapt?\n\nThis one is easy, I didn't know about it :P", "url": "https://github.com/quarkusio/quarkus/pull/11090#discussion_r462910325", "createdAt": "2020-07-30T10:43:57Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesDeployer.java", "diffHunk": "@@ -192,6 +196,21 @@ private DeploymentResultBuildItem deploy(DeploymentTargetEntry deploymentTarget,\n \n     }\n \n+    private void printExposeInformation(KubernetesClient client, KubernetesList list) {\n+        List<HasMetadata> items = list.getItems();\n+        for (HasMetadata item : items) {\n+            if (Constants.ROUTE_API_GROUP.equals(item.getApiVersion()) && Constants.ROUTE.equals(item.getKind())) {\n+                try {\n+                    DefaultOpenShiftClient openShiftClient = new DefaultOpenShiftClient(client.getConfiguration());\n+                    Route route = openShiftClient.routes().withName(item.getMetadata().getName()).get();\n+                    log.infov(\"The deployed application can be accessed at: http://{0}\", route.getSpec().getHost());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwNzQ1Ng=="}, "originalCommit": {"oid": "bf1b9ee148faf452dd7e534f77fd73a85d912d39"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkxMDY2MA==", "bodyText": "If I understand correctly, this can happen when you put \"supplementary applications\" into src/main/kubernetes.\nI think so, yes.", "url": "https://github.com/quarkusio/quarkus/pull/11090#discussion_r462910660", "createdAt": "2020-07-30T10:44:40Z", "author": {"login": "Ladicek"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesDeployer.java", "diffHunk": "@@ -192,6 +196,21 @@ private DeploymentResultBuildItem deploy(DeploymentTargetEntry deploymentTarget,\n \n     }\n \n+    private void printExposeInformation(KubernetesClient client, KubernetesList list) {\n+        List<HasMetadata> items = list.getItems();\n+        for (HasMetadata item : items) {\n+            if (Constants.ROUTE_API_GROUP.equals(item.getApiVersion()) && Constants.ROUTE.equals(item.getKind())) {\n+                try {\n+                    DefaultOpenShiftClient openShiftClient = new DefaultOpenShiftClient(client.getConfiguration());\n+                    Route route = openShiftClient.routes().withName(item.getMetadata().getName()).get();\n+                    log.infov(\"The deployed application can be accessed at: http://{0}\", route.getSpec().getHost());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwNzQ1Ng=="}, "originalCommit": {"oid": "bf1b9ee148faf452dd7e534f77fd73a85d912d39"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkxMTIzOA==", "bodyText": "Interesting... I didn't think of that one. Let's be defensive", "url": "https://github.com/quarkusio/quarkus/pull/11090#discussion_r462911238", "createdAt": "2020-07-30T10:45:52Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesDeployer.java", "diffHunk": "@@ -192,6 +196,21 @@ private DeploymentResultBuildItem deploy(DeploymentTargetEntry deploymentTarget,\n \n     }\n \n+    private void printExposeInformation(KubernetesClient client, KubernetesList list) {\n+        List<HasMetadata> items = list.getItems();\n+        for (HasMetadata item : items) {\n+            if (Constants.ROUTE_API_GROUP.equals(item.getApiVersion()) && Constants.ROUTE.equals(item.getKind())) {\n+                try {\n+                    DefaultOpenShiftClient openShiftClient = new DefaultOpenShiftClient(client.getConfiguration());\n+                    Route route = openShiftClient.routes().withName(item.getMetadata().getName()).get();\n+                    log.infov(\"The deployed application can be accessed at: http://{0}\", route.getSpec().getHost());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwNzQ1Ng=="}, "originalCommit": {"oid": "bf1b9ee148faf452dd7e534f77fd73a85d912d39"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkxMzM1Nw==", "bodyText": "Actually I think both approaches may make sense.\nIf there's just one route, print it the way you do now.\nIf there's more, than first print the \"other\" routes, with a slightly different message (e.g. \"Deployment xxx can be accessed at: ...\"), and print the application's route at the end, with current message.\nYour call :-)", "url": "https://github.com/quarkusio/quarkus/pull/11090#discussion_r462913357", "createdAt": "2020-07-30T10:50:27Z", "author": {"login": "Ladicek"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesDeployer.java", "diffHunk": "@@ -192,6 +196,21 @@ private DeploymentResultBuildItem deploy(DeploymentTargetEntry deploymentTarget,\n \n     }\n \n+    private void printExposeInformation(KubernetesClient client, KubernetesList list) {\n+        List<HasMetadata> items = list.getItems();\n+        for (HasMetadata item : items) {\n+            if (Constants.ROUTE_API_GROUP.equals(item.getApiVersion()) && Constants.ROUTE.equals(item.getKind())) {\n+                try {\n+                    DefaultOpenShiftClient openShiftClient = new DefaultOpenShiftClient(client.getConfiguration());\n+                    Route route = openShiftClient.routes().withName(item.getMetadata().getName()).get();\n+                    log.infov(\"The deployed application can be accessed at: http://{0}\", route.getSpec().getHost());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwNzQ1Ng=="}, "originalCommit": {"oid": "bf1b9ee148faf452dd7e534f77fd73a85d912d39"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyMzYxNQ==", "bodyText": "Let's keep the logs are clutter free as possible \ud83d\ude06 .\nI went with only printing the application Route", "url": "https://github.com/quarkusio/quarkus/pull/11090#discussion_r462923615", "createdAt": "2020-07-30T11:12:03Z", "author": {"login": "geoand"}, "path": "extensions/kubernetes/vanilla/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesDeployer.java", "diffHunk": "@@ -192,6 +196,21 @@ private DeploymentResultBuildItem deploy(DeploymentTargetEntry deploymentTarget,\n \n     }\n \n+    private void printExposeInformation(KubernetesClient client, KubernetesList list) {\n+        List<HasMetadata> items = list.getItems();\n+        for (HasMetadata item : items) {\n+            if (Constants.ROUTE_API_GROUP.equals(item.getApiVersion()) && Constants.ROUTE.equals(item.getKind())) {\n+                try {\n+                    DefaultOpenShiftClient openShiftClient = new DefaultOpenShiftClient(client.getConfiguration());\n+                    Route route = openShiftClient.routes().withName(item.getMetadata().getName()).get();\n+                    log.infov(\"The deployed application can be accessed at: http://{0}\", route.getSpec().getHost());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkwNzQ1Ng=="}, "originalCommit": {"oid": "bf1b9ee148faf452dd7e534f77fd73a85d912d39"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 776, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}