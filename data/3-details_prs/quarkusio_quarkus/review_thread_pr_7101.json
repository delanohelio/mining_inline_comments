{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyODM1NjE1", "number": 7101, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTozMjozM1rODeYgLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTozMjozM1rODeYgLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTg1MzI1OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/qute.adoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTozMjozM1rOFnfGQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjozMjoxOFrOFnkXvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk0ODI5MQ==", "bodyText": "Looks like it's the same in both cases? Or did I misunderstand something?", "url": "https://github.com/quarkusio/quarkus/pull/7101#discussion_r376948291", "createdAt": "2020-02-10T09:32:33Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/qute.adoc", "diffHunk": "@@ -263,6 +263,29 @@ public class ReportGenerator {\n <2> Use the `@Scheduled` annotation to instruct Quarkus to execute this method on the half hour. For more information see the link:scheduler[Scheduler] guide.\n <3> The `TemplateInstance.render()` method triggers rendering. Note that this method blocks the current thread.\n \n+== Reactive and Asynchronous APIs\n+\n+Templates can be rendered as a `CompletionStage<String>` (completed with the rendered output asynchronously) or as `Publisher<String>` containing the rendered chunks:\n+\n+[source, java]\n+----\n+CompletionStage<String> async = template.data(\"name\", \"neo\").renderAsync();\n+Publisher<String> publisher = template.data(\"name\", \"neo\").publisher();\n+----\n+\n+In the case of a `Publisher`, the template is rendered chunk by chunk following the requests from the subscriber.\n+The rendering is not started until a subscriber requests it.\n+The returned `Publisher` is an instance of `io.smallrye.mutiny.Multi`.\n+\n+It is possible to create an instance of `io.smallrye.mutiny.Uni` as follows:\n+\n+[source, java]\n+----\n+Uni<String> uni = Uni.createFrom().completionStage(() -> template.data(\"name\", \"neo\").renderAsync());\n+----\n+\n+In this case, the rendering only starts once the subscriber requests it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40d19cd1956da935c5c8cff02755ae83817d99fe"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzNDY4NQ==", "bodyText": "If you use a renderAsync() the rendering process starts even if you don't have anyone listening / prepared to receive the output. With Uni or Multi, it would only start if someone is there to receive it.", "url": "https://github.com/quarkusio/quarkus/pull/7101#discussion_r377034685", "createdAt": "2020-02-10T12:32:18Z", "author": {"login": "cescoffier"}, "path": "docs/src/main/asciidoc/qute.adoc", "diffHunk": "@@ -263,6 +263,29 @@ public class ReportGenerator {\n <2> Use the `@Scheduled` annotation to instruct Quarkus to execute this method on the half hour. For more information see the link:scheduler[Scheduler] guide.\n <3> The `TemplateInstance.render()` method triggers rendering. Note that this method blocks the current thread.\n \n+== Reactive and Asynchronous APIs\n+\n+Templates can be rendered as a `CompletionStage<String>` (completed with the rendered output asynchronously) or as `Publisher<String>` containing the rendered chunks:\n+\n+[source, java]\n+----\n+CompletionStage<String> async = template.data(\"name\", \"neo\").renderAsync();\n+Publisher<String> publisher = template.data(\"name\", \"neo\").publisher();\n+----\n+\n+In the case of a `Publisher`, the template is rendered chunk by chunk following the requests from the subscriber.\n+The rendering is not started until a subscriber requests it.\n+The returned `Publisher` is an instance of `io.smallrye.mutiny.Multi`.\n+\n+It is possible to create an instance of `io.smallrye.mutiny.Uni` as follows:\n+\n+[source, java]\n+----\n+Uni<String> uni = Uni.createFrom().completionStage(() -> template.data(\"name\", \"neo\").renderAsync());\n+----\n+\n+In this case, the rendering only starts once the subscriber requests it.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk0ODI5MQ=="}, "originalCommit": {"oid": "40d19cd1956da935c5c8cff02755ae83817d99fe"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 945, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}