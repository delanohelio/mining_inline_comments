{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2MjUxODIw", "number": 11331, "title": "Minimal *-deployment dependencies for integration-tests", "bodyText": "Resolves #10859 (once finalized)\nSee also discussion on zulip where we have already discussed a few approaches and details.\nA violation looks like this:\n[INFO] --- maven-enforcer-plugin:3.0.0-M3:enforce (enforce-deployment-deps) @ quarkus-integration-test-cache ---\n[WARNING] Rule 0: io.quarkus.enforcer.RequiresMinimalDeploymentDependency failed with message:\nThe following *-deployment dependencies are missing/configured incorrectly:\n    io.quarkus:quarkus-hibernate-orm-panache-deployment:999-SNAPSHOT\n    io.quarkus:quarkus-jdbc-h2-deployment:999-SNAPSHOT\n    io.quarkus:quarkus-resteasy-jsonb-deployment:999-SNAPSHOT\n    io.quarkus:quarkus-smallrye-context-propagation-deployment:999-SNAPSHOT\n\nEach of these dependencies has to be configured as follows to get a consistent build order:\n    <dependency>\n        <groupId>GROUP-IP</groupId>\n        <artifactId>ARTIFACT-ID</artifactId>\n        <version>${project.version}</version>\n        <type>pom</type>\n        <scope>test</scope>\n        <exclusions>\n            <exclusion>\n                <groupId>*</groupId>\n                <artifactId>*</artifactId>\n            </exclusion>\n        </exclusions>\n    </dependency>\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n\nThis is WIP for now. General things I'd like to discuss:\n\n Location under devtools yay or nay? Seemed to be the best choice. Alternative: independent-projects\n General upgrade of enforcer-plugin from M2 to M3 yay or nay? Clear yay from me.\n Should every required dep be printed fully in XML to copy it \"blindly\" to the pom without much effort?\n Test coverage in the new module via maven-invoker-plugin yay or nay? I tend to yay.\n We should consider using this rule also outside of integration-tests (via a subsequent PR) to make the entire reactor build order consistent, not just the test part. This would then also allow us to build incrementally, e.g. with gitflow-incremental-builder, which would cut down CI (and local) build times massively. For this we need to decide whether those \"symbolic\" dependencies would be problematic in case they show up in the \"userspace\".\nPostponed! Will restart that discussion with another PR.\n\nObvious tasks left:\n\n pom.xml cleanup\n pull the rule up to integration-tests parent\n add the now required deployment deps to each submodule (the \"fun part\") and switch level of rule from WARN to ERROR\n drop \"Symbolic\" from the pom.xml comments & enrich rule with some javadoc\n\nAny feedback is very much appreciated!", "createdAt": "2020-08-11T17:37:10Z", "url": "https://github.com/quarkusio/quarkus/pull/11331", "merged": true, "mergeCommit": {"oid": "a512b73520718a736a218fde3be48f00bbba0d54"}, "closed": true, "closedAt": "2020-08-27T14:56:46Z", "author": {"login": "famod"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc96j3iAFqTQ2NTI5NDM2NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdDBpJBgFqTQ3NjgwMzMzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1Mjk0MzY0", "url": "https://github.com/quarkusio/quarkus/pull/11331#pullrequestreview-465294364", "createdAt": "2020-08-11T17:49:07Z", "commit": {"oid": "b606b3670d63f2389796bb519be51dee6ac2ff30"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNzo0OTowOFrOG_CtqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNzo0OTowOFrOG_CtqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc1NzkyOA==", "bodyText": "Example:\n$ mvn clean validate -f integration-tests/cache/\n[INFO] Scanning for projects...\n[INFO]\n[INFO] -------------< io.quarkus:quarkus-integration-test-cache >--------------\n[INFO] Building Quarkus - Integration Tests - Cache 999-SNAPSHOT\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO]\n[INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ quarkus-integration-test-cache ---\n[INFO]\n[INFO] --- maven-enforcer-plugin:3.0.0-M3:enforce (enforce) @ quarkus-integration-test-cache ---\n[INFO]\n[INFO] --- maven-enforcer-plugin:3.0.0-M3:enforce (enforce-java-version) @ quarkus-integration-test-cache ---\n[INFO]\n[INFO] --- maven-enforcer-plugin:3.0.0-M3:enforce (enforce-maven-version) @ quarkus-integration-test-cache ---\n[INFO]\n[INFO] --- maven-enforcer-plugin:3.0.0-M3:enforce (enforce-deployment-deps) @ quarkus-integration-test-cache ---\n[WARNING] Artifact is not resolved, consider using a later build goal like 'package': io.quarkus:quarkus-junit5:jar:999-SNAPSHOT:test\n[WARNING] Artifact is not resolved, consider using a later build goal like 'package': io.quarkus:quarkus-resteasy-jsonb:jar:999-SNAPSHOT:compile\n[WARNING] Artifact is not resolved, consider using a later build goal like 'package': io.quarkus:quarkus-hibernate-orm-panache:jar:999-SNAPSHOT:compile\n[WARNING] Artifact is not resolved, consider using a later build goal like 'package': io.quarkus:quarkus-cache:jar:999-SNAPSHOT:compile\n[WARNING] Artifact is not resolved, consider using a later build goal like 'package': io.quarkus:quarkus-smallrye-context-propagation:jar:999-SNAPSHOT:compile\n[WARNING] Artifact is not resolved, consider using a later build goal like 'package': io.quarkus:quarkus-jdbc-h2:jar:999-SNAPSHOT:compile\n[WARNING] Artifact is not resolved, consider using a later build goal like 'package': io.quarkus:quarkus-test-h2:jar:999-SNAPSHOT:test\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n\nThe warnings vanish when test is used instead of validate and the build will fail (because some deployment deps are missing).\nThis is not ideal, but I'd say it is sufficient for what the rule is supposed to do, which is to enforce the build order primarily in CI.\nCI will always use a \"late\" phase/goal (at least test).", "url": "https://github.com/quarkusio/quarkus/pull/11331#discussion_r468757928", "createdAt": "2020-08-11T17:49:08Z", "author": {"login": "famod"}, "path": "devtools/enforcer-rules/src/main/java/io/quarkus/enforcer/RequiresMinimalDeploymentDependency.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package io.quarkus.enforcer;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.enforcer.rule.api.EnforcerRule;\n+import org.apache.maven.enforcer.rule.api.EnforcerRuleException;\n+import org.apache.maven.enforcer.rule.api.EnforcerRuleHelper;\n+import org.apache.maven.model.Dependency;\n+import org.apache.maven.plugin.logging.Log;\n+import org.apache.maven.project.MavenProject;\n+import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluationException;\n+\n+public class RequiresMinimalDeploymentDependency implements EnforcerRule {\n+\n+    private static final String GROUP_ID_FILTER = \"io.quarkus\";\n+\n+    private static final Map<String, Optional<String>> DEPLOYMENT_GAV_CACHE = new ConcurrentHashMap<>();\n+\n+    private Log logger;\n+\n+    @Override\n+    public void execute(EnforcerRuleHelper helper) throws EnforcerRuleException {\n+        logger = helper.getLog();\n+        MavenProject project;\n+        try {\n+            project = (MavenProject) helper.evaluate(\"${project}\");\n+        } catch (ExpressionEvaluationException e) {\n+            throw new IllegalStateException(e);\n+        }\n+\n+        // general notes:\n+        // - \"artifacts\" are needed to retrieve the actual jar files\n+        // - \"dependencies\" are needed to limit the scope to only the direct dependencies of the current module\n+        //   and to check for the proper scope, type and exclusions\n+        // - parents are not gathered here since it is expected that the rule is also active for those parents\n+        //   or those parents are not relevant\n+\n+        Map<String, Dependency> directQuarkusDepsByGAV = project.getDependencies().stream()\n+                .filter(d -> d.getGroupId().equals(GROUP_ID_FILTER))\n+                .collect(Collectors.toMap(d -> d.getGroupId() + \":\" + d.getArtifactId() + \":\" + d.getVersion(), d -> d));\n+\n+        Map<String, Artifact> nonDeploymentQuarkusArtifactsByGAV = project.getArtifacts().stream()\n+                .filter(artifact -> artifact.getGroupId().equals(GROUP_ID_FILTER))\n+                .filter(artifact -> !artifact.getArtifactId().endsWith(\"-deployment\"))\n+                .collect(Collectors.toMap(a -> a.getGroupId() + \":\" + a.getArtifactId() + \":\" + a.getVersion(), a -> a));\n+\n+        String missingDeploymentDeps = nonDeploymentQuarkusArtifactsByGAV.entrySet().parallelStream()\n+                .filter(entry -> directQuarkusDepsByGAV.containsKey(entry.getKey())) // only direct deps\n+                .map(entry -> DEPLOYMENT_GAV_CACHE.computeIfAbsent(entry.getKey(), k -> parseDeploymentGAV(entry.getValue())))\n+                .filter(optDeploymentGAV -> optDeploymentGAV\n+                        .map(deploymentGAV -> !isMinimalDeploymentDepPresent(deploymentGAV, directQuarkusDepsByGAV))\n+                        .orElse(false))\n+                .map(Optional::get)\n+                .sorted()\n+                .collect(Collectors.joining(\"\\n    \"));\n+\n+        if (!missingDeploymentDeps.isEmpty()) {\n+            throw new EnforcerRuleException(\"The following *-deployment dependencies are missing/configured incorrectly:\\n\"\n+                    + \"    \" + missingDeploymentDeps\n+                    + \"\\n\\nEach of these dependencies has to be configured as follows to get a consistent build order:\\n\"\n+                    + \"    <dependency>\\n\"\n+                    + \"        <groupId>GROUP-IP</groupId>\\n\"\n+                    + \"        <artifactId>ARTIFACT-ID</artifactId>\\n\"\n+                    + \"        <version>${project.version}</version>\\n\"\n+                    + \"        <type>pom</type>\\n\"\n+                    + \"        <scope>test</scope>\\n\"\n+                    + \"        <exclusions>\\n\"\n+                    + \"            <exclusion>\\n\"\n+                    + \"                <groupId>*</groupId>\\n\"\n+                    + \"                <artifactId>*</artifactId>\\n\"\n+                    + \"            </exclusion>\\n\"\n+                    + \"        </exclusions>\\n\"\n+                    + \"    </dependency>\");\n+        }\n+    }\n+\n+    private Optional<String> parseDeploymentGAV(Artifact artifact) {\n+        if (!artifact.isResolved()) {\n+            // To avoid this \"soft exit\", explicit resolving would be necessary but that is pretty elaborate in an enforcer rule.\n+            // If the build goal is \"late\" enough, artifacts for the respective scope *will* be resolved automatically.\n+            logger.warn(\"Artifact is not resolved, consider using a later build goal like 'package': \" + artifact);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b606b3670d63f2389796bb519be51dee6ac2ff30"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1Mjk2NTM2", "url": "https://github.com/quarkusio/quarkus/pull/11331#pullrequestreview-465296536", "createdAt": "2020-08-11T17:52:00Z", "commit": {"oid": "b606b3670d63f2389796bb519be51dee6ac2ff30"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNzo1MjowMFrOG_C0og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNzo1MjowMFrOG_C0og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc1OTcxNA==", "bodyText": "Note: This shall avoid re-checking for (and eventually re-parsing of) quarkus-extension.properties for dependencies that are used multiple times throughout the entire build reactor.", "url": "https://github.com/quarkusio/quarkus/pull/11331#discussion_r468759714", "createdAt": "2020-08-11T17:52:00Z", "author": {"login": "famod"}, "path": "devtools/enforcer-rules/src/main/java/io/quarkus/enforcer/RequiresMinimalDeploymentDependency.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package io.quarkus.enforcer;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.enforcer.rule.api.EnforcerRule;\n+import org.apache.maven.enforcer.rule.api.EnforcerRuleException;\n+import org.apache.maven.enforcer.rule.api.EnforcerRuleHelper;\n+import org.apache.maven.model.Dependency;\n+import org.apache.maven.plugin.logging.Log;\n+import org.apache.maven.project.MavenProject;\n+import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluationException;\n+\n+public class RequiresMinimalDeploymentDependency implements EnforcerRule {\n+\n+    private static final String GROUP_ID_FILTER = \"io.quarkus\";\n+\n+    private static final Map<String, Optional<String>> DEPLOYMENT_GAV_CACHE = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b606b3670d63f2389796bb519be51dee6ac2ff30"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NjA5ODY1", "url": "https://github.com/quarkusio/quarkus/pull/11331#pullrequestreview-465609865", "createdAt": "2020-08-12T05:56:30Z", "commit": {"oid": "b606b3670d63f2389796bb519be51dee6ac2ff30"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNTo1NjozMFrOG_SyuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNTo1NjozMFrOG_SyuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyMTM2OQ==", "bodyText": "It would be good to have some message for this exception", "url": "https://github.com/quarkusio/quarkus/pull/11331#discussion_r469021369", "createdAt": "2020-08-12T05:56:30Z", "author": {"login": "michalszynkiewicz"}, "path": "devtools/enforcer-rules/src/main/java/io/quarkus/enforcer/RequiresMinimalDeploymentDependency.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package io.quarkus.enforcer;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.enforcer.rule.api.EnforcerRule;\n+import org.apache.maven.enforcer.rule.api.EnforcerRuleException;\n+import org.apache.maven.enforcer.rule.api.EnforcerRuleHelper;\n+import org.apache.maven.model.Dependency;\n+import org.apache.maven.plugin.logging.Log;\n+import org.apache.maven.project.MavenProject;\n+import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluationException;\n+\n+public class RequiresMinimalDeploymentDependency implements EnforcerRule {\n+\n+    private static final String GROUP_ID_FILTER = \"io.quarkus\";\n+\n+    private static final Map<String, Optional<String>> DEPLOYMENT_GAV_CACHE = new ConcurrentHashMap<>();\n+\n+    private Log logger;\n+\n+    @Override\n+    public void execute(EnforcerRuleHelper helper) throws EnforcerRuleException {\n+        logger = helper.getLog();\n+        MavenProject project;\n+        try {\n+            project = (MavenProject) helper.evaluate(\"${project}\");\n+        } catch (ExpressionEvaluationException e) {\n+            throw new IllegalStateException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b606b3670d63f2389796bb519be51dee6ac2ff30"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NjIxOTkx", "url": "https://github.com/quarkusio/quarkus/pull/11331#pullrequestreview-465621991", "createdAt": "2020-08-12T06:25:41Z", "commit": {"oid": "b606b3670d63f2389796bb519be51dee6ac2ff30"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjoyNTo0MVrOG_TagQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjoyNTo0MVrOG_TagQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzMTU1Mw==", "bodyText": "just a note, I'm wondering if startsWith won't be safer here (and in line 55) in case we e.g. wanted to move grpc stuff to io.quarkus.grpc", "url": "https://github.com/quarkusio/quarkus/pull/11331#discussion_r469031553", "createdAt": "2020-08-12T06:25:41Z", "author": {"login": "michalszynkiewicz"}, "path": "devtools/enforcer-rules/src/main/java/io/quarkus/enforcer/RequiresMinimalDeploymentDependency.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package io.quarkus.enforcer;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.enforcer.rule.api.EnforcerRule;\n+import org.apache.maven.enforcer.rule.api.EnforcerRuleException;\n+import org.apache.maven.enforcer.rule.api.EnforcerRuleHelper;\n+import org.apache.maven.model.Dependency;\n+import org.apache.maven.plugin.logging.Log;\n+import org.apache.maven.project.MavenProject;\n+import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluationException;\n+\n+public class RequiresMinimalDeploymentDependency implements EnforcerRule {\n+\n+    private static final String GROUP_ID_FILTER = \"io.quarkus\";\n+\n+    private static final Map<String, Optional<String>> DEPLOYMENT_GAV_CACHE = new ConcurrentHashMap<>();\n+\n+    private Log logger;\n+\n+    @Override\n+    public void execute(EnforcerRuleHelper helper) throws EnforcerRuleException {\n+        logger = helper.getLog();\n+        MavenProject project;\n+        try {\n+            project = (MavenProject) helper.evaluate(\"${project}\");\n+        } catch (ExpressionEvaluationException e) {\n+            throw new IllegalStateException(e);\n+        }\n+\n+        // general notes:\n+        // - \"artifacts\" are needed to retrieve the actual jar files\n+        // - \"dependencies\" are needed to limit the scope to only the direct dependencies of the current module\n+        //   and to check for the proper scope, type and exclusions\n+        // - parents are not gathered here since it is expected that the rule is also active for those parents\n+        //   or those parents are not relevant\n+\n+        Map<String, Dependency> directQuarkusDepsByGAV = project.getDependencies().stream()\n+                .filter(d -> d.getGroupId().equals(GROUP_ID_FILTER))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b606b3670d63f2389796bb519be51dee6ac2ff30"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NjI0MjQ4", "url": "https://github.com/quarkusio/quarkus/pull/11331#pullrequestreview-465624248", "createdAt": "2020-08-12T06:30:42Z", "commit": {"oid": "b606b3670d63f2389796bb519be51dee6ac2ff30"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjozMDo0MlrOG_ThvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjozMDo0MlrOG_ThvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzMzQwNQ==", "bodyText": "this will eventually go into integration-tests/pom.xml, right?", "url": "https://github.com/quarkusio/quarkus/pull/11331#discussion_r469033405", "createdAt": "2020-08-12T06:30:42Z", "author": {"login": "michalszynkiewicz"}, "path": "integration-tests/cache/pom.xml", "diffHunk": "@@ -67,6 +80,31 @@\n                     </execution>\n                 </executions>\n             </plugin>\n+            <plugin>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b606b3670d63f2389796bb519be51dee6ac2ff30"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNTc3OTgx", "url": "https://github.com/quarkusio/quarkus/pull/11331#pullrequestreview-471577981", "createdAt": "2020-08-20T13:06:50Z", "commit": {"oid": "849fd61afbcda043afb07565aacbf6575c1f0a55"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzowNjo1MFrOHD_4SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzowNjo1MFrOHD_4SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1NDM3Nw==", "bodyText": "This is a bit fishy, but I had to introduce this check for at least one it-submodule (forgot the name).\nIt almost feels like that submodule is violating the \"no runtime deps in deployment modules\" rule...", "url": "https://github.com/quarkusio/quarkus/pull/11331#discussion_r473954377", "createdAt": "2020-08-20T13:06:50Z", "author": {"login": "famod"}, "path": "devtools/enforcer-rules/src/main/java/io/quarkus/enforcer/RequiresMinimalDeploymentDependency.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package io.quarkus.enforcer;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.enforcer.rule.api.EnforcerLevel;\n+import org.apache.maven.enforcer.rule.api.EnforcerRule;\n+import org.apache.maven.enforcer.rule.api.EnforcerRule2;\n+import org.apache.maven.enforcer.rule.api.EnforcerRuleException;\n+import org.apache.maven.enforcer.rule.api.EnforcerRuleHelper;\n+import org.apache.maven.model.Dependency;\n+import org.apache.maven.plugin.logging.Log;\n+import org.apache.maven.project.MavenProject;\n+import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluationException;\n+\n+public class RequiresMinimalDeploymentDependency implements EnforcerRule2 {\n+\n+    private static final String GROUP_ID_PREFIX = \"io.quarkus\";\n+    private static final String DEPLOYMENT_ARTIFACT_ID_SUFFIX = \"-deployment\";\n+\n+    private static final String EXT_PROPERTIES_PATH = \"META-INF/quarkus-extension.properties\";\n+\n+    private static final String REQ_TYPE = \"pom\";\n+    private static final String REQ_SCOPE = \"test\";\n+\n+    private static final String DEP_TEMPLATE = \"        <dependency>\\n\"\n+            + \"            <groupId>%s</groupId>\\n\"\n+            + \"            <artifactId>%s</artifactId>\\n\"\n+            + \"            <version>${project.version}</version>\\n\"\n+            + \"            <type>\" + REQ_TYPE + \"</type>\\n\"\n+            + \"            <scope>\" + REQ_SCOPE + \"</scope>\\n\"\n+            + \"            <exclusions>\\n\"\n+            + \"                <exclusion>\\n\"\n+            + \"                    <groupId>*</groupId>\\n\"\n+            + \"                    <artifactId>*</artifactId>\\n\"\n+            + \"                </exclusion>\\n\"\n+            + \"            </exclusions>\\n\"\n+            + \"        </dependency>\";\n+\n+    private static final Map<String, Optional<String>> DEPLOYMENT_GAV_CACHE = new ConcurrentHashMap<>();\n+\n+    private Log logger;\n+\n+    private EnforcerLevel level = EnforcerLevel.ERROR;\n+\n+    @Override\n+    public EnforcerLevel getLevel() {\n+        return level;\n+    }\n+\n+    public void setLevel(EnforcerLevel level) {\n+        this.level = level;\n+    }\n+\n+    @Override\n+    public void execute(EnforcerRuleHelper helper) throws EnforcerRuleException {\n+        logger = helper.getLog();\n+        MavenProject project;\n+        try {\n+            project = (MavenProject) helper.evaluate(\"${project}\");\n+        } catch (ExpressionEvaluationException e) {\n+            throw new IllegalStateException(\"Failed to get project from EnforcerRuleHelper\", e);\n+        }\n+\n+        // general notes:\n+        // - \"artifacts\" are needed to retrieve the actual jar files\n+        // - \"dependencies\" are needed to limit the scope to only the direct dependencies of the current module\n+        //   and to check for the proper scope, type and exclusions\n+        // - parents are not gathered here since it is expected that the rule is also active for those parents\n+        //   or those parents are not relevant\n+\n+        Map<String, Artifact> nonDeploymentArtifactsByGAV = project.getArtifacts().stream()\n+                .filter(artifact -> \"jar\".equals(artifact.getType()))\n+                .filter(artifact -> artifact.getGroupId().startsWith(GROUP_ID_PREFIX))\n+                .filter(artifact -> !artifact.getArtifactId().endsWith(DEPLOYMENT_ARTIFACT_ID_SUFFIX))\n+                .collect(Collectors.toMap(this::buildGAVKey, a -> a));\n+\n+        // Skip if artifacts are not resolved.\n+        // To avoid this \"soft exit\", explicit resolving would be necessary but that is pretty elaborate in an enforcer rule.\n+        // If the build goal is \"late\" enough, artifacts for the respective scope *will* be resolved automatically.\n+        if (nonDeploymentArtifactsByGAV.values().stream().anyMatch(artifact -> !artifact.isResolved())) {\n+            logger.warn(\"Skipping rule \" + RequiresMinimalDeploymentDependency.class.getSimpleName()\n+                    + \": Artifacts are not resolved, consider using a later build goal like 'package'.\");\n+            return;\n+        }\n+\n+        String projArtifactKey = buildGAVKey(project.getArtifact());\n+\n+        Map<String, Dependency> directDepsByGAV = project.getDependencies().stream()\n+                .filter(d -> d.getGroupId().startsWith(GROUP_ID_PREFIX))\n+                .collect(Collectors.toMap(d -> d.getGroupId() + \":\" + d.getArtifactId() + \":\" + d.getVersion(), d -> d));\n+\n+        List<String> missingDeploymentDeps = nonDeploymentArtifactsByGAV.entrySet().parallelStream()\n+                .filter(entry -> directDepsByGAV.containsKey(entry.getKey())) // only direct deps\n+                .map(entry -> DEPLOYMENT_GAV_CACHE.computeIfAbsent(entry.getKey(), k -> parseDeploymentGAV(entry.getValue())))\n+                .filter(optDeploymentGAV -> optDeploymentGAV\n+                        .map(deploymentGAV -> !isMinDeploymentDepPresent(deploymentGAV, projArtifactKey, directDepsByGAV))\n+                        .orElse(false))\n+                .map(Optional::get)\n+                .sorted()\n+                .collect(Collectors.toList());\n+\n+        if (!missingDeploymentDeps.isEmpty()) {\n+            String requiredDeps = missingDeploymentDeps.stream()\n+                    .map(gav -> (Object[]) gav.split(\":\"))\n+                    .map(gavArray -> String.format(DEP_TEMPLATE, gavArray))\n+                    .collect(Collectors.joining(\"\\n\"));\n+            throw new EnforcerRuleException(missingDeploymentDeps.size()\n+                    + \" *-deployment dependencies are missing/configured incorrectly:\\n\"\n+                    + \"    \" + missingDeploymentDeps.stream().collect(Collectors.joining(\"\\n    \"))\n+                    + \"\\n\\nTo fix this issue, add the following dependencies to pom.xml:\\n\\n\"\n+                    + \"        <!-- \\\"Symbolic\\\" test dependencies to *-deployment artifacts for consistent build order -->\\n\"\n+                    + requiredDeps);\n+        }\n+    }\n+\n+    private String buildGAVKey(Artifact artifact) {\n+        return artifact.getGroupId() + \":\" + artifact.getArtifactId() + \":\" + artifact.getVersion();\n+    }\n+\n+    private Optional<String> parseDeploymentGAV(Artifact artifact) {\n+        File artifactFile = artifact.getFile();\n+        if (artifactFile == null || !artifactFile.exists()) {\n+            throw new IllegalStateException(\"Artifact file not found for \" + artifact);\n+        }\n+\n+        Properties extProperties = new Properties();\n+        try (ZipFile zipFile = new ZipFile(artifactFile)) {\n+            ZipEntry entry = zipFile.getEntry(EXT_PROPERTIES_PATH);\n+            if (entry == null) {\n+                return Optional.empty();\n+            }\n+            extProperties.load(new InputStreamReader(zipFile.getInputStream(entry), StandardCharsets.UTF_8));\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(\"Failed to read \" + EXT_PROPERTIES_PATH + \" from \" + artifactFile, e);\n+        }\n+\n+        String deploymentGAV = extProperties.getProperty(\"deployment-artifact\");\n+        if (deploymentGAV == null) {\n+            throw new IllegalStateException(\n+                    \"deployment-artifact artifact not found in \" + EXT_PROPERTIES_PATH + \" from \" + artifactFile);\n+        }\n+        return Optional.of(deploymentGAV);\n+    }\n+\n+    private boolean isMinDeploymentDepPresent(String deploymentGAV, String projArtifactKey,\n+            Map<String, Dependency> directDepsByGAV) {\n+        return deploymentGAV.equals(projArtifactKey) // special case: current project itself is the \"required dependency\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "849fd61afbcda043afb07565aacbf6575c1f0a55"}, "originalPosition": 160}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczMjEwMjgx", "url": "https://github.com/quarkusio/quarkus/pull/11331#pullrequestreview-473210281", "createdAt": "2020-08-24T08:11:26Z", "commit": {"oid": "760ecadc9c783a18e2f3be9a843571eeceba18eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwODoxMToyNlrOHFZF3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwODoxMToyNlrOHFZF3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQxNjAzMQ==", "bodyText": "Is this used anywhere?", "url": "https://github.com/quarkusio/quarkus/pull/11331#discussion_r475416031", "createdAt": "2020-08-24T08:11:26Z", "author": {"login": "Ladicek"}, "path": "build-parent/pom.xml", "diffHunk": "@@ -27,6 +27,7 @@\n         <scala.version>2.12.8</scala.version>\n         <scala-plugin.version>4.1.1</scala-plugin.version>\n \n+        <version.enforcer.plugin>3.0.0-M3</version.enforcer.plugin>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "760ecadc9c783a18e2f3be9a843571eeceba18eb"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczMjExNTI0", "url": "https://github.com/quarkusio/quarkus/pull/11331#pullrequestreview-473211524", "createdAt": "2020-08-24T08:13:16Z", "commit": {"oid": "760ecadc9c783a18e2f3be9a843571eeceba18eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwODoxMzoxNlrOHFZJkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwODoxMzoxNlrOHFZJkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQxNjk3OA==", "bodyText": "Care to put this version string into a property? There's a couple of other modules that use Maven Invoker plugin, and perhaps we should centralize its version. Can be an extra PR too, I don't mind.", "url": "https://github.com/quarkusio/quarkus/pull/11331#discussion_r475416978", "createdAt": "2020-08-24T08:13:16Z", "author": {"login": "Ladicek"}, "path": "devtools/enforcer-rules/pom.xml", "diffHunk": "@@ -0,0 +1,68 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>quarkus-devtools-all</artifactId>\n+        <groupId>io.quarkus</groupId>\n+        <version>999-SNAPSHOT</version>\n+        <relativePath>../</relativePath>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>quarkus-enforcer-rules</artifactId>\n+    <name>Quarkus - Enforcer Rules</name>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.apache.maven.enforcer</groupId>\n+            <artifactId>enforcer-api</artifactId>\n+            <version>${version.enforcer.plugin}</version>\n+            <scope>provided</scope>\n+            <!-- avoid dependencyConvergence issues -->\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.eclipse.sisu</groupId>\n+                    <artifactId>org.eclipse.sisu.plexus</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.maven</groupId>\n+            <artifactId>maven-core</artifactId>\n+            <scope>provided</scope>\n+            <!-- avoid dependencyConvergence issues -->\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>*</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <artifactId>maven-invoker-plugin</artifactId>\n+                <version>3.2.1</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "760ecadc9c783a18e2f3be9a843571eeceba18eb"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczMjE4NTg2", "url": "https://github.com/quarkusio/quarkus/pull/11331#pullrequestreview-473218586", "createdAt": "2020-08-24T08:23:36Z", "commit": {"oid": "760ecadc9c783a18e2f3be9a843571eeceba18eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwODoyMzozNlrOHFZeSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwODoyMzozNlrOHFZeSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQyMjI4Mg==", "bodyText": "I'd just remove the \"Symbolic\" part, they are in no way symbolic, they are perfectly real :-) And their purpose is explained by \"for consistent build order\". We could add something like (not needed for any other reason) to the end, but I think that wouldn't be necessary.", "url": "https://github.com/quarkusio/quarkus/pull/11331#discussion_r475422282", "createdAt": "2020-08-24T08:23:36Z", "author": {"login": "Ladicek"}, "path": "devtools/enforcer-rules/src/main/java/io/quarkus/enforcer/RequiresMinimalDeploymentDependency.java", "diffHunk": "@@ -0,0 +1,184 @@\n+package io.quarkus.enforcer;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.enforcer.rule.api.EnforcerLevel;\n+import org.apache.maven.enforcer.rule.api.EnforcerRule;\n+import org.apache.maven.enforcer.rule.api.EnforcerRule2;\n+import org.apache.maven.enforcer.rule.api.EnforcerRuleException;\n+import org.apache.maven.enforcer.rule.api.EnforcerRuleHelper;\n+import org.apache.maven.model.Dependency;\n+import org.apache.maven.plugin.logging.Log;\n+import org.apache.maven.project.MavenProject;\n+import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluationException;\n+\n+public class RequiresMinimalDeploymentDependency implements EnforcerRule2 {\n+\n+    private static final String GROUP_ID_PREFIX = \"io.quarkus\";\n+    private static final String DEPLOYMENT_ARTIFACT_ID_SUFFIX = \"-deployment\";\n+\n+    private static final String EXT_PROPERTIES_PATH = \"META-INF/quarkus-extension.properties\";\n+\n+    private static final String REQ_TYPE = \"pom\";\n+    private static final String REQ_SCOPE = \"test\";\n+\n+    private static final String DEP_TEMPLATE = \"        <dependency>\\n\"\n+            + \"            <groupId>%s</groupId>\\n\"\n+            + \"            <artifactId>%s</artifactId>\\n\"\n+            + \"            <version>${project.version}</version>\\n\"\n+            + \"            <type>\" + REQ_TYPE + \"</type>\\n\"\n+            + \"            <scope>\" + REQ_SCOPE + \"</scope>\\n\"\n+            + \"            <exclusions>\\n\"\n+            + \"                <exclusion>\\n\"\n+            + \"                    <groupId>*</groupId>\\n\"\n+            + \"                    <artifactId>*</artifactId>\\n\"\n+            + \"                </exclusion>\\n\"\n+            + \"            </exclusions>\\n\"\n+            + \"        </dependency>\";\n+\n+    private static final Map<String, Optional<String>> DEPLOYMENT_GAV_CACHE = new ConcurrentHashMap<>();\n+\n+    private Log logger;\n+\n+    private EnforcerLevel level = EnforcerLevel.ERROR;\n+\n+    @Override\n+    public EnforcerLevel getLevel() {\n+        return level;\n+    }\n+\n+    public void setLevel(EnforcerLevel level) {\n+        this.level = level;\n+    }\n+\n+    @Override\n+    public void execute(EnforcerRuleHelper helper) throws EnforcerRuleException {\n+        logger = helper.getLog();\n+        MavenProject project;\n+        try {\n+            project = (MavenProject) helper.evaluate(\"${project}\");\n+        } catch (ExpressionEvaluationException e) {\n+            throw new IllegalStateException(\"Failed to get project from EnforcerRuleHelper\", e);\n+        }\n+\n+        // general notes:\n+        // - \"artifacts\" are needed to retrieve the actual jar files\n+        // - \"dependencies\" are needed to limit the scope to only the direct dependencies of the current module\n+        //   and to check for the proper scope, type and exclusions\n+        // - parents are not gathered here since it is expected that the rule is also active for those parents\n+        //   or those parents are not relevant\n+\n+        Map<String, Artifact> nonDeploymentArtifactsByGAV = project.getArtifacts().stream()\n+                .filter(artifact -> \"jar\".equals(artifact.getType()))\n+                .filter(artifact -> artifact.getGroupId().startsWith(GROUP_ID_PREFIX))\n+                .filter(artifact -> !artifact.getArtifactId().endsWith(DEPLOYMENT_ARTIFACT_ID_SUFFIX))\n+                .collect(Collectors.toMap(this::buildGAVKey, a -> a));\n+\n+        // Skip if artifacts are not resolved.\n+        // To avoid this \"soft exit\", explicit resolving would be necessary but that is pretty elaborate in an enforcer rule.\n+        // If the build goal is \"late\" enough, artifacts for the respective scope *will* be resolved automatically.\n+        if (nonDeploymentArtifactsByGAV.values().stream().anyMatch(artifact -> !artifact.isResolved())) {\n+            logger.warn(\"Skipping rule \" + RequiresMinimalDeploymentDependency.class.getSimpleName()\n+                    + \": Artifacts are not resolved, consider using a later build goal like 'package'.\");\n+            return;\n+        }\n+\n+        String projArtifactKey = buildGAVKey(project.getArtifact());\n+\n+        Map<String, Dependency> directDepsByGAV = project.getDependencies().stream()\n+                .filter(d -> d.getGroupId().startsWith(GROUP_ID_PREFIX))\n+                .collect(Collectors.toMap(d -> d.getGroupId() + \":\" + d.getArtifactId() + \":\" + d.getVersion(), d -> d,\n+                        (a, b) -> a));\n+\n+        List<String> missingDeploymentDeps = nonDeploymentArtifactsByGAV.entrySet().parallelStream()\n+                .filter(entry -> directDepsByGAV.containsKey(entry.getKey())) // only direct deps\n+                .map(entry -> DEPLOYMENT_GAV_CACHE.computeIfAbsent(entry.getKey(), k -> parseDeploymentGAV(entry.getValue())))\n+                .filter(optDeploymentGAV -> optDeploymentGAV\n+                        .map(deploymentGAV -> !isMinDeploymentDepPresent(deploymentGAV, projArtifactKey, directDepsByGAV))\n+                        .orElse(false))\n+                .map(Optional::get)\n+                .sorted()\n+                .collect(Collectors.toList());\n+\n+        if (!missingDeploymentDeps.isEmpty()) {\n+            String requiredDeps = missingDeploymentDeps.stream()\n+                    .map(gav -> (Object[]) gav.split(\":\"))\n+                    .map(gavArray -> String.format(DEP_TEMPLATE, gavArray))\n+                    .collect(Collectors.joining(\"\\n\"));\n+            throw new EnforcerRuleException(missingDeploymentDeps.size()\n+                    + \" *-deployment dependencies are missing/configured incorrectly:\\n\"\n+                    + \"    \" + missingDeploymentDeps.stream().collect(Collectors.joining(\"\\n    \"))\n+                    + \"\\n\\nTo fix this issue, add the following dependencies to pom.xml:\\n\\n\"\n+                    + \"        <!-- \\\"Symbolic\\\" test dependencies to *-deployment artifacts for consistent build order -->\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "760ecadc9c783a18e2f3be9a843571eeceba18eb"}, "originalPosition": 125}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MTY2MDM5", "url": "https://github.com/quarkusio/quarkus/pull/11331#pullrequestreview-474166039", "createdAt": "2020-08-25T06:20:38Z", "commit": {"oid": "760ecadc9c783a18e2f3be9a843571eeceba18eb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1OTEyMDk0", "url": "https://github.com/quarkusio/quarkus/pull/11331#pullrequestreview-475912094", "createdAt": "2020-08-26T22:10:12Z", "commit": {"oid": "3260a3f5ce255e113aaeda090f914339e93da602"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjoxMDoxMlrOHHfdWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjoxMDoxMlrOHHfdWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxNzQ5Ng==", "bodyText": "To be 100% accurate, the deployment module should depend on the runtime one.", "url": "https://github.com/quarkusio/quarkus/pull/11331#discussion_r477617496", "createdAt": "2020-08-26T22:10:12Z", "author": {"login": "aloubyansky"}, "path": "devtools/enforcer-rules/src/it/smoketest/ext1/deployment/pom.xml", "diffHunk": "@@ -0,0 +1,13 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-enforcer-rules-smoketest-ext1-parent</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>quarkus-enforcer-rules-smoketest-ext1-deployment</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3260a3f5ce255e113aaeda090f914339e93da602"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1OTMwOTM1", "url": "https://github.com/quarkusio/quarkus/pull/11331#pullrequestreview-475930935", "createdAt": "2020-08-26T22:20:02Z", "commit": {"oid": "3260a3f5ce255e113aaeda090f914339e93da602"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjoyMDowMlrOHHfr7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjoyMDowMlrOHHfr7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYyMTIyOA==", "bodyText": "One thing to keep in mind for the future is other extension projects (out there in the community) may want to benefit from this too. In which case GROUP_ID_PREFIX should be either configurable or simply removed in favor of a different approach. E.g. these artifacts are supposed to be resolved at this point, aren't they? We could simply check for the presence of the extension descriptor and also filter based on the resolved path (to collect only those that are found in the current workspace).", "url": "https://github.com/quarkusio/quarkus/pull/11331#discussion_r477621228", "createdAt": "2020-08-26T22:20:02Z", "author": {"login": "aloubyansky"}, "path": "devtools/enforcer-rules/src/main/java/io/quarkus/enforcer/RequiresMinimalDeploymentDependency.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package io.quarkus.enforcer;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.enforcer.rule.api.EnforcerLevel;\n+import org.apache.maven.enforcer.rule.api.EnforcerRule;\n+import org.apache.maven.enforcer.rule.api.EnforcerRule2;\n+import org.apache.maven.enforcer.rule.api.EnforcerRuleException;\n+import org.apache.maven.enforcer.rule.api.EnforcerRuleHelper;\n+import org.apache.maven.model.Dependency;\n+import org.apache.maven.plugin.logging.Log;\n+import org.apache.maven.project.MavenProject;\n+import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluationException;\n+\n+/**\n+ * Enforces that for each direct \"runtime\" dependency the current project also defines a direct minimal \"*-deployment\"\n+ * dependency to produce a consistent build order.\n+ */\n+public class RequiresMinimalDeploymentDependency implements EnforcerRule2 {\n+\n+    private static final String GROUP_ID_PREFIX = \"io.quarkus\";\n+    private static final String DEPLOYMENT_ARTIFACT_ID_SUFFIX = \"-deployment\";\n+\n+    private static final String EXT_PROPERTIES_PATH = \"META-INF/quarkus-extension.properties\";\n+\n+    private static final String REQ_TYPE = \"pom\";\n+    private static final String REQ_SCOPE = \"test\";\n+\n+    private static final String DEP_TEMPLATE = \"        <dependency>\\n\"\n+            + \"            <groupId>%s</groupId>\\n\"\n+            + \"            <artifactId>%s</artifactId>\\n\"\n+            + \"            <version>${project.version}</version>\\n\"\n+            + \"            <type>\" + REQ_TYPE + \"</type>\\n\"\n+            + \"            <scope>\" + REQ_SCOPE + \"</scope>\\n\"\n+            + \"            <exclusions>\\n\"\n+            + \"                <exclusion>\\n\"\n+            + \"                    <groupId>*</groupId>\\n\"\n+            + \"                    <artifactId>*</artifactId>\\n\"\n+            + \"                </exclusion>\\n\"\n+            + \"            </exclusions>\\n\"\n+            + \"        </dependency>\";\n+\n+    private static final Map<String, Optional<String>> DEPLOYMENT_GAV_CACHE = new ConcurrentHashMap<>();\n+\n+    private Log logger;\n+\n+    private EnforcerLevel level = EnforcerLevel.ERROR;\n+\n+    @Override\n+    public EnforcerLevel getLevel() {\n+        return level;\n+    }\n+\n+    public void setLevel(EnforcerLevel level) {\n+        this.level = level;\n+    }\n+\n+    @Override\n+    public void execute(EnforcerRuleHelper helper) throws EnforcerRuleException {\n+        logger = helper.getLog();\n+        MavenProject project;\n+        try {\n+            project = (MavenProject) helper.evaluate(\"${project}\");\n+        } catch (ExpressionEvaluationException e) {\n+            throw new IllegalStateException(\"Failed to get project from EnforcerRuleHelper\", e);\n+        }\n+\n+        // general notes:\n+        // - \"artifacts\" are needed to retrieve the actual jar files\n+        // - \"dependencies\" are needed to limit the scope to only the direct dependencies of the current module\n+        //   and to check for the proper scope, type and exclusions\n+        // - parents are not gathered here since it is expected that the rule is also active for those parents\n+        //   or those parents are not relevant\n+\n+        Map<String, Artifact> nonDeploymentArtifactsByGAV = project.getArtifacts().stream()\n+                .filter(artifact -> \"jar\".equals(artifact.getType()))\n+                .filter(artifact -> artifact.getGroupId().startsWith(GROUP_ID_PREFIX))\n+                .filter(artifact -> !artifact.getArtifactId().endsWith(DEPLOYMENT_ARTIFACT_ID_SUFFIX))\n+                .collect(Collectors.toMap(this::buildGAVKey, a -> a));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3260a3f5ce255e113aaeda090f914339e93da602"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5658025582f8738280bbd74136c50f911cf8b3f6", "author": {"user": {"login": "famod", "name": "Falko Modler"}}, "url": "https://github.com/quarkusio/quarkus/commit/5658025582f8738280bbd74136c50f911cf8b3f6", "committedDate": "2020-08-26T22:47:00Z", "message": "Minimal *-deployment dependencies for integration-tests + enforcer rule\n\nFixes #10859 by enforcing a consistent build order.\n\nPresence of such minimal dependencies is enforced by the new RequiresMinimalDeploymentDependency rule.\n\nMore details: https://github.com/quarkusio/quarkus/pull/11331#issuecomment-680306828"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82cc7dcef550128834e91bc3b82d96c78af5d801", "author": {"user": {"login": "famod", "name": "Falko Modler"}}, "url": "https://github.com/quarkusio/quarkus/commit/82cc7dcef550128834e91bc3b82d96c78af5d801", "committedDate": "2020-08-26T22:47:56Z", "message": "Update maven-enforcer-plugin from 3.0.0-M2 to -M3"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2Mzc5MDE2", "url": "https://github.com/quarkusio/quarkus/pull/11331#pullrequestreview-476379016", "createdAt": "2020-08-27T04:37:06Z", "commit": {"oid": "82cc7dcef550128834e91bc3b82d96c78af5d801"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2ODAzMzMz", "url": "https://github.com/quarkusio/quarkus/pull/11331#pullrequestreview-476803333", "createdAt": "2020-08-27T14:53:51Z", "commit": {"oid": "82cc7dcef550128834e91bc3b82d96c78af5d801"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 966, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}