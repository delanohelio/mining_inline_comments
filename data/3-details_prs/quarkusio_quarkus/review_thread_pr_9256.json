{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MjYxNDEx", "number": 9256, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyNDowMlrOD8APog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyNDowMlrOD8APog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjQ1MTU0OnYy", "diffSide": "RIGHT", "path": "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/metadata/InjectionPointMetadataTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyNDowMlrOGUrOYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyNDowMlrOGUrOYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMzMjg5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    @Deprecated // This annotations should be ingnored\n          \n          \n            \n                    @Deprecated // This annotations should be ignored", "url": "https://github.com/quarkusio/quarkus/pull/9256#discussion_r424332898", "createdAt": "2020-05-13T10:24:02Z", "author": {"login": "geoand"}, "path": "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/metadata/InjectionPointMetadataTest.java", "diffHunk": "@@ -103,9 +111,35 @@ public void testInjectionPointMetadata() {\n         assertEquals(1, annotatedField.getAnnotations().size());\n     }\n \n+    @SuppressWarnings({ \"unchecked\", \"serial\" })\n+    @Test\n+    public void testObserverInjectionPointMetadata() {\n+        AtomicReference<InjectionPoint> ip = new AtomicReference<>();\n+        Arc.container().beanManager().getEvent().select(new TypeLiteral<AtomicReference<InjectionPoint>>() {\n+        }).fire(ip);\n+        InjectionPoint injectionPoint = ip.get();\n+        assertNotNull(injectionPoint);\n+        assertEquals(Controlled.class, injectionPoint.getType());\n+        Set<Annotation> qualifiers = injectionPoint.getQualifiers();\n+        assertEquals(1, qualifiers.size());\n+        assertEquals(Default.class, qualifiers.iterator().next().annotationType());\n+        Assertions.assertNull(injectionPoint.getBean());\n+        assertNotNull(injectionPoint.getAnnotated());\n+        assertTrue(injectionPoint.getAnnotated() instanceof AnnotatedParameter);\n+        AnnotatedParameter<Controller> annotatedParam = (AnnotatedParameter<Controller>) injectionPoint.getAnnotated();\n+        assertEquals(Controlled.class, annotatedParam.getBaseType());\n+        assertEquals(1, annotatedParam.getAnnotations().size());\n+        assertFalse(annotatedParam.isAnnotationPresent(Inject.class));\n+        assertTrue(annotatedParam.isAnnotationPresent(FooAnnotation.class));\n+        assertTrue(annotatedParam.getAnnotation(Singleton.class) == null);\n+        assertTrue(annotatedParam.getAnnotations(Singleton.class).isEmpty());\n+    }\n+\n     @Singleton\n     static class Controller {\n \n+        @FooAnnotation\n+        @Deprecated // This annotations should be ingnored", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbf7fd44c00a141af00fc5798c98ddcfaff83d29"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3198, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}