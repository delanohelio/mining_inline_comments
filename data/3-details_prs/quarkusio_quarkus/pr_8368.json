{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3ODAyMjM4", "number": 8368, "title": "Register all methods of Liquibase services sub-classes for reflection", "bodyText": "Issue: #8357", "createdAt": "2020-04-02T20:46:40Z", "url": "https://github.com/quarkusio/quarkus/pull/8368", "merged": true, "mergeCommit": {"oid": "66d80ba040311cb04cca9fb63327862ae3f905e1"}, "closed": true, "closedAt": "2020-04-03T11:53:37Z", "author": {"login": "andrejpetras"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTzhsKAFqTM4NjgwMzU1MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcT_jLOgFqTM4NzE4NzQwNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2ODAzNTUx", "url": "https://github.com/quarkusio/quarkus/pull/8368#pullrequestreview-386803551", "createdAt": "2020-04-02T21:52:31Z", "commit": {"oid": "da25e966d1dcb11455a464338573e220c63d1e71"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMTo1MjozMVrOF_90QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMTo1MjozMVrOF_90QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYxNzQwOA==", "bodyText": "I think I would make it true for all services.", "url": "https://github.com/quarkusio/quarkus/pull/8368#discussion_r402617408", "createdAt": "2020-04-02T21:52:31Z", "author": {"login": "gsmet"}, "path": "extensions/liquibase/deployment/src/main/java/io/quarkus/liquibase/LiquibaseProcessor.java", "diffHunk": "@@ -187,11 +188,11 @@ ServiceStartBuildItem configureRuntimeProperties(LiquibaseRecorder recorder,\n     private void addService(BuildProducer<ReflectiveClassBuildItem> reflective,\n             BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n             BuildProducer<NativeImageResourceBuildItem> resourceProducer,\n-            Class<?> className) {\n+            Class<?> className, boolean methods) {\n \n         Class<?>[] impl = ServiceLocator.getInstance().findClasses(className);\n         if (impl != null && impl.length > 0) {\n-            reflective.produce(new ReflectiveClassBuildItem(true, false, false, impl));\n+            reflective.produce(new ReflectiveClassBuildItem(true, methods, false, impl));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da25e966d1dcb11455a464338573e220c63d1e71"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df122520b434c04846fcb8755e35d53e603e9ff2", "author": {"user": {"login": "andrejpetras", "name": "Andrej Petras"}}, "url": "https://github.com/quarkusio/quarkus/commit/df122520b434c04846fcb8755e35d53e603e9ff2", "committedDate": "2020-04-02T22:28:09Z", "message": "Register all methods of LiquibaseDataType sub-classes for reflection in native mode"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "da25e966d1dcb11455a464338573e220c63d1e71", "author": {"user": {"login": "andrejpetras", "name": "Andrej Petras"}}, "url": "https://github.com/quarkusio/quarkus/commit/da25e966d1dcb11455a464338573e220c63d1e71", "committedDate": "2020-04-02T20:41:02Z", "message": "Register all methods of LiquibaseDataType sub-classes for reflection in native mode"}, "afterCommit": {"oid": "df122520b434c04846fcb8755e35d53e603e9ff2", "author": {"user": {"login": "andrejpetras", "name": "Andrej Petras"}}, "url": "https://github.com/quarkusio/quarkus/commit/df122520b434c04846fcb8755e35d53e603e9ff2", "committedDate": "2020-04-02T22:28:09Z", "message": "Register all methods of LiquibaseDataType sub-classes for reflection in native mode"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MTg3NDA0", "url": "https://github.com/quarkusio/quarkus/pull/8368#pullrequestreview-387187404", "createdAt": "2020-04-03T11:53:01Z", "commit": {"oid": "df122520b434c04846fcb8755e35d53e603e9ff2"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMTo1MzowMVrOGASL7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMTo1MzowMVrOGASL7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk1MTE1MA==", "bodyText": "So doing that might include more methods than strictly needed in the native image but I think it's safer.\nAs for the LicenseService it's probably related to the substitutions you had to make there so looks OK to me.", "url": "https://github.com/quarkusio/quarkus/pull/8368#discussion_r402951150", "createdAt": "2020-04-03T11:53:01Z", "author": {"login": "gsmet"}, "path": "extensions/liquibase/deployment/src/main/java/io/quarkus/liquibase/LiquibaseProcessor.java", "diffHunk": "@@ -187,11 +188,11 @@ ServiceStartBuildItem configureRuntimeProperties(LiquibaseRecorder recorder,\n     private void addService(BuildProducer<ReflectiveClassBuildItem> reflective,\n             BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n             BuildProducer<NativeImageResourceBuildItem> resourceProducer,\n-            Class<?> className) {\n+            Class<?> className, boolean methods) {\n \n         Class<?>[] impl = ServiceLocator.getInstance().findClasses(className);\n         if (impl != null && impl.length > 0) {\n-            reflective.produce(new ReflectiveClassBuildItem(true, false, false, impl));\n+            reflective.produce(new ReflectiveClassBuildItem(true, methods, false, impl));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYxNzQwOA=="}, "originalCommit": {"oid": "da25e966d1dcb11455a464338573e220c63d1e71"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4718, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}