{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5NDU1ODY3", "number": 13245, "title": "Reorder codec registry configuration so that custom codecs are registered first", "bodyText": "fixes #13236", "createdAt": "2020-11-11T21:17:24Z", "url": "https://github.com/quarkusio/quarkus/pull/13245", "merged": true, "mergeCommit": {"oid": "c7695bd2222e22c39ed6773205e7dc4d3710f67b"}, "closed": true, "closedAt": "2020-11-12T15:39:40Z", "author": {"login": "evanchooly"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbkqbdgH2gAyNTE5NDU1ODY3OjQ4MDZhNTVhOGExZjg3M2E2YWJmN2NhNjhkMjBlOTcyZTlmMmRhYzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbugzNgFqTUyODg2MTM5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4806a55a8a1f873a6abf7ca68d20e972e9f2dac8", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/4806a55a8a1f873a6abf7ca68d20e972e9f2dac8", "committedDate": "2020-11-11T21:16:07Z", "message": "reorder codec registry configuration so that custom codecs are registered first\n\nfixes #13236"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "566aae929c7ceb309f2f67f6b11c2cc2f8243ea3", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/566aae929c7ceb309f2f67f6b11c2cc2f8243ea3", "committedDate": "2020-11-11T21:33:33Z", "message": "run the formatter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4ODI0NTY1", "url": "https://github.com/quarkusio/quarkus/pull/13245#pullrequestreview-528824565", "createdAt": "2020-11-12T07:57:04Z", "commit": {"oid": "4806a55a8a1f873a6abf7ca68d20e972e9f2dac8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNzo1NzowNFrOHxuUaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNzo1NzowNFrOHxuUaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkwMTE2MA==", "bodyText": "is it correct? providers provided by pojoCodecProviderBuilder will be registered  after defaultCodecRegistry- this will be the same situation as it was with custom providers :(", "url": "https://github.com/quarkusio/quarkus/pull/13245#discussion_r521901160", "createdAt": "2020-11-12T07:57:04Z", "author": {"login": "oxelad"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClients.java", "diffHunk": "@@ -299,6 +269,39 @@ private MongoClientSettings createMongoConfiguration(MongoClientConfig config) {\n         return settings.build();\n     }\n \n+    private void configureCodecRegistry(CodecRegistry defaultCodecRegistry, MongoClientSettings.Builder settings) {\n+        List<CodecProvider> providers = new ArrayList<>();\n+        if (!mongoClientSupport.getCodecProviders().isEmpty()) {\n+            providers.addAll(getCodecProviders(mongoClientSupport.getCodecProviders()));\n+        }\n+        // add pojo codec provider with automatic capabilities\n+        // it always needs to be the last codec provided\n+        PojoCodecProvider.Builder pojoCodecProviderBuilder = PojoCodecProvider.builder()\n+                .automatic(true)\n+                .conventions(Conventions.DEFAULT_CONVENTIONS);\n+        // register bson discriminators\n+        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+        for (String bsonDiscriminator : mongoClientSupport.getBsonDiscriminators()) {\n+            try {\n+                pojoCodecProviderBuilder\n+                        .register(ClassModel.builder(Class.forName(bsonDiscriminator, true, classLoader))\n+                                .enableDiscriminator(true).build());\n+            } catch (ClassNotFoundException e) {\n+                // Ignore\n+            }\n+        }\n+        // register property codec provider\n+        if (!mongoClientSupport.getPropertyCodecProviders().isEmpty()) {\n+            pojoCodecProviderBuilder.register(getPropertyCodecProviders(mongoClientSupport.getPropertyCodecProviders())\n+                    .toArray(new PropertyCodecProvider[0]));\n+        }\n+        CodecRegistry registry = !providers.isEmpty() ?\n+                fromRegistries(fromProviders(providers), defaultCodecRegistry,\n+                        fromProviders(pojoCodecProviderBuilder.build())) :\n+                fromRegistries(defaultCodecRegistry, fromProviders(pojoCodecProviderBuilder.build()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4806a55a8a1f873a6abf7ca68d20e972e9f2dac8"}, "originalPosition": 143}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4ODMyNzYw", "url": "https://github.com/quarkusio/quarkus/pull/13245#pullrequestreview-528832760", "createdAt": "2020-11-12T08:07:16Z", "commit": {"oid": "4806a55a8a1f873a6abf7ca68d20e972e9f2dac8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwODowNzoxNlrOHxuslg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwODowNzoxNlrOHxuslg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkwNzM1MA==", "bodyText": "it doesn't relate to the issue of the codec ordering, but ... suppressing of exception is not good- developers will spend a lot of time to understand why some logic doesn't work when it should be, it will be not so easy to find that something was broken because of class-load-issue... better will be to log it...\nsorry for this my 2 cents", "url": "https://github.com/quarkusio/quarkus/pull/13245#discussion_r521907350", "createdAt": "2020-11-12T08:07:16Z", "author": {"login": "oxelad"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClients.java", "diffHunk": "@@ -299,6 +269,39 @@ private MongoClientSettings createMongoConfiguration(MongoClientConfig config) {\n         return settings.build();\n     }\n \n+    private void configureCodecRegistry(CodecRegistry defaultCodecRegistry, MongoClientSettings.Builder settings) {\n+        List<CodecProvider> providers = new ArrayList<>();\n+        if (!mongoClientSupport.getCodecProviders().isEmpty()) {\n+            providers.addAll(getCodecProviders(mongoClientSupport.getCodecProviders()));\n+        }\n+        // add pojo codec provider with automatic capabilities\n+        // it always needs to be the last codec provided\n+        PojoCodecProvider.Builder pojoCodecProviderBuilder = PojoCodecProvider.builder()\n+                .automatic(true)\n+                .conventions(Conventions.DEFAULT_CONVENTIONS);\n+        // register bson discriminators\n+        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+        for (String bsonDiscriminator : mongoClientSupport.getBsonDiscriminators()) {\n+            try {\n+                pojoCodecProviderBuilder\n+                        .register(ClassModel.builder(Class.forName(bsonDiscriminator, true, classLoader))\n+                                .enableDiscriminator(true).build());\n+            } catch (ClassNotFoundException e) {\n+                // Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4806a55a8a1f873a6abf7ca68d20e972e9f2dac8"}, "originalPosition": 132}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4ODYxMzk1", "url": "https://github.com/quarkusio/quarkus/pull/13245#pullrequestreview-528861395", "createdAt": "2020-11-12T08:43:19Z", "commit": {"oid": "566aae929c7ceb309f2f67f6b11c2cc2f8243ea3"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwODo0MzoxOVrOHxwJ0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwODo0MzoxOVrOHxwJ0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkzMTIxNg==", "bodyText": "@oxelad this error should never occurs as the class has been discover in a previous build step so it should be safe to ignore the error", "url": "https://github.com/quarkusio/quarkus/pull/13245#discussion_r521931216", "createdAt": "2020-11-12T08:43:19Z", "author": {"login": "loicmathieu"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/runtime/MongoClients.java", "diffHunk": "@@ -299,6 +269,39 @@ private MongoClientSettings createMongoConfiguration(MongoClientConfig config) {\n         return settings.build();\n     }\n \n+    private void configureCodecRegistry(CodecRegistry defaultCodecRegistry, MongoClientSettings.Builder settings) {\n+        List<CodecProvider> providers = new ArrayList<>();\n+        if (!mongoClientSupport.getCodecProviders().isEmpty()) {\n+            providers.addAll(getCodecProviders(mongoClientSupport.getCodecProviders()));\n+        }\n+        // add pojo codec provider with automatic capabilities\n+        // it always needs to be the last codec provided\n+        PojoCodecProvider.Builder pojoCodecProviderBuilder = PojoCodecProvider.builder()\n+                .automatic(true)\n+                .conventions(Conventions.DEFAULT_CONVENTIONS);\n+        // register bson discriminators\n+        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+        for (String bsonDiscriminator : mongoClientSupport.getBsonDiscriminators()) {\n+            try {\n+                pojoCodecProviderBuilder\n+                        .register(ClassModel.builder(Class.forName(bsonDiscriminator, true, classLoader))\n+                                .enableDiscriminator(true).build());\n+            } catch (ClassNotFoundException e) {\n+                // Ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkwNzM1MA=="}, "originalCommit": {"oid": "4806a55a8a1f873a6abf7ca68d20e972e9f2dac8"}, "originalPosition": 132}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1537, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}