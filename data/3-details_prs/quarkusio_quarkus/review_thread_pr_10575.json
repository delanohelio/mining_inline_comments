{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2MjcyMzA0", "number": 10575, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjoxMjoyNlrOEM3gAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjoxMjoyNlrOEM3gAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTI3NjgzOnYy", "diffSide": "RIGHT", "path": "independent-projects/qute/core/src/test/java/io/quarkus/qute/LoopSectionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjoxMjoyNlrOGvOWWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzoyMzoxOFrOGvQ7Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE3MTM1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            \n          \n          \n            \n                @Test\n          \n          \n            \n                void testScopeEach() {\n          \n          \n            \n                    final HashMap<String, Object> dep1 = new HashMap<>();\n          \n          \n            \n                    dep1.put(\"version\", \"1.0\");\n          \n          \n            \n                    final HashMap<String, Object> data = new HashMap<>();\n          \n          \n            \n                    data.put(\"dependencies\", Arrays.asList(dep1, new HashMap<>()));\n          \n          \n            \n                    data.put(\"version\", \"hellllllo\");\n          \n          \n            \n                    final String result = Engine.builder().addDefaults().build()\n          \n          \n            \n                            .parse(\"{#each dependencies}{#if it.version}<version>{it.version}</version>{/if}{/each}\")\n          \n          \n            \n                            .render(data);\n          \n          \n            \n                    assertFalse(result.contains(\"hellllllo\"), result);\n          \n          \n            \n                }", "url": "https://github.com/quarkusio/quarkus/pull/10575#discussion_r452171354", "createdAt": "2020-07-09T12:12:26Z", "author": {"login": "ia3andy"}, "path": "independent-projects/qute/core/src/test/java/io/quarkus/qute/LoopSectionTest.java", "diffHunk": "@@ -147,4 +148,17 @@ public void testNoniterable() {\n         }\n     }\n \n+    @Test\n+    void testScope() {\n+        final HashMap<String, Object> dep1 = new HashMap<>();\n+        dep1.put(\"version\", \"1.0\");\n+        final HashMap<String, Object> data = new HashMap<>();\n+        data.put(\"dependencies\", Arrays.asList(dep1, new HashMap<>()));\n+        data.put(\"version\", \"hellllllo\");\n+        final String result = Engine.builder().addDefaults().build()\n+                .parse(\"{#for dep in dependencies}{#if dep.version}<version>{dep.version}</version>{/if}{/for}\")\n+                .render(data);\n+        assertFalse(result.contains(\"hellllllo\"), result);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8df6ef3c72b06a1017fae8a62dcac63fa40c264c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxMzUzOQ==", "bodyText": "Oh and maybe we should also test that {version} works in another test?", "url": "https://github.com/quarkusio/quarkus/pull/10575#discussion_r452213539", "createdAt": "2020-07-09T13:23:18Z", "author": {"login": "ia3andy"}, "path": "independent-projects/qute/core/src/test/java/io/quarkus/qute/LoopSectionTest.java", "diffHunk": "@@ -147,4 +148,17 @@ public void testNoniterable() {\n         }\n     }\n \n+    @Test\n+    void testScope() {\n+        final HashMap<String, Object> dep1 = new HashMap<>();\n+        dep1.put(\"version\", \"1.0\");\n+        final HashMap<String, Object> data = new HashMap<>();\n+        data.put(\"dependencies\", Arrays.asList(dep1, new HashMap<>()));\n+        data.put(\"version\", \"hellllllo\");\n+        final String result = Engine.builder().addDefaults().build()\n+                .parse(\"{#for dep in dependencies}{#if dep.version}<version>{dep.version}</version>{/if}{/for}\")\n+                .render(data);\n+        assertFalse(result.contains(\"hellllllo\"), result);\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE3MTM1NA=="}, "originalCommit": {"oid": "8df6ef3c72b06a1017fae8a62dcac63fa40c264c"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2616, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}