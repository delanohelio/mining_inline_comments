{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyOTk3NjE4", "number": 8556, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjo0MToxOVrODxgGeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNzoxNjo1MlrODyXosg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjMyNzYwOnYy", "diffSide": "RIGHT", "path": "extensions/funqy/funqy-http/runtime/src/main/java/io/quarkus/funqy/runtime/bindings/http/VertxRequestHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjo0MToxOVrOGFAP-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjo0MToxOVrOGFAP-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkwMDE1Mw==", "bodyText": "Note that this is because I need to add a new method to an interface in quarkus-security. If this PR is otherwise fine I will add it and cut a release.", "url": "https://github.com/quarkusio/quarkus/pull/8556#discussion_r407900153", "createdAt": "2020-04-14T06:41:19Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/funqy/funqy-http/runtime/src/main/java/io/quarkus/funqy/runtime/bindings/http/VertxRequestHandler.java", "diffHunk": "@@ -106,9 +109,8 @@ public void handle(RoutingContext request) {\n     private void dispatch(RoutingContext routingContext, FunctionInvoker invoker, Object input) {\n         ManagedContext requestContext = beanContainer.requestContext();\n         requestContext.activate();\n-        QuarkusHttpUser user = (QuarkusHttpUser) routingContext.user();\n-        if (user != null && association != null) {\n-            association.setIdentity(user.getSecurityIdentity());\n+        if (association != null) {\n+            ((Consumer<Uni<SecurityIdentity>>) association).accept(QuarkusHttpUser.getSecurityIdentity(routingContext, null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de4db012315b1b6a50ce1ca65d2c6c9cdebf0cb"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzI4MDY0OnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMDo1ODowOVrOGFJTlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMTozMjoyMVrOGFKXgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA0ODUzMw==", "bodyText": "Can it help with #8559 ?", "url": "https://github.com/quarkusio/quarkus/pull/8556#discussion_r408048533", "createdAt": "2020-04-14T10:58:09Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -44,17 +44,22 @@\n             AuthenticationRequestContext context) {\n         ContextAwareTokenCredential credential = (ContextAwareTokenCredential) request.getToken();\n         RoutingContext vertxContext = credential.getContext();\n-\n-        if (tenantResolver.isBlocking(vertxContext)) {\n-            return context.runBlocking(new Supplier<SecurityIdentity>() {\n-                @Override\n-                public SecurityIdentity get() {\n-                    return authenticate(request, vertxContext).await().indefinitely();\n+        return Uni.createFrom().deferred(new Supplier<Uni<SecurityIdentity>>() {\n+            @Override\n+            public Uni<SecurityIdentity> get() {\n+                if (tenantResolver.isBlocking(vertxContext)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e73c86b8283dad65e20d3653d5983a58bd7ac33c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA1NDU5Mw==", "bodyText": "Possibly, I would need to investigate before I could say one way or the other.", "url": "https://github.com/quarkusio/quarkus/pull/8556#discussion_r408054593", "createdAt": "2020-04-14T11:09:45Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -44,17 +44,22 @@\n             AuthenticationRequestContext context) {\n         ContextAwareTokenCredential credential = (ContextAwareTokenCredential) request.getToken();\n         RoutingContext vertxContext = credential.getContext();\n-\n-        if (tenantResolver.isBlocking(vertxContext)) {\n-            return context.runBlocking(new Supplier<SecurityIdentity>() {\n-                @Override\n-                public SecurityIdentity get() {\n-                    return authenticate(request, vertxContext).await().indefinitely();\n+        return Uni.createFrom().deferred(new Supplier<Uni<SecurityIdentity>>() {\n+            @Override\n+            public Uni<SecurityIdentity> get() {\n+                if (tenantResolver.isBlocking(vertxContext)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA0ODUzMw=="}, "originalCommit": {"oid": "e73c86b8283dad65e20d3653d5983a58bd7ac33c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA2NTkyMA==", "bodyText": "I suspect not, it is likely to do with the proactive autentication being off", "url": "https://github.com/quarkusio/quarkus/pull/8556#discussion_r408065920", "createdAt": "2020-04-14T11:32:21Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -44,17 +44,22 @@\n             AuthenticationRequestContext context) {\n         ContextAwareTokenCredential credential = (ContextAwareTokenCredential) request.getToken();\n         RoutingContext vertxContext = credential.getContext();\n-\n-        if (tenantResolver.isBlocking(vertxContext)) {\n-            return context.runBlocking(new Supplier<SecurityIdentity>() {\n-                @Override\n-                public SecurityIdentity get() {\n-                    return authenticate(request, vertxContext).await().indefinitely();\n+        return Uni.createFrom().deferred(new Supplier<Uni<SecurityIdentity>>() {\n+            @Override\n+            public Uni<SecurityIdentity> get() {\n+                if (tenantResolver.isBlocking(vertxContext)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA0ODUzMw=="}, "originalCommit": {"oid": "e73c86b8283dad65e20d3653d5983a58bd7ac33c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzMyMDk1OnYy", "diffSide": "RIGHT", "path": "extensions/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/AuthenticationFailedExceptionMapper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMToxMDoyNVrOGFJspA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDozNTo0MlrOGFzxnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA1NDk0OA==", "bodyText": "Why is this mapper needed ?\nI also may have seen ForbiddenException and/or UnauthorizedException thrown on some JAX-RS paths too", "url": "https://github.com/quarkusio/quarkus/pull/8556#discussion_r408054948", "createdAt": "2020-04-14T11:10:25Z", "author": {"login": "sberyozkin"}, "path": "extensions/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/AuthenticationFailedExceptionMapper.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package io.quarkus.resteasy.runtime;\n+\n+import javax.annotation.Priority;\n+import javax.enterprise.inject.spi.CDI;\n+import javax.ws.rs.Priorities;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.ext.ExceptionMapper;\n+import javax.ws.rs.ext.Provider;\n+\n+import io.quarkus.security.AuthenticationFailedException;\n+import io.quarkus.vertx.http.runtime.CurrentVertxRequest;\n+import io.quarkus.vertx.http.runtime.security.ChallengeData;\n+import io.quarkus.vertx.http.runtime.security.HttpAuthenticator;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@Provider\n+@Priority(Priorities.USER + 1)\n+public class AuthenticationFailedExceptionMapper implements ExceptionMapper<AuthenticationFailedException> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e73c86b8283dad65e20d3653d5983a58bd7ac33c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ4MzY3NA==", "bodyText": "This is needed because if you use the @RolesAllowed interceptor with a deferred identity you may get this exception when resolving the deferred identity. This mapper will handle it correctly.\nBy default the deferred identity will automatically handle this on a vert.x level, however we have to disable this for JAX-RS as you get an error if the vert.x response is closed while the JAX-RS request is ongoing.", "url": "https://github.com/quarkusio/quarkus/pull/8556#discussion_r408483674", "createdAt": "2020-04-14T22:57:38Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/AuthenticationFailedExceptionMapper.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package io.quarkus.resteasy.runtime;\n+\n+import javax.annotation.Priority;\n+import javax.enterprise.inject.spi.CDI;\n+import javax.ws.rs.Priorities;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.ext.ExceptionMapper;\n+import javax.ws.rs.ext.Provider;\n+\n+import io.quarkus.security.AuthenticationFailedException;\n+import io.quarkus.vertx.http.runtime.CurrentVertxRequest;\n+import io.quarkus.vertx.http.runtime.security.ChallengeData;\n+import io.quarkus.vertx.http.runtime.security.HttpAuthenticator;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@Provider\n+@Priority(Priorities.USER + 1)\n+public class AuthenticationFailedExceptionMapper implements ExceptionMapper<AuthenticationFailedException> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA1NDk0OA=="}, "originalCommit": {"oid": "e73c86b8283dad65e20d3653d5983a58bd7ac33c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0NDM1MQ==", "bodyText": "@stuartwdouglas OK, makes sense", "url": "https://github.com/quarkusio/quarkus/pull/8556#discussion_r408744351", "createdAt": "2020-04-15T10:35:42Z", "author": {"login": "sberyozkin"}, "path": "extensions/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/AuthenticationFailedExceptionMapper.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package io.quarkus.resteasy.runtime;\n+\n+import javax.annotation.Priority;\n+import javax.enterprise.inject.spi.CDI;\n+import javax.ws.rs.Priorities;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.ext.ExceptionMapper;\n+import javax.ws.rs.ext.Provider;\n+\n+import io.quarkus.security.AuthenticationFailedException;\n+import io.quarkus.vertx.http.runtime.CurrentVertxRequest;\n+import io.quarkus.vertx.http.runtime.security.ChallengeData;\n+import io.quarkus.vertx.http.runtime.security.HttpAuthenticator;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@Provider\n+@Priority(Priorities.USER + 1)\n+public class AuthenticationFailedExceptionMapper implements ExceptionMapper<AuthenticationFailedException> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA1NDk0OA=="}, "originalCommit": {"oid": "e73c86b8283dad65e20d3653d5983a58bd7ac33c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzMyNzY0OnYy", "diffSide": "RIGHT", "path": "extensions/security/runtime/src/main/java/io/quarkus/security/runtime/SecurityIdentityAssociation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMToxMjo0MVrOGFJwyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMToxMjo0MVrOGFJwyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA1NjAwOA==", "bodyText": "What is a deferred identity ? Update: after looking through the PR I believe it represents a lazy authentication case", "url": "https://github.com/quarkusio/quarkus/pull/8556#discussion_r408056008", "createdAt": "2020-04-14T11:12:41Z", "author": {"login": "sberyozkin"}, "path": "extensions/security/runtime/src/main/java/io/quarkus/security/runtime/SecurityIdentityAssociation.java", "diffHunk": "@@ -40,11 +43,31 @@ public SecurityIdentity setIdentity(@Observes SecurityIdentity identity) {\n         return old;\n     }\n \n+    public Uni<SecurityIdentity> getDeferredIdentity() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e73c86b8283dad65e20d3653d5983a58bd7ac33c"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzM0NDUxOnYy", "diffSide": "RIGHT", "path": "extensions/undertow/runtime/src/main/java/io/quarkus/undertow/runtime/ServletHttpSecurityPolicy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMToxNzo1MlrOGFJ7Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMToxNzo1MlrOGFJ7Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA1ODY4Mw==", "bodyText": "So if the proactive authentication is disabled then the access will be denied if the resource is secured ? I think this is what you said earlier would happen in such a case, which makes sense", "url": "https://github.com/quarkusio/quarkus/pull/8556#discussion_r408058683", "createdAt": "2020-04-14T11:17:52Z", "author": {"login": "sberyozkin"}, "path": "extensions/undertow/runtime/src/main/java/io/quarkus/undertow/runtime/ServletHttpSecurityPolicy.java", "diffHunk": "@@ -42,21 +44,31 @@\n             } else if (emptyRoleSemantic == SecurityInfo.EmptyRoleSemantic.DENY) {\n                 return Uni.createFrom().item(CheckResult.DENY);\n             } else if (emptyRoleSemantic == SecurityInfo.EmptyRoleSemantic.AUTHENTICATE) {\n-                if (identity.isAnonymous()) {\n-                    return Uni.createFrom().item(CheckResult.DENY);\n-                } else {\n-                    return Uni.createFrom().item(CheckResult.PERMIT);\n-                }\n+                return identity.map(new Function<SecurityIdentity, CheckResult>() {\n+                    @Override\n+                    public CheckResult apply(SecurityIdentity securityIdentity) {\n+                        if (securityIdentity.isAnonymous()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e73c86b8283dad65e20d3653d5983a58bd7ac33c"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzM3ODI3OnYy", "diffSide": "RIGHT", "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/HttpSecurityRecorder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMToyODo0MlrOGFKQZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMToyODo0MlrOGFKQZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA2NDEwMw==", "bodyText": "Was just about to ask what it means and then saw AUTH_FAILURE_HANDLER docs :-)", "url": "https://github.com/quarkusio/quarkus/pull/8556#discussion_r408064103", "createdAt": "2020-04-14T11:28:42Z", "author": {"login": "sberyozkin"}, "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/security/HttpSecurityRecorder.java", "diffHunk": "@@ -43,50 +53,92 @@ public void handle(RoutingContext event) {\n                 }\n                 //we put the authenticator into the routing context so it can be used by other systems\n                 event.put(HttpAuthenticator.class.getName(), authenticator);\n-                authenticator.attemptAuthentication(event)\n-                        .subscribe().with(new Consumer<SecurityIdentity>() {\n-                            @Override\n-                            public void accept(SecurityIdentity identity) {\n-                                if (event.response().ended()) {\n-                                    return;\n+\n+                //register the default auth failure handler\n+                //if proactive auth is used this is the only one\n+                //if using lazy auth this can be modified downstream, to control authentication behaviour", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e73c86b8283dad65e20d3653d5983a58bd7ac33c"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzM4NTg3OnYy", "diffSide": "RIGHT", "path": "extensions/vertx-web/runtime/src/main/java/io/quarkus/vertx/web/runtime/RouteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMTozMTowNFrOGFKVKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMTozMTowNFrOGFKVKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA2NTMyMg==", "bodyText": "Which flow is it, reactive route without RestEasy ?", "url": "https://github.com/quarkusio/quarkus/pull/8556#discussion_r408065322", "createdAt": "2020-04-14T11:31:04Z", "author": {"login": "sberyozkin"}, "path": "extensions/vertx-web/runtime/src/main/java/io/quarkus/vertx/web/runtime/RouteHandler.java", "diffHunk": "@@ -19,6 +19,7 @@\n     default void handle(RoutingContext context) {\n         QuarkusHttpUser user = (QuarkusHttpUser) context.user();\n         ManagedContext requestContext = Arc.container().requestContext();\n+        //todo: how should we handle non-proactive authentication here?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e73c86b8283dad65e20d3653d5983a58bd7ac33c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzc0MzA1OnYy", "diffSide": "RIGHT", "path": "extensions/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/SecurityContextFilter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDo1MToyMlrOGF0Q9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDoyMTo0M1rOGGeqLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc1MjM3Mw==", "bodyText": "@stuartwdouglas Should this delegate to old.checkPermission ?", "url": "https://github.com/quarkusio/quarkus/pull/8556#discussion_r408752373", "createdAt": "2020-04-15T10:51:22Z", "author": {"login": "sberyozkin"}, "path": "extensions/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/SecurityContextFilter.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package io.quarkus.resteasy.runtime;\n+\n+import java.io.IOException;\n+import java.security.Permission;\n+import java.security.Principal;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.annotation.Priority;\n+import javax.inject.Inject;\n+import javax.ws.rs.Priorities;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerRequestFilter;\n+import javax.ws.rs.container.PreMatching;\n+import javax.ws.rs.core.SecurityContext;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.jboss.resteasy.plugins.server.servlet.ServletSecurityContext;\n+\n+import io.quarkus.resteasy.runtime.standalone.QuarkusResteasySecurityContext;\n+import io.quarkus.security.credential.Credential;\n+import io.quarkus.security.identity.CurrentIdentityAssociation;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.smallrye.mutiny.Uni;\n+\n+@PreMatching\n+@Priority(Priorities.USER + 1)\n+@Provider\n+public class SecurityContextFilter implements ContainerRequestFilter {\n+\n+    @Inject\n+    SecurityIdentity old;\n+\n+    @Inject\n+    CurrentIdentityAssociation currentIdentityAssociation;\n+\n+    @Override\n+    public void filter(ContainerRequestContext requestContext) throws IOException {\n+        SecurityContext modified = requestContext.getSecurityContext();\n+        if (modified instanceof ServletSecurityContext || modified instanceof QuarkusResteasySecurityContext) {\n+            //an original security context, it has not been modified\n+            return;\n+        }\n+        Set<Credential> oldCredentials = old.getCredentials();\n+        Map<String, Object> oldAttributes = old.getAttributes();\n+        SecurityIdentity newIdentity = new SecurityIdentity() {\n+            @Override\n+            public Principal getPrincipal() {\n+                return modified.getUserPrincipal();\n+            }\n+\n+            @Override\n+            public boolean isAnonymous() {\n+                return modified.getUserPrincipal() == null;\n+            }\n+\n+            @Override\n+            public Set<String> getRoles() {\n+                throw new UnsupportedOperationException(\n+                        \"retrieving all roles not supported when JAX-RS security context has been replaced\");\n+            }\n+\n+            @Override\n+            public boolean hasRole(String role) {\n+                return modified.isUserInRole(role);\n+            }\n+\n+            @Override\n+            public <T extends Credential> T getCredential(Class<T> credentialType) {\n+                for (Credential cred : getCredentials()) {\n+                    if (credentialType.isAssignableFrom(cred.getClass())) {\n+                        return (T) cred;\n+                    }\n+                }\n+                return null;\n+            }\n+\n+            @Override\n+            public Set<Credential> getCredentials() {\n+                return oldCredentials;\n+            }\n+\n+            @Override\n+            public <T> T getAttribute(String name) {\n+                return (T) oldAttributes.get(name);\n+            }\n+\n+            @Override\n+            public Map<String, Object> getAttributes() {\n+                return oldAttributes;\n+            }\n+\n+            @Override\n+            public Uni<Boolean> checkPermission(Permission permission) {\n+                return Uni.createFrom().nullItem();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e97007589e80f046df303e2f6f1132820ef25a5e"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMyMjU2NQ==", "bodyText": "No, as this is actually a proxy once you replace the identity it would be a recursive invocation.", "url": "https://github.com/quarkusio/quarkus/pull/8556#discussion_r409322565", "createdAt": "2020-04-16T06:55:24Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/SecurityContextFilter.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package io.quarkus.resteasy.runtime;\n+\n+import java.io.IOException;\n+import java.security.Permission;\n+import java.security.Principal;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.annotation.Priority;\n+import javax.inject.Inject;\n+import javax.ws.rs.Priorities;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerRequestFilter;\n+import javax.ws.rs.container.PreMatching;\n+import javax.ws.rs.core.SecurityContext;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.jboss.resteasy.plugins.server.servlet.ServletSecurityContext;\n+\n+import io.quarkus.resteasy.runtime.standalone.QuarkusResteasySecurityContext;\n+import io.quarkus.security.credential.Credential;\n+import io.quarkus.security.identity.CurrentIdentityAssociation;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.smallrye.mutiny.Uni;\n+\n+@PreMatching\n+@Priority(Priorities.USER + 1)\n+@Provider\n+public class SecurityContextFilter implements ContainerRequestFilter {\n+\n+    @Inject\n+    SecurityIdentity old;\n+\n+    @Inject\n+    CurrentIdentityAssociation currentIdentityAssociation;\n+\n+    @Override\n+    public void filter(ContainerRequestContext requestContext) throws IOException {\n+        SecurityContext modified = requestContext.getSecurityContext();\n+        if (modified instanceof ServletSecurityContext || modified instanceof QuarkusResteasySecurityContext) {\n+            //an original security context, it has not been modified\n+            return;\n+        }\n+        Set<Credential> oldCredentials = old.getCredentials();\n+        Map<String, Object> oldAttributes = old.getAttributes();\n+        SecurityIdentity newIdentity = new SecurityIdentity() {\n+            @Override\n+            public Principal getPrincipal() {\n+                return modified.getUserPrincipal();\n+            }\n+\n+            @Override\n+            public boolean isAnonymous() {\n+                return modified.getUserPrincipal() == null;\n+            }\n+\n+            @Override\n+            public Set<String> getRoles() {\n+                throw new UnsupportedOperationException(\n+                        \"retrieving all roles not supported when JAX-RS security context has been replaced\");\n+            }\n+\n+            @Override\n+            public boolean hasRole(String role) {\n+                return modified.isUserInRole(role);\n+            }\n+\n+            @Override\n+            public <T extends Credential> T getCredential(Class<T> credentialType) {\n+                for (Credential cred : getCredentials()) {\n+                    if (credentialType.isAssignableFrom(cred.getClass())) {\n+                        return (T) cred;\n+                    }\n+                }\n+                return null;\n+            }\n+\n+            @Override\n+            public Set<Credential> getCredentials() {\n+                return oldCredentials;\n+            }\n+\n+            @Override\n+            public <T> T getAttribute(String name) {\n+                return (T) oldAttributes.get(name);\n+            }\n+\n+            @Override\n+            public Map<String, Object> getAttributes() {\n+                return oldAttributes;\n+            }\n+\n+            @Override\n+            public Uni<Boolean> checkPermission(Permission permission) {\n+                return Uni.createFrom().nullItem();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc1MjM3Mw=="}, "originalCommit": {"oid": "e97007589e80f046df303e2f6f1132820ef25a5e"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ0Njk1OA==", "bodyText": "@stuartwdouglas thanks. I guess the users who would like to do a pure JAX-RS SecurityContext code won't even work with the injected Securityidentity; if ever needed this can be somehow addressed in the future.", "url": "https://github.com/quarkusio/quarkus/pull/8556#discussion_r409446958", "createdAt": "2020-04-16T10:21:43Z", "author": {"login": "sberyozkin"}, "path": "extensions/resteasy/runtime/src/main/java/io/quarkus/resteasy/runtime/SecurityContextFilter.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package io.quarkus.resteasy.runtime;\n+\n+import java.io.IOException;\n+import java.security.Permission;\n+import java.security.Principal;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.annotation.Priority;\n+import javax.inject.Inject;\n+import javax.ws.rs.Priorities;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerRequestFilter;\n+import javax.ws.rs.container.PreMatching;\n+import javax.ws.rs.core.SecurityContext;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.jboss.resteasy.plugins.server.servlet.ServletSecurityContext;\n+\n+import io.quarkus.resteasy.runtime.standalone.QuarkusResteasySecurityContext;\n+import io.quarkus.security.credential.Credential;\n+import io.quarkus.security.identity.CurrentIdentityAssociation;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.smallrye.mutiny.Uni;\n+\n+@PreMatching\n+@Priority(Priorities.USER + 1)\n+@Provider\n+public class SecurityContextFilter implements ContainerRequestFilter {\n+\n+    @Inject\n+    SecurityIdentity old;\n+\n+    @Inject\n+    CurrentIdentityAssociation currentIdentityAssociation;\n+\n+    @Override\n+    public void filter(ContainerRequestContext requestContext) throws IOException {\n+        SecurityContext modified = requestContext.getSecurityContext();\n+        if (modified instanceof ServletSecurityContext || modified instanceof QuarkusResteasySecurityContext) {\n+            //an original security context, it has not been modified\n+            return;\n+        }\n+        Set<Credential> oldCredentials = old.getCredentials();\n+        Map<String, Object> oldAttributes = old.getAttributes();\n+        SecurityIdentity newIdentity = new SecurityIdentity() {\n+            @Override\n+            public Principal getPrincipal() {\n+                return modified.getUserPrincipal();\n+            }\n+\n+            @Override\n+            public boolean isAnonymous() {\n+                return modified.getUserPrincipal() == null;\n+            }\n+\n+            @Override\n+            public Set<String> getRoles() {\n+                throw new UnsupportedOperationException(\n+                        \"retrieving all roles not supported when JAX-RS security context has been replaced\");\n+            }\n+\n+            @Override\n+            public boolean hasRole(String role) {\n+                return modified.isUserInRole(role);\n+            }\n+\n+            @Override\n+            public <T extends Credential> T getCredential(Class<T> credentialType) {\n+                for (Credential cred : getCredentials()) {\n+                    if (credentialType.isAssignableFrom(cred.getClass())) {\n+                        return (T) cred;\n+                    }\n+                }\n+                return null;\n+            }\n+\n+            @Override\n+            public Set<Credential> getCredentials() {\n+                return oldCredentials;\n+            }\n+\n+            @Override\n+            public <T> T getAttribute(String name) {\n+                return (T) oldAttributes.get(name);\n+            }\n+\n+            @Override\n+            public Map<String, Object> getAttributes() {\n+                return oldAttributes;\n+            }\n+\n+            @Override\n+            public Uni<Boolean> checkPermission(Permission permission) {\n+                return Uni.createFrom().nullItem();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc1MjM3Mw=="}, "originalCommit": {"oid": "e97007589e80f046df303e2f6f1132820ef25a5e"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTQyNjQyOnYy", "diffSide": "RIGHT", "path": "extensions/undertow/deployment/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNzoxNjo1MlrOGGXr2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxODowMzoyM1rOGGxGvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMzMjY5OA==", "bodyText": "Shouldn't this be scope test?", "url": "https://github.com/quarkusio/quarkus/pull/8556#discussion_r409332698", "createdAt": "2020-04-16T07:16:52Z", "author": {"login": "gsmet"}, "path": "extensions/undertow/deployment/pom.xml", "diffHunk": "@@ -39,6 +39,10 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-undertow-spi</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-security-test-utils</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e97007589e80f046df303e2f6f1132820ef25a5e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM0MDMyMw==", "bodyText": "It's managed in the bom", "url": "https://github.com/quarkusio/quarkus/pull/8556#discussion_r409340323", "createdAt": "2020-04-16T07:30:48Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/undertow/deployment/pom.xml", "diffHunk": "@@ -39,6 +39,10 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-undertow-spi</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-security-test-utils</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMzMjY5OA=="}, "originalCommit": {"oid": "e97007589e80f046df303e2f6f1132820ef25a5e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0OTE4MQ==", "bodyText": "I added it there too to be on the safe side if we ever remove it.", "url": "https://github.com/quarkusio/quarkus/pull/8556#discussion_r409749181", "createdAt": "2020-04-16T18:03:23Z", "author": {"login": "gsmet"}, "path": "extensions/undertow/deployment/pom.xml", "diffHunk": "@@ -39,6 +39,10 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-undertow-spi</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-security-test-utils</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMzMjY5OA=="}, "originalCommit": {"oid": "e97007589e80f046df303e2f6f1132820ef25a5e"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3487, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}