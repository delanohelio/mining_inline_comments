{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExMTY5NTQ3", "number": 8973, "title": "Implement an annotation processor to mark Panache archives", "bodyText": "The logic here is that only libraries that are compiled\nagainst panache will have this generated marker file, and\nif this file is present this means that classes in the archive\nmay need to be transformed.\nThis is just a draft at the moment, a similar approach would\nalso need to be taken with Mongo.", "createdAt": "2020-04-30T06:07:25Z", "url": "https://github.com/quarkusio/quarkus/pull/8973", "merged": true, "mergeCommit": {"oid": "8994a854ee483cb6d35649f931d39f2f62baab43"}, "closed": true, "closedAt": "2020-05-07T02:15:51Z", "author": {"login": "stuartwdouglas"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccoZHkABqjMyODgwNDY3Mzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABceo0MEgBqjMzMDg1MzcxMTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a930ec4aabd786de3731dbf5e2f35ff55bb19b77", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/a930ec4aabd786de3731dbf5e2f35ff55bb19b77", "committedDate": "2020-04-30T06:05:03Z", "message": "Implement an annotation process to mark Panache archives\n\nThe logic here is that only libraries that are compiled\nagainst panache will have this generated marker file, and\nif this file is present this means that classes in the archive\nmay need to be transformed.\n\nThis is just a draft at the moment, a similar approach would\nalso need to be taken with Mongo."}, "afterCommit": {"oid": "29a1d0fe4ace6a331016891ded471fe2bad54b06", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/29a1d0fe4ace6a331016891ded471fe2bad54b06", "committedDate": "2020-04-30T07:59:16Z", "message": "Implement an annotation process to mark Panache archives\n\nThe logic here is that only libraries that are compiled\nagainst panache will have this generated marker file, and\nif this file is present this means that classes in the archive\nmay need to be transformed.\n\nThis is just a draft at the moment, a similar approach would\nalso need to be taken with Mongo."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNDcwNTY2", "url": "https://github.com/quarkusio/quarkus/pull/8973#pullrequestreview-403470566", "createdAt": "2020-04-30T12:27:51Z", "commit": {"oid": "29a1d0fe4ace6a331016891ded471fe2bad54b06"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMjoyNzo1MlrOGOm_DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMjozMDoxNFrOGOnEDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk3MTk4MA==", "bodyText": "I guess this will also match string constants, since we're not looking at the CONSTANT_CLASS_TAG that points to this but probably fine because it's FQNs.", "url": "https://github.com/quarkusio/quarkus/pull/8973#discussion_r417971980", "createdAt": "2020-04-30T12:27:52Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache/deployment/src/main/java/io/quarkus/hibernate/orm/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -148,15 +161,104 @@ void build(CombinedIndexBuildItem index,\n         MetamodelInfo<EntityModel<EntityField>> modelInfo = modelEnhancer.getModelInfo();\n         if (modelInfo.hasEntities()) {\n             PanacheFieldAccessEnhancer panacheFieldAccessEnhancer = new PanacheFieldAccessEnhancer(modelInfo);\n-            for (ClassInfo classInfo : index.getIndex().getKnownClasses()) {\n-                String className = classInfo.name().toString();\n-                if (!modelClasses.contains(className)) {\n-                    transformers.produce(new BytecodeTransformerBuildItem(className, panacheFieldAccessEnhancer));\n+            QuarkusClassLoader tccl = (QuarkusClassLoader) Thread.currentThread().getContextClassLoader();\n+            List<ClassPathElement> archives = tccl.getElementsWithResource(META_INF_PANACHE_ARCHIVE_MARKER);\n+            for (ClassPathElement i : archives) {\n+                for (String res : i.getProvidedResources()) {\n+                    if (res.endsWith(\".class\")) {\n+                        String cn = res.replace(\"/\", \".\").substring(0, res.length() - 6);\n+                        if (!modelClasses.contains(cn)) {\n+                            if (requiresTransformation(res, i, modelClassNamesInternal)) {\n+                                transformers.produce(new BytecodeTransformerBuildItem(cn, panacheFieldAccessEnhancer));\n+                            }\n+                        }\n+                    }\n                 }\n             }\n         }\n     }\n \n+    static final int CONSTANT_UTF8_TAG = 1;\n+    static final int CONSTANT_INTEGER_TAG = 3;\n+    static final int CONSTANT_FLOAT_TAG = 4;\n+    static final int CONSTANT_LONG_TAG = 5;\n+    static final int CONSTANT_DOUBLE_TAG = 6;\n+    static final int CONSTANT_CLASS_TAG = 7;\n+    static final int CONSTANT_STRING_TAG = 8;\n+    static final int CONSTANT_FIELDREF_TAG = 9;\n+    static final int CONSTANT_METHODREF_TAG = 10;\n+    static final int CONSTANT_INTERFACE_METHODREF_TAG = 11;\n+    static final int CONSTANT_NAME_AND_TYPE_TAG = 12;\n+    static final int CONSTANT_METHOD_HANDLE_TAG = 15;\n+    static final int CONSTANT_METHOD_TYPE_TAG = 16;\n+    static final int CONSTANT_DYNAMIC_TAG = 17;\n+    static final int CONSTANT_INVOKE_DYNAMIC_TAG = 18;\n+    static final int CONSTANT_MODULE_TAG = 19;\n+    static final int CONSTANT_PACKAGE_TAG = 20;\n+\n+    private boolean requiresTransformation(String res, ClassPathElement i, Set<String> modelInfo) {\n+        ByteBuffer data = ByteBuffer.wrap(i.getResource(res).getData());\n+        if (data.getInt() != 0xCAFEBABE) {\n+            return false; //not a class file\n+        }\n+        data.getShort();//major\n+        data.getShort();//minor\n+        int constantPoolCount = data.getShort();\n+        int currentCpInfoIndex = 1;\n+        while (currentCpInfoIndex < constantPoolCount) {\n+            currentCpInfoIndex++;\n+            int cpInfoSize;\n+            switch (data.get()) {\n+                case CONSTANT_FIELDREF_TAG:\n+                case CONSTANT_METHODREF_TAG:\n+                case CONSTANT_INTERFACE_METHODREF_TAG:\n+                case CONSTANT_INTEGER_TAG:\n+                case CONSTANT_FLOAT_TAG:\n+                case CONSTANT_NAME_AND_TYPE_TAG:\n+                    cpInfoSize = 4;\n+                    break;\n+                case CONSTANT_DYNAMIC_TAG:\n+                    cpInfoSize = 4;\n+                    break;\n+                case CONSTANT_INVOKE_DYNAMIC_TAG:\n+                    cpInfoSize = 4;\n+                    break;\n+                case CONSTANT_LONG_TAG:\n+                case CONSTANT_DOUBLE_TAG:\n+                    cpInfoSize = 8;\n+                    currentCpInfoIndex++;\n+                    break;\n+                case CONSTANT_UTF8_TAG:\n+                    int strLength = 0xFFFF & data.getShort();\n+                    cpInfoSize = 0;\n+                    byte[] str = new byte[strLength];\n+                    data.get(str);\n+                    if (modelInfo.contains(new String(str, StandardCharsets.UTF_8))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a1d0fe4ace6a331016891ded471fe2bad54b06"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk3MzI2Mg==", "bodyText": "I think it would be better to move this in a core class like ConstantPoolScanner and make it take a ConstantPoolPredicate that can match, no?\nI want to reuse this for #814 :)\nAlso, I wonder how we can make sure we update this scanner at every new JVM spec that defines a new constant pool type.", "url": "https://github.com/quarkusio/quarkus/pull/8973#discussion_r417973262", "createdAt": "2020-04-30T12:30:14Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache/deployment/src/main/java/io/quarkus/hibernate/orm/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -148,15 +161,104 @@ void build(CombinedIndexBuildItem index,\n         MetamodelInfo<EntityModel<EntityField>> modelInfo = modelEnhancer.getModelInfo();\n         if (modelInfo.hasEntities()) {\n             PanacheFieldAccessEnhancer panacheFieldAccessEnhancer = new PanacheFieldAccessEnhancer(modelInfo);\n-            for (ClassInfo classInfo : index.getIndex().getKnownClasses()) {\n-                String className = classInfo.name().toString();\n-                if (!modelClasses.contains(className)) {\n-                    transformers.produce(new BytecodeTransformerBuildItem(className, panacheFieldAccessEnhancer));\n+            QuarkusClassLoader tccl = (QuarkusClassLoader) Thread.currentThread().getContextClassLoader();\n+            List<ClassPathElement> archives = tccl.getElementsWithResource(META_INF_PANACHE_ARCHIVE_MARKER);\n+            for (ClassPathElement i : archives) {\n+                for (String res : i.getProvidedResources()) {\n+                    if (res.endsWith(\".class\")) {\n+                        String cn = res.replace(\"/\", \".\").substring(0, res.length() - 6);\n+                        if (!modelClasses.contains(cn)) {\n+                            if (requiresTransformation(res, i, modelClassNamesInternal)) {\n+                                transformers.produce(new BytecodeTransformerBuildItem(cn, panacheFieldAccessEnhancer));\n+                            }\n+                        }\n+                    }\n                 }\n             }\n         }\n     }\n \n+    static final int CONSTANT_UTF8_TAG = 1;\n+    static final int CONSTANT_INTEGER_TAG = 3;\n+    static final int CONSTANT_FLOAT_TAG = 4;\n+    static final int CONSTANT_LONG_TAG = 5;\n+    static final int CONSTANT_DOUBLE_TAG = 6;\n+    static final int CONSTANT_CLASS_TAG = 7;\n+    static final int CONSTANT_STRING_TAG = 8;\n+    static final int CONSTANT_FIELDREF_TAG = 9;\n+    static final int CONSTANT_METHODREF_TAG = 10;\n+    static final int CONSTANT_INTERFACE_METHODREF_TAG = 11;\n+    static final int CONSTANT_NAME_AND_TYPE_TAG = 12;\n+    static final int CONSTANT_METHOD_HANDLE_TAG = 15;\n+    static final int CONSTANT_METHOD_TYPE_TAG = 16;\n+    static final int CONSTANT_DYNAMIC_TAG = 17;\n+    static final int CONSTANT_INVOKE_DYNAMIC_TAG = 18;\n+    static final int CONSTANT_MODULE_TAG = 19;\n+    static final int CONSTANT_PACKAGE_TAG = 20;\n+\n+    private boolean requiresTransformation(String res, ClassPathElement i, Set<String> modelInfo) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a1d0fe4ace6a331016891ded471fe2bad54b06"}, "originalPosition": 96}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "29a1d0fe4ace6a331016891ded471fe2bad54b06", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/29a1d0fe4ace6a331016891ded471fe2bad54b06", "committedDate": "2020-04-30T07:59:16Z", "message": "Implement an annotation process to mark Panache archives\n\nThe logic here is that only libraries that are compiled\nagainst panache will have this generated marker file, and\nif this file is present this means that classes in the archive\nmay need to be transformed.\n\nThis is just a draft at the moment, a similar approach would\nalso need to be taken with Mongo."}, "afterCommit": {"oid": "250da0443812d63f3f99306bdd7bde9569e63b7f", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/250da0443812d63f3f99306bdd7bde9569e63b7f", "committedDate": "2020-05-06T05:55:22Z", "message": "Implement an annotation process to mark Panache archives\n\nThe logic here is that only libraries that are compiled\nagainst panache will have this generated marker file, and\nif this file is present this means that classes in the archive\nmay need to be transformed.\n\nThis is just a draft at the moment, a similar approach would\nalso need to be taken with Mongo."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTU1NTk2", "url": "https://github.com/quarkusio/quarkus/pull/8973#pullrequestreview-406555596", "createdAt": "2020-05-06T12:20:01Z", "commit": {"oid": "250da0443812d63f3f99306bdd7bde9569e63b7f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a28d76b436f0829e332c63e6a5d320d7eebd35f5", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/a28d76b436f0829e332c63e6a5d320d7eebd35f5", "committedDate": "2020-05-06T13:36:45Z", "message": "Implement an annotation process to mark Panache archives\n\nThe logic here is that only libraries that are compiled\nagainst panache will have this generated marker file, and\nif this file is present this means that classes in the archive\nmay need to be transformed.\n\nThis is just a draft at the moment, a similar approach would\nalso need to be taken with Mongo."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "250da0443812d63f3f99306bdd7bde9569e63b7f", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/250da0443812d63f3f99306bdd7bde9569e63b7f", "committedDate": "2020-05-06T05:55:22Z", "message": "Implement an annotation process to mark Panache archives\n\nThe logic here is that only libraries that are compiled\nagainst panache will have this generated marker file, and\nif this file is present this means that classes in the archive\nmay need to be transformed.\n\nThis is just a draft at the moment, a similar approach would\nalso need to be taken with Mongo."}, "afterCommit": {"oid": "a28d76b436f0829e332c63e6a5d320d7eebd35f5", "author": {"user": {"login": "stuartwdouglas", "name": "Stuart Douglas"}}, "url": "https://github.com/quarkusio/quarkus/commit/a28d76b436f0829e332c63e6a5d320d7eebd35f5", "committedDate": "2020-05-06T13:36:45Z", "message": "Implement an annotation process to mark Panache archives\n\nThe logic here is that only libraries that are compiled\nagainst panache will have this generated marker file, and\nif this file is present this means that classes in the archive\nmay need to be transformed.\n\nThis is just a draft at the moment, a similar approach would\nalso need to be taken with Mongo."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4404, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}