{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1OTM1ODk1", "number": 8284, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjoyMjowM1rODs4BTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDoyNTo1OFrODxzzdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzgxNzcyOnYy", "diffSide": "RIGHT", "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/app/CuratedApplication.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjoyMjowM1rOF9-Zvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwMjowNzo0NVrOF_Y2-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyOTg1NA==", "bodyText": "@stuartwdouglas please check this one. I am adding the root application artifact here. I think it's ok because all the deps are added here besides the root artifact. Full deployment deps above already contain the \"user deps\".", "url": "https://github.com/quarkusio/quarkus/pull/8284#discussion_r400529854", "createdAt": "2020-03-30T22:22:03Z", "author": {"login": "aloubyansky"}, "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/app/CuratedApplication.java", "diffHunk": "@@ -164,30 +161,23 @@ public synchronized QuarkusClassLoader getAugmentClassLoader() {\n             //we want a class loader that can load the deployment artifacts and all their dependencies, but not\n             //any of the runtime artifacts, or user classes\n             //this will load any deployment artifacts from the parent CL if they are present\n-            Set<AppArtifact> deploymentArtifacts = new HashSet<>();\n             for (AppDependency i : appModel.getFullDeploymentDeps()) {\n-                AppArtifactKey key = getKey(i);\n-                deploymentArtifacts.add(i.getArtifact());\n-                ClassPathElement element = getElement(i.getArtifact());\n-                builder.addElement(element);\n-                if (appModel.getParentFirstArtifacts().contains(key)) {\n-                    //we always load this from the parent if it is available, as this acts as a bridge between the running\n-                    //app and the dev mode code\n-                    builder.addParentFirstElement(element);\n-                }\n-            }\n-            for (AppDependency userDep : appModel.getUserDependencies()) {\n-                if (!deploymentArtifacts.contains(userDep.getArtifact())) {\n-                    AppArtifactKey key = getKey(userDep);\n-                    ClassPathElement element = getElement(userDep.getArtifact());\n-                    if (appModel.getParentFirstArtifacts().contains(key)) {\n-                        //this mostly happens when building quarkus itself\n+                processCpElement(i.getArtifact(), element -> {\n+                    builder.addElement(element);\n+                    if (appModel.getParentFirstArtifacts().contains(getKey(i))) {\n+                        //we always load this from the parent if it is available, as this acts as a bridge between the running\n+                        //app and the dev mode code\n                         builder.addParentFirstElement(element);\n                     }\n-                    builder.addElement(element);\n-                }\n+                });\n             }\n \n+            appModel.getAppArtifact().getPaths().forEach(p -> {\n+                if (Files.exists(p)) {\n+                    builder.addElement(ClassPathElement.fromPath(p));\n+                }\n+            });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15fd623d459fd46b76481225d62d5f6938091c44"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1NDY3MA==", "bodyText": "This does not look right, this should be in the deployment CL instead.\nIn dev mode this CL is persistent, so if you include parts of the application then any changes will not be visible.", "url": "https://github.com/quarkusio/quarkus/pull/8284#discussion_r400654670", "createdAt": "2020-03-31T05:38:11Z", "author": {"login": "stuartwdouglas"}, "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/app/CuratedApplication.java", "diffHunk": "@@ -164,30 +161,23 @@ public synchronized QuarkusClassLoader getAugmentClassLoader() {\n             //we want a class loader that can load the deployment artifacts and all their dependencies, but not\n             //any of the runtime artifacts, or user classes\n             //this will load any deployment artifacts from the parent CL if they are present\n-            Set<AppArtifact> deploymentArtifacts = new HashSet<>();\n             for (AppDependency i : appModel.getFullDeploymentDeps()) {\n-                AppArtifactKey key = getKey(i);\n-                deploymentArtifacts.add(i.getArtifact());\n-                ClassPathElement element = getElement(i.getArtifact());\n-                builder.addElement(element);\n-                if (appModel.getParentFirstArtifacts().contains(key)) {\n-                    //we always load this from the parent if it is available, as this acts as a bridge between the running\n-                    //app and the dev mode code\n-                    builder.addParentFirstElement(element);\n-                }\n-            }\n-            for (AppDependency userDep : appModel.getUserDependencies()) {\n-                if (!deploymentArtifacts.contains(userDep.getArtifact())) {\n-                    AppArtifactKey key = getKey(userDep);\n-                    ClassPathElement element = getElement(userDep.getArtifact());\n-                    if (appModel.getParentFirstArtifacts().contains(key)) {\n-                        //this mostly happens when building quarkus itself\n+                processCpElement(i.getArtifact(), element -> {\n+                    builder.addElement(element);\n+                    if (appModel.getParentFirstArtifacts().contains(getKey(i))) {\n+                        //we always load this from the parent if it is available, as this acts as a bridge between the running\n+                        //app and the dev mode code\n                         builder.addParentFirstElement(element);\n                     }\n-                    builder.addElement(element);\n-                }\n+                });\n             }\n \n+            appModel.getAppArtifact().getPaths().forEach(p -> {\n+                if (Files.exists(p)) {\n+                    builder.addElement(ClassPathElement.fromPath(p));\n+                }\n+            });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyOTg1NA=="}, "originalCommit": {"oid": "15fd623d459fd46b76481225d62d5f6938091c44"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcxMTc4Ng==", "bodyText": "What about the local projects that appear as \"user deps\" and among the full deployment dependencies?", "url": "https://github.com/quarkusio/quarkus/pull/8284#discussion_r400711786", "createdAt": "2020-03-31T07:54:28Z", "author": {"login": "aloubyansky"}, "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/app/CuratedApplication.java", "diffHunk": "@@ -164,30 +161,23 @@ public synchronized QuarkusClassLoader getAugmentClassLoader() {\n             //we want a class loader that can load the deployment artifacts and all their dependencies, but not\n             //any of the runtime artifacts, or user classes\n             //this will load any deployment artifacts from the parent CL if they are present\n-            Set<AppArtifact> deploymentArtifacts = new HashSet<>();\n             for (AppDependency i : appModel.getFullDeploymentDeps()) {\n-                AppArtifactKey key = getKey(i);\n-                deploymentArtifacts.add(i.getArtifact());\n-                ClassPathElement element = getElement(i.getArtifact());\n-                builder.addElement(element);\n-                if (appModel.getParentFirstArtifacts().contains(key)) {\n-                    //we always load this from the parent if it is available, as this acts as a bridge between the running\n-                    //app and the dev mode code\n-                    builder.addParentFirstElement(element);\n-                }\n-            }\n-            for (AppDependency userDep : appModel.getUserDependencies()) {\n-                if (!deploymentArtifacts.contains(userDep.getArtifact())) {\n-                    AppArtifactKey key = getKey(userDep);\n-                    ClassPathElement element = getElement(userDep.getArtifact());\n-                    if (appModel.getParentFirstArtifacts().contains(key)) {\n-                        //this mostly happens when building quarkus itself\n+                processCpElement(i.getArtifact(), element -> {\n+                    builder.addElement(element);\n+                    if (appModel.getParentFirstArtifacts().contains(getKey(i))) {\n+                        //we always load this from the parent if it is available, as this acts as a bridge between the running\n+                        //app and the dev mode code\n                         builder.addParentFirstElement(element);\n                     }\n-                    builder.addElement(element);\n-                }\n+                });\n             }\n \n+            appModel.getAppArtifact().getPaths().forEach(p -> {\n+                if (Files.exists(p)) {\n+                    builder.addElement(ClassPathElement.fromPath(p));\n+                }\n+            });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyOTg1NA=="}, "originalCommit": {"oid": "15fd623d459fd46b76481225d62d5f6938091c44"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcxMjcwMQ==", "bodyText": "BTW, there would be test failures if I added it in the deployment CL.", "url": "https://github.com/quarkusio/quarkus/pull/8284#discussion_r400712701", "createdAt": "2020-03-31T07:56:03Z", "author": {"login": "aloubyansky"}, "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/app/CuratedApplication.java", "diffHunk": "@@ -164,30 +161,23 @@ public synchronized QuarkusClassLoader getAugmentClassLoader() {\n             //we want a class loader that can load the deployment artifacts and all their dependencies, but not\n             //any of the runtime artifacts, or user classes\n             //this will load any deployment artifacts from the parent CL if they are present\n-            Set<AppArtifact> deploymentArtifacts = new HashSet<>();\n             for (AppDependency i : appModel.getFullDeploymentDeps()) {\n-                AppArtifactKey key = getKey(i);\n-                deploymentArtifacts.add(i.getArtifact());\n-                ClassPathElement element = getElement(i.getArtifact());\n-                builder.addElement(element);\n-                if (appModel.getParentFirstArtifacts().contains(key)) {\n-                    //we always load this from the parent if it is available, as this acts as a bridge between the running\n-                    //app and the dev mode code\n-                    builder.addParentFirstElement(element);\n-                }\n-            }\n-            for (AppDependency userDep : appModel.getUserDependencies()) {\n-                if (!deploymentArtifacts.contains(userDep.getArtifact())) {\n-                    AppArtifactKey key = getKey(userDep);\n-                    ClassPathElement element = getElement(userDep.getArtifact());\n-                    if (appModel.getParentFirstArtifacts().contains(key)) {\n-                        //this mostly happens when building quarkus itself\n+                processCpElement(i.getArtifact(), element -> {\n+                    builder.addElement(element);\n+                    if (appModel.getParentFirstArtifacts().contains(getKey(i))) {\n+                        //we always load this from the parent if it is available, as this acts as a bridge between the running\n+                        //app and the dev mode code\n                         builder.addParentFirstElement(element);\n                     }\n-                    builder.addElement(element);\n-                }\n+                });\n             }\n \n+            appModel.getAppArtifact().getPaths().forEach(p -> {\n+                if (Files.exists(p)) {\n+                    builder.addElement(ClassPathElement.fromPath(p));\n+                }\n+            });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyOTg1NA=="}, "originalCommit": {"oid": "15fd623d459fd46b76481225d62d5f6938091c44"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMyNjMxNw==", "bodyText": "Local projects that are extension dependencies and this not hot reloadable are fine, but we can't have anything hot reloadable here.", "url": "https://github.com/quarkusio/quarkus/pull/8284#discussion_r401326317", "createdAt": "2020-04-01T02:50:04Z", "author": {"login": "stuartwdouglas"}, "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/app/CuratedApplication.java", "diffHunk": "@@ -164,30 +161,23 @@ public synchronized QuarkusClassLoader getAugmentClassLoader() {\n             //we want a class loader that can load the deployment artifacts and all their dependencies, but not\n             //any of the runtime artifacts, or user classes\n             //this will load any deployment artifacts from the parent CL if they are present\n-            Set<AppArtifact> deploymentArtifacts = new HashSet<>();\n             for (AppDependency i : appModel.getFullDeploymentDeps()) {\n-                AppArtifactKey key = getKey(i);\n-                deploymentArtifacts.add(i.getArtifact());\n-                ClassPathElement element = getElement(i.getArtifact());\n-                builder.addElement(element);\n-                if (appModel.getParentFirstArtifacts().contains(key)) {\n-                    //we always load this from the parent if it is available, as this acts as a bridge between the running\n-                    //app and the dev mode code\n-                    builder.addParentFirstElement(element);\n-                }\n-            }\n-            for (AppDependency userDep : appModel.getUserDependencies()) {\n-                if (!deploymentArtifacts.contains(userDep.getArtifact())) {\n-                    AppArtifactKey key = getKey(userDep);\n-                    ClassPathElement element = getElement(userDep.getArtifact());\n-                    if (appModel.getParentFirstArtifacts().contains(key)) {\n-                        //this mostly happens when building quarkus itself\n+                processCpElement(i.getArtifact(), element -> {\n+                    builder.addElement(element);\n+                    if (appModel.getParentFirstArtifacts().contains(getKey(i))) {\n+                        //we always load this from the parent if it is available, as this acts as a bridge between the running\n+                        //app and the dev mode code\n                         builder.addParentFirstElement(element);\n                     }\n-                    builder.addElement(element);\n-                }\n+                });\n             }\n \n+            appModel.getAppArtifact().getPaths().forEach(p -> {\n+                if (Files.exists(p)) {\n+                    builder.addElement(ClassPathElement.fromPath(p));\n+                }\n+            });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyOTg1NA=="}, "originalCommit": {"oid": "15fd623d459fd46b76481225d62d5f6938091c44"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM2Mjc4NA==", "bodyText": "Isn't it happening here https://github.com/quarkusio/quarkus/blob/master/independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/app/CuratedApplication.java#L172 ? Full deployment deps include all the user configured runtime deps including the local hot reloadable projects, afaiu.", "url": "https://github.com/quarkusio/quarkus/pull/8284#discussion_r401362784", "createdAt": "2020-04-01T05:25:08Z", "author": {"login": "aloubyansky"}, "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/app/CuratedApplication.java", "diffHunk": "@@ -164,30 +161,23 @@ public synchronized QuarkusClassLoader getAugmentClassLoader() {\n             //we want a class loader that can load the deployment artifacts and all their dependencies, but not\n             //any of the runtime artifacts, or user classes\n             //this will load any deployment artifacts from the parent CL if they are present\n-            Set<AppArtifact> deploymentArtifacts = new HashSet<>();\n             for (AppDependency i : appModel.getFullDeploymentDeps()) {\n-                AppArtifactKey key = getKey(i);\n-                deploymentArtifacts.add(i.getArtifact());\n-                ClassPathElement element = getElement(i.getArtifact());\n-                builder.addElement(element);\n-                if (appModel.getParentFirstArtifacts().contains(key)) {\n-                    //we always load this from the parent if it is available, as this acts as a bridge between the running\n-                    //app and the dev mode code\n-                    builder.addParentFirstElement(element);\n-                }\n-            }\n-            for (AppDependency userDep : appModel.getUserDependencies()) {\n-                if (!deploymentArtifacts.contains(userDep.getArtifact())) {\n-                    AppArtifactKey key = getKey(userDep);\n-                    ClassPathElement element = getElement(userDep.getArtifact());\n-                    if (appModel.getParentFirstArtifacts().contains(key)) {\n-                        //this mostly happens when building quarkus itself\n+                processCpElement(i.getArtifact(), element -> {\n+                    builder.addElement(element);\n+                    if (appModel.getParentFirstArtifacts().contains(getKey(i))) {\n+                        //we always load this from the parent if it is available, as this acts as a bridge between the running\n+                        //app and the dev mode code\n                         builder.addParentFirstElement(element);\n                     }\n-                    builder.addElement(element);\n-                }\n+                });\n             }\n \n+            appModel.getAppArtifact().getPaths().forEach(p -> {\n+                if (Files.exists(p)) {\n+                    builder.addElement(ClassPathElement.fromPath(p));\n+                }\n+            });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyOTg1NA=="}, "originalCommit": {"oid": "15fd623d459fd46b76481225d62d5f6938091c44"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAxMTg5Nw==", "bodyText": "Hmm, looks like this is an existing problem.\nIn practice it should be fine as the relevant classes should always be loaded from the runtime/deployment class loader.", "url": "https://github.com/quarkusio/quarkus/pull/8284#discussion_r402011897", "createdAt": "2020-04-02T02:07:45Z", "author": {"login": "stuartwdouglas"}, "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/app/CuratedApplication.java", "diffHunk": "@@ -164,30 +161,23 @@ public synchronized QuarkusClassLoader getAugmentClassLoader() {\n             //we want a class loader that can load the deployment artifacts and all their dependencies, but not\n             //any of the runtime artifacts, or user classes\n             //this will load any deployment artifacts from the parent CL if they are present\n-            Set<AppArtifact> deploymentArtifacts = new HashSet<>();\n             for (AppDependency i : appModel.getFullDeploymentDeps()) {\n-                AppArtifactKey key = getKey(i);\n-                deploymentArtifacts.add(i.getArtifact());\n-                ClassPathElement element = getElement(i.getArtifact());\n-                builder.addElement(element);\n-                if (appModel.getParentFirstArtifacts().contains(key)) {\n-                    //we always load this from the parent if it is available, as this acts as a bridge between the running\n-                    //app and the dev mode code\n-                    builder.addParentFirstElement(element);\n-                }\n-            }\n-            for (AppDependency userDep : appModel.getUserDependencies()) {\n-                if (!deploymentArtifacts.contains(userDep.getArtifact())) {\n-                    AppArtifactKey key = getKey(userDep);\n-                    ClassPathElement element = getElement(userDep.getArtifact());\n-                    if (appModel.getParentFirstArtifacts().contains(key)) {\n-                        //this mostly happens when building quarkus itself\n+                processCpElement(i.getArtifact(), element -> {\n+                    builder.addElement(element);\n+                    if (appModel.getParentFirstArtifacts().contains(getKey(i))) {\n+                        //we always load this from the parent if it is available, as this acts as a bridge between the running\n+                        //app and the dev mode code\n                         builder.addParentFirstElement(element);\n                     }\n-                    builder.addElement(element);\n-                }\n+                });\n             }\n \n+            appModel.getAppArtifact().getPaths().forEach(p -> {\n+                if (Files.exists(p)) {\n+                    builder.addElement(ClassPathElement.fromPath(p));\n+                }\n+            });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyOTg1NA=="}, "originalCommit": {"oid": "15fd623d459fd46b76481225d62d5f6938091c44"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDYxOTIwOnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/builditem/QuarkusBuildCloseablesBuildItem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNToyODozOFrOF-F23g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNToyODozOFrOF-F23g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1MTk5OA==", "bodyText": "This needs to be thread safe.\nNormally we don't want mutable build items but for this use case this makes sense, as we only want these to be produced as side effects.", "url": "https://github.com/quarkusio/quarkus/pull/8284#discussion_r400651998", "createdAt": "2020-03-31T05:28:38Z", "author": {"login": "stuartwdouglas"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/builditem/QuarkusBuildCloseablesBuildItem.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package io.quarkus.deployment.builditem;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.builder.item.SimpleBuildItem;\n+\n+public final class QuarkusBuildCloseablesBuildItem extends SimpleBuildItem implements Closeable {\n+\n+    private static final Logger log = Logger.getLogger(QuarkusBuildCloseablesBuildItem.class);\n+\n+    private final List<Closeable> closeables = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15fd623d459fd46b76481225d62d5f6938091c44"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDYyMDQ1OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/builditem/QuarkusBuildCloseablesBuildItem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNToyOToxMlrOF-F3lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNToyOToxMlrOF-F3lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1MjE4Mg==", "bodyText": "This should probably catch Throwable, just to make sure everything gets closed.", "url": "https://github.com/quarkusio/quarkus/pull/8284#discussion_r400652182", "createdAt": "2020-03-31T05:29:12Z", "author": {"login": "stuartwdouglas"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/builditem/QuarkusBuildCloseablesBuildItem.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package io.quarkus.deployment.builditem;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.builder.item.SimpleBuildItem;\n+\n+public final class QuarkusBuildCloseablesBuildItem extends SimpleBuildItem implements Closeable {\n+\n+    private static final Logger log = Logger.getLogger(QuarkusBuildCloseablesBuildItem.class);\n+\n+    private final List<Closeable> closeables = new ArrayList<>();\n+\n+    public <T extends Closeable> T add(T closeable) {\n+        closeables.add(closeable);\n+        return closeable;\n+    }\n+\n+    @Override\n+    public void close() {\n+        for (Closeable c : closeables) {\n+            try {\n+                c.close();\n+            } catch (IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15fd623d459fd46b76481225d62d5f6938091c44"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDY0MTkyOnYy", "diffSide": "RIGHT", "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/model/AppArtifact.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTo0MToxMFrOF-GErw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTo0MToxMFrOF-GErw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1NTUzNQ==", "bodyText": "Do we actually want this? If we forget to update it we could have weird errors when upgrading.", "url": "https://github.com/quarkusio/quarkus/pull/8284#discussion_r400655535", "createdAt": "2020-03-31T05:41:10Z", "author": {"login": "stuartwdouglas"}, "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/model/AppArtifact.java", "diffHunk": "@@ -12,7 +10,9 @@\n  */\n public class AppArtifact extends AppArtifactCoords implements Serializable {\n \n-    protected transient Path path;\n+    private static final long serialVersionUID = 1L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15fd623d459fd46b76481225d62d5f6938091c44"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDY0NDI3OnYy", "diffSide": "RIGHT", "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/model/PathsCollection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTo0MjoyNFrOF-GGJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNTo0MjoyNFrOF-GGJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1NTkwOA==", "bodyText": "See my comments above.", "url": "https://github.com/quarkusio/quarkus/pull/8284#discussion_r400655908", "createdAt": "2020-03-31T05:42:24Z", "author": {"login": "stuartwdouglas"}, "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/model/PathsCollection.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package io.quarkus.bootstrap.model;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class PathsCollection implements Iterable<Path>, Serializable {\n+\n+    private static final long serialVersionUID = 1L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15fd623d459fd46b76481225d62d5f6938091c44"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDc0MTc4OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNjoyNzozNlrOF-G_3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNjoyNzozNlrOF-G_3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY3MDY4Ng==", "bodyText": "This is pretty ugly. I'm still waiting for the CI to see if it fixes it.", "url": "https://github.com/quarkusio/quarkus/pull/8284#discussion_r400670686", "createdAt": "2020-03-31T06:27:36Z", "author": {"login": "aloubyansky"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/JarResultBuildStep.java", "diffHunk": "@@ -234,17 +228,35 @@ private JarBuildItem buildUberJar(CurateOutcomeBuildItem curateOutcomeBuildItem,\n \n         runnerJar.toFile().setReadable(true, false);\n \n+        //for uberjars we move the original jar, so there is only a single jar in the output directory\n+        final Path standardJar = outputTargetBuildItem.getOutputDirectory()\n+                .resolve(outputTargetBuildItem.getBaseName() + \".jar\");\n+        final Path originalJar;\n+        if (standardJar.toFile().exists()) {\n+            originalJar = outputTargetBuildItem.getOutputDirectory()\n+                    .resolve(outputTargetBuildItem.getBaseName() + \".jar.original\");\n+        } else {\n+            originalJar = null;\n+        }\n+\n+        // this hack is necessary to wait for the original JAR to get closed\n+        closeablesBuildItem.add(new Closeable() {\n+            @Override\n+            public void close() throws IOException {\n+                if (standardJar.toFile().exists()) {\n+                    Files.deleteIfExists(originalJar);\n+                    Files.move(standardJar, originalJar);\n+                }\n+            }\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f1a2c95a8450801bf916552862772e819a9b4d6"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTU0NTExOnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/ApplicationArchive.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDoyMjo0NlrOGFfeag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDoyNzo1NFrOGFfpLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQxMTc1NA==", "bodyText": "What's the benefit of having PathsCollection over List<Path> ?", "url": "https://github.com/quarkusio/quarkus/pull/8284#discussion_r408411754", "createdAt": "2020-04-14T20:22:46Z", "author": {"login": "gastaldi"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ApplicationArchive.java", "diffHunk": "@@ -26,33 +29,72 @@\n      * jar, but rather a path to the root of the mounted {@link com.sun.nio.zipfs.ZipFileSystem}\n      *\n      * @return The archive root.\n+     * @deprecated in favor of {@link #getRootDirs()}\n      */\n+    @Deprecated\n     Path getArchiveRoot();\n \n     /**\n      *\n      * @return <code>true</code> if this archive is a jar\n+     * @deprecated does not appear to be used anywhere and now it shouldn't be\n      */\n+    @Deprecated\n     boolean isJarArchive();\n \n     /**\n      * If this archive is a jar file it will return the path to the jar file on the file system,\n      * otherwise it will return the directory that this corresponds to.\n+     *\n+     * @deprecated in favor of {@link #getPaths()}\n      */\n+    @Deprecated\n     Path getArchiveLocation();\n \n+    /**\n+     *\n+     * Returns paths representing the archive root directories. Note that every path in this collection\n+     * is guaranteed to be a directory. If the actual application archive appears to be a JAR,\n+     * this collection will include a path to the root of the mounted {@link java.nio.file.FileSystem}\n+     * created from the JAR.\n+     *\n+     * @return The archive root directories.\n+     */\n+    PathsCollection getRootDirs();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e272b9c60f20dc59e9eabed2c7f6373401cb0e0"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQxMjA2Mg==", "bodyText": "the utility methods I suppose, like resolveExistingOrNull?", "url": "https://github.com/quarkusio/quarkus/pull/8284#discussion_r408412062", "createdAt": "2020-04-14T20:23:19Z", "author": {"login": "gastaldi"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ApplicationArchive.java", "diffHunk": "@@ -26,33 +29,72 @@\n      * jar, but rather a path to the root of the mounted {@link com.sun.nio.zipfs.ZipFileSystem}\n      *\n      * @return The archive root.\n+     * @deprecated in favor of {@link #getRootDirs()}\n      */\n+    @Deprecated\n     Path getArchiveRoot();\n \n     /**\n      *\n      * @return <code>true</code> if this archive is a jar\n+     * @deprecated does not appear to be used anywhere and now it shouldn't be\n      */\n+    @Deprecated\n     boolean isJarArchive();\n \n     /**\n      * If this archive is a jar file it will return the path to the jar file on the file system,\n      * otherwise it will return the directory that this corresponds to.\n+     *\n+     * @deprecated in favor of {@link #getPaths()}\n      */\n+    @Deprecated\n     Path getArchiveLocation();\n \n+    /**\n+     *\n+     * Returns paths representing the archive root directories. Note that every path in this collection\n+     * is guaranteed to be a directory. If the actual application archive appears to be a JAR,\n+     * this collection will include a path to the root of the mounted {@link java.nio.file.FileSystem}\n+     * created from the JAR.\n+     *\n+     * @return The archive root directories.\n+     */\n+    PathsCollection getRootDirs();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQxMTc1NA=="}, "originalCommit": {"oid": "3e272b9c60f20dc59e9eabed2c7f6373401cb0e0"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQxNDUxMA==", "bodyText": "Yes, it allows/will allow us to add functionality we find useful in our context.", "url": "https://github.com/quarkusio/quarkus/pull/8284#discussion_r408414510", "createdAt": "2020-04-14T20:27:54Z", "author": {"login": "aloubyansky"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ApplicationArchive.java", "diffHunk": "@@ -26,33 +29,72 @@\n      * jar, but rather a path to the root of the mounted {@link com.sun.nio.zipfs.ZipFileSystem}\n      *\n      * @return The archive root.\n+     * @deprecated in favor of {@link #getRootDirs()}\n      */\n+    @Deprecated\n     Path getArchiveRoot();\n \n     /**\n      *\n      * @return <code>true</code> if this archive is a jar\n+     * @deprecated does not appear to be used anywhere and now it shouldn't be\n      */\n+    @Deprecated\n     boolean isJarArchive();\n \n     /**\n      * If this archive is a jar file it will return the path to the jar file on the file system,\n      * otherwise it will return the directory that this corresponds to.\n+     *\n+     * @deprecated in favor of {@link #getPaths()}\n      */\n+    @Deprecated\n     Path getArchiveLocation();\n \n+    /**\n+     *\n+     * Returns paths representing the archive root directories. Note that every path in this collection\n+     * is guaranteed to be a directory. If the actual application archive appears to be a JAR,\n+     * this collection will include a path to the root of the mounted {@link java.nio.file.FileSystem}\n+     * created from the JAR.\n+     *\n+     * @return The archive root directories.\n+     */\n+    PathsCollection getRootDirs();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQxMTc1NA=="}, "originalCommit": {"oid": "3e272b9c60f20dc59e9eabed2c7f6373401cb0e0"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTU1NTE1OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/ApplicationArchiveImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDoyNTo0NlrOGFfk4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDoyOTo0NlrOGFftVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQxMzQxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return rootDirs.iterator().next();\n          \n          \n            \n                    return rootDirs.getSinglePath();", "url": "https://github.com/quarkusio/quarkus/pull/8284#discussion_r408413411", "createdAt": "2020-04-14T20:25:46Z", "author": {"login": "gastaldi"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ApplicationArchiveImpl.java", "diffHunk": "@@ -31,24 +36,30 @@ public IndexView getIndex() {\n     }\n \n     @Override\n+    @Deprecated\n     public Path getArchiveRoot() {\n-        return archiveRoot;\n+        return rootDirs.iterator().next();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e272b9c60f20dc59e9eabed2c7f6373401cb0e0"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQxNTU3Mw==", "bodyText": "Not yet, single path is assertive, it'll throw an exception in case there are more. In our current impl (not this PR but actually current codebase) we actually pick the first path in a few places.", "url": "https://github.com/quarkusio/quarkus/pull/8284#discussion_r408415573", "createdAt": "2020-04-14T20:29:46Z", "author": {"login": "aloubyansky"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ApplicationArchiveImpl.java", "diffHunk": "@@ -31,24 +36,30 @@ public IndexView getIndex() {\n     }\n \n     @Override\n+    @Deprecated\n     public Path getArchiveRoot() {\n-        return archiveRoot;\n+        return rootDirs.iterator().next();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQxMzQxMQ=="}, "originalCommit": {"oid": "3e272b9c60f20dc59e9eabed2c7f6373401cb0e0"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTU1NTczOnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/ApplicationArchiveImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDoyNTo1OFrOGFflRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDozMDoxMlrOGFfuMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQxMzUxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return paths.iterator().next();\n          \n          \n            \n                    return paths.getSinglePath();", "url": "https://github.com/quarkusio/quarkus/pull/8284#discussion_r408413511", "createdAt": "2020-04-14T20:25:58Z", "author": {"login": "gastaldi"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ApplicationArchiveImpl.java", "diffHunk": "@@ -31,24 +36,30 @@ public IndexView getIndex() {\n     }\n \n     @Override\n+    @Deprecated\n     public Path getArchiveRoot() {\n-        return archiveRoot;\n+        return rootDirs.iterator().next();\n     }\n \n     @Override\n+    @Deprecated\n     public boolean isJarArchive() {\n         return jar;\n     }\n \n     @Override\n+    @Deprecated\n     public Path getArchiveLocation() {\n-        return archiveLocation;\n+        return paths.iterator().next();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e272b9c60f20dc59e9eabed2c7f6373401cb0e0"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQxNTc5Mg==", "bodyText": "Same as above, not yet.", "url": "https://github.com/quarkusio/quarkus/pull/8284#discussion_r408415792", "createdAt": "2020-04-14T20:30:12Z", "author": {"login": "aloubyansky"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ApplicationArchiveImpl.java", "diffHunk": "@@ -31,24 +36,30 @@ public IndexView getIndex() {\n     }\n \n     @Override\n+    @Deprecated\n     public Path getArchiveRoot() {\n-        return archiveRoot;\n+        return rootDirs.iterator().next();\n     }\n \n     @Override\n+    @Deprecated\n     public boolean isJarArchive() {\n         return jar;\n     }\n \n     @Override\n+    @Deprecated\n     public Path getArchiveLocation() {\n-        return archiveLocation;\n+        return paths.iterator().next();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQxMzUxMQ=="}, "originalCommit": {"oid": "3e272b9c60f20dc59e9eabed2c7f6373401cb0e0"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3708, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}