{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4ODQ2NTgy", "number": 12563, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMjo0NjoxNVrOErKVtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMzoxNDo1NFrOErLFwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNjkzNjIzOnYy", "diffSide": "RIGHT", "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMjo0NjoxNVrOHdxihg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMDowMzoxN1rOHeJn1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk4MjQwNg==", "bodyText": "This looks very neat, but I believe you're not taking into account a change in related classes that would affect the output, such as @Proxy(proxyClass -> changedInterface ) ?", "url": "https://github.com/quarkusio/quarkus/pull/12563#discussion_r500982406", "createdAt": "2020-10-07T12:46:15Z", "author": {"login": "Sanne"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -1194,37 +1211,44 @@ private PreGeneratedProxies generatedProxies(Set<String> entityClassNames, Index\n         }\n         try (ProxyBuildingHelper proxyHelper = new ProxyBuildingHelper(Thread.currentThread().getContextClassLoader())) {\n             for (String entity : entityClassNames) {\n-                Set<Class<?>> proxyInterfaces = new HashSet<>();\n-                proxyInterfaces.add(HibernateProxy.class); //always added\n-                Class<?> mappedClass = proxyHelper.uninitializedClass(entity);\n-                String proxy = proxyAnnotations.get(entity);\n-                if (proxy != null) {\n-                    proxyInterfaces.add(proxyHelper.uninitializedClass(proxy));\n-                } else if (!proxyHelper.isProxiable(mappedClass)) {\n-                    //if there is no @Proxy we need to make sure the actual class is proxiable\n-                    continue;\n-                }\n-                for (ClassInfo subclass : combinedIndex.getAllKnownSubclasses(DotName.createSimple(entity))) {\n-                    String subclassName = subclass.name().toString();\n-                    if (!entityClassNames.contains(subclassName)) {\n-                        //not an entity\n-                        continue;\n-                    }\n-                    proxy = proxyAnnotations.get(subclassName);\n+                CachedProxy result;\n+                if (proxyCache.cache.containsKey(entity) && !changedClasses.contains(entity)) {\n+                    result = proxyCache.cache.get(entity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10038d7dbd3e06ce5bd81f956849c3d271243b07"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk4NTQ3Mg==", "bodyText": "And what about the current class inheriting further from other changed classes?", "url": "https://github.com/quarkusio/quarkus/pull/12563#discussion_r500985472", "createdAt": "2020-10-07T12:51:04Z", "author": {"login": "Sanne"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -1194,37 +1211,44 @@ private PreGeneratedProxies generatedProxies(Set<String> entityClassNames, Index\n         }\n         try (ProxyBuildingHelper proxyHelper = new ProxyBuildingHelper(Thread.currentThread().getContextClassLoader())) {\n             for (String entity : entityClassNames) {\n-                Set<Class<?>> proxyInterfaces = new HashSet<>();\n-                proxyInterfaces.add(HibernateProxy.class); //always added\n-                Class<?> mappedClass = proxyHelper.uninitializedClass(entity);\n-                String proxy = proxyAnnotations.get(entity);\n-                if (proxy != null) {\n-                    proxyInterfaces.add(proxyHelper.uninitializedClass(proxy));\n-                } else if (!proxyHelper.isProxiable(mappedClass)) {\n-                    //if there is no @Proxy we need to make sure the actual class is proxiable\n-                    continue;\n-                }\n-                for (ClassInfo subclass : combinedIndex.getAllKnownSubclasses(DotName.createSimple(entity))) {\n-                    String subclassName = subclass.name().toString();\n-                    if (!entityClassNames.contains(subclassName)) {\n-                        //not an entity\n-                        continue;\n-                    }\n-                    proxy = proxyAnnotations.get(subclassName);\n+                CachedProxy result;\n+                if (proxyCache.cache.containsKey(entity) && !changedClasses.contains(entity)) {\n+                    result = proxyCache.cache.get(entity);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk4MjQwNg=="}, "originalCommit": {"oid": "10038d7dbd3e06ce5bd81f956849c3d271243b07"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM3Njk4Mg==", "bodyText": "I now check the all classes and interfaces. If I check all interfaces then is that sufficient, or can @Proxy specify an interface the entity does not implement?", "url": "https://github.com/quarkusio/quarkus/pull/12563#discussion_r501376982", "createdAt": "2020-10-08T00:03:17Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -1194,37 +1211,44 @@ private PreGeneratedProxies generatedProxies(Set<String> entityClassNames, Index\n         }\n         try (ProxyBuildingHelper proxyHelper = new ProxyBuildingHelper(Thread.currentThread().getContextClassLoader())) {\n             for (String entity : entityClassNames) {\n-                Set<Class<?>> proxyInterfaces = new HashSet<>();\n-                proxyInterfaces.add(HibernateProxy.class); //always added\n-                Class<?> mappedClass = proxyHelper.uninitializedClass(entity);\n-                String proxy = proxyAnnotations.get(entity);\n-                if (proxy != null) {\n-                    proxyInterfaces.add(proxyHelper.uninitializedClass(proxy));\n-                } else if (!proxyHelper.isProxiable(mappedClass)) {\n-                    //if there is no @Proxy we need to make sure the actual class is proxiable\n-                    continue;\n-                }\n-                for (ClassInfo subclass : combinedIndex.getAllKnownSubclasses(DotName.createSimple(entity))) {\n-                    String subclassName = subclass.name().toString();\n-                    if (!entityClassNames.contains(subclassName)) {\n-                        //not an entity\n-                        continue;\n-                    }\n-                    proxy = proxyAnnotations.get(subclassName);\n+                CachedProxy result;\n+                if (proxyCache.cache.containsKey(entity) && !changedClasses.contains(entity)) {\n+                    result = proxyCache.cache.get(entity);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk4MjQwNg=="}, "originalCommit": {"oid": "10038d7dbd3e06ce5bd81f956849c3d271243b07"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzA1OTIxOnYy", "diffSide": "RIGHT", "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/VertxHttpRecorder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMzoxNDo1NFrOHdytqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMzo1MjozNlrOHeJcgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAwMTY0Mg==", "bodyText": "If old.handle was defined like this, it will still set its TCCL to the old TCCL it captured as the first thing it does right after you've just set the new TCCL, no?", "url": "https://github.com/quarkusio/quarkus/pull/12563#discussion_r501001642", "createdAt": "2020-10-07T13:14:54Z", "author": {"login": "FroMage"}, "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/VertxHttpRecorder.java", "diffHunk": "@@ -409,6 +409,19 @@ public void handle(RoutingContext event) {\n                 && hotReplacementContext.getDevModeType() == DevModeType.REMOTE_SERVER_SIDE) {\n             root = remoteSyncHandler = new RemoteSyncHandler(liveReloadConfig.password.get(), root, hotReplacementContext);\n         }\n+\n+        if (launchMode == LaunchMode.DEVELOPMENT) {\n+            //vert.x threads can still reference the old TCCL\n+            ClassLoader newCl = Thread.currentThread().getContextClassLoader();\n+            Handler<HttpServerRequest> old = root;\n+            root = new Handler<HttpServerRequest>() {\n+                @Override\n+                public void handle(HttpServerRequest event) {\n+                    Thread.currentThread().setContextClassLoader(newCl);\n+                    old.handle(event);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10038d7dbd3e06ce5bd81f956849c3d271243b07"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM3NDA4MA==", "bodyText": "Good point.\nThis is not actually supposed to be part of this PR, I have been working on this on and off for a while and I must have accidentally included an unrelated change. This has actually already been fixes as part of 6b6db29", "url": "https://github.com/quarkusio/quarkus/pull/12563#discussion_r501374080", "createdAt": "2020-10-07T23:52:36Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/VertxHttpRecorder.java", "diffHunk": "@@ -409,6 +409,19 @@ public void handle(RoutingContext event) {\n                 && hotReplacementContext.getDevModeType() == DevModeType.REMOTE_SERVER_SIDE) {\n             root = remoteSyncHandler = new RemoteSyncHandler(liveReloadConfig.password.get(), root, hotReplacementContext);\n         }\n+\n+        if (launchMode == LaunchMode.DEVELOPMENT) {\n+            //vert.x threads can still reference the old TCCL\n+            ClassLoader newCl = Thread.currentThread().getContextClassLoader();\n+            Handler<HttpServerRequest> old = root;\n+            root = new Handler<HttpServerRequest>() {\n+                @Override\n+                public void handle(HttpServerRequest event) {\n+                    Thread.currentThread().setContextClassLoader(newCl);\n+                    old.handle(event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAwMTY0Mg=="}, "originalCommit": {"oid": "10038d7dbd3e06ce5bd81f956849c3d271243b07"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4376, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}