{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MTgzMjkx", "number": 7327, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzowNzoyNFrODiZ-Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzowNzoyNFrODiZ-Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDAzNjgyOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzowNzoyNFrOFtok0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwODozNjowMlrOFt8x4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5NTAyNQ==", "bodyText": "They should return a Multi (which implement Publisher)", "url": "https://github.com/quarkusio/quarkus/pull/7327#discussion_r383395025", "createdAt": "2020-02-24T17:07:24Z", "author": {"login": "cescoffier"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -623,43 +623,43 @@ person.birth = LocalDate.of(1910, Month.FEBRUARY, 1);\n person.status = Status.Alive;\n \n // persist it\n-CompletionStage<Void> cs1 = person.persist();\n+Uni<Void> cs1 = person.persist();\n \n person.status = Status.Dead;\n \n // Your must call update() in order to send your entity modifications to MongoDB\n-CompletionStage<Void> cs2 = person.update();\n+Uni<Void> cs2 = person.update();\n \n // delete it\n-CompletionStage<Void> cs3 = person.delete();\n+Uni<Void> cs3 = person.delete();\n \n // getting a list of all persons\n-CompletionStage<List<ReactivePerson>> allPersons = ReactivePerson.listAll();\n+Uni<List<ReactivePerson>> allPersons = ReactivePerson.listAll();\n \n // finding a specific person by ID\n-CompletionStage<ReactivePerson> personById = ReactivePerson.findById(personId);\n+Uni<ReactivePerson> personById = ReactivePerson.findById(personId);\n \n // finding a specific person by ID via an Optional\n-CompletionStage<Optional<ReactivePerson>> optional = ReactivePerson.findByIdOptional(personId);\n-personById = optional.thenApply(o -> o.orElseThrow(() -> new NotFoundException()));\n+Uni<Optional<ReactivePerson>> optional = ReactivePerson.findByIdOptional(personId);\n+personById = optional.map(o -> o.orElseThrow(() -> new NotFoundException()));\n \n // finding all living persons\n-CompletionStage<List<ReactivePerson>> livingPersons = ReactivePerson.list(\"status\", Status.Alive);\n+Uni<List<ReactivePerson>> livingPersons = ReactivePerson.list(\"status\", Status.Alive);\n \n // counting all persons\n-CompletionStage<Long> countAll = ReactivePerson.count();\n+Uni<Long> countAll = ReactivePerson.count();\n \n // counting all living persons\n-CompletionStage<Long> countAlive = ReactivePerson.count(\"status\", Status.Alive);\n+Uni<Long> countAlive = ReactivePerson.count(\"status\", Status.Alive);\n \n // delete all living persons\n-CompletionStage<Long>  deleteCount = ReactivePerson.delete(\"status\", Status.Alive);\n+Uni<Long>  deleteCount = ReactivePerson.delete(\"status\", Status.Alive);\n \n // delete all persons\n deleteCount = ReactivePerson.deleteAll();\n ----\n \n-TIP: If you use MongoDB with Panache in conjunction with RESTEasy, you can directly return a reactive type inside your JAX-RS resource endpoint as RESTEasy will handle it correctly.\n+TIP: If you use MongoDB with Panache in conjunction with RESTEasy, you can directly return a reactive type inside your JAX-RS resource endpoint as long as you include the `quarkus-resteasy-mutiny` extension.\n \n The same query facility exists for the reactive types, but the `stream()` methods act differently: they return a reactive stream `Publisher` instead of a `Stream`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5695a259bb978facedd787d2e7c0fb8d00d922ca"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcyNjA1MA==", "bodyText": "updated", "url": "https://github.com/quarkusio/quarkus/pull/7327#discussion_r383726050", "createdAt": "2020-02-25T08:36:02Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -623,43 +623,43 @@ person.birth = LocalDate.of(1910, Month.FEBRUARY, 1);\n person.status = Status.Alive;\n \n // persist it\n-CompletionStage<Void> cs1 = person.persist();\n+Uni<Void> cs1 = person.persist();\n \n person.status = Status.Dead;\n \n // Your must call update() in order to send your entity modifications to MongoDB\n-CompletionStage<Void> cs2 = person.update();\n+Uni<Void> cs2 = person.update();\n \n // delete it\n-CompletionStage<Void> cs3 = person.delete();\n+Uni<Void> cs3 = person.delete();\n \n // getting a list of all persons\n-CompletionStage<List<ReactivePerson>> allPersons = ReactivePerson.listAll();\n+Uni<List<ReactivePerson>> allPersons = ReactivePerson.listAll();\n \n // finding a specific person by ID\n-CompletionStage<ReactivePerson> personById = ReactivePerson.findById(personId);\n+Uni<ReactivePerson> personById = ReactivePerson.findById(personId);\n \n // finding a specific person by ID via an Optional\n-CompletionStage<Optional<ReactivePerson>> optional = ReactivePerson.findByIdOptional(personId);\n-personById = optional.thenApply(o -> o.orElseThrow(() -> new NotFoundException()));\n+Uni<Optional<ReactivePerson>> optional = ReactivePerson.findByIdOptional(personId);\n+personById = optional.map(o -> o.orElseThrow(() -> new NotFoundException()));\n \n // finding all living persons\n-CompletionStage<List<ReactivePerson>> livingPersons = ReactivePerson.list(\"status\", Status.Alive);\n+Uni<List<ReactivePerson>> livingPersons = ReactivePerson.list(\"status\", Status.Alive);\n \n // counting all persons\n-CompletionStage<Long> countAll = ReactivePerson.count();\n+Uni<Long> countAll = ReactivePerson.count();\n \n // counting all living persons\n-CompletionStage<Long> countAlive = ReactivePerson.count(\"status\", Status.Alive);\n+Uni<Long> countAlive = ReactivePerson.count(\"status\", Status.Alive);\n \n // delete all living persons\n-CompletionStage<Long>  deleteCount = ReactivePerson.delete(\"status\", Status.Alive);\n+Uni<Long>  deleteCount = ReactivePerson.delete(\"status\", Status.Alive);\n \n // delete all persons\n deleteCount = ReactivePerson.deleteAll();\n ----\n \n-TIP: If you use MongoDB with Panache in conjunction with RESTEasy, you can directly return a reactive type inside your JAX-RS resource endpoint as RESTEasy will handle it correctly.\n+TIP: If you use MongoDB with Panache in conjunction with RESTEasy, you can directly return a reactive type inside your JAX-RS resource endpoint as long as you include the `quarkus-resteasy-mutiny` extension.\n \n The same query facility exists for the reactive types, but the `stream()` methods act differently: they return a reactive stream `Publisher` instead of a `Stream`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5NTAyNQ=="}, "originalCommit": {"oid": "5695a259bb978facedd787d2e7c0fb8d00d922ca"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 133, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}