{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMDkwMjY0", "number": 11980, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDozNzo0NlrOEhR2Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDowMTowNVrOEhmbDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzMwODU0OnYy", "diffSide": "RIGHT", "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDozNzo0NlrOHOgVug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDo0NDoxMVrOHOgopQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3MTk2Mg==", "bodyText": "I decided to use a more general name (additionalIndex) because it may be useful for other use cases as well...", "url": "https://github.com/quarkusio/quarkus/pull/11980#discussion_r484971962", "createdAt": "2020-09-08T14:37:46Z", "author": {"login": "mkouba"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanProcessor.java", "diffHunk": "@@ -291,7 +292,29 @@ public Builder setName(String name) {\n         }\n \n         public Builder setIndex(IndexView index) {\n-            this.index = index;\n+            return setBeanArchiveIndex(index);\n+        }\n+\n+        /**\n+         * Set the bean archive index used to discover beans, interceptors, qualifiers, etc.\n+         * \n+         * @param beanArchiveIndex\n+         * @return self\n+         */\n+        public Builder setBeanArchiveIndex(IndexView beanArchiveIndex) {\n+            this.beanArchiveIndex = beanArchiveIndex;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the (optional) additional index used to discover types during type-safe resolution. These types may not be part\n+         * of the bean archive index.\n+         * \n+         * @param additionalIndex\n+         * @return self\n+         */\n+        public Builder setAdditionalIndex(IndexView additionalIndex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2de4da4f759d3cb22d8934a40a0b64776cf4e712"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3NTg4Ng==", "bodyText": "Perhaps applicationIndex would be a better name?", "url": "https://github.com/quarkusio/quarkus/pull/11980#discussion_r484975886", "createdAt": "2020-09-08T14:42:59Z", "author": {"login": "geoand"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanProcessor.java", "diffHunk": "@@ -291,7 +292,29 @@ public Builder setName(String name) {\n         }\n \n         public Builder setIndex(IndexView index) {\n-            this.index = index;\n+            return setBeanArchiveIndex(index);\n+        }\n+\n+        /**\n+         * Set the bean archive index used to discover beans, interceptors, qualifiers, etc.\n+         * \n+         * @param beanArchiveIndex\n+         * @return self\n+         */\n+        public Builder setBeanArchiveIndex(IndexView beanArchiveIndex) {\n+            this.beanArchiveIndex = beanArchiveIndex;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the (optional) additional index used to discover types during type-safe resolution. These types may not be part\n+         * of the bean archive index.\n+         * \n+         * @param additionalIndex\n+         * @return self\n+         */\n+        public Builder setAdditionalIndex(IndexView additionalIndex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3MTk2Mg=="}, "originalCommit": {"oid": "2de4da4f759d3cb22d8934a40a0b64776cf4e712"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3NjgwNQ==", "bodyText": "Hmm, that's a better name, yes...", "url": "https://github.com/quarkusio/quarkus/pull/11980#discussion_r484976805", "createdAt": "2020-09-08T14:44:11Z", "author": {"login": "mkouba"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanProcessor.java", "diffHunk": "@@ -291,7 +292,29 @@ public Builder setName(String name) {\n         }\n \n         public Builder setIndex(IndexView index) {\n-            this.index = index;\n+            return setBeanArchiveIndex(index);\n+        }\n+\n+        /**\n+         * Set the bean archive index used to discover beans, interceptors, qualifiers, etc.\n+         * \n+         * @param beanArchiveIndex\n+         * @return self\n+         */\n+        public Builder setBeanArchiveIndex(IndexView beanArchiveIndex) {\n+            this.beanArchiveIndex = beanArchiveIndex;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the (optional) additional index used to discover types during type-safe resolution. These types may not be part\n+         * of the bean archive index.\n+         * \n+         * @param additionalIndex\n+         * @return self\n+         */\n+        public Builder setAdditionalIndex(IndexView additionalIndex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3MTk2Mg=="}, "originalCommit": {"oid": "2de4da4f759d3cb22d8934a40a0b64776cf4e712"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzM0NTY4OnYy", "diffSide": "RIGHT", "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/Types.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDo0NTozM1rOHOgsyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDo1ODo1MVrOHOhZNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3Nzg2Ng==", "bodyText": "Perhaps this can be improved? I'm bringing it up because I don't even remember what a type variable is :P", "url": "https://github.com/quarkusio/quarkus/pull/11980#discussion_r484977866", "createdAt": "2020-09-08T14:45:33Z", "author": {"login": "geoand"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/Types.java", "diffHunk": "@@ -164,13 +165,16 @@ static Type getProviderType(ClassInfo classInfo) {\n     static Set<Type> getProducerMethodTypeClosure(MethodInfo producerMethod, BeanDeployment beanDeployment) {\n         Set<Type> types;\n         Type returnType = producerMethod.returnType();\n+        if (returnType.kind() == Kind.TYPE_VARIABLE) {\n+            throw new DefinitionException(\"A type variable is not a legal bean type: \" + producerMethod);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2de4da4f759d3cb22d8934a40a0b64776cf4e712"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4MTYxNQ==", "bodyText": "I don't even remember what a type variable is...\n\nI will pretend that you've never written this ;-).\nType variables are type parameters, e.g.:\nclass ProducingBean<T> {\n\n   // This is illegal...\n   @Produces\n   T produce() {\n    // ...\n   }\n}", "url": "https://github.com/quarkusio/quarkus/pull/11980#discussion_r484981615", "createdAt": "2020-09-08T14:50:31Z", "author": {"login": "mkouba"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/Types.java", "diffHunk": "@@ -164,13 +165,16 @@ static Type getProviderType(ClassInfo classInfo) {\n     static Set<Type> getProducerMethodTypeClosure(MethodInfo producerMethod, BeanDeployment beanDeployment) {\n         Set<Type> types;\n         Type returnType = producerMethod.returnType();\n+        if (returnType.kind() == Kind.TYPE_VARIABLE) {\n+            throw new DefinitionException(\"A type variable is not a legal bean type: \" + producerMethod);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3Nzg2Ng=="}, "originalCommit": {"oid": "2de4da4f759d3cb22d8934a40a0b64776cf4e712"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4MzE0Mg==", "bodyText": "Hahaha\nI meant that just mentioning type parameter as a Jandex term is unlikely to help a user understand what's going on. Perhaps just mention generics - that way everyone will know what the problem is", "url": "https://github.com/quarkusio/quarkus/pull/11980#discussion_r484983142", "createdAt": "2020-09-08T14:52:31Z", "author": {"login": "geoand"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/Types.java", "diffHunk": "@@ -164,13 +165,16 @@ static Type getProviderType(ClassInfo classInfo) {\n     static Set<Type> getProducerMethodTypeClosure(MethodInfo producerMethod, BeanDeployment beanDeployment) {\n         Set<Type> types;\n         Type returnType = producerMethod.returnType();\n+        if (returnType.kind() == Kind.TYPE_VARIABLE) {\n+            throw new DefinitionException(\"A type variable is not a legal bean type: \" + producerMethod);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3Nzg2Ng=="}, "originalCommit": {"oid": "2de4da4f759d3cb22d8934a40a0b64776cf4e712"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4NjMxMQ==", "bodyText": "Hm, the message contains the declaring class, method signature and return type... and it's a definition error as defined by the spec. I'd keep it simple for now. It's not a common use case...", "url": "https://github.com/quarkusio/quarkus/pull/11980#discussion_r484986311", "createdAt": "2020-09-08T14:56:28Z", "author": {"login": "mkouba"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/Types.java", "diffHunk": "@@ -164,13 +165,16 @@ static Type getProviderType(ClassInfo classInfo) {\n     static Set<Type> getProducerMethodTypeClosure(MethodInfo producerMethod, BeanDeployment beanDeployment) {\n         Set<Type> types;\n         Type returnType = producerMethod.returnType();\n+        if (returnType.kind() == Kind.TYPE_VARIABLE) {\n+            throw new DefinitionException(\"A type variable is not a legal bean type: \" + producerMethod);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3Nzg2Ng=="}, "originalCommit": {"oid": "2de4da4f759d3cb22d8934a40a0b64776cf4e712"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4OTIzOA==", "bodyText": "OK :)", "url": "https://github.com/quarkusio/quarkus/pull/11980#discussion_r484989238", "createdAt": "2020-09-08T14:58:51Z", "author": {"login": "geoand"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/Types.java", "diffHunk": "@@ -164,13 +165,16 @@ static Type getProviderType(ClassInfo classInfo) {\n     static Set<Type> getProducerMethodTypeClosure(MethodInfo producerMethod, BeanDeployment beanDeployment) {\n         Set<Type> types;\n         Type returnType = producerMethod.returnType();\n+        if (returnType.kind() == Kind.TYPE_VARIABLE) {\n+            throw new DefinitionException(\"A type variable is not a legal bean type: \" + producerMethod);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3Nzg2Ng=="}, "originalCommit": {"oid": "2de4da4f759d3cb22d8934a40a0b64776cf4e712"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzM0ODE3OnYy", "diffSide": "RIGHT", "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/Types.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDo0NjowNlrOHOgucQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDo0NjowNlrOHOgucQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3ODI4OQ==", "bodyText": "Same here", "url": "https://github.com/quarkusio/quarkus/pull/11980#discussion_r484978289", "createdAt": "2020-09-08T14:46:06Z", "author": {"login": "geoand"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/Types.java", "diffHunk": "@@ -192,12 +196,15 @@ static Type getProviderType(ClassInfo classInfo) {\n     static Set<Type> getProducerFieldTypeClosure(FieldInfo producerField, BeanDeployment beanDeployment) {\n         Set<Type> types;\n         Type fieldType = producerField.type();\n+        if (fieldType.kind() == Kind.TYPE_VARIABLE) {\n+            throw new DefinitionException(\"A type variable is not a legal bean type: \" + producerField);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2de4da4f759d3cb22d8934a40a0b64776cf4e712"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjYzMjU1OnYy", "diffSide": "RIGHT", "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanDeployment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOTo0ODo0M1rOHO_n6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDowNDowOFrOHPALzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ4NDUyMw==", "bodyText": "Do we need to keep this original method? It is considered public API?", "url": "https://github.com/quarkusio/quarkus/pull/11980#discussion_r485484523", "createdAt": "2020-09-09T09:48:43Z", "author": {"login": "manovotn"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanDeployment.java", "diffHunk": "@@ -357,7 +361,19 @@ ValidationContext validate(List<BeanDeploymentValidator> validators,\n     }\n \n     public IndexView getIndex() {\n-        return index;\n+        return getBeanArchiveIndex();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0b16605531e5f176dad6a3146061e827296d1a2"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ5MzcxMA==", "bodyText": "Well, it's a public method on a public class that can be used by an integrator... On the other hand, Quarkus and the ArcTestContainer are probably the only integrators so far. So I'm going to remove this method...", "url": "https://github.com/quarkusio/quarkus/pull/11980#discussion_r485493710", "createdAt": "2020-09-09T10:04:08Z", "author": {"login": "mkouba"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanDeployment.java", "diffHunk": "@@ -357,7 +361,19 @@ ValidationContext validate(List<BeanDeploymentValidator> validators,\n     }\n \n     public IndexView getIndex() {\n-        return index;\n+        return getBeanArchiveIndex();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ4NDUyMw=="}, "originalCommit": {"oid": "e0b16605531e5f176dad6a3146061e827296d1a2"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjYzNTA1OnYy", "diffSide": "RIGHT", "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOTo0OToxNlrOHO_pag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOTo0OToxNlrOHO_pag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ4NDkwNg==", "bodyText": "Similar to previous comment, is this needed?", "url": "https://github.com/quarkusio/quarkus/pull/11980#discussion_r485484906", "createdAt": "2020-09-09T09:49:16Z", "author": {"login": "manovotn"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanProcessor.java", "diffHunk": "@@ -291,7 +292,31 @@ public Builder setName(String name) {\n         }\n \n         public Builder setIndex(IndexView index) {\n-            this.index = index;\n+            return setBeanArchiveIndex(index);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0b16605531e5f176dad6a3146061e827296d1a2"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjY3OTgwOnYy", "diffSide": "RIGHT", "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanResolver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDowMTowNVrOHPAFEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoyNDoxNVrOHPA3VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ5MTk4Ng==", "bodyText": "@mkouba ClassInfo doesn't override equals/hashCode(as noted in wildfly/jandex#83), can you be sure you won't get duplicates from both indexes?", "url": "https://github.com/quarkusio/quarkus/pull/11980#discussion_r485491986", "createdAt": "2020-09-09T10:01:05Z", "author": {"login": "manovotn"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanResolver.java", "diffHunk": "@@ -45,14 +43,20 @@ public BeanResolver(BeanDeployment beanDeployment) {\n         this.assignableFromMap = new ConcurrentHashMap<>();\n         this.assignableFromMapFunction = name -> {\n             Set<DotName> assignables = new HashSet<>();\n-            Collection<ClassInfo> subclasses = beanDeployment.getIndex().getAllKnownSubclasses(name);\n-            for (ClassInfo subclass : subclasses) {\n+            for (ClassInfo subclass : beanDeployment.getBeanArchiveIndex().getAllKnownSubclasses(name)) {\n                 assignables.add(subclass.name());\n             }\n-            Collection<ClassInfo> implementors = beanDeployment.getIndex().getAllKnownImplementors(name);\n-            for (ClassInfo implementor : implementors) {\n+            for (ClassInfo implementor : beanDeployment.getBeanArchiveIndex().getAllKnownImplementors(name)) {\n                 assignables.add(implementor.name());\n             }\n+            if (beanDeployment.hasApplicationIndex()) {\n+                for (ClassInfo subclass : beanDeployment.getApplicationIndex().getAllKnownSubclasses(name)) {\n+                    assignables.add(subclass.name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0b16605531e5f176dad6a3146061e827296d1a2"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ5NDAxMQ==", "bodyText": "That's OK. assignables is a set of dot names.", "url": "https://github.com/quarkusio/quarkus/pull/11980#discussion_r485494011", "createdAt": "2020-09-09T10:04:38Z", "author": {"login": "mkouba"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanResolver.java", "diffHunk": "@@ -45,14 +43,20 @@ public BeanResolver(BeanDeployment beanDeployment) {\n         this.assignableFromMap = new ConcurrentHashMap<>();\n         this.assignableFromMapFunction = name -> {\n             Set<DotName> assignables = new HashSet<>();\n-            Collection<ClassInfo> subclasses = beanDeployment.getIndex().getAllKnownSubclasses(name);\n-            for (ClassInfo subclass : subclasses) {\n+            for (ClassInfo subclass : beanDeployment.getBeanArchiveIndex().getAllKnownSubclasses(name)) {\n                 assignables.add(subclass.name());\n             }\n-            Collection<ClassInfo> implementors = beanDeployment.getIndex().getAllKnownImplementors(name);\n-            for (ClassInfo implementor : implementors) {\n+            for (ClassInfo implementor : beanDeployment.getBeanArchiveIndex().getAllKnownImplementors(name)) {\n                 assignables.add(implementor.name());\n             }\n+            if (beanDeployment.hasApplicationIndex()) {\n+                for (ClassInfo subclass : beanDeployment.getApplicationIndex().getAllKnownSubclasses(name)) {\n+                    assignables.add(subclass.name());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ5MTk4Ng=="}, "originalCommit": {"oid": "e0b16605531e5f176dad6a3146061e827296d1a2"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwNDg1Mg==", "bodyText": "Oops my bad, I thought its set of ClassInfo.", "url": "https://github.com/quarkusio/quarkus/pull/11980#discussion_r485504852", "createdAt": "2020-09-09T10:24:15Z", "author": {"login": "manovotn"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanResolver.java", "diffHunk": "@@ -45,14 +43,20 @@ public BeanResolver(BeanDeployment beanDeployment) {\n         this.assignableFromMap = new ConcurrentHashMap<>();\n         this.assignableFromMapFunction = name -> {\n             Set<DotName> assignables = new HashSet<>();\n-            Collection<ClassInfo> subclasses = beanDeployment.getIndex().getAllKnownSubclasses(name);\n-            for (ClassInfo subclass : subclasses) {\n+            for (ClassInfo subclass : beanDeployment.getBeanArchiveIndex().getAllKnownSubclasses(name)) {\n                 assignables.add(subclass.name());\n             }\n-            Collection<ClassInfo> implementors = beanDeployment.getIndex().getAllKnownImplementors(name);\n-            for (ClassInfo implementor : implementors) {\n+            for (ClassInfo implementor : beanDeployment.getBeanArchiveIndex().getAllKnownImplementors(name)) {\n                 assignables.add(implementor.name());\n             }\n+            if (beanDeployment.hasApplicationIndex()) {\n+                for (ClassInfo subclass : beanDeployment.getApplicationIndex().getAllKnownSubclasses(name)) {\n+                    assignables.add(subclass.name());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ5MTk4Ng=="}, "originalCommit": {"oid": "e0b16605531e5f176dad6a3146061e827296d1a2"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 386, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}