{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0MzI1Mzk2", "number": 9998, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODowOTozM1rOEFbq4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDowMDowN1rOEHlWqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTMxNjgyOnYy", "diffSide": "RIGHT", "path": "devtools/gradle/src/functionalTest/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODowOTozM1rOGjng0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzozNTo0OVrOGjycMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwMDcyMw==", "bodyText": "Please remove this if it's not going to be used.", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r440000723", "createdAt": "2020-06-15T08:09:33Z", "author": {"login": "geoand"}, "path": "devtools/gradle/src/functionalTest/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package io.quarkus.gradle;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import io.quarkus.utilities.JavaBinFinder;\n+import org.apache.commons.io.FileUtils;\n+import org.gradle.testkit.runner.GradleRunner;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Predicate;\n+import java.util.regex.Pattern;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+import static org.awaitility.Awaitility.await;\n+\n+\n+public class FastJarFormatWorksTest extends QuarkusGradleTestBase{\n+\n+\n+    @Test\n+    public void testFastJarFormatWorks() throws IOException, URISyntaxException {\n+\n+        final File projectDir= getProjectDir(\"test-that-fast-jar-format-works-for-gradle\");\n+\n+        GradleRunner.create()\n+                .forwardOutput()\n+                .withPluginClasspath()\n+                .withArguments(arguments(\"package\", \"DskipTests\",\"-Dquarkus.package.type=fast-jar\"))\n+                .withProjectDir(projectDir)\n+                .build();\n+\n+//        await().atMost(1, TimeUnit.MINUTES).until(() -> result.getProcess() != null && !result.getProcess().isAlive());\n+//        assertThat(running.log()).containsIgnoringCase(\"BUILD SUCCESS\");\n+//        running.stop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff01c0ca313057d4cd7fdfae95824d6499a4a2c2"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE1Mzk2OQ==", "bodyText": "I wasn't able to replicate this part from the Maven test, do we actually need it here for testing the time limit?", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r440153969", "createdAt": "2020-06-15T12:53:53Z", "author": {"login": "Garima829"}, "path": "devtools/gradle/src/functionalTest/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package io.quarkus.gradle;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import io.quarkus.utilities.JavaBinFinder;\n+import org.apache.commons.io.FileUtils;\n+import org.gradle.testkit.runner.GradleRunner;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Predicate;\n+import java.util.regex.Pattern;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+import static org.awaitility.Awaitility.await;\n+\n+\n+public class FastJarFormatWorksTest extends QuarkusGradleTestBase{\n+\n+\n+    @Test\n+    public void testFastJarFormatWorks() throws IOException, URISyntaxException {\n+\n+        final File projectDir= getProjectDir(\"test-that-fast-jar-format-works-for-gradle\");\n+\n+        GradleRunner.create()\n+                .forwardOutput()\n+                .withPluginClasspath()\n+                .withArguments(arguments(\"package\", \"DskipTests\",\"-Dquarkus.package.type=fast-jar\"))\n+                .withProjectDir(projectDir)\n+                .build();\n+\n+//        await().atMost(1, TimeUnit.MINUTES).until(() -> result.getProcess() != null && !result.getProcess().isAlive());\n+//        assertThat(running.log()).containsIgnoringCase(\"BUILD SUCCESS\");\n+//        running.stop();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwMDcyMw=="}, "originalCommit": {"oid": "ff01c0ca313057d4cd7fdfae95824d6499a4a2c2"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE1ODUyMA==", "bodyText": "Nope, we don't need it because it's handled automatically by Gradle", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r440158520", "createdAt": "2020-06-15T13:01:44Z", "author": {"login": "geoand"}, "path": "devtools/gradle/src/functionalTest/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package io.quarkus.gradle;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import io.quarkus.utilities.JavaBinFinder;\n+import org.apache.commons.io.FileUtils;\n+import org.gradle.testkit.runner.GradleRunner;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Predicate;\n+import java.util.regex.Pattern;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+import static org.awaitility.Awaitility.await;\n+\n+\n+public class FastJarFormatWorksTest extends QuarkusGradleTestBase{\n+\n+\n+    @Test\n+    public void testFastJarFormatWorks() throws IOException, URISyntaxException {\n+\n+        final File projectDir= getProjectDir(\"test-that-fast-jar-format-works-for-gradle\");\n+\n+        GradleRunner.create()\n+                .forwardOutput()\n+                .withPluginClasspath()\n+                .withArguments(arguments(\"package\", \"DskipTests\",\"-Dquarkus.package.type=fast-jar\"))\n+                .withProjectDir(projectDir)\n+                .build();\n+\n+//        await().atMost(1, TimeUnit.MINUTES).until(() -> result.getProcess() != null && !result.getProcess().isAlive());\n+//        assertThat(running.log()).containsIgnoringCase(\"BUILD SUCCESS\");\n+//        running.stop();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwMDcyMw=="}, "originalCommit": {"oid": "ff01c0ca313057d4cd7fdfae95824d6499a4a2c2"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3OTc2Mg==", "bodyText": "Okay", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r440179762", "createdAt": "2020-06-15T13:35:49Z", "author": {"login": "Garima829"}, "path": "devtools/gradle/src/functionalTest/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package io.quarkus.gradle;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import io.quarkus.utilities.JavaBinFinder;\n+import org.apache.commons.io.FileUtils;\n+import org.gradle.testkit.runner.GradleRunner;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Predicate;\n+import java.util.regex.Pattern;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+import static org.awaitility.Awaitility.await;\n+\n+\n+public class FastJarFormatWorksTest extends QuarkusGradleTestBase{\n+\n+\n+    @Test\n+    public void testFastJarFormatWorks() throws IOException, URISyntaxException {\n+\n+        final File projectDir= getProjectDir(\"test-that-fast-jar-format-works-for-gradle\");\n+\n+        GradleRunner.create()\n+                .forwardOutput()\n+                .withPluginClasspath()\n+                .withArguments(arguments(\"package\", \"DskipTests\",\"-Dquarkus.package.type=fast-jar\"))\n+                .withProjectDir(projectDir)\n+                .build();\n+\n+//        await().atMost(1, TimeUnit.MINUTES).until(() -> result.getProcess() != null && !result.getProcess().isAlive());\n+//        assertThat(running.log()).containsIgnoringCase(\"BUILD SUCCESS\");\n+//        running.stop();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwMDcyMw=="}, "originalCommit": {"oid": "ff01c0ca313057d4cd7fdfae95824d6499a4a2c2"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTMxOTY3OnYy", "diffSide": "RIGHT", "path": "devtools/gradle/src/functionalTest/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODoxMDoxNlrOGjnifw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzo0MDo0OVrOGjypGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwMTE1MQ==", "bodyText": "Same here", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r440001151", "createdAt": "2020-06-15T08:10:16Z", "author": {"login": "geoand"}, "path": "devtools/gradle/src/functionalTest/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package io.quarkus.gradle;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import io.quarkus.utilities.JavaBinFinder;\n+import org.apache.commons.io.FileUtils;\n+import org.gradle.testkit.runner.GradleRunner;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Predicate;\n+import java.util.regex.Pattern;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+import static org.awaitility.Awaitility.await;\n+\n+\n+public class FastJarFormatWorksTest extends QuarkusGradleTestBase{\n+\n+\n+    @Test\n+    public void testFastJarFormatWorks() throws IOException, URISyntaxException {\n+\n+        final File projectDir= getProjectDir(\"test-that-fast-jar-format-works-for-gradle\");\n+\n+        GradleRunner.create()\n+                .forwardOutput()\n+                .withPluginClasspath()\n+                .withArguments(arguments(\"package\", \"DskipTests\",\"-Dquarkus.package.type=fast-jar\"))\n+                .withProjectDir(projectDir)\n+                .build();\n+\n+//        await().atMost(1, TimeUnit.MINUTES).until(() -> result.getProcess() != null && !result.getProcess().isAlive());\n+//        assertThat(running.log()).containsIgnoringCase(\"BUILD SUCCESS\");\n+//        running.stop();\n+\n+        Path jar=projectDir.toPath().toAbsolutePath().resolve(Paths.get(\"target/acme-1.0-SNAPSHOT-runner.jar\"));\n+        Assertions.assertFalse(Files.exists(jar));\n+\n+        jar = projectDir.toPath().toAbsolutePath().resolve(Paths.get(\"target/quarkus-app/quarkus-run.jar\"));\n+        Assertions.assertTrue(Files.exists(jar));\n+\n+        File output = new File(projectDir, \"target/output.log\");\n+        output.createNewFile();\n+\n+        Process process = doLaunch(jar, output);\n+        try {\n+            // Wait until server up\n+            await()\n+                    .pollDelay(1, TimeUnit.SECONDS)\n+                    .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/app/hello/package\", 200));\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+\n+            // test that the application name and version are properly set\n+            assertApplicationPropertiesSetCorrectly();\n+            assertResourceReadingFromClassPathWorksCorrectly(\"\");\n+        } finally {\n+            process.destroy();\n+        }\n+\n+    }\n+\n+    private Process doLaunch(Path jar, File output) throws IOException {\n+        List<String> commands = new ArrayList<>();\n+        commands.add(JavaBinFinder.findBin());\n+        commands.add(\"-jar\");\n+        commands.add(jar.toString());\n+        ProcessBuilder processBuilder = new ProcessBuilder(commands.toArray(new String[0]));\n+        processBuilder.redirectOutput(output);\n+        processBuilder.redirectError(output);\n+        return processBuilder.start();\n+    }\n+\n+    static void assertResourceReadingFromClassPathWorksCorrectly(String path) {\n+        try {\n+            URL url = new URL(\"http://localhost:8080\" + path + \"/app/classpathResources\");\n+            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n+            // the default Accept header used by HttpURLConnection is not compatible with RESTEasy negotiation as it uses q=.2\n+            connection.setRequestProperty(\"Accept\", \"text/html, *; q=0.2, */*; q=0.2\");\n+            if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {\n+                failResourcesFromTheClasspath();\n+            }\n+            try (BufferedReader br = new BufferedReader(\n+                    new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8))) {\n+                String output = br.readLine();\n+                assertThat(output).isEqualTo(\"success\");\n+            }\n+        } catch (IOException e) {\n+            failResourcesFromTheClasspath();\n+        }\n+    }\n+\n+    private static void failResourcesFromTheClasspath() {\n+        fail(\"Failed to assert that the application properly reads resources from the classpath\");\n+    }\n+\n+    // we don't use REST Assured because its bundled Groovy version clashes with Maven Invoker's (which is also used in this module)\n+    static void assertApplicationPropertiesSetCorrectly() {\n+        assertApplicationPropertiesSetCorrectly(\"\");\n+    }\n+\n+    // we don't use REST Assured because its bundled Groovy version clashes with Maven Invoker's (which is also used in this module)\n+    static void assertApplicationPropertiesSetCorrectly(String prefix) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff01c0ca313057d4cd7fdfae95824d6499a4a2c2"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2MDI3Ng==", "bodyText": "Darn, it seems like this comment is out of context:\nI meant that I am pretty sure our Gradle tests have a much better way of doing this test. See method getHttpResponse from QuarkusDevGradleTestBase (which should probably be moved to QuarkusGradleTestBase)", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r440160276", "createdAt": "2020-06-15T13:04:46Z", "author": {"login": "geoand"}, "path": "devtools/gradle/src/functionalTest/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package io.quarkus.gradle;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import io.quarkus.utilities.JavaBinFinder;\n+import org.apache.commons.io.FileUtils;\n+import org.gradle.testkit.runner.GradleRunner;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Predicate;\n+import java.util.regex.Pattern;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+import static org.awaitility.Awaitility.await;\n+\n+\n+public class FastJarFormatWorksTest extends QuarkusGradleTestBase{\n+\n+\n+    @Test\n+    public void testFastJarFormatWorks() throws IOException, URISyntaxException {\n+\n+        final File projectDir= getProjectDir(\"test-that-fast-jar-format-works-for-gradle\");\n+\n+        GradleRunner.create()\n+                .forwardOutput()\n+                .withPluginClasspath()\n+                .withArguments(arguments(\"package\", \"DskipTests\",\"-Dquarkus.package.type=fast-jar\"))\n+                .withProjectDir(projectDir)\n+                .build();\n+\n+//        await().atMost(1, TimeUnit.MINUTES).until(() -> result.getProcess() != null && !result.getProcess().isAlive());\n+//        assertThat(running.log()).containsIgnoringCase(\"BUILD SUCCESS\");\n+//        running.stop();\n+\n+        Path jar=projectDir.toPath().toAbsolutePath().resolve(Paths.get(\"target/acme-1.0-SNAPSHOT-runner.jar\"));\n+        Assertions.assertFalse(Files.exists(jar));\n+\n+        jar = projectDir.toPath().toAbsolutePath().resolve(Paths.get(\"target/quarkus-app/quarkus-run.jar\"));\n+        Assertions.assertTrue(Files.exists(jar));\n+\n+        File output = new File(projectDir, \"target/output.log\");\n+        output.createNewFile();\n+\n+        Process process = doLaunch(jar, output);\n+        try {\n+            // Wait until server up\n+            await()\n+                    .pollDelay(1, TimeUnit.SECONDS)\n+                    .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/app/hello/package\", 200));\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+\n+            // test that the application name and version are properly set\n+            assertApplicationPropertiesSetCorrectly();\n+            assertResourceReadingFromClassPathWorksCorrectly(\"\");\n+        } finally {\n+            process.destroy();\n+        }\n+\n+    }\n+\n+    private Process doLaunch(Path jar, File output) throws IOException {\n+        List<String> commands = new ArrayList<>();\n+        commands.add(JavaBinFinder.findBin());\n+        commands.add(\"-jar\");\n+        commands.add(jar.toString());\n+        ProcessBuilder processBuilder = new ProcessBuilder(commands.toArray(new String[0]));\n+        processBuilder.redirectOutput(output);\n+        processBuilder.redirectError(output);\n+        return processBuilder.start();\n+    }\n+\n+    static void assertResourceReadingFromClassPathWorksCorrectly(String path) {\n+        try {\n+            URL url = new URL(\"http://localhost:8080\" + path + \"/app/classpathResources\");\n+            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n+            // the default Accept header used by HttpURLConnection is not compatible with RESTEasy negotiation as it uses q=.2\n+            connection.setRequestProperty(\"Accept\", \"text/html, *; q=0.2, */*; q=0.2\");\n+            if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {\n+                failResourcesFromTheClasspath();\n+            }\n+            try (BufferedReader br = new BufferedReader(\n+                    new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8))) {\n+                String output = br.readLine();\n+                assertThat(output).isEqualTo(\"success\");\n+            }\n+        } catch (IOException e) {\n+            failResourcesFromTheClasspath();\n+        }\n+    }\n+\n+    private static void failResourcesFromTheClasspath() {\n+        fail(\"Failed to assert that the application properly reads resources from the classpath\");\n+    }\n+\n+    // we don't use REST Assured because its bundled Groovy version clashes with Maven Invoker's (which is also used in this module)\n+    static void assertApplicationPropertiesSetCorrectly() {\n+        assertApplicationPropertiesSetCorrectly(\"\");\n+    }\n+\n+    // we don't use REST Assured because its bundled Groovy version clashes with Maven Invoker's (which is also used in this module)\n+    static void assertApplicationPropertiesSetCorrectly(String prefix) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwMTE1MQ=="}, "originalCommit": {"oid": "ff01c0ca313057d4cd7fdfae95824d6499a4a2c2"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE4MzA2Ng==", "bodyText": "On it", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r440183066", "createdAt": "2020-06-15T13:40:49Z", "author": {"login": "Garima829"}, "path": "devtools/gradle/src/functionalTest/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package io.quarkus.gradle;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import io.quarkus.utilities.JavaBinFinder;\n+import org.apache.commons.io.FileUtils;\n+import org.gradle.testkit.runner.GradleRunner;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Predicate;\n+import java.util.regex.Pattern;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+import static org.awaitility.Awaitility.await;\n+\n+\n+public class FastJarFormatWorksTest extends QuarkusGradleTestBase{\n+\n+\n+    @Test\n+    public void testFastJarFormatWorks() throws IOException, URISyntaxException {\n+\n+        final File projectDir= getProjectDir(\"test-that-fast-jar-format-works-for-gradle\");\n+\n+        GradleRunner.create()\n+                .forwardOutput()\n+                .withPluginClasspath()\n+                .withArguments(arguments(\"package\", \"DskipTests\",\"-Dquarkus.package.type=fast-jar\"))\n+                .withProjectDir(projectDir)\n+                .build();\n+\n+//        await().atMost(1, TimeUnit.MINUTES).until(() -> result.getProcess() != null && !result.getProcess().isAlive());\n+//        assertThat(running.log()).containsIgnoringCase(\"BUILD SUCCESS\");\n+//        running.stop();\n+\n+        Path jar=projectDir.toPath().toAbsolutePath().resolve(Paths.get(\"target/acme-1.0-SNAPSHOT-runner.jar\"));\n+        Assertions.assertFalse(Files.exists(jar));\n+\n+        jar = projectDir.toPath().toAbsolutePath().resolve(Paths.get(\"target/quarkus-app/quarkus-run.jar\"));\n+        Assertions.assertTrue(Files.exists(jar));\n+\n+        File output = new File(projectDir, \"target/output.log\");\n+        output.createNewFile();\n+\n+        Process process = doLaunch(jar, output);\n+        try {\n+            // Wait until server up\n+            await()\n+                    .pollDelay(1, TimeUnit.SECONDS)\n+                    .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/app/hello/package\", 200));\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+\n+            // test that the application name and version are properly set\n+            assertApplicationPropertiesSetCorrectly();\n+            assertResourceReadingFromClassPathWorksCorrectly(\"\");\n+        } finally {\n+            process.destroy();\n+        }\n+\n+    }\n+\n+    private Process doLaunch(Path jar, File output) throws IOException {\n+        List<String> commands = new ArrayList<>();\n+        commands.add(JavaBinFinder.findBin());\n+        commands.add(\"-jar\");\n+        commands.add(jar.toString());\n+        ProcessBuilder processBuilder = new ProcessBuilder(commands.toArray(new String[0]));\n+        processBuilder.redirectOutput(output);\n+        processBuilder.redirectError(output);\n+        return processBuilder.start();\n+    }\n+\n+    static void assertResourceReadingFromClassPathWorksCorrectly(String path) {\n+        try {\n+            URL url = new URL(\"http://localhost:8080\" + path + \"/app/classpathResources\");\n+            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n+            // the default Accept header used by HttpURLConnection is not compatible with RESTEasy negotiation as it uses q=.2\n+            connection.setRequestProperty(\"Accept\", \"text/html, *; q=0.2, */*; q=0.2\");\n+            if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {\n+                failResourcesFromTheClasspath();\n+            }\n+            try (BufferedReader br = new BufferedReader(\n+                    new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8))) {\n+                String output = br.readLine();\n+                assertThat(output).isEqualTo(\"success\");\n+            }\n+        } catch (IOException e) {\n+            failResourcesFromTheClasspath();\n+        }\n+    }\n+\n+    private static void failResourcesFromTheClasspath() {\n+        fail(\"Failed to assert that the application properly reads resources from the classpath\");\n+    }\n+\n+    // we don't use REST Assured because its bundled Groovy version clashes with Maven Invoker's (which is also used in this module)\n+    static void assertApplicationPropertiesSetCorrectly() {\n+        assertApplicationPropertiesSetCorrectly(\"\");\n+    }\n+\n+    // we don't use REST Assured because its bundled Groovy version clashes with Maven Invoker's (which is also used in this module)\n+    static void assertApplicationPropertiesSetCorrectly(String prefix) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwMTE1MQ=="}, "originalCommit": {"oid": "ff01c0ca313057d4cd7fdfae95824d6499a4a2c2"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjU2NzQ1OnYy", "diffSide": "RIGHT", "path": "devtools/gradle/src/functionalTest/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzoxODowNFrOGka1eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzozNTowOFrOGkbl6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg0MTU5Mg==", "bodyText": "This should probably also be replaced with the proper getHttpResponse", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r440841592", "createdAt": "2020-06-16T13:18:04Z", "author": {"login": "geoand"}, "path": "devtools/gradle/src/functionalTest/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package io.quarkus.gradle;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import io.quarkus.utilities.JavaBinFinder;\n+import org.apache.commons.io.FileUtils;\n+import org.gradle.testkit.runner.GradleRunner;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+import static org.awaitility.Awaitility.await;\n+\n+public class FastJarFormatWorksTest extends QuarkusGradleTestBase {\n+\n+    private Future<?> quarkusDev;\n+\n+    @Test\n+    public void testFastJarFormatWorks() throws IOException, URISyntaxException {\n+\n+        final File projectDir= getProjectDir(\"test-that-fast-jar-format-works-for-gradle\");\n+\n+        GradleRunner.create()\n+                .forwardOutput()\n+                .withPluginClasspath()\n+                .withArguments(arguments(\"package\", \"DskipTests\",\"-Dquarkus.package.type=fast-jar\"))\n+                .withProjectDir(projectDir)\n+                .build();\n+\n+        Path jar=projectDir.toPath().toAbsolutePath().resolve(Paths.get(\"target/acme-1.0-SNAPSHOT-runner.jar\"));\n+        Assertions.assertFalse(Files.exists(jar));\n+\n+        jar = projectDir.toPath().toAbsolutePath().resolve(Paths.get(\"target/quarkus-app/quarkus-run.jar\"));\n+        Assertions.assertTrue(Files.exists(jar));\n+\n+        File output = new File(projectDir, \"target/output.log\");\n+        output.createNewFile();\n+\n+        Process process = doLaunch(jar, output);\n+        try {\n+            // Wait until server up\n+            await()\n+                    .pollDelay(1, TimeUnit.SECONDS)\n+                    .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/app/hello/package\", 200));\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+\n+            // test that the application name and version are properly set\n+            getHttpResponse();\n+            assertResourceReadingFromClassPathWorksCorrectly(\"\");\n+        } finally {\n+            process.destroy();\n+        }\n+\n+    }\n+\n+    private Process doLaunch(Path jar, File output) throws IOException {\n+        List<String> commands = new ArrayList<>();\n+        commands.add(JavaBinFinder.findBin());\n+        commands.add(\"-jar\");\n+        commands.add(jar.toString());\n+        ProcessBuilder processBuilder = new ProcessBuilder(commands.toArray(new String[0]));\n+        processBuilder.redirectOutput(output);\n+        processBuilder.redirectError(output);\n+        return processBuilder.start();\n+    }\n+\n+    static void assertResourceReadingFromClassPathWorksCorrectly(String path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edb9ac7f7058ec8c90bb3d2e36b5184bfe8af9f2"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg1Mzk5NQ==", "bodyText": "Okayy, will do", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r440853995", "createdAt": "2020-06-16T13:35:08Z", "author": {"login": "Garima829"}, "path": "devtools/gradle/src/functionalTest/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package io.quarkus.gradle;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import io.quarkus.utilities.JavaBinFinder;\n+import org.apache.commons.io.FileUtils;\n+import org.gradle.testkit.runner.GradleRunner;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+import static org.awaitility.Awaitility.await;\n+\n+public class FastJarFormatWorksTest extends QuarkusGradleTestBase {\n+\n+    private Future<?> quarkusDev;\n+\n+    @Test\n+    public void testFastJarFormatWorks() throws IOException, URISyntaxException {\n+\n+        final File projectDir= getProjectDir(\"test-that-fast-jar-format-works-for-gradle\");\n+\n+        GradleRunner.create()\n+                .forwardOutput()\n+                .withPluginClasspath()\n+                .withArguments(arguments(\"package\", \"DskipTests\",\"-Dquarkus.package.type=fast-jar\"))\n+                .withProjectDir(projectDir)\n+                .build();\n+\n+        Path jar=projectDir.toPath().toAbsolutePath().resolve(Paths.get(\"target/acme-1.0-SNAPSHOT-runner.jar\"));\n+        Assertions.assertFalse(Files.exists(jar));\n+\n+        jar = projectDir.toPath().toAbsolutePath().resolve(Paths.get(\"target/quarkus-app/quarkus-run.jar\"));\n+        Assertions.assertTrue(Files.exists(jar));\n+\n+        File output = new File(projectDir, \"target/output.log\");\n+        output.createNewFile();\n+\n+        Process process = doLaunch(jar, output);\n+        try {\n+            // Wait until server up\n+            await()\n+                    .pollDelay(1, TimeUnit.SECONDS)\n+                    .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/app/hello/package\", 200));\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+\n+            // test that the application name and version are properly set\n+            getHttpResponse();\n+            assertResourceReadingFromClassPathWorksCorrectly(\"\");\n+        } finally {\n+            process.destroy();\n+        }\n+\n+    }\n+\n+    private Process doLaunch(Path jar, File output) throws IOException {\n+        List<String> commands = new ArrayList<>();\n+        commands.add(JavaBinFinder.findBin());\n+        commands.add(\"-jar\");\n+        commands.add(jar.toString());\n+        ProcessBuilder processBuilder = new ProcessBuilder(commands.toArray(new String[0]));\n+        processBuilder.redirectOutput(output);\n+        processBuilder.redirectError(output);\n+        return processBuilder.start();\n+    }\n+\n+    static void assertResourceReadingFromClassPathWorksCorrectly(String path) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg0MTU5Mg=="}, "originalCommit": {"oid": "edb9ac7f7058ec8c90bb3d2e36b5184bfe8af9f2"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTQxOTQwOnYy", "diffSide": "RIGHT", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/BasicJavaPlatformModuleTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwOTo0NTo0OVrOGmq5fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMToyMjo1M1rOGmrXTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIwMTkxOA==", "bodyText": "This change doesn't look right...", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r443201918", "createdAt": "2020-06-21T09:45:49Z", "author": {"login": "geoand"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/BasicJavaPlatformModuleTest.java", "diffHunk": "@@ -12,7 +12,7 @@\n     @Test\n     public void testBasicPlatformModuleBuild() throws Exception {\n \n-        final File projectDir = getProjectDir(\"basic-java-platform-module\");\n+        final File projectDir = getProjectDir(\"basic-java-p    latform-module\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27289762095b2b56412b2f48bb4d6897f96367f3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIwOTU1MQ==", "bodyText": "Yes, editing it", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r443209551", "createdAt": "2020-06-21T11:22:53Z", "author": {"login": "Garima829"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/BasicJavaPlatformModuleTest.java", "diffHunk": "@@ -12,7 +12,7 @@\n     @Test\n     public void testBasicPlatformModuleBuild() throws Exception {\n \n-        final File projectDir = getProjectDir(\"basic-java-platform-module\");\n+        final File projectDir = getProjectDir(\"basic-java-p    latform-module\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIwMTkxOA=="}, "originalCommit": {"oid": "27289762095b2b56412b2f48bb4d6897f96367f3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Mzg3MzM3OnYy", "diffSide": "RIGHT", "path": "integration-tests/gradle/src/test/resources/test-that-fast-jar-format-works/src/main/resources/META-INF/resources/index.html", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzo1OTo0M1rOGnB4kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDowMjoyNVrOGnCAJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3ODUxNA==", "bodyText": "This file can be deleted", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r443578514", "createdAt": "2020-06-22T13:59:43Z", "author": {"login": "geoand"}, "path": "integration-tests/gradle/src/test/resources/test-that-fast-jar-format-works/src/main/resources/META-INF/resources/index.html", "diffHunk": "@@ -0,0 +1,152 @@\n+<!DOCTYPE html>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1167321ac89dcb7d50cbde7b517ff0f62f84327"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4MDQ1Mg==", "bodyText": "On it", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r443580452", "createdAt": "2020-06-22T14:02:25Z", "author": {"login": "Garima829"}, "path": "integration-tests/gradle/src/test/resources/test-that-fast-jar-format-works/src/main/resources/META-INF/resources/index.html", "diffHunk": "@@ -0,0 +1,152 @@\n+<!DOCTYPE html>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3ODUxNA=="}, "originalCommit": {"oid": "e1167321ac89dcb7d50cbde7b517ff0f62f84327"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Mzg3NDk5OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDowMDowN1rOGnB5lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDowNDoxNFrOGnCE9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3ODc3Mg==", "bodyText": "Why were these changed?", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r443578772", "createdAt": "2020-06-22T14:00:07Z", "author": {"login": "geoand"}, "path": "pom.xml", "diffHunk": "@@ -31,7 +31,7 @@\n     </scm>\n \n     <properties>\n-        <graalvmHome>${env.GRAALVM_HOME}</graalvmHome>\n+        <graalvmHome>$GRAALVM_HOME</graalvmHome>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1167321ac89dcb7d50cbde7b517ff0f62f84327"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4MDMyNg==", "bodyText": "It was giving some error, I changed these before the first commit i guess, should I undo this?", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r443580326", "createdAt": "2020-06-22T14:02:13Z", "author": {"login": "Garima829"}, "path": "pom.xml", "diffHunk": "@@ -31,7 +31,7 @@\n     </scm>\n \n     <properties>\n-        <graalvmHome>${env.GRAALVM_HOME}</graalvmHome>\n+        <graalvmHome>$GRAALVM_HOME</graalvmHome>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3ODc3Mg=="}, "originalCommit": {"oid": "e1167321ac89dcb7d50cbde7b517ff0f62f84327"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4MTU0Mg==", "bodyText": "Yes please", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r443581542", "createdAt": "2020-06-22T14:04:00Z", "author": {"login": "geoand"}, "path": "pom.xml", "diffHunk": "@@ -31,7 +31,7 @@\n     </scm>\n \n     <properties>\n-        <graalvmHome>${env.GRAALVM_HOME}</graalvmHome>\n+        <graalvmHome>$GRAALVM_HOME</graalvmHome>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3ODc3Mg=="}, "originalCommit": {"oid": "e1167321ac89dcb7d50cbde7b517ff0f62f84327"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4MTY4Ng==", "bodyText": "Okk", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r443581686", "createdAt": "2020-06-22T14:04:14Z", "author": {"login": "Garima829"}, "path": "pom.xml", "diffHunk": "@@ -31,7 +31,7 @@\n     </scm>\n \n     <properties>\n-        <graalvmHome>${env.GRAALVM_HOME}</graalvmHome>\n+        <graalvmHome>$GRAALVM_HOME</graalvmHome>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3ODc3Mg=="}, "originalCommit": {"oid": "e1167321ac89dcb7d50cbde7b517ff0f62f84327"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2865, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}