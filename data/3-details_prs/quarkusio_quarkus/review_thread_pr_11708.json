{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1MzQxNzM3", "number": 11708, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMTozNzowMlrOEdrQDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMTo0MDozMVrOEdrZlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NTUyNzgyOnYy", "diffSide": "RIGHT", "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/StartupBuildSteps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMTozNzowMlrOHI-XjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMTozNzowMlrOHI-XjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTE3MjQ5Mg==", "bodyText": "This rule is applied automatically: https://github.com/quarkusio/quarkus/blob/master/extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/AutoAddScopeProcessor.java#L51", "url": "https://github.com/quarkusio/quarkus/pull/11708#discussion_r479172492", "createdAt": "2020-08-28T11:37:02Z", "author": {"login": "mkouba"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/StartupBuildSteps.java", "diffHunk": "@@ -51,26 +48,15 @@\n     private static final Logger LOGGER = Logger.getLogger(StartupBuildSteps.class);\n \n     @BuildStep\n-    AnnotationsTransformerBuildItem annotationTransformer(CustomScopeAnnotationsBuildItem customScopes) {\n-        return new AnnotationsTransformerBuildItem(new AnnotationsTransformer() {\n-\n-            @Override\n-            public boolean appliesTo(org.jboss.jandex.AnnotationTarget.Kind kind) {\n-                return kind == org.jboss.jandex.AnnotationTarget.Kind.CLASS;\n-            }\n-\n-            @Override\n-            public void transform(TransformationContext context) {\n-                if (context.isClass() && !customScopes.isScopeDeclaredOn(context.getTarget().asClass())) {\n-                    // Class with no built-in scope annotation but with @Scheduled method\n-                    if (Annotations.contains(context.getTarget().asClass().classAnnotations(), STARTUP_NAME)) {\n-                        LOGGER.debugf(\"Found @Startup on a class %s with no scope annotations - adding @ApplicationScoped\",\n-                                context.getTarget());\n-                        context.transform().add(ApplicationScoped.class).done();\n-                    }\n-                }\n-            }\n-        });\n+    AutoAddScopeBuildItem addScope(CustomScopeAnnotationsBuildItem customScopes) {\n+        // Class with no built-in scope annotation but with @Startup method\n+        return AutoAddScopeBuildItem.builder()\n+                .defaultScope(BuiltinScope.APPLICATION)\n+                .match((clazz, annotations, index) -> clazz.classAnnotation(STARTUP_NAME) != null\n+                        && !customScopes.isScopeDeclaredOn(clazz))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83376970e1a462feaa1553dc21cd5949b53415f5"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NTUzMzYyOnYy", "diffSide": "RIGHT", "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/StartupBuildSteps.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMTozNzo1NFrOHI-bJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxOTo1NzozN1rOHJS1Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTE3MzQxMw==", "bodyText": "You can use AutoAddScopeBuildItem.Builder.containsAnnotations(DotName...) instead...", "url": "https://github.com/quarkusio/quarkus/pull/11708#discussion_r479173413", "createdAt": "2020-08-28T11:37:54Z", "author": {"login": "mkouba"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/StartupBuildSteps.java", "diffHunk": "@@ -51,26 +48,15 @@\n     private static final Logger LOGGER = Logger.getLogger(StartupBuildSteps.class);\n \n     @BuildStep\n-    AnnotationsTransformerBuildItem annotationTransformer(CustomScopeAnnotationsBuildItem customScopes) {\n-        return new AnnotationsTransformerBuildItem(new AnnotationsTransformer() {\n-\n-            @Override\n-            public boolean appliesTo(org.jboss.jandex.AnnotationTarget.Kind kind) {\n-                return kind == org.jboss.jandex.AnnotationTarget.Kind.CLASS;\n-            }\n-\n-            @Override\n-            public void transform(TransformationContext context) {\n-                if (context.isClass() && !customScopes.isScopeDeclaredOn(context.getTarget().asClass())) {\n-                    // Class with no built-in scope annotation but with @Scheduled method\n-                    if (Annotations.contains(context.getTarget().asClass().classAnnotations(), STARTUP_NAME)) {\n-                        LOGGER.debugf(\"Found @Startup on a class %s with no scope annotations - adding @ApplicationScoped\",\n-                                context.getTarget());\n-                        context.transform().add(ApplicationScoped.class).done();\n-                    }\n-                }\n-            }\n-        });\n+    AutoAddScopeBuildItem addScope(CustomScopeAnnotationsBuildItem customScopes) {\n+        // Class with no built-in scope annotation but with @Startup method\n+        return AutoAddScopeBuildItem.builder()\n+                .defaultScope(BuiltinScope.APPLICATION)\n+                .match((clazz, annotations, index) -> clazz.classAnnotation(STARTUP_NAME) != null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83376970e1a462feaa1553dc21cd5949b53415f5"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM0MjU4OA==", "bodyText": "@mkouba but this will no longer have the same behaviour. Note that before the annotation transformer only cared about class-level annotations. Your suggestion will make it apply to producers as well. Namely producers without any scope such as this one in a test. I'd say that's not intended?", "url": "https://github.com/quarkusio/quarkus/pull/11708#discussion_r479342588", "createdAt": "2020-08-28T14:29:02Z", "author": {"login": "manovotn"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/StartupBuildSteps.java", "diffHunk": "@@ -51,26 +48,15 @@\n     private static final Logger LOGGER = Logger.getLogger(StartupBuildSteps.class);\n \n     @BuildStep\n-    AnnotationsTransformerBuildItem annotationTransformer(CustomScopeAnnotationsBuildItem customScopes) {\n-        return new AnnotationsTransformerBuildItem(new AnnotationsTransformer() {\n-\n-            @Override\n-            public boolean appliesTo(org.jboss.jandex.AnnotationTarget.Kind kind) {\n-                return kind == org.jboss.jandex.AnnotationTarget.Kind.CLASS;\n-            }\n-\n-            @Override\n-            public void transform(TransformationContext context) {\n-                if (context.isClass() && !customScopes.isScopeDeclaredOn(context.getTarget().asClass())) {\n-                    // Class with no built-in scope annotation but with @Scheduled method\n-                    if (Annotations.contains(context.getTarget().asClass().classAnnotations(), STARTUP_NAME)) {\n-                        LOGGER.debugf(\"Found @Startup on a class %s with no scope annotations - adding @ApplicationScoped\",\n-                                context.getTarget());\n-                        context.transform().add(ApplicationScoped.class).done();\n-                    }\n-                }\n-            }\n-        });\n+    AutoAddScopeBuildItem addScope(CustomScopeAnnotationsBuildItem customScopes) {\n+        // Class with no built-in scope annotation but with @Startup method\n+        return AutoAddScopeBuildItem.builder()\n+                .defaultScope(BuiltinScope.APPLICATION)\n+                .match((clazz, annotations, index) -> clazz.classAnnotation(STARTUP_NAME) != null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTE3MzQxMw=="}, "originalCommit": {"oid": "83376970e1a462feaa1553dc21cd5949b53415f5"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ5NzY2NA==", "bodyText": "Hm, I'm not quite sure. The truth is that we do add @Dependent for producers by default. In any case, you can replace the lambda with AutoAddScopeBuildItem#isAnnotatedWith().", "url": "https://github.com/quarkusio/quarkus/pull/11708#discussion_r479497664", "createdAt": "2020-08-28T19:34:02Z", "author": {"login": "mkouba"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/StartupBuildSteps.java", "diffHunk": "@@ -51,26 +48,15 @@\n     private static final Logger LOGGER = Logger.getLogger(StartupBuildSteps.class);\n \n     @BuildStep\n-    AnnotationsTransformerBuildItem annotationTransformer(CustomScopeAnnotationsBuildItem customScopes) {\n-        return new AnnotationsTransformerBuildItem(new AnnotationsTransformer() {\n-\n-            @Override\n-            public boolean appliesTo(org.jboss.jandex.AnnotationTarget.Kind kind) {\n-                return kind == org.jboss.jandex.AnnotationTarget.Kind.CLASS;\n-            }\n-\n-            @Override\n-            public void transform(TransformationContext context) {\n-                if (context.isClass() && !customScopes.isScopeDeclaredOn(context.getTarget().asClass())) {\n-                    // Class with no built-in scope annotation but with @Scheduled method\n-                    if (Annotations.contains(context.getTarget().asClass().classAnnotations(), STARTUP_NAME)) {\n-                        LOGGER.debugf(\"Found @Startup on a class %s with no scope annotations - adding @ApplicationScoped\",\n-                                context.getTarget());\n-                        context.transform().add(ApplicationScoped.class).done();\n-                    }\n-                }\n-            }\n-        });\n+    AutoAddScopeBuildItem addScope(CustomScopeAnnotationsBuildItem customScopes) {\n+        // Class with no built-in scope annotation but with @Startup method\n+        return AutoAddScopeBuildItem.builder()\n+                .defaultScope(BuiltinScope.APPLICATION)\n+                .match((clazz, annotations, index) -> clazz.classAnnotation(STARTUP_NAME) != null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTE3MzQxMw=="}, "originalCommit": {"oid": "83376970e1a462feaa1553dc21cd5949b53415f5"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUwNzc0Mw==", "bodyText": "The truth is that we do add @dependent for producers by default.\n\nYeah, and that's pretty much spec based. I don't think we want to change that.\n\nIn any case, you can replace the lambda with AutoAddScopeBuildItem#isAnnotatedWith().\n\nUff, I read that class at least twice but never noticed that method. Fridays...\nI will do that once I am back in front of PC on Mon.", "url": "https://github.com/quarkusio/quarkus/pull/11708#discussion_r479507743", "createdAt": "2020-08-28T19:57:37Z", "author": {"login": "manovotn"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/StartupBuildSteps.java", "diffHunk": "@@ -51,26 +48,15 @@\n     private static final Logger LOGGER = Logger.getLogger(StartupBuildSteps.class);\n \n     @BuildStep\n-    AnnotationsTransformerBuildItem annotationTransformer(CustomScopeAnnotationsBuildItem customScopes) {\n-        return new AnnotationsTransformerBuildItem(new AnnotationsTransformer() {\n-\n-            @Override\n-            public boolean appliesTo(org.jboss.jandex.AnnotationTarget.Kind kind) {\n-                return kind == org.jboss.jandex.AnnotationTarget.Kind.CLASS;\n-            }\n-\n-            @Override\n-            public void transform(TransformationContext context) {\n-                if (context.isClass() && !customScopes.isScopeDeclaredOn(context.getTarget().asClass())) {\n-                    // Class with no built-in scope annotation but with @Scheduled method\n-                    if (Annotations.contains(context.getTarget().asClass().classAnnotations(), STARTUP_NAME)) {\n-                        LOGGER.debugf(\"Found @Startup on a class %s with no scope annotations - adding @ApplicationScoped\",\n-                                context.getTarget());\n-                        context.transform().add(ApplicationScoped.class).done();\n-                    }\n-                }\n-            }\n-        });\n+    AutoAddScopeBuildItem addScope(CustomScopeAnnotationsBuildItem customScopes) {\n+        // Class with no built-in scope annotation but with @Startup method\n+        return AutoAddScopeBuildItem.builder()\n+                .defaultScope(BuiltinScope.APPLICATION)\n+                .match((clazz, annotations, index) -> clazz.classAnnotation(STARTUP_NAME) != null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTE3MzQxMw=="}, "originalCommit": {"oid": "83376970e1a462feaa1553dc21cd5949b53415f5"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NTU1MjIwOnYy", "diffSide": "RIGHT", "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/StartupBuildSteps.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMTo0MDozMVrOHI-m1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDoyNjozOFrOHJIqHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTE3NjQwNQ==", "bodyText": "This is already handled in the unremovableBeans() method. We should either remove that method or remove this requirement...", "url": "https://github.com/quarkusio/quarkus/pull/11708#discussion_r479176405", "createdAt": "2020-08-28T11:40:31Z", "author": {"login": "mkouba"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/StartupBuildSteps.java", "diffHunk": "@@ -51,26 +48,15 @@\n     private static final Logger LOGGER = Logger.getLogger(StartupBuildSteps.class);\n \n     @BuildStep\n-    AnnotationsTransformerBuildItem annotationTransformer(CustomScopeAnnotationsBuildItem customScopes) {\n-        return new AnnotationsTransformerBuildItem(new AnnotationsTransformer() {\n-\n-            @Override\n-            public boolean appliesTo(org.jboss.jandex.AnnotationTarget.Kind kind) {\n-                return kind == org.jboss.jandex.AnnotationTarget.Kind.CLASS;\n-            }\n-\n-            @Override\n-            public void transform(TransformationContext context) {\n-                if (context.isClass() && !customScopes.isScopeDeclaredOn(context.getTarget().asClass())) {\n-                    // Class with no built-in scope annotation but with @Scheduled method\n-                    if (Annotations.contains(context.getTarget().asClass().classAnnotations(), STARTUP_NAME)) {\n-                        LOGGER.debugf(\"Found @Startup on a class %s with no scope annotations - adding @ApplicationScoped\",\n-                                context.getTarget());\n-                        context.transform().add(ApplicationScoped.class).done();\n-                    }\n-                }\n-            }\n-        });\n+    AutoAddScopeBuildItem addScope(CustomScopeAnnotationsBuildItem customScopes) {\n+        // Class with no built-in scope annotation but with @Startup method\n+        return AutoAddScopeBuildItem.builder()\n+                .defaultScope(BuiltinScope.APPLICATION)\n+                .match((clazz, annotations, index) -> clazz.classAnnotation(STARTUP_NAME) != null\n+                        && !customScopes.isScopeDeclaredOn(clazz))\n+                .unremovable()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83376970e1a462feaa1553dc21cd5949b53415f5"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM0MTA4NA==", "bodyText": "Fair enough, I noticed the method but forgot to remove this line.", "url": "https://github.com/quarkusio/quarkus/pull/11708#discussion_r479341084", "createdAt": "2020-08-28T14:26:38Z", "author": {"login": "manovotn"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/StartupBuildSteps.java", "diffHunk": "@@ -51,26 +48,15 @@\n     private static final Logger LOGGER = Logger.getLogger(StartupBuildSteps.class);\n \n     @BuildStep\n-    AnnotationsTransformerBuildItem annotationTransformer(CustomScopeAnnotationsBuildItem customScopes) {\n-        return new AnnotationsTransformerBuildItem(new AnnotationsTransformer() {\n-\n-            @Override\n-            public boolean appliesTo(org.jboss.jandex.AnnotationTarget.Kind kind) {\n-                return kind == org.jboss.jandex.AnnotationTarget.Kind.CLASS;\n-            }\n-\n-            @Override\n-            public void transform(TransformationContext context) {\n-                if (context.isClass() && !customScopes.isScopeDeclaredOn(context.getTarget().asClass())) {\n-                    // Class with no built-in scope annotation but with @Scheduled method\n-                    if (Annotations.contains(context.getTarget().asClass().classAnnotations(), STARTUP_NAME)) {\n-                        LOGGER.debugf(\"Found @Startup on a class %s with no scope annotations - adding @ApplicationScoped\",\n-                                context.getTarget());\n-                        context.transform().add(ApplicationScoped.class).done();\n-                    }\n-                }\n-            }\n-        });\n+    AutoAddScopeBuildItem addScope(CustomScopeAnnotationsBuildItem customScopes) {\n+        // Class with no built-in scope annotation but with @Startup method\n+        return AutoAddScopeBuildItem.builder()\n+                .defaultScope(BuiltinScope.APPLICATION)\n+                .match((clazz, annotations, index) -> clazz.classAnnotation(STARTUP_NAME) != null\n+                        && !customScopes.isScopeDeclaredOn(clazz))\n+                .unremovable()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTE3NjQwNQ=="}, "originalCommit": {"oid": "83376970e1a462feaa1553dc21cd5949b53415f5"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 420, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}