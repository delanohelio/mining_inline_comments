{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1Njc5NDE4", "number": 11724, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDowMzoxMFrOEs9qkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwODo1ODo1NVrOE3H8nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTgzMTIxOnYy", "diffSide": "RIGHT", "path": "extensions/panache/hibernate-orm-panache-kotlin/runtime/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/runtime/KotlinJpaOperations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDowMzoxMFrOHgfIlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMjoxMzowMFrOHgjmMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgyNjU4Mg==", "bodyText": "As a side note, we should really find a way for users to not use our Operation classes.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r503826582", "createdAt": "2020-10-13T10:03:10Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/runtime/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/runtime/KotlinJpaOperations.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.runtime;\n+\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import javax.persistence.EntityManager;\n+\n+import io.quarkus.hibernate.orm.panache.common.runtime.AbstractJpaOperations;\n+\n+public class KotlinJpaOperations extends AbstractJpaOperations<PanacheQueryImpl<?>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66d59d24f0f8d7cf43c23d5f69a063814dbb8216"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg5OTY5Ng==", "bodyText": "That would be lovely, for sure.  I've tried to document them as private but that's not really going to stop anyone.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r503899696", "createdAt": "2020-10-13T12:13:00Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/runtime/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/runtime/KotlinJpaOperations.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.runtime;\n+\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import javax.persistence.EntityManager;\n+\n+import io.quarkus.hibernate.orm.panache.common.runtime.AbstractJpaOperations;\n+\n+public class KotlinJpaOperations extends AbstractJpaOperations<PanacheQueryImpl<?>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgyNjU4Mg=="}, "originalCommit": {"oid": "66d59d24f0f8d7cf43c23d5f69a063814dbb8216"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTkxOTUzOnYy", "diffSide": "RIGHT", "path": "integration-tests/hibernate-orm-panache-kotlin/src/main/kotlin/io/quarkus/it/panache/kotlin/PersonRepository.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDoyNjo1OFrOHgf-4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMjoxMjoxNFrOHgjkeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0MDQ4Mg==", "bodyText": "Tests should not be using KotlinJpaOperations but instead super(query, params).", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r503840482", "createdAt": "2020-10-13T10:26:58Z", "author": {"login": "loicmathieu"}, "path": "integration-tests/hibernate-orm-panache-kotlin/src/main/kotlin/io/quarkus/it/panache/kotlin/PersonRepository.kt", "diffHunk": "@@ -1,12 +1,12 @@\n package io.quarkus.it.panache.kotlin\n \n import io.quarkus.hibernate.orm.panache.kotlin.PanacheRepository\n-import io.quarkus.hibernate.orm.panache.kotlin.runtime.JpaOperations\n+import io.quarkus.hibernate.orm.panache.kotlin.runtime.KotlinJpaOperations.INSTANCE\n import javax.enterprise.context.ApplicationScoped\n \n @ApplicationScoped\n open class PersonRepository : PanacheRepository<Person> {\n     override fun count(query: String, params: Map<String, Any>): Long {\n-        return JpaOperations.count(Person::class.java, query, params)\n+        return INSTANCE.count(Person::class.java, query, params)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66d59d24f0f8d7cf43c23d5f69a063814dbb8216"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg5OTI1OA==", "bodyText": "Actually this method can probably come out.  I'd been directly implementing such methods so I had \"real\" bytecode to compare against.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r503899258", "createdAt": "2020-10-13T12:12:14Z", "author": {"login": "evanchooly"}, "path": "integration-tests/hibernate-orm-panache-kotlin/src/main/kotlin/io/quarkus/it/panache/kotlin/PersonRepository.kt", "diffHunk": "@@ -1,12 +1,12 @@\n package io.quarkus.it.panache.kotlin\n \n import io.quarkus.hibernate.orm.panache.kotlin.PanacheRepository\n-import io.quarkus.hibernate.orm.panache.kotlin.runtime.JpaOperations\n+import io.quarkus.hibernate.orm.panache.kotlin.runtime.KotlinJpaOperations.INSTANCE\n import javax.enterprise.context.ApplicationScoped\n \n @ApplicationScoped\n open class PersonRepository : PanacheRepository<Person> {\n     override fun count(query: String, params: Map<String, Any>): Long {\n-        return JpaOperations.count(Person::class.java, query, params)\n+        return INSTANCE.count(Person::class.java, query, params)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0MDQ4Mg=="}, "originalCommit": {"oid": "66d59d24f0f8d7cf43c23d5f69a063814dbb8216"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3OTE5MDA4OnYy", "diffSide": "RIGHT", "path": "extensions/panache/hibernate-orm-panache-common/runtime/src/main/java/io/quarkus/hibernate/orm/panache/common/runtime/AbstractJpaOperations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwODowMDo1MVrOHkCNdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMzo0OToxN1rOHkPSVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU0Njk5OQ==", "bodyText": "wildcard imports are prohibited", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r507546999", "createdAt": "2020-10-19T08:00:51Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/hibernate-orm-panache-common/runtime/src/main/java/io/quarkus/hibernate/orm/panache/common/runtime/AbstractJpaOperations.java", "diffHunk": "@@ -1,5 +1,7 @@\n package io.quarkus.hibernate.orm.panache.common.runtime;\n \n+import static io.quarkus.hibernate.orm.runtime.PersistenceUnitUtil.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "444eaf2f014218cf326a2daae25e0d664165d34e"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc2MTIzNw==", "bodyText": "grumble grumble  between my IDE formatting and the build formatting that should've never made it in.  :)", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r507761237", "createdAt": "2020-10-19T13:49:17Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/hibernate-orm-panache-common/runtime/src/main/java/io/quarkus/hibernate/orm/panache/common/runtime/AbstractJpaOperations.java", "diffHunk": "@@ -1,5 +1,7 @@\n package io.quarkus.hibernate.orm.panache.common.runtime;\n \n+import static io.quarkus.hibernate.orm.runtime.PersistenceUnitUtil.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU0Njk5OQ=="}, "originalCommit": {"oid": "444eaf2f014218cf326a2daae25e0d664165d34e"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3OTIyNjg0OnYy", "diffSide": "RIGHT", "path": "extensions/panache/panache-common/deployment/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwODoxMDoxMFrOHkCiyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwODoxMDoxMFrOHkCiyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU1MjQ1Ng==", "bodyText": "panache-common is common to Hibernate and MongoDB, it should not depends on any Hibernate modules", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r507552456", "createdAt": "2020-10-19T08:10:10Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/panache-common/deployment/pom.xml", "diffHunk": "@@ -21,6 +21,11 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-panache-common</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-hibernate-orm-deployment</artifactId>\n+            <scope>provided</scope>\n+        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "444eaf2f014218cf326a2daae25e0d664165d34e"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3OTIzNjM2OnYy", "diffSide": "RIGHT", "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/visitors/PanacheJpaEntityClassVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwODoxMjoyN1rOHkCoWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwODoxMjoyN1rOHkCoWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU1Mzg4MQ==", "bodyText": "This class should be on hibernate-orm-panache-common not panache-common.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r507553881", "createdAt": "2020-10-19T08:12:27Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/visitors/PanacheJpaEntityClassVisitor.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package io.quarkus.panache.common.deployment.visitors;\n+\n+import java.util.List;\n+\n+import org.hibernate.bytecode.enhance.spi.EnhancerConstants;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.IndexView;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n+\n+import io.quarkus.panache.common.deployment.EntityField;\n+import io.quarkus.panache.common.deployment.EntityModel;\n+import io.quarkus.panache.common.deployment.MetamodelInfo;\n+import io.quarkus.panache.common.deployment.PanacheMethodCustomizer;\n+import io.quarkus.panache.common.deployment.TypeBundle;\n+\n+public class PanacheJpaEntityClassVisitor extends PanacheEntityClassVisitor<EntityField> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "444eaf2f014218cf326a2daae25e0d664165d34e"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Mzc4NTQ3OnYy", "diffSide": "RIGHT", "path": "extensions/panache/panache-hibernate-common/deployment/pom.xml", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzoxMDowMFrOHktqNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzoxODozMFrOHk783w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI1ODg2OQ==", "bodyText": "Could we add it as optional ?\nI don't know if it's a bug library or not, but if it adds a lot of dependencies we should make it optional", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r508258869", "createdAt": "2020-10-20T07:10:00Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/panache-hibernate-common/deployment/pom.xml", "diffHunk": "@@ -17,6 +17,14 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-core-deployment</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-hibernate-envers</artifactId>\n+        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daf0114f6c9b191d64492ffa125cae23c898e7cc"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1OTU3MQ==", "bodyText": "the build actually fails due to a missing module without it.  Not that things don't compile.  but literally maven stops and complains.  it's the first time I've ever seen that kind of error.  but I'll try marking it as provided and see what happens.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r508459571", "createdAt": "2020-10-20T12:30:43Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/panache-hibernate-common/deployment/pom.xml", "diffHunk": "@@ -17,6 +17,14 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-core-deployment</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-hibernate-envers</artifactId>\n+        </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI1ODg2OQ=="}, "originalCommit": {"oid": "daf0114f6c9b191d64492ffa125cae23c898e7cc"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2MTEwNg==", "bodyText": "optional seems better than provided, but I wonder why you need it ...", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r508461106", "createdAt": "2020-10-20T12:33:13Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/panache-hibernate-common/deployment/pom.xml", "diffHunk": "@@ -17,6 +17,14 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-core-deployment</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-hibernate-envers</artifactId>\n+        </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI1ODg2OQ=="}, "originalCommit": {"oid": "daf0114f6c9b191d64492ffa125cae23c898e7cc"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ4MjI0MA==", "bodyText": "actually that looks to be vestigial. i removed it and it built locally so I think some other pom changes i made rectified the \"need\" for that one.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r508482240", "createdAt": "2020-10-20T13:03:51Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/panache-hibernate-common/deployment/pom.xml", "diffHunk": "@@ -17,6 +17,14 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-core-deployment</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-hibernate-envers</artifactId>\n+        </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI1ODg2OQ=="}, "originalCommit": {"oid": "daf0114f6c9b191d64492ffa125cae23c898e7cc"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ5MzAyMw==", "bodyText": "Cool!", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r508493023", "createdAt": "2020-10-20T13:18:30Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/panache-hibernate-common/deployment/pom.xml", "diffHunk": "@@ -17,6 +17,14 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-core-deployment</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-hibernate-envers</artifactId>\n+        </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI1ODg2OQ=="}, "originalCommit": {"oid": "daf0114f6c9b191d64492ffa125cae23c898e7cc"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjkyNzQ3OnYy", "diffSide": "RIGHT", "path": "extensions/panache/hibernate-orm-panache-common/deployment/pom.xml", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDoyMzozMFrOHoJJZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMzo0NTowMVrOHo87yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NDk0OQ==", "bodyText": "Is the dep on envers really deliberate?", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r511854949", "createdAt": "2020-10-26T10:23:30Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache-common/deployment/pom.xml", "diffHunk": "@@ -33,6 +33,16 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-hibernate-orm-panache-common</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-hibernate-envers-deployment</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4OTg1NQ==", "bodyText": "It is but i'm not sure it's necessary any longer.  some later changes in dependency trees might have resolved the error encountered here.  I will double check because I felt a bit squeamish about it, too.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r512189855", "createdAt": "2020-10-26T18:44:47Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/hibernate-orm-panache-common/deployment/pom.xml", "diffHunk": "@@ -33,6 +33,16 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-hibernate-orm-panache-common</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-hibernate-envers-deployment</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NDk0OQ=="}, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1MTYyOQ==", "bodyText": "It's there to provide access to EnhancerConstants.PERSISTENT_FIELD_WRITER_PREFIX in the class visitor.  If there's a more appropriate quarkus artifact (or otherwise) i'm happy to swap that out.  But it's literally for that one constant which is mildly gross but less so than copying that value in directly, I think.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r512251629", "createdAt": "2020-10-26T20:35:58Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/hibernate-orm-panache-common/deployment/pom.xml", "diffHunk": "@@ -33,6 +33,16 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-hibernate-orm-panache-common</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-hibernate-envers-deployment</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NDk0OQ=="}, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU3MzMxMA==", "bodyText": "IIRC that comes from hibernate orm, not envers.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r512573310", "createdAt": "2020-10-27T10:27:32Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache-common/deployment/pom.xml", "diffHunk": "@@ -33,6 +33,16 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-hibernate-orm-panache-common</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-hibernate-envers-deployment</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NDk0OQ=="}, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY0MjA1Nw==", "bodyText": "ok.  i'll play with that.  thanks.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r512642057", "createdAt": "2020-10-27T12:13:17Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/hibernate-orm-panache-common/deployment/pom.xml", "diffHunk": "@@ -33,6 +33,16 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-hibernate-orm-panache-common</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-hibernate-envers-deployment</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NDk0OQ=="}, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcwMzQzNA==", "bodyText": "that's exactly what I needed.  thanks.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r512703434", "createdAt": "2020-10-27T13:45:01Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/hibernate-orm-panache-common/deployment/pom.xml", "diffHunk": "@@ -33,6 +33,16 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-hibernate-orm-panache-common</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-hibernate-envers-deployment</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NDk0OQ=="}, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjkyODU0OnYy", "diffSide": "RIGHT", "path": "extensions/panache/hibernate-reactive-panache-common/deployment/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDoyMzo0OFrOHoJKIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDoyMzo0OFrOHoJKIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NTEzNg==", "bodyText": "Same question about envers.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r511855136", "createdAt": "2020-10-26T10:23:48Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-reactive-panache-common/deployment/pom.xml", "diffHunk": "@@ -33,6 +33,16 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-hibernate-reactive-panache-common</artifactId>\n         </dependency>\n+           <dependency>\n+               <groupId>io.quarkus</groupId>\n+               <artifactId>quarkus-hibernate-envers-deployment</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjkyOTEyOnYy", "diffSide": "RIGHT", "path": "extensions/panache/panache-hibernate-common/runtime/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDoyMzo1N1rOHoJKeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDoyMzo1N1rOHoJKeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NTIyNQ==", "bodyText": "Same question about envers.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r511855225", "createdAt": "2020-10-26T10:23:57Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-hibernate-common/runtime/pom.xml", "diffHunk": "@@ -25,6 +25,10 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-panache-common</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-hibernate-envers</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjk0MDI0OnYy", "diffSide": "RIGHT", "path": "extensions/panache/hibernate-orm-panache-common/runtime/src/main/java/io/quarkus/hibernate/orm/panache/Panache.java", "isResolved": true, "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDoyNjo0NVrOHoJRTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTo0NToxNlrOHuX5Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1Njk3Mg==", "bodyText": "This is user-facing API, and it's lacking methods compared to the current version so it's not compatible.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r511856972", "createdAt": "2020-10-26T10:26:45Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache-common/runtime/src/main/java/io/quarkus/hibernate/orm/panache/Panache.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.hibernate.orm.panache;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+import javax.transaction.TransactionManager;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.hibernate.orm.PersistenceUnit;\n+import io.quarkus.hibernate.orm.runtime.PersistenceUnitUtil;\n+\n+/**\n+ * Utility class for Panache.\n+ *\n+ * @author St\u00e9phane \u00c9pardaud\n+ */\n+public class Panache {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5MTM0OQ==", "bodyText": "ah.  i wasn't aware that was intended for public consumption.  i'll see what's drifted and restore it.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r512191349", "createdAt": "2020-10-26T18:47:16Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/hibernate-orm-panache-common/runtime/src/main/java/io/quarkus/hibernate/orm/panache/Panache.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.hibernate.orm.panache;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+import javax.transaction.TransactionManager;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.hibernate.orm.PersistenceUnit;\n+import io.quarkus.hibernate.orm.runtime.PersistenceUnitUtil;\n+\n+/**\n+ * Utility class for Panache.\n+ *\n+ * @author St\u00e9phane \u00c9pardaud\n+ */\n+public class Panache {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1Njk3Mg=="}, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcxMDQ1Mw==", "bodyText": "The problem with these methods is that they treat JpaOperations as a bag of static methods but it's not any more.  So those methods would have to either change to take in the the operations reference, which would be a weird API, or just go away.  Are users actually actively using these methods?  Because I'm not seeing a non-breaking way for them to remain with everything else as it is.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r512710453", "createdAt": "2020-10-27T13:53:42Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/hibernate-orm-panache-common/runtime/src/main/java/io/quarkus/hibernate/orm/panache/Panache.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.hibernate.orm.panache;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+import javax.transaction.TransactionManager;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.hibernate.orm.PersistenceUnit;\n+import io.quarkus.hibernate.orm.runtime.PersistenceUnitUtil;\n+\n+/**\n+ * Utility class for Panache.\n+ *\n+ * @author St\u00e9phane \u00c9pardaud\n+ */\n+public class Panache {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1Njk3Mg=="}, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg1NDcwOA==", "bodyText": "Well, yes, those methods are used in the wild, that's the public API. I'm not sure what you mean, we currently already have several versions of this class (different packages), so as long as we keep them we know what instance of operations they delegate to, no?", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r512854708", "createdAt": "2020-10-27T16:44:08Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache-common/runtime/src/main/java/io/quarkus/hibernate/orm/panache/Panache.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.hibernate.orm.panache;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+import javax.transaction.TransactionManager;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.hibernate.orm.PersistenceUnit;\n+import io.quarkus.hibernate.orm.runtime.PersistenceUnitUtil;\n+\n+/**\n+ * Utility class for Panache.\n+ *\n+ * @author St\u00e9phane \u00c9pardaud\n+ */\n+public class Panache {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1Njk3Mg=="}, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg5MTI0Ng==", "bodyText": "right.  they would need to have a reference to an operations instance.  not sure how to get that in there without changing the API.  but then, we don't want them using the operations classes directly because those are not public.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r512891246", "createdAt": "2020-10-27T17:33:26Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/hibernate-orm-panache-common/runtime/src/main/java/io/quarkus/hibernate/orm/panache/Panache.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.hibernate.orm.panache;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+import javax.transaction.TransactionManager;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.hibernate.orm.PersistenceUnit;\n+import io.quarkus.hibernate.orm.runtime.PersistenceUnitUtil;\n+\n+/**\n+ * Utility class for Panache.\n+ *\n+ * @author St\u00e9phane \u00c9pardaud\n+ */\n+public class Panache {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1Njk3Mg=="}, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI4NDgzNg==", "bodyText": "Just make them forward to the right INSTANCE, I don't see the problem.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r513284836", "createdAt": "2020-10-28T09:13:03Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache-common/runtime/src/main/java/io/quarkus/hibernate/orm/panache/Panache.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.hibernate.orm.panache;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+import javax.transaction.TransactionManager;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.hibernate.orm.PersistenceUnit;\n+import io.quarkus.hibernate.orm.runtime.PersistenceUnitUtil;\n+\n+/**\n+ * Utility class for Panache.\n+ *\n+ * @author St\u00e9phane \u00c9pardaud\n+ */\n+public class Panache {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1Njk3Mg=="}, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQzOTE1Mw==", "bodyText": "well, there are two issues is see off hand (and @loicmathieu can probably weigh in here):\n\nThat's still a breaking change to a public API.  I personally don't see the value in this public API but that might be a discussion for another time.\nWe've been mostly working on the assumption that the operations implementation classes are internal implementation details and discouraging use outside of the generated delegations from entity/repository types.  this would officially commit us to a public, stable API.  That's not necessarily a bad thing as that API is unlikely to radically change but I do think it's a decision we should consciously make.\n\nAdding that as a param is by far the simplest thing to do I just want to make sure we're actively choosing the consequences of it.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r513439153", "createdAt": "2020-10-28T13:25:26Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/hibernate-orm-panache-common/runtime/src/main/java/io/quarkus/hibernate/orm/panache/Panache.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.hibernate.orm.panache;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+import javax.transaction.TransactionManager;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.hibernate.orm.PersistenceUnit;\n+import io.quarkus.hibernate.orm.runtime.PersistenceUnitUtil;\n+\n+/**\n+ * Utility class for Panache.\n+ *\n+ * @author St\u00e9phane \u00c9pardaud\n+ */\n+public class Panache {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1Njk3Mg=="}, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUwODg0MQ==", "bodyText": "Definitely not as a param:\npublic class Panache {\n  public static void setRollbackOnly() {\n    JpaOperations.INSTANCE.setRollbackOnly();\n }\n}\nAnd do the same for the other existing Panache classes and other methods, and we're done.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r513508841", "createdAt": "2020-10-28T14:52:11Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache-common/runtime/src/main/java/io/quarkus/hibernate/orm/panache/Panache.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.hibernate.orm.panache;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+import javax.transaction.TransactionManager;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.hibernate.orm.PersistenceUnit;\n+import io.quarkus.hibernate.orm.runtime.PersistenceUnitUtil;\n+\n+/**\n+ * Utility class for Panache.\n+ *\n+ * @author St\u00e9phane \u00c9pardaud\n+ */\n+public class Panache {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1Njk3Mg=="}, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUxNzA3Mw==", "bodyText": "That would create a hard dep on hibernate-orm-panache even for kotlin apps which could be awkward/confusing.  fwiw, the reactive form of Panache is a much smaller API which suggest some asymmetry in requirements/design.  Do users really need another helper class like this?", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r513517073", "createdAt": "2020-10-28T15:01:47Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/hibernate-orm-panache-common/runtime/src/main/java/io/quarkus/hibernate/orm/panache/Panache.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.hibernate.orm.panache;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+import javax.transaction.TransactionManager;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.hibernate.orm.PersistenceUnit;\n+import io.quarkus.hibernate.orm.runtime.PersistenceUnitUtil;\n+\n+/**\n+ * Utility class for Panache.\n+ *\n+ * @author St\u00e9phane \u00c9pardaud\n+ */\n+public class Panache {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1Njk3Mg=="}, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYwNDUzMA==", "bodyText": "I'm not sure what you mean about this. Currently every Panache extension has that Panache class. You're trying to remove it. I think you can't because people are using it. I'm not proposing to add anything new.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r513604530", "createdAt": "2020-10-28T16:51:30Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache-common/runtime/src/main/java/io/quarkus/hibernate/orm/panache/Panache.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.hibernate.orm.panache;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+import javax.transaction.TransactionManager;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.hibernate.orm.PersistenceUnit;\n+import io.quarkus.hibernate.orm.runtime.PersistenceUnitUtil;\n+\n+/**\n+ * Utility class for Panache.\n+ *\n+ * @author St\u00e9phane \u00c9pardaud\n+ */\n+public class Panache {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1Njk3Mg=="}, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1MTI4Mw==", "bodyText": "JpaOperations.INSTANCE lives in hibernate-orm-panache which quarkus-hibernate-orm-panache-kotlin does not depend on.  In order for Panache to function, those kotlin apps would have to import the java implementation as well.  the kotlin module does not define its Panache so it can't be bound to a different reference.  Now we can push down the Panache definitions to the language specific modules but it'd be one more point of duplication.  I have plans in the works to monitor all such duplications for divergence so maybe that's not a big deal.  But, again, it should be a conscious choice we all make.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r513651283", "createdAt": "2020-10-28T17:56:52Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/hibernate-orm-panache-common/runtime/src/main/java/io/quarkus/hibernate/orm/panache/Panache.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.hibernate.orm.panache;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+import javax.transaction.TransactionManager;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.hibernate.orm.PersistenceUnit;\n+import io.quarkus.hibernate.orm.runtime.PersistenceUnitUtil;\n+\n+/**\n+ * Utility class for Panache.\n+ *\n+ * @author St\u00e9phane \u00c9pardaud\n+ */\n+public class Panache {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1Njk3Mg=="}, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE0OTE5NQ==", "bodyText": "If the Kotlin version doesn't have this interface ATM, then it differs from the Java one, just move it back to the ORM module where it started. The Mongo ones have it, under their own package, so no problem there.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r514149195", "createdAt": "2020-10-29T10:19:43Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache-common/runtime/src/main/java/io/quarkus/hibernate/orm/panache/Panache.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.hibernate.orm.panache;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+import javax.transaction.TransactionManager;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.hibernate.orm.PersistenceUnit;\n+import io.quarkus.hibernate.orm.runtime.PersistenceUnitUtil;\n+\n+/**\n+ * Utility class for Panache.\n+ *\n+ * @author St\u00e9phane \u00c9pardaud\n+ */\n+public class Panache {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1Njk3Mg=="}, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU2MDMzOQ==", "bodyText": "I can definitely push these types down to the specific modules.  Still trying to track down why switching from the envers dep to hibernate-orm results in that arc/injection failure.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r514560339", "createdAt": "2020-10-29T20:54:12Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/hibernate-orm-panache-common/runtime/src/main/java/io/quarkus/hibernate/orm/panache/Panache.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.hibernate.orm.panache;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+import javax.transaction.TransactionManager;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.hibernate.orm.PersistenceUnit;\n+import io.quarkus.hibernate.orm.runtime.PersistenceUnitUtil;\n+\n+/**\n+ * Utility class for Panache.\n+ *\n+ * @author St\u00e9phane \u00c9pardaud\n+ */\n+public class Panache {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1Njk3Mg=="}, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM3MDU2NA==", "bodyText": "OK.  Simpler solution:  I can simply make those methods static on AbstractJpaOperations since they don't need any specialization of types between java/kotlin, e.g.  I have tests running locally now and will push as soon as they pass here.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r518370564", "createdAt": "2020-11-05T21:16:26Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/hibernate-orm-panache-common/runtime/src/main/java/io/quarkus/hibernate/orm/panache/Panache.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.hibernate.orm.panache;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+import javax.transaction.TransactionManager;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.hibernate.orm.PersistenceUnit;\n+import io.quarkus.hibernate.orm.runtime.PersistenceUnitUtil;\n+\n+/**\n+ * Utility class for Panache.\n+ *\n+ * @author St\u00e9phane \u00c9pardaud\n+ */\n+public class Panache {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1Njk3Mg=="}, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM4ODAxMQ==", "bodyText": "everything seems to be passing now.  I've done a little bit of pom clean up where we had redundant deps.  it helped me to better track where the changes needed to be made to resolve some of the envers bits.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r518388011", "createdAt": "2020-11-05T21:45:16Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/hibernate-orm-panache-common/runtime/src/main/java/io/quarkus/hibernate/orm/panache/Panache.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.hibernate.orm.panache;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+import javax.transaction.TransactionManager;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.hibernate.orm.PersistenceUnit;\n+import io.quarkus.hibernate.orm.runtime.PersistenceUnitUtil;\n+\n+/**\n+ * Utility class for Panache.\n+ *\n+ * @author St\u00e9phane \u00c9pardaud\n+ */\n+public class Panache {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1Njk3Mg=="}, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNzA0MDc1OnYy", "diffSide": "LEFT", "path": "extensions/panache/hibernate-reactive-panache/runtime/src/main/java/io/quarkus/hibernate/reactive/panache/Panache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDo1MzowM1rOHoKNsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDo1MzowM1rOHoKNsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg3MjQzNQ==", "bodyText": "Again, this is public API, you can't remove that.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r511872435", "createdAt": "2020-10-26T10:53:03Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-reactive-panache/runtime/src/main/java/io/quarkus/hibernate/reactive/panache/Panache.java", "diffHunk": "@@ -38,36 +36,4 @@\n         return getSession().withTransaction(t -> work.get());\n     }\n \n-    /**\n-     * Executes a database update operation and return the number of rows operated on.\n-     * \n-     * @param query a normal HQL query\n-     * @param params optional list of indexed parameters\n-     * @return the number of rows operated on.\n-     */\n-    public static Uni<Integer> executeUpdate(String query, Object... params) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNzUxODgyOnYy", "diffSide": "RIGHT", "path": "extensions/panache/panache-common/deployment/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMzoxMDo0NlrOHoOuug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMzoxMDo0NlrOHoOuug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk0NjQyNg==", "bodyText": "I don't think we want to make every Java Panache extension depend on Kotlin.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r511946426", "createdAt": "2020-10-26T13:10:46Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-common/deployment/pom.xml", "diffHunk": "@@ -33,6 +33,10 @@\n             <groupId>org.ow2.asm</groupId>\n             <artifactId>asm</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>org.jetbrains.kotlin</groupId>\n+            <artifactId>kotlin-stdlib-jdk8</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODMzOTIyOnYy", "diffSide": "RIGHT", "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/visitors/PanacheEntityClassVisitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjowMDowNFrOHoWnGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjowMDowNFrOHoWnGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA3NTU0NA==", "bodyText": "We have two elements in typeArguments right? And we just put them in right above, so this stream is pretty weird, so is the block below.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r512075544", "createdAt": "2020-10-26T16:00:04Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/visitors/PanacheEntityClassVisitor.java", "diffHunk": "@@ -145,58 +185,122 @@ public void visitEnd() {\n         super.visitEnd();\n     }\n \n+    protected void discoverTypeParameters(ClassInfo classInfo, IndexView indexView, TypeBundle types, ByteCodeType baseType) {\n+        List<ByteCodeType> foundTypeArguments = recursivelyFindEntityTypeArguments(indexView,\n+                classInfo.name(), baseType.dotName());\n+\n+        ByteCodeType entityType = (foundTypeArguments.size() > 0) ? foundTypeArguments.get(0) : OBJECT;\n+        ByteCodeType idType = (foundTypeArguments.size() > 1) ? foundTypeArguments.get(1) : OBJECT;\n+\n+        typeArguments.put(\"Entity\", entityType);\n+        typeArguments.put(\"Id\", idType);\n+        typeArguments.keySet().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODM0NTUwOnYy", "diffSide": "RIGHT", "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/visitors/PanacheEntityClassVisitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjowMToyMlrOHoWrBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjowMToyMlrOHoWrBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA3NjU0OA==", "bodyText": "name1?", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r512076548", "createdAt": "2020-10-26T16:01:22Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/visitors/PanacheEntityClassVisitor.java", "diffHunk": "@@ -145,58 +185,122 @@ public void visitEnd() {\n         super.visitEnd();\n     }\n \n+    protected void discoverTypeParameters(ClassInfo classInfo, IndexView indexView, TypeBundle types, ByteCodeType baseType) {\n+        List<ByteCodeType> foundTypeArguments = recursivelyFindEntityTypeArguments(indexView,\n+                classInfo.name(), baseType.dotName());\n+\n+        ByteCodeType entityType = (foundTypeArguments.size() > 0) ? foundTypeArguments.get(0) : OBJECT;\n+        ByteCodeType idType = (foundTypeArguments.size() > 1) ? foundTypeArguments.get(1) : OBJECT;\n+\n+        typeArguments.put(\"Entity\", entityType);\n+        typeArguments.put(\"Id\", idType);\n+        typeArguments.keySet().stream()\n+                .filter(k -> !k.equals(\"Id\"))\n+                .forEach(k -> erasures.put(k, OBJECT.descriptor()));\n+        try {\n+            ByteCodeType entity = typeArguments.get(\"Entity\");\n+            if (entity != null) {\n+                erasures.put(entity.dotName().toString(), entity.descriptor());\n+            }\n+            erasures.put(types.queryType().dotName().toString(), OBJECT.descriptor());\n+            erasures.put(types.updateType().dotName().toString(), OBJECT.descriptor());\n+        } catch (UnsupportedOperationException ignored) {\n+        }\n+    }\n+\n     protected void generateMethod(MethodInfo method, AnnotationValue targetReturnTypeErased) {\n-        String descriptor = AsmUtil.getDescriptor(method, name -> null);\n-        String signature = AsmUtil.getSignature(method, name -> null);\n         List<org.jboss.jandex.Type> parameters = method.parameters();\n-        String castTo = null;\n-        if (targetReturnTypeErased != null && targetReturnTypeErased.asBoolean()) {\n-            castTo = method.returnType().name().toString('/');\n-        }\n \n         MethodVisitor mv = super.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC | Opcodes.ACC_SYNTHETIC,\n                 method.name(),\n-                descriptor,\n-                signature,\n+                AsmUtil.getDescriptor(method, name -> null),\n+                AsmUtil.getSignature(method, name1 -> null),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODM2ODM3OnYy", "diffSide": "RIGHT", "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/visitors/PanacheEntityClassVisitor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjowNjoyOVrOHoW5dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMzo1OTozN1rOHo9rKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4MDI0Nw==", "bodyText": "Are you sure a primitive maps to the Object descriptor?", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r512080247", "createdAt": "2020-10-26T16:06:29Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/visitors/PanacheEntityClassVisitor.java", "diffHunk": "@@ -145,58 +185,122 @@ public void visitEnd() {\n         super.visitEnd();\n     }\n \n+    protected void discoverTypeParameters(ClassInfo classInfo, IndexView indexView, TypeBundle types, ByteCodeType baseType) {\n+        List<ByteCodeType> foundTypeArguments = recursivelyFindEntityTypeArguments(indexView,\n+                classInfo.name(), baseType.dotName());\n+\n+        ByteCodeType entityType = (foundTypeArguments.size() > 0) ? foundTypeArguments.get(0) : OBJECT;\n+        ByteCodeType idType = (foundTypeArguments.size() > 1) ? foundTypeArguments.get(1) : OBJECT;\n+\n+        typeArguments.put(\"Entity\", entityType);\n+        typeArguments.put(\"Id\", idType);\n+        typeArguments.keySet().stream()\n+                .filter(k -> !k.equals(\"Id\"))\n+                .forEach(k -> erasures.put(k, OBJECT.descriptor()));\n+        try {\n+            ByteCodeType entity = typeArguments.get(\"Entity\");\n+            if (entity != null) {\n+                erasures.put(entity.dotName().toString(), entity.descriptor());\n+            }\n+            erasures.put(types.queryType().dotName().toString(), OBJECT.descriptor());\n+            erasures.put(types.updateType().dotName().toString(), OBJECT.descriptor());\n+        } catch (UnsupportedOperationException ignored) {\n+        }\n+    }\n+\n     protected void generateMethod(MethodInfo method, AnnotationValue targetReturnTypeErased) {\n-        String descriptor = AsmUtil.getDescriptor(method, name -> null);\n-        String signature = AsmUtil.getSignature(method, name -> null);\n         List<org.jboss.jandex.Type> parameters = method.parameters();\n-        String castTo = null;\n-        if (targetReturnTypeErased != null && targetReturnTypeErased.asBoolean()) {\n-            castTo = method.returnType().name().toString('/');\n-        }\n \n         MethodVisitor mv = super.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC | Opcodes.ACC_SYNTHETIC,\n                 method.name(),\n-                descriptor,\n-                signature,\n+                AsmUtil.getDescriptor(method, name -> null),\n+                AsmUtil.getSignature(method, name1 -> null),\n                 null);\n         AsmUtil.copyParameterNames(mv, method);\n         mv.visitCode();\n         for (PanacheMethodCustomizer customizer : methodCustomizers) {\n             customizer.customize(thisClass, method, mv);\n         }\n-        // inject model\n+        loadOperations(mv);\n+        loadArguments(mv, parameters);\n+        invokeOperations(mv, method);\n+        mv.visitMaxs(0, 0);\n+        mv.visitEnd();\n+    }\n+\n+    private void loadOperations(MethodVisitor mv) {\n+        mv.visitFieldInsn(Opcodes.GETSTATIC, typeBundle.operations().internalName(), \"INSTANCE\",\n+                typeBundle.operations().descriptor());\n+    }\n+\n+    private void loadArguments(MethodVisitor mv, List<org.jboss.jandex.Type> parameters) {\n+        // inject Class\n         injectModel(mv);\n         for (int i = 0; i < parameters.size(); i++) {\n             mv.visitIntInsn(Opcodes.ALOAD, i);\n         }\n-        // inject Class\n-        String forwardingDescriptor = \"(\" + getModelDescriptor() + descriptor.substring(1);\n-        if (castTo != null) {\n-            // return type is erased to Object\n-            int lastParen = forwardingDescriptor.lastIndexOf(')');\n-            forwardingDescriptor = forwardingDescriptor.substring(0, lastParen + 1) + \"Ljava/lang/Object;\";\n-        }\n-        invokeOperation(method, mv, forwardingDescriptor);\n-        if (castTo != null)\n-            mv.visitTypeInsn(Opcodes.CHECKCAST, castTo);\n-        String returnTypeDescriptor = descriptor.substring(descriptor.lastIndexOf(\")\") + 1);\n-        mv.visitInsn(AsmUtil.getReturnInstruction(returnTypeDescriptor));\n-        mv.visitMaxs(0, 0);\n-        mv.visitEnd();\n     }\n \n-    protected void invokeOperation(MethodInfo method, MethodVisitor mv, String forwardingDescriptor) {\n-        mv.visitMethodInsn(Opcodes.INVOKESTATIC,\n-                getPanacheOperationsInternalName(),\n-                method.name(),\n-                forwardingDescriptor, false);\n+    private void invokeOperations(MethodVisitor mv, MethodInfo method) {\n+        String operationDescriptor;\n+\n+        StringJoiner joiner = new StringJoiner(\"\", \"(\", \")\");\n+        joiner.add(CLASS.descriptor());\n+        descriptors(method, joiner);\n+\n+        org.jboss.jandex.Type returnType = method.returnType();\n+        String descriptor = getDescriptor(returnType, argMapper);\n+        String key = returnType.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE\n+                ? returnType.asTypeVariable().identifier()\n+                : returnType.name().toString();\n+        operationDescriptor = joiner + erasures.getOrDefault(key, descriptor);\n+\n+        mv.visitMethodInsn(INVOKEVIRTUAL, typeBundle.operations().internalName(), method.name(),\n+                operationDescriptor, false);\n+        if (returnType.kind() != org.jboss.jandex.Type.Kind.PRIMITIVE) {\n+            String cast;\n+            if (returnType.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE) {\n+                TypeVariable typeVariable = returnType.asTypeVariable();\n+                ByteCodeType type = typeArguments.get(typeVariable.identifier());\n+                if (type == null && typeVariable.bounds().size() != 1) {\n+                    type = OBJECT;\n+                } else {\n+                    type = new ByteCodeType(typeVariable.bounds().get(0));\n+                }\n+                cast = type.internalName();\n+            } else {\n+                cast = returnType.name().toString().replace('.', '/');\n+            }\n+            mv.visitTypeInsn(CHECKCAST, cast);\n+        }\n+        mv.visitInsn(AsmUtil.getReturnInstruction(returnType));\n     }\n \n-    protected String getModelDescriptor() {\n-        return \"Ljava/lang/Class;\";\n+    private void descriptors(MethodInfo method, StringJoiner joiner) {\n+        for (org.jboss.jandex.Type parameter : method.parameters()) {\n+            if (parameter.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE\n+                    || method.name().endsWith(\"ById\")\n+                            && parameter.name().equals(typeArguments.get(\"Id\").dotName())) {\n+                joiner.add(OBJECT.descriptor());\n+            } else {\n+                joiner.add(mapType(parameter));\n+            }\n+        }\n     }\n \n-    protected abstract String getPanacheOperationsInternalName();\n+    private String mapType(org.jboss.jandex.Type parameter) {\n+        String descriptor;\n+        switch (parameter.kind()) {\n+            case PRIMITIVE:\n+            case TYPE_VARIABLE:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5MjExNg==", "bodyText": "I'll double check the context but reasonably comfortable with it since everything works.  but it wouldn't hurt to double check.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r512192116", "createdAt": "2020-10-26T18:48:42Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/visitors/PanacheEntityClassVisitor.java", "diffHunk": "@@ -145,58 +185,122 @@ public void visitEnd() {\n         super.visitEnd();\n     }\n \n+    protected void discoverTypeParameters(ClassInfo classInfo, IndexView indexView, TypeBundle types, ByteCodeType baseType) {\n+        List<ByteCodeType> foundTypeArguments = recursivelyFindEntityTypeArguments(indexView,\n+                classInfo.name(), baseType.dotName());\n+\n+        ByteCodeType entityType = (foundTypeArguments.size() > 0) ? foundTypeArguments.get(0) : OBJECT;\n+        ByteCodeType idType = (foundTypeArguments.size() > 1) ? foundTypeArguments.get(1) : OBJECT;\n+\n+        typeArguments.put(\"Entity\", entityType);\n+        typeArguments.put(\"Id\", idType);\n+        typeArguments.keySet().stream()\n+                .filter(k -> !k.equals(\"Id\"))\n+                .forEach(k -> erasures.put(k, OBJECT.descriptor()));\n+        try {\n+            ByteCodeType entity = typeArguments.get(\"Entity\");\n+            if (entity != null) {\n+                erasures.put(entity.dotName().toString(), entity.descriptor());\n+            }\n+            erasures.put(types.queryType().dotName().toString(), OBJECT.descriptor());\n+            erasures.put(types.updateType().dotName().toString(), OBJECT.descriptor());\n+        } catch (UnsupportedOperationException ignored) {\n+        }\n+    }\n+\n     protected void generateMethod(MethodInfo method, AnnotationValue targetReturnTypeErased) {\n-        String descriptor = AsmUtil.getDescriptor(method, name -> null);\n-        String signature = AsmUtil.getSignature(method, name -> null);\n         List<org.jboss.jandex.Type> parameters = method.parameters();\n-        String castTo = null;\n-        if (targetReturnTypeErased != null && targetReturnTypeErased.asBoolean()) {\n-            castTo = method.returnType().name().toString('/');\n-        }\n \n         MethodVisitor mv = super.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC | Opcodes.ACC_SYNTHETIC,\n                 method.name(),\n-                descriptor,\n-                signature,\n+                AsmUtil.getDescriptor(method, name -> null),\n+                AsmUtil.getSignature(method, name1 -> null),\n                 null);\n         AsmUtil.copyParameterNames(mv, method);\n         mv.visitCode();\n         for (PanacheMethodCustomizer customizer : methodCustomizers) {\n             customizer.customize(thisClass, method, mv);\n         }\n-        // inject model\n+        loadOperations(mv);\n+        loadArguments(mv, parameters);\n+        invokeOperations(mv, method);\n+        mv.visitMaxs(0, 0);\n+        mv.visitEnd();\n+    }\n+\n+    private void loadOperations(MethodVisitor mv) {\n+        mv.visitFieldInsn(Opcodes.GETSTATIC, typeBundle.operations().internalName(), \"INSTANCE\",\n+                typeBundle.operations().descriptor());\n+    }\n+\n+    private void loadArguments(MethodVisitor mv, List<org.jboss.jandex.Type> parameters) {\n+        // inject Class\n         injectModel(mv);\n         for (int i = 0; i < parameters.size(); i++) {\n             mv.visitIntInsn(Opcodes.ALOAD, i);\n         }\n-        // inject Class\n-        String forwardingDescriptor = \"(\" + getModelDescriptor() + descriptor.substring(1);\n-        if (castTo != null) {\n-            // return type is erased to Object\n-            int lastParen = forwardingDescriptor.lastIndexOf(')');\n-            forwardingDescriptor = forwardingDescriptor.substring(0, lastParen + 1) + \"Ljava/lang/Object;\";\n-        }\n-        invokeOperation(method, mv, forwardingDescriptor);\n-        if (castTo != null)\n-            mv.visitTypeInsn(Opcodes.CHECKCAST, castTo);\n-        String returnTypeDescriptor = descriptor.substring(descriptor.lastIndexOf(\")\") + 1);\n-        mv.visitInsn(AsmUtil.getReturnInstruction(returnTypeDescriptor));\n-        mv.visitMaxs(0, 0);\n-        mv.visitEnd();\n     }\n \n-    protected void invokeOperation(MethodInfo method, MethodVisitor mv, String forwardingDescriptor) {\n-        mv.visitMethodInsn(Opcodes.INVOKESTATIC,\n-                getPanacheOperationsInternalName(),\n-                method.name(),\n-                forwardingDescriptor, false);\n+    private void invokeOperations(MethodVisitor mv, MethodInfo method) {\n+        String operationDescriptor;\n+\n+        StringJoiner joiner = new StringJoiner(\"\", \"(\", \")\");\n+        joiner.add(CLASS.descriptor());\n+        descriptors(method, joiner);\n+\n+        org.jboss.jandex.Type returnType = method.returnType();\n+        String descriptor = getDescriptor(returnType, argMapper);\n+        String key = returnType.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE\n+                ? returnType.asTypeVariable().identifier()\n+                : returnType.name().toString();\n+        operationDescriptor = joiner + erasures.getOrDefault(key, descriptor);\n+\n+        mv.visitMethodInsn(INVOKEVIRTUAL, typeBundle.operations().internalName(), method.name(),\n+                operationDescriptor, false);\n+        if (returnType.kind() != org.jboss.jandex.Type.Kind.PRIMITIVE) {\n+            String cast;\n+            if (returnType.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE) {\n+                TypeVariable typeVariable = returnType.asTypeVariable();\n+                ByteCodeType type = typeArguments.get(typeVariable.identifier());\n+                if (type == null && typeVariable.bounds().size() != 1) {\n+                    type = OBJECT;\n+                } else {\n+                    type = new ByteCodeType(typeVariable.bounds().get(0));\n+                }\n+                cast = type.internalName();\n+            } else {\n+                cast = returnType.name().toString().replace('.', '/');\n+            }\n+            mv.visitTypeInsn(CHECKCAST, cast);\n+        }\n+        mv.visitInsn(AsmUtil.getReturnInstruction(returnType));\n     }\n \n-    protected String getModelDescriptor() {\n-        return \"Ljava/lang/Class;\";\n+    private void descriptors(MethodInfo method, StringJoiner joiner) {\n+        for (org.jboss.jandex.Type parameter : method.parameters()) {\n+            if (parameter.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE\n+                    || method.name().endsWith(\"ById\")\n+                            && parameter.name().equals(typeArguments.get(\"Id\").dotName())) {\n+                joiner.add(OBJECT.descriptor());\n+            } else {\n+                joiner.add(mapType(parameter));\n+            }\n+        }\n     }\n \n-    protected abstract String getPanacheOperationsInternalName();\n+    private String mapType(org.jboss.jandex.Type parameter) {\n+        String descriptor;\n+        switch (parameter.kind()) {\n+            case PRIMITIVE:\n+            case TYPE_VARIABLE:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4MDI0Nw=="}, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcxNTU2Mw==", "bodyText": "Yes.  In this case this is specific to Kotlin and how nullability is implemented.  An ID type might be Int but it's represented in the byte code as if it were an int in java.  so when mapping the entity api to the operations api, we need to map those primitive bytecode values to Object to resolve the generic method signature for the operation to invoke.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r512715563", "createdAt": "2020-10-27T13:59:37Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/visitors/PanacheEntityClassVisitor.java", "diffHunk": "@@ -145,58 +185,122 @@ public void visitEnd() {\n         super.visitEnd();\n     }\n \n+    protected void discoverTypeParameters(ClassInfo classInfo, IndexView indexView, TypeBundle types, ByteCodeType baseType) {\n+        List<ByteCodeType> foundTypeArguments = recursivelyFindEntityTypeArguments(indexView,\n+                classInfo.name(), baseType.dotName());\n+\n+        ByteCodeType entityType = (foundTypeArguments.size() > 0) ? foundTypeArguments.get(0) : OBJECT;\n+        ByteCodeType idType = (foundTypeArguments.size() > 1) ? foundTypeArguments.get(1) : OBJECT;\n+\n+        typeArguments.put(\"Entity\", entityType);\n+        typeArguments.put(\"Id\", idType);\n+        typeArguments.keySet().stream()\n+                .filter(k -> !k.equals(\"Id\"))\n+                .forEach(k -> erasures.put(k, OBJECT.descriptor()));\n+        try {\n+            ByteCodeType entity = typeArguments.get(\"Entity\");\n+            if (entity != null) {\n+                erasures.put(entity.dotName().toString(), entity.descriptor());\n+            }\n+            erasures.put(types.queryType().dotName().toString(), OBJECT.descriptor());\n+            erasures.put(types.updateType().dotName().toString(), OBJECT.descriptor());\n+        } catch (UnsupportedOperationException ignored) {\n+        }\n+    }\n+\n     protected void generateMethod(MethodInfo method, AnnotationValue targetReturnTypeErased) {\n-        String descriptor = AsmUtil.getDescriptor(method, name -> null);\n-        String signature = AsmUtil.getSignature(method, name -> null);\n         List<org.jboss.jandex.Type> parameters = method.parameters();\n-        String castTo = null;\n-        if (targetReturnTypeErased != null && targetReturnTypeErased.asBoolean()) {\n-            castTo = method.returnType().name().toString('/');\n-        }\n \n         MethodVisitor mv = super.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC | Opcodes.ACC_SYNTHETIC,\n                 method.name(),\n-                descriptor,\n-                signature,\n+                AsmUtil.getDescriptor(method, name -> null),\n+                AsmUtil.getSignature(method, name1 -> null),\n                 null);\n         AsmUtil.copyParameterNames(mv, method);\n         mv.visitCode();\n         for (PanacheMethodCustomizer customizer : methodCustomizers) {\n             customizer.customize(thisClass, method, mv);\n         }\n-        // inject model\n+        loadOperations(mv);\n+        loadArguments(mv, parameters);\n+        invokeOperations(mv, method);\n+        mv.visitMaxs(0, 0);\n+        mv.visitEnd();\n+    }\n+\n+    private void loadOperations(MethodVisitor mv) {\n+        mv.visitFieldInsn(Opcodes.GETSTATIC, typeBundle.operations().internalName(), \"INSTANCE\",\n+                typeBundle.operations().descriptor());\n+    }\n+\n+    private void loadArguments(MethodVisitor mv, List<org.jboss.jandex.Type> parameters) {\n+        // inject Class\n         injectModel(mv);\n         for (int i = 0; i < parameters.size(); i++) {\n             mv.visitIntInsn(Opcodes.ALOAD, i);\n         }\n-        // inject Class\n-        String forwardingDescriptor = \"(\" + getModelDescriptor() + descriptor.substring(1);\n-        if (castTo != null) {\n-            // return type is erased to Object\n-            int lastParen = forwardingDescriptor.lastIndexOf(')');\n-            forwardingDescriptor = forwardingDescriptor.substring(0, lastParen + 1) + \"Ljava/lang/Object;\";\n-        }\n-        invokeOperation(method, mv, forwardingDescriptor);\n-        if (castTo != null)\n-            mv.visitTypeInsn(Opcodes.CHECKCAST, castTo);\n-        String returnTypeDescriptor = descriptor.substring(descriptor.lastIndexOf(\")\") + 1);\n-        mv.visitInsn(AsmUtil.getReturnInstruction(returnTypeDescriptor));\n-        mv.visitMaxs(0, 0);\n-        mv.visitEnd();\n     }\n \n-    protected void invokeOperation(MethodInfo method, MethodVisitor mv, String forwardingDescriptor) {\n-        mv.visitMethodInsn(Opcodes.INVOKESTATIC,\n-                getPanacheOperationsInternalName(),\n-                method.name(),\n-                forwardingDescriptor, false);\n+    private void invokeOperations(MethodVisitor mv, MethodInfo method) {\n+        String operationDescriptor;\n+\n+        StringJoiner joiner = new StringJoiner(\"\", \"(\", \")\");\n+        joiner.add(CLASS.descriptor());\n+        descriptors(method, joiner);\n+\n+        org.jboss.jandex.Type returnType = method.returnType();\n+        String descriptor = getDescriptor(returnType, argMapper);\n+        String key = returnType.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE\n+                ? returnType.asTypeVariable().identifier()\n+                : returnType.name().toString();\n+        operationDescriptor = joiner + erasures.getOrDefault(key, descriptor);\n+\n+        mv.visitMethodInsn(INVOKEVIRTUAL, typeBundle.operations().internalName(), method.name(),\n+                operationDescriptor, false);\n+        if (returnType.kind() != org.jboss.jandex.Type.Kind.PRIMITIVE) {\n+            String cast;\n+            if (returnType.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE) {\n+                TypeVariable typeVariable = returnType.asTypeVariable();\n+                ByteCodeType type = typeArguments.get(typeVariable.identifier());\n+                if (type == null && typeVariable.bounds().size() != 1) {\n+                    type = OBJECT;\n+                } else {\n+                    type = new ByteCodeType(typeVariable.bounds().get(0));\n+                }\n+                cast = type.internalName();\n+            } else {\n+                cast = returnType.name().toString().replace('.', '/');\n+            }\n+            mv.visitTypeInsn(CHECKCAST, cast);\n+        }\n+        mv.visitInsn(AsmUtil.getReturnInstruction(returnType));\n     }\n \n-    protected String getModelDescriptor() {\n-        return \"Ljava/lang/Class;\";\n+    private void descriptors(MethodInfo method, StringJoiner joiner) {\n+        for (org.jboss.jandex.Type parameter : method.parameters()) {\n+            if (parameter.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE\n+                    || method.name().endsWith(\"ById\")\n+                            && parameter.name().equals(typeArguments.get(\"Id\").dotName())) {\n+                joiner.add(OBJECT.descriptor());\n+            } else {\n+                joiner.add(mapType(parameter));\n+            }\n+        }\n     }\n \n-    protected abstract String getPanacheOperationsInternalName();\n+    private String mapType(org.jboss.jandex.Type parameter) {\n+        String descriptor;\n+        switch (parameter.kind()) {\n+            case PRIMITIVE:\n+            case TYPE_VARIABLE:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4MDI0Nw=="}, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 249}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODM3MjIyOnYy", "diffSide": "RIGHT", "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/visitors/PanacheEntityClassVisitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjowNzoyMVrOHoW73Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDowMDo0OFrOHo9vJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4MDg2MQ==", "bodyText": "That looks like a weird special case when we have the list of typeArguments", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r512080861", "createdAt": "2020-10-26T16:07:21Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/visitors/PanacheEntityClassVisitor.java", "diffHunk": "@@ -145,58 +185,122 @@ public void visitEnd() {\n         super.visitEnd();\n     }\n \n+    protected void discoverTypeParameters(ClassInfo classInfo, IndexView indexView, TypeBundle types, ByteCodeType baseType) {\n+        List<ByteCodeType> foundTypeArguments = recursivelyFindEntityTypeArguments(indexView,\n+                classInfo.name(), baseType.dotName());\n+\n+        ByteCodeType entityType = (foundTypeArguments.size() > 0) ? foundTypeArguments.get(0) : OBJECT;\n+        ByteCodeType idType = (foundTypeArguments.size() > 1) ? foundTypeArguments.get(1) : OBJECT;\n+\n+        typeArguments.put(\"Entity\", entityType);\n+        typeArguments.put(\"Id\", idType);\n+        typeArguments.keySet().stream()\n+                .filter(k -> !k.equals(\"Id\"))\n+                .forEach(k -> erasures.put(k, OBJECT.descriptor()));\n+        try {\n+            ByteCodeType entity = typeArguments.get(\"Entity\");\n+            if (entity != null) {\n+                erasures.put(entity.dotName().toString(), entity.descriptor());\n+            }\n+            erasures.put(types.queryType().dotName().toString(), OBJECT.descriptor());\n+            erasures.put(types.updateType().dotName().toString(), OBJECT.descriptor());\n+        } catch (UnsupportedOperationException ignored) {\n+        }\n+    }\n+\n     protected void generateMethod(MethodInfo method, AnnotationValue targetReturnTypeErased) {\n-        String descriptor = AsmUtil.getDescriptor(method, name -> null);\n-        String signature = AsmUtil.getSignature(method, name -> null);\n         List<org.jboss.jandex.Type> parameters = method.parameters();\n-        String castTo = null;\n-        if (targetReturnTypeErased != null && targetReturnTypeErased.asBoolean()) {\n-            castTo = method.returnType().name().toString('/');\n-        }\n \n         MethodVisitor mv = super.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC | Opcodes.ACC_SYNTHETIC,\n                 method.name(),\n-                descriptor,\n-                signature,\n+                AsmUtil.getDescriptor(method, name -> null),\n+                AsmUtil.getSignature(method, name1 -> null),\n                 null);\n         AsmUtil.copyParameterNames(mv, method);\n         mv.visitCode();\n         for (PanacheMethodCustomizer customizer : methodCustomizers) {\n             customizer.customize(thisClass, method, mv);\n         }\n-        // inject model\n+        loadOperations(mv);\n+        loadArguments(mv, parameters);\n+        invokeOperations(mv, method);\n+        mv.visitMaxs(0, 0);\n+        mv.visitEnd();\n+    }\n+\n+    private void loadOperations(MethodVisitor mv) {\n+        mv.visitFieldInsn(Opcodes.GETSTATIC, typeBundle.operations().internalName(), \"INSTANCE\",\n+                typeBundle.operations().descriptor());\n+    }\n+\n+    private void loadArguments(MethodVisitor mv, List<org.jboss.jandex.Type> parameters) {\n+        // inject Class\n         injectModel(mv);\n         for (int i = 0; i < parameters.size(); i++) {\n             mv.visitIntInsn(Opcodes.ALOAD, i);\n         }\n-        // inject Class\n-        String forwardingDescriptor = \"(\" + getModelDescriptor() + descriptor.substring(1);\n-        if (castTo != null) {\n-            // return type is erased to Object\n-            int lastParen = forwardingDescriptor.lastIndexOf(')');\n-            forwardingDescriptor = forwardingDescriptor.substring(0, lastParen + 1) + \"Ljava/lang/Object;\";\n-        }\n-        invokeOperation(method, mv, forwardingDescriptor);\n-        if (castTo != null)\n-            mv.visitTypeInsn(Opcodes.CHECKCAST, castTo);\n-        String returnTypeDescriptor = descriptor.substring(descriptor.lastIndexOf(\")\") + 1);\n-        mv.visitInsn(AsmUtil.getReturnInstruction(returnTypeDescriptor));\n-        mv.visitMaxs(0, 0);\n-        mv.visitEnd();\n     }\n \n-    protected void invokeOperation(MethodInfo method, MethodVisitor mv, String forwardingDescriptor) {\n-        mv.visitMethodInsn(Opcodes.INVOKESTATIC,\n-                getPanacheOperationsInternalName(),\n-                method.name(),\n-                forwardingDescriptor, false);\n+    private void invokeOperations(MethodVisitor mv, MethodInfo method) {\n+        String operationDescriptor;\n+\n+        StringJoiner joiner = new StringJoiner(\"\", \"(\", \")\");\n+        joiner.add(CLASS.descriptor());\n+        descriptors(method, joiner);\n+\n+        org.jboss.jandex.Type returnType = method.returnType();\n+        String descriptor = getDescriptor(returnType, argMapper);\n+        String key = returnType.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE\n+                ? returnType.asTypeVariable().identifier()\n+                : returnType.name().toString();\n+        operationDescriptor = joiner + erasures.getOrDefault(key, descriptor);\n+\n+        mv.visitMethodInsn(INVOKEVIRTUAL, typeBundle.operations().internalName(), method.name(),\n+                operationDescriptor, false);\n+        if (returnType.kind() != org.jboss.jandex.Type.Kind.PRIMITIVE) {\n+            String cast;\n+            if (returnType.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE) {\n+                TypeVariable typeVariable = returnType.asTypeVariable();\n+                ByteCodeType type = typeArguments.get(typeVariable.identifier());\n+                if (type == null && typeVariable.bounds().size() != 1) {\n+                    type = OBJECT;\n+                } else {\n+                    type = new ByteCodeType(typeVariable.bounds().get(0));\n+                }\n+                cast = type.internalName();\n+            } else {\n+                cast = returnType.name().toString().replace('.', '/');\n+            }\n+            mv.visitTypeInsn(CHECKCAST, cast);\n+        }\n+        mv.visitInsn(AsmUtil.getReturnInstruction(returnType));\n     }\n \n-    protected String getModelDescriptor() {\n-        return \"Ljava/lang/Class;\";\n+    private void descriptors(MethodInfo method, StringJoiner joiner) {\n+        for (org.jboss.jandex.Type parameter : method.parameters()) {\n+            if (parameter.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE\n+                    || method.name().endsWith(\"ById\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcxNjU4MQ==", "bodyText": "This is essentially the same case as above and how nulllables are handled for \"primitive\" types.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r512716581", "createdAt": "2020-10-27T14:00:48Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/visitors/PanacheEntityClassVisitor.java", "diffHunk": "@@ -145,58 +185,122 @@ public void visitEnd() {\n         super.visitEnd();\n     }\n \n+    protected void discoverTypeParameters(ClassInfo classInfo, IndexView indexView, TypeBundle types, ByteCodeType baseType) {\n+        List<ByteCodeType> foundTypeArguments = recursivelyFindEntityTypeArguments(indexView,\n+                classInfo.name(), baseType.dotName());\n+\n+        ByteCodeType entityType = (foundTypeArguments.size() > 0) ? foundTypeArguments.get(0) : OBJECT;\n+        ByteCodeType idType = (foundTypeArguments.size() > 1) ? foundTypeArguments.get(1) : OBJECT;\n+\n+        typeArguments.put(\"Entity\", entityType);\n+        typeArguments.put(\"Id\", idType);\n+        typeArguments.keySet().stream()\n+                .filter(k -> !k.equals(\"Id\"))\n+                .forEach(k -> erasures.put(k, OBJECT.descriptor()));\n+        try {\n+            ByteCodeType entity = typeArguments.get(\"Entity\");\n+            if (entity != null) {\n+                erasures.put(entity.dotName().toString(), entity.descriptor());\n+            }\n+            erasures.put(types.queryType().dotName().toString(), OBJECT.descriptor());\n+            erasures.put(types.updateType().dotName().toString(), OBJECT.descriptor());\n+        } catch (UnsupportedOperationException ignored) {\n+        }\n+    }\n+\n     protected void generateMethod(MethodInfo method, AnnotationValue targetReturnTypeErased) {\n-        String descriptor = AsmUtil.getDescriptor(method, name -> null);\n-        String signature = AsmUtil.getSignature(method, name -> null);\n         List<org.jboss.jandex.Type> parameters = method.parameters();\n-        String castTo = null;\n-        if (targetReturnTypeErased != null && targetReturnTypeErased.asBoolean()) {\n-            castTo = method.returnType().name().toString('/');\n-        }\n \n         MethodVisitor mv = super.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC | Opcodes.ACC_SYNTHETIC,\n                 method.name(),\n-                descriptor,\n-                signature,\n+                AsmUtil.getDescriptor(method, name -> null),\n+                AsmUtil.getSignature(method, name1 -> null),\n                 null);\n         AsmUtil.copyParameterNames(mv, method);\n         mv.visitCode();\n         for (PanacheMethodCustomizer customizer : methodCustomizers) {\n             customizer.customize(thisClass, method, mv);\n         }\n-        // inject model\n+        loadOperations(mv);\n+        loadArguments(mv, parameters);\n+        invokeOperations(mv, method);\n+        mv.visitMaxs(0, 0);\n+        mv.visitEnd();\n+    }\n+\n+    private void loadOperations(MethodVisitor mv) {\n+        mv.visitFieldInsn(Opcodes.GETSTATIC, typeBundle.operations().internalName(), \"INSTANCE\",\n+                typeBundle.operations().descriptor());\n+    }\n+\n+    private void loadArguments(MethodVisitor mv, List<org.jboss.jandex.Type> parameters) {\n+        // inject Class\n         injectModel(mv);\n         for (int i = 0; i < parameters.size(); i++) {\n             mv.visitIntInsn(Opcodes.ALOAD, i);\n         }\n-        // inject Class\n-        String forwardingDescriptor = \"(\" + getModelDescriptor() + descriptor.substring(1);\n-        if (castTo != null) {\n-            // return type is erased to Object\n-            int lastParen = forwardingDescriptor.lastIndexOf(')');\n-            forwardingDescriptor = forwardingDescriptor.substring(0, lastParen + 1) + \"Ljava/lang/Object;\";\n-        }\n-        invokeOperation(method, mv, forwardingDescriptor);\n-        if (castTo != null)\n-            mv.visitTypeInsn(Opcodes.CHECKCAST, castTo);\n-        String returnTypeDescriptor = descriptor.substring(descriptor.lastIndexOf(\")\") + 1);\n-        mv.visitInsn(AsmUtil.getReturnInstruction(returnTypeDescriptor));\n-        mv.visitMaxs(0, 0);\n-        mv.visitEnd();\n     }\n \n-    protected void invokeOperation(MethodInfo method, MethodVisitor mv, String forwardingDescriptor) {\n-        mv.visitMethodInsn(Opcodes.INVOKESTATIC,\n-                getPanacheOperationsInternalName(),\n-                method.name(),\n-                forwardingDescriptor, false);\n+    private void invokeOperations(MethodVisitor mv, MethodInfo method) {\n+        String operationDescriptor;\n+\n+        StringJoiner joiner = new StringJoiner(\"\", \"(\", \")\");\n+        joiner.add(CLASS.descriptor());\n+        descriptors(method, joiner);\n+\n+        org.jboss.jandex.Type returnType = method.returnType();\n+        String descriptor = getDescriptor(returnType, argMapper);\n+        String key = returnType.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE\n+                ? returnType.asTypeVariable().identifier()\n+                : returnType.name().toString();\n+        operationDescriptor = joiner + erasures.getOrDefault(key, descriptor);\n+\n+        mv.visitMethodInsn(INVOKEVIRTUAL, typeBundle.operations().internalName(), method.name(),\n+                operationDescriptor, false);\n+        if (returnType.kind() != org.jboss.jandex.Type.Kind.PRIMITIVE) {\n+            String cast;\n+            if (returnType.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE) {\n+                TypeVariable typeVariable = returnType.asTypeVariable();\n+                ByteCodeType type = typeArguments.get(typeVariable.identifier());\n+                if (type == null && typeVariable.bounds().size() != 1) {\n+                    type = OBJECT;\n+                } else {\n+                    type = new ByteCodeType(typeVariable.bounds().get(0));\n+                }\n+                cast = type.internalName();\n+            } else {\n+                cast = returnType.name().toString().replace('.', '/');\n+            }\n+            mv.visitTypeInsn(CHECKCAST, cast);\n+        }\n+        mv.visitInsn(AsmUtil.getReturnInstruction(returnType));\n     }\n \n-    protected String getModelDescriptor() {\n-        return \"Ljava/lang/Class;\";\n+    private void descriptors(MethodInfo method, StringJoiner joiner) {\n+        for (org.jboss.jandex.Type parameter : method.parameters()) {\n+            if (parameter.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE\n+                    || method.name().endsWith(\"ById\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4MDg2MQ=="}, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 235}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODM3NjQyOnYy", "diffSide": "RIGHT", "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/visitors/PanacheRepositoryClassVisitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjowODoxOFrOHoW-gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODo0OTo0MVrOHodwog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4MTUzOQ==", "bodyText": "Same remarks as for the other visitor.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r512081539", "createdAt": "2020-10-26T16:08:18Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/visitors/PanacheRepositoryClassVisitor.java", "diffHunk": "@@ -65,70 +67,65 @@ protected void injectModel(MethodVisitor mv) {\n     public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {\n         super.visit(version, access, name, signature, superName, interfaces);\n \n-        final String repositoryClassName = name.replace('/', '.');\n+        DotName baseType = typeBundle.repositoryBase().dotName();\n \n-        String[] foundTypeArguments = findEntityTypeArgumentsForPanacheRepository(indexView, repositoryClassName,\n-                getPanacheRepositoryBaseDotName());\n+        List<TypeVariable> typeVariables = indexView.getClassByName(baseType).typeParameters();\n+        entityUpperBound = !typeVariables.isEmpty()\n+                ? new ByteCodeType(typeVariables.get(0).bounds().get(0))\n+                : OBJECT;\n \n-        entityBinaryType = foundTypeArguments[0];\n-        entitySignature = \"L\" + entityBinaryType + \";\";\n-        this.entityType = Type.getType(entitySignature);\n-        idBinaryType = foundTypeArguments[1];\n-        idSignature = \"L\" + idBinaryType + \";\";\n-        Type idType = Type.getType(idSignature);\n+        discoverTypeParameters(daoClassInfo, indexView, typeBundle, typeBundle.repositoryBase());\n \n-        typeArguments.put(\"Entity\", this.entityType.getDescriptor());\n-        typeArguments.put(\"Id\", idType.getDescriptor());\n-        this.panacheRepositoryBaseClassInfo = indexView.getClassByName(getPanacheRepositoryBaseDotName());\n-    }\n+        this.entityType = typeArguments.getOrDefault(\"Entity\", OBJECT).type();\n \n-    @Override\n-    public MethodVisitor visitMethod(int access, String methodName, String descriptor, String signature,\n-            String[] exceptions) {\n-        userMethods.add(methodName + \"/\" + descriptor);\n-        return super.visitMethod(access, methodName, descriptor, signature, exceptions);\n-    }\n+        this.panacheRepositoryBaseClassInfo = indexView.getClassByName(baseType);\n \n-    public static String[] findEntityTypeArgumentsForPanacheRepository(IndexView indexView,\n-            String repositoryClassName,\n-            DotName repositoryDotName) {\n-        for (ClassInfo classInfo : indexView.getAllKnownImplementors(repositoryDotName)) {\n-            if (repositoryClassName.equals(classInfo.name().toString())) {\n-                return recursivelyFindEntityTypeArgumentsFromClass(indexView, classInfo.name(), repositoryDotName);\n-            }\n-        }\n+        argMapper = type -> {\n+            ByteCodeType byteCodeType = typeArguments.get(type);\n+            return byteCodeType != null\n+                    ? byteCodeType.descriptor()\n+                    : type;\n+        };\n \n-        return null;\n     }\n \n-    public static String[] recursivelyFindEntityTypeArgumentsFromClass(IndexView indexView, DotName clazz,\n-            DotName repositoryDotName) {\n-        if (clazz.equals(JandexUtil.DOTNAME_OBJECT)) {\n-            return null;\n+    protected void discoverTypeParameters(ClassInfo classInfo, IndexView indexView, TypeBundle types, ByteCodeType baseType) {\n+        List<ByteCodeType> foundTypeArguments = recursivelyFindEntityTypeArguments(indexView,\n+                classInfo.name(), baseType.dotName());\n+\n+        ByteCodeType entityType = (foundTypeArguments.size() > 0) ? foundTypeArguments.get(0) : OBJECT;\n+        ByteCodeType idType = (foundTypeArguments.size() > 1) ? foundTypeArguments.get(1) : OBJECT;\n+\n+        typeArguments.put(\"Entity\", entityType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5MjY3NA==", "bodyText": "I believe that stems from whether or not the ID is parameterized or not which does vary from java to kotlin and jpa to mongodb", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r512192674", "createdAt": "2020-10-26T18:49:41Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/visitors/PanacheRepositoryClassVisitor.java", "diffHunk": "@@ -65,70 +67,65 @@ protected void injectModel(MethodVisitor mv) {\n     public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {\n         super.visit(version, access, name, signature, superName, interfaces);\n \n-        final String repositoryClassName = name.replace('/', '.');\n+        DotName baseType = typeBundle.repositoryBase().dotName();\n \n-        String[] foundTypeArguments = findEntityTypeArgumentsForPanacheRepository(indexView, repositoryClassName,\n-                getPanacheRepositoryBaseDotName());\n+        List<TypeVariable> typeVariables = indexView.getClassByName(baseType).typeParameters();\n+        entityUpperBound = !typeVariables.isEmpty()\n+                ? new ByteCodeType(typeVariables.get(0).bounds().get(0))\n+                : OBJECT;\n \n-        entityBinaryType = foundTypeArguments[0];\n-        entitySignature = \"L\" + entityBinaryType + \";\";\n-        this.entityType = Type.getType(entitySignature);\n-        idBinaryType = foundTypeArguments[1];\n-        idSignature = \"L\" + idBinaryType + \";\";\n-        Type idType = Type.getType(idSignature);\n+        discoverTypeParameters(daoClassInfo, indexView, typeBundle, typeBundle.repositoryBase());\n \n-        typeArguments.put(\"Entity\", this.entityType.getDescriptor());\n-        typeArguments.put(\"Id\", idType.getDescriptor());\n-        this.panacheRepositoryBaseClassInfo = indexView.getClassByName(getPanacheRepositoryBaseDotName());\n-    }\n+        this.entityType = typeArguments.getOrDefault(\"Entity\", OBJECT).type();\n \n-    @Override\n-    public MethodVisitor visitMethod(int access, String methodName, String descriptor, String signature,\n-            String[] exceptions) {\n-        userMethods.add(methodName + \"/\" + descriptor);\n-        return super.visitMethod(access, methodName, descriptor, signature, exceptions);\n-    }\n+        this.panacheRepositoryBaseClassInfo = indexView.getClassByName(baseType);\n \n-    public static String[] findEntityTypeArgumentsForPanacheRepository(IndexView indexView,\n-            String repositoryClassName,\n-            DotName repositoryDotName) {\n-        for (ClassInfo classInfo : indexView.getAllKnownImplementors(repositoryDotName)) {\n-            if (repositoryClassName.equals(classInfo.name().toString())) {\n-                return recursivelyFindEntityTypeArgumentsFromClass(indexView, classInfo.name(), repositoryDotName);\n-            }\n-        }\n+        argMapper = type -> {\n+            ByteCodeType byteCodeType = typeArguments.get(type);\n+            return byteCodeType != null\n+                    ? byteCodeType.descriptor()\n+                    : type;\n+        };\n \n-        return null;\n     }\n \n-    public static String[] recursivelyFindEntityTypeArgumentsFromClass(IndexView indexView, DotName clazz,\n-            DotName repositoryDotName) {\n-        if (clazz.equals(JandexUtil.DOTNAME_OBJECT)) {\n-            return null;\n+    protected void discoverTypeParameters(ClassInfo classInfo, IndexView indexView, TypeBundle types, ByteCodeType baseType) {\n+        List<ByteCodeType> foundTypeArguments = recursivelyFindEntityTypeArguments(indexView,\n+                classInfo.name(), baseType.dotName());\n+\n+        ByteCodeType entityType = (foundTypeArguments.size() > 0) ? foundTypeArguments.get(0) : OBJECT;\n+        ByteCodeType idType = (foundTypeArguments.size() > 1) ? foundTypeArguments.get(1) : OBJECT;\n+\n+        typeArguments.put(\"Entity\", entityType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4MTUzOQ=="}, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODQyNjQyOnYy", "diffSide": "RIGHT", "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/visitors/PanacheRepositoryClassVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjoxOTowOFrOHoXcsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjoxOTowOFrOHoXcsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4OTI2NQ==", "bodyText": "Same remark as for the other visitor.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r512089265", "createdAt": "2020-10-26T16:19:08Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/visitors/PanacheRepositoryClassVisitor.java", "diffHunk": "@@ -202,53 +199,90 @@ protected void generateJvmBridge(MethodInfo method) {\n \n     }\n \n-    protected void generateModelBridge(MethodInfo method, AnnotationValue targetReturnTypeErased) {\n-        String descriptor = AsmUtil.getDescriptor(method, name -> typeArguments.get(name));\n+    protected void generateModelBridge(MethodInfo method) {\n         // JpaOperations erases the Id type to Object\n-        String descriptorForJpaOperations = AsmUtil.getDescriptor(method,\n-                name -> name.equals(\"Entity\") ? entitySignature : null);\n-        String signature = AsmUtil.getSignature(method, name -> typeArguments.get(name));\n         List<org.jboss.jandex.Type> parameters = method.parameters();\n \n-        String castTo = null;\n-        if (targetReturnTypeErased != null && targetReturnTypeErased.asBoolean()) {\n-            org.jboss.jandex.Type type = method.returnType();\n-            if (type.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE &&\n-                    type.asTypeVariable().identifier().equals(\"Entity\")) {\n-                castTo = entityBinaryType;\n-            }\n-            if (castTo == null)\n-                castTo = type.name().toString('/');\n-        }\n-\n         // Note: we can't use SYNTHETIC here because otherwise Mockito will never mock these methods\n         MethodVisitor mv = super.visitMethod(Opcodes.ACC_PUBLIC,\n                 method.name(),\n-                descriptor,\n-                signature,\n+                AsmUtil.getDescriptor(method, argMapper),\n+                AsmUtil.getSignature(method, argMapper),\n                 null);\n         AsmUtil.copyParameterNames(mv, method);\n         mv.visitCode();\n+        loadOperations(mv);\n+        loadArguments(parameters, mv);\n+        invokeOperations(mv, method);\n+        mv.visitMaxs(0, 0);\n+        mv.visitEnd();\n+    }\n+\n+    private void invokeOperations(MethodVisitor mv, MethodInfo method) {\n+        String operationDescriptor;\n+\n+        StringJoiner joiner = new StringJoiner(\"\", \"(\", \")\");\n+        joiner.add(CLASS.descriptor());\n+        descriptors(method, joiner);\n+\n+        org.jboss.jandex.Type returnType = method.returnType();\n+        String descriptor = getDescriptor(returnType, argMapper);\n+        String key = returnType.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE\n+                ? returnType.asTypeVariable().identifier()\n+                : returnType.name().toString();\n+        operationDescriptor = joiner + erasures.getOrDefault(key, descriptor);\n+\n+        mv.visitMethodInsn(INVOKEVIRTUAL, typeBundle.operations().internalName(), method.name(),\n+                operationDescriptor, false);\n+        if (returnType.kind() != org.jboss.jandex.Type.Kind.PRIMITIVE) {\n+            String cast;\n+            if (returnType.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE) {\n+                ByteCodeType type = typeArguments.getOrDefault(returnType.asTypeVariable().identifier(), entityUpperBound);\n+                cast = type.internalName();\n+            } else {\n+                cast = returnType.name().toString().replace('.', '/');\n+            }\n+            mv.visitTypeInsn(CHECKCAST, cast);\n+        }\n+        mv.visitInsn(AsmUtil.getReturnInstruction(returnType));\n+    }\n+\n+    private void descriptors(MethodInfo method, StringJoiner joiner) {\n+        for (org.jboss.jandex.Type parameter : method.parameters()) {\n+            if (parameter.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE\n+                    || method.name().endsWith(\"ById\")\n+                            && parameter.name().equals(typeArguments.get(\"Id\").dotName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 285}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODQyNzQyOnYy", "diffSide": "RIGHT", "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/visitors/PanacheRepositoryClassVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjoxOToyMlrOHoXdSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjoxOToyMlrOHoXdSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA4OTQxOA==", "bodyText": "Same remark as for the other visitor.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r512089418", "createdAt": "2020-10-26T16:19:22Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/visitors/PanacheRepositoryClassVisitor.java", "diffHunk": "@@ -202,53 +199,90 @@ protected void generateJvmBridge(MethodInfo method) {\n \n     }\n \n-    protected void generateModelBridge(MethodInfo method, AnnotationValue targetReturnTypeErased) {\n-        String descriptor = AsmUtil.getDescriptor(method, name -> typeArguments.get(name));\n+    protected void generateModelBridge(MethodInfo method) {\n         // JpaOperations erases the Id type to Object\n-        String descriptorForJpaOperations = AsmUtil.getDescriptor(method,\n-                name -> name.equals(\"Entity\") ? entitySignature : null);\n-        String signature = AsmUtil.getSignature(method, name -> typeArguments.get(name));\n         List<org.jboss.jandex.Type> parameters = method.parameters();\n \n-        String castTo = null;\n-        if (targetReturnTypeErased != null && targetReturnTypeErased.asBoolean()) {\n-            org.jboss.jandex.Type type = method.returnType();\n-            if (type.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE &&\n-                    type.asTypeVariable().identifier().equals(\"Entity\")) {\n-                castTo = entityBinaryType;\n-            }\n-            if (castTo == null)\n-                castTo = type.name().toString('/');\n-        }\n-\n         // Note: we can't use SYNTHETIC here because otherwise Mockito will never mock these methods\n         MethodVisitor mv = super.visitMethod(Opcodes.ACC_PUBLIC,\n                 method.name(),\n-                descriptor,\n-                signature,\n+                AsmUtil.getDescriptor(method, argMapper),\n+                AsmUtil.getSignature(method, argMapper),\n                 null);\n         AsmUtil.copyParameterNames(mv, method);\n         mv.visitCode();\n+        loadOperations(mv);\n+        loadArguments(parameters, mv);\n+        invokeOperations(mv, method);\n+        mv.visitMaxs(0, 0);\n+        mv.visitEnd();\n+    }\n+\n+    private void invokeOperations(MethodVisitor mv, MethodInfo method) {\n+        String operationDescriptor;\n+\n+        StringJoiner joiner = new StringJoiner(\"\", \"(\", \")\");\n+        joiner.add(CLASS.descriptor());\n+        descriptors(method, joiner);\n+\n+        org.jboss.jandex.Type returnType = method.returnType();\n+        String descriptor = getDescriptor(returnType, argMapper);\n+        String key = returnType.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE\n+                ? returnType.asTypeVariable().identifier()\n+                : returnType.name().toString();\n+        operationDescriptor = joiner + erasures.getOrDefault(key, descriptor);\n+\n+        mv.visitMethodInsn(INVOKEVIRTUAL, typeBundle.operations().internalName(), method.name(),\n+                operationDescriptor, false);\n+        if (returnType.kind() != org.jboss.jandex.Type.Kind.PRIMITIVE) {\n+            String cast;\n+            if (returnType.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE) {\n+                ByteCodeType type = typeArguments.getOrDefault(returnType.asTypeVariable().identifier(), entityUpperBound);\n+                cast = type.internalName();\n+            } else {\n+                cast = returnType.name().toString().replace('.', '/');\n+            }\n+            mv.visitTypeInsn(CHECKCAST, cast);\n+        }\n+        mv.visitInsn(AsmUtil.getReturnInstruction(returnType));\n+    }\n+\n+    private void descriptors(MethodInfo method, StringJoiner joiner) {\n+        for (org.jboss.jandex.Type parameter : method.parameters()) {\n+            if (parameter.kind() == org.jboss.jandex.Type.Kind.TYPE_VARIABLE\n+                    || method.name().endsWith(\"ById\")\n+                            && parameter.name().equals(typeArguments.get(\"Id\").dotName())) {\n+                joiner.add(OBJECT.descriptor());\n+            } else {\n+                joiner.add(mapType(parameter));\n+            }\n+        }\n+    }\n+\n+    private String mapType(org.jboss.jandex.Type parameter) {\n+        String descriptor;\n+        switch (parameter.kind()) {\n+            case PRIMITIVE:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7f8957e5b43895057916d6a16bddc153f56981"}, "originalPosition": 296}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjM3MzQzOnYy", "diffSide": "RIGHT", "path": "extensions/panache/panache-common/deployment/pom.xml", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwODo1ODo1NVrOHwSTog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODowNjoxMFrOHwpAiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM5MzYzNA==", "bodyText": "This is still there, but we should remove it.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r520393634", "createdAt": "2020-11-10T08:58:55Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-common/deployment/pom.xml", "diffHunk": "@@ -33,6 +33,10 @@\n             <groupId>org.ow2.asm</groupId>\n             <artifactId>asm</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>org.jetbrains.kotlin</groupId>\n+            <artifactId>kotlin-stdlib-jdk8</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fea10581c12c6523b2c92b053e7e25ac0932486d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYyNzk0NA==", "bodyText": "I changed the scope to compile so it won't get pulled in unnecessarily at least.  the javax.validation annotation is also supported but we're in the midst of the javax vs jakartaee annotation debate so i'm not sure what to do there as such.  My gut says to retool around the EE annotations but to wait until we have an answer for those package questions.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r520627944", "createdAt": "2020-11-10T14:58:50Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/panache-common/deployment/pom.xml", "diffHunk": "@@ -33,6 +33,10 @@\n             <groupId>org.ow2.asm</groupId>\n             <artifactId>asm</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>org.jetbrains.kotlin</groupId>\n+            <artifactId>kotlin-stdlib-jdk8</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM5MzYzNA=="}, "originalCommit": {"oid": "fea10581c12c6523b2c92b053e7e25ac0932486d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYzODk5NA==", "bodyText": "Isn't that the default scope? What does it change?", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r520638994", "createdAt": "2020-11-10T15:12:55Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-common/deployment/pom.xml", "diffHunk": "@@ -33,6 +33,10 @@\n             <groupId>org.ow2.asm</groupId>\n             <artifactId>asm</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>org.jetbrains.kotlin</groupId>\n+            <artifactId>kotlin-stdlib-jdk8</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM5MzYzNA=="}, "originalCommit": {"oid": "fea10581c12c6523b2c92b053e7e25ac0932486d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY2OTA0OA==", "bodyText": "actually, you're right.  i thought it was runtime.  I'll switch it to provided.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r520669048", "createdAt": "2020-11-10T15:50:58Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/panache-common/deployment/pom.xml", "diffHunk": "@@ -33,6 +33,10 @@\n             <groupId>org.ow2.asm</groupId>\n             <artifactId>asm</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>org.jetbrains.kotlin</groupId>\n+            <artifactId>kotlin-stdlib-jdk8</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM5MzYzNA=="}, "originalCommit": {"oid": "fea10581c12c6523b2c92b053e7e25ac0932486d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY3MTAxOQ==", "bodyText": "Do you see a problem using the javax.validation bits directly?  I'd have to rework a bit of code in the class visitor but maybe it just makes sense to do that now.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r520671019", "createdAt": "2020-11-10T15:53:34Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/panache-common/deployment/pom.xml", "diffHunk": "@@ -33,6 +33,10 @@\n             <groupId>org.ow2.asm</groupId>\n             <artifactId>asm</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>org.jetbrains.kotlin</groupId>\n+            <artifactId>kotlin-stdlib-jdk8</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM5MzYzNA=="}, "originalCommit": {"oid": "fea10581c12c6523b2c92b053e7e25ac0932486d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcwMzMwMw==", "bodyText": "What what is using that Kotlin stdlib, though?", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r520703303", "createdAt": "2020-11-10T16:35:40Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-common/deployment/pom.xml", "diffHunk": "@@ -33,6 +33,10 @@\n             <groupId>org.ow2.asm</groupId>\n             <artifactId>asm</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>org.jetbrains.kotlin</groupId>\n+            <artifactId>kotlin-stdlib-jdk8</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM5MzYzNA=="}, "originalCommit": {"oid": "fea10581c12c6523b2c92b053e7e25ac0932486d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2NTU3Ng==", "bodyText": "In this case it was only for @NotNull which came out of the kotlinc geenrated bytecode.  kotlinc will honor the java/jakarta EE annotation as well so I switched to that since we already have that in the tree.  I'll need to do a bit more work downstream but that's dependent on getting jandex to properly preserve these annotations.  In the meantime, though, this has been cleaned up.", "url": "https://github.com/quarkusio/quarkus/pull/11724#discussion_r520765576", "createdAt": "2020-11-10T18:06:10Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/panache-common/deployment/pom.xml", "diffHunk": "@@ -33,6 +33,10 @@\n             <groupId>org.ow2.asm</groupId>\n             <artifactId>asm</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>org.jetbrains.kotlin</groupId>\n+            <artifactId>kotlin-stdlib-jdk8</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM5MzYzNA=="}, "originalCommit": {"oid": "fea10581c12c6523b2c92b053e7e25ac0932486d"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 430, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}