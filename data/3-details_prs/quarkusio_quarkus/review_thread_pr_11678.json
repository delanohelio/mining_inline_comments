{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0ODIwMzI2", "number": 11678, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjozODozN1rOEd0RlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjozODozN1rOEd0RlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzAwNjI4OnYy", "diffSide": "RIGHT", "path": "integration-tests/hibernate-reactive-postgresql/src/main/java/io/quarkus/it/hibernate/reactive/postgresql/HibernateReactiveTestEndpoint.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjozODozN1rOHJNQdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjozODozN1rOHJNQdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQxNjQzOQ==", "bodyText": "@cescoffier , @gavinking this line threw me off a bit; is there a better / shorter way of expressing this?\nAll I want is to ensure both tables are empty; I could have used a simple \"then\", but wanted to be fancy and take advantge of the fact that order of execution of these is not important.\nI noticed the \"and()\" operator is deprecated, couldn't find a better way than this.", "url": "https://github.com/quarkusio/quarkus/pull/11678#discussion_r479416439", "createdAt": "2020-08-28T16:38:37Z", "author": {"login": "Sanne"}, "path": "integration-tests/hibernate-reactive-postgresql/src/main/java/io/quarkus/it/hibernate/reactive/postgresql/HibernateReactiveTestEndpoint.java", "diffHunk": "@@ -129,25 +116,23 @@\n     @Produces(MediaType.APPLICATION_JSON)\n     public Uni<String> reactiveUpdate() {\n         final String NEW_NAME = \"Tina\";\n-        return mutinySession\n-                .flatMap(mutinySession -> {\n-                    return populateDB()\n-                            .flatMap(junk -> mutinySession.find(GuineaPig.class, 5))\n-                            .map(pig -> {\n-                                if (NEW_NAME.equals(pig.getName()))\n-                                    throw new AssertionError(\"Pig already had name \" + NEW_NAME);\n-                                pig.setName(NEW_NAME);\n-                                return pig;\n-                            })\n-                            .flatMap(junk -> mutinySession.flush())\n-                            .flatMap(junk -> selectNameFromId(5));\n-                });\n+        return populateDB()\n+                .then(() -> mutinySession.find(GuineaPig.class, 5))\n+                .invoke(pig -> {\n+                    if (NEW_NAME.equals(pig.getName()))\n+                        throw new AssertionError(\"Pig already had name \" + NEW_NAME);\n+                    pig.setName(NEW_NAME);\n+                })\n+                .then(() -> mutinySession.flush())\n+                .then(() -> selectNameFromId(5));\n     }\n \n     private Uni<RowSet<Row>> populateDB() {\n-        return pgPool.query(\"DELETE FROM Pig\").execute()\n-                .and(pgPool.query(\"DELETE FROM Cow\").execute())\n-                .flatMap(junk -> pgPool.preparedQuery(\"INSERT INTO Pig (id, name) VALUES (5, 'Aloi')\").execute());\n+        return Uni.combine().all().unis(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c06a6f624075fd890a9bdc3dcedcc28a326015e"}, "originalPosition": 168}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 559, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}