{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2ODM3MDQy", "number": 8321, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo1Mzo0NFrODtcAww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNzo1NDo0M1rODt1nNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTcxNDU5OnYy", "diffSide": "RIGHT", "path": "extensions/resteasy-common/deployment/src/main/java/io/quarkus/resteasy/common/deployment/ResteasyCommonProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo1Mzo0NFrOF-290A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMToyOTozMVrOF-8ZSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ1NjU5Mg==", "bodyText": "I wonder if we should send a PR to jandex to add a method like ClassInfo#constructors() ;-).", "url": "https://github.com/quarkusio/quarkus/pull/8321#discussion_r401456592", "createdAt": "2020-04-01T08:53:44Z", "author": {"login": "mkouba"}, "path": "extensions/resteasy-common/deployment/src/main/java/io/quarkus/resteasy/common/deployment/ResteasyCommonProcessor.java", "diffHunk": "@@ -281,6 +283,16 @@ private void checkProperConfigAccessInProvider(AnnotationInstance instance) {\n         }\n     }\n \n+    private void checkProperConstructorInProvider(AnnotationInstance i) {\n+        ClassInfo targetClass = i.target().asClass();\n+        if (!targetClass.hasNoArgsConstructor()\n+                || targetClass.methods().stream().filter(m -> m.name().equals(\"<init>\")).count() > 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "535c42fd3e12d14aa7112b60a93ed367a49f4c04"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ1NzE3OQ==", "bodyText": "That's an excellent idea! I'll do that later today :)", "url": "https://github.com/quarkusio/quarkus/pull/8321#discussion_r401457179", "createdAt": "2020-04-01T08:54:34Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-common/deployment/src/main/java/io/quarkus/resteasy/common/deployment/ResteasyCommonProcessor.java", "diffHunk": "@@ -281,6 +283,16 @@ private void checkProperConfigAccessInProvider(AnnotationInstance instance) {\n         }\n     }\n \n+    private void checkProperConstructorInProvider(AnnotationInstance i) {\n+        ClassInfo targetClass = i.target().asClass();\n+        if (!targetClass.hasNoArgsConstructor()\n+                || targetClass.methods().stream().filter(m -> m.name().equals(\"<init>\")).count() > 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ1NjU5Mg=="}, "originalCommit": {"oid": "535c42fd3e12d14aa7112b60a93ed367a49f4c04"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0NTU0Nw==", "bodyText": "Here it is: wildfly/jandex#78", "url": "https://github.com/quarkusio/quarkus/pull/8321#discussion_r401545547", "createdAt": "2020-04-01T11:29:31Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-common/deployment/src/main/java/io/quarkus/resteasy/common/deployment/ResteasyCommonProcessor.java", "diffHunk": "@@ -281,6 +283,16 @@ private void checkProperConfigAccessInProvider(AnnotationInstance instance) {\n         }\n     }\n \n+    private void checkProperConstructorInProvider(AnnotationInstance i) {\n+        ClassInfo targetClass = i.target().asClass();\n+        if (!targetClass.hasNoArgsConstructor()\n+                || targetClass.methods().stream().filter(m -> m.name().equals(\"<init>\")).count() > 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ1NjU5Mg=="}, "originalCommit": {"oid": "535c42fd3e12d14aa7112b60a93ed367a49f4c04"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTcxOTYyOnYy", "diffSide": "RIGHT", "path": "extensions/resteasy-common/deployment/src/main/java/io/quarkus/resteasy/common/deployment/ResteasyCommonProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo1NDo1NlrOF-3BCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwOTowNToyN1rOF-3ZhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ1NzQxNg==", "bodyText": "Shouldn't we mention what happens if it does not have such a constructor?", "url": "https://github.com/quarkusio/quarkus/pull/8321#discussion_r401457416", "createdAt": "2020-04-01T08:54:56Z", "author": {"login": "mkouba"}, "path": "extensions/resteasy-common/deployment/src/main/java/io/quarkus/resteasy/common/deployment/ResteasyCommonProcessor.java", "diffHunk": "@@ -281,6 +283,16 @@ private void checkProperConfigAccessInProvider(AnnotationInstance instance) {\n         }\n     }\n \n+    private void checkProperConstructorInProvider(AnnotationInstance i) {\n+        ClassInfo targetClass = i.target().asClass();\n+        if (!targetClass.hasNoArgsConstructor()\n+                || targetClass.methods().stream().filter(m -> m.name().equals(\"<init>\")).count() > 1) {\n+            LOGGER.warn(\n+                    \"Classes annotated with @Provider should have a single, no-argument constructor. Offending class is \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "535c42fd3e12d14aa7112b60a93ed367a49f4c04"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2MTY4OQ==", "bodyText": "Makes sense. I'll update the message.", "url": "https://github.com/quarkusio/quarkus/pull/8321#discussion_r401461689", "createdAt": "2020-04-01T09:01:59Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-common/deployment/src/main/java/io/quarkus/resteasy/common/deployment/ResteasyCommonProcessor.java", "diffHunk": "@@ -281,6 +283,16 @@ private void checkProperConfigAccessInProvider(AnnotationInstance instance) {\n         }\n     }\n \n+    private void checkProperConstructorInProvider(AnnotationInstance i) {\n+        ClassInfo targetClass = i.target().asClass();\n+        if (!targetClass.hasNoArgsConstructor()\n+                || targetClass.methods().stream().filter(m -> m.name().equals(\"<init>\")).count() > 1) {\n+            LOGGER.warn(\n+                    \"Classes annotated with @Provider should have a single, no-argument constructor. Offending class is \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ1NzQxNg=="}, "originalCommit": {"oid": "535c42fd3e12d14aa7112b60a93ed367a49f4c04"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2MzY4NA==", "bodyText": "Fixed", "url": "https://github.com/quarkusio/quarkus/pull/8321#discussion_r401463684", "createdAt": "2020-04-01T09:05:27Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-common/deployment/src/main/java/io/quarkus/resteasy/common/deployment/ResteasyCommonProcessor.java", "diffHunk": "@@ -281,6 +283,16 @@ private void checkProperConfigAccessInProvider(AnnotationInstance instance) {\n         }\n     }\n \n+    private void checkProperConstructorInProvider(AnnotationInstance i) {\n+        ClassInfo targetClass = i.target().asClass();\n+        if (!targetClass.hasNoArgsConstructor()\n+                || targetClass.methods().stream().filter(m -> m.name().equals(\"<init>\")).count() > 1) {\n+            LOGGER.warn(\n+                    \"Classes annotated with @Provider should have a single, no-argument constructor. Offending class is \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ1NzQxNg=="}, "originalCommit": {"oid": "535c42fd3e12d14aa7112b60a93ed367a49f4c04"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzkwOTAwOnYy", "diffSide": "RIGHT", "path": "extensions/resteasy-common/deployment/src/main/java/io/quarkus/resteasy/common/deployment/ResteasyCommonProcessor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNzo1NDo0M1rOF_fbQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoxOTowNlrOF_gP-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjExOTQ4OQ==", "bodyText": "The injection works fine if I add @ApplicationScoped to the filter (as described in the original issue). Why not use following text:\nClasses annotated with @Provider without @ApplicationScoped annotation should have a single, no-argument constructor, otherwise dependency injection won't work properly.\n\nHas the if-statement to cover @ApplicationScoped as well?", "url": "https://github.com/quarkusio/quarkus/pull/8321#discussion_r402119489", "createdAt": "2020-04-02T07:54:43Z", "author": {"login": "schrieveslaach"}, "path": "extensions/resteasy-common/deployment/src/main/java/io/quarkus/resteasy/common/deployment/ResteasyCommonProcessor.java", "diffHunk": "@@ -281,6 +283,16 @@ private void checkProperConfigAccessInProvider(AnnotationInstance instance) {\n         }\n     }\n \n+    private void checkProperConstructorInProvider(AnnotationInstance i) {\n+        ClassInfo targetClass = i.target().asClass();\n+        if (!targetClass.hasNoArgsConstructor()\n+                || targetClass.methods().stream().filter(m -> m.name().equals(\"<init>\")).count() > 1) {\n+            LOGGER.warn(\n+                    \"Classes annotated with @Provider should have a single, no-argument constructor, otherwise dependency injection won't work properly. Offending class is \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f9055565d237d9f865a9f2a2ad868ab1ef610f6"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEyNjQ1OQ==", "bodyText": "Now I'm a bit confused. @geoand We should probably verify whether and where constructor injection works... it could be that CDI injection works but JAX-RS injection does not work. I don't remember ;-).", "url": "https://github.com/quarkusio/quarkus/pull/8321#discussion_r402126459", "createdAt": "2020-04-02T08:07:18Z", "author": {"login": "mkouba"}, "path": "extensions/resteasy-common/deployment/src/main/java/io/quarkus/resteasy/common/deployment/ResteasyCommonProcessor.java", "diffHunk": "@@ -281,6 +283,16 @@ private void checkProperConfigAccessInProvider(AnnotationInstance instance) {\n         }\n     }\n \n+    private void checkProperConstructorInProvider(AnnotationInstance i) {\n+        ClassInfo targetClass = i.target().asClass();\n+        if (!targetClass.hasNoArgsConstructor()\n+                || targetClass.methods().stream().filter(m -> m.name().equals(\"<init>\")).count() > 1) {\n+            LOGGER.warn(\n+                    \"Classes annotated with @Provider should have a single, no-argument constructor, otherwise dependency injection won't work properly. Offending class is \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjExOTQ4OQ=="}, "originalCommit": {"oid": "8f9055565d237d9f865a9f2a2ad868ab1ef610f6"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzMjk4NQ==", "bodyText": "I couldn't get it to work reliably even with @Singleton, so I think it's best to play it safe.", "url": "https://github.com/quarkusio/quarkus/pull/8321#discussion_r402132985", "createdAt": "2020-04-02T08:19:06Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-common/deployment/src/main/java/io/quarkus/resteasy/common/deployment/ResteasyCommonProcessor.java", "diffHunk": "@@ -281,6 +283,16 @@ private void checkProperConfigAccessInProvider(AnnotationInstance instance) {\n         }\n     }\n \n+    private void checkProperConstructorInProvider(AnnotationInstance i) {\n+        ClassInfo targetClass = i.target().asClass();\n+        if (!targetClass.hasNoArgsConstructor()\n+                || targetClass.methods().stream().filter(m -> m.name().equals(\"<init>\")).count() > 1) {\n+            LOGGER.warn(\n+                    \"Classes annotated with @Provider should have a single, no-argument constructor, otherwise dependency injection won't work properly. Offending class is \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjExOTQ4OQ=="}, "originalCommit": {"oid": "8f9055565d237d9f865a9f2a2ad868ab1ef610f6"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3573, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}