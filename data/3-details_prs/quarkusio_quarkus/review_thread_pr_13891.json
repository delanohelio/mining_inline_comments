{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMDg1MDA2", "number": 13891, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOTo1NzoyMFrOFFx6yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDowMzoyOFrOFFyESw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjA1MDY2OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/rest-client.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOTo1NzoyMFrOIGde3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOTo1NzoyMFrOIGde3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0NTQwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            == Custom header support\n          \n          \n            \n            == Custom headers support", "url": "https://github.com/quarkusio/quarkus/pull/13891#discussion_r543645405", "createdAt": "2020-12-15T19:57:20Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/rest-client.adoc", "diffHunk": "@@ -456,6 +456,68 @@ If you use a `CompletionStage`, you would need to call the service's method to r\n This difference comes from the laziness aspect of Mutiny and its subscription protocol.\n More details about this can be found in https://smallrye.io/smallrye-mutiny/#_uni_and_multi[the Mutiny documentation].\n \n+== Custom header support", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e53149081daeb7f2bffca4d67f62102412a9a7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjA1OTczOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/rest-client.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOTo1OTozOFrOIGdkRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOTo1OTozOFrOIGdkRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0Njc5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The mp-rest client allows registering factory to amend requests headers using `@RegisterClientHeaders` annotation.\n          \n          \n            \n            The MicroProfile REST client allows amending request headers by registering a `ClientHeadersFactory` with the `@RegisterClientHeaders` annotation.", "url": "https://github.com/quarkusio/quarkus/pull/13891#discussion_r543646790", "createdAt": "2020-12-15T19:59:38Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/rest-client.adoc", "diffHunk": "@@ -456,6 +456,68 @@ If you use a `CompletionStage`, you would need to call the service's method to r\n This difference comes from the laziness aspect of Mutiny and its subscription protocol.\n More details about this can be found in https://smallrye.io/smallrye-mutiny/#_uni_and_multi[the Mutiny documentation].\n \n+== Custom header support\n+The mp-rest client allows registering factory to amend requests headers using `@RegisterClientHeaders` annotation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e53149081daeb7f2bffca4d67f62102412a9a7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjA2MTA1OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/rest-client.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOTo1OTo1OVrOIGdlDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxOTo1OTo1OVrOIGdlDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0Njk4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Let's see it in action by adding a `RequestUUIDHeaderFactory` method in our `CountriesService` REST interface. The code should look like:\n          \n          \n            \n            Let's see it in action by adding a `@RegisterClientHeaders` annotation pointing to a `RequestUUIDHeaderFactory` class in our `CountriesService` REST interface:", "url": "https://github.com/quarkusio/quarkus/pull/13891#discussion_r543646989", "createdAt": "2020-12-15T19:59:59Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/rest-client.adoc", "diffHunk": "@@ -456,6 +456,68 @@ If you use a `CompletionStage`, you would need to call the service's method to r\n This difference comes from the laziness aspect of Mutiny and its subscription protocol.\n More details about this can be found in https://smallrye.io/smallrye-mutiny/#_uni_and_multi[the Mutiny documentation].\n \n+== Custom header support\n+The mp-rest client allows registering factory to amend requests headers using `@RegisterClientHeaders` annotation.\n+\n+Let's see it in action by adding a `RequestUUIDHeaderFactory` method in our `CountriesService` REST interface. The code should look like:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e53149081daeb7f2bffca4d67f62102412a9a7"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjA2MzA3OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/rest-client.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDowMDoyN1rOIGdmOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDowMDoyN1rOIGdmOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0NzI5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            And the RequestUUIDHeaderFactory` :\n          \n          \n            \n            And the `RequestUUIDHeaderFactory` would look like:", "url": "https://github.com/quarkusio/quarkus/pull/13891#discussion_r543647290", "createdAt": "2020-12-15T20:00:27Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/rest-client.adoc", "diffHunk": "@@ -456,6 +456,68 @@ If you use a `CompletionStage`, you would need to call the service's method to r\n This difference comes from the laziness aspect of Mutiny and its subscription protocol.\n More details about this can be found in https://smallrye.io/smallrye-mutiny/#_uni_and_multi[the Mutiny documentation].\n \n+== Custom header support\n+The mp-rest client allows registering factory to amend requests headers using `@RegisterClientHeaders` annotation.\n+\n+Let's see it in action by adding a `RequestUUIDHeaderFactory` method in our `CountriesService` REST interface. The code should look like:\n+\n+[source, java]\n+----\n+package org.acme.rest.client;\n+\n+import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n+import org.jboss.resteasy.annotations.jaxrs.PathParam;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import java.util.concurrent.CompletionStage;\n+import java.util.Set;\n+\n+@Path(\"/v2\")\n+@RegisterRestClient\n+@RegisterClientHeaders(RequestUUIDHeaderFactory.class)\n+public interface CountriesService {\n+\n+    @GET\n+    @Path(\"/name/{name}\")\n+    @Produces(\"application/json\")\n+    Set<Country> getByName(@PathParam String name);\n+\n+    @GET\n+    @Path(\"/name/{name}\")\n+    @Produces(\"application/json\")\n+    CompletionStage<Set<Country>> getByNameAsync(@PathParam String name);\n+}\n+----\n+\n+And the RequestUUIDHeaderFactory` :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e53149081daeb7f2bffca4d67f62102412a9a7"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjA2NTczOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/rest-client.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDowMToxMFrOIGdn2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDowMToxMFrOIGdn2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0NzcwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Any CDI bean matching the declared factory will be picked-up and can of course benefit from quarkus features.\n          \n          \n            \n            Any CDI bean matching the declared factory class will be picked up and can of course benefit from the usual CDI infrastructure.", "url": "https://github.com/quarkusio/quarkus/pull/13891#discussion_r543647705", "createdAt": "2020-12-15T20:01:10Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/rest-client.adoc", "diffHunk": "@@ -456,6 +456,68 @@ If you use a `CompletionStage`, you would need to call the service's method to r\n This difference comes from the laziness aspect of Mutiny and its subscription protocol.\n More details about this can be found in https://smallrye.io/smallrye-mutiny/#_uni_and_multi[the Mutiny documentation].\n \n+== Custom header support\n+The mp-rest client allows registering factory to amend requests headers using `@RegisterClientHeaders` annotation.\n+\n+Let's see it in action by adding a `RequestUUIDHeaderFactory` method in our `CountriesService` REST interface. The code should look like:\n+\n+[source, java]\n+----\n+package org.acme.rest.client;\n+\n+import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n+import org.jboss.resteasy.annotations.jaxrs.PathParam;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import java.util.concurrent.CompletionStage;\n+import java.util.Set;\n+\n+@Path(\"/v2\")\n+@RegisterRestClient\n+@RegisterClientHeaders(RequestUUIDHeaderFactory.class)\n+public interface CountriesService {\n+\n+    @GET\n+    @Path(\"/name/{name}\")\n+    @Produces(\"application/json\")\n+    Set<Country> getByName(@PathParam String name);\n+\n+    @GET\n+    @Path(\"/name/{name}\")\n+    @Produces(\"application/json\")\n+    CompletionStage<Set<Country>> getByNameAsync(@PathParam String name);\n+}\n+----\n+\n+And the RequestUUIDHeaderFactory` :\n+\n+[source, java]\n+----\n+package org.acme.rest.client;\n+\n+import org.eclipse.microprofile.rest.client.ext.ClientHeadersFactory;\n+import org.jboss.resteasy.specimpl.MultivaluedMapImpl;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.ws.rs.core.MultivaluedMap;\n+import java.util.UUID;\n+\n+@ApplicationScoped\n+public class RequestUUIDHeaderFactory implements ClientHeadersFactory {\n+\n+    @Override\n+    public MultivaluedMap<String, String> update(MultivaluedMap<String, String> multivaluedMap, MultivaluedMap<String, String> multivaluedMap1) {\n+        MultivaluedMap<String, String> result = new MultivaluedMapImpl<>();\n+        result.add(\"X-request-uuid\", UUID.randomUUID().toString());\n+        return result;\n+    }\n+}\n+----\n+\n+Any CDI bean matching the declared factory will be picked-up and can of course benefit from quarkus features.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e53149081daeb7f2bffca4d67f62102412a9a7"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjA3NDk5OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/rest-client.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDowMzoyOFrOIGdtSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDowMzoyOFrOIGdtSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0OTA5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public MultivaluedMap<String, String> update(MultivaluedMap<String, String> multivaluedMap, MultivaluedMap<String, String> multivaluedMap1) {\n          \n          \n            \n                public MultivaluedMap<String, String> update(MultivaluedMap<String, String> incomingHeaders, MultivaluedMap<String, String> clientOutgoingHeaders) {", "url": "https://github.com/quarkusio/quarkus/pull/13891#discussion_r543649097", "createdAt": "2020-12-15T20:03:28Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/rest-client.adoc", "diffHunk": "@@ -456,6 +456,68 @@ If you use a `CompletionStage`, you would need to call the service's method to r\n This difference comes from the laziness aspect of Mutiny and its subscription protocol.\n More details about this can be found in https://smallrye.io/smallrye-mutiny/#_uni_and_multi[the Mutiny documentation].\n \n+== Custom header support\n+The mp-rest client allows registering factory to amend requests headers using `@RegisterClientHeaders` annotation.\n+\n+Let's see it in action by adding a `RequestUUIDHeaderFactory` method in our `CountriesService` REST interface. The code should look like:\n+\n+[source, java]\n+----\n+package org.acme.rest.client;\n+\n+import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n+import org.jboss.resteasy.annotations.jaxrs.PathParam;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import java.util.concurrent.CompletionStage;\n+import java.util.Set;\n+\n+@Path(\"/v2\")\n+@RegisterRestClient\n+@RegisterClientHeaders(RequestUUIDHeaderFactory.class)\n+public interface CountriesService {\n+\n+    @GET\n+    @Path(\"/name/{name}\")\n+    @Produces(\"application/json\")\n+    Set<Country> getByName(@PathParam String name);\n+\n+    @GET\n+    @Path(\"/name/{name}\")\n+    @Produces(\"application/json\")\n+    CompletionStage<Set<Country>> getByNameAsync(@PathParam String name);\n+}\n+----\n+\n+And the RequestUUIDHeaderFactory` :\n+\n+[source, java]\n+----\n+package org.acme.rest.client;\n+\n+import org.eclipse.microprofile.rest.client.ext.ClientHeadersFactory;\n+import org.jboss.resteasy.specimpl.MultivaluedMapImpl;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.ws.rs.core.MultivaluedMap;\n+import java.util.UUID;\n+\n+@ApplicationScoped\n+public class RequestUUIDHeaderFactory implements ClientHeadersFactory {\n+\n+    @Override\n+    public MultivaluedMap<String, String> update(MultivaluedMap<String, String> multivaluedMap, MultivaluedMap<String, String> multivaluedMap1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e53149081daeb7f2bffca4d67f62102412a9a7"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4543, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}