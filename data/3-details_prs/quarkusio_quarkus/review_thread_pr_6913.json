{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NDgzNTI5", "number": 6913, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMDoyOTo1MFrODcMb2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNDo0MDo1MlrODeemAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODkwNDU4OnYy", "diffSide": "RIGHT", "path": "core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigPhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMDoyOTo1MFrOFkHQ7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMDozMzowOVrOFkHWfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQxMjA3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Constants.CONFIG_PHASE_BOOTSTRAP_ILLUSTRATION, \"BuildTime\"),\n          \n          \n            \n                        Constants.CONFIG_PHASE_BOOTSTRAP_ILLUSTRATION, \"Bootstrap\"),", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r373412078", "createdAt": "2020-01-31T10:29:50Z", "author": {"login": "machi1990"}, "path": "core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigPhase.java", "diffHunk": "@@ -6,6 +6,8 @@\n \n public enum ConfigPhase implements Comparable<ConfigPhase> {\n     RUN_TIME(\"The configuration is overridable at runtime\", Constants.CONFIG_PHASE_RUNTIME_ILLUSTRATION, \"RunTime\"),\n+    BOOTSTRAP(\"The configuration is used to bootstrap runtime Config Sources and is overridable at runtime\",\n+            Constants.CONFIG_PHASE_BOOTSTRAP_ILLUSTRATION, \"BuildTime\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4aff687178cdf2594082126de282b267a88064e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQxMzUwMw==", "bodyText": "Makes sense, thanks", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r373413503", "createdAt": "2020-01-31T10:33:09Z", "author": {"login": "geoand"}, "path": "core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigPhase.java", "diffHunk": "@@ -6,6 +6,8 @@\n \n public enum ConfigPhase implements Comparable<ConfigPhase> {\n     RUN_TIME(\"The configuration is overridable at runtime\", Constants.CONFIG_PHASE_RUNTIME_ILLUSTRATION, \"RunTime\"),\n+    BOOTSTRAP(\"The configuration is used to bootstrap runtime Config Sources and is overridable at runtime\",\n+            Constants.CONFIG_PHASE_BOOTSTRAP_ILLUSTRATION, \"BuildTime\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQxMjA3OA=="}, "originalCommit": {"oid": "e4aff687178cdf2594082126de282b267a88064e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzY4MzQ5OnYy", "diffSide": "RIGHT", "path": "ci-templates/stages.yml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoyNzoyNFrOFkzKfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoyOToyNFrOFkzO9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzMTMyNg==", "bodyText": "Uh oh. \ud83d\ude42", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374131326", "createdAt": "2020-02-03T14:27:24Z", "author": {"login": "dmlloyd"}, "path": "ci-templates/stages.yml", "diffHunk": "@@ -346,12 +346,13 @@ stages:\n         parameters:\n           poolSettings: ${{parameters.poolSettings}}\n           expectUseVMs: ${{parameters.expectUseVMs}}\n-          timeoutInMinutes: 30\n+          timeoutInMinutes: 35", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93af17d7773e12c378942cb50396f7ebc15d48f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzMjQ2OA==", "bodyText": "Well this was just done to be on the safe side since I added a new test :).\nI didn't see any actual problem :P", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374132468", "createdAt": "2020-02-03T14:29:24Z", "author": {"login": "geoand"}, "path": "ci-templates/stages.yml", "diffHunk": "@@ -346,12 +346,13 @@ stages:\n         parameters:\n           poolSettings: ${{parameters.poolSettings}}\n           expectUseVMs: ${{parameters.expectUseVMs}}\n-          timeoutInMinutes: 30\n+          timeoutInMinutes: 35", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzMTMyNg=="}, "originalCommit": {"oid": "b93af17d7773e12c378942cb50396f7ebc15d48f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzY4NjU5OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoyODoxNFrOFkzMXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToyMTozM1rOFlj5Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzMTgwNg==", "bodyText": "Maybe all three options should be dropped into a single \"determine\" method.", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374131806", "createdAt": "2020-02-03T14:28:14Z", "author": {"login": "dmlloyd"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -634,9 +644,10 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n                 assert recordAnnotation != null;\n                 final ExecutionTime executionTime = recordAnnotation.value();\n                 final boolean optional = recordAnnotation.optional();\n+\n                 methodStepConfig = methodStepConfig.andThen(bsb -> bsb.produces(\n                         executionTime == ExecutionTime.STATIC_INIT ? StaticBytecodeRecorderBuildItem.class", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93af17d7773e12c378942cb50396f7ebc15d48f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyOTY5NA==", "bodyText": "This junk is now completely gone", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374929694", "createdAt": "2020-02-04T21:21:33Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -634,9 +644,10 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n                 assert recordAnnotation != null;\n                 final ExecutionTime executionTime = recordAnnotation.value();\n                 final boolean optional = recordAnnotation.optional();\n+\n                 methodStepConfig = methodStepConfig.andThen(bsb -> bsb.produces(\n                         executionTime == ExecutionTime.STATIC_INIT ? StaticBytecodeRecorderBuildItem.class", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzMTgwNg=="}, "originalCommit": {"oid": "b93af17d7773e12c378942cb50396f7ebc15d48f"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzY5MTAyOnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoyOToyOFrOFkzPHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToyMTo1NlrOFlj5-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzMjUwOQ==", "bodyText": "This is a pretty strict limitation, not only on what the step can do but also on the way in which it can do it.  For example this makes it impossible to use BuildProducer to optionally produce the item.\nTBH I don't understand why the restriction exists.  Consuming a BOOTSTRAP config object should only have the distinguishing characteristic that the steps may run right away instead of after the \"real\" run time config is run.  Any step consuming run time config should already have at least one dependency which would prevent them from running too early.  Any BOOTSTRAP consuming step which doesn't produce anything that impacts the run time config by definition is agnostic to when it runs, so if it runs later that's fine.", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374132509", "createdAt": "2020-02-03T14:29:28Z", "author": {"login": "dmlloyd"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -733,8 +744,14 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n                             if (isRecorder && phase == ConfigPhase.BUILD_AND_RUN_TIME_FIXED) {\n                                 runTimeProxies.computeIfAbsent(parameterClass, readResult::requireRootObjectForClass);\n                             }\n-                        } else if (phase == ConfigPhase.RUN_TIME) {\n+                        } else if (phase == ConfigPhase.BOOTSTRAP || phase == ConfigPhase.RUN_TIME) {\n                             if (isRecorder) {\n+                                if ((phase == ConfigPhase.BOOTSTRAP)\n+                                        && !method.getReturnType().equals(RunTimeConfigurationSourceValueBuildItem.class)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93af17d7773e12c378942cb50396f7ebc15d48f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY1Nzk0Mw==", "bodyText": "I agree completely. The whole reason I did it this way is because I wanted to be able to distringuish the bootstrap recorders for the regular ones and therefor generate bytecode that interacts with Config properly.\nIf I can change the PR to leverage the Build Steps that you mention in order comments, than this and other comments on the PR will likely go away.", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374657943", "createdAt": "2020-02-04T13:05:37Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -733,8 +744,14 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n                             if (isRecorder && phase == ConfigPhase.BUILD_AND_RUN_TIME_FIXED) {\n                                 runTimeProxies.computeIfAbsent(parameterClass, readResult::requireRootObjectForClass);\n                             }\n-                        } else if (phase == ConfigPhase.RUN_TIME) {\n+                        } else if (phase == ConfigPhase.BOOTSTRAP || phase == ConfigPhase.RUN_TIME) {\n                             if (isRecorder) {\n+                                if ((phase == ConfigPhase.BOOTSTRAP)\n+                                        && !method.getReturnType().equals(RunTimeConfigurationSourceValueBuildItem.class)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzMjUwOQ=="}, "originalCommit": {"oid": "b93af17d7773e12c378942cb50396f7ebc15d48f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyOTkxMg==", "bodyText": "This arbitrary restriction has now been lifted.", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374929912", "createdAt": "2020-02-04T21:21:56Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -733,8 +744,14 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n                             if (isRecorder && phase == ConfigPhase.BUILD_AND_RUN_TIME_FIXED) {\n                                 runTimeProxies.computeIfAbsent(parameterClass, readResult::requireRootObjectForClass);\n                             }\n-                        } else if (phase == ConfigPhase.RUN_TIME) {\n+                        } else if (phase == ConfigPhase.BOOTSTRAP || phase == ConfigPhase.RUN_TIME) {\n                             if (isRecorder) {\n+                                if ((phase == ConfigPhase.BOOTSTRAP)\n+                                        && !method.getReturnType().equals(RunTimeConfigurationSourceValueBuildItem.class)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzMjUwOQ=="}, "originalCommit": {"oid": "b93af17d7773e12c378942cb50396f7ebc15d48f"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzcxMzI3OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozNTo1NFrOFkzdEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToyMjowN1rOFlj6Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNjA4Mw==", "bodyText": "Again returning a value is only one possible way of producing it.", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374136083", "createdAt": "2020-02-03T14:35:54Z", "author": {"login": "dmlloyd"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -778,6 +797,12 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n                 resultConsumer = Functions.discardingBiConsumer();\n             } else if (rawTypeExtends(returnType, BuildItem.class)) {\n                 final Class<? extends BuildItem> type = method.getReturnType().asSubclass(BuildItem.class);\n+                if (type.equals(RunTimeConfigurationSourceValueBuildItem.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93af17d7773e12c378942cb50396f7ebc15d48f"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyOTk5MQ==", "bodyText": "Also done", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374929991", "createdAt": "2020-02-04T21:22:07Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -778,6 +797,12 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n                 resultConsumer = Functions.discardingBiConsumer();\n             } else if (rawTypeExtends(returnType, BuildItem.class)) {\n                 final Class<? extends BuildItem> type = method.getReturnType().asSubclass(BuildItem.class);\n+                if (type.equals(RunTimeConfigurationSourceValueBuildItem.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNjA4Mw=="}, "originalCommit": {"oid": "b93af17d7773e12c378942cb50396f7ebc15d48f"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzcxNjE4OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozNjo0NlrOFkze7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToyMjozN1rOFlj7Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNjU1Nw==", "bodyText": "This restriction should be unneeded because the dependency sorting should already report the problem if you try to produce something in the wrong phase.", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374136557", "createdAt": "2020-02-03T14:36:46Z", "author": {"login": "dmlloyd"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -778,6 +797,12 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n                 resultConsumer = Functions.discardingBiConsumer();\n             } else if (rawTypeExtends(returnType, BuildItem.class)) {\n                 final Class<? extends BuildItem> type = method.getReturnType().asSubclass(BuildItem.class);\n+                if (type.equals(RunTimeConfigurationSourceValueBuildItem.class)\n+                        && (!isRecorder || recordAnnotation.value() != ExecutionTime.RUNTIME_INIT)) {\n+                    throw reportError(method,\n+                            \"A Build step that returns \" + RunTimeConfigurationSourceValueBuildItem.class.getSimpleName()\n+                                    + \" must also be annotated with @Record(ExecutionTime.RUNTIME_INIT)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93af17d7773e12c378942cb50396f7ebc15d48f"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzMDIzOQ==", "bodyText": "Gone as well", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374930239", "createdAt": "2020-02-04T21:22:37Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -778,6 +797,12 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n                 resultConsumer = Functions.discardingBiConsumer();\n             } else if (rawTypeExtends(returnType, BuildItem.class)) {\n                 final Class<? extends BuildItem> type = method.getReturnType().asSubclass(BuildItem.class);\n+                if (type.equals(RunTimeConfigurationSourceValueBuildItem.class)\n+                        && (!isRecorder || recordAnnotation.value() != ExecutionTime.RUNTIME_INIT)) {\n+                    throw reportError(method,\n+                            \"A Build step that returns \" + RunTimeConfigurationSourceValueBuildItem.class.getSimpleName()\n+                                    + \" must also be annotated with @Record(ExecutionTime.RUNTIME_INIT)\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNjU1Nw=="}, "originalCommit": {"oid": "b93af17d7773e12c378942cb50396f7ebc15d48f"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzcxNzg4OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozNzoxNVrOFkzgAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToyMjo1MVrOFlj7qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNjgzNQ==", "bodyText": "Why not?", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374136835", "createdAt": "2020-02-03T14:37:15Z", "author": {"login": "dmlloyd"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -837,14 +862,20 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n                 throw reportError(method, \"Unsupported method return type \" + returnType);\n             }\n \n-            if (methodConsumingConfigPhases.contains(ConfigPhase.RUN_TIME)) {\n+            if (methodConsumingConfigPhases.contains(ConfigPhase.BOOTSTRAP)\n+                    || methodConsumingConfigPhases.contains(ConfigPhase.RUN_TIME)) {\n                 if (isRecorder && recordAnnotation.value() == ExecutionTime.STATIC_INIT) {\n                     throw reportError(method,\n                             \"Bytecode recorder is static but an injected config object is declared as run time\");\n                 }\n                 methodStepConfig = methodStepConfig\n                         .andThen(bsb -> bsb.consumes(RunTimeConfigurationProxyBuildItem.class));\n             }\n+            if (methodConsumingConfigPhases.contains(ConfigPhase.BOOTSTRAP)\n+                    && methodConsumingConfigPhases.contains(ConfigPhase.RUN_TIME)) {\n+                throw reportError(method,\n+                        \"Bootstrap configuration cannot be used together in a build step with run time configuration\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93af17d7773e12c378942cb50396f7ebc15d48f"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzMDM0Nw==", "bodyText": "Not needed any more", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374930347", "createdAt": "2020-02-04T21:22:51Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -837,14 +862,20 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n                 throw reportError(method, \"Unsupported method return type \" + returnType);\n             }\n \n-            if (methodConsumingConfigPhases.contains(ConfigPhase.RUN_TIME)) {\n+            if (methodConsumingConfigPhases.contains(ConfigPhase.BOOTSTRAP)\n+                    || methodConsumingConfigPhases.contains(ConfigPhase.RUN_TIME)) {\n                 if (isRecorder && recordAnnotation.value() == ExecutionTime.STATIC_INIT) {\n                     throw reportError(method,\n                             \"Bytecode recorder is static but an injected config object is declared as run time\");\n                 }\n                 methodStepConfig = methodStepConfig\n                         .andThen(bsb -> bsb.consumes(RunTimeConfigurationProxyBuildItem.class));\n             }\n+            if (methodConsumingConfigPhases.contains(ConfigPhase.BOOTSTRAP)\n+                    && methodConsumingConfigPhases.contains(ConfigPhase.RUN_TIME)) {\n+                throw reportError(method,\n+                        \"Bootstrap configuration cannot be used together in a build step with run time configuration\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNjgzNQ=="}, "originalCommit": {"oid": "b93af17d7773e12c378942cb50396f7ebc15d48f"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzc2MTU3OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/configuration/RunTimeConfigurationGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDo0OTowMlrOFkz6rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToyMzowMVrOFlj8BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE0MzY2MA==", "bodyText": "Should be final.", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374143660", "createdAt": "2020-02-03T14:49:02Z", "author": {"login": "dmlloyd"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/configuration/RunTimeConfigurationGenerator.java", "diffHunk": "@@ -361,19 +390,29 @@ public void run() {\n             final ConfigPatternMap<Container> buildTimePatternMap = buildTimeConfigResult.getBuildTimePatternMap();\n             final ConfigPatternMap<Container> buildTimeRunTimePatternMap = buildTimeConfigResult\n                     .getBuildTimeRunTimePatternMap();\n+            final ConfigPatternMap<Container> bootstrapPatternMap = buildTimeConfigResult.getBootstrapPatternMap();\n             final ConfigPatternMap<Container> runTimePatternMap = buildTimeConfigResult.getRunTimePatternMap();\n \n             final BiFunction<Container, Container, Container> combinator = (a, b) -> a == null ? b : a;\n-            final ConfigPatternMap<Container> buildTimeRunTimeIgnored = ConfigPatternMap.merge(buildTimePatternMap,\n-                    runTimePatternMap, combinator);\n-            final ConfigPatternMap<Container> runTimeIgnored = ConfigPatternMap.merge(buildTimePatternMap,\n-                    buildTimeRunTimePatternMap, combinator);\n+            ConfigPatternMap<Container> buildTimeRunTimeIgnored = ConfigPatternMap", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93af17d7773e12c378942cb50396f7ebc15d48f"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzMDQzNg==", "bodyText": "Fixed", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374930436", "createdAt": "2020-02-04T21:23:01Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/configuration/RunTimeConfigurationGenerator.java", "diffHunk": "@@ -361,19 +390,29 @@ public void run() {\n             final ConfigPatternMap<Container> buildTimePatternMap = buildTimeConfigResult.getBuildTimePatternMap();\n             final ConfigPatternMap<Container> buildTimeRunTimePatternMap = buildTimeConfigResult\n                     .getBuildTimeRunTimePatternMap();\n+            final ConfigPatternMap<Container> bootstrapPatternMap = buildTimeConfigResult.getBootstrapPatternMap();\n             final ConfigPatternMap<Container> runTimePatternMap = buildTimeConfigResult.getRunTimePatternMap();\n \n             final BiFunction<Container, Container, Container> combinator = (a, b) -> a == null ? b : a;\n-            final ConfigPatternMap<Container> buildTimeRunTimeIgnored = ConfigPatternMap.merge(buildTimePatternMap,\n-                    runTimePatternMap, combinator);\n-            final ConfigPatternMap<Container> runTimeIgnored = ConfigPatternMap.merge(buildTimePatternMap,\n-                    buildTimeRunTimePatternMap, combinator);\n+            ConfigPatternMap<Container> buildTimeRunTimeIgnored = ConfigPatternMap", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE0MzY2MA=="}, "originalCommit": {"oid": "b93af17d7773e12c378942cb50396f7ebc15d48f"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzc4MjAwOnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/configuration/RunTimeConfigurationGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDo1NDozMlrOFk0HYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDo1NDozMlrOFk0HYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE0NjkxMw==", "bodyText": "I think in the future we should have a separate bootstrapIgnored as well, so we can log warnings about unrecognized configurations in the bootstrap config file(s) (this is the common case) while also being able to warn about ineffective config in the run time config (for example if a config source tries to configure itself, we can warn that the configuration property may not be given at that time).  This depends on #5548.", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374146913", "createdAt": "2020-02-03T14:54:32Z", "author": {"login": "dmlloyd"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/configuration/RunTimeConfigurationGenerator.java", "diffHunk": "@@ -361,19 +390,29 @@ public void run() {\n             final ConfigPatternMap<Container> buildTimePatternMap = buildTimeConfigResult.getBuildTimePatternMap();\n             final ConfigPatternMap<Container> buildTimeRunTimePatternMap = buildTimeConfigResult\n                     .getBuildTimeRunTimePatternMap();\n+            final ConfigPatternMap<Container> bootstrapPatternMap = buildTimeConfigResult.getBootstrapPatternMap();\n             final ConfigPatternMap<Container> runTimePatternMap = buildTimeConfigResult.getRunTimePatternMap();\n \n             final BiFunction<Container, Container, Container> combinator = (a, b) -> a == null ? b : a;\n-            final ConfigPatternMap<Container> buildTimeRunTimeIgnored = ConfigPatternMap.merge(buildTimePatternMap,\n-                    runTimePatternMap, combinator);\n-            final ConfigPatternMap<Container> runTimeIgnored = ConfigPatternMap.merge(buildTimePatternMap,\n-                    buildTimeRunTimePatternMap, combinator);\n+            ConfigPatternMap<Container> buildTimeRunTimeIgnored = ConfigPatternMap\n+                    .merge(ConfigPatternMap.merge(buildTimePatternMap,\n+                            runTimePatternMap, combinator), bootstrapPatternMap, combinator);\n+            final ConfigPatternMap<Container> runTimeIgnored = ConfigPatternMap\n+                    .merge(ConfigPatternMap.merge(buildTimePatternMap,\n+                            buildTimeRunTimePatternMap, combinator), bootstrapPatternMap, combinator);\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93af17d7773e12c378942cb50396f7ebc15d48f"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzkxMzMyOnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/MainClassBuildStep.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNToyODozM1rOFk1XtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToyMzoyNVrOFlj8sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2NzQ3Nw==", "bodyText": "I don't think it does, TBH, it entails hopefully nothing more than moving the call to read the config into a build step.  The rest should (?) work itself out naturally.", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374167477", "createdAt": "2020-02-03T15:28:33Z", "author": {"login": "dmlloyd"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/MainClassBuildStep.java", "diffHunk": "@@ -213,24 +207,61 @@ MainClassBuildItem build(List<StaticBytecodeRecorderBuildItem> staticInitTasks,\n \n         tryBlock = mv.tryBlock();\n \n-        // Load the run time configuration\n-        tryBlock.invokeStaticMethod(RunTimeConfigurationGenerator.C_CREATE_RUN_TIME_CONFIG);\n+        // Load the bootstrap configuration\n+        ResultHandle generatedConfig = tryBlock.invokeStaticMethod(RunTimeConfigurationGenerator.C_CREATE_BOOTSTRAP_CONFIG);\n+\n+        if (mainBootstrapConfig.isEmpty()) {\n+            tryBlock.invokeVirtualMethod(RunTimeConfigurationGenerator.C_READ_CONFIG, generatedConfig,\n+                    tryBlock.invokeStaticMethod(ofMethod(Collections.class, \"emptyList\", List.class)));\n+        } else {\n+            /*\n+             * This is not that great, since it is no by no means a general way of executing things before the main bytecode\n+             * stuff executes.\n+             * It's tailored made to support the bootstrap configuration stuff and would need to be rethought if we need\n+             * a general mechanism of executing things before the main bytecode stuff\n+             * (which would likely involve a new runtime phase)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93af17d7773e12c378942cb50396f7ebc15d48f"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzMDYwOQ==", "bodyText": "It worked like a charm", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374930609", "createdAt": "2020-02-04T21:23:25Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/MainClassBuildStep.java", "diffHunk": "@@ -213,24 +207,61 @@ MainClassBuildItem build(List<StaticBytecodeRecorderBuildItem> staticInitTasks,\n \n         tryBlock = mv.tryBlock();\n \n-        // Load the run time configuration\n-        tryBlock.invokeStaticMethod(RunTimeConfigurationGenerator.C_CREATE_RUN_TIME_CONFIG);\n+        // Load the bootstrap configuration\n+        ResultHandle generatedConfig = tryBlock.invokeStaticMethod(RunTimeConfigurationGenerator.C_CREATE_BOOTSTRAP_CONFIG);\n+\n+        if (mainBootstrapConfig.isEmpty()) {\n+            tryBlock.invokeVirtualMethod(RunTimeConfigurationGenerator.C_READ_CONFIG, generatedConfig,\n+                    tryBlock.invokeStaticMethod(ofMethod(Collections.class, \"emptyList\", List.class)));\n+        } else {\n+            /*\n+             * This is not that great, since it is no by no means a general way of executing things before the main bytecode\n+             * stuff executes.\n+             * It's tailored made to support the bootstrap configuration stuff and would need to be rethought if we need\n+             * a general mechanism of executing things before the main bytecode stuff\n+             * (which would likely involve a new runtime phase)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2NzQ3Nw=="}, "originalCommit": {"oid": "b93af17d7773e12c378942cb50396f7ebc15d48f"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzkxODY2OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/MainClassBuildStep.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNToyOTo1MlrOFk1bCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMDozNjo0MFrOFk_HgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2ODMzMA==", "bodyText": "This seems a bit fragile.  Could we instead try to move the config loading into a build step and see if that simplifies things?", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374168330", "createdAt": "2020-02-03T15:29:52Z", "author": {"login": "dmlloyd"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/MainClassBuildStep.java", "diffHunk": "@@ -213,24 +207,61 @@ MainClassBuildItem build(List<StaticBytecodeRecorderBuildItem> staticInitTasks,\n \n         tryBlock = mv.tryBlock();\n \n-        // Load the run time configuration\n-        tryBlock.invokeStaticMethod(RunTimeConfigurationGenerator.C_CREATE_RUN_TIME_CONFIG);\n+        // Load the bootstrap configuration\n+        ResultHandle generatedConfig = tryBlock.invokeStaticMethod(RunTimeConfigurationGenerator.C_CREATE_BOOTSTRAP_CONFIG);\n+\n+        if (mainBootstrapConfig.isEmpty()) {\n+            tryBlock.invokeVirtualMethod(RunTimeConfigurationGenerator.C_READ_CONFIG, generatedConfig,\n+                    tryBlock.invokeStaticMethod(ofMethod(Collections.class, \"emptyList\", List.class)));\n+        } else {\n+            /*\n+             * This is not that great, since it is no by no means a general way of executing things before the main bytecode\n+             * stuff executes.\n+             * It's tailored made to support the bootstrap configuration stuff and would need to be rethought if we need\n+             * a general mechanism of executing things before the main bytecode stuff\n+             * (which would likely involve a new runtime phase)\n+             *\n+             * What this loop does is go through the MainBootstrapConfigBytecodeRecorderBuildItem objects which are guaranteed\n+             * to be constructed from build steps that return RunTimeConfigurationSourceValueBuildItem - thus ensuring that\n+             * the generated StartupTask will write its result (which is a RuntimeValue<ConfigSourceProvider>\n+             * configSourcesValue) into the StartupContext.\n+             * This value is then pulled out of the StartupContext by using the getLastValue method. All the\n+             * ConfigSourceProvider objects are then collected and passed to Config.readConfig()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93af17d7773e12c378942cb50396f7ebc15d48f"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyNzE2OQ==", "bodyText": "Yes certainly. I think I have identified the mental hurdle that has been blocking me from seeing the path forward with this way of doing things.\nI'll work on it tomorrow and see how it goes.", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374327169", "createdAt": "2020-02-03T20:36:40Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/MainClassBuildStep.java", "diffHunk": "@@ -213,24 +207,61 @@ MainClassBuildItem build(List<StaticBytecodeRecorderBuildItem> staticInitTasks,\n \n         tryBlock = mv.tryBlock();\n \n-        // Load the run time configuration\n-        tryBlock.invokeStaticMethod(RunTimeConfigurationGenerator.C_CREATE_RUN_TIME_CONFIG);\n+        // Load the bootstrap configuration\n+        ResultHandle generatedConfig = tryBlock.invokeStaticMethod(RunTimeConfigurationGenerator.C_CREATE_BOOTSTRAP_CONFIG);\n+\n+        if (mainBootstrapConfig.isEmpty()) {\n+            tryBlock.invokeVirtualMethod(RunTimeConfigurationGenerator.C_READ_CONFIG, generatedConfig,\n+                    tryBlock.invokeStaticMethod(ofMethod(Collections.class, \"emptyList\", List.class)));\n+        } else {\n+            /*\n+             * This is not that great, since it is no by no means a general way of executing things before the main bytecode\n+             * stuff executes.\n+             * It's tailored made to support the bootstrap configuration stuff and would need to be rethought if we need\n+             * a general mechanism of executing things before the main bytecode stuff\n+             * (which would likely involve a new runtime phase)\n+             *\n+             * What this loop does is go through the MainBootstrapConfigBytecodeRecorderBuildItem objects which are guaranteed\n+             * to be constructed from build steps that return RunTimeConfigurationSourceValueBuildItem - thus ensuring that\n+             * the generated StartupTask will write its result (which is a RuntimeValue<ConfigSourceProvider>\n+             * configSourcesValue) into the StartupContext.\n+             * This value is then pulled out of the StartupContext by using the getLastValue method. All the\n+             * ConfigSourceProvider objects are then collected and passed to Config.readConfig()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2ODMzMA=="}, "originalCommit": {"oid": "b93af17d7773e12c378942cb50396f7ebc15d48f"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDE4NzMzOnYy", "diffSide": "RIGHT", "path": "core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigPhase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjo0MTowNFrOFk4Cbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjo0MTowNFrOFk4Cbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxMTE4Mw==", "bodyText": "Heh! This bit of code probably should not have been approved - instead the phases probably ought to have been reordered and the default comparison used.... but I guess that can be a fix for another day.", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r374211183", "createdAt": "2020-02-03T16:41:04Z", "author": {"login": "dmlloyd"}, "path": "core/processor/src/main/java/io/quarkus/annotation/processor/generate_doc/ConfigPhase.java", "diffHunk": "@@ -37,6 +39,20 @@ public int compare(ConfigPhase firstPhase, ConfigPhase secondPhase) {\n                             return -1;\n                     }\n                 }\n+                case BOOTSTRAP: {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93af17d7773e12c378942cb50396f7ebc15d48f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjExMDc0OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMToyMzozMFrOFmqrlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODozMjo1MFrOFm1kCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA4OTQ5Mg==", "bodyText": "Maybe we should have a nice toString for these phase names.", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r376089492", "createdAt": "2020-02-06T21:23:30Z", "author": {"login": "dmlloyd"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -743,7 +753,9 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n                                 runTimeProxies.computeIfAbsent(parameterClass, ReflectUtil::newInstance);\n                             } else {\n                                 throw reportError(parameter,\n-                                        \"Run time configuration cannot be consumed here unless the method is a @Recorder\");\n+                                        String.format(\n+                                                \"%s configuration cannot be consumed here unless the method is a @Recorder\",\n+                                                phase == ConfigPhase.RUN_TIME ? \"Run time\" : \"Bootstrap\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0a65f50aa257dbc9cc442a18de2d78a610edd00"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2Nzc4Nw==", "bodyText": "Done", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r376267787", "createdAt": "2020-02-07T08:32:50Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -743,7 +753,9 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n                                 runTimeProxies.computeIfAbsent(parameterClass, ReflectUtil::newInstance);\n                             } else {\n                                 throw reportError(parameter,\n-                                        \"Run time configuration cannot be consumed here unless the method is a @Recorder\");\n+                                        String.format(\n+                                                \"%s configuration cannot be consumed here unless the method is a @Recorder\",\n+                                                phase == ConfigPhase.RUN_TIME ? \"Run time\" : \"Bootstrap\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA4OTQ5Mg=="}, "originalCommit": {"oid": "b0a65f50aa257dbc9cc442a18de2d78a610edd00"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjExNjU0OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMToyNToyNlrOFmqvJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODozMjo1OFrOFm1kLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5MDQwNA==", "bodyText": "Maybe this should be phase.isReadAtMain() (with a method to expose that property)?  Several of the preceding checks could be similarly updated.", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r376090404", "createdAt": "2020-02-06T21:25:26Z", "author": {"login": "dmlloyd"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -733,7 +743,7 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n                             if (isRecorder && phase == ConfigPhase.BUILD_AND_RUN_TIME_FIXED) {\n                                 runTimeProxies.computeIfAbsent(parameterClass, readResult::requireRootObjectForClass);\n                             }\n-                        } else if (phase == ConfigPhase.RUN_TIME) {\n+                        } else if (phase == ConfigPhase.BOOTSTRAP || phase == ConfigPhase.RUN_TIME) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0a65f50aa257dbc9cc442a18de2d78a610edd00"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2NzgyMg==", "bodyText": "Done", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r376267822", "createdAt": "2020-02-07T08:32:58Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -733,7 +743,7 @@ public boolean canHandleObject(final Object obj, final boolean staticInit) {\n                             if (isRecorder && phase == ConfigPhase.BUILD_AND_RUN_TIME_FIXED) {\n                                 runTimeProxies.computeIfAbsent(parameterClass, readResult::requireRootObjectForClass);\n                             }\n-                        } else if (phase == ConfigPhase.RUN_TIME) {\n+                        } else if (phase == ConfigPhase.BOOTSTRAP || phase == ConfigPhase.RUN_TIME) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5MDQwNA=="}, "originalCommit": {"oid": "b0a65f50aa257dbc9cc442a18de2d78a610edd00"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjEyNDUzOnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/builditem/BootstrapConfigSetupCompleteBuildItem.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMToyODoyNFrOFmq0LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODozMzoyMVrOFm1kxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5MTY5Mw==", "bodyText": "This should be an EmptyBuildItem.", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r376091693", "createdAt": "2020-02-06T21:28:24Z", "author": {"login": "dmlloyd"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/builditem/BootstrapConfigSetupCompleteBuildItem.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package io.quarkus.deployment.builditem;\n+\n+import io.quarkus.builder.item.SimpleBuildItem;\n+\n+/**\n+ * Marker used by Build Steps that consume bootstrap configuration to ensure that they run after the bootstrap config has been\n+ * setup\n+ */\n+public final class BootstrapConfigSetupCompleteBuildItem extends SimpleBuildItem {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0a65f50aa257dbc9cc442a18de2d78a610edd00"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2Nzk3NQ==", "bodyText": "Done for this one and for RuntimeConfigSetupCompleteBuildItem", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r376267975", "createdAt": "2020-02-07T08:33:21Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/builditem/BootstrapConfigSetupCompleteBuildItem.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package io.quarkus.deployment.builditem;\n+\n+import io.quarkus.builder.item.SimpleBuildItem;\n+\n+/**\n+ * Marker used by Build Steps that consume bootstrap configuration to ensure that they run after the bootstrap config has been\n+ * setup\n+ */\n+public final class BootstrapConfigSetupCompleteBuildItem extends SimpleBuildItem {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5MTY5Mw=="}, "originalCommit": {"oid": "b0a65f50aa257dbc9cc442a18de2d78a610edd00"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjEyNzA2OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/builditem/MainBytecodeRecorderBuildItem.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMToyOToxN1rOFmq1vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNDozMzoyNFrOFnoOPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5MjA5Mw==", "bodyText": "If only one of these is ever set, should it be two different build items?", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r376092093", "createdAt": "2020-02-06T21:29:17Z", "author": {"login": "dmlloyd"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/builditem/MainBytecodeRecorderBuildItem.java", "diffHunk": "@@ -6,13 +6,23 @@\n public final class MainBytecodeRecorderBuildItem extends MultiBuildItem {\n \n     private final BytecodeRecorderImpl bytecodeRecorder;\n+    private final String generatedStartupContextClassName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0a65f50aa257dbc9cc442a18de2d78a610edd00"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI0NTY0MA==", "bodyText": "The reason I did it this way is because the MainClassBuildStep can continue to just consume List<MainBytecodeRecorderBuildItem> and the order of generated StartupTask objects is properly worked out.", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r376245640", "createdAt": "2020-02-07T07:24:46Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/builditem/MainBytecodeRecorderBuildItem.java", "diffHunk": "@@ -6,13 +6,23 @@\n public final class MainBytecodeRecorderBuildItem extends MultiBuildItem {\n \n     private final BytecodeRecorderImpl bytecodeRecorder;\n+    private final String generatedStartupContextClassName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5MjA5Mw=="}, "originalCommit": {"oid": "b0a65f50aa257dbc9cc442a18de2d78a610edd00"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA5MzM4Mg==", "bodyText": "I'm still not loving this, but the Monday brain fails to come up with any better ideas, so... I guess it's fine.", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r377093382", "createdAt": "2020-02-10T14:25:58Z", "author": {"login": "dmlloyd"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/builditem/MainBytecodeRecorderBuildItem.java", "diffHunk": "@@ -6,13 +6,23 @@\n public final class MainBytecodeRecorderBuildItem extends MultiBuildItem {\n \n     private final BytecodeRecorderImpl bytecodeRecorder;\n+    private final String generatedStartupContextClassName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5MjA5Mw=="}, "originalCommit": {"oid": "b0a65f50aa257dbc9cc442a18de2d78a610edd00"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA5Nzc5MA==", "bodyText": "Same here :)", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r377097790", "createdAt": "2020-02-10T14:33:24Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/builditem/MainBytecodeRecorderBuildItem.java", "diffHunk": "@@ -6,13 +6,23 @@\n public final class MainBytecodeRecorderBuildItem extends MultiBuildItem {\n \n     private final BytecodeRecorderImpl bytecodeRecorder;\n+    private final String generatedStartupContextClassName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5MjA5Mw=="}, "originalCommit": {"oid": "b0a65f50aa257dbc9cc442a18de2d78a610edd00"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjI5OTU2OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/MainClassBuildStep.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjozMzoxMFrOFmshmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODozMDo1N1rOFm1hIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExOTcwNQ==", "bodyText": "This should all go away.  Might be worth tagging the commit for reference first.", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r376119705", "createdAt": "2020-02-06T22:33:10Z", "author": {"login": "dmlloyd"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/MainClassBuildStep.java", "diffHunk": "@@ -213,25 +178,60 @@ MainClassBuildItem build(List<StaticBytecodeRecorderBuildItem> staticInitTasks,\n \n         tryBlock = mv.tryBlock();\n \n-        // Load the run time configuration\n-        tryBlock.invokeStaticMethod(RunTimeConfigurationGenerator.C_CREATE_RUN_TIME_CONFIG);\n+        //        // Load the bootstrap configuration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0a65f50aa257dbc9cc442a18de2d78a610edd00"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2NzA0Mw==", "bodyText": "Oh darn! Sorry for missing that! Basically the PR has 2 commits the first approach and the new approach so everything should be in the history, so I think we can safely delete all this :P", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r376267043", "createdAt": "2020-02-07T08:30:57Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/MainClassBuildStep.java", "diffHunk": "@@ -213,25 +178,60 @@ MainClassBuildItem build(List<StaticBytecodeRecorderBuildItem> staticInitTasks,\n \n         tryBlock = mv.tryBlock();\n \n-        // Load the run time configuration\n-        tryBlock.invokeStaticMethod(RunTimeConfigurationGenerator.C_CREATE_RUN_TIME_CONFIG);\n+        //        // Load the bootstrap configuration", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExOTcwNQ=="}, "originalCommit": {"oid": "b0a65f50aa257dbc9cc442a18de2d78a610edd00"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjc5ODkwOnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/builditem/RunTimeConfigurationSourceValueBuildItem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNDoyNzo0MVrOFnoA2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNDoyNzo0MVrOFnoA2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA5NDM2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A build step produces this BuildItem with a {@code RuntimeValue<ConfigSourceProvider>} a payload that is obtained by calling\n          \n          \n            \n             * A build step produces this BuildItem with a {@code RuntimeValue&lt;ConfigSourceProvider&gt;} a payload that is obtained by calling", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r377094361", "createdAt": "2020-02-10T14:27:41Z", "author": {"login": "dmlloyd"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/builditem/RunTimeConfigurationSourceValueBuildItem.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package io.quarkus.deployment.builditem;\n+\n+import org.eclipse.microprofile.config.spi.ConfigSourceProvider;\n+\n+import io.quarkus.builder.item.MultiBuildItem;\n+import io.quarkus.runtime.RuntimeValue;\n+\n+/**\n+ * This is a special build item that is intended to be used only to support bootstrap configuration in the following manner:\n+ *\n+ * A build step produces this BuildItem with a {@code RuntimeValue<ConfigSourceProvider>} a payload that is obtained by calling", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed2a377868b5fdeed8c08f6110f282d7538427aa"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjg1MTIwOnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/configuration/RunTimeConfigurationGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNDo0MDo1MlrOFnogsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNDo0MDo1MlrOFnogsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEwMjUxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .setModifiers(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC);\n          \n          \n            \n                                .setModifiers(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC | Opcodes.ACC_VOLATILE);\n          \n      \n    \n    \n  \n\nUnless you have reason to believe this is safely published another way, in which case there should be a comment.", "url": "https://github.com/quarkusio/quarkus/pull/6913#discussion_r377102514", "createdAt": "2020-02-10T14:40:52Z", "author": {"login": "dmlloyd"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/configuration/RunTimeConfigurationGenerator.java", "diffHunk": "@@ -296,6 +312,10 @@ public static void generate(BuildTimeConfigurationReader.ReadResult readResult,\n                 clinit.invokeVirtualMethod(HM_PUT, buildTimeValues, clinit.load(entry.getKey()), clinit.load(entry.getValue()));\n             }\n \n+            // static field containing the instance of the class - is set when createBootstrapConfig is run\n+            cc.getFieldCreator(C_INSTANCE)\n+                    .setModifiers(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed2a377868b5fdeed8c08f6110f282d7538427aa"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1068, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}