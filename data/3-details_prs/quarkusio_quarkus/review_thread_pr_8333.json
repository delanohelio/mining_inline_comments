{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MDU3MTMw", "number": 8333, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTozOToyNlrODtlunQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjo0MToxNlrOD4-DEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTMwNjUzOnYy", "diffSide": "RIGHT", "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/PanacheEntityEnhancer.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTozOToyNlrOF_GnTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDowMDowOFrOGAOy2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMjk3Mg==", "bodyText": "This is not a correct default for all implementations.", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r401712972", "createdAt": "2020-04-01T15:39:26Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/PanacheEntityEnhancer.java", "diffHunk": "@@ -189,13 +190,15 @@ private void generateMethod(MethodInfo method, AnnotationValue targetReturnTypeE\n             mv.visitEnd();\n         }\n \n-        protected abstract String getModelDescriptor();\n+        protected String getModelDescriptor() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ae36db3ec94b41b45588706ae2a5bc8a6cdcbc"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyNTgwMw==", "bodyText": "when I looked at the 3ish current implementations they all returned the same value.  I can change it back but it just seemed redundant.", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r401725803", "createdAt": "2020-04-01T15:56:55Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/PanacheEntityEnhancer.java", "diffHunk": "@@ -189,13 +190,15 @@ private void generateMethod(MethodInfo method, AnnotationValue targetReturnTypeE\n             mv.visitEnd();\n         }\n \n-        protected abstract String getModelDescriptor();\n+        protected String getModelDescriptor() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMjk3Mg=="}, "originalCommit": {"oid": "36ae36db3ec94b41b45588706ae2a5bc8a6cdcbc"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTczMTA3Ng==", "bodyText": "The panache-rx impl (in a branch ATM) doesn't, that's why.", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r401731076", "createdAt": "2020-04-01T16:04:12Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/PanacheEntityEnhancer.java", "diffHunk": "@@ -189,13 +190,15 @@ private void generateMethod(MethodInfo method, AnnotationValue targetReturnTypeE\n             mv.visitEnd();\n         }\n \n-        protected abstract String getModelDescriptor();\n+        protected String getModelDescriptor() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMjk3Mg=="}, "originalCommit": {"oid": "36ae36db3ec94b41b45588706ae2a5bc8a6cdcbc"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc2MjIzOA==", "bodyText": "ah.  does it hurt having that as the default that can be optionally overridden, though?  Seems like pointless work to push downstream if most are always going to be the same.  I'm happy to revert that if you'd like but it seems cleaner this way.", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r401762238", "createdAt": "2020-04-01T16:50:56Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/PanacheEntityEnhancer.java", "diffHunk": "@@ -189,13 +190,15 @@ private void generateMethod(MethodInfo method, AnnotationValue targetReturnTypeE\n             mv.visitEnd();\n         }\n \n-        protected abstract String getModelDescriptor();\n+        protected String getModelDescriptor() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMjk3Mg=="}, "originalCommit": {"oid": "36ae36db3ec94b41b45588706ae2a5bc8a6cdcbc"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5NTU3Ng==", "bodyText": "No, I suppose it won't hurt. Fine.", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r402895576", "createdAt": "2020-04-03T10:00:08Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/PanacheEntityEnhancer.java", "diffHunk": "@@ -189,13 +190,15 @@ private void generateMethod(MethodInfo method, AnnotationValue targetReturnTypeE\n             mv.visitEnd();\n         }\n \n-        protected abstract String getModelDescriptor();\n+        protected String getModelDescriptor() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMjk3Mg=="}, "originalCommit": {"oid": "36ae36db3ec94b41b45588706ae2a5bc8a6cdcbc"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTMyNzEzOnYy", "diffSide": "RIGHT", "path": "integration-tests/hibernate-orm-panache-kotlin/src/main/kotlin/io/quarkus/it/panache/kotlin/Dog.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo0NDowMlrOF_G0UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOTo1OTozOVrOGAOxyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxNjMwNA==", "bodyText": "Is there really no way to declare that in the PanacheEntityBase supertype? By making it self-parameterised with PanacheEntity<Dog>?", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r401716304", "createdAt": "2020-04-01T15:44:02Z", "author": {"login": "FroMage"}, "path": "integration-tests/hibernate-orm-panache-kotlin/src/main/kotlin/io/quarkus/it/panache/kotlin/Dog.kt", "diffHunk": "@@ -0,0 +1,21 @@\n+package io.quarkus.it.panache.kotlin\n+\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheCompanion\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheEntity\n+import javax.persistence.Entity\n+import javax.persistence.ManyToOne\n+\n+@Entity\n+open class Dog() : PanacheEntity() {\n+    companion object : PanacheCompanion<Dog>()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ae36db3ec94b41b45588706ae2a5bc8a6cdcbc"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc2Njg1MQ==", "bodyText": "companion objects aren't inherited so we can't go that route so far as I can tell.  Kotlin doesn't currently (and probably never will) support self types so I can't make that any less verbose.  At least, not that i've been able to determine.  It's not bad, though.  Just a touch redundant but it doesn't appear there's much to be done there.", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r401766851", "createdAt": "2020-04-01T16:57:29Z", "author": {"login": "evanchooly"}, "path": "integration-tests/hibernate-orm-panache-kotlin/src/main/kotlin/io/quarkus/it/panache/kotlin/Dog.kt", "diffHunk": "@@ -0,0 +1,21 @@\n+package io.quarkus.it.panache.kotlin\n+\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheCompanion\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheEntity\n+import javax.persistence.Entity\n+import javax.persistence.ManyToOne\n+\n+@Entity\n+open class Dog() : PanacheEntity() {\n+    companion object : PanacheCompanion<Dog>()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxNjMwNA=="}, "originalCommit": {"oid": "36ae36db3ec94b41b45588706ae2a5bc8a6cdcbc"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5NTMwNg==", "bodyText": "Ah right, they're not inherited. OK fine.", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r402895306", "createdAt": "2020-04-03T09:59:39Z", "author": {"login": "FroMage"}, "path": "integration-tests/hibernate-orm-panache-kotlin/src/main/kotlin/io/quarkus/it/panache/kotlin/Dog.kt", "diffHunk": "@@ -0,0 +1,21 @@\n+package io.quarkus.it.panache.kotlin\n+\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheCompanion\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheEntity\n+import javax.persistence.Entity\n+import javax.persistence.ManyToOne\n+\n+@Entity\n+open class Dog() : PanacheEntity() {\n+    companion object : PanacheCompanion<Dog>()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxNjMwNA=="}, "originalCommit": {"oid": "36ae36db3ec94b41b45588706ae2a5bc8a6cdcbc"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTI4ODM3OnYy", "diffSide": "RIGHT", "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheCompanionEnhancer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDowNToyNFrOF_s3HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDoyOTowOFrOF_t9Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMzOTYxMg==", "bodyText": "I think this is exactly the same as KotlinPanacheEntityEnhancer#collectFields", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r402339612", "createdAt": "2020-04-02T14:05:24Z", "author": {"login": "geoand"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheCompanionEnhancer.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.deployment;\n+\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.DOTNAME_PANACHE_COMPANION;\n+\n+import java.lang.reflect.Modifier;\n+\n+import javax.persistence.Transient;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.FieldInfo;\n+import org.jboss.jandex.IndexView;\n+import org.objectweb.asm.ClassVisitor;\n+\n+import io.quarkus.gizmo.DescriptorUtils;\n+import io.quarkus.panache.common.deployment.EntityField;\n+import io.quarkus.panache.common.deployment.EntityModel;\n+import io.quarkus.panache.common.deployment.MetamodelInfo;\n+import io.quarkus.panache.common.deployment.PanacheEntityEnhancer;\n+\n+public class KotlinPanacheCompanionEnhancer extends PanacheEntityEnhancer<MetamodelInfo<EntityModel<EntityField>>> {\n+\n+    private static final DotName DOTNAME_TRANSIENT = DotName.createSimple(Transient.class.getName());\n+    private final ClassInfo panacheCompanionClassInfo;\n+\n+    public KotlinPanacheCompanionEnhancer(IndexView index) {\n+        super(index, KotlinPanacheResourceProcessor.DOTNAME_PANACHE_ENTITY_BASE);\n+        modelInfo = new MetamodelInfo<>();\n+        panacheCompanionClassInfo = index.getClassByName(DOTNAME_PANACHE_COMPANION);\n+    }\n+\n+    @Override\n+    public ClassVisitor apply(String className, ClassVisitor outputClassVisitor) {\n+        return new KotlinPanacheCompanionClassVisitor(className, outputClassVisitor, modelInfo, panacheEntityBaseClassInfo,\n+                panacheCompanionClassInfo, indexView.getClassByName(DotName.createSimple(className)));\n+    }\n+\n+    @Override\n+    public void collectFields(ClassInfo classInfo) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63742c92dca9ebc56d833717894669903c2a16f7"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1Njg2Mg==", "bodyText": "It is, actually, i and I was thinking of removing it.  it's vestigial here, tbh, as kotlinc takes care of the field access for us.", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r402356862", "createdAt": "2020-04-02T14:28:17Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheCompanionEnhancer.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.deployment;\n+\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.DOTNAME_PANACHE_COMPANION;\n+\n+import java.lang.reflect.Modifier;\n+\n+import javax.persistence.Transient;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.FieldInfo;\n+import org.jboss.jandex.IndexView;\n+import org.objectweb.asm.ClassVisitor;\n+\n+import io.quarkus.gizmo.DescriptorUtils;\n+import io.quarkus.panache.common.deployment.EntityField;\n+import io.quarkus.panache.common.deployment.EntityModel;\n+import io.quarkus.panache.common.deployment.MetamodelInfo;\n+import io.quarkus.panache.common.deployment.PanacheEntityEnhancer;\n+\n+public class KotlinPanacheCompanionEnhancer extends PanacheEntityEnhancer<MetamodelInfo<EntityModel<EntityField>>> {\n+\n+    private static final DotName DOTNAME_TRANSIENT = DotName.createSimple(Transient.class.getName());\n+    private final ClassInfo panacheCompanionClassInfo;\n+\n+    public KotlinPanacheCompanionEnhancer(IndexView index) {\n+        super(index, KotlinPanacheResourceProcessor.DOTNAME_PANACHE_ENTITY_BASE);\n+        modelInfo = new MetamodelInfo<>();\n+        panacheCompanionClassInfo = index.getClassByName(DOTNAME_PANACHE_COMPANION);\n+    }\n+\n+    @Override\n+    public ClassVisitor apply(String className, ClassVisitor outputClassVisitor) {\n+        return new KotlinPanacheCompanionClassVisitor(className, outputClassVisitor, modelInfo, panacheEntityBaseClassInfo,\n+                panacheCompanionClassInfo, indexView.getClassByName(DotName.createSimple(className)));\n+    }\n+\n+    @Override\n+    public void collectFields(ClassInfo classInfo) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMzOTYxMg=="}, "originalCommit": {"oid": "63742c92dca9ebc56d833717894669903c2a16f7"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1NzU1OQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r402357559", "createdAt": "2020-04-02T14:29:08Z", "author": {"login": "geoand"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheCompanionEnhancer.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.deployment;\n+\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.DOTNAME_PANACHE_COMPANION;\n+\n+import java.lang.reflect.Modifier;\n+\n+import javax.persistence.Transient;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.FieldInfo;\n+import org.jboss.jandex.IndexView;\n+import org.objectweb.asm.ClassVisitor;\n+\n+import io.quarkus.gizmo.DescriptorUtils;\n+import io.quarkus.panache.common.deployment.EntityField;\n+import io.quarkus.panache.common.deployment.EntityModel;\n+import io.quarkus.panache.common.deployment.MetamodelInfo;\n+import io.quarkus.panache.common.deployment.PanacheEntityEnhancer;\n+\n+public class KotlinPanacheCompanionEnhancer extends PanacheEntityEnhancer<MetamodelInfo<EntityModel<EntityField>>> {\n+\n+    private static final DotName DOTNAME_TRANSIENT = DotName.createSimple(Transient.class.getName());\n+    private final ClassInfo panacheCompanionClassInfo;\n+\n+    public KotlinPanacheCompanionEnhancer(IndexView index) {\n+        super(index, KotlinPanacheResourceProcessor.DOTNAME_PANACHE_ENTITY_BASE);\n+        modelInfo = new MetamodelInfo<>();\n+        panacheCompanionClassInfo = index.getClassByName(DOTNAME_PANACHE_COMPANION);\n+    }\n+\n+    @Override\n+    public ClassVisitor apply(String className, ClassVisitor outputClassVisitor) {\n+        return new KotlinPanacheCompanionClassVisitor(className, outputClassVisitor, modelInfo, panacheEntityBaseClassInfo,\n+                panacheCompanionClassInfo, indexView.getClassByName(DotName.createSimple(className)));\n+    }\n+\n+    @Override\n+    public void collectFields(ClassInfo classInfo) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMzOTYxMg=="}, "originalCommit": {"oid": "63742c92dca9ebc56d833717894669903c2a16f7"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjE0NTk5OnYy", "diffSide": "RIGHT", "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheResourceProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNToyMDoyN1rOGE-miA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzo1MTozMFrOGFPoyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3MzE2MA==", "bodyText": "This is odd. Why does the bean need to be unremovable? I mean what special thing does Kotlin Panache do that needs to make the bean unremovable when it previously wasn't required?", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r407873160", "createdAt": "2020-04-14T05:20:27Z", "author": {"login": "geoand"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheResourceProcessor.java", "diffHunk": "@@ -0,0 +1,153 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.deployment;\n+\n+import static org.jboss.jandex.DotName.createSimple;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.Type;\n+import org.jetbrains.annotations.NotNull;\n+\n+import io.quarkus.arc.deployment.UnremovableBeanBuildItem;\n+import io.quarkus.arc.processor.BeanInfo;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.ApplicationIndexBuildItem;\n+import io.quarkus.deployment.builditem.BytecodeTransformerBuildItem;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.hibernate.orm.deployment.AdditionalJpaModelBuildItem;\n+import io.quarkus.hibernate.orm.deployment.HibernateEnhancersRegisteredBuildItem;\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheCompanion;\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheEntity;\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheEntityBase;\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheRepository;\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheRepositoryBase;\n+import io.quarkus.hibernate.orm.panache.kotlin.runtime.JpaOperations;\n+import io.quarkus.panache.common.deployment.EntityField;\n+import io.quarkus.panache.common.deployment.EntityModel;\n+import io.quarkus.panache.common.deployment.MetamodelInfo;\n+import io.quarkus.panache.common.deployment.PanacheFieldAccessEnhancer;\n+import io.quarkus.panache.common.deployment.PanacheRepositoryEnhancer;\n+\n+public final class KotlinPanacheResourceProcessor {\n+\n+    private static final Set<DotName> UNREMOVABLE_BEANS = Collections.singleton(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d983cf17d53e85e89b2323ab4d6f5d6cd10b1ae"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE0ODU0MA==", "bodyText": "That was copied from the java side.  I honestly don't know what it's there for but assumed @FroMage knew what he was doing when that went in.", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r408148540", "createdAt": "2020-04-14T13:46:35Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheResourceProcessor.java", "diffHunk": "@@ -0,0 +1,153 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.deployment;\n+\n+import static org.jboss.jandex.DotName.createSimple;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.Type;\n+import org.jetbrains.annotations.NotNull;\n+\n+import io.quarkus.arc.deployment.UnremovableBeanBuildItem;\n+import io.quarkus.arc.processor.BeanInfo;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.ApplicationIndexBuildItem;\n+import io.quarkus.deployment.builditem.BytecodeTransformerBuildItem;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.hibernate.orm.deployment.AdditionalJpaModelBuildItem;\n+import io.quarkus.hibernate.orm.deployment.HibernateEnhancersRegisteredBuildItem;\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheCompanion;\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheEntity;\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheEntityBase;\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheRepository;\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheRepositoryBase;\n+import io.quarkus.hibernate.orm.panache.kotlin.runtime.JpaOperations;\n+import io.quarkus.panache.common.deployment.EntityField;\n+import io.quarkus.panache.common.deployment.EntityModel;\n+import io.quarkus.panache.common.deployment.MetamodelInfo;\n+import io.quarkus.panache.common.deployment.PanacheFieldAccessEnhancer;\n+import io.quarkus.panache.common.deployment.PanacheRepositoryEnhancer;\n+\n+public final class KotlinPanacheResourceProcessor {\n+\n+    private static final Set<DotName> UNREMOVABLE_BEANS = Collections.singleton(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3MzE2MA=="}, "originalCommit": {"oid": "3d983cf17d53e85e89b2323ab4d6f5d6cd10b1ae"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE1MjI2Nw==", "bodyText": "If it's in the Java side, then OK, let's keep it :)", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r408152267", "createdAt": "2020-04-14T13:51:30Z", "author": {"login": "geoand"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheResourceProcessor.java", "diffHunk": "@@ -0,0 +1,153 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.deployment;\n+\n+import static org.jboss.jandex.DotName.createSimple;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.Type;\n+import org.jetbrains.annotations.NotNull;\n+\n+import io.quarkus.arc.deployment.UnremovableBeanBuildItem;\n+import io.quarkus.arc.processor.BeanInfo;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.ApplicationIndexBuildItem;\n+import io.quarkus.deployment.builditem.BytecodeTransformerBuildItem;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.hibernate.orm.deployment.AdditionalJpaModelBuildItem;\n+import io.quarkus.hibernate.orm.deployment.HibernateEnhancersRegisteredBuildItem;\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheCompanion;\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheEntity;\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheEntityBase;\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheRepository;\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheRepositoryBase;\n+import io.quarkus.hibernate.orm.panache.kotlin.runtime.JpaOperations;\n+import io.quarkus.panache.common.deployment.EntityField;\n+import io.quarkus.panache.common.deployment.EntityModel;\n+import io.quarkus.panache.common.deployment.MetamodelInfo;\n+import io.quarkus.panache.common.deployment.PanacheFieldAccessEnhancer;\n+import io.quarkus.panache.common.deployment.PanacheRepositoryEnhancer;\n+\n+public final class KotlinPanacheResourceProcessor {\n+\n+    private static final Set<DotName> UNREMOVABLE_BEANS = Collections.singleton(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3MzE2MA=="}, "originalCommit": {"oid": "3d983cf17d53e85e89b2323ab4d6f5d6cd10b1ae"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjE0OTk0OnYy", "diffSide": "RIGHT", "path": "extensions/panache/hibernate-orm-panache-kotlin/runtime/src/test/kotlin/io/quarkus/hibernate/orm/panache/kotlin/runtime/TestAnalogs.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNToyMjozOFrOGE-o0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzo1MDozM1rOGFPl4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3Mzc0NA==", "bodyText": "To be removed I assume?", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r407873744", "createdAt": "2020-04-14T05:22:38Z", "author": {"login": "geoand"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/runtime/src/test/kotlin/io/quarkus/hibernate/orm/panache/kotlin/runtime/TestAnalogs.kt", "diffHunk": "@@ -0,0 +1,90 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.runtime\n+\n+\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheCompanion\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheEntityBase\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheQuery\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheRepositoryBase\n+import org.junit.jupiter.api.Assertions.assertTrue\n+import org.junit.jupiter.api.Test\n+import java.lang.reflect.Modifier\n+\n+class TestAnalogs {\n+    @Test\n+    fun testJpaOperations() {\n+        compare(map(io.quarkus.hibernate.orm.panache.runtime.JpaOperations::class.java), map(JpaOperations::class.java))\n+    }\n+\n+    @Test\n+    fun testPanacheQuery() {\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheQuery::class.java), map(PanacheQuery::class.java))\n+    }\n+\n+    @Test\n+    fun testPanacheEntityBase() {\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheEntityBase::class.java, true), map(PanacheCompanion::class.java),\n+                listOf(\"findByIdOptional(arg0:Object, arg1:LockModeType)\",\n+                        \"findByIdOptional(arg0:Object)\",\n+                        \"deleteById(arg0:Object)\"))\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheEntityBase::class.java), map(PanacheEntityBase::class.java))\n+    }\n+\n+    @Test\n+    fun testPanacheRepositoryBase() {\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheRepositoryBase::class.java), map(PanacheRepositoryBase::class.java))\n+    }\n+\n+/*\n+    @Test\n+    fun testPanacheEntity() {\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheEntity::class.java), map(PanacheEntity::class))\n+    }\n+\n+    private fun map(type: KClass<PanacheEntity>): MutableList<String> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d983cf17d53e85e89b2323ab4d6f5d6cd10b1ae"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE0NzY1NA==", "bodyText": "The scope might be reduced.  We're debating how much needs to be cloned in to the kotlin side of the world and how much should be shared from a common module.", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r408147654", "createdAt": "2020-04-14T13:45:20Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/runtime/src/test/kotlin/io/quarkus/hibernate/orm/panache/kotlin/runtime/TestAnalogs.kt", "diffHunk": "@@ -0,0 +1,90 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.runtime\n+\n+\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheCompanion\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheEntityBase\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheQuery\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheRepositoryBase\n+import org.junit.jupiter.api.Assertions.assertTrue\n+import org.junit.jupiter.api.Test\n+import java.lang.reflect.Modifier\n+\n+class TestAnalogs {\n+    @Test\n+    fun testJpaOperations() {\n+        compare(map(io.quarkus.hibernate.orm.panache.runtime.JpaOperations::class.java), map(JpaOperations::class.java))\n+    }\n+\n+    @Test\n+    fun testPanacheQuery() {\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheQuery::class.java), map(PanacheQuery::class.java))\n+    }\n+\n+    @Test\n+    fun testPanacheEntityBase() {\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheEntityBase::class.java, true), map(PanacheCompanion::class.java),\n+                listOf(\"findByIdOptional(arg0:Object, arg1:LockModeType)\",\n+                        \"findByIdOptional(arg0:Object)\",\n+                        \"deleteById(arg0:Object)\"))\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheEntityBase::class.java), map(PanacheEntityBase::class.java))\n+    }\n+\n+    @Test\n+    fun testPanacheRepositoryBase() {\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheRepositoryBase::class.java), map(PanacheRepositoryBase::class.java))\n+    }\n+\n+/*\n+    @Test\n+    fun testPanacheEntity() {\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheEntity::class.java), map(PanacheEntity::class))\n+    }\n+\n+    private fun map(type: KClass<PanacheEntity>): MutableList<String> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3Mzc0NA=="}, "originalCommit": {"oid": "3d983cf17d53e85e89b2323ab4d6f5d6cd10b1ae"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE1MTUyMg==", "bodyText": "Gotcha", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r408151522", "createdAt": "2020-04-14T13:50:33Z", "author": {"login": "geoand"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/runtime/src/test/kotlin/io/quarkus/hibernate/orm/panache/kotlin/runtime/TestAnalogs.kt", "diffHunk": "@@ -0,0 +1,90 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.runtime\n+\n+\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheCompanion\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheEntityBase\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheQuery\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheRepositoryBase\n+import org.junit.jupiter.api.Assertions.assertTrue\n+import org.junit.jupiter.api.Test\n+import java.lang.reflect.Modifier\n+\n+class TestAnalogs {\n+    @Test\n+    fun testJpaOperations() {\n+        compare(map(io.quarkus.hibernate.orm.panache.runtime.JpaOperations::class.java), map(JpaOperations::class.java))\n+    }\n+\n+    @Test\n+    fun testPanacheQuery() {\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheQuery::class.java), map(PanacheQuery::class.java))\n+    }\n+\n+    @Test\n+    fun testPanacheEntityBase() {\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheEntityBase::class.java, true), map(PanacheCompanion::class.java),\n+                listOf(\"findByIdOptional(arg0:Object, arg1:LockModeType)\",\n+                        \"findByIdOptional(arg0:Object)\",\n+                        \"deleteById(arg0:Object)\"))\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheEntityBase::class.java), map(PanacheEntityBase::class.java))\n+    }\n+\n+    @Test\n+    fun testPanacheRepositoryBase() {\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheRepositoryBase::class.java), map(PanacheRepositoryBase::class.java))\n+    }\n+\n+/*\n+    @Test\n+    fun testPanacheEntity() {\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheEntity::class.java), map(PanacheEntity::class))\n+    }\n+\n+    private fun map(type: KClass<PanacheEntity>): MutableList<String> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3Mzc0NA=="}, "originalCommit": {"oid": "3d983cf17d53e85e89b2323ab4d6f5d6cd10b1ae"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjE1MDQ2OnYy", "diffSide": "RIGHT", "path": "extensions/panache/hibernate-orm-panache-kotlin/runtime/src/test/kotlin/io/quarkus/hibernate/orm/panache/kotlin/runtime/TestAnalogs.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNToyMjo1MVrOGE-pGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjoyMjo1N1rOGJC0GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3MzgxOQ==", "bodyText": "Is this test disabled for a specific reason?", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r407873819", "createdAt": "2020-04-14T05:22:51Z", "author": {"login": "geoand"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/runtime/src/test/kotlin/io/quarkus/hibernate/orm/panache/kotlin/runtime/TestAnalogs.kt", "diffHunk": "@@ -0,0 +1,90 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.runtime\n+\n+\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheCompanion\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheEntityBase\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheQuery\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheRepositoryBase\n+import org.junit.jupiter.api.Assertions.assertTrue\n+import org.junit.jupiter.api.Test\n+import java.lang.reflect.Modifier\n+\n+class TestAnalogs {\n+    @Test\n+    fun testJpaOperations() {\n+        compare(map(io.quarkus.hibernate.orm.panache.runtime.JpaOperations::class.java), map(JpaOperations::class.java))\n+    }\n+\n+    @Test\n+    fun testPanacheQuery() {\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheQuery::class.java), map(PanacheQuery::class.java))\n+    }\n+\n+    @Test\n+    fun testPanacheEntityBase() {\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheEntityBase::class.java, true), map(PanacheCompanion::class.java),\n+                listOf(\"findByIdOptional(arg0:Object, arg1:LockModeType)\",\n+                        \"findByIdOptional(arg0:Object)\",\n+                        \"deleteById(arg0:Object)\"))\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheEntityBase::class.java), map(PanacheEntityBase::class.java))\n+    }\n+\n+    @Test\n+    fun testPanacheRepositoryBase() {\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheRepositoryBase::class.java), map(PanacheRepositoryBase::class.java))\n+    }\n+\n+/*\n+    @Test\n+    fun testPanacheEntity() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d983cf17d53e85e89b2323ab4d6f5d6cd10b1ae"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzMTQyNQ==", "bodyText": "Only that I'd forgotten I'd disabled it because it was leading to so much debug output at the time.  Reenabled, though.", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r408131425", "createdAt": "2020-04-14T13:22:34Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/runtime/src/test/kotlin/io/quarkus/hibernate/orm/panache/kotlin/runtime/TestAnalogs.kt", "diffHunk": "@@ -0,0 +1,90 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.runtime\n+\n+\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheCompanion\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheEntityBase\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheQuery\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheRepositoryBase\n+import org.junit.jupiter.api.Assertions.assertTrue\n+import org.junit.jupiter.api.Test\n+import java.lang.reflect.Modifier\n+\n+class TestAnalogs {\n+    @Test\n+    fun testJpaOperations() {\n+        compare(map(io.quarkus.hibernate.orm.panache.runtime.JpaOperations::class.java), map(JpaOperations::class.java))\n+    }\n+\n+    @Test\n+    fun testPanacheQuery() {\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheQuery::class.java), map(PanacheQuery::class.java))\n+    }\n+\n+    @Test\n+    fun testPanacheEntityBase() {\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheEntityBase::class.java, true), map(PanacheCompanion::class.java),\n+                listOf(\"findByIdOptional(arg0:Object, arg1:LockModeType)\",\n+                        \"findByIdOptional(arg0:Object)\",\n+                        \"deleteById(arg0:Object)\"))\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheEntityBase::class.java), map(PanacheEntityBase::class.java))\n+    }\n+\n+    @Test\n+    fun testPanacheRepositoryBase() {\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheRepositoryBase::class.java), map(PanacheRepositoryBase::class.java))\n+    }\n+\n+/*\n+    @Test\n+    fun testPanacheEntity() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3MzgxOQ=="}, "originalCommit": {"oid": "3d983cf17d53e85e89b2323ab4d6f5d6cd10b1ae"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzNjQ3Mw==", "bodyText": "Mmm, it still appears disabled here. Commented out.", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r412136473", "createdAt": "2020-04-21T12:22:57Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/runtime/src/test/kotlin/io/quarkus/hibernate/orm/panache/kotlin/runtime/TestAnalogs.kt", "diffHunk": "@@ -0,0 +1,90 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.runtime\n+\n+\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheCompanion\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheEntityBase\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheQuery\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheRepositoryBase\n+import org.junit.jupiter.api.Assertions.assertTrue\n+import org.junit.jupiter.api.Test\n+import java.lang.reflect.Modifier\n+\n+class TestAnalogs {\n+    @Test\n+    fun testJpaOperations() {\n+        compare(map(io.quarkus.hibernate.orm.panache.runtime.JpaOperations::class.java), map(JpaOperations::class.java))\n+    }\n+\n+    @Test\n+    fun testPanacheQuery() {\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheQuery::class.java), map(PanacheQuery::class.java))\n+    }\n+\n+    @Test\n+    fun testPanacheEntityBase() {\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheEntityBase::class.java, true), map(PanacheCompanion::class.java),\n+                listOf(\"findByIdOptional(arg0:Object, arg1:LockModeType)\",\n+                        \"findByIdOptional(arg0:Object)\",\n+                        \"deleteById(arg0:Object)\"))\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheEntityBase::class.java), map(PanacheEntityBase::class.java))\n+    }\n+\n+    @Test\n+    fun testPanacheRepositoryBase() {\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheRepositoryBase::class.java), map(PanacheRepositoryBase::class.java))\n+    }\n+\n+/*\n+    @Test\n+    fun testPanacheEntity() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3MzgxOQ=="}, "originalCommit": {"oid": "3d983cf17d53e85e89b2323ab4d6f5d6cd10b1ae"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDc0MTE1OnYy", "diffSide": "RIGHT", "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheRepositoryClassVisitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjoxNTozOVrOGJChGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjo0NTo1MVrOGP-pHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzMTYxMQ==", "bodyText": "Don't repositories have an Id type parameter too?", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r412131611", "createdAt": "2020-04-21T12:15:39Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheRepositoryClassVisitor.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.deployment;\n+\n+import static io.quarkus.gizmo.Gizmo.ASM_API_VERSION;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.CLASS_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.ID_TYPE_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.JPA_OPERATIONS;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.OBJECT_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.PANACHE_ENTITY_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.PANACHE_REPOSITORY_BASE_DOTNAME;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.PANACHE_REPOSITORY_BASE_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.PANACHE_REPOSITORY_SIGNATURE;\n+import static io.quarkus.panache.common.deployment.PanacheRepositoryEnhancer.PanacheRepositoryClassVisitor.findEntityTypeArgumentsForPanacheRepository;\n+import static org.jboss.jandex.DotName.createSimple;\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.INVOKESTATIC;\n+\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.regex.Pattern;\n+\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.MethodInfo;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Type;\n+\n+import io.quarkus.gizmo.Gizmo;\n+import io.quarkus.panache.common.deployment.JandexUtil;\n+\n+class KotlinPanacheRepositoryClassVisitor extends ClassVisitor {\n+\n+    public static final Pattern DEFAULT_IMPLS = Pattern.compile(\".*PanacheRepository.*\\\\$DefaultImpls\");\n+    private final Map<String, MethodInfo> bridgeMethods = new TreeMap<>();\n+    private final IndexView indexView;\n+    private org.objectweb.asm.Type entityType;\n+    private String entitySignature;\n+\n+    public KotlinPanacheRepositoryClassVisitor(String className, ClassVisitor outputClassVisitor, IndexView indexView) {\n+        super(Gizmo.ASM_API_VERSION, outputClassVisitor);\n+        this.indexView = indexView;\n+        indexView.getClassByName(createSimple(className))\n+                .methods()\n+                .forEach(method -> {\n+                    if (method.hasAnnotation(JandexUtil.DOTNAME_GENERATE_BRIDGE)) {\n+                        bridgeMethods.put(method.name() + JandexUtil.getDescriptor(method,\n+                                m -> m.equals(\"Entity\") ? entitySignature : null), method);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24bd042f774536364ea0dd480ae083bace194dbb"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwODE1Ng==", "bodyText": "Up.", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r419408156", "createdAt": "2020-05-04T12:45:51Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheRepositoryClassVisitor.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.deployment;\n+\n+import static io.quarkus.gizmo.Gizmo.ASM_API_VERSION;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.CLASS_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.ID_TYPE_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.JPA_OPERATIONS;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.OBJECT_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.PANACHE_ENTITY_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.PANACHE_REPOSITORY_BASE_DOTNAME;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.PANACHE_REPOSITORY_BASE_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.PANACHE_REPOSITORY_SIGNATURE;\n+import static io.quarkus.panache.common.deployment.PanacheRepositoryEnhancer.PanacheRepositoryClassVisitor.findEntityTypeArgumentsForPanacheRepository;\n+import static org.jboss.jandex.DotName.createSimple;\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.INVOKESTATIC;\n+\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.regex.Pattern;\n+\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.MethodInfo;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Type;\n+\n+import io.quarkus.gizmo.Gizmo;\n+import io.quarkus.panache.common.deployment.JandexUtil;\n+\n+class KotlinPanacheRepositoryClassVisitor extends ClassVisitor {\n+\n+    public static final Pattern DEFAULT_IMPLS = Pattern.compile(\".*PanacheRepository.*\\\\$DefaultImpls\");\n+    private final Map<String, MethodInfo> bridgeMethods = new TreeMap<>();\n+    private final IndexView indexView;\n+    private org.objectweb.asm.Type entityType;\n+    private String entitySignature;\n+\n+    public KotlinPanacheRepositoryClassVisitor(String className, ClassVisitor outputClassVisitor, IndexView indexView) {\n+        super(Gizmo.ASM_API_VERSION, outputClassVisitor);\n+        this.indexView = indexView;\n+        indexView.getClassByName(createSimple(className))\n+                .methods()\n+                .forEach(method -> {\n+                    if (method.hasAnnotation(JandexUtil.DOTNAME_GENERATE_BRIDGE)) {\n+                        bridgeMethods.put(method.name() + JandexUtil.getDescriptor(method,\n+                                m -> m.equals(\"Entity\") ? entitySignature : null), method);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzMTYxMQ=="}, "originalCommit": {"oid": "24bd042f774536364ea0dd480ae083bace194dbb"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDc4MjE3OnYy", "diffSide": "RIGHT", "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/JandexUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjoyNDo0NlrOGJC45A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODoxNjowNVrOGOLL_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzNzcwMA==", "bodyText": "This can't work, as it ignores type arguments. I've already removed this method two times because it's incorrect and lures people into thinking it will work when it does not. In both cases I didn't need that method.", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r412137700", "createdAt": "2020-04-21T12:24:46Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/JandexUtil.java", "diffHunk": "@@ -346,6 +347,23 @@ private static void unbox(MethodVisitor mv, String owner, String methodName, Str\n         mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, owner, methodName, \"()\" + returnTypeSignature, false);\n     }\n \n+    public static MethodInfo findMethod(ClassInfo classInfo, MethodInfo methodInfo) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24bd042f774536364ea0dd480ae083bace194dbb"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxNjU0MQ==", "bodyText": "No longer used.  removed.", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r417516541", "createdAt": "2020-04-29T18:16:05Z", "author": {"login": "evanchooly"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/JandexUtil.java", "diffHunk": "@@ -346,6 +347,23 @@ private static void unbox(MethodVisitor mv, String owner, String methodName, Str\n         mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, owner, methodName, \"()\" + returnTypeSignature, false);\n     }\n \n+    public static MethodInfo findMethod(ClassInfo classInfo, MethodInfo methodInfo) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzNzcwMA=="}, "originalCommit": {"oid": "24bd042f774536364ea0dd480ae083bace194dbb"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTk4NTAyOnYy", "diffSide": "RIGHT", "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheCompanionClassVisitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNzo0NzozNFrOGOz57A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNToxNzo1MFrOGPMigQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4MzY2MA==", "bodyText": "I think this needs to be have some comments on what it does", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r418183660", "createdAt": "2020-04-30T17:47:34Z", "author": {"login": "geoand"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheCompanionClassVisitor.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.deployment;\n+\n+import static io.quarkus.gizmo.Gizmo.ASM_API_VERSION;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.CLASS_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.JPA_OPERATIONS;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.OBJECT_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.PANACHE_COMPANION_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.PANACHE_ENTITY_SIGNATURE;\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.INVOKESTATIC;\n+\n+import java.util.Map;\n+import java.util.StringJoiner;\n+import java.util.TreeMap;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.MethodInfo;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+\n+import io.quarkus.panache.common.deployment.JandexUtil;\n+\n+class KotlinPanacheCompanionClassVisitor extends ClassVisitor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "115352609d61cd7c1ed6e1e3a80cffe4f8bf98f2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU4NzI2NQ==", "bodyText": "Great, thanks!", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r418587265", "createdAt": "2020-05-01T15:17:50Z", "author": {"login": "geoand"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheCompanionClassVisitor.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.deployment;\n+\n+import static io.quarkus.gizmo.Gizmo.ASM_API_VERSION;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.CLASS_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.JPA_OPERATIONS;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.OBJECT_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.PANACHE_COMPANION_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.PANACHE_ENTITY_SIGNATURE;\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.INVOKESTATIC;\n+\n+import java.util.Map;\n+import java.util.StringJoiner;\n+import java.util.TreeMap;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.MethodInfo;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+\n+import io.quarkus.panache.common.deployment.JandexUtil;\n+\n+class KotlinPanacheCompanionClassVisitor extends ClassVisitor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4MzY2MA=="}, "originalCommit": {"oid": "115352609d61cd7c1ed6e1e3a80cffe4f8bf98f2"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTk4ODYzOnYy", "diffSide": "RIGHT", "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheEntityClassVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNzo0ODo0MFrOGOz8SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNzo0ODo0MFrOGOz8SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4NDI2NA==", "bodyText": "Looks like this removes the final modifier among other things, but it would good to have some comments", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r418184264", "createdAt": "2020-04-30T17:48:40Z", "author": {"login": "geoand"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheEntityClassVisitor.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.deployment;\n+\n+import java.util.List;\n+import java.util.StringJoiner;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+\n+import io.quarkus.panache.common.deployment.EntityField;\n+import io.quarkus.panache.common.deployment.EntityModel;\n+import io.quarkus.panache.common.deployment.MetamodelInfo;\n+import io.quarkus.panache.common.deployment.PanacheEntityEnhancer;\n+import io.quarkus.panache.common.deployment.PanacheMethodCustomizer;\n+\n+class KotlinPanacheEntityClassVisitor extends PanacheEntityEnhancer.PanacheEntityClassVisitor<EntityField> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "115352609d61cd7c1ed6e1e3a80cffe4f8bf98f2"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTk5ODg1OnYy", "diffSide": "RIGHT", "path": "integration-tests/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNzo1MToyMVrOGO0CuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDo0OTo1N1rOGPLzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4NTkxMw==", "bodyText": "I think we need to get rid of this \ud83d\ude09", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r418185913", "createdAt": "2020-04-30T17:51:21Z", "author": {"login": "geoand"}, "path": "integration-tests/pom.xml", "diffHunk": "@@ -17,7 +17,7 @@\n \n     <properties>\n         <maven.deploy.skip>true</maven.deploy.skip>\n-        <quarkus.build.skip>${skipTests}</quarkus.build.skip>\n+<!--        <quarkus.build.skip>${skipTests}</quarkus.build.skip>-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "115352609d61cd7c1ed6e1e3a80cffe4f8bf98f2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU3NTE1NQ==", "bodyText": "oops.  yeah.  usually i catch that.  ;)", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r418575155", "createdAt": "2020-05-01T14:49:57Z", "author": {"login": "evanchooly"}, "path": "integration-tests/pom.xml", "diffHunk": "@@ -17,7 +17,7 @@\n \n     <properties>\n         <maven.deploy.skip>true</maven.deploy.skip>\n-        <quarkus.build.skip>${skipTests}</quarkus.build.skip>\n+<!--        <quarkus.build.skip>${skipTests}</quarkus.build.skip>-->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4NTkxMw=="}, "originalCommit": {"oid": "115352609d61cd7c1ed6e1e3a80cffe4f8bf98f2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDYzNDQwOnYy", "diffSide": "RIGHT", "path": "core/runtime/src/main/java/io/quarkus/runtime/ApplicationLifecycleManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjo0MToxNlrOGP-ebA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDowOTozNFrOGQCHGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwNTQyMA==", "bodyText": "WTF happened here? ;)", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r419405420", "createdAt": "2020-05-04T12:41:16Z", "author": {"login": "FroMage"}, "path": "core/runtime/src/main/java/io/quarkus/runtime/ApplicationLifecycleManager.java", "diffHunk": "@@ -27,7 +27,7 @@\n  * The {@link Application} class is responsible for starting and stopping the application,\n  * but nothing else. This class can be used to run both persistent applications that will run\n  * till they receive a signal, and command mode applications that will run until the main method\n- * returns. This class registers a shutdown hook to properly shut down the application, and handles\n+ * returns. This class registers a shut\u00aadown hook to properly shut down the application, and handles", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7223c581d64871fdde2a241609a23593500c0f45"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2NDk4NQ==", "bodyText": "oops.  i switch between windows and mac regularly and the muscle sometimes lags.  :)", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r419464985", "createdAt": "2020-05-04T14:09:34Z", "author": {"login": "evanchooly"}, "path": "core/runtime/src/main/java/io/quarkus/runtime/ApplicationLifecycleManager.java", "diffHunk": "@@ -27,7 +27,7 @@\n  * The {@link Application} class is responsible for starting and stopping the application,\n  * but nothing else. This class can be used to run both persistent applications that will run\n  * till they receive a signal, and command mode applications that will run until the main method\n- * returns. This class registers a shutdown hook to properly shut down the application, and handles\n+ * returns. This class registers a shut\u00aadown hook to properly shut down the application, and handles", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwNTQyMA=="}, "originalCommit": {"oid": "7223c581d64871fdde2a241609a23593500c0f45"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3592, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}