{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5MDAxMTc5", "number": 12179, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMTowNjowMVrOEkxvPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMTowNzoxNlrOEkxwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTk5MTAzOnYy", "diffSide": "RIGHT", "path": "test-framework/common/src/main/java/io/quarkus/test/common/TestResourceManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMTowNjowMVrOHT6dww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzoxNzoxM1rOHUMuaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY0Mjg4Mw==", "bodyText": "This needs to be shutdown in a finally block", "url": "https://github.com/quarkusio/quarkus/pull/12179#discussion_r490642883", "createdAt": "2020-09-18T01:06:01Z", "author": {"login": "stuartwdouglas"}, "path": "test-framework/common/src/main/java/io/quarkus/test/common/TestResourceManager.java", "diffHunk": "@@ -46,17 +64,41 @@ public void init() {\n \n     public Map<String, String> start() {\n         started = true;\n-        Map<String, String> ret = new HashMap<>();\n-        for (TestResourceEntry entry : testResourceEntries) {\n-            try {\n-                Map<String, String> start = entry.getTestResource().start();\n-                if (start != null) {\n-                    ret.putAll(start);\n+        Map<String, String> ret = new ConcurrentHashMap<>();\n+\n+        ExecutorService executor = newExecutor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4282979056c2819bcf98e428ff948f7631cb6da"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk0MjA1OQ==", "bodyText": "Well spotted! Thanks :)\nI'll fix it along with the other issue you mentioned after you respond", "url": "https://github.com/quarkusio/quarkus/pull/12179#discussion_r490942059", "createdAt": "2020-09-18T13:17:13Z", "author": {"login": "Nunalves"}, "path": "test-framework/common/src/main/java/io/quarkus/test/common/TestResourceManager.java", "diffHunk": "@@ -46,17 +64,41 @@ public void init() {\n \n     public Map<String, String> start() {\n         started = true;\n-        Map<String, String> ret = new HashMap<>();\n-        for (TestResourceEntry entry : testResourceEntries) {\n-            try {\n-                Map<String, String> start = entry.getTestResource().start();\n-                if (start != null) {\n-                    ret.putAll(start);\n+        Map<String, String> ret = new ConcurrentHashMap<>();\n+\n+        ExecutorService executor = newExecutor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY0Mjg4Mw=="}, "originalCommit": {"oid": "b4282979056c2819bcf98e428ff948f7631cb6da"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTk5MzQ0OnYy", "diffSide": "RIGHT", "path": "test-framework/common/src/main/java/io/quarkus/test/common/TestResourceManager.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMTowNzoxNlrOHT6fLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxODo1NzoyNlrOHarLIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY0MzI0NA==", "bodyText": "I would just use a fixed pool sized to the number of tasks", "url": "https://github.com/quarkusio/quarkus/pull/12179#discussion_r490643244", "createdAt": "2020-09-18T01:07:16Z", "author": {"login": "stuartwdouglas"}, "path": "test-framework/common/src/main/java/io/quarkus/test/common/TestResourceManager.java", "diffHunk": "@@ -69,8 +111,22 @@ public void init() {\n         return ret;\n     }\n \n+    private void waitForAllFutures(List<Future> startFutures) {\n+        for (Future future : startFutures) {\n+            try {\n+                future.get();\n+            } catch (CancellationException | InterruptedException | ExecutionException e) {\n+                throw new RuntimeException(\"Error waiting for test resource future to finish.\", e);\n+            }\n+        }\n+    }\n+\n+    private ExecutorService newExecutor() {\n+        return Executors.newWorkStealingPool();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4282979056c2819bcf98e428ff948f7631cb6da"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkzNDA3Nw==", "bodyText": "I thought of doing that. I even searched to see if there was any shared thread pool that would be indicated to use here. I can change it, but shouldn't we have a limit at least? The first test to run will be the one starting up all the different test resources (that should never be something like 100, i don't think so, but you never know :p)\nWhat do you think? fixed pool size to the number of tasks with a limit to the number of CPUs?", "url": "https://github.com/quarkusio/quarkus/pull/12179#discussion_r490934077", "createdAt": "2020-09-18T13:03:52Z", "author": {"login": "Nunalves"}, "path": "test-framework/common/src/main/java/io/quarkus/test/common/TestResourceManager.java", "diffHunk": "@@ -69,8 +111,22 @@ public void init() {\n         return ret;\n     }\n \n+    private void waitForAllFutures(List<Future> startFutures) {\n+        for (Future future : startFutures) {\n+            try {\n+                future.get();\n+            } catch (CancellationException | InterruptedException | ExecutionException e) {\n+                throw new RuntimeException(\"Error waiting for test resource future to finish.\", e);\n+            }\n+        }\n+    }\n+\n+    private ExecutorService newExecutor() {\n+        return Executors.newWorkStealingPool();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY0MzI0NA=="}, "originalCommit": {"oid": "b4282979056c2819bcf98e428ff948f7631cb6da"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU4Mjk5Mg==", "bodyText": "I agree limiting it to the number of CPUs is a good idea.", "url": "https://github.com/quarkusio/quarkus/pull/12179#discussion_r497582992", "createdAt": "2020-09-30T15:02:56Z", "author": {"login": "gsmet"}, "path": "test-framework/common/src/main/java/io/quarkus/test/common/TestResourceManager.java", "diffHunk": "@@ -69,8 +111,22 @@ public void init() {\n         return ret;\n     }\n \n+    private void waitForAllFutures(List<Future> startFutures) {\n+        for (Future future : startFutures) {\n+            try {\n+                future.get();\n+            } catch (CancellationException | InterruptedException | ExecutionException e) {\n+                throw new RuntimeException(\"Error waiting for test resource future to finish.\", e);\n+            }\n+        }\n+    }\n+\n+    private ExecutorService newExecutor() {\n+        return Executors.newWorkStealingPool();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY0MzI0NA=="}, "originalCommit": {"oid": "b4282979056c2819bcf98e428ff948f7631cb6da"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzczMjM4Ng==", "bodyText": "This ^ plus maybe a system property to override the default?", "url": "https://github.com/quarkusio/quarkus/pull/12179#discussion_r497732386", "createdAt": "2020-09-30T18:57:26Z", "author": {"login": "famod"}, "path": "test-framework/common/src/main/java/io/quarkus/test/common/TestResourceManager.java", "diffHunk": "@@ -69,8 +111,22 @@ public void init() {\n         return ret;\n     }\n \n+    private void waitForAllFutures(List<Future> startFutures) {\n+        for (Future future : startFutures) {\n+            try {\n+                future.get();\n+            } catch (CancellationException | InterruptedException | ExecutionException e) {\n+                throw new RuntimeException(\"Error waiting for test resource future to finish.\", e);\n+            }\n+        }\n+    }\n+\n+    private ExecutorService newExecutor() {\n+        return Executors.newWorkStealingPool();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY0MzI0NA=="}, "originalCommit": {"oid": "b4282979056c2819bcf98e428ff948f7631cb6da"}, "originalPosition": 114}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 323, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}