{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NzMwODc5", "number": 13154, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNzoxNDozNFrOE9gNEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNzoxNDozNFrOE9gNEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTI2MjI0OnYy", "diffSide": "RIGHT", "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/NativeTestExtension.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNzoxNDozNFrOH6OTgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwODozMzowN1rOH6QoXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgxMzgyNw==", "bodyText": "I don't think this can be supported as it is a build time property only", "url": "https://github.com/quarkusio/quarkus/pull/13154#discussion_r530813827", "createdAt": "2020-11-26T07:14:34Z", "author": {"login": "geoand"}, "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/NativeTestExtension.java", "diffHunk": "@@ -112,26 +82,117 @@ private void ensureNoInjectAnnotationIsUsed(Class<?> testClass) {\n \n     }\n \n-    /**\n-     * We don't support {@link TestProfile} in native tests because we don't want to incur the native binary rebuild cost\n-     * which is very high.\n-     *\n-     * This method looks up the annotations via Jandex in order to try and prevent the image generation if there are\n-     * any cases of {@link NativeImageTest} being used with {@link TestProfile}\n-     */\n-    private void ensureNoTestProfile(Class<?> testClass) {\n-        Index index = TestClassIndexer.readIndex(testClass);\n-        List<AnnotationInstance> instances = index.getAnnotations(DotName.createSimple(NativeImageTest.class.getName()));\n-        for (AnnotationInstance instance : instances) {\n-            if (instance.target().kind() != AnnotationTarget.Kind.CLASS) {\n-                continue;\n+    private ExtensionState ensureStarted(ExtensionContext extensionContext) {\n+        Class<?> testClass = extensionContext.getRequiredTestClass();\n+        ensureNoInjectAnnotationIsUsed(testClass);\n+\n+        ExtensionContext root = extensionContext.getRoot();\n+        ExtensionContext.Store store = root.getStore(ExtensionContext.Namespace.GLOBAL);\n+        ExtensionState state = store.get(ExtensionState.class.getName(), ExtensionState.class);\n+        TestProfile annotation = testClass.getAnnotation(TestProfile.class);\n+        Class<? extends QuarkusTestProfile> selectedProfile = null;\n+        if (annotation != null) {\n+            selectedProfile = annotation.value();\n+        }\n+        boolean wrongProfile = !Objects.equals(selectedProfile, quarkusTestProfile);\n+        if ((state == null && !failedBoot) || wrongProfile) {\n+            if (wrongProfile) {\n+                if (state != null) {\n+                    try {\n+                        state.close();\n+                    } catch (Throwable throwable) {\n+                        throwable.printStackTrace();\n+                    }\n+                }\n             }\n-            ClassInfo testClassInfo = instance.target().asClass();\n-            if (testClassInfo.classAnnotation(DotName.createSimple(TestProfile.class.getName())) != null) {\n-                throw new JUnitException(\n-                        \"@TestProfile is not supported in NativeImageTest tests. Offending class is \" + testClassInfo.name());\n+            PropertyTestUtil.setLogFileProperty();\n+            try {\n+                state = doNativeStart(extensionContext, selectedProfile);\n+                store.put(ExtensionState.class.getName(), state);\n+\n+            } catch (Throwable e) {\n+                failedBoot = true;\n+                firstException = e;\n             }\n         }\n+        return state;\n+    }\n+\n+    private ExtensionState doNativeStart(ExtensionContext context, Class<? extends QuarkusTestProfile> profile)\n+            throws Throwable {\n+        quarkusTestProfile = profile;\n+        TestResourceManager testResourceManager = null;\n+        try {\n+            Class<?> requiredTestClass = context.getRequiredTestClass();\n+\n+            Map<String, String> sysPropRestore = new HashMap<>();\n+            sysPropRestore.put(ProfileManager.QUARKUS_TEST_PROFILE_PROP,\n+                    System.getProperty(ProfileManager.QUARKUS_TEST_PROFILE_PROP));\n+\n+            QuarkusTestProfile profileInstance = null;\n+            final Map<String, String> additional = new HashMap<>();\n+            if (profile != null) {\n+                profileInstance = profile.newInstance();\n+                additional.putAll(profileInstance.getConfigOverrides());\n+                final Set<Class<?>> enabledAlternatives = profileInstance.getEnabledAlternatives();\n+                if (!enabledAlternatives.isEmpty()) {\n+                    additional.put(\"quarkus.arc.selected-alternatives\", enabledAlternatives.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9aa9f869a616e2ef700b59d6e71ebb30abd68dcc"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg0MzIxMw==", "bodyText": "Good point, but I think the current solution is not that bad: If enabledAlternatives is a non-empty set containing anything different than what the test app was compiled with, the test app will fail at boot. I think that's better than ignoring silently or warning. The user should do a conscious decision what to do in such a case. If he wants to test with the alternatives in JVM mode and ignore them in the native mode, he can create subclass of his QuarkusTestProfile for the native mode in which he returns an empty set of alternatives.\nDo you think warn+ignore would be better?", "url": "https://github.com/quarkusio/quarkus/pull/13154#discussion_r530843213", "createdAt": "2020-11-26T08:17:45Z", "author": {"login": "ppalaga"}, "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/NativeTestExtension.java", "diffHunk": "@@ -112,26 +82,117 @@ private void ensureNoInjectAnnotationIsUsed(Class<?> testClass) {\n \n     }\n \n-    /**\n-     * We don't support {@link TestProfile} in native tests because we don't want to incur the native binary rebuild cost\n-     * which is very high.\n-     *\n-     * This method looks up the annotations via Jandex in order to try and prevent the image generation if there are\n-     * any cases of {@link NativeImageTest} being used with {@link TestProfile}\n-     */\n-    private void ensureNoTestProfile(Class<?> testClass) {\n-        Index index = TestClassIndexer.readIndex(testClass);\n-        List<AnnotationInstance> instances = index.getAnnotations(DotName.createSimple(NativeImageTest.class.getName()));\n-        for (AnnotationInstance instance : instances) {\n-            if (instance.target().kind() != AnnotationTarget.Kind.CLASS) {\n-                continue;\n+    private ExtensionState ensureStarted(ExtensionContext extensionContext) {\n+        Class<?> testClass = extensionContext.getRequiredTestClass();\n+        ensureNoInjectAnnotationIsUsed(testClass);\n+\n+        ExtensionContext root = extensionContext.getRoot();\n+        ExtensionContext.Store store = root.getStore(ExtensionContext.Namespace.GLOBAL);\n+        ExtensionState state = store.get(ExtensionState.class.getName(), ExtensionState.class);\n+        TestProfile annotation = testClass.getAnnotation(TestProfile.class);\n+        Class<? extends QuarkusTestProfile> selectedProfile = null;\n+        if (annotation != null) {\n+            selectedProfile = annotation.value();\n+        }\n+        boolean wrongProfile = !Objects.equals(selectedProfile, quarkusTestProfile);\n+        if ((state == null && !failedBoot) || wrongProfile) {\n+            if (wrongProfile) {\n+                if (state != null) {\n+                    try {\n+                        state.close();\n+                    } catch (Throwable throwable) {\n+                        throwable.printStackTrace();\n+                    }\n+                }\n             }\n-            ClassInfo testClassInfo = instance.target().asClass();\n-            if (testClassInfo.classAnnotation(DotName.createSimple(TestProfile.class.getName())) != null) {\n-                throw new JUnitException(\n-                        \"@TestProfile is not supported in NativeImageTest tests. Offending class is \" + testClassInfo.name());\n+            PropertyTestUtil.setLogFileProperty();\n+            try {\n+                state = doNativeStart(extensionContext, selectedProfile);\n+                store.put(ExtensionState.class.getName(), state);\n+\n+            } catch (Throwable e) {\n+                failedBoot = true;\n+                firstException = e;\n             }\n         }\n+        return state;\n+    }\n+\n+    private ExtensionState doNativeStart(ExtensionContext context, Class<? extends QuarkusTestProfile> profile)\n+            throws Throwable {\n+        quarkusTestProfile = profile;\n+        TestResourceManager testResourceManager = null;\n+        try {\n+            Class<?> requiredTestClass = context.getRequiredTestClass();\n+\n+            Map<String, String> sysPropRestore = new HashMap<>();\n+            sysPropRestore.put(ProfileManager.QUARKUS_TEST_PROFILE_PROP,\n+                    System.getProperty(ProfileManager.QUARKUS_TEST_PROFILE_PROP));\n+\n+            QuarkusTestProfile profileInstance = null;\n+            final Map<String, String> additional = new HashMap<>();\n+            if (profile != null) {\n+                profileInstance = profile.newInstance();\n+                additional.putAll(profileInstance.getConfigOverrides());\n+                final Set<Class<?>> enabledAlternatives = profileInstance.getEnabledAlternatives();\n+                if (!enabledAlternatives.isEmpty()) {\n+                    additional.put(\"quarkus.arc.selected-alternatives\", enabledAlternatives.stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgxMzgyNw=="}, "originalCommit": {"oid": "9aa9f869a616e2ef700b59d6e71ebb30abd68dcc"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg1MTkzNA==", "bodyText": "You are probably right, Let's keep it for now and see.", "url": "https://github.com/quarkusio/quarkus/pull/13154#discussion_r530851934", "createdAt": "2020-11-26T08:33:07Z", "author": {"login": "geoand"}, "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/NativeTestExtension.java", "diffHunk": "@@ -112,26 +82,117 @@ private void ensureNoInjectAnnotationIsUsed(Class<?> testClass) {\n \n     }\n \n-    /**\n-     * We don't support {@link TestProfile} in native tests because we don't want to incur the native binary rebuild cost\n-     * which is very high.\n-     *\n-     * This method looks up the annotations via Jandex in order to try and prevent the image generation if there are\n-     * any cases of {@link NativeImageTest} being used with {@link TestProfile}\n-     */\n-    private void ensureNoTestProfile(Class<?> testClass) {\n-        Index index = TestClassIndexer.readIndex(testClass);\n-        List<AnnotationInstance> instances = index.getAnnotations(DotName.createSimple(NativeImageTest.class.getName()));\n-        for (AnnotationInstance instance : instances) {\n-            if (instance.target().kind() != AnnotationTarget.Kind.CLASS) {\n-                continue;\n+    private ExtensionState ensureStarted(ExtensionContext extensionContext) {\n+        Class<?> testClass = extensionContext.getRequiredTestClass();\n+        ensureNoInjectAnnotationIsUsed(testClass);\n+\n+        ExtensionContext root = extensionContext.getRoot();\n+        ExtensionContext.Store store = root.getStore(ExtensionContext.Namespace.GLOBAL);\n+        ExtensionState state = store.get(ExtensionState.class.getName(), ExtensionState.class);\n+        TestProfile annotation = testClass.getAnnotation(TestProfile.class);\n+        Class<? extends QuarkusTestProfile> selectedProfile = null;\n+        if (annotation != null) {\n+            selectedProfile = annotation.value();\n+        }\n+        boolean wrongProfile = !Objects.equals(selectedProfile, quarkusTestProfile);\n+        if ((state == null && !failedBoot) || wrongProfile) {\n+            if (wrongProfile) {\n+                if (state != null) {\n+                    try {\n+                        state.close();\n+                    } catch (Throwable throwable) {\n+                        throwable.printStackTrace();\n+                    }\n+                }\n             }\n-            ClassInfo testClassInfo = instance.target().asClass();\n-            if (testClassInfo.classAnnotation(DotName.createSimple(TestProfile.class.getName())) != null) {\n-                throw new JUnitException(\n-                        \"@TestProfile is not supported in NativeImageTest tests. Offending class is \" + testClassInfo.name());\n+            PropertyTestUtil.setLogFileProperty();\n+            try {\n+                state = doNativeStart(extensionContext, selectedProfile);\n+                store.put(ExtensionState.class.getName(), state);\n+\n+            } catch (Throwable e) {\n+                failedBoot = true;\n+                firstException = e;\n             }\n         }\n+        return state;\n+    }\n+\n+    private ExtensionState doNativeStart(ExtensionContext context, Class<? extends QuarkusTestProfile> profile)\n+            throws Throwable {\n+        quarkusTestProfile = profile;\n+        TestResourceManager testResourceManager = null;\n+        try {\n+            Class<?> requiredTestClass = context.getRequiredTestClass();\n+\n+            Map<String, String> sysPropRestore = new HashMap<>();\n+            sysPropRestore.put(ProfileManager.QUARKUS_TEST_PROFILE_PROP,\n+                    System.getProperty(ProfileManager.QUARKUS_TEST_PROFILE_PROP));\n+\n+            QuarkusTestProfile profileInstance = null;\n+            final Map<String, String> additional = new HashMap<>();\n+            if (profile != null) {\n+                profileInstance = profile.newInstance();\n+                additional.putAll(profileInstance.getConfigOverrides());\n+                final Set<Class<?>> enabledAlternatives = profileInstance.getEnabledAlternatives();\n+                if (!enabledAlternatives.isEmpty()) {\n+                    additional.put(\"quarkus.arc.selected-alternatives\", enabledAlternatives.stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgxMzgyNw=="}, "originalCommit": {"oid": "9aa9f869a616e2ef700b59d6e71ebb30abd68dcc"}, "originalPosition": 178}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4027, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}