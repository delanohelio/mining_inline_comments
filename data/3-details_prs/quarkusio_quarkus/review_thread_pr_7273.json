{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MDUxMDcy", "number": 7273, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyMToxNlrODhIIFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMTozMTozNVrODhfX7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDYyNzQyOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyMToxNlrOFrt3AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjo1Mjo1OFrOFsH9sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NDQ0OA==", "bodyText": "Should it be Spring Cloud Config Server?", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381384448", "createdAt": "2020-02-19T16:21:16Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Config Server", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81de75e80092d8df8fd1080c9fb4291adfc4fc9a"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxMjE0Nw==", "bodyText": "Sure, it sounds better", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381812147", "createdAt": "2020-02-20T06:52:58Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Config Server", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NDQ0OA=="}, "originalCommit": {"oid": "81de75e80092d8df8fd1080c9fb4291adfc4fc9a"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDYzMDYzOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyMjowMVrOFrt5Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyMjowMVrOFrt5Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NDk2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To stand up a Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].\n          \n          \n            \n            To stand up the Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381384963", "createdAt": "2020-02-19T16:22:01Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Config Server\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide explains how your Quarkus application can read configuration properties at runtime from the https://cloud.spring.io/spring-cloud-config[Spring Cloud Config Server].\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+\n+== Stand up a Config Server\n+\n+To stand up a Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81de75e80092d8df8fd1080c9fb4291adfc4fc9a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDYzMzYzOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyMjo0MFrOFrt6ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyMjo0MFrOFrt6ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NTQxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The Quarkus maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n          \n          \n            \n            The Quarkus Maven plugin automatically generated a `GreetingResource` JAX-RS resource in the", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381385411", "createdAt": "2020-02-19T16:22:40Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Config Server\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide explains how your Quarkus application can read configuration properties at runtime from the https://cloud.spring.io/spring-cloud-config[Spring Cloud Config Server].\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+\n+== Stand up a Config Server\n+\n+To stand up a Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].\n+The end result of that process is a running Config Server that will provide the `Hello world` value for a configuration property named `message` when the application querying the server is named `a-bootiful-client`.\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-cloud-config-quickstart \\\n+    -DclassName=\"org.acme.spring.cloud.config.client.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-cloud-config-client\"\n+cd spring-cloud-config-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-cloud-config-client` extension.\n+\n+== GreetingController\n+\n+The Quarkus maven plugin automatically generated a `GreetingResource` JAX-RS resource in the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81de75e80092d8df8fd1080c9fb4291adfc4fc9a"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDYzNTEzOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyMzowMlrOFrt7tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyMzowMlrOFrt7tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NTY1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            As we want to use configuration properties read from the Config Server, we will update the `GreetingResource` to inject the `message` property. The updated code will look like this:\n          \n          \n            \n            As we want to use configuration properties obtained from the Config Server, we will update the `GreetingResource` to inject the `message` property. The updated code will look like this:\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381385655", "createdAt": "2020-02-19T16:23:02Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Config Server\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide explains how your Quarkus application can read configuration properties at runtime from the https://cloud.spring.io/spring-cloud-config[Spring Cloud Config Server].\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+\n+== Stand up a Config Server\n+\n+To stand up a Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].\n+The end result of that process is a running Config Server that will provide the `Hello world` value for a configuration property named `message` when the application querying the server is named `a-bootiful-client`.\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-cloud-config-quickstart \\\n+    -DclassName=\"org.acme.spring.cloud.config.client.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-cloud-config-client\"\n+cd spring-cloud-config-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-cloud-config-client` extension.\n+\n+== GreetingController\n+\n+The Quarkus maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n+`src/main/java/org/acme/spring/cloud/config/client/GreetingResource.java` file that looks like:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+As we want to use configuration properties read from the Config Server, we will update the `GreetingResource` to inject the `message` property. The updated code will look like this:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81de75e80092d8df8fd1080c9fb4291adfc4fc9a"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDY0MDA2OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyNDoxMVrOFrt-xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMTowOTowM1rOFsPUsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NjQzOA==", "bodyText": "quarkus.scccc\n\nHum. I totally missed in the initial commit but it looks very cryptic. Can't we find a better name for this? Or is it well known in the Spring world?\nquarkus.spring-cloud-config would be better as a root, no?", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381386438", "createdAt": "2020-02-19T16:24:11Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Config Server\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide explains how your Quarkus application can read configuration properties at runtime from the https://cloud.spring.io/spring-cloud-config[Spring Cloud Config Server].\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+\n+== Stand up a Config Server\n+\n+To stand up a Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].\n+The end result of that process is a running Config Server that will provide the `Hello world` value for a configuration property named `message` when the application querying the server is named `a-bootiful-client`.\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-cloud-config-quickstart \\\n+    -DclassName=\"org.acme.spring.cloud.config.client.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-cloud-config-client\"\n+cd spring-cloud-config-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-cloud-config-client` extension.\n+\n+== GreetingController\n+\n+The Quarkus maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n+`src/main/java/org/acme/spring/cloud/config/client/GreetingResource.java` file that looks like:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+As we want to use configuration properties read from the Config Server, we will update the `GreetingResource` to inject the `message` property. The updated code will look like this:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @ConfigProperty(name = \"message\", defaultValue=\"hello default\")\n+    String message;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return message;\n+    }\n+}\n+----\n+\n+== Configuring the application\n+\n+Quarkus provides various configuration knobs under the `quarkus.scccc` root. For the purposes of this guide, our Quarkus application is going to be configured in `application.properties` as follows:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81de75e80092d8df8fd1080c9fb4291adfc4fc9a"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgwMzIwNA==", "bodyText": "This is just something I picked so it wouldn't be super long to type. I'm definitely not tied to this, so I am open to ideas. @gastaldi what's your take?", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381803204", "createdAt": "2020-02-20T06:36:04Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Config Server\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide explains how your Quarkus application can read configuration properties at runtime from the https://cloud.spring.io/spring-cloud-config[Spring Cloud Config Server].\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+\n+== Stand up a Config Server\n+\n+To stand up a Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].\n+The end result of that process is a running Config Server that will provide the `Hello world` value for a configuration property named `message` when the application querying the server is named `a-bootiful-client`.\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-cloud-config-quickstart \\\n+    -DclassName=\"org.acme.spring.cloud.config.client.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-cloud-config-client\"\n+cd spring-cloud-config-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-cloud-config-client` extension.\n+\n+== GreetingController\n+\n+The Quarkus maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n+`src/main/java/org/acme/spring/cloud/config/client/GreetingResource.java` file that looks like:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+As we want to use configuration properties read from the Config Server, we will update the `GreetingResource` to inject the `message` property. The updated code will look like this:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @ConfigProperty(name = \"message\", defaultValue=\"hello default\")\n+    String message;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return message;\n+    }\n+}\n+----\n+\n+== Configuring the application\n+\n+Quarkus provides various configuration knobs under the `quarkus.scccc` root. For the purposes of this guide, our Quarkus application is going to be configured in `application.properties` as follows:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NjQzOA=="}, "originalCommit": {"oid": "81de75e80092d8df8fd1080c9fb4291adfc4fc9a"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxMjA3MA==", "bodyText": "I went with your suggestion. But if anyone has any other suggestion, I am willing to hear it :)", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381812070", "createdAt": "2020-02-20T06:52:43Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Config Server\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide explains how your Quarkus application can read configuration properties at runtime from the https://cloud.spring.io/spring-cloud-config[Spring Cloud Config Server].\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+\n+== Stand up a Config Server\n+\n+To stand up a Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].\n+The end result of that process is a running Config Server that will provide the `Hello world` value for a configuration property named `message` when the application querying the server is named `a-bootiful-client`.\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-cloud-config-quickstart \\\n+    -DclassName=\"org.acme.spring.cloud.config.client.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-cloud-config-client\"\n+cd spring-cloud-config-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-cloud-config-client` extension.\n+\n+== GreetingController\n+\n+The Quarkus maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n+`src/main/java/org/acme/spring/cloud/config/client/GreetingResource.java` file that looks like:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+As we want to use configuration properties read from the Config Server, we will update the `GreetingResource` to inject the `message` property. The updated code will look like this:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @ConfigProperty(name = \"message\", defaultValue=\"hello default\")\n+    String message;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return message;\n+    }\n+}\n+----\n+\n+== Configuring the application\n+\n+Quarkus provides various configuration knobs under the `quarkus.scccc` root. For the purposes of this guide, our Quarkus application is going to be configured in `application.properties` as follows:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NjQzOA=="}, "originalCommit": {"oid": "81de75e80092d8df8fd1080c9fb4291adfc4fc9a"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkzMjcyMA==", "bodyText": "+1", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381932720", "createdAt": "2020-02-20T11:09:03Z", "author": {"login": "gastaldi"}, "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Config Server\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide explains how your Quarkus application can read configuration properties at runtime from the https://cloud.spring.io/spring-cloud-config[Spring Cloud Config Server].\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+\n+== Stand up a Config Server\n+\n+To stand up a Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].\n+The end result of that process is a running Config Server that will provide the `Hello world` value for a configuration property named `message` when the application querying the server is named `a-bootiful-client`.\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-cloud-config-quickstart \\\n+    -DclassName=\"org.acme.spring.cloud.config.client.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-cloud-config-client\"\n+cd spring-cloud-config-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-cloud-config-client` extension.\n+\n+== GreetingController\n+\n+The Quarkus maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n+`src/main/java/org/acme/spring/cloud/config/client/GreetingResource.java` file that looks like:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+As we want to use configuration properties read from the Config Server, we will update the `GreetingResource` to inject the `message` property. The updated code will look like this:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @ConfigProperty(name = \"message\", defaultValue=\"hello default\")\n+    String message;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return message;\n+    }\n+}\n+----\n+\n+== Configuring the application\n+\n+Quarkus provides various configuration knobs under the `quarkus.scccc` root. For the purposes of this guide, our Quarkus application is going to be configured in `application.properties` as follows:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NjQzOA=="}, "originalCommit": {"oid": "81de75e80092d8df8fd1080c9fb4291adfc4fc9a"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDY0MjEwOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyNDo0M1rOFruAGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMTozMjozN1rOFsP-uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4Njc3OA==", "bodyText": "is there any value in using uri? I would have used url.", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381386778", "createdAt": "2020-02-19T16:24:43Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Config Server\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide explains how your Quarkus application can read configuration properties at runtime from the https://cloud.spring.io/spring-cloud-config[Spring Cloud Config Server].\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+\n+== Stand up a Config Server\n+\n+To stand up a Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].\n+The end result of that process is a running Config Server that will provide the `Hello world` value for a configuration property named `message` when the application querying the server is named `a-bootiful-client`.\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-cloud-config-quickstart \\\n+    -DclassName=\"org.acme.spring.cloud.config.client.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-cloud-config-client\"\n+cd spring-cloud-config-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-cloud-config-client` extension.\n+\n+== GreetingController\n+\n+The Quarkus maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n+`src/main/java/org/acme/spring/cloud/config/client/GreetingResource.java` file that looks like:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+As we want to use configuration properties read from the Config Server, we will update the `GreetingResource` to inject the `message` property. The updated code will look like this:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @ConfigProperty(name = \"message\", defaultValue=\"hello default\")\n+    String message;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return message;\n+    }\n+}\n+----\n+\n+== Configuring the application\n+\n+Quarkus provides various configuration knobs under the `quarkus.scccc` root. For the purposes of this guide, our Quarkus application is going to be configured in `application.properties` as follows:\n+\n+[source,properties]\n+----\n+# use the same name as the application name that was configured when standing up the Config Server\n+quarkus.application.name=a-bootiful-client\n+# enable retrieval of configuration from the Config Server - this is off by default\n+quarkus.scccc.enabled=true\n+# configure the URI where the Config Server listens to HTTP requests - this could have been left out since http://localhost:8888 is the default\n+quarkus.scccc.uri=http://localhost:8888", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81de75e80092d8df8fd1080c9fb4291adfc4fc9a"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxMTk2MA==", "bodyText": "Yeah, that makes sense", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381811960", "createdAt": "2020-02-20T06:52:16Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Config Server\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide explains how your Quarkus application can read configuration properties at runtime from the https://cloud.spring.io/spring-cloud-config[Spring Cloud Config Server].\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+\n+== Stand up a Config Server\n+\n+To stand up a Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].\n+The end result of that process is a running Config Server that will provide the `Hello world` value for a configuration property named `message` when the application querying the server is named `a-bootiful-client`.\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-cloud-config-quickstart \\\n+    -DclassName=\"org.acme.spring.cloud.config.client.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-cloud-config-client\"\n+cd spring-cloud-config-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-cloud-config-client` extension.\n+\n+== GreetingController\n+\n+The Quarkus maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n+`src/main/java/org/acme/spring/cloud/config/client/GreetingResource.java` file that looks like:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+As we want to use configuration properties read from the Config Server, we will update the `GreetingResource` to inject the `message` property. The updated code will look like this:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @ConfigProperty(name = \"message\", defaultValue=\"hello default\")\n+    String message;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return message;\n+    }\n+}\n+----\n+\n+== Configuring the application\n+\n+Quarkus provides various configuration knobs under the `quarkus.scccc` root. For the purposes of this guide, our Quarkus application is going to be configured in `application.properties` as follows:\n+\n+[source,properties]\n+----\n+# use the same name as the application name that was configured when standing up the Config Server\n+quarkus.application.name=a-bootiful-client\n+# enable retrieval of configuration from the Config Server - this is off by default\n+quarkus.scccc.enabled=true\n+# configure the URI where the Config Server listens to HTTP requests - this could have been left out since http://localhost:8888 is the default\n+quarkus.scccc.uri=http://localhost:8888", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4Njc3OA=="}, "originalCommit": {"oid": "81de75e80092d8df8fd1080c9fb4291adfc4fc9a"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk0MjQxNQ==", "bodyText": "I don't think you have changed that one?", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381942415", "createdAt": "2020-02-20T11:30:09Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Config Server\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide explains how your Quarkus application can read configuration properties at runtime from the https://cloud.spring.io/spring-cloud-config[Spring Cloud Config Server].\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+\n+== Stand up a Config Server\n+\n+To stand up a Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].\n+The end result of that process is a running Config Server that will provide the `Hello world` value for a configuration property named `message` when the application querying the server is named `a-bootiful-client`.\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-cloud-config-quickstart \\\n+    -DclassName=\"org.acme.spring.cloud.config.client.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-cloud-config-client\"\n+cd spring-cloud-config-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-cloud-config-client` extension.\n+\n+== GreetingController\n+\n+The Quarkus maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n+`src/main/java/org/acme/spring/cloud/config/client/GreetingResource.java` file that looks like:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+As we want to use configuration properties read from the Config Server, we will update the `GreetingResource` to inject the `message` property. The updated code will look like this:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @ConfigProperty(name = \"message\", defaultValue=\"hello default\")\n+    String message;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return message;\n+    }\n+}\n+----\n+\n+== Configuring the application\n+\n+Quarkus provides various configuration knobs under the `quarkus.scccc` root. For the purposes of this guide, our Quarkus application is going to be configured in `application.properties` as follows:\n+\n+[source,properties]\n+----\n+# use the same name as the application name that was configured when standing up the Config Server\n+quarkus.application.name=a-bootiful-client\n+# enable retrieval of configuration from the Config Server - this is off by default\n+quarkus.scccc.enabled=true\n+# configure the URI where the Config Server listens to HTTP requests - this could have been left out since http://localhost:8888 is the default\n+quarkus.scccc.uri=http://localhost:8888", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4Njc3OA=="}, "originalCommit": {"oid": "81de75e80092d8df8fd1080c9fb4291adfc4fc9a"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk0MzQ4MA==", "bodyText": "ah yes... I changed the name root but not the property itself... I'm not smart enough to keep track of 2 changes in my head :P", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381943480", "createdAt": "2020-02-20T11:32:37Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Config Server\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide explains how your Quarkus application can read configuration properties at runtime from the https://cloud.spring.io/spring-cloud-config[Spring Cloud Config Server].\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+\n+== Stand up a Config Server\n+\n+To stand up a Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].\n+The end result of that process is a running Config Server that will provide the `Hello world` value for a configuration property named `message` when the application querying the server is named `a-bootiful-client`.\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-cloud-config-quickstart \\\n+    -DclassName=\"org.acme.spring.cloud.config.client.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-cloud-config-client\"\n+cd spring-cloud-config-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-cloud-config-client` extension.\n+\n+== GreetingController\n+\n+The Quarkus maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n+`src/main/java/org/acme/spring/cloud/config/client/GreetingResource.java` file that looks like:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+As we want to use configuration properties read from the Config Server, we will update the `GreetingResource` to inject the `message` property. The updated code will look like this:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @ConfigProperty(name = \"message\", defaultValue=\"hello default\")\n+    String message;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return message;\n+    }\n+}\n+----\n+\n+== Configuring the application\n+\n+Quarkus provides various configuration knobs under the `quarkus.scccc` root. For the purposes of this guide, our Quarkus application is going to be configured in `application.properties` as follows:\n+\n+[source,properties]\n+----\n+# use the same name as the application name that was configured when standing up the Config Server\n+quarkus.application.name=a-bootiful-client\n+# enable retrieval of configuration from the Config Server - this is off by default\n+quarkus.scccc.enabled=true\n+# configure the URI where the Config Server listens to HTTP requests - this could have been left out since http://localhost:8888 is the default\n+quarkus.scccc.uri=http://localhost:8888", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4Njc3OA=="}, "originalCommit": {"oid": "81de75e80092d8df8fd1080c9fb4291adfc4fc9a"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDY0NTQ3OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyNToyOFrOFruCHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjo1MjowM1rOFsH8kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NzI5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The result should be: `Hello world`.\n          \n          \n            \n            The result should be: `Hello world` as it is the value obtained from the Spring Cloud Config server.", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381387293", "createdAt": "2020-02-19T16:25:28Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Config Server\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide explains how your Quarkus application can read configuration properties at runtime from the https://cloud.spring.io/spring-cloud-config[Spring Cloud Config Server].\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+\n+== Stand up a Config Server\n+\n+To stand up a Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].\n+The end result of that process is a running Config Server that will provide the `Hello world` value for a configuration property named `message` when the application querying the server is named `a-bootiful-client`.\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-cloud-config-quickstart \\\n+    -DclassName=\"org.acme.spring.cloud.config.client.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-cloud-config-client\"\n+cd spring-cloud-config-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-cloud-config-client` extension.\n+\n+== GreetingController\n+\n+The Quarkus maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n+`src/main/java/org/acme/spring/cloud/config/client/GreetingResource.java` file that looks like:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+As we want to use configuration properties read from the Config Server, we will update the `GreetingResource` to inject the `message` property. The updated code will look like this:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @ConfigProperty(name = \"message\", defaultValue=\"hello default\")\n+    String message;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return message;\n+    }\n+}\n+----\n+\n+== Configuring the application\n+\n+Quarkus provides various configuration knobs under the `quarkus.scccc` root. For the purposes of this guide, our Quarkus application is going to be configured in `application.properties` as follows:\n+\n+[source,properties]\n+----\n+# use the same name as the application name that was configured when standing up the Config Server\n+quarkus.application.name=a-bootiful-client\n+# enable retrieval of configuration from the Config Server - this is off by default\n+quarkus.scccc.enabled=true\n+# configure the URI where the Config Server listens to HTTP requests - this could have been left out since http://localhost:8888 is the default\n+quarkus.scccc.uri=http://localhost:8888\n+----\n+\n+== Package and run the application\n+\n+Run the application with: `./mvnw compile quarkus:dev`.\n+Open your browser to http://localhost:8080/greeting.\n+\n+The result should be: `Hello world`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81de75e80092d8df8fd1080c9fb4291adfc4fc9a"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxMTg1OQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381811859", "createdAt": "2020-02-20T06:52:03Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Config Server\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide explains how your Quarkus application can read configuration properties at runtime from the https://cloud.spring.io/spring-cloud-config[Spring Cloud Config Server].\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+\n+== Stand up a Config Server\n+\n+To stand up a Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].\n+The end result of that process is a running Config Server that will provide the `Hello world` value for a configuration property named `message` when the application querying the server is named `a-bootiful-client`.\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-cloud-config-quickstart \\\n+    -DclassName=\"org.acme.spring.cloud.config.client.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-cloud-config-client\"\n+cd spring-cloud-config-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-cloud-config-client` extension.\n+\n+== GreetingController\n+\n+The Quarkus maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n+`src/main/java/org/acme/spring/cloud/config/client/GreetingResource.java` file that looks like:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+As we want to use configuration properties read from the Config Server, we will update the `GreetingResource` to inject the `message` property. The updated code will look like this:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @ConfigProperty(name = \"message\", defaultValue=\"hello default\")\n+    String message;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return message;\n+    }\n+}\n+----\n+\n+== Configuring the application\n+\n+Quarkus provides various configuration knobs under the `quarkus.scccc` root. For the purposes of this guide, our Quarkus application is going to be configured in `application.properties` as follows:\n+\n+[source,properties]\n+----\n+# use the same name as the application name that was configured when standing up the Config Server\n+quarkus.application.name=a-bootiful-client\n+# enable retrieval of configuration from the Config Server - this is off by default\n+quarkus.scccc.enabled=true\n+# configure the URI where the Config Server listens to HTTP requests - this could have been left out since http://localhost:8888 is the default\n+quarkus.scccc.uri=http://localhost:8888\n+----\n+\n+== Package and run the application\n+\n+Run the application with: `./mvnw compile quarkus:dev`.\n+Open your browser to http://localhost:8080/greeting.\n+\n+The result should be: `Hello world`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NzI5Mw=="}, "originalCommit": {"oid": "81de75e80092d8df8fd1080c9fb4291adfc4fc9a"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDY0NzI4OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyNTo1NFrOFruDPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyNTo1NFrOFruDPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NzU4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Quarkus support has more Spring compatibility features. See the following guides for more details:\n          \n          \n            \n            Quarkus has more Spring compatibility features. See the following guides for more details:", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381387580", "createdAt": "2020-02-19T16:25:54Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Config Server\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide explains how your Quarkus application can read configuration properties at runtime from the https://cloud.spring.io/spring-cloud-config[Spring Cloud Config Server].\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+\n+== Stand up a Config Server\n+\n+To stand up a Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].\n+The end result of that process is a running Config Server that will provide the `Hello world` value for a configuration property named `message` when the application querying the server is named `a-bootiful-client`.\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-cloud-config-quickstart \\\n+    -DclassName=\"org.acme.spring.cloud.config.client.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-cloud-config-client\"\n+cd spring-cloud-config-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-cloud-config-client` extension.\n+\n+== GreetingController\n+\n+The Quarkus maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n+`src/main/java/org/acme/spring/cloud/config/client/GreetingResource.java` file that looks like:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+As we want to use configuration properties read from the Config Server, we will update the `GreetingResource` to inject the `message` property. The updated code will look like this:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @ConfigProperty(name = \"message\", defaultValue=\"hello default\")\n+    String message;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return message;\n+    }\n+}\n+----\n+\n+== Configuring the application\n+\n+Quarkus provides various configuration knobs under the `quarkus.scccc` root. For the purposes of this guide, our Quarkus application is going to be configured in `application.properties` as follows:\n+\n+[source,properties]\n+----\n+# use the same name as the application name that was configured when standing up the Config Server\n+quarkus.application.name=a-bootiful-client\n+# enable retrieval of configuration from the Config Server - this is off by default\n+quarkus.scccc.enabled=true\n+# configure the URI where the Config Server listens to HTTP requests - this could have been left out since http://localhost:8888 is the default\n+quarkus.scccc.uri=http://localhost:8888\n+----\n+\n+== Package and run the application\n+\n+Run the application with: `./mvnw compile quarkus:dev`.\n+Open your browser to http://localhost:8080/greeting.\n+\n+The result should be: `Hello world`.\n+\n+== Run the application as a native executable\n+\n+You can of course create a native image using the instructions of the link:building-native-image[Building a native executable guide].\n+\n+== More Spring guides\n+\n+Quarkus support has more Spring compatibility features. See the following guides for more details:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81de75e80092d8df8fd1080c9fb4291adfc4fc9a"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDY1MDA1OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyNjozM1rOFruE-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjo1MTo0NlrOFsH7-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4ODAyNw==", "bodyText": "Should you add this guide in the other guides now that we have it?", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381388027", "createdAt": "2020-02-19T16:26:33Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Config Server\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide explains how your Quarkus application can read configuration properties at runtime from the https://cloud.spring.io/spring-cloud-config[Spring Cloud Config Server].\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+\n+== Stand up a Config Server\n+\n+To stand up a Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].\n+The end result of that process is a running Config Server that will provide the `Hello world` value for a configuration property named `message` when the application querying the server is named `a-bootiful-client`.\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-cloud-config-quickstart \\\n+    -DclassName=\"org.acme.spring.cloud.config.client.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-cloud-config-client\"\n+cd spring-cloud-config-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-cloud-config-client` extension.\n+\n+== GreetingController\n+\n+The Quarkus maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n+`src/main/java/org/acme/spring/cloud/config/client/GreetingResource.java` file that looks like:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+As we want to use configuration properties read from the Config Server, we will update the `GreetingResource` to inject the `message` property. The updated code will look like this:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @ConfigProperty(name = \"message\", defaultValue=\"hello default\")\n+    String message;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return message;\n+    }\n+}\n+----\n+\n+== Configuring the application\n+\n+Quarkus provides various configuration knobs under the `quarkus.scccc` root. For the purposes of this guide, our Quarkus application is going to be configured in `application.properties` as follows:\n+\n+[source,properties]\n+----\n+# use the same name as the application name that was configured when standing up the Config Server\n+quarkus.application.name=a-bootiful-client\n+# enable retrieval of configuration from the Config Server - this is off by default\n+quarkus.scccc.enabled=true\n+# configure the URI where the Config Server listens to HTTP requests - this could have been left out since http://localhost:8888 is the default\n+quarkus.scccc.uri=http://localhost:8888\n+----\n+\n+== Package and run the application\n+\n+Run the application with: `./mvnw compile quarkus:dev`.\n+Open your browser to http://localhost:8080/greeting.\n+\n+The result should be: `Hello world`.\n+\n+== Run the application as a native executable\n+\n+You can of course create a native image using the instructions of the link:building-native-image[Building a native executable guide].\n+\n+== More Spring guides\n+\n+Quarkus support has more Spring compatibility features. See the following guides for more details:\n+\n+* link:spring-di[Quarkus - Extension for Spring DI]\n+* link:spring-data-jpa[Quarkus - Extension for Spring Data JPA]\n+* link:spring-security[Quarkus - Extension for Spring Security]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81de75e80092d8df8fd1080c9fb4291adfc4fc9a"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4OTg4OQ==", "bodyText": "Very good idea!", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381389889", "createdAt": "2020-02-19T16:29:07Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Config Server\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide explains how your Quarkus application can read configuration properties at runtime from the https://cloud.spring.io/spring-cloud-config[Spring Cloud Config Server].\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+\n+== Stand up a Config Server\n+\n+To stand up a Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].\n+The end result of that process is a running Config Server that will provide the `Hello world` value for a configuration property named `message` when the application querying the server is named `a-bootiful-client`.\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-cloud-config-quickstart \\\n+    -DclassName=\"org.acme.spring.cloud.config.client.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-cloud-config-client\"\n+cd spring-cloud-config-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-cloud-config-client` extension.\n+\n+== GreetingController\n+\n+The Quarkus maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n+`src/main/java/org/acme/spring/cloud/config/client/GreetingResource.java` file that looks like:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+As we want to use configuration properties read from the Config Server, we will update the `GreetingResource` to inject the `message` property. The updated code will look like this:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @ConfigProperty(name = \"message\", defaultValue=\"hello default\")\n+    String message;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return message;\n+    }\n+}\n+----\n+\n+== Configuring the application\n+\n+Quarkus provides various configuration knobs under the `quarkus.scccc` root. For the purposes of this guide, our Quarkus application is going to be configured in `application.properties` as follows:\n+\n+[source,properties]\n+----\n+# use the same name as the application name that was configured when standing up the Config Server\n+quarkus.application.name=a-bootiful-client\n+# enable retrieval of configuration from the Config Server - this is off by default\n+quarkus.scccc.enabled=true\n+# configure the URI where the Config Server listens to HTTP requests - this could have been left out since http://localhost:8888 is the default\n+quarkus.scccc.uri=http://localhost:8888\n+----\n+\n+== Package and run the application\n+\n+Run the application with: `./mvnw compile quarkus:dev`.\n+Open your browser to http://localhost:8080/greeting.\n+\n+The result should be: `Hello world`.\n+\n+== Run the application as a native executable\n+\n+You can of course create a native image using the instructions of the link:building-native-image[Building a native executable guide].\n+\n+== More Spring guides\n+\n+Quarkus support has more Spring compatibility features. See the following guides for more details:\n+\n+* link:spring-di[Quarkus - Extension for Spring DI]\n+* link:spring-data-jpa[Quarkus - Extension for Spring Data JPA]\n+* link:spring-security[Quarkus - Extension for Spring Security]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4ODAyNw=="}, "originalCommit": {"oid": "81de75e80092d8df8fd1080c9fb4291adfc4fc9a"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxMTcwNg==", "bodyText": "Done", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381811706", "createdAt": "2020-02-20T06:51:46Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Config Server\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide explains how your Quarkus application can read configuration properties at runtime from the https://cloud.spring.io/spring-cloud-config[Spring Cloud Config Server].\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+\n+== Stand up a Config Server\n+\n+To stand up a Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].\n+The end result of that process is a running Config Server that will provide the `Hello world` value for a configuration property named `message` when the application querying the server is named `a-bootiful-client`.\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-cloud-config-quickstart \\\n+    -DclassName=\"org.acme.spring.cloud.config.client.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-cloud-config-client\"\n+cd spring-cloud-config-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-cloud-config-client` extension.\n+\n+== GreetingController\n+\n+The Quarkus maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n+`src/main/java/org/acme/spring/cloud/config/client/GreetingResource.java` file that looks like:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+As we want to use configuration properties read from the Config Server, we will update the `GreetingResource` to inject the `message` property. The updated code will look like this:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @ConfigProperty(name = \"message\", defaultValue=\"hello default\")\n+    String message;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return message;\n+    }\n+}\n+----\n+\n+== Configuring the application\n+\n+Quarkus provides various configuration knobs under the `quarkus.scccc` root. For the purposes of this guide, our Quarkus application is going to be configured in `application.properties` as follows:\n+\n+[source,properties]\n+----\n+# use the same name as the application name that was configured when standing up the Config Server\n+quarkus.application.name=a-bootiful-client\n+# enable retrieval of configuration from the Config Server - this is off by default\n+quarkus.scccc.enabled=true\n+# configure the URI where the Config Server listens to HTTP requests - this could have been left out since http://localhost:8888 is the default\n+quarkus.scccc.uri=http://localhost:8888\n+----\n+\n+== Package and run the application\n+\n+Run the application with: `./mvnw compile quarkus:dev`.\n+Open your browser to http://localhost:8080/greeting.\n+\n+The result should be: `Hello world`.\n+\n+== Run the application as a native executable\n+\n+You can of course create a native image using the instructions of the link:building-native-image[Building a native executable guide].\n+\n+== More Spring guides\n+\n+Quarkus support has more Spring compatibility features. See the following guides for more details:\n+\n+* link:spring-di[Quarkus - Extension for Spring DI]\n+* link:spring-data-jpa[Quarkus - Extension for Spring Data JPA]\n+* link:spring-security[Quarkus - Extension for Spring Security]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4ODAyNw=="}, "originalCommit": {"oid": "81de75e80092d8df8fd1080c9fb4291adfc4fc9a"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDQzNTkzOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMTozMToyNlrOFsP8nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMTozMToyNlrOFsP8nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk0Mjk0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # configure the URI where the Config Server listens to HTTP requests - this could have been left out since http://localhost:8888 is the default\n          \n          \n            \n            # configure the URL where the Config Server listens to HTTP requests - this could have been left out since http://localhost:8888 is the default", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381942943", "createdAt": "2020-02-20T11:31:26Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Cloud Config Server\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide explains how your Quarkus application can read configuration properties at runtime from the https://cloud.spring.io/spring-cloud-config[Spring Cloud Config Server].\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+\n+== Stand up a Config Server\n+\n+To stand up the Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].\n+The end result of that process is a running Config Server that will provide the `Hello world` value for a configuration property named `message` when the application querying the server is named `a-bootiful-client`.\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-cloud-config-quickstart \\\n+    -DclassName=\"org.acme.spring.cloud.config.client.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-cloud-config-client\"\n+cd spring-cloud-config-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-cloud-config-client` extension.\n+\n+== GreetingController\n+\n+The Quarkus Maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n+`src/main/java/org/acme/spring/cloud/config/client/GreetingResource.java` file that looks like:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+As we want to use configuration properties obtained from the Config Server, we will update the `GreetingResource` to inject the `message` property. The updated code will look like this:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @ConfigProperty(name = \"message\", defaultValue=\"hello default\")\n+    String message;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return message;\n+    }\n+}\n+----\n+\n+== Configuring the application\n+\n+Quarkus provides various configuration knobs under the `quarkus.spring-cloud-config` root. For the purposes of this guide, our Quarkus application is going to be configured in `application.properties` as follows:\n+\n+[source,properties]\n+----\n+# use the same name as the application name that was configured when standing up the Config Server\n+quarkus.application.name=a-bootiful-client\n+# enable retrieval of configuration from the Config Server - this is off by default\n+quarkus.spring-cloud-config.enabled=true\n+# configure the URI where the Config Server listens to HTTP requests - this could have been left out since http://localhost:8888 is the default", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "849956c5403be25541af0e82d1696ae9f8c0bcda"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDQzNjMxOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMTozMTozNVrOFsP82g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMTozMTozNVrOFsP82g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk0MzAwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            quarkus.spring-cloud-config.uri=http://localhost:8888\n          \n          \n            \n            quarkus.spring-cloud-config.url=http://localhost:8888", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381943002", "createdAt": "2020-02-20T11:31:35Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Cloud Config Server\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide explains how your Quarkus application can read configuration properties at runtime from the https://cloud.spring.io/spring-cloud-config[Spring Cloud Config Server].\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+\n+== Stand up a Config Server\n+\n+To stand up the Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].\n+The end result of that process is a running Config Server that will provide the `Hello world` value for a configuration property named `message` when the application querying the server is named `a-bootiful-client`.\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-cloud-config-quickstart \\\n+    -DclassName=\"org.acme.spring.cloud.config.client.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-cloud-config-client\"\n+cd spring-cloud-config-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-cloud-config-client` extension.\n+\n+== GreetingController\n+\n+The Quarkus Maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n+`src/main/java/org/acme/spring/cloud/config/client/GreetingResource.java` file that looks like:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+As we want to use configuration properties obtained from the Config Server, we will update the `GreetingResource` to inject the `message` property. The updated code will look like this:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @ConfigProperty(name = \"message\", defaultValue=\"hello default\")\n+    String message;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return message;\n+    }\n+}\n+----\n+\n+== Configuring the application\n+\n+Quarkus provides various configuration knobs under the `quarkus.spring-cloud-config` root. For the purposes of this guide, our Quarkus application is going to be configured in `application.properties` as follows:\n+\n+[source,properties]\n+----\n+# use the same name as the application name that was configured when standing up the Config Server\n+quarkus.application.name=a-bootiful-client\n+# enable retrieval of configuration from the Config Server - this is off by default\n+quarkus.spring-cloud-config.enabled=true\n+# configure the URI where the Config Server listens to HTTP requests - this could have been left out since http://localhost:8888 is the default\n+quarkus.spring-cloud-config.uri=http://localhost:8888", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "849956c5403be25541af0e82d1696ae9f8c0bcda"}, "originalPosition": 114}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 105, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}