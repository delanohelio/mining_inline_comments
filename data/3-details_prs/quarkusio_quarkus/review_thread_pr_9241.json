{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NzYyMDU5", "number": 9241, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDoyNzo0OFrOD7rXgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDozMDoyOFrOD7rcUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTAzMTA1OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/builditem/FeatureBuildItem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDoyNzo0OFrOGUJaeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDoyNzo0OFrOGUJaeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc3ODkzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String CONSUL_CONFIG = \"config-config\";\n          \n          \n            \n                public static final String CONSUL_CONFIG = \"consul-config\";", "url": "https://github.com/quarkusio/quarkus/pull/9241#discussion_r423778938", "createdAt": "2020-05-12T14:27:48Z", "author": {"login": "gsmet"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/builditem/FeatureBuildItem.java", "diffHunk": "@@ -18,6 +18,7 @@\n     public static final String CACHE = \"cache\";\n     public static final String CDI = \"cdi\";\n     public static final String CONFIG_YAML = \"config-yaml\";\n+    public static final String CONSUL_CONFIG = \"config-config\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca4c61beddd32e1e9c42232ecad67b61d592586e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTAzMzc3OnYy", "diffSide": "RIGHT", "path": "extensions/consul-config/runtime/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDoyODoyNVrOGUJcSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDoyODoyNVrOGUJcSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc3OTQwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <description>Read runtime configuration from Consul Key - Value stor</description>\n          \n          \n            \n                <description>Read runtime configuration from Consul Key - Value store</description>", "url": "https://github.com/quarkusio/quarkus/pull/9241#discussion_r423779403", "createdAt": "2020-05-12T14:28:25Z", "author": {"login": "gsmet"}, "path": "extensions/consul-config/runtime/pom.xml", "diffHunk": "@@ -0,0 +1,79 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-consul-config-parent</artifactId>\n+        <version>999-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>quarkus-consul-config</artifactId>\n+    <name>Quarkus - Consul Config - Runtime</name>\n+    <description>Read runtime configuration from Consul Key - Value stor</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca4c61beddd32e1e9c42232ecad67b61d592586e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTAzODcyOnYy", "diffSide": "RIGHT", "path": "extensions/consul-config/runtime/src/main/java/io/quarkus/consul/config/runtime/ConsulConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDoyOToyOVrOGUJfqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDoyOToyOVrOGUJfqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc4MDI2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * When this is used, the keys that end up in the user configuration are the keys of the of the properties file,\n          \n          \n            \n                 * When this is used, the keys that end up in the user configuration are the keys of the properties file,", "url": "https://github.com/quarkusio/quarkus/pull/9241#discussion_r423780266", "createdAt": "2020-05-12T14:29:29Z", "author": {"login": "gsmet"}, "path": "extensions/consul-config/runtime/src/main/java/io/quarkus/consul/config/runtime/ConsulConfig.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package io.quarkus.consul.config.runtime;\n+\n+import java.net.InetSocketAddress;\n+import java.time.Duration;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import io.quarkus.runtime.annotations.ConfigGroup;\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigPhase;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+\n+@ConfigRoot(name = \"consul-config\", phase = ConfigPhase.BOOTSTRAP)\n+public class ConsulConfig {\n+\n+    /**\n+     * If set to true, the application will attempt to look up the configuration from Consul\n+     */\n+    @ConfigItem(defaultValue = \"false\")\n+    boolean enabled;\n+\n+    /**\n+     * Consul agent related configuration\n+     */\n+    @ConfigItem\n+    AgentConfig agent;\n+\n+    /**\n+     * Common prefix that all keys share when looking up the keys from Consul.\n+     * The prefix is <b>not</b> included in the keys of the user configuration\n+     */\n+    @ConfigItem\n+    Optional<String> prefix;\n+\n+    /**\n+     * Keys whose value is a raw string.\n+     * When this is used, the keys that end up in the user configuration are the keys specified her with '/' replaced by '.'\n+     */\n+    @ConfigItem\n+    Optional<List<String>> rawValueKeys;\n+\n+    /**\n+     * Keys whose value represents a properties file.\n+     * When this is used, the keys that end up in the user configuration are the keys of the of the properties file,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca4c61beddd32e1e9c42232ecad67b61d592586e"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTA0MzM2OnYy", "diffSide": "RIGHT", "path": "extensions/consul-config/runtime/src/main/java/io/quarkus/consul/config/runtime/ConsulConfig.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDozMDoyOFrOGUJivA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODo1MTo1MVrOGUn3Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc4MTA1Mg==", "bodyText": "Don't we need a trustStore configuration? Also might be a good idea to check other extensions for consistency on this.", "url": "https://github.com/quarkusio/quarkus/pull/9241#discussion_r423781052", "createdAt": "2020-05-12T14:30:28Z", "author": {"login": "gsmet"}, "path": "extensions/consul-config/runtime/src/main/java/io/quarkus/consul/config/runtime/ConsulConfig.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package io.quarkus.consul.config.runtime;\n+\n+import java.net.InetSocketAddress;\n+import java.time.Duration;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import io.quarkus.runtime.annotations.ConfigGroup;\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigPhase;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+\n+@ConfigRoot(name = \"consul-config\", phase = ConfigPhase.BOOTSTRAP)\n+public class ConsulConfig {\n+\n+    /**\n+     * If set to true, the application will attempt to look up the configuration from Consul\n+     */\n+    @ConfigItem(defaultValue = \"false\")\n+    boolean enabled;\n+\n+    /**\n+     * Consul agent related configuration\n+     */\n+    @ConfigItem\n+    AgentConfig agent;\n+\n+    /**\n+     * Common prefix that all keys share when looking up the keys from Consul.\n+     * The prefix is <b>not</b> included in the keys of the user configuration\n+     */\n+    @ConfigItem\n+    Optional<String> prefix;\n+\n+    /**\n+     * Keys whose value is a raw string.\n+     * When this is used, the keys that end up in the user configuration are the keys specified her with '/' replaced by '.'\n+     */\n+    @ConfigItem\n+    Optional<List<String>> rawValueKeys;\n+\n+    /**\n+     * Keys whose value represents a properties file.\n+     * When this is used, the keys that end up in the user configuration are the keys of the of the properties file,\n+     * not these keys\n+     */\n+    @ConfigItem\n+    Optional<List<String>> propertiesValueKeys;\n+\n+    /**\n+     * If set to true, the application will not start if any of the configured config sources cannot be located\n+     */\n+    @ConfigItem(defaultValue = \"true\")\n+    boolean failOnMissingKey;\n+\n+    Map<String, ValueType> keysAsMap() {\n+        Map<String, ValueType> result = new LinkedHashMap<>();\n+        if (rawValueKeys.isPresent()) {\n+            for (String key : rawValueKeys.get()) {\n+                result.put(key, ValueType.RAW);\n+            }\n+        }\n+        if (propertiesValueKeys.isPresent()) {\n+            for (String key : propertiesValueKeys.get()) {\n+                result.put(key, ValueType.PROPERTIES);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    @ConfigGroup\n+    public static class AgentConfig {\n+\n+        /**\n+         * Consul agent host\n+         */\n+        @ConfigItem(defaultValue = \"localhost:8500\")\n+        InetSocketAddress hostPort;\n+\n+        /**\n+         * Whether or not to use HTTPS when communicating with the agent\n+         */\n+        @ConfigItem(defaultValue = \"false\")\n+        boolean useHttps;\n+\n+        /**\n+         * Consul token to be provided when authentication is enabled\n+         */\n+        @ConfigItem\n+        Optional<String> token;\n+\n+        /**\n+         * When using HTTPS, whether or not to trust self-signed certificatd\n+         */\n+        @ConfigItem(defaultValue = \"false\")\n+        boolean trustCerts;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca4c61beddd32e1e9c42232ecad67b61d592586e"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc5MDEwNA==", "bodyText": "Yeah, I was planning on looking into it", "url": "https://github.com/quarkusio/quarkus/pull/9241#discussion_r423790104", "createdAt": "2020-05-12T14:42:17Z", "author": {"login": "geoand"}, "path": "extensions/consul-config/runtime/src/main/java/io/quarkus/consul/config/runtime/ConsulConfig.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package io.quarkus.consul.config.runtime;\n+\n+import java.net.InetSocketAddress;\n+import java.time.Duration;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import io.quarkus.runtime.annotations.ConfigGroup;\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigPhase;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+\n+@ConfigRoot(name = \"consul-config\", phase = ConfigPhase.BOOTSTRAP)\n+public class ConsulConfig {\n+\n+    /**\n+     * If set to true, the application will attempt to look up the configuration from Consul\n+     */\n+    @ConfigItem(defaultValue = \"false\")\n+    boolean enabled;\n+\n+    /**\n+     * Consul agent related configuration\n+     */\n+    @ConfigItem\n+    AgentConfig agent;\n+\n+    /**\n+     * Common prefix that all keys share when looking up the keys from Consul.\n+     * The prefix is <b>not</b> included in the keys of the user configuration\n+     */\n+    @ConfigItem\n+    Optional<String> prefix;\n+\n+    /**\n+     * Keys whose value is a raw string.\n+     * When this is used, the keys that end up in the user configuration are the keys specified her with '/' replaced by '.'\n+     */\n+    @ConfigItem\n+    Optional<List<String>> rawValueKeys;\n+\n+    /**\n+     * Keys whose value represents a properties file.\n+     * When this is used, the keys that end up in the user configuration are the keys of the of the properties file,\n+     * not these keys\n+     */\n+    @ConfigItem\n+    Optional<List<String>> propertiesValueKeys;\n+\n+    /**\n+     * If set to true, the application will not start if any of the configured config sources cannot be located\n+     */\n+    @ConfigItem(defaultValue = \"true\")\n+    boolean failOnMissingKey;\n+\n+    Map<String, ValueType> keysAsMap() {\n+        Map<String, ValueType> result = new LinkedHashMap<>();\n+        if (rawValueKeys.isPresent()) {\n+            for (String key : rawValueKeys.get()) {\n+                result.put(key, ValueType.RAW);\n+            }\n+        }\n+        if (propertiesValueKeys.isPresent()) {\n+            for (String key : propertiesValueKeys.get()) {\n+                result.put(key, ValueType.PROPERTIES);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    @ConfigGroup\n+    public static class AgentConfig {\n+\n+        /**\n+         * Consul agent host\n+         */\n+        @ConfigItem(defaultValue = \"localhost:8500\")\n+        InetSocketAddress hostPort;\n+\n+        /**\n+         * Whether or not to use HTTPS when communicating with the agent\n+         */\n+        @ConfigItem(defaultValue = \"false\")\n+        boolean useHttps;\n+\n+        /**\n+         * Consul token to be provided when authentication is enabled\n+         */\n+        @ConfigItem\n+        Optional<String> token;\n+\n+        /**\n+         * When using HTTPS, whether or not to trust self-signed certificatd\n+         */\n+        @ConfigItem(defaultValue = \"false\")\n+        boolean trustCerts;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc4MTA1Mg=="}, "originalCommit": {"oid": "ca4c61beddd32e1e9c42232ecad67b61d592586e"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc5MzIzMQ==", "bodyText": "I wonder if we should have some sort of shared config group for that. That would enforce consistency.", "url": "https://github.com/quarkusio/quarkus/pull/9241#discussion_r423793231", "createdAt": "2020-05-12T14:46:04Z", "author": {"login": "gsmet"}, "path": "extensions/consul-config/runtime/src/main/java/io/quarkus/consul/config/runtime/ConsulConfig.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package io.quarkus.consul.config.runtime;\n+\n+import java.net.InetSocketAddress;\n+import java.time.Duration;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import io.quarkus.runtime.annotations.ConfigGroup;\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigPhase;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+\n+@ConfigRoot(name = \"consul-config\", phase = ConfigPhase.BOOTSTRAP)\n+public class ConsulConfig {\n+\n+    /**\n+     * If set to true, the application will attempt to look up the configuration from Consul\n+     */\n+    @ConfigItem(defaultValue = \"false\")\n+    boolean enabled;\n+\n+    /**\n+     * Consul agent related configuration\n+     */\n+    @ConfigItem\n+    AgentConfig agent;\n+\n+    /**\n+     * Common prefix that all keys share when looking up the keys from Consul.\n+     * The prefix is <b>not</b> included in the keys of the user configuration\n+     */\n+    @ConfigItem\n+    Optional<String> prefix;\n+\n+    /**\n+     * Keys whose value is a raw string.\n+     * When this is used, the keys that end up in the user configuration are the keys specified her with '/' replaced by '.'\n+     */\n+    @ConfigItem\n+    Optional<List<String>> rawValueKeys;\n+\n+    /**\n+     * Keys whose value represents a properties file.\n+     * When this is used, the keys that end up in the user configuration are the keys of the of the properties file,\n+     * not these keys\n+     */\n+    @ConfigItem\n+    Optional<List<String>> propertiesValueKeys;\n+\n+    /**\n+     * If set to true, the application will not start if any of the configured config sources cannot be located\n+     */\n+    @ConfigItem(defaultValue = \"true\")\n+    boolean failOnMissingKey;\n+\n+    Map<String, ValueType> keysAsMap() {\n+        Map<String, ValueType> result = new LinkedHashMap<>();\n+        if (rawValueKeys.isPresent()) {\n+            for (String key : rawValueKeys.get()) {\n+                result.put(key, ValueType.RAW);\n+            }\n+        }\n+        if (propertiesValueKeys.isPresent()) {\n+            for (String key : propertiesValueKeys.get()) {\n+                result.put(key, ValueType.PROPERTIES);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    @ConfigGroup\n+    public static class AgentConfig {\n+\n+        /**\n+         * Consul agent host\n+         */\n+        @ConfigItem(defaultValue = \"localhost:8500\")\n+        InetSocketAddress hostPort;\n+\n+        /**\n+         * Whether or not to use HTTPS when communicating with the agent\n+         */\n+        @ConfigItem(defaultValue = \"false\")\n+        boolean useHttps;\n+\n+        /**\n+         * Consul token to be provided when authentication is enabled\n+         */\n+        @ConfigItem\n+        Optional<String> token;\n+\n+        /**\n+         * When using HTTPS, whether or not to trust self-signed certificatd\n+         */\n+        @ConfigItem(defaultValue = \"false\")\n+        boolean trustCerts;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc4MTA1Mg=="}, "originalCommit": {"oid": "ca4c61beddd32e1e9c42232ecad67b61d592586e"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk0NTYxMA==", "bodyText": "That's what Max was saying IIRC in a mailing thread.\nI am personally sceptical, but not completely opposed to it.", "url": "https://github.com/quarkusio/quarkus/pull/9241#discussion_r423945610", "createdAt": "2020-05-12T18:28:30Z", "author": {"login": "geoand"}, "path": "extensions/consul-config/runtime/src/main/java/io/quarkus/consul/config/runtime/ConsulConfig.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package io.quarkus.consul.config.runtime;\n+\n+import java.net.InetSocketAddress;\n+import java.time.Duration;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import io.quarkus.runtime.annotations.ConfigGroup;\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigPhase;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+\n+@ConfigRoot(name = \"consul-config\", phase = ConfigPhase.BOOTSTRAP)\n+public class ConsulConfig {\n+\n+    /**\n+     * If set to true, the application will attempt to look up the configuration from Consul\n+     */\n+    @ConfigItem(defaultValue = \"false\")\n+    boolean enabled;\n+\n+    /**\n+     * Consul agent related configuration\n+     */\n+    @ConfigItem\n+    AgentConfig agent;\n+\n+    /**\n+     * Common prefix that all keys share when looking up the keys from Consul.\n+     * The prefix is <b>not</b> included in the keys of the user configuration\n+     */\n+    @ConfigItem\n+    Optional<String> prefix;\n+\n+    /**\n+     * Keys whose value is a raw string.\n+     * When this is used, the keys that end up in the user configuration are the keys specified her with '/' replaced by '.'\n+     */\n+    @ConfigItem\n+    Optional<List<String>> rawValueKeys;\n+\n+    /**\n+     * Keys whose value represents a properties file.\n+     * When this is used, the keys that end up in the user configuration are the keys of the of the properties file,\n+     * not these keys\n+     */\n+    @ConfigItem\n+    Optional<List<String>> propertiesValueKeys;\n+\n+    /**\n+     * If set to true, the application will not start if any of the configured config sources cannot be located\n+     */\n+    @ConfigItem(defaultValue = \"true\")\n+    boolean failOnMissingKey;\n+\n+    Map<String, ValueType> keysAsMap() {\n+        Map<String, ValueType> result = new LinkedHashMap<>();\n+        if (rawValueKeys.isPresent()) {\n+            for (String key : rawValueKeys.get()) {\n+                result.put(key, ValueType.RAW);\n+            }\n+        }\n+        if (propertiesValueKeys.isPresent()) {\n+            for (String key : propertiesValueKeys.get()) {\n+                result.put(key, ValueType.PROPERTIES);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    @ConfigGroup\n+    public static class AgentConfig {\n+\n+        /**\n+         * Consul agent host\n+         */\n+        @ConfigItem(defaultValue = \"localhost:8500\")\n+        InetSocketAddress hostPort;\n+\n+        /**\n+         * Whether or not to use HTTPS when communicating with the agent\n+         */\n+        @ConfigItem(defaultValue = \"false\")\n+        boolean useHttps;\n+\n+        /**\n+         * Consul token to be provided when authentication is enabled\n+         */\n+        @ConfigItem\n+        Optional<String> token;\n+\n+        /**\n+         * When using HTTPS, whether or not to trust self-signed certificatd\n+         */\n+        @ConfigItem(defaultValue = \"false\")\n+        boolean trustCerts;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc4MTA1Mg=="}, "originalCommit": {"oid": "ca4c61beddd32e1e9c42232ecad67b61d592586e"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI3NzgyMw==", "bodyText": "I added support for a KeyStore file", "url": "https://github.com/quarkusio/quarkus/pull/9241#discussion_r424277823", "createdAt": "2020-05-13T08:51:51Z", "author": {"login": "geoand"}, "path": "extensions/consul-config/runtime/src/main/java/io/quarkus/consul/config/runtime/ConsulConfig.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package io.quarkus.consul.config.runtime;\n+\n+import java.net.InetSocketAddress;\n+import java.time.Duration;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import io.quarkus.runtime.annotations.ConfigGroup;\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigPhase;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+\n+@ConfigRoot(name = \"consul-config\", phase = ConfigPhase.BOOTSTRAP)\n+public class ConsulConfig {\n+\n+    /**\n+     * If set to true, the application will attempt to look up the configuration from Consul\n+     */\n+    @ConfigItem(defaultValue = \"false\")\n+    boolean enabled;\n+\n+    /**\n+     * Consul agent related configuration\n+     */\n+    @ConfigItem\n+    AgentConfig agent;\n+\n+    /**\n+     * Common prefix that all keys share when looking up the keys from Consul.\n+     * The prefix is <b>not</b> included in the keys of the user configuration\n+     */\n+    @ConfigItem\n+    Optional<String> prefix;\n+\n+    /**\n+     * Keys whose value is a raw string.\n+     * When this is used, the keys that end up in the user configuration are the keys specified her with '/' replaced by '.'\n+     */\n+    @ConfigItem\n+    Optional<List<String>> rawValueKeys;\n+\n+    /**\n+     * Keys whose value represents a properties file.\n+     * When this is used, the keys that end up in the user configuration are the keys of the of the properties file,\n+     * not these keys\n+     */\n+    @ConfigItem\n+    Optional<List<String>> propertiesValueKeys;\n+\n+    /**\n+     * If set to true, the application will not start if any of the configured config sources cannot be located\n+     */\n+    @ConfigItem(defaultValue = \"true\")\n+    boolean failOnMissingKey;\n+\n+    Map<String, ValueType> keysAsMap() {\n+        Map<String, ValueType> result = new LinkedHashMap<>();\n+        if (rawValueKeys.isPresent()) {\n+            for (String key : rawValueKeys.get()) {\n+                result.put(key, ValueType.RAW);\n+            }\n+        }\n+        if (propertiesValueKeys.isPresent()) {\n+            for (String key : propertiesValueKeys.get()) {\n+                result.put(key, ValueType.PROPERTIES);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    @ConfigGroup\n+    public static class AgentConfig {\n+\n+        /**\n+         * Consul agent host\n+         */\n+        @ConfigItem(defaultValue = \"localhost:8500\")\n+        InetSocketAddress hostPort;\n+\n+        /**\n+         * Whether or not to use HTTPS when communicating with the agent\n+         */\n+        @ConfigItem(defaultValue = \"false\")\n+        boolean useHttps;\n+\n+        /**\n+         * Consul token to be provided when authentication is enabled\n+         */\n+        @ConfigItem\n+        Optional<String> token;\n+\n+        /**\n+         * When using HTTPS, whether or not to trust self-signed certificatd\n+         */\n+        @ConfigItem(defaultValue = \"false\")\n+        boolean trustCerts;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc4MTA1Mg=="}, "originalCommit": {"oid": "ca4c61beddd32e1e9c42232ecad67b61d592586e"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3190, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}