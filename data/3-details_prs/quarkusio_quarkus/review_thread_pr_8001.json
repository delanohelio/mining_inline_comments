{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMjQ5MjQ3", "number": 8001, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMDo0NDo1NFrODp0kOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMDo1MjoyOVrODp0tAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTc5NDQ4OnYy", "diffSide": "LEFT", "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/ConfigPropertiesBuildStep.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMDo0NDo1NFrOF5O4Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMDo0Nzo0MFrOF5O9Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU1NjkxOA==", "bodyText": "@geoand do you remember the reason why class-based @ConfigProperties requied the ApplicationIndexBuildItem? I think it's safe to use the CombinedIndexBuildItem here...", "url": "https://github.com/quarkusio/quarkus/pull/8001#discussion_r395556918", "createdAt": "2020-03-20T10:44:54Z", "author": {"login": "mkouba"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/ConfigPropertiesBuildStep.java", "diffHunk": "@@ -89,7 +87,7 @@ void setup(CombinedIndexBuildItem combinedIndex,\n                 boolean needsValidation = ClassConfigPropertiesUtil.addProducerMethodForClassConfigProperties(\n                         deploymentClassLoader.getClassLoader(), classInfo, producerClassCreator,\n                         configPropertiesMetadata.getPrefix(), configPropertiesMetadata.getNamingStrategy(),\n-                        applicationIndex.getIndex(), configProperties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c889a720e14f4343234b314ed9ef2f30ede54733"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU1ODE1OA==", "bodyText": "Yeah, it's probably just an oversight on my part", "url": "https://github.com/quarkusio/quarkus/pull/8001#discussion_r395558158", "createdAt": "2020-03-20T10:47:40Z", "author": {"login": "geoand"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/ConfigPropertiesBuildStep.java", "diffHunk": "@@ -89,7 +87,7 @@ void setup(CombinedIndexBuildItem combinedIndex,\n                 boolean needsValidation = ClassConfigPropertiesUtil.addProducerMethodForClassConfigProperties(\n                         deploymentClassLoader.getClassLoader(), classInfo, producerClassCreator,\n                         configPropertiesMetadata.getPrefix(), configPropertiesMetadata.getNamingStrategy(),\n-                        applicationIndex.getIndex(), configProperties);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU1NjkxOA=="}, "originalCommit": {"oid": "c889a720e14f4343234b314ed9ef2f30ede54733"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTgxNjk5OnYy", "diffSide": "RIGHT", "path": "extensions/panache/hibernate-orm-panache/deployment/src/main/java/io/quarkus/hibernate/orm/panache/deployment/PanacheResourceProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMDo1MjoyOVrOF5PGDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMDo0OToxNFrOF5_9GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU2MDQ2Mw==", "bodyText": "@FroMage modelClasses are built from the CombinedIndexBuildItem so it should be safe to use it here as well, or?", "url": "https://github.com/quarkusio/quarkus/pull/8001#discussion_r395560463", "createdAt": "2020-03-20T10:52:29Z", "author": {"login": "mkouba"}, "path": "extensions/panache/hibernate-orm-panache/deployment/src/main/java/io/quarkus/hibernate/orm/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -109,7 +107,7 @@ void build(CombinedIndexBuildItem index,\n         MetamodelInfo<EntityModel<EntityField>> modelInfo = modelEnhancer.getModelInfo();\n         if (modelInfo.hasEntities()) {\n             PanacheFieldAccessEnhancer panacheFieldAccessEnhancer = new PanacheFieldAccessEnhancer(modelInfo);\n-            for (ClassInfo classInfo : applicationIndex.getIndex().getKnownClasses()) {\n+            for (ClassInfo classInfo : index.getIndex().getKnownClasses()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c889a720e14f4343234b314ed9ef2f30ede54733"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM2MDk4NQ==", "bodyText": "That would probably solve the bug where people access entities outside the root application, but might be costly since we still don't have any way to index users of specific classes.", "url": "https://github.com/quarkusio/quarkus/pull/8001#discussion_r396360985", "createdAt": "2020-03-23T10:49:14Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache/deployment/src/main/java/io/quarkus/hibernate/orm/panache/deployment/PanacheResourceProcessor.java", "diffHunk": "@@ -109,7 +107,7 @@ void build(CombinedIndexBuildItem index,\n         MetamodelInfo<EntityModel<EntityField>> modelInfo = modelEnhancer.getModelInfo();\n         if (modelInfo.hasEntities()) {\n             PanacheFieldAccessEnhancer panacheFieldAccessEnhancer = new PanacheFieldAccessEnhancer(modelInfo);\n-            for (ClassInfo classInfo : applicationIndex.getIndex().getKnownClasses()) {\n+            for (ClassInfo classInfo : index.getIndex().getKnownClasses()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU2MDQ2Mw=="}, "originalCommit": {"oid": "c889a720e14f4343234b314ed9ef2f30ede54733"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4755, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}