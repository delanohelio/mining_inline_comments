{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3ODcyNjc2", "number": 7855, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjozODo0M1rODn5kww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjozODo0M1rODn5kww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTY0MzU1OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/flyway.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjozODo0M1rOF2Kqng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjo1MDo0NVrOF2LJMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM0MjE3NA==", "bodyText": "Ah, cool, I wanted to do that forever... Did you check that all the information there is in the javadoc?", "url": "https://github.com/quarkusio/quarkus/pull/7855#discussion_r392342174", "createdAt": "2020-03-13T16:38:43Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/flyway.adoc", "diffHunk": "@@ -49,74 +49,8 @@ First, you need to add the datasource config to the `{config-file}` file\n in order to allow Flyway to manage the schema.\n Also, you can customize the Flyway behaviour by using the following properties:\n \n-`quarkus.flyway.migrate-at-start`::\n-**true** to execute Flyway automatically when the application starts, **false** otherwise. +\n-**default:** false\n-\n-`quarkus.flyway.validate-on-migrate`::\n-**true** to validate the applied migrations against the available ones, **false** otherwise. +\n-**default:** true\n-\n-`quarkus.flyway.clean-at-start`::\n-**true** to execute Flyway clean command automatically when the application starts, **false** otherwise. +\n-**default:** false\n-\n-`quarkus.flyway.locations`::\n-Comma-separated list of locations to scan recursively for migrations. The location type is determined by its prefix.\n-Unprefixed locations or locations starting with classpath: point to a package on the classpath and may contain both SQL\n-and Java-based migrations.\n-Locations starting with filesystem: point to a directory on the filesystem, may only contain SQL migrations and are only\n-scanned recursively down non-hidden directories. +\n-**default:** classpath:db/migration\n-\n-`quarkus.flyway.connect-retries`::\n-The maximum number of retries when attempting to connect to the database. After each failed attempt, Flyway will wait 1\n-second before attempting to connect again, up to the maximum number of times specified by connect-retries. +\n-**default:** 0\n-\n-`quarkus.flyway.schemas`::\n-Comma-separated case-sensitive list of schemas managed by Flyway.\n-The first schema in the list will be automatically set as the default one during the migration.\n-It will also be the one containing the schema history table. +\n-**default:** <none>\n-\n-`quarkus.flyway.table`::\n-The name of Flyway's schema history table.\n-By default (single-schema mode) the schema history table is placed in the default schema for the connection provided by\n-the datasource.\n-When the quarkus.flyway.schemas property is set (multi-schema mode), the schema history table is placed in the first schema of\n-the list. +\n-**default:** flyway_schema_history\n-\n-`quarkus.flyway.sql-migration-prefix`::\n-The file name prefix for versioned SQL migrations.\n-Versioned SQL migrations have the following file name structure: prefixVERSIONseparatorDESCRIPTIONsuffix , which using\n-the defaults translates to V1.1__My_description.sql +\n-**default:** V\n-\n-`quarkus.flyway.repeatable-sql-migration-prefix`::\n-The file name prefix for repeatable SQL migrations.\n-Repeatable SQL migrations have the following file name structure: prefixSeparatorDESCRIPTIONsuffix , which using the\n-defaults translates to R__My_description.sql +\n-**default:** R\n-\n-`quarkus.flyway.baseline-on-migrate`::\n-Whether to automatically call baseline when migrate is executed against a non-empty schema with no metadata table.\n-This schema will then be baselined with the *baseline-version* before executing the migrations.\n-Only migrations above *baseline-version* will then be applied.\n-This is useful for initial Flyway production deployments on projects with an existing DB. +\n-+\n-Be careful when enabling this as it removes the safety net that ensures Flyway does not\n-migrate the wrong database in case of a configuration mistake! +\n-**default:** false\n-\n-`quarkus.flyway.baseline-version`::\n-The version to tag an existing schema with when executing baseline +\n-**default:** 1\n-\n-`quarkus.flyway.baseline-description`::\n-The description to tag an existing schema with when executing baseline +\n-**default:** '<< Flyway Baseline >>'\n+include::{generated-dir}/config/quarkus-flyway.adoc[opts=optional, leveloffset=+1]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e42a40c2471f0b735fb5f1f8baa8da599a9f19a9"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM1MDAwMA==", "bodyText": "Yes", "url": "https://github.com/quarkusio/quarkus/pull/7855#discussion_r392350000", "createdAt": "2020-03-13T16:50:45Z", "author": {"login": "gastaldi"}, "path": "docs/src/main/asciidoc/flyway.adoc", "diffHunk": "@@ -49,74 +49,8 @@ First, you need to add the datasource config to the `{config-file}` file\n in order to allow Flyway to manage the schema.\n Also, you can customize the Flyway behaviour by using the following properties:\n \n-`quarkus.flyway.migrate-at-start`::\n-**true** to execute Flyway automatically when the application starts, **false** otherwise. +\n-**default:** false\n-\n-`quarkus.flyway.validate-on-migrate`::\n-**true** to validate the applied migrations against the available ones, **false** otherwise. +\n-**default:** true\n-\n-`quarkus.flyway.clean-at-start`::\n-**true** to execute Flyway clean command automatically when the application starts, **false** otherwise. +\n-**default:** false\n-\n-`quarkus.flyway.locations`::\n-Comma-separated list of locations to scan recursively for migrations. The location type is determined by its prefix.\n-Unprefixed locations or locations starting with classpath: point to a package on the classpath and may contain both SQL\n-and Java-based migrations.\n-Locations starting with filesystem: point to a directory on the filesystem, may only contain SQL migrations and are only\n-scanned recursively down non-hidden directories. +\n-**default:** classpath:db/migration\n-\n-`quarkus.flyway.connect-retries`::\n-The maximum number of retries when attempting to connect to the database. After each failed attempt, Flyway will wait 1\n-second before attempting to connect again, up to the maximum number of times specified by connect-retries. +\n-**default:** 0\n-\n-`quarkus.flyway.schemas`::\n-Comma-separated case-sensitive list of schemas managed by Flyway.\n-The first schema in the list will be automatically set as the default one during the migration.\n-It will also be the one containing the schema history table. +\n-**default:** <none>\n-\n-`quarkus.flyway.table`::\n-The name of Flyway's schema history table.\n-By default (single-schema mode) the schema history table is placed in the default schema for the connection provided by\n-the datasource.\n-When the quarkus.flyway.schemas property is set (multi-schema mode), the schema history table is placed in the first schema of\n-the list. +\n-**default:** flyway_schema_history\n-\n-`quarkus.flyway.sql-migration-prefix`::\n-The file name prefix for versioned SQL migrations.\n-Versioned SQL migrations have the following file name structure: prefixVERSIONseparatorDESCRIPTIONsuffix , which using\n-the defaults translates to V1.1__My_description.sql +\n-**default:** V\n-\n-`quarkus.flyway.repeatable-sql-migration-prefix`::\n-The file name prefix for repeatable SQL migrations.\n-Repeatable SQL migrations have the following file name structure: prefixSeparatorDESCRIPTIONsuffix , which using the\n-defaults translates to R__My_description.sql +\n-**default:** R\n-\n-`quarkus.flyway.baseline-on-migrate`::\n-Whether to automatically call baseline when migrate is executed against a non-empty schema with no metadata table.\n-This schema will then be baselined with the *baseline-version* before executing the migrations.\n-Only migrations above *baseline-version* will then be applied.\n-This is useful for initial Flyway production deployments on projects with an existing DB. +\n-+\n-Be careful when enabling this as it removes the safety net that ensures Flyway does not\n-migrate the wrong database in case of a configuration mistake! +\n-**default:** false\n-\n-`quarkus.flyway.baseline-version`::\n-The version to tag an existing schema with when executing baseline +\n-**default:** 1\n-\n-`quarkus.flyway.baseline-description`::\n-The description to tag an existing schema with when executing baseline +\n-**default:** '<< Flyway Baseline >>'\n+include::{generated-dir}/config/quarkus-flyway.adoc[opts=optional, leveloffset=+1]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM0MjE3NA=="}, "originalCommit": {"oid": "e42a40c2471f0b735fb5f1f8baa8da599a9f19a9"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4865, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}