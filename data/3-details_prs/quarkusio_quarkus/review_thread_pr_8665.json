{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MzQwNDk5", "number": 8665, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNzo0ODo1MlrODzMdwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODo0MzowMVrODznXEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDA4MTk0OnYy", "diffSide": "RIGHT", "path": "extensions/scheduler/deployment/src/main/java/io/quarkus/scheduler/deployment/SchedulerProcessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNzo0ODo1MlrOGHo83Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjowMzo0NFrOGIRGtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NDE1Nw==", "bodyText": "You can't remove the BuildProducer<BeanConfiguratorBuildItem> beans even though it's unused. This ensures this build step is executed before ArcProcessor#validate(). See the BeanRegistrationPhaseBuildItem javadoc.", "url": "https://github.com/quarkusio/quarkus/pull/8665#discussion_r410664157", "createdAt": "2020-04-18T07:48:52Z", "author": {"login": "mkouba"}, "path": "extensions/scheduler/deployment/src/main/java/io/quarkus/scheduler/deployment/SchedulerProcessor.java", "diffHunk": "@@ -117,27 +115,21 @@ public void transform(TransformationContext context) {\n     }\n \n     @BuildStep\n-    void collectScheduledMethods(\n-            SchedulerConfig config,\n-            BeanArchiveIndexBuildItem beanArchives,\n-            BeanRegistrationPhaseBuildItem beanRegistrationPhase,\n-            BuildProducer<ScheduledBusinessMethodItem> scheduledBusinessMethods,\n-            BuildProducer<BeanConfiguratorBuildItem> beans) {\n+    void collectScheduledMethods(BeanArchiveIndexBuildItem beanArchives, BeanRegistrationPhaseBuildItem beanRegistrationPhase,\n+            BuildProducer<ScheduledBusinessMethodItem> scheduledBusinessMethods) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ecbc37152bbdc48f079f95c0f83da67a97fa347"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3ODg5Ng==", "bodyText": "Good catch. I might have gone a bit fast on that one. Let's keep it.", "url": "https://github.com/quarkusio/quarkus/pull/8665#discussion_r410678896", "createdAt": "2020-04-18T10:19:16Z", "author": {"login": "machi1990"}, "path": "extensions/scheduler/deployment/src/main/java/io/quarkus/scheduler/deployment/SchedulerProcessor.java", "diffHunk": "@@ -117,27 +115,21 @@ public void transform(TransformationContext context) {\n     }\n \n     @BuildStep\n-    void collectScheduledMethods(\n-            SchedulerConfig config,\n-            BeanArchiveIndexBuildItem beanArchives,\n-            BeanRegistrationPhaseBuildItem beanRegistrationPhase,\n-            BuildProducer<ScheduledBusinessMethodItem> scheduledBusinessMethods,\n-            BuildProducer<BeanConfiguratorBuildItem> beans) {\n+    void collectScheduledMethods(BeanArchiveIndexBuildItem beanArchives, BeanRegistrationPhaseBuildItem beanRegistrationPhase,\n+            BuildProducer<ScheduledBusinessMethodItem> scheduledBusinessMethods) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NDE1Nw=="}, "originalCommit": {"oid": "1ecbc37152bbdc48f079f95c0f83da67a97fa347"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwNjQzNA==", "bodyText": "Off topic: should we have a documentation-only annotation, called e.g. @Ordering, that would be added to such places to let people know what's the purpose of the dependency?", "url": "https://github.com/quarkusio/quarkus/pull/8665#discussion_r411206434", "createdAt": "2020-04-20T08:52:23Z", "author": {"login": "Ladicek"}, "path": "extensions/scheduler/deployment/src/main/java/io/quarkus/scheduler/deployment/SchedulerProcessor.java", "diffHunk": "@@ -117,27 +115,21 @@ public void transform(TransformationContext context) {\n     }\n \n     @BuildStep\n-    void collectScheduledMethods(\n-            SchedulerConfig config,\n-            BeanArchiveIndexBuildItem beanArchives,\n-            BeanRegistrationPhaseBuildItem beanRegistrationPhase,\n-            BuildProducer<ScheduledBusinessMethodItem> scheduledBusinessMethods,\n-            BuildProducer<BeanConfiguratorBuildItem> beans) {\n+    void collectScheduledMethods(BeanArchiveIndexBuildItem beanArchives, BeanRegistrationPhaseBuildItem beanRegistrationPhase,\n+            BuildProducer<ScheduledBusinessMethodItem> scheduledBusinessMethods) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NDE1Nw=="}, "originalCommit": {"oid": "1ecbc37152bbdc48f079f95c0f83da67a97fa347"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMyMjAzOA==", "bodyText": "@Ladicek Sounds like a very good idea.", "url": "https://github.com/quarkusio/quarkus/pull/8665#discussion_r411322038", "createdAt": "2020-04-20T12:03:44Z", "author": {"login": "machi1990"}, "path": "extensions/scheduler/deployment/src/main/java/io/quarkus/scheduler/deployment/SchedulerProcessor.java", "diffHunk": "@@ -117,27 +115,21 @@ public void transform(TransformationContext context) {\n     }\n \n     @BuildStep\n-    void collectScheduledMethods(\n-            SchedulerConfig config,\n-            BeanArchiveIndexBuildItem beanArchives,\n-            BeanRegistrationPhaseBuildItem beanRegistrationPhase,\n-            BuildProducer<ScheduledBusinessMethodItem> scheduledBusinessMethods,\n-            BuildProducer<BeanConfiguratorBuildItem> beans) {\n+    void collectScheduledMethods(BeanArchiveIndexBuildItem beanArchives, BeanRegistrationPhaseBuildItem beanRegistrationPhase,\n+            BuildProducer<ScheduledBusinessMethodItem> scheduledBusinessMethods) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NDE1Nw=="}, "originalCommit": {"oid": "1ecbc37152bbdc48f079f95c0f83da67a97fa347"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDA4MzYyOnYy", "diffSide": "RIGHT", "path": "extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/Scheduled.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNzo1MToxNFrOGHo9qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxMDozMDoyN1rOGHp6og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NDM2MQ==", "bodyText": "We should also use Scheduled.identity() in the SimpleScheduler.", "url": "https://github.com/quarkusio/quarkus/pull/8665#discussion_r410664361", "createdAt": "2020-04-18T07:51:14Z", "author": {"login": "mkouba"}, "path": "extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/Scheduled.java", "diffHunk": "@@ -39,6 +39,16 @@\n @Repeatable(Schedules.class)\n public @interface Scheduled {\n \n+    /**\n+     * Optionally defines a unique identifier for this job.\n+     * <p>\n+     * If the value is not given, Quarkus will generate a unique id.\n+     * <p>\n+     * \n+     * @return the unique identity of the schedule\n+     */\n+    String identity() default \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ecbc37152bbdc48f079f95c0f83da67a97fa347"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3OTk3MA==", "bodyText": "Yes, I forgot about that one. Should be good now.", "url": "https://github.com/quarkusio/quarkus/pull/8665#discussion_r410679970", "createdAt": "2020-04-18T10:30:27Z", "author": {"login": "machi1990"}, "path": "extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/Scheduled.java", "diffHunk": "@@ -39,6 +39,16 @@\n @Repeatable(Schedules.class)\n public @interface Scheduled {\n \n+    /**\n+     * Optionally defines a unique identifier for this job.\n+     * <p>\n+     * If the value is not given, Quarkus will generate a unique id.\n+     * <p>\n+     * \n+     * @return the unique identity of the schedule\n+     */\n+    String identity() default \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NDM2MQ=="}, "originalCommit": {"oid": "1ecbc37152bbdc48f079f95c0f83da67a97fa347"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MTczODk3OnYy", "diffSide": "RIGHT", "path": "extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/runtime/SimpleScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwODo0Mzo1NlrOGH0gsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwODo0Mzo1NlrOGH0gsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg1MzU1Mg==", "bodyText": "We could probably get rid of SimpleScheduler.triggerNameSequence and SimpleScheduler.config fields as they are only used in the constructor, in createTrigger()...", "url": "https://github.com/quarkusio/quarkus/pull/8665#discussion_r410853552", "createdAt": "2020-04-19T08:43:56Z", "author": {"login": "mkouba"}, "path": "extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/runtime/SimpleScheduler.java", "diffHunk": "@@ -148,7 +148,10 @@ public void resume() {\n     }\n \n     SimpleTrigger createTrigger(String invokerClass, CronParser parser, Scheduled scheduled) {\n-        String id = triggerNameSequence.getAndIncrement() + \"_\" + invokerClass;\n+        String id = scheduled.identity().trim();\n+        if (id.isEmpty()) {\n+            id = triggerNameSequence.getAndIncrement() + \"_\" + invokerClass;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1670e592403e8fe41f0a5eef1260b30b63286ec4"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MTczOTIxOnYy", "diffSide": "RIGHT", "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwODo0NDowNlrOGH0gyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwODo0NDowNlrOGH0gyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg1MzU3OQ==", "bodyText": "Hm, we don't need AtomicInteger here, right? We could use int and triggerNameSequence++...", "url": "https://github.com/quarkusio/quarkus/pull/8665#discussion_r410853579", "createdAt": "2020-04-19T08:44:06Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -92,11 +89,15 @@ public QuartzScheduler(SchedulerContext context, QuartzSupport quartzSupport, Co\n                 for (ScheduledMethodMetadata method : context.getScheduledMethods()) {\n \n                     invokers.put(method.getInvokerClassName(), context.createInvoker(method.getInvokerClassName()));\n+                    AtomicInteger triggerNameSequence = new AtomicInteger();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1670e592403e8fe41f0a5eef1260b30b63286ec4"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDQ4ODQ4OnYy", "diffSide": "RIGHT", "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODo0MzowMVrOGIJrPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMToxMDozMFrOGIPR1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwMDMxOQ==", "bodyText": "I'm not sure I see how this solves the issue?", "url": "https://github.com/quarkusio/quarkus/pull/8665#discussion_r411200319", "createdAt": "2020-04-20T08:43:01Z", "author": {"login": "gsmet"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -92,11 +88,15 @@ public QuartzScheduler(SchedulerContext context, QuartzSupport quartzSupport, Co\n                 for (ScheduledMethodMetadata method : context.getScheduledMethods()) {\n \n                     invokers.put(method.getInvokerClassName(), context.createInvoker(method.getInvokerClassName()));\n+                    int nameSequence = 0;\n \n                     for (Scheduled scheduled : method.getSchedules()) {\n-                        String name = triggerNameSequence.getAndIncrement() + \"_\" + method.getInvokerClassName();\n+                        String identity = scheduled.identity().trim();\n+                        if (identity.isEmpty()) {\n+                            identity = ++nameSequence + \"_\" + method.getInvokerClassName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25ed4d8da8545db9deb7b86ed29d092ff46b0fd5"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI4ODQ5NQ==", "bodyText": "Because of the way beans are registered (in an unordered data structure), the list of scheduled methods (invoked methods) did not guarantee that the order is respected in between builds. So instead of having a global sequence strategy for the whole list - whose order can change in between builds, we just maintain a separate sequence for each method which does not change unless otherwise multiple @Scheduled annotations are re-arranged (source code change) for a given scheduled method which won't be a problem because of - https://github.com/quarkusio/quarkus/blob/master/extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java#L150-L152.", "url": "https://github.com/quarkusio/quarkus/pull/8665#discussion_r411288495", "createdAt": "2020-04-20T11:04:33Z", "author": {"login": "machi1990"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -92,11 +88,15 @@ public QuartzScheduler(SchedulerContext context, QuartzSupport quartzSupport, Co\n                 for (ScheduledMethodMetadata method : context.getScheduledMethods()) {\n \n                     invokers.put(method.getInvokerClassName(), context.createInvoker(method.getInvokerClassName()));\n+                    int nameSequence = 0;\n \n                     for (Scheduled scheduled : method.getSchedules()) {\n-                        String name = triggerNameSequence.getAndIncrement() + \"_\" + method.getInvokerClassName();\n+                        String identity = scheduled.identity().trim();\n+                        if (identity.isEmpty()) {\n+                            identity = ++nameSequence + \"_\" + method.getInvokerClassName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwMDMxOQ=="}, "originalCommit": {"oid": "25ed4d8da8545db9deb7b86ed29d092ff46b0fd5"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI5MjExOA==", "bodyText": "OK. An important thing is: https://stackoverflow.com/questions/26086538/order-of-automatically-wrapped-repeatable-annotations .", "url": "https://github.com/quarkusio/quarkus/pull/8665#discussion_r411292118", "createdAt": "2020-04-20T11:10:30Z", "author": {"login": "gsmet"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -92,11 +88,15 @@ public QuartzScheduler(SchedulerContext context, QuartzSupport quartzSupport, Co\n                 for (ScheduledMethodMetadata method : context.getScheduledMethods()) {\n \n                     invokers.put(method.getInvokerClassName(), context.createInvoker(method.getInvokerClassName()));\n+                    int nameSequence = 0;\n \n                     for (Scheduled scheduled : method.getSchedules()) {\n-                        String name = triggerNameSequence.getAndIncrement() + \"_\" + method.getInvokerClassName();\n+                        String identity = scheduled.identity().trim();\n+                        if (identity.isEmpty()) {\n+                            identity = ++nameSequence + \"_\" + method.getInvokerClassName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIwMDMxOQ=="}, "originalCommit": {"oid": "25ed4d8da8545db9deb7b86ed29d092ff46b0fd5"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3368, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}