{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2MDM3NTU5", "number": 9710, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMzoyNzoyNFrOEBi38w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMTozMTowOFrOEHFbvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDU1NDExOnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/PackageConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMzoyNzoyNFrOGddOzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMzoyNzoyNFrOGddOzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU0MDgxNA==", "bodyText": "minor typo", "url": "https://github.com/quarkusio/quarkus/pull/9710#discussion_r433540814", "createdAt": "2020-06-01T23:27:24Z", "author": {"login": "stuartwdouglas"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/PackageConfig.java", "diffHunk": "@@ -87,4 +87,24 @@\n      */\n     @ConfigItem\n     public Optional<String> outputName;\n+\n+    /**\n+     * Whether to automate the creation of AppCDS. This has not effect when a native binary is needed and will be ignored in\n+     * that case.\n+     * Furthermore, this options only works for Java 11+.\n+     * Finally, care must be taken to use the same exact JVM version when building and running the application.\n+     */\n+    @ConfigItem\n+    public boolean createAppcds;\n+\n+    public boolean isAnyJarType() {\n+        return (type.equalsIgnoreCase(PackageConfig.LEGACY) ||\n+                type.equalsIgnoreCase(PackageConfig.JAR) ||\n+                type.equalsIgnoreCase(PackageConfig.FAST_JAR) ||\n+                type.equalsIgnoreCase(PackageConfig.UBER_JAR));\n+    }\n+\n+    public boolean isFastFar() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89cedeee05b1b2649701469fb33c697953c44f21"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDcyOTM2OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/AppCDSBuildStep.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMToxMDoxNFrOGde4nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNjoyNDo0NlrOGdjp_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU2NzkwMQ==", "bodyText": "For fast-jar this should go into the actual fast-jar package.", "url": "https://github.com/quarkusio/quarkus/pull/9710#discussion_r433567901", "createdAt": "2020-06-02T01:10:14Z", "author": {"login": "stuartwdouglas"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/AppCDSBuildStep.java", "diffHunk": "@@ -0,0 +1,211 @@\n+package io.quarkus.deployment.pkg.steps;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.BooleanSupplier;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.bootstrap.runner.Timing;\n+import io.quarkus.bootstrap.util.IoUtils;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.pkg.PackageConfig;\n+import io.quarkus.deployment.pkg.builditem.AppCDSBuildItem;\n+import io.quarkus.deployment.pkg.builditem.ArtifactResultBuildItem;\n+import io.quarkus.deployment.pkg.builditem.JarBuildItem;\n+import io.quarkus.deployment.pkg.builditem.OutputTargetBuildItem;\n+import io.quarkus.deployment.steps.MainClassBuildStep;\n+import io.quarkus.deployment.util.JavaVersionUtil;\n+import io.quarkus.utilities.JavaBinFinder;\n+\n+public class AppCDSBuildStep {\n+\n+    private static final Logger log = Logger.getLogger(AppCDSBuildStep.class);\n+\n+    @BuildStep(onlyIf = AppCDSRequired.class)\n+    public void build(OutputTargetBuildItem outputTarget, JarBuildItem jarResult, PackageConfig packageConfig,\n+            BuildProducer<AppCDSBuildItem> appCDS,\n+            BuildProducer<ArtifactResultBuildItem> artifactResult) throws Exception {\n+        Path appCDSDir = outputTarget.getOutputDirectory().resolve(\"appcds\");\n+        IoUtils.recursiveDelete(appCDSDir);\n+        Files.createDirectories(appCDSDir);\n+\n+        String javaBin = JavaBinFinder.findBin();\n+\n+        Path classesLstPath = createClassesLst(outputTarget, jarResult, javaBin, appCDSDir);\n+        if (classesLstPath == null) {\n+            log.warn(\"Unable to create AppCDS because classes.lst was not created.\");\n+            return;\n+        }\n+\n+        log.debug(\"'classes.lst' successfully created.\");\n+\n+        Path appCDSPath = createAppCDS(jarResult, javaBin, classesLstPath, packageConfig.isFastFar());\n+        if (appCDSPath == null) {\n+            log.warn(\"Unable to create AppCDS.\");\n+            return;\n+        }\n+\n+        log.infof(\n+                \"AppCDS successfully created at: '%s'.\\nTo ensure they are loaded properly, \" +\n+                        \"run the application jar from its directory and also add the '-XX:SharedArchiveFile=app-cds.jsa' \" +\n+                        \"JVM flag.\\nMoreover, make sure to use the same java version to run the application as was used to build it.\",\n+                appCDSPath.toAbsolutePath().toString());\n+\n+        appCDS.produce(new AppCDSBuildItem(appCDSPath));\n+        artifactResult.produce(new ArtifactResultBuildItem(appCDSPath, \"appCDS\", Collections.emptyMap()));\n+    }\n+\n+    /**\n+     * @return The path of the created classes.lst file or null of the file was not created\n+     */\n+    private Path createClassesLst(OutputTargetBuildItem outputTarget, JarBuildItem jarResult, String javaBin, Path appCDSDir) {\n+        Path classesLstPath = appCDSDir.resolve(\"classes.lst\");\n+\n+        List<String> command = new ArrayList<>(4);\n+        command.add(javaBin);\n+        command.add(\"-XX:DumpLoadedClassList=\" + classesLstPath.toAbsolutePath().toString());\n+        command.add(\"-jar\");\n+        command.add(jarResult.getPath().toAbsolutePath().toString());\n+\n+        if (log.isDebugEnabled()) {\n+            log.debugf(\"Launching command: '%s' to create class list\", String.join(\" \", command));\n+        }\n+        try {\n+            Process process = new ProcessBuilder(command)\n+                    .redirectErrorStream(true)\n+                    .directory(outputTarget.getOutputDirectory().toFile())\n+                    .start();\n+            waitForApplicationToStart(process);\n+        } catch (IOException e) {\n+            log.debug(\"Failed to launch process used to create 'classes.lst'.\", e);\n+            return null;\n+        }\n+\n+        if (!classesLstPath.toFile().exists()) { // shouldn't happen, but let's avoid any surprises\n+            return null;\n+        }\n+\n+        return classesLstPath;\n+    }\n+\n+    /**\n+     * Waits for the application terminate by looking for the proper logs, or just giving up after some time\n+     */\n+    private void waitForApplicationToStart(Process process) throws IOException {\n+        if (!process.isAlive()) {\n+            log.debug(\"The process that was supposed to create 'classes.lst' exited.\");\n+            return;\n+        }\n+        // don't wait for more than 10 seconds\n+        // TODO: make it configurable?\n+        final int maxWaits = 200;\n+        int waits = 0;\n+        BufferedReader in = new BufferedReader(new InputStreamReader(process.getInputStream(), StandardCharsets.UTF_8));\n+        while (true) {\n+            if (!process.isAlive()) {\n+                log.debug(\"The process that was supposed to create classes.lst exited\");\n+                break;\n+            }\n+            String line = in.readLine();\n+            if (line != null) {\n+                if (line.contains(Timing.INSTALLED_FEATURES) || line.contains(MainClassBuildStep.FAILED_TO_START_MESSAGE)) {\n+                    process.destroy();\n+                    break;\n+                }\n+            }\n+            try {\n+                Thread.sleep(50);\n+            } catch (InterruptedException ignored) {\n+            }\n+\n+            // we don't want to wait forever\n+            if (++waits >= maxWaits) {\n+                break;\n+            }\n+        }\n+        try {\n+            in.close();\n+        } catch (IOException ignored) {\n+        }\n+    }\n+\n+    /**\n+     * @return The path of the created app-cds.jsa file or null of the file was not created\n+     */\n+    private Path createAppCDS(JarBuildItem jarResult, String javaBin,\n+            Path classesLstPath, boolean isFastFar) {\n+\n+        Path workingDirectory = isFastFar ? jarResult.getPath().getParent().getParent() : jarResult.getPath().getParent();\n+        Path appCDSPath = workingDirectory.resolve(\"app-cds.jsa\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89cedeee05b1b2649701469fb33c697953c44f21"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyMzM1Nw==", "bodyText": "The way it's done, it ends up in the directory that quarkus-run.jar exists. Is that what you meant, or something else?", "url": "https://github.com/quarkusio/quarkus/pull/9710#discussion_r433623357", "createdAt": "2020-06-02T05:11:08Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/AppCDSBuildStep.java", "diffHunk": "@@ -0,0 +1,211 @@\n+package io.quarkus.deployment.pkg.steps;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.BooleanSupplier;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.bootstrap.runner.Timing;\n+import io.quarkus.bootstrap.util.IoUtils;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.pkg.PackageConfig;\n+import io.quarkus.deployment.pkg.builditem.AppCDSBuildItem;\n+import io.quarkus.deployment.pkg.builditem.ArtifactResultBuildItem;\n+import io.quarkus.deployment.pkg.builditem.JarBuildItem;\n+import io.quarkus.deployment.pkg.builditem.OutputTargetBuildItem;\n+import io.quarkus.deployment.steps.MainClassBuildStep;\n+import io.quarkus.deployment.util.JavaVersionUtil;\n+import io.quarkus.utilities.JavaBinFinder;\n+\n+public class AppCDSBuildStep {\n+\n+    private static final Logger log = Logger.getLogger(AppCDSBuildStep.class);\n+\n+    @BuildStep(onlyIf = AppCDSRequired.class)\n+    public void build(OutputTargetBuildItem outputTarget, JarBuildItem jarResult, PackageConfig packageConfig,\n+            BuildProducer<AppCDSBuildItem> appCDS,\n+            BuildProducer<ArtifactResultBuildItem> artifactResult) throws Exception {\n+        Path appCDSDir = outputTarget.getOutputDirectory().resolve(\"appcds\");\n+        IoUtils.recursiveDelete(appCDSDir);\n+        Files.createDirectories(appCDSDir);\n+\n+        String javaBin = JavaBinFinder.findBin();\n+\n+        Path classesLstPath = createClassesLst(outputTarget, jarResult, javaBin, appCDSDir);\n+        if (classesLstPath == null) {\n+            log.warn(\"Unable to create AppCDS because classes.lst was not created.\");\n+            return;\n+        }\n+\n+        log.debug(\"'classes.lst' successfully created.\");\n+\n+        Path appCDSPath = createAppCDS(jarResult, javaBin, classesLstPath, packageConfig.isFastFar());\n+        if (appCDSPath == null) {\n+            log.warn(\"Unable to create AppCDS.\");\n+            return;\n+        }\n+\n+        log.infof(\n+                \"AppCDS successfully created at: '%s'.\\nTo ensure they are loaded properly, \" +\n+                        \"run the application jar from its directory and also add the '-XX:SharedArchiveFile=app-cds.jsa' \" +\n+                        \"JVM flag.\\nMoreover, make sure to use the same java version to run the application as was used to build it.\",\n+                appCDSPath.toAbsolutePath().toString());\n+\n+        appCDS.produce(new AppCDSBuildItem(appCDSPath));\n+        artifactResult.produce(new ArtifactResultBuildItem(appCDSPath, \"appCDS\", Collections.emptyMap()));\n+    }\n+\n+    /**\n+     * @return The path of the created classes.lst file or null of the file was not created\n+     */\n+    private Path createClassesLst(OutputTargetBuildItem outputTarget, JarBuildItem jarResult, String javaBin, Path appCDSDir) {\n+        Path classesLstPath = appCDSDir.resolve(\"classes.lst\");\n+\n+        List<String> command = new ArrayList<>(4);\n+        command.add(javaBin);\n+        command.add(\"-XX:DumpLoadedClassList=\" + classesLstPath.toAbsolutePath().toString());\n+        command.add(\"-jar\");\n+        command.add(jarResult.getPath().toAbsolutePath().toString());\n+\n+        if (log.isDebugEnabled()) {\n+            log.debugf(\"Launching command: '%s' to create class list\", String.join(\" \", command));\n+        }\n+        try {\n+            Process process = new ProcessBuilder(command)\n+                    .redirectErrorStream(true)\n+                    .directory(outputTarget.getOutputDirectory().toFile())\n+                    .start();\n+            waitForApplicationToStart(process);\n+        } catch (IOException e) {\n+            log.debug(\"Failed to launch process used to create 'classes.lst'.\", e);\n+            return null;\n+        }\n+\n+        if (!classesLstPath.toFile().exists()) { // shouldn't happen, but let's avoid any surprises\n+            return null;\n+        }\n+\n+        return classesLstPath;\n+    }\n+\n+    /**\n+     * Waits for the application terminate by looking for the proper logs, or just giving up after some time\n+     */\n+    private void waitForApplicationToStart(Process process) throws IOException {\n+        if (!process.isAlive()) {\n+            log.debug(\"The process that was supposed to create 'classes.lst' exited.\");\n+            return;\n+        }\n+        // don't wait for more than 10 seconds\n+        // TODO: make it configurable?\n+        final int maxWaits = 200;\n+        int waits = 0;\n+        BufferedReader in = new BufferedReader(new InputStreamReader(process.getInputStream(), StandardCharsets.UTF_8));\n+        while (true) {\n+            if (!process.isAlive()) {\n+                log.debug(\"The process that was supposed to create classes.lst exited\");\n+                break;\n+            }\n+            String line = in.readLine();\n+            if (line != null) {\n+                if (line.contains(Timing.INSTALLED_FEATURES) || line.contains(MainClassBuildStep.FAILED_TO_START_MESSAGE)) {\n+                    process.destroy();\n+                    break;\n+                }\n+            }\n+            try {\n+                Thread.sleep(50);\n+            } catch (InterruptedException ignored) {\n+            }\n+\n+            // we don't want to wait forever\n+            if (++waits >= maxWaits) {\n+                break;\n+            }\n+        }\n+        try {\n+            in.close();\n+        } catch (IOException ignored) {\n+        }\n+    }\n+\n+    /**\n+     * @return The path of the created app-cds.jsa file or null of the file was not created\n+     */\n+    private Path createAppCDS(JarBuildItem jarResult, String javaBin,\n+            Path classesLstPath, boolean isFastFar) {\n+\n+        Path workingDirectory = isFastFar ? jarResult.getPath().getParent().getParent() : jarResult.getPath().getParent();\n+        Path appCDSPath = workingDirectory.resolve(\"app-cds.jsa\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU2NzkwMQ=="}, "originalCommit": {"oid": "89cedeee05b1b2649701469fb33c697953c44f21"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY0NjA1NA==", "bodyText": "That is good, I missread this bit.", "url": "https://github.com/quarkusio/quarkus/pull/9710#discussion_r433646054", "createdAt": "2020-06-02T06:24:43Z", "author": {"login": "stuartwdouglas"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/AppCDSBuildStep.java", "diffHunk": "@@ -0,0 +1,211 @@\n+package io.quarkus.deployment.pkg.steps;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.BooleanSupplier;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.bootstrap.runner.Timing;\n+import io.quarkus.bootstrap.util.IoUtils;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.pkg.PackageConfig;\n+import io.quarkus.deployment.pkg.builditem.AppCDSBuildItem;\n+import io.quarkus.deployment.pkg.builditem.ArtifactResultBuildItem;\n+import io.quarkus.deployment.pkg.builditem.JarBuildItem;\n+import io.quarkus.deployment.pkg.builditem.OutputTargetBuildItem;\n+import io.quarkus.deployment.steps.MainClassBuildStep;\n+import io.quarkus.deployment.util.JavaVersionUtil;\n+import io.quarkus.utilities.JavaBinFinder;\n+\n+public class AppCDSBuildStep {\n+\n+    private static final Logger log = Logger.getLogger(AppCDSBuildStep.class);\n+\n+    @BuildStep(onlyIf = AppCDSRequired.class)\n+    public void build(OutputTargetBuildItem outputTarget, JarBuildItem jarResult, PackageConfig packageConfig,\n+            BuildProducer<AppCDSBuildItem> appCDS,\n+            BuildProducer<ArtifactResultBuildItem> artifactResult) throws Exception {\n+        Path appCDSDir = outputTarget.getOutputDirectory().resolve(\"appcds\");\n+        IoUtils.recursiveDelete(appCDSDir);\n+        Files.createDirectories(appCDSDir);\n+\n+        String javaBin = JavaBinFinder.findBin();\n+\n+        Path classesLstPath = createClassesLst(outputTarget, jarResult, javaBin, appCDSDir);\n+        if (classesLstPath == null) {\n+            log.warn(\"Unable to create AppCDS because classes.lst was not created.\");\n+            return;\n+        }\n+\n+        log.debug(\"'classes.lst' successfully created.\");\n+\n+        Path appCDSPath = createAppCDS(jarResult, javaBin, classesLstPath, packageConfig.isFastFar());\n+        if (appCDSPath == null) {\n+            log.warn(\"Unable to create AppCDS.\");\n+            return;\n+        }\n+\n+        log.infof(\n+                \"AppCDS successfully created at: '%s'.\\nTo ensure they are loaded properly, \" +\n+                        \"run the application jar from its directory and also add the '-XX:SharedArchiveFile=app-cds.jsa' \" +\n+                        \"JVM flag.\\nMoreover, make sure to use the same java version to run the application as was used to build it.\",\n+                appCDSPath.toAbsolutePath().toString());\n+\n+        appCDS.produce(new AppCDSBuildItem(appCDSPath));\n+        artifactResult.produce(new ArtifactResultBuildItem(appCDSPath, \"appCDS\", Collections.emptyMap()));\n+    }\n+\n+    /**\n+     * @return The path of the created classes.lst file or null of the file was not created\n+     */\n+    private Path createClassesLst(OutputTargetBuildItem outputTarget, JarBuildItem jarResult, String javaBin, Path appCDSDir) {\n+        Path classesLstPath = appCDSDir.resolve(\"classes.lst\");\n+\n+        List<String> command = new ArrayList<>(4);\n+        command.add(javaBin);\n+        command.add(\"-XX:DumpLoadedClassList=\" + classesLstPath.toAbsolutePath().toString());\n+        command.add(\"-jar\");\n+        command.add(jarResult.getPath().toAbsolutePath().toString());\n+\n+        if (log.isDebugEnabled()) {\n+            log.debugf(\"Launching command: '%s' to create class list\", String.join(\" \", command));\n+        }\n+        try {\n+            Process process = new ProcessBuilder(command)\n+                    .redirectErrorStream(true)\n+                    .directory(outputTarget.getOutputDirectory().toFile())\n+                    .start();\n+            waitForApplicationToStart(process);\n+        } catch (IOException e) {\n+            log.debug(\"Failed to launch process used to create 'classes.lst'.\", e);\n+            return null;\n+        }\n+\n+        if (!classesLstPath.toFile().exists()) { // shouldn't happen, but let's avoid any surprises\n+            return null;\n+        }\n+\n+        return classesLstPath;\n+    }\n+\n+    /**\n+     * Waits for the application terminate by looking for the proper logs, or just giving up after some time\n+     */\n+    private void waitForApplicationToStart(Process process) throws IOException {\n+        if (!process.isAlive()) {\n+            log.debug(\"The process that was supposed to create 'classes.lst' exited.\");\n+            return;\n+        }\n+        // don't wait for more than 10 seconds\n+        // TODO: make it configurable?\n+        final int maxWaits = 200;\n+        int waits = 0;\n+        BufferedReader in = new BufferedReader(new InputStreamReader(process.getInputStream(), StandardCharsets.UTF_8));\n+        while (true) {\n+            if (!process.isAlive()) {\n+                log.debug(\"The process that was supposed to create classes.lst exited\");\n+                break;\n+            }\n+            String line = in.readLine();\n+            if (line != null) {\n+                if (line.contains(Timing.INSTALLED_FEATURES) || line.contains(MainClassBuildStep.FAILED_TO_START_MESSAGE)) {\n+                    process.destroy();\n+                    break;\n+                }\n+            }\n+            try {\n+                Thread.sleep(50);\n+            } catch (InterruptedException ignored) {\n+            }\n+\n+            // we don't want to wait forever\n+            if (++waits >= maxWaits) {\n+                break;\n+            }\n+        }\n+        try {\n+            in.close();\n+        } catch (IOException ignored) {\n+        }\n+    }\n+\n+    /**\n+     * @return The path of the created app-cds.jsa file or null of the file was not created\n+     */\n+    private Path createAppCDS(JarBuildItem jarResult, String javaBin,\n+            Path classesLstPath, boolean isFastFar) {\n+\n+        Path workingDirectory = isFastFar ? jarResult.getPath().getParent().getParent() : jarResult.getPath().getParent();\n+        Path appCDSPath = workingDirectory.resolve(\"app-cds.jsa\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU2NzkwMQ=="}, "originalCommit": {"oid": "89cedeee05b1b2649701469fb33c697953c44f21"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY0NjA3Nw==", "bodyText": "That is good, I missread this bit.", "url": "https://github.com/quarkusio/quarkus/pull/9710#discussion_r433646077", "createdAt": "2020-06-02T06:24:46Z", "author": {"login": "stuartwdouglas"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/AppCDSBuildStep.java", "diffHunk": "@@ -0,0 +1,211 @@\n+package io.quarkus.deployment.pkg.steps;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.BooleanSupplier;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.bootstrap.runner.Timing;\n+import io.quarkus.bootstrap.util.IoUtils;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.pkg.PackageConfig;\n+import io.quarkus.deployment.pkg.builditem.AppCDSBuildItem;\n+import io.quarkus.deployment.pkg.builditem.ArtifactResultBuildItem;\n+import io.quarkus.deployment.pkg.builditem.JarBuildItem;\n+import io.quarkus.deployment.pkg.builditem.OutputTargetBuildItem;\n+import io.quarkus.deployment.steps.MainClassBuildStep;\n+import io.quarkus.deployment.util.JavaVersionUtil;\n+import io.quarkus.utilities.JavaBinFinder;\n+\n+public class AppCDSBuildStep {\n+\n+    private static final Logger log = Logger.getLogger(AppCDSBuildStep.class);\n+\n+    @BuildStep(onlyIf = AppCDSRequired.class)\n+    public void build(OutputTargetBuildItem outputTarget, JarBuildItem jarResult, PackageConfig packageConfig,\n+            BuildProducer<AppCDSBuildItem> appCDS,\n+            BuildProducer<ArtifactResultBuildItem> artifactResult) throws Exception {\n+        Path appCDSDir = outputTarget.getOutputDirectory().resolve(\"appcds\");\n+        IoUtils.recursiveDelete(appCDSDir);\n+        Files.createDirectories(appCDSDir);\n+\n+        String javaBin = JavaBinFinder.findBin();\n+\n+        Path classesLstPath = createClassesLst(outputTarget, jarResult, javaBin, appCDSDir);\n+        if (classesLstPath == null) {\n+            log.warn(\"Unable to create AppCDS because classes.lst was not created.\");\n+            return;\n+        }\n+\n+        log.debug(\"'classes.lst' successfully created.\");\n+\n+        Path appCDSPath = createAppCDS(jarResult, javaBin, classesLstPath, packageConfig.isFastFar());\n+        if (appCDSPath == null) {\n+            log.warn(\"Unable to create AppCDS.\");\n+            return;\n+        }\n+\n+        log.infof(\n+                \"AppCDS successfully created at: '%s'.\\nTo ensure they are loaded properly, \" +\n+                        \"run the application jar from its directory and also add the '-XX:SharedArchiveFile=app-cds.jsa' \" +\n+                        \"JVM flag.\\nMoreover, make sure to use the same java version to run the application as was used to build it.\",\n+                appCDSPath.toAbsolutePath().toString());\n+\n+        appCDS.produce(new AppCDSBuildItem(appCDSPath));\n+        artifactResult.produce(new ArtifactResultBuildItem(appCDSPath, \"appCDS\", Collections.emptyMap()));\n+    }\n+\n+    /**\n+     * @return The path of the created classes.lst file or null of the file was not created\n+     */\n+    private Path createClassesLst(OutputTargetBuildItem outputTarget, JarBuildItem jarResult, String javaBin, Path appCDSDir) {\n+        Path classesLstPath = appCDSDir.resolve(\"classes.lst\");\n+\n+        List<String> command = new ArrayList<>(4);\n+        command.add(javaBin);\n+        command.add(\"-XX:DumpLoadedClassList=\" + classesLstPath.toAbsolutePath().toString());\n+        command.add(\"-jar\");\n+        command.add(jarResult.getPath().toAbsolutePath().toString());\n+\n+        if (log.isDebugEnabled()) {\n+            log.debugf(\"Launching command: '%s' to create class list\", String.join(\" \", command));\n+        }\n+        try {\n+            Process process = new ProcessBuilder(command)\n+                    .redirectErrorStream(true)\n+                    .directory(outputTarget.getOutputDirectory().toFile())\n+                    .start();\n+            waitForApplicationToStart(process);\n+        } catch (IOException e) {\n+            log.debug(\"Failed to launch process used to create 'classes.lst'.\", e);\n+            return null;\n+        }\n+\n+        if (!classesLstPath.toFile().exists()) { // shouldn't happen, but let's avoid any surprises\n+            return null;\n+        }\n+\n+        return classesLstPath;\n+    }\n+\n+    /**\n+     * Waits for the application terminate by looking for the proper logs, or just giving up after some time\n+     */\n+    private void waitForApplicationToStart(Process process) throws IOException {\n+        if (!process.isAlive()) {\n+            log.debug(\"The process that was supposed to create 'classes.lst' exited.\");\n+            return;\n+        }\n+        // don't wait for more than 10 seconds\n+        // TODO: make it configurable?\n+        final int maxWaits = 200;\n+        int waits = 0;\n+        BufferedReader in = new BufferedReader(new InputStreamReader(process.getInputStream(), StandardCharsets.UTF_8));\n+        while (true) {\n+            if (!process.isAlive()) {\n+                log.debug(\"The process that was supposed to create classes.lst exited\");\n+                break;\n+            }\n+            String line = in.readLine();\n+            if (line != null) {\n+                if (line.contains(Timing.INSTALLED_FEATURES) || line.contains(MainClassBuildStep.FAILED_TO_START_MESSAGE)) {\n+                    process.destroy();\n+                    break;\n+                }\n+            }\n+            try {\n+                Thread.sleep(50);\n+            } catch (InterruptedException ignored) {\n+            }\n+\n+            // we don't want to wait forever\n+            if (++waits >= maxWaits) {\n+                break;\n+            }\n+        }\n+        try {\n+            in.close();\n+        } catch (IOException ignored) {\n+        }\n+    }\n+\n+    /**\n+     * @return The path of the created app-cds.jsa file or null of the file was not created\n+     */\n+    private Path createAppCDS(JarBuildItem jarResult, String javaBin,\n+            Path classesLstPath, boolean isFastFar) {\n+\n+        Path workingDirectory = isFastFar ? jarResult.getPath().getParent().getParent() : jarResult.getPath().getParent();\n+        Path appCDSPath = workingDirectory.resolve(\"app-cds.jsa\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU2NzkwMQ=="}, "originalCommit": {"oid": "89cedeee05b1b2649701469fb33c697953c44f21"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDczMTIzOnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/AppCDSBuildStep.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMToxMToyNlrOGde5uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNToyNzo1MlrOGdijUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU2ODE4Nw==", "bodyText": "I think this approach is going to fail in a lot of cases, as you need all the production services to be present.", "url": "https://github.com/quarkusio/quarkus/pull/9710#discussion_r433568187", "createdAt": "2020-06-02T01:11:26Z", "author": {"login": "stuartwdouglas"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/AppCDSBuildStep.java", "diffHunk": "@@ -0,0 +1,211 @@\n+package io.quarkus.deployment.pkg.steps;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.BooleanSupplier;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.bootstrap.runner.Timing;\n+import io.quarkus.bootstrap.util.IoUtils;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.pkg.PackageConfig;\n+import io.quarkus.deployment.pkg.builditem.AppCDSBuildItem;\n+import io.quarkus.deployment.pkg.builditem.ArtifactResultBuildItem;\n+import io.quarkus.deployment.pkg.builditem.JarBuildItem;\n+import io.quarkus.deployment.pkg.builditem.OutputTargetBuildItem;\n+import io.quarkus.deployment.steps.MainClassBuildStep;\n+import io.quarkus.deployment.util.JavaVersionUtil;\n+import io.quarkus.utilities.JavaBinFinder;\n+\n+public class AppCDSBuildStep {\n+\n+    private static final Logger log = Logger.getLogger(AppCDSBuildStep.class);\n+\n+    @BuildStep(onlyIf = AppCDSRequired.class)\n+    public void build(OutputTargetBuildItem outputTarget, JarBuildItem jarResult, PackageConfig packageConfig,\n+            BuildProducer<AppCDSBuildItem> appCDS,\n+            BuildProducer<ArtifactResultBuildItem> artifactResult) throws Exception {\n+        Path appCDSDir = outputTarget.getOutputDirectory().resolve(\"appcds\");\n+        IoUtils.recursiveDelete(appCDSDir);\n+        Files.createDirectories(appCDSDir);\n+\n+        String javaBin = JavaBinFinder.findBin();\n+\n+        Path classesLstPath = createClassesLst(outputTarget, jarResult, javaBin, appCDSDir);\n+        if (classesLstPath == null) {\n+            log.warn(\"Unable to create AppCDS because classes.lst was not created.\");\n+            return;\n+        }\n+\n+        log.debug(\"'classes.lst' successfully created.\");\n+\n+        Path appCDSPath = createAppCDS(jarResult, javaBin, classesLstPath, packageConfig.isFastFar());\n+        if (appCDSPath == null) {\n+            log.warn(\"Unable to create AppCDS.\");\n+            return;\n+        }\n+\n+        log.infof(\n+                \"AppCDS successfully created at: '%s'.\\nTo ensure they are loaded properly, \" +\n+                        \"run the application jar from its directory and also add the '-XX:SharedArchiveFile=app-cds.jsa' \" +\n+                        \"JVM flag.\\nMoreover, make sure to use the same java version to run the application as was used to build it.\",\n+                appCDSPath.toAbsolutePath().toString());\n+\n+        appCDS.produce(new AppCDSBuildItem(appCDSPath));\n+        artifactResult.produce(new ArtifactResultBuildItem(appCDSPath, \"appCDS\", Collections.emptyMap()));\n+    }\n+\n+    /**\n+     * @return The path of the created classes.lst file or null of the file was not created\n+     */\n+    private Path createClassesLst(OutputTargetBuildItem outputTarget, JarBuildItem jarResult, String javaBin, Path appCDSDir) {\n+        Path classesLstPath = appCDSDir.resolve(\"classes.lst\");\n+\n+        List<String> command = new ArrayList<>(4);\n+        command.add(javaBin);\n+        command.add(\"-XX:DumpLoadedClassList=\" + classesLstPath.toAbsolutePath().toString());\n+        command.add(\"-jar\");\n+        command.add(jarResult.getPath().toAbsolutePath().toString());\n+\n+        if (log.isDebugEnabled()) {\n+            log.debugf(\"Launching command: '%s' to create class list\", String.join(\" \", command));\n+        }\n+        try {\n+            Process process = new ProcessBuilder(command)\n+                    .redirectErrorStream(true)\n+                    .directory(outputTarget.getOutputDirectory().toFile())\n+                    .start();\n+            waitForApplicationToStart(process);\n+        } catch (IOException e) {\n+            log.debug(\"Failed to launch process used to create 'classes.lst'.\", e);\n+            return null;\n+        }\n+\n+        if (!classesLstPath.toFile().exists()) { // shouldn't happen, but let's avoid any surprises\n+            return null;\n+        }\n+\n+        return classesLstPath;\n+    }\n+\n+    /**\n+     * Waits for the application terminate by looking for the proper logs, or just giving up after some time\n+     */\n+    private void waitForApplicationToStart(Process process) throws IOException {\n+        if (!process.isAlive()) {\n+            log.debug(\"The process that was supposed to create 'classes.lst' exited.\");\n+            return;\n+        }\n+        // don't wait for more than 10 seconds\n+        // TODO: make it configurable?\n+        final int maxWaits = 200;\n+        int waits = 0;\n+        BufferedReader in = new BufferedReader(new InputStreamReader(process.getInputStream(), StandardCharsets.UTF_8));\n+        while (true) {\n+            if (!process.isAlive()) {\n+                log.debug(\"The process that was supposed to create classes.lst exited\");\n+                break;\n+            }\n+            String line = in.readLine();\n+            if (line != null) {\n+                if (line.contains(Timing.INSTALLED_FEATURES) || line.contains(MainClassBuildStep.FAILED_TO_START_MESSAGE)) {\n+                    process.destroy();\n+                    break;\n+                }\n+            }\n+            try {\n+                Thread.sleep(50);\n+            } catch (InterruptedException ignored) {\n+            }\n+\n+            // we don't want to wait forever\n+            if (++waits >= maxWaits) {\n+                break;\n+            }\n+        }\n+        try {\n+            in.close();\n+        } catch (IOException ignored) {\n+        }\n+    }\n+\n+    /**\n+     * @return The path of the created app-cds.jsa file or null of the file was not created\n+     */\n+    private Path createAppCDS(JarBuildItem jarResult, String javaBin,\n+            Path classesLstPath, boolean isFastFar) {\n+\n+        Path workingDirectory = isFastFar ? jarResult.getPath().getParent().getParent() : jarResult.getPath().getParent();\n+        Path appCDSPath = workingDirectory.resolve(\"app-cds.jsa\");\n+\n+        List<String> command = new ArrayList<>(6);\n+        command.add(javaBin);\n+        command.add(\"-Xshare:dump\");\n+        command.add(\"-XX:SharedClassListFile=\" + classesLstPath.toAbsolutePath().toString());\n+        // We use the relative paths because at runtime 'java -XX:SharedArchiveFile=... -jar ...' expects the AppCDS and jar files\n+        // to match exactly what was used at build time.\n+        // For that reason we also run the creation process from inside the output directory,\n+        // The end result is that users can simply use 'java -XX:SharedArchiveFile=app-cds.jsa -jar app.jar'\n+        command.add(\"-XX:SharedArchiveFile=\" + appCDSPath.getFileName().toString());\n+        command.add(\"--class-path\");\n+        command.add(jarResult.getPath().getFileName().toString());\n+\n+        if (log.isDebugEnabled()) {\n+            log.debugf(\"Launching command: '%s' to create final AppCDS\", String.join(\" \", command));\n+        }\n+\n+        int exitCode;\n+        try {\n+            exitCode = new ProcessBuilder(command)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89cedeee05b1b2649701469fb33c697953c44f21"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyNzk4Ng==", "bodyText": "It could certainly fail. I'm not saying it's a good solution - because it isn't, but even like this you still get a list classes :)", "url": "https://github.com/quarkusio/quarkus/pull/9710#discussion_r433627986", "createdAt": "2020-06-02T05:27:52Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/AppCDSBuildStep.java", "diffHunk": "@@ -0,0 +1,211 @@\n+package io.quarkus.deployment.pkg.steps;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.BooleanSupplier;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.bootstrap.runner.Timing;\n+import io.quarkus.bootstrap.util.IoUtils;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.pkg.PackageConfig;\n+import io.quarkus.deployment.pkg.builditem.AppCDSBuildItem;\n+import io.quarkus.deployment.pkg.builditem.ArtifactResultBuildItem;\n+import io.quarkus.deployment.pkg.builditem.JarBuildItem;\n+import io.quarkus.deployment.pkg.builditem.OutputTargetBuildItem;\n+import io.quarkus.deployment.steps.MainClassBuildStep;\n+import io.quarkus.deployment.util.JavaVersionUtil;\n+import io.quarkus.utilities.JavaBinFinder;\n+\n+public class AppCDSBuildStep {\n+\n+    private static final Logger log = Logger.getLogger(AppCDSBuildStep.class);\n+\n+    @BuildStep(onlyIf = AppCDSRequired.class)\n+    public void build(OutputTargetBuildItem outputTarget, JarBuildItem jarResult, PackageConfig packageConfig,\n+            BuildProducer<AppCDSBuildItem> appCDS,\n+            BuildProducer<ArtifactResultBuildItem> artifactResult) throws Exception {\n+        Path appCDSDir = outputTarget.getOutputDirectory().resolve(\"appcds\");\n+        IoUtils.recursiveDelete(appCDSDir);\n+        Files.createDirectories(appCDSDir);\n+\n+        String javaBin = JavaBinFinder.findBin();\n+\n+        Path classesLstPath = createClassesLst(outputTarget, jarResult, javaBin, appCDSDir);\n+        if (classesLstPath == null) {\n+            log.warn(\"Unable to create AppCDS because classes.lst was not created.\");\n+            return;\n+        }\n+\n+        log.debug(\"'classes.lst' successfully created.\");\n+\n+        Path appCDSPath = createAppCDS(jarResult, javaBin, classesLstPath, packageConfig.isFastFar());\n+        if (appCDSPath == null) {\n+            log.warn(\"Unable to create AppCDS.\");\n+            return;\n+        }\n+\n+        log.infof(\n+                \"AppCDS successfully created at: '%s'.\\nTo ensure they are loaded properly, \" +\n+                        \"run the application jar from its directory and also add the '-XX:SharedArchiveFile=app-cds.jsa' \" +\n+                        \"JVM flag.\\nMoreover, make sure to use the same java version to run the application as was used to build it.\",\n+                appCDSPath.toAbsolutePath().toString());\n+\n+        appCDS.produce(new AppCDSBuildItem(appCDSPath));\n+        artifactResult.produce(new ArtifactResultBuildItem(appCDSPath, \"appCDS\", Collections.emptyMap()));\n+    }\n+\n+    /**\n+     * @return The path of the created classes.lst file or null of the file was not created\n+     */\n+    private Path createClassesLst(OutputTargetBuildItem outputTarget, JarBuildItem jarResult, String javaBin, Path appCDSDir) {\n+        Path classesLstPath = appCDSDir.resolve(\"classes.lst\");\n+\n+        List<String> command = new ArrayList<>(4);\n+        command.add(javaBin);\n+        command.add(\"-XX:DumpLoadedClassList=\" + classesLstPath.toAbsolutePath().toString());\n+        command.add(\"-jar\");\n+        command.add(jarResult.getPath().toAbsolutePath().toString());\n+\n+        if (log.isDebugEnabled()) {\n+            log.debugf(\"Launching command: '%s' to create class list\", String.join(\" \", command));\n+        }\n+        try {\n+            Process process = new ProcessBuilder(command)\n+                    .redirectErrorStream(true)\n+                    .directory(outputTarget.getOutputDirectory().toFile())\n+                    .start();\n+            waitForApplicationToStart(process);\n+        } catch (IOException e) {\n+            log.debug(\"Failed to launch process used to create 'classes.lst'.\", e);\n+            return null;\n+        }\n+\n+        if (!classesLstPath.toFile().exists()) { // shouldn't happen, but let's avoid any surprises\n+            return null;\n+        }\n+\n+        return classesLstPath;\n+    }\n+\n+    /**\n+     * Waits for the application terminate by looking for the proper logs, or just giving up after some time\n+     */\n+    private void waitForApplicationToStart(Process process) throws IOException {\n+        if (!process.isAlive()) {\n+            log.debug(\"The process that was supposed to create 'classes.lst' exited.\");\n+            return;\n+        }\n+        // don't wait for more than 10 seconds\n+        // TODO: make it configurable?\n+        final int maxWaits = 200;\n+        int waits = 0;\n+        BufferedReader in = new BufferedReader(new InputStreamReader(process.getInputStream(), StandardCharsets.UTF_8));\n+        while (true) {\n+            if (!process.isAlive()) {\n+                log.debug(\"The process that was supposed to create classes.lst exited\");\n+                break;\n+            }\n+            String line = in.readLine();\n+            if (line != null) {\n+                if (line.contains(Timing.INSTALLED_FEATURES) || line.contains(MainClassBuildStep.FAILED_TO_START_MESSAGE)) {\n+                    process.destroy();\n+                    break;\n+                }\n+            }\n+            try {\n+                Thread.sleep(50);\n+            } catch (InterruptedException ignored) {\n+            }\n+\n+            // we don't want to wait forever\n+            if (++waits >= maxWaits) {\n+                break;\n+            }\n+        }\n+        try {\n+            in.close();\n+        } catch (IOException ignored) {\n+        }\n+    }\n+\n+    /**\n+     * @return The path of the created app-cds.jsa file or null of the file was not created\n+     */\n+    private Path createAppCDS(JarBuildItem jarResult, String javaBin,\n+            Path classesLstPath, boolean isFastFar) {\n+\n+        Path workingDirectory = isFastFar ? jarResult.getPath().getParent().getParent() : jarResult.getPath().getParent();\n+        Path appCDSPath = workingDirectory.resolve(\"app-cds.jsa\");\n+\n+        List<String> command = new ArrayList<>(6);\n+        command.add(javaBin);\n+        command.add(\"-Xshare:dump\");\n+        command.add(\"-XX:SharedClassListFile=\" + classesLstPath.toAbsolutePath().toString());\n+        // We use the relative paths because at runtime 'java -XX:SharedArchiveFile=... -jar ...' expects the AppCDS and jar files\n+        // to match exactly what was used at build time.\n+        // For that reason we also run the creation process from inside the output directory,\n+        // The end result is that users can simply use 'java -XX:SharedArchiveFile=app-cds.jsa -jar app.jar'\n+        command.add(\"-XX:SharedArchiveFile=\" + appCDSPath.getFileName().toString());\n+        command.add(\"--class-path\");\n+        command.add(jarResult.getPath().getFileName().toString());\n+\n+        if (log.isDebugEnabled()) {\n+            log.debugf(\"Launching command: '%s' to create final AppCDS\", String.join(\" \", command));\n+        }\n+\n+        int exitCode;\n+        try {\n+            exitCode = new ProcessBuilder(command)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU2ODE4Nw=="}, "originalCommit": {"oid": "89cedeee05b1b2649701469fb33c697953c44f21"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Njk2MTYxOnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/PackageConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMTo1MDozNVrOGmBZgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMTo1MDozNVrOGmBZgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUyMTk4NA==", "bodyText": "MUTABLE_JAR is also a type of FAST_JAR.", "url": "https://github.com/quarkusio/quarkus/pull/9710#discussion_r442521984", "createdAt": "2020-06-18T21:50:35Z", "author": {"login": "stuartwdouglas"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/PackageConfig.java", "diffHunk": "@@ -79,4 +79,30 @@\n      */\n     @ConfigItem\n     public Optional<String> outputName;\n+\n+    /**\n+     * Whether to automate the creation of AppCDS. This has not effect when a native binary is needed and will be ignored in\n+     * that case.\n+     * Furthermore, this options only works for Java 11+.\n+     * Finally, care must be taken to use the same exact JVM version when building and running the application.\n+     */\n+    @ConfigItem\n+    public boolean createAppcds;\n+\n+    public boolean isAnyJarType() {\n+        return (type.equalsIgnoreCase(PackageConfig.LEGACY) ||\n+                type.equalsIgnoreCase(PackageConfig.JAR) ||\n+                type.equalsIgnoreCase(PackageConfig.FAST_JAR) ||\n+                type.equalsIgnoreCase(PackageConfig.UBER_JAR)) ||\n+                type.equalsIgnoreCase(PackageConfig.MUTABLE_JAR);\n+    }\n+\n+    public boolean isFastJar() {\n+        return type.equalsIgnoreCase(PackageConfig.FAST_JAR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ba53d168010a79c586417541ad73d7f61de0a87"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Njk2ODA1OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/AppCDSBuildStep.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMTo1MzowOFrOGmBdZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMTo1MzowOFrOGmBdZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUyMjk4Mw==", "bodyText": "Maybe also include info about the JDK used to build it in this message?", "url": "https://github.com/quarkusio/quarkus/pull/9710#discussion_r442522983", "createdAt": "2020-06-18T21:53:08Z", "author": {"login": "stuartwdouglas"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/AppCDSBuildStep.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package io.quarkus.deployment.pkg.steps;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.BooleanSupplier;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.bootstrap.util.IoUtils;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.pkg.PackageConfig;\n+import io.quarkus.deployment.pkg.builditem.AppCDSRequestedBuildItem;\n+import io.quarkus.deployment.pkg.builditem.AppCDSResultBuildItem;\n+import io.quarkus.deployment.pkg.builditem.ArtifactResultBuildItem;\n+import io.quarkus.deployment.pkg.builditem.JarBuildItem;\n+import io.quarkus.deployment.pkg.builditem.OutputTargetBuildItem;\n+import io.quarkus.deployment.steps.MainClassBuildStep;\n+import io.quarkus.deployment.util.JavaVersionUtil;\n+import io.quarkus.runtime.LaunchMode;\n+\n+public class AppCDSBuildStep {\n+\n+    private static final Logger log = Logger.getLogger(AppCDSBuildStep.class);\n+    public static final String JDK_CLASSLIST_FILE = \"classlist\";\n+    public static final String CLASSES_LIST_FILE_NAME = \"classes.lst\";\n+\n+    @BuildStep(onlyIf = AppCDSRequired.class)\n+    public void requested(OutputTargetBuildItem outputTarget, BuildProducer<AppCDSRequestedBuildItem> producer)\n+            throws IOException {\n+        Path appCDSDir = outputTarget.getOutputDirectory().resolve(\"appcds\");\n+        IoUtils.recursiveDelete(appCDSDir);\n+        Files.createDirectories(appCDSDir);\n+\n+        producer.produce(new AppCDSRequestedBuildItem(outputTarget.getOutputDirectory().resolve(\"appcds\")));\n+    }\n+\n+    @BuildStep\n+    public void build(Optional<AppCDSRequestedBuildItem> appCDsRequested,\n+            JarBuildItem jarResult, PackageConfig packageConfig,\n+            BuildProducer<AppCDSResultBuildItem> appCDS,\n+            BuildProducer<ArtifactResultBuildItem> artifactResult) throws Exception {\n+        if (!appCDsRequested.isPresent()) {\n+            return;\n+        }\n+\n+        Path appCDSDir = appCDsRequested.get().getAppCDSDir();\n+        String javaHomeStr = System.getProperty(\"java.home\");\n+        Path javaHomeDir = Paths.get(javaHomeStr);\n+        Path jdkClassList = javaHomeDir.resolve(\"lib\").resolve(JDK_CLASSLIST_FILE);\n+        if (!jdkClassList.toFile().exists()) {\n+            log.warnf(\n+                    \"In order to create AppCDS the JDK used to build the Quarkus application must contain a file named '%s' in the its 'lib' directory.\",\n+                    JDK_CLASSLIST_FILE);\n+            return;\n+        }\n+        String javaExecutableStr = \"java\";\n+        String javaBinStr = javaHomeStr + File.separator + \"bin\" + File.separator + javaExecutableStr; //TODO do we need to add '.exe' here for Windows?\n+        if (!new File(javaBinStr).canExecute()) {\n+            log.warnf(\n+                    \"In order to create AppCDS the JDK used to build the Quarkus application must contain an executable named '%s' in its 'bin' directory.\",\n+                    javaBinStr);\n+            return;\n+        }\n+\n+        Path classesLstPath = createClassesLst(packageConfig, jarResult, javaBinStr, appCDSDir);\n+        if (classesLstPath == null) {\n+            log.warn(\"Unable to create AppCDS because \" + CLASSES_LIST_FILE_NAME + \" was not created.\");\n+            return;\n+        }\n+\n+        log.debug(\"'\" + CLASSES_LIST_FILE_NAME + \"' successfully created.\");\n+\n+        log.info(\"Launching AppCDS creation process.\");\n+        Path appCDSPath = createAppCDS(jarResult, javaBinStr, classesLstPath, packageConfig.isFastJar());\n+        if (appCDSPath == null) {\n+            log.warn(\"Unable to create AppCDS.\");\n+            return;\n+        }\n+\n+        log.infof(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ba53d168010a79c586417541ad73d7f61de0a87"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODYzMDc1OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/PackageConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMToyNTozM1rOGmRfdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMToyNTozM1rOGmRfdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc4NTY1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Furthermore, this options only works for Java 11+ and is considered experimental for the time being.\n          \n          \n            \n                 * Furthermore, this option only works for Java 11+ and is considered experimental for the time being.", "url": "https://github.com/quarkusio/quarkus/pull/9710#discussion_r442785653", "createdAt": "2020-06-19T11:25:33Z", "author": {"login": "gsmet"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/PackageConfig.java", "diffHunk": "@@ -79,4 +79,31 @@\n      */\n     @ConfigItem\n     public Optional<String> outputName;\n+\n+    /**\n+     * Whether to automate the creation of AppCDS. This has not effect when a native binary is needed and will be ignored in\n+     * that case.\n+     * Furthermore, this options only works for Java 11+ and is considered experimental for the time being.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c17581a98680cb766c26772e8e7b772d5fc8614e"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODYzMjk1OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/AppCDSRequestedBuildItem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMToyNjoyOFrOGmRg3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMToyNjoyOFrOGmRg3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc4NjAxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Build item to notify the indicate to the the various steps that AppCDS generation\n          \n          \n            \n             * Build item to indicate to the various steps that AppCDS generation", "url": "https://github.com/quarkusio/quarkus/pull/9710#discussion_r442786013", "createdAt": "2020-06-19T11:26:28Z", "author": {"login": "gsmet"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/builditem/AppCDSRequestedBuildItem.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package io.quarkus.deployment.pkg.builditem;\n+\n+import java.nio.file.Path;\n+\n+import io.quarkus.builder.item.SimpleBuildItem;\n+\n+/**\n+ * Build item to notify the indicate to the the various steps that AppCDS generation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c17581a98680cb766c26772e8e7b772d5fc8614e"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODYzNjU3OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/AppCDSBuildStep.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMToyODowMFrOGmRjEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMTo0Nzo1OVrOGmSB3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc4NjU3OQ==", "bodyText": "debugf maybe?", "url": "https://github.com/quarkusio/quarkus/pull/9710#discussion_r442786579", "createdAt": "2020-06-19T11:28:00Z", "author": {"login": "gsmet"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/AppCDSBuildStep.java", "diffHunk": "@@ -0,0 +1,243 @@\n+package io.quarkus.deployment.pkg.steps;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.BooleanSupplier;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.bootstrap.util.IoUtils;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.pkg.PackageConfig;\n+import io.quarkus.deployment.pkg.builditem.AppCDSRequestedBuildItem;\n+import io.quarkus.deployment.pkg.builditem.AppCDSResultBuildItem;\n+import io.quarkus.deployment.pkg.builditem.ArtifactResultBuildItem;\n+import io.quarkus.deployment.pkg.builditem.JarBuildItem;\n+import io.quarkus.deployment.pkg.builditem.OutputTargetBuildItem;\n+import io.quarkus.deployment.steps.MainClassBuildStep;\n+import io.quarkus.deployment.util.JavaVersionUtil;\n+import io.quarkus.runtime.LaunchMode;\n+import io.quarkus.utilities.JavaBinFinder;\n+\n+public class AppCDSBuildStep {\n+\n+    private static final Logger log = Logger.getLogger(AppCDSBuildStep.class);\n+    public static final String JDK_CLASSLIST_FILE = \"classlist\";\n+    public static final String CLASSES_LIST_FILE_NAME = \"classes.lst\";\n+\n+    @BuildStep(onlyIf = AppCDSRequired.class)\n+    public void requested(OutputTargetBuildItem outputTarget, BuildProducer<AppCDSRequestedBuildItem> producer)\n+            throws IOException {\n+        Path appCDSDir = outputTarget.getOutputDirectory().resolve(\"appcds\");\n+        IoUtils.recursiveDelete(appCDSDir);\n+        Files.createDirectories(appCDSDir);\n+\n+        producer.produce(new AppCDSRequestedBuildItem(outputTarget.getOutputDirectory().resolve(\"appcds\")));\n+    }\n+\n+    @BuildStep\n+    public void build(Optional<AppCDSRequestedBuildItem> appCDsRequested,\n+            JarBuildItem jarResult, PackageConfig packageConfig,\n+            BuildProducer<AppCDSResultBuildItem> appCDS,\n+            BuildProducer<ArtifactResultBuildItem> artifactResult) throws Exception {\n+        if (!appCDsRequested.isPresent()) {\n+            return;\n+        }\n+\n+        Path appCDSDir = appCDsRequested.get().getAppCDSDir();\n+        String javaHomeStr = System.getProperty(\"java.home\");\n+        Path javaHomeDir = Paths.get(javaHomeStr);\n+        Path jdkClassList = javaHomeDir.resolve(\"lib\").resolve(JDK_CLASSLIST_FILE);\n+        if (!jdkClassList.toFile().exists()) {\n+            log.warnf(\n+                    \"In order to create AppCDS the JDK used to build the Quarkus application must contain a file named '%s' in the its 'lib' directory.\",\n+                    JDK_CLASSLIST_FILE);\n+            return;\n+        }\n+        String javaExecutableStr = JavaBinFinder.simpleBinaryName();\n+        String javaBinStr = javaHomeStr + File.separator + \"bin\" + File.separator + javaExecutableStr; //TODO do we need to add '.exe' here for Windows?\n+        if (!new File(javaBinStr).canExecute()) {\n+            log.warnf(\n+                    \"In order to create AppCDS the JDK used to build the Quarkus application must contain an executable named '%s' in its 'bin' directory.\",\n+                    javaBinStr);\n+            return;\n+        }\n+\n+        Path classesLstPath = createClassesLst(packageConfig, jarResult, javaBinStr, appCDSDir);\n+        if (classesLstPath == null) {\n+            log.warn(\"Unable to create AppCDS because \" + CLASSES_LIST_FILE_NAME + \" was not created.\");\n+            return;\n+        }\n+\n+        log.debug(\"'\" + CLASSES_LIST_FILE_NAME + \"' successfully created.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c17581a98680cb766c26772e8e7b772d5fc8614e"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc5NDQ2Mw==", "bodyText": "Good idea", "url": "https://github.com/quarkusio/quarkus/pull/9710#discussion_r442794463", "createdAt": "2020-06-19T11:47:59Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/AppCDSBuildStep.java", "diffHunk": "@@ -0,0 +1,243 @@\n+package io.quarkus.deployment.pkg.steps;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.BooleanSupplier;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.bootstrap.util.IoUtils;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.pkg.PackageConfig;\n+import io.quarkus.deployment.pkg.builditem.AppCDSRequestedBuildItem;\n+import io.quarkus.deployment.pkg.builditem.AppCDSResultBuildItem;\n+import io.quarkus.deployment.pkg.builditem.ArtifactResultBuildItem;\n+import io.quarkus.deployment.pkg.builditem.JarBuildItem;\n+import io.quarkus.deployment.pkg.builditem.OutputTargetBuildItem;\n+import io.quarkus.deployment.steps.MainClassBuildStep;\n+import io.quarkus.deployment.util.JavaVersionUtil;\n+import io.quarkus.runtime.LaunchMode;\n+import io.quarkus.utilities.JavaBinFinder;\n+\n+public class AppCDSBuildStep {\n+\n+    private static final Logger log = Logger.getLogger(AppCDSBuildStep.class);\n+    public static final String JDK_CLASSLIST_FILE = \"classlist\";\n+    public static final String CLASSES_LIST_FILE_NAME = \"classes.lst\";\n+\n+    @BuildStep(onlyIf = AppCDSRequired.class)\n+    public void requested(OutputTargetBuildItem outputTarget, BuildProducer<AppCDSRequestedBuildItem> producer)\n+            throws IOException {\n+        Path appCDSDir = outputTarget.getOutputDirectory().resolve(\"appcds\");\n+        IoUtils.recursiveDelete(appCDSDir);\n+        Files.createDirectories(appCDSDir);\n+\n+        producer.produce(new AppCDSRequestedBuildItem(outputTarget.getOutputDirectory().resolve(\"appcds\")));\n+    }\n+\n+    @BuildStep\n+    public void build(Optional<AppCDSRequestedBuildItem> appCDsRequested,\n+            JarBuildItem jarResult, PackageConfig packageConfig,\n+            BuildProducer<AppCDSResultBuildItem> appCDS,\n+            BuildProducer<ArtifactResultBuildItem> artifactResult) throws Exception {\n+        if (!appCDsRequested.isPresent()) {\n+            return;\n+        }\n+\n+        Path appCDSDir = appCDsRequested.get().getAppCDSDir();\n+        String javaHomeStr = System.getProperty(\"java.home\");\n+        Path javaHomeDir = Paths.get(javaHomeStr);\n+        Path jdkClassList = javaHomeDir.resolve(\"lib\").resolve(JDK_CLASSLIST_FILE);\n+        if (!jdkClassList.toFile().exists()) {\n+            log.warnf(\n+                    \"In order to create AppCDS the JDK used to build the Quarkus application must contain a file named '%s' in the its 'lib' directory.\",\n+                    JDK_CLASSLIST_FILE);\n+            return;\n+        }\n+        String javaExecutableStr = JavaBinFinder.simpleBinaryName();\n+        String javaBinStr = javaHomeStr + File.separator + \"bin\" + File.separator + javaExecutableStr; //TODO do we need to add '.exe' here for Windows?\n+        if (!new File(javaBinStr).canExecute()) {\n+            log.warnf(\n+                    \"In order to create AppCDS the JDK used to build the Quarkus application must contain an executable named '%s' in its 'bin' directory.\",\n+                    javaBinStr);\n+            return;\n+        }\n+\n+        Path classesLstPath = createClassesLst(packageConfig, jarResult, javaBinStr, appCDSDir);\n+        if (classesLstPath == null) {\n+            log.warn(\"Unable to create AppCDS because \" + CLASSES_LIST_FILE_NAME + \" was not created.\");\n+            return;\n+        }\n+\n+        log.debug(\"'\" + CLASSES_LIST_FILE_NAME + \"' successfully created.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc4NjU3OQ=="}, "originalCommit": {"oid": "c17581a98680cb766c26772e8e7b772d5fc8614e"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODYzNzkxOnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/AppCDSBuildStep.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMToyODoyOVrOGmRj2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMToyODoyOVrOGmRj2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc4Njc3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return The path of the created classes.lst file or null of the file was not created\n          \n          \n            \n                 * @return The path of the created classes.lst file or null if the file was not created", "url": "https://github.com/quarkusio/quarkus/pull/9710#discussion_r442786776", "createdAt": "2020-06-19T11:28:29Z", "author": {"login": "gsmet"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/AppCDSBuildStep.java", "diffHunk": "@@ -0,0 +1,243 @@\n+package io.quarkus.deployment.pkg.steps;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.BooleanSupplier;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.bootstrap.util.IoUtils;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.pkg.PackageConfig;\n+import io.quarkus.deployment.pkg.builditem.AppCDSRequestedBuildItem;\n+import io.quarkus.deployment.pkg.builditem.AppCDSResultBuildItem;\n+import io.quarkus.deployment.pkg.builditem.ArtifactResultBuildItem;\n+import io.quarkus.deployment.pkg.builditem.JarBuildItem;\n+import io.quarkus.deployment.pkg.builditem.OutputTargetBuildItem;\n+import io.quarkus.deployment.steps.MainClassBuildStep;\n+import io.quarkus.deployment.util.JavaVersionUtil;\n+import io.quarkus.runtime.LaunchMode;\n+import io.quarkus.utilities.JavaBinFinder;\n+\n+public class AppCDSBuildStep {\n+\n+    private static final Logger log = Logger.getLogger(AppCDSBuildStep.class);\n+    public static final String JDK_CLASSLIST_FILE = \"classlist\";\n+    public static final String CLASSES_LIST_FILE_NAME = \"classes.lst\";\n+\n+    @BuildStep(onlyIf = AppCDSRequired.class)\n+    public void requested(OutputTargetBuildItem outputTarget, BuildProducer<AppCDSRequestedBuildItem> producer)\n+            throws IOException {\n+        Path appCDSDir = outputTarget.getOutputDirectory().resolve(\"appcds\");\n+        IoUtils.recursiveDelete(appCDSDir);\n+        Files.createDirectories(appCDSDir);\n+\n+        producer.produce(new AppCDSRequestedBuildItem(outputTarget.getOutputDirectory().resolve(\"appcds\")));\n+    }\n+\n+    @BuildStep\n+    public void build(Optional<AppCDSRequestedBuildItem> appCDsRequested,\n+            JarBuildItem jarResult, PackageConfig packageConfig,\n+            BuildProducer<AppCDSResultBuildItem> appCDS,\n+            BuildProducer<ArtifactResultBuildItem> artifactResult) throws Exception {\n+        if (!appCDsRequested.isPresent()) {\n+            return;\n+        }\n+\n+        Path appCDSDir = appCDsRequested.get().getAppCDSDir();\n+        String javaHomeStr = System.getProperty(\"java.home\");\n+        Path javaHomeDir = Paths.get(javaHomeStr);\n+        Path jdkClassList = javaHomeDir.resolve(\"lib\").resolve(JDK_CLASSLIST_FILE);\n+        if (!jdkClassList.toFile().exists()) {\n+            log.warnf(\n+                    \"In order to create AppCDS the JDK used to build the Quarkus application must contain a file named '%s' in the its 'lib' directory.\",\n+                    JDK_CLASSLIST_FILE);\n+            return;\n+        }\n+        String javaExecutableStr = JavaBinFinder.simpleBinaryName();\n+        String javaBinStr = javaHomeStr + File.separator + \"bin\" + File.separator + javaExecutableStr; //TODO do we need to add '.exe' here for Windows?\n+        if (!new File(javaBinStr).canExecute()) {\n+            log.warnf(\n+                    \"In order to create AppCDS the JDK used to build the Quarkus application must contain an executable named '%s' in its 'bin' directory.\",\n+                    javaBinStr);\n+            return;\n+        }\n+\n+        Path classesLstPath = createClassesLst(packageConfig, jarResult, javaBinStr, appCDSDir);\n+        if (classesLstPath == null) {\n+            log.warn(\"Unable to create AppCDS because \" + CLASSES_LIST_FILE_NAME + \" was not created.\");\n+            return;\n+        }\n+\n+        log.debug(\"'\" + CLASSES_LIST_FILE_NAME + \"' successfully created.\");\n+\n+        log.info(\"Launching AppCDS creation process.\");\n+        Path appCDSPath = createAppCDS(jarResult, javaBinStr, classesLstPath, packageConfig.isFastJar());\n+        if (appCDSPath == null) {\n+            log.warn(\"Unable to create AppCDS.\");\n+            return;\n+        }\n+\n+        log.infof(\n+                \"AppCDS successfully created at: '%s'.\\nTo ensure they are loaded properly, \" +\n+                        \"run the application jar from its directory and also add the '-XX:SharedArchiveFile=app-cds.jsa' \" +\n+                        \"JVM flag.\\nMoreover, make sure to use the exact same Java version (%s) to run the application as was used to build it.\",\n+                appCDSPath.toAbsolutePath().toString(), System.getProperty(\"java.version\"));\n+\n+        appCDS.produce(new AppCDSResultBuildItem(appCDSPath));\n+        artifactResult.produce(new ArtifactResultBuildItem(appCDSPath, \"appCDS\", Collections.emptyMap()));\n+    }\n+\n+    /**\n+     * @return The path of the created classes.lst file or null of the file was not created", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c17581a98680cb766c26772e8e7b772d5fc8614e"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODY0NTEwOnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/AppCDSBuildStep.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMTozMTowOFrOGmRoMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMTozMTowOFrOGmRoMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc4Nzg5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return The path of the created app-cds.jsa file or null of the file was not created\n          \n          \n            \n                 * @return The path of the created app-cds.jsa file or null if the file was not created", "url": "https://github.com/quarkusio/quarkus/pull/9710#discussion_r442787891", "createdAt": "2020-06-19T11:31:08Z", "author": {"login": "gsmet"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/AppCDSBuildStep.java", "diffHunk": "@@ -0,0 +1,243 @@\n+package io.quarkus.deployment.pkg.steps;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.BooleanSupplier;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.bootstrap.util.IoUtils;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.pkg.PackageConfig;\n+import io.quarkus.deployment.pkg.builditem.AppCDSRequestedBuildItem;\n+import io.quarkus.deployment.pkg.builditem.AppCDSResultBuildItem;\n+import io.quarkus.deployment.pkg.builditem.ArtifactResultBuildItem;\n+import io.quarkus.deployment.pkg.builditem.JarBuildItem;\n+import io.quarkus.deployment.pkg.builditem.OutputTargetBuildItem;\n+import io.quarkus.deployment.steps.MainClassBuildStep;\n+import io.quarkus.deployment.util.JavaVersionUtil;\n+import io.quarkus.runtime.LaunchMode;\n+import io.quarkus.utilities.JavaBinFinder;\n+\n+public class AppCDSBuildStep {\n+\n+    private static final Logger log = Logger.getLogger(AppCDSBuildStep.class);\n+    public static final String JDK_CLASSLIST_FILE = \"classlist\";\n+    public static final String CLASSES_LIST_FILE_NAME = \"classes.lst\";\n+\n+    @BuildStep(onlyIf = AppCDSRequired.class)\n+    public void requested(OutputTargetBuildItem outputTarget, BuildProducer<AppCDSRequestedBuildItem> producer)\n+            throws IOException {\n+        Path appCDSDir = outputTarget.getOutputDirectory().resolve(\"appcds\");\n+        IoUtils.recursiveDelete(appCDSDir);\n+        Files.createDirectories(appCDSDir);\n+\n+        producer.produce(new AppCDSRequestedBuildItem(outputTarget.getOutputDirectory().resolve(\"appcds\")));\n+    }\n+\n+    @BuildStep\n+    public void build(Optional<AppCDSRequestedBuildItem> appCDsRequested,\n+            JarBuildItem jarResult, PackageConfig packageConfig,\n+            BuildProducer<AppCDSResultBuildItem> appCDS,\n+            BuildProducer<ArtifactResultBuildItem> artifactResult) throws Exception {\n+        if (!appCDsRequested.isPresent()) {\n+            return;\n+        }\n+\n+        Path appCDSDir = appCDsRequested.get().getAppCDSDir();\n+        String javaHomeStr = System.getProperty(\"java.home\");\n+        Path javaHomeDir = Paths.get(javaHomeStr);\n+        Path jdkClassList = javaHomeDir.resolve(\"lib\").resolve(JDK_CLASSLIST_FILE);\n+        if (!jdkClassList.toFile().exists()) {\n+            log.warnf(\n+                    \"In order to create AppCDS the JDK used to build the Quarkus application must contain a file named '%s' in the its 'lib' directory.\",\n+                    JDK_CLASSLIST_FILE);\n+            return;\n+        }\n+        String javaExecutableStr = JavaBinFinder.simpleBinaryName();\n+        String javaBinStr = javaHomeStr + File.separator + \"bin\" + File.separator + javaExecutableStr; //TODO do we need to add '.exe' here for Windows?\n+        if (!new File(javaBinStr).canExecute()) {\n+            log.warnf(\n+                    \"In order to create AppCDS the JDK used to build the Quarkus application must contain an executable named '%s' in its 'bin' directory.\",\n+                    javaBinStr);\n+            return;\n+        }\n+\n+        Path classesLstPath = createClassesLst(packageConfig, jarResult, javaBinStr, appCDSDir);\n+        if (classesLstPath == null) {\n+            log.warn(\"Unable to create AppCDS because \" + CLASSES_LIST_FILE_NAME + \" was not created.\");\n+            return;\n+        }\n+\n+        log.debug(\"'\" + CLASSES_LIST_FILE_NAME + \"' successfully created.\");\n+\n+        log.info(\"Launching AppCDS creation process.\");\n+        Path appCDSPath = createAppCDS(jarResult, javaBinStr, classesLstPath, packageConfig.isFastJar());\n+        if (appCDSPath == null) {\n+            log.warn(\"Unable to create AppCDS.\");\n+            return;\n+        }\n+\n+        log.infof(\n+                \"AppCDS successfully created at: '%s'.\\nTo ensure they are loaded properly, \" +\n+                        \"run the application jar from its directory and also add the '-XX:SharedArchiveFile=app-cds.jsa' \" +\n+                        \"JVM flag.\\nMoreover, make sure to use the exact same Java version (%s) to run the application as was used to build it.\",\n+                appCDSPath.toAbsolutePath().toString(), System.getProperty(\"java.version\"));\n+\n+        appCDS.produce(new AppCDSResultBuildItem(appCDSPath));\n+        artifactResult.produce(new ArtifactResultBuildItem(appCDSPath, \"appCDS\", Collections.emptyMap()));\n+    }\n+\n+    /**\n+     * @return The path of the created classes.lst file or null of the file was not created\n+     */\n+    private Path createClassesLst(PackageConfig packageConfig, JarBuildItem jarResult,\n+            String javaBin, Path appCDSDir) {\n+\n+        List<String> command = new ArrayList<>(5);\n+        command.add(javaBin);\n+        command.add(\"-XX:DumpLoadedClassList=\" + CLASSES_LIST_FILE_NAME);\n+        command.add(String.format(\"-D%s=true\", MainClassBuildStep.GENERATE_APP_CDS_SYSTEM_PROPERTY));\n+        command.add(\"-jar\");\n+        if (packageConfig.isFastJar()) {\n+            command.add(jarResult.getLibraryDir().getParent().resolve(JarResultBuildStep.QUARKUS_RUN_JAR).toAbsolutePath()\n+                    .toString());\n+        } else {\n+            command.add(jarResult.getPath().toAbsolutePath().toString());\n+        }\n+\n+        if (log.isDebugEnabled()) {\n+            log.debugf(\"Launching command: '%s' to create '\" + CLASSES_LIST_FILE_NAME + \"' AppCDS.\", String.join(\" \", command));\n+        }\n+\n+        int exitCode;\n+        try {\n+            ProcessBuilder processBuilder = new ProcessBuilder(command)\n+                    .directory(appCDSDir.toFile());\n+            if (log.isDebugEnabled()) {\n+                processBuilder.inheritIO();\n+            } else {\n+                processBuilder.redirectError(NULL_FILE);\n+                processBuilder.redirectOutput(NULL_FILE);\n+            }\n+            exitCode = processBuilder.start().waitFor();\n+        } catch (Exception e) {\n+            log.debug(\"Failed to launch process used to create '\" + CLASSES_LIST_FILE_NAME + \"'.\", e);\n+            return null;\n+        }\n+\n+        if (exitCode != 0) {\n+            log.debugf(\"The process that was supposed to create AppCDS exited with error code: %d.\", exitCode);\n+            return null;\n+        }\n+\n+        return appCDSDir.resolve(CLASSES_LIST_FILE_NAME);\n+    }\n+\n+    /**\n+     * @return The path of the created app-cds.jsa file or null of the file was not created", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c17581a98680cb766c26772e8e7b772d5fc8614e"}, "originalPosition": 146}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2895, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}