{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2MTA4NzU2", "number": 13820, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjowNzozMFrOFDtKlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjowOTozOVrOFDtN7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDMwMDM5OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/microprofile-graphql.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjowNzozMFrOIDfdpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjowNzozMFrOIDfdpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzMjEzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Queries can be made reactive by using `Uni`, or `CompletionStage` as a return type, in example:\n          \n          \n            \n            Queries can be made reactive by using `Uni`, or `CompletionStage` as a return type, for example:", "url": "https://github.com/quarkusio/quarkus/pull/13820#discussion_r540532132", "createdAt": "2020-12-10T22:07:30Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/microprofile-graphql.adoc", "diffHunk": "@@ -543,6 +543,54 @@ the heroes:\n \n <1> Here receive the films as a batch, allowing you to fetch the corresponding heroes.\n \n+=== Reactive\n+\n+Queries can be made reactive by using `Uni`, or `CompletionStage` as a return type, in example:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ee8f83142e1b781a887ebf2aec1fc0598232b91"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDMwMjQ5OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/microprofile-graphql.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjowODowNFrOIDfe4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjowODowNFrOIDfe4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzMjQ0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Using `Uni` or `CompletionStage` means that when a request contains more than one query, they will be executed concurrently, in example:\n          \n          \n            \n            Using `Uni` or `CompletionStage` means that when a request contains more than one query, they will be executed concurrently.\n          \n          \n            \n            \n          \n          \n            \n            For instance, the query below will fetch `film0` and `film1` concurrently:", "url": "https://github.com/quarkusio/quarkus/pull/13820#discussion_r540532449", "createdAt": "2020-12-10T22:08:04Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/microprofile-graphql.adoc", "diffHunk": "@@ -543,6 +543,54 @@ the heroes:\n \n <1> Here receive the films as a batch, allowing you to fetch the corresponding heroes.\n \n+=== Reactive\n+\n+Queries can be made reactive by using `Uni`, or `CompletionStage` as a return type, in example:\n+\n+[source,java]\n+----\n+    @Query\n+    @Description(\"Get a Films from a galaxy far far away\")\n+    public Uni<Film> getFilm(@Name(\"filmId\") int id) {\n+        // ...\n+    }\n+----\n+\n+NOTE: Due to the underlying library, graphql-java, `Uni` is creating a `CompletionStage` under the hood.\n+\n+Or you can use `CompletionStage`:\n+\n+[source,java]\n+----\n+    @Query\n+    @Description(\"Get a Films from a galaxy far far away\")\n+    public CompletionStage<Film> getFilm(@Name(\"filmId\") int id) {\n+        // ...\n+    }\n+----\n+ \n+Using `Uni` or `CompletionStage` means that when a request contains more than one query, they will be executed concurrently, in example:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ee8f83142e1b781a887ebf2aec1fc0598232b91"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDMwODkzOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/microprofile-graphql.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjowOTozOVrOIDfiew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjowOTozOVrOIDfiew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzMzM3MQ==", "bodyText": "And I would remove this line.", "url": "https://github.com/quarkusio/quarkus/pull/13820#discussion_r540533371", "createdAt": "2020-12-10T22:09:39Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/microprofile-graphql.adoc", "diffHunk": "@@ -543,6 +543,54 @@ the heroes:\n \n <1> Here receive the films as a batch, allowing you to fetch the corresponding heroes.\n \n+=== Reactive\n+\n+Queries can be made reactive by using `Uni`, or `CompletionStage` as a return type, in example:\n+\n+[source,java]\n+----\n+    @Query\n+    @Description(\"Get a Films from a galaxy far far away\")\n+    public Uni<Film> getFilm(@Name(\"filmId\") int id) {\n+        // ...\n+    }\n+----\n+\n+NOTE: Due to the underlying library, graphql-java, `Uni` is creating a `CompletionStage` under the hood.\n+\n+Or you can use `CompletionStage`:\n+\n+[source,java]\n+----\n+    @Query\n+    @Description(\"Get a Films from a galaxy far far away\")\n+    public CompletionStage<Film> getFilm(@Name(\"filmId\") int id) {\n+        // ...\n+    }\n+----\n+ \n+Using `Uni` or `CompletionStage` means that when a request contains more than one query, they will be executed concurrently, in example:\n+\n+[source, graphql]\n+----\n+query getFilms {\n+  film0: film(filmId: 0) {\n+    title\n+    director\n+    releaseDate\n+    episodeID\n+  }\n+  film1: film(filmId: 1) {\n+    title\n+    director\n+    releaseDate\n+    episodeID\n+  }\n+}\n+----\n+\n+Above will fetch `film0` and `film1` concurrently.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ee8f83142e1b781a887ebf2aec1fc0598232b91"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4490, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}