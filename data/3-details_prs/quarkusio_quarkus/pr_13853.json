{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM4MTAyODMz", "number": 13853, "title": "Implement Various Reactive fixes", "bodyText": "The fixes are based on what was reported at #13852.\nFrom that issue, the PR currently handles:\n\n1\n2\n3\n4\n5 (currently we simply prevent multiple HTTP verbs - we can improve this later)\n6\n7 (not completely sure about this, the NPE is now not thrown, but I am not sure about the result of requestContext.getUriInfo().getMatchedResources())", "createdAt": "2020-12-12T12:37:58Z", "url": "https://github.com/quarkusio/quarkus/pull/13853", "merged": true, "mergeCommit": {"oid": "112a93d8c98c670d4748726a7c8a76a91ef32f6d"}, "closed": true, "closedAt": "2020-12-15T15:51:24Z", "author": {"login": "geoand"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdlcC1KABqjQxMDQxNDA3NDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmcZPSAFqTU1MjYwMjA2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "82511998588536a622af1775020f6445599d0ed9", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/82511998588536a622af1775020f6445599d0ed9", "committedDate": "2020-12-12T12:35:56Z", "message": "Ensure that param converters for RR aren't under the 'java' package"}, "afterCommit": {"oid": "09a676b1b5699bdd5c8b483db9f4fd02d8b0cfe5", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/09a676b1b5699bdd5c8b483db9f4fd02d8b0cfe5", "committedDate": "2020-12-12T12:52:42Z", "message": "Ensure that param converters for RR aren't under the 'java' package"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1533a2ebfaa45181e2b5766e18adf99a48117885", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/1533a2ebfaa45181e2b5766e18adf99a48117885", "committedDate": "2020-12-12T14:04:29Z", "message": "WIP - Add support for using a List or Set as json message body\n\nThis is not complete as we need to pass the generic type to the RequestDeserializer\nand also figure out how to register the proper readers without breaking the TCK"}, "afterCommit": {"oid": "26c51fe21bb8358f96f958dfb46463ecc047410a", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/26c51fe21bb8358f96f958dfb46463ecc047410a", "committedDate": "2020-12-12T14:29:36Z", "message": "Prevent multiple HTTP annotations on RESTEasy Reactive endpoints\n\nThe spec doesn't mandate this behavior, but it can lead to unexpected results,\nso let's not allow it"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNTIzNTUx", "url": "https://github.com/quarkusio/quarkus/pull/13853#pullrequestreview-551523551", "createdAt": "2020-12-14T16:11:31Z", "commit": {"oid": "9f13423f53f88f8ea13d22753499eb4e554bf5ab"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjoxMTozMVrOIFYGrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjozMTozMlrOIFZEAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwODcxOQ==", "bodyText": "This method signature is a mine field:\n\nType paramType\nParameterType type\nString elementType\nString signature\n\nAnd of course, we reverse the order of type\u2026signature to signature, type in the call below :(", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542508719", "createdAt": "2020-12-14T16:11:31Z", "author": {"login": "FroMage"}, "path": "extensions/resteasy-reactive/quarkus-jaxrs-client/deployment/src/main/java/io/quarkus/resteasy/reactive/client/deployment/ClientEndpointIndexer.java", "diffHunk": "@@ -79,9 +79,9 @@ protected InjectableBean scanInjectableBean(ClassInfo currentClassInfo,\n \n     protected MethodParameter createMethodParameter(ClassInfo currentClassInfo, ClassInfo actualEndpointInfo, boolean encoded,\n             Type paramType, ClientIndexedParam parameterResult, String name, String defaultValue, ParameterType type,\n-            String elementType, boolean single) {\n+            String elementType, String signature, boolean single) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f13423f53f88f8ea13d22753499eb4e554bf5ab"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxMjE0NA==", "bodyText": "Pretty scary that the TCK doesn't test this.", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542512144", "createdAt": "2020-12-14T16:15:59Z", "author": {"login": "FroMage"}, "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/RequestDeserializeHandler.java", "diffHunk": "@@ -25,12 +26,15 @@\n     private static final Logger log = Logger.getLogger(RequestDeserializeHandler.class);\n \n     private final Class<?> type;\n+    private final Type genericType;\n     private final MediaType mediaType;\n     private final ServerSerialisers serialisers;\n     private final int parameterIndex;\n \n-    public RequestDeserializeHandler(Class<?> type, MediaType mediaType, ServerSerialisers serialisers, int parameterIndex) {\n+    public RequestDeserializeHandler(Class<?> type, Type genericType, MediaType mediaType, ServerSerialisers serialisers,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f13423f53f88f8ea13d22753499eb4e554bf5ab"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTYwNA==", "bodyText": "This is confusing given that String is not generic, so if type == String.class  then genericType == String.class must also be true or else something is super wrong in RR.", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542521604", "createdAt": "2020-12-14T16:28:08Z", "author": {"login": "FroMage"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/JacksonMessageBodyReader.java", "diffHunk": "@@ -56,4 +56,15 @@ private Object doReadFrom(Class<Object> type, Type genericType, InputStream enti\n         return reader.forType(reader.getTypeFactory().constructType(genericType != null ? genericType : type))\n                 .readValue(entityStream);\n     }\n+\n+    private boolean isReadable(MediaType mediaType, Class<?> type, Type genericType) {\n+        if (mediaType == null) {\n+            return false;\n+        }\n+        if (String.class.equals(type) && (String.class.equals(genericType) || (genericType == null))) { // don't attempt to read plain strings", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMTk5Mg==", "bodyText": "Really? javascript?", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542521992", "createdAt": "2020-12-14T16:28:35Z", "author": {"login": "FroMage"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/runtime/src/main/java/io/quarkus/resteasy/reactive/jackson/runtime/serialisers/JacksonMessageBodyReader.java", "diffHunk": "@@ -56,4 +56,15 @@ private Object doReadFrom(Class<Object> type, Type genericType, InputStream enti\n         return reader.forType(reader.getTypeFactory().constructType(genericType != null ? genericType : type))\n                 .readValue(entityStream);\n     }\n+\n+    private boolean isReadable(MediaType mediaType, Class<?> type, Type genericType) {\n+        if (mediaType == null) {\n+            return false;\n+        }\n+        if (String.class.equals(type) && (String.class.equals(genericType) || (genericType == null))) { // don't attempt to read plain strings\n+            return false;\n+        }\n+        String subtype = mediaType.getSubtype();\n+        return \"json\".equalsIgnoreCase(subtype) || subtype.endsWith(\"+json\") || \"javascript\".equals(subtype);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMjgyMg==", "bodyText": "I don't see why we do this, given that we refuse to unserialise a String parameter in the JSON reader. Object above should just work and match List<String> via inheritance.", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542522822", "createdAt": "2020-12-14T16:29:33Z", "author": {"login": "FroMage"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java", "diffHunk": "@@ -47,6 +47,9 @@ void additionalProviders(BuildProducer<AdditionalBeanBuildItem> additionalBean,\n         additionalReaders\n                 .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), Object.class.getName(),\n                         Collections.singletonList(MediaType.APPLICATION_JSON)));\n+        additionalReaders\n+                .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), String.class.getName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMzE2Mg==", "bodyText": "Is this on purpose?", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542523162", "createdAt": "2020-12-14T16:29:57Z", "author": {"login": "FroMage"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jsonb/deployment/src/test/java/io/quarkus/resteasy/reactive/jsonb/deployment/test/SimpleJsonTest.java", "diffHunk": "@@ -25,35 +25,45 @@ public JavaArchive get() {\n \n     @Test\n     public void testJson() {\n-        RestAssured.get(\"/simple/person\")\n-                .then()\n-                .statusCode(200)\n-                .contentType(\"application/json\")\n-                .body(\"first\", Matchers.equalTo(\"Bob\"))\n-                .body(\"last\", Matchers.equalTo(\"Builder\"));\n+        //        RestAssured.get(\"/simple/person\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMzc4OA==", "bodyText": "Sounds like this could be abstracted somewhere common. Especially given that it has no json dependency, we could put this in -common", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542523788", "createdAt": "2020-12-14T16:30:42Z", "author": {"login": "FroMage"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jsonb/runtime/src/main/java/io/quarkus/resteasy/reactive/jsonb/runtime/serialisers/JsonbMessageBodyReader.java", "diffHunk": "@@ -53,4 +53,15 @@ private Object doReadFrom(Class<Object> type, Type genericType, InputStream enti\n         }\n         return json.fromJson(entityStream, genericType != null ? genericType : type);\n     }\n+\n+    private boolean isReadable(MediaType mediaType, Class<?> type, Type genericType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyNDQxOQ==", "bodyText": "BTW, do we need a test for generic input types, or is this part of the next commits with List<String> request bodies?", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r542524419", "createdAt": "2020-12-14T16:31:32Z", "author": {"login": "FroMage"}, "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/RequestDeserializeHandler.java", "diffHunk": "@@ -25,12 +26,15 @@\n     private static final Logger log = Logger.getLogger(RequestDeserializeHandler.class);\n \n     private final Class<?> type;\n+    private final Type genericType;\n     private final MediaType mediaType;\n     private final ServerSerialisers serialisers;\n     private final int parameterIndex;\n \n-    public RequestDeserializeHandler(Class<?> type, MediaType mediaType, ServerSerialisers serialisers, int parameterIndex) {\n+    public RequestDeserializeHandler(Class<?> type, Type genericType, MediaType mediaType, ServerSerialisers serialisers,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxMjE0NA=="}, "originalCommit": {"oid": "9f13423f53f88f8ea13d22753499eb4e554bf5ab"}, "originalPosition": 18}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8d21ffe522f1a2aead571a33a5fd3c6f8efbb401", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/8d21ffe522f1a2aead571a33a5fd3c6f8efbb401", "committedDate": "2020-12-14T12:26:53Z", "message": "Make sure that List<String> can be read as JSON input"}, "afterCommit": {"oid": "bf4fdde00d9b8e144cc997fa279cf31fa99e4ba3", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/bf4fdde00d9b8e144cc997fa279cf31fa99e4ba3", "committedDate": "2020-12-14T17:58:14Z", "message": "Add generic handling test for MessageBodyReader"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bf4fdde00d9b8e144cc997fa279cf31fa99e4ba3", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/bf4fdde00d9b8e144cc997fa279cf31fa99e4ba3", "committedDate": "2020-12-14T17:58:14Z", "message": "Add generic handling test for MessageBodyReader"}, "afterCommit": {"oid": "df17291bcf49016557cdb21c072a54f376f41e4b", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/df17291bcf49016557cdb21c072a54f376f41e4b", "committedDate": "2020-12-14T18:04:53Z", "message": "Add generic handling test for MessageBodyReader"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df17291bcf49016557cdb21c072a54f376f41e4b", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/df17291bcf49016557cdb21c072a54f376f41e4b", "committedDate": "2020-12-14T18:04:53Z", "message": "Add generic handling test for MessageBodyReader"}, "afterCommit": {"oid": "54ee9a649dc46bb76e3320615a67cdd912deb1b4", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/54ee9a649dc46bb76e3320615a67cdd912deb1b4", "committedDate": "2020-12-14T19:21:48Z", "message": "Don't run ContainerRequestFilters on subresources\n\nThis behavior is similar to how RESTEasy behaves"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97ebb21f2be821db7fc4754461c857075e8f6d7f", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/97ebb21f2be821db7fc4754461c857075e8f6d7f", "committedDate": "2020-12-15T06:21:46Z", "message": "Ensure that param converters for RR aren't under the 'java' package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0708f4e0e41f5773440bfac00621aa897dd02c93", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/0708f4e0e41f5773440bfac00621aa897dd02c93", "committedDate": "2020-12-15T06:21:46Z", "message": "Prevent NPE and IOOBE when getting matched resources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19f4876ffffc92e90aa79da3abd68429973affe0", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/19f4876ffffc92e90aa79da3abd68429973affe0", "committedDate": "2020-12-15T06:21:46Z", "message": "Prevent multiple HTTP annotations on RESTEasy Reactive endpoints\n\nThe spec doesn't mandate this behavior, but it can lead to unexpected results,\nso let's not allow it"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99b6b43bcee9b79d97a35367144899f5846469f6", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/99b6b43bcee9b79d97a35367144899f5846469f6", "committedDate": "2020-12-15T06:21:46Z", "message": "Also handle @JsonView on slow path in RESTEasy Reactive"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "773cf0ca19b6cd9fc2f82ed80324ae20c80e68c7", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/773cf0ca19b6cd9fc2f82ed80324ae20c80e68c7", "committedDate": "2020-12-15T06:21:46Z", "message": "Properly pass the generic type to message body readers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96aaa4f2906dd7ebe3c05d30fde8fb9a7578574a", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/96aaa4f2906dd7ebe3c05d30fde8fb9a7578574a", "committedDate": "2020-12-15T06:21:46Z", "message": "Don't use converters for the body of a Request\n\nThe spec is explicit that converters are for types other\nthan body (which are handled by the proper MessageBodyReader)."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "54ee9a649dc46bb76e3320615a67cdd912deb1b4", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/54ee9a649dc46bb76e3320615a67cdd912deb1b4", "committedDate": "2020-12-14T19:21:48Z", "message": "Don't run ContainerRequestFilters on subresources\n\nThis behavior is similar to how RESTEasy behaves"}, "afterCommit": {"oid": "6bb99c2081243fcc76b76000558fc403eea06f34", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/6bb99c2081243fcc76b76000558fc403eea06f34", "committedDate": "2020-12-15T06:21:46Z", "message": "Don't run ContainerRequestFilters on subresources\n\nThis behavior is similar to how RESTEasy behaves"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMjI0NTEy", "url": "https://github.com/quarkusio/quarkus/pull/13853#pullrequestreview-552224512", "createdAt": "2020-12-15T08:50:24Z", "commit": {"oid": "b3f76b4d3f100e8c06f6fe6fd01d351b3f8a8640"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODo1MDoyNVrOIF_ksA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOTowODo1NlrOIGAVdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1NTM3Ng==", "bodyText": "Why is this required? Don't we match Collection and Map with Object? Why do we need this for them and not List?", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543155376", "createdAt": "2020-12-15T08:50:25Z", "author": {"login": "FroMage"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java", "diffHunk": "@@ -47,6 +48,12 @@ void additionalProviders(BuildProducer<AdditionalBeanBuildItem> additionalBean,\n         additionalReaders\n                 .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), Object.class.getName(),\n                         Collections.singletonList(MediaType.APPLICATION_JSON)));\n+        additionalReaders\n+                .produce(new MessageBodyReaderBuildItem(JacksonMessageBodyReader.class.getName(), Collection.class.getName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3f76b4d3f100e8c06f6fe6fd01d351b3f8a8640"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1NjcyNA==", "bodyText": "We should check the application main type, because this may match image/* ATM due to ignoring the main type and allowing subtype wildcards.", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543156724", "createdAt": "2020-12-15T08:52:20Z", "author": {"login": "FroMage"}, "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/providers/serialisers/json/AbstractJsonMessageBodyReader.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.jboss.resteasy.reactive.server.providers.serialisers.json;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import javax.ws.rs.core.MediaType;\n+import org.jboss.resteasy.reactive.server.spi.ResteasyReactiveResourceInfo;\n+import org.jboss.resteasy.reactive.server.spi.ServerMessageBodyReader;\n+\n+public abstract class AbstractJsonMessageBodyReader implements ServerMessageBodyReader<Object> {\n+\n+    @Override\n+    public boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType) {\n+        return isReadable(mediaType, type);\n+    }\n+\n+    @Override\n+    public boolean isReadable(Class<?> type, Type genericType, ResteasyReactiveResourceInfo lazyMethod, MediaType mediaType) {\n+        return isReadable(mediaType, type);\n+    }\n+\n+    private boolean isReadable(MediaType mediaType, Class<?> type) {\n+        if (mediaType == null) {\n+            return false;\n+        }\n+        if (String.class.equals(type)) { // don't attempt to read plain strings\n+            return false;\n+        }\n+        String subtype = mediaType.getSubtype();\n+        return \"json\".equalsIgnoreCase(subtype) || subtype.endsWith(\"+json\") || subtype.equals(\"*\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3f76b4d3f100e8c06f6fe6fd01d351b3f8a8640"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2MDIwMQ==", "bodyText": "In theory, @RestPath is not required here", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543160201", "createdAt": "2020-12-15T08:57:27Z", "author": {"login": "FroMage"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/SubResourceRequestFilterTest.java", "diffHunk": "@@ -49,8 +51,8 @@ public void testAbortingRequestFilter() {\n         @Inject\n         RestSubResource restSubResource;\n \n-        @Path(\"sub-resource/hello\")\n-        public RestSubResource hello() {\n+        @Path(\"sub-resource/{name}\")\n+        public RestSubResource hello(@RestPath String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd1b68598efebbbeafe643570bfabf364aabb2b2"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2Mjc4NA==", "bodyText": "Here, though, I do wonder if @RestPath is required. I suppose yes, because there's no @Path matching. I am not sure what the spec says about sub-resources allowing @Path matching. Is it allowed/supported?", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543162784", "createdAt": "2020-12-15T09:01:14Z", "author": {"login": "FroMage"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive/deployment/src/test/java/io/quarkus/resteasy/reactive/server/test/resource/basic/SubResourceRequestFilterTest.java", "diffHunk": "@@ -59,8 +61,8 @@ public RestSubResource hello() {\n     public static class RestSubResource {\n \n         @GET\n-        public Response hello(HttpHeaders headers) {\n-            return Response.ok().header(\"single-filter\", headers.getHeaderString(\"single-filter\")).build();\n+        public Response hello(HttpHeaders headers, @RestPath String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd1b68598efebbbeafe643570bfabf364aabb2b2"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2MzkxOA==", "bodyText": "Is there a reason to overwrite the pathParamValue for locators? Is it because they can declare new path parameters? Otherwise we can just keep the original pathParamValue and no need to add a field to save them.", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543163918", "createdAt": "2020-12-15T09:03:03Z", "author": {"login": "FroMage"}, "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/handlers/ResourceLocatorHandler.java", "diffHunk": "@@ -80,7 +80,7 @@ public void onComplete(Throwable throwable) {\n         requestContext.setRemaining(res.remaining);\n         requestContext.setEndpointInstance(locator);\n         requestContext.setResult(null);\n-        requestContext.restart(res.value);\n+        requestContext.restart(res.value, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd1b68598efebbbeafe643570bfabf364aabb2b2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2NDMyMA==", "bodyText": "Can a locator method return a sub-resource which returns a locator method? As in, can we have two levels of locators? If yes, then we need more than an extra field, we need a stack of them.", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543164320", "createdAt": "2020-12-15T09:03:43Z", "author": {"login": "FroMage"}, "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/ResteasyReactiveRequestContext.java", "diffHunk": "@@ -161,9 +171,17 @@ public ProvidersImpl getProviders() {\n      * @param target The resource target\n      */\n     public void restart(RuntimeResource target) {\n+        restart(target, false);\n+    }\n+\n+    public void restart(RuntimeResource target, boolean setLocatorTarget) {\n         this.handlers = target.getHandlerChain();\n         position = 0;\n         parameters = new Object[target.getParameterTypes().length];\n+        if (setLocatorTarget) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd1b68598efebbbeafe643570bfabf364aabb2b2"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2Nzg2MA==", "bodyText": "This appears to imply that you can only access path params in a sub-resource by matching against the locator method, so the sub-resource can't have path params of its own, right?\nSo, is it true? The spec is confusing about this. If it is true, why do we not keep the original path param values then, instead of adding a new field to save the original ones?\nAlso, why can't we use context.getLocatorTarget().getPathParameterIndexes()? I'm sure there's a good reason, but I don't get it.", "url": "https://github.com/quarkusio/quarkus/pull/13853#discussion_r543167860", "createdAt": "2020-12-15T09:08:56Z", "author": {"login": "FroMage"}, "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/parameters/LocatableResourcePathParamExtractor.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package org.jboss.resteasy.reactive.server.core.parameters;\n+\n+import org.jboss.resteasy.reactive.server.core.ResteasyReactiveRequestContext;\n+import org.jboss.resteasy.reactive.server.mapping.URITemplate;\n+\n+public class LocatableResourcePathParamExtractor implements ParameterExtractor {\n+\n+    private final String name;\n+\n+    public LocatableResourcePathParamExtractor(String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public Object extractParameter(ResteasyReactiveRequestContext context) {\n+        int index = findPathParamIndex(context.getLocatorTarget().getClassPath(), context.getLocatorTarget().getPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd1b68598efebbbeafe643570bfabf364aabb2b2"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c54367c8f326cd75bfa3059e97ac326f3ec6a78c", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/c54367c8f326cd75bfa3059e97ac326f3ec6a78c", "committedDate": "2020-12-15T11:15:28Z", "message": "Make sure that List<String> can be read as JSON input"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bd1b68598efebbbeafe643570bfabf364aabb2b2", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/bd1b68598efebbbeafe643570bfabf364aabb2b2", "committedDate": "2020-12-15T08:32:52Z", "message": "Handle path params in subresource methods"}, "afterCommit": {"oid": "12c8376701630dac44b1a418150dbccf52e5dbe4", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/12c8376701630dac44b1a418150dbccf52e5dbe4", "committedDate": "2020-12-15T11:17:38Z", "message": "Handle path params in subresource methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71eac4b802804dfeb903a357d405a240634aaa6b", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/71eac4b802804dfeb903a357d405a240634aaa6b", "committedDate": "2020-12-15T12:29:03Z", "message": "Also check for Object when a reader of an interface is needed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a792f76fca6418b1a3017d0c6904246918ad607", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/3a792f76fca6418b1a3017d0c6904246918ad607", "committedDate": "2020-12-15T12:29:03Z", "message": "Add generic handling test for MessageBodyReader"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4187c83c37f09d3f0cadc138bc96eab3393e90fa", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/4187c83c37f09d3f0cadc138bc96eab3393e90fa", "committedDate": "2020-12-15T12:29:03Z", "message": "Don't run ContainerRequestFilters on subresources\n\nThis behavior is similar to how RESTEasy behaves"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3ebc9adea635df73eb099c806b31812ac2e43e8", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/c3ebc9adea635df73eb099c806b31812ac2e43e8", "committedDate": "2020-12-15T12:29:03Z", "message": "Handle path params in subresource methods"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "12c8376701630dac44b1a418150dbccf52e5dbe4", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/12c8376701630dac44b1a418150dbccf52e5dbe4", "committedDate": "2020-12-15T11:17:38Z", "message": "Handle path params in subresource methods"}, "afterCommit": {"oid": "c3ebc9adea635df73eb099c806b31812ac2e43e8", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/c3ebc9adea635df73eb099c806b31812ac2e43e8", "committedDate": "2020-12-15T12:29:03Z", "message": "Handle path params in subresource methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNjAyMDYx", "url": "https://github.com/quarkusio/quarkus/pull/13853#pullrequestreview-552602061", "createdAt": "2020-12-15T15:51:16Z", "commit": {"oid": "c3ebc9adea635df73eb099c806b31812ac2e43e8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4305, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}