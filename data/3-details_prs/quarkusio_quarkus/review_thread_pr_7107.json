{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyODgzMjQ1", "number": 7107, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMjo0ODoyNVrODeTYIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMjo0OToxM1rODeTYXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTAxMzQ3OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/NativeImageConfigBuildStep.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMjo0ODoyNVrOFnXdaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMToyMDo0M1rOFnifJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgyMzE0Nw==", "bodyText": "@gsmet Do we want to keep this line? I'd answer no but I'm not sure if it was added for the SunEC lib or some other reason.", "url": "https://github.com/quarkusio/quarkus/pull/7107#discussion_r376823147", "createdAt": "2020-02-09T22:48:25Z", "author": {"login": "gwenneg"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/NativeImageConfigBuildStep.java", "diffHunk": "@@ -91,33 +84,14 @@ void build(SslContextConfigurationRecorder sslContextConfigurationRecorder,\n \n             if (graalVmHome != null) {\n                 Path graalVmLibDirectory = Paths.get(graalVmHome, \"jre\", \"lib\");\n-                Path linuxLibDirectory = graalVmLibDirectory.resolve(\"amd64\");\n-                Path linuxPath = linuxLibDirectory.resolve(LIB_SUN_EC);\n \n                 // We add . as it might be useful in a containerized world\n                 javaLibraryPathAdditionalPath.produce(new JavaLibraryPathAdditionalPathBuildItem(\".\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56b3b035f88d48919f850387b82bed283954be8d"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAwMzgxNA==", "bodyText": "I think we can remove it.", "url": "https://github.com/quarkusio/quarkus/pull/7107#discussion_r377003814", "createdAt": "2020-02-10T11:20:43Z", "author": {"login": "gsmet"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/NativeImageConfigBuildStep.java", "diffHunk": "@@ -91,33 +84,14 @@ void build(SslContextConfigurationRecorder sslContextConfigurationRecorder,\n \n             if (graalVmHome != null) {\n                 Path graalVmLibDirectory = Paths.get(graalVmHome, \"jre\", \"lib\");\n-                Path linuxLibDirectory = graalVmLibDirectory.resolve(\"amd64\");\n-                Path linuxPath = linuxLibDirectory.resolve(LIB_SUN_EC);\n \n                 // We add . as it might be useful in a containerized world\n                 javaLibraryPathAdditionalPath.produce(new JavaLibraryPathAdditionalPathBuildItem(\".\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgyMzE0Nw=="}, "originalCommit": {"oid": "56b3b035f88d48919f850387b82bed283954be8d"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTAxNDA0OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/NativeImageConfigBuildStep.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMjo0OToxM1rOFnXdtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMToyMDozM1rOFnie5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgyMzIyMg==", "bodyText": "I suppose we want to keep this around. I'll need it to be confirmed.", "url": "https://github.com/quarkusio/quarkus/pull/7107#discussion_r376823222", "createdAt": "2020-02-09T22:49:13Z", "author": {"login": "gwenneg"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/NativeImageConfigBuildStep.java", "diffHunk": "@@ -91,33 +84,14 @@ void build(SslContextConfigurationRecorder sslContextConfigurationRecorder,\n \n             if (graalVmHome != null) {\n                 Path graalVmLibDirectory = Paths.get(graalVmHome, \"jre\", \"lib\");\n-                Path linuxLibDirectory = graalVmLibDirectory.resolve(\"amd64\");\n-                Path linuxPath = linuxLibDirectory.resolve(LIB_SUN_EC);\n \n                 // We add . as it might be useful in a containerized world\n                 javaLibraryPathAdditionalPath.produce(new JavaLibraryPathAdditionalPathBuildItem(\".\"));\n-                if (Files.exists(linuxPath)) {\n-                    // On Linux, the SunEC library is in jre/lib/amd64/\n-                    // This is useful for testing or if you have a similar environment in production\n-                    javaLibraryPathAdditionalPath\n-                            .produce(new JavaLibraryPathAdditionalPathBuildItem(linuxLibDirectory.toString()));\n-                } else {\n-                    // On MacOS, the SunEC library is directly in jre/lib/\n-                    // This is useful for testing or if you have a similar environment in production\n-                    javaLibraryPathAdditionalPath\n-                            .produce(new JavaLibraryPathAdditionalPathBuildItem(graalVmLibDirectory.toString()));\n-                }\n \n                 // This is useful for testing but the user will have to override it.\n                 sslTrustStoreSystemProperty.produce(\n                         new SslTrustStoreSystemPropertyBuildItem(\n                                 graalVmLibDirectory.resolve(Paths.get(\"security\", \"cacerts\")).toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56b3b035f88d48919f850387b82bed283954be8d"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAwMzc0OQ==", "bodyText": "Yes.", "url": "https://github.com/quarkusio/quarkus/pull/7107#discussion_r377003749", "createdAt": "2020-02-10T11:20:33Z", "author": {"login": "gsmet"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/NativeImageConfigBuildStep.java", "diffHunk": "@@ -91,33 +84,14 @@ void build(SslContextConfigurationRecorder sslContextConfigurationRecorder,\n \n             if (graalVmHome != null) {\n                 Path graalVmLibDirectory = Paths.get(graalVmHome, \"jre\", \"lib\");\n-                Path linuxLibDirectory = graalVmLibDirectory.resolve(\"amd64\");\n-                Path linuxPath = linuxLibDirectory.resolve(LIB_SUN_EC);\n \n                 // We add . as it might be useful in a containerized world\n                 javaLibraryPathAdditionalPath.produce(new JavaLibraryPathAdditionalPathBuildItem(\".\"));\n-                if (Files.exists(linuxPath)) {\n-                    // On Linux, the SunEC library is in jre/lib/amd64/\n-                    // This is useful for testing or if you have a similar environment in production\n-                    javaLibraryPathAdditionalPath\n-                            .produce(new JavaLibraryPathAdditionalPathBuildItem(linuxLibDirectory.toString()));\n-                } else {\n-                    // On MacOS, the SunEC library is directly in jre/lib/\n-                    // This is useful for testing or if you have a similar environment in production\n-                    javaLibraryPathAdditionalPath\n-                            .produce(new JavaLibraryPathAdditionalPathBuildItem(graalVmLibDirectory.toString()));\n-                }\n \n                 // This is useful for testing but the user will have to override it.\n                 sslTrustStoreSystemProperty.produce(\n                         new SslTrustStoreSystemPropertyBuildItem(\n                                 graalVmLibDirectory.resolve(Paths.get(\"security\", \"cacerts\")).toString()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgyMzIyMg=="}, "originalCommit": {"oid": "56b3b035f88d48919f850387b82bed283954be8d"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 948, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}