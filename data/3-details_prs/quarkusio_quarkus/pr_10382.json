{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMTcwMzMz", "number": 10382, "title": "Hibernate Reactive services initiator fix", "bodyText": "Fixes #10187", "createdAt": "2020-06-30T17:04:58Z", "url": "https://github.com/quarkusio/quarkus/pull/10382", "merged": true, "mergeCommit": {"oid": "041390360a87ff088a960a778df941c3a0d88e8a"}, "closed": true, "closedAt": "2020-07-01T09:54:21Z", "author": {"login": "Sanne"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcv-9z2gH2gAyNDQyMTcwMzMzOjQ2ZTk4NGI5YTZiNDg2NGM2ZTgwYjAwOGQxZjEwMzVmNzI1NzZjMTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwqB-YgFqTQ0MDg0NzgzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "46e984b9a6b4864c6e80b008d1f1035f72576c18", "author": {"user": {"login": "Sanne", "name": "Sanne Grinovero"}}, "url": "https://github.com/quarkusio/quarkus/commit/46e984b9a6b4864c6e80b008d1f1035f72576c18", "committedDate": "2020-06-29T11:02:09Z", "message": "Remove some more dead fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28b3c69464acb743b13e43543af5226435eb2b25", "author": {"user": {"login": "Sanne", "name": "Sanne Grinovero"}}, "url": "https://github.com/quarkusio/quarkus/commit/28b3c69464acb743b13e43543af5226435eb2b25", "committedDate": "2020-06-29T12:10:58Z", "message": "Remove redundant configuration check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e4bf8ee834e338f60b2f0a289f9c8d92201ad1f", "author": {"user": {"login": "Sanne", "name": "Sanne Grinovero"}}, "url": "https://github.com/quarkusio/quarkus/commit/2e4bf8ee834e338f60b2f0a289f9c8d92201ad1f", "committedDate": "2020-06-29T13:41:44Z", "message": "Refactor how we discover all entities that need proxy generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54388870c7ede5f1842be09002eb606db49bd19e", "author": {"user": {"login": "Sanne", "name": "Sanne Grinovero"}}, "url": "https://github.com/quarkusio/quarkus/commit/54388870c7ede5f1842be09002eb606db49bd19e", "committedDate": "2020-06-29T13:41:44Z", "message": "Helper to retrieve an explicitly defined resource name containing initialization SQL script statements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "770f5265cb449e9094057713a2532f1066ed8f38", "author": {"user": {"login": "Sanne", "name": "Sanne Grinovero"}}, "url": "https://github.com/quarkusio/quarkus/commit/770f5265cb449e9094057713a2532f1066ed8f38", "committedDate": "2020-06-29T13:50:56Z", "message": "Finish encapsulating of ParsedPersistenceXmlDescriptor type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb365c1460746a1dc422a3ce627e0409251439c1", "author": {"user": {"login": "Sanne", "name": "Sanne Grinovero"}}, "url": "https://github.com/quarkusio/quarkus/commit/eb365c1460746a1dc422a3ce627e0409251439c1", "committedDate": "2020-06-29T20:22:19Z", "message": "Extract MP Metrics deployment steps into their own class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2011d08fdd72400add1fa3e0c9fae54e6c76c74e", "author": {"user": {"login": "Sanne", "name": "Sanne Grinovero"}}, "url": "https://github.com/quarkusio/quarkus/commit/2011d08fdd72400add1fa3e0c9fae54e6c76c74e", "committedDate": "2020-06-30T13:00:18Z", "message": "Extract the standard list of ServiceInitiators"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4292cb57329399cf36db214c4141a598ddc0322", "author": {"user": {"login": "Sanne", "name": "Sanne Grinovero"}}, "url": "https://github.com/quarkusio/quarkus/commit/f4292cb57329399cf36db214c4141a598ddc0322", "committedDate": "2020-06-30T16:46:40Z", "message": "Introduce Hibernate Reactive integration test using autogenerated IDs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e5ace998dcd1629181a7bfa0560a99fb1f5b7ff", "author": {"user": {"login": "Sanne", "name": "Sanne Grinovero"}}, "url": "https://github.com/quarkusio/quarkus/commit/5e5ace998dcd1629181a7bfa0560a99fb1f5b7ff", "committedDate": "2020-06-30T16:46:40Z", "message": "Allow extension points to watch for an implied PU definition being generated (ImpliedBlockingPersistenceUnitTypeBuildItem)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5acb6b995a4305594dc9d549b45141a6d2e155e", "author": {"user": {"login": "Sanne", "name": "Sanne Grinovero"}}, "url": "https://github.com/quarkusio/quarkus/commit/c5acb6b995a4305594dc9d549b45141a6d2e155e", "committedDate": "2020-06-30T16:46:40Z", "message": "Group metadata which belongs to the same PU into a new QuarkusPersistenceUnitDefinition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21ad212a5d2014050a2d292d11cb269872541dbe", "author": {"user": {"login": "Sanne", "name": "Sanne Grinovero"}}, "url": "https://github.com/quarkusio/quarkus/commit/21ad212a5d2014050a2d292d11cb269872541dbe", "committedDate": "2020-06-30T16:46:40Z", "message": "Tighten visibility of the LightPersistenceXmlDescriptor constructor meant for bytecode serialization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af46aa3d733f49edf334760981f893b6c6bbae73", "author": {"user": {"login": "Sanne", "name": "Sanne Grinovero"}}, "url": "https://github.com/quarkusio/quarkus/commit/af46aa3d733f49edf334760981f893b6c6bbae73", "committedDate": "2020-06-30T16:46:41Z", "message": "Propagate the 'isReactive' flag into the RecordedState instance of each PU"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10764b249146a80d92fafc38a04170fff35dae7e", "author": {"user": {"login": "Sanne", "name": "Sanne Grinovero"}}, "url": "https://github.com/quarkusio/quarkus/commit/10764b249146a80d92fafc38a04170fff35dae7e", "committedDate": "2020-06-30T16:46:41Z", "message": "Introduce checks and assertions for booting the right type of ORM in each case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a0af9b34fb2c74fe97e0ae14b416f774aa5de82", "author": {"user": {"login": "Sanne", "name": "Sanne Grinovero"}}, "url": "https://github.com/quarkusio/quarkus/commit/5a0af9b34fb2c74fe97e0ae14b416f774aa5de82", "committedDate": "2020-06-30T16:46:41Z", "message": "Extract construction of RecordableBootstrap into a separate helper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95ed5f61aae02339ded0b56eacd8e34a552f5959", "author": {"user": {"login": "Sanne", "name": "Sanne Grinovero"}}, "url": "https://github.com/quarkusio/quarkus/commit/95ed5f61aae02339ded0b56eacd8e34a552f5959", "committedDate": "2020-06-30T16:46:41Z", "message": "Further extract an InitialInitiatorListProvider interface contract"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "833571c26b99ccc62da34619e8d5f1fd69f47890", "author": {"user": {"login": "Sanne", "name": "Sanne Grinovero"}}, "url": "https://github.com/quarkusio/quarkus/commit/833571c26b99ccc62da34619e8d5f1fd69f47890", "committedDate": "2020-06-30T16:46:41Z", "message": "Lookup the ReactiveHibernateInitiatorListProvider reflectively and use it for Reactive PUs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff83c40afd743846b1c0bd1190be1d9c92b5fbf2", "author": {"user": {"login": "Sanne", "name": "Sanne Grinovero"}}, "url": "https://github.com/quarkusio/quarkus/commit/ff83c40afd743846b1c0bd1190be1d9c92b5fbf2", "committedDate": "2020-06-30T16:46:41Z", "message": "Make QuarkusJtaPlatformInitiator much simpler again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4b16f0dcf41984adb9961ff9d0490069efc484a", "author": {"user": {"login": "Sanne", "name": "Sanne Grinovero"}}, "url": "https://github.com/quarkusio/quarkus/commit/f4b16f0dcf41984adb9961ff9d0490069efc484a", "committedDate": "2020-06-30T16:46:41Z", "message": "Remove the no longer needed DCO optimisation via @Substitutions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e132d42c0b15c52286dbcf217ff450397493bf2d", "author": {"user": {"login": "Sanne", "name": "Sanne Grinovero"}}, "url": "https://github.com/quarkusio/quarkus/commit/e132d42c0b15c52286dbcf217ff450397493bf2d", "committedDate": "2020-06-30T16:46:41Z", "message": "Actually fix the initial service Initiators list for Hibernate Reactive"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMjQwMTM4", "url": "https://github.com/quarkusio/quarkus/pull/10382#pullrequestreview-440240138", "createdAt": "2020-06-30T17:32:56Z", "commit": {"oid": "28b3c69464acb743b13e43543af5226435eb2b25"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzozMjo1NlrOGrHRIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzozMjo1NlrOGrHRIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg2MTAyNQ==", "bodyText": "the same check is repeated below", "url": "https://github.com/quarkusio/quarkus/pull/10382#discussion_r447861025", "createdAt": "2020-06-30T17:32:56Z", "author": {"login": "Sanne"}, "path": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/boot/LightPersistenceXmlDescriptor.java", "diffHunk": "@@ -36,9 +36,6 @@ public LightPersistenceXmlDescriptor(final PersistenceUnitDescriptor toClone) {\n     }\n \n     private static void verifyIgnoredFields(final PersistenceUnitDescriptor toClone) {\n-        if (toClone.getNonJtaDataSource() != null) {\n-            throw new UnsupportedOperationException(\"Value found for #getNonJtaDataSource : not supported yet\");\n-        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b3c69464acb743b13e43543af5226435eb2b25"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMzc0NTAw", "url": "https://github.com/quarkusio/quarkus/pull/10382#pullrequestreview-440374500", "createdAt": "2020-06-30T20:48:54Z", "commit": {"oid": "e132d42c0b15c52286dbcf217ff450397493bf2d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNzIxMTU0", "url": "https://github.com/quarkusio/quarkus/pull/10382#pullrequestreview-440721154", "createdAt": "2020-07-01T09:54:13Z", "commit": {"oid": "e132d42c0b15c52286dbcf217ff450397493bf2d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwODQ3ODM2", "url": "https://github.com/quarkusio/quarkus/pull/10382#pullrequestreview-440847836", "createdAt": "2020-07-01T13:02:49Z", "commit": {"oid": "e132d42c0b15c52286dbcf217ff450397493bf2d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzowMjo1MFrOGrk8hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzowMjo1MFrOGrk8hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0NzI3MQ==", "bodyText": "In ORM Panache I have used a list of BuildItem to register optional stuff like these. Otherwise a service loader would work too. I guess both would be better than reflection, no?", "url": "https://github.com/quarkusio/quarkus/pull/10382#discussion_r448347271", "createdAt": "2020-07-01T13:02:50Z", "author": {"login": "FroMage"}, "path": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/boot/RecordableBootstrapFactory.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package io.quarkus.hibernate.orm.runtime.boot;\n+\n+import org.hibernate.boot.registry.BootstrapServiceRegistry;\n+import org.hibernate.boot.registry.classloading.spi.ClassLoaderService;\n+import org.hibernate.boot.registry.internal.BootstrapServiceRegistryImpl;\n+import org.hibernate.boot.registry.selector.spi.StrategySelector;\n+\n+import io.quarkus.hibernate.orm.runtime.customized.QuarkusIntegratorServiceImpl;\n+import io.quarkus.hibernate.orm.runtime.customized.QuarkusStrategySelectorBuilder;\n+import io.quarkus.hibernate.orm.runtime.recording.RecordableBootstrap;\n+import io.quarkus.hibernate.orm.runtime.service.FlatClassLoaderService;\n+import io.quarkus.hibernate.orm.runtime.service.InitialInitiatorListProvider;\n+import io.quarkus.hibernate.orm.runtime.service.StandardHibernateORMInitiatorListProvider;\n+\n+final class RecordableBootstrapFactory {\n+\n+    private static final InitialInitiatorListProvider reactiveInitiatorListProvider = initReactiveListProviderMaybe();\n+    private static final InitialInitiatorListProvider classicInitiatorListProvider = new StandardHibernateORMInitiatorListProvider();\n+\n+    public static RecordableBootstrap createRecordableBootstrapBuilder(QuarkusPersistenceUnitDefinition puDefinition) {\n+        final BootstrapServiceRegistry bsr = buildBootstrapServiceRegistry();\n+        final RecordableBootstrap ssrBuilder = new RecordableBootstrap(bsr, getInitiatorListProvider(puDefinition));\n+        return ssrBuilder;\n+    }\n+\n+    private static InitialInitiatorListProvider getInitiatorListProvider(QuarkusPersistenceUnitDefinition puDefinition) {\n+        if (puDefinition.isReactive()) {\n+            if (reactiveInitiatorListProvider == null) {\n+                throw new IllegalStateException(\n+                        \"InitiatorList requires for Hibernate Reactive but Hibernate Reactive extension is not around?\");\n+            }\n+            return reactiveInitiatorListProvider;\n+        } else {\n+            return classicInitiatorListProvider;\n+        }\n+    }\n+\n+    private static BootstrapServiceRegistry buildBootstrapServiceRegistry() {\n+        final ClassLoaderService providedClassLoaderService = FlatClassLoaderService.INSTANCE;\n+        // N.B. support for custom IntegratorProvider injected via Properties (as\n+        // instance) removed\n+\n+        final QuarkusIntegratorServiceImpl integratorService = new QuarkusIntegratorServiceImpl(providedClassLoaderService);\n+        final QuarkusStrategySelectorBuilder strategySelectorBuilder = new QuarkusStrategySelectorBuilder();\n+        final StrategySelector strategySelector = strategySelectorBuilder.buildSelector(providedClassLoaderService);\n+        return new BootstrapServiceRegistryImpl(true, providedClassLoaderService, strategySelector, integratorService);\n+    }\n+\n+    private static InitialInitiatorListProvider initReactiveListProviderMaybe() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e132d42c0b15c52286dbcf217ff450397493bf2d"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4224, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}