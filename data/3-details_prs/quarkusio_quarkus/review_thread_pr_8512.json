{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNjc2MDg4", "number": 8512, "reviewThreads": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyMzo0MVrODwtZfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMDoxNToxMFrODxk_Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDAyMDQ2OnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyMzo0MVrOGD29KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTo1MTo1MFrOGD-RUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTMwNA==", "bodyText": "@pedroigor should we have a check here that the token has expired ? At the moment the way to do is to check the exception message, Vertx reports JWT is expired or something like that. I'm going to work on a few Vertx PRs soon enough and perhaps we can introduce a dedicated exception too. I.e I'm not sure we should refresh in all the cases, only if the token has expired", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406699304", "createdAt": "2020-04-10T10:23:41Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcxOTc4Mg==", "bodyText": "There is an assumption that the attempt to refresh should only be done if there is an existing session (e.g.: cookie exists). I'm missing this check too.\nThat said, exceptions thrown should be only related to expiration, AFAIK. That is why I'm not checking for a specific exception.\nI'm OK about being more defensive and do something along the line you suggested, but if you think my assumption is correct, maybe unnecessary to add a new exception ?", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406719782", "createdAt": "2020-04-10T11:35:44Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTMwNA=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc2OTcxNg==", "bodyText": "@pedroigor The verification can definitely fail if the token has an invalid signature, right ?", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406769716", "createdAt": "2020-04-10T13:58:53Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTMwNA=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3NDUzNg==", "bodyText": "It would be hard to have the signature invalid considering that the session cookie was previously established. Like I said, it is OK to have a specific exception for this, but I tried to keep it simple and not introduce more exceptions considering that we should get expiration errors 99% of time, I think.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406774536", "createdAt": "2020-04-10T14:10:43Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTMwNA=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc4ODYwMA==", "bodyText": "@pedroigor But we can't afford trying to refresh a token which someone replaced in a cookie ? It is not hard to do at all for anyone spending their time hacking the cookies. We don't have a dedicated exception yet anyway, but as I said we can check the text of the message", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406788600", "createdAt": "2020-04-10T14:42:38Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTMwNA=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5Mzg4OA==", "bodyText": "Well, if you really want to be more explicit about the exception. Then I would say we should add proper exceptions.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406793888", "createdAt": "2020-04-10T14:54:26Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTMwNA=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxOTE1Mw==", "bodyText": "The dedicated exceptions can make things cleaner but we already know Vertx will throw the exception with a specific message indicating the expiry, IMHO we can't start refreshing unless it is an expiry related cause", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406819153", "createdAt": "2020-04-10T15:51:50Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTMwNA=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDA0ODMzOnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDozNzoxOFrOGD3NBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNjoyNzo0MVrOGEOW6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwMzM2Nw==", "bodyText": "The code around here should throw AuthenticationCompletionException to prevent the redirect loops, so that the user gets 401, otherwise a challenge will be created again and the OIDC will redirect again given that a user has just authenticated, we've had these problems before :-)", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406703367", "createdAt": "2020-04-10T10:37:18Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {\n+                                if ((identity = trySilentRefresh(configContext, idToken, refreshToken, context)) == null) {\n+                                    // if the refresh fails, we just propagate the original exception\n+                                    if (throwable instanceof AuthenticationFailedException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcyMDU4OA==", "bodyText": "Not sure, I think I'm covering this scenario in the test?", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406720588", "createdAt": "2020-04-10T11:38:46Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {\n+                                if ((identity = trySilentRefresh(configContext, idToken, refreshToken, context)) == null) {\n+                                    // if the refresh fails, we just propagate the original exception\n+                                    if (throwable instanceof AuthenticationFailedException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwMzM2Nw=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc4OTk4Ng==", "bodyText": "@pedroigor but your test does not have a refresh failed scenario ? Try to update this code locally to assume it is a failure and see what happens", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406789986", "createdAt": "2020-04-10T14:45:47Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {\n+                                if ((identity = trySilentRefresh(configContext, idToken, refreshToken, context)) == null) {\n+                                    // if the refresh fails, we just propagate the original exception\n+                                    if (throwable instanceof AuthenticationFailedException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwMzM2Nw=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5MjI4Ng==", "bodyText": "It does ... The last checks if a redirect is performed due to the session being invalid at the OP.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406792286", "createdAt": "2020-04-10T14:50:52Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {\n+                                if ((identity = trySilentRefresh(configContext, idToken, refreshToken, context)) == null) {\n+                                    // if the refresh fails, we just propagate the original exception\n+                                    if (throwable instanceof AuthenticationFailedException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwMzM2Nw=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxOTY1MA==", "bodyText": "I mean a refresh grant returns an error, that what was causing a lot of headache earlier with the code grant returning an error", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406819650", "createdAt": "2020-04-10T15:53:04Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {\n+                                if ((identity = trySilentRefresh(configContext, idToken, refreshToken, context)) == null) {\n+                                    // if the refresh fails, we just propagate the original exception\n+                                    if (throwable instanceof AuthenticationFailedException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwMzM2Nw=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgyNjYyOQ==", "bodyText": "That is what that last part does, the refresh will fail due to an invalid session (but can be anything) and the user properly redirected to the login page.\nIf the check is not enough, I'm happy to provide something else.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406826629", "createdAt": "2020-04-10T16:09:32Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {\n+                                if ((identity = trySilentRefresh(configContext, idToken, refreshToken, context)) == null) {\n+                                    // if the refresh fails, we just propagate the original exception\n+                                    if (throwable instanceof AuthenticationFailedException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwMzM2Nw=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMjc5MA==", "bodyText": "@pedroigor I need to think more about it, what we definitely want to avoid is that the challenge is sent to Keycloak while the user session is still valid", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406832790", "createdAt": "2020-04-10T16:24:05Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {\n+                                if ((identity = trySilentRefresh(configContext, idToken, refreshToken, context)) == null) {\n+                                    // if the refresh fails, we just propagate the original exception\n+                                    if (throwable instanceof AuthenticationFailedException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwMzM2Nw=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2NzEwOQ==", "bodyText": "That is a valid use case ... Suppose the OP is down, local session active. When refreshing we are going to invalidate the session. A similar behavior than if using token introspection with bearer tokens.\nDepending on the app requirements the behavior is expected as you must enforce that local sessions have their corresponding ones at the OP. Note that if you don't want this, you can just disable the functionality and fallback to local validation (as it stands today).", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406867109", "createdAt": "2020-04-10T17:45:21Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {\n+                                if ((identity = trySilentRefresh(configContext, idToken, refreshToken, context)) == null) {\n+                                    // if the refresh fails, we just propagate the original exception\n+                                    if (throwable instanceof AuthenticationFailedException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwMzM2Nw=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4MjcyOQ==", "bodyText": "Hi Pedro, @pedroigor thanks, sure that makes sense, what I'm somewhat concerned about is that redirection loop. I think if we are 100% sure that the refresh is attempted only when the ID token has expired then AuthenticationFailedException will get a user facing a KC/etc login page. This is one reason why we should check the exception message before a refresh.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407082729", "createdAt": "2020-04-11T16:27:41Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {\n+                                if ((identity = trySilentRefresh(configContext, idToken, refreshToken, context)) == null) {\n+                                    // if the refresh fails, we just propagate the original exception\n+                                    if (throwable instanceof AuthenticationFailedException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwMzM2Nw=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDA1NjExOnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDo0MToxNFrOGD3RqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMTo0MDozOFrOGD4SRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwNDU1Mw==", "bodyText": "Can sessionCookie be null here ?", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406704553", "createdAt": "2020-04-10T10:41:14Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {\n+                                if ((identity = trySilentRefresh(configContext, idToken, refreshToken, context)) == null) {\n+                                    // if the refresh fails, we just propagate the original exception\n+                                    if (throwable instanceof AuthenticationFailedException) {\n+                                        throw AuthenticationFailedException.class.cast(throwable);\n+                                    }\n+                                    throw new AuthenticationFailedException(throwable);\n+                                }\n+                            }\n+\n+                            return augmentIdentity(identity, accessToken, refreshToken, context);\n                         }\n                     });\n         }\n \n         // start a new session by starting the code flow dance\n-        return performCodeFlow(identityProviderManager, context, resolver);\n+        return performCodeFlow(identityProviderManager, context, configContext);\n     }\n \n     public CompletionStage<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n         TenantConfigContext configContext = resolver.resolve(context, false);\n+        ServerCookie sessionCookie = (ServerCookie) context.cookieMap().get(SESSION_COOKIE_NAME);\n+\n+        if (isLogout(context, configContext)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcyMTA5NA==", "bodyText": "Yes, better check that.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406721094", "createdAt": "2020-04-10T11:40:38Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {\n+                                if ((identity = trySilentRefresh(configContext, idToken, refreshToken, context)) == null) {\n+                                    // if the refresh fails, we just propagate the original exception\n+                                    if (throwable instanceof AuthenticationFailedException) {\n+                                        throw AuthenticationFailedException.class.cast(throwable);\n+                                    }\n+                                    throw new AuthenticationFailedException(throwable);\n+                                }\n+                            }\n+\n+                            return augmentIdentity(identity, accessToken, refreshToken, context);\n                         }\n                     });\n         }\n \n         // start a new session by starting the code flow dance\n-        return performCodeFlow(identityProviderManager, context, resolver);\n+        return performCodeFlow(identityProviderManager, context, configContext);\n     }\n \n     public CompletionStage<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n         TenantConfigContext configContext = resolver.resolve(context, false);\n+        ServerCookie sessionCookie = (ServerCookie) context.cookieMap().get(SESSION_COOKIE_NAME);\n+\n+        if (isLogout(context, configContext)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwNDU1Mw=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDA2MDQ4OnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "isResolved": true, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDo0MzoyM1rOGD3UOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTozNDo1N1rOGD90mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwNTIxMA==", "bodyText": "Might be worth adding a comment here it is an OIDC logout endpoint and check it is not null", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406705210", "createdAt": "2020-04-10T10:43:23Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {\n+                                if ((identity = trySilentRefresh(configContext, idToken, refreshToken, context)) == null) {\n+                                    // if the refresh fails, we just propagate the original exception\n+                                    if (throwable instanceof AuthenticationFailedException) {\n+                                        throw AuthenticationFailedException.class.cast(throwable);\n+                                    }\n+                                    throw new AuthenticationFailedException(throwable);\n+                                }\n+                            }\n+\n+                            return augmentIdentity(identity, accessToken, refreshToken, context);\n                         }\n                     });\n         }\n \n         // start a new session by starting the code flow dance\n-        return performCodeFlow(identityProviderManager, context, resolver);\n+        return performCodeFlow(identityProviderManager, context, configContext);\n     }\n \n     public CompletionStage<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n         TenantConfigContext configContext = resolver.resolve(context, false);\n+        ServerCookie sessionCookie = (ServerCookie) context.cookieMap().get(SESSION_COOKIE_NAME);\n+\n+        if (isLogout(context, configContext)) {\n+            String logoutPath = OAuth2AuthProviderImpl.class.cast(configContext.auth).getConfig().getLogoutPath();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwNzg1Ng==", "bodyText": "If a given OIDC does not support the logout, what should we return then ? The user is still logged in and does not need a challenge. I propose LogoutException (this actual exception will be in quarkus-vertx-http, as AutenticationCompletionException is) ? There we can do something about it, may be redirect to the logout.redirect_uri, in a timed way, return basic HTML page: \"Logout is not supported, you will be redirected to {redirect.uri} in 3 seconds\", something like that, as I don't think 500 or 401 would be correct just because a user's attempt to logout is not supported :-)", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406707856", "createdAt": "2020-04-10T10:52:58Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {\n+                                if ((identity = trySilentRefresh(configContext, idToken, refreshToken, context)) == null) {\n+                                    // if the refresh fails, we just propagate the original exception\n+                                    if (throwable instanceof AuthenticationFailedException) {\n+                                        throw AuthenticationFailedException.class.cast(throwable);\n+                                    }\n+                                    throw new AuthenticationFailedException(throwable);\n+                                }\n+                            }\n+\n+                            return augmentIdentity(identity, accessToken, refreshToken, context);\n                         }\n                     });\n         }\n \n         // start a new session by starting the code flow dance\n-        return performCodeFlow(identityProviderManager, context, resolver);\n+        return performCodeFlow(identityProviderManager, context, configContext);\n     }\n \n     public CompletionStage<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n         TenantConfigContext configContext = resolver.resolve(context, false);\n+        ServerCookie sessionCookie = (ServerCookie) context.cookieMap().get(SESSION_COOKIE_NAME);\n+\n+        if (isLogout(context, configContext)) {\n+            String logoutPath = OAuth2AuthProviderImpl.class.cast(configContext.auth).getConfig().getLogoutPath();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwNTIxMA=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcyMTM2MA==", "bodyText": "If the OP does not support logout we have some checks during the build so the application should fail to start.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406721360", "createdAt": "2020-04-10T11:41:42Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {\n+                                if ((identity = trySilentRefresh(configContext, idToken, refreshToken, context)) == null) {\n+                                    // if the refresh fails, we just propagate the original exception\n+                                    if (throwable instanceof AuthenticationFailedException) {\n+                                        throw AuthenticationFailedException.class.cast(throwable);\n+                                    }\n+                                    throw new AuthenticationFailedException(throwable);\n+                                }\n+                            }\n+\n+                            return augmentIdentity(identity, accessToken, refreshToken, context);\n                         }\n                     });\n         }\n \n         // start a new session by starting the code flow dance\n-        return performCodeFlow(identityProviderManager, context, resolver);\n+        return performCodeFlow(identityProviderManager, context, configContext);\n     }\n \n     public CompletionStage<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n         TenantConfigContext configContext = resolver.resolve(context, false);\n+        ServerCookie sessionCookie = (ServerCookie) context.cookieMap().get(SESSION_COOKIE_NAME);\n+\n+        if (isLogout(context, configContext)) {\n+            String logoutPath = OAuth2AuthProviderImpl.class.cast(configContext.auth).getConfig().getLogoutPath();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwNTIxMA=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczMTczMg==", "bodyText": "@pedroigor Ignore most of it please :-), I see a check further down the PR :-), Though what happens if the sessionCookie is null ?", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406731732", "createdAt": "2020-04-10T12:15:32Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {\n+                                if ((identity = trySilentRefresh(configContext, idToken, refreshToken, context)) == null) {\n+                                    // if the refresh fails, we just propagate the original exception\n+                                    if (throwable instanceof AuthenticationFailedException) {\n+                                        throw AuthenticationFailedException.class.cast(throwable);\n+                                    }\n+                                    throw new AuthenticationFailedException(throwable);\n+                                }\n+                            }\n+\n+                            return augmentIdentity(identity, accessToken, refreshToken, context);\n                         }\n                     });\n         }\n \n         // start a new session by starting the code flow dance\n-        return performCodeFlow(identityProviderManager, context, resolver);\n+        return performCodeFlow(identityProviderManager, context, configContext);\n     }\n \n     public CompletionStage<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n         TenantConfigContext configContext = resolver.resolve(context, false);\n+        ServerCookie sessionCookie = (ServerCookie) context.cookieMap().get(SESSION_COOKIE_NAME);\n+\n+        if (isLogout(context, configContext)) {\n+            String logoutPath = OAuth2AuthProviderImpl.class.cast(configContext.auth).getConfig().getLogoutPath();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwNTIxMA=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0MTQ4MQ==", "bodyText": "Yeah, I've added a check for this.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406741481", "createdAt": "2020-04-10T12:45:26Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {\n+                                if ((identity = trySilentRefresh(configContext, idToken, refreshToken, context)) == null) {\n+                                    // if the refresh fails, we just propagate the original exception\n+                                    if (throwable instanceof AuthenticationFailedException) {\n+                                        throw AuthenticationFailedException.class.cast(throwable);\n+                                    }\n+                                    throw new AuthenticationFailedException(throwable);\n+                                }\n+                            }\n+\n+                            return augmentIdentity(identity, accessToken, refreshToken, context);\n                         }\n                     });\n         }\n \n         // start a new session by starting the code flow dance\n-        return performCodeFlow(identityProviderManager, context, resolver);\n+        return performCodeFlow(identityProviderManager, context, configContext);\n     }\n \n     public CompletionStage<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n         TenantConfigContext configContext = resolver.resolve(context, false);\n+        ServerCookie sessionCookie = (ServerCookie) context.cookieMap().get(SESSION_COOKIE_NAME);\n+\n+        if (isLogout(context, configContext)) {\n+            String logoutPath = OAuth2AuthProviderImpl.class.cast(configContext.auth).getConfig().getLogoutPath();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwNTIxMA=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3MjA0OQ==", "bodyText": "@pedroigor so what happens if a logout has been requested and the session code is null ?", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406772049", "createdAt": "2020-04-10T14:04:34Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {\n+                                if ((identity = trySilentRefresh(configContext, idToken, refreshToken, context)) == null) {\n+                                    // if the refresh fails, we just propagate the original exception\n+                                    if (throwable instanceof AuthenticationFailedException) {\n+                                        throw AuthenticationFailedException.class.cast(throwable);\n+                                    }\n+                                    throw new AuthenticationFailedException(throwable);\n+                                }\n+                            }\n+\n+                            return augmentIdentity(identity, accessToken, refreshToken, context);\n                         }\n                     });\n         }\n \n         // start a new session by starting the code flow dance\n-        return performCodeFlow(identityProviderManager, context, resolver);\n+        return performCodeFlow(identityProviderManager, context, configContext);\n     }\n \n     public CompletionStage<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n         TenantConfigContext configContext = resolver.resolve(context, false);\n+        ServerCookie sessionCookie = (ServerCookie) context.cookieMap().get(SESSION_COOKIE_NAME);\n+\n+        if (isLogout(context, configContext)) {\n+            String logoutPath = OAuth2AuthProviderImpl.class.cast(configContext.auth).getConfig().getLogoutPath();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwNTIxMA=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3NDcyNw==", "bodyText": "Check added, as mentioned.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406774727", "createdAt": "2020-04-10T14:11:13Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {\n+                                if ((identity = trySilentRefresh(configContext, idToken, refreshToken, context)) == null) {\n+                                    // if the refresh fails, we just propagate the original exception\n+                                    if (throwable instanceof AuthenticationFailedException) {\n+                                        throw AuthenticationFailedException.class.cast(throwable);\n+                                    }\n+                                    throw new AuthenticationFailedException(throwable);\n+                                }\n+                            }\n+\n+                            return augmentIdentity(identity, accessToken, refreshToken, context);\n                         }\n                     });\n         }\n \n         // start a new session by starting the code flow dance\n-        return performCodeFlow(identityProviderManager, context, resolver);\n+        return performCodeFlow(identityProviderManager, context, configContext);\n     }\n \n     public CompletionStage<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n         TenantConfigContext configContext = resolver.resolve(context, false);\n+        ServerCookie sessionCookie = (ServerCookie) context.cookieMap().get(SESSION_COOKIE_NAME);\n+\n+        if (isLogout(context, configContext)) {\n+            String logoutPath = OAuth2AuthProviderImpl.class.cast(configContext.auth).getConfig().getLogoutPath();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwNTIxMA=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5MDUzMQ==", "bodyText": "@pedroigor It is just an NPE check :-) so what should happen to the logout request flow in this case ?", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406790531", "createdAt": "2020-04-10T14:47:07Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {\n+                                if ((identity = trySilentRefresh(configContext, idToken, refreshToken, context)) == null) {\n+                                    // if the refresh fails, we just propagate the original exception\n+                                    if (throwable instanceof AuthenticationFailedException) {\n+                                        throw AuthenticationFailedException.class.cast(throwable);\n+                                    }\n+                                    throw new AuthenticationFailedException(throwable);\n+                                }\n+                            }\n+\n+                            return augmentIdentity(identity, accessToken, refreshToken, context);\n                         }\n                     });\n         }\n \n         // start a new session by starting the code flow dance\n-        return performCodeFlow(identityProviderManager, context, resolver);\n+        return performCodeFlow(identityProviderManager, context, configContext);\n     }\n \n     public CompletionStage<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n         TenantConfigContext configContext = resolver.resolve(context, false);\n+        ServerCookie sessionCookie = (ServerCookie) context.cookieMap().get(SESSION_COOKIE_NAME);\n+\n+        if (isLogout(context, configContext)) {\n+            String logoutPath = OAuth2AuthProviderImpl.class.cast(configContext.auth).getConfig().getLogoutPath();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwNTIxMA=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5MzAyNg==", "bodyText": "You just go to the login page as per the normal flow.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406793026", "createdAt": "2020-04-10T14:52:45Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {\n+                                if ((identity = trySilentRefresh(configContext, idToken, refreshToken, context)) == null) {\n+                                    // if the refresh fails, we just propagate the original exception\n+                                    if (throwable instanceof AuthenticationFailedException) {\n+                                        throw AuthenticationFailedException.class.cast(throwable);\n+                                    }\n+                                    throw new AuthenticationFailedException(throwable);\n+                                }\n+                            }\n+\n+                            return augmentIdentity(identity, accessToken, refreshToken, context);\n                         }\n                     });\n         }\n \n         // start a new session by starting the code flow dance\n-        return performCodeFlow(identityProviderManager, context, resolver);\n+        return performCodeFlow(identityProviderManager, context, configContext);\n     }\n \n     public CompletionStage<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n         TenantConfigContext configContext = resolver.resolve(context, false);\n+        ServerCookie sessionCookie = (ServerCookie) context.cookieMap().get(SESSION_COOKIE_NAME);\n+\n+        if (isLogout(context, configContext)) {\n+            String logoutPath = OAuth2AuthProviderImpl.class.cast(configContext.auth).getConfig().getLogoutPath();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwNTIxMA=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxMTgwMA==", "bodyText": "@pedroigor Got it :-)", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406811800", "createdAt": "2020-04-10T15:34:57Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {\n+                                if ((identity = trySilentRefresh(configContext, idToken, refreshToken, context)) == null) {\n+                                    // if the refresh fails, we just propagate the original exception\n+                                    if (throwable instanceof AuthenticationFailedException) {\n+                                        throw AuthenticationFailedException.class.cast(throwable);\n+                                    }\n+                                    throw new AuthenticationFailedException(throwable);\n+                                }\n+                            }\n+\n+                            return augmentIdentity(identity, accessToken, refreshToken, context);\n                         }\n                     });\n         }\n \n         // start a new session by starting the code flow dance\n-        return performCodeFlow(identityProviderManager, context, resolver);\n+        return performCodeFlow(identityProviderManager, context, configContext);\n     }\n \n     public CompletionStage<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n         TenantConfigContext configContext = resolver.resolve(context, false);\n+        ServerCookie sessionCookie = (ServerCookie) context.cookieMap().get(SESSION_COOKIE_NAME);\n+\n+        if (isLogout(context, configContext)) {\n+            String logoutPath = OAuth2AuthProviderImpl.class.cast(configContext.auth).getConfig().getLogoutPath();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwNTIxMA=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDA4NDE3OnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDo1NjozNFrOGD3igw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDo0ODozMlrOGD8j_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwODg2Nw==", "bodyText": "We can probably just use removeCookie here because it is then removed anyway if it is logout or not", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406708867", "createdAt": "2020-04-10T10:56:34Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {\n+                                if ((identity = trySilentRefresh(configContext, idToken, refreshToken, context)) == null) {\n+                                    // if the refresh fails, we just propagate the original exception\n+                                    if (throwable instanceof AuthenticationFailedException) {\n+                                        throw AuthenticationFailedException.class.cast(throwable);\n+                                    }\n+                                    throw new AuthenticationFailedException(throwable);\n+                                }\n+                            }\n+\n+                            return augmentIdentity(identity, accessToken, refreshToken, context);\n                         }\n                     });\n         }\n \n         // start a new session by starting the code flow dance\n-        return performCodeFlow(identityProviderManager, context, resolver);\n+        return performCodeFlow(identityProviderManager, context, configContext);\n     }\n \n     public CompletionStage<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n         TenantConfigContext configContext = resolver.resolve(context, false);\n+        ServerCookie sessionCookie = (ServerCookie) context.cookieMap().get(SESSION_COOKIE_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcyMTU4OQ==", "bodyText": "The problem is that the your last changes are setting the value of the cookie to an empty string. So, removing here would make hard to get the value and handle it accordingly.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406721589", "createdAt": "2020-04-10T11:42:35Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {\n+                                if ((identity = trySilentRefresh(configContext, idToken, refreshToken, context)) == null) {\n+                                    // if the refresh fails, we just propagate the original exception\n+                                    if (throwable instanceof AuthenticationFailedException) {\n+                                        throw AuthenticationFailedException.class.cast(throwable);\n+                                    }\n+                                    throw new AuthenticationFailedException(throwable);\n+                                }\n+                            }\n+\n+                            return augmentIdentity(identity, accessToken, refreshToken, context);\n                         }\n                     });\n         }\n \n         // start a new session by starting the code flow dance\n-        return performCodeFlow(identityProviderManager, context, resolver);\n+        return performCodeFlow(identityProviderManager, context, configContext);\n     }\n \n     public CompletionStage<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n         TenantConfigContext configContext = resolver.resolve(context, false);\n+        ServerCookie sessionCookie = (ServerCookie) context.cookieMap().get(SESSION_COOKIE_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwODg2Nw=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3MjcyOA==", "bodyText": "@pedroigor Can we then update removeCookie to return the value before it was reset ?", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406772728", "createdAt": "2020-04-10T14:06:21Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {\n+                                if ((identity = trySilentRefresh(configContext, idToken, refreshToken, context)) == null) {\n+                                    // if the refresh fails, we just propagate the original exception\n+                                    if (throwable instanceof AuthenticationFailedException) {\n+                                        throw AuthenticationFailedException.class.cast(throwable);\n+                                    }\n+                                    throw new AuthenticationFailedException(throwable);\n+                                }\n+                            }\n+\n+                            return augmentIdentity(identity, accessToken, refreshToken, context);\n                         }\n                     });\n         }\n \n         // start a new session by starting the code flow dance\n-        return performCodeFlow(identityProviderManager, context, resolver);\n+        return performCodeFlow(identityProviderManager, context, configContext);\n     }\n \n     public CompletionStage<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n         TenantConfigContext configContext = resolver.resolve(context, false);\n+        ServerCookie sessionCookie = (ServerCookie) context.cookieMap().get(SESSION_COOKIE_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwODg2Nw=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3NTIyNg==", "bodyText": "Sure, if you think is better. For me, the way it is OK too.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406775226", "createdAt": "2020-04-10T14:12:25Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {\n+                                if ((identity = trySilentRefresh(configContext, idToken, refreshToken, context)) == null) {\n+                                    // if the refresh fails, we just propagate the original exception\n+                                    if (throwable instanceof AuthenticationFailedException) {\n+                                        throw AuthenticationFailedException.class.cast(throwable);\n+                                    }\n+                                    throw new AuthenticationFailedException(throwable);\n+                                }\n+                            }\n+\n+                            return augmentIdentity(identity, accessToken, refreshToken, context);\n                         }\n                     });\n         }\n \n         // start a new session by starting the code flow dance\n-        return performCodeFlow(identityProviderManager, context, resolver);\n+        return performCodeFlow(identityProviderManager, context, configContext);\n     }\n \n     public CompletionStage<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n         TenantConfigContext configContext = resolver.resolve(context, false);\n+        ServerCookie sessionCookie = (ServerCookie) context.cookieMap().get(SESSION_COOKIE_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwODg2Nw=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5MTE2Ng==", "bodyText": "@pedroigor we can have 1 remove cookie call which returns the cookie value instead of 2 calls. simple to do so why not :-)", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406791166", "createdAt": "2020-04-10T14:48:32Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (throwable != null) {\n+                                if ((identity = trySilentRefresh(configContext, idToken, refreshToken, context)) == null) {\n+                                    // if the refresh fails, we just propagate the original exception\n+                                    if (throwable instanceof AuthenticationFailedException) {\n+                                        throw AuthenticationFailedException.class.cast(throwable);\n+                                    }\n+                                    throw new AuthenticationFailedException(throwable);\n+                                }\n+                            }\n+\n+                            return augmentIdentity(identity, accessToken, refreshToken, context);\n                         }\n                     });\n         }\n \n         // start a new session by starting the code flow dance\n-        return performCodeFlow(identityProviderManager, context, resolver);\n+        return performCodeFlow(identityProviderManager, context, configContext);\n     }\n \n     public CompletionStage<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n         TenantConfigContext configContext = resolver.resolve(context, false);\n+        ServerCookie sessionCookie = (ServerCookie) context.cookieMap().get(SESSION_COOKIE_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwODg2Nw=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDA5NTk0OnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMTowMzoxOVrOGD3pMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDo1Mjo1OFrOGD8rmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcxMDU3Ng==", "bodyText": "The refactoring from buildRedirectUri to buildUri itself is neat but we've just calculated absoluteUri above, URI calculation is quite expensive, so IMHO it would be more optimal to keep buildRedirectUri as is, and have buildLogoutUri as well which would also accept absoluteUri - a bit more verbose I agree :-), but would also be clearer IMHO.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406710576", "createdAt": "2020-04-10T11:03:19Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -101,7 +151,7 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n         // redirect_uri\n         URI absoluteUri = URI.create(context.request().absoluteURI());\n         String redirectPath = getRedirectPath(configContext, absoluteUri);\n-        String redirectUriParam = buildRedirectUri(context, absoluteUri, redirectPath);\n+        String redirectUriParam = buildUri(context, redirectPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcyMjU1Mg==", "bodyText": "Yeah .. I missed changing that part to use the refactored method.\nMaybe we should keep it cleaner now and improve accordingly if we have issues with performance?\nBut for this case in particular, I think we can use obtain the path directly from the context.request(), right ?", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406722552", "createdAt": "2020-04-10T11:46:03Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -101,7 +151,7 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n         // redirect_uri\n         URI absoluteUri = URI.create(context.request().absoluteURI());\n         String redirectPath = getRedirectPath(configContext, absoluteUri);\n-        String redirectUriParam = buildRedirectUri(context, absoluteUri, redirectPath);\n+        String redirectUriParam = buildUri(context, redirectPath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcxMDU3Ng=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3NDMxOQ==", "bodyText": "But it was not really unclean - and obviously we won't be spending time measuring how absoluteUri calculation duplication affects the performance, but it is a duplication we can easily avoid", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406774319", "createdAt": "2020-04-10T14:10:11Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -101,7 +151,7 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n         // redirect_uri\n         URI absoluteUri = URI.create(context.request().absoluteURI());\n         String redirectPath = getRedirectPath(configContext, absoluteUri);\n-        String redirectUriParam = buildRedirectUri(context, absoluteUri, redirectPath);\n+        String redirectUriParam = buildUri(context, redirectPath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcxMDU3Ng=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3NjE3NQ==", "bodyText": "Yeah. I've updated to just use HttpServerRequest methods. Like I previously mentioned, I guess it is OK, right ?", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406776175", "createdAt": "2020-04-10T14:14:34Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -101,7 +151,7 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n         // redirect_uri\n         URI absoluteUri = URI.create(context.request().absoluteURI());\n         String redirectPath = getRedirectPath(configContext, absoluteUri);\n-        String redirectUriParam = buildRedirectUri(context, absoluteUri, redirectPath);\n+        String redirectUriParam = buildUri(context, redirectPath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcxMDU3Ng=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5MzExNQ==", "bodyText": "Yeah it looks fine actually, sorry", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406793115", "createdAt": "2020-04-10T14:52:58Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -101,7 +151,7 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n         // redirect_uri\n         URI absoluteUri = URI.create(context.request().absoluteURI());\n         String redirectPath = getRedirectPath(configContext, absoluteUri);\n-        String redirectUriParam = buildRedirectUri(context, absoluteUri, redirectPath);\n+        String redirectUriParam = buildUri(context, redirectPath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcxMDU3Ng=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDIwNTQ0OnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMTo1ODo1OFrOGD4nZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowNjowM1rOGD5-eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcyNjUwMg==", "bodyText": "It looks like this check should be after a throwable check, otherwise we will be initiating a logout flow even if the token signature has failed for example, but the user session must have a valid token (except for the possible expiry)", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406726502", "createdAt": "2020-04-10T11:58:58Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0ODc5Mw==", "bodyText": "Yeah, will change to only do logout if identity is available.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406748793", "createdAt": "2020-04-10T13:06:03Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,34 +70,73 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public CompletionStage<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n-            return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n-                    .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n+            return authenticate(identityProviderManager, new IdTokenCredential(idToken, context))\n+                    .handle(new BiFunction<SecurityIdentity, Throwable, SecurityIdentity>() {\n                         @Override\n-                        public CompletionStage<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n-                            return CompletableFuture\n-                                    .completedFuture(augmentIdentity(securityIdentity, tokens[1], tokens[2], context));\n+                        public SecurityIdentity apply(SecurityIdentity identity, Throwable throwable) {\n+                            if (isLogout(context, configContext)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcyNjUwMg=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDIxMTIzOnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjowMToyNVrOGD4qvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzoyMTowN1rOGD6UQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcyNzM1OQ==", "bodyText": "AuthenticationCompletionException should be here", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406727359", "createdAt": "2020-04-10T12:01:25Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -298,5 +344,66 @@ private void removeCookie(RoutingContext context, TenantConfigContext configCont\n                 cookie.setPath(auth.cookiePath.get());\n             }\n         }\n+        return cookie;\n+    }\n+\n+    private boolean isLogout(RoutingContext context, TenantConfigContext configContext) {\n+        Optional<String> logoutPath = configContext.oidcConfig.logout.path;\n+\n+        if (logoutPath.isPresent()) {\n+            return context.request().absoluteURI().equals(\n+                    buildUri(context, logoutPath.get()));\n+        }\n+\n+        return false;\n+    }\n+\n+    private SecurityIdentity trySilentRefresh(TenantConfigContext configContext, String idToken, String refreshToken,\n+            RoutingContext context) {\n+        OidcTenantConfig config = configContext.oidcConfig;\n+\n+        if (config.token.refreshTimeout.isPresent()) {\n+            OAuth2AuthProviderImpl auth = ((OAuth2AuthProviderImpl) configContext.auth);\n+            JWT jwt = auth.getJWT();\n+            JsonObject tokenJson;\n+\n+            try {\n+                tokenJson = jwt.decode(idToken);\n+            } catch (Exception cause) {\n+                throw new AuthenticationFailedException(cause);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc1NDM2OQ==", "bodyText": "What is the difference when using one or another? I'm expecting to send a challenge, so AuthorizationFailedException is what I need?", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406754369", "createdAt": "2020-04-10T13:21:07Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -298,5 +344,66 @@ private void removeCookie(RoutingContext context, TenantConfigContext configCont\n                 cookie.setPath(auth.cookiePath.get());\n             }\n         }\n+        return cookie;\n+    }\n+\n+    private boolean isLogout(RoutingContext context, TenantConfigContext configContext) {\n+        Optional<String> logoutPath = configContext.oidcConfig.logout.path;\n+\n+        if (logoutPath.isPresent()) {\n+            return context.request().absoluteURI().equals(\n+                    buildUri(context, logoutPath.get()));\n+        }\n+\n+        return false;\n+    }\n+\n+    private SecurityIdentity trySilentRefresh(TenantConfigContext configContext, String idToken, String refreshToken,\n+            RoutingContext context) {\n+        OidcTenantConfig config = configContext.oidcConfig;\n+\n+        if (config.token.refreshTimeout.isPresent()) {\n+            OAuth2AuthProviderImpl auth = ((OAuth2AuthProviderImpl) configContext.auth);\n+            JWT jwt = auth.getJWT();\n+            JsonObject tokenJson;\n+\n+            try {\n+                tokenJson = jwt.decode(idToken);\n+            } catch (Exception cause) {\n+                throw new AuthenticationFailedException(cause);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcyNzM1OQ=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 254}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDIxNzA1OnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjowNDowMFrOGD4uAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjoxMDozNFrOGD-wTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcyODE5NQ==", "bodyText": "AuthenticationCompletionException", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406728195", "createdAt": "2020-04-10T12:04:00Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -298,5 +344,66 @@ private void removeCookie(RoutingContext context, TenantConfigContext configCont\n                 cookie.setPath(auth.cookiePath.get());\n             }\n         }\n+        return cookie;\n+    }\n+\n+    private boolean isLogout(RoutingContext context, TenantConfigContext configContext) {\n+        Optional<String> logoutPath = configContext.oidcConfig.logout.path;\n+\n+        if (logoutPath.isPresent()) {\n+            return context.request().absoluteURI().equals(\n+                    buildUri(context, logoutPath.get()));\n+        }\n+\n+        return false;\n+    }\n+\n+    private SecurityIdentity trySilentRefresh(TenantConfigContext configContext, String idToken, String refreshToken,\n+            RoutingContext context) {\n+        OidcTenantConfig config = configContext.oidcConfig;\n+\n+        if (config.token.refreshTimeout.isPresent()) {\n+            OAuth2AuthProviderImpl auth = ((OAuth2AuthProviderImpl) configContext.auth);\n+            JWT jwt = auth.getJWT();\n+            JsonObject tokenJson;\n+\n+            try {\n+                tokenJson = jwt.decode(idToken);\n+            } catch (Exception cause) {\n+                throw new AuthenticationFailedException(cause);\n+            }\n+\n+            Long iat = tokenJson.getLong(\"iat\");\n+            long now = System.currentTimeMillis() / 1000;\n+            Integer timeout = config.token.refreshTimeout.get();\n+\n+            if (now - iat >= timeout) {\n+                CompletableFuture<SecurityIdentity> cf = new CompletableFuture<>();\n+                OAuth2TokenImpl token = new OAuth2TokenImpl(configContext.auth, new JsonObject());\n+\n+                token.principal().put(\"refresh_token\", refreshToken);\n+\n+                token.refresh(new Handler<AsyncResult<Void>>() {\n+                    @Override\n+                    public void handle(AsyncResult<Void> result) {\n+                        if (result.succeeded()) {\n+                            String rawIdToken = token.principal().getString(\"id_token\");\n+                            IdTokenCredential idToken = new IdTokenCredential(rawIdToken, context);\n+                            QuarkusSecurityIdentity identity = validateAndCreateIdentity(idToken, config,\n+                                    jwt.decode(idToken.getToken()));\n+                            // after a successful refresh, rebuild the identity and update the cookie \n+                            processSuccessfulAuthentication(context, configContext, token, identity);\n+                            cf.complete(identity);\n+                        } else {\n+                            cf.completeExceptionally(new AuthenticationFailedException(result.cause()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 279}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc1NDQwMw==", "bodyText": "What is the difference when using one or another? I'm expecting to send a challenge, so AuthorizationFailedException is what I need?", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406754403", "createdAt": "2020-04-10T13:21:12Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -298,5 +344,66 @@ private void removeCookie(RoutingContext context, TenantConfigContext configCont\n                 cookie.setPath(auth.cookiePath.get());\n             }\n         }\n+        return cookie;\n+    }\n+\n+    private boolean isLogout(RoutingContext context, TenantConfigContext configContext) {\n+        Optional<String> logoutPath = configContext.oidcConfig.logout.path;\n+\n+        if (logoutPath.isPresent()) {\n+            return context.request().absoluteURI().equals(\n+                    buildUri(context, logoutPath.get()));\n+        }\n+\n+        return false;\n+    }\n+\n+    private SecurityIdentity trySilentRefresh(TenantConfigContext configContext, String idToken, String refreshToken,\n+            RoutingContext context) {\n+        OidcTenantConfig config = configContext.oidcConfig;\n+\n+        if (config.token.refreshTimeout.isPresent()) {\n+            OAuth2AuthProviderImpl auth = ((OAuth2AuthProviderImpl) configContext.auth);\n+            JWT jwt = auth.getJWT();\n+            JsonObject tokenJson;\n+\n+            try {\n+                tokenJson = jwt.decode(idToken);\n+            } catch (Exception cause) {\n+                throw new AuthenticationFailedException(cause);\n+            }\n+\n+            Long iat = tokenJson.getLong(\"iat\");\n+            long now = System.currentTimeMillis() / 1000;\n+            Integer timeout = config.token.refreshTimeout.get();\n+\n+            if (now - iat >= timeout) {\n+                CompletableFuture<SecurityIdentity> cf = new CompletableFuture<>();\n+                OAuth2TokenImpl token = new OAuth2TokenImpl(configContext.auth, new JsonObject());\n+\n+                token.principal().put(\"refresh_token\", refreshToken);\n+\n+                token.refresh(new Handler<AsyncResult<Void>>() {\n+                    @Override\n+                    public void handle(AsyncResult<Void> result) {\n+                        if (result.succeeded()) {\n+                            String rawIdToken = token.principal().getString(\"id_token\");\n+                            IdTokenCredential idToken = new IdTokenCredential(rawIdToken, context);\n+                            QuarkusSecurityIdentity identity = validateAndCreateIdentity(idToken, config,\n+                                    jwt.decode(idToken.getToken()));\n+                            // after a successful refresh, rebuild the identity and update the cookie \n+                            processSuccessfulAuthentication(context, configContext, token, identity);\n+                            cf.complete(identity);\n+                        } else {\n+                            cf.completeExceptionally(new AuthenticationFailedException(result.cause()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcyODE5NQ=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 279}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgyMDg2Mw==", "bodyText": "If the user has authentiicated but the code grant fails then there will be a redirect loop, so we should avoid this here", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406820863", "createdAt": "2020-04-10T15:55:54Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -298,5 +344,66 @@ private void removeCookie(RoutingContext context, TenantConfigContext configCont\n                 cookie.setPath(auth.cookiePath.get());\n             }\n         }\n+        return cookie;\n+    }\n+\n+    private boolean isLogout(RoutingContext context, TenantConfigContext configContext) {\n+        Optional<String> logoutPath = configContext.oidcConfig.logout.path;\n+\n+        if (logoutPath.isPresent()) {\n+            return context.request().absoluteURI().equals(\n+                    buildUri(context, logoutPath.get()));\n+        }\n+\n+        return false;\n+    }\n+\n+    private SecurityIdentity trySilentRefresh(TenantConfigContext configContext, String idToken, String refreshToken,\n+            RoutingContext context) {\n+        OidcTenantConfig config = configContext.oidcConfig;\n+\n+        if (config.token.refreshTimeout.isPresent()) {\n+            OAuth2AuthProviderImpl auth = ((OAuth2AuthProviderImpl) configContext.auth);\n+            JWT jwt = auth.getJWT();\n+            JsonObject tokenJson;\n+\n+            try {\n+                tokenJson = jwt.decode(idToken);\n+            } catch (Exception cause) {\n+                throw new AuthenticationFailedException(cause);\n+            }\n+\n+            Long iat = tokenJson.getLong(\"iat\");\n+            long now = System.currentTimeMillis() / 1000;\n+            Integer timeout = config.token.refreshTimeout.get();\n+\n+            if (now - iat >= timeout) {\n+                CompletableFuture<SecurityIdentity> cf = new CompletableFuture<>();\n+                OAuth2TokenImpl token = new OAuth2TokenImpl(configContext.auth, new JsonObject());\n+\n+                token.principal().put(\"refresh_token\", refreshToken);\n+\n+                token.refresh(new Handler<AsyncResult<Void>>() {\n+                    @Override\n+                    public void handle(AsyncResult<Void> result) {\n+                        if (result.succeeded()) {\n+                            String rawIdToken = token.principal().getString(\"id_token\");\n+                            IdTokenCredential idToken = new IdTokenCredential(rawIdToken, context);\n+                            QuarkusSecurityIdentity identity = validateAndCreateIdentity(idToken, config,\n+                                    jwt.decode(idToken.getToken()));\n+                            // after a successful refresh, rebuild the identity and update the cookie \n+                            processSuccessfulAuthentication(context, configContext, token, identity);\n+                            cf.complete(identity);\n+                        } else {\n+                            cf.completeExceptionally(new AuthenticationFailedException(result.cause()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcyODE5NQ=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 279}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgyNzA4NQ==", "bodyText": "Not the case here, then ? If the refresh fails we invalidate the cookie and re-start the login flow.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406827085", "createdAt": "2020-04-10T16:10:34Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -298,5 +344,66 @@ private void removeCookie(RoutingContext context, TenantConfigContext configCont\n                 cookie.setPath(auth.cookiePath.get());\n             }\n         }\n+        return cookie;\n+    }\n+\n+    private boolean isLogout(RoutingContext context, TenantConfigContext configContext) {\n+        Optional<String> logoutPath = configContext.oidcConfig.logout.path;\n+\n+        if (logoutPath.isPresent()) {\n+            return context.request().absoluteURI().equals(\n+                    buildUri(context, logoutPath.get()));\n+        }\n+\n+        return false;\n+    }\n+\n+    private SecurityIdentity trySilentRefresh(TenantConfigContext configContext, String idToken, String refreshToken,\n+            RoutingContext context) {\n+        OidcTenantConfig config = configContext.oidcConfig;\n+\n+        if (config.token.refreshTimeout.isPresent()) {\n+            OAuth2AuthProviderImpl auth = ((OAuth2AuthProviderImpl) configContext.auth);\n+            JWT jwt = auth.getJWT();\n+            JsonObject tokenJson;\n+\n+            try {\n+                tokenJson = jwt.decode(idToken);\n+            } catch (Exception cause) {\n+                throw new AuthenticationFailedException(cause);\n+            }\n+\n+            Long iat = tokenJson.getLong(\"iat\");\n+            long now = System.currentTimeMillis() / 1000;\n+            Integer timeout = config.token.refreshTimeout.get();\n+\n+            if (now - iat >= timeout) {\n+                CompletableFuture<SecurityIdentity> cf = new CompletableFuture<>();\n+                OAuth2TokenImpl token = new OAuth2TokenImpl(configContext.auth, new JsonObject());\n+\n+                token.principal().put(\"refresh_token\", refreshToken);\n+\n+                token.refresh(new Handler<AsyncResult<Void>>() {\n+                    @Override\n+                    public void handle(AsyncResult<Void> result) {\n+                        if (result.succeeded()) {\n+                            String rawIdToken = token.principal().getString(\"id_token\");\n+                            IdTokenCredential idToken = new IdTokenCredential(rawIdToken, context);\n+                            QuarkusSecurityIdentity identity = validateAndCreateIdentity(idToken, config,\n+                                    jwt.decode(idToken.getToken()));\n+                            // after a successful refresh, rebuild the identity and update the cookie \n+                            processSuccessfulAuthentication(context, configContext, token, identity);\n+                            cf.complete(identity);\n+                        } else {\n+                            cf.completeExceptionally(new AuthenticationFailedException(result.cause()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcyODE5NQ=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 279}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDI0MjA1OnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjoxNjoyM1rOGD48wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowNjo0OFrOGD5_cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczMTk2OQ==", "bodyText": "Should we just call it logoutEndpoint :-) ?", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406731969", "createdAt": "2020-04-10T12:16:23Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java", "diffHunk": "@@ -171,6 +171,14 @@ public void handle(AsyncResult<OAuth2Auth> event) {\n                 });\n \n                 auth = cf.join();\n+\n+                String endSessionEndpoint = OAuth2AuthProviderImpl.class.cast(auth).getConfig().getLogoutPath();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0OTA0MA==", "bodyText": "I don't really care. This is just the name of the claim from the discovery document.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406749040", "createdAt": "2020-04-10T13:06:48Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java", "diffHunk": "@@ -171,6 +171,14 @@ public void handle(AsyncResult<OAuth2Auth> event) {\n                 });\n \n                 auth = cf.join();\n+\n+                String endSessionEndpoint = OAuth2AuthProviderImpl.class.cast(auth).getConfig().getLogoutPath();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczMTk2OQ=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDI0MjU4OnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjoxNjozOVrOGD49Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDoxNzoxN1rOGD7txw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczMjA1NA==", "bodyText": "OIDCException", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406732054", "createdAt": "2020-04-10T12:16:39Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java", "diffHunk": "@@ -171,6 +171,14 @@ public void handle(AsyncResult<OAuth2Auth> event) {\n                 });\n \n                 auth = cf.join();\n+\n+                String endSessionEndpoint = OAuth2AuthProviderImpl.class.cast(auth).getConfig().getLogoutPath();\n+\n+                if (endSessionEndpoint == null && oidcConfig.logout.path.isPresent()) {\n+                    throw new RuntimeException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0MjE3OQ==", "bodyText": "But if I throw a OIDCException it is going to retry the discovery, right ? I just want to fail fast.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406742179", "createdAt": "2020-04-10T12:47:38Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java", "diffHunk": "@@ -171,6 +171,14 @@ public void handle(AsyncResult<OAuth2Auth> event) {\n                 });\n \n                 auth = cf.join();\n+\n+                String endSessionEndpoint = OAuth2AuthProviderImpl.class.cast(auth).getConfig().getLogoutPath();\n+\n+                if (endSessionEndpoint == null && oidcConfig.logout.path.isPresent()) {\n+                    throw new RuntimeException(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczMjA1NA=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3NzI4Nw==", "bodyText": "Yeah, that is fine", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406777287", "createdAt": "2020-04-10T14:17:17Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java", "diffHunk": "@@ -171,6 +171,14 @@ public void handle(AsyncResult<OAuth2Auth> event) {\n                 });\n \n                 auth = cf.join();\n+\n+                String endSessionEndpoint = OAuth2AuthProviderImpl.class.cast(auth).getConfig().getLogoutPath();\n+\n+                if (endSessionEndpoint == null && oidcConfig.logout.path.isPresent()) {\n+                    throw new RuntimeException(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczMjA1NA=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDI2NTMwOnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjoyNzoyNFrOGD5KbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjo1MDo0OFrOGD5o3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNTQ2OA==", "bodyText": "It is not used as a URI in the code. I also propose to rename the property to something less technical such as  landingPath or postLogoutPath or similar and doc it as Relative path of the application endpoint where the user should be redirected to after the logging out from the OpenID Connect Provider or similar", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406735468", "createdAt": "2020-04-10T12:27:24Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java", "diffHunk": "@@ -119,6 +125,40 @@\n \n     }\n \n+    @ConfigGroup\n+    public static class Logout {\n+\n+        /**\n+         * The logout endpoint at the application. If provided, the application is able to initiate the logout through this\n+         * endpoint in conformance with the OpenID Connect RP-Initiated Logout specification.\n+         */\n+        @ConfigItem\n+        Optional<String> path;\n+\n+        /**\n+         * The {@code URI} to redirect the user after the logging out from the OpenID Connect Provider. This {@code URI} must be\n+         * properly registered at the OpenID Connect Provider as a valid redirect URI.\n+         */\n+        @ConfigItem\n+        Optional<String> redirectUri;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0MzI2Mg==", "bodyText": "Makes sense.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406743262", "createdAt": "2020-04-10T12:50:48Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java", "diffHunk": "@@ -119,6 +125,40 @@\n \n     }\n \n+    @ConfigGroup\n+    public static class Logout {\n+\n+        /**\n+         * The logout endpoint at the application. If provided, the application is able to initiate the logout through this\n+         * endpoint in conformance with the OpenID Connect RP-Initiated Logout specification.\n+         */\n+        @ConfigItem\n+        Optional<String> path;\n+\n+        /**\n+         * The {@code URI} to redirect the user after the logging out from the OpenID Connect Provider. This {@code URI} must be\n+         * properly registered at the OpenID Connect Provider as a valid redirect URI.\n+         */\n+        @ConfigItem\n+        Optional<String> redirectUri;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNTQ2OA=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDI2NzYzOnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjoyODozMlrOGD5L0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjoyODozMlrOGD5L0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNTgyNg==", "bodyText": "Please replace The logout endpoint at the application with something like The relative path of the logout endpoint...", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406735826", "createdAt": "2020-04-10T12:28:32Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java", "diffHunk": "@@ -119,6 +125,40 @@\n \n     }\n \n+    @ConfigGroup\n+    public static class Logout {\n+\n+        /**\n+         * The logout endpoint at the application. If provided, the application is able to initiate the logout through this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDI3MzY1OnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjozMToyMFrOGD5PMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjozMToyMFrOGD5PMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNjY5MA==", "bodyText": "I believe we need to support the OIDCs without the discovery (as we already do with introspectionPath and jwksPath), so adding logoutPath or logoutUri may be (doc-ed as either relative path or relative URI of the OIDC logout) and checking it if no discovery is available would make sense IMHO", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406736690", "createdAt": "2020-04-10T12:31:20Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java", "diffHunk": "@@ -119,6 +125,40 @@\n \n     }\n \n+    @ConfigGroup\n+    public static class Logout {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDI3ODM5OnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjozMzoyNFrOGD5Ryg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTozOToyM1rOGD98WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzM1NA==", "bodyText": "If you agree with the logout_path proposal above, then path should likely be renamed to localPath may be, not 100% sure :-)", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406737354", "createdAt": "2020-04-10T12:33:24Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java", "diffHunk": "@@ -119,6 +125,40 @@\n \n     }\n \n+    @ConfigGroup\n+    public static class Logout {\n+\n+        /**\n+         * The logout endpoint at the application. If provided, the application is able to initiate the logout through this\n+         * endpoint in conformance with the OpenID Connect RP-Initiated Logout specification.\n+         */\n+        @ConfigItem\n+        Optional<String> path;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0Mzg4OQ==", "bodyText": "I'm not sure. The doc change you mentioned is already stating it is a relative path at the application.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406743889", "createdAt": "2020-04-10T12:52:40Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java", "diffHunk": "@@ -119,6 +125,40 @@\n \n     }\n \n+    @ConfigGroup\n+    public static class Logout {\n+\n+        /**\n+         * The logout endpoint at the application. If provided, the application is able to initiate the logout through this\n+         * endpoint in conformance with the OpenID Connect RP-Initiated Logout specification.\n+         */\n+        @ConfigItem\n+        Optional<String> path;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzM1NA=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3ODc3OQ==", "bodyText": "@pedroigor That is fine, lets keep it as path, what about though that property which will let uses manually configure the OIDC logout path ?", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406778779", "createdAt": "2020-04-10T14:20:22Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java", "diffHunk": "@@ -119,6 +125,40 @@\n \n     }\n \n+    @ConfigGroup\n+    public static class Logout {\n+\n+        /**\n+         * The logout endpoint at the application. If provided, the application is able to initiate the logout through this\n+         * endpoint in conformance with the OpenID Connect RP-Initiated Logout specification.\n+         */\n+        @ConfigItem\n+        Optional<String> path;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzM1NA=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc4MTI2OQ==", "bodyText": "If we have for others, sure, let's provide also an option for this one at the same level.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406781269", "createdAt": "2020-04-10T14:25:45Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java", "diffHunk": "@@ -119,6 +125,40 @@\n \n     }\n \n+    @ConfigGroup\n+    public static class Logout {\n+\n+        /**\n+         * The logout endpoint at the application. If provided, the application is able to initiate the logout through this\n+         * endpoint in conformance with the OpenID Connect RP-Initiated Logout specification.\n+         */\n+        @ConfigItem\n+        Optional<String> path;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzM1NA=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxMzc4NQ==", "bodyText": "@pedroigor Sure that would be fine", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406813785", "createdAt": "2020-04-10T15:39:23Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java", "diffHunk": "@@ -119,6 +125,40 @@\n \n     }\n \n+    @ConfigGroup\n+    public static class Logout {\n+\n+        /**\n+         * The logout endpoint at the application. If provided, the application is able to initiate the logout through this\n+         * endpoint in conformance with the OpenID Connect RP-Initiated Logout specification.\n+         */\n+        @ConfigItem\n+        Optional<String> path;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzM1NA=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDI5MzE0OnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjozOTo1M1rOGD5aTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDoyMzoyMVrOGD75Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczOTUzNQ==", "bodyText": "I'd drop the word silent and would not even refer to the logout. If we have an expired ID Token then this refresh timeout will refresh all the token types for web-app applications. I can later use it for the pre-emtive refresh for the service applications too :-)", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406739535", "createdAt": "2020-04-10T12:39:53Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java", "diffHunk": "@@ -475,6 +523,14 @@ public static Token fromAudience(String... audience) {\n         @ConfigItem\n         public Optional<String> principalClaim = Optional.empty();\n \n+        /**\n+         * The time, in seconds, that tokens should be silently refreshed so that tokens with no active session at the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0NDMyNw==", "bodyText": "For service types, it would not work because you don't have a refresh token. Only the bearer.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406744327", "createdAt": "2020-04-10T12:53:51Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java", "diffHunk": "@@ -475,6 +523,14 @@ public static Token fromAudience(String... audience) {\n         @ConfigItem\n         public Optional<String> principalClaim = Optional.empty();\n \n+        /**\n+         * The time, in seconds, that tokens should be silently refreshed so that tokens with no active session at the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczOTUzNQ=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3OTMwMQ==", "bodyText": "Of course, got confused :-)", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406779301", "createdAt": "2020-04-10T14:21:25Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java", "diffHunk": "@@ -475,6 +523,14 @@ public static Token fromAudience(String... audience) {\n         @ConfigItem\n         public Optional<String> principalClaim = Optional.empty();\n \n+        /**\n+         * The time, in seconds, that tokens should be silently refreshed so that tokens with no active session at the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczOTUzNQ=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc4MDE5OQ==", "bodyText": "@pedroigor I'd still remove silent - how else it can be refreshed ? :-) and drop a ref to the logout - we can still use it for the pre-emptive refresh for web-apps to refresh AT and ID tokens", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406780199", "createdAt": "2020-04-10T14:23:21Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java", "diffHunk": "@@ -475,6 +523,14 @@ public static Token fromAudience(String... audience) {\n         @ConfigItem\n         public Optional<String> principalClaim = Optional.empty();\n \n+        /**\n+         * The time, in seconds, that tokens should be silently refreshed so that tokens with no active session at the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczOTUzNQ=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDMwMTAxOnYy", "diffSide": "RIGHT", "path": "integration-tests/oidc-code-flow/src/test/java/io/quarkus/it/keycloak/CodeFlowTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjo0MzowN1rOGD5eqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDo1NzowOFrOGD8zSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0MDY0OA==", "bodyText": "That should be in KeycloakRealmResourceManager ? I see, please introduce a dedicated client id, same as I did for the jwt. though it has not been merget yet :-)", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406740648", "createdAt": "2020-04-10T12:43:07Z", "author": {"login": "sberyozkin"}, "path": "integration-tests/oidc-code-flow/src/test/java/io/quarkus/it/keycloak/CodeFlowTest.java", "diffHunk": "@@ -111,6 +118,67 @@ public void testTokenTimeoutLogout() throws IOException, InterruptedException {\n         }\n     }\n \n+    @Test\n+    public void testRPInitiatedLogout() throws IOException, InterruptedException {\n+        Keycloak keycloak = KeycloakRealmResourceManager.createKeycloakClient();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0NTA0NQ==", "bodyText": "I'm not sure if it is worth doing that as we are updating the realm itself. Realm-level settings. I think tests should be able to change the configuration at Keycloak at their will, like this one. Especially when you have some more dynamic test scenario that depends on changing config.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406745045", "createdAt": "2020-04-10T12:55:42Z", "author": {"login": "pedroigor"}, "path": "integration-tests/oidc-code-flow/src/test/java/io/quarkus/it/keycloak/CodeFlowTest.java", "diffHunk": "@@ -111,6 +118,67 @@ public void testTokenTimeoutLogout() throws IOException, InterruptedException {\n         }\n     }\n \n+    @Test\n+    public void testRPInitiatedLogout() throws IOException, InterruptedException {\n+        Keycloak keycloak = KeycloakRealmResourceManager.createKeycloakClient();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0MDY0OA=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc4MjI1Nw==", "bodyText": "It is not a big deal but it just complicates the actual test a lot, simply creating all what is needed in a dedicated class makes things cleaner a lot.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406782257", "createdAt": "2020-04-10T14:27:59Z", "author": {"login": "sberyozkin"}, "path": "integration-tests/oidc-code-flow/src/test/java/io/quarkus/it/keycloak/CodeFlowTest.java", "diffHunk": "@@ -111,6 +118,67 @@ public void testTokenTimeoutLogout() throws IOException, InterruptedException {\n         }\n     }\n \n+    @Test\n+    public void testRPInitiatedLogout() throws IOException, InterruptedException {\n+        Keycloak keycloak = KeycloakRealmResourceManager.createKeycloakClient();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0MDY0OA=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NTA4Mw==", "bodyText": "OK. Going to update.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406795083", "createdAt": "2020-04-10T14:57:08Z", "author": {"login": "pedroigor"}, "path": "integration-tests/oidc-code-flow/src/test/java/io/quarkus/it/keycloak/CodeFlowTest.java", "diffHunk": "@@ -111,6 +118,67 @@ public void testTokenTimeoutLogout() throws IOException, InterruptedException {\n         }\n     }\n \n+    @Test\n+    public void testRPInitiatedLogout() throws IOException, InterruptedException {\n+        Keycloak keycloak = KeycloakRealmResourceManager.createKeycloakClient();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0MDY0OA=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDMxMDc0OnYy", "diffSide": "RIGHT", "path": "integration-tests/oidc-code-flow/src/test/java/io/quarkus/it/keycloak/KeycloakRealmResourceManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjo0NzoxOFrOGD5kLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjo0NzoxOFrOGD5kLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0MjA2Mg==", "bodyText": "IMHO it would be simpler to keep the realm updates here, see above", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406742062", "createdAt": "2020-04-10T12:47:18Z", "author": {"login": "sberyozkin"}, "path": "integration-tests/oidc-code-flow/src/test/java/io/quarkus/it/keycloak/KeycloakRealmResourceManager.java", "diffHunk": "@@ -34,16 +34,20 @@\n         realm.getUsers().add(createUser(\"admin\", \"user\", \"admin\"));\n         realm.getUsers().add(createUser(\"jdoe\", \"user\", \"confidential\"));\n \n-        keycloak = KeycloakBuilder.builder()\n+        keycloak = createKeycloakClient();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDMxMDc3OnYy", "diffSide": "RIGHT", "path": "integration-tests/oidc-code-flow/src/test/java/io/quarkus/it/keycloak/KeycloakRealmResourceManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjo0NzoxOFrOGD5kMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjo0NzoxOFrOGD5kMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0MjA2Ng==", "bodyText": "IMHO it would be simpler to keep the realm updates here, see above", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406742066", "createdAt": "2020-04-10T12:47:18Z", "author": {"login": "sberyozkin"}, "path": "integration-tests/oidc-code-flow/src/test/java/io/quarkus/it/keycloak/KeycloakRealmResourceManager.java", "diffHunk": "@@ -34,16 +34,20 @@\n         realm.getUsers().add(createUser(\"admin\", \"user\", \"admin\"));\n         realm.getUsers().add(createUser(\"jdoe\", \"user\", \"confidential\"));\n \n-        keycloak = KeycloakBuilder.builder()\n+        keycloak = createKeycloakClient();\n+        keycloak.realms().create(realm);\n+\n+        return Collections.emptyMap();\n+    }\n+\n+    static Keycloak createKeycloakClient() {\n+        return KeycloakBuilder.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDMxMzA4OnYy", "diffSide": "RIGHT", "path": "integration-tests/oidc-code-flow/src/main/resources/application.properties", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjo0ODoxNFrOGD5liQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDoyNTo0OVrOGD79dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0MjQwOQ==", "bodyText": "quarkus-app-logout as a client id would help with the proposed simplifications", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406742409", "createdAt": "2020-04-10T12:48:14Z", "author": {"login": "sberyozkin"}, "path": "integration-tests/oidc-code-flow/src/main/resources/application.properties", "diffHunk": "@@ -44,8 +44,24 @@ quarkus.oidc.tenant-3.authentication.redirect-path=/some/other/path\n quarkus.oidc.tenant-3.authentication.restore-path-after-redirect=false\n quarkus.oidc.tenant-3.application-type=web-app\n \n+quarkus.oidc.tenant-logout.auth-server-url=${keycloak.url}/realms/quarkus\n+quarkus.oidc.tenant-logout.client-id=quarkus-app", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0NTI3Ng==", "bodyText": "It won't work. The changes I need are at the realm. I would need to create a new realm only for this test.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406745276", "createdAt": "2020-04-10T12:56:27Z", "author": {"login": "pedroigor"}, "path": "integration-tests/oidc-code-flow/src/main/resources/application.properties", "diffHunk": "@@ -44,8 +44,24 @@ quarkus.oidc.tenant-3.authentication.redirect-path=/some/other/path\n quarkus.oidc.tenant-3.authentication.restore-path-after-redirect=false\n quarkus.oidc.tenant-3.application-type=web-app\n \n+quarkus.oidc.tenant-logout.auth-server-url=${keycloak.url}/realms/quarkus\n+quarkus.oidc.tenant-logout.client-id=quarkus-app", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0MjQwOQ=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc4MTMwMA==", "bodyText": "@pedroigor so what is the problem with creating a new realm as well ?", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406781300", "createdAt": "2020-04-10T14:25:49Z", "author": {"login": "sberyozkin"}, "path": "integration-tests/oidc-code-flow/src/main/resources/application.properties", "diffHunk": "@@ -44,8 +44,24 @@ quarkus.oidc.tenant-3.authentication.redirect-path=/some/other/path\n quarkus.oidc.tenant-3.authentication.restore-path-after-redirect=false\n quarkus.oidc.tenant-3.application-type=web-app\n \n+quarkus.oidc.tenant-logout.auth-server-url=${keycloak.url}/realms/quarkus\n+quarkus.oidc.tenant-logout.client-id=quarkus-app", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0MjQwOQ=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDMyNDU2OnYy", "diffSide": "RIGHT", "path": "integration-tests/oidc-code-flow/src/test/java/io/quarkus/it/keycloak/CodeFlowTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjo1MzoyOFrOGD5sYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDozMDowM1rOGD8FDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0NDE2Mg==", "bodyText": "What would be really good is to verify idtoken (and also AT at least) has been refreshed. There is a code somewhere in this class which checks the cookie content (disables the auto-redirect and then re-enables - not sure it will be needed yet). So in this test you can record id_token before the refresh and assert it is not the same after the refresh.\nAlso, this is not part of this PR, but there is a timeout test here as well, so please add awaitility there, sorry :-)", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406744162", "createdAt": "2020-04-10T12:53:28Z", "author": {"login": "sberyozkin"}, "path": "integration-tests/oidc-code-flow/src/test/java/io/quarkus/it/keycloak/CodeFlowTest.java", "diffHunk": "@@ -111,6 +118,67 @@ public void testTokenTimeoutLogout() throws IOException, InterruptedException {\n         }\n     }\n \n+    @Test\n+    public void testRPInitiatedLogout() throws IOException, InterruptedException {\n+        Keycloak keycloak = KeycloakRealmResourceManager.createKeycloakClient();\n+\n+        RealmResource realm = keycloak.realm(KeycloakRealmResourceManager.KEYCLOAK_REALM);\n+        RealmRepresentation representation = realm\n+                .toRepresentation();\n+\n+        Integer ssoSessionMaxLifespan = representation.getSsoSessionMaxLifespan();\n+        representation.setSsoSessionMaxLifespan(20);\n+\n+        Integer accessCodeLifespan = representation.getAccessCodeLifespan();\n+        representation.setAccessTokenLifespan(5);\n+\n+        realm.update(representation);\n+\n+        try (final WebClient webClient = createWebClient()) {\n+            HtmlPage page = webClient.getPage(\"http://localhost:8081/tenant-logout\");\n+            assertEquals(\"Log in to quarkus\", page.getTitleText());\n+            HtmlForm loginForm = page.getForms().get(0);\n+            loginForm.getInputByName(\"username\").setValueAttribute(\"alice\");\n+            loginForm.getInputByName(\"password\").setValueAttribute(\"alice\");\n+            page = loginForm.getInputByName(\"login\").click();\n+            assertTrue(page.asText().contains(\"Tenant Logout\"));\n+            assertNotNull(getSessionCookie(webClient));\n+\n+            page = webClient.getPage(\"http://localhost:8081/tenant-logout/logout\");\n+            assertTrue(page.asText().contains(\"You were logged out\"));\n+            assertNull(getSessionCookie(webClient));\n+\n+            page = webClient.getPage(\"http://localhost:8081/tenant-logout\");\n+            assertEquals(\"Log in to quarkus\", page.getTitleText());\n+            loginForm = page.getForms().get(0);\n+            loginForm.getInputByName(\"username\").setValueAttribute(\"alice\");\n+            loginForm.getInputByName(\"password\").setValueAttribute(\"alice\");\n+            page = loginForm.getInputByName(\"login\").click();\n+            assertTrue(page.asText().contains(\"Tenant Logout\"));\n+\n+            //wait now so that we reach the refresh timeout\n+            await().atMost(10, TimeUnit.SECONDS)\n+                    .pollInterval(Duration.ofSeconds(5))\n+                    .until(new Callable<Boolean>() {\n+                        @Override\n+                        public Boolean call() throws Exception {\n+                            webClient.getOptions().setRedirectEnabled(false);\n+                            WebResponse webResponse = webClient\n+                                    .loadWebResponse(new WebRequest(URI.create(\"http://localhost:8081/tenant-logout\").toURL()));\n+                            // Should not redirect to OP but silently refresh token", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0NTU4MA==", "bodyText": "I'm already using awaitility, no ?", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406745580", "createdAt": "2020-04-10T12:57:22Z", "author": {"login": "pedroigor"}, "path": "integration-tests/oidc-code-flow/src/test/java/io/quarkus/it/keycloak/CodeFlowTest.java", "diffHunk": "@@ -111,6 +118,67 @@ public void testTokenTimeoutLogout() throws IOException, InterruptedException {\n         }\n     }\n \n+    @Test\n+    public void testRPInitiatedLogout() throws IOException, InterruptedException {\n+        Keycloak keycloak = KeycloakRealmResourceManager.createKeycloakClient();\n+\n+        RealmResource realm = keycloak.realm(KeycloakRealmResourceManager.KEYCLOAK_REALM);\n+        RealmRepresentation representation = realm\n+                .toRepresentation();\n+\n+        Integer ssoSessionMaxLifespan = representation.getSsoSessionMaxLifespan();\n+        representation.setSsoSessionMaxLifespan(20);\n+\n+        Integer accessCodeLifespan = representation.getAccessCodeLifespan();\n+        representation.setAccessTokenLifespan(5);\n+\n+        realm.update(representation);\n+\n+        try (final WebClient webClient = createWebClient()) {\n+            HtmlPage page = webClient.getPage(\"http://localhost:8081/tenant-logout\");\n+            assertEquals(\"Log in to quarkus\", page.getTitleText());\n+            HtmlForm loginForm = page.getForms().get(0);\n+            loginForm.getInputByName(\"username\").setValueAttribute(\"alice\");\n+            loginForm.getInputByName(\"password\").setValueAttribute(\"alice\");\n+            page = loginForm.getInputByName(\"login\").click();\n+            assertTrue(page.asText().contains(\"Tenant Logout\"));\n+            assertNotNull(getSessionCookie(webClient));\n+\n+            page = webClient.getPage(\"http://localhost:8081/tenant-logout/logout\");\n+            assertTrue(page.asText().contains(\"You were logged out\"));\n+            assertNull(getSessionCookie(webClient));\n+\n+            page = webClient.getPage(\"http://localhost:8081/tenant-logout\");\n+            assertEquals(\"Log in to quarkus\", page.getTitleText());\n+            loginForm = page.getForms().get(0);\n+            loginForm.getInputByName(\"username\").setValueAttribute(\"alice\");\n+            loginForm.getInputByName(\"password\").setValueAttribute(\"alice\");\n+            page = loginForm.getInputByName(\"login\").click();\n+            assertTrue(page.asText().contains(\"Tenant Logout\"));\n+\n+            //wait now so that we reach the refresh timeout\n+            await().atMost(10, TimeUnit.SECONDS)\n+                    .pollInterval(Duration.ofSeconds(5))\n+                    .until(new Callable<Boolean>() {\n+                        @Override\n+                        public Boolean call() throws Exception {\n+                            webClient.getOptions().setRedirectEnabled(false);\n+                            WebResponse webResponse = webClient\n+                                    .loadWebResponse(new WebRequest(URI.create(\"http://localhost:8081/tenant-logout\").toURL()));\n+                            // Should not redirect to OP but silently refresh token", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0NDE2Mg=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc4MzI0Nw==", "bodyText": "@pedroigor Sorry, there is an existing test there testTimeout I think which uses wait(10).\nAnd verifying the id token value is not the same would be good", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406783247", "createdAt": "2020-04-10T14:30:03Z", "author": {"login": "sberyozkin"}, "path": "integration-tests/oidc-code-flow/src/test/java/io/quarkus/it/keycloak/CodeFlowTest.java", "diffHunk": "@@ -111,6 +118,67 @@ public void testTokenTimeoutLogout() throws IOException, InterruptedException {\n         }\n     }\n \n+    @Test\n+    public void testRPInitiatedLogout() throws IOException, InterruptedException {\n+        Keycloak keycloak = KeycloakRealmResourceManager.createKeycloakClient();\n+\n+        RealmResource realm = keycloak.realm(KeycloakRealmResourceManager.KEYCLOAK_REALM);\n+        RealmRepresentation representation = realm\n+                .toRepresentation();\n+\n+        Integer ssoSessionMaxLifespan = representation.getSsoSessionMaxLifespan();\n+        representation.setSsoSessionMaxLifespan(20);\n+\n+        Integer accessCodeLifespan = representation.getAccessCodeLifespan();\n+        representation.setAccessTokenLifespan(5);\n+\n+        realm.update(representation);\n+\n+        try (final WebClient webClient = createWebClient()) {\n+            HtmlPage page = webClient.getPage(\"http://localhost:8081/tenant-logout\");\n+            assertEquals(\"Log in to quarkus\", page.getTitleText());\n+            HtmlForm loginForm = page.getForms().get(0);\n+            loginForm.getInputByName(\"username\").setValueAttribute(\"alice\");\n+            loginForm.getInputByName(\"password\").setValueAttribute(\"alice\");\n+            page = loginForm.getInputByName(\"login\").click();\n+            assertTrue(page.asText().contains(\"Tenant Logout\"));\n+            assertNotNull(getSessionCookie(webClient));\n+\n+            page = webClient.getPage(\"http://localhost:8081/tenant-logout/logout\");\n+            assertTrue(page.asText().contains(\"You were logged out\"));\n+            assertNull(getSessionCookie(webClient));\n+\n+            page = webClient.getPage(\"http://localhost:8081/tenant-logout\");\n+            assertEquals(\"Log in to quarkus\", page.getTitleText());\n+            loginForm = page.getForms().get(0);\n+            loginForm.getInputByName(\"username\").setValueAttribute(\"alice\");\n+            loginForm.getInputByName(\"password\").setValueAttribute(\"alice\");\n+            page = loginForm.getInputByName(\"login\").click();\n+            assertTrue(page.asText().contains(\"Tenant Logout\"));\n+\n+            //wait now so that we reach the refresh timeout\n+            await().atMost(10, TimeUnit.SECONDS)\n+                    .pollInterval(Duration.ofSeconds(5))\n+                    .until(new Callable<Boolean>() {\n+                        @Override\n+                        public Boolean call() throws Exception {\n+                            webClient.getOptions().setRedirectEnabled(false);\n+                            WebResponse webResponse = webClient\n+                                    .loadWebResponse(new WebRequest(URI.create(\"http://localhost:8081/tenant-logout\").toURL()));\n+                            // Should not redirect to OP but silently refresh token", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0NDE2Mg=="}, "originalCommit": {"oid": "af1c474e6be13e90cb65a2156ac4588f03c7df5d"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDUzMTkzOnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDoxMzoxOVrOGD7nUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTo0NjoyN1rOGD-IQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3NTYzNQ==", "bodyText": "What is this refreshingTokens about, why would we want to have this cache ?", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406775635", "createdAt": "2020-04-10T14:13:19Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -298,5 +352,74 @@ private void removeCookie(RoutingContext context, TenantConfigContext configCont\n                 cookie.setPath(auth.cookiePath.get());\n             }\n         }\n+        return cookie;\n+    }\n+\n+    private boolean isLogout(RoutingContext context, TenantConfigContext configContext) {\n+        Optional<String> logoutPath = configContext.oidcConfig.logout.path;\n+\n+        if (logoutPath.isPresent()) {\n+            return context.request().absoluteURI().equals(\n+                    buildUri(context, logoutPath.get()));\n+        }\n+\n+        return false;\n+    }\n+\n+    private SecurityIdentity trySilentRefresh(TenantConfigContext configContext, String idToken, String refreshToken,\n+            RoutingContext context) {\n+        OidcTenantConfig config = configContext.oidcConfig;\n+\n+        if (config.token.refreshTimeout.isPresent()) {\n+            OAuth2AuthProviderImpl auth = ((OAuth2AuthProviderImpl) configContext.auth);\n+            JWT jwt = auth.getJWT();\n+            JsonObject tokenJson;\n+\n+            try {\n+                tokenJson = jwt.decode(idToken);\n+            } catch (Exception cause) {\n+                throw new AuthenticationCompletionException(cause);\n+            }\n+\n+            Long iat = tokenJson.getLong(\"iat\");\n+            long now = System.currentTimeMillis() / 1000;\n+            Integer timeout = config.token.refreshTimeout.get();\n+\n+            if (now - iat >= timeout) {\n+                try {\n+                    if (!refreshingTokens.add(refreshToken)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fca62d107d55e343cda45e820b6c58ee9ff3c09d"}, "originalPosition": 303}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3Njg5Mg==", "bodyText": "Suppose you have the same user coming from different concurrent threads. This code tries to fail-fast for the last thread that tries to refresh the token if it is already happening.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406776892", "createdAt": "2020-04-10T14:16:16Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -298,5 +352,74 @@ private void removeCookie(RoutingContext context, TenantConfigContext configCont\n                 cookie.setPath(auth.cookiePath.get());\n             }\n         }\n+        return cookie;\n+    }\n+\n+    private boolean isLogout(RoutingContext context, TenantConfigContext configContext) {\n+        Optional<String> logoutPath = configContext.oidcConfig.logout.path;\n+\n+        if (logoutPath.isPresent()) {\n+            return context.request().absoluteURI().equals(\n+                    buildUri(context, logoutPath.get()));\n+        }\n+\n+        return false;\n+    }\n+\n+    private SecurityIdentity trySilentRefresh(TenantConfigContext configContext, String idToken, String refreshToken,\n+            RoutingContext context) {\n+        OidcTenantConfig config = configContext.oidcConfig;\n+\n+        if (config.token.refreshTimeout.isPresent()) {\n+            OAuth2AuthProviderImpl auth = ((OAuth2AuthProviderImpl) configContext.auth);\n+            JWT jwt = auth.getJWT();\n+            JsonObject tokenJson;\n+\n+            try {\n+                tokenJson = jwt.decode(idToken);\n+            } catch (Exception cause) {\n+                throw new AuthenticationCompletionException(cause);\n+            }\n+\n+            Long iat = tokenJson.getLong(\"iat\");\n+            long now = System.currentTimeMillis() / 1000;\n+            Integer timeout = config.token.refreshTimeout.get();\n+\n+            if (now - iat >= timeout) {\n+                try {\n+                    if (!refreshingTokens.add(refreshToken)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3NTYzNQ=="}, "originalCommit": {"oid": "fca62d107d55e343cda45e820b6c58ee9ff3c09d"}, "originalPosition": 303}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5ODc5NA==", "bodyText": "Hey, thanks, but IMHO it is not really preventive enough. It is recommended as a good practice to recycle the refresh tokens themselves as part of the RT grant (I'm def aware of such a practice :-) ), so what may happen is that a new RT is returned and we may end adding here that new token to this set while the other concurrent thread is already operating with the stale RT.\nI don't know how to resolve it right but this cache can cause the problem IMHO.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406798794", "createdAt": "2020-04-10T15:05:32Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -298,5 +352,74 @@ private void removeCookie(RoutingContext context, TenantConfigContext configCont\n                 cookie.setPath(auth.cookiePath.get());\n             }\n         }\n+        return cookie;\n+    }\n+\n+    private boolean isLogout(RoutingContext context, TenantConfigContext configContext) {\n+        Optional<String> logoutPath = configContext.oidcConfig.logout.path;\n+\n+        if (logoutPath.isPresent()) {\n+            return context.request().absoluteURI().equals(\n+                    buildUri(context, logoutPath.get()));\n+        }\n+\n+        return false;\n+    }\n+\n+    private SecurityIdentity trySilentRefresh(TenantConfigContext configContext, String idToken, String refreshToken,\n+            RoutingContext context) {\n+        OidcTenantConfig config = configContext.oidcConfig;\n+\n+        if (config.token.refreshTimeout.isPresent()) {\n+            OAuth2AuthProviderImpl auth = ((OAuth2AuthProviderImpl) configContext.auth);\n+            JWT jwt = auth.getJWT();\n+            JsonObject tokenJson;\n+\n+            try {\n+                tokenJson = jwt.decode(idToken);\n+            } catch (Exception cause) {\n+                throw new AuthenticationCompletionException(cause);\n+            }\n+\n+            Long iat = tokenJson.getLong(\"iat\");\n+            long now = System.currentTimeMillis() / 1000;\n+            Integer timeout = config.token.refreshTimeout.get();\n+\n+            if (now - iat >= timeout) {\n+                try {\n+                    if (!refreshingTokens.add(refreshToken)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3NTYzNQ=="}, "originalCommit": {"oid": "fca62d107d55e343cda45e820b6c58ee9ff3c09d"}, "originalPosition": 303}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5OTM4Nw==", "bodyText": "There is one thing though that I need to check. The refresh is a blocking operation, so I need to make sure it does not run in the IO Thread. Currently, we only run blocking if the tenant is not yet resolved, so we need to advertise somehow the OidcIdentityProvider or move the runblocking logic to the authentication mechanisms.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406799387", "createdAt": "2020-04-10T15:07:02Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -298,5 +352,74 @@ private void removeCookie(RoutingContext context, TenantConfigContext configCont\n                 cookie.setPath(auth.cookiePath.get());\n             }\n         }\n+        return cookie;\n+    }\n+\n+    private boolean isLogout(RoutingContext context, TenantConfigContext configContext) {\n+        Optional<String> logoutPath = configContext.oidcConfig.logout.path;\n+\n+        if (logoutPath.isPresent()) {\n+            return context.request().absoluteURI().equals(\n+                    buildUri(context, logoutPath.get()));\n+        }\n+\n+        return false;\n+    }\n+\n+    private SecurityIdentity trySilentRefresh(TenantConfigContext configContext, String idToken, String refreshToken,\n+            RoutingContext context) {\n+        OidcTenantConfig config = configContext.oidcConfig;\n+\n+        if (config.token.refreshTimeout.isPresent()) {\n+            OAuth2AuthProviderImpl auth = ((OAuth2AuthProviderImpl) configContext.auth);\n+            JWT jwt = auth.getJWT();\n+            JsonObject tokenJson;\n+\n+            try {\n+                tokenJson = jwt.decode(idToken);\n+            } catch (Exception cause) {\n+                throw new AuthenticationCompletionException(cause);\n+            }\n+\n+            Long iat = tokenJson.getLong(\"iat\");\n+            long now = System.currentTimeMillis() / 1000;\n+            Integer timeout = config.token.refreshTimeout.get();\n+\n+            if (now - iat >= timeout) {\n+                try {\n+                    if (!refreshingTokens.add(refreshToken)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3NTYzNQ=="}, "originalCommit": {"oid": "fca62d107d55e343cda45e820b6c58ee9ff3c09d"}, "originalPosition": 303}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgwMzIwMg==", "bodyText": "I'm not following. I think you are talking about refresh token rotation ? So that you get a new one every time you refresh tokens ?\nHow would you add the new token if it was not yet sent to the browser?", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406803202", "createdAt": "2020-04-10T15:15:33Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -298,5 +352,74 @@ private void removeCookie(RoutingContext context, TenantConfigContext configCont\n                 cookie.setPath(auth.cookiePath.get());\n             }\n         }\n+        return cookie;\n+    }\n+\n+    private boolean isLogout(RoutingContext context, TenantConfigContext configContext) {\n+        Optional<String> logoutPath = configContext.oidcConfig.logout.path;\n+\n+        if (logoutPath.isPresent()) {\n+            return context.request().absoluteURI().equals(\n+                    buildUri(context, logoutPath.get()));\n+        }\n+\n+        return false;\n+    }\n+\n+    private SecurityIdentity trySilentRefresh(TenantConfigContext configContext, String idToken, String refreshToken,\n+            RoutingContext context) {\n+        OidcTenantConfig config = configContext.oidcConfig;\n+\n+        if (config.token.refreshTimeout.isPresent()) {\n+            OAuth2AuthProviderImpl auth = ((OAuth2AuthProviderImpl) configContext.auth);\n+            JWT jwt = auth.getJWT();\n+            JsonObject tokenJson;\n+\n+            try {\n+                tokenJson = jwt.decode(idToken);\n+            } catch (Exception cause) {\n+                throw new AuthenticationCompletionException(cause);\n+            }\n+\n+            Long iat = tokenJson.getLong(\"iat\");\n+            long now = System.currentTimeMillis() / 1000;\n+            Integer timeout = config.token.refreshTimeout.get();\n+\n+            if (now - iat >= timeout) {\n+                try {\n+                    if (!refreshingTokens.add(refreshToken)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3NTYzNQ=="}, "originalCommit": {"oid": "fca62d107d55e343cda45e820b6c58ee9ff3c09d"}, "originalPosition": 303}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxMzM1NQ==", "bodyText": "@pedroigor may be indeed do it there pre-emptively, in CodeAuthenticationMechansim", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406813355", "createdAt": "2020-04-10T15:38:27Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -298,5 +352,74 @@ private void removeCookie(RoutingContext context, TenantConfigContext configCont\n                 cookie.setPath(auth.cookiePath.get());\n             }\n         }\n+        return cookie;\n+    }\n+\n+    private boolean isLogout(RoutingContext context, TenantConfigContext configContext) {\n+        Optional<String> logoutPath = configContext.oidcConfig.logout.path;\n+\n+        if (logoutPath.isPresent()) {\n+            return context.request().absoluteURI().equals(\n+                    buildUri(context, logoutPath.get()));\n+        }\n+\n+        return false;\n+    }\n+\n+    private SecurityIdentity trySilentRefresh(TenantConfigContext configContext, String idToken, String refreshToken,\n+            RoutingContext context) {\n+        OidcTenantConfig config = configContext.oidcConfig;\n+\n+        if (config.token.refreshTimeout.isPresent()) {\n+            OAuth2AuthProviderImpl auth = ((OAuth2AuthProviderImpl) configContext.auth);\n+            JWT jwt = auth.getJWT();\n+            JsonObject tokenJson;\n+\n+            try {\n+                tokenJson = jwt.decode(idToken);\n+            } catch (Exception cause) {\n+                throw new AuthenticationCompletionException(cause);\n+            }\n+\n+            Long iat = tokenJson.getLong(\"iat\");\n+            long now = System.currentTimeMillis() / 1000;\n+            Integer timeout = config.token.refreshTimeout.get();\n+\n+            if (now - iat >= timeout) {\n+                try {\n+                    if (!refreshingTokens.add(refreshToken)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3NTYzNQ=="}, "originalCommit": {"oid": "fca62d107d55e343cda45e820b6c58ee9ff3c09d"}, "originalPosition": 303}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxNjgzNQ==", "bodyText": "I've also changed to use a bounded map so that we put a limit on how many refresh tokens we can handle simultaneously. Otherwise, we may have issues ...\nI agree, maybe we can do the runblocking stuff there ...", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406816835", "createdAt": "2020-04-10T15:46:27Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -298,5 +352,74 @@ private void removeCookie(RoutingContext context, TenantConfigContext configCont\n                 cookie.setPath(auth.cookiePath.get());\n             }\n         }\n+        return cookie;\n+    }\n+\n+    private boolean isLogout(RoutingContext context, TenantConfigContext configContext) {\n+        Optional<String> logoutPath = configContext.oidcConfig.logout.path;\n+\n+        if (logoutPath.isPresent()) {\n+            return context.request().absoluteURI().equals(\n+                    buildUri(context, logoutPath.get()));\n+        }\n+\n+        return false;\n+    }\n+\n+    private SecurityIdentity trySilentRefresh(TenantConfigContext configContext, String idToken, String refreshToken,\n+            RoutingContext context) {\n+        OidcTenantConfig config = configContext.oidcConfig;\n+\n+        if (config.token.refreshTimeout.isPresent()) {\n+            OAuth2AuthProviderImpl auth = ((OAuth2AuthProviderImpl) configContext.auth);\n+            JWT jwt = auth.getJWT();\n+            JsonObject tokenJson;\n+\n+            try {\n+                tokenJson = jwt.decode(idToken);\n+            } catch (Exception cause) {\n+                throw new AuthenticationCompletionException(cause);\n+            }\n+\n+            Long iat = tokenJson.getLong(\"iat\");\n+            long now = System.currentTimeMillis() / 1000;\n+            Integer timeout = config.token.refreshTimeout.get();\n+\n+            if (now - iat >= timeout) {\n+                try {\n+                    if (!refreshingTokens.add(refreshToken)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3NTYzNQ=="}, "originalCommit": {"oid": "fca62d107d55e343cda45e820b6c58ee9ff3c09d"}, "originalPosition": 303}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDg5MDczOnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "isResolved": false, "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjoyMDoxM1rOGD_AFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMjozNzo0MVrOGE3s3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMTEyNw==", "bodyText": "Hi Pedro @pedroigor That looks safer but I'm really not sure it is the right solution as it still does not resolve the issue that the RT can be recycled so this map may not really be reflecting the current status. IMHO we may need to give it a bit more thinking.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406831127", "createdAt": "2020-04-10T16:20:13Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,35 +72,82 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n+    /**\n+     * A bounded map that limits the number of refresh tokens we can process concurrently\n+     */\n+    private final Map<String, String> refreshingTokens = Collections", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "542ad49dc1f9d44ef36e8842f989f6a8e3866816"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2OTAyNQ==", "bodyText": "I would appreciate it if you could give more details how that can happen. I did test this using refresh token rotation and multiple threads trying to refresh. That should make more clear what you are trying to saying ...\nMaybe an improvement we can make is to avoid failing fast for the last thread and block only threads that are associated with the refresh token being refreshed. We could do that by synchronizing the entry corresponding to the refresh token.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r406869025", "createdAt": "2020-04-10T17:50:14Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,35 +72,82 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n+    /**\n+     * A bounded map that limits the number of refresh tokens we can process concurrently\n+     */\n+    private final Map<String, String> refreshingTokens = Collections", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMTEyNw=="}, "originalCommit": {"oid": "542ad49dc1f9d44ef36e8842f989f6a8e3866816"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4NDg2MA==", "bodyText": "@pedroigor I thought this map was about ensuring that multiple threads representing the same user do not refresh and with the RT recycling some faster threads can do it by the time the slower ones attempt to refresh ?\nActually, sorry for being slow :-), but can you explain again what do we want to prevent and why with this map ?\nAll that synchronization seems a bit too much given that IMHO the refresh is not really a logout request related", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407084860", "createdAt": "2020-04-11T16:47:48Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,35 +72,82 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n+    /**\n+     * A bounded map that limits the number of refresh tokens we can process concurrently\n+     */\n+    private final Map<String, String> refreshingTokens = Collections", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMTEyNw=="}, "originalCommit": {"oid": "542ad49dc1f9d44ef36e8842f989f6a8e3866816"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ0MDgwNQ==", "bodyText": "We want to prevent concurrent requests from a same subject from failing if one of them is already refreshing a token. Thus providing a more consistent behavior.\nIn addition to that, we also make refresh token requests to the OP more consistent, always using the latest RT. It should cover nicely cases when you are using refresh token rotation too (see tests).\nIt is not 100% related to logout but it is part of the solution. It helps a lot when we want the application in sync with sessions at the OP. So those local sessions are immediately invalidated when no active session exists at the OP. Without refreshing tokens, in a consistent manner, we will continue to rely on token expiration. What is something we want to improve.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407440805", "createdAt": "2020-04-13T11:43:43Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,35 +72,82 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n+    /**\n+     * A bounded map that limits the number of refresh tokens we can process concurrently\n+     */\n+    private final Map<String, String> refreshingTokens = Collections", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMTEyNw=="}, "originalCommit": {"oid": "542ad49dc1f9d44ef36e8842f989f6a8e3866816"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ0NDY1Nw==", "bodyText": "Btw, we recently had a similar issue reported in Keycloak about this problem. There we did a similar fix but only for stateful applications (using sessions). Please, consider this as a defensive barrier for potential issues and a safer approach for refreshing tokens.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407444657", "createdAt": "2020-04-13T11:56:36Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,35 +72,82 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n+    /**\n+     * A bounded map that limits the number of refresh tokens we can process concurrently\n+     */\n+    private final Map<String, String> refreshingTokens = Collections", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMTEyNw=="}, "originalCommit": {"oid": "542ad49dc1f9d44ef36e8842f989f6a8e3866816"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUzODA5NQ==", "bodyText": "@pedroigor Refreshing the token to extend the ID token lifetime is related to the user session, indeed, but processing the user logout request is an orthogonal operation in its own way. For example, you could've had a refresh support PR without even dealing the PR initiated logout. Logout is about the user requesting to end the session, the refresh is exactly opposite :-).\n\nWithout refreshing tokens, in a consistent manner, we will continue to rely on token expiration\n\nI'm sorry I don't follow it. We can't just refresh the tokens which have failed the signature verification but only those which have expired, I'm sorry, I know I sound as a broken record :-)\n\nWe want to prevent concurrent requests from a same subject from failing if one of them is already refreshing a token. Thus providing a more consistent behavior.\n\nSo if we have N concurrent requests with sub=1 then there  will be N requests to refresh going to OP, but not in parallel, one after another, correct ? But can many users who currently sit in front of the browser have the same sub ? Where else the concurrency with the same sub can come from ? If it is the same user pressing something multiple times then why have N refresh operations ?\nPedro, sorry, it is just important for me to understand all the subtleties involved and minimize the extra complexities if possible, thanks for the patience :-)", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407538095", "createdAt": "2020-04-13T15:27:23Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,35 +72,82 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n+    /**\n+     * A bounded map that limits the number of refresh tokens we can process concurrently\n+     */\n+    private final Map<String, String> refreshingTokens = Collections", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMTEyNw=="}, "originalCommit": {"oid": "542ad49dc1f9d44ef36e8842f989f6a8e3866816"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUzOTgwNA==", "bodyText": "Sure. I'm not quite following then what you are proposing here. Do you want to remove token refresh and deal with it as a separate issue?", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407539804", "createdAt": "2020-04-13T15:30:30Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,35 +72,82 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n+    /**\n+     * A bounded map that limits the number of refresh tokens we can process concurrently\n+     */\n+    private final Map<String, String> refreshingTokens = Collections", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMTEyNw=="}, "originalCommit": {"oid": "542ad49dc1f9d44ef36e8842f989f6a8e3866816"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYwMTk1NQ==", "bodyText": "@pedroigor\n\nDo you want to remove token refresh and deal with it as a separate issue?\n\nNo, you've already spent the time on it :-) and it is a very useful thing to have :-). My point has been that refresh should be done only when the token has expired and it is orthogonal in principle to the user logout request IMHO (i.e, I'm just asking for a few simple changes, 1. check the exception is related to the expiry before a refresh, and 2) check the logout only inside the successful authentication code branch). Only 2 updates :-) (and may be 1 or 2 more later :-) ).\nI have also asked to explain more about the whole concurrency and refresh case. It is probably all that needs to be finalized (I'm not counting some very simple doc updates etc :-))\nCheers !", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407601955", "createdAt": "2020-04-13T17:25:09Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,35 +72,82 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n+    /**\n+     * A bounded map that limits the number of refresh tokens we can process concurrently\n+     */\n+    private final Map<String, String> refreshingTokens = Collections", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMTEyNw=="}, "originalCommit": {"oid": "542ad49dc1f9d44ef36e8842f989f6a8e3866816"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMjMxMw==", "bodyText": "No problem. Very important concerns.\nRegarding #1. The check for the only refresh on token expiration is OK. As we discussed in another comment.\nRegarding #2. This already happening, right ? Note that refresh only happens if the user already has a session cookie (user potentially authenticated) and if the validation fails due to token expiration (today any exception, but will fix as per #1).\nRegarding your questions about the concurrency and refresh case. See the test testRPInitiatedLogoutSuccessFullConcurrentRequests. It is basically about protecting our code from multiple concurrent requests comming (for whatever reason) and failing.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407622313", "createdAt": "2020-04-13T18:00:58Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,35 +72,82 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n+    /**\n+     * A bounded map that limits the number of refresh tokens we can process concurrently\n+     */\n+    private final Map<String, String> refreshingTokens = Collections", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMTEyNw=="}, "originalCommit": {"oid": "542ad49dc1f9d44ef36e8842f989f6a8e3866816"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYzMDc3Mg==", "bodyText": "@sberyozkin But again, although not 100% related, the refresh logic is important to make sure we have a consistent logout experience, in sync with sessions at the OP. It is not only about refresh tokens, although it can later be used to support more capabilities not specific to the logout. For instance, allow applications to define a period that tokens should be updated so that the token reflects the latest changes made to an identity (roles, attributes, etc).", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407630772", "createdAt": "2020-04-13T18:16:43Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,35 +72,82 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n+    /**\n+     * A bounded map that limits the number of refresh tokens we can process concurrently\n+     */\n+    private final Map<String, String> refreshingTokens = Collections", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMTEyNw=="}, "originalCommit": {"oid": "542ad49dc1f9d44ef36e8842f989f6a8e3866816"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcwNjk3Mw==", "bodyText": "@pedroigor Hey Pedro, I'm sorry, I don't understand why we want to refresh a token (=> extend the session) when the user wants to get out out of the session with the logout request.\n\nIt is basically about protecting our code from multiple concurrent requests comming for whatever reason) and failing.\n\nOK - can you clarify please, how many refresh requests will be sent to OIDC in this case ?\nThanks", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407706973", "createdAt": "2020-04-13T20:39:17Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,35 +72,82 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n+    /**\n+     * A bounded map that limits the number of refresh tokens we can process concurrently\n+     */\n+    private final Map<String, String> refreshingTokens = Collections", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMTEyNw=="}, "originalCommit": {"oid": "542ad49dc1f9d44ef36e8842f989f6a8e3866816"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcxMzczMw==", "bodyText": "I'm not saying we want to extend the session for logout. But that in the future we may want to support updating the tokens while sessions are still active at the OP.\nI can't predict how many requests, it depends on the application usage and load. But we should be protected.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407713733", "createdAt": "2020-04-13T20:51:59Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,35 +72,82 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n+    /**\n+     * A bounded map that limits the number of refresh tokens we can process concurrently\n+     */\n+    private final Map<String, String> refreshingTokens = Collections", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMTEyNw=="}, "originalCommit": {"oid": "542ad49dc1f9d44ef36e8842f989f6a8e3866816"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczMjk3MQ==", "bodyText": "@pedroigor OK, so we are moving along, this map ensures that for a given subject, when the refresh is done, quarkus-oidc will send 1 request at a time, i.e, N concurrent requests come in, and then N sequential requests will go out. So my earlier question was, can we have a single refresh request for these N concurrent requests ? I don't know, some subject specific refresh lock ?\nI think I still missing something. What my problem is is that there is a code as part of this PR whose purpose I can't clearly explain to the users, the only thing I can tell them - it is just good, it is to control the concurrent RT requests, without any further clues. So this is why I'm asking the very specific questions. When such a concurrent flow can happen that the same 'sub' is involved ? Why do we have to refresh for every such concurrent request as opposed to failing on all but the initial refresh ? All I'm looking for is for the clarity", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407732971", "createdAt": "2020-04-13T21:30:06Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,35 +72,82 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n+    /**\n+     * A bounded map that limits the number of refresh tokens we can process concurrently\n+     */\n+    private final Map<String, String> refreshingTokens = Collections", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMTEyNw=="}, "originalCommit": {"oid": "542ad49dc1f9d44ef36e8842f989f6a8e3866816"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc2MDA5Mw==", "bodyText": "If you just remove the code that do that and run the test I've added, you'll se what is going to happen when you get concurrent requests.\nYou can have concurrent requests for a number of reasons, even if just bloating the server in a test scenario. Regardless of the situation we should be protected and that is what the code does.\nUsers just need to worry about the refresh period and rely on us to properly manage their requests so that they don't fail, even if making them at the same time for whatever reason.\nUsers also just need to know that we keep local sessions in sync with the active sessions at the OP. So that once the session at the OP is invalidated we also invalidate the local session. That is what this code is all about.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407760093", "createdAt": "2020-04-13T22:37:41Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -59,35 +72,82 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public CompletionStage<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n+    /**\n+     * A bounded map that limits the number of refresh tokens we can process concurrently\n+     */\n+    private final Map<String, String> refreshingTokens = Collections", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMTEyNw=="}, "originalCommit": {"oid": "542ad49dc1f9d44ef36e8842f989f6a8e3866816"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjcwNzAyOnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNzowNzo0M1rOGEOnJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxODowNDoyNVrOGEvZ2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4Njg4NQ==", "bodyText": "@pedroigor That is different to what was done about the logout earlier where a challenge was attempted with a valid identity only. IMHO the refresh can only be attempted if the token has expired, which can happen on any other request, so IMHO your original flow should be restored (the logout request initiates a challenge flow only if the identity is available) and again, please just check if \"Token has expired\".equals(throwable.getMessage()) :-), please check Vertx OAuth2 JWT class for the exact message text", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407086885", "createdAt": "2020-04-11T17:07:43Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -61,23 +70,63 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public Uni<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n+    /**\n+     * A bounded map that limits the number of refresh tokens we can process concurrently\n+     */\n+    private final Map<String, TokenEntry> refreshingTokens = Collections\n+            .synchronizedMap(new LinkedHashMap<String, TokenEntry>(16, 0.75f, true) {\n+                @Override\n+                protected boolean removeEldestEntry(Map.Entry eldest) {\n+                    // we could make the max number of entries configurable\n+                    return size() > 30;\n+                }\n+            });\n+\n     public Uni<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n             return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n                     .map(new Function<SecurityIdentity, SecurityIdentity>() {\n                         @Override\n-                        public SecurityIdentity apply(SecurityIdentity securityIdentity) {\n-                            return augmentIdentity(securityIdentity, tokens[1], tokens[2], context);\n+                        public SecurityIdentity apply(SecurityIdentity identity) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            return augmentIdentity(identity, accessToken, refreshToken, context);\n+                        }\n+                    }).on().failure().recoverWithItem(new Function<Throwable, SecurityIdentity>() {\n+                        @Override\n+                        public SecurityIdentity apply(Throwable throwable) {\n+                            SecurityIdentity identity;\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (isLogout(context, configContext) ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a659a9b09840c531124c051f19cc442f209d50"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNzI3Ng==", "bodyText": "I was thinking more about it, so yes, IMHO, the token refresh should be treated on its own, since the logout request, like any other request to the secured endpoint, should be authenticated first. Next, if the token is valid, and it is a logout, then we initiate a logout flow. If the token verification fails due to the token being expired then we try to recover and refresh ID token as per your idea - but it will work for any other secured request :-)", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407217276", "createdAt": "2020-04-12T15:57:34Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -61,23 +70,63 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public Uni<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n+    /**\n+     * A bounded map that limits the number of refresh tokens we can process concurrently\n+     */\n+    private final Map<String, TokenEntry> refreshingTokens = Collections\n+            .synchronizedMap(new LinkedHashMap<String, TokenEntry>(16, 0.75f, true) {\n+                @Override\n+                protected boolean removeEldestEntry(Map.Entry eldest) {\n+                    // we could make the max number of entries configurable\n+                    return size() > 30;\n+                }\n+            });\n+\n     public Uni<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n             return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n                     .map(new Function<SecurityIdentity, SecurityIdentity>() {\n                         @Override\n-                        public SecurityIdentity apply(SecurityIdentity securityIdentity) {\n-                            return augmentIdentity(securityIdentity, tokens[1], tokens[2], context);\n+                        public SecurityIdentity apply(SecurityIdentity identity) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            return augmentIdentity(identity, accessToken, refreshToken, context);\n+                        }\n+                    }).on().failure().recoverWithItem(new Function<Throwable, SecurityIdentity>() {\n+                        @Override\n+                        public SecurityIdentity apply(Throwable throwable) {\n+                            SecurityIdentity identity;\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (isLogout(context, configContext) ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4Njg4NQ=="}, "originalCommit": {"oid": "c6a659a9b09840c531124c051f19cc442f209d50"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIyMDM5OA==", "bodyText": "@pedroigor Hey Pedro, the other thing I forgot. Awhile back I introduced AuthenticationRedirectException to handle the local redirect (as part of the authentication request when the user is coming back from the OIDC and the original URI is restored) as I felt using the challenge method for that (ex, throw AuthenticationFailedException and then check again in the challenge method if the redirect is needed) was not ideal (in fact the redirect to drop the query parameters falls into the same category).\nSo IMHO it would a bit simpler, if in the authentication method, once the token has been verified and isLogout is confirmed then you create there a redirect URI and throw AuthenticationRedirectException - no challenge method will even be invoked and isLogout won't have to be checked again in the challenge method - which is also good - as it is not really a challenge that we do here but redirect to OIDC to logout...", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407220398", "createdAt": "2020-04-12T16:21:50Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -61,23 +70,63 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public Uni<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n+    /**\n+     * A bounded map that limits the number of refresh tokens we can process concurrently\n+     */\n+    private final Map<String, TokenEntry> refreshingTokens = Collections\n+            .synchronizedMap(new LinkedHashMap<String, TokenEntry>(16, 0.75f, true) {\n+                @Override\n+                protected boolean removeEldestEntry(Map.Entry eldest) {\n+                    // we could make the max number of entries configurable\n+                    return size() > 30;\n+                }\n+            });\n+\n     public Uni<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n             return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n                     .map(new Function<SecurityIdentity, SecurityIdentity>() {\n                         @Override\n-                        public SecurityIdentity apply(SecurityIdentity securityIdentity) {\n-                            return augmentIdentity(securityIdentity, tokens[1], tokens[2], context);\n+                        public SecurityIdentity apply(SecurityIdentity identity) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            return augmentIdentity(identity, accessToken, refreshToken, context);\n+                        }\n+                    }).on().failure().recoverWithItem(new Function<Throwable, SecurityIdentity>() {\n+                        @Override\n+                        public SecurityIdentity apply(Throwable throwable) {\n+                            SecurityIdentity identity;\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (isLogout(context, configContext) ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4Njg4NQ=="}, "originalCommit": {"oid": "c6a659a9b09840c531124c051f19cc442f209d50"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ0MDkyNg==", "bodyText": "OK. We can use that exception to redirect.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407440926", "createdAt": "2020-04-13T11:44:07Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -61,23 +70,63 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public Uni<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n+    /**\n+     * A bounded map that limits the number of refresh tokens we can process concurrently\n+     */\n+    private final Map<String, TokenEntry> refreshingTokens = Collections\n+            .synchronizedMap(new LinkedHashMap<String, TokenEntry>(16, 0.75f, true) {\n+                @Override\n+                protected boolean removeEldestEntry(Map.Entry eldest) {\n+                    // we could make the max number of entries configurable\n+                    return size() > 30;\n+                }\n+            });\n+\n     public Uni<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n             return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n                     .map(new Function<SecurityIdentity, SecurityIdentity>() {\n                         @Override\n-                        public SecurityIdentity apply(SecurityIdentity securityIdentity) {\n-                            return augmentIdentity(securityIdentity, tokens[1], tokens[2], context);\n+                        public SecurityIdentity apply(SecurityIdentity identity) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            return augmentIdentity(identity, accessToken, refreshToken, context);\n+                        }\n+                    }).on().failure().recoverWithItem(new Function<Throwable, SecurityIdentity>() {\n+                        @Override\n+                        public SecurityIdentity apply(Throwable throwable) {\n+                            SecurityIdentity identity;\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (isLogout(context, configContext) ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4Njg4NQ=="}, "originalCommit": {"oid": "c6a659a9b09840c531124c051f19cc442f209d50"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ2OTcyNg==", "bodyText": "@sberyozkin Just noticed that using the AuthenticationRedirectException would be against one of your suggestions to avoid multiple calls to removeCookie.\nI think we should leave the code as is and have the invalidation code in a single place, as you previously suggested.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407469726", "createdAt": "2020-04-13T13:09:39Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -61,23 +70,63 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public Uni<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n+    /**\n+     * A bounded map that limits the number of refresh tokens we can process concurrently\n+     */\n+    private final Map<String, TokenEntry> refreshingTokens = Collections\n+            .synchronizedMap(new LinkedHashMap<String, TokenEntry>(16, 0.75f, true) {\n+                @Override\n+                protected boolean removeEldestEntry(Map.Entry eldest) {\n+                    // we could make the max number of entries configurable\n+                    return size() > 30;\n+                }\n+            });\n+\n     public Uni<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n             return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n                     .map(new Function<SecurityIdentity, SecurityIdentity>() {\n                         @Override\n-                        public SecurityIdentity apply(SecurityIdentity securityIdentity) {\n-                            return augmentIdentity(securityIdentity, tokens[1], tokens[2], context);\n+                        public SecurityIdentity apply(SecurityIdentity identity) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            return augmentIdentity(identity, accessToken, refreshToken, context);\n+                        }\n+                    }).on().failure().recoverWithItem(new Function<Throwable, SecurityIdentity>() {\n+                        @Override\n+                        public SecurityIdentity apply(Throwable throwable) {\n+                            SecurityIdentity identity;\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (isLogout(context, configContext) ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4Njg4NQ=="}, "originalCommit": {"oid": "c6a659a9b09840c531124c051f19cc442f209d50"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUzMjk2MQ==", "bodyText": "@pedroigor\n\nJust noticed that using the AuthenticationRedirectException would be against one of your suggestions to avoid multiple calls to removeCookie.\n\nWhat do you mean ? Those multiple remove cookie calls were done inside a single get challenge code, so my suggestion was a simple refactoring proposal as opposed to anything else", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407532961", "createdAt": "2020-04-13T15:17:58Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -61,23 +70,63 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public Uni<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n+    /**\n+     * A bounded map that limits the number of refresh tokens we can process concurrently\n+     */\n+    private final Map<String, TokenEntry> refreshingTokens = Collections\n+            .synchronizedMap(new LinkedHashMap<String, TokenEntry>(16, 0.75f, true) {\n+                @Override\n+                protected boolean removeEldestEntry(Map.Entry eldest) {\n+                    // we could make the max number of entries configurable\n+                    return size() > 30;\n+                }\n+            });\n+\n     public Uni<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n             return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n                     .map(new Function<SecurityIdentity, SecurityIdentity>() {\n                         @Override\n-                        public SecurityIdentity apply(SecurityIdentity securityIdentity) {\n-                            return augmentIdentity(securityIdentity, tokens[1], tokens[2], context);\n+                        public SecurityIdentity apply(SecurityIdentity identity) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            return augmentIdentity(identity, accessToken, refreshToken, context);\n+                        }\n+                    }).on().failure().recoverWithItem(new Function<Throwable, SecurityIdentity>() {\n+                        @Override\n+                        public SecurityIdentity apply(Throwable throwable) {\n+                            SecurityIdentity identity;\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (isLogout(context, configContext) ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4Njg4NQ=="}, "originalCommit": {"oid": "c6a659a9b09840c531124c051f19cc442f209d50"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUzNjc5Nw==", "bodyText": "I see. I thought that you would like to have the local invalidation from a single point in the code. That said, using the redirect exception is going to spread local invalidation to other parts of the code.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407536797", "createdAt": "2020-04-13T15:24:54Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -61,23 +70,63 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public Uni<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n+    /**\n+     * A bounded map that limits the number of refresh tokens we can process concurrently\n+     */\n+    private final Map<String, TokenEntry> refreshingTokens = Collections\n+            .synchronizedMap(new LinkedHashMap<String, TokenEntry>(16, 0.75f, true) {\n+                @Override\n+                protected boolean removeEldestEntry(Map.Entry eldest) {\n+                    // we could make the max number of entries configurable\n+                    return size() > 30;\n+                }\n+            });\n+\n     public Uni<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n             return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n                     .map(new Function<SecurityIdentity, SecurityIdentity>() {\n                         @Override\n-                        public SecurityIdentity apply(SecurityIdentity securityIdentity) {\n-                            return augmentIdentity(securityIdentity, tokens[1], tokens[2], context);\n+                        public SecurityIdentity apply(SecurityIdentity identity) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            return augmentIdentity(identity, accessToken, refreshToken, context);\n+                        }\n+                    }).on().failure().recoverWithItem(new Function<Throwable, SecurityIdentity>() {\n+                        @Override\n+                        public SecurityIdentity apply(Throwable throwable) {\n+                            SecurityIdentity identity;\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (isLogout(context, configContext) ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4Njg4NQ=="}, "originalCommit": {"oid": "c6a659a9b09840c531124c051f19cc442f209d50"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5NjY2NQ==", "bodyText": "@pedroigor\n\nusing the redirect exception is going to spread local invalidation to other parts of the code\n\nYou mean in the same class ? Is it a blocker to having a non-challenge redirect be handled consistently and without the double logout check ?", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407596665", "createdAt": "2020-04-13T17:15:35Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -61,23 +70,63 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public Uni<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n+    /**\n+     * A bounded map that limits the number of refresh tokens we can process concurrently\n+     */\n+    private final Map<String, TokenEntry> refreshingTokens = Collections\n+            .synchronizedMap(new LinkedHashMap<String, TokenEntry>(16, 0.75f, true) {\n+                @Override\n+                protected boolean removeEldestEntry(Map.Entry eldest) {\n+                    // we could make the max number of entries configurable\n+                    return size() > 30;\n+                }\n+            });\n+\n     public Uni<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n             return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n                     .map(new Function<SecurityIdentity, SecurityIdentity>() {\n                         @Override\n-                        public SecurityIdentity apply(SecurityIdentity securityIdentity) {\n-                            return augmentIdentity(securityIdentity, tokens[1], tokens[2], context);\n+                        public SecurityIdentity apply(SecurityIdentity identity) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            return augmentIdentity(identity, accessToken, refreshToken, context);\n+                        }\n+                    }).on().failure().recoverWithItem(new Function<Throwable, SecurityIdentity>() {\n+                        @Override\n+                        public SecurityIdentity apply(Throwable throwable) {\n+                            SecurityIdentity identity;\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (isLogout(context, configContext) ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4Njg4NQ=="}, "originalCommit": {"oid": "c6a659a9b09840c531124c051f19cc442f209d50"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyNDE1NA==", "bodyText": "Yes. For the sake of consistency, it makes more sense to me to have removed the cookie always from a single place. In this case, whenever a challenge is made.\nBut I don't mind using the redirect exception and calling removeCookie from different places.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407624154", "createdAt": "2020-04-13T18:04:25Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -61,23 +70,63 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public Uni<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n+    /**\n+     * A bounded map that limits the number of refresh tokens we can process concurrently\n+     */\n+    private final Map<String, TokenEntry> refreshingTokens = Collections\n+            .synchronizedMap(new LinkedHashMap<String, TokenEntry>(16, 0.75f, true) {\n+                @Override\n+                protected boolean removeEldestEntry(Map.Entry eldest) {\n+                    // we could make the max number of entries configurable\n+                    return size() > 30;\n+                }\n+            });\n+\n     public Uni<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n             return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n                     .map(new Function<SecurityIdentity, SecurityIdentity>() {\n                         @Override\n-                        public SecurityIdentity apply(SecurityIdentity securityIdentity) {\n-                            return augmentIdentity(securityIdentity, tokens[1], tokens[2], context);\n+                        public SecurityIdentity apply(SecurityIdentity identity) {\n+                            if (isLogout(context, configContext)) {\n+                                // force logout, the challenge will be built accordingly and redirect to the logout endpoint at the OP\n+                                throw new AuthenticationFailedException();\n+                            }\n+\n+                            return augmentIdentity(identity, accessToken, refreshToken, context);\n+                        }\n+                    }).on().failure().recoverWithItem(new Function<Throwable, SecurityIdentity>() {\n+                        @Override\n+                        public SecurityIdentity apply(Throwable throwable) {\n+                            SecurityIdentity identity;\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (isLogout(context, configContext) ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4Njg4NQ=="}, "originalCommit": {"oid": "c6a659a9b09840c531124c051f19cc442f209d50"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTA2MTM4OnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMDo0MTo0NVrOGE0igg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMDo0MTo0NVrOGE0igg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcwODI5MA==", "bodyText": "@pedroigor Thank you :-) :-)", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407708290", "createdAt": "2020-04-13T20:41:45Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -61,23 +70,65 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public Uni<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n+    /**\n+     * A bounded map that limits the number of refresh tokens we can process concurrently\n+     */\n+    private final Map<String, TokenEntry> refreshingTokens = Collections\n+            .synchronizedMap(new LinkedHashMap<String, TokenEntry>(16, 0.75f, true) {\n+                @Override\n+                protected boolean removeEldestEntry(Map.Entry eldest) {\n+                    // we could make the max number of entries configurable\n+                    return size() > 30;\n+                }\n+            });\n+\n     public Uni<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n             return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n                     .map(new Function<SecurityIdentity, SecurityIdentity>() {\n                         @Override\n-                        public SecurityIdentity apply(SecurityIdentity securityIdentity) {\n-                            return augmentIdentity(securityIdentity, tokens[1], tokens[2], context);\n+                        public SecurityIdentity apply(SecurityIdentity identity) {\n+                            if (isLogout(context, configContext)) {\n+                                redirectToLogoutEndpoint(context, configContext, idToken);\n+                            }\n+\n+                            return augmentIdentity(identity, accessToken, refreshToken, context);\n+                        }\n+                    }).on().failure().recoverWithItem(new Function<Throwable, SecurityIdentity>() {\n+                        @Override\n+                        public SecurityIdentity apply(Throwable throwable) {\n+                            Throwable cause = throwable.getCause();\n+\n+                            // we should have proper exception hierarchy to represent token expiration errors\n+                            if (cause != null && !cause.getMessage().equalsIgnoreCase(\"expired token\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "018b88b02346ac87ae8a48a4e60ed10431d26334"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTIzMzY0OnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMTozNTo0OVrOGE2NbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMjoyMjowN1rOGE3W9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczNTY2MA==", "bodyText": "@pedroigor I think this looks nice but may be something still needs to be tweaked. So if we have a failure due to the expiry then\n\nif it is a logout request - we just redirect to the OP logout URI - this makes sense\notherwise we just refresh, if identity is not null, all is good,  but if it is null, I think we should return AuthenticationFailedException so that a user's session is invalidated and we redirect the user to the login site, as opposed to the logout site, this is because the OP logout endpoint may not be even available, and even if it is available, I don't think the user, after his ID token has failed to refresh, should be redirected to the OP logout site - what if OP asks, would you like to logout ? while the users was doing some GET /mybook...\n\nWhat do you think ?", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407735660", "createdAt": "2020-04-13T21:35:49Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -61,23 +70,65 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public Uni<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n+    /**\n+     * A bounded map that limits the number of refresh tokens we can process concurrently\n+     */\n+    private final Map<String, TokenEntry> refreshingTokens = Collections\n+            .synchronizedMap(new LinkedHashMap<String, TokenEntry>(16, 0.75f, true) {\n+                @Override\n+                protected boolean removeEldestEntry(Map.Entry eldest) {\n+                    // we could make the max number of entries configurable\n+                    return size() > 30;\n+                }\n+            });\n+\n     public Uni<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n             return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n                     .map(new Function<SecurityIdentity, SecurityIdentity>() {\n                         @Override\n-                        public SecurityIdentity apply(SecurityIdentity securityIdentity) {\n-                            return augmentIdentity(securityIdentity, tokens[1], tokens[2], context);\n+                        public SecurityIdentity apply(SecurityIdentity identity) {\n+                            if (isLogout(context, configContext)) {\n+                                redirectToLogoutEndpoint(context, configContext, idToken);\n+                            }\n+\n+                            return augmentIdentity(identity, accessToken, refreshToken, context);\n+                        }\n+                    }).on().failure().recoverWithItem(new Function<Throwable, SecurityIdentity>() {\n+                        @Override\n+                        public SecurityIdentity apply(Throwable throwable) {\n+                            Throwable cause = throwable.getCause();\n+\n+                            // we should have proper exception hierarchy to represent token expiration errors\n+                            if (cause != null && !cause.getMessage().equalsIgnoreCase(\"expired token\")) {\n+                                throw new AuthenticationFailedException(throwable);\n+                            }\n+\n+                            SecurityIdentity identity = null;\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (isLogout(context, configContext) ||\n+                                    (identity = trySilentRefresh(configContext, idToken, refreshToken, context,\n+                                            identityProviderManager)) == null) {\n+                                redirectToLogoutEndpoint(context, configContext, idToken);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "625e17ed0fe29743257238edf7032c94c54c50ff"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc1NDQ4NQ==", "bodyText": "#1. We only redirect if the refresh fails. Otherwise, an identity is returned and the user is silently re-authenticated.\n#2. You are right, this is wrong. We should restart the authentication.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407754485", "createdAt": "2020-04-13T22:22:07Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -61,23 +70,65 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public Uni<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n+    /**\n+     * A bounded map that limits the number of refresh tokens we can process concurrently\n+     */\n+    private final Map<String, TokenEntry> refreshingTokens = Collections\n+            .synchronizedMap(new LinkedHashMap<String, TokenEntry>(16, 0.75f, true) {\n+                @Override\n+                protected boolean removeEldestEntry(Map.Entry eldest) {\n+                    // we could make the max number of entries configurable\n+                    return size() > 30;\n+                }\n+            });\n+\n     public Uni<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n             return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n                     .map(new Function<SecurityIdentity, SecurityIdentity>() {\n                         @Override\n-                        public SecurityIdentity apply(SecurityIdentity securityIdentity) {\n-                            return augmentIdentity(securityIdentity, tokens[1], tokens[2], context);\n+                        public SecurityIdentity apply(SecurityIdentity identity) {\n+                            if (isLogout(context, configContext)) {\n+                                redirectToLogoutEndpoint(context, configContext, idToken);\n+                            }\n+\n+                            return augmentIdentity(identity, accessToken, refreshToken, context);\n+                        }\n+                    }).on().failure().recoverWithItem(new Function<Throwable, SecurityIdentity>() {\n+                        @Override\n+                        public SecurityIdentity apply(Throwable throwable) {\n+                            Throwable cause = throwable.getCause();\n+\n+                            // we should have proper exception hierarchy to represent token expiration errors\n+                            if (cause != null && !cause.getMessage().equalsIgnoreCase(\"expired token\")) {\n+                                throw new AuthenticationFailedException(throwable);\n+                            }\n+\n+                            SecurityIdentity identity = null;\n+\n+                            // if authentication failed, the reason could be the token no longer being valid, so we try a \n+                            // silent refresh if required\n+                            if (isLogout(context, configContext) ||\n+                                    (identity = trySilentRefresh(configContext, idToken, refreshToken, context,\n+                                            identityProviderManager)) == null) {\n+                                redirectToLogoutEndpoint(context, configContext, idToken);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczNTY2MA=="}, "originalCommit": {"oid": "625e17ed0fe29743257238edf7032c94c54c50ff"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTI0NTYwOnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMTozOTo1M1rOGE2UrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODoyODoyOFrOGFDvIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczNzUxNg==", "bodyText": "So yeah, what happens here to the blocking threads, they get the refresh token and proceed with their own refresh ? Or can we just let those blocking threads pick up the refreshed token/etc and continue without the refresh ?", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407737516", "createdAt": "2020-04-13T21:39:53Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -301,4 +348,114 @@ private void removeCookie(RoutingContext context, TenantConfigContext configCont\n             }\n         }\n     }\n+\n+    private boolean isLogout(RoutingContext context, TenantConfigContext configContext) {\n+        Optional<String> logoutPath = configContext.oidcConfig.logout.path;\n+\n+        if (logoutPath.isPresent()) {\n+            return context.request().absoluteURI().equals(\n+                    buildUri(context, logoutPath.get()));\n+        }\n+\n+        return false;\n+    }\n+\n+    private SecurityIdentity trySilentRefresh(TenantConfigContext configContext, String idToken, String refreshToken,\n+            RoutingContext context, IdentityProviderManager identityProviderManager) {\n+        OidcTenantConfig config = configContext.oidcConfig;\n+\n+        if (config.token.refreshTimeout.isPresent()) {\n+            OAuth2AuthProviderImpl auth = ((OAuth2AuthProviderImpl) configContext.auth);\n+            JWT jwt = auth.getJWT();\n+            JsonObject tokenJson;\n+\n+            try {\n+                tokenJson = jwt.decode(idToken);\n+            } catch (Exception cause) {\n+                throw new AuthenticationCompletionException(cause);\n+            }\n+\n+            Long iat = tokenJson.getLong(\"iat\");\n+            long now = System.currentTimeMillis() / 1000;\n+            Integer timeout = config.token.refreshTimeout.get();\n+\n+            if (now - iat >= timeout) {\n+                String sub = tokenJson.getString(\"sub\");\n+\n+                TokenEntry entry = refreshingTokens.computeIfAbsent(sub,\n+                        new Function<String, TokenEntry>() {\n+                            @Override\n+                            public TokenEntry apply(String token) {\n+                                return new TokenEntry(refreshToken);\n+                            }\n+                        });\n+\n+                // synchronize on the entry associated with the current subject\n+                synchronized (entry) {\n+                    Uni<SecurityIdentity> cf = Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                        @Override\n+                        public void accept(UniEmitter<? super SecurityIdentity> emitter) {\n+                            OAuth2TokenImpl token = new OAuth2TokenImpl(configContext.auth, new JsonObject());\n+\n+                            // always get the last token\n+                            token.principal().put(\"refresh_token\", entry.getToken());\n+\n+                            token.refresh(new Handler<AsyncResult<Void>>() {\n+                                @Override\n+                                public void handle(AsyncResult<Void> result) {\n+                                    if (result.succeeded()) {\n+                                        authenticate(identityProviderManager,\n+                                                new IdTokenCredential(token.opaqueIdToken(), context))\n+                                                        .subscribe().with(new Consumer<SecurityIdentity>() {\n+                                                            @Override\n+                                                            public void accept(SecurityIdentity identity) {\n+                                                                // after a successful refresh, rebuild the identity and update the cookie \n+                                                                processSuccessfulAuthentication(context, configContext, token,\n+                                                                        identity);\n+                                                                // update the token so that blocking threads get the latest one\n+                                                                entry.setToken(token.opaqueRefreshToken());\n+                                                                emitter.complete(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "625e17ed0fe29743257238edf7032c94c54c50ff"}, "originalPosition": 295}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0OTUwNw==", "bodyText": "Yes. Thing is that we would need to know if a refresh happened before to make the second point work. I think is easier to just let them refresh and get a new set of tokens.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407749507", "createdAt": "2020-04-13T22:08:50Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -301,4 +348,114 @@ private void removeCookie(RoutingContext context, TenantConfigContext configCont\n             }\n         }\n     }\n+\n+    private boolean isLogout(RoutingContext context, TenantConfigContext configContext) {\n+        Optional<String> logoutPath = configContext.oidcConfig.logout.path;\n+\n+        if (logoutPath.isPresent()) {\n+            return context.request().absoluteURI().equals(\n+                    buildUri(context, logoutPath.get()));\n+        }\n+\n+        return false;\n+    }\n+\n+    private SecurityIdentity trySilentRefresh(TenantConfigContext configContext, String idToken, String refreshToken,\n+            RoutingContext context, IdentityProviderManager identityProviderManager) {\n+        OidcTenantConfig config = configContext.oidcConfig;\n+\n+        if (config.token.refreshTimeout.isPresent()) {\n+            OAuth2AuthProviderImpl auth = ((OAuth2AuthProviderImpl) configContext.auth);\n+            JWT jwt = auth.getJWT();\n+            JsonObject tokenJson;\n+\n+            try {\n+                tokenJson = jwt.decode(idToken);\n+            } catch (Exception cause) {\n+                throw new AuthenticationCompletionException(cause);\n+            }\n+\n+            Long iat = tokenJson.getLong(\"iat\");\n+            long now = System.currentTimeMillis() / 1000;\n+            Integer timeout = config.token.refreshTimeout.get();\n+\n+            if (now - iat >= timeout) {\n+                String sub = tokenJson.getString(\"sub\");\n+\n+                TokenEntry entry = refreshingTokens.computeIfAbsent(sub,\n+                        new Function<String, TokenEntry>() {\n+                            @Override\n+                            public TokenEntry apply(String token) {\n+                                return new TokenEntry(refreshToken);\n+                            }\n+                        });\n+\n+                // synchronize on the entry associated with the current subject\n+                synchronized (entry) {\n+                    Uni<SecurityIdentity> cf = Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                        @Override\n+                        public void accept(UniEmitter<? super SecurityIdentity> emitter) {\n+                            OAuth2TokenImpl token = new OAuth2TokenImpl(configContext.auth, new JsonObject());\n+\n+                            // always get the last token\n+                            token.principal().put(\"refresh_token\", entry.getToken());\n+\n+                            token.refresh(new Handler<AsyncResult<Void>>() {\n+                                @Override\n+                                public void handle(AsyncResult<Void> result) {\n+                                    if (result.succeeded()) {\n+                                        authenticate(identityProviderManager,\n+                                                new IdTokenCredential(token.opaqueIdToken(), context))\n+                                                        .subscribe().with(new Consumer<SecurityIdentity>() {\n+                                                            @Override\n+                                                            public void accept(SecurityIdentity identity) {\n+                                                                // after a successful refresh, rebuild the identity and update the cookie \n+                                                                processSuccessfulAuthentication(context, configContext, token,\n+                                                                        identity);\n+                                                                // update the token so that blocking threads get the latest one\n+                                                                entry.setToken(token.opaqueRefreshToken());\n+                                                                emitter.complete(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczNzUxNg=="}, "originalCommit": {"oid": "625e17ed0fe29743257238edf7032c94c54c50ff"}, "originalPosition": 295}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0MDE1OA==", "bodyText": "So can this bit perform blocking operations? If so you need to check if you are on the IO thread and dispatch to an executor.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407840158", "createdAt": "2020-04-14T03:10:52Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -301,4 +348,114 @@ private void removeCookie(RoutingContext context, TenantConfigContext configCont\n             }\n         }\n     }\n+\n+    private boolean isLogout(RoutingContext context, TenantConfigContext configContext) {\n+        Optional<String> logoutPath = configContext.oidcConfig.logout.path;\n+\n+        if (logoutPath.isPresent()) {\n+            return context.request().absoluteURI().equals(\n+                    buildUri(context, logoutPath.get()));\n+        }\n+\n+        return false;\n+    }\n+\n+    private SecurityIdentity trySilentRefresh(TenantConfigContext configContext, String idToken, String refreshToken,\n+            RoutingContext context, IdentityProviderManager identityProviderManager) {\n+        OidcTenantConfig config = configContext.oidcConfig;\n+\n+        if (config.token.refreshTimeout.isPresent()) {\n+            OAuth2AuthProviderImpl auth = ((OAuth2AuthProviderImpl) configContext.auth);\n+            JWT jwt = auth.getJWT();\n+            JsonObject tokenJson;\n+\n+            try {\n+                tokenJson = jwt.decode(idToken);\n+            } catch (Exception cause) {\n+                throw new AuthenticationCompletionException(cause);\n+            }\n+\n+            Long iat = tokenJson.getLong(\"iat\");\n+            long now = System.currentTimeMillis() / 1000;\n+            Integer timeout = config.token.refreshTimeout.get();\n+\n+            if (now - iat >= timeout) {\n+                String sub = tokenJson.getString(\"sub\");\n+\n+                TokenEntry entry = refreshingTokens.computeIfAbsent(sub,\n+                        new Function<String, TokenEntry>() {\n+                            @Override\n+                            public TokenEntry apply(String token) {\n+                                return new TokenEntry(refreshToken);\n+                            }\n+                        });\n+\n+                // synchronize on the entry associated with the current subject\n+                synchronized (entry) {\n+                    Uni<SecurityIdentity> cf = Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                        @Override\n+                        public void accept(UniEmitter<? super SecurityIdentity> emitter) {\n+                            OAuth2TokenImpl token = new OAuth2TokenImpl(configContext.auth, new JsonObject());\n+\n+                            // always get the last token\n+                            token.principal().put(\"refresh_token\", entry.getToken());\n+\n+                            token.refresh(new Handler<AsyncResult<Void>>() {\n+                                @Override\n+                                public void handle(AsyncResult<Void> result) {\n+                                    if (result.succeeded()) {\n+                                        authenticate(identityProviderManager,\n+                                                new IdTokenCredential(token.opaqueIdToken(), context))\n+                                                        .subscribe().with(new Consumer<SecurityIdentity>() {\n+                                                            @Override\n+                                                            public void accept(SecurityIdentity identity) {\n+                                                                // after a successful refresh, rebuild the identity and update the cookie \n+                                                                processSuccessfulAuthentication(context, configContext, token,\n+                                                                        identity);\n+                                                                // update the token so that blocking threads get the latest one\n+                                                                entry.setToken(token.opaqueRefreshToken());\n+                                                                emitter.complete(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczNzUxNg=="}, "originalCommit": {"oid": "625e17ed0fe29743257238edf7032c94c54c50ff"}, "originalPosition": 295}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkwMDY1Mg==", "bodyText": "Everything is within a call to authenticate  which will end up executing as blocking (by the identity provider).\nAnd here is the place I mentioned to you about the Vert.x OAuth2 always execute in the event loop thread. If you check the thread before the authenticate call you'll see it runs in the event loop thread. But if you check the thread within the block you are commenting you'll see it does run in an executor thread. However, the trySilentRefresh always executes as blocking. So we would expect that we never run in the event loop thread.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407900652", "createdAt": "2020-04-14T06:42:38Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -301,4 +348,114 @@ private void removeCookie(RoutingContext context, TenantConfigContext configCont\n             }\n         }\n     }\n+\n+    private boolean isLogout(RoutingContext context, TenantConfigContext configContext) {\n+        Optional<String> logoutPath = configContext.oidcConfig.logout.path;\n+\n+        if (logoutPath.isPresent()) {\n+            return context.request().absoluteURI().equals(\n+                    buildUri(context, logoutPath.get()));\n+        }\n+\n+        return false;\n+    }\n+\n+    private SecurityIdentity trySilentRefresh(TenantConfigContext configContext, String idToken, String refreshToken,\n+            RoutingContext context, IdentityProviderManager identityProviderManager) {\n+        OidcTenantConfig config = configContext.oidcConfig;\n+\n+        if (config.token.refreshTimeout.isPresent()) {\n+            OAuth2AuthProviderImpl auth = ((OAuth2AuthProviderImpl) configContext.auth);\n+            JWT jwt = auth.getJWT();\n+            JsonObject tokenJson;\n+\n+            try {\n+                tokenJson = jwt.decode(idToken);\n+            } catch (Exception cause) {\n+                throw new AuthenticationCompletionException(cause);\n+            }\n+\n+            Long iat = tokenJson.getLong(\"iat\");\n+            long now = System.currentTimeMillis() / 1000;\n+            Integer timeout = config.token.refreshTimeout.get();\n+\n+            if (now - iat >= timeout) {\n+                String sub = tokenJson.getString(\"sub\");\n+\n+                TokenEntry entry = refreshingTokens.computeIfAbsent(sub,\n+                        new Function<String, TokenEntry>() {\n+                            @Override\n+                            public TokenEntry apply(String token) {\n+                                return new TokenEntry(refreshToken);\n+                            }\n+                        });\n+\n+                // synchronize on the entry associated with the current subject\n+                synchronized (entry) {\n+                    Uni<SecurityIdentity> cf = Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                        @Override\n+                        public void accept(UniEmitter<? super SecurityIdentity> emitter) {\n+                            OAuth2TokenImpl token = new OAuth2TokenImpl(configContext.auth, new JsonObject());\n+\n+                            // always get the last token\n+                            token.principal().put(\"refresh_token\", entry.getToken());\n+\n+                            token.refresh(new Handler<AsyncResult<Void>>() {\n+                                @Override\n+                                public void handle(AsyncResult<Void> result) {\n+                                    if (result.succeeded()) {\n+                                        authenticate(identityProviderManager,\n+                                                new IdTokenCredential(token.opaqueIdToken(), context))\n+                                                        .subscribe().with(new Consumer<SecurityIdentity>() {\n+                                                            @Override\n+                                                            public void accept(SecurityIdentity identity) {\n+                                                                // after a successful refresh, rebuild the identity and update the cookie \n+                                                                processSuccessfulAuthentication(context, configContext, token,\n+                                                                        identity);\n+                                                                // update the token so that blocking threads get the latest one\n+                                                                entry.setToken(token.opaqueRefreshToken());\n+                                                                emitter.complete(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczNzUxNg=="}, "originalCommit": {"oid": "625e17ed0fe29743257238edf7032c94c54c50ff"}, "originalPosition": 295}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1NzI4Mw==", "bodyText": "@pedroigor OK, so we just keep recycling for every concurrent request. OK, I'm still a bit unclear about where these concurrent requests can originate from with the same sub, I'll ping you later to understand better :-) but obviously there are all sort of variations possible with 'sub' being reused.\nI'll open an issue to track the even loop issue", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407957283", "createdAt": "2020-04-14T08:28:28Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -301,4 +348,114 @@ private void removeCookie(RoutingContext context, TenantConfigContext configCont\n             }\n         }\n     }\n+\n+    private boolean isLogout(RoutingContext context, TenantConfigContext configContext) {\n+        Optional<String> logoutPath = configContext.oidcConfig.logout.path;\n+\n+        if (logoutPath.isPresent()) {\n+            return context.request().absoluteURI().equals(\n+                    buildUri(context, logoutPath.get()));\n+        }\n+\n+        return false;\n+    }\n+\n+    private SecurityIdentity trySilentRefresh(TenantConfigContext configContext, String idToken, String refreshToken,\n+            RoutingContext context, IdentityProviderManager identityProviderManager) {\n+        OidcTenantConfig config = configContext.oidcConfig;\n+\n+        if (config.token.refreshTimeout.isPresent()) {\n+            OAuth2AuthProviderImpl auth = ((OAuth2AuthProviderImpl) configContext.auth);\n+            JWT jwt = auth.getJWT();\n+            JsonObject tokenJson;\n+\n+            try {\n+                tokenJson = jwt.decode(idToken);\n+            } catch (Exception cause) {\n+                throw new AuthenticationCompletionException(cause);\n+            }\n+\n+            Long iat = tokenJson.getLong(\"iat\");\n+            long now = System.currentTimeMillis() / 1000;\n+            Integer timeout = config.token.refreshTimeout.get();\n+\n+            if (now - iat >= timeout) {\n+                String sub = tokenJson.getString(\"sub\");\n+\n+                TokenEntry entry = refreshingTokens.computeIfAbsent(sub,\n+                        new Function<String, TokenEntry>() {\n+                            @Override\n+                            public TokenEntry apply(String token) {\n+                                return new TokenEntry(refreshToken);\n+                            }\n+                        });\n+\n+                // synchronize on the entry associated with the current subject\n+                synchronized (entry) {\n+                    Uni<SecurityIdentity> cf = Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                        @Override\n+                        public void accept(UniEmitter<? super SecurityIdentity> emitter) {\n+                            OAuth2TokenImpl token = new OAuth2TokenImpl(configContext.auth, new JsonObject());\n+\n+                            // always get the last token\n+                            token.principal().put(\"refresh_token\", entry.getToken());\n+\n+                            token.refresh(new Handler<AsyncResult<Void>>() {\n+                                @Override\n+                                public void handle(AsyncResult<Void> result) {\n+                                    if (result.succeeded()) {\n+                                        authenticate(identityProviderManager,\n+                                                new IdTokenCredential(token.opaqueIdToken(), context))\n+                                                        .subscribe().with(new Consumer<SecurityIdentity>() {\n+                                                            @Override\n+                                                            public void accept(SecurityIdentity identity) {\n+                                                                // after a successful refresh, rebuild the identity and update the cookie \n+                                                                processSuccessfulAuthentication(context, configContext, token,\n+                                                                        identity);\n+                                                                // update the token so that blocking threads get the latest one\n+                                                                entry.setToken(token.opaqueRefreshToken());\n+                                                                emitter.complete(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczNzUxNg=="}, "originalCommit": {"oid": "625e17ed0fe29743257238edf7032c94c54c50ff"}, "originalPosition": 295}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTg4NzE2OnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMjo1MjoyNFrOGE8SCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzozNzoyNVrOGFB5VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgzNTE0Ng==", "bodyText": "Why do we need this map? I don't really like the idea of making the authenticators stateful, and I really don't like the arbitrary size limit.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407835146", "createdAt": "2020-04-14T02:52:24Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -301,4 +351,114 @@ private void removeCookie(RoutingContext context, TenantConfigContext configCont\n             }\n         }\n     }\n+\n+    private boolean isLogout(RoutingContext context, TenantConfigContext configContext) {\n+        Optional<String> logoutPath = configContext.oidcConfig.logout.path;\n+\n+        if (logoutPath.isPresent()) {\n+            return context.request().absoluteURI().equals(\n+                    buildUri(context, logoutPath.get()));\n+        }\n+\n+        return false;\n+    }\n+\n+    private SecurityIdentity trySilentRefresh(TenantConfigContext configContext, String idToken, String refreshToken,\n+            RoutingContext context, IdentityProviderManager identityProviderManager) {\n+        OidcTenantConfig config = configContext.oidcConfig;\n+\n+        if (config.token.refreshTimeout.isPresent()) {\n+            OAuth2AuthProviderImpl auth = ((OAuth2AuthProviderImpl) configContext.auth);\n+            JWT jwt = auth.getJWT();\n+            JsonObject tokenJson;\n+\n+            try {\n+                tokenJson = jwt.decode(idToken);\n+            } catch (Exception cause) {\n+                throw new AuthenticationCompletionException(cause);\n+            }\n+\n+            Long iat = tokenJson.getLong(\"iat\");\n+            long now = System.currentTimeMillis() / 1000;\n+            Integer timeout = config.token.refreshTimeout.get();\n+\n+            if (now - iat >= timeout) {\n+                String sub = tokenJson.getString(\"sub\");\n+\n+                TokenEntry entry = refreshingTokens.computeIfAbsent(sub,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1051986b26679a9f5a0d02854b06cdbcf7968f42"}, "originalPosition": 266}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg5Njk3Nw==", "bodyText": "Indeed, it makes it stateful. You may have noticed that the idea is to prevent requests from failing when they are sent from a same subject at the same time.\nThe point here is making requests consistent and don't fail due to multiple refresh token requests from a same subject. This is especially useful when you have refresh token rotation enabled at the IdP and after a refresh token request, you get also a new refresh token.\nI understand the concerns you and @sberyozkin have about this part. In fact, my initial changes were just failing requests. But I do think this is useful and important to make things consistent.\nSo, if you also think we should remove this, I will not argue anymore and just remove it.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407896977", "createdAt": "2020-04-14T06:33:16Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -301,4 +351,114 @@ private void removeCookie(RoutingContext context, TenantConfigContext configCont\n             }\n         }\n     }\n+\n+    private boolean isLogout(RoutingContext context, TenantConfigContext configContext) {\n+        Optional<String> logoutPath = configContext.oidcConfig.logout.path;\n+\n+        if (logoutPath.isPresent()) {\n+            return context.request().absoluteURI().equals(\n+                    buildUri(context, logoutPath.get()));\n+        }\n+\n+        return false;\n+    }\n+\n+    private SecurityIdentity trySilentRefresh(TenantConfigContext configContext, String idToken, String refreshToken,\n+            RoutingContext context, IdentityProviderManager identityProviderManager) {\n+        OidcTenantConfig config = configContext.oidcConfig;\n+\n+        if (config.token.refreshTimeout.isPresent()) {\n+            OAuth2AuthProviderImpl auth = ((OAuth2AuthProviderImpl) configContext.auth);\n+            JWT jwt = auth.getJWT();\n+            JsonObject tokenJson;\n+\n+            try {\n+                tokenJson = jwt.decode(idToken);\n+            } catch (Exception cause) {\n+                throw new AuthenticationCompletionException(cause);\n+            }\n+\n+            Long iat = tokenJson.getLong(\"iat\");\n+            long now = System.currentTimeMillis() / 1000;\n+            Integer timeout = config.token.refreshTimeout.get();\n+\n+            if (now - iat >= timeout) {\n+                String sub = tokenJson.getString(\"sub\");\n+\n+                TokenEntry entry = refreshingTokens.computeIfAbsent(sub,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgzNTE0Ng=="}, "originalCommit": {"oid": "1051986b26679a9f5a0d02854b06cdbcf7968f42"}, "originalPosition": 266}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkwMDcxMA==", "bodyText": "The big problem with this is that it is not 'cloud native'. Requests may be going to different pods, so you can't be sure that this state is actually shared between requests.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407900710", "createdAt": "2020-04-14T06:42:48Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -301,4 +351,114 @@ private void removeCookie(RoutingContext context, TenantConfigContext configCont\n             }\n         }\n     }\n+\n+    private boolean isLogout(RoutingContext context, TenantConfigContext configContext) {\n+        Optional<String> logoutPath = configContext.oidcConfig.logout.path;\n+\n+        if (logoutPath.isPresent()) {\n+            return context.request().absoluteURI().equals(\n+                    buildUri(context, logoutPath.get()));\n+        }\n+\n+        return false;\n+    }\n+\n+    private SecurityIdentity trySilentRefresh(TenantConfigContext configContext, String idToken, String refreshToken,\n+            RoutingContext context, IdentityProviderManager identityProviderManager) {\n+        OidcTenantConfig config = configContext.oidcConfig;\n+\n+        if (config.token.refreshTimeout.isPresent()) {\n+            OAuth2AuthProviderImpl auth = ((OAuth2AuthProviderImpl) configContext.auth);\n+            JWT jwt = auth.getJWT();\n+            JsonObject tokenJson;\n+\n+            try {\n+                tokenJson = jwt.decode(idToken);\n+            } catch (Exception cause) {\n+                throw new AuthenticationCompletionException(cause);\n+            }\n+\n+            Long iat = tokenJson.getLong(\"iat\");\n+            long now = System.currentTimeMillis() / 1000;\n+            Integer timeout = config.token.refreshTimeout.get();\n+\n+            if (now - iat >= timeout) {\n+                String sub = tokenJson.getString(\"sub\");\n+\n+                TokenEntry entry = refreshingTokens.computeIfAbsent(sub,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgzNTE0Ng=="}, "originalCommit": {"oid": "1051986b26679a9f5a0d02854b06cdbcf7968f42"}, "originalPosition": 266}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkyNzEyNQ==", "bodyText": "That is a good argument. Missed that, so that in the case of pods, pod-affinity is an anti-pattern.\nI'm going to remove this part and just fail the request. Let's treat it as a corner case and have this behavior documented properly.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407927125", "createdAt": "2020-04-14T07:37:25Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -301,4 +351,114 @@ private void removeCookie(RoutingContext context, TenantConfigContext configCont\n             }\n         }\n     }\n+\n+    private boolean isLogout(RoutingContext context, TenantConfigContext configContext) {\n+        Optional<String> logoutPath = configContext.oidcConfig.logout.path;\n+\n+        if (logoutPath.isPresent()) {\n+            return context.request().absoluteURI().equals(\n+                    buildUri(context, logoutPath.get()));\n+        }\n+\n+        return false;\n+    }\n+\n+    private SecurityIdentity trySilentRefresh(TenantConfigContext configContext, String idToken, String refreshToken,\n+            RoutingContext context, IdentityProviderManager identityProviderManager) {\n+        OidcTenantConfig config = configContext.oidcConfig;\n+\n+        if (config.token.refreshTimeout.isPresent()) {\n+            OAuth2AuthProviderImpl auth = ((OAuth2AuthProviderImpl) configContext.auth);\n+            JWT jwt = auth.getJWT();\n+            JsonObject tokenJson;\n+\n+            try {\n+                tokenJson = jwt.decode(idToken);\n+            } catch (Exception cause) {\n+                throw new AuthenticationCompletionException(cause);\n+            }\n+\n+            Long iat = tokenJson.getLong(\"iat\");\n+            long now = System.currentTimeMillis() / 1000;\n+            Integer timeout = config.token.refreshTimeout.get();\n+\n+            if (now - iat >= timeout) {\n+                String sub = tokenJson.getString(\"sub\");\n+\n+                TokenEntry entry = refreshingTokens.computeIfAbsent(sub,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgzNTE0Ng=="}, "originalCommit": {"oid": "1051986b26679a9f5a0d02854b06cdbcf7968f42"}, "originalPosition": 266}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTkxNTQwOnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMzowNzoxNFrOGE8iEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjozNDoxNFrOGFAE8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgzOTI1MA==", "bodyText": "Even if this is a new token it will still be refreshed?", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407839250", "createdAt": "2020-04-14T03:07:14Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -301,4 +351,114 @@ private void removeCookie(RoutingContext context, TenantConfigContext configCont\n             }\n         }\n     }\n+\n+    private boolean isLogout(RoutingContext context, TenantConfigContext configContext) {\n+        Optional<String> logoutPath = configContext.oidcConfig.logout.path;\n+\n+        if (logoutPath.isPresent()) {\n+            return context.request().absoluteURI().equals(\n+                    buildUri(context, logoutPath.get()));\n+        }\n+\n+        return false;\n+    }\n+\n+    private SecurityIdentity trySilentRefresh(TenantConfigContext configContext, String idToken, String refreshToken,\n+            RoutingContext context, IdentityProviderManager identityProviderManager) {\n+        OidcTenantConfig config = configContext.oidcConfig;\n+\n+        if (config.token.refreshTimeout.isPresent()) {\n+            OAuth2AuthProviderImpl auth = ((OAuth2AuthProviderImpl) configContext.auth);\n+            JWT jwt = auth.getJWT();\n+            JsonObject tokenJson;\n+\n+            try {\n+                tokenJson = jwt.decode(idToken);\n+            } catch (Exception cause) {\n+                throw new AuthenticationCompletionException(cause);\n+            }\n+\n+            Long iat = tokenJson.getLong(\"iat\");\n+            long now = System.currentTimeMillis() / 1000;\n+            Integer timeout = config.token.refreshTimeout.get();\n+\n+            if (now - iat >= timeout) {\n+                String sub = tokenJson.getString(\"sub\");\n+\n+                TokenEntry entry = refreshingTokens.computeIfAbsent(sub,\n+                        new Function<String, TokenEntry>() {\n+                            @Override\n+                            public TokenEntry apply(String token) {\n+                                return new TokenEntry(refreshToken);\n+                            }\n+                        });\n+\n+                // synchronize on the entry associated with the current subject\n+                synchronized (entry) {\n+                    Uni<SecurityIdentity> cf = Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                        @Override\n+                        public void accept(UniEmitter<? super SecurityIdentity> emitter) {\n+                            OAuth2TokenImpl token = new OAuth2TokenImpl(configContext.auth, new JsonObject());\n+\n+                            // always get the last token\n+                            token.principal().put(\"refresh_token\", entry.getToken());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1051986b26679a9f5a0d02854b06cdbcf7968f42"}, "originalPosition": 282}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg5NzMyOQ==", "bodyText": "Yes. I don't think we need to control whether or not a refresh already happened but just get the latest.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r407897329", "createdAt": "2020-04-14T06:34:14Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -301,4 +351,114 @@ private void removeCookie(RoutingContext context, TenantConfigContext configCont\n             }\n         }\n     }\n+\n+    private boolean isLogout(RoutingContext context, TenantConfigContext configContext) {\n+        Optional<String> logoutPath = configContext.oidcConfig.logout.path;\n+\n+        if (logoutPath.isPresent()) {\n+            return context.request().absoluteURI().equals(\n+                    buildUri(context, logoutPath.get()));\n+        }\n+\n+        return false;\n+    }\n+\n+    private SecurityIdentity trySilentRefresh(TenantConfigContext configContext, String idToken, String refreshToken,\n+            RoutingContext context, IdentityProviderManager identityProviderManager) {\n+        OidcTenantConfig config = configContext.oidcConfig;\n+\n+        if (config.token.refreshTimeout.isPresent()) {\n+            OAuth2AuthProviderImpl auth = ((OAuth2AuthProviderImpl) configContext.auth);\n+            JWT jwt = auth.getJWT();\n+            JsonObject tokenJson;\n+\n+            try {\n+                tokenJson = jwt.decode(idToken);\n+            } catch (Exception cause) {\n+                throw new AuthenticationCompletionException(cause);\n+            }\n+\n+            Long iat = tokenJson.getLong(\"iat\");\n+            long now = System.currentTimeMillis() / 1000;\n+            Integer timeout = config.token.refreshTimeout.get();\n+\n+            if (now - iat >= timeout) {\n+                String sub = tokenJson.getString(\"sub\");\n+\n+                TokenEntry entry = refreshingTokens.computeIfAbsent(sub,\n+                        new Function<String, TokenEntry>() {\n+                            @Override\n+                            public TokenEntry apply(String token) {\n+                                return new TokenEntry(refreshToken);\n+                            }\n+                        });\n+\n+                // synchronize on the entry associated with the current subject\n+                synchronized (entry) {\n+                    Uni<SecurityIdentity> cf = Uni.createFrom().emitter(new Consumer<UniEmitter<? super SecurityIdentity>>() {\n+                        @Override\n+                        public void accept(UniEmitter<? super SecurityIdentity> emitter) {\n+                            OAuth2TokenImpl token = new OAuth2TokenImpl(configContext.auth, new JsonObject());\n+\n+                            // always get the last token\n+                            token.principal().put(\"refresh_token\", entry.getToken());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgzOTI1MA=="}, "originalCommit": {"oid": "1051986b26679a9f5a0d02854b06cdbcf7968f42"}, "originalPosition": 282}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzAyNTgwOnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTo0ODozNVrOGFG3Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDoyOTo0M1rOGFRcMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwODUwMg==", "bodyText": "Pretty sure now this should be AuthenticationCompletionException to get 401 out if it is something anything but expiry related.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r408008502", "createdAt": "2020-04-14T09:48:35Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -66,23 +73,56 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public Uni<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public Uni<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n             return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n                     .map(new Function<SecurityIdentity, SecurityIdentity>() {\n                         @Override\n-                        public SecurityIdentity apply(SecurityIdentity securityIdentity) {\n-                            return augmentIdentity(securityIdentity, tokens[1], tokens[2], context);\n+                        public SecurityIdentity apply(SecurityIdentity identity) {\n+                            if (isLogout(context, configContext)) {\n+                                throw redirectToLogoutEndpoint(context, configContext, idToken);\n+                            }\n+\n+                            return augmentIdentity(identity, accessToken, refreshToken, context);\n+                        }\n+                    }).on().failure().recoverWithItem(new Function<Throwable, SecurityIdentity>() {\n+                        @Override\n+                        public SecurityIdentity apply(Throwable throwable) {\n+                            if (throwable instanceof AuthenticationRedirectException) {\n+                                throw AuthenticationRedirectException.class.cast(throwable);\n+                            }\n+\n+                            Throwable cause = throwable.getCause();\n+\n+                            // we should have proper exception hierarchy to represent token expiration errors\n+                            if (cause != null && !cause.getMessage().equalsIgnoreCase(\"expired token\")) {\n+                                throw new AuthenticationFailedException(throwable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc99ef40252c902ff133064c64f09999e13fe871"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4MTgwOA==", "bodyText": "I think I see what you want. Avoid redirects in case of \"unknown\" failures. Will change.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r408181808", "createdAt": "2020-04-14T14:29:43Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -66,23 +73,56 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                     public Uni<Boolean> apply(Permission permission) {\n                         return securityIdentity.checkPermission(permission);\n                     }\n-                })\n-                .build();\n+                }).build();\n     }\n \n     public Uni<SecurityIdentity> authenticate(RoutingContext context,\n             IdentityProviderManager identityProviderManager,\n             DefaultTenantConfigResolver resolver) {\n         Cookie sessionCookie = context.request().getCookie(SESSION_COOKIE_NAME);\n+        TenantConfigContext configContext = resolver.resolve(context, true);\n \n         // if session already established, try to re-authenticate\n         if (sessionCookie != null) {\n             String[] tokens = sessionCookie.getValue().split(COOKIE_DELIM);\n+            String idToken = tokens[0];\n+            String accessToken = tokens[1];\n+            String refreshToken = tokens[2];\n+\n             return authenticate(identityProviderManager, new IdTokenCredential(tokens[0], context))\n                     .map(new Function<SecurityIdentity, SecurityIdentity>() {\n                         @Override\n-                        public SecurityIdentity apply(SecurityIdentity securityIdentity) {\n-                            return augmentIdentity(securityIdentity, tokens[1], tokens[2], context);\n+                        public SecurityIdentity apply(SecurityIdentity identity) {\n+                            if (isLogout(context, configContext)) {\n+                                throw redirectToLogoutEndpoint(context, configContext, idToken);\n+                            }\n+\n+                            return augmentIdentity(identity, accessToken, refreshToken, context);\n+                        }\n+                    }).on().failure().recoverWithItem(new Function<Throwable, SecurityIdentity>() {\n+                        @Override\n+                        public SecurityIdentity apply(Throwable throwable) {\n+                            if (throwable instanceof AuthenticationRedirectException) {\n+                                throw AuthenticationRedirectException.class.cast(throwable);\n+                            }\n+\n+                            Throwable cause = throwable.getCause();\n+\n+                            // we should have proper exception hierarchy to represent token expiration errors\n+                            if (cause != null && !cause.getMessage().equalsIgnoreCase(\"expired token\")) {\n+                                throw new AuthenticationFailedException(throwable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwODUwMg=="}, "originalCommit": {"oid": "fc99ef40252c902ff133064c64f09999e13fe871"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzA2OTExOnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/DefaultTenantConfigResolver.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTo1OTozNVrOGFHR0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzo1MToyMFrOGFaLjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxNTMxNA==", "bodyText": "@pedroigor But what if the refresh is never even utilized ? Example the user will logout manually before the refresh is even needed ? I wonder if what Stuart said can be done somehow, switch to the blocking mode dynamically only for refresh.\n@stuartwdouglas As Pedro said, the blocking vs event loop decision is done early, but we don't even know if refresh will be needed for a current request at that stage, is it possible to switch back to the blocking mode when the request is already running in the even loop ?", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r408015314", "createdAt": "2020-04-14T09:59:35Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/DefaultTenantConfigResolver.java", "diffHunk": "@@ -81,7 +81,14 @@ private TenantConfigContext getTenantConfigFromTenantResolver(RoutingContext con\n     }\n \n     boolean isBlocking(RoutingContext context) {\n-        return getTenantConfigFromConfigResolver(context, false) == null;\n+        TenantConfigContext resolver = getTenantConfigFromConfigResolver(context, false);\n+\n+        if (resolver != null) {\n+            // we always run blocking if refresh token is enabled even if the tenant was already resolved", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc99ef40252c902ff133064c64f09999e13fe871"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4MzQwNA==", "bodyText": "I would say that it would be nice to have a way to run blocking operations from a mechanism just like we have for identity providers.\nHowever, for this particular issue, I think we can leave as is and handle it separately. Probably in conjunction with the issue I mentioned when Vert.x OAuth is operating in the event loop.", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r408183404", "createdAt": "2020-04-14T14:31:42Z", "author": {"login": "pedroigor"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/DefaultTenantConfigResolver.java", "diffHunk": "@@ -81,7 +81,14 @@ private TenantConfigContext getTenantConfigFromTenantResolver(RoutingContext con\n     }\n \n     boolean isBlocking(RoutingContext context) {\n-        return getTenantConfigFromConfigResolver(context, false) == null;\n+        TenantConfigContext resolver = getTenantConfigFromConfigResolver(context, false);\n+\n+        if (resolver != null) {\n+            // we always run blocking if refresh token is enabled even if the tenant was already resolved", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxNTMxNA=="}, "originalCommit": {"oid": "fc99ef40252c902ff133064c64f09999e13fe871"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMyNTAwNw==", "bodyText": "@pedroigor Absolutely, better handling of the blocking calls can be done later, but here it looks like the request becomes blocking even if no refresh will be done for the current call. But the refresh is healthy to have for every deployment anyway, but as soon as they set this property it becomes a performance penalty :-) so I wonder if we can avoid it somehow. Lets see what @stuartwdouglas may suggest", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r408325007", "createdAt": "2020-04-14T17:51:20Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/DefaultTenantConfigResolver.java", "diffHunk": "@@ -81,7 +81,14 @@ private TenantConfigContext getTenantConfigFromTenantResolver(RoutingContext con\n     }\n \n     boolean isBlocking(RoutingContext context) {\n-        return getTenantConfigFromConfigResolver(context, false) == null;\n+        TenantConfigContext resolver = getTenantConfigFromConfigResolver(context, false);\n+\n+        if (resolver != null) {\n+            // we always run blocking if refresh token is enabled even if the tenant was already resolved", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxNTMxNA=="}, "originalCommit": {"oid": "fc99ef40252c902ff133064c64f09999e13fe871"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzA4NTAxOnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMDowMzo1M1rOGFHb_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMDowMzo1M1rOGFHb_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxNzkxOQ==", "bodyText": "@pedroigor Would you like to support the case where no discovery is possible ? We simply add that extra property and check if no discovered path is available. I can do it later though, up to you", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r408017919", "createdAt": "2020-04-14T10:03:53Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcRecorder.java", "diffHunk": "@@ -165,6 +165,27 @@ public void handle(AsyncResult<OAuth2Auth> event) {\n                 });\n \n                 auth = cf.join();\n+\n+                if (!ApplicationType.WEB_APP.equals(oidcConfig.applicationType)) {\n+                    if (oidcConfig.token.refreshTimeout.isPresent()) {\n+                        throw new RuntimeException(\n+                                \"The logout path can only be enabled for \" + ApplicationType.WEB_APP + \" application types\");\n+                    }\n+                    if (oidcConfig.logout.path.isPresent()) {\n+                        throw new RuntimeException(\n+                                \"The logout path can only be enabled for \" + ApplicationType.WEB_APP + \" application types\");\n+                    }\n+                }\n+\n+                String endSessionEndpoint = OAuth2AuthProviderImpl.class.cast(auth).getConfig().getLogoutPath();\n+\n+                if (oidcConfig.logout.path.isPresent()) {\n+                    if (endSessionEndpoint == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc99ef40252c902ff133064c64f09999e13fe871"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzEyMjkzOnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMDoxMzo1MFrOGFHzKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMDoxMzo1MFrOGFHzKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAyMzg1MQ==", "bodyText": "@pedroigor As mentioned earlier, IMHO it would be better if we drop silent and any reference to the logout. We just say something like \"Refresh token timeout in seconds. If enabled, the expired ID token will be refreshed if the difference between the current time and the issued at time is less than this timeout\" (but in a better worded way :-) ). And may be add \" and will invalidate the old sessions at the RP and OP sites.\" or similar as you prefer", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r408023851", "createdAt": "2020-04-14T10:13:50Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java", "diffHunk": "@@ -530,6 +580,14 @@ public static Token fromAudience(String... audience) {\n         @ConfigItem\n         public Optional<String> principalClaim = Optional.empty();\n \n+        /**\n+         * The time, in seconds, that tokens should be silently refreshed so that tokens with no active session at the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc99ef40252c902ff133064c64f09999e13fe871"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzEyODExOnYy", "diffSide": "RIGHT", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMDoxNToxMFrOGFH2dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMDoxNToxMFrOGFH2dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAyNDY5NQ==", "bodyText": "In all other cases we set Optional internally, so just pass Integer", "url": "https://github.com/quarkusio/quarkus/pull/8512#discussion_r408024695", "createdAt": "2020-04-14T10:15:10Z", "author": {"login": "sberyozkin"}, "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcTenantConfig.java", "diffHunk": "@@ -561,6 +619,14 @@ public void setExpirationGrace(int expirationGrace) {\n         public void setPrincipalClaim(String principalClaim) {\n             this.principalClaim = Optional.of(principalClaim);\n         }\n+\n+        public Optional<Integer> getRefreshTimeout() {\n+            return refreshTimeout;\n+        }\n+\n+        public void setRefreshTimeout(Optional<Integer> refreshTimeout) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc99ef40252c902ff133064c64f09999e13fe871"}, "originalPosition": 95}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3459, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}