{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MDIwNDMy", "number": 8695, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMzoyMjoxM1rOEdOEiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjoyNDo1OFrOEeYLJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDc0Njk3OnYy", "diffSide": "RIGHT", "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMzoyMjoxM1rOHIQHew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMzo0OTozN1rOHIRRUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQxNDcxNQ==", "bodyText": "No star imports, please.", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r478414715", "createdAt": "2020-08-27T13:22:13Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -10,20 +10,8 @@\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.LinkedHashSet;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eaef9dc1b740fe67ebe34daf3949938609c87c9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQzMzYxNw==", "bodyText": "Good catch. Huh this should have been gone.", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r478433617", "createdAt": "2020-08-27T13:49:37Z", "author": {"login": "machi1990"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -10,20 +10,8 @@\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.LinkedHashSet;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQxNDcxNQ=="}, "originalCommit": {"oid": "3eaef9dc1b740fe67ebe34daf3949938609c87c9"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDc1MDcxOnYy", "diffSide": "RIGHT", "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMzoyMzoxMVrOHIQJ0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNDo0Mjo1MlrOHITp7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQxNTMxMw==", "bodyText": "I think I would name it JpaModelPersistenceUnitMappingBuildItem.\nAlso I already built something here to push it to the JPAConfig: https://github.com/quarkusio/quarkus/blob/master/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java#L455 so I don't think we should build it again .\nIt's not perfect either as we can't really properly deal with XML descriptors but I think it's good enough for what we want.", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r478415313", "createdAt": "2020-08-27T13:23:11Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -255,7 +243,8 @@ public void configurationDescriptorBuilding(\n             BuildProducer<SystemPropertyBuildItem> systemProperties,\n             BuildProducer<NativeImageResourceBuildItem> nativeImageResources,\n             BuildProducer<HotDeploymentWatchedFileBuildItem> hotDeploymentWatchedFiles,\n-            BuildProducer<PersistenceUnitDescriptorBuildItem> persistenceUnitDescriptors) {\n+            BuildProducer<PersistenceUnitDescriptorBuildItem> persistenceUnitDescriptors,\n+            BuildProducer<JpaEntityPerPersistenceUnitsBuildItem> jpaEntitiesPerPersistenceUnits) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eaef9dc1b740fe67ebe34daf3949938609c87c9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ0MTE5NQ==", "bodyText": "I think I would name it JpaModelPersistenceUnitMappingBuildItem.\nAlso I already built something here to push it to the JPAConfig: https://github.com/quarkusio/quarkus/blob/master/extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java#L455 so I don't think we should build it again .\n\nAh that's better, for some reason I missed this. I'd re-use this.\n\nIt's not perfect either as we can't really properly deal with XML descriptors but I think it's good enough for what we want.\n\nIn case of XML descriptors, what is the best way to deal with them? Should we use the default PU or ?\nUpdate: I think I've an answer for that.", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r478441195", "createdAt": "2020-08-27T13:59:52Z", "author": {"login": "machi1990"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -255,7 +243,8 @@ public void configurationDescriptorBuilding(\n             BuildProducer<SystemPropertyBuildItem> systemProperties,\n             BuildProducer<NativeImageResourceBuildItem> nativeImageResources,\n             BuildProducer<HotDeploymentWatchedFileBuildItem> hotDeploymentWatchedFiles,\n-            BuildProducer<PersistenceUnitDescriptorBuildItem> persistenceUnitDescriptors) {\n+            BuildProducer<PersistenceUnitDescriptorBuildItem> persistenceUnitDescriptors,\n+            BuildProducer<JpaEntityPerPersistenceUnitsBuildItem> jpaEntitiesPerPersistenceUnits) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQxNTMxMw=="}, "originalCommit": {"oid": "3eaef9dc1b740fe67ebe34daf3949938609c87c9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ1MjAzNg==", "bodyText": "Well, have a look if it works or not but I think you won't have the entities in the descriptors (except the ones listed explicitly in the XML).\nFrankly, I think we don't really care, at least not in this first version of the multi-persistence unit support.", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r478452036", "createdAt": "2020-08-27T14:14:47Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -255,7 +243,8 @@ public void configurationDescriptorBuilding(\n             BuildProducer<SystemPropertyBuildItem> systemProperties,\n             BuildProducer<NativeImageResourceBuildItem> nativeImageResources,\n             BuildProducer<HotDeploymentWatchedFileBuildItem> hotDeploymentWatchedFiles,\n-            BuildProducer<PersistenceUnitDescriptorBuildItem> persistenceUnitDescriptors) {\n+            BuildProducer<PersistenceUnitDescriptorBuildItem> persistenceUnitDescriptors,\n+            BuildProducer<JpaEntityPerPersistenceUnitsBuildItem> jpaEntitiesPerPersistenceUnits) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQxNTMxMw=="}, "originalCommit": {"oid": "3eaef9dc1b740fe67ebe34daf3949938609c87c9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ3MjY4Ng==", "bodyText": "Okay.", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r478472686", "createdAt": "2020-08-27T14:42:52Z", "author": {"login": "machi1990"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -255,7 +243,8 @@ public void configurationDescriptorBuilding(\n             BuildProducer<SystemPropertyBuildItem> systemProperties,\n             BuildProducer<NativeImageResourceBuildItem> nativeImageResources,\n             BuildProducer<HotDeploymentWatchedFileBuildItem> hotDeploymentWatchedFiles,\n-            BuildProducer<PersistenceUnitDescriptorBuildItem> persistenceUnitDescriptors) {\n+            BuildProducer<PersistenceUnitDescriptorBuildItem> persistenceUnitDescriptors,\n+            BuildProducer<JpaEntityPerPersistenceUnitsBuildItem> jpaEntitiesPerPersistenceUnits) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQxNTMxMw=="}, "originalCommit": {"oid": "3eaef9dc1b740fe67ebe34daf3949938609c87c9"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDc5MzI2OnYy", "diffSide": "RIGHT", "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/JpaEntityPerPersistenceUnitsBuildItem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMzozMjo1N1rOHIQj6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMzozMjo1N1rOHIQj6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQyMTk5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Internal model to hold a Jpa entity to its corresponding persistence units.\n          \n          \n            \n             * Internal model to hold the mapping linking a JPA entity to its corresponding persistence units.", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r478421994", "createdAt": "2020-08-27T13:32:57Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/JpaEntityPerPersistenceUnitsBuildItem.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.quarkus.hibernate.orm.deployment;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.quarkus.builder.item.SimpleBuildItem;\n+\n+/**\n+ * Internal model to hold a Jpa entity to its corresponding persistence units.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eaef9dc1b740fe67ebe34daf3949938609c87c9"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDc5NDk0OnYy", "diffSide": "RIGHT", "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/JpaEntityPerPersistenceUnitsBuildItem.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMzozMzoxOVrOHIQk6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMzo1MDo0OFrOHIRU3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQyMjI1MQ==", "bodyText": "Maybe make it an unmodifiableMap?", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r478422251", "createdAt": "2020-08-27T13:33:19Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/JpaEntityPerPersistenceUnitsBuildItem.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.quarkus.hibernate.orm.deployment;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.quarkus.builder.item.SimpleBuildItem;\n+\n+/**\n+ * Internal model to hold a Jpa entity to its corresponding persistence units.\n+ */\n+public final class JpaEntityPerPersistenceUnitsBuildItem extends SimpleBuildItem {\n+\n+    private final Map<String, List<String>> entityToPersistenceUnits;\n+\n+    public JpaEntityPerPersistenceUnitsBuildItem(Map<String, List<String>> entityToPersistenceUnits) {\n+        this.entityToPersistenceUnits = entityToPersistenceUnits;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eaef9dc1b740fe67ebe34daf3949938609c87c9"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQzNDUyNg==", "bodyText": "Sure.", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r478434526", "createdAt": "2020-08-27T13:50:48Z", "author": {"login": "machi1990"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/JpaEntityPerPersistenceUnitsBuildItem.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.quarkus.hibernate.orm.deployment;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.quarkus.builder.item.SimpleBuildItem;\n+\n+/**\n+ * Internal model to hold a Jpa entity to its corresponding persistence units.\n+ */\n+public final class JpaEntityPerPersistenceUnitsBuildItem extends SimpleBuildItem {\n+\n+    private final Map<String, List<String>> entityToPersistenceUnits;\n+\n+    public JpaEntityPerPersistenceUnitsBuildItem(Map<String, List<String>> entityToPersistenceUnits) {\n+        this.entityToPersistenceUnits = entityToPersistenceUnits;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQyMjI1MQ=="}, "originalCommit": {"oid": "3eaef9dc1b740fe67ebe34daf3949938609c87c9"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDgwODk2OnYy", "diffSide": "RIGHT", "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheResourceProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMzozNjo0MFrOHIQtlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMzozNjo0MFrOHIQtlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQyNDQ3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    \"PanacheEntity '%s' cannot be defined for usage in 'several persistence unit. The following persistence units were found %s'\",\n          \n          \n            \n                                    \"PanacheEntity '%s' cannot be defined for usage in several persistence units. The following persistence units were found: %s.\",", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r478424470", "createdAt": "2020-08-27T13:36:40Z", "author": {"login": "gsmet"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheResourceProcessor.java", "diffHunk": "@@ -185,5 +201,24 @@ void build(CombinedIndexBuildItem index,\n                 }\n             }\n         }\n+\n+        Map<String, List<String>> collectedEntityToPersistenceUnits = new HashMap<>();\n+        if (entityPerPersistenceUnits.isPresent()) {\n+            collectedEntityToPersistenceUnits = entityPerPersistenceUnits.get().getEntityToPersistenceUnits();\n+        }\n+\n+        for (Map.Entry<String, List<String>> entry : collectedEntityToPersistenceUnits.entrySet()) {\n+            String entityName = entry.getKey();\n+            List<String> selectedPersistenceUnits = entry.getValue();\n+            boolean isPanacheEntity = modelClasses.stream().anyMatch(name -> name.equals(entityName));\n+            if (selectedPersistenceUnits.size() > 1 && isPanacheEntity) {\n+                throw new IllegalStateException(String.format(\n+                        \"PanacheEntity '%s' cannot be defined for usage in 'several persistence unit. The following persistence units were found %s'\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eaef9dc1b740fe67ebe34daf3949938609c87c9"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDgxNTI3OnYy", "diffSide": "RIGHT", "path": "extensions/panache/hibernate-orm-panache/deployment/src/main/java/io/quarkus/hibernate/orm/panache/deployment/PanacheHibernateResourceProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMzozODoxMVrOHIQxgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMzozODoxMVrOHIQxgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQyNTQ3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        \"PanacheEntity '%s' cannot be defined for usage in 'several persistence unit. The following persistence units were found %s'\",\n          \n          \n            \n                                        \"PanacheEntity '%s' cannot be defined for usage in several persistence units. The following persistence units were found: %s.\",", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r478425472", "createdAt": "2020-08-27T13:38:11Z", "author": {"login": "gsmet"}, "path": "extensions/panache/hibernate-orm-panache/deployment/src/main/java/io/quarkus/hibernate/orm/panache/deployment/PanacheHibernateResourceProcessor.java", "diffHunk": "@@ -194,4 +202,31 @@ void build(CombinedIndexBuildItem index,\n         }\n         return null;\n     }\n+\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    void persistenceUnits(PanacheHibernateOrmRecorder recorder,\n+            Optional<JpaEntityPerPersistenceUnitsBuildItem> entityPerPersistenceUnits,\n+            List<PanacheEntityClassBuildItem> entityClasses) {\n+        Map<String, String> panacheEntityToPersistenceUnit = new HashMap<>();\n+        if (entityPerPersistenceUnits.isPresent()) {\n+            Map<String, List<String>> collectedEntityToPersistenceUnits = entityPerPersistenceUnits.get()\n+                    .getEntityToPersistenceUnits();\n+            for (Map.Entry<String, List<String>> entry : collectedEntityToPersistenceUnits.entrySet()) {\n+                String entityName = entry.getKey();\n+                List<String> selectedPersistenceUnits = entry.getValue();\n+                boolean isPanacheEntity = entityClasses.stream()\n+                        .anyMatch(entity -> entity.get().name().toString().equals(entityName));\n+\n+                if (selectedPersistenceUnits.size() > 1 && isPanacheEntity) {\n+                    throw new IllegalStateException(String.format(\n+                            \"PanacheEntity '%s' cannot be defined for usage in 'several persistence unit. The following persistence units were found %s'\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eaef9dc1b740fe67ebe34daf3949938609c87c9"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDgxNzQ4OnYy", "diffSide": "RIGHT", "path": "extensions/panache/hibernate-orm-panache/deployment/src/main/java/io/quarkus/hibernate/orm/panache/deployment/PanacheHibernateResourceProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMzozODo0M1rOHIQy-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNDoxNjowOFrOHISc_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQyNTg0OA==", "bodyText": "Also it's not very clear in the message that this is not supported.", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r478425848", "createdAt": "2020-08-27T13:38:43Z", "author": {"login": "gsmet"}, "path": "extensions/panache/hibernate-orm-panache/deployment/src/main/java/io/quarkus/hibernate/orm/panache/deployment/PanacheHibernateResourceProcessor.java", "diffHunk": "@@ -194,4 +202,31 @@ void build(CombinedIndexBuildItem index,\n         }\n         return null;\n     }\n+\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    void persistenceUnits(PanacheHibernateOrmRecorder recorder,\n+            Optional<JpaEntityPerPersistenceUnitsBuildItem> entityPerPersistenceUnits,\n+            List<PanacheEntityClassBuildItem> entityClasses) {\n+        Map<String, String> panacheEntityToPersistenceUnit = new HashMap<>();\n+        if (entityPerPersistenceUnits.isPresent()) {\n+            Map<String, List<String>> collectedEntityToPersistenceUnits = entityPerPersistenceUnits.get()\n+                    .getEntityToPersistenceUnits();\n+            for (Map.Entry<String, List<String>> entry : collectedEntityToPersistenceUnits.entrySet()) {\n+                String entityName = entry.getKey();\n+                List<String> selectedPersistenceUnits = entry.getValue();\n+                boolean isPanacheEntity = entityClasses.stream()\n+                        .anyMatch(entity -> entity.get().name().toString().equals(entityName));\n+\n+                if (selectedPersistenceUnits.size() > 1 && isPanacheEntity) {\n+                    throw new IllegalStateException(String.format(\n+                            \"PanacheEntity '%s' cannot be defined for usage in 'several persistence unit. The following persistence units were found %s'\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eaef9dc1b740fe67ebe34daf3949938609c87c9"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ1Mjk5MA==", "bodyText": "Added a few words about this.", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r478452990", "createdAt": "2020-08-27T14:16:08Z", "author": {"login": "machi1990"}, "path": "extensions/panache/hibernate-orm-panache/deployment/src/main/java/io/quarkus/hibernate/orm/panache/deployment/PanacheHibernateResourceProcessor.java", "diffHunk": "@@ -194,4 +202,31 @@ void build(CombinedIndexBuildItem index,\n         }\n         return null;\n     }\n+\n+    @BuildStep\n+    @Record(ExecutionTime.STATIC_INIT)\n+    void persistenceUnits(PanacheHibernateOrmRecorder recorder,\n+            Optional<JpaEntityPerPersistenceUnitsBuildItem> entityPerPersistenceUnits,\n+            List<PanacheEntityClassBuildItem> entityClasses) {\n+        Map<String, String> panacheEntityToPersistenceUnit = new HashMap<>();\n+        if (entityPerPersistenceUnits.isPresent()) {\n+            Map<String, List<String>> collectedEntityToPersistenceUnits = entityPerPersistenceUnits.get()\n+                    .getEntityToPersistenceUnits();\n+            for (Map.Entry<String, List<String>> entry : collectedEntityToPersistenceUnits.entrySet()) {\n+                String entityName = entry.getKey();\n+                List<String> selectedPersistenceUnits = entry.getValue();\n+                boolean isPanacheEntity = entityClasses.stream()\n+                        .anyMatch(entity -> entity.get().name().toString().equals(entityName));\n+\n+                if (selectedPersistenceUnits.size() > 1 && isPanacheEntity) {\n+                    throw new IllegalStateException(String.format(\n+                            \"PanacheEntity '%s' cannot be defined for usage in 'several persistence unit. The following persistence units were found %s'\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQyNTg0OA=="}, "originalCommit": {"oid": "3eaef9dc1b740fe67ebe34daf3949938609c87c9"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDgzNTAxOnYy", "diffSide": "RIGHT", "path": "extensions/panache/hibernate-orm-panache/runtime/src/main/java/io/quarkus/hibernate/orm/panache/runtime/JpaOperations.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMzo0MjoyNFrOHIQ9Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxOTo0OToyNlrOHIe6Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQyODQ2Mg==", "bodyText": "Shouldn't we only flush the entityManager of the entity?", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r478428462", "createdAt": "2020-08-27T13:42:24Z", "author": {"login": "gsmet"}, "path": "extensions/panache/hibernate-orm-panache/runtime/src/main/java/io/quarkus/hibernate/orm/panache/runtime/JpaOperations.java", "diffHunk": "@@ -71,16 +85,31 @@ public static boolean isPersistent(Object entity) {\n     }\n \n     public static void flush() {\n-        delegate.flush();\n+        Set<String> values = new HashSet<>(entityToPersistenceUnit.values());\n+        for (String persistentUnit : values) {\n+            getEntityManager(persistentUnit).flush();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eaef9dc1b740fe67ebe34daf3949938609c87c9"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQzNzUxMw==", "bodyText": "Yes, this is already done for https://github.com/quarkusio/quarkus/pull/8695/files#diff-2fcdac996e03f2fce93a3bc400488d93R70\nThe method is poorly named. I think it should be flushAll, there is a TODO comment in the code.\nhttps://github.com/quarkusio/quarkus/pull/8695/files#diff-2fcdac996e03f2fce93a3bc400488d93R103", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r478437513", "createdAt": "2020-08-27T13:54:51Z", "author": {"login": "machi1990"}, "path": "extensions/panache/hibernate-orm-panache/runtime/src/main/java/io/quarkus/hibernate/orm/panache/runtime/JpaOperations.java", "diffHunk": "@@ -71,16 +85,31 @@ public static boolean isPersistent(Object entity) {\n     }\n \n     public static void flush() {\n-        delegate.flush();\n+        Set<String> values = new HashSet<>(entityToPersistenceUnit.values());\n+        for (String persistentUnit : values) {\n+            getEntityManager(persistentUnit).flush();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQyODQ2Mg=="}, "originalCommit": {"oid": "3eaef9dc1b740fe67ebe34daf3949938609c87c9"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQzODI3NQ==", "bodyText": "Or maybe I am missing something.", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r478438275", "createdAt": "2020-08-27T13:55:50Z", "author": {"login": "machi1990"}, "path": "extensions/panache/hibernate-orm-panache/runtime/src/main/java/io/quarkus/hibernate/orm/panache/runtime/JpaOperations.java", "diffHunk": "@@ -71,16 +85,31 @@ public static boolean isPersistent(Object entity) {\n     }\n \n     public static void flush() {\n-        delegate.flush();\n+        Set<String> values = new HashSet<>(entityToPersistenceUnit.values());\n+        for (String persistentUnit : values) {\n+            getEntityManager(persistentUnit).flush();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQyODQ2Mg=="}, "originalCommit": {"oid": "3eaef9dc1b740fe67ebe34daf3949938609c87c9"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ1MTAyNQ==", "bodyText": "Hmmm, I think the comment is on the wrong method then.\nI think I would make flush() only flush the default persistence unit similar to what you did with other methods that are targeting the default if used without a parameter.", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r478451025", "createdAt": "2020-08-27T14:13:22Z", "author": {"login": "gsmet"}, "path": "extensions/panache/hibernate-orm-panache/runtime/src/main/java/io/quarkus/hibernate/orm/panache/runtime/JpaOperations.java", "diffHunk": "@@ -71,16 +85,31 @@ public static boolean isPersistent(Object entity) {\n     }\n \n     public static void flush() {\n-        delegate.flush();\n+        Set<String> values = new HashSet<>(entityToPersistenceUnit.values());\n+        for (String persistentUnit : values) {\n+            getEntityManager(persistentUnit).flush();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQyODQ2Mg=="}, "originalCommit": {"oid": "3eaef9dc1b740fe67ebe34daf3949938609c87c9"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ4NTM3NQ==", "bodyText": "So there are two methods:\n\nJpaOperations.flush(entity): this only flush the EntityManager of the entity\nJpaOperations.flush(): This flushes all the EntityManager. I was thinking that this one could be renamed to something like flushAll(), and certainly did not want to embark myself on that \"refactoring things\" journey.", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r478485375", "createdAt": "2020-08-27T14:59:32Z", "author": {"login": "machi1990"}, "path": "extensions/panache/hibernate-orm-panache/runtime/src/main/java/io/quarkus/hibernate/orm/panache/runtime/JpaOperations.java", "diffHunk": "@@ -71,16 +85,31 @@ public static boolean isPersistent(Object entity) {\n     }\n \n     public static void flush() {\n-        delegate.flush();\n+        Set<String> values = new HashSet<>(entityToPersistenceUnit.values());\n+        for (String persistentUnit : values) {\n+            getEntityManager(persistentUnit).flush();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQyODQ2Mg=="}, "originalCommit": {"oid": "3eaef9dc1b740fe67ebe34daf3949938609c87c9"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU3NDMwOA==", "bodyText": "I would keep the current behavior and flush the default entity manager.\nWe can add a flushAll later if someone asks for it.", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r478574308", "createdAt": "2020-08-27T17:16:32Z", "author": {"login": "gsmet"}, "path": "extensions/panache/hibernate-orm-panache/runtime/src/main/java/io/quarkus/hibernate/orm/panache/runtime/JpaOperations.java", "diffHunk": "@@ -71,16 +85,31 @@ public static boolean isPersistent(Object entity) {\n     }\n \n     public static void flush() {\n-        delegate.flush();\n+        Set<String> values = new HashSet<>(entityToPersistenceUnit.values());\n+        for (String persistentUnit : values) {\n+            getEntityManager(persistentUnit).flush();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQyODQ2Mg=="}, "originalCommit": {"oid": "3eaef9dc1b740fe67ebe34daf3949938609c87c9"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY0ODg0Mg==", "bodyText": "Sure.", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r478648842", "createdAt": "2020-08-27T19:33:32Z", "author": {"login": "machi1990"}, "path": "extensions/panache/hibernate-orm-panache/runtime/src/main/java/io/quarkus/hibernate/orm/panache/runtime/JpaOperations.java", "diffHunk": "@@ -71,16 +85,31 @@ public static boolean isPersistent(Object entity) {\n     }\n \n     public static void flush() {\n-        delegate.flush();\n+        Set<String> values = new HashSet<>(entityToPersistenceUnit.values());\n+        for (String persistentUnit : values) {\n+            getEntityManager(persistentUnit).flush();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQyODQ2Mg=="}, "originalCommit": {"oid": "3eaef9dc1b740fe67ebe34daf3949938609c87c9"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY1NzAzOQ==", "bodyText": "@gsmet this is now done.", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r478657039", "createdAt": "2020-08-27T19:49:26Z", "author": {"login": "machi1990"}, "path": "extensions/panache/hibernate-orm-panache/runtime/src/main/java/io/quarkus/hibernate/orm/panache/runtime/JpaOperations.java", "diffHunk": "@@ -71,16 +85,31 @@ public static boolean isPersistent(Object entity) {\n     }\n \n     public static void flush() {\n-        delegate.flush();\n+        Set<String> values = new HashSet<>(entityToPersistenceUnit.values());\n+        for (String persistentUnit : values) {\n+            getEntityManager(persistentUnit).flush();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQyODQ2Mg=="}, "originalCommit": {"oid": "3eaef9dc1b740fe67ebe34daf3949938609c87c9"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDg1Nzk5OnYy", "diffSide": "RIGHT", "path": "extensions/panache/hibernate-orm-panache-kotlin/runtime/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/runtime/JpaOperations.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMzo0NzozNVrOHIRLmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNDo0MDo1NlrOHITkPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQzMjE1Mw==", "bodyText": "I wonder if we could avoid a lot of overhead by having a generated method in the PanacheEntity/Repository return a static Literal for consumption by CDI.\nIt would avoid the overhead of the map lookup and would also avoid the overhead of instantiating a new Literal each time we want to the get EntityManager.\nI'm not that versed into Panache so it might just be a crazy idea.", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r478432153", "createdAt": "2020-08-27T13:47:35Z", "author": {"login": "gsmet"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/runtime/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/runtime/JpaOperations.java", "diffHunk": "@@ -307,6 +330,13 @@ public static int update(Class<?> entityClass, String query, Object... params) {\n             return query.stream();\n         }\n \n+        @Override\n+        public EntityManager getEntityManager(Class<?> clazz) {\n+            String clazzName = clazz.getName();\n+            String persistentUnitName = entityToPersistenceUnit.get(clazzName);\n+            return super.getEntityManager(persistentUnitName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eaef9dc1b740fe67ebe34daf3949938609c87c9"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQzOTAwNQ==", "bodyText": "Ah that's something I never thought of. This way seemed easier for me. I can look at that idea.", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r478439005", "createdAt": "2020-08-27T13:56:52Z", "author": {"login": "machi1990"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/runtime/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/runtime/JpaOperations.java", "diffHunk": "@@ -307,6 +330,13 @@ public static int update(Class<?> entityClass, String query, Object... params) {\n             return query.stream();\n         }\n \n+        @Override\n+        public EntityManager getEntityManager(Class<?> clazz) {\n+            String clazzName = clazz.getName();\n+            String persistentUnitName = entityToPersistenceUnit.get(clazzName);\n+            return super.getEntityManager(persistentUnitName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQzMjE1Mw=="}, "originalCommit": {"oid": "3eaef9dc1b740fe67ebe34daf3949938609c87c9"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ0NTA5MA==", "bodyText": "And for the default one, we would use javax.enterprise.inject.Default.Literal.INSTANCE.", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r478445090", "createdAt": "2020-08-27T14:05:22Z", "author": {"login": "gsmet"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/runtime/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/runtime/JpaOperations.java", "diffHunk": "@@ -307,6 +330,13 @@ public static int update(Class<?> entityClass, String query, Object... params) {\n             return query.stream();\n         }\n \n+        @Override\n+        public EntityManager getEntityManager(Class<?> clazz) {\n+            String clazzName = clazz.getName();\n+            String persistentUnitName = entityToPersistenceUnit.get(clazzName);\n+            return super.getEntityManager(persistentUnitName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQzMjE1Mw=="}, "originalCommit": {"oid": "3eaef9dc1b740fe67ebe34daf3949938609c87c9"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ1NDk2Ng==", "bodyText": "Maybe let's get this first version in and then we work on a second iteration with code generation?", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r478454966", "createdAt": "2020-08-27T14:18:54Z", "author": {"login": "gsmet"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/runtime/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/runtime/JpaOperations.java", "diffHunk": "@@ -307,6 +330,13 @@ public static int update(Class<?> entityClass, String query, Object... params) {\n             return query.stream();\n         }\n \n+        @Override\n+        public EntityManager getEntityManager(Class<?> clazz) {\n+            String clazzName = clazz.getName();\n+            String persistentUnitName = entityToPersistenceUnit.get(clazzName);\n+            return super.getEntityManager(persistentUnitName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQzMjE1Mw=="}, "originalCommit": {"oid": "3eaef9dc1b740fe67ebe34daf3949938609c87c9"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ1NTQ3OA==", "bodyText": "Depends on how fast you will be but I think Panache generation uses ASM so it won't be fun :).", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r478455478", "createdAt": "2020-08-27T14:19:36Z", "author": {"login": "gsmet"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/runtime/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/runtime/JpaOperations.java", "diffHunk": "@@ -307,6 +330,13 @@ public static int update(Class<?> entityClass, String query, Object... params) {\n             return query.stream();\n         }\n \n+        @Override\n+        public EntityManager getEntityManager(Class<?> clazz) {\n+            String clazzName = clazz.getName();\n+            String persistentUnitName = entityToPersistenceUnit.get(clazzName);\n+            return super.getEntityManager(persistentUnitName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQzMjE1Mw=="}, "originalCommit": {"oid": "3eaef9dc1b740fe67ebe34daf3949938609c87c9"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ3MTIyOQ==", "bodyText": "Sure, I'll focus on resolving other comments (#8695 (comment)) first.", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r478471229", "createdAt": "2020-08-27T14:40:56Z", "author": {"login": "machi1990"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/runtime/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/runtime/JpaOperations.java", "diffHunk": "@@ -307,6 +330,13 @@ public static int update(Class<?> entityClass, String query, Object... params) {\n             return query.stream();\n         }\n \n+        @Override\n+        public EntityManager getEntityManager(Class<?> clazz) {\n+            String clazzName = clazz.getName();\n+            String persistentUnitName = entityToPersistenceUnit.get(clazzName);\n+            return super.getEntityManager(persistentUnitName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQzMjE1Mw=="}, "originalCommit": {"oid": "3eaef9dc1b740fe67ebe34daf3949938609c87c9"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjIzOTQ1OnYy", "diffSide": "RIGHT", "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheResourceProcessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMzo0OToxMlrOHJ5osg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDoxMDo0MlrOHJ6eNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE0MzUzOA==", "bodyText": "Is this really needed? I would have expected the standard ORM processor to be triggered too? Or am I missing something?", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r480143538", "createdAt": "2020-08-31T13:49:12Z", "author": {"login": "gsmet"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheResourceProcessor.java", "diffHunk": "@@ -185,5 +202,24 @@ void build(CombinedIndexBuildItem index,\n                 }\n             }\n         }\n+\n+        Map<String, Set<String>> collectedEntityToPersistenceUnits = new HashMap<>();\n+        if (jpaModelPersistenceUnitMapping.isPresent()) {\n+            collectedEntityToPersistenceUnits = jpaModelPersistenceUnitMapping.get().getEntityToPersistenceUnits();\n+        }\n+\n+        for (Map.Entry<String, Set<String>> entry : collectedEntityToPersistenceUnits.entrySet()) {\n+            String entityName = entry.getKey();\n+            List<String> selectedPersistenceUnits = new ArrayList<>(entry.getValue());\n+            boolean isPanacheEntity = modelClasses.stream().anyMatch(name -> name.equals(entityName));\n+            if (selectedPersistenceUnits.size() > 1 && isPanacheEntity) {\n+                throw new IllegalStateException(String.format(\n+                        \"PanacheEntity '%s' cannot be defined for usage in several persistence units which is not supported. The following persistence units were found: %s.\",\n+                        entityName, String.join(\",\", selectedPersistenceUnits)));\n+            }\n+\n+            panacheEntityToPersistenceUnit.put(entityName, selectedPersistenceUnits.get(0));\n+        }\n+        recorder.setEntityToPersistenceUnit(panacheEntityToPersistenceUnit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddad5162861d2df759b9276ba534ada1ae069b3c"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE0Mzc2Nw==", "bodyText": "If it's necessary, I will need to make the error message consistent but I would be surprised it is.", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r480143767", "createdAt": "2020-08-31T13:49:35Z", "author": {"login": "gsmet"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheResourceProcessor.java", "diffHunk": "@@ -185,5 +202,24 @@ void build(CombinedIndexBuildItem index,\n                 }\n             }\n         }\n+\n+        Map<String, Set<String>> collectedEntityToPersistenceUnits = new HashMap<>();\n+        if (jpaModelPersistenceUnitMapping.isPresent()) {\n+            collectedEntityToPersistenceUnits = jpaModelPersistenceUnitMapping.get().getEntityToPersistenceUnits();\n+        }\n+\n+        for (Map.Entry<String, Set<String>> entry : collectedEntityToPersistenceUnits.entrySet()) {\n+            String entityName = entry.getKey();\n+            List<String> selectedPersistenceUnits = new ArrayList<>(entry.getValue());\n+            boolean isPanacheEntity = modelClasses.stream().anyMatch(name -> name.equals(entityName));\n+            if (selectedPersistenceUnits.size() > 1 && isPanacheEntity) {\n+                throw new IllegalStateException(String.format(\n+                        \"PanacheEntity '%s' cannot be defined for usage in several persistence units which is not supported. The following persistence units were found: %s.\",\n+                        entityName, String.join(\",\", selectedPersistenceUnits)));\n+            }\n+\n+            panacheEntityToPersistenceUnit.put(entityName, selectedPersistenceUnits.get(0));\n+        }\n+        recorder.setEntityToPersistenceUnit(panacheEntityToPersistenceUnit);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE0MzUzOA=="}, "originalCommit": {"oid": "ddad5162861d2df759b9276ba534ada1ae069b3c"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE0NjEzNA==", "bodyText": "Is this really needed? I would have expected the standard ORM processor to be triggered too? Or am I missing something?\n\nYes, this is needed. The kotlin panache extension does not make use of the hibernate panache extension. They all share a common spi module.", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r480146134", "createdAt": "2020-08-31T13:53:21Z", "author": {"login": "machi1990"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheResourceProcessor.java", "diffHunk": "@@ -185,5 +202,24 @@ void build(CombinedIndexBuildItem index,\n                 }\n             }\n         }\n+\n+        Map<String, Set<String>> collectedEntityToPersistenceUnits = new HashMap<>();\n+        if (jpaModelPersistenceUnitMapping.isPresent()) {\n+            collectedEntityToPersistenceUnits = jpaModelPersistenceUnitMapping.get().getEntityToPersistenceUnits();\n+        }\n+\n+        for (Map.Entry<String, Set<String>> entry : collectedEntityToPersistenceUnits.entrySet()) {\n+            String entityName = entry.getKey();\n+            List<String> selectedPersistenceUnits = new ArrayList<>(entry.getValue());\n+            boolean isPanacheEntity = modelClasses.stream().anyMatch(name -> name.equals(entityName));\n+            if (selectedPersistenceUnits.size() > 1 && isPanacheEntity) {\n+                throw new IllegalStateException(String.format(\n+                        \"PanacheEntity '%s' cannot be defined for usage in several persistence units which is not supported. The following persistence units were found: %s.\",\n+                        entityName, String.join(\",\", selectedPersistenceUnits)));\n+            }\n+\n+            panacheEntityToPersistenceUnit.put(entityName, selectedPersistenceUnits.get(0));\n+        }\n+        recorder.setEntityToPersistenceUnit(panacheEntityToPersistenceUnit);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE0MzUzOA=="}, "originalCommit": {"oid": "ddad5162861d2df759b9276ba534ada1ae069b3c"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE1NzIzOQ==", "bodyText": "Ok, I will adjust the PR then. Running the tests, I will push once they're green.", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r480157239", "createdAt": "2020-08-31T14:10:42Z", "author": {"login": "gsmet"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheResourceProcessor.java", "diffHunk": "@@ -185,5 +202,24 @@ void build(CombinedIndexBuildItem index,\n                 }\n             }\n         }\n+\n+        Map<String, Set<String>> collectedEntityToPersistenceUnits = new HashMap<>();\n+        if (jpaModelPersistenceUnitMapping.isPresent()) {\n+            collectedEntityToPersistenceUnits = jpaModelPersistenceUnitMapping.get().getEntityToPersistenceUnits();\n+        }\n+\n+        for (Map.Entry<String, Set<String>> entry : collectedEntityToPersistenceUnits.entrySet()) {\n+            String entityName = entry.getKey();\n+            List<String> selectedPersistenceUnits = new ArrayList<>(entry.getValue());\n+            boolean isPanacheEntity = modelClasses.stream().anyMatch(name -> name.equals(entityName));\n+            if (selectedPersistenceUnits.size() > 1 && isPanacheEntity) {\n+                throw new IllegalStateException(String.format(\n+                        \"PanacheEntity '%s' cannot be defined for usage in several persistence units which is not supported. The following persistence units were found: %s.\",\n+                        entityName, String.join(\",\", selectedPersistenceUnits)));\n+            }\n+\n+            panacheEntityToPersistenceUnit.put(entityName, selectedPersistenceUnits.get(0));\n+        }\n+        recorder.setEntityToPersistenceUnit(panacheEntityToPersistenceUnit);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE0MzUzOA=="}, "originalCommit": {"oid": "ddad5162861d2df759b9276ba534ada1ae069b3c"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjg4ODA0OnYy", "diffSide": "RIGHT", "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjoyNDo1OFrOHJ_taw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzo0ODozMVrOHKCfdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0MzA1MQ==", "bodyText": "It would probably be better to move this code just below the line below, otherwise we consider the current class too. It's not really a problem but it's less correct.\n@machi1990 I'll wait to see if you have other comments before fixing this.", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r480243051", "createdAt": "2020-08-31T16:24:58Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -956,6 +968,27 @@ private void enhanceEntities(final JpaEntitiesBuildItem domainObjects,\n         return modelClassesPerPersistenceUnits;\n     }\n \n+    private static Set<String> getRelatedModelClassNames(IndexView index, Set<String> knownModelClassNames,\n+            String modelClassName) {\n+        Set<String> relatedModelClassNames = new HashSet<>();\n+        ClassInfo modelClassInfo = index.getClassByName(DotName.createSimple(modelClassName));\n+\n+        // for now we only deal with entities and mapped super classes\n+        if (modelClassInfo.classAnnotation(JPA_ENTITY) == null &&\n+                modelClassInfo.classAnnotation(MAPPED_SUPERCLASS) == null) {\n+            return Collections.emptySet();\n+        }\n+\n+        while (modelClassInfo != null && !modelClassInfo.name().equals(DotNames.OBJECT)) {\n+            if (knownModelClassNames.contains(modelClassName)) {\n+                relatedModelClassNames.add(modelClassInfo.name().toString());\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dd36722844fd3d772d724a0d8373f143aed98ce"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4NzE5OA==", "bodyText": "Just pushed the fix to have CI running this evening.\nFor me it looks ready to go, waiting for your blessing.", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r480287198", "createdAt": "2020-08-31T17:45:46Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -956,6 +968,27 @@ private void enhanceEntities(final JpaEntitiesBuildItem domainObjects,\n         return modelClassesPerPersistenceUnits;\n     }\n \n+    private static Set<String> getRelatedModelClassNames(IndexView index, Set<String> knownModelClassNames,\n+            String modelClassName) {\n+        Set<String> relatedModelClassNames = new HashSet<>();\n+        ClassInfo modelClassInfo = index.getClassByName(DotName.createSimple(modelClassName));\n+\n+        // for now we only deal with entities and mapped super classes\n+        if (modelClassInfo.classAnnotation(JPA_ENTITY) == null &&\n+                modelClassInfo.classAnnotation(MAPPED_SUPERCLASS) == null) {\n+            return Collections.emptySet();\n+        }\n+\n+        while (modelClassInfo != null && !modelClassInfo.name().equals(DotNames.OBJECT)) {\n+            if (knownModelClassNames.contains(modelClassName)) {\n+                relatedModelClassNames.add(modelClassInfo.name().toString());\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0MzA1MQ=="}, "originalCommit": {"oid": "2dd36722844fd3d772d724a0d8373f143aed98ce"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4ODYzMA==", "bodyText": "I was just reviewing this part. The initial version would add the model to the relatedModelClassNames set too. Thanks for taking care of that.", "url": "https://github.com/quarkusio/quarkus/pull/8695#discussion_r480288630", "createdAt": "2020-08-31T17:48:31Z", "author": {"login": "machi1990"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -956,6 +968,27 @@ private void enhanceEntities(final JpaEntitiesBuildItem domainObjects,\n         return modelClassesPerPersistenceUnits;\n     }\n \n+    private static Set<String> getRelatedModelClassNames(IndexView index, Set<String> knownModelClassNames,\n+            String modelClassName) {\n+        Set<String> relatedModelClassNames = new HashSet<>();\n+        ClassInfo modelClassInfo = index.getClassByName(DotName.createSimple(modelClassName));\n+\n+        // for now we only deal with entities and mapped super classes\n+        if (modelClassInfo.classAnnotation(JPA_ENTITY) == null &&\n+                modelClassInfo.classAnnotation(MAPPED_SUPERCLASS) == null) {\n+            return Collections.emptySet();\n+        }\n+\n+        while (modelClassInfo != null && !modelClassInfo.name().equals(DotNames.OBJECT)) {\n+            if (knownModelClassNames.contains(modelClassName)) {\n+                relatedModelClassNames.add(modelClassInfo.name().toString());\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0MzA1MQ=="}, "originalCommit": {"oid": "2dd36722844fd3d772d724a0d8373f143aed98ce"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3386, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}