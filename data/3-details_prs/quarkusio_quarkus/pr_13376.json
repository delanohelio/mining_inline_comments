{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzODc0MzQ5", "number": 13376, "title": "Build time minimum log level", "bodyText": "FAO @dmlloyd @Sanne. This is a follow up to #13102 PR. Closes #12938.\nIt adds a new optional build time per category configuration called min-level. It controls the minimum level of logging defined at build time.\nBy default all categories' min-level is set to INFO, in which case the code generates an substratevm substitution that folds isTraceEnabled and isDebugEnabled calls to return false.\nTo keep things simple, the moment any min-level is configured, a different substitution is created that computes whether a given log level is enabled based on a combination of both the min-level set and the runtime log level. So, as an example, if you want to get TRACE on a given category, say org.example.table, you need to provide both:\n\nBuild time quarkus.log.category.\"org.example.table\".min-level=TRACE\nRun time quarkus.log.category.\"org.example.table\".level=TRACE\n\nWhen deciding the logic \ud83d\udc46, I pondered about the need for the runtime log level to be set, but it felt awkward to have code that had been built with min-level set to TRACE, and runtime log level to be say INFO and for isTraceEnabled to return true but nothing be logged when calling log.trace.\nTo exercise this, I've been using this project to test the behaviour when no min-level has been set, and this other with the example above. I'd like to convert these two into Quarkus integration tests, but first I'd like to make sure we have agreement on the logic.\nFurther optimisations are also applicable:\n\nIf all min-level set in config are INFO or above, the same logic as with no min-level set could be applied. The moment min-level is configured, the current logic does attempt to fold any calls.\nIf all min-level set in config are WARN or above and the logic in \ud83d\udc46 was applied, one could also fold isInfoEnabled calls to false.\n\nUnit testing wise, I had the following doubt: to test both the branches of the logic (no min-level set and a min-level set to TRACE or some other), it seems to me that I'd need 2 maven integration test projects. Is that right? Could it be somehow done in a single one? Not sure...\nAside from unit testing, and possible further optimisations, documentation needs to be updated.", "createdAt": "2020-11-19T11:22:00Z", "url": "https://github.com/quarkusio/quarkus/pull/13376", "merged": true, "mergeCommit": {"oid": "86ed28a7e550bfda2793d7d11c93db832371d362"}, "closed": true, "closedAt": "2021-01-05T17:17:19Z", "author": {"login": "galderz"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdi3iQDgBqjQwNzI2MzM1NzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdtONL3AFqTU2MTk3Nzg1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "36ffe3fcdd814c755f90e25ab5ea6979049755d2", "author": {"user": {"login": "galderz", "name": "Galder Zamarre\u00f1o"}}, "url": "https://github.com/quarkusio/quarkus/commit/36ffe3fcdd814c755f90e25ab5ea6979049755d2", "committedDate": "2020-12-04T13:07:51Z", "message": "Add min-level documentation"}, "afterCommit": {"oid": "a0f4beb59dc022abdc2a53a6a37b4e80cc10dd7f", "author": {"user": {"login": "galderz", "name": "Galder Zamarre\u00f1o"}}, "url": "https://github.com/quarkusio/quarkus/commit/a0f4beb59dc022abdc2a53a6a37b4e80cc10dd7f", "committedDate": "2020-12-04T13:12:32Z", "message": "Add min-level documentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5537c155d28a15fec021bbca6686723b7afa58ef", "author": {"user": {"login": "galderz", "name": "Galder Zamarre\u00f1o"}}, "url": "https://github.com/quarkusio/quarkus/commit/5537c155d28a15fec021bbca6686723b7afa58ef", "committedDate": "2020-12-15T09:48:06Z", "message": "Add min-level settings whenever level is set below INFO"}, "afterCommit": {"oid": "93630da4a6f7c5e522928a4a2e7956f5697dccd6", "author": {"user": {"login": "galderz", "name": "Galder Zamarre\u00f1o"}}, "url": "https://github.com/quarkusio/quarkus/commit/93630da4a6f7c5e522928a4a2e7956f5697dccd6", "committedDate": "2020-12-15T09:52:36Z", "message": "Add min-level settings whenever level is set below INFO"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "93630da4a6f7c5e522928a4a2e7956f5697dccd6", "author": {"user": {"login": "galderz", "name": "Galder Zamarre\u00f1o"}}, "url": "https://github.com/quarkusio/quarkus/commit/93630da4a6f7c5e522928a4a2e7956f5697dccd6", "committedDate": "2020-12-15T09:52:36Z", "message": "Add min-level settings whenever level is set below INFO"}, "afterCommit": {"oid": "cdfc43fcb3cd0ecdbc525ba9eb8efb69f267ed07", "author": {"user": {"login": "galderz", "name": "Galder Zamarre\u00f1o"}}, "url": "https://github.com/quarkusio/quarkus/commit/cdfc43fcb3cd0ecdbc525ba9eb8efb69f267ed07", "committedDate": "2020-12-15T16:23:46Z", "message": "Add build-time min-level logging option #12938\n\n* It enables log levels below that to be folded in native.\n* Runtime min-level has been removed (was deprecated already)."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNTMyMjA2", "url": "https://github.com/quarkusio/quarkus/pull/13376#pullrequestreview-553532206", "createdAt": "2020-12-16T10:06:41Z", "commit": {"oid": "cdfc43fcb3cd0ecdbc525ba9eb8efb69f267ed07"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDowNjo0MVrOIG9eeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDoxMjo1NVrOIG9vMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE2OTU5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * The minimum log level level for this category.\n          \n          \n            \n                 * The minimum log level for this category.", "url": "https://github.com/quarkusio/quarkus/pull/13376#discussion_r544169593", "createdAt": "2020-12-16T10:06:41Z", "author": {"login": "gsmet"}, "path": "core/runtime/src/main/java/io/quarkus/runtime/logging/CategoryBuildTimeConfig.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.quarkus.runtime.logging;\n+\n+import io.quarkus.runtime.annotations.ConfigGroup;\n+import io.quarkus.runtime.annotations.ConfigItem;\n+\n+@ConfigGroup\n+public class CategoryBuildTimeConfig {\n+    /**\n+     * The minimum log level level for this category.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfc43fcb3cd0ecdbc525ba9eb8efb69f267ed07"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE3MDE1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * The log level level for this category.\n          \n          \n            \n                 * The log level for this category.", "url": "https://github.com/quarkusio/quarkus/pull/13376#discussion_r544170150", "createdAt": "2020-12-16T10:07:26Z", "author": {"login": "gsmet"}, "path": "core/runtime/src/main/java/io/quarkus/runtime/logging/CategoryConfig.java", "diffHunk": "@@ -10,7 +10,10 @@\n public class CategoryConfig {\n \n     /**\n-     * The log level level for this category\n+     * The log level level for this category.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfc43fcb3cd0ecdbc525ba9eb8efb69f267ed07"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE3MjAxOQ==", "bodyText": "This requires a comment to explain why it's there?", "url": "https://github.com/quarkusio/quarkus/pull/13376#discussion_r544172019", "createdAt": "2020-12-16T10:10:21Z", "author": {"login": "gsmet"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/logging/LoggingResourceProcessor.java", "diffHunk": "@@ -140,4 +166,177 @@ void registerMetrics(LogMetricsHandlerRecorder recorder, LogBuildTimeConfig log,\n             logHandler.produce(new LogHandlerBuildItem(recorder.getLogHandler()));\n         }\n     }\n+\n+    @BuildStep(onlyIf = NativeBuild.class)\n+    void setUpMinLevelLogging(LogBuildTimeConfig log,\n+            final BuildProducer<GeneratedClassBuildItem> generatedTraceLogger) {\n+        ClassOutput output = new GeneratedClassGizmoAdaptor(generatedTraceLogger, false);\n+        if (log.categories.isEmpty() || allMinLevelInfoOrHigher(log.categories)) {\n+            generateDefaultLoggers(output);\n+        } else {\n+            generateCategoryMinLevelLoggers(log.categories, log.minLevel, output);\n+        }\n+    }\n+\n+    private static boolean allMinLevelInfoOrHigher(Map<String, CategoryBuildTimeConfig> categories) {\n+        return categories.values().stream()\n+                .allMatch(categoryConfig -> categoryConfig.minLevel.getLevel().intValue() >= org.jboss.logmanager.Level.INFO\n+                        .intValue());\n+    }\n+\n+    private static void generateDefaultLoggers(ClassOutput output) {\n+        generateDefaultLoggingLogger(output);\n+        generateDefaultLoggerNode(output);\n+        generateLogManagerLogger(output, LoggingResourceProcessor::generateMinLevelDefault);\n+    }\n+\n+    private static void generateCategoryMinLevelLoggers(Map<String, CategoryBuildTimeConfig> categories, Level minLevel,\n+            ClassOutput output) {\n+        generateMinLevelCompute(categories, minLevel.toString(), output);\n+        generateDefaultLoggerNode(output);\n+        generateLogManagerLogger(output, LoggingResourceProcessor::generateMinLevelCheckCategory);\n+    }\n+\n+    private static BranchResult generateMinLevelCheckCategory(MethodCreator method, FieldDescriptor nameAliasDescriptor) {\n+        final ResultHandle levelIntValue = getParamLevelIntValue(method);\n+        final ResultHandle nameAlias = method.readInstanceField(nameAliasDescriptor, method.getThis());\n+        return method.ifTrue(method.invokeStaticMethod(IS_MIN_LEVEL_ENABLED, levelIntValue, nameAlias));\n+    }\n+\n+    private static void generateMinLevelCompute(Map<String, CategoryBuildTimeConfig> categories, String defaultMinLevelName,\n+            ClassOutput output) {\n+        try (ClassCreator cc = ClassCreator.builder().setFinal(true)\n+                .className(MIN_LEVEL_COMPUTE_CLASS_NAME)\n+                .classOutput(output).build()) {\n+\n+            try (MethodCreator mc = cc.getMethodCreator(IS_MIN_LEVEL_ENABLED)) {\n+                mc.setModifiers(Opcodes.ACC_STATIC);\n+\n+                final ResultHandle level = mc.getMethodParam(0);\n+                final ResultHandle name = mc.getMethodParam(1);\n+\n+                BytecodeCreator current = mc;\n+                for (Map.Entry<String, CategoryBuildTimeConfig> entry : categories.entrySet()) {\n+                    final String category = entry.getKey();\n+                    final int categoryLevelIntValue = entry.getValue().minLevel.getLevel().intValue();\n+\n+                    ResultHandle equalsResult = current.invokeVirtualMethod(\n+                            MethodDescriptor.ofMethod(Object.class, \"equals\", boolean.class, Object.class),\n+                            name, current.load(category));\n+\n+                    BranchResult equalsBranch = current.ifTrue(equalsResult);\n+                    try (BytecodeCreator false1 = equalsBranch.falseBranch()) {\n+                        ResultHandle startsWithResult = false1.invokeVirtualMethod(\n+                                MethodDescriptor.ofMethod(String.class, \"startsWith\", boolean.class, String.class),\n+                                name, false1.load(category));\n+\n+                        BranchResult startsWithBranch = false1.ifTrue(startsWithResult);\n+\n+                        final BytecodeCreator startsWithTrue = startsWithBranch.trueBranch();\n+                        final BranchResult levelCompareBranch = startsWithTrue.ifIntegerGreaterEqual(level,\n+                                startsWithTrue.load(categoryLevelIntValue));\n+                        levelCompareBranch.trueBranch().returnValue(levelCompareBranch.trueBranch().load(true));\n+                        levelCompareBranch.falseBranch().returnValue(levelCompareBranch.falseBranch().load(false));\n+\n+                        current = startsWithBranch.falseBranch();\n+                    }\n+\n+                    equalsBranch.trueBranch().returnValue(equalsBranch.trueBranch().load(true));\n+                }\n+\n+                final ResultHandle infoLevelIntValue = getLogManagerLevelIntValue(defaultMinLevelName, current);\n+                final BranchResult isInfoOrHigherBranch = current.ifIntegerGreaterEqual(level, infoLevelIntValue);\n+                isInfoOrHigherBranch.trueBranch().returnValue(isInfoOrHigherBranch.trueBranch().load(true));\n+                isInfoOrHigherBranch.falseBranch().returnValue(isInfoOrHigherBranch.falseBranch().load(false));\n+            }\n+        }\n+    }\n+\n+    private static void generateDefaultLoggerNode(ClassOutput output) {\n+        try (ClassCreator cc = ClassCreator.builder().setFinal(true)\n+                .className(LOGGER_NODE_CLASS_NAME)\n+                .classOutput(output).build()) {\n+\n+            AnnotationCreator targetClass = cc.addAnnotation(\"com.oracle.svm.core.annotate.TargetClass\");\n+            targetClass.addValue(\"className\", \"org.jboss.logmanager.LoggerNode\");\n+\n+            final MethodCreator isLoggableLevelMethod = cc.getMethodCreator(\"isLoggableLevel\", boolean.class, int.class);\n+            isLoggableLevelMethod.addAnnotation(\"com.oracle.svm.core.annotate.Alias\");\n+            isLoggableLevelMethod.returnValue(isLoggableLevelMethod.load(false));\n+        }\n+    }\n+\n+    private static void generateLogManagerLogger(ClassOutput output,\n+            BiFunction<MethodCreator, FieldDescriptor, BranchResult> isMinLevelEnabledFunction) {\n+        try (ClassCreator cc = ClassCreator.builder().setFinal(true)\n+                .className(LOGMANAGER_LOGGER_CLASS_NAME)\n+                .classOutput(output).build()) {\n+\n+            AnnotationCreator targetClass = cc.addAnnotation(\"com.oracle.svm.core.annotate.TargetClass\");\n+            targetClass.addValue(\"className\", \"org.jboss.logmanager.Logger\");\n+\n+            FieldCreator nameAlias = cc.getFieldCreator(\"name\", String.class);\n+            nameAlias.addAnnotation(\"com.oracle.svm.core.annotate.Alias\");\n+\n+            FieldCreator loggerNodeAlias = cc.getFieldCreator(\"loggerNode\", LOGGER_NODE_CLASS_NAME);\n+            loggerNodeAlias.addAnnotation(\"com.oracle.svm.core.annotate.Alias\");\n+\n+            final MethodCreator isLoggableMethod = cc.getMethodCreator(\"isLoggable\", boolean.class,\n+                    java.util.logging.Level.class);\n+            isLoggableMethod.addAnnotation(\"com.oracle.svm.core.annotate.Substitute\");\n+\n+            final ResultHandle levelIntValue = getParamLevelIntValue(isLoggableMethod);\n+\n+            final BranchResult levelBranch = isMinLevelEnabledFunction.apply(isLoggableMethod, nameAlias.getFieldDescriptor());\n+\n+            final BytecodeCreator levelTrue = levelBranch.trueBranch();\n+            levelTrue.returnValue(\n+                    levelTrue.invokeVirtualMethod(\n+                            MethodDescriptor.ofMethod(LOGGER_NODE_CLASS_NAME, \"isLoggableLevel\", boolean.class, int.class),\n+                            levelTrue.readInstanceField(loggerNodeAlias.getFieldDescriptor(), levelTrue.getThis()),\n+                            levelIntValue));\n+\n+            final BytecodeCreator levelFalse = levelBranch.falseBranch();\n+            levelFalse.returnValue(levelFalse.load(false));\n+        }\n+    }\n+\n+    private static ResultHandle getParamLevelIntValue(MethodCreator method) {\n+        final ResultHandle level = method.getMethodParam(0);\n+        return method\n+                .invokeVirtualMethod(MethodDescriptor.ofMethod(Level.class, \"intValue\", int.class), level);\n+    }\n+\n+    private static BranchResult generateMinLevelDefault(MethodCreator method, FieldDescriptor nameAliasDescriptor) {\n+        final ResultHandle levelIntValue = getParamLevelIntValue(method);\n+        final ResultHandle infoLevelIntValue = getLogManagerLevelIntValue(\"INFO\", method);\n+        return method.ifIntegerGreaterEqual(levelIntValue, infoLevelIntValue);\n+    }\n+\n+    private static ResultHandle getLogManagerLevelIntValue(String levelName, BytecodeCreator method) {\n+        final ResultHandle infoLevel = method.readStaticField(\n+                FieldDescriptor.of(org.jboss.logmanager.Level.class, levelName, org.jboss.logmanager.Level.class));\n+        return method\n+                .invokeVirtualMethod(MethodDescriptor.ofMethod(Level.class, \"intValue\", int.class), infoLevel);\n+    }\n+\n+    private static void generateDefaultLoggingLogger(ClassOutput output) {\n+        try (ClassCreator cc = ClassCreator.builder().setFinal(true)\n+                .className(LOGGING_LOGGER_CLASS_NAME)\n+                .classOutput(output).build()) {\n+\n+            AnnotationCreator targetClass = cc.addAnnotation(\"com.oracle.svm.core.annotate.TargetClass\");\n+            targetClass.addValue(\"className\", \"org.jboss.logging.Logger\");\n+\n+            generateFalseFoldMethod(\"isTraceEnabled\", cc);\n+            generateFalseFoldMethod(\"isDebugEnabled\", cc);\n+        }\n+    }\n+\n+    private static void generateFalseFoldMethod(String name, ClassCreator cc) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfc43fcb3cd0ecdbc525ba9eb8efb69f267ed07"}, "originalPosition": 250}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE3MzU2Ng==", "bodyText": "If you want these modules to be tested on CI in native, they need to be added there: https://github.com/quarkusio/quarkus/blob/master/.github/native-tests.json .", "url": "https://github.com/quarkusio/quarkus/pull/13376#discussion_r544173566", "createdAt": "2020-12-16T10:12:31Z", "author": {"login": "gsmet"}, "path": "integration-tests/pom.xml", "diffHunk": "@@ -148,6 +148,8 @@\n         <module>logging-json</module>\n         <module>jaxp</module>\n         <module>mailer</module>\n+        <module>logging-min-level-unset</module>\n+        <module>logging-min-level-set</module>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfc43fcb3cd0ecdbc525ba9eb8efb69f267ed07"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE3Mzg3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            either globally via `quarkus.log.min-level` property or per-category as show in the example above,\n          \n          \n            \n            either globally via the `quarkus.log.min-level` property or per-category as shown in the example above,", "url": "https://github.com/quarkusio/quarkus/pull/13376#discussion_r544173872", "createdAt": "2020-12-16T10:12:55Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/logging.adoc", "diffHunk": "@@ -128,9 +128,19 @@ for example, to set the default log level to `INFO` logging and include Hibernat\n [source, properties]\n ----\n quarkus.log.level=INFO\n+quarkus.log.category.\"org.hibernate\".min-level=DEBUG\n quarkus.log.category.\"org.hibernate\".level=DEBUG\n ----\n \n+Setting a log level below `INFO` requires the minimum log level to be adjusted,\n+either globally via `quarkus.log.min-level` property or per-category as show in the example above,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfc43fcb3cd0ecdbc525ba9eb8efb69f267ed07"}, "originalPosition": 9}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cdfc43fcb3cd0ecdbc525ba9eb8efb69f267ed07", "author": {"user": {"login": "galderz", "name": "Galder Zamarre\u00f1o"}}, "url": "https://github.com/quarkusio/quarkus/commit/cdfc43fcb3cd0ecdbc525ba9eb8efb69f267ed07", "committedDate": "2020-12-15T16:23:46Z", "message": "Add build-time min-level logging option #12938\n\n* It enables log levels below that to be folded in native.\n* Runtime min-level has been removed (was deprecated already)."}, "afterCommit": {"oid": "ffe77419b6d3fe436a0a91e8999e2535a426b8c1", "author": {"user": {"login": "galderz", "name": "Galder Zamarre\u00f1o"}}, "url": "https://github.com/quarkusio/quarkus/commit/ffe77419b6d3fe436a0a91e8999e2535a426b8c1", "committedDate": "2020-12-21T09:57:00Z", "message": "Add build-time min-level logging option #12938\n\n* It enables log levels below that to be folded in native.\n* Runtime min-level has been removed (was deprecated already)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5c4cadbc539ac5d5998988a7b639288866e3ce0", "author": {"user": {"login": "galderz", "name": "Galder Zamarre\u00f1o"}}, "url": "https://github.com/quarkusio/quarkus/commit/f5c4cadbc539ac5d5998988a7b639288866e3ce0", "committedDate": "2021-01-04T17:28:38Z", "message": "Add build-time min-level logging option #12938\n\n* It enables log levels below that to be folded in native.\n* Runtime min-level has been removed (was deprecated already)."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ffe77419b6d3fe436a0a91e8999e2535a426b8c1", "author": {"user": {"login": "galderz", "name": "Galder Zamarre\u00f1o"}}, "url": "https://github.com/quarkusio/quarkus/commit/ffe77419b6d3fe436a0a91e8999e2535a426b8c1", "committedDate": "2020-12-21T09:57:00Z", "message": "Add build-time min-level logging option #12938\n\n* It enables log levels below that to be folded in native.\n* Runtime min-level has been removed (was deprecated already)."}, "afterCommit": {"oid": "f5c4cadbc539ac5d5998988a7b639288866e3ce0", "author": {"user": {"login": "galderz", "name": "Galder Zamarre\u00f1o"}}, "url": "https://github.com/quarkusio/quarkus/commit/f5c4cadbc539ac5d5998988a7b639288866e3ce0", "committedDate": "2021-01-04T17:28:38Z", "message": "Add build-time min-level logging option #12938\n\n* It enables log levels below that to be folded in native.\n* Runtime min-level has been removed (was deprecated already)."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxOTc3ODUy", "url": "https://github.com/quarkusio/quarkus/pull/13376#pullrequestreview-561977852", "createdAt": "2021-01-05T17:16:54Z", "commit": {"oid": "f5c4cadbc539ac5d5998988a7b639288866e3ce0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1423, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}