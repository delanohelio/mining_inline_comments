{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4OTgyNTQ4", "number": 7385, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDo1Nzo0MVrODiWzqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDo1Nzo0MVrODiWzqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzUxODQ5OnYy", "diffSide": "RIGHT", "path": "extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/MongoClientProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDo1Nzo0MVrOFtjmGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzoxMDoyOFrOFtzNrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMxMzQzMw==", "bodyText": "Why not using this new methods also in the createMongoClientProducerBeanmethods that do the same but based on Jandex ?", "url": "https://github.com/quarkusio/quarkus/pull/7385#discussion_r383313433", "createdAt": "2020-02-24T14:57:41Z", "author": {"login": "loicmathieu"}, "path": "extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/MongoClientProcessor.java", "diffHunk": "@@ -365,21 +358,51 @@ BeanContainerListenerBuildItem build(\n \n     @Record(RUNTIME_INIT)\n     @BuildStep\n-    void build(MongoClientRecorder recorder, BuildProducer<MongoClientBuildItem> mongoClients, MongodbConfig config) {\n-        if (config.mongoClientConfigs != null && !config.mongoClientConfigs.isEmpty()) {\n-            for (Map.Entry<String, MongoClientConfig> namedDataSourceEntry : config.mongoClientConfigs.entrySet()) {\n-                String name = namedDataSourceEntry.getKey();\n-                mongoClients\n-                        .produce(new MongoClientBuildItem(recorder.getClient(name), recorder.getReactiveClient(name), name));\n+    void configureRuntimePropertiesAndBuildClients(MongoClientRecorder recorder,\n+            CodecProviderBuildItem codecProvider,\n+            BsonDiscriminatorBuildItem bsonDiscriminator,\n+            MongodbConfig mongodbConfig, ConfigurationBuildItem config,\n+            BuildProducer<MongoClientBuildItem> mongoClients) {\n+        recorder.configureRuntimeProperties(codecProvider.getCodecProviderClassNames(),\n+                bsonDiscriminator.getBsonDiscriminatorClassNames(), mongodbConfig);\n+\n+        for (String connectionName : resolveAllConnectionNamesFromConfig(config)) {\n+            mongoClients.produce(new MongoClientBuildItem(recorder.getClient(connectionName),\n+                    recorder.getReactiveClient(connectionName), connectionName));\n+        }\n+    }\n+\n+    private Set<String> resolveAllConnectionNamesFromConfig(ConfigurationBuildItem config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad376e42465a03925f579b1f63ea55f28385e235"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyMjQ0OQ==", "bodyText": "That is an interesting idea! I went the way I did because that solution feels closer to the problem at hand.\nThat said, I'll sleep on this idea and once the Camel folks respond with whether or not the whole idea works then I'll have settled :)", "url": "https://github.com/quarkusio/quarkus/pull/7385#discussion_r383322449", "createdAt": "2020-02-24T15:12:43Z", "author": {"login": "geoand"}, "path": "extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/MongoClientProcessor.java", "diffHunk": "@@ -365,21 +358,51 @@ BeanContainerListenerBuildItem build(\n \n     @Record(RUNTIME_INIT)\n     @BuildStep\n-    void build(MongoClientRecorder recorder, BuildProducer<MongoClientBuildItem> mongoClients, MongodbConfig config) {\n-        if (config.mongoClientConfigs != null && !config.mongoClientConfigs.isEmpty()) {\n-            for (Map.Entry<String, MongoClientConfig> namedDataSourceEntry : config.mongoClientConfigs.entrySet()) {\n-                String name = namedDataSourceEntry.getKey();\n-                mongoClients\n-                        .produce(new MongoClientBuildItem(recorder.getClient(name), recorder.getReactiveClient(name), name));\n+    void configureRuntimePropertiesAndBuildClients(MongoClientRecorder recorder,\n+            CodecProviderBuildItem codecProvider,\n+            BsonDiscriminatorBuildItem bsonDiscriminator,\n+            MongodbConfig mongodbConfig, ConfigurationBuildItem config,\n+            BuildProducer<MongoClientBuildItem> mongoClients) {\n+        recorder.configureRuntimeProperties(codecProvider.getCodecProviderClassNames(),\n+                bsonDiscriminator.getBsonDiscriminatorClassNames(), mongodbConfig);\n+\n+        for (String connectionName : resolveAllConnectionNamesFromConfig(config)) {\n+            mongoClients.produce(new MongoClientBuildItem(recorder.getClient(connectionName),\n+                    recorder.getReactiveClient(connectionName), connectionName));\n+        }\n+    }\n+\n+    private Set<String> resolveAllConnectionNamesFromConfig(ConfigurationBuildItem config) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMxMzQzMw=="}, "originalCommit": {"oid": "ad376e42465a03925f579b1f63ea55f28385e235"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2OTMyNQ==", "bodyText": "Implemented", "url": "https://github.com/quarkusio/quarkus/pull/7385#discussion_r383569325", "createdAt": "2020-02-24T23:10:28Z", "author": {"login": "geoand"}, "path": "extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/MongoClientProcessor.java", "diffHunk": "@@ -365,21 +358,51 @@ BeanContainerListenerBuildItem build(\n \n     @Record(RUNTIME_INIT)\n     @BuildStep\n-    void build(MongoClientRecorder recorder, BuildProducer<MongoClientBuildItem> mongoClients, MongodbConfig config) {\n-        if (config.mongoClientConfigs != null && !config.mongoClientConfigs.isEmpty()) {\n-            for (Map.Entry<String, MongoClientConfig> namedDataSourceEntry : config.mongoClientConfigs.entrySet()) {\n-                String name = namedDataSourceEntry.getKey();\n-                mongoClients\n-                        .produce(new MongoClientBuildItem(recorder.getClient(name), recorder.getReactiveClient(name), name));\n+    void configureRuntimePropertiesAndBuildClients(MongoClientRecorder recorder,\n+            CodecProviderBuildItem codecProvider,\n+            BsonDiscriminatorBuildItem bsonDiscriminator,\n+            MongodbConfig mongodbConfig, ConfigurationBuildItem config,\n+            BuildProducer<MongoClientBuildItem> mongoClients) {\n+        recorder.configureRuntimeProperties(codecProvider.getCodecProviderClassNames(),\n+                bsonDiscriminator.getBsonDiscriminatorClassNames(), mongodbConfig);\n+\n+        for (String connectionName : resolveAllConnectionNamesFromConfig(config)) {\n+            mongoClients.produce(new MongoClientBuildItem(recorder.getClient(connectionName),\n+                    recorder.getReactiveClient(connectionName), connectionName));\n+        }\n+    }\n+\n+    private Set<String> resolveAllConnectionNamesFromConfig(ConfigurationBuildItem config) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMxMzQzMw=="}, "originalCommit": {"oid": "ad376e42465a03925f579b1f63ea55f28385e235"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4961, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}