{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1ODEyMTMx", "number": 12781, "title": "Improved MongoHealthCheck to include reactiveClients", "bodyText": "MongoHealthCheck now goes through ReactiveMongoClient as well.\nAlso properly get mongoClientName from the annotation because bean.getName() returns always null.\ndefault blocking client stays same as default. Reactive is defaultReactive .\nfixes #12716", "createdAt": "2020-10-19T09:03:35Z", "url": "https://github.com/quarkusio/quarkus/pull/12781", "merged": true, "mergeCommit": {"oid": "13094df2a6c89dc8e53602b25f77ea96717e2d19"}, "closed": true, "closedAt": "2020-10-22T10:12:22Z", "author": {"login": "lkrzyzanek"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUA7hWAFqTUxMTU4NTAzMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdU_LcDAFqTUxNDU2ODY1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNTg1MDMw", "url": "https://github.com/quarkusio/quarkus/pull/12781#pullrequestreview-511585030", "createdAt": "2020-10-19T09:40:43Z", "commit": {"oid": "af3c346e6ceb0cb3cef152071b6539281f8c014e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwOTo0MDo0NFrOHkGGfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwOTo0MDo0NFrOHkGGfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxMDc1MQ==", "bodyText": "@mkouba wondering if there is an ArC API allowing to avoid the BeanManager call then the individual ArC calls below?\nLooks like select is not \"cross-qualifiers\" so wouldn't get all the instances or am I wrong?", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r507610751", "createdAt": "2020-10-19T09:40:44Z", "author": {"login": "gsmet"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/health/MongoHealthCheck.java", "diffHunk": "@@ -17,40 +16,78 @@\n import com.mongodb.client.MongoClient;\n \n import io.quarkus.arc.Arc;\n+import io.quarkus.mongodb.MongoClientName;\n+import io.quarkus.mongodb.reactive.ReactiveMongoClient;\n \n @Readiness\n @ApplicationScoped\n public class MongoHealthCheck implements HealthCheck {\n-    private static final String DEFAULT_CLIENT = \"__default__\";\n+\n     private Map<String, MongoClient> clients = new HashMap<>();\n+    private Map<String, ReactiveMongoClient> reactiveClients = new HashMap<>();\n \n     @PostConstruct\n     protected void init() {\n-        Set<Bean<?>> beans = Arc.container().beanManager().getBeans(MongoClient.class);\n-        for (Bean<?> bean : beans) {\n+        for (Bean<?> bean : Arc.container().beanManager().getBeans(MongoClient.class)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af3c346e6ceb0cb3cef152071b6539281f8c014e"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNTg2OTg2", "url": "https://github.com/quarkusio/quarkus/pull/12781#pullrequestreview-511586986", "createdAt": "2020-10-19T09:43:02Z", "commit": {"oid": "af3c346e6ceb0cb3cef152071b6539281f8c014e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwOTo0MzowMlrOHkGMrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwOTo0MzowMlrOHkGMrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxMjMzMw==", "bodyText": "In other parts of the code, we use <default> so I would go with <default> and <default-reactive>.\nAlso let's make them public constants that you can use in the tests. It's more practical and doesn't cost much.", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r507612333", "createdAt": "2020-10-19T09:43:02Z", "author": {"login": "gsmet"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/health/MongoHealthCheck.java", "diffHunk": "@@ -17,40 +16,78 @@\n import com.mongodb.client.MongoClient;\n \n import io.quarkus.arc.Arc;\n+import io.quarkus.mongodb.MongoClientName;\n+import io.quarkus.mongodb.reactive.ReactiveMongoClient;\n \n @Readiness\n @ApplicationScoped\n public class MongoHealthCheck implements HealthCheck {\n-    private static final String DEFAULT_CLIENT = \"__default__\";\n+\n     private Map<String, MongoClient> clients = new HashMap<>();\n+    private Map<String, ReactiveMongoClient> reactiveClients = new HashMap<>();\n \n     @PostConstruct\n     protected void init() {\n-        Set<Bean<?>> beans = Arc.container().beanManager().getBeans(MongoClient.class);\n-        for (Bean<?> bean : beans) {\n+        for (Bean<?> bean : Arc.container().beanManager().getBeans(MongoClient.class)) {\n+            // Get client name from annotation because InjectableBean.getName() returns always null.\n+            String clientName = getMongoClientName(bean);\n+            MongoClient client;\n             if (bean.getName() == null) {\n                 // this is the default mongo client: retrieve it by type\n-                MongoClient defaultClient = Arc.container().instance(MongoClient.class).get();\n-                clients.put(DEFAULT_CLIENT, defaultClient);\n+                client = Arc.container().instance(MongoClient.class).get();\n             } else {\n-                MongoClient client = (MongoClient) Arc.container().instance(bean.getName()).get();\n-                clients.put(bean.getName(), client);\n+                client = (MongoClient) Arc.container().instance(bean.getName()).get();\n+            }\n+            clients.put(clientName == null ? \"default\" : clientName, client);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af3c346e6ceb0cb3cef152071b6539281f8c014e"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNjAyNDcz", "url": "https://github.com/quarkusio/quarkus/pull/12781#pullrequestreview-511602473", "createdAt": "2020-10-19T10:01:59Z", "commit": {"oid": "af3c346e6ceb0cb3cef152071b6539281f8c014e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMDowMTo1OVrOHkG7Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMDowNTowMlrOHkHCOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyNDI1MA==", "bodyText": "This would be a small breaking change in case some people parsed the response and search for __default__ but for cross extension consistancy I'm OK with it.", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r507624250", "createdAt": "2020-10-19T10:01:59Z", "author": {"login": "loicmathieu"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/health/MongoHealthCheck.java", "diffHunk": "@@ -17,40 +16,78 @@\n import com.mongodb.client.MongoClient;\n \n import io.quarkus.arc.Arc;\n+import io.quarkus.mongodb.MongoClientName;\n+import io.quarkus.mongodb.reactive.ReactiveMongoClient;\n \n @Readiness\n @ApplicationScoped\n public class MongoHealthCheck implements HealthCheck {\n-    private static final String DEFAULT_CLIENT = \"__default__\";\n+\n     private Map<String, MongoClient> clients = new HashMap<>();\n+    private Map<String, ReactiveMongoClient> reactiveClients = new HashMap<>();\n \n     @PostConstruct\n     protected void init() {\n-        Set<Bean<?>> beans = Arc.container().beanManager().getBeans(MongoClient.class);\n-        for (Bean<?> bean : beans) {\n+        for (Bean<?> bean : Arc.container().beanManager().getBeans(MongoClient.class)) {\n+            // Get client name from annotation because InjectableBean.getName() returns always null.\n+            String clientName = getMongoClientName(bean);\n+            MongoClient client;\n             if (bean.getName() == null) {\n                 // this is the default mongo client: retrieve it by type\n-                MongoClient defaultClient = Arc.container().instance(MongoClient.class).get();\n-                clients.put(DEFAULT_CLIENT, defaultClient);\n+                client = Arc.container().instance(MongoClient.class).get();\n             } else {\n-                MongoClient client = (MongoClient) Arc.container().instance(bean.getName()).get();\n-                clients.put(bean.getName(), client);\n+                client = (MongoClient) Arc.container().instance(bean.getName()).get();\n+            }\n+            clients.put(clientName == null ? \"default\" : clientName, client);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxMjMzMw=="}, "originalCommit": {"oid": "af3c346e6ceb0cb3cef152071b6539281f8c014e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyNjA0MQ==", "bodyText": "wildcard imports are prohibited", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r507626041", "createdAt": "2020-10-19T10:05:02Z", "author": {"login": "loicmathieu"}, "path": "integration-tests/mongodb-client/src/test/java/io/quarkus/it/mongodb/BookResourceTest.java", "diffHunk": "@@ -1,8 +1,7 @@\n package io.quarkus.it.mongodb;\n \n import static io.restassured.RestAssured.get;\n-import static org.hamcrest.Matchers.containsInAnyOrder;\n-import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af3c346e6ceb0cb3cef152071b6539281f8c014e"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "af3c346e6ceb0cb3cef152071b6539281f8c014e", "author": {"user": {"login": "lkrzyzanek", "name": "Libor Krzyzanek"}}, "url": "https://github.com/quarkusio/quarkus/commit/af3c346e6ceb0cb3cef152071b6539281f8c014e", "committedDate": "2020-10-19T09:00:16Z", "message": "Improved MongoHealthCheck to include reactiveClients"}, "afterCommit": {"oid": "fa625816cdae1528dc50eb84a6ab0e3d5f5f1ac0", "author": {"user": {"login": "lkrzyzanek", "name": "Libor Krzyzanek"}}, "url": "https://github.com/quarkusio/quarkus/commit/fa625816cdae1528dc50eb84a6ab0e3d5f5f1ac0", "committedDate": "2020-10-19T13:25:58Z", "message": "applying feedback from PR"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fa625816cdae1528dc50eb84a6ab0e3d5f5f1ac0", "author": {"user": {"login": "lkrzyzanek", "name": "Libor Krzyzanek"}}, "url": "https://github.com/quarkusio/quarkus/commit/fa625816cdae1528dc50eb84a6ab0e3d5f5f1ac0", "committedDate": "2020-10-19T13:25:58Z", "message": "applying feedback from PR"}, "afterCommit": {"oid": "639557d74791469f216953af23f858912c1b2a2f", "author": {"user": {"login": "lkrzyzanek", "name": "Libor Krzyzanek"}}, "url": "https://github.com/quarkusio/quarkus/commit/639557d74791469f216953af23f858912c1b2a2f", "committedDate": "2020-10-19T13:32:23Z", "message": "applying feedback from PR"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExODg4Njc5", "url": "https://github.com/quarkusio/quarkus/pull/12781#pullrequestreview-511888679", "createdAt": "2020-10-19T15:28:38Z", "commit": {"oid": "639557d74791469f216953af23f858912c1b2a2f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNToyODozOFrOHkUb2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNToyODozOFrOHkUb2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg0NTU5NA==", "bodyText": "Should it be reactive client or will it be clear from the name? I don't know if you can have both with the same name?", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r507845594", "createdAt": "2020-10-19T15:28:38Z", "author": {"login": "gsmet"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/health/MongoHealthCheck.java", "diffHunk": "@@ -17,40 +17,68 @@\n import com.mongodb.client.MongoClient;\n \n import io.quarkus.arc.Arc;\n+import io.quarkus.arc.InstanceHandle;\n+import io.quarkus.mongodb.MongoClientName;\n+import io.quarkus.mongodb.reactive.ReactiveMongoClient;\n \n @Readiness\n @ApplicationScoped\n public class MongoHealthCheck implements HealthCheck {\n-    private static final String DEFAULT_CLIENT = \"__default__\";\n+\n+    public static final String CLIENT_DEFAULT = \"<default>\";\n+    public static final String CLIENT_DEFAULT_REACTIVE = \"<default-reactive>\";\n+\n     private Map<String, MongoClient> clients = new HashMap<>();\n+    private Map<String, ReactiveMongoClient> reactiveClients = new HashMap<>();\n \n     @PostConstruct\n     protected void init() {\n-        Set<Bean<?>> beans = Arc.container().beanManager().getBeans(MongoClient.class);\n-        for (Bean<?> bean : beans) {\n-            if (bean.getName() == null) {\n-                // this is the default mongo client: retrieve it by type\n-                MongoClient defaultClient = Arc.container().instance(MongoClient.class).get();\n-                clients.put(DEFAULT_CLIENT, defaultClient);\n-            } else {\n-                MongoClient client = (MongoClient) Arc.container().instance(bean.getName()).get();\n-                clients.put(bean.getName(), client);\n+        for (InstanceHandle<MongoClient> handle : Arc.container().select(MongoClient.class, Any.Literal.INSTANCE).handles()) {\n+            String clientName = getMongoClientName(handle.getBean());\n+            clients.put(clientName == null ? CLIENT_DEFAULT : clientName, handle.get());\n+        }\n+        // reactive clients\n+        for (InstanceHandle<ReactiveMongoClient> handle : Arc.container()\n+                .select(ReactiveMongoClient.class, Any.Literal.INSTANCE).handles()) {\n+            String clientName = getMongoClientName(handle.getBean());\n+            reactiveClients.put(clientName == null ? CLIENT_DEFAULT_REACTIVE : clientName, handle.get());\n+        }\n+    }\n+\n+    /**\n+     * Get mongoClient name if defined.\n+     *\n+     * @param bean\n+     * @return mongoClient name or null if not defined\n+     * @see MongoClientName\n+     */\n+    private String getMongoClientName(Bean bean) {\n+        for (Object qualifier : bean.getQualifiers()) {\n+            if (qualifier instanceof MongoClientName) {\n+                return ((MongoClientName) qualifier).value();\n             }\n         }\n+        return null;\n     }\n \n     @Override\n     public HealthCheckResponse call() {\n         HealthCheckResponseBuilder builder = HealthCheckResponse.named(\"MongoDB connection health check\").up();\n+        Document command = new Document(\"ping\", 1);\n         for (Map.Entry<String, MongoClient> client : clients.entrySet()) {\n-            boolean isDefault = DEFAULT_CLIENT.equals(client.getKey());\n-            MongoClient mongoClient = client.getValue();\n             try {\n-                Document document = mongoClient.getDatabase(\"admin\").runCommand(new Document(\"ping\", 1));\n-                String mongoClientName = isDefault ? \"default\" : client.getKey();\n-                builder.up().withData(mongoClientName, document.toJson());\n+                Document document = client.getValue().getDatabase(\"admin\").runCommand(command);\n+                builder.up().withData(client.getKey(), document.toJson());\n+            } catch (Exception e) {\n+                return builder.down().withData(\"reason\", \"client [\" + client.getKey() + \"]: \" + e.getMessage()).build();\n+            }\n+        }\n+        for (Map.Entry<String, ReactiveMongoClient> client : reactiveClients.entrySet()) {\n+            try {\n+                Document document = client.getValue().getDatabase(\"admin\").runCommand(command).await().indefinitely();\n+                builder.up().withData(client.getKey(), document.toJson());\n             } catch (Exception e) {\n-                return builder.down().withData(\"reason\", e.getMessage()).build();\n+                return builder.down().withData(\"reason\", \"client [\" + client.getKey() + \"]: \" + e.getMessage()).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "639557d74791469f216953af23f858912c1b2a2f"}, "originalPosition": 93}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "639557d74791469f216953af23f858912c1b2a2f", "author": {"user": {"login": "lkrzyzanek", "name": "Libor Krzyzanek"}}, "url": "https://github.com/quarkusio/quarkus/commit/639557d74791469f216953af23f858912c1b2a2f", "committedDate": "2020-10-19T13:32:23Z", "message": "applying feedback from PR"}, "afterCommit": {"oid": "6dc3d41d9d8d71cb7279c97660b173d869b20c55", "author": {"user": {"login": "lkrzyzanek", "name": "Libor Krzyzanek"}}, "url": "https://github.com/quarkusio/quarkus/commit/6dc3d41d9d8d71cb7279c97660b173d869b20c55", "committedDate": "2020-10-19T15:32:33Z", "message": "Improved MongoHealthCheck to include reactiveClients"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6dc3d41d9d8d71cb7279c97660b173d869b20c55", "author": {"user": {"login": "lkrzyzanek", "name": "Libor Krzyzanek"}}, "url": "https://github.com/quarkusio/quarkus/commit/6dc3d41d9d8d71cb7279c97660b173d869b20c55", "committedDate": "2020-10-19T15:32:33Z", "message": "Improved MongoHealthCheck to include reactiveClients"}, "afterCommit": {"oid": "cefe58bc81fdbc8628fc72a191217f1d77d10901", "author": {"user": {"login": "lkrzyzanek", "name": "Libor Krzyzanek"}}, "url": "https://github.com/quarkusio/quarkus/commit/cefe58bc81fdbc8628fc72a191217f1d77d10901", "committedDate": "2020-10-19T15:36:10Z", "message": "Improved MongoHealthCheck to include reactiveClients"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTA1OTgx", "url": "https://github.com/quarkusio/quarkus/pull/12781#pullrequestreview-511905981", "createdAt": "2020-10-19T15:45:16Z", "commit": {"oid": "cefe58bc81fdbc8628fc72a191217f1d77d10901"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTo0NToxNlrOHkVM5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTo0NToxNlrOHkVM5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg1ODE0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return builder.down().withData(\"reason\", \"reactive-client [\" + client.getKey() + \"]: \" + e.getMessage()).build();\n          \n          \n            \n                            return builder.down().withData(\"reason\", \"reactive client [\" + client.getKey() + \"]: \" + e.getMessage()).build();", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r507858148", "createdAt": "2020-10-19T15:45:16Z", "author": {"login": "loicmathieu"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/health/MongoHealthCheck.java", "diffHunk": "@@ -17,40 +17,68 @@\n import com.mongodb.client.MongoClient;\n \n import io.quarkus.arc.Arc;\n+import io.quarkus.arc.InstanceHandle;\n+import io.quarkus.mongodb.MongoClientName;\n+import io.quarkus.mongodb.reactive.ReactiveMongoClient;\n \n @Readiness\n @ApplicationScoped\n public class MongoHealthCheck implements HealthCheck {\n-    private static final String DEFAULT_CLIENT = \"__default__\";\n+\n+    public static final String CLIENT_DEFAULT = \"<default>\";\n+    public static final String CLIENT_DEFAULT_REACTIVE = \"<default-reactive>\";\n+\n     private Map<String, MongoClient> clients = new HashMap<>();\n+    private Map<String, ReactiveMongoClient> reactiveClients = new HashMap<>();\n \n     @PostConstruct\n     protected void init() {\n-        Set<Bean<?>> beans = Arc.container().beanManager().getBeans(MongoClient.class);\n-        for (Bean<?> bean : beans) {\n-            if (bean.getName() == null) {\n-                // this is the default mongo client: retrieve it by type\n-                MongoClient defaultClient = Arc.container().instance(MongoClient.class).get();\n-                clients.put(DEFAULT_CLIENT, defaultClient);\n-            } else {\n-                MongoClient client = (MongoClient) Arc.container().instance(bean.getName()).get();\n-                clients.put(bean.getName(), client);\n+        for (InstanceHandle<MongoClient> handle : Arc.container().select(MongoClient.class, Any.Literal.INSTANCE).handles()) {\n+            String clientName = getMongoClientName(handle.getBean());\n+            clients.put(clientName == null ? CLIENT_DEFAULT : clientName, handle.get());\n+        }\n+        // reactive clients\n+        for (InstanceHandle<ReactiveMongoClient> handle : Arc.container()\n+                .select(ReactiveMongoClient.class, Any.Literal.INSTANCE).handles()) {\n+            String clientName = getMongoClientName(handle.getBean());\n+            reactiveClients.put(clientName == null ? CLIENT_DEFAULT_REACTIVE : clientName, handle.get());\n+        }\n+    }\n+\n+    /**\n+     * Get mongoClient name if defined.\n+     *\n+     * @param bean\n+     * @return mongoClient name or null if not defined\n+     * @see MongoClientName\n+     */\n+    private String getMongoClientName(Bean bean) {\n+        for (Object qualifier : bean.getQualifiers()) {\n+            if (qualifier instanceof MongoClientName) {\n+                return ((MongoClientName) qualifier).value();\n             }\n         }\n+        return null;\n     }\n \n     @Override\n     public HealthCheckResponse call() {\n         HealthCheckResponseBuilder builder = HealthCheckResponse.named(\"MongoDB connection health check\").up();\n+        Document command = new Document(\"ping\", 1);\n         for (Map.Entry<String, MongoClient> client : clients.entrySet()) {\n-            boolean isDefault = DEFAULT_CLIENT.equals(client.getKey());\n-            MongoClient mongoClient = client.getValue();\n             try {\n-                Document document = mongoClient.getDatabase(\"admin\").runCommand(new Document(\"ping\", 1));\n-                String mongoClientName = isDefault ? \"default\" : client.getKey();\n-                builder.up().withData(mongoClientName, document.toJson());\n+                Document document = client.getValue().getDatabase(\"admin\").runCommand(command);\n+                builder.up().withData(client.getKey(), document.toJson());\n+            } catch (Exception e) {\n+                return builder.down().withData(\"reason\", \"client [\" + client.getKey() + \"]: \" + e.getMessage()).build();\n+            }\n+        }\n+        for (Map.Entry<String, ReactiveMongoClient> client : reactiveClients.entrySet()) {\n+            try {\n+                Document document = client.getValue().getDatabase(\"admin\").runCommand(command).await().indefinitely();\n+                builder.up().withData(client.getKey(), document.toJson());\n             } catch (Exception e) {\n-                return builder.down().withData(\"reason\", e.getMessage()).build();\n+                return builder.down().withData(\"reason\", \"reactive-client [\" + client.getKey() + \"]: \" + e.getMessage()).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cefe58bc81fdbc8628fc72a191217f1d77d10901"}, "originalPosition": 93}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cefe58bc81fdbc8628fc72a191217f1d77d10901", "author": {"user": {"login": "lkrzyzanek", "name": "Libor Krzyzanek"}}, "url": "https://github.com/quarkusio/quarkus/commit/cefe58bc81fdbc8628fc72a191217f1d77d10901", "committedDate": "2020-10-19T15:36:10Z", "message": "Improved MongoHealthCheck to include reactiveClients"}, "afterCommit": {"oid": "617941d96a9f12ce150805e81c01c90dbfe1fc21", "author": {"user": {"login": "lkrzyzanek", "name": "Libor Krzyzanek"}}, "url": "https://github.com/quarkusio/quarkus/commit/617941d96a9f12ce150805e81c01c90dbfe1fc21", "committedDate": "2020-10-19T18:11:55Z", "message": "Improved MongoHealthCheck to include reactiveClients"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "617941d96a9f12ce150805e81c01c90dbfe1fc21", "author": {"user": {"login": "lkrzyzanek", "name": "Libor Krzyzanek"}}, "url": "https://github.com/quarkusio/quarkus/commit/617941d96a9f12ce150805e81c01c90dbfe1fc21", "committedDate": "2020-10-19T18:11:55Z", "message": "Improved MongoHealthCheck to include reactiveClients"}, "afterCommit": {"oid": "a950aa79f81f19cdcb05912c3f919d4e2474b887", "author": {"user": {"login": "lkrzyzanek", "name": "Libor Krzyzanek"}}, "url": "https://github.com/quarkusio/quarkus/commit/a950aa79f81f19cdcb05912c3f919d4e2474b887", "committedDate": "2020-10-19T18:15:06Z", "message": "Improved MongoHealthCheck to include reactiveClients"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5d954543b8a3c6f65acfede0bdec88639d151f4", "author": {"user": {"login": "lkrzyzanek", "name": "Libor Krzyzanek"}}, "url": "https://github.com/quarkusio/quarkus/commit/b5d954543b8a3c6f65acfede0bdec88639d151f4", "committedDate": "2020-10-19T18:58:01Z", "message": "Improved MongoHealthCheck to include reactiveClients"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a950aa79f81f19cdcb05912c3f919d4e2474b887", "author": {"user": {"login": "lkrzyzanek", "name": "Libor Krzyzanek"}}, "url": "https://github.com/quarkusio/quarkus/commit/a950aa79f81f19cdcb05912c3f919d4e2474b887", "committedDate": "2020-10-19T18:15:06Z", "message": "Improved MongoHealthCheck to include reactiveClients"}, "afterCommit": {"oid": "b5d954543b8a3c6f65acfede0bdec88639d151f4", "author": {"user": {"login": "lkrzyzanek", "name": "Libor Krzyzanek"}}, "url": "https://github.com/quarkusio/quarkus/commit/b5d954543b8a3c6f65acfede0bdec88639d151f4", "committedDate": "2020-10-19T18:58:01Z", "message": "Improved MongoHealthCheck to include reactiveClients"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMTQwNzI3", "url": "https://github.com/quarkusio/quarkus/pull/12781#pullrequestreview-512140727", "createdAt": "2020-10-19T20:38:38Z", "commit": {"oid": "b5d954543b8a3c6f65acfede0bdec88639d151f4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMTY1MDMy", "url": "https://github.com/quarkusio/quarkus/pull/12781#pullrequestreview-512165032", "createdAt": "2020-10-19T21:15:16Z", "commit": {"oid": "b5d954543b8a3c6f65acfede0bdec88639d151f4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToxNToxNlrOHkh71A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToxNToxNlrOHkh71A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2Njc3Mg==", "bodyText": "Instead of blocking indefinitely, maybe we can introduce a timeout of 10s with something like .await()..atMost(Duration.ofSeconds(10));.", "url": "https://github.com/quarkusio/quarkus/pull/12781#discussion_r508066772", "createdAt": "2020-10-19T21:15:16Z", "author": {"login": "machi1990"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/health/MongoHealthCheck.java", "diffHunk": "@@ -17,40 +17,69 @@\n import com.mongodb.client.MongoClient;\n \n import io.quarkus.arc.Arc;\n+import io.quarkus.arc.InstanceHandle;\n+import io.quarkus.mongodb.MongoClientName;\n+import io.quarkus.mongodb.reactive.ReactiveMongoClient;\n \n @Readiness\n @ApplicationScoped\n public class MongoHealthCheck implements HealthCheck {\n-    private static final String DEFAULT_CLIENT = \"__default__\";\n+\n+    public static final String CLIENT_DEFAULT = \"<default>\";\n+    public static final String CLIENT_DEFAULT_REACTIVE = \"<default-reactive>\";\n+\n     private Map<String, MongoClient> clients = new HashMap<>();\n+    private Map<String, ReactiveMongoClient> reactiveClients = new HashMap<>();\n \n     @PostConstruct\n     protected void init() {\n-        Set<Bean<?>> beans = Arc.container().beanManager().getBeans(MongoClient.class);\n-        for (Bean<?> bean : beans) {\n-            if (bean.getName() == null) {\n-                // this is the default mongo client: retrieve it by type\n-                MongoClient defaultClient = Arc.container().instance(MongoClient.class).get();\n-                clients.put(DEFAULT_CLIENT, defaultClient);\n-            } else {\n-                MongoClient client = (MongoClient) Arc.container().instance(bean.getName()).get();\n-                clients.put(bean.getName(), client);\n+        for (InstanceHandle<MongoClient> handle : Arc.container().select(MongoClient.class, Any.Literal.INSTANCE).handles()) {\n+            String clientName = getMongoClientName(handle.getBean());\n+            clients.put(clientName == null ? CLIENT_DEFAULT : clientName, handle.get());\n+        }\n+        // reactive clients\n+        for (InstanceHandle<ReactiveMongoClient> handle : Arc.container()\n+                .select(ReactiveMongoClient.class, Any.Literal.INSTANCE).handles()) {\n+            String clientName = getMongoClientName(handle.getBean());\n+            reactiveClients.put(clientName == null ? CLIENT_DEFAULT_REACTIVE : clientName, handle.get());\n+        }\n+    }\n+\n+    /**\n+     * Get mongoClient name if defined.\n+     *\n+     * @param bean\n+     * @return mongoClient name or null if not defined\n+     * @see MongoClientName\n+     */\n+    private String getMongoClientName(Bean bean) {\n+        for (Object qualifier : bean.getQualifiers()) {\n+            if (qualifier instanceof MongoClientName) {\n+                return ((MongoClientName) qualifier).value();\n             }\n         }\n+        return null;\n     }\n \n     @Override\n     public HealthCheckResponse call() {\n         HealthCheckResponseBuilder builder = HealthCheckResponse.named(\"MongoDB connection health check\").up();\n+        Document command = new Document(\"ping\", 1);\n         for (Map.Entry<String, MongoClient> client : clients.entrySet()) {\n-            boolean isDefault = DEFAULT_CLIENT.equals(client.getKey());\n-            MongoClient mongoClient = client.getValue();\n             try {\n-                Document document = mongoClient.getDatabase(\"admin\").runCommand(new Document(\"ping\", 1));\n-                String mongoClientName = isDefault ? \"default\" : client.getKey();\n-                builder.up().withData(mongoClientName, document.toJson());\n+                Document document = client.getValue().getDatabase(\"admin\").runCommand(command);\n+                builder.up().withData(client.getKey(), document.toJson());\n+            } catch (Exception e) {\n+                return builder.down().withData(\"reason\", \"client [\" + client.getKey() + \"]: \" + e.getMessage()).build();\n+            }\n+        }\n+        for (Map.Entry<String, ReactiveMongoClient> client : reactiveClients.entrySet()) {\n+            try {\n+                Document document = client.getValue().getDatabase(\"admin\").runCommand(command).await().indefinitely();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5d954543b8a3c6f65acfede0bdec88639d151f4"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0NTY4NjUy", "url": "https://github.com/quarkusio/quarkus/pull/12781#pullrequestreview-514568652", "createdAt": "2020-10-22T10:12:14Z", "commit": {"oid": "b5d954543b8a3c6f65acfede0bdec88639d151f4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1627, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}