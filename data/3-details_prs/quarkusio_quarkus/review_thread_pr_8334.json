{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MDYwNTA3", "number": 8334, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzoyNDo0MFrODt82jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToyODo1NVrODyIB_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTA5NTE5OnYy", "diffSide": "RIGHT", "path": "bom/runtime/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzoyNDo0MFrOF_rArg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzoyNDo0MFrOF_rArg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMwOTI5NA==", "bodyText": "I don't see a panache-mock module in what you pushed. Is that expected?", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r402309294", "createdAt": "2020-04-02T13:24:40Z", "author": {"login": "gsmet"}, "path": "bom/runtime/pom.xml", "diffHunk": "@@ -409,6 +409,11 @@\n                 <artifactId>quarkus-panache-common</artifactId>\n                 <version>${project.version}</version>\n             </dependency>\n+            <dependency>\n+                <groupId>io.quarkus</groupId>\n+                <artifactId>quarkus-panache-mock</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1171736a348a41736b3792d7f854cd7af3efb195"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODc4OTU5OnYy", "diffSide": "RIGHT", "path": "extensions/panache/panache-mock/runtime/src/main/java/io/quarkus/panache/mock/PanacheMock.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOTozODozN1rOGAOCgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToyMTowMVrOGF-7nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg4MzIwMA==", "bodyText": "Maybe use a ConcurentHashMap in case tests are run in parallel ?", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r402883200", "createdAt": "2020-04-03T09:38:37Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/panache-mock/runtime/src/main/java/io/quarkus/panache/mock/PanacheMock.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package io.quarkus.panache.mock;\n+\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.mockito.Mockito;\n+import org.mockito.internal.invocation.DefaultInvocationFactory;\n+import org.mockito.internal.invocation.InterceptedInvocation;\n+import org.mockito.internal.invocation.RealMethod;\n+import org.mockito.internal.util.MockUtil;\n+import org.mockito.invocation.MockHandler;\n+import org.mockito.mock.MockCreationSettings;\n+\n+public class PanacheMock {\n+\n+    public static boolean IsMockEnabled = false;\n+\n+    private final static Map<Class<?>, Object> mocks = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bebf746e804899437c71533727cb4531284e3574"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg4NDUzOA==", "bodyText": "That would not help: tests can't run in parallel with that setup, because the set of classes to mock and the methods mocked is test-specific. So we'd have to make this a thread-local, which would mean that reactive code would likely fail or require context propagation.", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r402884538", "createdAt": "2020-04-03T09:40:52Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-mock/runtime/src/main/java/io/quarkus/panache/mock/PanacheMock.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package io.quarkus.panache.mock;\n+\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.mockito.Mockito;\n+import org.mockito.internal.invocation.DefaultInvocationFactory;\n+import org.mockito.internal.invocation.InterceptedInvocation;\n+import org.mockito.internal.invocation.RealMethod;\n+import org.mockito.internal.util.MockUtil;\n+import org.mockito.invocation.MockHandler;\n+import org.mockito.mock.MockCreationSettings;\n+\n+public class PanacheMock {\n+\n+    public static boolean IsMockEnabled = false;\n+\n+    private final static Map<Class<?>, Object> mocks = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg4MzIwMA=="}, "originalCommit": {"oid": "bebf746e804899437c71533727cb4531284e3574"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg4OTc0OA==", "bodyText": "I think it's OK for a first implementation as soon as it is clearly documented that test with panache mock should not be run in parallel.", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r402889748", "createdAt": "2020-04-03T09:50:23Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/panache-mock/runtime/src/main/java/io/quarkus/panache/mock/PanacheMock.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package io.quarkus.panache.mock;\n+\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.mockito.Mockito;\n+import org.mockito.internal.invocation.DefaultInvocationFactory;\n+import org.mockito.internal.invocation.InterceptedInvocation;\n+import org.mockito.internal.invocation.RealMethod;\n+import org.mockito.internal.util.MockUtil;\n+import org.mockito.invocation.MockHandler;\n+import org.mockito.mock.MockCreationSettings;\n+\n+public class PanacheMock {\n+\n+    public static boolean IsMockEnabled = false;\n+\n+    private final static Map<Class<?>, Object> mocks = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg4MzIwMA=="}, "originalCommit": {"oid": "bebf746e804899437c71533727cb4531284e3574"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4OTI1MA==", "bodyText": "Is it possible that running user code will access this? e.g. If I mock a request then send a HTTP request will the HTTP request handler code access this map? If so it should be a CHM anyway to make sure that any modifications are visible to the other thread.", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r405989250", "createdAt": "2020-04-09T06:46:30Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/panache/panache-mock/runtime/src/main/java/io/quarkus/panache/mock/PanacheMock.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package io.quarkus.panache.mock;\n+\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.mockito.Mockito;\n+import org.mockito.internal.invocation.DefaultInvocationFactory;\n+import org.mockito.internal.invocation.InterceptedInvocation;\n+import org.mockito.internal.invocation.RealMethod;\n+import org.mockito.internal.util.MockUtil;\n+import org.mockito.invocation.MockHandler;\n+import org.mockito.mock.MockCreationSettings;\n+\n+public class PanacheMock {\n+\n+    public static boolean IsMockEnabled = false;\n+\n+    private final static Map<Class<?>, Object> mocks = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg4MzIwMA=="}, "originalCommit": {"oid": "bebf746e804899437c71533727cb4531284e3574"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNzEzMw==", "bodyText": "Fixed", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r408927133", "createdAt": "2020-04-15T15:21:01Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-mock/runtime/src/main/java/io/quarkus/panache/mock/PanacheMock.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package io.quarkus.panache.mock;\n+\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.mockito.Mockito;\n+import org.mockito.internal.invocation.DefaultInvocationFactory;\n+import org.mockito.internal.invocation.InterceptedInvocation;\n+import org.mockito.internal.invocation.RealMethod;\n+import org.mockito.internal.util.MockUtil;\n+import org.mockito.invocation.MockHandler;\n+import org.mockito.mock.MockCreationSettings;\n+\n+public class PanacheMock {\n+\n+    public static boolean IsMockEnabled = false;\n+\n+    private final static Map<Class<?>, Object> mocks = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg4MzIwMA=="}, "originalCommit": {"oid": "bebf746e804899437c71533727cb4531284e3574"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTQ1NzE1OnYy", "diffSide": "RIGHT", "path": "extensions/panache/panache-mock/deployment/src/main/java/io/quarkus/panache/mock/deployment/PanacheMockMethodCustomizer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNjo0MTo0NVrOGDLgIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDoyMDo0MlrOGD70ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4NzM2MA==", "bodyText": "Double and long take up two local variable slots. Have you tested this methods methods that take double and long as params? Whenever you are doing anything with bytecode that involves primitives it is always a good idea to write explicit checks for long and double as they are a pain.", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r405987360", "createdAt": "2020-04-09T06:41:45Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/panache/panache-mock/deployment/src/main/java/io/quarkus/panache/mock/deployment/PanacheMockMethodCustomizer.java", "diffHunk": "@@ -0,0 +1,123 @@\n+package io.quarkus.panache.mock.deployment;\n+\n+import org.jboss.jandex.MethodInfo;\n+import org.jboss.jandex.Type.Kind;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n+\n+import io.quarkus.panache.common.deployment.JandexUtil;\n+import io.quarkus.panache.common.deployment.PanacheMethodCustomizer;\n+import io.quarkus.panache.mock.PanacheMock;\n+\n+public class PanacheMockMethodCustomizer implements PanacheMethodCustomizer {\n+\n+    private final static String PANACHE_MOCK_BINARY_NAME = PanacheMock.class.getName().replace('.', '/');\n+    private final static String PANACHE_MOCK_INVOKE_REAL_METHOD_EXCEPTION_BINARY_NAME = PanacheMock.InvokeRealMethodException.class\n+            .getName().replace('.', '/');\n+\n+    @Override\n+    public void customize(Type entityClassSignature, MethodInfo method, MethodVisitor mv) {\n+        /*\n+         * Generated code:\n+         * \n+         * if(PanacheMock.IsMockEnabled && PanacheMock.isMocked(TestClass.class)) {\n+         * try {\n+         * return (int)PanacheMock.mockMethod(TestClass.class, \"foo\", new Class<?>[] {int.class}, new Object[] {arg});\n+         * } catch (PanacheMock.InvokeRealMethodException e) {\n+         * // fall-through\n+         * }\n+         * }\n+         * \n+         * Bytecode approx:\n+         * \n+         * 0: getstatic #16 // Field PanacheMock.IsMockEnabled:Z\n+         * 3: ifeq 50\n+         * 6: ldc #1 // class MyTestMockito$TestClass\n+         * 8: invokestatic #22 // Method PanacheMock.isMocked:(Ljava/lang/Class;)Z\n+         * 11: ifeq 50\n+         * 14: ldc #1 // class MyTestMockito$TestClass\n+         * 16: ldc #26 // String foo\n+         * \n+         * 18: iconst_1\n+         * 19: anewarray #27 // class java/lang/Class\n+         * 22: dup\n+         * 23: iconst_0\n+         * 24: getstatic #29 // Field java/lang/Integer.TYPE:Ljava/lang/Class;\n+         * 27: aastore\n+         *\n+         * 28: iconst_1\n+         * 29: anewarray #3 // class java/lang/Object\n+         * 32: dup\n+         * 33: iconst_0\n+         * 34: iload_0\n+         * 35: invokestatic #35 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+         * 38: aastore\n+         * \n+         * 39: invokestatic #39 // Method\n+         * PanacheMock.mockMethod:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;\n+         * 42: checkcast #30 // class java/lang/Integer\n+         * 45: invokevirtual #43 // Method java/lang/Integer.intValue:()I\n+         * 48: ireturn\n+         * 49: astore_1\n+         */\n+        Label realMethodLabel = new Label();\n+\n+        mv.visitFieldInsn(Opcodes.GETSTATIC, PANACHE_MOCK_BINARY_NAME, \"IsMockEnabled\", \"Z\");\n+        mv.visitJumpInsn(Opcodes.IFEQ, realMethodLabel);\n+\n+        mv.visitLdcInsn(entityClassSignature);\n+        mv.visitMethodInsn(Opcodes.INVOKESTATIC, PANACHE_MOCK_BINARY_NAME, \"isMocked\", \"(Ljava/lang/Class;)Z\", false);\n+        mv.visitJumpInsn(Opcodes.IFEQ, realMethodLabel);\n+\n+        Label tryStart = new Label();\n+        Label tryEnd = new Label();\n+        Label tryHandler = new Label();\n+        mv.visitTryCatchBlock(tryStart, tryEnd, tryHandler, PANACHE_MOCK_INVOKE_REAL_METHOD_EXCEPTION_BINARY_NAME);\n+        mv.visitLabel(tryStart);\n+\n+        mv.visitLdcInsn(entityClassSignature);\n+        mv.visitLdcInsn(method.name());\n+\n+        mv.visitLdcInsn(method.parameters().size());\n+        mv.visitTypeInsn(Opcodes.ANEWARRAY, \"java/lang/Class\");\n+\n+        int i = 0;\n+        for (org.jboss.jandex.Type paramType : method.parameters()) {\n+            mv.visitInsn(Opcodes.DUP);\n+            mv.visitLdcInsn(i);\n+            JandexUtil.visitLdc(mv, paramType);\n+            mv.visitInsn(Opcodes.AASTORE);\n+            i++;\n+        }\n+\n+        mv.visitLdcInsn(method.parameters().size());\n+        mv.visitTypeInsn(Opcodes.ANEWARRAY, \"java/lang/Object\");\n+\n+        i = 0;\n+        for (org.jboss.jandex.Type paramType : method.parameters()) {\n+            mv.visitInsn(Opcodes.DUP);\n+            mv.visitLdcInsn(i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bee47cb641aea00966c64861ef201857747e5eda"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczMzQ2OQ==", "bodyText": "So, we don't have any method in the superclasses in question that we generate bridges for (PanacheEntityBase and PanacheRepositoryBase) so it doesn't happen. And I can't test this by adding a method to these classes, and no other classes have bridge methods generated.\nSo in general, sure, but I couldn't test this if I supported it. I could add a guard to make sure we never add such methods.", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r406733469", "createdAt": "2020-04-10T12:21:11Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-mock/deployment/src/main/java/io/quarkus/panache/mock/deployment/PanacheMockMethodCustomizer.java", "diffHunk": "@@ -0,0 +1,123 @@\n+package io.quarkus.panache.mock.deployment;\n+\n+import org.jboss.jandex.MethodInfo;\n+import org.jboss.jandex.Type.Kind;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n+\n+import io.quarkus.panache.common.deployment.JandexUtil;\n+import io.quarkus.panache.common.deployment.PanacheMethodCustomizer;\n+import io.quarkus.panache.mock.PanacheMock;\n+\n+public class PanacheMockMethodCustomizer implements PanacheMethodCustomizer {\n+\n+    private final static String PANACHE_MOCK_BINARY_NAME = PanacheMock.class.getName().replace('.', '/');\n+    private final static String PANACHE_MOCK_INVOKE_REAL_METHOD_EXCEPTION_BINARY_NAME = PanacheMock.InvokeRealMethodException.class\n+            .getName().replace('.', '/');\n+\n+    @Override\n+    public void customize(Type entityClassSignature, MethodInfo method, MethodVisitor mv) {\n+        /*\n+         * Generated code:\n+         * \n+         * if(PanacheMock.IsMockEnabled && PanacheMock.isMocked(TestClass.class)) {\n+         * try {\n+         * return (int)PanacheMock.mockMethod(TestClass.class, \"foo\", new Class<?>[] {int.class}, new Object[] {arg});\n+         * } catch (PanacheMock.InvokeRealMethodException e) {\n+         * // fall-through\n+         * }\n+         * }\n+         * \n+         * Bytecode approx:\n+         * \n+         * 0: getstatic #16 // Field PanacheMock.IsMockEnabled:Z\n+         * 3: ifeq 50\n+         * 6: ldc #1 // class MyTestMockito$TestClass\n+         * 8: invokestatic #22 // Method PanacheMock.isMocked:(Ljava/lang/Class;)Z\n+         * 11: ifeq 50\n+         * 14: ldc #1 // class MyTestMockito$TestClass\n+         * 16: ldc #26 // String foo\n+         * \n+         * 18: iconst_1\n+         * 19: anewarray #27 // class java/lang/Class\n+         * 22: dup\n+         * 23: iconst_0\n+         * 24: getstatic #29 // Field java/lang/Integer.TYPE:Ljava/lang/Class;\n+         * 27: aastore\n+         *\n+         * 28: iconst_1\n+         * 29: anewarray #3 // class java/lang/Object\n+         * 32: dup\n+         * 33: iconst_0\n+         * 34: iload_0\n+         * 35: invokestatic #35 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+         * 38: aastore\n+         * \n+         * 39: invokestatic #39 // Method\n+         * PanacheMock.mockMethod:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;\n+         * 42: checkcast #30 // class java/lang/Integer\n+         * 45: invokevirtual #43 // Method java/lang/Integer.intValue:()I\n+         * 48: ireturn\n+         * 49: astore_1\n+         */\n+        Label realMethodLabel = new Label();\n+\n+        mv.visitFieldInsn(Opcodes.GETSTATIC, PANACHE_MOCK_BINARY_NAME, \"IsMockEnabled\", \"Z\");\n+        mv.visitJumpInsn(Opcodes.IFEQ, realMethodLabel);\n+\n+        mv.visitLdcInsn(entityClassSignature);\n+        mv.visitMethodInsn(Opcodes.INVOKESTATIC, PANACHE_MOCK_BINARY_NAME, \"isMocked\", \"(Ljava/lang/Class;)Z\", false);\n+        mv.visitJumpInsn(Opcodes.IFEQ, realMethodLabel);\n+\n+        Label tryStart = new Label();\n+        Label tryEnd = new Label();\n+        Label tryHandler = new Label();\n+        mv.visitTryCatchBlock(tryStart, tryEnd, tryHandler, PANACHE_MOCK_INVOKE_REAL_METHOD_EXCEPTION_BINARY_NAME);\n+        mv.visitLabel(tryStart);\n+\n+        mv.visitLdcInsn(entityClassSignature);\n+        mv.visitLdcInsn(method.name());\n+\n+        mv.visitLdcInsn(method.parameters().size());\n+        mv.visitTypeInsn(Opcodes.ANEWARRAY, \"java/lang/Class\");\n+\n+        int i = 0;\n+        for (org.jboss.jandex.Type paramType : method.parameters()) {\n+            mv.visitInsn(Opcodes.DUP);\n+            mv.visitLdcInsn(i);\n+            JandexUtil.visitLdc(mv, paramType);\n+            mv.visitInsn(Opcodes.AASTORE);\n+            i++;\n+        }\n+\n+        mv.visitLdcInsn(method.parameters().size());\n+        mv.visitTypeInsn(Opcodes.ANEWARRAY, \"java/lang/Object\");\n+\n+        i = 0;\n+        for (org.jboss.jandex.Type paramType : method.parameters()) {\n+            mv.visitInsn(Opcodes.DUP);\n+            mv.visitLdcInsn(i);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4NzM2MA=="}, "originalCommit": {"oid": "bee47cb641aea00966c64861ef201857747e5eda"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3OTAwMw==", "bodyText": "You were right, I've implemented and tested it.", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r406779003", "createdAt": "2020-04-10T14:20:42Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-mock/deployment/src/main/java/io/quarkus/panache/mock/deployment/PanacheMockMethodCustomizer.java", "diffHunk": "@@ -0,0 +1,123 @@\n+package io.quarkus.panache.mock.deployment;\n+\n+import org.jboss.jandex.MethodInfo;\n+import org.jboss.jandex.Type.Kind;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n+\n+import io.quarkus.panache.common.deployment.JandexUtil;\n+import io.quarkus.panache.common.deployment.PanacheMethodCustomizer;\n+import io.quarkus.panache.mock.PanacheMock;\n+\n+public class PanacheMockMethodCustomizer implements PanacheMethodCustomizer {\n+\n+    private final static String PANACHE_MOCK_BINARY_NAME = PanacheMock.class.getName().replace('.', '/');\n+    private final static String PANACHE_MOCK_INVOKE_REAL_METHOD_EXCEPTION_BINARY_NAME = PanacheMock.InvokeRealMethodException.class\n+            .getName().replace('.', '/');\n+\n+    @Override\n+    public void customize(Type entityClassSignature, MethodInfo method, MethodVisitor mv) {\n+        /*\n+         * Generated code:\n+         * \n+         * if(PanacheMock.IsMockEnabled && PanacheMock.isMocked(TestClass.class)) {\n+         * try {\n+         * return (int)PanacheMock.mockMethod(TestClass.class, \"foo\", new Class<?>[] {int.class}, new Object[] {arg});\n+         * } catch (PanacheMock.InvokeRealMethodException e) {\n+         * // fall-through\n+         * }\n+         * }\n+         * \n+         * Bytecode approx:\n+         * \n+         * 0: getstatic #16 // Field PanacheMock.IsMockEnabled:Z\n+         * 3: ifeq 50\n+         * 6: ldc #1 // class MyTestMockito$TestClass\n+         * 8: invokestatic #22 // Method PanacheMock.isMocked:(Ljava/lang/Class;)Z\n+         * 11: ifeq 50\n+         * 14: ldc #1 // class MyTestMockito$TestClass\n+         * 16: ldc #26 // String foo\n+         * \n+         * 18: iconst_1\n+         * 19: anewarray #27 // class java/lang/Class\n+         * 22: dup\n+         * 23: iconst_0\n+         * 24: getstatic #29 // Field java/lang/Integer.TYPE:Ljava/lang/Class;\n+         * 27: aastore\n+         *\n+         * 28: iconst_1\n+         * 29: anewarray #3 // class java/lang/Object\n+         * 32: dup\n+         * 33: iconst_0\n+         * 34: iload_0\n+         * 35: invokestatic #35 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+         * 38: aastore\n+         * \n+         * 39: invokestatic #39 // Method\n+         * PanacheMock.mockMethod:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;\n+         * 42: checkcast #30 // class java/lang/Integer\n+         * 45: invokevirtual #43 // Method java/lang/Integer.intValue:()I\n+         * 48: ireturn\n+         * 49: astore_1\n+         */\n+        Label realMethodLabel = new Label();\n+\n+        mv.visitFieldInsn(Opcodes.GETSTATIC, PANACHE_MOCK_BINARY_NAME, \"IsMockEnabled\", \"Z\");\n+        mv.visitJumpInsn(Opcodes.IFEQ, realMethodLabel);\n+\n+        mv.visitLdcInsn(entityClassSignature);\n+        mv.visitMethodInsn(Opcodes.INVOKESTATIC, PANACHE_MOCK_BINARY_NAME, \"isMocked\", \"(Ljava/lang/Class;)Z\", false);\n+        mv.visitJumpInsn(Opcodes.IFEQ, realMethodLabel);\n+\n+        Label tryStart = new Label();\n+        Label tryEnd = new Label();\n+        Label tryHandler = new Label();\n+        mv.visitTryCatchBlock(tryStart, tryEnd, tryHandler, PANACHE_MOCK_INVOKE_REAL_METHOD_EXCEPTION_BINARY_NAME);\n+        mv.visitLabel(tryStart);\n+\n+        mv.visitLdcInsn(entityClassSignature);\n+        mv.visitLdcInsn(method.name());\n+\n+        mv.visitLdcInsn(method.parameters().size());\n+        mv.visitTypeInsn(Opcodes.ANEWARRAY, \"java/lang/Class\");\n+\n+        int i = 0;\n+        for (org.jboss.jandex.Type paramType : method.parameters()) {\n+            mv.visitInsn(Opcodes.DUP);\n+            mv.visitLdcInsn(i);\n+            JandexUtil.visitLdc(mv, paramType);\n+            mv.visitInsn(Opcodes.AASTORE);\n+            i++;\n+        }\n+\n+        mv.visitLdcInsn(method.parameters().size());\n+        mv.visitTypeInsn(Opcodes.ANEWARRAY, \"java/lang/Object\");\n+\n+        i = 0;\n+        for (org.jboss.jandex.Type paramType : method.parameters()) {\n+            mv.visitInsn(Opcodes.DUP);\n+            mv.visitLdcInsn(i);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4NzM2MA=="}, "originalCommit": {"oid": "bee47cb641aea00966c64861ef201857747e5eda"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTQ3NjUzOnYy", "diffSide": "RIGHT", "path": "integration-tests/hibernate-orm-panache/src/test/java/io/quarkus/it/panache/PanacheMockingTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNjo0OToyMVrOGDLrwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjoyNzo1NlrOGD5LHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk5MDMzNg==", "bodyText": "Can you add some tests with multiple long/double method parameters? It should show up the issue I brought up above. These tests don't show it because there is only a single parameter.", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r405990336", "createdAt": "2020-04-09T06:49:21Z", "author": {"login": "stuartwdouglas"}, "path": "integration-tests/hibernate-orm-panache/src/test/java/io/quarkus/it/panache/PanacheMockingTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package io.quarkus.it.panache;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+import javax.persistence.LockModeType;\n+import javax.ws.rs.WebApplicationException;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import io.quarkus.hibernate.orm.panache.PanacheRepositoryBase;\n+import io.quarkus.panache.mock.PanacheMock;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.mockito.InjectMock;\n+\n+@QuarkusTest\n+public class PanacheMockingTest {\n+\n+    @Test\n+    @Order(1)\n+    public void testPanacheMocking() {\n+        PanacheMock.mock(Person.class);\n+\n+        Assertions.assertEquals(0, Person.count());\n+\n+        Mockito.when(Person.count()).thenReturn(23l);\n+        Assertions.assertEquals(23, Person.count());\n+\n+        Mockito.when(Person.count()).thenReturn(42l);\n+        Assertions.assertEquals(42, Person.count());\n+\n+        Mockito.when(Person.count()).thenCallRealMethod();\n+        Assertions.assertEquals(0, Person.count());\n+\n+        PanacheMock.verify(Person.class, Mockito.times(4)).count();\n+\n+        Person p = new Person();\n+        Mockito.when(Person.findById(12l)).thenReturn(p);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bee47cb641aea00966c64861ef201857747e5eda"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNDU5OA==", "bodyText": "I can't, see above.", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r406734598", "createdAt": "2020-04-10T12:24:38Z", "author": {"login": "FroMage"}, "path": "integration-tests/hibernate-orm-panache/src/test/java/io/quarkus/it/panache/PanacheMockingTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package io.quarkus.it.panache;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+import javax.persistence.LockModeType;\n+import javax.ws.rs.WebApplicationException;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import io.quarkus.hibernate.orm.panache.PanacheRepositoryBase;\n+import io.quarkus.panache.mock.PanacheMock;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.mockito.InjectMock;\n+\n+@QuarkusTest\n+public class PanacheMockingTest {\n+\n+    @Test\n+    @Order(1)\n+    public void testPanacheMocking() {\n+        PanacheMock.mock(Person.class);\n+\n+        Assertions.assertEquals(0, Person.count());\n+\n+        Mockito.when(Person.count()).thenReturn(23l);\n+        Assertions.assertEquals(23, Person.count());\n+\n+        Mockito.when(Person.count()).thenReturn(42l);\n+        Assertions.assertEquals(42, Person.count());\n+\n+        Mockito.when(Person.count()).thenCallRealMethod();\n+        Assertions.assertEquals(0, Person.count());\n+\n+        PanacheMock.verify(Person.class, Mockito.times(4)).count();\n+\n+        Person p = new Person();\n+        Mockito.when(Person.findById(12l)).thenReturn(p);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk5MDMzNg=="}, "originalCommit": {"oid": "bee47cb641aea00966c64861ef201857747e5eda"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNTY0Ng==", "bodyText": "Actually I can make user methods do this. Sorry.", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r406735646", "createdAt": "2020-04-10T12:27:56Z", "author": {"login": "FroMage"}, "path": "integration-tests/hibernate-orm-panache/src/test/java/io/quarkus/it/panache/PanacheMockingTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package io.quarkus.it.panache;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+import javax.persistence.LockModeType;\n+import javax.ws.rs.WebApplicationException;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import io.quarkus.hibernate.orm.panache.PanacheRepositoryBase;\n+import io.quarkus.panache.mock.PanacheMock;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.mockito.InjectMock;\n+\n+@QuarkusTest\n+public class PanacheMockingTest {\n+\n+    @Test\n+    @Order(1)\n+    public void testPanacheMocking() {\n+        PanacheMock.mock(Person.class);\n+\n+        Assertions.assertEquals(0, Person.count());\n+\n+        Mockito.when(Person.count()).thenReturn(23l);\n+        Assertions.assertEquals(23, Person.count());\n+\n+        Mockito.when(Person.count()).thenReturn(42l);\n+        Assertions.assertEquals(42, Person.count());\n+\n+        Mockito.when(Person.count()).thenCallRealMethod();\n+        Assertions.assertEquals(0, Person.count());\n+\n+        PanacheMock.verify(Person.class, Mockito.times(4)).count();\n+\n+        Person p = new Person();\n+        Mockito.when(Person.findById(12l)).thenReturn(p);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk5MDMzNg=="}, "originalCommit": {"oid": "bee47cb641aea00966c64861ef201857747e5eda"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTQ5NDIxOnYy", "diffSide": "RIGHT", "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/PanacheRepositoryEnhancer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNjo1NTozNFrOGDL2KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDoyMDowOVrOGD7zMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk5MzAwMA==", "bodyText": "I don't really understand the context here, but are you sure there will never be primitive params?", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r405993000", "createdAt": "2020-04-09T06:55:34Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/PanacheRepositoryEnhancer.java", "diffHunk": "@@ -101,26 +117,102 @@ private String recursivelyFindEntityTypeFromClass(DotName clazz, DotName reposit\n                 throw new IllegalStateException(\n                         \"Failed to find supertype \" + repositoryDotName + \" from entity class \" + clazz);\n             org.jboss.jandex.Type entityType = typeParameters.get(0);\n-            return entityType.name().toString().replace('.', '/');\n+            org.jboss.jandex.Type idType = typeParameters.get(1);\n+            return new String[] {\n+                    entityType.name().toString().replace('.', '/'),\n+                    idType.name().toString().replace('.', '/')\n+            };\n         }\n \n         @Override\n         public void visitEnd() {\n             for (MethodInfo method : panacheRepositoryBaseClassInfo.methods()) {\n                 // Do not generate a method that already exists\n-                if (!JandexUtil.containsMethod(daoClassInfo, method)) {\n+                String descriptor = JandexUtil.getDescriptor(method, name -> typeArguments.get(name));\n+                if (!userMethods.contains(method.name() + \"/\" + descriptor)) {\n                     AnnotationInstance bridge = method.annotation(JandexUtil.DOTNAME_GENERATE_BRIDGE);\n                     if (bridge != null) {\n-                        generateMethod(method, bridge.value(\"targetReturnTypeErased\"));\n+                        generateModelBridge(method, bridge.value(\"targetReturnTypeErased\"));\n+                        if (needsJvmBridge(method)) {\n+                            generateJvmBridge(method);\n+                        }\n                     }\n                 }\n             }\n             super.visitEnd();\n         }\n \n-        private void generateMethod(MethodInfo method, AnnotationValue targetReturnTypeErased) {\n-            String descriptor = JandexUtil.getDescriptor(method, name -> name.equals(\"Entity\") ? entitySignature : null);\n-            String signature = JandexUtil.getSignature(method, name -> name.equals(\"Entity\") ? entitySignature : null);\n+        private boolean needsJvmBridge(MethodInfo method) {\n+            if (needsJvmBridge(method.returnType()))\n+                return true;\n+            for (org.jboss.jandex.Type paramType : method.parameters()) {\n+                if (needsJvmBridge(paramType))\n+                    return true;\n+            }\n+            return false;\n+        }\n+\n+        private boolean needsJvmBridge(org.jboss.jandex.Type type) {\n+            if (type.kind() == Kind.TYPE_VARIABLE) {\n+                String typeParamName = type.asTypeVariable().identifier();\n+                return typeArguments.containsKey(typeParamName);\n+            }\n+            return false;\n+        }\n+\n+        private void generateJvmBridge(MethodInfo method) {\n+            // get a bounds-erased descriptor\n+            String descriptor = JandexUtil.getDescriptor(method, name -> null);\n+            // make sure we need a bridge\n+            if (!userMethods.contains(method.name() + \"/\" + descriptor)) {\n+                MethodVisitor mv = super.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_SYNTHETIC | Opcodes.ACC_BRIDGE,\n+                        method.name(),\n+                        descriptor,\n+                        null,\n+                        null);\n+                List<org.jboss.jandex.Type> parameters = method.parameters();\n+                for (int i = 0; i < parameters.size(); i++) {\n+                    mv.visitParameter(method.parameterName(i), 0 /* modifiers */);\n+                }\n+                mv.visitCode();\n+                // this\n+                mv.visitIntInsn(Opcodes.ALOAD, 0);\n+                // each param\n+                for (int i = 0; i < parameters.size(); i++) {\n+                    org.jboss.jandex.Type paramType = parameters.get(i);\n+                    mv.visitIntInsn(Opcodes.ALOAD, i + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bee47cb641aea00966c64861ef201857747e5eda"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3ODY3Mw==", "bodyText": "ATM there are none. I've added a check if it ever happens.", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r406778673", "createdAt": "2020-04-10T14:20:09Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/PanacheRepositoryEnhancer.java", "diffHunk": "@@ -101,26 +117,102 @@ private String recursivelyFindEntityTypeFromClass(DotName clazz, DotName reposit\n                 throw new IllegalStateException(\n                         \"Failed to find supertype \" + repositoryDotName + \" from entity class \" + clazz);\n             org.jboss.jandex.Type entityType = typeParameters.get(0);\n-            return entityType.name().toString().replace('.', '/');\n+            org.jboss.jandex.Type idType = typeParameters.get(1);\n+            return new String[] {\n+                    entityType.name().toString().replace('.', '/'),\n+                    idType.name().toString().replace('.', '/')\n+            };\n         }\n \n         @Override\n         public void visitEnd() {\n             for (MethodInfo method : panacheRepositoryBaseClassInfo.methods()) {\n                 // Do not generate a method that already exists\n-                if (!JandexUtil.containsMethod(daoClassInfo, method)) {\n+                String descriptor = JandexUtil.getDescriptor(method, name -> typeArguments.get(name));\n+                if (!userMethods.contains(method.name() + \"/\" + descriptor)) {\n                     AnnotationInstance bridge = method.annotation(JandexUtil.DOTNAME_GENERATE_BRIDGE);\n                     if (bridge != null) {\n-                        generateMethod(method, bridge.value(\"targetReturnTypeErased\"));\n+                        generateModelBridge(method, bridge.value(\"targetReturnTypeErased\"));\n+                        if (needsJvmBridge(method)) {\n+                            generateJvmBridge(method);\n+                        }\n                     }\n                 }\n             }\n             super.visitEnd();\n         }\n \n-        private void generateMethod(MethodInfo method, AnnotationValue targetReturnTypeErased) {\n-            String descriptor = JandexUtil.getDescriptor(method, name -> name.equals(\"Entity\") ? entitySignature : null);\n-            String signature = JandexUtil.getSignature(method, name -> name.equals(\"Entity\") ? entitySignature : null);\n+        private boolean needsJvmBridge(MethodInfo method) {\n+            if (needsJvmBridge(method.returnType()))\n+                return true;\n+            for (org.jboss.jandex.Type paramType : method.parameters()) {\n+                if (needsJvmBridge(paramType))\n+                    return true;\n+            }\n+            return false;\n+        }\n+\n+        private boolean needsJvmBridge(org.jboss.jandex.Type type) {\n+            if (type.kind() == Kind.TYPE_VARIABLE) {\n+                String typeParamName = type.asTypeVariable().identifier();\n+                return typeArguments.containsKey(typeParamName);\n+            }\n+            return false;\n+        }\n+\n+        private void generateJvmBridge(MethodInfo method) {\n+            // get a bounds-erased descriptor\n+            String descriptor = JandexUtil.getDescriptor(method, name -> null);\n+            // make sure we need a bridge\n+            if (!userMethods.contains(method.name() + \"/\" + descriptor)) {\n+                MethodVisitor mv = super.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_SYNTHETIC | Opcodes.ACC_BRIDGE,\n+                        method.name(),\n+                        descriptor,\n+                        null,\n+                        null);\n+                List<org.jboss.jandex.Type> parameters = method.parameters();\n+                for (int i = 0; i < parameters.size(); i++) {\n+                    mv.visitParameter(method.parameterName(i), 0 /* modifiers */);\n+                }\n+                mv.visitCode();\n+                // this\n+                mv.visitIntInsn(Opcodes.ALOAD, 0);\n+                // each param\n+                for (int i = 0; i < parameters.size(); i++) {\n+                    org.jboss.jandex.Type paramType = parameters.get(i);\n+                    mv.visitIntInsn(Opcodes.ALOAD, i + 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk5MzAwMA=="}, "originalCommit": {"oid": "bee47cb641aea00966c64861ef201857747e5eda"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTUxMzE5OnYy", "diffSide": "RIGHT", "path": "extensions/panache/panache-mock/deployment/src/main/java/io/quarkus/panache/mock/deployment/PanacheMockResourceProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzowMjoxM1rOGDMBbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToyNzowOVrOGF_NyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk5NTg4Nw==", "bodyText": "I wonder if we could / should ditch the full blown extension approach here, and just introduce a test module that utilizes the TestBuildChainCustomizerProducer we are introducing in #8491", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r405995887", "createdAt": "2020-04-09T07:02:13Z", "author": {"login": "geoand"}, "path": "extensions/panache/panache-mock/deployment/src/main/java/io/quarkus/panache/mock/deployment/PanacheMockResourceProcessor.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.quarkus.panache.mock.deployment;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.LaunchModeBuildItem;\n+import io.quarkus.panache.common.deployment.PanacheMethodCustomizerBuildItem;\n+import io.quarkus.runtime.LaunchMode;\n+\n+public final class PanacheMockResourceProcessor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bee47cb641aea00966c64861ef201857747e5eda"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3ODUwMA==", "bodyText": "Good idea, done.", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r406778500", "createdAt": "2020-04-10T14:19:49Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-mock/deployment/src/main/java/io/quarkus/panache/mock/deployment/PanacheMockResourceProcessor.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.quarkus.panache.mock.deployment;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.LaunchModeBuildItem;\n+import io.quarkus.panache.common.deployment.PanacheMethodCustomizerBuildItem;\n+import io.quarkus.runtime.LaunchMode;\n+\n+public final class PanacheMockResourceProcessor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk5NTg4Nw=="}, "originalCommit": {"oid": "bee47cb641aea00966c64861ef201857747e5eda"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkzMTc4NA==", "bodyText": "Excellent", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r408931784", "createdAt": "2020-04-15T15:27:09Z", "author": {"login": "geoand"}, "path": "extensions/panache/panache-mock/deployment/src/main/java/io/quarkus/panache/mock/deployment/PanacheMockResourceProcessor.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.quarkus.panache.mock.deployment;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.LaunchModeBuildItem;\n+import io.quarkus.panache.common.deployment.PanacheMethodCustomizerBuildItem;\n+import io.quarkus.runtime.LaunchMode;\n+\n+public final class PanacheMockResourceProcessor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk5NTg4Nw=="}, "originalCommit": {"oid": "bee47cb641aea00966c64861ef201857747e5eda"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTU4MDg1OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzoyNToyMlrOGDMrNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDowNjo0M1rOGD7ckw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNjU4Mw==", "bodyText": "The documentation now refers to it as the \"active record pattern\". And I didn't put quote in it so if you want your quote please update the other titles ;)", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r406006583", "createdAt": "2020-04-09T07:25:22Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -661,6 +661,169 @@ public class PersonRepository implements PanacheRepositoryBase<Person,Integer> {\n }\n ----\n \n+== Mocking\n+\n+=== Using the \u201centity pattern\u201d", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bee47cb641aea00966c64861ef201857747e5eda"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3Mjg4Mw==", "bodyText": "Grr, I much prefer \"entity pattern\" over \"active record pattern\" because those are not active records.", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r406772883", "createdAt": "2020-04-10T14:06:43Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -661,6 +661,169 @@ public class PersonRepository implements PanacheRepositoryBase<Person,Integer> {\n }\n ----\n \n+== Mocking\n+\n+=== Using the \u201centity pattern\u201d", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNjU4Mw=="}, "originalCommit": {"oid": "bee47cb641aea00966c64861ef201857747e5eda"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTU4Mjk1OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzoyNjowN1rOGDMsjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNzoxNDoxNFrOGEez4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNjkyNw==", "bodyText": "We usually include the imports inside the doc.", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r406006927", "createdAt": "2020-04-09T07:26:07Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -661,6 +661,169 @@ public class PersonRepository implements PanacheRepositoryBase<Person,Integer> {\n }\n ----\n \n+== Mocking\n+\n+=== Using the \u201centity pattern\u201d\n+\n+If you are using the \u201centity pattern\u201d you cannot use Mockito directly as it does not support mocking static methods,\n+but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static\n+methods, including your own.\n+\n+Given this simple entity:\n+\n+[source,java]\n+----\n+@Entity\n+public class Person extends PanacheEntity {\n+\n+    public String name;\n+\n+    public static List<Person> findOrdered() {\n+        return find(\"ORDER BY name\").list();\n+    }\n+}\n+----\n+\n+You can write your mocking test like this:\n+\n+[source,java]\n+----\n+@QuarkusTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bee47cb641aea00966c64861ef201857747e5eda"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3MjY1NA==", "bodyText": "We don't in any other example in this guide.", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r406772654", "createdAt": "2020-04-10T14:06:08Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -661,6 +661,169 @@ public class PersonRepository implements PanacheRepositoryBase<Person,Integer> {\n }\n ----\n \n+== Mocking\n+\n+=== Using the \u201centity pattern\u201d\n+\n+If you are using the \u201centity pattern\u201d you cannot use Mockito directly as it does not support mocking static methods,\n+but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static\n+methods, including your own.\n+\n+Given this simple entity:\n+\n+[source,java]\n+----\n+@Entity\n+public class Person extends PanacheEntity {\n+\n+    public String name;\n+\n+    public static List<Person> findOrdered() {\n+        return find(\"ORDER BY name\").list();\n+    }\n+}\n+----\n+\n+You can write your mocking test like this:\n+\n+[source,java]\n+----\n+@QuarkusTest", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNjkyNw=="}, "originalCommit": {"oid": "bee47cb641aea00966c64861ef201857747e5eda"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM1MjI4OQ==", "bodyText": "Yes, but other guides do.\nAnd I was advised to always include the imports inside the guide.\nAnd here it is helpful to see what comes from Mockito and what comes from PanacheMock", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r407352289", "createdAt": "2020-04-13T07:14:14Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -661,6 +661,169 @@ public class PersonRepository implements PanacheRepositoryBase<Person,Integer> {\n }\n ----\n \n+== Mocking\n+\n+=== Using the \u201centity pattern\u201d\n+\n+If you are using the \u201centity pattern\u201d you cannot use Mockito directly as it does not support mocking static methods,\n+but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static\n+methods, including your own.\n+\n+Given this simple entity:\n+\n+[source,java]\n+----\n+@Entity\n+public class Person extends PanacheEntity {\n+\n+    public String name;\n+\n+    public static List<Person> findOrdered() {\n+        return find(\"ORDER BY name\").list();\n+    }\n+}\n+----\n+\n+You can write your mocking test like this:\n+\n+[source,java]\n+----\n+@QuarkusTest", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNjkyNw=="}, "originalCommit": {"oid": "bee47cb641aea00966c64861ef201857747e5eda"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTU4NjUyOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzoyNzoxNVrOGDMuxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDoxMDowMVrOGD7h8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNzQ5NA==", "bodyText": "Maybe add a not that explain that Mockito.verify() will not works and all verification must be done via PanacheMock.", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r406007494", "createdAt": "2020-04-09T07:27:15Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -661,6 +661,169 @@ public class PersonRepository implements PanacheRepositoryBase<Person,Integer> {\n }\n ----\n \n+== Mocking\n+\n+=== Using the \u201centity pattern\u201d\n+\n+If you are using the \u201centity pattern\u201d you cannot use Mockito directly as it does not support mocking static methods,\n+but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static\n+methods, including your own.\n+\n+Given this simple entity:\n+\n+[source,java]\n+----\n+@Entity\n+public class Person extends PanacheEntity {\n+\n+    public String name;\n+\n+    public static List<Person> findOrdered() {\n+        return find(\"ORDER BY name\").list();\n+    }\n+}\n+----\n+\n+You can write your mocking test like this:\n+\n+[source,java]\n+----\n+@QuarkusTest\n+public class PanacheFunctionalityTest {\n+\n+    @Test\n+    public void testPanacheMocking() {\n+        PanacheMock.mock(Person.class);\n+\n+        // Mocked classes always return a default value\n+        Assertions.assertEquals(0, Person.count());\n+\n+        // Now let's specify the return value\n+        Mockito.when(Person.count()).thenReturn(23l);\n+        Assertions.assertEquals(23, Person.count());\n+\n+        // Now let's change the return value\n+        Mockito.when(Person.count()).thenReturn(42l);\n+        Assertions.assertEquals(42, Person.count());\n+\n+        // Now let's call the original method\n+        Mockito.when(Person.count()).thenCallRealMethod();\n+        Assertions.assertEquals(0, Person.count());\n+\n+        // Check that we called it 4 times\n+        PanacheMock.verify(Person.class, Mockito.times(4)).count();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bee47cb641aea00966c64861ef201857747e5eda"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3NDI1OA==", "bodyText": "ok", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r406774258", "createdAt": "2020-04-10T14:10:01Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -661,6 +661,169 @@ public class PersonRepository implements PanacheRepositoryBase<Person,Integer> {\n }\n ----\n \n+== Mocking\n+\n+=== Using the \u201centity pattern\u201d\n+\n+If you are using the \u201centity pattern\u201d you cannot use Mockito directly as it does not support mocking static methods,\n+but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static\n+methods, including your own.\n+\n+Given this simple entity:\n+\n+[source,java]\n+----\n+@Entity\n+public class Person extends PanacheEntity {\n+\n+    public String name;\n+\n+    public static List<Person> findOrdered() {\n+        return find(\"ORDER BY name\").list();\n+    }\n+}\n+----\n+\n+You can write your mocking test like this:\n+\n+[source,java]\n+----\n+@QuarkusTest\n+public class PanacheFunctionalityTest {\n+\n+    @Test\n+    public void testPanacheMocking() {\n+        PanacheMock.mock(Person.class);\n+\n+        // Mocked classes always return a default value\n+        Assertions.assertEquals(0, Person.count());\n+\n+        // Now let's specify the return value\n+        Mockito.when(Person.count()).thenReturn(23l);\n+        Assertions.assertEquals(23, Person.count());\n+\n+        // Now let's change the return value\n+        Mockito.when(Person.count()).thenReturn(42l);\n+        Assertions.assertEquals(42, Person.count());\n+\n+        // Now let's call the original method\n+        Mockito.when(Person.count()).thenCallRealMethod();\n+        Assertions.assertEquals(0, Person.count());\n+\n+        // Check that we called it 4 times\n+        PanacheMock.verify(Person.class, Mockito.times(4)).count();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNzQ5NA=="}, "originalCommit": {"oid": "bee47cb641aea00966c64861ef201857747e5eda"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTU4OTExOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzoyODowNVrOGDMwaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDoxMjoxNVrOGD7lfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNzkxMg==", "bodyText": "Is using quarkus-junit5-mockito mandatory ?\nIf so, maybe explain why in a few words.", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r406007912", "createdAt": "2020-04-09T07:28:05Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -661,6 +661,169 @@ public class PersonRepository implements PanacheRepositoryBase<Person,Integer> {\n }\n ----\n \n+== Mocking\n+\n+=== Using the \u201centity pattern\u201d\n+\n+If you are using the \u201centity pattern\u201d you cannot use Mockito directly as it does not support mocking static methods,\n+but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static\n+methods, including your own.\n+\n+Given this simple entity:\n+\n+[source,java]\n+----\n+@Entity\n+public class Person extends PanacheEntity {\n+\n+    public String name;\n+\n+    public static List<Person> findOrdered() {\n+        return find(\"ORDER BY name\").list();\n+    }\n+}\n+----\n+\n+You can write your mocking test like this:\n+\n+[source,java]\n+----\n+@QuarkusTest\n+public class PanacheFunctionalityTest {\n+\n+    @Test\n+    public void testPanacheMocking() {\n+        PanacheMock.mock(Person.class);\n+\n+        // Mocked classes always return a default value\n+        Assertions.assertEquals(0, Person.count());\n+\n+        // Now let's specify the return value\n+        Mockito.when(Person.count()).thenReturn(23l);\n+        Assertions.assertEquals(23, Person.count());\n+\n+        // Now let's change the return value\n+        Mockito.when(Person.count()).thenReturn(42l);\n+        Assertions.assertEquals(42, Person.count());\n+\n+        // Now let's call the original method\n+        Mockito.when(Person.count()).thenCallRealMethod();\n+        Assertions.assertEquals(0, Person.count());\n+\n+        // Check that we called it 4 times\n+        PanacheMock.verify(Person.class, Mockito.times(4)).count();\n+\n+        // Mock only with specific parameters\n+        Person p = new Person();\n+        Mockito.when(Person.findById(12l)).thenReturn(p);\n+        Assertions.assertSame(p, Person.findById(12l));\n+        Assertions.assertNull(Person.findById(42l));\n+\n+        // Mock throwing\n+        Mockito.when(Person.findById(12l)).thenThrow(new WebApplicationException());\n+        try {\n+            Person.findById(12l);\n+            Assertions.fail();\n+        } catch (WebApplicationException x) {\n+        }\n+\n+        // We can even mock your custom methods\n+        Mockito.when(Person.findOrdered()).thenReturn(Collections.emptyList());\n+        Assertions.assertTrue(Person.findOrdered().isEmpty());\n+\n+        PanacheMock.verify(Person.class).findOrdered();\n+        PanacheMock.verify(Person.class, Mockito.atLeastOnce()).findById(Mockito.any());\n+        PanacheMock.verifyNoMoreInteractions(Person.class);\n+    }\n+}\n+----\n+\n+=== Using the \u201crepository pattern\u201d\n+\n+If you are using the \u201crepository pattern\u201d you can use Mockito directly, using the `quarkus-junit5-mockito` module.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bee47cb641aea00966c64861ef201857747e5eda"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwODY0Mg==", "bodyText": "And add the pom.xml snippet.", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r406008642", "createdAt": "2020-04-09T07:29:31Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -661,6 +661,169 @@ public class PersonRepository implements PanacheRepositoryBase<Person,Integer> {\n }\n ----\n \n+== Mocking\n+\n+=== Using the \u201centity pattern\u201d\n+\n+If you are using the \u201centity pattern\u201d you cannot use Mockito directly as it does not support mocking static methods,\n+but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static\n+methods, including your own.\n+\n+Given this simple entity:\n+\n+[source,java]\n+----\n+@Entity\n+public class Person extends PanacheEntity {\n+\n+    public String name;\n+\n+    public static List<Person> findOrdered() {\n+        return find(\"ORDER BY name\").list();\n+    }\n+}\n+----\n+\n+You can write your mocking test like this:\n+\n+[source,java]\n+----\n+@QuarkusTest\n+public class PanacheFunctionalityTest {\n+\n+    @Test\n+    public void testPanacheMocking() {\n+        PanacheMock.mock(Person.class);\n+\n+        // Mocked classes always return a default value\n+        Assertions.assertEquals(0, Person.count());\n+\n+        // Now let's specify the return value\n+        Mockito.when(Person.count()).thenReturn(23l);\n+        Assertions.assertEquals(23, Person.count());\n+\n+        // Now let's change the return value\n+        Mockito.when(Person.count()).thenReturn(42l);\n+        Assertions.assertEquals(42, Person.count());\n+\n+        // Now let's call the original method\n+        Mockito.when(Person.count()).thenCallRealMethod();\n+        Assertions.assertEquals(0, Person.count());\n+\n+        // Check that we called it 4 times\n+        PanacheMock.verify(Person.class, Mockito.times(4)).count();\n+\n+        // Mock only with specific parameters\n+        Person p = new Person();\n+        Mockito.when(Person.findById(12l)).thenReturn(p);\n+        Assertions.assertSame(p, Person.findById(12l));\n+        Assertions.assertNull(Person.findById(42l));\n+\n+        // Mock throwing\n+        Mockito.when(Person.findById(12l)).thenThrow(new WebApplicationException());\n+        try {\n+            Person.findById(12l);\n+            Assertions.fail();\n+        } catch (WebApplicationException x) {\n+        }\n+\n+        // We can even mock your custom methods\n+        Mockito.when(Person.findOrdered()).thenReturn(Collections.emptyList());\n+        Assertions.assertTrue(Person.findOrdered().isEmpty());\n+\n+        PanacheMock.verify(Person.class).findOrdered();\n+        PanacheMock.verify(Person.class, Mockito.atLeastOnce()).findById(Mockito.any());\n+        PanacheMock.verifyNoMoreInteractions(Person.class);\n+    }\n+}\n+----\n+\n+=== Using the \u201crepository pattern\u201d\n+\n+If you are using the \u201crepository pattern\u201d you can use Mockito directly, using the `quarkus-junit5-mockito` module.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNzkxMg=="}, "originalCommit": {"oid": "bee47cb641aea00966c64861ef201857747e5eda"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3NTE2Nw==", "bodyText": "ok", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r406775167", "createdAt": "2020-04-10T14:12:15Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -661,6 +661,169 @@ public class PersonRepository implements PanacheRepositoryBase<Person,Integer> {\n }\n ----\n \n+== Mocking\n+\n+=== Using the \u201centity pattern\u201d\n+\n+If you are using the \u201centity pattern\u201d you cannot use Mockito directly as it does not support mocking static methods,\n+but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static\n+methods, including your own.\n+\n+Given this simple entity:\n+\n+[source,java]\n+----\n+@Entity\n+public class Person extends PanacheEntity {\n+\n+    public String name;\n+\n+    public static List<Person> findOrdered() {\n+        return find(\"ORDER BY name\").list();\n+    }\n+}\n+----\n+\n+You can write your mocking test like this:\n+\n+[source,java]\n+----\n+@QuarkusTest\n+public class PanacheFunctionalityTest {\n+\n+    @Test\n+    public void testPanacheMocking() {\n+        PanacheMock.mock(Person.class);\n+\n+        // Mocked classes always return a default value\n+        Assertions.assertEquals(0, Person.count());\n+\n+        // Now let's specify the return value\n+        Mockito.when(Person.count()).thenReturn(23l);\n+        Assertions.assertEquals(23, Person.count());\n+\n+        // Now let's change the return value\n+        Mockito.when(Person.count()).thenReturn(42l);\n+        Assertions.assertEquals(42, Person.count());\n+\n+        // Now let's call the original method\n+        Mockito.when(Person.count()).thenCallRealMethod();\n+        Assertions.assertEquals(0, Person.count());\n+\n+        // Check that we called it 4 times\n+        PanacheMock.verify(Person.class, Mockito.times(4)).count();\n+\n+        // Mock only with specific parameters\n+        Person p = new Person();\n+        Mockito.when(Person.findById(12l)).thenReturn(p);\n+        Assertions.assertSame(p, Person.findById(12l));\n+        Assertions.assertNull(Person.findById(42l));\n+\n+        // Mock throwing\n+        Mockito.when(Person.findById(12l)).thenThrow(new WebApplicationException());\n+        try {\n+            Person.findById(12l);\n+            Assertions.fail();\n+        } catch (WebApplicationException x) {\n+        }\n+\n+        // We can even mock your custom methods\n+        Mockito.when(Person.findOrdered()).thenReturn(Collections.emptyList());\n+        Assertions.assertTrue(Person.findOrdered().isEmpty());\n+\n+        PanacheMock.verify(Person.class).findOrdered();\n+        PanacheMock.verify(Person.class, Mockito.atLeastOnce()).findById(Mockito.any());\n+        PanacheMock.verifyNoMoreInteractions(Person.class);\n+    }\n+}\n+----\n+\n+=== Using the \u201crepository pattern\u201d\n+\n+If you are using the \u201crepository pattern\u201d you can use Mockito directly, using the `quarkus-junit5-mockito` module.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNzkxMg=="}, "originalCommit": {"oid": "bee47cb641aea00966c64861ef201857747e5eda"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTU5MjQxOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzoyOTowNlrOGDMycA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDoxMjozM1rOGD7l7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwODQzMg==", "bodyText": "Maybe add the needed pom.xml lines.", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r406008432", "createdAt": "2020-04-09T07:29:06Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -661,6 +661,169 @@ public class PersonRepository implements PanacheRepositoryBase<Person,Integer> {\n }\n ----\n \n+== Mocking\n+\n+=== Using the \u201centity pattern\u201d\n+\n+If you are using the \u201centity pattern\u201d you cannot use Mockito directly as it does not support mocking static methods,\n+but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static\n+methods, including your own.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bee47cb641aea00966c64861ef201857747e5eda"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3NTI3Nw==", "bodyText": "ok", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r406775277", "createdAt": "2020-04-10T14:12:33Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -661,6 +661,169 @@ public class PersonRepository implements PanacheRepositoryBase<Person,Integer> {\n }\n ----\n \n+== Mocking\n+\n+=== Using the \u201centity pattern\u201d\n+\n+If you are using the \u201centity pattern\u201d you cannot use Mockito directly as it does not support mocking static methods,\n+but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static\n+methods, including your own.\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwODQzMg=="}, "originalCommit": {"oid": "bee47cb641aea00966c64861ef201857747e5eda"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTU5NzYwOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzozMDo1MFrOGDM1xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzozMDo1MFrOGDM1xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwOTI4NQ==", "bodyText": "We usually include the imports inside the doc.", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r406009285", "createdAt": "2020-04-09T07:30:50Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -661,6 +661,169 @@ public class PersonRepository implements PanacheRepositoryBase<Person,Integer> {\n }\n ----\n \n+== Mocking\n+\n+=== Using the \u201centity pattern\u201d\n+\n+If you are using the \u201centity pattern\u201d you cannot use Mockito directly as it does not support mocking static methods,\n+but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static\n+methods, including your own.\n+\n+Given this simple entity:\n+\n+[source,java]\n+----\n+@Entity\n+public class Person extends PanacheEntity {\n+\n+    public String name;\n+\n+    public static List<Person> findOrdered() {\n+        return find(\"ORDER BY name\").list();\n+    }\n+}\n+----\n+\n+You can write your mocking test like this:\n+\n+[source,java]\n+----\n+@QuarkusTest\n+public class PanacheFunctionalityTest {\n+\n+    @Test\n+    public void testPanacheMocking() {\n+        PanacheMock.mock(Person.class);\n+\n+        // Mocked classes always return a default value\n+        Assertions.assertEquals(0, Person.count());\n+\n+        // Now let's specify the return value\n+        Mockito.when(Person.count()).thenReturn(23l);\n+        Assertions.assertEquals(23, Person.count());\n+\n+        // Now let's change the return value\n+        Mockito.when(Person.count()).thenReturn(42l);\n+        Assertions.assertEquals(42, Person.count());\n+\n+        // Now let's call the original method\n+        Mockito.when(Person.count()).thenCallRealMethod();\n+        Assertions.assertEquals(0, Person.count());\n+\n+        // Check that we called it 4 times\n+        PanacheMock.verify(Person.class, Mockito.times(4)).count();\n+\n+        // Mock only with specific parameters\n+        Person p = new Person();\n+        Mockito.when(Person.findById(12l)).thenReturn(p);\n+        Assertions.assertSame(p, Person.findById(12l));\n+        Assertions.assertNull(Person.findById(42l));\n+\n+        // Mock throwing\n+        Mockito.when(Person.findById(12l)).thenThrow(new WebApplicationException());\n+        try {\n+            Person.findById(12l);\n+            Assertions.fail();\n+        } catch (WebApplicationException x) {\n+        }\n+\n+        // We can even mock your custom methods\n+        Mockito.when(Person.findOrdered()).thenReturn(Collections.emptyList());\n+        Assertions.assertTrue(Person.findOrdered().isEmpty());\n+\n+        PanacheMock.verify(Person.class).findOrdered();\n+        PanacheMock.verify(Person.class, Mockito.atLeastOnce()).findById(Mockito.any());\n+        PanacheMock.verifyNoMoreInteractions(Person.class);\n+    }\n+}\n+----\n+\n+=== Using the \u201crepository pattern\u201d\n+\n+If you are using the \u201crepository pattern\u201d you can use Mockito directly, using the `quarkus-junit5-mockito` module.\n+\n+Given this simple entity:\n+\n+[source,java]\n+----\n+@Entity\n+public class Person {\n+\n+    @Id\n+    @GeneratedValue\n+    public Long id;\n+\n+    public String name;\n+}\n+----\n+\n+And this repository:\n+\n+[source,java]\n+----\n+@ApplicationScoped\n+public class PersonRepository implements PanacheRepository<Person> {\n+    public List<Person> findOrdered() {\n+        return find(\"ORDER BY name\").list();\n+    }\n+}\n+----\n+\n+You can write your mocking test like this:\n+\n+[source,java]\n+----\n+@QuarkusTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bee47cb641aea00966c64861ef201857747e5eda"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTYwMDcwOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzozMTo1NFrOGDM3ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDoxMzoyMFrOGD7nWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwOTc2Mw==", "bodyText": "This one is not disabled on native but the repository variant is ?\nAs injection didn't works in native mode you should add a note that explain it", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r406009763", "createdAt": "2020-04-09T07:31:54Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -661,6 +661,169 @@ public class PersonRepository implements PanacheRepositoryBase<Person,Integer> {\n }\n ----\n \n+== Mocking\n+\n+=== Using the \u201centity pattern\u201d\n+\n+If you are using the \u201centity pattern\u201d you cannot use Mockito directly as it does not support mocking static methods,\n+but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static\n+methods, including your own.\n+\n+Given this simple entity:\n+\n+[source,java]\n+----\n+@Entity\n+public class Person extends PanacheEntity {\n+\n+    public String name;\n+\n+    public static List<Person> findOrdered() {\n+        return find(\"ORDER BY name\").list();\n+    }\n+}\n+----\n+\n+You can write your mocking test like this:\n+\n+[source,java]\n+----\n+@QuarkusTest\n+public class PanacheFunctionalityTest {\n+\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bee47cb641aea00966c64861ef201857747e5eda"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3NTY0Mg==", "bodyText": "this is not a native test, I've removed that annotation", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r406775642", "createdAt": "2020-04-10T14:13:20Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -661,6 +661,169 @@ public class PersonRepository implements PanacheRepositoryBase<Person,Integer> {\n }\n ----\n \n+== Mocking\n+\n+=== Using the \u201centity pattern\u201d\n+\n+If you are using the \u201centity pattern\u201d you cannot use Mockito directly as it does not support mocking static methods,\n+but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static\n+methods, including your own.\n+\n+Given this simple entity:\n+\n+[source,java]\n+----\n+@Entity\n+public class Person extends PanacheEntity {\n+\n+    public String name;\n+\n+    public static List<Person> findOrdered() {\n+        return find(\"ORDER BY name\").list();\n+    }\n+}\n+----\n+\n+You can write your mocking test like this:\n+\n+[source,java]\n+----\n+@QuarkusTest\n+public class PanacheFunctionalityTest {\n+\n+    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwOTc2Mw=="}, "originalCommit": {"oid": "bee47cb641aea00966c64861ef201857747e5eda"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTYwNTAzOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzozMzoyOFrOGDM6eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDoxNDoxN1rOGD7pDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAxMDQ4OQ==", "bodyText": "I usually use this construct that is clearer :\nassertThrows(WebApplicationException.class, () -> Person.findById(12l));", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r406010489", "createdAt": "2020-04-09T07:33:28Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -661,6 +661,169 @@ public class PersonRepository implements PanacheRepositoryBase<Person,Integer> {\n }\n ----\n \n+== Mocking\n+\n+=== Using the \u201centity pattern\u201d\n+\n+If you are using the \u201centity pattern\u201d you cannot use Mockito directly as it does not support mocking static methods,\n+but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static\n+methods, including your own.\n+\n+Given this simple entity:\n+\n+[source,java]\n+----\n+@Entity\n+public class Person extends PanacheEntity {\n+\n+    public String name;\n+\n+    public static List<Person> findOrdered() {\n+        return find(\"ORDER BY name\").list();\n+    }\n+}\n+----\n+\n+You can write your mocking test like this:\n+\n+[source,java]\n+----\n+@QuarkusTest\n+public class PanacheFunctionalityTest {\n+\n+    @Test\n+    public void testPanacheMocking() {\n+        PanacheMock.mock(Person.class);\n+\n+        // Mocked classes always return a default value\n+        Assertions.assertEquals(0, Person.count());\n+\n+        // Now let's specify the return value\n+        Mockito.when(Person.count()).thenReturn(23l);\n+        Assertions.assertEquals(23, Person.count());\n+\n+        // Now let's change the return value\n+        Mockito.when(Person.count()).thenReturn(42l);\n+        Assertions.assertEquals(42, Person.count());\n+\n+        // Now let's call the original method\n+        Mockito.when(Person.count()).thenCallRealMethod();\n+        Assertions.assertEquals(0, Person.count());\n+\n+        // Check that we called it 4 times\n+        PanacheMock.verify(Person.class, Mockito.times(4)).count();\n+\n+        // Mock only with specific parameters\n+        Person p = new Person();\n+        Mockito.when(Person.findById(12l)).thenReturn(p);\n+        Assertions.assertSame(p, Person.findById(12l));\n+        Assertions.assertNull(Person.findById(42l));\n+\n+        // Mock throwing\n+        Mockito.when(Person.findById(12l)).thenThrow(new WebApplicationException());\n+        try {\n+            Person.findById(12l);\n+            Assertions.fail();\n+        } catch (WebApplicationException x) {\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bee47cb641aea00966c64861ef201857747e5eda"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3NjA3Ng==", "bodyText": "good point.", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r406776076", "createdAt": "2020-04-10T14:14:17Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -661,6 +661,169 @@ public class PersonRepository implements PanacheRepositoryBase<Person,Integer> {\n }\n ----\n \n+== Mocking\n+\n+=== Using the \u201centity pattern\u201d\n+\n+If you are using the \u201centity pattern\u201d you cannot use Mockito directly as it does not support mocking static methods,\n+but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static\n+methods, including your own.\n+\n+Given this simple entity:\n+\n+[source,java]\n+----\n+@Entity\n+public class Person extends PanacheEntity {\n+\n+    public String name;\n+\n+    public static List<Person> findOrdered() {\n+        return find(\"ORDER BY name\").list();\n+    }\n+}\n+----\n+\n+You can write your mocking test like this:\n+\n+[source,java]\n+----\n+@QuarkusTest\n+public class PanacheFunctionalityTest {\n+\n+    @Test\n+    public void testPanacheMocking() {\n+        PanacheMock.mock(Person.class);\n+\n+        // Mocked classes always return a default value\n+        Assertions.assertEquals(0, Person.count());\n+\n+        // Now let's specify the return value\n+        Mockito.when(Person.count()).thenReturn(23l);\n+        Assertions.assertEquals(23, Person.count());\n+\n+        // Now let's change the return value\n+        Mockito.when(Person.count()).thenReturn(42l);\n+        Assertions.assertEquals(42, Person.count());\n+\n+        // Now let's call the original method\n+        Mockito.when(Person.count()).thenCallRealMethod();\n+        Assertions.assertEquals(0, Person.count());\n+\n+        // Check that we called it 4 times\n+        PanacheMock.verify(Person.class, Mockito.times(4)).count();\n+\n+        // Mock only with specific parameters\n+        Person p = new Person();\n+        Mockito.when(Person.findById(12l)).thenReturn(p);\n+        Assertions.assertSame(p, Person.findById(12l));\n+        Assertions.assertNull(Person.findById(42l));\n+\n+        // Mock throwing\n+        Mockito.when(Person.findById(12l)).thenThrow(new WebApplicationException());\n+        try {\n+            Person.findById(12l);\n+            Assertions.fail();\n+        } catch (WebApplicationException x) {\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAxMDQ4OQ=="}, "originalCommit": {"oid": "bee47cb641aea00966c64861ef201857747e5eda"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODc2ODM5OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/getting-started-testing.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNzoxNTowMlrOGEe01w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNzoxNTowMlrOGEe01w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM1MjUzNQ==", "bodyText": "Sorry, I missed this one:\nentity pattern -> active record pattern", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r407352535", "createdAt": "2020-04-13T07:15:02Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/getting-started-testing.adoc", "diffHunk": "@@ -525,6 +525,10 @@ public class MockGreetingServiceTest {\n ----\n <1> Since we configured `greetingService` as a mock, the `GreetingResource` which uses the `GreetingService` bean, we get the mocked response instead of the response of the regular `GreetingService` bean\n \n+=== Mocking with Panache\n+\n+If you are using the `quarkus-hibernate-orm-panache` or `quarkus-mongodb-panache` extensions with the \u201centity pattern\u201d you can use the `quarkus-panache-mock` extension as documented in the link:hibernate-orm-panache#mocking[Hibernate ORM with Panache Mocking] and link:mongodb-panache#mocking[MongoDB with Panache Mocking] documentation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccbb69eab1b1822b76c4e399c839fdbdda23a860"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODc3MDY3OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNzoxNjowN1rOGEe2Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNzoxNjowN1rOGEe2Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM1Mjg5OA==", "bodyText": "Should be [source,xml]", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r407352898", "createdAt": "2020-04-13T07:16:07Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -686,6 +686,184 @@ public class PersonRepository implements PanacheRepositoryBase<Person,Integer> {\n }\n ----\n \n+== Mocking\n+\n+=== Using the active record pattern\n+\n+If you are using the active record pattern you cannot use Mockito directly as it does not support mocking static methods,\n+but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static\n+methods, including your own.\n+\n+Add this dependency to your `pom.xml`:\n+\n+[source,java]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccbb69eab1b1822b76c4e399c839fdbdda23a860"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODc3MjgyOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNzoxNzoxM1rOGEe3iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNzoxNzoxM1rOGEe3iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM1MzIyNA==", "bodyText": "Should be [source,xml]", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r407353224", "createdAt": "2020-04-13T07:17:13Z", "author": {"login": "loicmathieu"}, "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -867,6 +867,181 @@ public Multi<ReactivePerson> streamPersons() {\n \n TIP: `@SseElementType(MediaType.APPLICATION_JSON)` tells RESTEasy to serialize the object in JSON.\n \n+== Mocking\n+\n+=== Using the active-record pattern\n+\n+If you are using the active-record pattern you cannot use Mockito directly as it does not support mocking static methods,\n+but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static\n+methods, including your own.\n+\n+Add this dependency to your `pom.xml`:\n+\n+[source,java]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccbb69eab1b1822b76c4e399c839fdbdda23a860"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODg2OTcyOnYy", "diffSide": "RIGHT", "path": "extensions/panache/panache-mock/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToyODo1NlrOGF_TPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjozMToyMFrOGGi92A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkzMzE4MA==", "bodyText": "This probably need to be updated :)", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r408933180", "createdAt": "2020-04-15T15:28:56Z", "author": {"login": "geoand"}, "path": "extensions/panache/panache-mock/pom.xml", "diffHunk": "@@ -0,0 +1,37 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>quarkus-build-parent</artifactId>\n+        <groupId>io.quarkus</groupId>\n+        <version>999-SNAPSHOT</version>\n+        <relativePath>../../../build-parent/pom.xml</relativePath>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>quarkus-panache-mock</artifactId>\n+    <name>Quarkus - Panache - Mock - Runtime</name>\n+    <description>An opinionated approach to make Hibernate as easy as possible</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c66ef94703c3b8d203997404dd0b2ca6fbd14b7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUxNzUyOA==", "bodyText": "Good point, fixed, thanks!", "url": "https://github.com/quarkusio/quarkus/pull/8334#discussion_r409517528", "createdAt": "2020-04-16T12:31:20Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-mock/pom.xml", "diffHunk": "@@ -0,0 +1,37 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>quarkus-build-parent</artifactId>\n+        <groupId>io.quarkus</groupId>\n+        <version>999-SNAPSHOT</version>\n+        <relativePath>../../../build-parent/pom.xml</relativePath>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>quarkus-panache-mock</artifactId>\n+    <name>Quarkus - Panache - Mock - Runtime</name>\n+    <description>An opinionated approach to make Hibernate as easy as possible</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkzMzE4MA=="}, "originalCommit": {"oid": "7c66ef94703c3b8d203997404dd0b2ca6fbd14b7"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3596, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}