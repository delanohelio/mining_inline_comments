{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNzczOTc3", "number": 7453, "reviewThreads": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTowMjoxMVrODja7Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwOTozNjo0OVrODjv_1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDY3OTE1OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeImageBuildStep.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTowMjoxMVrOFvN_1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjo0NTozOVrOFvQ2Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA1NjcyNg==", "bodyText": "What's the rationale behind this? Not that it's particularly important :)", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385056726", "createdAt": "2020-02-27T11:02:11Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeImageBuildStep.java", "diffHunk": "@@ -221,8 +221,8 @@ public NativeImageBuildItem build(NativeConfig nativeConfig, NativeImageSourceJa\n                 nativeConfig.enableAllSecurityServices = true;\n             }\n \n-            nativeConfig.additionalBuildArgs.ifPresent(l -> l.stream().map(String::trim).forEach(command::add));\n             command.add(\"--initialize-at-build-time=\");\n+            nativeConfig.additionalBuildArgs.ifPresent(l -> l.stream().map(String::trim).forEach(command::add));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwMTg3Ng==", "bodyText": "Ah sorry, it shouldn't have been there. I removed it.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385101876", "createdAt": "2020-02-27T12:42:21Z", "author": {"login": "gsmet"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeImageBuildStep.java", "diffHunk": "@@ -221,8 +221,8 @@ public NativeImageBuildItem build(NativeConfig nativeConfig, NativeImageSourceJa\n                 nativeConfig.enableAllSecurityServices = true;\n             }\n \n-            nativeConfig.additionalBuildArgs.ifPresent(l -> l.stream().map(String::trim).forEach(command::add));\n             command.add(\"--initialize-at-build-time=\");\n+            nativeConfig.additionalBuildArgs.ifPresent(l -> l.stream().map(String::trim).forEach(command::add));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA1NjcyNg=="}, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwMzM2Ng==", "bodyText": "Thanks", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385103366", "createdAt": "2020-02-27T12:45:39Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/pkg/steps/NativeImageBuildStep.java", "diffHunk": "@@ -221,8 +221,8 @@ public NativeImageBuildItem build(NativeConfig nativeConfig, NativeImageSourceJa\n                 nativeConfig.enableAllSecurityServices = true;\n             }\n \n-            nativeConfig.additionalBuildArgs.ifPresent(l -> l.stream().map(String::trim).forEach(command::add));\n             command.add(\"--initialize-at-build-time=\");\n+            nativeConfig.additionalBuildArgs.ifPresent(l -> l.stream().map(String::trim).forEach(command::add));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA1NjcyNg=="}, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDY4ODQ0OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/configuration/matching/FieldContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTowNToyNlrOFvOFug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTo0NzozMlrOFvPP1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA1ODIzNA==", "bodyText": "I assume this is one has been blessed by @dmlloyd ?", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385058234", "createdAt": "2020-02-27T11:05:26Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/configuration/matching/FieldContainer.java", "diffHunk": "@@ -41,6 +41,7 @@ StringBuilder getCombinedName(final StringBuilder sb) {\n         if (sb.length() > 0) {\n             sb.append(':');\n         }\n+        sb.append(member.getField().getDeclaringClass().getSimpleName()).append('#');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3NzIwNw==", "bodyText": "Nevermind, I just saw the author of the commit that added this :)", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385077207", "createdAt": "2020-02-27T11:47:32Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/configuration/matching/FieldContainer.java", "diffHunk": "@@ -41,6 +41,7 @@ StringBuilder getCombinedName(final StringBuilder sb) {\n         if (sb.length() > 0) {\n             sb.append(':');\n         }\n+        sb.append(member.getField().getDeclaringClass().getSimpleName()).append('#');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA1ODIzNA=="}, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDcwNjQ3OnYy", "diffSide": "RIGHT", "path": "extensions/datasource/common/src/main/java/io/quarkus/datasource/common/runtime/DatabaseKind.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMToxMToyNlrOFvOQgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjo0NDoxNFrOFvQziQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2MDk5NA==", "bodyText": "Maybe add the initial capacity?", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385060994", "createdAt": "2020-02-27T11:11:26Z", "author": {"login": "geoand"}, "path": "extensions/datasource/common/src/main/java/io/quarkus/datasource/common/runtime/DatabaseKind.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package io.quarkus.datasource.common.runtime;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * We don't use an enum as we also need to support non built-in database kinds.\n+ */\n+public final class DatabaseKind {\n+\n+    public static final String DERBY = \"derby\";\n+    public static final String H2 = \"h2\";\n+    public static final String MARIADB = \"mariadb\";\n+    public static final String MSSQL = \"mssql\";\n+    public static final String MYSQL = \"mysql\";\n+    public static final String POSTGRESQL = \"postgresql\";\n+\n+    private static final Map<String, String> ALIASES;\n+\n+    static {\n+        Map<String, String> aliases = new HashMap<String, String>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2MjM5MA==", "bodyText": "Also, you can just use the <> operator to avoid the extra generic type definition", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385062390", "createdAt": "2020-02-27T11:14:11Z", "author": {"login": "geoand"}, "path": "extensions/datasource/common/src/main/java/io/quarkus/datasource/common/runtime/DatabaseKind.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package io.quarkus.datasource.common.runtime;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * We don't use an enum as we also need to support non built-in database kinds.\n+ */\n+public final class DatabaseKind {\n+\n+    public static final String DERBY = \"derby\";\n+    public static final String H2 = \"h2\";\n+    public static final String MARIADB = \"mariadb\";\n+    public static final String MSSQL = \"mssql\";\n+    public static final String MYSQL = \"mysql\";\n+    public static final String POSTGRESQL = \"postgresql\";\n+\n+    private static final Map<String, String> ALIASES;\n+\n+    static {\n+        Map<String, String> aliases = new HashMap<String, String>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2MDk5NA=="}, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwMjcyOQ==", "bodyText": "It's not easy to have the size of the map given you can have several aliases. Better leave it as that.\nGranted for the diamond operator.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385102729", "createdAt": "2020-02-27T12:44:14Z", "author": {"login": "gsmet"}, "path": "extensions/datasource/common/src/main/java/io/quarkus/datasource/common/runtime/DatabaseKind.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package io.quarkus.datasource.common.runtime;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * We don't use an enum as we also need to support non built-in database kinds.\n+ */\n+public final class DatabaseKind {\n+\n+    public static final String DERBY = \"derby\";\n+    public static final String H2 = \"h2\";\n+    public static final String MARIADB = \"mariadb\";\n+    public static final String MSSQL = \"mssql\";\n+    public static final String MYSQL = \"mysql\";\n+    public static final String POSTGRESQL = \"postgresql\";\n+\n+    private static final Map<String, String> ALIASES;\n+\n+    static {\n+        Map<String, String> aliases = new HashMap<String, String>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2MDk5NA=="}, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDcwNzQ0OnYy", "diffSide": "RIGHT", "path": "extensions/datasource/common/src/main/java/io/quarkus/datasource/common/runtime/DatabaseKind.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMToxMTozOFrOFvORDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjo0NDoyMVrOFvQzug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2MTEzNQ==", "bodyText": "This can be private I think", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385061135", "createdAt": "2020-02-27T11:11:38Z", "author": {"login": "geoand"}, "path": "extensions/datasource/common/src/main/java/io/quarkus/datasource/common/runtime/DatabaseKind.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package io.quarkus.datasource.common.runtime;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * We don't use an enum as we also need to support non built-in database kinds.\n+ */\n+public final class DatabaseKind {\n+\n+    public static final String DERBY = \"derby\";\n+    public static final String H2 = \"h2\";\n+    public static final String MARIADB = \"mariadb\";\n+    public static final String MSSQL = \"mssql\";\n+    public static final String MYSQL = \"mysql\";\n+    public static final String POSTGRESQL = \"postgresql\";\n+\n+    private static final Map<String, String> ALIASES;\n+\n+    static {\n+        Map<String, String> aliases = new HashMap<String, String>();\n+        for (SupportedDatabaseKind kind : SupportedDatabaseKind.values()) {\n+            for (String alias : kind.aliases) {\n+                aliases.put(alias.toLowerCase(Locale.ROOT), kind.mainName.toLowerCase(Locale.ROOT));\n+            }\n+        }\n+        ALIASES = Collections.unmodifiableMap(aliases);\n+    }\n+\n+    public static String normalize(String value) {\n+        if (value == null) {\n+            return null;\n+        }\n+\n+        String lowerCaseValue = value.toLowerCase(Locale.ROOT).trim();\n+\n+        if (lowerCaseValue.isEmpty()) {\n+            return null;\n+        }\n+\n+        String supportedValue = ALIASES.get(lowerCaseValue);\n+        if (supportedValue != null) {\n+            return supportedValue;\n+        }\n+        return lowerCaseValue;\n+    }\n+\n+    public static boolean isDerby(String value) {\n+        return is(value, DERBY);\n+    }\n+\n+    public static boolean isH2(String value) {\n+        return is(value, H2);\n+    }\n+\n+    public static boolean isMariaDB(String value) {\n+        return is(value, MARIADB);\n+    }\n+\n+    public static boolean isMsSQL(String value) {\n+        return is(value, MSSQL);\n+    }\n+\n+    public static boolean isMySQL(String value) {\n+        return is(value, MYSQL);\n+    }\n+\n+    public static boolean isPostgreSQL(String value) {\n+        return is(value, POSTGRESQL);\n+    }\n+\n+    private static boolean is(String value, String mainName) {\n+        if (value == null) {\n+            return false;\n+        }\n+\n+        String normalizedValue = normalize(value);\n+\n+        return mainName.equals(normalizedValue);\n+    }\n+\n+    private DatabaseKind() {\n+    }\n+\n+    enum SupportedDatabaseKind {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwMjc3OA==", "bodyText": "Sure.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385102778", "createdAt": "2020-02-27T12:44:21Z", "author": {"login": "gsmet"}, "path": "extensions/datasource/common/src/main/java/io/quarkus/datasource/common/runtime/DatabaseKind.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package io.quarkus.datasource.common.runtime;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * We don't use an enum as we also need to support non built-in database kinds.\n+ */\n+public final class DatabaseKind {\n+\n+    public static final String DERBY = \"derby\";\n+    public static final String H2 = \"h2\";\n+    public static final String MARIADB = \"mariadb\";\n+    public static final String MSSQL = \"mssql\";\n+    public static final String MYSQL = \"mysql\";\n+    public static final String POSTGRESQL = \"postgresql\";\n+\n+    private static final Map<String, String> ALIASES;\n+\n+    static {\n+        Map<String, String> aliases = new HashMap<String, String>();\n+        for (SupportedDatabaseKind kind : SupportedDatabaseKind.values()) {\n+            for (String alias : kind.aliases) {\n+                aliases.put(alias.toLowerCase(Locale.ROOT), kind.mainName.toLowerCase(Locale.ROOT));\n+            }\n+        }\n+        ALIASES = Collections.unmodifiableMap(aliases);\n+    }\n+\n+    public static String normalize(String value) {\n+        if (value == null) {\n+            return null;\n+        }\n+\n+        String lowerCaseValue = value.toLowerCase(Locale.ROOT).trim();\n+\n+        if (lowerCaseValue.isEmpty()) {\n+            return null;\n+        }\n+\n+        String supportedValue = ALIASES.get(lowerCaseValue);\n+        if (supportedValue != null) {\n+            return supportedValue;\n+        }\n+        return lowerCaseValue;\n+    }\n+\n+    public static boolean isDerby(String value) {\n+        return is(value, DERBY);\n+    }\n+\n+    public static boolean isH2(String value) {\n+        return is(value, H2);\n+    }\n+\n+    public static boolean isMariaDB(String value) {\n+        return is(value, MARIADB);\n+    }\n+\n+    public static boolean isMsSQL(String value) {\n+        return is(value, MSSQL);\n+    }\n+\n+    public static boolean isMySQL(String value) {\n+        return is(value, MYSQL);\n+    }\n+\n+    public static boolean isPostgreSQL(String value) {\n+        return is(value, POSTGRESQL);\n+    }\n+\n+    private static boolean is(String value, String mainName) {\n+        if (value == null) {\n+            return false;\n+        }\n+\n+        String normalizedValue = normalize(value);\n+\n+        return mainName.equals(normalizedValue);\n+    }\n+\n+    private DatabaseKind() {\n+    }\n+\n+    enum SupportedDatabaseKind {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2MTEzNQ=="}, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDcxMzEyOnYy", "diffSide": "RIGHT", "path": "extensions/datasource/common/src/main/java/io/quarkus/datasource/common/runtime/DatabaseKind.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMToxMzoyNVrOFvOUeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjo0NDoyOFrOFvQz6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2MjAxMA==", "bodyText": "This doesn't seem to be used", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385062010", "createdAt": "2020-02-27T11:13:25Z", "author": {"login": "geoand"}, "path": "extensions/datasource/common/src/main/java/io/quarkus/datasource/common/runtime/DatabaseKind.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package io.quarkus.datasource.common.runtime;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * We don't use an enum as we also need to support non built-in database kinds.\n+ */\n+public final class DatabaseKind {\n+\n+    public static final String DERBY = \"derby\";\n+    public static final String H2 = \"h2\";\n+    public static final String MARIADB = \"mariadb\";\n+    public static final String MSSQL = \"mssql\";\n+    public static final String MYSQL = \"mysql\";\n+    public static final String POSTGRESQL = \"postgresql\";\n+\n+    private static final Map<String, String> ALIASES;\n+\n+    static {\n+        Map<String, String> aliases = new HashMap<String, String>();\n+        for (SupportedDatabaseKind kind : SupportedDatabaseKind.values()) {\n+            for (String alias : kind.aliases) {\n+                aliases.put(alias.toLowerCase(Locale.ROOT), kind.mainName.toLowerCase(Locale.ROOT));\n+            }\n+        }\n+        ALIASES = Collections.unmodifiableMap(aliases);\n+    }\n+\n+    public static String normalize(String value) {\n+        if (value == null) {\n+            return null;\n+        }\n+\n+        String lowerCaseValue = value.toLowerCase(Locale.ROOT).trim();\n+\n+        if (lowerCaseValue.isEmpty()) {\n+            return null;\n+        }\n+\n+        String supportedValue = ALIASES.get(lowerCaseValue);\n+        if (supportedValue != null) {\n+            return supportedValue;\n+        }\n+        return lowerCaseValue;\n+    }\n+\n+    public static boolean isDerby(String value) {\n+        return is(value, DERBY);\n+    }\n+\n+    public static boolean isH2(String value) {\n+        return is(value, H2);\n+    }\n+\n+    public static boolean isMariaDB(String value) {\n+        return is(value, MARIADB);\n+    }\n+\n+    public static boolean isMsSQL(String value) {\n+        return is(value, MSSQL);\n+    }\n+\n+    public static boolean isMySQL(String value) {\n+        return is(value, MYSQL);\n+    }\n+\n+    public static boolean isPostgreSQL(String value) {\n+        return is(value, POSTGRESQL);\n+    }\n+\n+    private static boolean is(String value, String mainName) {\n+        if (value == null) {\n+            return false;\n+        }\n+\n+        String normalizedValue = normalize(value);\n+\n+        return mainName.equals(normalizedValue);\n+    }\n+\n+    private DatabaseKind() {\n+    }\n+\n+    enum SupportedDatabaseKind {\n+        DERBY(DatabaseKind.DERBY),\n+        H2(DatabaseKind.H2),\n+        MARIADB(DatabaseKind.MARIADB),\n+        MSSQL(DatabaseKind.MSSQL),\n+        MYSQL(DatabaseKind.MYSQL),\n+        POSTGRESQL(DatabaseKind.POSTGRESQL, \"pgsql\", \"pg\");\n+\n+        final String mainName;\n+        final Set<String> aliases;\n+        static final Map<String, String> ALIASES = new HashMap<String, String>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwMjgyNQ==", "bodyText": "Removed.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385102825", "createdAt": "2020-02-27T12:44:28Z", "author": {"login": "gsmet"}, "path": "extensions/datasource/common/src/main/java/io/quarkus/datasource/common/runtime/DatabaseKind.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package io.quarkus.datasource.common.runtime;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * We don't use an enum as we also need to support non built-in database kinds.\n+ */\n+public final class DatabaseKind {\n+\n+    public static final String DERBY = \"derby\";\n+    public static final String H2 = \"h2\";\n+    public static final String MARIADB = \"mariadb\";\n+    public static final String MSSQL = \"mssql\";\n+    public static final String MYSQL = \"mysql\";\n+    public static final String POSTGRESQL = \"postgresql\";\n+\n+    private static final Map<String, String> ALIASES;\n+\n+    static {\n+        Map<String, String> aliases = new HashMap<String, String>();\n+        for (SupportedDatabaseKind kind : SupportedDatabaseKind.values()) {\n+            for (String alias : kind.aliases) {\n+                aliases.put(alias.toLowerCase(Locale.ROOT), kind.mainName.toLowerCase(Locale.ROOT));\n+            }\n+        }\n+        ALIASES = Collections.unmodifiableMap(aliases);\n+    }\n+\n+    public static String normalize(String value) {\n+        if (value == null) {\n+            return null;\n+        }\n+\n+        String lowerCaseValue = value.toLowerCase(Locale.ROOT).trim();\n+\n+        if (lowerCaseValue.isEmpty()) {\n+            return null;\n+        }\n+\n+        String supportedValue = ALIASES.get(lowerCaseValue);\n+        if (supportedValue != null) {\n+            return supportedValue;\n+        }\n+        return lowerCaseValue;\n+    }\n+\n+    public static boolean isDerby(String value) {\n+        return is(value, DERBY);\n+    }\n+\n+    public static boolean isH2(String value) {\n+        return is(value, H2);\n+    }\n+\n+    public static boolean isMariaDB(String value) {\n+        return is(value, MARIADB);\n+    }\n+\n+    public static boolean isMsSQL(String value) {\n+        return is(value, MSSQL);\n+    }\n+\n+    public static boolean isMySQL(String value) {\n+        return is(value, MYSQL);\n+    }\n+\n+    public static boolean isPostgreSQL(String value) {\n+        return is(value, POSTGRESQL);\n+    }\n+\n+    private static boolean is(String value, String mainName) {\n+        if (value == null) {\n+            return false;\n+        }\n+\n+        String normalizedValue = normalize(value);\n+\n+        return mainName.equals(normalizedValue);\n+    }\n+\n+    private DatabaseKind() {\n+    }\n+\n+    enum SupportedDatabaseKind {\n+        DERBY(DatabaseKind.DERBY),\n+        H2(DatabaseKind.H2),\n+        MARIADB(DatabaseKind.MARIADB),\n+        MSSQL(DatabaseKind.MSSQL),\n+        MYSQL(DatabaseKind.MYSQL),\n+        POSTGRESQL(DatabaseKind.POSTGRESQL, \"pgsql\", \"pg\");\n+\n+        final String mainName;\n+        final Set<String> aliases;\n+        static final Map<String, String> ALIASES = new HashMap<String, String>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2MjAxMA=="}, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDcyMjUzOnYy", "diffSide": "RIGHT", "path": "extensions/datasource/common/src/main/java/io/quarkus/datasource/common/runtime/DatabaseKind.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMToxNjoxNFrOFvOZ3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjo1MDozNFrOFvQ_UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2MzM5MA==", "bodyText": "Can we add the capacity here?", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385063390", "createdAt": "2020-02-27T11:16:14Z", "author": {"login": "geoand"}, "path": "extensions/datasource/common/src/main/java/io/quarkus/datasource/common/runtime/DatabaseKind.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package io.quarkus.datasource.common.runtime;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * We don't use an enum as we also need to support non built-in database kinds.\n+ */\n+public final class DatabaseKind {\n+\n+    public static final String DERBY = \"derby\";\n+    public static final String H2 = \"h2\";\n+    public static final String MARIADB = \"mariadb\";\n+    public static final String MSSQL = \"mssql\";\n+    public static final String MYSQL = \"mysql\";\n+    public static final String POSTGRESQL = \"postgresql\";\n+\n+    private static final Map<String, String> ALIASES;\n+\n+    static {\n+        Map<String, String> aliases = new HashMap<String, String>();\n+        for (SupportedDatabaseKind kind : SupportedDatabaseKind.values()) {\n+            for (String alias : kind.aliases) {\n+                aliases.put(alias.toLowerCase(Locale.ROOT), kind.mainName.toLowerCase(Locale.ROOT));\n+            }\n+        }\n+        ALIASES = Collections.unmodifiableMap(aliases);\n+    }\n+\n+    public static String normalize(String value) {\n+        if (value == null) {\n+            return null;\n+        }\n+\n+        String lowerCaseValue = value.toLowerCase(Locale.ROOT).trim();\n+\n+        if (lowerCaseValue.isEmpty()) {\n+            return null;\n+        }\n+\n+        String supportedValue = ALIASES.get(lowerCaseValue);\n+        if (supportedValue != null) {\n+            return supportedValue;\n+        }\n+        return lowerCaseValue;\n+    }\n+\n+    public static boolean isDerby(String value) {\n+        return is(value, DERBY);\n+    }\n+\n+    public static boolean isH2(String value) {\n+        return is(value, H2);\n+    }\n+\n+    public static boolean isMariaDB(String value) {\n+        return is(value, MARIADB);\n+    }\n+\n+    public static boolean isMsSQL(String value) {\n+        return is(value, MSSQL);\n+    }\n+\n+    public static boolean isMySQL(String value) {\n+        return is(value, MYSQL);\n+    }\n+\n+    public static boolean isPostgreSQL(String value) {\n+        return is(value, POSTGRESQL);\n+    }\n+\n+    private static boolean is(String value, String mainName) {\n+        if (value == null) {\n+            return false;\n+        }\n+\n+        String normalizedValue = normalize(value);\n+\n+        return mainName.equals(normalizedValue);\n+    }\n+\n+    private DatabaseKind() {\n+    }\n+\n+    enum SupportedDatabaseKind {\n+        DERBY(DatabaseKind.DERBY),\n+        H2(DatabaseKind.H2),\n+        MARIADB(DatabaseKind.MARIADB),\n+        MSSQL(DatabaseKind.MSSQL),\n+        MYSQL(DatabaseKind.MYSQL),\n+        POSTGRESQL(DatabaseKind.POSTGRESQL, \"pgsql\", \"pg\");\n+\n+        final String mainName;\n+        final Set<String> aliases;\n+        static final Map<String, String> ALIASES = new HashMap<String, String>();\n+\n+        SupportedDatabaseKind(String mainName) {\n+            this.mainName = mainName;\n+            this.aliases = Collections.singleton(mainName);\n+        }\n+\n+        SupportedDatabaseKind(String mainName, String... aliases) {\n+            this.mainName = mainName;\n+            this.aliases = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwMzQ0MA==", "bodyText": "Computing capacity for something hash based requires some computation. It will make the code less readable and it's really not worth it given it's not a hot path.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385103440", "createdAt": "2020-02-27T12:45:46Z", "author": {"login": "gsmet"}, "path": "extensions/datasource/common/src/main/java/io/quarkus/datasource/common/runtime/DatabaseKind.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package io.quarkus.datasource.common.runtime;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * We don't use an enum as we also need to support non built-in database kinds.\n+ */\n+public final class DatabaseKind {\n+\n+    public static final String DERBY = \"derby\";\n+    public static final String H2 = \"h2\";\n+    public static final String MARIADB = \"mariadb\";\n+    public static final String MSSQL = \"mssql\";\n+    public static final String MYSQL = \"mysql\";\n+    public static final String POSTGRESQL = \"postgresql\";\n+\n+    private static final Map<String, String> ALIASES;\n+\n+    static {\n+        Map<String, String> aliases = new HashMap<String, String>();\n+        for (SupportedDatabaseKind kind : SupportedDatabaseKind.values()) {\n+            for (String alias : kind.aliases) {\n+                aliases.put(alias.toLowerCase(Locale.ROOT), kind.mainName.toLowerCase(Locale.ROOT));\n+            }\n+        }\n+        ALIASES = Collections.unmodifiableMap(aliases);\n+    }\n+\n+    public static String normalize(String value) {\n+        if (value == null) {\n+            return null;\n+        }\n+\n+        String lowerCaseValue = value.toLowerCase(Locale.ROOT).trim();\n+\n+        if (lowerCaseValue.isEmpty()) {\n+            return null;\n+        }\n+\n+        String supportedValue = ALIASES.get(lowerCaseValue);\n+        if (supportedValue != null) {\n+            return supportedValue;\n+        }\n+        return lowerCaseValue;\n+    }\n+\n+    public static boolean isDerby(String value) {\n+        return is(value, DERBY);\n+    }\n+\n+    public static boolean isH2(String value) {\n+        return is(value, H2);\n+    }\n+\n+    public static boolean isMariaDB(String value) {\n+        return is(value, MARIADB);\n+    }\n+\n+    public static boolean isMsSQL(String value) {\n+        return is(value, MSSQL);\n+    }\n+\n+    public static boolean isMySQL(String value) {\n+        return is(value, MYSQL);\n+    }\n+\n+    public static boolean isPostgreSQL(String value) {\n+        return is(value, POSTGRESQL);\n+    }\n+\n+    private static boolean is(String value, String mainName) {\n+        if (value == null) {\n+            return false;\n+        }\n+\n+        String normalizedValue = normalize(value);\n+\n+        return mainName.equals(normalizedValue);\n+    }\n+\n+    private DatabaseKind() {\n+    }\n+\n+    enum SupportedDatabaseKind {\n+        DERBY(DatabaseKind.DERBY),\n+        H2(DatabaseKind.H2),\n+        MARIADB(DatabaseKind.MARIADB),\n+        MSSQL(DatabaseKind.MSSQL),\n+        MYSQL(DatabaseKind.MYSQL),\n+        POSTGRESQL(DatabaseKind.POSTGRESQL, \"pgsql\", \"pg\");\n+\n+        final String mainName;\n+        final Set<String> aliases;\n+        static final Map<String, String> ALIASES = new HashMap<String, String>();\n+\n+        SupportedDatabaseKind(String mainName) {\n+            this.mainName = mainName;\n+            this.aliases = Collections.singleton(mainName);\n+        }\n+\n+        SupportedDatabaseKind(String mainName, String... aliases) {\n+            this.mainName = mainName;\n+            this.aliases = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2MzM5MA=="}, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwNTc0NQ==", "bodyText": "Sure, not a big deal", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385105745", "createdAt": "2020-02-27T12:50:34Z", "author": {"login": "geoand"}, "path": "extensions/datasource/common/src/main/java/io/quarkus/datasource/common/runtime/DatabaseKind.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package io.quarkus.datasource.common.runtime;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * We don't use an enum as we also need to support non built-in database kinds.\n+ */\n+public final class DatabaseKind {\n+\n+    public static final String DERBY = \"derby\";\n+    public static final String H2 = \"h2\";\n+    public static final String MARIADB = \"mariadb\";\n+    public static final String MSSQL = \"mssql\";\n+    public static final String MYSQL = \"mysql\";\n+    public static final String POSTGRESQL = \"postgresql\";\n+\n+    private static final Map<String, String> ALIASES;\n+\n+    static {\n+        Map<String, String> aliases = new HashMap<String, String>();\n+        for (SupportedDatabaseKind kind : SupportedDatabaseKind.values()) {\n+            for (String alias : kind.aliases) {\n+                aliases.put(alias.toLowerCase(Locale.ROOT), kind.mainName.toLowerCase(Locale.ROOT));\n+            }\n+        }\n+        ALIASES = Collections.unmodifiableMap(aliases);\n+    }\n+\n+    public static String normalize(String value) {\n+        if (value == null) {\n+            return null;\n+        }\n+\n+        String lowerCaseValue = value.toLowerCase(Locale.ROOT).trim();\n+\n+        if (lowerCaseValue.isEmpty()) {\n+            return null;\n+        }\n+\n+        String supportedValue = ALIASES.get(lowerCaseValue);\n+        if (supportedValue != null) {\n+            return supportedValue;\n+        }\n+        return lowerCaseValue;\n+    }\n+\n+    public static boolean isDerby(String value) {\n+        return is(value, DERBY);\n+    }\n+\n+    public static boolean isH2(String value) {\n+        return is(value, H2);\n+    }\n+\n+    public static boolean isMariaDB(String value) {\n+        return is(value, MARIADB);\n+    }\n+\n+    public static boolean isMsSQL(String value) {\n+        return is(value, MSSQL);\n+    }\n+\n+    public static boolean isMySQL(String value) {\n+        return is(value, MYSQL);\n+    }\n+\n+    public static boolean isPostgreSQL(String value) {\n+        return is(value, POSTGRESQL);\n+    }\n+\n+    private static boolean is(String value, String mainName) {\n+        if (value == null) {\n+            return false;\n+        }\n+\n+        String normalizedValue = normalize(value);\n+\n+        return mainName.equals(normalizedValue);\n+    }\n+\n+    private DatabaseKind() {\n+    }\n+\n+    enum SupportedDatabaseKind {\n+        DERBY(DatabaseKind.DERBY),\n+        H2(DatabaseKind.H2),\n+        MARIADB(DatabaseKind.MARIADB),\n+        MSSQL(DatabaseKind.MSSQL),\n+        MYSQL(DatabaseKind.MYSQL),\n+        POSTGRESQL(DatabaseKind.POSTGRESQL, \"pgsql\", \"pg\");\n+\n+        final String mainName;\n+        final Set<String> aliases;\n+        static final Map<String, String> ALIASES = new HashMap<String, String>();\n+\n+        SupportedDatabaseKind(String mainName) {\n+            this.mainName = mainName;\n+            this.aliases = Collections.singleton(mainName);\n+        }\n+\n+        SupportedDatabaseKind(String mainName, String... aliases) {\n+            this.mainName = mainName;\n+            this.aliases = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2MzM5MA=="}, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDcyNDYxOnYy", "diffSide": "RIGHT", "path": "extensions/datasource/deployment/src/main/java/io/quarkus/datasource/deployment/DataSourceProcessor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMToxNjo1N1rOFvObLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjo1MTozOFrOFvRBeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2MzcyNQ==", "bodyText": "Is this leftover or something?", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385063725", "createdAt": "2020-02-27T11:16:57Z", "author": {"login": "geoand"}, "path": "extensions/datasource/deployment/src/main/java/io/quarkus/datasource/deployment/DataSourceProcessor.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package io.quarkus.datasource.deployment;\n+\n+public class DataSourceProcessor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwMzY3MA==", "bodyText": "No. IIRC, the javadoc plugin complains when releasing when an artifact is entirely empty.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385103670", "createdAt": "2020-02-27T12:46:12Z", "author": {"login": "gsmet"}, "path": "extensions/datasource/deployment/src/main/java/io/quarkus/datasource/deployment/DataSourceProcessor.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package io.quarkus.datasource.deployment;\n+\n+public class DataSourceProcessor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2MzcyNQ=="}, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwNjI5Ng==", "bodyText": "Can we then call it something other than DataSourceProcessor? It just seems a little missleading to someone who reads it for the first time.\nOtherwise a tiny bit of Javadoc would be nice", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385106296", "createdAt": "2020-02-27T12:51:38Z", "author": {"login": "geoand"}, "path": "extensions/datasource/deployment/src/main/java/io/quarkus/datasource/deployment/DataSourceProcessor.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package io.quarkus.datasource.deployment;\n+\n+public class DataSourceProcessor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2MzcyNQ=="}, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDczMzY5OnYy", "diffSide": "RIGHT", "path": "extensions/datasource/runtime/src/main/java/io/quarkus/datasource/runtime/DataSourceRuntimeConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMToyMDoxNVrOFvOgrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjo1MjoxMVrOFvRCbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2NTEzMw==", "bodyText": "I don't think we need to set the value. We don't do it in any of the other configurations", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385065133", "createdAt": "2020-02-27T11:20:15Z", "author": {"login": "geoand"}, "path": "extensions/datasource/runtime/src/main/java/io/quarkus/datasource/runtime/DataSourceRuntimeConfig.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.datasource.runtime;\n+\n+import java.util.Optional;\n+\n+import io.quarkus.runtime.annotations.ConfigGroup;\n+import io.quarkus.runtime.annotations.ConfigItem;\n+\n+@ConfigGroup\n+public class DataSourceRuntimeConfig {\n+\n+    /**\n+     * The datasource username\n+     */\n+    @ConfigItem\n+    public Optional<String> username = Optional.empty();\n+\n+    /**\n+     * The datasource password\n+     */\n+    @ConfigItem\n+    public Optional<String> password = Optional.empty();\n+\n+    /**\n+     * The credentials provider name\n+     */\n+    @ConfigItem\n+    public Optional<String> credentialsProvider = Optional.empty();\n+\n+    /**\n+     * The credentials provider type.\n+     * <p>\n+     * It is the {@code &#64;Named} value of the credentials provider bean. It is used to discriminate if multiple\n+     * CredentialsProvider beans are available.\n+     * <p>\n+     * For Vault it is: vault-credentials-provider. Not necessary if there is only one credentials provider available.\n+     */\n+    @ConfigItem\n+    public Optional<String> credentialsProviderType = Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwNDI3Nw==", "bodyText": "We do. Because I also initialize them via constructor. You cannot trigger the initialization of another map given you have a value present in a map. And when I have some build time config in the map, I need a valid runtime config in the other map so I need to initialize it myself. Talked to David about that a while ago but it's not trivial.\nWe used this pattern for Flyway IIRC.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385104277", "createdAt": "2020-02-27T12:47:36Z", "author": {"login": "gsmet"}, "path": "extensions/datasource/runtime/src/main/java/io/quarkus/datasource/runtime/DataSourceRuntimeConfig.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.datasource.runtime;\n+\n+import java.util.Optional;\n+\n+import io.quarkus.runtime.annotations.ConfigGroup;\n+import io.quarkus.runtime.annotations.ConfigItem;\n+\n+@ConfigGroup\n+public class DataSourceRuntimeConfig {\n+\n+    /**\n+     * The datasource username\n+     */\n+    @ConfigItem\n+    public Optional<String> username = Optional.empty();\n+\n+    /**\n+     * The datasource password\n+     */\n+    @ConfigItem\n+    public Optional<String> password = Optional.empty();\n+\n+    /**\n+     * The credentials provider name\n+     */\n+    @ConfigItem\n+    public Optional<String> credentialsProvider = Optional.empty();\n+\n+    /**\n+     * The credentials provider type.\n+     * <p>\n+     * It is the {@code &#64;Named} value of the credentials provider bean. It is used to discriminate if multiple\n+     * CredentialsProvider beans are available.\n+     * <p>\n+     * For Vault it is: vault-credentials-provider. Not necessary if there is only one credentials provider available.\n+     */\n+    @ConfigItem\n+    public Optional<String> credentialsProviderType = Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2NTEzMw=="}, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwNjU0Mg==", "bodyText": "Understood, thanks", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385106542", "createdAt": "2020-02-27T12:52:11Z", "author": {"login": "geoand"}, "path": "extensions/datasource/runtime/src/main/java/io/quarkus/datasource/runtime/DataSourceRuntimeConfig.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.datasource.runtime;\n+\n+import java.util.Optional;\n+\n+import io.quarkus.runtime.annotations.ConfigGroup;\n+import io.quarkus.runtime.annotations.ConfigItem;\n+\n+@ConfigGroup\n+public class DataSourceRuntimeConfig {\n+\n+    /**\n+     * The datasource username\n+     */\n+    @ConfigItem\n+    public Optional<String> username = Optional.empty();\n+\n+    /**\n+     * The datasource password\n+     */\n+    @ConfigItem\n+    public Optional<String> password = Optional.empty();\n+\n+    /**\n+     * The credentials provider name\n+     */\n+    @ConfigItem\n+    public Optional<String> credentialsProvider = Optional.empty();\n+\n+    /**\n+     * The credentials provider type.\n+     * <p>\n+     * It is the {@code &#64;Named} value of the credentials provider bean. It is used to discriminate if multiple\n+     * CredentialsProvider beans are available.\n+     * <p>\n+     * For Vault it is: vault-credentials-provider. Not necessary if there is only one credentials provider available.\n+     */\n+    @ConfigItem\n+    public Optional<String> credentialsProviderType = Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2NTEzMw=="}, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDc0MTcyOnYy", "diffSide": "RIGHT", "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMToyMjo1OFrOFvOleg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzowMTo0NFrOFvRTzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2NjM2Mg==", "bodyText": "I think we should at least warn users if more than one is configured", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385066362", "createdAt": "2020-02-27T11:22:58Z", "author": {"login": "geoand"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -204,11 +205,16 @@ public void build(RecorderContext recorderContext, HibernateOrmRecorder recorder\n             return;\n         }\n \n+        // we only support the default datasource for now", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwNDY3OQ==", "bodyText": "Why? They can be used for other purposes. And this patch doesn't change that, it just changes how the default is propagated.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385104679", "createdAt": "2020-02-27T12:48:20Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -204,11 +205,16 @@ public void build(RecorderContext recorderContext, HibernateOrmRecorder recorder\n             return;\n         }\n \n+        // we only support the default datasource for now", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2NjM2Mg=="}, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwNzE4Nw==", "bodyText": "I am just saying that a user has no way of knowing this and as someone who looked at it for the first time, it seems suprising to make such a assumption without any warning or anything.\nYou know this part way better than almost anyone, so I'll leave it to you to decide", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385107187", "createdAt": "2020-02-27T12:53:35Z", "author": {"login": "geoand"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -204,11 +205,16 @@ public void build(RecorderContext recorderContext, HibernateOrmRecorder recorder\n             return;\n         }\n \n+        // we only support the default datasource for now", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2NjM2Mg=="}, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMDM1MQ==", "bodyText": "It has been like that since forever so let's not discuss this here. We have an issue for multiple PU support and a lot of people complaining there so I think users are aware of that :).", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385110351", "createdAt": "2020-02-27T13:00:27Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -204,11 +205,16 @@ public void build(RecorderContext recorderContext, HibernateOrmRecorder recorder\n             return;\n         }\n \n+        // we only support the default datasource for now", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2NjM2Mg=="}, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMDk5MA==", "bodyText": "Fine by my, since I'm not the one that will be listening to those users complain :P", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385110990", "createdAt": "2020-02-27T13:01:44Z", "author": {"login": "geoand"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -204,11 +205,16 @@ public void build(RecorderContext recorderContext, HibernateOrmRecorder recorder\n             return;\n         }\n \n+        // we only support the default datasource for now", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2NjM2Mg=="}, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDc0NjY3OnYy", "diffSide": "RIGHT", "path": "extensions/agroal/spi/src/main/java/io/quarkus/agroal/deployment/JdbcDriverBuildItem.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMToyNDozNVrOFvOodw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjo1MTo0MFrOFvRBkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2NzEyNw==", "bodyText": "Let's have some minimal Javadoc for this one - it seems like a pretty useful Build Item :)", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385067127", "createdAt": "2020-02-27T11:24:35Z", "author": {"login": "geoand"}, "path": "extensions/agroal/spi/src/main/java/io/quarkus/agroal/deployment/JdbcDriverBuildItem.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package io.quarkus.agroal.deployment;\n+\n+import java.util.Optional;\n+\n+import io.quarkus.builder.item.MultiBuildItem;\n+\n+public final class JdbcDriverBuildItem extends MultiBuildItem {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwNjMyMQ==", "bodyText": "Done.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385106321", "createdAt": "2020-02-27T12:51:40Z", "author": {"login": "gsmet"}, "path": "extensions/agroal/spi/src/main/java/io/quarkus/agroal/deployment/JdbcDriverBuildItem.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package io.quarkus.agroal.deployment;\n+\n+import java.util.Optional;\n+\n+import io.quarkus.builder.item.MultiBuildItem;\n+\n+public final class JdbcDriverBuildItem extends MultiBuildItem {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2NzEyNw=="}, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDc1NTA4OnYy", "diffSide": "RIGHT", "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/JdbcDriver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMToyNzo0N1rOFvOtwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjo1NDoxMFrOFvRGAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2ODQ4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static class JdbcDriverLiteral extends AnnotationLiteral<io.quarkus.agroal.JdbcDriver>\n          \n          \n            \n                class JdbcDriverLiteral extends AnnotationLiteral<io.quarkus.agroal.JdbcDriver>", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385068481", "createdAt": "2020-02-27T11:27:47Z", "author": {"login": "geoand"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/JdbcDriver.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package io.quarkus.agroal;\n+\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.ElementType.PARAMETER;\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import javax.enterprise.util.AnnotationLiteral;\n+import javax.inject.Qualifier;\n+\n+/**\n+ * Defines which database the JDBC driver is compatible with.\n+ */\n+@Target({ METHOD, FIELD, PARAMETER, TYPE })\n+@Retention(RUNTIME)\n+@Documented\n+@Qualifier\n+public @interface JdbcDriver {\n+\n+    String name();\n+\n+    public static class JdbcDriverLiteral extends AnnotationLiteral<io.quarkus.agroal.JdbcDriver>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwNzQ1OA==", "bodyText": "Done.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385107458", "createdAt": "2020-02-27T12:54:10Z", "author": {"login": "gsmet"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/JdbcDriver.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package io.quarkus.agroal;\n+\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.ElementType.PARAMETER;\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import javax.enterprise.util.AnnotationLiteral;\n+import javax.inject.Qualifier;\n+\n+/**\n+ * Defines which database the JDBC driver is compatible with.\n+ */\n+@Target({ METHOD, FIELD, PARAMETER, TYPE })\n+@Retention(RUNTIME)\n+@Documented\n+@Qualifier\n+public @interface JdbcDriver {\n+\n+    String name();\n+\n+    public static class JdbcDriverLiteral extends AnnotationLiteral<io.quarkus.agroal.JdbcDriver>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2ODQ4MQ=="}, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDc1NzA0OnYy", "diffSide": "RIGHT", "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/AgroalConnectionConfigurer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMToyODozMlrOFvOu_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjo1NDozMFrOFvRGiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2ODc5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                static final Logger log = Logger.getLogger(AgroalConnectionConfigurer.class.getName());\n          \n          \n            \n                Logger log = Logger.getLogger(AgroalConnectionConfigurer.class.getName());", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385068799", "createdAt": "2020-02-27T11:28:32Z", "author": {"login": "geoand"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/AgroalConnectionConfigurer.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package io.quarkus.agroal.runtime;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.agroal.api.configuration.supplier.AgroalDataSourceConfigurationSupplier;\n+\n+public interface AgroalConnectionConfigurer {\n+\n+    static final Logger log = Logger.getLogger(AgroalConnectionConfigurer.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwNzU5Mg==", "bodyText": "Done.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385107592", "createdAt": "2020-02-27T12:54:30Z", "author": {"login": "gsmet"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/AgroalConnectionConfigurer.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package io.quarkus.agroal.runtime;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.agroal.api.configuration.supplier.AgroalDataSourceConfigurationSupplier;\n+\n+public interface AgroalConnectionConfigurer {\n+\n+    static final Logger log = Logger.getLogger(AgroalConnectionConfigurer.class.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2ODc5OQ=="}, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDc2MTkyOnYy", "diffSide": "RIGHT", "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/AbstractDataSourceProducer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTozMDoxMlrOFvOx-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjo1Njo0NlrOFvRKoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2OTU2MQ==", "bodyText": "It seems like this hasn't been preceded by a isPresent anywhere.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385069561", "createdAt": "2020-02-27T11:30:12Z", "author": {"login": "geoand"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/AbstractDataSourceProducer.java", "diffHunk": "@@ -47,61 +55,52 @@\n     @Inject\n     public TransactionSynchronizationRegistry transactionSynchronizationRegistry;\n \n-    public DataSourceBuildTimeConfig getDefaultBuildTimeConfig() {\n-        return buildTimeConfig.defaultDataSource;\n-    }\n-\n-    public Optional<DataSourceRuntimeConfig> getDefaultRuntimeConfig() {\n-        checkRuntimeConfig();\n-\n-        return Optional.of(runtimeConfig.defaultDataSource);\n-    }\n-\n-    public DataSourceBuildTimeConfig getBuildTimeConfig(String dataSourceName) {\n-        return buildTimeConfig.namedDataSources.get(dataSourceName);\n-    }\n-\n-    public Optional<DataSourceRuntimeConfig> getRuntimeConfig(String dataSourceName) {\n-        checkRuntimeConfig();\n-\n-        return Optional.ofNullable(runtimeConfig.namedDataSources.get(dataSourceName));\n+    public void configureDataSources(DataSourcesBuildTimeConfig dataSourcesBuildTimeConfig,\n+            DataSourcesJdbcBuildTimeConfig dataSourcesJdbcBuildTimeConfig,\n+            DataSourcesRuntimeConfig dataSourcesRuntimeConfig,\n+            DataSourcesJdbcRuntimeConfig dataSourcesJdbcRuntimeConfig,\n+            boolean disableSslSupport) {\n+        this.dataSourcesBuildTimeConfig = dataSourcesBuildTimeConfig;\n+        this.dataSourcesJdbcBuildTimeConfig = dataSourcesJdbcBuildTimeConfig;\n+        this.dataSourcesRuntimeConfig = dataSourcesRuntimeConfig;\n+        this.dataSourcesJdbcRuntimeConfig = dataSourcesJdbcRuntimeConfig;\n+        this.disableSslSupport = disableSslSupport;\n     }\n \n     public AgroalDataSource createDataSource(String dataSourceName,\n             DataSourceBuildTimeConfig dataSourceBuildTimeConfig,\n-            Optional<DataSourceRuntimeConfig> dataSourceRuntimeConfigOptional,\n+            DataSourceJdbcBuildTimeConfig dataSourceJdbcBuildTimeConfig,\n+            DataSourceRuntimeConfig dataSourceRuntimeConfig,\n+            DataSourceJdbcRuntimeConfig dataSourceJdbcRuntimeConfig,\n+            String resolvedDriveClass,\n             boolean mpMetricsPresent) {\n-        if (!dataSourceRuntimeConfigOptional.isPresent() || !dataSourceRuntimeConfigOptional.get().url.isPresent()) {\n-            log.warn(\"Datasource \" + dataSourceName + \" not started: driver and/or url are not defined.\");\n+        checkConfigInjection();\n+\n+        if (!dataSourceJdbcBuildTimeConfig.enabled) {\n+            return null;\n+        }\n+\n+        if (!dataSourceJdbcRuntimeConfig.url.isPresent()) {\n+            log.warn(\"JDBC datasource \" + dataSourceName + \" not started: driver and/or url are not defined.\");\n             return null;\n         }\n+\n         // we first make sure that all available JDBC drivers are loaded in the current TCCL\n         loadDriversInTCCL();\n \n-        DataSourceRuntimeConfig dataSourceRuntimeConfig = dataSourceRuntimeConfigOptional.get();\n-\n-        String driverName = dataSourceBuildTimeConfig.driver.get();\n         Class<?> driver;\n         try {\n-            driver = Class.forName(driverName, true, Thread.currentThread().getContextClassLoader());\n+            driver = Class.forName(resolvedDriveClass, true, Thread.currentThread().getContextClassLoader());\n         } catch (ClassNotFoundException e) {\n-            throw new RuntimeException(\"Unable to load the dataSource driver\", e);\n+            throw new RuntimeException(\n+                    \"Unable to load the datasource driver \" + resolvedDriveClass + \" for datasource \" + dataSourceName, e);\n         }\n \n-        String url = dataSourceRuntimeConfig.url.get();\n+        InstanceHandle<AgroalConnectionConfigurer> agroalConnectionConfigurerHandle = Arc.container().instance(\n+                AgroalConnectionConfigurer.class,\n+                new JdbcDriverLiteral(dataSourceBuildTimeConfig.kind.get()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwNzg4Mw==", "bodyText": "No, if I'm there, I'm sure it has been defined.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385107883", "createdAt": "2020-02-27T12:55:12Z", "author": {"login": "gsmet"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/AbstractDataSourceProducer.java", "diffHunk": "@@ -47,61 +55,52 @@\n     @Inject\n     public TransactionSynchronizationRegistry transactionSynchronizationRegistry;\n \n-    public DataSourceBuildTimeConfig getDefaultBuildTimeConfig() {\n-        return buildTimeConfig.defaultDataSource;\n-    }\n-\n-    public Optional<DataSourceRuntimeConfig> getDefaultRuntimeConfig() {\n-        checkRuntimeConfig();\n-\n-        return Optional.of(runtimeConfig.defaultDataSource);\n-    }\n-\n-    public DataSourceBuildTimeConfig getBuildTimeConfig(String dataSourceName) {\n-        return buildTimeConfig.namedDataSources.get(dataSourceName);\n-    }\n-\n-    public Optional<DataSourceRuntimeConfig> getRuntimeConfig(String dataSourceName) {\n-        checkRuntimeConfig();\n-\n-        return Optional.ofNullable(runtimeConfig.namedDataSources.get(dataSourceName));\n+    public void configureDataSources(DataSourcesBuildTimeConfig dataSourcesBuildTimeConfig,\n+            DataSourcesJdbcBuildTimeConfig dataSourcesJdbcBuildTimeConfig,\n+            DataSourcesRuntimeConfig dataSourcesRuntimeConfig,\n+            DataSourcesJdbcRuntimeConfig dataSourcesJdbcRuntimeConfig,\n+            boolean disableSslSupport) {\n+        this.dataSourcesBuildTimeConfig = dataSourcesBuildTimeConfig;\n+        this.dataSourcesJdbcBuildTimeConfig = dataSourcesJdbcBuildTimeConfig;\n+        this.dataSourcesRuntimeConfig = dataSourcesRuntimeConfig;\n+        this.dataSourcesJdbcRuntimeConfig = dataSourcesJdbcRuntimeConfig;\n+        this.disableSslSupport = disableSslSupport;\n     }\n \n     public AgroalDataSource createDataSource(String dataSourceName,\n             DataSourceBuildTimeConfig dataSourceBuildTimeConfig,\n-            Optional<DataSourceRuntimeConfig> dataSourceRuntimeConfigOptional,\n+            DataSourceJdbcBuildTimeConfig dataSourceJdbcBuildTimeConfig,\n+            DataSourceRuntimeConfig dataSourceRuntimeConfig,\n+            DataSourceJdbcRuntimeConfig dataSourceJdbcRuntimeConfig,\n+            String resolvedDriveClass,\n             boolean mpMetricsPresent) {\n-        if (!dataSourceRuntimeConfigOptional.isPresent() || !dataSourceRuntimeConfigOptional.get().url.isPresent()) {\n-            log.warn(\"Datasource \" + dataSourceName + \" not started: driver and/or url are not defined.\");\n+        checkConfigInjection();\n+\n+        if (!dataSourceJdbcBuildTimeConfig.enabled) {\n+            return null;\n+        }\n+\n+        if (!dataSourceJdbcRuntimeConfig.url.isPresent()) {\n+            log.warn(\"JDBC datasource \" + dataSourceName + \" not started: driver and/or url are not defined.\");\n             return null;\n         }\n+\n         // we first make sure that all available JDBC drivers are loaded in the current TCCL\n         loadDriversInTCCL();\n \n-        DataSourceRuntimeConfig dataSourceRuntimeConfig = dataSourceRuntimeConfigOptional.get();\n-\n-        String driverName = dataSourceBuildTimeConfig.driver.get();\n         Class<?> driver;\n         try {\n-            driver = Class.forName(driverName, true, Thread.currentThread().getContextClassLoader());\n+            driver = Class.forName(resolvedDriveClass, true, Thread.currentThread().getContextClassLoader());\n         } catch (ClassNotFoundException e) {\n-            throw new RuntimeException(\"Unable to load the dataSource driver\", e);\n+            throw new RuntimeException(\n+                    \"Unable to load the datasource driver \" + resolvedDriveClass + \" for datasource \" + dataSourceName, e);\n         }\n \n-        String url = dataSourceRuntimeConfig.url.get();\n+        InstanceHandle<AgroalConnectionConfigurer> agroalConnectionConfigurerHandle = Arc.container().instance(\n+                AgroalConnectionConfigurer.class,\n+                new JdbcDriverLiteral(dataSourceBuildTimeConfig.kind.get()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2OTU2MQ=="}, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwODY0MQ==", "bodyText": "OK", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385108641", "createdAt": "2020-02-27T12:56:46Z", "author": {"login": "geoand"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/AbstractDataSourceProducer.java", "diffHunk": "@@ -47,61 +55,52 @@\n     @Inject\n     public TransactionSynchronizationRegistry transactionSynchronizationRegistry;\n \n-    public DataSourceBuildTimeConfig getDefaultBuildTimeConfig() {\n-        return buildTimeConfig.defaultDataSource;\n-    }\n-\n-    public Optional<DataSourceRuntimeConfig> getDefaultRuntimeConfig() {\n-        checkRuntimeConfig();\n-\n-        return Optional.of(runtimeConfig.defaultDataSource);\n-    }\n-\n-    public DataSourceBuildTimeConfig getBuildTimeConfig(String dataSourceName) {\n-        return buildTimeConfig.namedDataSources.get(dataSourceName);\n-    }\n-\n-    public Optional<DataSourceRuntimeConfig> getRuntimeConfig(String dataSourceName) {\n-        checkRuntimeConfig();\n-\n-        return Optional.ofNullable(runtimeConfig.namedDataSources.get(dataSourceName));\n+    public void configureDataSources(DataSourcesBuildTimeConfig dataSourcesBuildTimeConfig,\n+            DataSourcesJdbcBuildTimeConfig dataSourcesJdbcBuildTimeConfig,\n+            DataSourcesRuntimeConfig dataSourcesRuntimeConfig,\n+            DataSourcesJdbcRuntimeConfig dataSourcesJdbcRuntimeConfig,\n+            boolean disableSslSupport) {\n+        this.dataSourcesBuildTimeConfig = dataSourcesBuildTimeConfig;\n+        this.dataSourcesJdbcBuildTimeConfig = dataSourcesJdbcBuildTimeConfig;\n+        this.dataSourcesRuntimeConfig = dataSourcesRuntimeConfig;\n+        this.dataSourcesJdbcRuntimeConfig = dataSourcesJdbcRuntimeConfig;\n+        this.disableSslSupport = disableSslSupport;\n     }\n \n     public AgroalDataSource createDataSource(String dataSourceName,\n             DataSourceBuildTimeConfig dataSourceBuildTimeConfig,\n-            Optional<DataSourceRuntimeConfig> dataSourceRuntimeConfigOptional,\n+            DataSourceJdbcBuildTimeConfig dataSourceJdbcBuildTimeConfig,\n+            DataSourceRuntimeConfig dataSourceRuntimeConfig,\n+            DataSourceJdbcRuntimeConfig dataSourceJdbcRuntimeConfig,\n+            String resolvedDriveClass,\n             boolean mpMetricsPresent) {\n-        if (!dataSourceRuntimeConfigOptional.isPresent() || !dataSourceRuntimeConfigOptional.get().url.isPresent()) {\n-            log.warn(\"Datasource \" + dataSourceName + \" not started: driver and/or url are not defined.\");\n+        checkConfigInjection();\n+\n+        if (!dataSourceJdbcBuildTimeConfig.enabled) {\n+            return null;\n+        }\n+\n+        if (!dataSourceJdbcRuntimeConfig.url.isPresent()) {\n+            log.warn(\"JDBC datasource \" + dataSourceName + \" not started: driver and/or url are not defined.\");\n             return null;\n         }\n+\n         // we first make sure that all available JDBC drivers are loaded in the current TCCL\n         loadDriversInTCCL();\n \n-        DataSourceRuntimeConfig dataSourceRuntimeConfig = dataSourceRuntimeConfigOptional.get();\n-\n-        String driverName = dataSourceBuildTimeConfig.driver.get();\n         Class<?> driver;\n         try {\n-            driver = Class.forName(driverName, true, Thread.currentThread().getContextClassLoader());\n+            driver = Class.forName(resolvedDriveClass, true, Thread.currentThread().getContextClassLoader());\n         } catch (ClassNotFoundException e) {\n-            throw new RuntimeException(\"Unable to load the dataSource driver\", e);\n+            throw new RuntimeException(\n+                    \"Unable to load the datasource driver \" + resolvedDriveClass + \" for datasource \" + dataSourceName, e);\n         }\n \n-        String url = dataSourceRuntimeConfig.url.get();\n+        InstanceHandle<AgroalConnectionConfigurer> agroalConnectionConfigurerHandle = Arc.container().instance(\n+                AgroalConnectionConfigurer.class,\n+                new JdbcDriverLiteral(dataSourceBuildTimeConfig.kind.get()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA2OTU2MQ=="}, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDc3MjIxOnYy", "diffSide": "RIGHT", "path": "extensions/reactive-datasource/deployment/src/main/java/io/quarkus/reactive/datasource/deployment/ReactiveDataSourceProcessor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTozMzo0OFrOFvO4Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjo1NjozOVrOFvRKVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3MTEwNg==", "bodyText": "Is this empty class needed for anything?", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385071106", "createdAt": "2020-02-27T11:33:48Z", "author": {"login": "geoand"}, "path": "extensions/reactive-datasource/deployment/src/main/java/io/quarkus/reactive/datasource/deployment/ReactiveDataSourceProcessor.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package io.quarkus.reactive.datasource.deployment;\n+\n+public class ReactiveDataSourceProcessor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwNzk1MA==", "bodyText": "See previous comment.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385107950", "createdAt": "2020-02-27T12:55:21Z", "author": {"login": "gsmet"}, "path": "extensions/reactive-datasource/deployment/src/main/java/io/quarkus/reactive/datasource/deployment/ReactiveDataSourceProcessor.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package io.quarkus.reactive.datasource.deployment;\n+\n+public class ReactiveDataSourceProcessor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3MTEwNg=="}, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwODU2Nw==", "bodyText": "See previous answer :P", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385108567", "createdAt": "2020-02-27T12:56:39Z", "author": {"login": "geoand"}, "path": "extensions/reactive-datasource/deployment/src/main/java/io/quarkus/reactive/datasource/deployment/ReactiveDataSourceProcessor.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package io.quarkus.reactive.datasource.deployment;\n+\n+public class ReactiveDataSourceProcessor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3MTEwNg=="}, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDk1NDI1OnYy", "diffSide": "RIGHT", "path": "extensions/agroal/deployment/src/main/java/io/quarkus/agroal/deployment/AggregatedDataSourceBuildTimeConfigBuildItem.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjozNjoyMVrOFvQlJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODo1ODo0MlrOFvdVNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5OTA0Nw==", "bodyText": "What is \"aggregated\" about it?", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385099047", "createdAt": "2020-02-27T12:36:21Z", "author": {"login": "emmanuelbernard"}, "path": "extensions/agroal/deployment/src/main/java/io/quarkus/agroal/deployment/AggregatedDataSourceBuildTimeConfigBuildItem.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package io.quarkus.agroal.deployment;\n+\n+import io.quarkus.agroal.runtime.DataSourceJdbcBuildTimeConfig;\n+import io.quarkus.builder.item.MultiBuildItem;\n+import io.quarkus.datasource.common.runtime.DataSourceUtil;\n+import io.quarkus.datasource.runtime.DataSourceBuildTimeConfig;\n+\n+final class AggregatedDataSourceBuildTimeConfigBuildItem extends MultiBuildItem {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEyODM1Mw==", "bodyText": "It aggregates all the different build time configuration objects into one aggregated and consistent view.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385128353", "createdAt": "2020-02-27T13:35:11Z", "author": {"login": "gsmet"}, "path": "extensions/agroal/deployment/src/main/java/io/quarkus/agroal/deployment/AggregatedDataSourceBuildTimeConfigBuildItem.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package io.quarkus.agroal.deployment;\n+\n+import io.quarkus.agroal.runtime.DataSourceJdbcBuildTimeConfig;\n+import io.quarkus.builder.item.MultiBuildItem;\n+import io.quarkus.datasource.common.runtime.DataSourceUtil;\n+import io.quarkus.datasource.runtime.DataSourceBuildTimeConfig;\n+\n+final class AggregatedDataSourceBuildTimeConfigBuildItem extends MultiBuildItem {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5OTA0Nw=="}, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEzNzM0Ng==", "bodyText": "so aggregated as opposed ton JDBC and Reactive?", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385137346", "createdAt": "2020-02-27T13:51:05Z", "author": {"login": "emmanuelbernard"}, "path": "extensions/agroal/deployment/src/main/java/io/quarkus/agroal/deployment/AggregatedDataSourceBuildTimeConfigBuildItem.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package io.quarkus.agroal.deployment;\n+\n+import io.quarkus.agroal.runtime.DataSourceJdbcBuildTimeConfig;\n+import io.quarkus.builder.item.MultiBuildItem;\n+import io.quarkus.datasource.common.runtime.DataSourceUtil;\n+import io.quarkus.datasource.runtime.DataSourceBuildTimeConfig;\n+\n+final class AggregatedDataSourceBuildTimeConfigBuildItem extends MultiBuildItem {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5OTA0Nw=="}, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEzODcwMw==", "bodyText": "No. Aggregated as opposed to split into several smaller pieces you need to assemble. Not sure if I understand your concern?", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385138703", "createdAt": "2020-02-27T13:53:23Z", "author": {"login": "gsmet"}, "path": "extensions/agroal/deployment/src/main/java/io/quarkus/agroal/deployment/AggregatedDataSourceBuildTimeConfigBuildItem.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package io.quarkus.agroal.deployment;\n+\n+import io.quarkus.agroal.runtime.DataSourceJdbcBuildTimeConfig;\n+import io.quarkus.builder.item.MultiBuildItem;\n+import io.quarkus.datasource.common.runtime.DataSourceUtil;\n+import io.quarkus.datasource.runtime.DataSourceBuildTimeConfig;\n+\n+final class AggregatedDataSourceBuildTimeConfigBuildItem extends MultiBuildItem {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5OTA0Nw=="}, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3MjQyOQ==", "bodyText": "Maybe Combined would be a clearer term? Like in CombinedIndexBuildItem?", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385272429", "createdAt": "2020-02-27T17:51:47Z", "author": {"login": "gastaldi"}, "path": "extensions/agroal/deployment/src/main/java/io/quarkus/agroal/deployment/AggregatedDataSourceBuildTimeConfigBuildItem.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package io.quarkus.agroal.deployment;\n+\n+import io.quarkus.agroal.runtime.DataSourceJdbcBuildTimeConfig;\n+import io.quarkus.builder.item.MultiBuildItem;\n+import io.quarkus.datasource.common.runtime.DataSourceUtil;\n+import io.quarkus.datasource.runtime.DataSourceBuildTimeConfig;\n+\n+final class AggregatedDataSourceBuildTimeConfigBuildItem extends MultiBuildItem {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5OTA0Nw=="}, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwNzk1OA==", "bodyText": "Well, aggregating the configuration is exactly what is is so I prefer keeping the name.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385307958", "createdAt": "2020-02-27T18:58:42Z", "author": {"login": "gsmet"}, "path": "extensions/agroal/deployment/src/main/java/io/quarkus/agroal/deployment/AggregatedDataSourceBuildTimeConfigBuildItem.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package io.quarkus.agroal.deployment;\n+\n+import io.quarkus.agroal.runtime.DataSourceJdbcBuildTimeConfig;\n+import io.quarkus.builder.item.MultiBuildItem;\n+import io.quarkus.datasource.common.runtime.DataSourceUtil;\n+import io.quarkus.datasource.runtime.DataSourceBuildTimeConfig;\n+\n+final class AggregatedDataSourceBuildTimeConfigBuildItem extends MultiBuildItem {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5OTA0Nw=="}, "originalCommit": {"oid": "43855f0b0ad84acda4484e1f013c7798c42fcc0d"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTA1MDMyOnYy", "diffSide": "RIGHT", "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceJdbcBuildTimeConfig.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzowNzozN1rOFvRfQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzo1NDowMFrOFvTBow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMzkyMg==", "bodyText": "is that to be used as ....jdbc.shortname = h2 ? along side kind? I am not following.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385113922", "createdAt": "2020-02-27T13:07:37Z", "author": {"login": "emmanuelbernard"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceJdbcBuildTimeConfig.java", "diffHunk": "@@ -6,27 +6,39 @@\n import io.quarkus.runtime.annotations.ConfigItem;\n \n @ConfigGroup\n-public class DataSourceBuildTimeConfig {\n+public class DataSourceJdbcBuildTimeConfig {\n+\n+    /**\n+     * If we create a JDBC datasource for this datasource.\n+     */\n+    @ConfigItem(name = ConfigItem.PARENT, defaultValue = \"true\")\n+    public boolean enabled = true;\n \n     /**\n      * The datasource driver class name\n      */\n     @ConfigItem\n-    public Optional<String> driver;\n+    public Optional<String> driver = Optional.empty();\n \n     /**\n      * Whether we want to use regular JDBC transactions, XA, or disable all transactional capabilities.\n      * <p>\n      * When enabling XA you will need a driver implementing {@link javax.sql.XADataSource}.\n      */\n     @ConfigItem(defaultValue = \"enabled\")\n-    public TransactionIntegration transactions;\n+    public TransactionIntegration transactions = TransactionIntegration.ENABLED;\n \n     /**\n      * Enable datasource metrics collection. If unspecified, collecting metrics will be enabled by default if the\n      * smallrye-metrics extension is active.\n      */\n     @ConfigItem\n-    public Optional<Boolean> enableMetrics;\n+    public Optional<Boolean> enableMetrics = Optional.empty();\n+\n+    /**\n+     * The datasource driver short name\n+     */\n+    @ConfigItem\n+    public Optional<String> shortName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b558107e78d4bbeb925ed7f589c7e1006f48f060"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEyNzc5Mw==", "bodyText": "Ah, this shouldn't be there, it's a leftover. Let me fix that.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385127793", "createdAt": "2020-02-27T13:34:06Z", "author": {"login": "gsmet"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceJdbcBuildTimeConfig.java", "diffHunk": "@@ -6,27 +6,39 @@\n import io.quarkus.runtime.annotations.ConfigItem;\n \n @ConfigGroup\n-public class DataSourceBuildTimeConfig {\n+public class DataSourceJdbcBuildTimeConfig {\n+\n+    /**\n+     * If we create a JDBC datasource for this datasource.\n+     */\n+    @ConfigItem(name = ConfigItem.PARENT, defaultValue = \"true\")\n+    public boolean enabled = true;\n \n     /**\n      * The datasource driver class name\n      */\n     @ConfigItem\n-    public Optional<String> driver;\n+    public Optional<String> driver = Optional.empty();\n \n     /**\n      * Whether we want to use regular JDBC transactions, XA, or disable all transactional capabilities.\n      * <p>\n      * When enabling XA you will need a driver implementing {@link javax.sql.XADataSource}.\n      */\n     @ConfigItem(defaultValue = \"enabled\")\n-    public TransactionIntegration transactions;\n+    public TransactionIntegration transactions = TransactionIntegration.ENABLED;\n \n     /**\n      * Enable datasource metrics collection. If unspecified, collecting metrics will be enabled by default if the\n      * smallrye-metrics extension is active.\n      */\n     @ConfigItem\n-    public Optional<Boolean> enableMetrics;\n+    public Optional<Boolean> enableMetrics = Optional.empty();\n+\n+    /**\n+     * The datasource driver short name\n+     */\n+    @ConfigItem\n+    public Optional<String> shortName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMzkyMg=="}, "originalCommit": {"oid": "b558107e78d4bbeb925ed7f589c7e1006f48f060"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEzOTEwNw==", "bodyText": "Fixed.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385139107", "createdAt": "2020-02-27T13:54:00Z", "author": {"login": "gsmet"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceJdbcBuildTimeConfig.java", "diffHunk": "@@ -6,27 +6,39 @@\n import io.quarkus.runtime.annotations.ConfigItem;\n \n @ConfigGroup\n-public class DataSourceBuildTimeConfig {\n+public class DataSourceJdbcBuildTimeConfig {\n+\n+    /**\n+     * If we create a JDBC datasource for this datasource.\n+     */\n+    @ConfigItem(name = ConfigItem.PARENT, defaultValue = \"true\")\n+    public boolean enabled = true;\n \n     /**\n      * The datasource driver class name\n      */\n     @ConfigItem\n-    public Optional<String> driver;\n+    public Optional<String> driver = Optional.empty();\n \n     /**\n      * Whether we want to use regular JDBC transactions, XA, or disable all transactional capabilities.\n      * <p>\n      * When enabling XA you will need a driver implementing {@link javax.sql.XADataSource}.\n      */\n     @ConfigItem(defaultValue = \"enabled\")\n-    public TransactionIntegration transactions;\n+    public TransactionIntegration transactions = TransactionIntegration.ENABLED;\n \n     /**\n      * Enable datasource metrics collection. If unspecified, collecting metrics will be enabled by default if the\n      * smallrye-metrics extension is active.\n      */\n     @ConfigItem\n-    public Optional<Boolean> enableMetrics;\n+    public Optional<Boolean> enableMetrics = Optional.empty();\n+\n+    /**\n+     * The datasource driver short name\n+     */\n+    @ConfigItem\n+    public Optional<String> shortName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMzkyMg=="}, "originalCommit": {"oid": "b558107e78d4bbeb925ed7f589c7e1006f48f060"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTA1MzU4OnYy", "diffSide": "RIGHT", "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceJdbcRuntimeConfig.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzowODozOVrOFvRhRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNjozMzo1MVrOFvYTHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNDQzOA==", "bodyText": "@Sanne you want this to be default = true?", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385114438", "createdAt": "2020-02-27T13:08:39Z", "author": {"login": "emmanuelbernard"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceJdbcRuntimeConfig.java", "diffHunk": "@@ -111,17 +82,17 @@\n      * no leaks are happening.\n      */\n     @ConfigItem(defaultValue = \"true\")\n-    public boolean detectStatementLeaks;\n+    public boolean detectStatementLeaks = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b558107e78d4bbeb925ed7f589c7e1006f48f060"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEyOTAwMw==", "bodyText": "It was already defaulted to true (see the ConfigItem) so if we need to discuss this, let's not block this PR.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385129003", "createdAt": "2020-02-27T13:36:19Z", "author": {"login": "gsmet"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceJdbcRuntimeConfig.java", "diffHunk": "@@ -111,17 +82,17 @@\n      * no leaks are happening.\n      */\n     @ConfigItem(defaultValue = \"true\")\n-    public boolean detectStatementLeaks;\n+    public boolean detectStatementLeaks = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNDQzOA=="}, "originalCommit": {"oid": "b558107e78d4bbeb925ed7f589c7e1006f48f060"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEzNzUzMw==", "bodyText": "Sure,", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385137533", "createdAt": "2020-02-27T13:51:24Z", "author": {"login": "emmanuelbernard"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceJdbcRuntimeConfig.java", "diffHunk": "@@ -111,17 +82,17 @@\n      * no leaks are happening.\n      */\n     @ConfigItem(defaultValue = \"true\")\n-    public boolean detectStatementLeaks;\n+    public boolean detectStatementLeaks = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNDQzOA=="}, "originalCommit": {"oid": "b558107e78d4bbeb925ed7f589c7e1006f48f060"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIyNTUwMA==", "bodyText": "yes we want that to be true (as it currently is).  We'll have ORM bypass it, but that's for another day ;)", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385225500", "createdAt": "2020-02-27T16:33:51Z", "author": {"login": "Sanne"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceJdbcRuntimeConfig.java", "diffHunk": "@@ -111,17 +82,17 @@\n      * no leaks are happening.\n      */\n     @ConfigItem(defaultValue = \"true\")\n-    public boolean detectStatementLeaks;\n+    public boolean detectStatementLeaks = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNDQzOA=="}, "originalCommit": {"oid": "b558107e78d4bbeb925ed7f589c7e1006f48f060"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTA2ODkzOnYy", "diffSide": "RIGHT", "path": "extensions/agroal/deployment/src/test/resources/application-default-datasource.properties", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzoxMzoyNFrOFvRqsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzozMzo0MFrOFvSUfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNjg0OQ==", "bodyText": "I prefer system or db-system (or maybe product) than kind see https://groups.google.com/forum/#!searchin/quarkus-dev/kind%7Csort:date/quarkus-dev/zos4bOUVNHY/tYcS7IwCBAAJ\nCC @Sanne", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385116849", "createdAt": "2020-02-27T13:13:24Z", "author": {"login": "emmanuelbernard"}, "path": "extensions/agroal/deployment/src/test/resources/application-default-datasource.properties", "diffHunk": "@@ -1,16 +1,17 @@\n #tag::basic[]\n-quarkus.datasource.url=jdbc:h2:tcp://localhost/mem:default\n-quarkus.datasource.driver=org.h2.Driver\n+quarkus.datasource.kind=h2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b558107e78d4bbeb925ed7f589c7e1006f48f060"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEyNzU1MQ==", "bodyText": "Can't say I like it. @Sanne WDYT?", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385127551", "createdAt": "2020-02-27T13:33:40Z", "author": {"login": "gsmet"}, "path": "extensions/agroal/deployment/src/test/resources/application-default-datasource.properties", "diffHunk": "@@ -1,16 +1,17 @@\n #tag::basic[]\n-quarkus.datasource.url=jdbc:h2:tcp://localhost/mem:default\n-quarkus.datasource.driver=org.h2.Driver\n+quarkus.datasource.kind=h2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNjg0OQ=="}, "originalCommit": {"oid": "b558107e78d4bbeb925ed7f589c7e1006f48f060"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTA3MTY2OnYy", "diffSide": "RIGHT", "path": "extensions/datasource/common/src/main/java/io/quarkus/datasource/common/runtime/DatabaseKind.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzoxNDowOFrOFvRsSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzoxNDowOFrOFvRsSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNzI1OA==", "bodyText": "See comment about \"system\"", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385117258", "createdAt": "2020-02-27T13:14:08Z", "author": {"login": "emmanuelbernard"}, "path": "extensions/datasource/common/src/main/java/io/quarkus/datasource/common/runtime/DatabaseKind.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package io.quarkus.datasource.common.runtime;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * We don't use an enum as we also need to support non built-in database kinds.\n+ */\n+public final class DatabaseKind {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b558107e78d4bbeb925ed7f589c7e1006f48f060"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTA3NDcyOnYy", "diffSide": "RIGHT", "path": "extensions/datasource/common/src/main/java/io/quarkus/datasource/common/runtime/DatabaseKind.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzoxNTowOFrOFvRuOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzo1NTowMFrOFvTD1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNzc1Mw==", "bodyText": "Mildly curious, this class has to be runtime? vs deployment time?", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385117753", "createdAt": "2020-02-27T13:15:08Z", "author": {"login": "emmanuelbernard"}, "path": "extensions/datasource/common/src/main/java/io/quarkus/datasource/common/runtime/DatabaseKind.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package io.quarkus.datasource.common.runtime;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b558107e78d4bbeb925ed7f589c7e1006f48f060"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEzOTY2OA==", "bodyText": "I want to be able to reference it everywhere. Typically it's used in the qualifier of the JDBC driver specific CDI beans.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385139668", "createdAt": "2020-02-27T13:55:00Z", "author": {"login": "gsmet"}, "path": "extensions/datasource/common/src/main/java/io/quarkus/datasource/common/runtime/DatabaseKind.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package io.quarkus.datasource.common.runtime;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNzc1Mw=="}, "originalCommit": {"oid": "b558107e78d4bbeb925ed7f589c7e1006f48f060"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTA4OTAyOnYy", "diffSide": "RIGHT", "path": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dialect/QuarkusPostgreSQL10Dialect.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzoxOToyOFrOFvR2vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzo1NDoyMFrOFvTCTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExOTkzMw==", "bodyText": "What's this one about? A move of class or a net new feature?", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385119933", "createdAt": "2020-02-27T13:19:28Z", "author": {"login": "emmanuelbernard"}, "path": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dialect/QuarkusPostgreSQL10Dialect.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package io.quarkus.hibernate.orm.runtime.dialect;\n+\n+import java.sql.DatabaseMetaData;\n+import java.sql.SQLException;\n+\n+import org.hibernate.dialect.PostgreSQL95Dialect;\n+import org.hibernate.engine.jdbc.env.spi.IdentifierCaseStrategy;\n+import org.hibernate.engine.jdbc.env.spi.IdentifierHelper;\n+import org.hibernate.engine.jdbc.env.spi.IdentifierHelperBuilder;\n+\n+/**\n+ * Subclass of PostgreSQL10Dialect fixing schema updates by considering unquoted identifiers as lower case.\n+ * This is PostgreSQL's behavior.\n+ * See https://github.com/quarkusio/quarkus/issues/1886\n+ */\n+public class QuarkusPostgreSQL10Dialect extends PostgreSQL95Dialect {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b558107e78d4bbeb925ed7f589c7e1006f48f060"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEyOTU5NA==", "bodyText": "Ah silly me, it's supposed to extend PostgreSQL10Dialect. Let me fix that.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385129594", "createdAt": "2020-02-27T13:37:23Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dialect/QuarkusPostgreSQL10Dialect.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package io.quarkus.hibernate.orm.runtime.dialect;\n+\n+import java.sql.DatabaseMetaData;\n+import java.sql.SQLException;\n+\n+import org.hibernate.dialect.PostgreSQL95Dialect;\n+import org.hibernate.engine.jdbc.env.spi.IdentifierCaseStrategy;\n+import org.hibernate.engine.jdbc.env.spi.IdentifierHelper;\n+import org.hibernate.engine.jdbc.env.spi.IdentifierHelperBuilder;\n+\n+/**\n+ * Subclass of PostgreSQL10Dialect fixing schema updates by considering unquoted identifiers as lower case.\n+ * This is PostgreSQL's behavior.\n+ * See https://github.com/quarkusio/quarkus/issues/1886\n+ */\n+public class QuarkusPostgreSQL10Dialect extends PostgreSQL95Dialect {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExOTkzMw=="}, "originalCommit": {"oid": "b558107e78d4bbeb925ed7f589c7e1006f48f060"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEzOTI3OA==", "bodyText": "Fixed.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385139278", "createdAt": "2020-02-27T13:54:20Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/dialect/QuarkusPostgreSQL10Dialect.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package io.quarkus.hibernate.orm.runtime.dialect;\n+\n+import java.sql.DatabaseMetaData;\n+import java.sql.SQLException;\n+\n+import org.hibernate.dialect.PostgreSQL95Dialect;\n+import org.hibernate.engine.jdbc.env.spi.IdentifierCaseStrategy;\n+import org.hibernate.engine.jdbc.env.spi.IdentifierHelper;\n+import org.hibernate.engine.jdbc.env.spi.IdentifierHelperBuilder;\n+\n+/**\n+ * Subclass of PostgreSQL10Dialect fixing schema updates by considering unquoted identifiers as lower case.\n+ * This is PostgreSQL's behavior.\n+ * See https://github.com/quarkusio/quarkus/issues/1886\n+ */\n+public class QuarkusPostgreSQL10Dialect extends PostgreSQL95Dialect {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExOTkzMw=="}, "originalCommit": {"oid": "b558107e78d4bbeb925ed7f589c7e1006f48f060"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTA5OTgwOnYy", "diffSide": "RIGHT", "path": "extensions/jdbc/jdbc-mariadb/runtime/src/main/java/io/quarkus/jdbc/mariadb/runtime/MariaDBAgroalConnectionConfigurer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzoyMjo0MlrOFvR9Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzozODowMFrOFvSd5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEyMTU5MA==", "bodyText": "runtime? why not deployment time?", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385121590", "createdAt": "2020-02-27T13:22:42Z", "author": {"login": "emmanuelbernard"}, "path": "extensions/jdbc/jdbc-mariadb/runtime/src/main/java/io/quarkus/jdbc/mariadb/runtime/MariaDBAgroalConnectionConfigurer.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package io.quarkus.jdbc.mariadb.runtime;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b558107e78d4bbeb925ed7f589c7e1006f48f060"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEyOTk1Ng==", "bodyText": "Because it's used at runtime to configure the Agroal pool.\nIt's a CDI bean.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385129956", "createdAt": "2020-02-27T13:38:00Z", "author": {"login": "gsmet"}, "path": "extensions/jdbc/jdbc-mariadb/runtime/src/main/java/io/quarkus/jdbc/mariadb/runtime/MariaDBAgroalConnectionConfigurer.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package io.quarkus.jdbc.mariadb.runtime;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEyMTU5MA=="}, "originalCommit": {"oid": "b558107e78d4bbeb925ed7f589c7e1006f48f060"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjIzMzI1OnYy", "diffSide": "RIGHT", "path": "extensions/flyway/deployment/src/test/resources/baseline-on-migrate.properties", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODo0NDowN1rOFvc2Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMjo0NjoyN1rOFvz0lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwMDAyMg==", "bodyText": "Can we make db-kind optional for cases where there is only one DB kind enabled in the pom.xml?\nThis will be the case for probably >80% of apps, and it would reduce the number of required config options from 4 to 3.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385300022", "createdAt": "2020-02-27T18:44:07Z", "author": {"login": "aguibert"}, "path": "extensions/flyway/deployment/src/test/resources/baseline-on-migrate.properties", "diffHunk": "@@ -1,7 +1,7 @@\n-quarkus.datasource.url=jdbc:h2:tcp://localhost/mem:test-quarkus-baseline-on-migrate;DB_CLOSE_DELAY=-1;INIT=RUNSCRIPT FROM 'src/test/resources/h2-init-data.sql'\n-quarkus.datasource.driver=org.h2.Driver\n+quarkus.datasource.db-kind=h2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "520fdcf9a956dc5401b419bd38e11dad55b88ac9"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwMDUwMQ==", "bodyText": "Btw, my suggestion is not a hard requirement for this PR. The db-kind property could always be made optional later.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385300501", "createdAt": "2020-02-27T18:44:58Z", "author": {"login": "aguibert"}, "path": "extensions/flyway/deployment/src/test/resources/baseline-on-migrate.properties", "diffHunk": "@@ -1,7 +1,7 @@\n-quarkus.datasource.url=jdbc:h2:tcp://localhost/mem:test-quarkus-baseline-on-migrate;DB_CLOSE_DELAY=-1;INIT=RUNSCRIPT FROM 'src/test/resources/h2-init-data.sql'\n-quarkus.datasource.driver=org.h2.Driver\n+quarkus.datasource.db-kind=h2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwMDAyMg=="}, "originalCommit": {"oid": "520fdcf9a956dc5401b419bd38e11dad55b88ac9"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwNjQ4OA==", "bodyText": "So the thing is that it's the only mandatory build time property so basically the only thing saying you have a datasource that is available at build time.\nSo for now, no.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385306488", "createdAt": "2020-02-27T18:56:00Z", "author": {"login": "gsmet"}, "path": "extensions/flyway/deployment/src/test/resources/baseline-on-migrate.properties", "diffHunk": "@@ -1,7 +1,7 @@\n-quarkus.datasource.url=jdbc:h2:tcp://localhost/mem:test-quarkus-baseline-on-migrate;DB_CLOSE_DELAY=-1;INIT=RUNSCRIPT FROM 'src/test/resources/h2-init-data.sql'\n-quarkus.datasource.driver=org.h2.Driver\n+quarkus.datasource.db-kind=h2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwMDAyMg=="}, "originalCommit": {"oid": "520fdcf9a956dc5401b419bd38e11dad55b88ac9"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU5MTI1NQ==", "bodyText": "Well we have the fact that a driver extension is present (and only one) via possible BuildItem publications. It's equally build time. But that shoudl have its own GitHub issue.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385591255", "createdAt": "2020-02-28T09:31:32Z", "author": {"login": "emmanuelbernard"}, "path": "extensions/flyway/deployment/src/test/resources/baseline-on-migrate.properties", "diffHunk": "@@ -1,7 +1,7 @@\n-quarkus.datasource.url=jdbc:h2:tcp://localhost/mem:test-quarkus-baseline-on-migrate;DB_CLOSE_DELAY=-1;INIT=RUNSCRIPT FROM 'src/test/resources/h2-init-data.sql'\n-quarkus.datasource.driver=org.h2.Driver\n+quarkus.datasource.db-kind=h2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwMDAyMg=="}, "originalCommit": {"oid": "520fdcf9a956dc5401b419bd38e11dad55b88ac9"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1NTk1Mg==", "bodyText": "You know you have a driver extension but you don't know a datasource has been configured if all the datasource configuration is runtime as you shouldn't access the runtime config at build time.\nWe could try to assert some runtime configuration is here but that's very fragile. That's the main issue with doing this.\nIf we decide to do that, that would mean move more things at runtime as we wouldn't be able to know if a datasource is configured at build time.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385655952", "createdAt": "2020-02-28T11:54:35Z", "author": {"login": "gsmet"}, "path": "extensions/flyway/deployment/src/test/resources/baseline-on-migrate.properties", "diffHunk": "@@ -1,7 +1,7 @@\n-quarkus.datasource.url=jdbc:h2:tcp://localhost/mem:test-quarkus-baseline-on-migrate;DB_CLOSE_DELAY=-1;INIT=RUNSCRIPT FROM 'src/test/resources/h2-init-data.sql'\n-quarkus.datasource.driver=org.h2.Driver\n+quarkus.datasource.db-kind=h2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwMDAyMg=="}, "originalCommit": {"oid": "520fdcf9a956dc5401b419bd38e11dad55b88ac9"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY3NjQzNg==", "bodyText": "Ok right, that's the core of the problem we can discuss on the ML but after this PR.\nIs it that bad to read runtime properties at build time and assume that some of its content is frozen at build time. In the JDBC url case, that would mean jdbc:db-kind", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385676436", "createdAt": "2020-02-28T12:46:27Z", "author": {"login": "emmanuelbernard"}, "path": "extensions/flyway/deployment/src/test/resources/baseline-on-migrate.properties", "diffHunk": "@@ -1,7 +1,7 @@\n-quarkus.datasource.url=jdbc:h2:tcp://localhost/mem:test-quarkus-baseline-on-migrate;DB_CLOSE_DELAY=-1;INIT=RUNSCRIPT FROM 'src/test/resources/h2-init-data.sql'\n-quarkus.datasource.driver=org.h2.Driver\n+quarkus.datasource.db-kind=h2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwMDAyMg=="}, "originalCommit": {"oid": "520fdcf9a956dc5401b419bd38e11dad55b88ac9"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjMzOTc5OnYy", "diffSide": "RIGHT", "path": "extensions/agroal/deployment/src/test/java/io/quarkus/agroal/test/UnknownDriverConfigTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxOToxNjozOVrOFvd6YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjo1Njo0N1rOFvkHyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMxNzQ3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    try (Connection connection = dataSource.getConnection()) {\n          \n          \n            \n                    }\n          \n          \n            \n                    assertThatCode(()->dataSource.getConnection().close()).doesNotThrowAnyException());", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385317473", "createdAt": "2020-02-27T19:16:39Z", "author": {"login": "gastaldi"}, "path": "extensions/agroal/deployment/src/test/java/io/quarkus/agroal/test/UnknownDriverConfigTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package io.quarkus.agroal.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.time.Duration;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.agroal.api.AgroalDataSource;\n+import io.agroal.api.configuration.AgroalConnectionFactoryConfiguration;\n+import io.agroal.api.configuration.AgroalConnectionPoolConfiguration;\n+import io.agroal.narayana.NarayanaTransactionIntegration;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class UnknownDriverConfigTest {\n+\n+    @Inject\n+    AgroalDataSource defaultDataSource;\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .withConfigurationResource(\"application-default-datasource-unknown-driver.properties\");\n+\n+    @Test\n+    public void testDefaultDataSourceInjection() throws SQLException {\n+        testDataSource(defaultDataSource, \"username-default\", 3, 13, 7, Duration.ofSeconds(53), Duration.ofSeconds(54),\n+                Duration.ofSeconds(55), Duration.ofSeconds(56), Duration.ofSeconds(57),\n+                \"create schema if not exists schema_default\");\n+    }\n+\n+    private static void testDataSource(AgroalDataSource dataSource, String username, int minSize, int maxSize,\n+            int initialSize, Duration backgroundValidationInterval, Duration acquisitionTimeout, Duration leakDetectionInterval,\n+            Duration idleRemovalInterval, Duration maxLifetime, String newConnectionSql) throws SQLException {\n+        AgroalConnectionPoolConfiguration configuration = dataSource.getConfiguration().connectionPoolConfiguration();\n+        AgroalConnectionFactoryConfiguration agroalConnectionFactoryConfiguration = configuration\n+                .connectionFactoryConfiguration();\n+\n+        assertEquals(\"jdbc:h2:tcp://localhost/mem:default\", agroalConnectionFactoryConfiguration.jdbcUrl());\n+        assertEquals(username, agroalConnectionFactoryConfiguration.principal().getName());\n+        assertEquals(minSize, configuration.minSize());\n+        assertEquals(maxSize, configuration.maxSize());\n+        assertEquals(initialSize, configuration.initialSize());\n+        assertEquals(backgroundValidationInterval, configuration.validationTimeout());\n+        assertEquals(acquisitionTimeout, configuration.acquisitionTimeout());\n+        assertEquals(leakDetectionInterval, configuration.leakTimeout());\n+        assertEquals(idleRemovalInterval, configuration.reapTimeout());\n+        assertEquals(maxLifetime, configuration.maxLifetime());\n+        assertTrue(configuration.transactionIntegration() instanceof NarayanaTransactionIntegration);\n+        assertEquals(AgroalConnectionFactoryConfiguration.TransactionIsolation.SERIALIZABLE,\n+                agroalConnectionFactoryConfiguration.jdbcTransactionIsolation());\n+        assertTrue(agroalConnectionFactoryConfiguration.trackJdbcResources());\n+        assertTrue(dataSource.getConfiguration().metricsEnabled());\n+        assertEquals(newConnectionSql, agroalConnectionFactoryConfiguration.initialSql());\n+        try (Connection connection = dataSource.getConnection()) {\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35a63429ad13fe2a50ee7fedad0ab7444664178d"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQxOTIwOA==", "bodyText": "It's a copy of an existing test. I will leave it at that.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385419208", "createdAt": "2020-02-27T22:56:47Z", "author": {"login": "gsmet"}, "path": "extensions/agroal/deployment/src/test/java/io/quarkus/agroal/test/UnknownDriverConfigTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package io.quarkus.agroal.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.time.Duration;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.agroal.api.AgroalDataSource;\n+import io.agroal.api.configuration.AgroalConnectionFactoryConfiguration;\n+import io.agroal.api.configuration.AgroalConnectionPoolConfiguration;\n+import io.agroal.narayana.NarayanaTransactionIntegration;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class UnknownDriverConfigTest {\n+\n+    @Inject\n+    AgroalDataSource defaultDataSource;\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .withConfigurationResource(\"application-default-datasource-unknown-driver.properties\");\n+\n+    @Test\n+    public void testDefaultDataSourceInjection() throws SQLException {\n+        testDataSource(defaultDataSource, \"username-default\", 3, 13, 7, Duration.ofSeconds(53), Duration.ofSeconds(54),\n+                Duration.ofSeconds(55), Duration.ofSeconds(56), Duration.ofSeconds(57),\n+                \"create schema if not exists schema_default\");\n+    }\n+\n+    private static void testDataSource(AgroalDataSource dataSource, String username, int minSize, int maxSize,\n+            int initialSize, Duration backgroundValidationInterval, Duration acquisitionTimeout, Duration leakDetectionInterval,\n+            Duration idleRemovalInterval, Duration maxLifetime, String newConnectionSql) throws SQLException {\n+        AgroalConnectionPoolConfiguration configuration = dataSource.getConfiguration().connectionPoolConfiguration();\n+        AgroalConnectionFactoryConfiguration agroalConnectionFactoryConfiguration = configuration\n+                .connectionFactoryConfiguration();\n+\n+        assertEquals(\"jdbc:h2:tcp://localhost/mem:default\", agroalConnectionFactoryConfiguration.jdbcUrl());\n+        assertEquals(username, agroalConnectionFactoryConfiguration.principal().getName());\n+        assertEquals(minSize, configuration.minSize());\n+        assertEquals(maxSize, configuration.maxSize());\n+        assertEquals(initialSize, configuration.initialSize());\n+        assertEquals(backgroundValidationInterval, configuration.validationTimeout());\n+        assertEquals(acquisitionTimeout, configuration.acquisitionTimeout());\n+        assertEquals(leakDetectionInterval, configuration.leakTimeout());\n+        assertEquals(idleRemovalInterval, configuration.reapTimeout());\n+        assertEquals(maxLifetime, configuration.maxLifetime());\n+        assertTrue(configuration.transactionIntegration() instanceof NarayanaTransactionIntegration);\n+        assertEquals(AgroalConnectionFactoryConfiguration.TransactionIsolation.SERIALIZABLE,\n+                agroalConnectionFactoryConfiguration.jdbcTransactionIsolation());\n+        assertTrue(agroalConnectionFactoryConfiguration.trackJdbcResources());\n+        assertTrue(dataSource.getConfiguration().metricsEnabled());\n+        assertEquals(newConnectionSql, agroalConnectionFactoryConfiguration.initialSql());\n+        try (Connection connection = dataSource.getConnection()) {\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMxNzQ3Mw=="}, "originalCommit": {"oid": "35a63429ad13fe2a50ee7fedad0ab7444664178d"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjM0NjEwOnYy", "diffSide": "RIGHT", "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceJdbcRuntimeConfig.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxOToxODozMVrOFvd-Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMjo1ODoyOVrOFv0Hvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMxODQ2Ng==", "bodyText": "Why is this necessary? I thought these fields would be set when injected?", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385318466", "createdAt": "2020-02-27T19:18:31Z", "author": {"login": "gastaldi"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceJdbcRuntimeConfig.java", "diffHunk": "@@ -8,100 +8,71 @@\n import io.quarkus.runtime.annotations.ConfigItem;\n \n @ConfigGroup\n-public class DataSourceRuntimeConfig {\n+public class DataSourceJdbcRuntimeConfig {\n \n     /**\n      * The datasource URL\n      */\n     @ConfigItem\n-    public Optional<String> url;\n-\n-    /**\n-     * The datasource username\n-     */\n-    @ConfigItem\n-    public Optional<String> username;\n-\n-    /**\n-     * The datasource password\n-     */\n-    @ConfigItem\n-    public Optional<String> password;\n-\n-    /**\n-     * The credentials provider name\n-     */\n-    @ConfigItem\n-    public Optional<String> credentialsProvider;\n-\n-    /**\n-     * The credentials provider type.\n-     * <p>\n-     * It is the {@code &#64;Named} value of the credentials provider bean. It is used to discriminate if multiple\n-     * CredentialsProvider beans are available.\n-     * <p>\n-     * For Vault it is: vault-credentials-provider. Not necessary if there is only one credentials provider available.\n-     */\n-    @ConfigItem\n-    public Optional<String> credentialsProviderType;\n+    public Optional<String> url = Optional.empty();\n \n     /**\n      * The initial size of the pool. Usually you will want to set the initial size to match at least the\n      * minimal size, but this is not enforced so to allow for architectures which prefer a lazy initialization\n      * of the connections on boot, while being able to sustain a minimal pool size after boot.\n      */\n     @ConfigItem\n-    public Optional<Integer> initialSize;\n+    public Optional<Integer> initialSize = Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35a63429ad13fe2a50ee7fedad0ab7444664178d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQxOTA1Nw==", "bodyText": "Already explained above.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385419057", "createdAt": "2020-02-27T22:56:24Z", "author": {"login": "gsmet"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceJdbcRuntimeConfig.java", "diffHunk": "@@ -8,100 +8,71 @@\n import io.quarkus.runtime.annotations.ConfigItem;\n \n @ConfigGroup\n-public class DataSourceRuntimeConfig {\n+public class DataSourceJdbcRuntimeConfig {\n \n     /**\n      * The datasource URL\n      */\n     @ConfigItem\n-    public Optional<String> url;\n-\n-    /**\n-     * The datasource username\n-     */\n-    @ConfigItem\n-    public Optional<String> username;\n-\n-    /**\n-     * The datasource password\n-     */\n-    @ConfigItem\n-    public Optional<String> password;\n-\n-    /**\n-     * The credentials provider name\n-     */\n-    @ConfigItem\n-    public Optional<String> credentialsProvider;\n-\n-    /**\n-     * The credentials provider type.\n-     * <p>\n-     * It is the {@code &#64;Named} value of the credentials provider bean. It is used to discriminate if multiple\n-     * CredentialsProvider beans are available.\n-     * <p>\n-     * For Vault it is: vault-credentials-provider. Not necessary if there is only one credentials provider available.\n-     */\n-    @ConfigItem\n-    public Optional<String> credentialsProviderType;\n+    public Optional<String> url = Optional.empty();\n \n     /**\n      * The initial size of the pool. Usually you will want to set the initial size to match at least the\n      * minimal size, but this is not enforced so to allow for architectures which prefer a lazy initialization\n      * of the connections on boot, while being able to sustain a minimal pool size after boot.\n      */\n     @ConfigItem\n-    public Optional<Integer> initialSize;\n+    public Optional<Integer> initialSize = Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMxODQ2Ng=="}, "originalCommit": {"oid": "35a63429ad13fe2a50ee7fedad0ab7444664178d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY4MTM0Mw==", "bodyText": "It should be an OptionalInt at any rate.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385681343", "createdAt": "2020-02-28T12:58:29Z", "author": {"login": "dmlloyd"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceJdbcRuntimeConfig.java", "diffHunk": "@@ -8,100 +8,71 @@\n import io.quarkus.runtime.annotations.ConfigItem;\n \n @ConfigGroup\n-public class DataSourceRuntimeConfig {\n+public class DataSourceJdbcRuntimeConfig {\n \n     /**\n      * The datasource URL\n      */\n     @ConfigItem\n-    public Optional<String> url;\n-\n-    /**\n-     * The datasource username\n-     */\n-    @ConfigItem\n-    public Optional<String> username;\n-\n-    /**\n-     * The datasource password\n-     */\n-    @ConfigItem\n-    public Optional<String> password;\n-\n-    /**\n-     * The credentials provider name\n-     */\n-    @ConfigItem\n-    public Optional<String> credentialsProvider;\n-\n-    /**\n-     * The credentials provider type.\n-     * <p>\n-     * It is the {@code &#64;Named} value of the credentials provider bean. It is used to discriminate if multiple\n-     * CredentialsProvider beans are available.\n-     * <p>\n-     * For Vault it is: vault-credentials-provider. Not necessary if there is only one credentials provider available.\n-     */\n-    @ConfigItem\n-    public Optional<String> credentialsProviderType;\n+    public Optional<String> url = Optional.empty();\n \n     /**\n      * The initial size of the pool. Usually you will want to set the initial size to match at least the\n      * minimal size, but this is not enforced so to allow for architectures which prefer a lazy initialization\n      * of the connections on boot, while being able to sustain a minimal pool size after boot.\n      */\n     @ConfigItem\n-    public Optional<Integer> initialSize;\n+    public Optional<Integer> initialSize = Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMxODQ2Ng=="}, "originalCommit": {"oid": "35a63429ad13fe2a50ee7fedad0ab7444664178d"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjM2NDc4OnYy", "diffSide": "RIGHT", "path": "extensions/agroal/spi/src/main/java/io/quarkus/agroal/deployment/JdbcDriverBuildItem.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxOToyNDowMlrOFveKAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMzozNDoxMVrOFvk3gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMyMTQ3NQ==", "bodyText": "I can't help but think that the last parameter can be sent as null by other extensions. In order to prevent that, I'd suggest it to be String too and in the constructor body just use an Optional.ofNullable", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385321475", "createdAt": "2020-02-27T19:24:02Z", "author": {"login": "gastaldi"}, "path": "extensions/agroal/spi/src/main/java/io/quarkus/agroal/deployment/JdbcDriverBuildItem.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package io.quarkus.agroal.deployment;\n+\n+import java.util.Optional;\n+\n+import io.quarkus.builder.item.MultiBuildItem;\n+\n+/**\n+ * Register a JDBC driver for the Agroal extension.\n+ * <p>\n+ * It allows to resolve automatically the driver from the kind, thus users don't have to set the driver anymore, except if they\n+ * want to use a specific one.\n+ */\n+public final class JdbcDriverBuildItem extends MultiBuildItem {\n+\n+    private final String kind;\n+\n+    private final String driverClass;\n+\n+    private final Optional<String> xaDriverClass;\n+\n+    public JdbcDriverBuildItem(String kind, String driverClass, Optional<String> xaDriverClass) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35a63429ad13fe2a50ee7fedad0ab7444664178d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQxODk4Mg==", "bodyText": "I know it's not a pattern people love but I want to be clear it's not mandatory.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385418982", "createdAt": "2020-02-27T22:56:14Z", "author": {"login": "gsmet"}, "path": "extensions/agroal/spi/src/main/java/io/quarkus/agroal/deployment/JdbcDriverBuildItem.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package io.quarkus.agroal.deployment;\n+\n+import java.util.Optional;\n+\n+import io.quarkus.builder.item.MultiBuildItem;\n+\n+/**\n+ * Register a JDBC driver for the Agroal extension.\n+ * <p>\n+ * It allows to resolve automatically the driver from the kind, thus users don't have to set the driver anymore, except if they\n+ * want to use a specific one.\n+ */\n+public final class JdbcDriverBuildItem extends MultiBuildItem {\n+\n+    private final String kind;\n+\n+    private final String driverClass;\n+\n+    private final Optional<String> xaDriverClass;\n+\n+    public JdbcDriverBuildItem(String kind, String driverClass, Optional<String> xaDriverClass) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMyMTQ3NQ=="}, "originalCommit": {"oid": "35a63429ad13fe2a50ee7fedad0ab7444664178d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzMTQyNw==", "bodyText": "In the end I decided to expose two different constructors.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385431427", "createdAt": "2020-02-27T23:34:11Z", "author": {"login": "gsmet"}, "path": "extensions/agroal/spi/src/main/java/io/quarkus/agroal/deployment/JdbcDriverBuildItem.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package io.quarkus.agroal.deployment;\n+\n+import java.util.Optional;\n+\n+import io.quarkus.builder.item.MultiBuildItem;\n+\n+/**\n+ * Register a JDBC driver for the Agroal extension.\n+ * <p>\n+ * It allows to resolve automatically the driver from the kind, thus users don't have to set the driver anymore, except if they\n+ * want to use a specific one.\n+ */\n+public final class JdbcDriverBuildItem extends MultiBuildItem {\n+\n+    private final String kind;\n+\n+    private final String driverClass;\n+\n+    private final Optional<String> xaDriverClass;\n+\n+    public JdbcDriverBuildItem(String kind, String driverClass, Optional<String> xaDriverClass) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMyMTQ3NQ=="}, "originalCommit": {"oid": "35a63429ad13fe2a50ee7fedad0ab7444664178d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjU3MzQ3OnYy", "diffSide": "RIGHT", "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/AgroalRecorder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMDozMTowOVrOFvgMtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNjoxNTowN1rOFvqeww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1NDkzNQ==", "bodyText": "This is now longer used anymore as far as I can tell", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385354935", "createdAt": "2020-02-27T20:31:09Z", "author": {"login": "geoand"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/AgroalRecorder.java", "diffHunk": "@@ -1,34 +1,27 @@\n package io.quarkus.agroal.runtime;\n \n import io.quarkus.arc.Arc;\n-import io.quarkus.arc.runtime.BeanContainer;\n-import io.quarkus.arc.runtime.BeanContainerListener;\n+import io.quarkus.datasource.runtime.DataSourcesBuildTimeConfig;\n+import io.quarkus.datasource.runtime.DataSourcesRuntimeConfig;\n+import io.quarkus.datasource.runtime.LegacyDataSourcesRuntimeConfig;\n import io.quarkus.runtime.annotations.Recorder;\n \n @Recorder\n public class AgroalRecorder {\n \n     public static final String DEFAULT_DATASOURCE_NAME = \"<default>\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35a63429ad13fe2a50ee7fedad0ab7444664178d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQyNjMyNQ==", "bodyText": "Right, removed.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385426325", "createdAt": "2020-02-27T23:17:37Z", "author": {"login": "gsmet"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/AgroalRecorder.java", "diffHunk": "@@ -1,34 +1,27 @@\n package io.quarkus.agroal.runtime;\n \n import io.quarkus.arc.Arc;\n-import io.quarkus.arc.runtime.BeanContainer;\n-import io.quarkus.arc.runtime.BeanContainerListener;\n+import io.quarkus.datasource.runtime.DataSourcesBuildTimeConfig;\n+import io.quarkus.datasource.runtime.DataSourcesRuntimeConfig;\n+import io.quarkus.datasource.runtime.LegacyDataSourcesRuntimeConfig;\n import io.quarkus.runtime.annotations.Recorder;\n \n @Recorder\n public class AgroalRecorder {\n \n     public static final String DEFAULT_DATASOURCE_NAME = \"<default>\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1NDkzNQ=="}, "originalCommit": {"oid": "35a63429ad13fe2a50ee7fedad0ab7444664178d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUyMzM5NQ==", "bodyText": "Thanks", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385523395", "createdAt": "2020-02-28T06:15:07Z", "author": {"login": "geoand"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/AgroalRecorder.java", "diffHunk": "@@ -1,34 +1,27 @@\n package io.quarkus.agroal.runtime;\n \n import io.quarkus.arc.Arc;\n-import io.quarkus.arc.runtime.BeanContainer;\n-import io.quarkus.arc.runtime.BeanContainerListener;\n+import io.quarkus.datasource.runtime.DataSourcesBuildTimeConfig;\n+import io.quarkus.datasource.runtime.DataSourcesRuntimeConfig;\n+import io.quarkus.datasource.runtime.LegacyDataSourcesRuntimeConfig;\n import io.quarkus.runtime.annotations.Recorder;\n \n @Recorder\n public class AgroalRecorder {\n \n     public static final String DEFAULT_DATASOURCE_NAME = \"<default>\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1NDkzNQ=="}, "originalCommit": {"oid": "35a63429ad13fe2a50ee7fedad0ab7444664178d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjYyOTY0OnYy", "diffSide": "RIGHT", "path": "extensions/elytron-security-jdbc/deployment/src/main/java/io/quarkus/elytron/security/jdbc/deployment/ElytronSecurityJdbcProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMDo1MTowNVrOFvgvqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMzozMzo1NVrOFvk3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM2Mzg4MQ==", "bodyText": "This also requires the Javadoc to be updated", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385363881", "createdAt": "2020-02-27T20:51:05Z", "author": {"login": "geoand"}, "path": "extensions/elytron-security-jdbc/deployment/src/main/java/io/quarkus/elytron/security/jdbc/deployment/ElytronSecurityJdbcProcessor.java", "diffHunk": "@@ -50,7 +50,7 @@ FeatureBuildItem feature() {\n     void configureJdbcRealmAuthConfig(JdbcRecorder recorder,\n             BuildProducer<SecurityRealmBuildItem> securityRealm,\n             BeanContainerBuildItem beanContainerBuildItem, //we need this to make sure ArC is initialized\n-            Optional<DataSourceInitializedBuildItem> dataSourceInitialized) throws Exception {\n+            List<JdbcDataSourceBuildItem> dataSourcesConfigured) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35a63429ad13fe2a50ee7fedad0ab7444664178d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzMTM0Nw==", "bodyText": "Done.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385431347", "createdAt": "2020-02-27T23:33:55Z", "author": {"login": "gsmet"}, "path": "extensions/elytron-security-jdbc/deployment/src/main/java/io/quarkus/elytron/security/jdbc/deployment/ElytronSecurityJdbcProcessor.java", "diffHunk": "@@ -50,7 +50,7 @@ FeatureBuildItem feature() {\n     void configureJdbcRealmAuthConfig(JdbcRecorder recorder,\n             BuildProducer<SecurityRealmBuildItem> securityRealm,\n             BeanContainerBuildItem beanContainerBuildItem, //we need this to make sure ArC is initialized\n-            Optional<DataSourceInitializedBuildItem> dataSourceInitialized) throws Exception {\n+            List<JdbcDataSourceBuildItem> dataSourcesConfigured) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM2Mzg4MQ=="}, "originalCommit": {"oid": "35a63429ad13fe2a50ee7fedad0ab7444664178d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODEyNjUwOnYy", "diffSide": "RIGHT", "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/LegacyDataSourceJdbcBuildTimeConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwOTozNToxN1rOFvuuxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMjowNDoxNVrOFvyzBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU5MzAyOQ==", "bodyText": "old reference to kind", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385593029", "createdAt": "2020-02-28T09:35:17Z", "author": {"login": "emmanuelbernard"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/LegacyDataSourceJdbcBuildTimeConfig.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package io.quarkus.agroal.runtime;\n+\n+import java.util.Optional;\n+\n+import io.quarkus.runtime.annotations.ConfigGroup;\n+import io.quarkus.runtime.annotations.ConfigItem;\n+\n+/**\n+ * This configuration class is here for compatibility reason and is planned for removal.\n+ */\n+@Deprecated\n+@ConfigGroup\n+public class LegacyDataSourceJdbcBuildTimeConfig {\n+\n+    /**\n+     * @deprecated use quarkus.datasource.kind (or quarkus.datasource.jdbc.driver if you really need a specific JDBC driver).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b51901aa52274a9906cb31647aaea3c47771182a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1OTY1NA==", "bodyText": "Fixed.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385659654", "createdAt": "2020-02-28T12:04:15Z", "author": {"login": "gsmet"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/LegacyDataSourceJdbcBuildTimeConfig.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package io.quarkus.agroal.runtime;\n+\n+import java.util.Optional;\n+\n+import io.quarkus.runtime.annotations.ConfigGroup;\n+import io.quarkus.runtime.annotations.ConfigItem;\n+\n+/**\n+ * This configuration class is here for compatibility reason and is planned for removal.\n+ */\n+@Deprecated\n+@ConfigGroup\n+public class LegacyDataSourceJdbcBuildTimeConfig {\n+\n+    /**\n+     * @deprecated use quarkus.datasource.kind (or quarkus.datasource.jdbc.driver if you really need a specific JDBC driver).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU5MzAyOQ=="}, "originalCommit": {"oid": "b51901aa52274a9906cb31647aaea3c47771182a"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODEyNzg0OnYy", "diffSide": "RIGHT", "path": "extensions/agroal/spi/src/main/java/io/quarkus/agroal/deployment/JdbcDataSourceBuildItem.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwOTozNTo0MlrOFvuvlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMjowNDo0MVrOFvyzmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU5MzIzNw==", "bodyText": "not mandatory but renaming dbKind will help a future code reader", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385593237", "createdAt": "2020-02-28T09:35:42Z", "author": {"login": "emmanuelbernard"}, "path": "extensions/agroal/spi/src/main/java/io/quarkus/agroal/deployment/JdbcDataSourceBuildItem.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.quarkus.agroal.deployment;\n+\n+import io.quarkus.builder.item.MultiBuildItem;\n+\n+/**\n+ * A build item for JDBC datasources.\n+ * <p>\n+ * If you inject this build item when recording runtime init template calls, you are guaranteed the datasources configuration\n+ * has been injected and datasources can be created.\n+ */\n+public final class JdbcDataSourceBuildItem extends MultiBuildItem {\n+\n+    private final String name;\n+\n+    private final String kind;\n+\n+    private final boolean isDefault;\n+\n+    public JdbcDataSourceBuildItem(String name, String kind, boolean isDefault) {\n+        this.name = name;\n+        this.kind = kind;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b51901aa52274a9906cb31647aaea3c47771182a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1OTgwMg==", "bodyText": "Done.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385659802", "createdAt": "2020-02-28T12:04:41Z", "author": {"login": "gsmet"}, "path": "extensions/agroal/spi/src/main/java/io/quarkus/agroal/deployment/JdbcDataSourceBuildItem.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.quarkus.agroal.deployment;\n+\n+import io.quarkus.builder.item.MultiBuildItem;\n+\n+/**\n+ * A build item for JDBC datasources.\n+ * <p>\n+ * If you inject this build item when recording runtime init template calls, you are guaranteed the datasources configuration\n+ * has been injected and datasources can be created.\n+ */\n+public final class JdbcDataSourceBuildItem extends MultiBuildItem {\n+\n+    private final String name;\n+\n+    private final String kind;\n+\n+    private final boolean isDefault;\n+\n+    public JdbcDataSourceBuildItem(String name, String kind, boolean isDefault) {\n+        this.name = name;\n+        this.kind = kind;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU5MzIzNw=="}, "originalCommit": {"oid": "b51901aa52274a9906cb31647aaea3c47771182a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODEyOTUxOnYy", "diffSide": "RIGHT", "path": "extensions/agroal/spi/src/main/java/io/quarkus/agroal/deployment/JdbcDriverBuildItem.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwOTozNjoxMlrOFvuwnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMjowNjo0M1rOFvy2gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU5MzUwMA==", "bodyText": "not mandatory but a future code reader will be helped by it being name dbKind", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385593500", "createdAt": "2020-02-28T09:36:12Z", "author": {"login": "emmanuelbernard"}, "path": "extensions/agroal/spi/src/main/java/io/quarkus/agroal/deployment/JdbcDriverBuildItem.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.quarkus.agroal.deployment;\n+\n+import java.util.Optional;\n+\n+import io.quarkus.builder.item.MultiBuildItem;\n+\n+/**\n+ * Register a JDBC driver for the Agroal extension.\n+ * <p>\n+ * It allows to resolve automatically the driver from the kind, thus users don't have to set the driver anymore, except if they\n+ * want to use a specific one.\n+ */\n+public final class JdbcDriverBuildItem extends MultiBuildItem {\n+\n+    private final String kind;\n+\n+    private final String driverClass;\n+\n+    private final Optional<String> xaDriverClass;\n+\n+    public JdbcDriverBuildItem(String kind, String driverClass, String xaDriverClass) {\n+        this.kind = kind;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b51901aa52274a9906cb31647aaea3c47771182a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY2MDU0NQ==", "bodyText": "Done.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385660545", "createdAt": "2020-02-28T12:06:43Z", "author": {"login": "gsmet"}, "path": "extensions/agroal/spi/src/main/java/io/quarkus/agroal/deployment/JdbcDriverBuildItem.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.quarkus.agroal.deployment;\n+\n+import java.util.Optional;\n+\n+import io.quarkus.builder.item.MultiBuildItem;\n+\n+/**\n+ * Register a JDBC driver for the Agroal extension.\n+ * <p>\n+ * It allows to resolve automatically the driver from the kind, thus users don't have to set the driver anymore, except if they\n+ * want to use a specific one.\n+ */\n+public final class JdbcDriverBuildItem extends MultiBuildItem {\n+\n+    private final String kind;\n+\n+    private final String driverClass;\n+\n+    private final Optional<String> xaDriverClass;\n+\n+    public JdbcDriverBuildItem(String kind, String driverClass, String xaDriverClass) {\n+        this.kind = kind;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU5MzUwMA=="}, "originalCommit": {"oid": "b51901aa52274a9906cb31647aaea3c47771182a"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODEzMTQzOnYy", "diffSide": "RIGHT", "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwOTozNjo0OVrOFvuxzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMjowODoyNlrOFvy47A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU5MzgwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            ? \"Hibernate extension could not guess the dialect from the kind '\" + resolvedKind\n          \n          \n            \n                            ? \"Hibernate extension could not guess the dialect from the database kind '\" + resolvedKind", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385593806", "createdAt": "2020-02-28T09:36:49Z", "author": {"login": "emmanuelbernard"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -710,32 +716,34 @@ private void handleHibernateORMWithNoPersistenceXml(\n         }\n     }\n \n-    private Optional<String> guessDialect(Optional<String> driver) {\n+    private Optional<String> guessDialect(Optional<String> kind) {\n         // For now select the latest dialect from the driver\n         // later, we can keep doing that but also avoid DCE\n         // of all the dialects we want in so that people can override them\n-        String resolvedDriver = driver.orElse(\"NODRIVER\");\n-        if (resolvedDriver.contains(\"postgresql\")) {\n-            return Optional.of(QuarkusPostgreSQL95Dialect.class.getName());\n+        String resolvedKind = kind.orElse(\"NO_KIND\");\n+        if (DatabaseKind.isPostgreSQL(resolvedKind)) {\n+            return Optional.of(QuarkusPostgreSQL10Dialect.class.getName());\n         }\n-        if (resolvedDriver.contains(\"org.h2.Driver\")) {\n+        if (DatabaseKind.isH2(resolvedKind)) {\n             return Optional.of(QuarkusH2Dialect.class.getName());\n         }\n-        if (resolvedDriver.contains(\"org.mariadb.jdbc.Driver\")) {\n+        if (DatabaseKind.isMariaDB(resolvedKind)) {\n             return Optional.of(MariaDB103Dialect.class.getName());\n         }\n-\n-        if (resolvedDriver.contains(\"com.mysql.cj.jdbc.Driver\")) {\n+        if (DatabaseKind.isMySQL(resolvedKind)) {\n             return Optional.of(MySQL8Dialect.class.getName());\n         }\n-        if (resolvedDriver.contains(\"org.apache.derby.jdbc.ClientDriver\")) {\n+        if (DatabaseKind.isDerby(resolvedKind)) {\n             return Optional.of((DerbyTenSevenDialect.class.getName()));\n         }\n+        if (DatabaseKind.isMsSQL(resolvedKind)) {\n+            return Optional.of((SQLServer2012Dialect.class.getName()));\n+        }\n \n-        String error = driver.isPresent()\n-                ? \"Hibernate extension could not guess the dialect from the driver '\" + resolvedDriver\n+        String error = kind.isPresent()\n+                ? \"Hibernate extension could not guess the dialect from the kind '\" + resolvedKind", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b51901aa52274a9906cb31647aaea3c47771182a"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY2MTE2NA==", "bodyText": "Done and fixed a few other things in this message too.", "url": "https://github.com/quarkusio/quarkus/pull/7453#discussion_r385661164", "createdAt": "2020-02-28T12:08:26Z", "author": {"login": "gsmet"}, "path": "extensions/hibernate-orm/deployment/src/main/java/io/quarkus/hibernate/orm/deployment/HibernateOrmProcessor.java", "diffHunk": "@@ -710,32 +716,34 @@ private void handleHibernateORMWithNoPersistenceXml(\n         }\n     }\n \n-    private Optional<String> guessDialect(Optional<String> driver) {\n+    private Optional<String> guessDialect(Optional<String> kind) {\n         // For now select the latest dialect from the driver\n         // later, we can keep doing that but also avoid DCE\n         // of all the dialects we want in so that people can override them\n-        String resolvedDriver = driver.orElse(\"NODRIVER\");\n-        if (resolvedDriver.contains(\"postgresql\")) {\n-            return Optional.of(QuarkusPostgreSQL95Dialect.class.getName());\n+        String resolvedKind = kind.orElse(\"NO_KIND\");\n+        if (DatabaseKind.isPostgreSQL(resolvedKind)) {\n+            return Optional.of(QuarkusPostgreSQL10Dialect.class.getName());\n         }\n-        if (resolvedDriver.contains(\"org.h2.Driver\")) {\n+        if (DatabaseKind.isH2(resolvedKind)) {\n             return Optional.of(QuarkusH2Dialect.class.getName());\n         }\n-        if (resolvedDriver.contains(\"org.mariadb.jdbc.Driver\")) {\n+        if (DatabaseKind.isMariaDB(resolvedKind)) {\n             return Optional.of(MariaDB103Dialect.class.getName());\n         }\n-\n-        if (resolvedDriver.contains(\"com.mysql.cj.jdbc.Driver\")) {\n+        if (DatabaseKind.isMySQL(resolvedKind)) {\n             return Optional.of(MySQL8Dialect.class.getName());\n         }\n-        if (resolvedDriver.contains(\"org.apache.derby.jdbc.ClientDriver\")) {\n+        if (DatabaseKind.isDerby(resolvedKind)) {\n             return Optional.of((DerbyTenSevenDialect.class.getName()));\n         }\n+        if (DatabaseKind.isMsSQL(resolvedKind)) {\n+            return Optional.of((SQLServer2012Dialect.class.getName()));\n+        }\n \n-        String error = driver.isPresent()\n-                ? \"Hibernate extension could not guess the dialect from the driver '\" + resolvedDriver\n+        String error = kind.isPresent()\n+                ? \"Hibernate extension could not guess the dialect from the kind '\" + resolvedKind", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU5MzgwNg=="}, "originalCommit": {"oid": "b51901aa52274a9906cb31647aaea3c47771182a"}, "originalPosition": 131}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 9, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}