{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyMjkyNDYy", "number": 13964, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNTo0Mzo1OFrOFHPUng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNTo1MTozNVrOFHPg9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTM1MzkwOnYy", "diffSide": "RIGHT", "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/websocket/VertxWebSocketParamExtractor.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNTo0Mzo1OFrOIIoPUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQwODoyNDoyMFrOIRLVzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkxODgwMw==", "bodyText": "So how about a @HandlerFor(type = ServerWebSocket.class) annotation? Or we make it implement ParameterExtractor<ServerWebSocket> but I was thinking with an annotation we can make extractors pluggable based on annotations too in the future: @HandlerFor(annotatedWith = FroMage.class) which would support parameters annotated with @FroMage.\nI think this could be simpler than MethodScannerBuildItem and its context.", "url": "https://github.com/quarkusio/quarkus/pull/13964#discussion_r545918803", "createdAt": "2020-12-18T15:43:58Z", "author": {"login": "FroMage"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/websocket/VertxWebSocketParamExtractor.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package io.quarkus.resteasy.reactive.server.runtime.websocket;\n+\n+import org.jboss.resteasy.reactive.server.core.ResteasyReactiveRequestContext;\n+import org.jboss.resteasy.reactive.server.core.parameters.ParameterExtractor;\n+\n+import io.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.core.http.ServerWebSocket;\n+\n+//TODO: do we actually want vert.x websockets?\n+//they are not our primary API but they are easy to support\n+public class VertxWebSocketParamExtractor implements ParameterExtractor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ed3efacddba43686aca22ca53affa96f90ddfd8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk5NzU4OQ==", "bodyText": "That would be fine for a user facing API, but we still need the programmatic version to avoid having to index Quarkus itself.", "url": "https://github.com/quarkusio/quarkus/pull/13964#discussion_r546997589", "createdAt": "2020-12-22T00:19:42Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/websocket/VertxWebSocketParamExtractor.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package io.quarkus.resteasy.reactive.server.runtime.websocket;\n+\n+import org.jboss.resteasy.reactive.server.core.ResteasyReactiveRequestContext;\n+import org.jboss.resteasy.reactive.server.core.parameters.ParameterExtractor;\n+\n+import io.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.core.http.ServerWebSocket;\n+\n+//TODO: do we actually want vert.x websockets?\n+//they are not our primary API but they are easy to support\n+public class VertxWebSocketParamExtractor implements ParameterExtractor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkxODgwMw=="}, "originalCommit": {"oid": "8ed3efacddba43686aca22ca53affa96f90ddfd8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM2MDM0OQ==", "bodyText": "True.", "url": "https://github.com/quarkusio/quarkus/pull/13964#discussion_r551360349", "createdAt": "2021-01-04T14:48:22Z", "author": {"login": "FroMage"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/websocket/VertxWebSocketParamExtractor.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package io.quarkus.resteasy.reactive.server.runtime.websocket;\n+\n+import org.jboss.resteasy.reactive.server.core.ResteasyReactiveRequestContext;\n+import org.jboss.resteasy.reactive.server.core.parameters.ParameterExtractor;\n+\n+import io.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.core.http.ServerWebSocket;\n+\n+//TODO: do we actually want vert.x websockets?\n+//they are not our primary API but they are easy to support\n+public class VertxWebSocketParamExtractor implements ParameterExtractor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkxODgwMw=="}, "originalCommit": {"oid": "8ed3efacddba43686aca22ca53affa96f90ddfd8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDg3NjQ1Nw==", "bodyText": "I really don't want RR to have to self-index, so I am very much against making an annotation based approach the only way to do this. If we think this is useful for end uses I think building an annotation based API over the programatic impl would be the best way to handle this.", "url": "https://github.com/quarkusio/quarkus/pull/13964#discussion_r554876457", "createdAt": "2021-01-11T08:14:37Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/websocket/VertxWebSocketParamExtractor.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package io.quarkus.resteasy.reactive.server.runtime.websocket;\n+\n+import org.jboss.resteasy.reactive.server.core.ResteasyReactiveRequestContext;\n+import org.jboss.resteasy.reactive.server.core.parameters.ParameterExtractor;\n+\n+import io.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.core.http.ServerWebSocket;\n+\n+//TODO: do we actually want vert.x websockets?\n+//they are not our primary API but they are easy to support\n+public class VertxWebSocketParamExtractor implements ParameterExtractor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkxODgwMw=="}, "originalCommit": {"oid": "8ed3efacddba43686aca22ca53affa96f90ddfd8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDg4MjUwOA==", "bodyText": "Sure, it can wait.", "url": "https://github.com/quarkusio/quarkus/pull/13964#discussion_r554882508", "createdAt": "2021-01-11T08:24:20Z", "author": {"login": "FroMage"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/websocket/VertxWebSocketParamExtractor.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package io.quarkus.resteasy.reactive.server.runtime.websocket;\n+\n+import org.jboss.resteasy.reactive.server.core.ResteasyReactiveRequestContext;\n+import org.jboss.resteasy.reactive.server.core.parameters.ParameterExtractor;\n+\n+import io.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.core.http.ServerWebSocket;\n+\n+//TODO: do we actually want vert.x websockets?\n+//they are not our primary API but they are easy to support\n+public class VertxWebSocketParamExtractor implements ParameterExtractor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkxODgwMw=="}, "originalCommit": {"oid": "8ed3efacddba43686aca22ca53affa96f90ddfd8"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTM2Mzg4OnYy", "diffSide": "RIGHT", "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/websocket/VertxWebSocketRestHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNTo0NjoxOVrOIIoVMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNTo0NjoxOVrOIIoVMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkyMDMwNQ==", "bodyText": "Check out what I did in MultiResponseHandler which is similar to this, where I suspend, then do this:\n            // let's make sure we never restart by accident, also make sure we're not marked as completed\n            requestContext.restart(AWOL, true);", "url": "https://github.com/quarkusio/quarkus/pull/13964#discussion_r545920305", "createdAt": "2020-12-18T15:46:19Z", "author": {"login": "FroMage"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/websocket/VertxWebSocketRestHandler.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.resteasy.reactive.server.runtime.websocket;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.jboss.resteasy.reactive.server.core.ResteasyReactiveRequestContext;\n+import org.jboss.resteasy.reactive.server.model.HandlerChainCustomizer;\n+import org.jboss.resteasy.reactive.server.spi.ServerRestHandler;\n+\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.ServerWebSocket;\n+\n+public class VertxWebSocketRestHandler implements HandlerChainCustomizer {\n+\n+    @Override\n+    public List<ServerRestHandler> handlers(Phase phase) {\n+        if (phase == Phase.AFTER_METHOD_INVOKE) {\n+            return Collections.singletonList(new ServerRestHandler() {\n+                @Override\n+                public void handle(ResteasyReactiveRequestContext requestContext) throws Exception {\n+                    for (Object i : requestContext.getParameters()) {\n+                        if (i instanceof ServerWebSocket) {\n+                            ServerWebSocket socket = (ServerWebSocket) i;\n+                            socket.closeHandler(new Handler<Void>() {\n+                                @Override\n+                                public void handle(Void event) {\n+                                    requestContext.close();\n+                                }\n+                            });\n+                        }\n+                    }\n+                    requestContext.suspend(); //we never resume", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ed3efacddba43686aca22ca53affa96f90ddfd8"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTM2ODQ1OnYy", "diffSide": "RIGHT", "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/websocket/VertxWebSocketRestHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNTo0NzoyNlrOIIoXxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQwODoxMzoyMFrOIRK5Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkyMDk2NA==", "bodyText": "Shouldn't we do this when we inject the param? There's always the potential for the method invocation to throw and get directly to the exception handler and we haven't registered the close handler, no?", "url": "https://github.com/quarkusio/quarkus/pull/13964#discussion_r545920964", "createdAt": "2020-12-18T15:47:26Z", "author": {"login": "FroMage"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/websocket/VertxWebSocketRestHandler.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.resteasy.reactive.server.runtime.websocket;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.jboss.resteasy.reactive.server.core.ResteasyReactiveRequestContext;\n+import org.jboss.resteasy.reactive.server.model.HandlerChainCustomizer;\n+import org.jboss.resteasy.reactive.server.spi.ServerRestHandler;\n+\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.ServerWebSocket;\n+\n+public class VertxWebSocketRestHandler implements HandlerChainCustomizer {\n+\n+    @Override\n+    public List<ServerRestHandler> handlers(Phase phase) {\n+        if (phase == Phase.AFTER_METHOD_INVOKE) {\n+            return Collections.singletonList(new ServerRestHandler() {\n+                @Override\n+                public void handle(ResteasyReactiveRequestContext requestContext) throws Exception {\n+                    for (Object i : requestContext.getParameters()) {\n+                        if (i instanceof ServerWebSocket) {\n+                            ServerWebSocket socket = (ServerWebSocket) i;\n+                            socket.closeHandler(new Handler<Void>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ed3efacddba43686aca22ca53affa96f90ddfd8"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDg3NTIwMw==", "bodyText": "I have updated this", "url": "https://github.com/quarkusio/quarkus/pull/13964#discussion_r554875203", "createdAt": "2021-01-11T08:13:20Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive/runtime/src/main/java/io/quarkus/resteasy/reactive/server/runtime/websocket/VertxWebSocketRestHandler.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.resteasy.reactive.server.runtime.websocket;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.jboss.resteasy.reactive.server.core.ResteasyReactiveRequestContext;\n+import org.jboss.resteasy.reactive.server.model.HandlerChainCustomizer;\n+import org.jboss.resteasy.reactive.server.spi.ServerRestHandler;\n+\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.ServerWebSocket;\n+\n+public class VertxWebSocketRestHandler implements HandlerChainCustomizer {\n+\n+    @Override\n+    public List<ServerRestHandler> handlers(Phase phase) {\n+        if (phase == Phase.AFTER_METHOD_INVOKE) {\n+            return Collections.singletonList(new ServerRestHandler() {\n+                @Override\n+                public void handle(ResteasyReactiveRequestContext requestContext) throws Exception {\n+                    for (Object i : requestContext.getParameters()) {\n+                        if (i instanceof ServerWebSocket) {\n+                            ServerWebSocket socket = (ServerWebSocket) i;\n+                            socket.closeHandler(new Handler<Void>() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkyMDk2NA=="}, "originalCommit": {"oid": "8ed3efacddba43686aca22ca53affa96f90ddfd8"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTM4MDA0OnYy", "diffSide": "RIGHT", "path": "independent-projects/resteasy-reactive/server/processor/src/main/java/org/jboss/resteasy/reactive/server/processor/scanning/AsyncReturnTypeScanner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNTo1MDoyMFrOIIoeuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNTo1MDoyMFrOIIoeuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkyMjc0Nw==", "bodyText": "Even here I wonder if we couldn't annotate MultiResponseHandler:\n@RegisterRestHandler(phase = HandlerChainCustomizer.Phase.AFTER_METHOD_INVOKE, forType = Multi.class)\npublic class MultiResponseHandler implements ServerRestHandler {\n}", "url": "https://github.com/quarkusio/quarkus/pull/13964#discussion_r545922747", "createdAt": "2020-12-18T15:50:20Z", "author": {"login": "FroMage"}, "path": "independent-projects/resteasy-reactive/server/processor/src/main/java/org/jboss/resteasy/reactive/server/processor/scanning/AsyncReturnTypeScanner.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package org.jboss.resteasy.reactive.server.processor.scanning;\n+\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletionStage;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.MethodInfo;\n+import org.jboss.resteasy.reactive.server.handlers.CompletionStageResponseHandler;\n+import org.jboss.resteasy.reactive.server.handlers.MultiResponseHandler;\n+import org.jboss.resteasy.reactive.server.handlers.UniResponseHandler;\n+import org.jboss.resteasy.reactive.server.model.FixedHandlerChainCustomizer;\n+import org.jboss.resteasy.reactive.server.model.HandlerChainCustomizer;\n+\n+public class AsyncReturnTypeScanner implements MethodScanner {\n+    private static final DotName COMPLETION_STAGE = DotName.createSimple(CompletionStage.class.getName());\n+    private static final DotName UNI = DotName.createSimple(Uni.class.getName());\n+    private static final DotName MULTI = DotName.createSimple(Multi.class.getName());\n+\n+    @Override\n+    public List<HandlerChainCustomizer> scan(MethodInfo method, Map<String, Object> methodContext) {\n+        if (method.returnType().name().equals(COMPLETION_STAGE)) {\n+            return Collections.singletonList(new FixedHandlerChainCustomizer(new CompletionStageResponseHandler(),\n+                    HandlerChainCustomizer.Phase.AFTER_METHOD_INVOKE));\n+        } else if (method.returnType().name().equals(UNI)) {\n+            return Collections.singletonList(new FixedHandlerChainCustomizer(new UniResponseHandler(),\n+                    HandlerChainCustomizer.Phase.AFTER_METHOD_INVOKE));\n+        }\n+        if (method.returnType().name().equals(MULTI)) {\n+            return Collections.singletonList(new FixedHandlerChainCustomizer(new MultiResponseHandler(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ed3efacddba43686aca22ca53affa96f90ddfd8"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTM4NTQ4OnYy", "diffSide": "RIGHT", "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/startup/RuntimeResourceDeployment.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNTo1MTozNVrOIIoh0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNTo1MTozNVrOIIoh0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkyMzUzOQ==", "bodyText": "Well done :)", "url": "https://github.com/quarkusio/quarkus/pull/13964#discussion_r545923539", "createdAt": "2020-12-18T15:51:35Z", "author": {"login": "FroMage"}, "path": "independent-projects/resteasy-reactive/server/runtime/src/main/java/org/jboss/resteasy/reactive/server/core/startup/RuntimeResourceDeployment.java", "diffHunk": "@@ -386,8 +390,10 @@ public ParameterExtractor parameterExtractor(Map<String, Integer> pathParameterI\n                 return extractor;\n             case BEAN:\n                 return new BeanParamExtractor((BeanFactory<Object>) info.getFactoryCreator().apply(loadClass(javaType)));\n+            case CUSTOM:\n+                return customExtractor;\n             default:\n-                return new QueryParamExtractor(name, single, encoded);\n+                throw new RuntimeException(\"Unkown param type: \" + type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ed3efacddba43686aca22ca53affa96f90ddfd8"}, "originalPosition": 111}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4430, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}