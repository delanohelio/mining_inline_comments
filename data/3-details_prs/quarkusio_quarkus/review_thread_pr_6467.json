{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwNjUyMzUz", "number": 6467, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwODoxMzo0N1rODWxG_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwODoxMzo0N1rODWxG_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTk5ODcwOnYy", "diffSide": "RIGHT", "path": "independent-projects/qute/core/src/main/java/io/quarkus/qute/Parser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwODoxMzo0OFrOFbtpxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwODoyNjo0NlrOFbt7Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYwMzg0NQ==", "bodyText": "I think you shouldn't throw the exception in this method. You should return it and throw it in the caller.\nThis way, IDEs can analyze properly the flow of the methods.", "url": "https://github.com/quarkusio/quarkus/pull/6467#discussion_r364603845", "createdAt": "2020-01-09T08:13:48Z", "author": {"login": "gsmet"}, "path": "independent-projects/qute/core/src/main/java/io/quarkus/qute/Parser.java", "diffHunk": "@@ -331,13 +337,23 @@ private void flushTag() {\n             typeInfos.put(key, \"[\" + value + \"]\");\n \n         } else {\n-            sectionBlockStack.peek()\n-                    .addNode(new ExpressionNode(apply(content), engine, new OriginImpl(line, templateId, variant)));\n+            sectionBlockStack.peek().addNode(new ExpressionNode(apply(content), engine, origin()));\n         }\n         this.buffer = new StringBuilder();\n     }\n \n-    private void processParams(String label, Iterator<String> iter) {\n+    private void parserError(String message) {\n+        StringBuilder builder = new StringBuilder(\"Parser error\");\n+        if (!id.equals(generatedId)) {\n+            builder.append(\" in template [\").append(id).append(\"]\");\n+        }\n+        builder.append(\" on line \").append(line).append(\": \")\n+                .append(message);\n+        throw new TemplateException(origin(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22bd4aecd8b9fa2ea61fbd2736e54c75d4e32b26"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYwNjg2Mg==", "bodyText": "Ok, I can modify the method. No problem.", "url": "https://github.com/quarkusio/quarkus/pull/6467#discussion_r364606862", "createdAt": "2020-01-09T08:22:51Z", "author": {"login": "mkouba"}, "path": "independent-projects/qute/core/src/main/java/io/quarkus/qute/Parser.java", "diffHunk": "@@ -331,13 +337,23 @@ private void flushTag() {\n             typeInfos.put(key, \"[\" + value + \"]\");\n \n         } else {\n-            sectionBlockStack.peek()\n-                    .addNode(new ExpressionNode(apply(content), engine, new OriginImpl(line, templateId, variant)));\n+            sectionBlockStack.peek().addNode(new ExpressionNode(apply(content), engine, origin()));\n         }\n         this.buffer = new StringBuilder();\n     }\n \n-    private void processParams(String label, Iterator<String> iter) {\n+    private void parserError(String message) {\n+        StringBuilder builder = new StringBuilder(\"Parser error\");\n+        if (!id.equals(generatedId)) {\n+            builder.append(\" in template [\").append(id).append(\"]\");\n+        }\n+        builder.append(\" on line \").append(line).append(\": \")\n+                .append(message);\n+        throw new TemplateException(origin(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYwMzg0NQ=="}, "originalCommit": {"oid": "22bd4aecd8b9fa2ea61fbd2736e54c75d4e32b26"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYwODMyNg==", "bodyText": "Cool thanks. I already was bitten by this, totally missing a coding error because the IDE was unable to tell me some part of the code was unreachable.", "url": "https://github.com/quarkusio/quarkus/pull/6467#discussion_r364608326", "createdAt": "2020-01-09T08:26:46Z", "author": {"login": "gsmet"}, "path": "independent-projects/qute/core/src/main/java/io/quarkus/qute/Parser.java", "diffHunk": "@@ -331,13 +337,23 @@ private void flushTag() {\n             typeInfos.put(key, \"[\" + value + \"]\");\n \n         } else {\n-            sectionBlockStack.peek()\n-                    .addNode(new ExpressionNode(apply(content), engine, new OriginImpl(line, templateId, variant)));\n+            sectionBlockStack.peek().addNode(new ExpressionNode(apply(content), engine, origin()));\n         }\n         this.buffer = new StringBuilder();\n     }\n \n-    private void processParams(String label, Iterator<String> iter) {\n+    private void parserError(String message) {\n+        StringBuilder builder = new StringBuilder(\"Parser error\");\n+        if (!id.equals(generatedId)) {\n+            builder.append(\" in template [\").append(id).append(\"]\");\n+        }\n+        builder.append(\" on line \").append(line).append(\": \")\n+                .append(message);\n+        throw new TemplateException(origin(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYwMzg0NQ=="}, "originalCommit": {"oid": "22bd4aecd8b9fa2ea61fbd2736e54c75d4e32b26"}, "originalPosition": 204}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1323, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}