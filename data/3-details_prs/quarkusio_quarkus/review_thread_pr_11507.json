{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxMzIxMDUw", "number": 11507, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwOToyMzoyMlrOEa47UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwOToyMzoyMlrOEa47UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NjMxMTIwOnYy", "diffSide": "RIGHT", "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/InjectJobTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwOToyMzoyM1rOHEldEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNDowNDo1NVrOHEujlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU3MDAwMA==", "bodyText": "Just a side note - do we somehow automatically register all implementations of Job as beans? I didn't find any such logic in quartz processors but it might be just lack of caffeine on my side :)", "url": "https://github.com/quarkusio/quarkus/pull/11507#discussion_r474570000", "createdAt": "2020-08-21T09:23:23Z", "author": {"login": "manovotn"}, "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/InjectJobTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.quartz.Job;\n+import org.quartz.JobBuilder;\n+import org.quartz.JobDetail;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n+import org.quartz.Scheduler;\n+import org.quartz.SchedulerException;\n+import org.quartz.SimpleScheduleBuilder;\n+import org.quartz.Trigger;\n+import org.quartz.TriggerBuilder;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.runtime.StartupEvent;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class InjectJobTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest test = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(Starter.class, Service.class, CountDownLatchProducer.class)\n+                    .addAsResource(new StringAsset(\"quarkus.quartz.force-start=true\"),\n+                            \"application.properties\"));\n+\n+    @Test\n+    public void testSimpleScheduledJobs() throws InterruptedException {\n+        CountDownLatch latch = Arc.container().instance(CountDownLatch.class).get();\n+        assertTrue(latch.await(5, TimeUnit.SECONDS), \"Latch count: \" + latch.getCount());\n+    }\n+\n+    @ApplicationScoped\n+    public static class CountDownLatchProducer {\n+        @Produces\n+        @Singleton\n+        CountDownLatch LATCH = new CountDownLatch(2);\n+    }\n+\n+    @ApplicationScoped\n+    public static class Service {\n+\n+        @Inject\n+        CountDownLatch latch;\n+\n+        public void execute() {\n+            latch.countDown();\n+        }\n+\n+    }\n+\n+    public static class Starter implements Job {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d814cac178b371aeda0c2096f42542a0f61e8d3"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDcxNTI5Ng==", "bodyText": "@manovotn I don't think so, should we?", "url": "https://github.com/quarkusio/quarkus/pull/11507#discussion_r474715296", "createdAt": "2020-08-21T13:58:26Z", "author": {"login": "gastaldi"}, "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/InjectJobTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.quartz.Job;\n+import org.quartz.JobBuilder;\n+import org.quartz.JobDetail;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n+import org.quartz.Scheduler;\n+import org.quartz.SchedulerException;\n+import org.quartz.SimpleScheduleBuilder;\n+import org.quartz.Trigger;\n+import org.quartz.TriggerBuilder;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.runtime.StartupEvent;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class InjectJobTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest test = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(Starter.class, Service.class, CountDownLatchProducer.class)\n+                    .addAsResource(new StringAsset(\"quarkus.quartz.force-start=true\"),\n+                            \"application.properties\"));\n+\n+    @Test\n+    public void testSimpleScheduledJobs() throws InterruptedException {\n+        CountDownLatch latch = Arc.container().instance(CountDownLatch.class).get();\n+        assertTrue(latch.await(5, TimeUnit.SECONDS), \"Latch count: \" + latch.getCount());\n+    }\n+\n+    @ApplicationScoped\n+    public static class CountDownLatchProducer {\n+        @Produces\n+        @Singleton\n+        CountDownLatch LATCH = new CountDownLatch(2);\n+    }\n+\n+    @ApplicationScoped\n+    public static class Service {\n+\n+        @Inject\n+        CountDownLatch latch;\n+\n+        public void execute() {\n+            latch.countDown();\n+        }\n+\n+    }\n+\n+    public static class Starter implements Job {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU3MDAwMA=="}, "originalCommit": {"oid": "5d814cac178b371aeda0c2096f42542a0f61e8d3"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDcxOTEyNg==", "bodyText": "Well, the fix you did requires them to be beans, otherwise you cannot pull them ArC.\nBut even in your test which doesn't use scope annotations on that class it becomes a bean, so there are some transformations going on presumably, I was just unable to pinpoint them. I suppose we consider any class with an injection point a bean and slap @Dependent on it...", "url": "https://github.com/quarkusio/quarkus/pull/11507#discussion_r474719126", "createdAt": "2020-08-21T14:04:55Z", "author": {"login": "manovotn"}, "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/InjectJobTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.quartz.Job;\n+import org.quartz.JobBuilder;\n+import org.quartz.JobDetail;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n+import org.quartz.Scheduler;\n+import org.quartz.SchedulerException;\n+import org.quartz.SimpleScheduleBuilder;\n+import org.quartz.Trigger;\n+import org.quartz.TriggerBuilder;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.runtime.StartupEvent;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class InjectJobTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest test = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(Starter.class, Service.class, CountDownLatchProducer.class)\n+                    .addAsResource(new StringAsset(\"quarkus.quartz.force-start=true\"),\n+                            \"application.properties\"));\n+\n+    @Test\n+    public void testSimpleScheduledJobs() throws InterruptedException {\n+        CountDownLatch latch = Arc.container().instance(CountDownLatch.class).get();\n+        assertTrue(latch.await(5, TimeUnit.SECONDS), \"Latch count: \" + latch.getCount());\n+    }\n+\n+    @ApplicationScoped\n+    public static class CountDownLatchProducer {\n+        @Produces\n+        @Singleton\n+        CountDownLatch LATCH = new CountDownLatch(2);\n+    }\n+\n+    @ApplicationScoped\n+    public static class Service {\n+\n+        @Inject\n+        CountDownLatch latch;\n+\n+        public void execute() {\n+            latch.countDown();\n+        }\n+\n+    }\n+\n+    public static class Starter implements Job {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU3MDAwMA=="}, "originalCommit": {"oid": "5d814cac178b371aeda0c2096f42542a0f61e8d3"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 627, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}