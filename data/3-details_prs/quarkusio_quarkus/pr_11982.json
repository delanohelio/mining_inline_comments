{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMTI2MzE1", "number": 11982, "title": "Add OpenShift Client extension", "bodyText": "This extension provides access to OpenShift clusters through the fabric8 openshift client.\nIt relies heavily on the existing quarkus kubernetes client extension for its implementation (e.g. it shares the same configuration).\nEssentially it brings an OpenShiftClient that can be injected into the client application.\nFixes #3200", "createdAt": "2020-09-08T15:26:47Z", "url": "https://github.com/quarkusio/quarkus/pull/11982", "merged": true, "mergeCommit": {"oid": "afe4fa6637cdeab8e67ecd5885633f316e626f20"}, "closed": true, "closedAt": "2020-10-06T16:06:19Z", "author": {"login": "vsevel"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdG5jMwgFqTQ4NDI2NDQ4Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdP01i_gBqjM4NDQzNjg3MzQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MjY0NDgz", "url": "https://github.com/quarkusio/quarkus/pull/11982#pullrequestreview-484264483", "createdAt": "2020-09-08T15:36:26Z", "commit": {"oid": "2d4dea80f70cb19b9a5ecbc7c19b3baeb3a91ee9"}, "state": "DISMISSED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNTozNjoyNlrOHOi_xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNTo0Mjo1NlrOHOjQzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAxNTQ5Mw==", "bodyText": "Please, alphabetical order :).", "url": "https://github.com/quarkusio/quarkus/pull/11982#discussion_r485015493", "createdAt": "2020-09-08T15:36:26Z", "author": {"login": "gsmet"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/Feature.java", "diffHunk": "@@ -54,6 +54,7 @@\n     KOTLIN,\n     KUBERNETES,\n     KUBERNETES_CLIENT,\n+    OPENSHIFT_CLIENT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d4dea80f70cb19b9a5ecbc7c19b3baeb3a91ee9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAxNjEwNg==", "bodyText": "If we don't have a guide, let's drop this and add it once the guide is there.", "url": "https://github.com/quarkusio/quarkus/pull/11982#discussion_r485016106", "createdAt": "2020-09-08T15:37:19Z", "author": {"login": "gsmet"}, "path": "extensions/openshift-client/runtime/src/main/resources/META-INF/quarkus-extension.yaml", "diffHunk": "@@ -0,0 +1,9 @@\n+---\n+name: \"OpenShift Client\"\n+metadata:\n+  keywords:\n+  - \"openshift-client\"\n+  guide: \"https://quarkus.io/guides/kubernetes-client\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d4dea80f70cb19b9a5ecbc7c19b3baeb3a91ee9"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAxNzI3NQ==", "bodyText": "Shouldn't part of this be shared to avoid having to fix bugs in both extension? Most of this doesn't look specific to OpenShift?", "url": "https://github.com/quarkusio/quarkus/pull/11982#discussion_r485017275", "createdAt": "2020-09-08T15:39:09Z", "author": {"login": "gsmet"}, "path": "extensions/openshift-client/deployment/src/main/java/io/quarkus/openshift/client/deployment/OpenShiftClientProcessor.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package io.quarkus.openshift.client.deployment;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.Type;\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.deployment.Feature;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.ApplicationIndexBuildItem;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.util.JandexUtil;\n+import io.quarkus.jackson.deployment.IgnoreJsonDeserializeClassBuildItem;\n+import io.quarkus.kubernetes.client.deployment.KubernetesClientProcessor;\n+import io.quarkus.kubernetes.spi.KubernetesRoleBuildItem;\n+import io.quarkus.openshift.client.runtime.OpenShiftClientProducer;\n+\n+public class OpenShiftClientProcessor {\n+\n+    private static final DotName WATCHER = DotName.createSimple(\"io.fabric8.kubernetes.client.Watcher\");\n+    private static final DotName KUBERNETES_RESOURCE = DotName\n+            .createSimple(\"io.fabric8.kubernetes.api.model.KubernetesResource\");\n+\n+    private static final Logger log = Logger.getLogger(OpenShiftClientProcessor.class.getName());\n+\n+    @Inject\n+    BuildProducer<FeatureBuildItem> featureProducer;\n+\n+    @Inject\n+    BuildProducer<ReflectiveClassBuildItem> reflectiveClasses;\n+\n+    @Inject\n+    BuildProducer<IgnoreJsonDeserializeClassBuildItem> ignoredJsonDeserializationClasses;\n+\n+    @Inject\n+    BuildProducer<KubernetesRoleBuildItem> roleProducer;\n+\n+    @BuildStep\n+    public void process(ApplicationIndexBuildItem applicationIndex, CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<ExtensionSslNativeSupportBuildItem> sslNativeSupport,\n+            BuildProducer<AdditionalBeanBuildItem> additionalBeanBuildItemBuildItem) {\n+\n+        featureProducer.produce(new FeatureBuildItem(Feature.OPENSHIFT_CLIENT));\n+        // roleProducer.produce(new KubernetesRoleBuildItem(\"view\"));\n+\n+        Set<String> watchedClasses = new HashSet<>();\n+        // make sure the watchers fully (and not weakly) register Kubernetes classes for reflection\n+        applicationIndex.getIndex().getAllKnownImplementors(WATCHER)\n+                .forEach(c -> {\n+                    try {\n+                        final List<Type> watcherGenericTypes = JandexUtil.resolveTypeParameters(c.name(),\n+                                WATCHER, combinedIndexBuildItem.getIndex());\n+                        if (watcherGenericTypes.size() == 1) {\n+                            watchedClasses.add(watcherGenericTypes.get(0).name().toString());\n+                        }\n+                    } catch (IllegalStateException ignored) {\n+                        // when the class has no subclasses and we were not able to determine the generic types, it's likely that\n+                        // the watcher will fail due to not being able to deserialize the class\n+                        if (applicationIndex.getIndex().getAllKnownSubclasses(c.name()).isEmpty()) {\n+                            log.warn(\"Watcher '\" + c.name() + \"' will most likely not work correctly in native mode. \" +\n+                                    \"Consider specifying the generic type of 'io.fabric8.kubernetes.client.Watcher' that this class handles. \"\n+                                    +\n+                                    \"See https://quarkus.io/guides/kubernetes-client#note-on-implementing-the-watcher-interface for more details\");\n+                        }\n+                    }\n+                });\n+        if (!watchedClasses.isEmpty()) {\n+            reflectiveClasses.produce(new ReflectiveClassBuildItem(true, true, watchedClasses.toArray(new String[0])));\n+        }\n+\n+        final String[] modelClasses = combinedIndexBuildItem.getIndex()\n+                .getAllKnownImplementors(KUBERNETES_RESOURCE)\n+                .stream()\n+                .peek(c -> {\n+                    // we need to make sure that the Jackson extension does not try to fully register the model classes\n+                    // since we are going to register them weakly\n+                    ignoredJsonDeserializationClasses.produce(new IgnoreJsonDeserializeClassBuildItem(c.name()));\n+                })\n+                .map(c -> c.name().toString())\n+                .filter(c -> !watchedClasses.contains(c))\n+                .toArray(String[]::new);\n+        reflectiveClasses.produce(ReflectiveClassBuildItem\n+                .builder(modelClasses).weak(true).methods(true).fields(false).build());\n+\n+        // we also ignore some classes that are annotated with @JsonDeserialize that would force the registration of the entire model\n+        ignoredJsonDeserializationClasses.produce(\n+                new IgnoreJsonDeserializeClassBuildItem(DotName.createSimple(\"io.fabric8.kubernetes.api.model.KubeSchema\")));\n+        ignoredJsonDeserializationClasses.produce(\n+                new IgnoreJsonDeserializeClassBuildItem(\n+                        DotName.createSimple(\"io.fabric8.kubernetes.api.model.KubernetesResourceList\")));\n+        ignoredJsonDeserializationClasses.produce(new IgnoreJsonDeserializeClassBuildItem(KUBERNETES_RESOURCE));\n+\n+        final String[] doneables = combinedIndexBuildItem.getIndex()\n+                .getAllKnownImplementors(DotName.createSimple(\"io.fabric8.kubernetes.api.model.Doneable\"))\n+                .stream()\n+                .map(c -> c.name().toString())\n+                .toArray(String[]::new);\n+        reflectiveClasses.produce(ReflectiveClassBuildItem.weakClass(doneables));\n+\n+        final String[] deserializerClasses = combinedIndexBuildItem.getIndex()\n+                .getAllKnownSubclasses(DotName.createSimple(\"com.fasterxml.jackson.databind.JsonDeserializer\"))\n+                .stream()\n+                .map(c -> c.name().toString())\n+                .filter(s -> s.startsWith(\"io.fabric8.kubernetes\"))\n+                .toArray(String[]::new);\n+        reflectiveClasses.produce(new ReflectiveClassBuildItem(true, false, deserializerClasses));\n+\n+        final String[] serializerClasses = combinedIndexBuildItem.getIndex()\n+                .getAllKnownSubclasses(DotName.createSimple(\"com.fasterxml.jackson.databind.JsonSerializer\"))\n+                .stream()\n+                .map(c -> c.name().toString())\n+                .filter(s -> s.startsWith(\"io.fabric8.kubernetes\"))\n+                .toArray(String[]::new);\n+        reflectiveClasses.produce(new ReflectiveClassBuildItem(true, false, serializerClasses));\n+\n+        reflectiveClasses\n+                .produce(new ReflectiveClassBuildItem(true, false, \"io.fabric8.kubernetes.api.model.IntOrString\"));\n+        reflectiveClasses\n+                .produce(new ReflectiveClassBuildItem(true, false, \"io.fabric8.kubernetes.internal.KubernetesDeserializer\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d4dea80f70cb19b9a5ecbc7c19b3baeb3a91ee9"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAxNzg4OA==", "bodyText": "Let's make it @Singleton maybe?", "url": "https://github.com/quarkusio/quarkus/pull/11982#discussion_r485017888", "createdAt": "2020-09-08T15:40:02Z", "author": {"login": "gsmet"}, "path": "extensions/openshift-client/runtime/src/main/java/io/quarkus/openshift/client/runtime/OpenShiftClientProducer.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package io.quarkus.openshift.client.runtime;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Singleton;\n+\n+import io.fabric8.kubernetes.client.Config;\n+import io.fabric8.openshift.client.DefaultOpenShiftClient;\n+import io.fabric8.openshift.client.OpenShiftClient;\n+import io.quarkus.arc.DefaultBean;\n+\n+@ApplicationScoped", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d4dea80f70cb19b9a5ecbc7c19b3baeb3a91ee9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAxOTIwMw==", "bodyText": "Why is it disabled?", "url": "https://github.com/quarkusio/quarkus/pull/11982#discussion_r485019203", "createdAt": "2020-09-08T15:41:58Z", "author": {"login": "gsmet"}, "path": "integration-tests/openshift-client/src/test/java/io/quarkus/openshift/client/runtime/OpenShiftClientTestIT.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package io.quarkus.openshift.client.runtime;\n+\n+import io.quarkus.test.junit.NativeImageTest;\n+import org.junit.jupiter.api.Disabled;\n+\n+@Disabled", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d4dea80f70cb19b9a5ecbc7c19b3baeb3a91ee9"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAxOTg1NA==", "bodyText": "I wonder if we want to keep the kubernetes-client prefix for the config but it's just a question.", "url": "https://github.com/quarkusio/quarkus/pull/11982#discussion_r485019854", "createdAt": "2020-09-08T15:42:56Z", "author": {"login": "gsmet"}, "path": "integration-tests/openshift-client/src/main/resources/application.properties", "diffHunk": "@@ -0,0 +1,5 @@\n+quarkus.kubernetes-client.trust-certs=true\n+quarkus.kubernetes-client.master-url=https://192.168.64.2:8443\n+quarkus.kubernetes-client.namespace=mytest\n+quarkus.kubernetes-client.username=developer\n+quarkus.kubernetes-client.password=coucou", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d4dea80f70cb19b9a5ecbc7c19b3baeb3a91ee9"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MzI3MDM3", "url": "https://github.com/quarkusio/quarkus/pull/11982#pullrequestreview-484327037", "createdAt": "2020-09-08T16:54:48Z", "commit": {"oid": "0039f885ca1223e17e24877bf88d8972e0b3a270"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo1NDo0OFrOHOl_Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo1NDo0OFrOHOl_Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2NDUzOQ==", "bodyText": "This seems to have been copied from KubernetesClientProcessor. Since this extension depends on kubernetes-client, this is not needed. It should contain only what's necessary for OpenShiftClient", "url": "https://github.com/quarkusio/quarkus/pull/11982#discussion_r485064539", "createdAt": "2020-09-08T16:54:48Z", "author": {"login": "gastaldi"}, "path": "extensions/openshift-client/deployment/src/main/java/io/quarkus/openshift/client/deployment/OpenShiftClientProcessor.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package io.quarkus.openshift.client.deployment;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.Type;\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.deployment.Feature;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.ApplicationIndexBuildItem;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.util.JandexUtil;\n+import io.quarkus.jackson.deployment.IgnoreJsonDeserializeClassBuildItem;\n+import io.quarkus.kubernetes.client.deployment.KubernetesClientProcessor;\n+import io.quarkus.kubernetes.spi.KubernetesRoleBuildItem;\n+import io.quarkus.openshift.client.runtime.OpenShiftClientProducer;\n+\n+public class OpenShiftClientProcessor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0039f885ca1223e17e24877bf88d8972e0b3a270"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NDg3OTA1", "url": "https://github.com/quarkusio/quarkus/pull/11982#pullrequestreview-484487905", "createdAt": "2020-09-08T20:57:42Z", "commit": {"oid": "4f3b1eb7b648e7dabea569920a9c0dba98f1227f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDo1Nzo0MlrOHOtxeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDo1Nzo0MlrOHOtxeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE5MjA1OA==", "bodyText": "The kubernetes client extension already does that", "url": "https://github.com/quarkusio/quarkus/pull/11982#discussion_r485192058", "createdAt": "2020-09-08T20:57:42Z", "author": {"login": "gastaldi"}, "path": "extensions/openshift-client/deployment/src/main/java/io/quarkus/openshift/client/deployment/OpenShiftClientProcessor.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package io.quarkus.openshift.client.deployment;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.deployment.Feature;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.it.openshift.client.OpenShiftClientProducer;\n+\n+public class OpenShiftClientProcessor {\n+\n+    private static final Logger log = Logger.getLogger(OpenShiftClientProcessor.class.getName());\n+\n+    @Inject\n+    BuildProducer<FeatureBuildItem> featureProducer;\n+\n+    @BuildStep\n+    public void process(\n+            BuildProducer<ExtensionSslNativeSupportBuildItem> sslNativeSupport,\n+            BuildProducer<AdditionalBeanBuildItem> additionalBeanBuildItemBuildItem) {\n+\n+        featureProducer.produce(new FeatureBuildItem(Feature.OPENSHIFT_CLIENT));\n+\n+        // Enable SSL support by default\n+        sslNativeSupport.produce(new ExtensionSslNativeSupportBuildItem(Feature.OPENSHIFT_CLIENT));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3b1eb7b648e7dabea569920a9c0dba98f1227f"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0ODY3MjAw", "url": "https://github.com/quarkusio/quarkus/pull/11982#pullrequestreview-484867200", "createdAt": "2020-09-09T10:20:50Z", "commit": {"oid": "f8b94c86303f85651c1010d5b4d6969bca147e9a"}, "state": "DISMISSED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoyMDo1MVrOHPAwmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoyOTo0OFrOHPBC9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwMzEyOA==", "bodyText": "openshiftClient maybe?", "url": "https://github.com/quarkusio/quarkus/pull/11982#discussion_r485503128", "createdAt": "2020-09-09T10:20:51Z", "author": {"login": "iocanel"}, "path": "extensions/openshift-client/runtime/src/main/java/io/quarkus/it/openshift/client/OpenShiftClientProducer.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package io.quarkus.it.openshift.client;\n+\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Singleton;\n+\n+import io.fabric8.kubernetes.client.Config;\n+import io.fabric8.openshift.client.DefaultOpenShiftClient;\n+import io.fabric8.openshift.client.OpenShiftClient;\n+import io.quarkus.arc.DefaultBean;\n+\n+@Singleton\n+public class OpenShiftClientProducer {\n+\n+    @DefaultBean\n+    @Singleton\n+    @Produces\n+    public OpenShiftClient kubernetesClient(Config config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8b94c86303f85651c1010d5b4d6969bca147e9a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwNTc4Nw==", "bodyText": "If there is a way it would be nice to use it, as more client extensions could be added in the future. Personally I'd love to see kantive and tekton. So that would be awesome!", "url": "https://github.com/quarkusio/quarkus/pull/11982#discussion_r485505787", "createdAt": "2020-09-09T10:25:58Z", "author": {"login": "iocanel"}, "path": "extensions/openshift-client/deployment/src/main/java/io/quarkus/openshift/client/deployment/OpenShiftClientProcessor.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package io.quarkus.openshift.client.deployment;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.Type;\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.deployment.Feature;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.ApplicationIndexBuildItem;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.util.JandexUtil;\n+import io.quarkus.jackson.deployment.IgnoreJsonDeserializeClassBuildItem;\n+import io.quarkus.kubernetes.client.deployment.KubernetesClientProcessor;\n+import io.quarkus.kubernetes.spi.KubernetesRoleBuildItem;\n+import io.quarkus.openshift.client.runtime.OpenShiftClientProducer;\n+\n+public class OpenShiftClientProcessor {\n+\n+    private static final DotName WATCHER = DotName.createSimple(\"io.fabric8.kubernetes.client.Watcher\");\n+    private static final DotName KUBERNETES_RESOURCE = DotName\n+            .createSimple(\"io.fabric8.kubernetes.api.model.KubernetesResource\");\n+\n+    private static final Logger log = Logger.getLogger(OpenShiftClientProcessor.class.getName());\n+\n+    @Inject\n+    BuildProducer<FeatureBuildItem> featureProducer;\n+\n+    @Inject\n+    BuildProducer<ReflectiveClassBuildItem> reflectiveClasses;\n+\n+    @Inject\n+    BuildProducer<IgnoreJsonDeserializeClassBuildItem> ignoredJsonDeserializationClasses;\n+\n+    @Inject\n+    BuildProducer<KubernetesRoleBuildItem> roleProducer;\n+\n+    @BuildStep\n+    public void process(ApplicationIndexBuildItem applicationIndex, CombinedIndexBuildItem combinedIndexBuildItem,\n+            BuildProducer<ExtensionSslNativeSupportBuildItem> sslNativeSupport,\n+            BuildProducer<AdditionalBeanBuildItem> additionalBeanBuildItemBuildItem) {\n+\n+        featureProducer.produce(new FeatureBuildItem(Feature.OPENSHIFT_CLIENT));\n+        // roleProducer.produce(new KubernetesRoleBuildItem(\"view\"));\n+\n+        Set<String> watchedClasses = new HashSet<>();\n+        // make sure the watchers fully (and not weakly) register Kubernetes classes for reflection\n+        applicationIndex.getIndex().getAllKnownImplementors(WATCHER)\n+                .forEach(c -> {\n+                    try {\n+                        final List<Type> watcherGenericTypes = JandexUtil.resolveTypeParameters(c.name(),\n+                                WATCHER, combinedIndexBuildItem.getIndex());\n+                        if (watcherGenericTypes.size() == 1) {\n+                            watchedClasses.add(watcherGenericTypes.get(0).name().toString());\n+                        }\n+                    } catch (IllegalStateException ignored) {\n+                        // when the class has no subclasses and we were not able to determine the generic types, it's likely that\n+                        // the watcher will fail due to not being able to deserialize the class\n+                        if (applicationIndex.getIndex().getAllKnownSubclasses(c.name()).isEmpty()) {\n+                            log.warn(\"Watcher '\" + c.name() + \"' will most likely not work correctly in native mode. \" +\n+                                    \"Consider specifying the generic type of 'io.fabric8.kubernetes.client.Watcher' that this class handles. \"\n+                                    +\n+                                    \"See https://quarkus.io/guides/kubernetes-client#note-on-implementing-the-watcher-interface for more details\");\n+                        }\n+                    }\n+                });\n+        if (!watchedClasses.isEmpty()) {\n+            reflectiveClasses.produce(new ReflectiveClassBuildItem(true, true, watchedClasses.toArray(new String[0])));\n+        }\n+\n+        final String[] modelClasses = combinedIndexBuildItem.getIndex()\n+                .getAllKnownImplementors(KUBERNETES_RESOURCE)\n+                .stream()\n+                .peek(c -> {\n+                    // we need to make sure that the Jackson extension does not try to fully register the model classes\n+                    // since we are going to register them weakly\n+                    ignoredJsonDeserializationClasses.produce(new IgnoreJsonDeserializeClassBuildItem(c.name()));\n+                })\n+                .map(c -> c.name().toString())\n+                .filter(c -> !watchedClasses.contains(c))\n+                .toArray(String[]::new);\n+        reflectiveClasses.produce(ReflectiveClassBuildItem\n+                .builder(modelClasses).weak(true).methods(true).fields(false).build());\n+\n+        // we also ignore some classes that are annotated with @JsonDeserialize that would force the registration of the entire model\n+        ignoredJsonDeserializationClasses.produce(\n+                new IgnoreJsonDeserializeClassBuildItem(DotName.createSimple(\"io.fabric8.kubernetes.api.model.KubeSchema\")));\n+        ignoredJsonDeserializationClasses.produce(\n+                new IgnoreJsonDeserializeClassBuildItem(\n+                        DotName.createSimple(\"io.fabric8.kubernetes.api.model.KubernetesResourceList\")));\n+        ignoredJsonDeserializationClasses.produce(new IgnoreJsonDeserializeClassBuildItem(KUBERNETES_RESOURCE));\n+\n+        final String[] doneables = combinedIndexBuildItem.getIndex()\n+                .getAllKnownImplementors(DotName.createSimple(\"io.fabric8.kubernetes.api.model.Doneable\"))\n+                .stream()\n+                .map(c -> c.name().toString())\n+                .toArray(String[]::new);\n+        reflectiveClasses.produce(ReflectiveClassBuildItem.weakClass(doneables));\n+\n+        final String[] deserializerClasses = combinedIndexBuildItem.getIndex()\n+                .getAllKnownSubclasses(DotName.createSimple(\"com.fasterxml.jackson.databind.JsonDeserializer\"))\n+                .stream()\n+                .map(c -> c.name().toString())\n+                .filter(s -> s.startsWith(\"io.fabric8.kubernetes\"))\n+                .toArray(String[]::new);\n+        reflectiveClasses.produce(new ReflectiveClassBuildItem(true, false, deserializerClasses));\n+\n+        final String[] serializerClasses = combinedIndexBuildItem.getIndex()\n+                .getAllKnownSubclasses(DotName.createSimple(\"com.fasterxml.jackson.databind.JsonSerializer\"))\n+                .stream()\n+                .map(c -> c.name().toString())\n+                .filter(s -> s.startsWith(\"io.fabric8.kubernetes\"))\n+                .toArray(String[]::new);\n+        reflectiveClasses.produce(new ReflectiveClassBuildItem(true, false, serializerClasses));\n+\n+        reflectiveClasses\n+                .produce(new ReflectiveClassBuildItem(true, false, \"io.fabric8.kubernetes.api.model.IntOrString\"));\n+        reflectiveClasses\n+                .produce(new ReflectiveClassBuildItem(true, false, \"io.fabric8.kubernetes.internal.KubernetesDeserializer\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAxNzI3NQ=="}, "originalCommit": {"oid": "2d4dea80f70cb19b9a5ecbc7c19b3baeb3a91ee9"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwNzgzMQ==", "bodyText": "The Config object is shared between kubernetes-client and openshfit-client so I am not really sure if it makes sense to use a different prefix. After all, they are all kuberrnetes.", "url": "https://github.com/quarkusio/quarkus/pull/11982#discussion_r485507831", "createdAt": "2020-09-09T10:29:48Z", "author": {"login": "iocanel"}, "path": "integration-tests/openshift-client/src/main/resources/application.properties", "diffHunk": "@@ -0,0 +1,5 @@\n+quarkus.kubernetes-client.trust-certs=true\n+quarkus.kubernetes-client.master-url=https://192.168.64.2:8443\n+quarkus.kubernetes-client.namespace=mytest\n+quarkus.kubernetes-client.username=developer\n+quarkus.kubernetes-client.password=coucou", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAxOTg1NA=="}, "originalCommit": {"oid": "2d4dea80f70cb19b9a5ecbc7c19b3baeb3a91ee9"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MDU0Nzcw", "url": "https://github.com/quarkusio/quarkus/pull/11982#pullrequestreview-485054770", "createdAt": "2020-09-09T14:14:50Z", "commit": {"oid": "c72e381f26192d0fe715572fbc9b37c35b6692ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDoxNDo1MFrOHPJf0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDoxNDo1MFrOHPJf0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY0NjI5MA==", "bodyText": "No big deal, but you can move the featureProducer.produce(...) method to a separate method in the processor, like in the example below\n\n  \n    \n      quarkus/extensions/jgit/deployment/src/main/java/io/quarkus/jgit/deployment/JGitProcessor.java\n    \n    \n        Lines 16 to 19\n      in\n      770dbae\n    \n    \n    \n    \n\n        \n          \n           @BuildStep \n        \n\n        \n          \n           FeatureBuildItem feature() { \n        \n\n        \n          \n               return new FeatureBuildItem(Feature.JGIT); \n        \n\n        \n          \n           }", "url": "https://github.com/quarkusio/quarkus/pull/11982#discussion_r485646290", "createdAt": "2020-09-09T14:14:50Z", "author": {"login": "gastaldi"}, "path": "extensions/openshift-client/deployment/src/main/java/io/quarkus/openshift/client/deployment/OpenShiftClientProcessor.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package io.quarkus.openshift.client.deployment;\n+\n+import javax.inject.Inject;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.deployment.Feature;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.it.openshift.client.OpenShiftClientProducer;\n+\n+public class OpenShiftClientProcessor {\n+\n+    @Inject\n+    BuildProducer<FeatureBuildItem> featureProducer;\n+\n+    @BuildStep\n+    public void process(BuildProducer<AdditionalBeanBuildItem> additionalBeanBuildItemBuildItem) {\n+\n+        featureProducer.produce(new FeatureBuildItem(Feature.OPENSHIFT_CLIENT));\n+\n+        // wire up the OpenShiftClient bean support\n+        additionalBeanBuildItemBuildItem.produce(AdditionalBeanBuildItem.unremovableOf(OpenShiftClientProducer.class));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c72e381f26192d0fe715572fbc9b37c35b6692ac"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MDU1ODY0", "url": "https://github.com/quarkusio/quarkus/pull/11982#pullrequestreview-485055864", "createdAt": "2020-09-09T14:15:55Z", "commit": {"oid": "c72e381f26192d0fe715572fbc9b37c35b6692ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDoxNTo1NlrOHPJjTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDoxNTo1NlrOHPJjTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY0NzE4Mg==", "bodyText": "Nice! \ud83d\udc4d", "url": "https://github.com/quarkusio/quarkus/pull/11982#discussion_r485647182", "createdAt": "2020-09-09T14:15:56Z", "author": {"login": "gastaldi"}, "path": "extensions/kubernetes-client/runtime-internal/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesClientBuildConfig.java", "diffHunk": "@@ -88,6 +88,12 @@\n     @ConfigItem\n     public Optional<String> password;\n \n+    /**\n+     * Kubernetes oauth token\n+     */\n+    @ConfigItem\n+    public Optional<String> token;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c72e381f26192d0fe715572fbc9b37c35b6692ac"}, "originalPosition": 8}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "23afa0f66836ed9b744d252fe5e5737b86e79235", "author": {"user": {"login": "vsevel", "name": "Vincent Sevel"}}, "url": "https://github.com/quarkusio/quarkus/commit/23afa0f66836ed9b744d252fe5e5737b86e79235", "committedDate": "2020-09-14T15:43:11Z", "message": "Add OpenShift Client extension: doc"}, "afterCommit": {"oid": "2bd86b941f5e6f5ffecc689763da6ab68acef379", "author": {"user": {"login": "vsevel", "name": "Vincent Sevel"}}, "url": "https://github.com/quarkusio/quarkus/commit/2bd86b941f5e6f5ffecc689763da6ab68acef379", "committedDate": "2020-09-15T16:36:30Z", "message": "Add OpenShift Client extension"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2bd86b941f5e6f5ffecc689763da6ab68acef379", "author": {"user": {"login": "vsevel", "name": "Vincent Sevel"}}, "url": "https://github.com/quarkusio/quarkus/commit/2bd86b941f5e6f5ffecc689763da6ab68acef379", "committedDate": "2020-09-15T16:36:30Z", "message": "Add OpenShift Client extension"}, "afterCommit": {"oid": "d3762f1ee3480a2090172ab53cb8e832b2976532", "author": {"user": {"login": "vsevel", "name": "Vincent Sevel"}}, "url": "https://github.com/quarkusio/quarkus/commit/d3762f1ee3480a2090172ab53cb8e832b2976532", "committedDate": "2020-09-15T16:37:05Z", "message": "Add OpenShift Client extension"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d3762f1ee3480a2090172ab53cb8e832b2976532", "author": {"user": {"login": "vsevel", "name": "Vincent Sevel"}}, "url": "https://github.com/quarkusio/quarkus/commit/d3762f1ee3480a2090172ab53cb8e832b2976532", "committedDate": "2020-09-15T16:37:05Z", "message": "Add OpenShift Client extension"}, "afterCommit": {"oid": "b4069fa13c0529949dd69e2dd7df8eca48571de5", "author": {"user": {"login": "vsevel", "name": "Vincent Sevel"}}, "url": "https://github.com/quarkusio/quarkus/commit/b4069fa13c0529949dd69e2dd7df8eca48571de5", "committedDate": "2020-09-15T16:57:29Z", "message": "Add OpenShift Client extension"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNTc1NTgw", "url": "https://github.com/quarkusio/quarkus/pull/11982#pullrequestreview-490575580", "createdAt": "2020-09-17T13:11:15Z", "commit": {"oid": "fcbee1f0af407f4f9bb37f5f57a4945550165f24"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fcbee1f0af407f4f9bb37f5f57a4945550165f24", "author": {"user": {"login": "vsevel", "name": "Vincent Sevel"}}, "url": "https://github.com/quarkusio/quarkus/commit/fcbee1f0af407f4f9bb37f5f57a4945550165f24", "committedDate": "2020-09-16T12:13:31Z", "message": "Add OpenShift Client extension"}, "afterCommit": {"oid": "3404f81f85413e9d2429f39d73fc2a248fd22160", "author": {"user": {"login": "vsevel", "name": "Vincent Sevel"}}, "url": "https://github.com/quarkusio/quarkus/commit/3404f81f85413e9d2429f39d73fc2a248fd22160", "committedDate": "2020-09-18T06:50:36Z", "message": "Add OpenShift Client extension"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3404f81f85413e9d2429f39d73fc2a248fd22160", "author": {"user": {"login": "vsevel", "name": "Vincent Sevel"}}, "url": "https://github.com/quarkusio/quarkus/commit/3404f81f85413e9d2429f39d73fc2a248fd22160", "committedDate": "2020-09-18T06:50:36Z", "message": "Add OpenShift Client extension"}, "afterCommit": {"oid": "cfa7bce3c322aa4bc50d9a69121a15829367c49c", "author": {"user": {"login": "vsevel", "name": "Vincent Sevel"}}, "url": "https://github.com/quarkusio/quarkus/commit/cfa7bce3c322aa4bc50d9a69121a15829367c49c", "committedDate": "2020-09-21T10:54:21Z", "message": "Add OpenShift Client extension"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cfa7bce3c322aa4bc50d9a69121a15829367c49c", "author": {"user": {"login": "vsevel", "name": "Vincent Sevel"}}, "url": "https://github.com/quarkusio/quarkus/commit/cfa7bce3c322aa4bc50d9a69121a15829367c49c", "committedDate": "2020-09-21T10:54:21Z", "message": "Add OpenShift Client extension"}, "afterCommit": {"oid": "9faf666e3c080aad2e5ce32a05c5f06a6c04a750", "author": {"user": {"login": "vsevel", "name": "Vincent Sevel"}}, "url": "https://github.com/quarkusio/quarkus/commit/9faf666e3c080aad2e5ce32a05c5f06a6c04a750", "committedDate": "2020-10-02T17:27:20Z", "message": "Add OpenShift Client extension"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMzI0NTU3", "url": "https://github.com/quarkusio/quarkus/pull/11982#pullrequestreview-501324557", "createdAt": "2020-10-02T17:37:23Z", "commit": {"oid": "9faf666e3c080aad2e5ce32a05c5f06a6c04a750"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzozNzoyM1rOHb2BGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzozNzoyM1rOHb2BGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1ODYxOA==", "bodyText": "No biggie, but instead of storing it in an attribute to destroy later, I think you can pass it as a method argument.\nEg.\n@PreDestroy\npublic void destroy(KubernetesClient client) { \n   client.close();\n}", "url": "https://github.com/quarkusio/quarkus/pull/11982#discussion_r498958618", "createdAt": "2020-10-02T17:37:23Z", "author": {"login": "gastaldi"}, "path": "extensions/kubernetes-client/runtime/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesClientProducer.java", "diffHunk": "@@ -9,9 +9,11 @@\n import io.fabric8.kubernetes.client.KubernetesClient;\n import io.quarkus.arc.DefaultBean;\n \n-@ApplicationScoped\n+@Singleton\n public class KubernetesClientProducer {\n \n+    private KubernetesClient client;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9faf666e3c080aad2e5ce32a05c5f06a6c04a750"}, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9faf666e3c080aad2e5ce32a05c5f06a6c04a750", "author": {"user": {"login": "vsevel", "name": "Vincent Sevel"}}, "url": "https://github.com/quarkusio/quarkus/commit/9faf666e3c080aad2e5ce32a05c5f06a6c04a750", "committedDate": "2020-10-02T17:27:20Z", "message": "Add OpenShift Client extension"}, "afterCommit": {"oid": "b2452b220fb1dbfabaaec14b6958a6acbd61d2e4", "author": {"user": {"login": "vsevel", "name": "Vincent Sevel"}}, "url": "https://github.com/quarkusio/quarkus/commit/b2452b220fb1dbfabaaec14b6958a6acbd61d2e4", "committedDate": "2020-10-02T17:52:35Z", "message": "Add OpenShift Client extension"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMzUwNDcz", "url": "https://github.com/quarkusio/quarkus/pull/11982#pullrequestreview-501350473", "createdAt": "2020-10-02T18:16:28Z", "commit": {"oid": "b2452b220fb1dbfabaaec14b6958a6acbd61d2e4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODoxNjoyOVrOHb3MPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODoxNjoyOVrOHb3MPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk3Nzg1NA==", "bodyText": "This needs to be\n public void destroy(@Observes @Destroyed OpenShiftClient client) {\n...\n}\nAFAIK", "url": "https://github.com/quarkusio/quarkus/pull/11982#discussion_r498977854", "createdAt": "2020-10-02T18:16:29Z", "author": {"login": "gastaldi"}, "path": "extensions/openshift-client/runtime/src/main/java/io/quarkus/it/openshift/client/runtime/OpenShiftClientProducer.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package io.quarkus.it.openshift.client.runtime;\n+\n+import javax.annotation.PreDestroy;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Singleton;\n+\n+import io.fabric8.kubernetes.client.Config;\n+import io.fabric8.openshift.client.DefaultOpenShiftClient;\n+import io.fabric8.openshift.client.OpenShiftClient;\n+import io.quarkus.arc.DefaultBean;\n+\n+@Singleton\n+public class OpenShiftClientProducer {\n+\n+    @DefaultBean\n+    @Singleton\n+    @Produces\n+    public OpenShiftClient openshiftClient(Config config) {\n+        return new DefaultOpenShiftClient(config);\n+    }\n+\n+    @PreDestroy\n+    public void destroy(OpenShiftClient client) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2452b220fb1dbfabaaec14b6958a6acbd61d2e4"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMzc0Mjcw", "url": "https://github.com/quarkusio/quarkus/pull/11982#pullrequestreview-501374270", "createdAt": "2020-10-02T18:54:52Z", "commit": {"oid": "b2452b220fb1dbfabaaec14b6958a6acbd61d2e4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b2452b220fb1dbfabaaec14b6958a6acbd61d2e4", "author": {"user": {"login": "vsevel", "name": "Vincent Sevel"}}, "url": "https://github.com/quarkusio/quarkus/commit/b2452b220fb1dbfabaaec14b6958a6acbd61d2e4", "committedDate": "2020-10-02T17:52:35Z", "message": "Add OpenShift Client extension"}, "afterCommit": {"oid": "687e71e695ed751a1101298179db97eb4760f5b7", "author": {"user": {"login": "vsevel", "name": "Vincent Sevel"}}, "url": "https://github.com/quarkusio/quarkus/commit/687e71e695ed751a1101298179db97eb4760f5b7", "committedDate": "2020-10-02T21:42:53Z", "message": "Add OpenShift Client extension"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "687e71e695ed751a1101298179db97eb4760f5b7", "author": {"user": {"login": "vsevel", "name": "Vincent Sevel"}}, "url": "https://github.com/quarkusio/quarkus/commit/687e71e695ed751a1101298179db97eb4760f5b7", "committedDate": "2020-10-02T21:42:53Z", "message": "Add OpenShift Client extension"}, "afterCommit": {"oid": "be062c0eba75e95a4452d08741e703f28b0c292b", "author": {"user": {"login": "vsevel", "name": "Vincent Sevel"}}, "url": "https://github.com/quarkusio/quarkus/commit/be062c0eba75e95a4452d08741e703f28b0c292b", "committedDate": "2020-10-03T06:49:06Z", "message": "Add OpenShift Client extension"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNTQyNjUw", "url": "https://github.com/quarkusio/quarkus/pull/11982#pullrequestreview-501542650", "createdAt": "2020-10-03T12:26:48Z", "commit": {"oid": "be062c0eba75e95a4452d08741e703f28b0c292b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c475204c98ad22b0de3c0a7c6382fd414aa0363", "author": {"user": {"login": "vsevel", "name": "Vincent Sevel"}}, "url": "https://github.com/quarkusio/quarkus/commit/6c475204c98ad22b0de3c0a7c6382fd414aa0363", "committedDate": "2020-10-06T09:19:27Z", "message": "Add OpenShift Client extension"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "be062c0eba75e95a4452d08741e703f28b0c292b", "author": {"user": {"login": "vsevel", "name": "Vincent Sevel"}}, "url": "https://github.com/quarkusio/quarkus/commit/be062c0eba75e95a4452d08741e703f28b0c292b", "committedDate": "2020-10-03T06:49:06Z", "message": "Add OpenShift Client extension"}, "afterCommit": {"oid": "6c475204c98ad22b0de3c0a7c6382fd414aa0363", "author": {"user": {"login": "vsevel", "name": "Vincent Sevel"}}, "url": "https://github.com/quarkusio/quarkus/commit/6c475204c98ad22b0de3c0a7c6382fd414aa0363", "committedDate": "2020-10-06T09:19:27Z", "message": "Add OpenShift Client extension"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 589, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}