{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNjAxMTgx", "number": 9567, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOToyODozOFrOD_UsTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOTozMDowNFrOD_UuEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzI1OTAzOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/consul-config.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOToyODozOFrOGZ6-fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOToyODozOFrOGZ6-fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgzMzg1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This Key-Value store is what the `quarkus-consul-config` extension interacts with in order to allow Quarkus application to read runtime configuration properties from Consul.\n          \n          \n            \n            This Key-Value store is what the `quarkus-consul-config` extension interacts with in order to allow Quarkus applications to read runtime configuration properties from Consul.", "url": "https://github.com/quarkusio/quarkus/pull/9567#discussion_r429833855", "createdAt": "2020-05-25T09:28:38Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/consul-config.adoc", "diffHunk": "@@ -0,0 +1,176 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Consul\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide explains how your Quarkus application can read configuration properties at runtime from https://www.consul.io[Consul].\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+\n+== Introduction\n+\n+Consul is a versatile system which among other things, provides a distributed Key-Value store that is used in many architectures as a source of configuration for services.\n+This Key-Value store is what the `quarkus-consul-config` extension interacts with in order to allow Quarkus application to read runtime configuration properties from Consul.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cfb94ba92c609dd1da403f92b63aca74593cba2"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzI2MzU1OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/consul-config.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOTozMDowNFrOGZ7BMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOTozMDowNFrOGZ7BMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgzNDU0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # this is a key in Consul's KV store that the Quarkus application will read and try to extra properties from\n          \n          \n            \n            # this is a key in Consul's KV store that the Quarkus application will read and try to extract properties from", "url": "https://github.com/quarkusio/quarkus/pull/9567#discussion_r429834546", "createdAt": "2020-05-25T09:30:04Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/consul-config.adoc", "diffHunk": "@@ -0,0 +1,176 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Consul\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide explains how your Quarkus application can read configuration properties at runtime from https://www.consul.io[Consul].\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+\n+== Introduction\n+\n+Consul is a versatile system which among other things, provides a distributed Key-Value store that is used in many architectures as a source of configuration for services.\n+This Key-Value store is what the `quarkus-consul-config` extension interacts with in order to allow Quarkus application to read runtime configuration properties from Consul.\n+\n+== Starting Consul\n+\n+There are various ways to start Consul that vary in complexity, but for the purposes of this guide, we elect to start a single Consul server with no persistence via Docker, like so:\n+\n+[source]\n+----\n+docker run --rm --name consul -p 8500:8500 -p 8501:8501 consul:1.7 agent -dev -ui -client=0.0.0.0 -bind=0.0.0.0 --https-port=8501\n+----\n+\n+Please consult the https://www.consul.io/docs/install[documentation] to learn more about the various Consul installation options.\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=consul-config-quickstart \\\n+    -DclassName=\"org.acme.consul.config.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"consul-config\"\n+cd consul-config-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `consul-config` extension.\n+\n+If you already have your Quarkus project configured, you can add the `consul-config` extension\n+to your project by running the following command in your project base directory:\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"consul-config\"\n+----\n+\n+This will add the following to your `pom.xml`:\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.quarkus</groupId>\n+    <artifactId>quarkus-consul-config</artifactId>\n+</dependency>\n+----\n+\n+== GreetingController\n+\n+The Quarkus Maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n+`src/main/java/org/acme/consul/config/client/GreetingResource.java` file that looks like:\n+\n+[source,java]\n+----\n+package org.acme.consul.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+As we want to use configuration properties obtained from the Config Server, we will update the `GreetingResource` to inject the `message` property. The updated code will look like this:\n+\n+[source,java]\n+----\n+package org.acme.consul.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @ConfigProperty(name = \"message\", defaultValue=\"Hello from default\")\n+    String message;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return message;\n+    }\n+}\n+----\n+\n+== Configuring the application\n+\n+Quarkus provides various configuration knobs under the `quarkus.consul-config` root. For the purposes of this guide, our Quarkus application is going to be configured in `application.properties` as follows:\n+\n+[source,properties]\n+----\n+# use the same name as the application name that was configured when standing up the Config Server\n+quarkus.application.name=consul-test\n+# enable retrieval of configuration from Consul - this is off by default\n+quarkus.consul-config.enabled=true\n+# this is a key in Consul's KV store that the Quarkus application will read and try to extra properties from", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cfb94ba92c609dd1da403f92b63aca74593cba2"}, "originalPosition": 142}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2989, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}