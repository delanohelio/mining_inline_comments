{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5NTI0MTIy", "number": 11446, "title": "Add a new builder identity copy method, reverse links to all security docs, client cert example", "bodyText": "This PR:\n\nadds the example from Ladislav @Ladicek\nadds the reverse links from all the security docs to the parent securty.doc\nadds a new identity builder method to simplify copying the existing identity properties\nFixes a link from the code flow SPA section to service SPA section\n\n@Ladicek I'm not marking this PR as the one which provides a fix for #11434, if you think it can be sufficient at this stage then update it", "createdAt": "2020-08-18T14:09:29Z", "url": "https://github.com/quarkusio/quarkus/pull/11446", "merged": true, "mergeCommit": {"oid": "c0d5f00af76fbf6fc53a27e94014b53b099fb3d7"}, "closed": true, "closedAt": "2020-08-19T08:12:29Z", "author": {"login": "sberyozkin"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAHyF0gFqTQ2OTUwNDc5Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAPjBiAFqTQ2OTg5NTAyMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NTA0Nzk3", "url": "https://github.com/quarkusio/quarkus/pull/11446#pullrequestreview-469504797", "createdAt": "2020-08-18T14:21:17Z", "commit": {"oid": "b5c8d2e95014f939484c71bd2320245c7c2177f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDoyMToxN1rOHCW6sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDoyMToxN1rOHCW6sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIzNDY3Mg==", "bodyText": "I'd like to understand what's the point of moving this work to the worker pool, because everything we do here is in-memory and probably much faster than a thread context switch.", "url": "https://github.com/quarkusio/quarkus/pull/11446#discussion_r472234672", "createdAt": "2020-08-18T14:21:17Z", "author": {"login": "Ladicek"}, "path": "docs/src/main/asciidoc/security-customization.adoc", "diffHunk": "@@ -95,6 +92,65 @@ public class RolesAugmentor implements SecurityIdentityAugmentor {\n }\n ----\n \n+Here is another example showing how to use the client certificate available in the current link:security-built-in-authentication#mutual-tls[Mutual TLS] request to add more roles:\n+\n+[source,java]\n+----\n+import java.security.cert.X509Certificate;\n+import io.quarkus.security.credential.CertificateCredential;\n+import io.quarkus.security.identity.AuthenticationRequestContext;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.quarkus.security.identity.SecurityIdentityAugmentor;\n+import io.quarkus.security.runtime.QuarkusSecurityIdentity;\n+import io.smallrye.mutiny.Uni;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import java.util.function.Supplier;\n+import java.util.Set;\n+\n+@ApplicationScoped\n+public class RolesAugmentor implements SecurityIdentityAugmentor {\n+\n+    @Override\n+    public int priority() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public Uni<SecurityIdentity> augment(SecurityIdentity identity, AuthenticationRequestContext context) {\n+        return context.runBlocking(build(identity));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5c8d2e95014f939484c71bd2320245c7c2177f9"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NTA3Njcy", "url": "https://github.com/quarkusio/quarkus/pull/11446#pullrequestreview-469507672", "createdAt": "2020-08-18T14:24:11Z", "commit": {"oid": "b5c8d2e95014f939484c71bd2320245c7c2177f9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NTA4MDM4", "url": "https://github.com/quarkusio/quarkus/pull/11446#pullrequestreview-469508038", "createdAt": "2020-08-18T14:24:33Z", "commit": {"oid": "b5c8d2e95014f939484c71bd2320245c7c2177f9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDoyNDozM1rOHCXDwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDoyNjowM1rOHCXIGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIzNjk5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If you do prefer to use SPA and `XMLHttpRequest`(XHR) with Quarkus `web-app` applications then please be aware that OpenId Connect Providers may not support CORS for Authorization endpoints where the users are authenticated after a redirect from Quarkus which will lead to the authentication failures if the Quarkus `web-app` application and OpenId Connect Provider are hosted on the different HTTP domains/ports.\n          \n          \n            \n            If you prefer to use SPA and `XMLHttpRequest`(XHR) with Quarkus applications, please be aware that OpenID Connect Providers may not support CORS for Authorization endpoints where the users are authenticated after a redirect from Quarkus. This will lead to authentication failures if the Quarkus application and the OpenID Connect Provider are hosted on the different HTTP domains/ports.", "url": "https://github.com/quarkusio/quarkus/pull/11446#discussion_r472236994", "createdAt": "2020-08-18T14:24:33Z", "author": {"login": "gastaldi"}, "path": "docs/src/main/asciidoc/security-openid-connect-web-authentication.adoc", "diffHunk": "@@ -287,10 +287,9 @@ If UserInfo is the source of the roles then set `quarkus.oidc.user-info-required\n \n Please check if implementing SPAs the way it is suggested in the link:security-openid-connect#single-page-applications[Single Page Applications for Service Applications] section can meet your requirements.\n \n-If you do prefer to use SPA and `XMLHttpRequest`(XHR) with Quarkus `web-app` applications then please be aware that OpenId Connect Providers may not support CORS for Authorization endpoints where the users\n- are authenticated after a redirect from Quarkus which will lead to the authentication failures if the Quarkus `web-app` application and OpenId Connect Provider are hosted on the different HTTP domains/ports.\n+If you do prefer to use SPA and `XMLHttpRequest`(XHR) with Quarkus `web-app` applications then please be aware that OpenId Connect Providers may not support CORS for Authorization endpoints where the users are authenticated after a redirect from Quarkus which will lead to the authentication failures if the Quarkus `web-app` application and OpenId Connect Provider are hosted on the different HTTP domains/ports.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5c8d2e95014f939484c71bd2320245c7c2177f9"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIzODEwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In such cases one needs to set the `quarkus.oidc.authentication.xhr-auto-redirect` property to `false` which will instruct Quarkus to return a `499` status code and `WWW-Authenticate` header with the `OIDC` value and the browser script needs to be updated to set `X-Requested-With` header with the `XMLHttpRequest` value and reload the last requested page in case of `499`, for example:\n          \n          \n            \n            In such cases, set the `quarkus.oidc.authentication.xhr-auto-redirect` property to `false` which will instruct Quarkus to return a `499` status code and `WWW-Authenticate` header with the `OIDC` value. The browser script also needs to be updated to set `X-Requested-With` header with the `XMLHttpRequest` value and reload the last requested page in case of `499`, for example:", "url": "https://github.com/quarkusio/quarkus/pull/11446#discussion_r472238105", "createdAt": "2020-08-18T14:26:03Z", "author": {"login": "gastaldi"}, "path": "docs/src/main/asciidoc/security-openid-connect-web-authentication.adoc", "diffHunk": "@@ -287,10 +287,9 @@ If UserInfo is the source of the roles then set `quarkus.oidc.user-info-required\n \n Please check if implementing SPAs the way it is suggested in the link:security-openid-connect#single-page-applications[Single Page Applications for Service Applications] section can meet your requirements.\n \n-If you do prefer to use SPA and `XMLHttpRequest`(XHR) with Quarkus `web-app` applications then please be aware that OpenId Connect Providers may not support CORS for Authorization endpoints where the users\n- are authenticated after a redirect from Quarkus which will lead to the authentication failures if the Quarkus `web-app` application and OpenId Connect Provider are hosted on the different HTTP domains/ports.\n+If you do prefer to use SPA and `XMLHttpRequest`(XHR) with Quarkus `web-app` applications then please be aware that OpenId Connect Providers may not support CORS for Authorization endpoints where the users are authenticated after a redirect from Quarkus which will lead to the authentication failures if the Quarkus `web-app` application and OpenId Connect Provider are hosted on the different HTTP domains/ports.\n \n-In such cases one needs to set the `quarkus.oidc.authentication.xhr-auto-redirect` property to `false` which will instruct Quarkus to return a `499` status code and `WWW-Authenticate` header with the `OIDC` value and the browser script needs to be updated to set \"X-Requested-With\" header with the `XMLHttpRequest` value and reload the last requested page in case of `499`, for example:\n+In such cases one needs to set the `quarkus.oidc.authentication.xhr-auto-redirect` property to `false` which will instruct Quarkus to return a `499` status code and `WWW-Authenticate` header with the `OIDC` value and the browser script needs to be updated to set `X-Requested-With` header with the `XMLHttpRequest` value and reload the last requested page in case of `499`, for example:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5c8d2e95014f939484c71bd2320245c7c2177f9"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05b1685199d549988943304b758527534e5dff5a", "author": {"user": {"login": "sberyozkin", "name": null}}, "url": "https://github.com/quarkusio/quarkus/commit/05b1685199d549988943304b758527534e5dff5a", "committedDate": "2020-08-18T15:17:38Z", "message": "Add a new builder identity copy method, reverse links to all security docs, client cert example"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b5c8d2e95014f939484c71bd2320245c7c2177f9", "author": {"user": {"login": "sberyozkin", "name": null}}, "url": "https://github.com/quarkusio/quarkus/commit/b5c8d2e95014f939484c71bd2320245c7c2177f9", "committedDate": "2020-08-18T14:05:01Z", "message": "Add a new builder identity copy method, reverse links to all security docs, client cert example"}, "afterCommit": {"oid": "05b1685199d549988943304b758527534e5dff5a", "author": {"user": {"login": "sberyozkin", "name": null}}, "url": "https://github.com/quarkusio/quarkus/commit/05b1685199d549988943304b758527534e5dff5a", "committedDate": "2020-08-18T15:17:38Z", "message": "Add a new builder identity copy method, reverse links to all security docs, client cert example"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5ODk1MDIw", "url": "https://github.com/quarkusio/quarkus/pull/11446#pullrequestreview-469895020", "createdAt": "2020-08-18T23:24:04Z", "commit": {"oid": "05b1685199d549988943304b758527534e5dff5a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 809, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}