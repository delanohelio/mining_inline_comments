{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MjQwMTc5", "number": 13501, "title": "Update OpenShift doc to account for new environment variable options", "bodyText": "", "createdAt": "2020-11-26T19:24:10Z", "url": "https://github.com/quarkusio/quarkus/pull/13501", "merged": true, "mergeCommit": {"oid": "819fea1308b1cb259040f8286ae0046876714ae8"}, "closed": true, "closedAt": "2020-11-27T17:34:40Z", "author": {"login": "metacosm"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgaUAqAFqTUzOTU1MzA5MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgrFUEAFqTU0MDExNjcwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5NTUzMDkw", "url": "https://github.com/quarkusio/quarkus/pull/13501#pullrequestreview-539553090", "createdAt": "2020-11-26T21:23:05Z", "commit": {"oid": "4c8fff2c6cc7687e3bce15f8a35e20baa1777f32"}, "state": "DISMISSED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQyMToyMzowNVrOH6nlJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQyMjowMTo1MlrOH6oFUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIyNzk0MQ==", "bodyText": "Hmmm, no :).", "url": "https://github.com/quarkusio/quarkus/pull/13501#discussion_r531227941", "createdAt": "2020-11-26T21:23:05Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/deploying-to-openshift.adoc", "diffHunk": "@@ -23,7 +23,7 @@ To complete this guide, you need:\n \n == Creating the Maven project\n \n-First, we need a new project that contains the OpenShift extension. This can be done using the following command:\n+First, we need a new project that contains the OpenShift extension.This can be done using the following command:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8fff2c6cc7687e3bce15f8a35e20baa1777f32"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIzNjEyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Previous versions of the OpenShift extension supported a different syntax to add environment variables.The older syntax is still supported but is deprecated and it's advised that you migrate to the new syntax.\n          \n          \n            \n            Previous versions of the OpenShift extension supported a different syntax to add environment variables. The older syntax is still supported but is deprecated and it's advised that you migrate to the new syntax.", "url": "https://github.com/quarkusio/quarkus/pull/13501#discussion_r531236127", "createdAt": "2020-11-26T22:01:37Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/deploying-to-openshift.adoc", "diffHunk": "@@ -193,39 +193,152 @@ To add an annotation in the generated resources:\n quarkus.openshift.annotations.foo=bar\n ----\n \n+[#env-vars]\n ==== Environment variables\n \n-To add an annotation in the generated resources:\n+OpenShift provides multiple ways of defining environment variables:\n+\n+- key/value pairs\n+- import all values from a Secret or ConfigMap\n+- interpolate a single value identified by a given field in a Secret or ConfigMap\n+- interpolate a value from a field within the same resource\n+\n+===== Environment variables from key/value pairs\n+\n+To add a key/value pair as an environment variable in the generated resources:\n \n [source,properties]\n ----\n-quarkus.openshift.env-vars.my-env-var.value=foobar\n+quarkus.openshift.env.vars.my-env-var=foobar\n ----\n \n The command above will add `MY_ENV_VAR=foobar` as an environment variable.\n Please note that the key `my-env-var` will be converted to uppercase and dashes will be replaced by underscores resulting in `MY_ENV_VAR`.\n \n-You may also noticed that in contrast to labels, and annotations for environment variables you don't just use a key=value approach.\n-That is because for environment variables there are additional options rather than just value.\n-\n ===== Environment variables from Secret\n \n-To add all key value pairs of a `Secret` as environment variables:\n+To add all key/value pairs of `Secret` as environment variables just apply the following configuration, separating each `Secret`\n+to be used as source by a comma (`,`):\n+\n+[source,properties]\n+----\n+quarkus.openshift.env.secrets=my-secret,my-other-secret\n+----\n+\n+which would generate the following in the container definition:\n+\n+[source,yaml]\n+----\n+envFrom:\n+  - secretRef:\n+      name: my-secret\n+      optional: false\n+  - secretRef:\n+      name: my-other-secret\n+      optional: false\n+----\n+\n+The following extracts a value identified by the `keyName` field from the `my-secret` Secret into a `foo` environment variable:\n \n [source,properties]\n ----\n-quarkus.openshift.env-vars.my-env-var.secret=my-secret\n+quarkus.openshift.env.mapping.foo.from-secret=my-secret\n+quarkus.openshift.env.mapping.foo.with-key=keyName\n+----\n+\n+This would generate the following in the `env` section of your container:\n+\n+[source,yaml]\n+----\n+- env:\n+  - name: FOO\n+    valueFrom:\n+      secretKeyRef:\n+        key: keyName\n+        name: my-secret\n+        optional: false\n ----\n \n ===== Environment variables from ConfigMap\n \n-To add all key value pairs of a `ConfigMap` as environment variables:\n+To add all key/value pairs from `ConfigMap` as environment variables just apply the following configuration, separating each\n+`ConfigMap` to be used as source by a comma (`,`):\n \n [source,properties]\n ----\n-quarkus.openshift.env-vars.my-env-var.configmap=my-secret\n+quarkus.openshift.env.configmaps=my-config-map,another-config-map\n+----\n+\n+which would generate the following in the container definition:\n+\n+[source,yaml]\n+----\n+envFrom:\n+  - configMapRef:\n+      name: my-config-map\n+      optional: false\n+  - configMapRef:\n+      name: another-config-map\n+      optional: false\n ----\n \n+The following extracts a value identified by the `keyName` field from the `my-config-map` ConfigMap into a `foo`\n+environment variable:\n+\n+[source,properties]\n+----\n+quarkus.openshift.env.mapping.foo.from-configmap=my-configmap\n+quarkus.openshift.env.mapping.foo.with-key=keyName\n+----\n+\n+This would generate the following in the `env` section of your container:\n+\n+[source,yaml]\n+----\n+- env:\n+  - name: FOO\n+    valueFrom:\n+      configMapRefKey:\n+        key: keyName\n+        name: my-configmap\n+        optional: false\n+----\n+\n+===== Environment variables from fields\n+\n+It's also possible to use the value from another field to add a new environment variable by specifying the path of the field to be used as a source, as follows:\n+\n+[source,properties]\n+----\n+quarkus.openshift.env.fields.foo=metadata.name\n+----\n+\n+===== Validation\n+\n+A conflict between two definitions, e.g. mistakenly assigning both a value and specifying that a variable is derived from a field, will result in an error being thrown at build time so that you get the opportunity to fix the issue before you deploy your application to your cluster where it might be more difficult to diagnose the source of the issue.\n+\n+Similarly, two redundant definitions, e.g. defining an injection from the same secret twice, will not cause an issue but will indeed report a warning to let you know that you might not have intended to duplicate that definition.\n+\n+[#env-vars-backwards]\n+===== Backwards compatibility\n+\n+Previous versions of the OpenShift extension supported a different syntax to add environment variables.The older syntax is still supported but is deprecated and it's advised that you migrate to the new syntax.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8fff2c6cc7687e3bce15f8a35e20baa1777f32"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIzNjE3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            NOTE: If you redefine the same variable using the new syntax while keeping the old syntax, **ONLY** the new version will be kept and a warning will be issued to alert you of the problem.For example, if you define both\n          \n          \n            \n            NOTE: If you redefine the same variable using the new syntax while keeping the old syntax, **ONLY** the new version will be kept and a warning will be issued to alert you of the problem. For example, if you define both", "url": "https://github.com/quarkusio/quarkus/pull/13501#discussion_r531236178", "createdAt": "2020-11-26T22:01:52Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/deploying-to-openshift.adoc", "diffHunk": "@@ -193,39 +193,152 @@ To add an annotation in the generated resources:\n quarkus.openshift.annotations.foo=bar\n ----\n \n+[#env-vars]\n ==== Environment variables\n \n-To add an annotation in the generated resources:\n+OpenShift provides multiple ways of defining environment variables:\n+\n+- key/value pairs\n+- import all values from a Secret or ConfigMap\n+- interpolate a single value identified by a given field in a Secret or ConfigMap\n+- interpolate a value from a field within the same resource\n+\n+===== Environment variables from key/value pairs\n+\n+To add a key/value pair as an environment variable in the generated resources:\n \n [source,properties]\n ----\n-quarkus.openshift.env-vars.my-env-var.value=foobar\n+quarkus.openshift.env.vars.my-env-var=foobar\n ----\n \n The command above will add `MY_ENV_VAR=foobar` as an environment variable.\n Please note that the key `my-env-var` will be converted to uppercase and dashes will be replaced by underscores resulting in `MY_ENV_VAR`.\n \n-You may also noticed that in contrast to labels, and annotations for environment variables you don't just use a key=value approach.\n-That is because for environment variables there are additional options rather than just value.\n-\n ===== Environment variables from Secret\n \n-To add all key value pairs of a `Secret` as environment variables:\n+To add all key/value pairs of `Secret` as environment variables just apply the following configuration, separating each `Secret`\n+to be used as source by a comma (`,`):\n+\n+[source,properties]\n+----\n+quarkus.openshift.env.secrets=my-secret,my-other-secret\n+----\n+\n+which would generate the following in the container definition:\n+\n+[source,yaml]\n+----\n+envFrom:\n+  - secretRef:\n+      name: my-secret\n+      optional: false\n+  - secretRef:\n+      name: my-other-secret\n+      optional: false\n+----\n+\n+The following extracts a value identified by the `keyName` field from the `my-secret` Secret into a `foo` environment variable:\n \n [source,properties]\n ----\n-quarkus.openshift.env-vars.my-env-var.secret=my-secret\n+quarkus.openshift.env.mapping.foo.from-secret=my-secret\n+quarkus.openshift.env.mapping.foo.with-key=keyName\n+----\n+\n+This would generate the following in the `env` section of your container:\n+\n+[source,yaml]\n+----\n+- env:\n+  - name: FOO\n+    valueFrom:\n+      secretKeyRef:\n+        key: keyName\n+        name: my-secret\n+        optional: false\n ----\n \n ===== Environment variables from ConfigMap\n \n-To add all key value pairs of a `ConfigMap` as environment variables:\n+To add all key/value pairs from `ConfigMap` as environment variables just apply the following configuration, separating each\n+`ConfigMap` to be used as source by a comma (`,`):\n \n [source,properties]\n ----\n-quarkus.openshift.env-vars.my-env-var.configmap=my-secret\n+quarkus.openshift.env.configmaps=my-config-map,another-config-map\n+----\n+\n+which would generate the following in the container definition:\n+\n+[source,yaml]\n+----\n+envFrom:\n+  - configMapRef:\n+      name: my-config-map\n+      optional: false\n+  - configMapRef:\n+      name: another-config-map\n+      optional: false\n ----\n \n+The following extracts a value identified by the `keyName` field from the `my-config-map` ConfigMap into a `foo`\n+environment variable:\n+\n+[source,properties]\n+----\n+quarkus.openshift.env.mapping.foo.from-configmap=my-configmap\n+quarkus.openshift.env.mapping.foo.with-key=keyName\n+----\n+\n+This would generate the following in the `env` section of your container:\n+\n+[source,yaml]\n+----\n+- env:\n+  - name: FOO\n+    valueFrom:\n+      configMapRefKey:\n+        key: keyName\n+        name: my-configmap\n+        optional: false\n+----\n+\n+===== Environment variables from fields\n+\n+It's also possible to use the value from another field to add a new environment variable by specifying the path of the field to be used as a source, as follows:\n+\n+[source,properties]\n+----\n+quarkus.openshift.env.fields.foo=metadata.name\n+----\n+\n+===== Validation\n+\n+A conflict between two definitions, e.g. mistakenly assigning both a value and specifying that a variable is derived from a field, will result in an error being thrown at build time so that you get the opportunity to fix the issue before you deploy your application to your cluster where it might be more difficult to diagnose the source of the issue.\n+\n+Similarly, two redundant definitions, e.g. defining an injection from the same secret twice, will not cause an issue but will indeed report a warning to let you know that you might not have intended to duplicate that definition.\n+\n+[#env-vars-backwards]\n+===== Backwards compatibility\n+\n+Previous versions of the OpenShift extension supported a different syntax to add environment variables.The older syntax is still supported but is deprecated and it's advised that you migrate to the new syntax.\n+\n+.Old vs. new syntax\n+|====\n+|                               |Old                                                    | New                                                 |\n+| Plain variable                |`quarkus.openshift.env-vars.my-env-var.value=foobar`  | `quarkus.openshift.env.vars.my-env-var=foobar`     |\n+| From field                    |`quarkus.openshift.env-vars.my-env-var.field=foobar`  | `quarkus.openshift.env.fields.my-env-var=foobar`   |\n+| All from `ConfigMap`          |`quarkus.openshift.env-vars.xxx.configmap=foobar`     | `quarkus.openshift.env.configmaps=foobar`          |\n+| All from `Secret`             |`quarkus.openshift.env-vars.xxx.secret=foobar`        | `quarkus.openshift.env.secrets=foobar`             |\n+| From one `Secret` field       |`quarkus.openshift.env-vars.foo.secret=foobar`        | `quarkus.openshift.env.mapping.foo.from-secret=foobar` |\n+|                               |`quarkus.openshift.env-vars.foo.value=field`          | `quarkus.openshift.env.mapping.foo.with-key=field` |\n+| From one `ConfigMap` field    |`quarkus.openshift.env-vars.foo.configmap=foobar`     | `quarkus.openshift.env.mapping.foo.from-configmap=foobar` |\n+|                               |`quarkus.openshift.env-vars.foo.value=field`          | `quarkus.openshift.env.mapping.foo.with-key=field` |\n+|====\n+\n+NOTE: If you redefine the same variable using the new syntax while keeping the old syntax, **ONLY** the new version will be kept and a warning will be issued to alert you of the problem.For example, if you define both", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8fff2c6cc7687e3bce15f8a35e20baa1777f32"}, "originalPosition": 166}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d4b85e4ec71c8e05cc3c87c03920c81a3923331", "author": {"user": {"login": "metacosm", "name": "Chris Laprun"}}, "url": "https://github.com/quarkusio/quarkus/commit/1d4b85e4ec71c8e05cc3c87c03920c81a3923331", "committedDate": "2020-11-27T07:56:32Z", "message": "fix: update doc to account for new environment variable options"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4c8fff2c6cc7687e3bce15f8a35e20baa1777f32", "author": {"user": {"login": "metacosm", "name": "Chris Laprun"}}, "url": "https://github.com/quarkusio/quarkus/commit/4c8fff2c6cc7687e3bce15f8a35e20baa1777f32", "committedDate": "2020-11-26T19:23:02Z", "message": "fix: update doc to account for new environment variable options"}, "afterCommit": {"oid": "1d4b85e4ec71c8e05cc3c87c03920c81a3923331", "author": {"user": {"login": "metacosm", "name": "Chris Laprun"}}, "url": "https://github.com/quarkusio/quarkus/commit/1d4b85e4ec71c8e05cc3c87c03920c81a3923331", "committedDate": "2020-11-27T07:56:32Z", "message": "fix: update doc to account for new environment variable options"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMTE2NzAz", "url": "https://github.com/quarkusio/quarkus/pull/13501#pullrequestreview-540116703", "createdAt": "2020-11-27T17:34:32Z", "commit": {"oid": "1d4b85e4ec71c8e05cc3c87c03920c81a3923331"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1310, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}