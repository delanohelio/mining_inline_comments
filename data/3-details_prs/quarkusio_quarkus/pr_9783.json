{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3Nzc5NDYz", "number": 9783, "title": "updated the cli to work similar as the maven and gradle tools", "bodyText": "To test: java -jar target/quarkus-cli-999-SNAPSHOT.jar\nThat should list the possible commands. Use --help for additional info for each command.\nIf you run eg: java -jar target/quarkus-cli-999-SNAPSHOT.jar create-project it will prompt the user for different values, not all the options are prompted atm.\nTo test interactive mode, use: java -jar target/quarkus-cli-999-SNAPSHOT.jar -i\nTo create a native image use: mvn install -Dnative-image", "createdAt": "2020-06-04T11:46:53Z", "url": "https://github.com/quarkusio/quarkus/pull/9783", "merged": true, "mergeCommit": {"oid": "ed73ae59a398b6a26fa8e495ab84371c82597ec6"}, "closed": true, "closedAt": "2020-06-16T13:25:29Z", "author": {"login": "stalep"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcn80SugFqTQyNDM2OTgwNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcr1ESwgFqTQzMTQ4ODUyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MzY5ODA0", "url": "https://github.com/quarkusio/quarkus/pull/9783#pullrequestreview-424369804", "createdAt": "2020-06-04T12:00:32Z", "commit": {"oid": "df03348cca2c006daf459b6e4ea823ae448b2386"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjowMDozMlrOGfCc8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjowMDozMlrOGfCc8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5OTIxNw==", "bodyText": "I guess, it's fine to keep as you are doing a refactoring here but this getGlobalDefault() should not be used. We should get rid of it ASAP. You may be the only one using it now.", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r435199217", "createdAt": "2020-06-04T12:00:32Z", "author": {"login": "aloubyansky"}, "path": "devtools/aesh/src/main/java/io/quarkus/cli/commands/AddExtensionCommand.java", "diffHunk": "@@ -1,73 +1,74 @@\n package io.quarkus.cli.commands;\n \n+import java.io.IOException;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n-import java.util.Collections;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n import org.aesh.command.Command;\n import org.aesh.command.CommandDefinition;\n import org.aesh.command.CommandException;\n import org.aesh.command.CommandResult;\n import org.aesh.command.invocation.CommandInvocation;\n-import org.aesh.command.option.Argument;\n import org.aesh.command.option.Option;\n+import org.aesh.command.option.OptionList;\n import org.aesh.io.Resource;\n+import org.aesh.selector.MultiSelect;\n \n import io.quarkus.dependencies.Extension;\n import io.quarkus.devtools.project.QuarkusProject;\n-import io.quarkus.platform.descriptor.QuarkusPlatformDescriptor;\n import io.quarkus.platform.tools.config.QuarkusPlatformConfig;\n \n-/**\n- * @author <a href=\"mailto:stalep@gmail.com\">St\u00e5le Pedersen</a>\n- */\n-@CommandDefinition(name = \"add-extension\", description = \"Adds extensions to a project\")\n+@CommandDefinition(name = AddExtensions.NAME, description = \"Adds extensions to a project\")\n public class AddExtensionCommand implements Command<CommandInvocation> {\n \n-    @Option(shortName = 'h', hasValue = false, overrideRequired = true)\n-    private boolean help;\n+    @OptionList(shortName = 'e', //selector = SelectorType.SELECTIONS,\n+            completer = ExtensionCompleter.class, description = \"Name of the extension that will be added to the project\")\n+    private Set<String> extensions;\n \n-    @Option(shortName = 'e', required = true, description = \"Name of the extension that will be added to the project\")\n-    private String extension;\n-\n-    @Argument(description = \"path to the project\", required = true)\n+    @Option(shortName = 'p', description = \"Path to the project, if not set it will use the current working directory\")\n     private Resource path;\n \n     @Override\n-    public CommandResult execute(CommandInvocation commandInvocation) throws CommandException, InterruptedException {\n-        if (help) {\n-            commandInvocation.println(commandInvocation.getHelpInfo(\"quarkus add-extension\"));\n-            return CommandResult.SUCCESS;\n-        } else {\n+    public CommandResult execute(CommandInvocation invocation) throws CommandException, InterruptedException {\n+\n+        try {\n+            Path projectDirectory = path != null ? Paths.get(path.getAbsolutePath())\n+                    : Paths.get(System.getProperty(\"user.dir\"));\n+\n+            QuarkusProject quarkusProject = QuarkusProject.resolveExistingProject(projectDirectory,\n+                    QuarkusPlatformConfig.getGlobalDefault().getPlatformDescriptor());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df03348cca2c006daf459b6e4ea823ae448b2386"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0Mzg1NDE4", "url": "https://github.com/quarkusio/quarkus/pull/9783#pullrequestreview-424385418", "createdAt": "2020-06-04T12:22:39Z", "commit": {"oid": "df03348cca2c006daf459b6e4ea823ae448b2386"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0ODcwMjk0", "url": "https://github.com/quarkusio/quarkus/pull/9783#pullrequestreview-424870294", "createdAt": "2020-06-04T22:10:20Z", "commit": {"oid": "df03348cca2c006daf459b6e4ea823ae448b2386"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjoxMDoyMFrOGfZuXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjoxMDoyMFrOGfZuXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4MDUwOA==", "bodyText": "will it ever be used ? lets nuke it just to not tempt someone to try use it ;)", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r435580508", "createdAt": "2020-06-04T22:10:20Z", "author": {"login": "maxandersen"}, "path": "devtools/aesh/pom.xml", "diffHunk": "@@ -20,24 +20,85 @@\n         <maven.compiler.source>1.8</maven.compiler.source>\n     </properties>\n \n+    <!-- not used atm", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df03348cca2c006daf459b6e4ea823ae448b2386"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0ODcwOTc0", "url": "https://github.com/quarkusio/quarkus/pull/9783#pullrequestreview-424870974", "createdAt": "2020-06-04T22:11:45Z", "commit": {"oid": "df03348cca2c006daf459b6e4ea823ae448b2386"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjoxMTo0NlrOGfZwnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjoxMTo0NlrOGfZwnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4MTA4Nw==", "bodyText": "someone should make a quarkus aesh extension making this not needed :)", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r435581087", "createdAt": "2020-06-04T22:11:46Z", "author": {"login": "maxandersen"}, "path": "devtools/aesh/reflectconfigs/quarkuscli.json", "diffHunk": "@@ -6,7 +6,8 @@\n     \"allDeclaredMethods\" : true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df03348cca2c006daf459b6e4ea823ae448b2386"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0ODcxNDEw", "url": "https://github.com/quarkusio/quarkus/pull/9783#pullrequestreview-424871410", "createdAt": "2020-06-04T22:12:41Z", "commit": {"oid": "df03348cca2c006daf459b6e4ea823ae448b2386"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjoxMjo0MVrOGfZxzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjoxMjo0MVrOGfZxzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4MTM4OA==", "bodyText": "any reason this is not a quarkus command mode main ?", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r435581388", "createdAt": "2020-06-04T22:12:41Z", "author": {"login": "maxandersen"}, "path": "devtools/aesh/src/main/java/io/quarkus/cli/QuarkusCli.java", "diffHunk": "@@ -1,59 +1,17 @@\n package io.quarkus.cli;\n \n-import java.io.IOException;\n+import org.aesh.AeshRuntimeRunner;\n \n-import org.aesh.command.AeshCommandRuntimeBuilder;\n-import org.aesh.command.CommandException;\n-import org.aesh.command.CommandNotFoundException;\n-import org.aesh.command.CommandRuntime;\n-import org.aesh.command.impl.registry.AeshCommandRegistryBuilder;\n-import org.aesh.command.parser.CommandLineParserException;\n-import org.aesh.command.registry.CommandRegistryException;\n-import org.aesh.command.validator.CommandValidatorException;\n-import org.aesh.command.validator.OptionValidatorException;\n-\n-import io.quarkus.cli.commands.QuarkusCommand;\n+import io.quarkus.cli.commands.QuarkusBaseCommand;\n \n public class QuarkusCli {\n \n-    public static void main(String[] args) throws CommandRegistryException {\n-        CommandRuntime runtime = AeshCommandRuntimeBuilder\n-                .builder()\n-                .commandRegistry(AeshCommandRegistryBuilder.builder().command(QuarkusCommand.class).create())\n-                .build();\n-\n-        if (args.length > 0) {\n-            StringBuilder sb = new StringBuilder(QuarkusCommand.COMMAND_NAME).append(\" \");\n-            if (args.length == 1) {\n-                sb.append(args[0]);\n-            } else {\n-                for (String arg : args) {\n-                    if (arg.indexOf(' ') >= 0) {\n-                        sb.append('\"').append(arg).append(\"\\\" \");\n-                    } else {\n-                        sb.append(arg).append(' ');\n-                    }\n-                }\n-            }\n-\n-            try {\n-                runtime.executeCommand(sb.toString());\n-            } catch (CommandNotFoundException e) {\n-                System.err.println(\"Command not found: \" + sb.toString());\n-            } catch (CommandException | CommandLineParserException | CommandValidatorException | OptionValidatorException e) {\n-                showHelpIfNeeded(runtime, e);\n-            } catch (InterruptedException | IOException e) {\n-                System.err.println(e.getMessage());\n-            }\n-        } else {\n-            showHelpIfNeeded(runtime, null);\n-        }\n+    public static void main(String[] args) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df03348cca2c006daf459b6e4ea823ae448b2386"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0ODc0NjUy", "url": "https://github.com/quarkusio/quarkus/pull/9783#pullrequestreview-424874652", "createdAt": "2020-06-04T22:20:14Z", "commit": {"oid": "df03348cca2c006daf459b6e4ea823ae448b2386"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjoyMDoxNFrOGfZ8fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjoyMDoxNFrOGfZ8fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4NDEyNw==", "bodyText": "this would be ignoring ./gradlew / gradle wrapper", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r435584127", "createdAt": "2020-06-04T22:20:14Z", "author": {"login": "maxandersen"}, "path": "devtools/aesh/src/main/java/io/quarkus/cli/commands/ExecuteUtil.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package io.quarkus.cli.commands;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+import java.util.stream.Stream;\n+\n+import org.aesh.command.invocation.CommandInvocation;\n+import org.apache.maven.shared.invoker.DefaultInvocationRequest;\n+import org.apache.maven.shared.invoker.DefaultInvoker;\n+import org.apache.maven.shared.invoker.InvocationRequest;\n+import org.apache.maven.shared.invoker.InvocationResult;\n+import org.apache.maven.shared.invoker.Invoker;\n+import org.apache.maven.shared.invoker.MavenInvocationException;\n+\n+public class ExecuteUtil {\n+\n+    public static void executeGradle(File projectDirectory, CommandInvocation invocation, String buildTarget) {\n+        String gradleExecutable = findExecutable(\"gradle\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df03348cca2c006daf459b6e4ea823ae448b2386"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0ODc0Nzc4", "url": "https://github.com/quarkusio/quarkus/pull/9783#pullrequestreview-424874778", "createdAt": "2020-06-04T22:20:32Z", "commit": {"oid": "df03348cca2c006daf459b6e4ea823ae448b2386"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjoyMDozMlrOGfZ85A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjoyMDozMlrOGfZ85A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4NDIyOA==", "bodyText": "this would be ignoring ./mvnw / maven wrapper", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r435584228", "createdAt": "2020-06-04T22:20:32Z", "author": {"login": "maxandersen"}, "path": "devtools/aesh/src/main/java/io/quarkus/cli/commands/ExecuteUtil.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package io.quarkus.cli.commands;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+import java.util.stream.Stream;\n+\n+import org.aesh.command.invocation.CommandInvocation;\n+import org.apache.maven.shared.invoker.DefaultInvocationRequest;\n+import org.apache.maven.shared.invoker.DefaultInvoker;\n+import org.apache.maven.shared.invoker.InvocationRequest;\n+import org.apache.maven.shared.invoker.InvocationResult;\n+import org.apache.maven.shared.invoker.Invoker;\n+import org.apache.maven.shared.invoker.MavenInvocationException;\n+\n+public class ExecuteUtil {\n+\n+    public static void executeGradle(File projectDirectory, CommandInvocation invocation, String buildTarget) {\n+        String gradleExecutable = findExecutable(\"gradle\");\n+        if (gradleExecutable == null) {\n+            invocation.println(\"unable to find the gradle executable, is it in your path?\");\n+        } else {\n+            gradleExecutable += File.separator + \"bin\" + File.separator + \"gradle\";\n+\n+            try {\n+                Process process = new ProcessBuilder()\n+                        .command(gradleExecutable, buildTarget)\n+                        .directory(projectDirectory)\n+                        .start();\n+\n+                BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n+\n+                String line;\n+                while ((line = reader.readLine()) != null) {\n+                    invocation.println(line);\n+                }\n+\n+                int exit = process.waitFor();\n+                if (exit != 0)\n+                    invocation.println(\"Build failed.\");\n+            } catch (IOException | InterruptedException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    public static void executeMaven(File projectDirectory, CommandInvocation invocation, String buildTarget) {\n+        String mvnPath = findExecutable(\"mvn\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df03348cca2c006daf459b6e4ea823ae448b2386"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0ODc2MDI0", "url": "https://github.com/quarkusio/quarkus/pull/9783#pullrequestreview-424876024", "createdAt": "2020-06-04T22:23:27Z", "commit": {"oid": "df03348cca2c006daf459b6e4ea823ae448b2386"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjoyMzoyN1rOGfaAxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjoyMzoyN1rOGfaAxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4NTIyMg==", "bodyText": "why is it that you can't just use the same way of running the wrapper and the path executable ?", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r435585222", "createdAt": "2020-06-04T22:23:27Z", "author": {"login": "maxandersen"}, "path": "devtools/aesh/src/main/java/io/quarkus/cli/commands/ExecuteUtil.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package io.quarkus.cli.commands;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+import java.util.stream.Stream;\n+\n+import org.aesh.command.invocation.CommandInvocation;\n+import org.apache.maven.shared.invoker.DefaultInvocationRequest;\n+import org.apache.maven.shared.invoker.DefaultInvoker;\n+import org.apache.maven.shared.invoker.InvocationRequest;\n+import org.apache.maven.shared.invoker.InvocationResult;\n+import org.apache.maven.shared.invoker.Invoker;\n+import org.apache.maven.shared.invoker.MavenInvocationException;\n+\n+public class ExecuteUtil {\n+\n+    public static void executeGradle(File projectDirectory, CommandInvocation invocation, String buildTarget) {\n+        String gradleExecutable = findExecutable(\"gradle\");\n+        if (gradleExecutable == null) {\n+            invocation.println(\"unable to find the gradle executable, is it in your path?\");\n+        } else {\n+            gradleExecutable += File.separator + \"bin\" + File.separator + \"gradle\";\n+\n+            try {\n+                Process process = new ProcessBuilder()\n+                        .command(gradleExecutable, buildTarget)\n+                        .directory(projectDirectory)\n+                        .start();\n+\n+                BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n+\n+                String line;\n+                while ((line = reader.readLine()) != null) {\n+                    invocation.println(line);\n+                }\n+\n+                int exit = process.waitFor();\n+                if (exit != 0)\n+                    invocation.println(\"Build failed.\");\n+            } catch (IOException | InterruptedException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    public static void executeMaven(File projectDirectory, CommandInvocation invocation, String buildTarget) {\n+        String mvnPath = findExecutable(\"mvn\");\n+        System.setProperty(\"maven.home\", mvnPath);\n+\n+        InvocationRequest request = new DefaultInvocationRequest();\n+        request.setPomFile(new File(projectDirectory.getAbsolutePath() + File.separatorChar + \"pom.xml\"));\n+        request.setGoals(Collections.singletonList(buildTarget));\n+\n+        Invoker invoker = new DefaultInvoker();\n+\n+        InvocationResult result = null;\n+        try {\n+            result = invoker.execute(request);\n+        } catch (MavenInvocationException e) {\n+            e.printStackTrace();\n+        }\n+\n+        if (result.getExitCode() != 0) {\n+            invocation.println(\"Build failed.\");\n+        }\n+    }\n+\n+    public static String findExecutable(String exec) {\n+        Optional<Path> mvnPath = Stream.of(System.getenv(\"PATH\").split(Pattern.quote(File.pathSeparator)))\n+                .map(Paths::get)\n+                .filter(path -> Files.exists(path.resolve(exec))).findFirst();\n+\n+        return mvnPath.map(value -> value.getParent().toString()).orElse(null);\n+    }\n+\n+    public static void executeWrapper(CommandInvocation invocation, File wrapper, String target) {\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df03348cca2c006daf459b6e4ea823ae448b2386"}, "originalPosition": 85}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df03348cca2c006daf459b6e4ea823ae448b2386", "author": {"user": {"login": "stalep", "name": "St\u00e5le Pedersen"}}, "url": "https://github.com/quarkusio/quarkus/commit/df03348cca2c006daf459b6e4ea823ae448b2386", "committedDate": "2020-06-04T11:45:26Z", "message": "updated the cli to work similar as the maven and gradle tools"}, "afterCommit": {"oid": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07", "author": {"user": {"login": "stalep", "name": "St\u00e5le Pedersen"}}, "url": "https://github.com/quarkusio/quarkus/commit/2a7ef1c0ef39618ca052f30c094c4cddc4f40d07", "committedDate": "2020-06-10T22:04:42Z", "message": "updated the cli to work similar as the maven and gradle tools"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MjE5MTk4", "url": "https://github.com/quarkusio/quarkus/pull/9783#pullrequestreview-429219198", "createdAt": "2020-06-11T19:26:40Z", "commit": {"oid": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOToyNjo0MFrOGirkBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOToyNjo0MFrOGirkBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAxODUwMw==", "bodyText": "\u201cbuild\u201d seems more appropriate ?", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r439018503", "createdAt": "2020-06-11T19:26:40Z", "author": {"login": "maxandersen"}, "path": "devtools/aesh/src/main/java/io/quarkus/cli/commands/CompileProjectCommand.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package io.quarkus.cli.commands;\n+\n+import java.io.File;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.invocation.CommandInvocation;\n+import org.aesh.command.option.Argument;\n+import org.aesh.command.option.Option;\n+import org.aesh.io.Resource;\n+\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.QuarkusProject;\n+\n+@CommandDefinition(name = \"compile-project\", description = \"Compiles the targeted project\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MjE5NjEy", "url": "https://github.com/quarkusio/quarkus/pull/9783#pullrequestreview-429219612", "createdAt": "2020-06-11T19:27:19Z", "commit": {"oid": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOToyNzoxOVrOGirlMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOToyNzoxOVrOGirlMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAxODgwMw==", "bodyText": "Not critical now but I would say package rather than install would be done here.", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r439018803", "createdAt": "2020-06-11T19:27:19Z", "author": {"login": "maxandersen"}, "path": "devtools/aesh/src/main/java/io/quarkus/cli/commands/CompileProjectCommand.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package io.quarkus.cli.commands;\n+\n+import java.io.File;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.invocation.CommandInvocation;\n+import org.aesh.command.option.Argument;\n+import org.aesh.command.option.Option;\n+import org.aesh.io.Resource;\n+\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.QuarkusProject;\n+\n+@CommandDefinition(name = \"compile-project\", description = \"Compiles the targeted project\")\n+public class CompileProjectCommand implements Command<CommandInvocation> {\n+    @Option(name = \"clean\", hasValue = false, shortName = 'c', description = \"Clean the project before compiling\")\n+    private boolean clean;\n+\n+    @Argument(description = \"Path to the project, if not set it will use the current working directory\")\n+    private Resource path;\n+\n+    @Override\n+    public CommandResult execute(CommandInvocation invocation) throws CommandException, InterruptedException {\n+\n+        File projectPath = path != null ? new File(path.getAbsolutePath()) : new File(System.getProperty(\"user.dir\"));\n+\n+        BuildTool buildTool = QuarkusProject.resolveExistingProjectBuildTool(projectPath.toPath());\n+\n+        if (buildTool.getBuildFiles() != null && buildTool.getBuildFiles().length > 0) {\n+            File buildFile = new File(buildTool.getBuildFiles()[0]);\n+\n+            if (!buildFile.isFile()) {\n+                invocation.println(\"Was not able to find a build file in: \" + projectPath);\n+                return CommandResult.FAILURE;\n+            }\n+\n+            try {\n+                if (buildTool.equals(BuildTool.MAVEN)) {\n+                    File wrapper = ExecuteUtil.getMavenWrapper(projectPath.getAbsolutePath());\n+                    if (wrapper != null) {\n+                        ExecuteUtil.executeWrapper(invocation, wrapper, \"install\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MjIwNzMx", "url": "https://github.com/quarkusio/quarkus/pull/9783#pullrequestreview-429220731", "createdAt": "2020-06-11T19:29:04Z", "commit": {"oid": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOToyOTowNFrOGirotw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOToyOTowNFrOGirotw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAxOTcwMw==", "bodyText": "create as we use that everywhere else.", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r439019703", "createdAt": "2020-06-11T19:29:04Z", "author": {"login": "maxandersen"}, "path": "devtools/aesh/src/main/java/io/quarkus/cli/commands/CreateProjectCommand.java", "diffHunk": "@@ -1,66 +1,163 @@\n package io.quarkus.cli.commands;\n \n import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n import org.aesh.command.Command;\n import org.aesh.command.CommandDefinition;\n import org.aesh.command.CommandResult;\n import org.aesh.command.invocation.CommandInvocation;\n+import org.aesh.command.option.Argument;\n import org.aesh.command.option.Option;\n+import org.aesh.command.option.OptionList;\n+import org.aesh.command.shell.Shell;\n import org.aesh.io.Resource;\n+import org.aesh.readline.action.KeyAction;\n+import org.aesh.readline.terminal.Key;\n+import org.aesh.selector.MultiSelect;\n+import org.aesh.selector.SelectorType;\n+import org.aesh.terminal.utils.Config;\n+import org.apache.commons.lang3.StringUtils;\n \n+import io.quarkus.dependencies.Extension;\n+import io.quarkus.devtools.commands.AddExtensions;\n import io.quarkus.devtools.commands.CreateProject;\n+import io.quarkus.devtools.commands.data.QuarkusCommandException;\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.QuarkusProject;\n import io.quarkus.platform.tools.config.QuarkusPlatformConfig;\n \n-/**\n- * @author <a href=\"mailto:stalep@gmail.com\">St\u00e5le Pedersen</a>\n- */\n-@CommandDefinition(name = \"create-project\", description = \"Creates a base Quarkus maven project\")\n+@CommandDefinition(name = \"init\", generateHelp = true, description = \"Creates a base Quarkus project\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MjIxMzYw", "url": "https://github.com/quarkusio/quarkus/pull/9783#pullrequestreview-429221360", "createdAt": "2020-06-11T19:30:01Z", "commit": {"oid": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOTozMDowMVrOGirqnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOTozMDowMVrOGirqnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyMDE5MQ==", "bodyText": "dev\nIt\u2019s called dev everywhere else afaik.", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r439020191", "createdAt": "2020-06-11T19:30:01Z", "author": {"login": "maxandersen"}, "path": "devtools/aesh/src/main/java/io/quarkus/cli/commands/DevModeCommand.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package io.quarkus.cli.commands;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandNotFoundException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.invocation.CommandInvocation;\n+import org.aesh.command.option.Argument;\n+import org.aesh.command.option.Option;\n+import org.aesh.command.option.OptionList;\n+import org.aesh.command.parser.CommandLineParserException;\n+import org.aesh.command.validator.CommandValidatorException;\n+import org.aesh.command.validator.OptionValidatorException;\n+\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.QuarkusProject;\n+\n+@CommandDefinition(name = \"dev-mode\", description = \"Starts up a development mode process for a Quarkus project.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MjIyMzEw", "url": "https://github.com/quarkusio/quarkus/pull/9783#pullrequestreview-429222310", "createdAt": "2020-06-11T19:31:27Z", "commit": {"oid": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOTozMToyN1rOGirtlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOTozMToyN1rOGirtlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyMDk1MQ==", "bodyText": "Default is true to match elsewhere ?", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r439020951", "createdAt": "2020-06-11T19:31:27Z", "author": {"login": "maxandersen"}, "path": "devtools/aesh/src/main/java/io/quarkus/cli/commands/DevModeCommand.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package io.quarkus.cli.commands;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandNotFoundException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.invocation.CommandInvocation;\n+import org.aesh.command.option.Argument;\n+import org.aesh.command.option.Option;\n+import org.aesh.command.option.OptionList;\n+import org.aesh.command.parser.CommandLineParserException;\n+import org.aesh.command.validator.CommandValidatorException;\n+import org.aesh.command.validator.OptionValidatorException;\n+\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.QuarkusProject;\n+\n+@CommandDefinition(name = \"dev-mode\", description = \"Starts up a development mode process for a Quarkus project.\")\n+public class DevModeCommand implements Command<CommandInvocation> {\n+\n+    @Option(shortName = 'd', completer = DevModeDebugCompleter.class, validator = DevModeDebugValidator.class, description = \"If this server should be started in debug mode. \"\n+            +\n+            \"The default is to start in debug mode without suspending and listen on port 5005.\" +\n+            \" It supports the following options:\\n\" +\n+            \" \\\"false\\\" - The JVM is not started in debug mode\\n\" +\n+            \" \\\"true\\\" - The JVM is started in debug mode and suspends until a debugger is attached to port 5005\\n\" +\n+            \" \\\"client\\\" - The JVM is started in client mode, and attempts to connect to localhost:5005\\n\" +\n+            \"\\\"{port}\\\" - The JVM is started in debug mode and suspends until a debugger is attached to {port}\")\n+    private String debug;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MjIzODgz", "url": "https://github.com/quarkusio/quarkus/pull/9783#pullrequestreview-429223883", "createdAt": "2020-06-11T19:33:53Z", "commit": {"oid": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOTozMzo1M1rOGiryTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOTozMzo1M1rOGiryTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyMjE1OA==", "bodyText": "There are no shared base class for these exceptions ?", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r439022158", "createdAt": "2020-06-11T19:33:53Z", "author": {"login": "maxandersen"}, "path": "devtools/aesh/src/main/java/io/quarkus/cli/commands/DevModeCommand.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package io.quarkus.cli.commands;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandNotFoundException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.invocation.CommandInvocation;\n+import org.aesh.command.option.Argument;\n+import org.aesh.command.option.Option;\n+import org.aesh.command.option.OptionList;\n+import org.aesh.command.parser.CommandLineParserException;\n+import org.aesh.command.validator.CommandValidatorException;\n+import org.aesh.command.validator.OptionValidatorException;\n+\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.QuarkusProject;\n+\n+@CommandDefinition(name = \"dev-mode\", description = \"Starts up a development mode process for a Quarkus project.\")\n+public class DevModeCommand implements Command<CommandInvocation> {\n+\n+    @Option(shortName = 'd', completer = DevModeDebugCompleter.class, validator = DevModeDebugValidator.class, description = \"If this server should be started in debug mode. \"\n+            +\n+            \"The default is to start in debug mode without suspending and listen on port 5005.\" +\n+            \" It supports the following options:\\n\" +\n+            \" \\\"false\\\" - The JVM is not started in debug mode\\n\" +\n+            \" \\\"true\\\" - The JVM is started in debug mode and suspends until a debugger is attached to port 5005\\n\" +\n+            \" \\\"client\\\" - The JVM is started in client mode, and attempts to connect to localhost:5005\\n\" +\n+            \"\\\"{port}\\\" - The JVM is started in debug mode and suspends until a debugger is attached to {port}\")\n+    private String debug;\n+\n+    @Option(shortName = 'u', hasValue = false, name = \"suspend\", description = \"Whether or not the JVM launch, in debug mode, should be suspended.\"\n+            + \"This parameter is only relevant when the JVM is launched in debug mode.\")\n+    private boolean suspend;\n+\n+    @Option(shortName = 'b', name = \"build\", description = \"Build folder, if not set the default folder for the used build tool will be used\")\n+    private File buildDir;\n+\n+    @Option(shortName = 's', name = \"source\", description = \"Source folder, if not set the default folder for the used build tool will be used\")\n+    private File sourceDir;\n+\n+    @Option(name = \"jvm-args\", shortName = 'j', description = \"JVM arguments to the dev mode process\")\n+    private String jvmArgs;\n+\n+    @Option(name = \"delete-dev-jar\", shortName = 'e', hasValue = false, defaultValue = {\n+            \"true\" }, description = \"Delete the dev jar after it finishes\")\n+    private boolean deleteDevJar;\n+\n+    @Option(name = \"prevent-no-verify\", shortName = 'p', defaultValue = {\n+            \"false\" }, hasValue = false, description = \"This value is intended to be set to true when some generated bytecode is eroneous causing \"\n+                    + \" the JVM to crash when the verify:non option is set (which is on by default).\")\n+    private boolean preventNoVerify;\n+\n+    @Option(name = \"no-deps\", shortName = 'n', hasValue = false, defaultValue = {\n+            \"false\" }, description = \"Whether changes in the projects that appear to be dependencies of the project containing the \"\n+                    + \" application to be launched should trigger hot-reload. By default they do.\")\n+\n+    @OptionList(name = \"compiler-args\", shortName = 'c', description = \"Additional parameters to pass to javac when recompiling changed source files.\")\n+    private List<String> compilerArgs;\n+\n+    @Argument(description = \"Path to the project, if not set it will use the current working directory\")\n+    private File projectPath;\n+\n+    private BuildTool buildTool;\n+    private File buildFile;\n+\n+    @Override\n+    public CommandResult execute(CommandInvocation invocation) throws CommandException, InterruptedException {\n+\n+        if (!verifyProjectStatus(invocation))\n+            return CommandResult.FAILURE;\n+\n+        try {\n+            devMode(invocation);\n+        } catch (InterruptedException i) {\n+            invocation.println(\"Stopping dev-mode\");\n+        }\n+\n+        return CommandResult.SUCCESS;\n+    }\n+\n+    private void devMode(CommandInvocation invocation) throws InterruptedException {\n+        if (buildTool.equals(BuildTool.MAVEN)) {\n+            File wrapper = ExecuteUtil.getMavenWrapper(projectPath.getAbsolutePath());\n+            if (wrapper != null) {\n+                ExecuteUtil.executeWrapper(invocation, wrapper, \"quarkus:dev\");\n+            } else {\n+                ExecuteUtil.executeMaven(projectPath, invocation, \"quarkus:dev\");\n+            }\n+\n+        }\n+        //do gradle\n+        else {\n+            File wrapper = ExecuteUtil.getGradleWrapper(projectPath.getAbsolutePath());\n+            if (wrapper != null) {\n+                ExecuteUtil.executeWrapper(invocation, wrapper, \"quarkusDev\");\n+            } else {\n+                ExecuteUtil.executeGradle(projectPath, invocation, \"quarkusDev\");\n+            }\n+        }\n+    }\n+\n+    private boolean verifyProjectStatus(CommandInvocation invocation) {\n+\n+        if (projectPath == null)\n+            projectPath = new File(System.getProperty(\"user.dir\"));\n+\n+        buildTool = QuarkusProject.resolveExistingProjectBuildTool(projectPath.toPath());\n+\n+        if (buildTool.getBuildFiles().length > 0)\n+            buildFile = new File(buildTool.getBuildFiles()[0]);\n+\n+        if (buildFile == null || !buildFile.isFile()) {\n+            invocation.println(\"Was not able to find a build file in: \" + projectPath);\n+            return false;\n+        }\n+\n+        if (buildDir == null)\n+            buildDir = new File(buildTool.getBuildDirectory());\n+\n+        if (sourceDir == null)\n+            sourceDir = resolveSourceDir();\n+\n+        if (!sourceDir.isDirectory()) {\n+            invocation.println(\"ERROR: The project's sources directory does not exists (\" + sourceDir);\n+            return false;\n+        }\n+\n+        if (!buildDir.isDirectory() || !new File(buildDir, \"classes\").isDirectory()) {\n+            invocation.println(\"Build directory (\" + buildDir + \" wasn't found. Compiling...\");\n+            //if we run interactive, the name is 'compile-project', otherwise it's 'quarkus compile-project'\n+            try {\n+                invocation.executeCommand(\"compile-project\");\n+            } catch (CommandNotFoundException e) {\n+                try {\n+                    invocation.executeCommand(\"quarkus compile-project\");\n+                } catch (CommandNotFoundException | CommandLineParserException | OptionValidatorException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07"}, "originalPosition": 141}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MjI1NDU1", "url": "https://github.com/quarkusio/quarkus/pull/9783#pullrequestreview-429225455", "createdAt": "2020-06-11T19:36:22Z", "commit": {"oid": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOTozNjoyMlrOGir3JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOTozNjoyMlrOGir3JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyMzM5Ng==", "bodyText": "We won\u2019t actually be doing install, just adding extension.\nadd, maybe ?", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r439023396", "createdAt": "2020-06-11T19:36:22Z", "author": {"login": "maxandersen"}, "path": "devtools/aesh/src/main/java/io/quarkus/cli/commands/InstallExtensionCommand.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package io.quarkus.cli.commands;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.invocation.CommandInvocation;\n+import org.aesh.command.option.Arguments;\n+import org.aesh.command.option.Option;\n+import org.aesh.io.Resource;\n+import org.aesh.selector.MultiSelect;\n+\n+import io.quarkus.dependencies.Extension;\n+import io.quarkus.devtools.commands.AddExtensions;\n+import io.quarkus.devtools.commands.data.QuarkusCommandException;\n+import io.quarkus.devtools.commands.data.QuarkusCommandOutcome;\n+import io.quarkus.devtools.project.QuarkusProject;\n+import io.quarkus.platform.tools.config.QuarkusPlatformConfig;\n+\n+@CommandDefinition(name = \"install\", description = \"Install extensions to a project\")\n+public class InstallExtensionCommand implements Command<CommandInvocation> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MjI2NTk2", "url": "https://github.com/quarkusio/quarkus/pull/9783#pullrequestreview-429226596", "createdAt": "2020-06-11T19:38:15Z", "commit": {"oid": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MjY4ODI4", "url": "https://github.com/quarkusio/quarkus/pull/9783#pullrequestreview-429268828", "createdAt": "2020-06-11T20:33:03Z", "commit": {"oid": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMDozMzowNFrOGit0kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMDozMzowNFrOGit0kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA1NTUwNw==", "bodyText": "Does case matter, btw?", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r439055507", "createdAt": "2020-06-11T20:33:04Z", "author": {"login": "aloubyansky"}, "path": "devtools/aesh/src/main/java/io/quarkus/cli/commands/CreateProjectCommand.java", "diffHunk": "@@ -1,66 +1,163 @@\n package io.quarkus.cli.commands;\n \n import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n import org.aesh.command.Command;\n import org.aesh.command.CommandDefinition;\n import org.aesh.command.CommandResult;\n import org.aesh.command.invocation.CommandInvocation;\n+import org.aesh.command.option.Argument;\n import org.aesh.command.option.Option;\n+import org.aesh.command.option.OptionList;\n+import org.aesh.command.shell.Shell;\n import org.aesh.io.Resource;\n+import org.aesh.readline.action.KeyAction;\n+import org.aesh.readline.terminal.Key;\n+import org.aesh.selector.MultiSelect;\n+import org.aesh.selector.SelectorType;\n+import org.aesh.terminal.utils.Config;\n+import org.apache.commons.lang3.StringUtils;\n \n+import io.quarkus.dependencies.Extension;\n+import io.quarkus.devtools.commands.AddExtensions;\n import io.quarkus.devtools.commands.CreateProject;\n+import io.quarkus.devtools.commands.data.QuarkusCommandException;\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.QuarkusProject;\n import io.quarkus.platform.tools.config.QuarkusPlatformConfig;\n \n-/**\n- * @author <a href=\"mailto:stalep@gmail.com\">St\u00e5le Pedersen</a>\n- */\n-@CommandDefinition(name = \"create-project\", description = \"Creates a base Quarkus maven project\")\n+@CommandDefinition(name = \"init\", generateHelp = true, description = \"Creates a base Quarkus project\")\n public class CreateProjectCommand implements Command<CommandInvocation> {\n \n-    @Option(shortName = 'h', hasValue = false)\n-    private boolean help;\n+    @Option(name = \"groupid\", shortName = 'g', defaultValue = \"org.acme.quarkus.sample\", askIfNotSet = true, description = \"The groupId of the project\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07"}, "originalPosition": 47}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2a7ef1c0ef39618ca052f30c094c4cddc4f40d07", "author": {"user": {"login": "stalep", "name": "St\u00e5le Pedersen"}}, "url": "https://github.com/quarkusio/quarkus/commit/2a7ef1c0ef39618ca052f30c094c4cddc4f40d07", "committedDate": "2020-06-10T22:04:42Z", "message": "updated the cli to work similar as the maven and gradle tools"}, "afterCommit": {"oid": "a1bb2fb6e9e0cc55f0ec5d5c57bb468f68700f3e", "author": {"user": {"login": "stalep", "name": "St\u00e5le Pedersen"}}, "url": "https://github.com/quarkusio/quarkus/commit/a1bb2fb6e9e0cc55f0ec5d5c57bb468f68700f3e", "committedDate": "2020-06-15T08:51:24Z", "message": "updated the cli to work similar as the maven and gradle tools"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNDU2NDc3", "url": "https://github.com/quarkusio/quarkus/pull/9783#pullrequestreview-430456477", "createdAt": "2020-06-15T09:07:22Z", "commit": {"oid": "a1bb2fb6e9e0cc55f0ec5d5c57bb468f68700f3e"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOTowNzoyMlrOGjpkZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOToxMjowNVrOGjpu_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzNDQwNg==", "bodyText": "Maybe we should throw an exception here (instead of returning null)?", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r440034406", "createdAt": "2020-06-15T09:07:22Z", "author": {"login": "ia3andy"}, "path": "devtools/aesh/src/main/java/io/quarkus/cli/commands/BuildToolConverter.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package io.quarkus.cli.commands;\n+\n+import org.aesh.command.converter.Converter;\n+import org.aesh.command.converter.ConverterInvocation;\n+\n+import io.quarkus.devtools.project.BuildTool;\n+\n+public class BuildToolConverter implements Converter<BuildTool, ConverterInvocation> {\n+    @Override\n+    public BuildTool convert(ConverterInvocation invocation) {\n+        if (invocation.getInput() != null && invocation.getInput().length() > 0)\n+            return BuildTool.findTool(invocation.getInput());\n+        else\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1bb2fb6e9e0cc55f0ec5d5c57bb468f68700f3e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzNzExNw==", "bodyText": "Maybe should make this static method part of BuildTool (it's my mistake)?", "url": "https://github.com/quarkusio/quarkus/pull/9783#discussion_r440037117", "createdAt": "2020-06-15T09:12:05Z", "author": {"login": "ia3andy"}, "path": "devtools/aesh/src/main/java/io/quarkus/cli/commands/DevModeCommand.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package io.quarkus.cli.commands;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandNotFoundException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.invocation.CommandInvocation;\n+import org.aesh.command.option.Argument;\n+import org.aesh.command.option.Option;\n+import org.aesh.command.option.OptionList;\n+import org.aesh.command.parser.CommandLineParserException;\n+import org.aesh.command.validator.CommandValidatorException;\n+import org.aesh.command.validator.OptionValidatorException;\n+\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.QuarkusProject;\n+\n+@CommandDefinition(name = \"dev\", description = \"Starts up a development mode process for a Quarkus project.\")\n+public class DevModeCommand implements Command<CommandInvocation> {\n+\n+    @Option(shortName = 'd', completer = DevModeDebugCompleter.class, defaultValue = {\"true\"},\n+            validator = DevModeDebugValidator.class, description = \"If this server should be started in debug mode. \"\n+            +\n+            \"The default is to start in debug mode without suspending and listen on port 5005.\" +\n+            \" It supports the following options:\\n\" +\n+            \" \\\"false\\\" - The JVM is not started in debug mode\\n\" +\n+            \" \\\"true\\\" - The JVM is started in debug mode and suspends until a debugger is attached to port 5005\\n\" +\n+            \" \\\"client\\\" - The JVM is started in client mode, and attempts to connect to localhost:5005\\n\" +\n+            \"\\\"{port}\\\" - The JVM is started in debug mode and suspends until a debugger is attached to {port}\")\n+    private String debug;\n+\n+    @Option(shortName = 'u', hasValue = false, name = \"suspend\", description = \"Whether or not the JVM launch, in debug mode, should be suspended.\"\n+            + \"This parameter is only relevant when the JVM is launched in debug mode.\")\n+    private boolean suspend;\n+\n+    @Option(shortName = 'b', name = \"build\", description = \"Build folder, if not set the default folder for the used build tool will be used\")\n+    private File buildDir;\n+\n+    @Option(shortName = 's', name = \"source\", description = \"Source folder, if not set the default folder for the used build tool will be used\")\n+    private File sourceDir;\n+\n+    @Option(name = \"jvm-args\", shortName = 'j', description = \"JVM arguments to the dev mode process\")\n+    private String jvmArgs;\n+\n+    @Option(name = \"delete-dev-jar\", shortName = 'e', hasValue = false, defaultValue = {\n+            \"true\" }, description = \"Delete the dev jar after it finishes\")\n+    private boolean deleteDevJar;\n+\n+    @Option(name = \"prevent-no-verify\", shortName = 'p', defaultValue = {\n+            \"false\" }, hasValue = false, description = \"This value is intended to be set to true when some generated bytecode is eroneous causing \"\n+                    + \" the JVM to crash when the verify:non option is set (which is on by default).\")\n+    private boolean preventNoVerify;\n+\n+    @Option(name = \"no-deps\", shortName = 'n', hasValue = false, defaultValue = {\n+            \"false\" }, description = \"Whether changes in the projects that appear to be dependencies of the project containing the \"\n+                    + \" application to be launched should trigger hot-reload. By default they do.\")\n+\n+    @OptionList(name = \"compiler-args\", shortName = 'c', description = \"Additional parameters to pass to javac when recompiling changed source files.\")\n+    private List<String> compilerArgs;\n+\n+    @Argument(description = \"Path to the project, if not set it will use the current working directory\")\n+    private File projectPath;\n+\n+    private BuildTool buildTool;\n+    private File buildFile;\n+\n+    @Override\n+    public CommandResult execute(CommandInvocation invocation) throws CommandException, InterruptedException {\n+\n+        if (!verifyProjectStatus(invocation))\n+            return CommandResult.FAILURE;\n+\n+        try {\n+            devMode(invocation);\n+        } catch (InterruptedException i) {\n+            invocation.println(\"Stopping dev-mode\");\n+        }\n+\n+        return CommandResult.SUCCESS;\n+    }\n+\n+    private void devMode(CommandInvocation invocation) throws InterruptedException {\n+        if (buildTool.equals(BuildTool.MAVEN)) {\n+            File wrapper = ExecuteUtil.getMavenWrapper(projectPath.getAbsolutePath());\n+            if (wrapper != null) {\n+                ExecuteUtil.executeWrapper(invocation, wrapper, \"quarkus:dev\");\n+            } else {\n+                ExecuteUtil.executeMaven(projectPath, invocation, \"quarkus:dev\");\n+            }\n+\n+        }\n+        //do gradle\n+        else {\n+            File wrapper = ExecuteUtil.getGradleWrapper(projectPath.getAbsolutePath());\n+            if (wrapper != null) {\n+                ExecuteUtil.executeWrapper(invocation, wrapper, \"quarkusDev\");\n+            } else {\n+                ExecuteUtil.executeGradle(projectPath, invocation, \"quarkusDev\");\n+            }\n+        }\n+    }\n+\n+    private boolean verifyProjectStatus(CommandInvocation invocation) {\n+\n+        if (projectPath == null)\n+            projectPath = new File(System.getProperty(\"user.dir\"));\n+\n+        buildTool = QuarkusProject.resolveExistingProjectBuildTool(projectPath.toPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1bb2fb6e9e0cc55f0ec5d5c57bb468f68700f3e"}, "originalPosition": 113}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a1bb2fb6e9e0cc55f0ec5d5c57bb468f68700f3e", "author": {"user": {"login": "stalep", "name": "St\u00e5le Pedersen"}}, "url": "https://github.com/quarkusio/quarkus/commit/a1bb2fb6e9e0cc55f0ec5d5c57bb468f68700f3e", "committedDate": "2020-06-15T08:51:24Z", "message": "updated the cli to work similar as the maven and gradle tools"}, "afterCommit": {"oid": "af6d3412f3e78d698515695ddef99de1544fd4b2", "author": {"user": {"login": "stalep", "name": "St\u00e5le Pedersen"}}, "url": "https://github.com/quarkusio/quarkus/commit/af6d3412f3e78d698515695ddef99de1544fd4b2", "committedDate": "2020-06-15T11:25:33Z", "message": "updated the cli to work similar as the maven and gradle tools"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2013ebba69d999a7b5cbefac29ca214bfaa73d1b", "author": {"user": {"login": "stalep", "name": "St\u00e5le Pedersen"}}, "url": "https://github.com/quarkusio/quarkus/commit/2013ebba69d999a7b5cbefac29ca214bfaa73d1b", "committedDate": "2020-06-15T11:33:01Z", "message": "updated the cli to work similar as the maven and gradle tools"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "af6d3412f3e78d698515695ddef99de1544fd4b2", "author": {"user": {"login": "stalep", "name": "St\u00e5le Pedersen"}}, "url": "https://github.com/quarkusio/quarkus/commit/af6d3412f3e78d698515695ddef99de1544fd4b2", "committedDate": "2020-06-15T11:25:33Z", "message": "updated the cli to work similar as the maven and gradle tools"}, "afterCommit": {"oid": "2013ebba69d999a7b5cbefac29ca214bfaa73d1b", "author": {"user": {"login": "stalep", "name": "St\u00e5le Pedersen"}}, "url": "https://github.com/quarkusio/quarkus/commit/2013ebba69d999a7b5cbefac29ca214bfaa73d1b", "committedDate": "2020-06-15T11:33:01Z", "message": "updated the cli to work similar as the maven and gradle tools"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNDg4NTI3", "url": "https://github.com/quarkusio/quarkus/pull/9783#pullrequestreview-431488527", "createdAt": "2020-06-16T13:14:29Z", "commit": {"oid": "2013ebba69d999a7b5cbefac29ca214bfaa73d1b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4442, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}