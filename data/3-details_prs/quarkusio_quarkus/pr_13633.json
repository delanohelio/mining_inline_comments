{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMTIzNDAy", "number": 13633, "title": "Update the Quarkus Codestart doc", "bodyText": "preview: https://github.com/ia3andy/quarkus/blob/cs-doc/independent-projects/tools/codestarts/README.adoc", "createdAt": "2020-12-02T16:08:30Z", "url": "https://github.com/quarkusio/quarkus/pull/13633", "merged": true, "mergeCommit": {"oid": "11319bb5b21ea9413693baac04552709cf3c26d4"}, "closed": true, "closedAt": "2020-12-07T08:03:49Z", "author": {"login": "ia3andy"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdiQ95cgBqjQwNjMyMDY5OTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdjw4-0AFqTU0NTkwMzQ3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "90ccd12a59a902fed0031d91248ae953714ac8de", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/90ccd12a59a902fed0031d91248ae953714ac8de", "committedDate": "2020-12-02T16:07:36Z", "message": "Update the Quarkus Codestart doc"}, "afterCommit": {"oid": "47b6a5703e492c3c15e6ebb09f19bb70a97261a2", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/47b6a5703e492c3c15e6ebb09f19bb70a97261a2", "committedDate": "2020-12-02T16:16:34Z", "message": "Update the Quarkus Codestart doc"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "47b6a5703e492c3c15e6ebb09f19bb70a97261a2", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/47b6a5703e492c3c15e6ebb09f19bb70a97261a2", "committedDate": "2020-12-02T16:16:34Z", "message": "Update the Quarkus Codestart doc"}, "afterCommit": {"oid": "cb740917996be7439a6608fe23f1b285504059b8", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/cb740917996be7439a6608fe23f1b285504059b8", "committedDate": "2020-12-02T16:24:04Z", "message": "Update the Quarkus Codestart doc"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cb740917996be7439a6608fe23f1b285504059b8", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/cb740917996be7439a6608fe23f1b285504059b8", "committedDate": "2020-12-02T16:24:04Z", "message": "Update the Quarkus Codestart doc"}, "afterCommit": {"oid": "67b733746a9e6dc53ddd4cacb2129d12aa8f90c2", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/67b733746a9e6dc53ddd4cacb2129d12aa8f90c2", "committedDate": "2020-12-02T16:26:28Z", "message": "Update the Quarkus Codestart doc"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "67b733746a9e6dc53ddd4cacb2129d12aa8f90c2", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/67b733746a9e6dc53ddd4cacb2129d12aa8f90c2", "committedDate": "2020-12-02T16:26:28Z", "message": "Update the Quarkus Codestart doc"}, "afterCommit": {"oid": "9662e97328561fdc9c732f39bf50ca935b674d29", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/9662e97328561fdc9c732f39bf50ca935b674d29", "committedDate": "2020-12-02T16:28:31Z", "message": "Update the Quarkus Codestart doc"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9662e97328561fdc9c732f39bf50ca935b674d29", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/9662e97328561fdc9c732f39bf50ca935b674d29", "committedDate": "2020-12-02T16:28:31Z", "message": "Update the Quarkus Codestart doc"}, "afterCommit": {"oid": "28556a44e970027987fb6341784ccb1455878376", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/28556a44e970027987fb6341784ccb1455878376", "committedDate": "2020-12-02T16:34:48Z", "message": "Update the Quarkus Codestart doc"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "28556a44e970027987fb6341784ccb1455878376", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/28556a44e970027987fb6341784ccb1455878376", "committedDate": "2020-12-02T16:34:48Z", "message": "Update the Quarkus Codestart doc"}, "afterCommit": {"oid": "69e21c1f6d55b796e7ec51d5fe1876c3711c92d5", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/69e21c1f6d55b796e7ec51d5fe1876c3711c92d5", "committedDate": "2020-12-02T16:39:12Z", "message": "Update the Quarkus Codestart doc"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "69e21c1f6d55b796e7ec51d5fe1876c3711c92d5", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/69e21c1f6d55b796e7ec51d5fe1876c3711c92d5", "committedDate": "2020-12-02T16:39:12Z", "message": "Update the Quarkus Codestart doc"}, "afterCommit": {"oid": "5995be081408a81495c088eeded255a2246389d6", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/5995be081408a81495c088eeded255a2246389d6", "committedDate": "2020-12-02T16:40:51Z", "message": "Update the Quarkus Codestart doc"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5995be081408a81495c088eeded255a2246389d6", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/5995be081408a81495c088eeded255a2246389d6", "committedDate": "2020-12-02T16:40:51Z", "message": "Update the Quarkus Codestart doc"}, "afterCommit": {"oid": "b3e986b2b107bafd17423bbd244e748ed298263a", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/b3e986b2b107bafd17423bbd244e748ed298263a", "committedDate": "2020-12-02T16:47:53Z", "message": "Update the Quarkus Codestart doc"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b3e986b2b107bafd17423bbd244e748ed298263a", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/b3e986b2b107bafd17423bbd244e748ed298263a", "committedDate": "2020-12-02T16:47:53Z", "message": "Update the Quarkus Codestart doc"}, "afterCommit": {"oid": "df294975b823616afef171e7c7d3c49231b89226", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/df294975b823616afef171e7c7d3c49231b89226", "committedDate": "2020-12-02T16:55:23Z", "message": "Update the Quarkus Codestart doc"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df294975b823616afef171e7c7d3c49231b89226", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/df294975b823616afef171e7c7d3c49231b89226", "committedDate": "2020-12-02T16:55:23Z", "message": "Update the Quarkus Codestart doc"}, "afterCommit": {"oid": "b92bb4db544c9a82505ff8d9d37586a4b20e9ffe", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/b92bb4db544c9a82505ff8d9d37586a4b20e9ffe", "committedDate": "2020-12-02T16:56:44Z", "message": "Update the Quarkus Codestart doc"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b92bb4db544c9a82505ff8d9d37586a4b20e9ffe", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/b92bb4db544c9a82505ff8d9d37586a4b20e9ffe", "committedDate": "2020-12-02T16:56:44Z", "message": "Update the Quarkus Codestart doc"}, "afterCommit": {"oid": "1e2645babc4fab5094e6be307f64def63cd4dfbb", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/1e2645babc4fab5094e6be307f64def63cd4dfbb", "committedDate": "2020-12-03T14:53:33Z", "message": "Update the Quarkus Codestart doc"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1e2645babc4fab5094e6be307f64def63cd4dfbb", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/1e2645babc4fab5094e6be307f64def63cd4dfbb", "committedDate": "2020-12-03T14:53:33Z", "message": "Update the Quarkus Codestart doc"}, "afterCommit": {"oid": "a9a3707c4980c205d69ebcb5c2d215acaea71665", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/a9a3707c4980c205d69ebcb5c2d215acaea71665", "committedDate": "2020-12-04T09:28:57Z", "message": "Update the Quarkus Codestart doc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MDM0NDY4", "url": "https://github.com/quarkusio/quarkus/pull/13633#pullrequestreview-545034468", "createdAt": "2020-12-04T15:01:15Z", "commit": {"oid": "a9a3707c4980c205d69ebcb5c2d215acaea71665"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTowMToxNVrOH_UrgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTowMToxNVrOH_UrgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE2MTE1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A Quarkus extension are able to provide one or more well defined codestarts which will contain the necessary resources and code examples required to get started using that particular extension.\n          \n          \n            \n            A Quarkus extension is able to provide one or more well defined codestarts which will contain the necessary resources and code examples required to get started using that particular extension.", "url": "https://github.com/quarkusio/quarkus/pull/13633#discussion_r536161153", "createdAt": "2020-12-04T15:01:15Z", "author": {"login": "aloubyansky"}, "path": "independent-projects/tools/codestarts/README.adoc", "diffHunk": "@@ -8,7 +12,23 @@ This guide explains how to create and configure a Quarkus Codestart for an exten\n Codestarts provide a personalized Quarkus getting started experience and really show the Quarkus breadth.\n A Quarkus extension are able to provide one or more well defined codestarts which will contain the necessary resources and code examples required to get started using that particular extension.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9a3707c4980c205d69ebcb5c2d215acaea71665"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MDQyMDA4", "url": "https://github.com/quarkusio/quarkus/pull/13633#pullrequestreview-545042008", "createdAt": "2020-12-04T15:09:58Z", "commit": {"oid": "a9a3707c4980c205d69ebcb5c2d215acaea71665"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTowOTo1OFrOH_VC6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNTowOTo1OFrOH_VC6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE2NzE0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * I will automatically disable all other examples when selected\n          \n          \n            \n            * It will automatically disable all other examples when selected", "url": "https://github.com/quarkusio/quarkus/pull/13633#discussion_r536167147", "createdAt": "2020-12-04T15:09:58Z", "author": {"login": "aloubyansky"}, "path": "independent-projects/tools/codestarts/README.adoc", "diffHunk": "@@ -33,210 +53,199 @@ Each codestart consists of:\n . A `codestart.yml` file\n . Optionally some templates which following a common structure and naming conventions\n \n-*NOTE* The `codestart.yml` file and the directory structure follow the same principle, it can optionally contain a base and/or some language overrides.\n+== Where are the Quarkus codestarts located\n \n-=== Project generation\n+* Quarkus core codestarts dir: https://github.com/quarkusio/quarkus/tree/master/devtools/platform-descriptor-json/src/main/resources/codestarts/quarkus/core\n+* Example codestarts directory: https://github.com/quarkusio/quarkus/tree/master/devtools/platform-descriptor-json/src/main/resources/codestarts/quarkus/examples\n \n-When generating a Quarkus project:\n+== Writing a codestart with example code for an Extension\n \n-. Codestarts to use are resolved depending on the input\n-. The Codestarts' `shared-data` (defined in the different codestart.yml) is merged together and made available to all codestarts (conflicts are forbidden)\n-. The relevant files are processed:\n-** Only the files that are related to the selected language are processed\n-** The files are processed differently based on a naming convention.\n-** The data is used to render Qute templates\n-** We always process in this order: \n+As we discussed before, the base project files (pom.xml, dockerfiles, ...) are already generated by some existing codestarts. Thanks to this, we can only focus on the important, the example code for the extension.\n \n-... language\n-... project\n-... buildtool\n-... config\n-... tooling\n-... code\n+Here is the flow I am using to develop a new Quarkus extension codestart:\n \n-\n-The data used to generate a specific codestart is a merge of:\n-\n-. The data of the codestart to generate\n-. All codestarts \"shared\" data\n-. The user input\n-. Some specific post processing (e.g. adding dependencies)\n-\n-*NOTE* The data (shared or not) can also be specific to a language.\n-\n-=== Directory Structure\n-\n-*NOTE* `codestart.yml` is the only required file.\n-\n-* `codestart.yml` must be at the root of the codestart\n-* `./base` contains all the files that will be processed\n-* `./[languageName]` contains all the files that will be processed if the specified language has been selected (overriding base)\n-\n-=== codestart.yml\n-\n-codestart.yml:\n-[source,yaml]\n+. duplicate the Quarkus codestart example (e.g. link:./examples/quarkus/my-example[./examples/quarkus/my-example])\n+. update the codestart.yml (1 & 2 will be replaced by https://github.com/quarkusio/quarkus/issues/13614)\n+. use the `qcd@quarkusio` jbang script to generate the project using your new codestart named `my-example` located in `./examples/quarkus` in java and kotlin:\n++\n+[source,bash]\n ----\n-name: the unique name - REQUIRED\n-ref: the reference name (not unique) to use for extension matching (else the name is used)\n-type: the type [code (default), project, buildtool, language, config] or any custom type\n-tags: an array of tags (add `example` for example codestarts)\n-fallback: flag to indicate that it should be selected as fallback when no codestart has been selected with type - Only for base types\n-preselected: flag to indicate that it should be pre-selected - Only for extra types.\n-spec:\n-  [base or language name]: the specification (base, java, ...)\n-    data: a map of data to use only for this codestart\n-    shared-data: a map of data to use accross all codestarts\n-    dependencies: a list of dependencies to add when this is selected\n-    test-dependencies: a list of test dependencies to add when this is selected\n+jbang qcd@quarkusio -l java,kotlin -c ./examples/quarkus my-example\n ----\n \n-=== Common Shared and Built In Data\n+. Make sure the generated project(s) are as expected. You can use `-t` option to automatically build and test the generated project(s).\n+. You can either edit the codestarts files and start again from 3 or also, open the generated project(s) using you IDE and edit the files. You need to manually copy the changes back to your codestart files (and iterate again from 3)\n \n-There's a few built `shared-data` variables that you should know about\n-* `gen-info.time` is hardcoded to current time milliseconds of when the codestart was generated.  Useful if you need a random value in your codestart.\n+*NOTE 1* You can start with java and add kotlin later in another PR\n \n+*NOTE 2* The build file will automatically include the dependencies provided in the `codestart.yml`.\n \n-=== Naming Convention for files\n+=== When done (to bind the codestart to the extension):\n \n-* `.tpl.qute` will be processed with Qute (`.tpl.qute` will be removed from the output file name).\n-* `.include.qute` is used as a Qute template for inclusion (only available to the codestart, not listed in the generated project ).\n+. put the working codestart in `devtools/platform-descriptor-json/src/main/resources/codestarts/quarkus/examples` and submit a PR.\n+. Add the `ref` value of the codestart to the extension metadata. This is how it is activated when the extension is selected (e.g )\n \n-  Example: When using `{#include [name]}` in a template, it will look for `[name].include.qute` in the language dir, then in the base dir or the codestart.\n+    Example: https://github.com/quarkusio/quarkus/blob/master/extensions/resteasy/runtime/src/main/resources/META-INF/quarkus-extension.yaml#L14\n \n-* an output strategy can be defined for specific files, it defines some specific logic on how to deal with those files.\n+*NOTE* This is temporary, extension codestarts will soon live alongside the extension.\n \n- Example: in the Quarkus project `codestart.yml`:\n-[source,yaml]\n-----\n-output-strategy:\n-  \"pom.xml\": smart-pom-merge # smartly merge pom.xml contents together\n-  \"README.md\": append # they are appended together\n-  \"readme.md\": forbidden # it will fail if found in any codestart\n-  \"README.adoc\": forbidden\n-  \"readme.adoc\": forbidden\n-  \".gitignore\": append\n-  \"src/main/resources/application.yml\": smart-config-merge # smartly merge config together and automatically converted to the selected config type (yaml or properties)\n-  \"src/main/resources/application.yaml\": forbidden # should use yml instead\n-  \"src/main/resources/application.properties\": forbidden # should use yml instead\n-  \"*\": fail-on-duplicate # it will fail if a duplicate is found for all other files\n-----\n+=== Tests\n \n-* other files are just copied as is.\n+* We already have tests making sure we can create and build apps with all codestarts together with each build tools and languages:\n++\n+https://github.com/quarkusio/quarkus/blob/master/integration-tests/devtools/src/test/java/io/quarkus/devtools/codestarts/quarkus/QuarkusCodestartRunIT.java#L74-L90\n+* We have specific tests making sure the generation is working as expected (we will split it soon, you may create another class for your codestart):\n++\n+https://github.com/quarkusio/quarkus/blob/master/integration-tests/devtools/src/test/java/io/quarkus/devtools/codestarts/quarkus/QuarkusCodestartGenerationTest.java\n \n+=== Writing tips\n \n-=== Writing Example Code for an Extension\n+* Your codestart must/should be independent of buildtool and dockerfiles\n+* Codestarts should be able to work alongside each other without interference\n+* Make sure your class names are unique accross all codestarts.\n+* Use `org.acme` as package name, and `org.acme.[something]` if it has more than one class.\n+* Use the path `/[unique-name]-...` for your REST paths\n+* If they are not adding learning value, don't provide tests\n+* Write the config in `src/main/resources/application.yml`.\n+It is going to be merged with the other codestarts config and automatically converted to the selected config type (yaml or properties).\n+* you can start with java and add kotlin later in another PR\n+* If the codestart is a bad citizen and may have some compatibility issues, make it a `singleton-example`\n+* Ping me @ia3andy on https://quarkusio.zulipchat.com/\n \n-Let's imagine we are writing the example codestart for my \"foo\" extension. As we discussed before, the base of the project is already provided so we can focus on the example code.\n+=== Directory Structure\n+\n+*NOTE* `codestart.yml` is the only required file.\n \n-1. Create your `codestart.yml`:\n+* `codestart.yml` must be at the root of the codestart\n+* `./base` contains all the files that will be processed\n+* `./[java/kotlin/scala]` contains all the files that will be processed if the specified language has been selected (overriding base)\n+\n+=== codestart.yml\n \n codestart.yml:\n [source,yaml]\n ----\n----\n-name: foo-example\n-ref: foo\n-type: code\n-tags: example\n-spec:\n-  base:\n+name: resteasy-example // the codestart unique name\n+ref: resteasy // the codestart reference (the name is used if not set)\n+type: code // the type of codestart (other types are used for other project files)\n+tags: example // indicate that this is optional example code\n+language:\n+  base: //  most of the time, only base is needed (we may also define java, kotlin, scala overrides)\n     data:\n-      # Some data for my templates which gives could be overridden by the user input\n-      some:\n-        data:\n-          here: bar\n-          there: foo\n+      title: RESTEasy JAX-RS\n+      description: |\n+        <p>A Hello World RESTEasy resource</p>\n+      guide: https://quarkus.io/guides/rest-json\n     dependencies:\n-      # the dependencies needed for my codestart (note that the extension dependency is auto-added if missing)\n-      - io.quarkus:quarkus-foo\n-      - io.quarkus:quarkus-resteasy\n-      # ... you can also provide a version (when it's not part of the platform bom)\n-      - group:artifact:version\n+      - io.quarkus:quarkus-resteasy // You need to specify the dependencies to add (even if it's the one attached)\n     test-dependencies:\n-      # test dependencies\n-      - io.rest-assured:rest-assured\n+      - io.rest-assured:rest-assured // And maybe test dependencies?\n ----\n \n-*NOTE* You don't need to add `pom.xml` or `build.gradle`, it is going to be auto generated. It will include the dependencies provided in the `codestart.yml`.\n+== Advanced topics\n \n-2. Add you example code in java, kotlin or scala\n+=== Naming Convention for files\n \n-* java/src/main/java/org/acme/foo/Foo.java:\n-[source,java]\n-----\n-package org.acme.foo\n+* `.tpl.qute` will be processed with Qute and can use data (`.tpl.qute` will be removed from the output file name).\n+* some files have a specific processing (`readme.md`, `src/test/resources/application.yml`, `src/main/resources/META-INF/resources/index.html`)\n+* other files are copied.\n \n-import javax.ws.rs.GET\n-import javax.ws.rs.Path\n-import javax.ws.rs.Produces\n-import javax.ws.rs.core.MediaType\n+=== Templates (Qute)\n \n-@Path(\"foo\")\n-class ExampleResource {\n+Codestarts may use Qute templates `MyClass.tpl.qute.java` for dynamic rendering.\n \n-    @GET\n-    @Produces(MediaType.TEXT_PLAIN)\n-    fun hello() = \"Hello foo\"\n-}\n-----\n+Those templates are able to use data which contains:\n+\n+* The `data` of the codestart to generate (specified in the `codestart.yml`)\n+* A merge of the `shared-data` from the all the codestarts used to generate the project\n+* The user input\n+* Some dynamically generated data (e.g. `dependencies` and `test-dependencies`)\n+\n+=== README.md\n \n-* kotlin/src/main/kotlin/org/acme/foo/Foo.kt\n-* scala/src/main/scala/org/acme/foo/Foo.kt\n+You may add a `README.md` or `README.tpl.qute.md` in the `base` directory, it will be appended to the others.\n+So just add the info relative to your codestart.\n \n-*NOTE* Just add `.tpl.qute` if you want it to be rendered with qute and use some data and simple logic\n+=== application.properties\n \n-*NOTE* You can use a `base` directory to add files to process for all languages: readme, configs, ...\n+As a convention, you should always provide the Quarkus configuration as a yaml file (`src/test/resources/application.yml`).\n \n+It is going to be:\n \n-2. Add some configuration (if needed)\n+* merged with the other codestarts configs\n+* automatically converted to the selected config type (yaml or properties) at generation time depending on the selected extensions\n \n-The `base/src/main/resources/application.yml` file is going to be merged with the other codestarts config and automatically converted to the selected config type (yaml or properties).\n+=== index.html and cloud codestarts\n \n-Note: if it's specific to a language, you can put the config in each languages folders\n+Codestarts may provide a snippet for the generated index.html by adding this file:\n \n-* base/src/main/resources/application.yml (using quarkus yaml config convention):\n+base/src/main/resources/META-INF/resources/index.tpl.qute.html:\n+[source,html]\n+----\n+<div class=\"example\">\n+    <div class=\"example-header\">\n+        <h4>{title}</h4>\n+        <a href=\"{guide}\" target=\"_blank\" class=\"guide-link\">Guide</a>\n+    </div>\n+    <div class=\"example-description\">\n+        {description}\n+    </div>\n+    <div class=\"example-paths\">\n+        {#for item in paths}\n+        <a href=\"{item.path}\" class=\"path-link\" target=\"_blank\">{item.method} {item.path}</a>\n+        {/for}\n+    </div>\n+</div>\n+----\n+\n+You also need to add this data to the `codestart.yml`:\n+\n+codestart.yml:\n [source,yaml]\n ----\n-quarkus:\n-  http:\n-    port: 8081\n+...\n+language:\n+  base:\n+    data:\n+      title: My example\n+      description: |\n+        <p>My example description.</p>\n+        <p><b>A Quarkus catch phrase!</b></p>\n+      paths:\n+        - method: GET\n+          path: /the-rest-path-of-my-example\n+      guide: https://quarkus.io/guides/my-example\n+...\n ----\n \n-3. Create a readme section (if needed)\n+=== Singleton example\n \n-This will be appended to all different selected examples.\n+If the codestart is a bad citizen and may have some compatibility issues, make it a `singleton-example`.\n \n-* base/README.md\n-[source,markdown]\n-----\n-# FOO Example\n+Specificities:\n \n-The Foo Example shows...\n+* It can't be selected with another singleton example\n+* I will automatically disable all other examples when selected", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9a3707c4980c205d69ebcb5c2d215acaea71665"}, "originalPosition": 342}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MDQ3MjYw", "url": "https://github.com/quarkusio/quarkus/pull/13633#pullrequestreview-545047260", "createdAt": "2020-12-04T15:15:59Z", "commit": {"oid": "a9a3707c4980c205d69ebcb5c2d215acaea71665"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNToxNTo1OVrOH_VT4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNToxNTo1OVrOH_VT4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE3MTQ5MA==", "bodyText": "I would replace \"Specificities\" with something like \"Be aware\". But perhaps this list should be re-phrased to make it easier to read.", "url": "https://github.com/quarkusio/quarkus/pull/13633#discussion_r536171490", "createdAt": "2020-12-04T15:15:59Z", "author": {"login": "aloubyansky"}, "path": "independent-projects/tools/codestarts/README.adoc", "diffHunk": "@@ -33,210 +53,199 @@ Each codestart consists of:\n . A `codestart.yml` file\n . Optionally some templates which following a common structure and naming conventions\n \n-*NOTE* The `codestart.yml` file and the directory structure follow the same principle, it can optionally contain a base and/or some language overrides.\n+== Where are the Quarkus codestarts located\n \n-=== Project generation\n+* Quarkus core codestarts dir: https://github.com/quarkusio/quarkus/tree/master/devtools/platform-descriptor-json/src/main/resources/codestarts/quarkus/core\n+* Example codestarts directory: https://github.com/quarkusio/quarkus/tree/master/devtools/platform-descriptor-json/src/main/resources/codestarts/quarkus/examples\n \n-When generating a Quarkus project:\n+== Writing a codestart with example code for an Extension\n \n-. Codestarts to use are resolved depending on the input\n-. The Codestarts' `shared-data` (defined in the different codestart.yml) is merged together and made available to all codestarts (conflicts are forbidden)\n-. The relevant files are processed:\n-** Only the files that are related to the selected language are processed\n-** The files are processed differently based on a naming convention.\n-** The data is used to render Qute templates\n-** We always process in this order: \n+As we discussed before, the base project files (pom.xml, dockerfiles, ...) are already generated by some existing codestarts. Thanks to this, we can only focus on the important, the example code for the extension.\n \n-... language\n-... project\n-... buildtool\n-... config\n-... tooling\n-... code\n+Here is the flow I am using to develop a new Quarkus extension codestart:\n \n-\n-The data used to generate a specific codestart is a merge of:\n-\n-. The data of the codestart to generate\n-. All codestarts \"shared\" data\n-. The user input\n-. Some specific post processing (e.g. adding dependencies)\n-\n-*NOTE* The data (shared or not) can also be specific to a language.\n-\n-=== Directory Structure\n-\n-*NOTE* `codestart.yml` is the only required file.\n-\n-* `codestart.yml` must be at the root of the codestart\n-* `./base` contains all the files that will be processed\n-* `./[languageName]` contains all the files that will be processed if the specified language has been selected (overriding base)\n-\n-=== codestart.yml\n-\n-codestart.yml:\n-[source,yaml]\n+. duplicate the Quarkus codestart example (e.g. link:./examples/quarkus/my-example[./examples/quarkus/my-example])\n+. update the codestart.yml (1 & 2 will be replaced by https://github.com/quarkusio/quarkus/issues/13614)\n+. use the `qcd@quarkusio` jbang script to generate the project using your new codestart named `my-example` located in `./examples/quarkus` in java and kotlin:\n++\n+[source,bash]\n ----\n-name: the unique name - REQUIRED\n-ref: the reference name (not unique) to use for extension matching (else the name is used)\n-type: the type [code (default), project, buildtool, language, config] or any custom type\n-tags: an array of tags (add `example` for example codestarts)\n-fallback: flag to indicate that it should be selected as fallback when no codestart has been selected with type - Only for base types\n-preselected: flag to indicate that it should be pre-selected - Only for extra types.\n-spec:\n-  [base or language name]: the specification (base, java, ...)\n-    data: a map of data to use only for this codestart\n-    shared-data: a map of data to use accross all codestarts\n-    dependencies: a list of dependencies to add when this is selected\n-    test-dependencies: a list of test dependencies to add when this is selected\n+jbang qcd@quarkusio -l java,kotlin -c ./examples/quarkus my-example\n ----\n \n-=== Common Shared and Built In Data\n+. Make sure the generated project(s) are as expected. You can use `-t` option to automatically build and test the generated project(s).\n+. You can either edit the codestarts files and start again from 3 or also, open the generated project(s) using you IDE and edit the files. You need to manually copy the changes back to your codestart files (and iterate again from 3)\n \n-There's a few built `shared-data` variables that you should know about\n-* `gen-info.time` is hardcoded to current time milliseconds of when the codestart was generated.  Useful if you need a random value in your codestart.\n+*NOTE 1* You can start with java and add kotlin later in another PR\n \n+*NOTE 2* The build file will automatically include the dependencies provided in the `codestart.yml`.\n \n-=== Naming Convention for files\n+=== When done (to bind the codestart to the extension):\n \n-* `.tpl.qute` will be processed with Qute (`.tpl.qute` will be removed from the output file name).\n-* `.include.qute` is used as a Qute template for inclusion (only available to the codestart, not listed in the generated project ).\n+. put the working codestart in `devtools/platform-descriptor-json/src/main/resources/codestarts/quarkus/examples` and submit a PR.\n+. Add the `ref` value of the codestart to the extension metadata. This is how it is activated when the extension is selected (e.g )\n \n-  Example: When using `{#include [name]}` in a template, it will look for `[name].include.qute` in the language dir, then in the base dir or the codestart.\n+    Example: https://github.com/quarkusio/quarkus/blob/master/extensions/resteasy/runtime/src/main/resources/META-INF/quarkus-extension.yaml#L14\n \n-* an output strategy can be defined for specific files, it defines some specific logic on how to deal with those files.\n+*NOTE* This is temporary, extension codestarts will soon live alongside the extension.\n \n- Example: in the Quarkus project `codestart.yml`:\n-[source,yaml]\n-----\n-output-strategy:\n-  \"pom.xml\": smart-pom-merge # smartly merge pom.xml contents together\n-  \"README.md\": append # they are appended together\n-  \"readme.md\": forbidden # it will fail if found in any codestart\n-  \"README.adoc\": forbidden\n-  \"readme.adoc\": forbidden\n-  \".gitignore\": append\n-  \"src/main/resources/application.yml\": smart-config-merge # smartly merge config together and automatically converted to the selected config type (yaml or properties)\n-  \"src/main/resources/application.yaml\": forbidden # should use yml instead\n-  \"src/main/resources/application.properties\": forbidden # should use yml instead\n-  \"*\": fail-on-duplicate # it will fail if a duplicate is found for all other files\n-----\n+=== Tests\n \n-* other files are just copied as is.\n+* We already have tests making sure we can create and build apps with all codestarts together with each build tools and languages:\n++\n+https://github.com/quarkusio/quarkus/blob/master/integration-tests/devtools/src/test/java/io/quarkus/devtools/codestarts/quarkus/QuarkusCodestartRunIT.java#L74-L90\n+* We have specific tests making sure the generation is working as expected (we will split it soon, you may create another class for your codestart):\n++\n+https://github.com/quarkusio/quarkus/blob/master/integration-tests/devtools/src/test/java/io/quarkus/devtools/codestarts/quarkus/QuarkusCodestartGenerationTest.java\n \n+=== Writing tips\n \n-=== Writing Example Code for an Extension\n+* Your codestart must/should be independent of buildtool and dockerfiles\n+* Codestarts should be able to work alongside each other without interference\n+* Make sure your class names are unique accross all codestarts.\n+* Use `org.acme` as package name, and `org.acme.[something]` if it has more than one class.\n+* Use the path `/[unique-name]-...` for your REST paths\n+* If they are not adding learning value, don't provide tests\n+* Write the config in `src/main/resources/application.yml`.\n+It is going to be merged with the other codestarts config and automatically converted to the selected config type (yaml or properties).\n+* you can start with java and add kotlin later in another PR\n+* If the codestart is a bad citizen and may have some compatibility issues, make it a `singleton-example`\n+* Ping me @ia3andy on https://quarkusio.zulipchat.com/\n \n-Let's imagine we are writing the example codestart for my \"foo\" extension. As we discussed before, the base of the project is already provided so we can focus on the example code.\n+=== Directory Structure\n+\n+*NOTE* `codestart.yml` is the only required file.\n \n-1. Create your `codestart.yml`:\n+* `codestart.yml` must be at the root of the codestart\n+* `./base` contains all the files that will be processed\n+* `./[java/kotlin/scala]` contains all the files that will be processed if the specified language has been selected (overriding base)\n+\n+=== codestart.yml\n \n codestart.yml:\n [source,yaml]\n ----\n----\n-name: foo-example\n-ref: foo\n-type: code\n-tags: example\n-spec:\n-  base:\n+name: resteasy-example // the codestart unique name\n+ref: resteasy // the codestart reference (the name is used if not set)\n+type: code // the type of codestart (other types are used for other project files)\n+tags: example // indicate that this is optional example code\n+language:\n+  base: //  most of the time, only base is needed (we may also define java, kotlin, scala overrides)\n     data:\n-      # Some data for my templates which gives could be overridden by the user input\n-      some:\n-        data:\n-          here: bar\n-          there: foo\n+      title: RESTEasy JAX-RS\n+      description: |\n+        <p>A Hello World RESTEasy resource</p>\n+      guide: https://quarkus.io/guides/rest-json\n     dependencies:\n-      # the dependencies needed for my codestart (note that the extension dependency is auto-added if missing)\n-      - io.quarkus:quarkus-foo\n-      - io.quarkus:quarkus-resteasy\n-      # ... you can also provide a version (when it's not part of the platform bom)\n-      - group:artifact:version\n+      - io.quarkus:quarkus-resteasy // You need to specify the dependencies to add (even if it's the one attached)\n     test-dependencies:\n-      # test dependencies\n-      - io.rest-assured:rest-assured\n+      - io.rest-assured:rest-assured // And maybe test dependencies?\n ----\n \n-*NOTE* You don't need to add `pom.xml` or `build.gradle`, it is going to be auto generated. It will include the dependencies provided in the `codestart.yml`.\n+== Advanced topics\n \n-2. Add you example code in java, kotlin or scala\n+=== Naming Convention for files\n \n-* java/src/main/java/org/acme/foo/Foo.java:\n-[source,java]\n-----\n-package org.acme.foo\n+* `.tpl.qute` will be processed with Qute and can use data (`.tpl.qute` will be removed from the output file name).\n+* some files have a specific processing (`readme.md`, `src/test/resources/application.yml`, `src/main/resources/META-INF/resources/index.html`)\n+* other files are copied.\n \n-import javax.ws.rs.GET\n-import javax.ws.rs.Path\n-import javax.ws.rs.Produces\n-import javax.ws.rs.core.MediaType\n+=== Templates (Qute)\n \n-@Path(\"foo\")\n-class ExampleResource {\n+Codestarts may use Qute templates `MyClass.tpl.qute.java` for dynamic rendering.\n \n-    @GET\n-    @Produces(MediaType.TEXT_PLAIN)\n-    fun hello() = \"Hello foo\"\n-}\n-----\n+Those templates are able to use data which contains:\n+\n+* The `data` of the codestart to generate (specified in the `codestart.yml`)\n+* A merge of the `shared-data` from the all the codestarts used to generate the project\n+* The user input\n+* Some dynamically generated data (e.g. `dependencies` and `test-dependencies`)\n+\n+=== README.md\n \n-* kotlin/src/main/kotlin/org/acme/foo/Foo.kt\n-* scala/src/main/scala/org/acme/foo/Foo.kt\n+You may add a `README.md` or `README.tpl.qute.md` in the `base` directory, it will be appended to the others.\n+So just add the info relative to your codestart.\n \n-*NOTE* Just add `.tpl.qute` if you want it to be rendered with qute and use some data and simple logic\n+=== application.properties\n \n-*NOTE* You can use a `base` directory to add files to process for all languages: readme, configs, ...\n+As a convention, you should always provide the Quarkus configuration as a yaml file (`src/test/resources/application.yml`).\n \n+It is going to be:\n \n-2. Add some configuration (if needed)\n+* merged with the other codestarts configs\n+* automatically converted to the selected config type (yaml or properties) at generation time depending on the selected extensions\n \n-The `base/src/main/resources/application.yml` file is going to be merged with the other codestarts config and automatically converted to the selected config type (yaml or properties).\n+=== index.html and cloud codestarts\n \n-Note: if it's specific to a language, you can put the config in each languages folders\n+Codestarts may provide a snippet for the generated index.html by adding this file:\n \n-* base/src/main/resources/application.yml (using quarkus yaml config convention):\n+base/src/main/resources/META-INF/resources/index.tpl.qute.html:\n+[source,html]\n+----\n+<div class=\"example\">\n+    <div class=\"example-header\">\n+        <h4>{title}</h4>\n+        <a href=\"{guide}\" target=\"_blank\" class=\"guide-link\">Guide</a>\n+    </div>\n+    <div class=\"example-description\">\n+        {description}\n+    </div>\n+    <div class=\"example-paths\">\n+        {#for item in paths}\n+        <a href=\"{item.path}\" class=\"path-link\" target=\"_blank\">{item.method} {item.path}</a>\n+        {/for}\n+    </div>\n+</div>\n+----\n+\n+You also need to add this data to the `codestart.yml`:\n+\n+codestart.yml:\n [source,yaml]\n ----\n-quarkus:\n-  http:\n-    port: 8081\n+...\n+language:\n+  base:\n+    data:\n+      title: My example\n+      description: |\n+        <p>My example description.</p>\n+        <p><b>A Quarkus catch phrase!</b></p>\n+      paths:\n+        - method: GET\n+          path: /the-rest-path-of-my-example\n+      guide: https://quarkus.io/guides/my-example\n+...\n ----\n \n-3. Create a readme section (if needed)\n+=== Singleton example\n \n-This will be appended to all different selected examples.\n+If the codestart is a bad citizen and may have some compatibility issues, make it a `singleton-example`.\n \n-* base/README.md\n-[source,markdown]\n-----\n-# FOO Example\n+Specificities:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9a3707c4980c205d69ebcb5c2d215acaea71665"}, "originalPosition": 338}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1de3ad80906235f04e01ce526c40a526175c865", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/e1de3ad80906235f04e01ce526c40a526175c865", "committedDate": "2020-12-07T07:49:27Z", "message": "Update the Quarkus Codestart doc"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c516e4f25d3a4abe452bcb79d318950a1cfaa953", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/c516e4f25d3a4abe452bcb79d318950a1cfaa953", "committedDate": "2020-12-07T07:42:56Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Alexey Loubyansky <olubyans@redhat.com>"}, "afterCommit": {"oid": "e1de3ad80906235f04e01ce526c40a526175c865", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/e1de3ad80906235f04e01ce526c40a526175c865", "committedDate": "2020-12-07T07:49:27Z", "message": "Update the Quarkus Codestart doc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1OTAzNDc3", "url": "https://github.com/quarkusio/quarkus/pull/13633#pullrequestreview-545903477", "createdAt": "2020-12-07T08:02:16Z", "commit": {"oid": "e1de3ad80906235f04e01ce526c40a526175c865"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1199, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}