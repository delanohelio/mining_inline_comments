{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczODkxMTUw", "number": 7153, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOToxNTozM1rODfTOrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjo0NjoyN1rODgxWaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTQ3NTAyOnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/ConstructorPropertiesProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOToxNTozM1rOFo7PvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMTowMTowNlrOFo-aFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1ODA0NQ==", "bodyText": "Please use a String for the name instead. I prefer we don't have any dependency to java.beans.", "url": "https://github.com/quarkusio/quarkus/pull/7153#discussion_r378458045", "createdAt": "2020-02-12T19:15:33Z", "author": {"login": "gsmet"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ConstructorPropertiesProcessor.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package io.quarkus.deployment;\n+\n+import java.beans.ConstructorProperties;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.MethodInfo;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+\n+/**\n+ * Registers all classes for reflection,\n+ * that contain a constructor annotated with {@link ConstructorProperties}.\n+ */\n+public class ConstructorPropertiesProcessor {\n+\n+    private static final DotName CONSTRUCTOR_PROPERTIES = DotName.createSimple(ConstructorProperties.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98cb49bb5e5c38d35a0c8f18b3b9b5537d2aa6ec"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwOTg0NA==", "bodyText": "makes sense.", "url": "https://github.com/quarkusio/quarkus/pull/7153#discussion_r378509844", "createdAt": "2020-02-12T21:01:06Z", "author": {"login": "JohT"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ConstructorPropertiesProcessor.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package io.quarkus.deployment;\n+\n+import java.beans.ConstructorProperties;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.MethodInfo;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+\n+/**\n+ * Registers all classes for reflection,\n+ * that contain a constructor annotated with {@link ConstructorProperties}.\n+ */\n+public class ConstructorPropertiesProcessor {\n+\n+    private static final DotName CONSTRUCTOR_PROPERTIES = DotName.createSimple(ConstructorProperties.class.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1ODA0NQ=="}, "originalCommit": {"oid": "98cb49bb5e5c38d35a0c8f18b3b9b5537d2aa6ec"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTQ3NjY0OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/ConstructorPropertiesProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOToxNjowM1rOFo7Qzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMTowMDozOFrOFo-ZUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1ODMxOQ==", "bodyText": "Honestly, this is far less readable than a good old for loop.", "url": "https://github.com/quarkusio/quarkus/pull/7153#discussion_r378458319", "createdAt": "2020-02-12T19:16:03Z", "author": {"login": "gsmet"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ConstructorPropertiesProcessor.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package io.quarkus.deployment;\n+\n+import java.beans.ConstructorProperties;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.MethodInfo;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+\n+/**\n+ * Registers all classes for reflection,\n+ * that contain a constructor annotated with {@link ConstructorProperties}.\n+ */\n+public class ConstructorPropertiesProcessor {\n+\n+    private static final DotName CONSTRUCTOR_PROPERTIES = DotName.createSimple(ConstructorProperties.class.getName());\n+\n+    @BuildStep\n+    void build(BuildProducer<ReflectiveClassBuildItem> reflectiveClass, CombinedIndexBuildItem indexBuildItem) {\n+        indexBuildItem.getIndex().getAnnotations(CONSTRUCTOR_PROPERTIES).stream()\n+                .map(AnnotationInstance::target)\n+                .filter(MethodInfo.class::isInstance)\n+                .map(MethodInfo.class::cast)\n+                .map(MethodInfo::declaringClass)\n+                .map(ClassInfo::toString)\n+                .map(this::asReflectiveClassBuildItem)\n+                .forEach(reflectiveClass::produce);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98cb49bb5e5c38d35a0c8f18b3b9b5537d2aa6ec"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwOTY1MA==", "bodyText": "I'm kinda used to it, but it'll be indeed more readable using common known technique.", "url": "https://github.com/quarkusio/quarkus/pull/7153#discussion_r378509650", "createdAt": "2020-02-12T21:00:38Z", "author": {"login": "JohT"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ConstructorPropertiesProcessor.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package io.quarkus.deployment;\n+\n+import java.beans.ConstructorProperties;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.MethodInfo;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+\n+/**\n+ * Registers all classes for reflection,\n+ * that contain a constructor annotated with {@link ConstructorProperties}.\n+ */\n+public class ConstructorPropertiesProcessor {\n+\n+    private static final DotName CONSTRUCTOR_PROPERTIES = DotName.createSimple(ConstructorProperties.class.getName());\n+\n+    @BuildStep\n+    void build(BuildProducer<ReflectiveClassBuildItem> reflectiveClass, CombinedIndexBuildItem indexBuildItem) {\n+        indexBuildItem.getIndex().getAnnotations(CONSTRUCTOR_PROPERTIES).stream()\n+                .map(AnnotationInstance::target)\n+                .filter(MethodInfo.class::isInstance)\n+                .map(MethodInfo.class::cast)\n+                .map(MethodInfo::declaringClass)\n+                .map(ClassInfo::toString)\n+                .map(this::asReflectiveClassBuildItem)\n+                .forEach(reflectiveClass::produce);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1ODMxOQ=="}, "originalCommit": {"oid": "98cb49bb5e5c38d35a0c8f18b3b9b5537d2aa6ec"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Njg5NTc5OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/ConstructorPropertiesProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjo0NjoyN1rOFrKE5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNjozOTozNFrOFrcklw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5ODE4Mg==", "bodyText": "Could you remove the link here? I would like to avoid having the import.\nOtherwise it looks good to me.", "url": "https://github.com/quarkusio/quarkus/pull/7153#discussion_r380798182", "createdAt": "2020-02-18T16:46:27Z", "author": {"login": "gsmet"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ConstructorPropertiesProcessor.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.quarkus.deployment;\n+\n+import java.beans.ConstructorProperties;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.MethodInfo;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+\n+/**\n+ * Registers all classes for reflection,\n+ * that contain a constructor annotated with {@link ConstructorProperties}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df76c0cc5553dbd1bbfe4e9322e9fba97218eb89"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEwMTIwNw==", "bodyText": "done, i missed that.", "url": "https://github.com/quarkusio/quarkus/pull/7153#discussion_r381101207", "createdAt": "2020-02-19T06:39:34Z", "author": {"login": "JohT"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ConstructorPropertiesProcessor.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.quarkus.deployment;\n+\n+import java.beans.ConstructorProperties;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.MethodInfo;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+\n+/**\n+ * Registers all classes for reflection,\n+ * that contain a constructor annotated with {@link ConstructorProperties}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5ODE4Mg=="}, "originalCommit": {"oid": "df76c0cc5553dbd1bbfe4e9322e9fba97218eb89"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 985, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}