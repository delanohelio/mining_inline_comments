{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMzAxNjE5", "number": 11224, "title": "Add a counter of log events per log level", "bodyText": "Add a metric related to logging:\n\nCreate a log_total counter in Quarkus core module (since logging is core)\nAdd a tag/label to segregate by the standard jboss-logging levels\nAdd a build-time activation config quarkus.log.metrics.enabled (false by default, as for other metrics)\n\nlog_total{level=\"ERROR\"} 5   <- too many ERROR is the most basic form of alert\nlog_total{level=\"INFO\"} 15   <- too many INFO may mean some logs are generated per message and scale with TPS\nlog_total{level=\"DEBUG\"} 30  <- allows to detect that log level is likely wrongly configured\nNon-standard log levels are counted in the bucket of the lower standard level.\nThis is inspired by the Prometheus metric https://github.com/prometheus/client_java/blob/master/simpleclient_log4j/src/main/java/io/prometheus/client/log4j/InstrumentedAppender.java", "createdAt": "2020-08-05T10:44:29Z", "url": "https://github.com/quarkusio/quarkus/pull/11224", "merged": true, "mergeCommit": {"oid": "a2014f5320b14769bc19842b2aa87b54135d42fc"}, "closed": true, "closedAt": "2020-08-10T07:47:17Z", "author": {"login": "rquinio"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc75eHlAFqTQ2MTU3NDAxMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9c-scgFqTQ2NDAwMjg1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNTc0MDEz", "url": "https://github.com/quarkusio/quarkus/pull/11224#pullrequestreview-461574013", "createdAt": "2020-08-05T11:25:06Z", "commit": {"oid": "796ad2ab9c3168e95d4df2bc1579322f2ce7161c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMToyNTowNlrOG8FgYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMToyNTowNlrOG8FgYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY1Nzk1Mw==", "bodyText": "I just noticed the logic is wrong, should be renamed totalLogCounter and always incremented.\ni.e. it should always be: vendor_log_total >= sum(vendor_log_total{level=\"*\"})", "url": "https://github.com/quarkusio/quarkus/pull/11224#discussion_r465657953", "createdAt": "2020-08-05T11:25:06Z", "author": {"login": "rquinio"}, "path": "core/runtime/src/main/java/io/quarkus/runtime/logging/LogMetricsHandler.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.runtime.logging;\n+\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.logging.Handler;\n+import java.util.logging.LogRecord;\n+\n+import org.jboss.logmanager.Level;\n+\n+public class LogMetricsHandler extends Handler {\n+\n+    AtomicLong defaultLogCounter;\n+    Map<Level, AtomicLong> logCounters;\n+\n+    public LogMetricsHandler(Map<Level, AtomicLong> logCounters, AtomicLong defaultLogCounter) {\n+        this.logCounters = logCounters;\n+        this.defaultLogCounter = defaultLogCounter;\n+    }\n+\n+    @Override\n+    public void publish(LogRecord record) {\n+        AtomicLong counter = logCounters.get(record.getLevel());\n+        if (counter != null) {\n+            counter.incrementAndGet();\n+        } else {\n+            defaultLogCounter.incrementAndGet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "796ad2ab9c3168e95d4df2bc1579322f2ce7161c"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNzY1MjEx", "url": "https://github.com/quarkusio/quarkus/pull/11224#pullrequestreview-461765211", "createdAt": "2020-08-05T15:15:32Z", "commit": {"oid": "796ad2ab9c3168e95d4df2bc1579322f2ce7161c"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNToxNTozM1rOG8OWyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNTozMjowNFrOG8PEZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgwMjk1Mw==", "bodyText": "These definitely ought to be final.", "url": "https://github.com/quarkusio/quarkus/pull/11224#discussion_r465802953", "createdAt": "2020-08-05T15:15:33Z", "author": {"login": "dmlloyd"}, "path": "core/runtime/src/main/java/io/quarkus/runtime/logging/LogMetricsHandler.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.runtime.logging;\n+\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.logging.Handler;\n+import java.util.logging.LogRecord;\n+\n+import org.jboss.logmanager.Level;\n+\n+public class LogMetricsHandler extends Handler {\n+\n+    AtomicLong defaultLogCounter;\n+    Map<Level, AtomicLong> logCounters;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "796ad2ab9c3168e95d4df2bc1579322f2ce7161c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgwNzAzMw==", "bodyText": "Why make this optional when the memory usage is negligible and the CPU overhead would be only a small fraction of the cost of logging the message to any handler?  And why make it a build-time property?\nIMO it would be simpler and more expedient to leave it on all the time.", "url": "https://github.com/quarkusio/quarkus/pull/11224#discussion_r465807033", "createdAt": "2020-08-05T15:21:09Z", "author": {"login": "dmlloyd"}, "path": "core/runtime/src/main/java/io/quarkus/runtime/logging/LogBuildTimeConfig.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package io.quarkus.runtime.logging;\n+\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigPhase;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+\n+@ConfigRoot(name = \"log\", phase = ConfigPhase.BUILD_AND_RUN_TIME_FIXED)\n+public class LogBuildTimeConfig {\n+\n+    /**\n+     * Whether or not logging metrics are published in case a metrics extension is present.\n+     */\n+    @ConfigItem(name = \"metrics.enabled\", defaultValue = \"false\")\n+    public boolean metricsEnabled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "796ad2ab9c3168e95d4df2bc1579322f2ce7161c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxMjk3MA==", "bodyText": "This should be final.", "url": "https://github.com/quarkusio/quarkus/pull/11224#discussion_r465812970", "createdAt": "2020-08-05T15:29:38Z", "author": {"login": "dmlloyd"}, "path": "core/runtime/src/main/java/io/quarkus/runtime/logging/LogMetricsHandlerRecorder.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package io.quarkus.runtime.logging;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Consumer;\n+import java.util.logging.Handler;\n+\n+import org.jboss.logmanager.Level;\n+\n+import io.quarkus.runtime.RuntimeValue;\n+import io.quarkus.runtime.annotations.Recorder;\n+import io.quarkus.runtime.metrics.MetricsFactory;\n+\n+@Recorder\n+public class LogMetricsHandlerRecorder {\n+\n+    static final String METRIC_NAME = \"log.total\";\n+\n+    static final String METRIC_DESCRIPTION = \"Number of log events\";\n+\n+    static final List<Level> STANDARD_LEVELS = Arrays.asList(Level.FATAL, Level.ERROR, Level.WARN, Level.INFO, Level.DEBUG,\n+            Level.TRACE);\n+\n+    Map<Level, AtomicLong> logCounters = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "796ad2ab9c3168e95d4df2bc1579322f2ce7161c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxMzA1OQ==", "bodyText": "This should be final.", "url": "https://github.com/quarkusio/quarkus/pull/11224#discussion_r465813059", "createdAt": "2020-08-05T15:29:45Z", "author": {"login": "dmlloyd"}, "path": "core/runtime/src/main/java/io/quarkus/runtime/logging/LogMetricsHandlerRecorder.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package io.quarkus.runtime.logging;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Consumer;\n+import java.util.logging.Handler;\n+\n+import org.jboss.logmanager.Level;\n+\n+import io.quarkus.runtime.RuntimeValue;\n+import io.quarkus.runtime.annotations.Recorder;\n+import io.quarkus.runtime.metrics.MetricsFactory;\n+\n+@Recorder\n+public class LogMetricsHandlerRecorder {\n+\n+    static final String METRIC_NAME = \"log.total\";\n+\n+    static final String METRIC_DESCRIPTION = \"Number of log events\";\n+\n+    static final List<Level> STANDARD_LEVELS = Arrays.asList(Level.FATAL, Level.ERROR, Level.WARN, Level.INFO, Level.DEBUG,\n+            Level.TRACE);\n+\n+    Map<Level, AtomicLong> logCounters = new HashMap<>();\n+\n+    /**\n+     * Counter for non-standard log levels\n+     */\n+    AtomicLong defaultLogCounter = new AtomicLong(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "796ad2ab9c3168e95d4df2bc1579322f2ce7161c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxNDYzMA==", "bodyText": "In addition, I would map as many non-standard levels as possible to these counters, for example:\n    logCounters.put(java.util.logging.Level.WARNING, logCounters.get(Level.WARN));\nThis will increase the accuracy of the counts.  Note that level equivalency should be determined by the level's integer value.", "url": "https://github.com/quarkusio/quarkus/pull/11224#discussion_r465814630", "createdAt": "2020-08-05T15:32:04Z", "author": {"login": "dmlloyd"}, "path": "core/runtime/src/main/java/io/quarkus/runtime/logging/LogMetricsHandlerRecorder.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package io.quarkus.runtime.logging;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Consumer;\n+import java.util.logging.Handler;\n+\n+import org.jboss.logmanager.Level;\n+\n+import io.quarkus.runtime.RuntimeValue;\n+import io.quarkus.runtime.annotations.Recorder;\n+import io.quarkus.runtime.metrics.MetricsFactory;\n+\n+@Recorder\n+public class LogMetricsHandlerRecorder {\n+\n+    static final String METRIC_NAME = \"log.total\";\n+\n+    static final String METRIC_DESCRIPTION = \"Number of log events\";\n+\n+    static final List<Level> STANDARD_LEVELS = Arrays.asList(Level.FATAL, Level.ERROR, Level.WARN, Level.INFO, Level.DEBUG,\n+            Level.TRACE);\n+\n+    Map<Level, AtomicLong> logCounters = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxMjk3MA=="}, "originalCommit": {"oid": "796ad2ab9c3168e95d4df2bc1579322f2ce7161c"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNzg2OTk4", "url": "https://github.com/quarkusio/quarkus/pull/11224#pullrequestreview-461786998", "createdAt": "2020-08-05T15:38:55Z", "commit": {"oid": "796ad2ab9c3168e95d4df2bc1579322f2ce7161c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNTozODo1NVrOG8PWeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNTozODo1NVrOG8PWeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxOTI1Ng==", "bodyText": "I noticed a race condition in bootstrap: the log handler gets called with few INFO/DEBUG events (~15 with MetricsTestCase) before the metrics are themselves registered.\n=> I'll pre-fill the Map in the handler itself to solve this.", "url": "https://github.com/quarkusio/quarkus/pull/11224#discussion_r465819256", "createdAt": "2020-08-05T15:38:55Z", "author": {"login": "rquinio"}, "path": "core/runtime/src/main/java/io/quarkus/runtime/logging/LogMetricsHandlerRecorder.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package io.quarkus.runtime.logging;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Consumer;\n+import java.util.logging.Handler;\n+\n+import org.jboss.logmanager.Level;\n+\n+import io.quarkus.runtime.RuntimeValue;\n+import io.quarkus.runtime.annotations.Recorder;\n+import io.quarkus.runtime.metrics.MetricsFactory;\n+\n+@Recorder\n+public class LogMetricsHandlerRecorder {\n+\n+    static final String METRIC_NAME = \"log.total\";\n+\n+    static final String METRIC_DESCRIPTION = \"Number of log events\";\n+\n+    static final List<Level> STANDARD_LEVELS = Arrays.asList(Level.FATAL, Level.ERROR, Level.WARN, Level.INFO, Level.DEBUG,\n+            Level.TRACE);\n+\n+    Map<Level, AtomicLong> logCounters = new HashMap<>();\n+\n+    /**\n+     * Counter for non-standard log levels\n+     */\n+    AtomicLong defaultLogCounter = new AtomicLong(0);\n+\n+    public Consumer<MetricsFactory> registerMetrics() {\n+        return new Consumer<MetricsFactory>() {\n+            @Override\n+            public void accept(MetricsFactory metricsFactory) {\n+                metricsFactory.builder(METRIC_NAME).description(METRIC_DESCRIPTION)\n+                        .buildCounter(defaultLogCounter::get);\n+\n+                for (Level level : STANDARD_LEVELS) {\n+                    AtomicLong counter = new AtomicLong(0);\n+                    metricsFactory.builder(METRIC_NAME).description(METRIC_DESCRIPTION).tag(\"level\", level.getName())\n+                            .buildCounter(counter::get);\n+                    logCounters.put(level, counter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "796ad2ab9c3168e95d4df2bc1579322f2ce7161c"}, "originalPosition": 46}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "796ad2ab9c3168e95d4df2bc1579322f2ce7161c", "author": {"user": {"login": "rquinio", "name": "Romain Quinio"}}, "url": "https://github.com/quarkusio/quarkus/commit/796ad2ab9c3168e95d4df2bc1579322f2ce7161c", "committedDate": "2020-08-05T09:04:29Z", "message": "Add a counter of log events per log level\n\n- Register a logging handler that counts log events\n- Add a tag for the standard jboss-logging levels\n- Add a build-time activation config quarkus.log.metrics.enabled=true"}, "afterCommit": {"oid": "c0c416ecc778219d5653f8d1656107fbd4baa69c", "author": {"user": {"login": "rquinio", "name": "Romain Quinio"}}, "url": "https://github.com/quarkusio/quarkus/commit/c0c416ecc778219d5653f8d1656107fbd4baa69c", "committedDate": "2020-08-05T16:37:45Z", "message": "Add a counter of log events per log level\n\n- Register a logging handler that counts log events\n- Add a tag/label for each standard jboss-logging levels\n- Add a build-time activation config quarkus.log.metrics.enabled=true"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c0c416ecc778219d5653f8d1656107fbd4baa69c", "author": {"user": {"login": "rquinio", "name": "Romain Quinio"}}, "url": "https://github.com/quarkusio/quarkus/commit/c0c416ecc778219d5653f8d1656107fbd4baa69c", "committedDate": "2020-08-05T16:37:45Z", "message": "Add a counter of log events per log level\n\n- Register a logging handler that counts log events\n- Add a tag/label for each standard jboss-logging levels\n- Add a build-time activation config quarkus.log.metrics.enabled=true"}, "afterCommit": {"oid": "7548757ccb510032bf99165ef68ec2f53a406e1d", "author": {"user": {"login": "rquinio", "name": "Romain Quinio"}}, "url": "https://github.com/quarkusio/quarkus/commit/7548757ccb510032bf99165ef68ec2f53a406e1d", "committedDate": "2020-08-05T16:46:14Z", "message": "Add a counter of log events per log level\n\n- Register a logging handler that counts log events\n- Add a tag/label for each standard jboss-logging levels\n- Add a build-time activation config quarkus.log.metrics.enabled=true"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyODIwNzI5", "url": "https://github.com/quarkusio/quarkus/pull/11224#pullrequestreview-462820729", "createdAt": "2020-08-06T19:38:28Z", "commit": {"oid": "7548757ccb510032bf99165ef68ec2f53a406e1d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOTozODoyOFrOG9BnXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOTozODoyOFrOG9BnXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY0Mjc4Mg==", "bodyText": "I was just having a peek, not an expert of this area but I'm wondering:\nshouldn't such code prefer using a LongAdder over and AtomicLong ?", "url": "https://github.com/quarkusio/quarkus/pull/11224#discussion_r466642782", "createdAt": "2020-08-06T19:38:28Z", "author": {"login": "Sanne"}, "path": "core/runtime/src/main/java/io/quarkus/runtime/logging/LogMetricsHandler.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.runtime.logging;\n+\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.logging.Handler;\n+import java.util.logging.LogRecord;\n+\n+/**\n+ * Measures the number of log messages based on logger configurations quarkus.log.level and quarkus.log.category.*.level\n+ * <p>\n+ * It should reflect the values of the handler that logs the most, since best practice is to align its level with the root\n+ * level.\n+ */\n+public class LogMetricsHandler extends Handler {\n+\n+    final Map<Integer, AtomicLong> logCounters;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7548757ccb510032bf99165ef68ec2f53a406e1d"}, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7548757ccb510032bf99165ef68ec2f53a406e1d", "author": {"user": {"login": "rquinio", "name": "Romain Quinio"}}, "url": "https://github.com/quarkusio/quarkus/commit/7548757ccb510032bf99165ef68ec2f53a406e1d", "committedDate": "2020-08-05T16:46:14Z", "message": "Add a counter of log events per log level\n\n- Register a logging handler that counts log events\n- Add a tag/label for each standard jboss-logging levels\n- Add a build-time activation config quarkus.log.metrics.enabled=true"}, "afterCommit": {"oid": "c57e57a96bb234cc09cc60444a9b2e5444f8b645", "author": {"user": {"login": "rquinio", "name": "Romain Quinio"}}, "url": "https://github.com/quarkusio/quarkus/commit/c57e57a96bb234cc09cc60444a9b2e5444f8b645", "committedDate": "2020-08-06T20:59:51Z", "message": "Add a counter of log events per log level\n\n- Register a logging handler that counts log events\n- Add a tag/label for each standard jboss-logging levels\n- Add a build-time activation config quarkus.log.metrics.enabled=true"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffbe14e4c28b8048dd7a64e20011a9c40211707b", "author": {"user": {"login": "rquinio", "name": "Romain Quinio"}}, "url": "https://github.com/quarkusio/quarkus/commit/ffbe14e4c28b8048dd7a64e20011a9c40211707b", "committedDate": "2020-08-08T21:58:29Z", "message": "Add a counter of log events per log level\n\n- Register a logging handler that counts log events\n- Add a tag/label for each standard jboss-logging levels\n- Add a build-time activation config quarkus.log.metrics.enabled=true"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c57e57a96bb234cc09cc60444a9b2e5444f8b645", "author": {"user": {"login": "rquinio", "name": "Romain Quinio"}}, "url": "https://github.com/quarkusio/quarkus/commit/c57e57a96bb234cc09cc60444a9b2e5444f8b645", "committedDate": "2020-08-06T20:59:51Z", "message": "Add a counter of log events per log level\n\n- Register a logging handler that counts log events\n- Add a tag/label for each standard jboss-logging levels\n- Add a build-time activation config quarkus.log.metrics.enabled=true"}, "afterCommit": {"oid": "ffbe14e4c28b8048dd7a64e20011a9c40211707b", "author": {"user": {"login": "rquinio", "name": "Romain Quinio"}}, "url": "https://github.com/quarkusio/quarkus/commit/ffbe14e4c28b8048dd7a64e20011a9c40211707b", "committedDate": "2020-08-08T21:58:29Z", "message": "Add a counter of log events per log level\n\n- Register a logging handler that counts log events\n- Add a tag/label for each standard jboss-logging levels\n- Add a build-time activation config quarkus.log.metrics.enabled=true"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MDAyODUx", "url": "https://github.com/quarkusio/quarkus/pull/11224#pullrequestreview-464002851", "createdAt": "2020-08-10T07:21:17Z", "commit": {"oid": "ffbe14e4c28b8048dd7a64e20011a9c40211707b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 912, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}