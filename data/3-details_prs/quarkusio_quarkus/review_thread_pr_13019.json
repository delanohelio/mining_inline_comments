{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyNDM4NDUy", "number": 13019, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzoyNjoyOVrOEzZ6SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzoyNjoyOVrOEzZ6SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzM3MzUzOnYy", "diffSide": "RIGHT", "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/CurrentInjectionPointProvider.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzoyNjoyOVrOHqmyww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMTo1MTo0NlrOHrLyaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzNzgyNw==", "bodyText": "Stupid question: is it a case where we often have 1 element? I know for HV, it was a very common case and we decided to optimize it properly: https://github.com/hibernate/hibernate-validator/blob/master/engine/src/main/java/org/hibernate/validator/internal/util/CollectionHelper.java#L106 .\nIt might not be the case here so put it in the crazy idea box if it doesn't make sense :).", "url": "https://github.com/quarkusio/quarkus/pull/13019#discussion_r514437827", "createdAt": "2020-10-29T17:26:29Z", "author": {"login": "gsmet"}, "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/CurrentInjectionPointProvider.java", "diffHunk": "@@ -177,14 +177,20 @@ public int getPosition() {\n \n     }\n \n+    private static <V> Set<V> trimImmutableSet(final Set<V> input) {\n+        if (input == null)\n+            return null;\n+        return input.isEmpty() ? Collections.EMPTY_SET : input;\n+    }\n+\n     static abstract class AnnotatedBase implements Annotated {\n \n         private final Type baseType;\n         private final Set<Annotation> annotations;\n \n         AnnotatedBase(Type baseType, Set<Annotation> annotations) {\n             this.baseType = baseType;\n-            this.annotations = annotations;\n+            this.annotations = trimImmutableSet(annotations); //Don't retain memory for empty sets: HashSet is relatively large.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b95460001d3c26ac876af558f400ffe100b3e06e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5OTY5MA==", "bodyText": "that's a great idea :)\nI just queried my heap dump - found many such cases within ORM, and some in Vert.x. I have no doubt it would help in Arc as well, I just don't have mny annotations in my benchmark...\nSELECT OBJECTS inbounds(l) FROM \"java.util.HashSet\" l WHERE (l.map.size = 1)", "url": "https://github.com/quarkusio/quarkus/pull/13019#discussion_r514599690", "createdAt": "2020-10-29T22:17:46Z", "author": {"login": "Sanne"}, "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/CurrentInjectionPointProvider.java", "diffHunk": "@@ -177,14 +177,20 @@ public int getPosition() {\n \n     }\n \n+    private static <V> Set<V> trimImmutableSet(final Set<V> input) {\n+        if (input == null)\n+            return null;\n+        return input.isEmpty() ? Collections.EMPTY_SET : input;\n+    }\n+\n     static abstract class AnnotatedBase implements Annotated {\n \n         private final Type baseType;\n         private final Set<Annotation> annotations;\n \n         AnnotatedBase(Type baseType, Set<Annotation> annotations) {\n             this.baseType = baseType;\n-            this.annotations = annotations;\n+            this.annotations = trimImmutableSet(annotations); //Don't retain memory for empty sets: HashSet is relatively large.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzNzgyNw=="}, "originalCommit": {"oid": "b95460001d3c26ac876af558f400ffe100b3e06e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5OTg5OQ==", "bodyText": "damn, now I have another round of patching to do in Hibernate ORM...", "url": "https://github.com/quarkusio/quarkus/pull/13019#discussion_r514599899", "createdAt": "2020-10-29T22:18:22Z", "author": {"login": "Sanne"}, "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/CurrentInjectionPointProvider.java", "diffHunk": "@@ -177,14 +177,20 @@ public int getPosition() {\n \n     }\n \n+    private static <V> Set<V> trimImmutableSet(final Set<V> input) {\n+        if (input == null)\n+            return null;\n+        return input.isEmpty() ? Collections.EMPTY_SET : input;\n+    }\n+\n     static abstract class AnnotatedBase implements Annotated {\n \n         private final Type baseType;\n         private final Set<Annotation> annotations;\n \n         AnnotatedBase(Type baseType, Set<Annotation> annotations) {\n             this.baseType = baseType;\n-            this.annotations = annotations;\n+            this.annotations = trimImmutableSet(annotations); //Don't retain memory for empty sets: HashSet is relatively large.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzNzgyNw=="}, "originalCommit": {"oid": "b95460001d3c26ac876af558f400ffe100b3e06e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwNTA4Nw==", "bodyText": "actually in ORM the extra wrapping is detrimental. I'd need a \"maybeimmutable\" version...", "url": "https://github.com/quarkusio/quarkus/pull/13019#discussion_r514605087", "createdAt": "2020-10-29T22:32:01Z", "author": {"login": "Sanne"}, "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/CurrentInjectionPointProvider.java", "diffHunk": "@@ -177,14 +177,20 @@ public int getPosition() {\n \n     }\n \n+    private static <V> Set<V> trimImmutableSet(final Set<V> input) {\n+        if (input == null)\n+            return null;\n+        return input.isEmpty() ? Collections.EMPTY_SET : input;\n+    }\n+\n     static abstract class AnnotatedBase implements Annotated {\n \n         private final Type baseType;\n         private final Set<Annotation> annotations;\n \n         AnnotatedBase(Type baseType, Set<Annotation> annotations) {\n             this.baseType = baseType;\n-            this.annotations = annotations;\n+            this.annotations = trimImmutableSet(annotations); //Don't retain memory for empty sets: HashSet is relatively large.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzNzgyNw=="}, "originalCommit": {"oid": "b95460001d3c26ac876af558f400ffe100b3e06e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk3Njg2OQ==", "bodyText": "Yeah, sorry I should have been more clear: I was specifically talking about the singleton part. I agree that wrapping in an immutable collection might be detrimental.", "url": "https://github.com/quarkusio/quarkus/pull/13019#discussion_r514976869", "createdAt": "2020-10-30T09:44:02Z", "author": {"login": "gsmet"}, "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/CurrentInjectionPointProvider.java", "diffHunk": "@@ -177,14 +177,20 @@ public int getPosition() {\n \n     }\n \n+    private static <V> Set<V> trimImmutableSet(final Set<V> input) {\n+        if (input == null)\n+            return null;\n+        return input.isEmpty() ? Collections.EMPTY_SET : input;\n+    }\n+\n     static abstract class AnnotatedBase implements Annotated {\n \n         private final Type baseType;\n         private final Set<Annotation> annotations;\n \n         AnnotatedBase(Type baseType, Set<Annotation> annotations) {\n             this.baseType = baseType;\n-            this.annotations = annotations;\n+            this.annotations = trimImmutableSet(annotations); //Don't retain memory for empty sets: HashSet is relatively large.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzNzgyNw=="}, "originalCommit": {"oid": "b95460001d3c26ac876af558f400ffe100b3e06e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA0Mzk0Nw==", "bodyText": "thanks - applied the suggestion from Validator and a couple more improvements.\nThere's likely several more similar optimisations to do here, but I need to move on.", "url": "https://github.com/quarkusio/quarkus/pull/13019#discussion_r515043947", "createdAt": "2020-10-30T11:51:46Z", "author": {"login": "Sanne"}, "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/CurrentInjectionPointProvider.java", "diffHunk": "@@ -177,14 +177,20 @@ public int getPosition() {\n \n     }\n \n+    private static <V> Set<V> trimImmutableSet(final Set<V> input) {\n+        if (input == null)\n+            return null;\n+        return input.isEmpty() ? Collections.EMPTY_SET : input;\n+    }\n+\n     static abstract class AnnotatedBase implements Annotated {\n \n         private final Type baseType;\n         private final Set<Annotation> annotations;\n \n         AnnotatedBase(Type baseType, Set<Annotation> annotations) {\n             this.baseType = baseType;\n-            this.annotations = annotations;\n+            this.annotations = trimImmutableSet(annotations); //Don't retain memory for empty sets: HashSet is relatively large.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzNzgyNw=="}, "originalCommit": {"oid": "b95460001d3c26ac876af558f400ffe100b3e06e"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4117, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}