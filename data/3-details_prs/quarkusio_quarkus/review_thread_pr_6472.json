{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwODMwMzI3", "number": 6472, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwODozMjo0MVrODWxX2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxODoxMjo0MFrODW8Naw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MjA0MTg3OnYy", "diffSide": "RIGHT", "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/ClassConfigPropertiesUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwODozMjo0MVrOFbuD5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwODozMjo0MVrOFbuD5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYxMDUzMg==", "bodyText": "Small thing, but maybe move this inline with applicationIndex, configProperties);", "url": "https://github.com/quarkusio/quarkus/pull/6472#discussion_r364610532", "createdAt": "2020-01-09T08:32:41Z", "author": {"login": "gytis"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/ClassConfigPropertiesUtil.java", "diffHunk": "@@ -167,7 +170,8 @@ static boolean addProducerMethodForClassConfigProperties(ClassLoader classLoader\n                 configObjectClassStr, produceMethodParameterTypes)) {\n             methodCreator.addAnnotation(Produces.class);\n \n-            ResultHandle configObject = populateConfigObject(classLoader, configPropertiesClassInfo, prefixStr, methodCreator,\n+            ResultHandle configObject = populateConfigObject(classLoader, configPropertiesClassInfo, prefixStr, namingStrategy,\n+                    methodCreator,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52e180483bd62579787f7e253ab4179615aa60e6"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MjA3ODkwOnYy", "diffSide": "RIGHT", "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/InterfaceConfigPropertiesUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwODo0NToxN1rOFbuZOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwODo1NDo0MVrOFbunag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYxNTk5NA==", "bodyText": "How about checking for a getter in here the same as in the default case? Looking at the original issue (#6457), this seems to be the expected scenario i.e. schema-location > getSchemaLocation", "url": "https://github.com/quarkusio/quarkus/pull/6472#discussion_r364615994", "createdAt": "2020-01-09T08:45:17Z", "author": {"login": "gytis"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/InterfaceConfigPropertiesUtil.java", "diffHunk": "@@ -196,26 +199,33 @@ private static boolean isDefault(short flags) {\n         return ((flags & (Modifier.ABSTRACT | Modifier.PUBLIC | Modifier.STATIC)) == Modifier.PUBLIC);\n     }\n \n-    private static NameAndDefaultValue determinePropertyNameAndDefaultValue(MethodInfo method) {\n+    private static NameAndDefaultValue determinePropertyNameAndDefaultValue(MethodInfo method,\n+            ConfigProperties.NamingStrategy namingStrategy) {\n         AnnotationInstance configPropertyAnnotation = method.annotation(DotNames.CONFIG_PROPERTY);\n         if (configPropertyAnnotation != null) {\n             AnnotationValue nameValue = configPropertyAnnotation.value(\"name\");\n-            String name = (nameValue == null) || nameValue.asString().isEmpty() ? getPropertyNameFromMethodName(method)\n+            String name = (nameValue == null) || nameValue.asString().isEmpty() ? getPropertyName(method, namingStrategy)\n                     : nameValue.asString();\n             AnnotationValue defaultValue = configPropertyAnnotation.value(\"defaultValue\");\n \n             return new NameAndDefaultValue(name, defaultValue != null ? defaultValue.asString() : null);\n         }\n \n-        return new NameAndDefaultValue(getPropertyNameFromMethodName(method));\n+        return new NameAndDefaultValue(getPropertyName(method, namingStrategy));\n     }\n \n-    private static String getPropertyNameFromMethodName(MethodInfo method) {\n-        try {\n-            return JavaBeanUtil.getPropertyNameFromGetter(method.name());\n-        } catch (IllegalArgumentException e) {\n-            throw new IllegalArgumentException(\"Method \" + method.name() + \" of interface \" + method.declaringClass()\n-                    + \" is not a getter method. Either rename the method to follow getter name conventions or annotate the method with @ConfigProperty\");\n+    private static String getPropertyName(MethodInfo method, ConfigProperties.NamingStrategy namingStrategy) {\n+        if (namingStrategy == ConfigProperties.NamingStrategy.DEFAULT) {\n+            try {\n+                return JavaBeanUtil.getPropertyNameFromGetter(method.name());\n+            } catch (IllegalArgumentException e) {\n+                throw new IllegalArgumentException(\"Method \" + method.name() + \" of interface \" + method.declaringClass()\n+                        + \" is not a getter method. Either rename the method to follow getter name conventions or annotate the method with @ConfigProperty\");\n+            }\n+        } else if (namingStrategy == ConfigProperties.NamingStrategy.KEBAB_CASE) {\n+            return StringUtil.hyphenate(method.name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca45d47cfb239215d42a98dc7f3423f3fd144507"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYxNjM3OA==", "bodyText": "Good idea", "url": "https://github.com/quarkusio/quarkus/pull/6472#discussion_r364616378", "createdAt": "2020-01-09T08:46:14Z", "author": {"login": "geoand"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/InterfaceConfigPropertiesUtil.java", "diffHunk": "@@ -196,26 +199,33 @@ private static boolean isDefault(short flags) {\n         return ((flags & (Modifier.ABSTRACT | Modifier.PUBLIC | Modifier.STATIC)) == Modifier.PUBLIC);\n     }\n \n-    private static NameAndDefaultValue determinePropertyNameAndDefaultValue(MethodInfo method) {\n+    private static NameAndDefaultValue determinePropertyNameAndDefaultValue(MethodInfo method,\n+            ConfigProperties.NamingStrategy namingStrategy) {\n         AnnotationInstance configPropertyAnnotation = method.annotation(DotNames.CONFIG_PROPERTY);\n         if (configPropertyAnnotation != null) {\n             AnnotationValue nameValue = configPropertyAnnotation.value(\"name\");\n-            String name = (nameValue == null) || nameValue.asString().isEmpty() ? getPropertyNameFromMethodName(method)\n+            String name = (nameValue == null) || nameValue.asString().isEmpty() ? getPropertyName(method, namingStrategy)\n                     : nameValue.asString();\n             AnnotationValue defaultValue = configPropertyAnnotation.value(\"defaultValue\");\n \n             return new NameAndDefaultValue(name, defaultValue != null ? defaultValue.asString() : null);\n         }\n \n-        return new NameAndDefaultValue(getPropertyNameFromMethodName(method));\n+        return new NameAndDefaultValue(getPropertyName(method, namingStrategy));\n     }\n \n-    private static String getPropertyNameFromMethodName(MethodInfo method) {\n-        try {\n-            return JavaBeanUtil.getPropertyNameFromGetter(method.name());\n-        } catch (IllegalArgumentException e) {\n-            throw new IllegalArgumentException(\"Method \" + method.name() + \" of interface \" + method.declaringClass()\n-                    + \" is not a getter method. Either rename the method to follow getter name conventions or annotate the method with @ConfigProperty\");\n+    private static String getPropertyName(MethodInfo method, ConfigProperties.NamingStrategy namingStrategy) {\n+        if (namingStrategy == ConfigProperties.NamingStrategy.DEFAULT) {\n+            try {\n+                return JavaBeanUtil.getPropertyNameFromGetter(method.name());\n+            } catch (IllegalArgumentException e) {\n+                throw new IllegalArgumentException(\"Method \" + method.name() + \" of interface \" + method.declaringClass()\n+                        + \" is not a getter method. Either rename the method to follow getter name conventions or annotate the method with @ConfigProperty\");\n+            }\n+        } else if (namingStrategy == ConfigProperties.NamingStrategy.KEBAB_CASE) {\n+            return StringUtil.hyphenate(method.name());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYxNTk5NA=="}, "originalCommit": {"oid": "ca45d47cfb239215d42a98dc7f3423f3fd144507"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYxOTYyNg==", "bodyText": "Done", "url": "https://github.com/quarkusio/quarkus/pull/6472#discussion_r364619626", "createdAt": "2020-01-09T08:54:41Z", "author": {"login": "geoand"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/InterfaceConfigPropertiesUtil.java", "diffHunk": "@@ -196,26 +199,33 @@ private static boolean isDefault(short flags) {\n         return ((flags & (Modifier.ABSTRACT | Modifier.PUBLIC | Modifier.STATIC)) == Modifier.PUBLIC);\n     }\n \n-    private static NameAndDefaultValue determinePropertyNameAndDefaultValue(MethodInfo method) {\n+    private static NameAndDefaultValue determinePropertyNameAndDefaultValue(MethodInfo method,\n+            ConfigProperties.NamingStrategy namingStrategy) {\n         AnnotationInstance configPropertyAnnotation = method.annotation(DotNames.CONFIG_PROPERTY);\n         if (configPropertyAnnotation != null) {\n             AnnotationValue nameValue = configPropertyAnnotation.value(\"name\");\n-            String name = (nameValue == null) || nameValue.asString().isEmpty() ? getPropertyNameFromMethodName(method)\n+            String name = (nameValue == null) || nameValue.asString().isEmpty() ? getPropertyName(method, namingStrategy)\n                     : nameValue.asString();\n             AnnotationValue defaultValue = configPropertyAnnotation.value(\"defaultValue\");\n \n             return new NameAndDefaultValue(name, defaultValue != null ? defaultValue.asString() : null);\n         }\n \n-        return new NameAndDefaultValue(getPropertyNameFromMethodName(method));\n+        return new NameAndDefaultValue(getPropertyName(method, namingStrategy));\n     }\n \n-    private static String getPropertyNameFromMethodName(MethodInfo method) {\n-        try {\n-            return JavaBeanUtil.getPropertyNameFromGetter(method.name());\n-        } catch (IllegalArgumentException e) {\n-            throw new IllegalArgumentException(\"Method \" + method.name() + \" of interface \" + method.declaringClass()\n-                    + \" is not a getter method. Either rename the method to follow getter name conventions or annotate the method with @ConfigProperty\");\n+    private static String getPropertyName(MethodInfo method, ConfigProperties.NamingStrategy namingStrategy) {\n+        if (namingStrategy == ConfigProperties.NamingStrategy.DEFAULT) {\n+            try {\n+                return JavaBeanUtil.getPropertyNameFromGetter(method.name());\n+            } catch (IllegalArgumentException e) {\n+                throw new IllegalArgumentException(\"Method \" + method.name() + \" of interface \" + method.declaringClass()\n+                        + \" is not a getter method. Either rename the method to follow getter name conventions or annotate the method with @ConfigProperty\");\n+            }\n+        } else if (namingStrategy == ConfigProperties.NamingStrategy.KEBAB_CASE) {\n+            return StringUtil.hyphenate(method.name());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYxNTk5NA=="}, "originalCommit": {"oid": "ca45d47cfb239215d42a98dc7f3423f3fd144507"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MjA3OTc1OnYy", "diffSide": "RIGHT", "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/ConfigPropertiesBuildStep.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwODo0NTozN1rOFbuZvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwODo1NDozNFrOFbunLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYxNjEyNg==", "bodyText": "Move inline with defaultConfigValues, configProperties);?", "url": "https://github.com/quarkusio/quarkus/pull/6472#discussion_r364616126", "createdAt": "2020-01-09T08:45:37Z", "author": {"login": "gytis"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/ConfigPropertiesBuildStep.java", "diffHunk": "@@ -74,6 +74,7 @@ void setup(CombinedIndexBuildItem combinedIndex,\n \n                 String generatedClassName = InterfaceConfigPropertiesUtil.generateImplementationForInterfaceConfigProperties(\n                         classInfo, nonBeansClassOutput, combinedIndex.getIndex(), configPropertiesMetadata.getPrefix(),\n+                        configPropertiesMetadata.getNamingStrategy(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca45d47cfb239215d42a98dc7f3423f3fd144507"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYxOTU2Ng==", "bodyText": "Done", "url": "https://github.com/quarkusio/quarkus/pull/6472#discussion_r364619566", "createdAt": "2020-01-09T08:54:34Z", "author": {"login": "geoand"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/ConfigPropertiesBuildStep.java", "diffHunk": "@@ -74,6 +74,7 @@ void setup(CombinedIndexBuildItem combinedIndex,\n \n                 String generatedClassName = InterfaceConfigPropertiesUtil.generateImplementationForInterfaceConfigProperties(\n                         classInfo, nonBeansClassOutput, combinedIndex.getIndex(), configPropertiesMetadata.getPrefix(),\n+                        configPropertiesMetadata.getNamingStrategy(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDYxNjEyNg=="}, "originalCommit": {"oid": "ca45d47cfb239215d42a98dc7f3423f3fd144507"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MzcxNzkxOnYy", "diffSide": "RIGHT", "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/ClassConfigPropertiesUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzozNDoyNFrOFb98dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxODowMzoyM1rOFb-sxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg3MDc3NA==", "bodyText": "Maybe move this behavior to a method in the NamingStrategy enum? eg. String getPropertyName(String name). Then you could simply do namingStrategy.getPropertyName(field.name())", "url": "https://github.com/quarkusio/quarkus/pull/6472#discussion_r364870774", "createdAt": "2020-01-09T17:34:24Z", "author": {"login": "gastaldi"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/ClassConfigPropertiesUtil.java", "diffHunk": "@@ -316,6 +322,15 @@ private static ResultHandle populateConfigObject(ClassLoader classLoader, ClassI\n         return configObject;\n     }\n \n+    private static String getPropertyName(FieldInfo field, ConfigProperties.NamingStrategy namingStrategy) {\n+        if (namingStrategy == ConfigProperties.NamingStrategy.DEFAULT) {\n+            return field.name();\n+        } else if (namingStrategy == ConfigProperties.NamingStrategy.KEBAB_CASE) {\n+            return StringUtil.hyphenate(field.name());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41571585f12f9ef525b865586656e932ff94594f"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg3MTc1Ng==", "bodyText": "That makes sense, I'll update it soon", "url": "https://github.com/quarkusio/quarkus/pull/6472#discussion_r364871756", "createdAt": "2020-01-09T17:36:46Z", "author": {"login": "geoand"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/ClassConfigPropertiesUtil.java", "diffHunk": "@@ -316,6 +322,15 @@ private static ResultHandle populateConfigObject(ClassLoader classLoader, ClassI\n         return configObject;\n     }\n \n+    private static String getPropertyName(FieldInfo field, ConfigProperties.NamingStrategy namingStrategy) {\n+        if (namingStrategy == ConfigProperties.NamingStrategy.DEFAULT) {\n+            return field.name();\n+        } else if (namingStrategy == ConfigProperties.NamingStrategy.KEBAB_CASE) {\n+            return StringUtil.hyphenate(field.name());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg3MDc3NA=="}, "originalCommit": {"oid": "41571585f12f9ef525b865586656e932ff94594f"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4MzE0MQ==", "bodyText": "Done", "url": "https://github.com/quarkusio/quarkus/pull/6472#discussion_r364883141", "createdAt": "2020-01-09T18:03:23Z", "author": {"login": "geoand"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/ClassConfigPropertiesUtil.java", "diffHunk": "@@ -316,6 +322,15 @@ private static ResultHandle populateConfigObject(ClassLoader classLoader, ClassI\n         return configObject;\n     }\n \n+    private static String getPropertyName(FieldInfo field, ConfigProperties.NamingStrategy namingStrategy) {\n+        if (namingStrategy == ConfigProperties.NamingStrategy.DEFAULT) {\n+            return field.name();\n+        } else if (namingStrategy == ConfigProperties.NamingStrategy.KEBAB_CASE) {\n+            return StringUtil.hyphenate(field.name());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg3MDc3NA=="}, "originalCommit": {"oid": "41571585f12f9ef525b865586656e932ff94594f"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MzgwMTA0OnYy", "diffSide": "RIGHT", "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/ClassConfigPropertiesUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxODowNjowNlrOFb-w7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxODowNzo1M1rOFb-zrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4NDIwNw==", "bodyText": "Is this method still needed? I think you can call namingStrategy.getName(field.name()) directly, no?", "url": "https://github.com/quarkusio/quarkus/pull/6472#discussion_r364884207", "createdAt": "2020-01-09T18:06:06Z", "author": {"login": "gastaldi"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/ClassConfigPropertiesUtil.java", "diffHunk": "@@ -316,6 +321,10 @@ private static ResultHandle populateConfigObject(ClassLoader classLoader, ClassI\n         return configObject;\n     }\n \n+    private static String getPropertyName(FieldInfo field, ConfigProperties.NamingStrategy namingStrategy) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e2613a84c8404d6206c7ad3f670648a32e0c3ae"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4NDUzNg==", "bodyText": "Yeah, you are right. should have got rid of it, but I got mixed up because of the similar (but not exactly the same) case for interfaces", "url": "https://github.com/quarkusio/quarkus/pull/6472#discussion_r364884536", "createdAt": "2020-01-09T18:06:56Z", "author": {"login": "geoand"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/ClassConfigPropertiesUtil.java", "diffHunk": "@@ -316,6 +321,10 @@ private static ResultHandle populateConfigObject(ClassLoader classLoader, ClassI\n         return configObject;\n     }\n \n+    private static String getPropertyName(FieldInfo field, ConfigProperties.NamingStrategy namingStrategy) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4NDIwNw=="}, "originalCommit": {"oid": "2e2613a84c8404d6206c7ad3f670648a32e0c3ae"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4NDkxMA==", "bodyText": "So now it should be properly done :)", "url": "https://github.com/quarkusio/quarkus/pull/6472#discussion_r364884910", "createdAt": "2020-01-09T18:07:53Z", "author": {"login": "geoand"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/ClassConfigPropertiesUtil.java", "diffHunk": "@@ -316,6 +321,10 @@ private static ResultHandle populateConfigObject(ClassLoader classLoader, ClassI\n         return configObject;\n     }\n \n+    private static String getPropertyName(FieldInfo field, ConfigProperties.NamingStrategy namingStrategy) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4NDIwNw=="}, "originalCommit": {"oid": "2e2613a84c8404d6206c7ad3f670648a32e0c3ae"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MzgxNzM5OnYy", "diffSide": "RIGHT", "path": "extensions/arc/runtime/src/main/java/io/quarkus/arc/config/ConfigProperties.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxODoxMjo0MFrOFb-7Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMTo1Mjo0NVrOFcEerQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4NjgwMw==", "bodyText": "This method can be declared as abstract", "url": "https://github.com/quarkusio/quarkus/pull/6472#discussion_r364886803", "createdAt": "2020-01-09T18:12:40Z", "author": {"login": "gastaldi"}, "path": "extensions/arc/runtime/src/main/java/io/quarkus/arc/config/ConfigProperties.java", "diffHunk": "@@ -19,4 +21,47 @@\n      * If the default is used, the class name will be used to determine the proper prefix\n      */\n     String prefix() default UNSET_PREFIX;\n+\n+    /**\n+     * The naming strategy to use for the corresponding property. This only matters for fields or method names that contain\n+     * both lower case and upper case characters.\n+     *\n+     * {@code NamingStrategy.DEFAULT} means that whatever the name of the field / method is, that will be the name of the\n+     * property.\n+     * {@code NamingStrategy.KEBAB_CASE} means that the name of property is derived by replacing case changes with a dash.\n+     * For a example:\n+     *\n+     * /**\n+     * \n+     * <pre>\n+     * &#64;ConfigProperties(prefix=\"whatever\")\n+     * public class SomeConfig {\n+     *   public fooBar;\n+     * }\n+     * </pre>\n+     *\n+     * Then to set the {@code fooBar} field, the corresponding property would be {@code whatever.fooBar}.\n+     * If {@code namingStrategy=NamingStrategy.KEBAB_CASE} were being used, then the corresponding property would be\n+     * {@code whatever.foo-bar}\n+     */\n+    NamingStrategy namingStrategy() default NamingStrategy.DEFAULT;\n+\n+    enum NamingStrategy {\n+        DEFAULT {\n+            @Override\n+            public String getName(String name) {\n+                return name;\n+            }\n+        },\n+        KEBAB_CASE {\n+            @Override\n+            public String getName(String name) {\n+                return StringUtil.hyphenate(name);\n+            }\n+        };\n+\n+        public String getName(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660187855e0f59d20c89234cc98580099780cc3"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5NjQ0Ng==", "bodyText": "Damn why didn't I think of that...", "url": "https://github.com/quarkusio/quarkus/pull/6472#discussion_r364896446", "createdAt": "2020-01-09T18:34:43Z", "author": {"login": "geoand"}, "path": "extensions/arc/runtime/src/main/java/io/quarkus/arc/config/ConfigProperties.java", "diffHunk": "@@ -19,4 +21,47 @@\n      * If the default is used, the class name will be used to determine the proper prefix\n      */\n     String prefix() default UNSET_PREFIX;\n+\n+    /**\n+     * The naming strategy to use for the corresponding property. This only matters for fields or method names that contain\n+     * both lower case and upper case characters.\n+     *\n+     * {@code NamingStrategy.DEFAULT} means that whatever the name of the field / method is, that will be the name of the\n+     * property.\n+     * {@code NamingStrategy.KEBAB_CASE} means that the name of property is derived by replacing case changes with a dash.\n+     * For a example:\n+     *\n+     * /**\n+     * \n+     * <pre>\n+     * &#64;ConfigProperties(prefix=\"whatever\")\n+     * public class SomeConfig {\n+     *   public fooBar;\n+     * }\n+     * </pre>\n+     *\n+     * Then to set the {@code fooBar} field, the corresponding property would be {@code whatever.fooBar}.\n+     * If {@code namingStrategy=NamingStrategy.KEBAB_CASE} were being used, then the corresponding property would be\n+     * {@code whatever.foo-bar}\n+     */\n+    NamingStrategy namingStrategy() default NamingStrategy.DEFAULT;\n+\n+    enum NamingStrategy {\n+        DEFAULT {\n+            @Override\n+            public String getName(String name) {\n+                return name;\n+            }\n+        },\n+        KEBAB_CASE {\n+            @Override\n+            public String getName(String name) {\n+                return StringUtil.hyphenate(name);\n+            }\n+        };\n+\n+        public String getName(String name) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4NjgwMw=="}, "originalCommit": {"oid": "a660187855e0f59d20c89234cc98580099780cc3"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5NjU1Ng==", "bodyText": "I'll push a fix in a few hours", "url": "https://github.com/quarkusio/quarkus/pull/6472#discussion_r364896556", "createdAt": "2020-01-09T18:34:59Z", "author": {"login": "geoand"}, "path": "extensions/arc/runtime/src/main/java/io/quarkus/arc/config/ConfigProperties.java", "diffHunk": "@@ -19,4 +21,47 @@\n      * If the default is used, the class name will be used to determine the proper prefix\n      */\n     String prefix() default UNSET_PREFIX;\n+\n+    /**\n+     * The naming strategy to use for the corresponding property. This only matters for fields or method names that contain\n+     * both lower case and upper case characters.\n+     *\n+     * {@code NamingStrategy.DEFAULT} means that whatever the name of the field / method is, that will be the name of the\n+     * property.\n+     * {@code NamingStrategy.KEBAB_CASE} means that the name of property is derived by replacing case changes with a dash.\n+     * For a example:\n+     *\n+     * /**\n+     * \n+     * <pre>\n+     * &#64;ConfigProperties(prefix=\"whatever\")\n+     * public class SomeConfig {\n+     *   public fooBar;\n+     * }\n+     * </pre>\n+     *\n+     * Then to set the {@code fooBar} field, the corresponding property would be {@code whatever.fooBar}.\n+     * If {@code namingStrategy=NamingStrategy.KEBAB_CASE} were being used, then the corresponding property would be\n+     * {@code whatever.foo-bar}\n+     */\n+    NamingStrategy namingStrategy() default NamingStrategy.DEFAULT;\n+\n+    enum NamingStrategy {\n+        DEFAULT {\n+            @Override\n+            public String getName(String name) {\n+                return name;\n+            }\n+        },\n+        KEBAB_CASE {\n+            @Override\n+            public String getName(String name) {\n+                return StringUtil.hyphenate(name);\n+            }\n+        };\n+\n+        public String getName(String name) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4NjgwMw=="}, "originalCommit": {"oid": "a660187855e0f59d20c89234cc98580099780cc3"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk3NzgzNw==", "bodyText": "Thanks for catching this, it should be fixed now", "url": "https://github.com/quarkusio/quarkus/pull/6472#discussion_r364977837", "createdAt": "2020-01-09T21:52:45Z", "author": {"login": "geoand"}, "path": "extensions/arc/runtime/src/main/java/io/quarkus/arc/config/ConfigProperties.java", "diffHunk": "@@ -19,4 +21,47 @@\n      * If the default is used, the class name will be used to determine the proper prefix\n      */\n     String prefix() default UNSET_PREFIX;\n+\n+    /**\n+     * The naming strategy to use for the corresponding property. This only matters for fields or method names that contain\n+     * both lower case and upper case characters.\n+     *\n+     * {@code NamingStrategy.DEFAULT} means that whatever the name of the field / method is, that will be the name of the\n+     * property.\n+     * {@code NamingStrategy.KEBAB_CASE} means that the name of property is derived by replacing case changes with a dash.\n+     * For a example:\n+     *\n+     * /**\n+     * \n+     * <pre>\n+     * &#64;ConfigProperties(prefix=\"whatever\")\n+     * public class SomeConfig {\n+     *   public fooBar;\n+     * }\n+     * </pre>\n+     *\n+     * Then to set the {@code fooBar} field, the corresponding property would be {@code whatever.fooBar}.\n+     * If {@code namingStrategy=NamingStrategy.KEBAB_CASE} were being used, then the corresponding property would be\n+     * {@code whatever.foo-bar}\n+     */\n+    NamingStrategy namingStrategy() default NamingStrategy.DEFAULT;\n+\n+    enum NamingStrategy {\n+        DEFAULT {\n+            @Override\n+            public String getName(String name) {\n+                return name;\n+            }\n+        },\n+        KEBAB_CASE {\n+            @Override\n+            public String getName(String name) {\n+                return StringUtil.hyphenate(name);\n+            }\n+        };\n+\n+        public String getName(String name) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4NjgwMw=="}, "originalCommit": {"oid": "a660187855e0f59d20c89234cc98580099780cc3"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1326, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}