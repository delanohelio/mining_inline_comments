{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4Mjc1MDE2", "number": 10176, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoxNjo0NlrOEMDOXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoyMTo0MVrOEMDUuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDcxMTk2OnYy", "diffSide": "RIGHT", "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/VertxHttpHotReplacementSetup.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoxNjo0NlrOGt725Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMjo1NzowNlrOGumymw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgxOTgxMw==", "bodyText": "This change shouldn't be needed anymore.", "url": "https://github.com/quarkusio/quarkus/pull/10176#discussion_r450819813", "createdAt": "2020-07-07T12:16:46Z", "author": {"login": "tsegismont"}, "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/VertxHttpHotReplacementSetup.java", "diffHunk": "@@ -39,7 +40,8 @@ void handleHotReplacementRequest(RoutingContext routingContext) {\n             routingContext.next();\n             return;\n         }\n-        routingContext.vertx().executeBlocking(new Handler<Promise<Boolean>>() {\n+        ConnectionBase connectionBase = (ConnectionBase) routingContext.request().connection();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "629de0a9434817f3e41821f604e4a340f920b86f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgzMTYzMQ==", "bodyText": "It is, the old code could resume on a different IO thread in the same vert.x instance, this makes sure it is the same thread that will be delivering the IO notifications.", "url": "https://github.com/quarkusio/quarkus/pull/10176#discussion_r450831631", "createdAt": "2020-07-07T12:38:41Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/VertxHttpHotReplacementSetup.java", "diffHunk": "@@ -39,7 +40,8 @@ void handleHotReplacementRequest(RoutingContext routingContext) {\n             routingContext.next();\n             return;\n         }\n-        routingContext.vertx().executeBlocking(new Handler<Promise<Boolean>>() {\n+        ConnectionBase connectionBase = (ConnectionBase) routingContext.request().connection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgxOTgxMw=="}, "originalCommit": {"oid": "629de0a9434817f3e41821f604e4a340f920b86f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3NDA3OA==", "bodyText": "Sorry I can't see how, do you have a simple example in mind?", "url": "https://github.com/quarkusio/quarkus/pull/10176#discussion_r450874078", "createdAt": "2020-07-07T13:43:05Z", "author": {"login": "tsegismont"}, "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/VertxHttpHotReplacementSetup.java", "diffHunk": "@@ -39,7 +40,8 @@ void handleHotReplacementRequest(RoutingContext routingContext) {\n             routingContext.next();\n             return;\n         }\n-        routingContext.vertx().executeBlocking(new Handler<Promise<Boolean>>() {\n+        ConnectionBase connectionBase = (ConnectionBase) routingContext.request().connection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgxOTgxMw=="}, "originalCommit": {"oid": "629de0a9434817f3e41821f604e4a340f920b86f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIwNTI5NA==", "bodyText": "Actually the original code should be safe now, as it stores the original context. Either way though this code is fine.", "url": "https://github.com/quarkusio/quarkus/pull/10176#discussion_r451205294", "createdAt": "2020-07-07T23:49:19Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/VertxHttpHotReplacementSetup.java", "diffHunk": "@@ -39,7 +40,8 @@ void handleHotReplacementRequest(RoutingContext routingContext) {\n             routingContext.next();\n             return;\n         }\n-        routingContext.vertx().executeBlocking(new Handler<Promise<Boolean>>() {\n+        ConnectionBase connectionBase = (ConnectionBase) routingContext.request().connection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgxOTgxMw=="}, "originalCommit": {"oid": "629de0a9434817f3e41821f604e4a340f920b86f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUyMzIyNw==", "bodyText": "OK", "url": "https://github.com/quarkusio/quarkus/pull/10176#discussion_r451523227", "createdAt": "2020-07-08T12:57:06Z", "author": {"login": "tsegismont"}, "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/devmode/VertxHttpHotReplacementSetup.java", "diffHunk": "@@ -39,7 +40,8 @@ void handleHotReplacementRequest(RoutingContext routingContext) {\n             routingContext.next();\n             return;\n         }\n-        routingContext.vertx().executeBlocking(new Handler<Promise<Boolean>>() {\n+        ConnectionBase connectionBase = (ConnectionBase) routingContext.request().connection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgxOTgxMw=="}, "originalCommit": {"oid": "629de0a9434817f3e41821f604e4a340f920b86f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDcyODI3OnYy", "diffSide": "RIGHT", "path": "extensions/vertx-web/deployment/src/test/java/io/quarkus/vertx/web/VertxWebDevModeTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoyMTo0MVrOGt8A3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMzozNDozMVrOGuoTyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyMjM2NA==", "bodyText": "How about updating TestRoute so that the handler calls executing blocking, and we verify that the context when calling executingBlocking and when the callback is involved is the same:\nVertx vertx = rc.vertx()\nexpected = vertx.getOrCreateContext();\nvertx.executeBlocking(Promise::complete, ar -> {\n  actual = vertx.getOrCreateContext();\n  // expected should be the same as actual\n  // before AND after hot reload\n})", "url": "https://github.com/quarkusio/quarkus/pull/10176#discussion_r450822364", "createdAt": "2020-07-07T12:21:41Z", "author": {"login": "tsegismont"}, "path": "extensions/vertx-web/deployment/src/test/java/io/quarkus/vertx/web/VertxWebDevModeTestCase.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.quarkus.vertx.web;\n+\n+import java.util.function.Function;\n+\n+import org.hamcrest.Matchers;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusDevModeTest;\n+import io.restassured.RestAssured;\n+\n+public class VertxWebDevModeTestCase {\n+\n+    @RegisterExtension\n+    static QuarkusDevModeTest runner = new QuarkusDevModeTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(TestRoute.class));\n+\n+    @Test\n+    public void testRunningInDevMode() {\n+        RestAssured.given()\n+                .body(\"OK\")\n+                .post(\"/test\")\n+                .then().statusCode(200)\n+                .body(Matchers.equalTo(\"test route\"));\n+\n+        runner.modifySourceFile(TestRoute.class, new Function<String, String>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "629de0a9434817f3e41821f604e4a340f920b86f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU0ODEwNg==", "bodyText": "I have updated the test to verify the connection vertx instance matches the current vertx instance.", "url": "https://github.com/quarkusio/quarkus/pull/10176#discussion_r451548106", "createdAt": "2020-07-08T13:34:31Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/vertx-web/deployment/src/test/java/io/quarkus/vertx/web/VertxWebDevModeTestCase.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.quarkus.vertx.web;\n+\n+import java.util.function.Function;\n+\n+import org.hamcrest.Matchers;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusDevModeTest;\n+import io.restassured.RestAssured;\n+\n+public class VertxWebDevModeTestCase {\n+\n+    @RegisterExtension\n+    static QuarkusDevModeTest runner = new QuarkusDevModeTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(TestRoute.class));\n+\n+    @Test\n+    public void testRunningInDevMode() {\n+        RestAssured.given()\n+                .body(\"OK\")\n+                .post(\"/test\")\n+                .then().statusCode(200)\n+                .body(Matchers.equalTo(\"test route\"));\n+\n+        runner.modifySourceFile(TestRoute.class, new Function<String, String>() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyMjM2NA=="}, "originalCommit": {"oid": "629de0a9434817f3e41821f604e4a340f920b86f"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2806, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}