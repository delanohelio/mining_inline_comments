{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1MTA0MjA4", "number": 9171, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMDo0Mzo1MlrOD6mPvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjo0ODoxN1rOD7UhdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzcwNjIwOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/config.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMDo0Mzo1MlrOGShYKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMDo0Mzo1MlrOGShYKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA3NDQxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <1> At this injection point `greetingConfiguration` with use the `greeting` prefix since that is what has been defined on `@ConfigProperties`.\n          \n          \n            \n            <1> At this injection point `greetingConfiguration` will use the `greeting` prefix since that is what has been defined on `@ConfigProperties`.", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r422074411", "createdAt": "2020-05-08T10:43:52Z", "author": {"login": "machi1990"}, "path": "docs/src/main/asciidoc/config.adoc", "diffHunk": "@@ -313,6 +313,42 @@ If the validation fails with the given configuration, the application will fail\n In the case of an interface being annotated with `@ConfigProperties`, the interface is allowed to extend other interfaces and methods from\n the entire interface hierarchy are used to bind properties.\n \n+=== Using same ConfigProperties with different prefixes\n+\n+Quarkus also supports allows the use of the same `@ConfigProperties` object with different prefixes for each injection point using the `io.quarkus.arc.config.@ConfigPrefix` annotation.\n+Say for example that `GreetingConfiguration` from above needs to be used for both the `greeting` prefix and the `other` prefix.\n+In that case the code would look like so:\n+\n+`GreetingConfiguration.java`\n+[source,java]\n+----\n+@ConfigProperties(prefix = \"greeting\")\n+public class GreetingConfiguration {\n+\n+    @Size(min = 20)\n+    public String message;\n+    public String suffix = \"!\";\n+\n+}\n+----\n+\n+`SomeBean.java`\n+[source,java]\n+----\n+@ApplicationScoped\n+public class SomeBean {\n+\n+    @Inject <1>\n+    GreetingConfiguration greetingConfiguration;\n+\n+    @ConfigPrefix(\"other\") <2>\n+    GreetingConfiguration otherConfiguration;\n+\n+}\n+----\n+<1> At this injection point `greetingConfiguration` with use the `greeting` prefix since that is what has been defined on `@ConfigProperties`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04278af261d355be35f85f4c73a7e5da4ce13690"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzcwNjg5OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/config.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMDo0NDowM1rOGShYlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMDo0NDowM1rOGShYlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA3NDUxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <2> At this injection point `otherConfiguration` with use the `other` prefix from `@ConfigPrefix`. Notice that in this case `@Inject` is not required.\n          \n          \n            \n            <2> At this injection point `otherConfiguration` will use the `other` prefix from `@ConfigPrefix`. Notice that in this case `@Inject` is not required.", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r422074516", "createdAt": "2020-05-08T10:44:03Z", "author": {"login": "machi1990"}, "path": "docs/src/main/asciidoc/config.adoc", "diffHunk": "@@ -313,6 +313,42 @@ If the validation fails with the given configuration, the application will fail\n In the case of an interface being annotated with `@ConfigProperties`, the interface is allowed to extend other interfaces and methods from\n the entire interface hierarchy are used to bind properties.\n \n+=== Using same ConfigProperties with different prefixes\n+\n+Quarkus also supports allows the use of the same `@ConfigProperties` object with different prefixes for each injection point using the `io.quarkus.arc.config.@ConfigPrefix` annotation.\n+Say for example that `GreetingConfiguration` from above needs to be used for both the `greeting` prefix and the `other` prefix.\n+In that case the code would look like so:\n+\n+`GreetingConfiguration.java`\n+[source,java]\n+----\n+@ConfigProperties(prefix = \"greeting\")\n+public class GreetingConfiguration {\n+\n+    @Size(min = 20)\n+    public String message;\n+    public String suffix = \"!\";\n+\n+}\n+----\n+\n+`SomeBean.java`\n+[source,java]\n+----\n+@ApplicationScoped\n+public class SomeBean {\n+\n+    @Inject <1>\n+    GreetingConfiguration greetingConfiguration;\n+\n+    @ConfigPrefix(\"other\") <2>\n+    GreetingConfiguration otherConfiguration;\n+\n+}\n+----\n+<1> At this injection point `greetingConfiguration` with use the `greeting` prefix since that is what has been defined on `@ConfigProperties`.\n+<2> At this injection point `otherConfiguration` with use the `other` prefix from `@ConfigPrefix`. Notice that in this case `@Inject` is not required.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04278af261d355be35f85f4c73a7e5da4ce13690"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDQzNTA2OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/config.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMzoyODo1MVrOGTcP2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMzoyODo1MVrOGTcP2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAzODkzOQ==", "bodyText": "supports allows ?", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r423038939", "createdAt": "2020-05-11T13:28:51Z", "author": {"login": "mkouba"}, "path": "docs/src/main/asciidoc/config.adoc", "diffHunk": "@@ -313,6 +313,42 @@ If the validation fails with the given configuration, the application will fail\n In the case of an interface being annotated with `@ConfigProperties`, the interface is allowed to extend other interfaces and methods from\n the entire interface hierarchy are used to bind properties.\n \n+=== Using same ConfigProperties with different prefixes\n+\n+Quarkus also supports allows the use of the same `@ConfigProperties` object with different prefixes for each injection point using the `io.quarkus.arc.config.@ConfigPrefix` annotation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4431e0dfff7e062a0544c63a1009e290318e94f6"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDQ0NzEwOnYy", "diffSide": "RIGHT", "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/ConfigPropertiesBuildStep.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMzozMTozM1rOGTcXCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNDoxNzoxOFrOGTeSnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0MDc3OQ==", "bodyText": "This annotation transformer is redundant - ConfigPrefix is a qualifier and so it should be handled by io.quarkus.arc.deployment.AutoInjectFieldProcessor.", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r423040779", "createdAt": "2020-05-11T13:31:33Z", "author": {"login": "mkouba"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/ConfigPropertiesBuildStep.java", "diffHunk": "@@ -29,13 +37,76 @@\n     @BuildStep\n     void produceConfigPropertiesMetadata(CombinedIndexBuildItem combinedIndex, ArcConfig arcConfig,\n             BuildProducer<ConfigPropertiesMetadataBuildItem> configPropertiesMetadataProducer) {\n-        for (AnnotationInstance annotation : combinedIndex.getIndex().getAnnotations(DotNames.CONFIG_PROPERTIES)) {\n+\n+        IndexView index = combinedIndex.getIndex();\n+\n+        Map<DotName, ConfigProperties.NamingStrategy> namingStrategies = new HashMap<>();\n+\n+        // handle @ConfigProperties\n+        for (AnnotationInstance instance : index.getAnnotations(DotNames.CONFIG_PROPERTIES)) {\n+            ClassInfo classInfo = instance.target().asClass();\n+\n+            ConfigProperties.NamingStrategy namingStrategy = getNamingStrategy(arcConfig, instance.value(\"namingStrategy\"));\n+            namingStrategies.put(classInfo.name(), namingStrategy);\n+\n+            configPropertiesMetadataProducer\n+                    .produce(new ConfigPropertiesMetadataBuildItem(classInfo, getPrefix(instance), namingStrategy, false));\n+        }\n+\n+        // handle @ConfigPrefix\n+        for (AnnotationInstance instance : index.getAnnotations(DotNames.CONFIG_PREFIX)) {\n+            ClassInfo classInfo;\n+            if (instance.target().kind() == AnnotationTarget.Kind.FIELD) {\n+                classInfo = index.getClassByName(instance.target().asField().type().name());\n+            } else if (instance.target().kind() == AnnotationTarget.Kind.METHOD_PARAMETER) {\n+                short position = instance.target().asMethodParameter().position();\n+                classInfo = index\n+                        .getClassByName(instance.target().asMethodParameter().method().parameters().get(position).name());\n+            } else {\n+                break;\n+            }\n+\n+            // if the class was annotated with @ConfigProperties, use the strategy that was defined there, otherwise fallback to the default\n+            ConfigProperties.NamingStrategy namingStrategy = namingStrategies.getOrDefault(classInfo.name(),\n+                    arcConfig.configPropertiesDefaultNamingStrategy);\n+\n             configPropertiesMetadataProducer\n-                    .produce(\n-                            new ConfigPropertiesMetadataBuildItem(annotation, arcConfig.configPropertiesDefaultNamingStrategy));\n+                    .produce(new ConfigPropertiesMetadataBuildItem(classInfo, instance.value().asString(),\n+                            namingStrategy, true));\n         }\n     }\n \n+    // allow @ConfigPrefix to be used without @Inject\n+    @BuildStep\n+    public AnnotationsTransformerBuildItem annotationsTransformer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4431e0dfff7e062a0544c63a1009e290318e94f6"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA3MjQxMw==", "bodyText": "Right! Forgot about that, thanks!", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r423072413", "createdAt": "2020-05-11T14:17:18Z", "author": {"login": "geoand"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/ConfigPropertiesBuildStep.java", "diffHunk": "@@ -29,13 +37,76 @@\n     @BuildStep\n     void produceConfigPropertiesMetadata(CombinedIndexBuildItem combinedIndex, ArcConfig arcConfig,\n             BuildProducer<ConfigPropertiesMetadataBuildItem> configPropertiesMetadataProducer) {\n-        for (AnnotationInstance annotation : combinedIndex.getIndex().getAnnotations(DotNames.CONFIG_PROPERTIES)) {\n+\n+        IndexView index = combinedIndex.getIndex();\n+\n+        Map<DotName, ConfigProperties.NamingStrategy> namingStrategies = new HashMap<>();\n+\n+        // handle @ConfigProperties\n+        for (AnnotationInstance instance : index.getAnnotations(DotNames.CONFIG_PROPERTIES)) {\n+            ClassInfo classInfo = instance.target().asClass();\n+\n+            ConfigProperties.NamingStrategy namingStrategy = getNamingStrategy(arcConfig, instance.value(\"namingStrategy\"));\n+            namingStrategies.put(classInfo.name(), namingStrategy);\n+\n+            configPropertiesMetadataProducer\n+                    .produce(new ConfigPropertiesMetadataBuildItem(classInfo, getPrefix(instance), namingStrategy, false));\n+        }\n+\n+        // handle @ConfigPrefix\n+        for (AnnotationInstance instance : index.getAnnotations(DotNames.CONFIG_PREFIX)) {\n+            ClassInfo classInfo;\n+            if (instance.target().kind() == AnnotationTarget.Kind.FIELD) {\n+                classInfo = index.getClassByName(instance.target().asField().type().name());\n+            } else if (instance.target().kind() == AnnotationTarget.Kind.METHOD_PARAMETER) {\n+                short position = instance.target().asMethodParameter().position();\n+                classInfo = index\n+                        .getClassByName(instance.target().asMethodParameter().method().parameters().get(position).name());\n+            } else {\n+                break;\n+            }\n+\n+            // if the class was annotated with @ConfigProperties, use the strategy that was defined there, otherwise fallback to the default\n+            ConfigProperties.NamingStrategy namingStrategy = namingStrategies.getOrDefault(classInfo.name(),\n+                    arcConfig.configPropertiesDefaultNamingStrategy);\n+\n             configPropertiesMetadataProducer\n-                    .produce(\n-                            new ConfigPropertiesMetadataBuildItem(annotation, arcConfig.configPropertiesDefaultNamingStrategy));\n+                    .produce(new ConfigPropertiesMetadataBuildItem(classInfo, instance.value().asString(),\n+                            namingStrategy, true));\n         }\n     }\n \n+    // allow @ConfigPrefix to be used without @Inject\n+    @BuildStep\n+    public AnnotationsTransformerBuildItem annotationsTransformer() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0MDc3OQ=="}, "originalCommit": {"oid": "4431e0dfff7e062a0544c63a1009e290318e94f6"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDQ1NjIzOnYy", "diffSide": "RIGHT", "path": "extensions/arc/deployment/src/test/java/io/quarkus/arc/test/configproperties/MultipleClassConfigPrefixTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMzozMzozOVrOGTccuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNTowODoxOFrOGULYVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0MjIzMg==", "bodyText": "There is no need to use the getters for @Singleton beans - you could save quite a few lines of code ;-).", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r423042232", "createdAt": "2020-05-11T13:33:39Z", "author": {"login": "mkouba"}, "path": "extensions/arc/deployment/src/test/java/io/quarkus/arc/test/configproperties/MultipleClassConfigPrefixTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package io.quarkus.arc.test.configproperties;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.arc.config.ConfigPrefix;\n+import io.quarkus.arc.config.ConfigProperties;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class MultipleClassConfigPrefixTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(DummyBean.class, DummyProperties.class)\n+                    .addAsResource(new StringAsset(\n+                            \"dummy.name=quarkus\\ndummy.someNumbers=1,2,3,4\\nother.name=redhat\\nother.someNumbers=3,2,1\"),\n+                            \"application.properties\"));\n+\n+    @Inject\n+    DummyBean dummyBean;\n+\n+    @Test\n+    public void testConfiguredValues() {\n+        assertEquals(\"quarkus\", dummyBean.getName());\n+        assertEquals(\"default\", dummyBean.getUnset());\n+        assertEquals(Arrays.asList(1, 2, 3, 4), dummyBean.getSomeNumbers());\n+\n+        assertEquals(\"redhat\", dummyBean.getName2());\n+        assertEquals(\"default\", dummyBean.getUnset2());\n+        assertEquals(Arrays.asList(3, 2, 1), dummyBean.getSomeNumbers2());\n+    }\n+\n+    @Singleton\n+    public static class DummyBean {\n+\n+        @Inject\n+        DummyProperties dummyProperties;\n+\n+        @ConfigPrefix(\"other\")\n+        DummyProperties dummyProperties2;\n+\n+        String getName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4431e0dfff7e062a0544c63a1009e290318e94f6"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA3MjMwNg==", "bodyText": "True, I'll do that :)", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r423072306", "createdAt": "2020-05-11T14:17:10Z", "author": {"login": "geoand"}, "path": "extensions/arc/deployment/src/test/java/io/quarkus/arc/test/configproperties/MultipleClassConfigPrefixTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package io.quarkus.arc.test.configproperties;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.arc.config.ConfigPrefix;\n+import io.quarkus.arc.config.ConfigProperties;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class MultipleClassConfigPrefixTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(DummyBean.class, DummyProperties.class)\n+                    .addAsResource(new StringAsset(\n+                            \"dummy.name=quarkus\\ndummy.someNumbers=1,2,3,4\\nother.name=redhat\\nother.someNumbers=3,2,1\"),\n+                            \"application.properties\"));\n+\n+    @Inject\n+    DummyBean dummyBean;\n+\n+    @Test\n+    public void testConfiguredValues() {\n+        assertEquals(\"quarkus\", dummyBean.getName());\n+        assertEquals(\"default\", dummyBean.getUnset());\n+        assertEquals(Arrays.asList(1, 2, 3, 4), dummyBean.getSomeNumbers());\n+\n+        assertEquals(\"redhat\", dummyBean.getName2());\n+        assertEquals(\"default\", dummyBean.getUnset2());\n+        assertEquals(Arrays.asList(3, 2, 1), dummyBean.getSomeNumbers2());\n+    }\n+\n+    @Singleton\n+    public static class DummyBean {\n+\n+        @Inject\n+        DummyProperties dummyProperties;\n+\n+        @ConfigPrefix(\"other\")\n+        DummyProperties dummyProperties2;\n+\n+        String getName() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0MjIzMg=="}, "originalCommit": {"oid": "4431e0dfff7e062a0544c63a1009e290318e94f6"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwNTI3OQ==", "bodyText": "It would probably make sense for other tests as well. But it's just nitpicking ;-).", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r423805279", "createdAt": "2020-05-12T15:01:03Z", "author": {"login": "mkouba"}, "path": "extensions/arc/deployment/src/test/java/io/quarkus/arc/test/configproperties/MultipleClassConfigPrefixTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package io.quarkus.arc.test.configproperties;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.arc.config.ConfigPrefix;\n+import io.quarkus.arc.config.ConfigProperties;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class MultipleClassConfigPrefixTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(DummyBean.class, DummyProperties.class)\n+                    .addAsResource(new StringAsset(\n+                            \"dummy.name=quarkus\\ndummy.someNumbers=1,2,3,4\\nother.name=redhat\\nother.someNumbers=3,2,1\"),\n+                            \"application.properties\"));\n+\n+    @Inject\n+    DummyBean dummyBean;\n+\n+    @Test\n+    public void testConfiguredValues() {\n+        assertEquals(\"quarkus\", dummyBean.getName());\n+        assertEquals(\"default\", dummyBean.getUnset());\n+        assertEquals(Arrays.asList(1, 2, 3, 4), dummyBean.getSomeNumbers());\n+\n+        assertEquals(\"redhat\", dummyBean.getName2());\n+        assertEquals(\"default\", dummyBean.getUnset2());\n+        assertEquals(Arrays.asList(3, 2, 1), dummyBean.getSomeNumbers2());\n+    }\n+\n+    @Singleton\n+    public static class DummyBean {\n+\n+        @Inject\n+        DummyProperties dummyProperties;\n+\n+        @ConfigPrefix(\"other\")\n+        DummyProperties dummyProperties2;\n+\n+        String getName() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0MjIzMg=="}, "originalCommit": {"oid": "4431e0dfff7e062a0544c63a1009e290318e94f6"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxMTE1OQ==", "bodyText": "Yeah for sure. When I need some very low effort task to do, I'll clean the rest up as well :)", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r423811159", "createdAt": "2020-05-12T15:08:18Z", "author": {"login": "geoand"}, "path": "extensions/arc/deployment/src/test/java/io/quarkus/arc/test/configproperties/MultipleClassConfigPrefixTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package io.quarkus.arc.test.configproperties;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.arc.config.ConfigPrefix;\n+import io.quarkus.arc.config.ConfigProperties;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class MultipleClassConfigPrefixTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(DummyBean.class, DummyProperties.class)\n+                    .addAsResource(new StringAsset(\n+                            \"dummy.name=quarkus\\ndummy.someNumbers=1,2,3,4\\nother.name=redhat\\nother.someNumbers=3,2,1\"),\n+                            \"application.properties\"));\n+\n+    @Inject\n+    DummyBean dummyBean;\n+\n+    @Test\n+    public void testConfiguredValues() {\n+        assertEquals(\"quarkus\", dummyBean.getName());\n+        assertEquals(\"default\", dummyBean.getUnset());\n+        assertEquals(Arrays.asList(1, 2, 3, 4), dummyBean.getSomeNumbers());\n+\n+        assertEquals(\"redhat\", dummyBean.getName2());\n+        assertEquals(\"default\", dummyBean.getUnset2());\n+        assertEquals(Arrays.asList(3, 2, 1), dummyBean.getSomeNumbers2());\n+    }\n+\n+    @Singleton\n+    public static class DummyBean {\n+\n+        @Inject\n+        DummyProperties dummyProperties;\n+\n+        @ConfigPrefix(\"other\")\n+        DummyProperties dummyProperties2;\n+\n+        String getName() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0MjIzMg=="}, "originalCommit": {"oid": "4431e0dfff7e062a0544c63a1009e290318e94f6"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTI4ODIwOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/config.adoc", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjo0ODoxN1rOGTkqDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzowNDoyM1rOGTlSLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE3NjcxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <2> At this injection point `otherConfiguration` will use the `other` prefix from `@ConfigPrefix`. Notice that in this case `@Inject` is not required.\n          \n          \n            \n            <2> At this injection point `otherConfiguration` will use the `other` prefix from `@ConfigPrefix` instead of the `greeting` prefix. Notice that in this case `@Inject` is not required.\n          \n      \n    \n    \n  \n\n? I think that's what you intented to do when you talked about it.\nTBH, I'm wondering if we should concatenate the prefixes instead of replacing them? I haven't looked at the implementation so it might be what you did.", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r423176718", "createdAt": "2020-05-11T16:48:17Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/config.adoc", "diffHunk": "@@ -313,6 +313,42 @@ If the validation fails with the given configuration, the application will fail\n In the case of an interface being annotated with `@ConfigProperties`, the interface is allowed to extend other interfaces and methods from\n the entire interface hierarchy are used to bind properties.\n \n+=== Using same ConfigProperties with different prefixes\n+\n+Quarkus also supports the use of the same `@ConfigProperties` object with different prefixes for each injection point using the `io.quarkus.arc.config.@ConfigPrefix` annotation.\n+Say for example that `GreetingConfiguration` from above needs to be used for both the `greeting` prefix and the `other` prefix.\n+In that case the code would look like so:\n+\n+`GreetingConfiguration.java`\n+[source,java]\n+----\n+@ConfigProperties(prefix = \"greeting\")\n+public class GreetingConfiguration {\n+\n+    @Size(min = 20)\n+    public String message;\n+    public String suffix = \"!\";\n+\n+}\n+----\n+\n+`SomeBean.java`\n+[source,java]\n+----\n+@ApplicationScoped\n+public class SomeBean {\n+\n+    @Inject <1>\n+    GreetingConfiguration greetingConfiguration;\n+\n+    @ConfigPrefix(\"other\") <2>\n+    GreetingConfiguration otherConfiguration;\n+\n+}\n+----\n+<1> At this injection point `greetingConfiguration` will use the `greeting` prefix since that is what has been defined on `@ConfigProperties`.\n+<2> At this injection point `otherConfiguration` will use the `other` prefix from `@ConfigPrefix`. Notice that in this case `@Inject` is not required.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfe1a39cfe1f994f7f746b881e12442106b9499a"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE4MjY4OQ==", "bodyText": "We don't do concatenation, we replace the prefix. The reason is that the user has more flexibility that way. With concatenation you can't change the prefix", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r423182689", "createdAt": "2020-05-11T16:57:37Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/config.adoc", "diffHunk": "@@ -313,6 +313,42 @@ If the validation fails with the given configuration, the application will fail\n In the case of an interface being annotated with `@ConfigProperties`, the interface is allowed to extend other interfaces and methods from\n the entire interface hierarchy are used to bind properties.\n \n+=== Using same ConfigProperties with different prefixes\n+\n+Quarkus also supports the use of the same `@ConfigProperties` object with different prefixes for each injection point using the `io.quarkus.arc.config.@ConfigPrefix` annotation.\n+Say for example that `GreetingConfiguration` from above needs to be used for both the `greeting` prefix and the `other` prefix.\n+In that case the code would look like so:\n+\n+`GreetingConfiguration.java`\n+[source,java]\n+----\n+@ConfigProperties(prefix = \"greeting\")\n+public class GreetingConfiguration {\n+\n+    @Size(min = 20)\n+    public String message;\n+    public String suffix = \"!\";\n+\n+}\n+----\n+\n+`SomeBean.java`\n+[source,java]\n+----\n+@ApplicationScoped\n+public class SomeBean {\n+\n+    @Inject <1>\n+    GreetingConfiguration greetingConfiguration;\n+\n+    @ConfigPrefix(\"other\") <2>\n+    GreetingConfiguration otherConfiguration;\n+\n+}\n+----\n+<1> At this injection point `greetingConfiguration` will use the `greeting` prefix since that is what has been defined on `@ConfigProperties`.\n+<2> At this injection point `otherConfiguration` will use the `other` prefix from `@ConfigPrefix`. Notice that in this case `@Inject` is not required.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE3NjcxOA=="}, "originalCommit": {"oid": "dfe1a39cfe1f994f7f746b881e12442106b9499a"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE4NjI5Mw==", "bodyText": "Yeah, that's one way of seeing it :).\nLet's try your way of doing things and see how it goes!", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r423186293", "createdAt": "2020-05-11T17:03:16Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/config.adoc", "diffHunk": "@@ -313,6 +313,42 @@ If the validation fails with the given configuration, the application will fail\n In the case of an interface being annotated with `@ConfigProperties`, the interface is allowed to extend other interfaces and methods from\n the entire interface hierarchy are used to bind properties.\n \n+=== Using same ConfigProperties with different prefixes\n+\n+Quarkus also supports the use of the same `@ConfigProperties` object with different prefixes for each injection point using the `io.quarkus.arc.config.@ConfigPrefix` annotation.\n+Say for example that `GreetingConfiguration` from above needs to be used for both the `greeting` prefix and the `other` prefix.\n+In that case the code would look like so:\n+\n+`GreetingConfiguration.java`\n+[source,java]\n+----\n+@ConfigProperties(prefix = \"greeting\")\n+public class GreetingConfiguration {\n+\n+    @Size(min = 20)\n+    public String message;\n+    public String suffix = \"!\";\n+\n+}\n+----\n+\n+`SomeBean.java`\n+[source,java]\n+----\n+@ApplicationScoped\n+public class SomeBean {\n+\n+    @Inject <1>\n+    GreetingConfiguration greetingConfiguration;\n+\n+    @ConfigPrefix(\"other\") <2>\n+    GreetingConfiguration otherConfiguration;\n+\n+}\n+----\n+<1> At this injection point `greetingConfiguration` will use the `greeting` prefix since that is what has been defined on `@ConfigProperties`.\n+<2> At this injection point `otherConfiguration` will use the `other` prefix from `@ConfigPrefix`. Notice that in this case `@Inject` is not required.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE3NjcxOA=="}, "originalCommit": {"oid": "dfe1a39cfe1f994f7f746b881e12442106b9499a"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE4Njk4OA==", "bodyText": "Also, this is what the OP reported", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r423186988", "createdAt": "2020-05-11T17:04:23Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/config.adoc", "diffHunk": "@@ -313,6 +313,42 @@ If the validation fails with the given configuration, the application will fail\n In the case of an interface being annotated with `@ConfigProperties`, the interface is allowed to extend other interfaces and methods from\n the entire interface hierarchy are used to bind properties.\n \n+=== Using same ConfigProperties with different prefixes\n+\n+Quarkus also supports the use of the same `@ConfigProperties` object with different prefixes for each injection point using the `io.quarkus.arc.config.@ConfigPrefix` annotation.\n+Say for example that `GreetingConfiguration` from above needs to be used for both the `greeting` prefix and the `other` prefix.\n+In that case the code would look like so:\n+\n+`GreetingConfiguration.java`\n+[source,java]\n+----\n+@ConfigProperties(prefix = \"greeting\")\n+public class GreetingConfiguration {\n+\n+    @Size(min = 20)\n+    public String message;\n+    public String suffix = \"!\";\n+\n+}\n+----\n+\n+`SomeBean.java`\n+[source,java]\n+----\n+@ApplicationScoped\n+public class SomeBean {\n+\n+    @Inject <1>\n+    GreetingConfiguration greetingConfiguration;\n+\n+    @ConfigPrefix(\"other\") <2>\n+    GreetingConfiguration otherConfiguration;\n+\n+}\n+----\n+<1> At this injection point `greetingConfiguration` will use the `greeting` prefix since that is what has been defined on `@ConfigProperties`.\n+<2> At this injection point `otherConfiguration` will use the `other` prefix from `@ConfigPrefix`. Notice that in this case `@Inject` is not required.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE3NjcxOA=="}, "originalCommit": {"oid": "dfe1a39cfe1f994f7f746b881e12442106b9499a"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3138, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}