{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NjQ5OTMx", "number": 10652, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODo0MTowMVrOEPcyeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODo0MTowMVrOEPcyeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjM1NzcwOnYy", "diffSide": "RIGHT", "path": "independent-projects/qute/core/src/main/java/io/quarkus/qute/UserTagSectionHelper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODo0MTowMVrOGzKohg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODo0NzoxN1rOGzK1pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMwNDc3NA==", "bodyText": "Well, this is not a correct approach as the invocation of CompletableFuture.get() blocks. It should not be a big problem in most cases but we do attempt to keep the \"resolution\" part of rendering non-blocking. I need to think about this a little. It seems that our API does not cover this specific use case...", "url": "https://github.com/quarkusio/quarkus/pull/10652#discussion_r456304774", "createdAt": "2020-07-17T08:41:01Z", "author": {"login": "mkouba"}, "path": "independent-projects/qute/core/src/main/java/io/quarkus/qute/UserTagSectionHelper.java", "diffHunk": "@@ -28,8 +30,27 @@ public UserTagSectionHelper(Supplier<Template> templateSupplier, Map<String, Exp\n             if (t1 != null) {\n                 result.completeExceptionally(t1);\n             } else {\n-                // Execute the template with the params as the root context object\n+\n                 try {\n+\n+                    // Execute nested code for later usage in the user tag\n+                    CompletableFuture<ResultNode> nestedResult = new CompletableFuture<>();\n+                    context.execute(context.resolutionContext().createChild(r1, null)).whenComplete((r2, t2) -> {\n+                        if (t2 != null) {\n+                            result.completeExceptionally(t2);\n+                        } else {\n+                            nestedResult.complete(r2);\n+                        }\n+                    });\n+                    if (result.isCompletedExceptionally()) {\n+                        return;\n+                    }\n+\n+                    StringBuilder sb = new StringBuilder();\n+                    nestedResult.get().process((s) -> sb.append(s));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e178825694676811ea170f88c395fbb4a7f1d71b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMwNjk4Mw==", "bodyText": "Yes, I was pretty sure of that... (check my first comment) But I didn't not find the right way to do it. Note that the PR's only goal is a tentative to add a feature ; if it cannot be done correctly we should not lose too much time on it.", "url": "https://github.com/quarkusio/quarkus/pull/10652#discussion_r456306983", "createdAt": "2020-07-17T08:45:09Z", "author": {"login": "jlannoy"}, "path": "independent-projects/qute/core/src/main/java/io/quarkus/qute/UserTagSectionHelper.java", "diffHunk": "@@ -28,8 +30,27 @@ public UserTagSectionHelper(Supplier<Template> templateSupplier, Map<String, Exp\n             if (t1 != null) {\n                 result.completeExceptionally(t1);\n             } else {\n-                // Execute the template with the params as the root context object\n+\n                 try {\n+\n+                    // Execute nested code for later usage in the user tag\n+                    CompletableFuture<ResultNode> nestedResult = new CompletableFuture<>();\n+                    context.execute(context.resolutionContext().createChild(r1, null)).whenComplete((r2, t2) -> {\n+                        if (t2 != null) {\n+                            result.completeExceptionally(t2);\n+                        } else {\n+                            nestedResult.complete(r2);\n+                        }\n+                    });\n+                    if (result.isCompletedExceptionally()) {\n+                        return;\n+                    }\n+\n+                    StringBuilder sb = new StringBuilder();\n+                    nestedResult.get().process((s) -> sb.append(s));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMwNDc3NA=="}, "originalCommit": {"oid": "e178825694676811ea170f88c395fbb4a7f1d71b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMwODEzMg==", "bodyText": "The API is still evolving... so I think that we should spend some time to try to implement this (and improve the API ;-)", "url": "https://github.com/quarkusio/quarkus/pull/10652#discussion_r456308132", "createdAt": "2020-07-17T08:47:17Z", "author": {"login": "mkouba"}, "path": "independent-projects/qute/core/src/main/java/io/quarkus/qute/UserTagSectionHelper.java", "diffHunk": "@@ -28,8 +30,27 @@ public UserTagSectionHelper(Supplier<Template> templateSupplier, Map<String, Exp\n             if (t1 != null) {\n                 result.completeExceptionally(t1);\n             } else {\n-                // Execute the template with the params as the root context object\n+\n                 try {\n+\n+                    // Execute nested code for later usage in the user tag\n+                    CompletableFuture<ResultNode> nestedResult = new CompletableFuture<>();\n+                    context.execute(context.resolutionContext().createChild(r1, null)).whenComplete((r2, t2) -> {\n+                        if (t2 != null) {\n+                            result.completeExceptionally(t2);\n+                        } else {\n+                            nestedResult.complete(r2);\n+                        }\n+                    });\n+                    if (result.isCompletedExceptionally()) {\n+                        return;\n+                    }\n+\n+                    StringBuilder sb = new StringBuilder();\n+                    nestedResult.get().process((s) -> sb.append(s));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMwNDc3NA=="}, "originalCommit": {"oid": "e178825694676811ea170f88c395fbb4a7f1d71b"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2443, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}