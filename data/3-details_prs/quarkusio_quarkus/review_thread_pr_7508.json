{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMjYzMTc3", "number": 7508, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOTo1Mzo1MFrODkNCQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOTo1Mzo1MFrODkNCQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Mjg4ODk4OnYy", "diffSide": "RIGHT", "path": "extensions/amazon-lambda/runtime/src/main/java/io/quarkus/amazon/lambda/runtime/AmazonLambdaRecorder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOTo1Mzo1MFrOFwZX8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOTo1Nzo1NlrOFwZhiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI5MTY5OA==", "bodyText": "Why copy()?", "url": "https://github.com/quarkusio/quarkus/pull/7508#discussion_r386291698", "createdAt": "2020-03-02T09:53:50Z", "author": {"login": "gsmet"}, "path": "extensions/amazon-lambda/runtime/src/main/java/io/quarkus/amazon/lambda/runtime/AmazonLambdaRecorder.java", "diffHunk": "@@ -45,14 +47,22 @@\n     public void setHandlerClass(Class<? extends RequestHandler<?, ?>> handler, BeanContainer container) {\n         handlerClass = handler;\n         beanContainer = container;\n-        objectMapper = new ObjectMapper()\n+        AmazonLambdaRecorder.objectMapper = getObjectMapper()\n                 .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)\n                 .configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true);\n         Method handlerMethod = discoverHandlerMethod(handlerClass);\n         objectReader = objectMapper.readerFor(handlerMethod.getParameterTypes()[0]);\n         objectWriter = objectMapper.writerFor(handlerMethod.getReturnType());\n     }\n \n+    private ObjectMapper getObjectMapper() {\n+        InstanceHandle<ObjectMapper> instance = Arc.container().instance(ObjectMapper.class);\n+        if (instance.isAvailable()) {\n+            return instance.get().copy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8eb25b280d602ff6daa6bd8ef42817b1f4e10ade"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI5NDE1Mg==", "bodyText": "Because the recorder then adds its own Jackson settings which we don't want to propagate to the configured bean since that would affect all users of that ObjectMapper", "url": "https://github.com/quarkusio/quarkus/pull/7508#discussion_r386294152", "createdAt": "2020-03-02T09:57:56Z", "author": {"login": "geoand"}, "path": "extensions/amazon-lambda/runtime/src/main/java/io/quarkus/amazon/lambda/runtime/AmazonLambdaRecorder.java", "diffHunk": "@@ -45,14 +47,22 @@\n     public void setHandlerClass(Class<? extends RequestHandler<?, ?>> handler, BeanContainer container) {\n         handlerClass = handler;\n         beanContainer = container;\n-        objectMapper = new ObjectMapper()\n+        AmazonLambdaRecorder.objectMapper = getObjectMapper()\n                 .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)\n                 .configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true);\n         Method handlerMethod = discoverHandlerMethod(handlerClass);\n         objectReader = objectMapper.readerFor(handlerMethod.getParameterTypes()[0]);\n         objectWriter = objectMapper.writerFor(handlerMethod.getReturnType());\n     }\n \n+    private ObjectMapper getObjectMapper() {\n+        InstanceHandle<ObjectMapper> instance = Arc.container().instance(ObjectMapper.class);\n+        if (instance.isAvailable()) {\n+            return instance.get().copy();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI5MTY5OA=="}, "originalCommit": {"oid": "8eb25b280d602ff6daa6bd8ef42817b1f4e10ade"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 32, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}