{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2Njg3MzQ5", "number": 13153, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMTo1MDo0MFrOE2QDOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwODo0NTozMlrOE4Dk8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzIxNTMxOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/platform.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMTo1MDo0MFrOHu-p1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMTo1MDo0MFrOHu-p1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAyMzA2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Each organization creating their Quarkus platform may establish their own criterions for the extensions to be accepted into the platform and the means guarantee the compatibility between the accepted extensions.\n          \n          \n            \n            Each organization creating their Quarkus platform may establish their own criterions for the extensions to be accepted into the platform and the means to guarantee the compatibility between the accepted extensions.\n          \n      \n    \n    \n  \n\nNot entirely sure but it looks like a word is missing.", "url": "https://github.com/quarkusio/quarkus/pull/13153#discussion_r519023062", "createdAt": "2020-11-06T21:50:40Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/platform.adoc", "diffHunk": "@@ -0,0 +1,149 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Platform\n+\n+include::./attributes.adoc[]\n+\n+The Quarkus extension ecosystem consists of the Quarkus extensions developed and maintained by the community, including the Quarkus core development team. While the Quarkus ecosystem (sometimes also referred to as the \"Quarkus universe\") includes all the Quarkus extensions ever developed, there is also a concept of a Quarkus platform.\n+\n+== Quarkus Platform\n+\n+The fundamental promise of a Quarkus platform is any combination of the Quarkus extensions the platform consists of can be used in the same application without causing any conflict for each other.\n+Each organization creating their Quarkus platform may establish their own criterions for the extensions to be accepted into the platform and the means guarantee the compatibility between the accepted extensions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7536ef10f275a06afb8fadcc6ea26af1f94f8561"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzIxNjE1OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/platform.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMTo1MTowMVrOHu-qVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMTo1MTowMVrOHu-qVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAyMzE5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * imports a chosen version of `io.quarkus:quarkus-bom` (the platform BOM maybe flattened at the end but it has to be based on some version of `io.quarkus:quarkus-bom`)\n          \n          \n            \n            * imports a chosen version of `io.quarkus:quarkus-bom` (the platform BOM may be flattened at the end but it has to be based on some version of `io.quarkus:quarkus-bom`)", "url": "https://github.com/quarkusio/quarkus/pull/13153#discussion_r519023191", "createdAt": "2020-11-06T21:51:01Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/platform.adoc", "diffHunk": "@@ -0,0 +1,149 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Platform\n+\n+include::./attributes.adoc[]\n+\n+The Quarkus extension ecosystem consists of the Quarkus extensions developed and maintained by the community, including the Quarkus core development team. While the Quarkus ecosystem (sometimes also referred to as the \"Quarkus universe\") includes all the Quarkus extensions ever developed, there is also a concept of a Quarkus platform.\n+\n+== Quarkus Platform\n+\n+The fundamental promise of a Quarkus platform is any combination of the Quarkus extensions the platform consists of can be used in the same application without causing any conflict for each other.\n+Each organization creating their Quarkus platform may establish their own criterions for the extensions to be accepted into the platform and the means guarantee the compatibility between the accepted extensions.\n+\n+=== Quarkus Platform Artifacts\n+\n+Each Quarkus platform is defined with a few artifacts.\n+\n+=== Quarkus Platform BOM\n+\n+Each Quarkus Platform is expected to provide a Maven BOM artifact that\n+\n+* imports a chosen version of `io.quarkus:quarkus-bom` (the platform BOM maybe flattened at the end but it has to be based on some version of `io.quarkus:quarkus-bom`)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7536ef10f275a06afb8fadcc6ea26af1f94f8561"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzIxNzcyOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/platform.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMTo1MTo0MlrOHu-rYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMTo1MTo0MlrOHu-rYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAyMzQ1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * includes all the necessary thirdparty artifacts that align the transitive dependency versions of the platform extensions to guarantee compatiblity between them\n          \n          \n            \n            * includes all the necessary third-party artifacts that align the transitive dependency versions of the platform extensions to guarantee compatibility between them", "url": "https://github.com/quarkusio/quarkus/pull/13153#discussion_r519023456", "createdAt": "2020-11-06T21:51:42Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/platform.adoc", "diffHunk": "@@ -0,0 +1,149 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Platform\n+\n+include::./attributes.adoc[]\n+\n+The Quarkus extension ecosystem consists of the Quarkus extensions developed and maintained by the community, including the Quarkus core development team. While the Quarkus ecosystem (sometimes also referred to as the \"Quarkus universe\") includes all the Quarkus extensions ever developed, there is also a concept of a Quarkus platform.\n+\n+== Quarkus Platform\n+\n+The fundamental promise of a Quarkus platform is any combination of the Quarkus extensions the platform consists of can be used in the same application without causing any conflict for each other.\n+Each organization creating their Quarkus platform may establish their own criterions for the extensions to be accepted into the platform and the means guarantee the compatibility between the accepted extensions.\n+\n+=== Quarkus Platform Artifacts\n+\n+Each Quarkus platform is defined with a few artifacts.\n+\n+=== Quarkus Platform BOM\n+\n+Each Quarkus Platform is expected to provide a Maven BOM artifact that\n+\n+* imports a chosen version of `io.quarkus:quarkus-bom` (the platform BOM maybe flattened at the end but it has to be based on some version of `io.quarkus:quarkus-bom`)\n+* includes all the Quarkus extension artifacts (the runtime and the deployment ones) the platform consists of\n+* includes all the necessary thirdparty artifacts that align the transitive dependency versions of the platform extensions to guarantee compatiblity between them", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7536ef10f275a06afb8fadcc6ea26af1f94f8561"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzIyMTUzOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/platform.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMTo1Mjo0OFrOHu-tdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMTo1Mjo0OFrOHu-tdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAyMzk4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This artifact is also used as a Quarkus platform identifier. When Quarkus tools need to identify the Quarkus platform(s) used in the project, they will analyze the dependency version constraints of the project (the effective list of the managed dependencies from the `dependencyManagement` section in Maven terms) looking for the platform descriptor artifact(s) among them. Given that the platform descriptors are included into the Quarkus platform BOMs, every Quarkus application will inherit the platform descriptor artifact from the imported platform BOM(s) as a dependency version constraint (managed depenency in Maven terms).\n          \n          \n            \n            This artifact is also used as a Quarkus platform identifier. When Quarkus tools need to identify the Quarkus platform(s) used in the project, they will analyze the dependency version constraints of the project (the effective list of the managed dependencies from the `dependencyManagement` section in Maven terms) looking for the platform descriptor artifact(s) among them. Given that the platform descriptors are included into the Quarkus platform BOMs, every Quarkus application will inherit the platform descriptor artifact from the imported platform BOM(s) as a dependency version constraint (managed dependency in Maven terms).", "url": "https://github.com/quarkusio/quarkus/pull/13153#discussion_r519023988", "createdAt": "2020-11-06T21:52:48Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/platform.adoc", "diffHunk": "@@ -0,0 +1,149 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Platform\n+\n+include::./attributes.adoc[]\n+\n+The Quarkus extension ecosystem consists of the Quarkus extensions developed and maintained by the community, including the Quarkus core development team. While the Quarkus ecosystem (sometimes also referred to as the \"Quarkus universe\") includes all the Quarkus extensions ever developed, there is also a concept of a Quarkus platform.\n+\n+== Quarkus Platform\n+\n+The fundamental promise of a Quarkus platform is any combination of the Quarkus extensions the platform consists of can be used in the same application without causing any conflict for each other.\n+Each organization creating their Quarkus platform may establish their own criterions for the extensions to be accepted into the platform and the means guarantee the compatibility between the accepted extensions.\n+\n+=== Quarkus Platform Artifacts\n+\n+Each Quarkus platform is defined with a few artifacts.\n+\n+=== Quarkus Platform BOM\n+\n+Each Quarkus Platform is expected to provide a Maven BOM artifact that\n+\n+* imports a chosen version of `io.quarkus:quarkus-bom` (the platform BOM maybe flattened at the end but it has to be based on some version of `io.quarkus:quarkus-bom`)\n+* includes all the Quarkus extension artifacts (the runtime and the deployment ones) the platform consists of\n+* includes all the necessary thirdparty artifacts that align the transitive dependency versions of the platform extensions to guarantee compatiblity between them\n+* includes the <<platform-descriptor,platform JSON descriptor>> artifact\n+* possibly includes the <<platform-properties,platform configuration properties>> artifacts\n+\n+Quarkus applications that want to include extensions from a Quarkus platform will be importing the Quarkus platform BOM.\n+\n+[[platform-descriptor]]\n+=== Quarkus Platform Descriptor\n+\n+Quarkus platform descriptor is a JSON artifact that provides information about the platform and its extensions to the Quarkus tools. E.g. http://code.quarkus.io and the Quarkus command line tools consult this descriptor to list, add and remove extensions to/from the project on user's request.\n+This artifact is also used as a Quarkus platform identifier. When Quarkus tools need to identify the Quarkus platform(s) used in the project, they will analyze the dependency version constraints of the project (the effective list of the managed dependencies from the `dependencyManagement` section in Maven terms) looking for the platform descriptor artifact(s) among them. Given that the platform descriptors are included into the Quarkus platform BOMs, every Quarkus application will inherit the platform descriptor artifact from the imported platform BOM(s) as a dependency version constraint (managed depenency in Maven terms).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7536ef10f275a06afb8fadcc6ea26af1f94f8561"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzIyMjE3OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/platform.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMTo1MzowNVrOHu-t2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMTo1MzowNVrOHu-t2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAyNDA4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To be able to easily identify Quarkus platform descriptors among the project's dependency constraints, the platform descriptor Maven artifact coordinates should follow the folloing naming convention:\n          \n          \n            \n            To be able to easily identify Quarkus platform descriptors among the project's dependency constraints, the platform descriptor Maven artifact coordinates should follow the following naming convention:", "url": "https://github.com/quarkusio/quarkus/pull/13153#discussion_r519024088", "createdAt": "2020-11-06T21:53:05Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/platform.adoc", "diffHunk": "@@ -0,0 +1,149 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Platform\n+\n+include::./attributes.adoc[]\n+\n+The Quarkus extension ecosystem consists of the Quarkus extensions developed and maintained by the community, including the Quarkus core development team. While the Quarkus ecosystem (sometimes also referred to as the \"Quarkus universe\") includes all the Quarkus extensions ever developed, there is also a concept of a Quarkus platform.\n+\n+== Quarkus Platform\n+\n+The fundamental promise of a Quarkus platform is any combination of the Quarkus extensions the platform consists of can be used in the same application without causing any conflict for each other.\n+Each organization creating their Quarkus platform may establish their own criterions for the extensions to be accepted into the platform and the means guarantee the compatibility between the accepted extensions.\n+\n+=== Quarkus Platform Artifacts\n+\n+Each Quarkus platform is defined with a few artifacts.\n+\n+=== Quarkus Platform BOM\n+\n+Each Quarkus Platform is expected to provide a Maven BOM artifact that\n+\n+* imports a chosen version of `io.quarkus:quarkus-bom` (the platform BOM maybe flattened at the end but it has to be based on some version of `io.quarkus:quarkus-bom`)\n+* includes all the Quarkus extension artifacts (the runtime and the deployment ones) the platform consists of\n+* includes all the necessary thirdparty artifacts that align the transitive dependency versions of the platform extensions to guarantee compatiblity between them\n+* includes the <<platform-descriptor,platform JSON descriptor>> artifact\n+* possibly includes the <<platform-properties,platform configuration properties>> artifacts\n+\n+Quarkus applications that want to include extensions from a Quarkus platform will be importing the Quarkus platform BOM.\n+\n+[[platform-descriptor]]\n+=== Quarkus Platform Descriptor\n+\n+Quarkus platform descriptor is a JSON artifact that provides information about the platform and its extensions to the Quarkus tools. E.g. http://code.quarkus.io and the Quarkus command line tools consult this descriptor to list, add and remove extensions to/from the project on user's request.\n+This artifact is also used as a Quarkus platform identifier. When Quarkus tools need to identify the Quarkus platform(s) used in the project, they will analyze the dependency version constraints of the project (the effective list of the managed dependencies from the `dependencyManagement` section in Maven terms) looking for the platform descriptor artifact(s) among them. Given that the platform descriptors are included into the Quarkus platform BOMs, every Quarkus application will inherit the platform descriptor artifact from the imported platform BOM(s) as a dependency version constraint (managed depenency in Maven terms).\n+\n+To be able to easily identify Quarkus platform descriptors among the project's dependency constraints, the platform descriptor Maven artifact coordinates should follow the folloing naming convention:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7536ef10f275a06afb8fadcc6ea26af1f94f8561"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzIyNTM2OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/platform.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMTo1NDoxN1rOHu-vrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMTo1NDoxN1rOHu-vrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAyNDU1Ng==", "bodyText": "Ah ah I added a question here but you have a nice answer below :).", "url": "https://github.com/quarkusio/quarkus/pull/13153#discussion_r519024556", "createdAt": "2020-11-06T21:54:17Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/platform.adoc", "diffHunk": "@@ -0,0 +1,149 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Platform\n+\n+include::./attributes.adoc[]\n+\n+The Quarkus extension ecosystem consists of the Quarkus extensions developed and maintained by the community, including the Quarkus core development team. While the Quarkus ecosystem (sometimes also referred to as the \"Quarkus universe\") includes all the Quarkus extensions ever developed, there is also a concept of a Quarkus platform.\n+\n+== Quarkus Platform\n+\n+The fundamental promise of a Quarkus platform is any combination of the Quarkus extensions the platform consists of can be used in the same application without causing any conflict for each other.\n+Each organization creating their Quarkus platform may establish their own criterions for the extensions to be accepted into the platform and the means guarantee the compatibility between the accepted extensions.\n+\n+=== Quarkus Platform Artifacts\n+\n+Each Quarkus platform is defined with a few artifacts.\n+\n+=== Quarkus Platform BOM\n+\n+Each Quarkus Platform is expected to provide a Maven BOM artifact that\n+\n+* imports a chosen version of `io.quarkus:quarkus-bom` (the platform BOM maybe flattened at the end but it has to be based on some version of `io.quarkus:quarkus-bom`)\n+* includes all the Quarkus extension artifacts (the runtime and the deployment ones) the platform consists of\n+* includes all the necessary thirdparty artifacts that align the transitive dependency versions of the platform extensions to guarantee compatiblity between them\n+* includes the <<platform-descriptor,platform JSON descriptor>> artifact\n+* possibly includes the <<platform-properties,platform configuration properties>> artifacts\n+\n+Quarkus applications that want to include extensions from a Quarkus platform will be importing the Quarkus platform BOM.\n+\n+[[platform-descriptor]]\n+=== Quarkus Platform Descriptor\n+\n+Quarkus platform descriptor is a JSON artifact that provides information about the platform and its extensions to the Quarkus tools. E.g. http://code.quarkus.io and the Quarkus command line tools consult this descriptor to list, add and remove extensions to/from the project on user's request.\n+This artifact is also used as a Quarkus platform identifier. When Quarkus tools need to identify the Quarkus platform(s) used in the project, they will analyze the dependency version constraints of the project (the effective list of the managed dependencies from the `dependencyManagement` section in Maven terms) looking for the platform descriptor artifact(s) among them. Given that the platform descriptors are included into the Quarkus platform BOMs, every Quarkus application will inherit the platform descriptor artifact from the imported platform BOM(s) as a dependency version constraint (managed depenency in Maven terms).\n+\n+To be able to easily identify Quarkus platform descriptors among the project's dependency constraints, the platform descriptor Maven artifact coordinates should follow the folloing naming convention:\n+\n+* the `groupId` of the descriptor artifact should match the `groupId` of the corresponding Quarkus Platform BOM;\n+* the `artifactId` of the descriptor artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-descriptor` suffix;\n+* the `classifier` of the descriptor artifact should match the `version` of the corresponding Quarkus Platform BOM;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7536ef10f275a06afb8fadcc6ea26af1f94f8561"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzIyNzA3OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/platform.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMTo1NDo1NlrOHu-wtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMTo1NDo1NlrOHu-wtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAyNDgyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            As a string it will look as `<platform-bom-groupId>:<platform-bom-artifactId>-quarkus-platform-descriptor:<platform-version>:json:<platform-version>`\n          \n          \n            \n            As a string it will look like `<platform-bom-groupId>:<platform-bom-artifactId>-quarkus-platform-descriptor:<platform-version>:json:<platform-version>`", "url": "https://github.com/quarkusio/quarkus/pull/13153#discussion_r519024821", "createdAt": "2020-11-06T21:54:56Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/platform.adoc", "diffHunk": "@@ -0,0 +1,149 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Platform\n+\n+include::./attributes.adoc[]\n+\n+The Quarkus extension ecosystem consists of the Quarkus extensions developed and maintained by the community, including the Quarkus core development team. While the Quarkus ecosystem (sometimes also referred to as the \"Quarkus universe\") includes all the Quarkus extensions ever developed, there is also a concept of a Quarkus platform.\n+\n+== Quarkus Platform\n+\n+The fundamental promise of a Quarkus platform is any combination of the Quarkus extensions the platform consists of can be used in the same application without causing any conflict for each other.\n+Each organization creating their Quarkus platform may establish their own criterions for the extensions to be accepted into the platform and the means guarantee the compatibility between the accepted extensions.\n+\n+=== Quarkus Platform Artifacts\n+\n+Each Quarkus platform is defined with a few artifacts.\n+\n+=== Quarkus Platform BOM\n+\n+Each Quarkus Platform is expected to provide a Maven BOM artifact that\n+\n+* imports a chosen version of `io.quarkus:quarkus-bom` (the platform BOM maybe flattened at the end but it has to be based on some version of `io.quarkus:quarkus-bom`)\n+* includes all the Quarkus extension artifacts (the runtime and the deployment ones) the platform consists of\n+* includes all the necessary thirdparty artifacts that align the transitive dependency versions of the platform extensions to guarantee compatiblity between them\n+* includes the <<platform-descriptor,platform JSON descriptor>> artifact\n+* possibly includes the <<platform-properties,platform configuration properties>> artifacts\n+\n+Quarkus applications that want to include extensions from a Quarkus platform will be importing the Quarkus platform BOM.\n+\n+[[platform-descriptor]]\n+=== Quarkus Platform Descriptor\n+\n+Quarkus platform descriptor is a JSON artifact that provides information about the platform and its extensions to the Quarkus tools. E.g. http://code.quarkus.io and the Quarkus command line tools consult this descriptor to list, add and remove extensions to/from the project on user's request.\n+This artifact is also used as a Quarkus platform identifier. When Quarkus tools need to identify the Quarkus platform(s) used in the project, they will analyze the dependency version constraints of the project (the effective list of the managed dependencies from the `dependencyManagement` section in Maven terms) looking for the platform descriptor artifact(s) among them. Given that the platform descriptors are included into the Quarkus platform BOMs, every Quarkus application will inherit the platform descriptor artifact from the imported platform BOM(s) as a dependency version constraint (managed depenency in Maven terms).\n+\n+To be able to easily identify Quarkus platform descriptors among the project's dependency constraints, the platform descriptor Maven artifact coordinates should follow the folloing naming convention:\n+\n+* the `groupId` of the descriptor artifact should match the `groupId` of the corresponding Quarkus Platform BOM;\n+* the `artifactId` of the descriptor artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-descriptor` suffix;\n+* the `classifier` of the descriptor artifact should match the `version` of the corresponding Quarkus Platform BOM;\n+* the `type` of the descriptor artifact should be `json`;\n+* the `version` of the descriptor artifact should match the `version` of the  corresponding Quarkus Platform BOM.\n+\n+As a string it will look as `<platform-bom-groupId>:<platform-bom-artifactId>-quarkus-platform-descriptor:<platform-version>:json:<platform-version>`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7536ef10f275a06afb8fadcc6ea26af1f94f8561"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzIzMjM5OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/platform.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMTo1NzowN1rOHu-z0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMTo1NzowN1rOHu-z0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAyNTYxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Quarkus is using https://github.com/eclipse/microprofile-config[Eclipse MicroProfile Config^] for wiring application configuration. A Quarkus platform may be used as another source of configuration in the hierarchy of the configuration sources dominated by the application's `application.properties`.\n          \n          \n            \n            Quarkus is using https://github.com/eclipse/microprofile-config[Eclipse MicroProfile Config] for wiring application configuration. A Quarkus platform may be used as another source of configuration in the hierarchy of the configuration sources dominated by the application's `application.properties`.", "url": "https://github.com/quarkusio/quarkus/pull/13153#discussion_r519025619", "createdAt": "2020-11-06T21:57:07Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/platform.adoc", "diffHunk": "@@ -0,0 +1,149 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Platform\n+\n+include::./attributes.adoc[]\n+\n+The Quarkus extension ecosystem consists of the Quarkus extensions developed and maintained by the community, including the Quarkus core development team. While the Quarkus ecosystem (sometimes also referred to as the \"Quarkus universe\") includes all the Quarkus extensions ever developed, there is also a concept of a Quarkus platform.\n+\n+== Quarkus Platform\n+\n+The fundamental promise of a Quarkus platform is any combination of the Quarkus extensions the platform consists of can be used in the same application without causing any conflict for each other.\n+Each organization creating their Quarkus platform may establish their own criterions for the extensions to be accepted into the platform and the means guarantee the compatibility between the accepted extensions.\n+\n+=== Quarkus Platform Artifacts\n+\n+Each Quarkus platform is defined with a few artifacts.\n+\n+=== Quarkus Platform BOM\n+\n+Each Quarkus Platform is expected to provide a Maven BOM artifact that\n+\n+* imports a chosen version of `io.quarkus:quarkus-bom` (the platform BOM maybe flattened at the end but it has to be based on some version of `io.quarkus:quarkus-bom`)\n+* includes all the Quarkus extension artifacts (the runtime and the deployment ones) the platform consists of\n+* includes all the necessary thirdparty artifacts that align the transitive dependency versions of the platform extensions to guarantee compatiblity between them\n+* includes the <<platform-descriptor,platform JSON descriptor>> artifact\n+* possibly includes the <<platform-properties,platform configuration properties>> artifacts\n+\n+Quarkus applications that want to include extensions from a Quarkus platform will be importing the Quarkus platform BOM.\n+\n+[[platform-descriptor]]\n+=== Quarkus Platform Descriptor\n+\n+Quarkus platform descriptor is a JSON artifact that provides information about the platform and its extensions to the Quarkus tools. E.g. http://code.quarkus.io and the Quarkus command line tools consult this descriptor to list, add and remove extensions to/from the project on user's request.\n+This artifact is also used as a Quarkus platform identifier. When Quarkus tools need to identify the Quarkus platform(s) used in the project, they will analyze the dependency version constraints of the project (the effective list of the managed dependencies from the `dependencyManagement` section in Maven terms) looking for the platform descriptor artifact(s) among them. Given that the platform descriptors are included into the Quarkus platform BOMs, every Quarkus application will inherit the platform descriptor artifact from the imported platform BOM(s) as a dependency version constraint (managed depenency in Maven terms).\n+\n+To be able to easily identify Quarkus platform descriptors among the project's dependency constraints, the platform descriptor Maven artifact coordinates should follow the folloing naming convention:\n+\n+* the `groupId` of the descriptor artifact should match the `groupId` of the corresponding Quarkus Platform BOM;\n+* the `artifactId` of the descriptor artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-descriptor` suffix;\n+* the `classifier` of the descriptor artifact should match the `version` of the corresponding Quarkus Platform BOM;\n+* the `type` of the descriptor artifact should be `json`;\n+* the `version` of the descriptor artifact should match the `version` of the  corresponding Quarkus Platform BOM.\n+\n+As a string it will look as `<platform-bom-groupId>:<platform-bom-artifactId>-quarkus-platform-descriptor:<platform-version>:json:<platform-version>`\n+\n+E.g. the coordinates of the descriptor for Quarkus BOM `io.quarkus:quarkus-bom::pom:1.2.3` will be `io.quarkus:quarkus-bom-quarkus-platform-descriptor:1.2.3:json:1.2.3`.\n+And for a custom Quarkus platform defined with BOM `org.acme:acme-bom::pom:555` it will be `org.acme:acme-bom-quarkus-platform-descriptor:555:json:555`.\n+\n+The classifier matching the version of the platform may look confusing at first. But this is what turns the descriptor into a true \"fingerprint\" of the platform. In both Maven and Gradle, the effective set of the dependency version constraints (or the managed dependencies) is obtained by merging all the imported BOMs and version constraints specified individually in the current project and also its parent(s). The artifact `classifier` is a part of the dependency ID, which could be expressed as `groupId:artifactId:classifier:type`. Which means that if a project is based on a couple of Quarkus platforms (by importing their BOMs), e.g. `io.quarkus:quarkus-universe-bom::pom:1.2.3` and `org.acme:acme-bom::pom:555`, and these two platforms are based on different `io.quarkus:quarkus-bom::pom` versions (which is technically a Quarkus platform in its turn as well), the Quarkus tools will be able to detect this fact and make the user aware of it, since it *might* not be a safe combination. If the descriptor artifact didn't include the classifer containing the version of the platform then the tools wouldn't be able to detect a potentially incompatible mix of different versions of the same platform in the same project.\n+\n+The platform descriptor will normally be generated using a Maven plugin, e.g.\n+\n+[source,xml]\n+----\n+<plugin>\n+  <groupId>io.quarkus</groupId>\n+  <artifactId>quarkus-platform-descriptor-json-plugin</artifactId>\n+  <version>${quarkus.version}</version> <1>\n+  <executions>\n+    <execution>\n+      <phase>process-resources</phase>\n+      <goals>\n+        <goal>generate-extensions-json</goal> <2>\n+      </goals>\n+    </execution>\n+  </executions>\n+  <configuration>\n+    <bomGroupId>${quarkus.platform.group-id}</bomGroupId> <3>\n+    <bomArtifactId>${quarkus.platform.artifact-id}</bomArtifactId> <4>\n+    <bomVersion>${quarkus.platform.version}</bomVersion> <5>\n+    <overridesFile>${overridesfile}</overridesFile> <6>\n+    <resolveDependencyManagement>true</resolveDependencyManagement> <7>\n+  </configuration>\n+</plugin>\n+----\n+\n+<1> the version of the `quarkus-platform-descriptor-json-plugin`\n+<2> `generate-extensions-json` is the goal generating the platform descriptor\n+<3> the `groupId` of the platform BOM\n+<4> the `artifactId` of the platform BOM\n+<5> the `version` of the platform BOM\n+<6> this parameter is optional, it allows to override some metadata from the Quarkus extension descriptors found in every runtime extension artifact from which the platform descriptor is generated\n+<7> this parameter is also optional and defaults to false. It has to be set to true in case the platform BOM *is not generated* and *is not flattened*. Which for example is the case for `io.quarkus:quarkus-bom`.\n+\n+[[platform-properties]]\n+=== Quarkus Platform Properties\n+\n+A Quarkus platform may provide its own default values for some of the configuration options.\n+\n+Quarkus is using https://github.com/eclipse/microprofile-config[Eclipse MicroProfile Config^] for wiring application configuration. A Quarkus platform may be used as another source of configuration in the hierarchy of the configuration sources dominated by the application's `application.properties`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7536ef10f275a06afb8fadcc6ea26af1f94f8561"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzIzNTk1OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/platform.adoc", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMTo1ODoyM1rOHu-18Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMjo1NjowOVrOHvABfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAyNjE2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            IMPORTANT: At this point, platform properties are only allowed to provide the default values to a restricted set of properties. Property names in the platform properties file must be prefixed with the `platform.` suffix.\n          \n          \n            \n            IMPORTANT: At this point, platform properties are only allowed to provide the default values of a restricted set of properties. Property names in the platform properties file must be prefixed with the `platform.` suffix.\n          \n      \n    \n    \n  \n\nReads better IMHO.", "url": "https://github.com/quarkusio/quarkus/pull/13153#discussion_r519026161", "createdAt": "2020-11-06T21:58:23Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/platform.adoc", "diffHunk": "@@ -0,0 +1,149 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Platform\n+\n+include::./attributes.adoc[]\n+\n+The Quarkus extension ecosystem consists of the Quarkus extensions developed and maintained by the community, including the Quarkus core development team. While the Quarkus ecosystem (sometimes also referred to as the \"Quarkus universe\") includes all the Quarkus extensions ever developed, there is also a concept of a Quarkus platform.\n+\n+== Quarkus Platform\n+\n+The fundamental promise of a Quarkus platform is any combination of the Quarkus extensions the platform consists of can be used in the same application without causing any conflict for each other.\n+Each organization creating their Quarkus platform may establish their own criterions for the extensions to be accepted into the platform and the means guarantee the compatibility between the accepted extensions.\n+\n+=== Quarkus Platform Artifacts\n+\n+Each Quarkus platform is defined with a few artifacts.\n+\n+=== Quarkus Platform BOM\n+\n+Each Quarkus Platform is expected to provide a Maven BOM artifact that\n+\n+* imports a chosen version of `io.quarkus:quarkus-bom` (the platform BOM maybe flattened at the end but it has to be based on some version of `io.quarkus:quarkus-bom`)\n+* includes all the Quarkus extension artifacts (the runtime and the deployment ones) the platform consists of\n+* includes all the necessary thirdparty artifacts that align the transitive dependency versions of the platform extensions to guarantee compatiblity between them\n+* includes the <<platform-descriptor,platform JSON descriptor>> artifact\n+* possibly includes the <<platform-properties,platform configuration properties>> artifacts\n+\n+Quarkus applications that want to include extensions from a Quarkus platform will be importing the Quarkus platform BOM.\n+\n+[[platform-descriptor]]\n+=== Quarkus Platform Descriptor\n+\n+Quarkus platform descriptor is a JSON artifact that provides information about the platform and its extensions to the Quarkus tools. E.g. http://code.quarkus.io and the Quarkus command line tools consult this descriptor to list, add and remove extensions to/from the project on user's request.\n+This artifact is also used as a Quarkus platform identifier. When Quarkus tools need to identify the Quarkus platform(s) used in the project, they will analyze the dependency version constraints of the project (the effective list of the managed dependencies from the `dependencyManagement` section in Maven terms) looking for the platform descriptor artifact(s) among them. Given that the platform descriptors are included into the Quarkus platform BOMs, every Quarkus application will inherit the platform descriptor artifact from the imported platform BOM(s) as a dependency version constraint (managed depenency in Maven terms).\n+\n+To be able to easily identify Quarkus platform descriptors among the project's dependency constraints, the platform descriptor Maven artifact coordinates should follow the folloing naming convention:\n+\n+* the `groupId` of the descriptor artifact should match the `groupId` of the corresponding Quarkus Platform BOM;\n+* the `artifactId` of the descriptor artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-descriptor` suffix;\n+* the `classifier` of the descriptor artifact should match the `version` of the corresponding Quarkus Platform BOM;\n+* the `type` of the descriptor artifact should be `json`;\n+* the `version` of the descriptor artifact should match the `version` of the  corresponding Quarkus Platform BOM.\n+\n+As a string it will look as `<platform-bom-groupId>:<platform-bom-artifactId>-quarkus-platform-descriptor:<platform-version>:json:<platform-version>`\n+\n+E.g. the coordinates of the descriptor for Quarkus BOM `io.quarkus:quarkus-bom::pom:1.2.3` will be `io.quarkus:quarkus-bom-quarkus-platform-descriptor:1.2.3:json:1.2.3`.\n+And for a custom Quarkus platform defined with BOM `org.acme:acme-bom::pom:555` it will be `org.acme:acme-bom-quarkus-platform-descriptor:555:json:555`.\n+\n+The classifier matching the version of the platform may look confusing at first. But this is what turns the descriptor into a true \"fingerprint\" of the platform. In both Maven and Gradle, the effective set of the dependency version constraints (or the managed dependencies) is obtained by merging all the imported BOMs and version constraints specified individually in the current project and also its parent(s). The artifact `classifier` is a part of the dependency ID, which could be expressed as `groupId:artifactId:classifier:type`. Which means that if a project is based on a couple of Quarkus platforms (by importing their BOMs), e.g. `io.quarkus:quarkus-universe-bom::pom:1.2.3` and `org.acme:acme-bom::pom:555`, and these two platforms are based on different `io.quarkus:quarkus-bom::pom` versions (which is technically a Quarkus platform in its turn as well), the Quarkus tools will be able to detect this fact and make the user aware of it, since it *might* not be a safe combination. If the descriptor artifact didn't include the classifer containing the version of the platform then the tools wouldn't be able to detect a potentially incompatible mix of different versions of the same platform in the same project.\n+\n+The platform descriptor will normally be generated using a Maven plugin, e.g.\n+\n+[source,xml]\n+----\n+<plugin>\n+  <groupId>io.quarkus</groupId>\n+  <artifactId>quarkus-platform-descriptor-json-plugin</artifactId>\n+  <version>${quarkus.version}</version> <1>\n+  <executions>\n+    <execution>\n+      <phase>process-resources</phase>\n+      <goals>\n+        <goal>generate-extensions-json</goal> <2>\n+      </goals>\n+    </execution>\n+  </executions>\n+  <configuration>\n+    <bomGroupId>${quarkus.platform.group-id}</bomGroupId> <3>\n+    <bomArtifactId>${quarkus.platform.artifact-id}</bomArtifactId> <4>\n+    <bomVersion>${quarkus.platform.version}</bomVersion> <5>\n+    <overridesFile>${overridesfile}</overridesFile> <6>\n+    <resolveDependencyManagement>true</resolveDependencyManagement> <7>\n+  </configuration>\n+</plugin>\n+----\n+\n+<1> the version of the `quarkus-platform-descriptor-json-plugin`\n+<2> `generate-extensions-json` is the goal generating the platform descriptor\n+<3> the `groupId` of the platform BOM\n+<4> the `artifactId` of the platform BOM\n+<5> the `version` of the platform BOM\n+<6> this parameter is optional, it allows to override some metadata from the Quarkus extension descriptors found in every runtime extension artifact from which the platform descriptor is generated\n+<7> this parameter is also optional and defaults to false. It has to be set to true in case the platform BOM *is not generated* and *is not flattened*. Which for example is the case for `io.quarkus:quarkus-bom`.\n+\n+[[platform-properties]]\n+=== Quarkus Platform Properties\n+\n+A Quarkus platform may provide its own default values for some of the configuration options.\n+\n+Quarkus is using https://github.com/eclipse/microprofile-config[Eclipse MicroProfile Config^] for wiring application configuration. A Quarkus platform may be used as another source of configuration in the hierarchy of the configuration sources dominated by the application's `application.properties`.\n+\n+To provide platform-specific defaults, the platform needs to include a dependency version constraint in its BOM for a properties artifact whose coordinates follow the following naming convention:\n+\n+* the `groupId` of the properties artifact should match the `groupId` of the corresponding Quarkus Platform BOM;\n+* the `artifactId` of the properties artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-properties` suffix;\n+* the `classifier` of the descriptor artifact should be left empty/null;\n+* the `type` of the descriptor artifact should be `properties`;\n+* the `version` of the descriptor artifact should match the `version` of the  corresponding Quarkus Platform BOM.\n+\n+The properties artifact itself is expected to be a traditional `properties` file that will be loaded into an instance of `java.util.Properties` class.\n+\n+IMPORTANT: At this point, platform properties are only allowed to provide the default values to a restricted set of properties. Property names in the platform properties file must be prefixed with the `platform.` suffix.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7536ef10f275a06afb8fadcc6ea26af1f94f8561"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0MjM0OA==", "bodyText": "Perhaps \"for\" will be even better?", "url": "https://github.com/quarkusio/quarkus/pull/13153#discussion_r519042348", "createdAt": "2020-11-06T22:45:36Z", "author": {"login": "aloubyansky"}, "path": "docs/src/main/asciidoc/platform.adoc", "diffHunk": "@@ -0,0 +1,149 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Platform\n+\n+include::./attributes.adoc[]\n+\n+The Quarkus extension ecosystem consists of the Quarkus extensions developed and maintained by the community, including the Quarkus core development team. While the Quarkus ecosystem (sometimes also referred to as the \"Quarkus universe\") includes all the Quarkus extensions ever developed, there is also a concept of a Quarkus platform.\n+\n+== Quarkus Platform\n+\n+The fundamental promise of a Quarkus platform is any combination of the Quarkus extensions the platform consists of can be used in the same application without causing any conflict for each other.\n+Each organization creating their Quarkus platform may establish their own criterions for the extensions to be accepted into the platform and the means guarantee the compatibility between the accepted extensions.\n+\n+=== Quarkus Platform Artifacts\n+\n+Each Quarkus platform is defined with a few artifacts.\n+\n+=== Quarkus Platform BOM\n+\n+Each Quarkus Platform is expected to provide a Maven BOM artifact that\n+\n+* imports a chosen version of `io.quarkus:quarkus-bom` (the platform BOM maybe flattened at the end but it has to be based on some version of `io.quarkus:quarkus-bom`)\n+* includes all the Quarkus extension artifacts (the runtime and the deployment ones) the platform consists of\n+* includes all the necessary thirdparty artifacts that align the transitive dependency versions of the platform extensions to guarantee compatiblity between them\n+* includes the <<platform-descriptor,platform JSON descriptor>> artifact\n+* possibly includes the <<platform-properties,platform configuration properties>> artifacts\n+\n+Quarkus applications that want to include extensions from a Quarkus platform will be importing the Quarkus platform BOM.\n+\n+[[platform-descriptor]]\n+=== Quarkus Platform Descriptor\n+\n+Quarkus platform descriptor is a JSON artifact that provides information about the platform and its extensions to the Quarkus tools. E.g. http://code.quarkus.io and the Quarkus command line tools consult this descriptor to list, add and remove extensions to/from the project on user's request.\n+This artifact is also used as a Quarkus platform identifier. When Quarkus tools need to identify the Quarkus platform(s) used in the project, they will analyze the dependency version constraints of the project (the effective list of the managed dependencies from the `dependencyManagement` section in Maven terms) looking for the platform descriptor artifact(s) among them. Given that the platform descriptors are included into the Quarkus platform BOMs, every Quarkus application will inherit the platform descriptor artifact from the imported platform BOM(s) as a dependency version constraint (managed depenency in Maven terms).\n+\n+To be able to easily identify Quarkus platform descriptors among the project's dependency constraints, the platform descriptor Maven artifact coordinates should follow the folloing naming convention:\n+\n+* the `groupId` of the descriptor artifact should match the `groupId` of the corresponding Quarkus Platform BOM;\n+* the `artifactId` of the descriptor artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-descriptor` suffix;\n+* the `classifier` of the descriptor artifact should match the `version` of the corresponding Quarkus Platform BOM;\n+* the `type` of the descriptor artifact should be `json`;\n+* the `version` of the descriptor artifact should match the `version` of the  corresponding Quarkus Platform BOM.\n+\n+As a string it will look as `<platform-bom-groupId>:<platform-bom-artifactId>-quarkus-platform-descriptor:<platform-version>:json:<platform-version>`\n+\n+E.g. the coordinates of the descriptor for Quarkus BOM `io.quarkus:quarkus-bom::pom:1.2.3` will be `io.quarkus:quarkus-bom-quarkus-platform-descriptor:1.2.3:json:1.2.3`.\n+And for a custom Quarkus platform defined with BOM `org.acme:acme-bom::pom:555` it will be `org.acme:acme-bom-quarkus-platform-descriptor:555:json:555`.\n+\n+The classifier matching the version of the platform may look confusing at first. But this is what turns the descriptor into a true \"fingerprint\" of the platform. In both Maven and Gradle, the effective set of the dependency version constraints (or the managed dependencies) is obtained by merging all the imported BOMs and version constraints specified individually in the current project and also its parent(s). The artifact `classifier` is a part of the dependency ID, which could be expressed as `groupId:artifactId:classifier:type`. Which means that if a project is based on a couple of Quarkus platforms (by importing their BOMs), e.g. `io.quarkus:quarkus-universe-bom::pom:1.2.3` and `org.acme:acme-bom::pom:555`, and these two platforms are based on different `io.quarkus:quarkus-bom::pom` versions (which is technically a Quarkus platform in its turn as well), the Quarkus tools will be able to detect this fact and make the user aware of it, since it *might* not be a safe combination. If the descriptor artifact didn't include the classifer containing the version of the platform then the tools wouldn't be able to detect a potentially incompatible mix of different versions of the same platform in the same project.\n+\n+The platform descriptor will normally be generated using a Maven plugin, e.g.\n+\n+[source,xml]\n+----\n+<plugin>\n+  <groupId>io.quarkus</groupId>\n+  <artifactId>quarkus-platform-descriptor-json-plugin</artifactId>\n+  <version>${quarkus.version}</version> <1>\n+  <executions>\n+    <execution>\n+      <phase>process-resources</phase>\n+      <goals>\n+        <goal>generate-extensions-json</goal> <2>\n+      </goals>\n+    </execution>\n+  </executions>\n+  <configuration>\n+    <bomGroupId>${quarkus.platform.group-id}</bomGroupId> <3>\n+    <bomArtifactId>${quarkus.platform.artifact-id}</bomArtifactId> <4>\n+    <bomVersion>${quarkus.platform.version}</bomVersion> <5>\n+    <overridesFile>${overridesfile}</overridesFile> <6>\n+    <resolveDependencyManagement>true</resolveDependencyManagement> <7>\n+  </configuration>\n+</plugin>\n+----\n+\n+<1> the version of the `quarkus-platform-descriptor-json-plugin`\n+<2> `generate-extensions-json` is the goal generating the platform descriptor\n+<3> the `groupId` of the platform BOM\n+<4> the `artifactId` of the platform BOM\n+<5> the `version` of the platform BOM\n+<6> this parameter is optional, it allows to override some metadata from the Quarkus extension descriptors found in every runtime extension artifact from which the platform descriptor is generated\n+<7> this parameter is also optional and defaults to false. It has to be set to true in case the platform BOM *is not generated* and *is not flattened*. Which for example is the case for `io.quarkus:quarkus-bom`.\n+\n+[[platform-properties]]\n+=== Quarkus Platform Properties\n+\n+A Quarkus platform may provide its own default values for some of the configuration options.\n+\n+Quarkus is using https://github.com/eclipse/microprofile-config[Eclipse MicroProfile Config^] for wiring application configuration. A Quarkus platform may be used as another source of configuration in the hierarchy of the configuration sources dominated by the application's `application.properties`.\n+\n+To provide platform-specific defaults, the platform needs to include a dependency version constraint in its BOM for a properties artifact whose coordinates follow the following naming convention:\n+\n+* the `groupId` of the properties artifact should match the `groupId` of the corresponding Quarkus Platform BOM;\n+* the `artifactId` of the properties artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-properties` suffix;\n+* the `classifier` of the descriptor artifact should be left empty/null;\n+* the `type` of the descriptor artifact should be `properties`;\n+* the `version` of the descriptor artifact should match the `version` of the  corresponding Quarkus Platform BOM.\n+\n+The properties artifact itself is expected to be a traditional `properties` file that will be loaded into an instance of `java.util.Properties` class.\n+\n+IMPORTANT: At this point, platform properties are only allowed to provide the default values to a restricted set of properties. Property names in the platform properties file must be prefixed with the `platform.` suffix.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAyNjE2MQ=="}, "originalCommit": {"oid": "7536ef10f275a06afb8fadcc6ea26af1f94f8561"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0Mzk0NQ==", "bodyText": "I think \"provide ... for\" sounds better. And probably it should be \"a restricted set of configuration options\".", "url": "https://github.com/quarkusio/quarkus/pull/13153#discussion_r519043945", "createdAt": "2020-11-06T22:50:40Z", "author": {"login": "aloubyansky"}, "path": "docs/src/main/asciidoc/platform.adoc", "diffHunk": "@@ -0,0 +1,149 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Platform\n+\n+include::./attributes.adoc[]\n+\n+The Quarkus extension ecosystem consists of the Quarkus extensions developed and maintained by the community, including the Quarkus core development team. While the Quarkus ecosystem (sometimes also referred to as the \"Quarkus universe\") includes all the Quarkus extensions ever developed, there is also a concept of a Quarkus platform.\n+\n+== Quarkus Platform\n+\n+The fundamental promise of a Quarkus platform is any combination of the Quarkus extensions the platform consists of can be used in the same application without causing any conflict for each other.\n+Each organization creating their Quarkus platform may establish their own criterions for the extensions to be accepted into the platform and the means guarantee the compatibility between the accepted extensions.\n+\n+=== Quarkus Platform Artifacts\n+\n+Each Quarkus platform is defined with a few artifacts.\n+\n+=== Quarkus Platform BOM\n+\n+Each Quarkus Platform is expected to provide a Maven BOM artifact that\n+\n+* imports a chosen version of `io.quarkus:quarkus-bom` (the platform BOM maybe flattened at the end but it has to be based on some version of `io.quarkus:quarkus-bom`)\n+* includes all the Quarkus extension artifacts (the runtime and the deployment ones) the platform consists of\n+* includes all the necessary thirdparty artifacts that align the transitive dependency versions of the platform extensions to guarantee compatiblity between them\n+* includes the <<platform-descriptor,platform JSON descriptor>> artifact\n+* possibly includes the <<platform-properties,platform configuration properties>> artifacts\n+\n+Quarkus applications that want to include extensions from a Quarkus platform will be importing the Quarkus platform BOM.\n+\n+[[platform-descriptor]]\n+=== Quarkus Platform Descriptor\n+\n+Quarkus platform descriptor is a JSON artifact that provides information about the platform and its extensions to the Quarkus tools. E.g. http://code.quarkus.io and the Quarkus command line tools consult this descriptor to list, add and remove extensions to/from the project on user's request.\n+This artifact is also used as a Quarkus platform identifier. When Quarkus tools need to identify the Quarkus platform(s) used in the project, they will analyze the dependency version constraints of the project (the effective list of the managed dependencies from the `dependencyManagement` section in Maven terms) looking for the platform descriptor artifact(s) among them. Given that the platform descriptors are included into the Quarkus platform BOMs, every Quarkus application will inherit the platform descriptor artifact from the imported platform BOM(s) as a dependency version constraint (managed depenency in Maven terms).\n+\n+To be able to easily identify Quarkus platform descriptors among the project's dependency constraints, the platform descriptor Maven artifact coordinates should follow the folloing naming convention:\n+\n+* the `groupId` of the descriptor artifact should match the `groupId` of the corresponding Quarkus Platform BOM;\n+* the `artifactId` of the descriptor artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-descriptor` suffix;\n+* the `classifier` of the descriptor artifact should match the `version` of the corresponding Quarkus Platform BOM;\n+* the `type` of the descriptor artifact should be `json`;\n+* the `version` of the descriptor artifact should match the `version` of the  corresponding Quarkus Platform BOM.\n+\n+As a string it will look as `<platform-bom-groupId>:<platform-bom-artifactId>-quarkus-platform-descriptor:<platform-version>:json:<platform-version>`\n+\n+E.g. the coordinates of the descriptor for Quarkus BOM `io.quarkus:quarkus-bom::pom:1.2.3` will be `io.quarkus:quarkus-bom-quarkus-platform-descriptor:1.2.3:json:1.2.3`.\n+And for a custom Quarkus platform defined with BOM `org.acme:acme-bom::pom:555` it will be `org.acme:acme-bom-quarkus-platform-descriptor:555:json:555`.\n+\n+The classifier matching the version of the platform may look confusing at first. But this is what turns the descriptor into a true \"fingerprint\" of the platform. In both Maven and Gradle, the effective set of the dependency version constraints (or the managed dependencies) is obtained by merging all the imported BOMs and version constraints specified individually in the current project and also its parent(s). The artifact `classifier` is a part of the dependency ID, which could be expressed as `groupId:artifactId:classifier:type`. Which means that if a project is based on a couple of Quarkus platforms (by importing their BOMs), e.g. `io.quarkus:quarkus-universe-bom::pom:1.2.3` and `org.acme:acme-bom::pom:555`, and these two platforms are based on different `io.quarkus:quarkus-bom::pom` versions (which is technically a Quarkus platform in its turn as well), the Quarkus tools will be able to detect this fact and make the user aware of it, since it *might* not be a safe combination. If the descriptor artifact didn't include the classifer containing the version of the platform then the tools wouldn't be able to detect a potentially incompatible mix of different versions of the same platform in the same project.\n+\n+The platform descriptor will normally be generated using a Maven plugin, e.g.\n+\n+[source,xml]\n+----\n+<plugin>\n+  <groupId>io.quarkus</groupId>\n+  <artifactId>quarkus-platform-descriptor-json-plugin</artifactId>\n+  <version>${quarkus.version}</version> <1>\n+  <executions>\n+    <execution>\n+      <phase>process-resources</phase>\n+      <goals>\n+        <goal>generate-extensions-json</goal> <2>\n+      </goals>\n+    </execution>\n+  </executions>\n+  <configuration>\n+    <bomGroupId>${quarkus.platform.group-id}</bomGroupId> <3>\n+    <bomArtifactId>${quarkus.platform.artifact-id}</bomArtifactId> <4>\n+    <bomVersion>${quarkus.platform.version}</bomVersion> <5>\n+    <overridesFile>${overridesfile}</overridesFile> <6>\n+    <resolveDependencyManagement>true</resolveDependencyManagement> <7>\n+  </configuration>\n+</plugin>\n+----\n+\n+<1> the version of the `quarkus-platform-descriptor-json-plugin`\n+<2> `generate-extensions-json` is the goal generating the platform descriptor\n+<3> the `groupId` of the platform BOM\n+<4> the `artifactId` of the platform BOM\n+<5> the `version` of the platform BOM\n+<6> this parameter is optional, it allows to override some metadata from the Quarkus extension descriptors found in every runtime extension artifact from which the platform descriptor is generated\n+<7> this parameter is also optional and defaults to false. It has to be set to true in case the platform BOM *is not generated* and *is not flattened*. Which for example is the case for `io.quarkus:quarkus-bom`.\n+\n+[[platform-properties]]\n+=== Quarkus Platform Properties\n+\n+A Quarkus platform may provide its own default values for some of the configuration options.\n+\n+Quarkus is using https://github.com/eclipse/microprofile-config[Eclipse MicroProfile Config^] for wiring application configuration. A Quarkus platform may be used as another source of configuration in the hierarchy of the configuration sources dominated by the application's `application.properties`.\n+\n+To provide platform-specific defaults, the platform needs to include a dependency version constraint in its BOM for a properties artifact whose coordinates follow the following naming convention:\n+\n+* the `groupId` of the properties artifact should match the `groupId` of the corresponding Quarkus Platform BOM;\n+* the `artifactId` of the properties artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-properties` suffix;\n+* the `classifier` of the descriptor artifact should be left empty/null;\n+* the `type` of the descriptor artifact should be `properties`;\n+* the `version` of the descriptor artifact should match the `version` of the  corresponding Quarkus Platform BOM.\n+\n+The properties artifact itself is expected to be a traditional `properties` file that will be loaded into an instance of `java.util.Properties` class.\n+\n+IMPORTANT: At this point, platform properties are only allowed to provide the default values to a restricted set of properties. Property names in the platform properties file must be prefixed with the `platform.` suffix.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAyNjE2MQ=="}, "originalCommit": {"oid": "7536ef10f275a06afb8fadcc6ea26af1f94f8561"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0NTUwMA==", "bodyText": "I re-wrote it as\n-IMPORTANT: At this point, platform properties are only allowed to provide the default values to a restricted set of properties. Property names in the platform properties file must be prefixed with the platform. suffix.\n+IMPORTANT: At this point, platform properties are only allowed to provide the default values for a restricted set of configuration options. The property names in the platform properties file must be prefixed with the platform. suffix.\nThanks for the review!", "url": "https://github.com/quarkusio/quarkus/pull/13153#discussion_r519045500", "createdAt": "2020-11-06T22:56:09Z", "author": {"login": "aloubyansky"}, "path": "docs/src/main/asciidoc/platform.adoc", "diffHunk": "@@ -0,0 +1,149 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Platform\n+\n+include::./attributes.adoc[]\n+\n+The Quarkus extension ecosystem consists of the Quarkus extensions developed and maintained by the community, including the Quarkus core development team. While the Quarkus ecosystem (sometimes also referred to as the \"Quarkus universe\") includes all the Quarkus extensions ever developed, there is also a concept of a Quarkus platform.\n+\n+== Quarkus Platform\n+\n+The fundamental promise of a Quarkus platform is any combination of the Quarkus extensions the platform consists of can be used in the same application without causing any conflict for each other.\n+Each organization creating their Quarkus platform may establish their own criterions for the extensions to be accepted into the platform and the means guarantee the compatibility between the accepted extensions.\n+\n+=== Quarkus Platform Artifacts\n+\n+Each Quarkus platform is defined with a few artifacts.\n+\n+=== Quarkus Platform BOM\n+\n+Each Quarkus Platform is expected to provide a Maven BOM artifact that\n+\n+* imports a chosen version of `io.quarkus:quarkus-bom` (the platform BOM maybe flattened at the end but it has to be based on some version of `io.quarkus:quarkus-bom`)\n+* includes all the Quarkus extension artifacts (the runtime and the deployment ones) the platform consists of\n+* includes all the necessary thirdparty artifacts that align the transitive dependency versions of the platform extensions to guarantee compatiblity between them\n+* includes the <<platform-descriptor,platform JSON descriptor>> artifact\n+* possibly includes the <<platform-properties,platform configuration properties>> artifacts\n+\n+Quarkus applications that want to include extensions from a Quarkus platform will be importing the Quarkus platform BOM.\n+\n+[[platform-descriptor]]\n+=== Quarkus Platform Descriptor\n+\n+Quarkus platform descriptor is a JSON artifact that provides information about the platform and its extensions to the Quarkus tools. E.g. http://code.quarkus.io and the Quarkus command line tools consult this descriptor to list, add and remove extensions to/from the project on user's request.\n+This artifact is also used as a Quarkus platform identifier. When Quarkus tools need to identify the Quarkus platform(s) used in the project, they will analyze the dependency version constraints of the project (the effective list of the managed dependencies from the `dependencyManagement` section in Maven terms) looking for the platform descriptor artifact(s) among them. Given that the platform descriptors are included into the Quarkus platform BOMs, every Quarkus application will inherit the platform descriptor artifact from the imported platform BOM(s) as a dependency version constraint (managed depenency in Maven terms).\n+\n+To be able to easily identify Quarkus platform descriptors among the project's dependency constraints, the platform descriptor Maven artifact coordinates should follow the folloing naming convention:\n+\n+* the `groupId` of the descriptor artifact should match the `groupId` of the corresponding Quarkus Platform BOM;\n+* the `artifactId` of the descriptor artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-descriptor` suffix;\n+* the `classifier` of the descriptor artifact should match the `version` of the corresponding Quarkus Platform BOM;\n+* the `type` of the descriptor artifact should be `json`;\n+* the `version` of the descriptor artifact should match the `version` of the  corresponding Quarkus Platform BOM.\n+\n+As a string it will look as `<platform-bom-groupId>:<platform-bom-artifactId>-quarkus-platform-descriptor:<platform-version>:json:<platform-version>`\n+\n+E.g. the coordinates of the descriptor for Quarkus BOM `io.quarkus:quarkus-bom::pom:1.2.3` will be `io.quarkus:quarkus-bom-quarkus-platform-descriptor:1.2.3:json:1.2.3`.\n+And for a custom Quarkus platform defined with BOM `org.acme:acme-bom::pom:555` it will be `org.acme:acme-bom-quarkus-platform-descriptor:555:json:555`.\n+\n+The classifier matching the version of the platform may look confusing at first. But this is what turns the descriptor into a true \"fingerprint\" of the platform. In both Maven and Gradle, the effective set of the dependency version constraints (or the managed dependencies) is obtained by merging all the imported BOMs and version constraints specified individually in the current project and also its parent(s). The artifact `classifier` is a part of the dependency ID, which could be expressed as `groupId:artifactId:classifier:type`. Which means that if a project is based on a couple of Quarkus platforms (by importing their BOMs), e.g. `io.quarkus:quarkus-universe-bom::pom:1.2.3` and `org.acme:acme-bom::pom:555`, and these two platforms are based on different `io.quarkus:quarkus-bom::pom` versions (which is technically a Quarkus platform in its turn as well), the Quarkus tools will be able to detect this fact and make the user aware of it, since it *might* not be a safe combination. If the descriptor artifact didn't include the classifer containing the version of the platform then the tools wouldn't be able to detect a potentially incompatible mix of different versions of the same platform in the same project.\n+\n+The platform descriptor will normally be generated using a Maven plugin, e.g.\n+\n+[source,xml]\n+----\n+<plugin>\n+  <groupId>io.quarkus</groupId>\n+  <artifactId>quarkus-platform-descriptor-json-plugin</artifactId>\n+  <version>${quarkus.version}</version> <1>\n+  <executions>\n+    <execution>\n+      <phase>process-resources</phase>\n+      <goals>\n+        <goal>generate-extensions-json</goal> <2>\n+      </goals>\n+    </execution>\n+  </executions>\n+  <configuration>\n+    <bomGroupId>${quarkus.platform.group-id}</bomGroupId> <3>\n+    <bomArtifactId>${quarkus.platform.artifact-id}</bomArtifactId> <4>\n+    <bomVersion>${quarkus.platform.version}</bomVersion> <5>\n+    <overridesFile>${overridesfile}</overridesFile> <6>\n+    <resolveDependencyManagement>true</resolveDependencyManagement> <7>\n+  </configuration>\n+</plugin>\n+----\n+\n+<1> the version of the `quarkus-platform-descriptor-json-plugin`\n+<2> `generate-extensions-json` is the goal generating the platform descriptor\n+<3> the `groupId` of the platform BOM\n+<4> the `artifactId` of the platform BOM\n+<5> the `version` of the platform BOM\n+<6> this parameter is optional, it allows to override some metadata from the Quarkus extension descriptors found in every runtime extension artifact from which the platform descriptor is generated\n+<7> this parameter is also optional and defaults to false. It has to be set to true in case the platform BOM *is not generated* and *is not flattened*. Which for example is the case for `io.quarkus:quarkus-bom`.\n+\n+[[platform-properties]]\n+=== Quarkus Platform Properties\n+\n+A Quarkus platform may provide its own default values for some of the configuration options.\n+\n+Quarkus is using https://github.com/eclipse/microprofile-config[Eclipse MicroProfile Config^] for wiring application configuration. A Quarkus platform may be used as another source of configuration in the hierarchy of the configuration sources dominated by the application's `application.properties`.\n+\n+To provide platform-specific defaults, the platform needs to include a dependency version constraint in its BOM for a properties artifact whose coordinates follow the following naming convention:\n+\n+* the `groupId` of the properties artifact should match the `groupId` of the corresponding Quarkus Platform BOM;\n+* the `artifactId` of the properties artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-properties` suffix;\n+* the `classifier` of the descriptor artifact should be left empty/null;\n+* the `type` of the descriptor artifact should be `properties`;\n+* the `version` of the descriptor artifact should match the `version` of the  corresponding Quarkus Platform BOM.\n+\n+The properties artifact itself is expected to be a traditional `properties` file that will be loaded into an instance of `java.util.Properties` class.\n+\n+IMPORTANT: At this point, platform properties are only allowed to provide the default values to a restricted set of properties. Property names in the platform properties file must be prefixed with the `platform.` suffix.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAyNjE2MQ=="}, "originalCommit": {"oid": "7536ef10f275a06afb8fadcc6ea26af1f94f8561"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzIzNzc2OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/platform.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMTo1OTowNFrOHu-3AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMTo1OTowNFrOHu-3AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAyNjQzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A platform properties file for the example above would contain (the actual value is provided as an example)\n          \n          \n            \n            A platform properties file for the example above would contain (the actual value is provided as an example):", "url": "https://github.com/quarkusio/quarkus/pull/13153#discussion_r519026433", "createdAt": "2020-11-06T21:59:04Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/platform.adoc", "diffHunk": "@@ -0,0 +1,149 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Platform\n+\n+include::./attributes.adoc[]\n+\n+The Quarkus extension ecosystem consists of the Quarkus extensions developed and maintained by the community, including the Quarkus core development team. While the Quarkus ecosystem (sometimes also referred to as the \"Quarkus universe\") includes all the Quarkus extensions ever developed, there is also a concept of a Quarkus platform.\n+\n+== Quarkus Platform\n+\n+The fundamental promise of a Quarkus platform is any combination of the Quarkus extensions the platform consists of can be used in the same application without causing any conflict for each other.\n+Each organization creating their Quarkus platform may establish their own criterions for the extensions to be accepted into the platform and the means guarantee the compatibility between the accepted extensions.\n+\n+=== Quarkus Platform Artifacts\n+\n+Each Quarkus platform is defined with a few artifacts.\n+\n+=== Quarkus Platform BOM\n+\n+Each Quarkus Platform is expected to provide a Maven BOM artifact that\n+\n+* imports a chosen version of `io.quarkus:quarkus-bom` (the platform BOM maybe flattened at the end but it has to be based on some version of `io.quarkus:quarkus-bom`)\n+* includes all the Quarkus extension artifacts (the runtime and the deployment ones) the platform consists of\n+* includes all the necessary thirdparty artifacts that align the transitive dependency versions of the platform extensions to guarantee compatiblity between them\n+* includes the <<platform-descriptor,platform JSON descriptor>> artifact\n+* possibly includes the <<platform-properties,platform configuration properties>> artifacts\n+\n+Quarkus applications that want to include extensions from a Quarkus platform will be importing the Quarkus platform BOM.\n+\n+[[platform-descriptor]]\n+=== Quarkus Platform Descriptor\n+\n+Quarkus platform descriptor is a JSON artifact that provides information about the platform and its extensions to the Quarkus tools. E.g. http://code.quarkus.io and the Quarkus command line tools consult this descriptor to list, add and remove extensions to/from the project on user's request.\n+This artifact is also used as a Quarkus platform identifier. When Quarkus tools need to identify the Quarkus platform(s) used in the project, they will analyze the dependency version constraints of the project (the effective list of the managed dependencies from the `dependencyManagement` section in Maven terms) looking for the platform descriptor artifact(s) among them. Given that the platform descriptors are included into the Quarkus platform BOMs, every Quarkus application will inherit the platform descriptor artifact from the imported platform BOM(s) as a dependency version constraint (managed depenency in Maven terms).\n+\n+To be able to easily identify Quarkus platform descriptors among the project's dependency constraints, the platform descriptor Maven artifact coordinates should follow the folloing naming convention:\n+\n+* the `groupId` of the descriptor artifact should match the `groupId` of the corresponding Quarkus Platform BOM;\n+* the `artifactId` of the descriptor artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-descriptor` suffix;\n+* the `classifier` of the descriptor artifact should match the `version` of the corresponding Quarkus Platform BOM;\n+* the `type` of the descriptor artifact should be `json`;\n+* the `version` of the descriptor artifact should match the `version` of the  corresponding Quarkus Platform BOM.\n+\n+As a string it will look as `<platform-bom-groupId>:<platform-bom-artifactId>-quarkus-platform-descriptor:<platform-version>:json:<platform-version>`\n+\n+E.g. the coordinates of the descriptor for Quarkus BOM `io.quarkus:quarkus-bom::pom:1.2.3` will be `io.quarkus:quarkus-bom-quarkus-platform-descriptor:1.2.3:json:1.2.3`.\n+And for a custom Quarkus platform defined with BOM `org.acme:acme-bom::pom:555` it will be `org.acme:acme-bom-quarkus-platform-descriptor:555:json:555`.\n+\n+The classifier matching the version of the platform may look confusing at first. But this is what turns the descriptor into a true \"fingerprint\" of the platform. In both Maven and Gradle, the effective set of the dependency version constraints (or the managed dependencies) is obtained by merging all the imported BOMs and version constraints specified individually in the current project and also its parent(s). The artifact `classifier` is a part of the dependency ID, which could be expressed as `groupId:artifactId:classifier:type`. Which means that if a project is based on a couple of Quarkus platforms (by importing their BOMs), e.g. `io.quarkus:quarkus-universe-bom::pom:1.2.3` and `org.acme:acme-bom::pom:555`, and these two platforms are based on different `io.quarkus:quarkus-bom::pom` versions (which is technically a Quarkus platform in its turn as well), the Quarkus tools will be able to detect this fact and make the user aware of it, since it *might* not be a safe combination. If the descriptor artifact didn't include the classifer containing the version of the platform then the tools wouldn't be able to detect a potentially incompatible mix of different versions of the same platform in the same project.\n+\n+The platform descriptor will normally be generated using a Maven plugin, e.g.\n+\n+[source,xml]\n+----\n+<plugin>\n+  <groupId>io.quarkus</groupId>\n+  <artifactId>quarkus-platform-descriptor-json-plugin</artifactId>\n+  <version>${quarkus.version}</version> <1>\n+  <executions>\n+    <execution>\n+      <phase>process-resources</phase>\n+      <goals>\n+        <goal>generate-extensions-json</goal> <2>\n+      </goals>\n+    </execution>\n+  </executions>\n+  <configuration>\n+    <bomGroupId>${quarkus.platform.group-id}</bomGroupId> <3>\n+    <bomArtifactId>${quarkus.platform.artifact-id}</bomArtifactId> <4>\n+    <bomVersion>${quarkus.platform.version}</bomVersion> <5>\n+    <overridesFile>${overridesfile}</overridesFile> <6>\n+    <resolveDependencyManagement>true</resolveDependencyManagement> <7>\n+  </configuration>\n+</plugin>\n+----\n+\n+<1> the version of the `quarkus-platform-descriptor-json-plugin`\n+<2> `generate-extensions-json` is the goal generating the platform descriptor\n+<3> the `groupId` of the platform BOM\n+<4> the `artifactId` of the platform BOM\n+<5> the `version` of the platform BOM\n+<6> this parameter is optional, it allows to override some metadata from the Quarkus extension descriptors found in every runtime extension artifact from which the platform descriptor is generated\n+<7> this parameter is also optional and defaults to false. It has to be set to true in case the platform BOM *is not generated* and *is not flattened*. Which for example is the case for `io.quarkus:quarkus-bom`.\n+\n+[[platform-properties]]\n+=== Quarkus Platform Properties\n+\n+A Quarkus platform may provide its own default values for some of the configuration options.\n+\n+Quarkus is using https://github.com/eclipse/microprofile-config[Eclipse MicroProfile Config^] for wiring application configuration. A Quarkus platform may be used as another source of configuration in the hierarchy of the configuration sources dominated by the application's `application.properties`.\n+\n+To provide platform-specific defaults, the platform needs to include a dependency version constraint in its BOM for a properties artifact whose coordinates follow the following naming convention:\n+\n+* the `groupId` of the properties artifact should match the `groupId` of the corresponding Quarkus Platform BOM;\n+* the `artifactId` of the properties artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-properties` suffix;\n+* the `classifier` of the descriptor artifact should be left empty/null;\n+* the `type` of the descriptor artifact should be `properties`;\n+* the `version` of the descriptor artifact should match the `version` of the  corresponding Quarkus Platform BOM.\n+\n+The properties artifact itself is expected to be a traditional `properties` file that will be loaded into an instance of `java.util.Properties` class.\n+\n+IMPORTANT: At this point, platform properties are only allowed to provide the default values to a restricted set of properties. Property names in the platform properties file must be prefixed with the `platform.` suffix.\n+\n+Extension developers that want to make their configuration options platform-specific should set their default values to properties that start with the `platform.` suffix. Here is an example:\n+\n+[source,java]\n+----\n+package io.quarkus.deployment.pkg;\n+\n+@ConfigRoot(phase = ConfigPhase.BUILD_TIME)\n+public class NativeConfig {\n+\n+    /**\n+     * The docker image to use to do the image build\n+     */\n+    @ConfigItem(defaultValue = \"${platform.quarkus.native.builder-image}\")\n+    public String builderImage;\n+}\n+----\n+\n+In this case the default value for `quarkus.native.builder-image` will be provided by the platform. The user will still be able to set the desired value for `quarkus.native.builder-image` in its `application.properties`, of course. But in case it's not customized by the user, the default value will be coming from the platform properties.\n+A platform properties file for the example above would contain (the actual value is provided as an example)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7536ef10f275a06afb8fadcc6ea26af1f94f8561"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzIzODM4OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/platform.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMTo1OToxOVrOHu-3YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMTo1OToxOVrOHu-3YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAyNjUyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            There is also a Maven plugin goal that validates the platform properties content and its artifact coordinates and also checks whether the platform properties artifact is present in the platform's BOM. Here is a sample plugin configuration\n          \n          \n            \n            There is also a Maven plugin goal that validates the platform properties content and its artifact coordinates and also checks whether the platform properties artifact is present in the platform's BOM. Here is a sample plugin configuration:", "url": "https://github.com/quarkusio/quarkus/pull/13153#discussion_r519026528", "createdAt": "2020-11-06T21:59:19Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/platform.adoc", "diffHunk": "@@ -0,0 +1,149 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Platform\n+\n+include::./attributes.adoc[]\n+\n+The Quarkus extension ecosystem consists of the Quarkus extensions developed and maintained by the community, including the Quarkus core development team. While the Quarkus ecosystem (sometimes also referred to as the \"Quarkus universe\") includes all the Quarkus extensions ever developed, there is also a concept of a Quarkus platform.\n+\n+== Quarkus Platform\n+\n+The fundamental promise of a Quarkus platform is any combination of the Quarkus extensions the platform consists of can be used in the same application without causing any conflict for each other.\n+Each organization creating their Quarkus platform may establish their own criterions for the extensions to be accepted into the platform and the means guarantee the compatibility between the accepted extensions.\n+\n+=== Quarkus Platform Artifacts\n+\n+Each Quarkus platform is defined with a few artifacts.\n+\n+=== Quarkus Platform BOM\n+\n+Each Quarkus Platform is expected to provide a Maven BOM artifact that\n+\n+* imports a chosen version of `io.quarkus:quarkus-bom` (the platform BOM maybe flattened at the end but it has to be based on some version of `io.quarkus:quarkus-bom`)\n+* includes all the Quarkus extension artifacts (the runtime and the deployment ones) the platform consists of\n+* includes all the necessary thirdparty artifacts that align the transitive dependency versions of the platform extensions to guarantee compatiblity between them\n+* includes the <<platform-descriptor,platform JSON descriptor>> artifact\n+* possibly includes the <<platform-properties,platform configuration properties>> artifacts\n+\n+Quarkus applications that want to include extensions from a Quarkus platform will be importing the Quarkus platform BOM.\n+\n+[[platform-descriptor]]\n+=== Quarkus Platform Descriptor\n+\n+Quarkus platform descriptor is a JSON artifact that provides information about the platform and its extensions to the Quarkus tools. E.g. http://code.quarkus.io and the Quarkus command line tools consult this descriptor to list, add and remove extensions to/from the project on user's request.\n+This artifact is also used as a Quarkus platform identifier. When Quarkus tools need to identify the Quarkus platform(s) used in the project, they will analyze the dependency version constraints of the project (the effective list of the managed dependencies from the `dependencyManagement` section in Maven terms) looking for the platform descriptor artifact(s) among them. Given that the platform descriptors are included into the Quarkus platform BOMs, every Quarkus application will inherit the platform descriptor artifact from the imported platform BOM(s) as a dependency version constraint (managed depenency in Maven terms).\n+\n+To be able to easily identify Quarkus platform descriptors among the project's dependency constraints, the platform descriptor Maven artifact coordinates should follow the folloing naming convention:\n+\n+* the `groupId` of the descriptor artifact should match the `groupId` of the corresponding Quarkus Platform BOM;\n+* the `artifactId` of the descriptor artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-descriptor` suffix;\n+* the `classifier` of the descriptor artifact should match the `version` of the corresponding Quarkus Platform BOM;\n+* the `type` of the descriptor artifact should be `json`;\n+* the `version` of the descriptor artifact should match the `version` of the  corresponding Quarkus Platform BOM.\n+\n+As a string it will look as `<platform-bom-groupId>:<platform-bom-artifactId>-quarkus-platform-descriptor:<platform-version>:json:<platform-version>`\n+\n+E.g. the coordinates of the descriptor for Quarkus BOM `io.quarkus:quarkus-bom::pom:1.2.3` will be `io.quarkus:quarkus-bom-quarkus-platform-descriptor:1.2.3:json:1.2.3`.\n+And for a custom Quarkus platform defined with BOM `org.acme:acme-bom::pom:555` it will be `org.acme:acme-bom-quarkus-platform-descriptor:555:json:555`.\n+\n+The classifier matching the version of the platform may look confusing at first. But this is what turns the descriptor into a true \"fingerprint\" of the platform. In both Maven and Gradle, the effective set of the dependency version constraints (or the managed dependencies) is obtained by merging all the imported BOMs and version constraints specified individually in the current project and also its parent(s). The artifact `classifier` is a part of the dependency ID, which could be expressed as `groupId:artifactId:classifier:type`. Which means that if a project is based on a couple of Quarkus platforms (by importing their BOMs), e.g. `io.quarkus:quarkus-universe-bom::pom:1.2.3` and `org.acme:acme-bom::pom:555`, and these two platforms are based on different `io.quarkus:quarkus-bom::pom` versions (which is technically a Quarkus platform in its turn as well), the Quarkus tools will be able to detect this fact and make the user aware of it, since it *might* not be a safe combination. If the descriptor artifact didn't include the classifer containing the version of the platform then the tools wouldn't be able to detect a potentially incompatible mix of different versions of the same platform in the same project.\n+\n+The platform descriptor will normally be generated using a Maven plugin, e.g.\n+\n+[source,xml]\n+----\n+<plugin>\n+  <groupId>io.quarkus</groupId>\n+  <artifactId>quarkus-platform-descriptor-json-plugin</artifactId>\n+  <version>${quarkus.version}</version> <1>\n+  <executions>\n+    <execution>\n+      <phase>process-resources</phase>\n+      <goals>\n+        <goal>generate-extensions-json</goal> <2>\n+      </goals>\n+    </execution>\n+  </executions>\n+  <configuration>\n+    <bomGroupId>${quarkus.platform.group-id}</bomGroupId> <3>\n+    <bomArtifactId>${quarkus.platform.artifact-id}</bomArtifactId> <4>\n+    <bomVersion>${quarkus.platform.version}</bomVersion> <5>\n+    <overridesFile>${overridesfile}</overridesFile> <6>\n+    <resolveDependencyManagement>true</resolveDependencyManagement> <7>\n+  </configuration>\n+</plugin>\n+----\n+\n+<1> the version of the `quarkus-platform-descriptor-json-plugin`\n+<2> `generate-extensions-json` is the goal generating the platform descriptor\n+<3> the `groupId` of the platform BOM\n+<4> the `artifactId` of the platform BOM\n+<5> the `version` of the platform BOM\n+<6> this parameter is optional, it allows to override some metadata from the Quarkus extension descriptors found in every runtime extension artifact from which the platform descriptor is generated\n+<7> this parameter is also optional and defaults to false. It has to be set to true in case the platform BOM *is not generated* and *is not flattened*. Which for example is the case for `io.quarkus:quarkus-bom`.\n+\n+[[platform-properties]]\n+=== Quarkus Platform Properties\n+\n+A Quarkus platform may provide its own default values for some of the configuration options.\n+\n+Quarkus is using https://github.com/eclipse/microprofile-config[Eclipse MicroProfile Config^] for wiring application configuration. A Quarkus platform may be used as another source of configuration in the hierarchy of the configuration sources dominated by the application's `application.properties`.\n+\n+To provide platform-specific defaults, the platform needs to include a dependency version constraint in its BOM for a properties artifact whose coordinates follow the following naming convention:\n+\n+* the `groupId` of the properties artifact should match the `groupId` of the corresponding Quarkus Platform BOM;\n+* the `artifactId` of the properties artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-properties` suffix;\n+* the `classifier` of the descriptor artifact should be left empty/null;\n+* the `type` of the descriptor artifact should be `properties`;\n+* the `version` of the descriptor artifact should match the `version` of the  corresponding Quarkus Platform BOM.\n+\n+The properties artifact itself is expected to be a traditional `properties` file that will be loaded into an instance of `java.util.Properties` class.\n+\n+IMPORTANT: At this point, platform properties are only allowed to provide the default values to a restricted set of properties. Property names in the platform properties file must be prefixed with the `platform.` suffix.\n+\n+Extension developers that want to make their configuration options platform-specific should set their default values to properties that start with the `platform.` suffix. Here is an example:\n+\n+[source,java]\n+----\n+package io.quarkus.deployment.pkg;\n+\n+@ConfigRoot(phase = ConfigPhase.BUILD_TIME)\n+public class NativeConfig {\n+\n+    /**\n+     * The docker image to use to do the image build\n+     */\n+    @ConfigItem(defaultValue = \"${platform.quarkus.native.builder-image}\")\n+    public String builderImage;\n+}\n+----\n+\n+In this case the default value for `quarkus.native.builder-image` will be provided by the platform. The user will still be able to set the desired value for `quarkus.native.builder-image` in its `application.properties`, of course. But in case it's not customized by the user, the default value will be coming from the platform properties.\n+A platform properties file for the example above would contain (the actual value is provided as an example)\n+\n+[source,text]\n+----\n+platform.quarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-native-image:20.2.0-java11\n+----\n+\n+There is also a Maven plugin goal that validates the platform properties content and its artifact coordinates and also checks whether the platform properties artifact is present in the platform's BOM. Here is a sample plugin configuration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7536ef10f275a06afb8fadcc6ea26af1f94f8561"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MjE0MzIzOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/platform.adoc", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwODo0NTozMlrOHxwPLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNToyNjoxOFrOHyyvMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkzMjU4OQ==", "bodyText": "Looking at platform-properties.properties provided by Quarkus I get the impression that it is also possible to have the values refer to a Maven property by the same (or a different) name. If that is how it works, should then this also be described in here?", "url": "https://github.com/quarkusio/quarkus/pull/13153#discussion_r521932589", "createdAt": "2020-11-12T08:45:32Z", "author": {"login": "knutwannheden"}, "path": "docs/src/main/asciidoc/platform.adoc", "diffHunk": "@@ -0,0 +1,149 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Platform\n+\n+include::./attributes.adoc[]\n+\n+The Quarkus extension ecosystem consists of the Quarkus extensions developed and maintained by the community, including the Quarkus core development team. While the Quarkus ecosystem (sometimes also referred to as the \"Quarkus universe\") includes all the Quarkus extensions ever developed, there is also a concept of a Quarkus platform.\n+\n+== Quarkus Platform\n+\n+The fundamental promise of a Quarkus platform is any combination of the Quarkus extensions the platform consists of can be used in the same application without causing any conflict for each other.\n+Each organization creating their Quarkus platform may establish their own criterions for the extensions to be accepted into the platform and the means to guarantee the compatibility between the accepted extensions.\n+\n+=== Quarkus Platform Artifacts\n+\n+Each Quarkus platform is defined with a few artifacts.\n+\n+=== Quarkus Platform BOM\n+\n+Each Quarkus Platform is expected to provide a Maven BOM artifact that\n+\n+* imports a chosen version of `io.quarkus:quarkus-bom` (the platform BOM may be flattened at the end but it has to be based on some version of `io.quarkus:quarkus-bom`)\n+* includes all the Quarkus extension artifacts (the runtime and the deployment ones) the platform consists of\n+* includes all the necessary third-party artifacts that align the transitive dependency versions of the platform extensions to guarantee compatibility between them\n+* includes the <<platform-descriptor,platform JSON descriptor>> artifact\n+* possibly includes the <<platform-properties,platform configuration properties>> artifacts\n+\n+Quarkus applications that want to include extensions from a Quarkus platform will be importing the Quarkus platform BOM.\n+\n+[[platform-descriptor]]\n+=== Quarkus Platform Descriptor\n+\n+Quarkus platform descriptor is a JSON artifact that provides information about the platform and its extensions to the Quarkus tools. E.g. http://code.quarkus.io and the Quarkus command line tools consult this descriptor to list, add and remove extensions to/from the project on user's request.\n+This artifact is also used as a Quarkus platform identifier. When Quarkus tools need to identify the Quarkus platform(s) used in the project, they will analyze the dependency version constraints of the project (the effective list of the managed dependencies from the `dependencyManagement` section in Maven terms) looking for the platform descriptor artifact(s) among them. Given that the platform descriptors are included into the Quarkus platform BOMs, every Quarkus application will inherit the platform descriptor artifact from the imported platform BOM(s) as a dependency version constraint (managed dependency in Maven terms).\n+\n+To be able to easily identify Quarkus platform descriptors among the project's dependency constraints, the platform descriptor Maven artifact coordinates should follow the following naming convention:\n+\n+* the `groupId` of the descriptor artifact should match the `groupId` of the corresponding Quarkus Platform BOM;\n+* the `artifactId` of the descriptor artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-descriptor` suffix;\n+* the `classifier` of the descriptor artifact should match the `version` of the corresponding Quarkus Platform BOM;\n+* the `type` of the descriptor artifact should be `json`;\n+* the `version` of the descriptor artifact should match the `version` of the  corresponding Quarkus Platform BOM.\n+\n+As a string it will look like `<platform-bom-groupId>:<platform-bom-artifactId>-quarkus-platform-descriptor:<platform-version>:json:<platform-version>`\n+\n+E.g. the coordinates of the descriptor for Quarkus BOM `io.quarkus:quarkus-bom::pom:1.2.3` will be `io.quarkus:quarkus-bom-quarkus-platform-descriptor:1.2.3:json:1.2.3`.\n+And for a custom Quarkus platform defined with BOM `org.acme:acme-bom::pom:555` it will be `org.acme:acme-bom-quarkus-platform-descriptor:555:json:555`.\n+\n+The classifier matching the version of the platform may look confusing at first. But this is what turns the descriptor into a true \"fingerprint\" of the platform. In both Maven and Gradle, the effective set of the dependency version constraints (or the managed dependencies) is obtained by merging all the imported BOMs and version constraints specified individually in the current project and also its parent(s). The artifact `classifier` is a part of the dependency ID, which could be expressed as `groupId:artifactId:classifier:type`. Which means that if a project is based on a couple of Quarkus platforms (by importing their BOMs), e.g. `io.quarkus:quarkus-universe-bom::pom:1.2.3` and `org.acme:acme-bom::pom:555`, and these two platforms are based on different `io.quarkus:quarkus-bom::pom` versions (which is technically a Quarkus platform in its turn as well), the Quarkus tools will be able to detect this fact and make the user aware of it, since it *might* not be a safe combination. If the descriptor artifact didn't include the classifer containing the version of the platform then the tools wouldn't be able to detect a potentially incompatible mix of different versions of the same platform in the same project.\n+\n+The platform descriptor will normally be generated using a Maven plugin, e.g.\n+\n+[source,xml]\n+----\n+<plugin>\n+  <groupId>io.quarkus</groupId>\n+  <artifactId>quarkus-platform-descriptor-json-plugin</artifactId>\n+  <version>${quarkus.version}</version> <1>\n+  <executions>\n+    <execution>\n+      <phase>process-resources</phase>\n+      <goals>\n+        <goal>generate-extensions-json</goal> <2>\n+      </goals>\n+    </execution>\n+  </executions>\n+  <configuration>\n+    <bomGroupId>${quarkus.platform.group-id}</bomGroupId> <3>\n+    <bomArtifactId>${quarkus.platform.artifact-id}</bomArtifactId> <4>\n+    <bomVersion>${quarkus.platform.version}</bomVersion> <5>\n+    <overridesFile>${overridesfile}</overridesFile> <6>\n+    <resolveDependencyManagement>true</resolveDependencyManagement> <7>\n+  </configuration>\n+</plugin>\n+----\n+\n+<1> the version of the `quarkus-platform-descriptor-json-plugin`\n+<2> `generate-extensions-json` is the goal generating the platform descriptor\n+<3> the `groupId` of the platform BOM\n+<4> the `artifactId` of the platform BOM\n+<5> the `version` of the platform BOM\n+<6> this parameter is optional, it allows to override some metadata from the Quarkus extension descriptors found in every runtime extension artifact from which the platform descriptor is generated\n+<7> this parameter is also optional and defaults to false. It has to be set to true in case the platform BOM *is not generated* and *is not flattened*. Which for example is the case for `io.quarkus:quarkus-bom`.\n+\n+[[platform-properties]]\n+=== Quarkus Platform Properties\n+\n+A Quarkus platform may provide its own default values for some of the configuration options.\n+\n+Quarkus is using https://github.com/eclipse/microprofile-config[Eclipse MicroProfile Config] for wiring application configuration. A Quarkus platform may be used as another source of configuration in the hierarchy of the configuration sources dominated by the application's `application.properties`.\n+\n+To provide platform-specific defaults, the platform needs to include a dependency version constraint in its BOM for a properties artifact whose coordinates follow the following naming convention:\n+\n+* the `groupId` of the properties artifact should match the `groupId` of the corresponding Quarkus Platform BOM;\n+* the `artifactId` of the properties artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-properties` suffix;\n+* the `classifier` of the descriptor artifact should be left empty/null;\n+* the `type` of the descriptor artifact should be `properties`;\n+* the `version` of the descriptor artifact should match the `version` of the  corresponding Quarkus Platform BOM.\n+\n+The properties artifact itself is expected to be a traditional `properties` file that will be loaded into an instance of `java.util.Properties` class.\n+\n+IMPORTANT: At this point, platform properties are only allowed to provide the default values for a restricted set of configuration options. The property names in the platform properties file must be prefixed with the `platform.` suffix.\n+\n+Extension developers that want to make their configuration options platform-specific should set their default values to properties that start with the `platform.` suffix. Here is an example:\n+\n+[source,java]\n+----\n+package io.quarkus.deployment.pkg;\n+\n+@ConfigRoot(phase = ConfigPhase.BUILD_TIME)\n+public class NativeConfig {\n+\n+    /**\n+     * The docker image to use to do the image build\n+     */\n+    @ConfigItem(defaultValue = \"${platform.quarkus.native.builder-image}\")\n+    public String builderImage;\n+}\n+----\n+\n+In this case the default value for `quarkus.native.builder-image` will be provided by the platform. The user will still be able to set the desired value for `quarkus.native.builder-image` in its `application.properties`, of course. But in case it's not customized by the user, the default value will be coming from the platform properties.\n+A platform properties file for the example above would contain (the actual value is provided as an example):\n+\n+[source,text]\n+----\n+platform.quarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-native-image:20.2.0-java11", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da6e537666a2d778387b5a355404e6db2ab5e1c4"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk3NDk3Mw==", "bodyText": "Do you mean platform.quarkus.xxx properties? If so, I would not recommend users to set platform.quarkus.xxx properties. It will end up being confusing. quarkus.xxx properties are the proper way to customize the config.\nPerhaps, there is a use-case I didn't think of. In which case, please, clarify why you would prefer customizing the default config not using the quarkus.xxx properties.\nplatform.quarkus.xxx and quarkus.xxx properties are on different levels in the ConfigSource hierarchy.\nE.g. if you add a quarkus.xxx property to the application.properties, it can still be overridden on the command line with -Dquarkus.xxx for example. But -Dplatform.quarkus.xxx won't override it.\nHowever, if instead of quarkus.xxx property you add platform.quarkus.xxx to the application.properties then you would be able to override it on the command line with both -Dquarkus.xxx and -Dplatform.quarkus.xxx.\nPerhaps we should look into restricting the platform.quarkus.xxx properties further. I would not like users to set them directly. This was not intended to be supported.", "url": "https://github.com/quarkusio/quarkus/pull/13153#discussion_r521974973", "createdAt": "2020-11-12T09:50:56Z", "author": {"login": "aloubyansky"}, "path": "docs/src/main/asciidoc/platform.adoc", "diffHunk": "@@ -0,0 +1,149 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Platform\n+\n+include::./attributes.adoc[]\n+\n+The Quarkus extension ecosystem consists of the Quarkus extensions developed and maintained by the community, including the Quarkus core development team. While the Quarkus ecosystem (sometimes also referred to as the \"Quarkus universe\") includes all the Quarkus extensions ever developed, there is also a concept of a Quarkus platform.\n+\n+== Quarkus Platform\n+\n+The fundamental promise of a Quarkus platform is any combination of the Quarkus extensions the platform consists of can be used in the same application without causing any conflict for each other.\n+Each organization creating their Quarkus platform may establish their own criterions for the extensions to be accepted into the platform and the means to guarantee the compatibility between the accepted extensions.\n+\n+=== Quarkus Platform Artifacts\n+\n+Each Quarkus platform is defined with a few artifacts.\n+\n+=== Quarkus Platform BOM\n+\n+Each Quarkus Platform is expected to provide a Maven BOM artifact that\n+\n+* imports a chosen version of `io.quarkus:quarkus-bom` (the platform BOM may be flattened at the end but it has to be based on some version of `io.quarkus:quarkus-bom`)\n+* includes all the Quarkus extension artifacts (the runtime and the deployment ones) the platform consists of\n+* includes all the necessary third-party artifacts that align the transitive dependency versions of the platform extensions to guarantee compatibility between them\n+* includes the <<platform-descriptor,platform JSON descriptor>> artifact\n+* possibly includes the <<platform-properties,platform configuration properties>> artifacts\n+\n+Quarkus applications that want to include extensions from a Quarkus platform will be importing the Quarkus platform BOM.\n+\n+[[platform-descriptor]]\n+=== Quarkus Platform Descriptor\n+\n+Quarkus platform descriptor is a JSON artifact that provides information about the platform and its extensions to the Quarkus tools. E.g. http://code.quarkus.io and the Quarkus command line tools consult this descriptor to list, add and remove extensions to/from the project on user's request.\n+This artifact is also used as a Quarkus platform identifier. When Quarkus tools need to identify the Quarkus platform(s) used in the project, they will analyze the dependency version constraints of the project (the effective list of the managed dependencies from the `dependencyManagement` section in Maven terms) looking for the platform descriptor artifact(s) among them. Given that the platform descriptors are included into the Quarkus platform BOMs, every Quarkus application will inherit the platform descriptor artifact from the imported platform BOM(s) as a dependency version constraint (managed dependency in Maven terms).\n+\n+To be able to easily identify Quarkus platform descriptors among the project's dependency constraints, the platform descriptor Maven artifact coordinates should follow the following naming convention:\n+\n+* the `groupId` of the descriptor artifact should match the `groupId` of the corresponding Quarkus Platform BOM;\n+* the `artifactId` of the descriptor artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-descriptor` suffix;\n+* the `classifier` of the descriptor artifact should match the `version` of the corresponding Quarkus Platform BOM;\n+* the `type` of the descriptor artifact should be `json`;\n+* the `version` of the descriptor artifact should match the `version` of the  corresponding Quarkus Platform BOM.\n+\n+As a string it will look like `<platform-bom-groupId>:<platform-bom-artifactId>-quarkus-platform-descriptor:<platform-version>:json:<platform-version>`\n+\n+E.g. the coordinates of the descriptor for Quarkus BOM `io.quarkus:quarkus-bom::pom:1.2.3` will be `io.quarkus:quarkus-bom-quarkus-platform-descriptor:1.2.3:json:1.2.3`.\n+And for a custom Quarkus platform defined with BOM `org.acme:acme-bom::pom:555` it will be `org.acme:acme-bom-quarkus-platform-descriptor:555:json:555`.\n+\n+The classifier matching the version of the platform may look confusing at first. But this is what turns the descriptor into a true \"fingerprint\" of the platform. In both Maven and Gradle, the effective set of the dependency version constraints (or the managed dependencies) is obtained by merging all the imported BOMs and version constraints specified individually in the current project and also its parent(s). The artifact `classifier` is a part of the dependency ID, which could be expressed as `groupId:artifactId:classifier:type`. Which means that if a project is based on a couple of Quarkus platforms (by importing their BOMs), e.g. `io.quarkus:quarkus-universe-bom::pom:1.2.3` and `org.acme:acme-bom::pom:555`, and these two platforms are based on different `io.quarkus:quarkus-bom::pom` versions (which is technically a Quarkus platform in its turn as well), the Quarkus tools will be able to detect this fact and make the user aware of it, since it *might* not be a safe combination. If the descriptor artifact didn't include the classifer containing the version of the platform then the tools wouldn't be able to detect a potentially incompatible mix of different versions of the same platform in the same project.\n+\n+The platform descriptor will normally be generated using a Maven plugin, e.g.\n+\n+[source,xml]\n+----\n+<plugin>\n+  <groupId>io.quarkus</groupId>\n+  <artifactId>quarkus-platform-descriptor-json-plugin</artifactId>\n+  <version>${quarkus.version}</version> <1>\n+  <executions>\n+    <execution>\n+      <phase>process-resources</phase>\n+      <goals>\n+        <goal>generate-extensions-json</goal> <2>\n+      </goals>\n+    </execution>\n+  </executions>\n+  <configuration>\n+    <bomGroupId>${quarkus.platform.group-id}</bomGroupId> <3>\n+    <bomArtifactId>${quarkus.platform.artifact-id}</bomArtifactId> <4>\n+    <bomVersion>${quarkus.platform.version}</bomVersion> <5>\n+    <overridesFile>${overridesfile}</overridesFile> <6>\n+    <resolveDependencyManagement>true</resolveDependencyManagement> <7>\n+  </configuration>\n+</plugin>\n+----\n+\n+<1> the version of the `quarkus-platform-descriptor-json-plugin`\n+<2> `generate-extensions-json` is the goal generating the platform descriptor\n+<3> the `groupId` of the platform BOM\n+<4> the `artifactId` of the platform BOM\n+<5> the `version` of the platform BOM\n+<6> this parameter is optional, it allows to override some metadata from the Quarkus extension descriptors found in every runtime extension artifact from which the platform descriptor is generated\n+<7> this parameter is also optional and defaults to false. It has to be set to true in case the platform BOM *is not generated* and *is not flattened*. Which for example is the case for `io.quarkus:quarkus-bom`.\n+\n+[[platform-properties]]\n+=== Quarkus Platform Properties\n+\n+A Quarkus platform may provide its own default values for some of the configuration options.\n+\n+Quarkus is using https://github.com/eclipse/microprofile-config[Eclipse MicroProfile Config] for wiring application configuration. A Quarkus platform may be used as another source of configuration in the hierarchy of the configuration sources dominated by the application's `application.properties`.\n+\n+To provide platform-specific defaults, the platform needs to include a dependency version constraint in its BOM for a properties artifact whose coordinates follow the following naming convention:\n+\n+* the `groupId` of the properties artifact should match the `groupId` of the corresponding Quarkus Platform BOM;\n+* the `artifactId` of the properties artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-properties` suffix;\n+* the `classifier` of the descriptor artifact should be left empty/null;\n+* the `type` of the descriptor artifact should be `properties`;\n+* the `version` of the descriptor artifact should match the `version` of the  corresponding Quarkus Platform BOM.\n+\n+The properties artifact itself is expected to be a traditional `properties` file that will be loaded into an instance of `java.util.Properties` class.\n+\n+IMPORTANT: At this point, platform properties are only allowed to provide the default values for a restricted set of configuration options. The property names in the platform properties file must be prefixed with the `platform.` suffix.\n+\n+Extension developers that want to make their configuration options platform-specific should set their default values to properties that start with the `platform.` suffix. Here is an example:\n+\n+[source,java]\n+----\n+package io.quarkus.deployment.pkg;\n+\n+@ConfigRoot(phase = ConfigPhase.BUILD_TIME)\n+public class NativeConfig {\n+\n+    /**\n+     * The docker image to use to do the image build\n+     */\n+    @ConfigItem(defaultValue = \"${platform.quarkus.native.builder-image}\")\n+    public String builderImage;\n+}\n+----\n+\n+In this case the default value for `quarkus.native.builder-image` will be provided by the platform. The user will still be able to set the desired value for `quarkus.native.builder-image` in its `application.properties`, of course. But in case it's not customized by the user, the default value will be coming from the platform properties.\n+A platform properties file for the example above would contain (the actual value is provided as an example):\n+\n+[source,text]\n+----\n+platform.quarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-native-image:20.2.0-java11", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkzMjU4OQ=="}, "originalCommit": {"oid": "da6e537666a2d778387b5a355404e6db2ab5e1c4"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk4MDg4Nw==", "bodyText": "In our project we intend to build a Quarkus platform directly building upon what you are describing here, so I am trying to better understand how this works by looking at the implementation.\nIn the file I refer to you have platform.quarkus.native.builder-image=${platform.quarkus.native.builder-image} which confuses me a bit, as it looks like a recursive definition. The only other place I found this property being referenced was in build-parent/pom.xml:\n<platform.quarkus.native.builder-image>quay.io/quarkus/ubi-quarkus-native-image:20.2.0-java11</platform.quarkus.native.builder-image>\nI should probably look a biut further into the code, but in this documentation I couldn't find this mechanism described.", "url": "https://github.com/quarkusio/quarkus/pull/13153#discussion_r521980887", "createdAt": "2020-11-12T09:59:29Z", "author": {"login": "knutwannheden"}, "path": "docs/src/main/asciidoc/platform.adoc", "diffHunk": "@@ -0,0 +1,149 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Platform\n+\n+include::./attributes.adoc[]\n+\n+The Quarkus extension ecosystem consists of the Quarkus extensions developed and maintained by the community, including the Quarkus core development team. While the Quarkus ecosystem (sometimes also referred to as the \"Quarkus universe\") includes all the Quarkus extensions ever developed, there is also a concept of a Quarkus platform.\n+\n+== Quarkus Platform\n+\n+The fundamental promise of a Quarkus platform is any combination of the Quarkus extensions the platform consists of can be used in the same application without causing any conflict for each other.\n+Each organization creating their Quarkus platform may establish their own criterions for the extensions to be accepted into the platform and the means to guarantee the compatibility between the accepted extensions.\n+\n+=== Quarkus Platform Artifacts\n+\n+Each Quarkus platform is defined with a few artifacts.\n+\n+=== Quarkus Platform BOM\n+\n+Each Quarkus Platform is expected to provide a Maven BOM artifact that\n+\n+* imports a chosen version of `io.quarkus:quarkus-bom` (the platform BOM may be flattened at the end but it has to be based on some version of `io.quarkus:quarkus-bom`)\n+* includes all the Quarkus extension artifacts (the runtime and the deployment ones) the platform consists of\n+* includes all the necessary third-party artifacts that align the transitive dependency versions of the platform extensions to guarantee compatibility between them\n+* includes the <<platform-descriptor,platform JSON descriptor>> artifact\n+* possibly includes the <<platform-properties,platform configuration properties>> artifacts\n+\n+Quarkus applications that want to include extensions from a Quarkus platform will be importing the Quarkus platform BOM.\n+\n+[[platform-descriptor]]\n+=== Quarkus Platform Descriptor\n+\n+Quarkus platform descriptor is a JSON artifact that provides information about the platform and its extensions to the Quarkus tools. E.g. http://code.quarkus.io and the Quarkus command line tools consult this descriptor to list, add and remove extensions to/from the project on user's request.\n+This artifact is also used as a Quarkus platform identifier. When Quarkus tools need to identify the Quarkus platform(s) used in the project, they will analyze the dependency version constraints of the project (the effective list of the managed dependencies from the `dependencyManagement` section in Maven terms) looking for the platform descriptor artifact(s) among them. Given that the platform descriptors are included into the Quarkus platform BOMs, every Quarkus application will inherit the platform descriptor artifact from the imported platform BOM(s) as a dependency version constraint (managed dependency in Maven terms).\n+\n+To be able to easily identify Quarkus platform descriptors among the project's dependency constraints, the platform descriptor Maven artifact coordinates should follow the following naming convention:\n+\n+* the `groupId` of the descriptor artifact should match the `groupId` of the corresponding Quarkus Platform BOM;\n+* the `artifactId` of the descriptor artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-descriptor` suffix;\n+* the `classifier` of the descriptor artifact should match the `version` of the corresponding Quarkus Platform BOM;\n+* the `type` of the descriptor artifact should be `json`;\n+* the `version` of the descriptor artifact should match the `version` of the  corresponding Quarkus Platform BOM.\n+\n+As a string it will look like `<platform-bom-groupId>:<platform-bom-artifactId>-quarkus-platform-descriptor:<platform-version>:json:<platform-version>`\n+\n+E.g. the coordinates of the descriptor for Quarkus BOM `io.quarkus:quarkus-bom::pom:1.2.3` will be `io.quarkus:quarkus-bom-quarkus-platform-descriptor:1.2.3:json:1.2.3`.\n+And for a custom Quarkus platform defined with BOM `org.acme:acme-bom::pom:555` it will be `org.acme:acme-bom-quarkus-platform-descriptor:555:json:555`.\n+\n+The classifier matching the version of the platform may look confusing at first. But this is what turns the descriptor into a true \"fingerprint\" of the platform. In both Maven and Gradle, the effective set of the dependency version constraints (or the managed dependencies) is obtained by merging all the imported BOMs and version constraints specified individually in the current project and also its parent(s). The artifact `classifier` is a part of the dependency ID, which could be expressed as `groupId:artifactId:classifier:type`. Which means that if a project is based on a couple of Quarkus platforms (by importing their BOMs), e.g. `io.quarkus:quarkus-universe-bom::pom:1.2.3` and `org.acme:acme-bom::pom:555`, and these two platforms are based on different `io.quarkus:quarkus-bom::pom` versions (which is technically a Quarkus platform in its turn as well), the Quarkus tools will be able to detect this fact and make the user aware of it, since it *might* not be a safe combination. If the descriptor artifact didn't include the classifer containing the version of the platform then the tools wouldn't be able to detect a potentially incompatible mix of different versions of the same platform in the same project.\n+\n+The platform descriptor will normally be generated using a Maven plugin, e.g.\n+\n+[source,xml]\n+----\n+<plugin>\n+  <groupId>io.quarkus</groupId>\n+  <artifactId>quarkus-platform-descriptor-json-plugin</artifactId>\n+  <version>${quarkus.version}</version> <1>\n+  <executions>\n+    <execution>\n+      <phase>process-resources</phase>\n+      <goals>\n+        <goal>generate-extensions-json</goal> <2>\n+      </goals>\n+    </execution>\n+  </executions>\n+  <configuration>\n+    <bomGroupId>${quarkus.platform.group-id}</bomGroupId> <3>\n+    <bomArtifactId>${quarkus.platform.artifact-id}</bomArtifactId> <4>\n+    <bomVersion>${quarkus.platform.version}</bomVersion> <5>\n+    <overridesFile>${overridesfile}</overridesFile> <6>\n+    <resolveDependencyManagement>true</resolveDependencyManagement> <7>\n+  </configuration>\n+</plugin>\n+----\n+\n+<1> the version of the `quarkus-platform-descriptor-json-plugin`\n+<2> `generate-extensions-json` is the goal generating the platform descriptor\n+<3> the `groupId` of the platform BOM\n+<4> the `artifactId` of the platform BOM\n+<5> the `version` of the platform BOM\n+<6> this parameter is optional, it allows to override some metadata from the Quarkus extension descriptors found in every runtime extension artifact from which the platform descriptor is generated\n+<7> this parameter is also optional and defaults to false. It has to be set to true in case the platform BOM *is not generated* and *is not flattened*. Which for example is the case for `io.quarkus:quarkus-bom`.\n+\n+[[platform-properties]]\n+=== Quarkus Platform Properties\n+\n+A Quarkus platform may provide its own default values for some of the configuration options.\n+\n+Quarkus is using https://github.com/eclipse/microprofile-config[Eclipse MicroProfile Config] for wiring application configuration. A Quarkus platform may be used as another source of configuration in the hierarchy of the configuration sources dominated by the application's `application.properties`.\n+\n+To provide platform-specific defaults, the platform needs to include a dependency version constraint in its BOM for a properties artifact whose coordinates follow the following naming convention:\n+\n+* the `groupId` of the properties artifact should match the `groupId` of the corresponding Quarkus Platform BOM;\n+* the `artifactId` of the properties artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-properties` suffix;\n+* the `classifier` of the descriptor artifact should be left empty/null;\n+* the `type` of the descriptor artifact should be `properties`;\n+* the `version` of the descriptor artifact should match the `version` of the  corresponding Quarkus Platform BOM.\n+\n+The properties artifact itself is expected to be a traditional `properties` file that will be loaded into an instance of `java.util.Properties` class.\n+\n+IMPORTANT: At this point, platform properties are only allowed to provide the default values for a restricted set of configuration options. The property names in the platform properties file must be prefixed with the `platform.` suffix.\n+\n+Extension developers that want to make their configuration options platform-specific should set their default values to properties that start with the `platform.` suffix. Here is an example:\n+\n+[source,java]\n+----\n+package io.quarkus.deployment.pkg;\n+\n+@ConfigRoot(phase = ConfigPhase.BUILD_TIME)\n+public class NativeConfig {\n+\n+    /**\n+     * The docker image to use to do the image build\n+     */\n+    @ConfigItem(defaultValue = \"${platform.quarkus.native.builder-image}\")\n+    public String builderImage;\n+}\n+----\n+\n+In this case the default value for `quarkus.native.builder-image` will be provided by the platform. The user will still be able to set the desired value for `quarkus.native.builder-image` in its `application.properties`, of course. But in case it's not customized by the user, the default value will be coming from the platform properties.\n+A platform properties file for the example above would contain (the actual value is provided as an example):\n+\n+[source,text]\n+----\n+platform.quarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-native-image:20.2.0-java11", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkzMjU4OQ=="}, "originalCommit": {"oid": "da6e537666a2d778387b5a355404e6db2ab5e1c4"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk4ODIxMA==", "bodyText": "It's very simple. This file https://github.com/quarkusio/quarkus/blob/master/devtools/platform-properties/src/main/resources/platform-properties.properties is located under src/main/resources which is processed (filtered) by the Maven resources plugin and copied to the target/classes directory with the ${xxx} replaced with the actual value set in the build-parent/pom.xml.\nIt's just instead of configuring the defaults right in the platform-properties.properties file itself, I decided to provide the value in the pom.xml. There is no recursive definition. I could have called the POM property differently, but it looked simpler and less ambiguous to me to use the same name.", "url": "https://github.com/quarkusio/quarkus/pull/13153#discussion_r521988210", "createdAt": "2020-11-12T10:10:48Z", "author": {"login": "aloubyansky"}, "path": "docs/src/main/asciidoc/platform.adoc", "diffHunk": "@@ -0,0 +1,149 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Platform\n+\n+include::./attributes.adoc[]\n+\n+The Quarkus extension ecosystem consists of the Quarkus extensions developed and maintained by the community, including the Quarkus core development team. While the Quarkus ecosystem (sometimes also referred to as the \"Quarkus universe\") includes all the Quarkus extensions ever developed, there is also a concept of a Quarkus platform.\n+\n+== Quarkus Platform\n+\n+The fundamental promise of a Quarkus platform is any combination of the Quarkus extensions the platform consists of can be used in the same application without causing any conflict for each other.\n+Each organization creating their Quarkus platform may establish their own criterions for the extensions to be accepted into the platform and the means to guarantee the compatibility between the accepted extensions.\n+\n+=== Quarkus Platform Artifacts\n+\n+Each Quarkus platform is defined with a few artifacts.\n+\n+=== Quarkus Platform BOM\n+\n+Each Quarkus Platform is expected to provide a Maven BOM artifact that\n+\n+* imports a chosen version of `io.quarkus:quarkus-bom` (the platform BOM may be flattened at the end but it has to be based on some version of `io.quarkus:quarkus-bom`)\n+* includes all the Quarkus extension artifacts (the runtime and the deployment ones) the platform consists of\n+* includes all the necessary third-party artifacts that align the transitive dependency versions of the platform extensions to guarantee compatibility between them\n+* includes the <<platform-descriptor,platform JSON descriptor>> artifact\n+* possibly includes the <<platform-properties,platform configuration properties>> artifacts\n+\n+Quarkus applications that want to include extensions from a Quarkus platform will be importing the Quarkus platform BOM.\n+\n+[[platform-descriptor]]\n+=== Quarkus Platform Descriptor\n+\n+Quarkus platform descriptor is a JSON artifact that provides information about the platform and its extensions to the Quarkus tools. E.g. http://code.quarkus.io and the Quarkus command line tools consult this descriptor to list, add and remove extensions to/from the project on user's request.\n+This artifact is also used as a Quarkus platform identifier. When Quarkus tools need to identify the Quarkus platform(s) used in the project, they will analyze the dependency version constraints of the project (the effective list of the managed dependencies from the `dependencyManagement` section in Maven terms) looking for the platform descriptor artifact(s) among them. Given that the platform descriptors are included into the Quarkus platform BOMs, every Quarkus application will inherit the platform descriptor artifact from the imported platform BOM(s) as a dependency version constraint (managed dependency in Maven terms).\n+\n+To be able to easily identify Quarkus platform descriptors among the project's dependency constraints, the platform descriptor Maven artifact coordinates should follow the following naming convention:\n+\n+* the `groupId` of the descriptor artifact should match the `groupId` of the corresponding Quarkus Platform BOM;\n+* the `artifactId` of the descriptor artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-descriptor` suffix;\n+* the `classifier` of the descriptor artifact should match the `version` of the corresponding Quarkus Platform BOM;\n+* the `type` of the descriptor artifact should be `json`;\n+* the `version` of the descriptor artifact should match the `version` of the  corresponding Quarkus Platform BOM.\n+\n+As a string it will look like `<platform-bom-groupId>:<platform-bom-artifactId>-quarkus-platform-descriptor:<platform-version>:json:<platform-version>`\n+\n+E.g. the coordinates of the descriptor for Quarkus BOM `io.quarkus:quarkus-bom::pom:1.2.3` will be `io.quarkus:quarkus-bom-quarkus-platform-descriptor:1.2.3:json:1.2.3`.\n+And for a custom Quarkus platform defined with BOM `org.acme:acme-bom::pom:555` it will be `org.acme:acme-bom-quarkus-platform-descriptor:555:json:555`.\n+\n+The classifier matching the version of the platform may look confusing at first. But this is what turns the descriptor into a true \"fingerprint\" of the platform. In both Maven and Gradle, the effective set of the dependency version constraints (or the managed dependencies) is obtained by merging all the imported BOMs and version constraints specified individually in the current project and also its parent(s). The artifact `classifier` is a part of the dependency ID, which could be expressed as `groupId:artifactId:classifier:type`. Which means that if a project is based on a couple of Quarkus platforms (by importing their BOMs), e.g. `io.quarkus:quarkus-universe-bom::pom:1.2.3` and `org.acme:acme-bom::pom:555`, and these two platforms are based on different `io.quarkus:quarkus-bom::pom` versions (which is technically a Quarkus platform in its turn as well), the Quarkus tools will be able to detect this fact and make the user aware of it, since it *might* not be a safe combination. If the descriptor artifact didn't include the classifer containing the version of the platform then the tools wouldn't be able to detect a potentially incompatible mix of different versions of the same platform in the same project.\n+\n+The platform descriptor will normally be generated using a Maven plugin, e.g.\n+\n+[source,xml]\n+----\n+<plugin>\n+  <groupId>io.quarkus</groupId>\n+  <artifactId>quarkus-platform-descriptor-json-plugin</artifactId>\n+  <version>${quarkus.version}</version> <1>\n+  <executions>\n+    <execution>\n+      <phase>process-resources</phase>\n+      <goals>\n+        <goal>generate-extensions-json</goal> <2>\n+      </goals>\n+    </execution>\n+  </executions>\n+  <configuration>\n+    <bomGroupId>${quarkus.platform.group-id}</bomGroupId> <3>\n+    <bomArtifactId>${quarkus.platform.artifact-id}</bomArtifactId> <4>\n+    <bomVersion>${quarkus.platform.version}</bomVersion> <5>\n+    <overridesFile>${overridesfile}</overridesFile> <6>\n+    <resolveDependencyManagement>true</resolveDependencyManagement> <7>\n+  </configuration>\n+</plugin>\n+----\n+\n+<1> the version of the `quarkus-platform-descriptor-json-plugin`\n+<2> `generate-extensions-json` is the goal generating the platform descriptor\n+<3> the `groupId` of the platform BOM\n+<4> the `artifactId` of the platform BOM\n+<5> the `version` of the platform BOM\n+<6> this parameter is optional, it allows to override some metadata from the Quarkus extension descriptors found in every runtime extension artifact from which the platform descriptor is generated\n+<7> this parameter is also optional and defaults to false. It has to be set to true in case the platform BOM *is not generated* and *is not flattened*. Which for example is the case for `io.quarkus:quarkus-bom`.\n+\n+[[platform-properties]]\n+=== Quarkus Platform Properties\n+\n+A Quarkus platform may provide its own default values for some of the configuration options.\n+\n+Quarkus is using https://github.com/eclipse/microprofile-config[Eclipse MicroProfile Config] for wiring application configuration. A Quarkus platform may be used as another source of configuration in the hierarchy of the configuration sources dominated by the application's `application.properties`.\n+\n+To provide platform-specific defaults, the platform needs to include a dependency version constraint in its BOM for a properties artifact whose coordinates follow the following naming convention:\n+\n+* the `groupId` of the properties artifact should match the `groupId` of the corresponding Quarkus Platform BOM;\n+* the `artifactId` of the properties artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-properties` suffix;\n+* the `classifier` of the descriptor artifact should be left empty/null;\n+* the `type` of the descriptor artifact should be `properties`;\n+* the `version` of the descriptor artifact should match the `version` of the  corresponding Quarkus Platform BOM.\n+\n+The properties artifact itself is expected to be a traditional `properties` file that will be loaded into an instance of `java.util.Properties` class.\n+\n+IMPORTANT: At this point, platform properties are only allowed to provide the default values for a restricted set of configuration options. The property names in the platform properties file must be prefixed with the `platform.` suffix.\n+\n+Extension developers that want to make their configuration options platform-specific should set their default values to properties that start with the `platform.` suffix. Here is an example:\n+\n+[source,java]\n+----\n+package io.quarkus.deployment.pkg;\n+\n+@ConfigRoot(phase = ConfigPhase.BUILD_TIME)\n+public class NativeConfig {\n+\n+    /**\n+     * The docker image to use to do the image build\n+     */\n+    @ConfigItem(defaultValue = \"${platform.quarkus.native.builder-image}\")\n+    public String builderImage;\n+}\n+----\n+\n+In this case the default value for `quarkus.native.builder-image` will be provided by the platform. The user will still be able to set the desired value for `quarkus.native.builder-image` in its `application.properties`, of course. But in case it's not customized by the user, the default value will be coming from the platform properties.\n+A platform properties file for the example above would contain (the actual value is provided as an example):\n+\n+[source,text]\n+----\n+platform.quarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-native-image:20.2.0-java11", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkzMjU4OQ=="}, "originalCommit": {"oid": "da6e537666a2d778387b5a355404e6db2ab5e1c4"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5NzU5NQ==", "bodyText": "I see. Thanks for the explanation! That makes perfect sense and seems like a good way to define the platform.\nNow I suppose Quarkus will over time gain some more platform properties. For our platform we would like to set many more of the Quarkus properties in the platform. I think for that purpose we will try to define a config source which sits between the defaults provided by the config items and the application's application.properties. I assume this should at least work for runtime properties. Once I have worked out which these (one example would be quarkus.log.console.format) I will try to file corresponding tickets.", "url": "https://github.com/quarkusio/quarkus/pull/13153#discussion_r521997595", "createdAt": "2020-11-12T10:25:13Z", "author": {"login": "knutwannheden"}, "path": "docs/src/main/asciidoc/platform.adoc", "diffHunk": "@@ -0,0 +1,149 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Platform\n+\n+include::./attributes.adoc[]\n+\n+The Quarkus extension ecosystem consists of the Quarkus extensions developed and maintained by the community, including the Quarkus core development team. While the Quarkus ecosystem (sometimes also referred to as the \"Quarkus universe\") includes all the Quarkus extensions ever developed, there is also a concept of a Quarkus platform.\n+\n+== Quarkus Platform\n+\n+The fundamental promise of a Quarkus platform is any combination of the Quarkus extensions the platform consists of can be used in the same application without causing any conflict for each other.\n+Each organization creating their Quarkus platform may establish their own criterions for the extensions to be accepted into the platform and the means to guarantee the compatibility between the accepted extensions.\n+\n+=== Quarkus Platform Artifacts\n+\n+Each Quarkus platform is defined with a few artifacts.\n+\n+=== Quarkus Platform BOM\n+\n+Each Quarkus Platform is expected to provide a Maven BOM artifact that\n+\n+* imports a chosen version of `io.quarkus:quarkus-bom` (the platform BOM may be flattened at the end but it has to be based on some version of `io.quarkus:quarkus-bom`)\n+* includes all the Quarkus extension artifacts (the runtime and the deployment ones) the platform consists of\n+* includes all the necessary third-party artifacts that align the transitive dependency versions of the platform extensions to guarantee compatibility between them\n+* includes the <<platform-descriptor,platform JSON descriptor>> artifact\n+* possibly includes the <<platform-properties,platform configuration properties>> artifacts\n+\n+Quarkus applications that want to include extensions from a Quarkus platform will be importing the Quarkus platform BOM.\n+\n+[[platform-descriptor]]\n+=== Quarkus Platform Descriptor\n+\n+Quarkus platform descriptor is a JSON artifact that provides information about the platform and its extensions to the Quarkus tools. E.g. http://code.quarkus.io and the Quarkus command line tools consult this descriptor to list, add and remove extensions to/from the project on user's request.\n+This artifact is also used as a Quarkus platform identifier. When Quarkus tools need to identify the Quarkus platform(s) used in the project, they will analyze the dependency version constraints of the project (the effective list of the managed dependencies from the `dependencyManagement` section in Maven terms) looking for the platform descriptor artifact(s) among them. Given that the platform descriptors are included into the Quarkus platform BOMs, every Quarkus application will inherit the platform descriptor artifact from the imported platform BOM(s) as a dependency version constraint (managed dependency in Maven terms).\n+\n+To be able to easily identify Quarkus platform descriptors among the project's dependency constraints, the platform descriptor Maven artifact coordinates should follow the following naming convention:\n+\n+* the `groupId` of the descriptor artifact should match the `groupId` of the corresponding Quarkus Platform BOM;\n+* the `artifactId` of the descriptor artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-descriptor` suffix;\n+* the `classifier` of the descriptor artifact should match the `version` of the corresponding Quarkus Platform BOM;\n+* the `type` of the descriptor artifact should be `json`;\n+* the `version` of the descriptor artifact should match the `version` of the  corresponding Quarkus Platform BOM.\n+\n+As a string it will look like `<platform-bom-groupId>:<platform-bom-artifactId>-quarkus-platform-descriptor:<platform-version>:json:<platform-version>`\n+\n+E.g. the coordinates of the descriptor for Quarkus BOM `io.quarkus:quarkus-bom::pom:1.2.3` will be `io.quarkus:quarkus-bom-quarkus-platform-descriptor:1.2.3:json:1.2.3`.\n+And for a custom Quarkus platform defined with BOM `org.acme:acme-bom::pom:555` it will be `org.acme:acme-bom-quarkus-platform-descriptor:555:json:555`.\n+\n+The classifier matching the version of the platform may look confusing at first. But this is what turns the descriptor into a true \"fingerprint\" of the platform. In both Maven and Gradle, the effective set of the dependency version constraints (or the managed dependencies) is obtained by merging all the imported BOMs and version constraints specified individually in the current project and also its parent(s). The artifact `classifier` is a part of the dependency ID, which could be expressed as `groupId:artifactId:classifier:type`. Which means that if a project is based on a couple of Quarkus platforms (by importing their BOMs), e.g. `io.quarkus:quarkus-universe-bom::pom:1.2.3` and `org.acme:acme-bom::pom:555`, and these two platforms are based on different `io.quarkus:quarkus-bom::pom` versions (which is technically a Quarkus platform in its turn as well), the Quarkus tools will be able to detect this fact and make the user aware of it, since it *might* not be a safe combination. If the descriptor artifact didn't include the classifer containing the version of the platform then the tools wouldn't be able to detect a potentially incompatible mix of different versions of the same platform in the same project.\n+\n+The platform descriptor will normally be generated using a Maven plugin, e.g.\n+\n+[source,xml]\n+----\n+<plugin>\n+  <groupId>io.quarkus</groupId>\n+  <artifactId>quarkus-platform-descriptor-json-plugin</artifactId>\n+  <version>${quarkus.version}</version> <1>\n+  <executions>\n+    <execution>\n+      <phase>process-resources</phase>\n+      <goals>\n+        <goal>generate-extensions-json</goal> <2>\n+      </goals>\n+    </execution>\n+  </executions>\n+  <configuration>\n+    <bomGroupId>${quarkus.platform.group-id}</bomGroupId> <3>\n+    <bomArtifactId>${quarkus.platform.artifact-id}</bomArtifactId> <4>\n+    <bomVersion>${quarkus.platform.version}</bomVersion> <5>\n+    <overridesFile>${overridesfile}</overridesFile> <6>\n+    <resolveDependencyManagement>true</resolveDependencyManagement> <7>\n+  </configuration>\n+</plugin>\n+----\n+\n+<1> the version of the `quarkus-platform-descriptor-json-plugin`\n+<2> `generate-extensions-json` is the goal generating the platform descriptor\n+<3> the `groupId` of the platform BOM\n+<4> the `artifactId` of the platform BOM\n+<5> the `version` of the platform BOM\n+<6> this parameter is optional, it allows to override some metadata from the Quarkus extension descriptors found in every runtime extension artifact from which the platform descriptor is generated\n+<7> this parameter is also optional and defaults to false. It has to be set to true in case the platform BOM *is not generated* and *is not flattened*. Which for example is the case for `io.quarkus:quarkus-bom`.\n+\n+[[platform-properties]]\n+=== Quarkus Platform Properties\n+\n+A Quarkus platform may provide its own default values for some of the configuration options.\n+\n+Quarkus is using https://github.com/eclipse/microprofile-config[Eclipse MicroProfile Config] for wiring application configuration. A Quarkus platform may be used as another source of configuration in the hierarchy of the configuration sources dominated by the application's `application.properties`.\n+\n+To provide platform-specific defaults, the platform needs to include a dependency version constraint in its BOM for a properties artifact whose coordinates follow the following naming convention:\n+\n+* the `groupId` of the properties artifact should match the `groupId` of the corresponding Quarkus Platform BOM;\n+* the `artifactId` of the properties artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-properties` suffix;\n+* the `classifier` of the descriptor artifact should be left empty/null;\n+* the `type` of the descriptor artifact should be `properties`;\n+* the `version` of the descriptor artifact should match the `version` of the  corresponding Quarkus Platform BOM.\n+\n+The properties artifact itself is expected to be a traditional `properties` file that will be loaded into an instance of `java.util.Properties` class.\n+\n+IMPORTANT: At this point, platform properties are only allowed to provide the default values for a restricted set of configuration options. The property names in the platform properties file must be prefixed with the `platform.` suffix.\n+\n+Extension developers that want to make their configuration options platform-specific should set their default values to properties that start with the `platform.` suffix. Here is an example:\n+\n+[source,java]\n+----\n+package io.quarkus.deployment.pkg;\n+\n+@ConfigRoot(phase = ConfigPhase.BUILD_TIME)\n+public class NativeConfig {\n+\n+    /**\n+     * The docker image to use to do the image build\n+     */\n+    @ConfigItem(defaultValue = \"${platform.quarkus.native.builder-image}\")\n+    public String builderImage;\n+}\n+----\n+\n+In this case the default value for `quarkus.native.builder-image` will be provided by the platform. The user will still be able to set the desired value for `quarkus.native.builder-image` in its `application.properties`, of course. But in case it's not customized by the user, the default value will be coming from the platform properties.\n+A platform properties file for the example above would contain (the actual value is provided as an example):\n+\n+[source,text]\n+----\n+platform.quarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-native-image:20.2.0-java11", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkzMjU4OQ=="}, "originalCommit": {"oid": "da6e537666a2d778387b5a355404e6db2ab5e1c4"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAwMzA4MA==", "bodyText": "Yes, please, do let us know what issues you are facing. Thanks!", "url": "https://github.com/quarkusio/quarkus/pull/13153#discussion_r522003080", "createdAt": "2020-11-12T10:33:46Z", "author": {"login": "aloubyansky"}, "path": "docs/src/main/asciidoc/platform.adoc", "diffHunk": "@@ -0,0 +1,149 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Platform\n+\n+include::./attributes.adoc[]\n+\n+The Quarkus extension ecosystem consists of the Quarkus extensions developed and maintained by the community, including the Quarkus core development team. While the Quarkus ecosystem (sometimes also referred to as the \"Quarkus universe\") includes all the Quarkus extensions ever developed, there is also a concept of a Quarkus platform.\n+\n+== Quarkus Platform\n+\n+The fundamental promise of a Quarkus platform is any combination of the Quarkus extensions the platform consists of can be used in the same application without causing any conflict for each other.\n+Each organization creating their Quarkus platform may establish their own criterions for the extensions to be accepted into the platform and the means to guarantee the compatibility between the accepted extensions.\n+\n+=== Quarkus Platform Artifacts\n+\n+Each Quarkus platform is defined with a few artifacts.\n+\n+=== Quarkus Platform BOM\n+\n+Each Quarkus Platform is expected to provide a Maven BOM artifact that\n+\n+* imports a chosen version of `io.quarkus:quarkus-bom` (the platform BOM may be flattened at the end but it has to be based on some version of `io.quarkus:quarkus-bom`)\n+* includes all the Quarkus extension artifacts (the runtime and the deployment ones) the platform consists of\n+* includes all the necessary third-party artifacts that align the transitive dependency versions of the platform extensions to guarantee compatibility between them\n+* includes the <<platform-descriptor,platform JSON descriptor>> artifact\n+* possibly includes the <<platform-properties,platform configuration properties>> artifacts\n+\n+Quarkus applications that want to include extensions from a Quarkus platform will be importing the Quarkus platform BOM.\n+\n+[[platform-descriptor]]\n+=== Quarkus Platform Descriptor\n+\n+Quarkus platform descriptor is a JSON artifact that provides information about the platform and its extensions to the Quarkus tools. E.g. http://code.quarkus.io and the Quarkus command line tools consult this descriptor to list, add and remove extensions to/from the project on user's request.\n+This artifact is also used as a Quarkus platform identifier. When Quarkus tools need to identify the Quarkus platform(s) used in the project, they will analyze the dependency version constraints of the project (the effective list of the managed dependencies from the `dependencyManagement` section in Maven terms) looking for the platform descriptor artifact(s) among them. Given that the platform descriptors are included into the Quarkus platform BOMs, every Quarkus application will inherit the platform descriptor artifact from the imported platform BOM(s) as a dependency version constraint (managed dependency in Maven terms).\n+\n+To be able to easily identify Quarkus platform descriptors among the project's dependency constraints, the platform descriptor Maven artifact coordinates should follow the following naming convention:\n+\n+* the `groupId` of the descriptor artifact should match the `groupId` of the corresponding Quarkus Platform BOM;\n+* the `artifactId` of the descriptor artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-descriptor` suffix;\n+* the `classifier` of the descriptor artifact should match the `version` of the corresponding Quarkus Platform BOM;\n+* the `type` of the descriptor artifact should be `json`;\n+* the `version` of the descriptor artifact should match the `version` of the  corresponding Quarkus Platform BOM.\n+\n+As a string it will look like `<platform-bom-groupId>:<platform-bom-artifactId>-quarkus-platform-descriptor:<platform-version>:json:<platform-version>`\n+\n+E.g. the coordinates of the descriptor for Quarkus BOM `io.quarkus:quarkus-bom::pom:1.2.3` will be `io.quarkus:quarkus-bom-quarkus-platform-descriptor:1.2.3:json:1.2.3`.\n+And for a custom Quarkus platform defined with BOM `org.acme:acme-bom::pom:555` it will be `org.acme:acme-bom-quarkus-platform-descriptor:555:json:555`.\n+\n+The classifier matching the version of the platform may look confusing at first. But this is what turns the descriptor into a true \"fingerprint\" of the platform. In both Maven and Gradle, the effective set of the dependency version constraints (or the managed dependencies) is obtained by merging all the imported BOMs and version constraints specified individually in the current project and also its parent(s). The artifact `classifier` is a part of the dependency ID, which could be expressed as `groupId:artifactId:classifier:type`. Which means that if a project is based on a couple of Quarkus platforms (by importing their BOMs), e.g. `io.quarkus:quarkus-universe-bom::pom:1.2.3` and `org.acme:acme-bom::pom:555`, and these two platforms are based on different `io.quarkus:quarkus-bom::pom` versions (which is technically a Quarkus platform in its turn as well), the Quarkus tools will be able to detect this fact and make the user aware of it, since it *might* not be a safe combination. If the descriptor artifact didn't include the classifer containing the version of the platform then the tools wouldn't be able to detect a potentially incompatible mix of different versions of the same platform in the same project.\n+\n+The platform descriptor will normally be generated using a Maven plugin, e.g.\n+\n+[source,xml]\n+----\n+<plugin>\n+  <groupId>io.quarkus</groupId>\n+  <artifactId>quarkus-platform-descriptor-json-plugin</artifactId>\n+  <version>${quarkus.version}</version> <1>\n+  <executions>\n+    <execution>\n+      <phase>process-resources</phase>\n+      <goals>\n+        <goal>generate-extensions-json</goal> <2>\n+      </goals>\n+    </execution>\n+  </executions>\n+  <configuration>\n+    <bomGroupId>${quarkus.platform.group-id}</bomGroupId> <3>\n+    <bomArtifactId>${quarkus.platform.artifact-id}</bomArtifactId> <4>\n+    <bomVersion>${quarkus.platform.version}</bomVersion> <5>\n+    <overridesFile>${overridesfile}</overridesFile> <6>\n+    <resolveDependencyManagement>true</resolveDependencyManagement> <7>\n+  </configuration>\n+</plugin>\n+----\n+\n+<1> the version of the `quarkus-platform-descriptor-json-plugin`\n+<2> `generate-extensions-json` is the goal generating the platform descriptor\n+<3> the `groupId` of the platform BOM\n+<4> the `artifactId` of the platform BOM\n+<5> the `version` of the platform BOM\n+<6> this parameter is optional, it allows to override some metadata from the Quarkus extension descriptors found in every runtime extension artifact from which the platform descriptor is generated\n+<7> this parameter is also optional and defaults to false. It has to be set to true in case the platform BOM *is not generated* and *is not flattened*. Which for example is the case for `io.quarkus:quarkus-bom`.\n+\n+[[platform-properties]]\n+=== Quarkus Platform Properties\n+\n+A Quarkus platform may provide its own default values for some of the configuration options.\n+\n+Quarkus is using https://github.com/eclipse/microprofile-config[Eclipse MicroProfile Config] for wiring application configuration. A Quarkus platform may be used as another source of configuration in the hierarchy of the configuration sources dominated by the application's `application.properties`.\n+\n+To provide platform-specific defaults, the platform needs to include a dependency version constraint in its BOM for a properties artifact whose coordinates follow the following naming convention:\n+\n+* the `groupId` of the properties artifact should match the `groupId` of the corresponding Quarkus Platform BOM;\n+* the `artifactId` of the properties artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-properties` suffix;\n+* the `classifier` of the descriptor artifact should be left empty/null;\n+* the `type` of the descriptor artifact should be `properties`;\n+* the `version` of the descriptor artifact should match the `version` of the  corresponding Quarkus Platform BOM.\n+\n+The properties artifact itself is expected to be a traditional `properties` file that will be loaded into an instance of `java.util.Properties` class.\n+\n+IMPORTANT: At this point, platform properties are only allowed to provide the default values for a restricted set of configuration options. The property names in the platform properties file must be prefixed with the `platform.` suffix.\n+\n+Extension developers that want to make their configuration options platform-specific should set their default values to properties that start with the `platform.` suffix. Here is an example:\n+\n+[source,java]\n+----\n+package io.quarkus.deployment.pkg;\n+\n+@ConfigRoot(phase = ConfigPhase.BUILD_TIME)\n+public class NativeConfig {\n+\n+    /**\n+     * The docker image to use to do the image build\n+     */\n+    @ConfigItem(defaultValue = \"${platform.quarkus.native.builder-image}\")\n+    public String builderImage;\n+}\n+----\n+\n+In this case the default value for `quarkus.native.builder-image` will be provided by the platform. The user will still be able to set the desired value for `quarkus.native.builder-image` in its `application.properties`, of course. But in case it's not customized by the user, the default value will be coming from the platform properties.\n+A platform properties file for the example above would contain (the actual value is provided as an example):\n+\n+[source,text]\n+----\n+platform.quarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-native-image:20.2.0-java11", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkzMjU4OQ=="}, "originalCommit": {"oid": "da6e537666a2d778387b5a355404e6db2ab5e1c4"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkxMDE1Nw==", "bodyText": "One thing I would like to check up on is whether the all-config documentation generation still works correctly after this change. I am thinking that the following could possibly cause problems. Or does the extensions.json get copied into bom-descriptor-json as well?\n\n  \n    \n      quarkus/docs/pom.xml\n    \n    \n         Line 96\n      in\n      a0374b7\n    \n    \n    \n    \n\n        \n          \n           <argument>${project.basedir}/../devtools/bom-descriptor-json/target/extensions.json</argument>", "url": "https://github.com/quarkusio/quarkus/pull/13153#discussion_r522910157", "createdAt": "2020-11-13T12:07:50Z", "author": {"login": "knutwannheden"}, "path": "docs/src/main/asciidoc/platform.adoc", "diffHunk": "@@ -0,0 +1,149 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Platform\n+\n+include::./attributes.adoc[]\n+\n+The Quarkus extension ecosystem consists of the Quarkus extensions developed and maintained by the community, including the Quarkus core development team. While the Quarkus ecosystem (sometimes also referred to as the \"Quarkus universe\") includes all the Quarkus extensions ever developed, there is also a concept of a Quarkus platform.\n+\n+== Quarkus Platform\n+\n+The fundamental promise of a Quarkus platform is any combination of the Quarkus extensions the platform consists of can be used in the same application without causing any conflict for each other.\n+Each organization creating their Quarkus platform may establish their own criterions for the extensions to be accepted into the platform and the means to guarantee the compatibility between the accepted extensions.\n+\n+=== Quarkus Platform Artifacts\n+\n+Each Quarkus platform is defined with a few artifacts.\n+\n+=== Quarkus Platform BOM\n+\n+Each Quarkus Platform is expected to provide a Maven BOM artifact that\n+\n+* imports a chosen version of `io.quarkus:quarkus-bom` (the platform BOM may be flattened at the end but it has to be based on some version of `io.quarkus:quarkus-bom`)\n+* includes all the Quarkus extension artifacts (the runtime and the deployment ones) the platform consists of\n+* includes all the necessary third-party artifacts that align the transitive dependency versions of the platform extensions to guarantee compatibility between them\n+* includes the <<platform-descriptor,platform JSON descriptor>> artifact\n+* possibly includes the <<platform-properties,platform configuration properties>> artifacts\n+\n+Quarkus applications that want to include extensions from a Quarkus platform will be importing the Quarkus platform BOM.\n+\n+[[platform-descriptor]]\n+=== Quarkus Platform Descriptor\n+\n+Quarkus platform descriptor is a JSON artifact that provides information about the platform and its extensions to the Quarkus tools. E.g. http://code.quarkus.io and the Quarkus command line tools consult this descriptor to list, add and remove extensions to/from the project on user's request.\n+This artifact is also used as a Quarkus platform identifier. When Quarkus tools need to identify the Quarkus platform(s) used in the project, they will analyze the dependency version constraints of the project (the effective list of the managed dependencies from the `dependencyManagement` section in Maven terms) looking for the platform descriptor artifact(s) among them. Given that the platform descriptors are included into the Quarkus platform BOMs, every Quarkus application will inherit the platform descriptor artifact from the imported platform BOM(s) as a dependency version constraint (managed dependency in Maven terms).\n+\n+To be able to easily identify Quarkus platform descriptors among the project's dependency constraints, the platform descriptor Maven artifact coordinates should follow the following naming convention:\n+\n+* the `groupId` of the descriptor artifact should match the `groupId` of the corresponding Quarkus Platform BOM;\n+* the `artifactId` of the descriptor artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-descriptor` suffix;\n+* the `classifier` of the descriptor artifact should match the `version` of the corresponding Quarkus Platform BOM;\n+* the `type` of the descriptor artifact should be `json`;\n+* the `version` of the descriptor artifact should match the `version` of the  corresponding Quarkus Platform BOM.\n+\n+As a string it will look like `<platform-bom-groupId>:<platform-bom-artifactId>-quarkus-platform-descriptor:<platform-version>:json:<platform-version>`\n+\n+E.g. the coordinates of the descriptor for Quarkus BOM `io.quarkus:quarkus-bom::pom:1.2.3` will be `io.quarkus:quarkus-bom-quarkus-platform-descriptor:1.2.3:json:1.2.3`.\n+And for a custom Quarkus platform defined with BOM `org.acme:acme-bom::pom:555` it will be `org.acme:acme-bom-quarkus-platform-descriptor:555:json:555`.\n+\n+The classifier matching the version of the platform may look confusing at first. But this is what turns the descriptor into a true \"fingerprint\" of the platform. In both Maven and Gradle, the effective set of the dependency version constraints (or the managed dependencies) is obtained by merging all the imported BOMs and version constraints specified individually in the current project and also its parent(s). The artifact `classifier` is a part of the dependency ID, which could be expressed as `groupId:artifactId:classifier:type`. Which means that if a project is based on a couple of Quarkus platforms (by importing their BOMs), e.g. `io.quarkus:quarkus-universe-bom::pom:1.2.3` and `org.acme:acme-bom::pom:555`, and these two platforms are based on different `io.quarkus:quarkus-bom::pom` versions (which is technically a Quarkus platform in its turn as well), the Quarkus tools will be able to detect this fact and make the user aware of it, since it *might* not be a safe combination. If the descriptor artifact didn't include the classifer containing the version of the platform then the tools wouldn't be able to detect a potentially incompatible mix of different versions of the same platform in the same project.\n+\n+The platform descriptor will normally be generated using a Maven plugin, e.g.\n+\n+[source,xml]\n+----\n+<plugin>\n+  <groupId>io.quarkus</groupId>\n+  <artifactId>quarkus-platform-descriptor-json-plugin</artifactId>\n+  <version>${quarkus.version}</version> <1>\n+  <executions>\n+    <execution>\n+      <phase>process-resources</phase>\n+      <goals>\n+        <goal>generate-extensions-json</goal> <2>\n+      </goals>\n+    </execution>\n+  </executions>\n+  <configuration>\n+    <bomGroupId>${quarkus.platform.group-id}</bomGroupId> <3>\n+    <bomArtifactId>${quarkus.platform.artifact-id}</bomArtifactId> <4>\n+    <bomVersion>${quarkus.platform.version}</bomVersion> <5>\n+    <overridesFile>${overridesfile}</overridesFile> <6>\n+    <resolveDependencyManagement>true</resolveDependencyManagement> <7>\n+  </configuration>\n+</plugin>\n+----\n+\n+<1> the version of the `quarkus-platform-descriptor-json-plugin`\n+<2> `generate-extensions-json` is the goal generating the platform descriptor\n+<3> the `groupId` of the platform BOM\n+<4> the `artifactId` of the platform BOM\n+<5> the `version` of the platform BOM\n+<6> this parameter is optional, it allows to override some metadata from the Quarkus extension descriptors found in every runtime extension artifact from which the platform descriptor is generated\n+<7> this parameter is also optional and defaults to false. It has to be set to true in case the platform BOM *is not generated* and *is not flattened*. Which for example is the case for `io.quarkus:quarkus-bom`.\n+\n+[[platform-properties]]\n+=== Quarkus Platform Properties\n+\n+A Quarkus platform may provide its own default values for some of the configuration options.\n+\n+Quarkus is using https://github.com/eclipse/microprofile-config[Eclipse MicroProfile Config] for wiring application configuration. A Quarkus platform may be used as another source of configuration in the hierarchy of the configuration sources dominated by the application's `application.properties`.\n+\n+To provide platform-specific defaults, the platform needs to include a dependency version constraint in its BOM for a properties artifact whose coordinates follow the following naming convention:\n+\n+* the `groupId` of the properties artifact should match the `groupId` of the corresponding Quarkus Platform BOM;\n+* the `artifactId` of the properties artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-properties` suffix;\n+* the `classifier` of the descriptor artifact should be left empty/null;\n+* the `type` of the descriptor artifact should be `properties`;\n+* the `version` of the descriptor artifact should match the `version` of the  corresponding Quarkus Platform BOM.\n+\n+The properties artifact itself is expected to be a traditional `properties` file that will be loaded into an instance of `java.util.Properties` class.\n+\n+IMPORTANT: At this point, platform properties are only allowed to provide the default values for a restricted set of configuration options. The property names in the platform properties file must be prefixed with the `platform.` suffix.\n+\n+Extension developers that want to make their configuration options platform-specific should set their default values to properties that start with the `platform.` suffix. Here is an example:\n+\n+[source,java]\n+----\n+package io.quarkus.deployment.pkg;\n+\n+@ConfigRoot(phase = ConfigPhase.BUILD_TIME)\n+public class NativeConfig {\n+\n+    /**\n+     * The docker image to use to do the image build\n+     */\n+    @ConfigItem(defaultValue = \"${platform.quarkus.native.builder-image}\")\n+    public String builderImage;\n+}\n+----\n+\n+In this case the default value for `quarkus.native.builder-image` will be provided by the platform. The user will still be able to set the desired value for `quarkus.native.builder-image` in its `application.properties`, of course. But in case it's not customized by the user, the default value will be coming from the platform properties.\n+A platform properties file for the example above would contain (the actual value is provided as an example):\n+\n+[source,text]\n+----\n+platform.quarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-native-image:20.2.0-java11", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkzMjU4OQ=="}, "originalCommit": {"oid": "da6e537666a2d778387b5a355404e6db2ab5e1c4"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAyMjEyOA==", "bodyText": "Thanks for the PR fixing the path. The way the current docs are generated, the value for the config options configured as platform properties instead of containing actual values will appear as ${platform.quarkus.xxx}.", "url": "https://github.com/quarkusio/quarkus/pull/13153#discussion_r523022128", "createdAt": "2020-11-13T15:26:18Z", "author": {"login": "aloubyansky"}, "path": "docs/src/main/asciidoc/platform.adoc", "diffHunk": "@@ -0,0 +1,149 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Platform\n+\n+include::./attributes.adoc[]\n+\n+The Quarkus extension ecosystem consists of the Quarkus extensions developed and maintained by the community, including the Quarkus core development team. While the Quarkus ecosystem (sometimes also referred to as the \"Quarkus universe\") includes all the Quarkus extensions ever developed, there is also a concept of a Quarkus platform.\n+\n+== Quarkus Platform\n+\n+The fundamental promise of a Quarkus platform is any combination of the Quarkus extensions the platform consists of can be used in the same application without causing any conflict for each other.\n+Each organization creating their Quarkus platform may establish their own criterions for the extensions to be accepted into the platform and the means to guarantee the compatibility between the accepted extensions.\n+\n+=== Quarkus Platform Artifacts\n+\n+Each Quarkus platform is defined with a few artifacts.\n+\n+=== Quarkus Platform BOM\n+\n+Each Quarkus Platform is expected to provide a Maven BOM artifact that\n+\n+* imports a chosen version of `io.quarkus:quarkus-bom` (the platform BOM may be flattened at the end but it has to be based on some version of `io.quarkus:quarkus-bom`)\n+* includes all the Quarkus extension artifacts (the runtime and the deployment ones) the platform consists of\n+* includes all the necessary third-party artifacts that align the transitive dependency versions of the platform extensions to guarantee compatibility between them\n+* includes the <<platform-descriptor,platform JSON descriptor>> artifact\n+* possibly includes the <<platform-properties,platform configuration properties>> artifacts\n+\n+Quarkus applications that want to include extensions from a Quarkus platform will be importing the Quarkus platform BOM.\n+\n+[[platform-descriptor]]\n+=== Quarkus Platform Descriptor\n+\n+Quarkus platform descriptor is a JSON artifact that provides information about the platform and its extensions to the Quarkus tools. E.g. http://code.quarkus.io and the Quarkus command line tools consult this descriptor to list, add and remove extensions to/from the project on user's request.\n+This artifact is also used as a Quarkus platform identifier. When Quarkus tools need to identify the Quarkus platform(s) used in the project, they will analyze the dependency version constraints of the project (the effective list of the managed dependencies from the `dependencyManagement` section in Maven terms) looking for the platform descriptor artifact(s) among them. Given that the platform descriptors are included into the Quarkus platform BOMs, every Quarkus application will inherit the platform descriptor artifact from the imported platform BOM(s) as a dependency version constraint (managed dependency in Maven terms).\n+\n+To be able to easily identify Quarkus platform descriptors among the project's dependency constraints, the platform descriptor Maven artifact coordinates should follow the following naming convention:\n+\n+* the `groupId` of the descriptor artifact should match the `groupId` of the corresponding Quarkus Platform BOM;\n+* the `artifactId` of the descriptor artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-descriptor` suffix;\n+* the `classifier` of the descriptor artifact should match the `version` of the corresponding Quarkus Platform BOM;\n+* the `type` of the descriptor artifact should be `json`;\n+* the `version` of the descriptor artifact should match the `version` of the  corresponding Quarkus Platform BOM.\n+\n+As a string it will look like `<platform-bom-groupId>:<platform-bom-artifactId>-quarkus-platform-descriptor:<platform-version>:json:<platform-version>`\n+\n+E.g. the coordinates of the descriptor for Quarkus BOM `io.quarkus:quarkus-bom::pom:1.2.3` will be `io.quarkus:quarkus-bom-quarkus-platform-descriptor:1.2.3:json:1.2.3`.\n+And for a custom Quarkus platform defined with BOM `org.acme:acme-bom::pom:555` it will be `org.acme:acme-bom-quarkus-platform-descriptor:555:json:555`.\n+\n+The classifier matching the version of the platform may look confusing at first. But this is what turns the descriptor into a true \"fingerprint\" of the platform. In both Maven and Gradle, the effective set of the dependency version constraints (or the managed dependencies) is obtained by merging all the imported BOMs and version constraints specified individually in the current project and also its parent(s). The artifact `classifier` is a part of the dependency ID, which could be expressed as `groupId:artifactId:classifier:type`. Which means that if a project is based on a couple of Quarkus platforms (by importing their BOMs), e.g. `io.quarkus:quarkus-universe-bom::pom:1.2.3` and `org.acme:acme-bom::pom:555`, and these two platforms are based on different `io.quarkus:quarkus-bom::pom` versions (which is technically a Quarkus platform in its turn as well), the Quarkus tools will be able to detect this fact and make the user aware of it, since it *might* not be a safe combination. If the descriptor artifact didn't include the classifer containing the version of the platform then the tools wouldn't be able to detect a potentially incompatible mix of different versions of the same platform in the same project.\n+\n+The platform descriptor will normally be generated using a Maven plugin, e.g.\n+\n+[source,xml]\n+----\n+<plugin>\n+  <groupId>io.quarkus</groupId>\n+  <artifactId>quarkus-platform-descriptor-json-plugin</artifactId>\n+  <version>${quarkus.version}</version> <1>\n+  <executions>\n+    <execution>\n+      <phase>process-resources</phase>\n+      <goals>\n+        <goal>generate-extensions-json</goal> <2>\n+      </goals>\n+    </execution>\n+  </executions>\n+  <configuration>\n+    <bomGroupId>${quarkus.platform.group-id}</bomGroupId> <3>\n+    <bomArtifactId>${quarkus.platform.artifact-id}</bomArtifactId> <4>\n+    <bomVersion>${quarkus.platform.version}</bomVersion> <5>\n+    <overridesFile>${overridesfile}</overridesFile> <6>\n+    <resolveDependencyManagement>true</resolveDependencyManagement> <7>\n+  </configuration>\n+</plugin>\n+----\n+\n+<1> the version of the `quarkus-platform-descriptor-json-plugin`\n+<2> `generate-extensions-json` is the goal generating the platform descriptor\n+<3> the `groupId` of the platform BOM\n+<4> the `artifactId` of the platform BOM\n+<5> the `version` of the platform BOM\n+<6> this parameter is optional, it allows to override some metadata from the Quarkus extension descriptors found in every runtime extension artifact from which the platform descriptor is generated\n+<7> this parameter is also optional and defaults to false. It has to be set to true in case the platform BOM *is not generated* and *is not flattened*. Which for example is the case for `io.quarkus:quarkus-bom`.\n+\n+[[platform-properties]]\n+=== Quarkus Platform Properties\n+\n+A Quarkus platform may provide its own default values for some of the configuration options.\n+\n+Quarkus is using https://github.com/eclipse/microprofile-config[Eclipse MicroProfile Config] for wiring application configuration. A Quarkus platform may be used as another source of configuration in the hierarchy of the configuration sources dominated by the application's `application.properties`.\n+\n+To provide platform-specific defaults, the platform needs to include a dependency version constraint in its BOM for a properties artifact whose coordinates follow the following naming convention:\n+\n+* the `groupId` of the properties artifact should match the `groupId` of the corresponding Quarkus Platform BOM;\n+* the `artifactId` of the properties artifact should be the `artifactId` of the corresponding Quarkus Platform BOM with the `-quarkus-platform-properties` suffix;\n+* the `classifier` of the descriptor artifact should be left empty/null;\n+* the `type` of the descriptor artifact should be `properties`;\n+* the `version` of the descriptor artifact should match the `version` of the  corresponding Quarkus Platform BOM.\n+\n+The properties artifact itself is expected to be a traditional `properties` file that will be loaded into an instance of `java.util.Properties` class.\n+\n+IMPORTANT: At this point, platform properties are only allowed to provide the default values for a restricted set of configuration options. The property names in the platform properties file must be prefixed with the `platform.` suffix.\n+\n+Extension developers that want to make their configuration options platform-specific should set their default values to properties that start with the `platform.` suffix. Here is an example:\n+\n+[source,java]\n+----\n+package io.quarkus.deployment.pkg;\n+\n+@ConfigRoot(phase = ConfigPhase.BUILD_TIME)\n+public class NativeConfig {\n+\n+    /**\n+     * The docker image to use to do the image build\n+     */\n+    @ConfigItem(defaultValue = \"${platform.quarkus.native.builder-image}\")\n+    public String builderImage;\n+}\n+----\n+\n+In this case the default value for `quarkus.native.builder-image` will be provided by the platform. The user will still be able to set the desired value for `quarkus.native.builder-image` in its `application.properties`, of course. But in case it's not customized by the user, the default value will be coming from the platform properties.\n+A platform properties file for the example above would contain (the actual value is provided as an example):\n+\n+[source,text]\n+----\n+platform.quarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-native-image:20.2.0-java11", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkzMjU4OQ=="}, "originalCommit": {"oid": "da6e537666a2d778387b5a355404e6db2ab5e1c4"}, "originalPosition": 129}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4024, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}