{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyMjI1MDY0", "number": 13016, "title": "Allow disabling the Swagger/GraphQL/Health/OpenAPI UIs at Runtime", "bodyText": "Fix #12942\nThis PR adds a Runtime config option to deactivate the\n\nSwagger UI (if the UI is included)\nGraphQL UI (if the UI is included) and GraphQL Schema\nHealth UI (if the UI is included)\nOpenAPI Schema\n\nAs a example, if you build a REST Application with Swagger UI and you do a quarkus.swagger-ui.always-include=true, meaning that the UI will be included in the jar artefact, you can still disable the ui by starting the app:\njava -jar -Dquarkus.swagger-ui.enable=false target/yourapp-1.0.0-SNAPSHOT-runner.jar\nSigned-off-by:Phillip Kruger phillip.kruger@gmail.com", "createdAt": "2020-10-29T12:02:23Z", "url": "https://github.com/quarkusio/quarkus/pull/13016", "merged": true, "mergeCommit": {"oid": "d26b9d1466b930a2e83b3ffcdda666813eb6863c"}, "closed": true, "closedAt": "2020-11-05T13:23:57Z", "author": {"login": "phillip-kruger"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXTCwZAFqTUxOTcyNDcxOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZiT2qAFqTUyNDI1MzgyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5NzI0NzE4", "url": "https://github.com/quarkusio/quarkus/pull/13016#pullrequestreview-519724718", "createdAt": "2020-10-29T14:28:42Z", "commit": {"oid": "04b87964966720881baa42f14105ab96f73652c7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDoyODo0MlrOHqegaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDoyODo0MlrOHqegaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMwMjA1Nw==", "bodyText": "Is this class meant to be used outside the extension? Otherwise it would be nice to be marked as package-private to avoid being listed in https://quarkus.io/guides/all-builditems", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r514302057", "createdAt": "2020-10-29T14:28:42Z", "author": {"login": "gastaldi"}, "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/FinalDestinationBuildItem.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.quarkus.smallrye.graphql.deployment;\n+\n+import io.quarkus.builder.item.SimpleBuildItem;\n+\n+public final class FinalDestinationBuildItem extends SimpleBuildItem {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04b87964966720881baa42f14105ab96f73652c7"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5NzMwMjYz", "url": "https://github.com/quarkusio/quarkus/pull/13016#pullrequestreview-519730263", "createdAt": "2020-10-29T14:33:43Z", "commit": {"oid": "04b87964966720881baa42f14105ab96f73652c7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDozMzo0M1rOHqev7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDozODowN1rOHqe-Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMwNjAzMQ==", "bodyText": "Maybe make the name more specific to the extension?", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r514306031", "createdAt": "2020-10-29T14:33:43Z", "author": {"login": "gsmet"}, "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/FinalDestinationBuildItem.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.quarkus.smallrye.graphql.deployment;\n+\n+import io.quarkus.builder.item.SimpleBuildItem;\n+\n+public final class FinalDestinationBuildItem extends SimpleBuildItem {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04b87964966720881baa42f14105ab96f73652c7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMwNjgwMg==", "bodyText": "I was thinking about this yesterday and my first inclination was to have expose defaulting to true.\nJust a proposal, I don't know what's best really :).", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r514306802", "createdAt": "2020-10-29T14:34:39Z", "author": {"login": "gsmet"}, "path": "extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLRuntimeConfig.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package io.quarkus.smallrye.graphql.runtime;\n+\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigPhase;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+\n+@ConfigRoot(name = \"smallrye-graphql\", phase = ConfigPhase.RUN_TIME)\n+public class SmallRyeGraphQLRuntimeConfig {\n+\n+    /**\n+     * Deactivate the graphql schema and graphql-ui endpoint.\n+     */\n+    @ConfigItem(defaultValue = \"false\")\n+    public boolean deactivate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04b87964966720881baa42f14105ab96f73652c7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMwOTY0Mw==", "bodyText": "Between enable and deactivate, it's going to be a bit hard to guess what will be going on :).\nI wonder if we should simply move this one to runtime and have something like:\n\nalwaysInclude: defines if Swagger UI is included in the package or not\nenable: defines if it's exposed or not. And this would be a runtime config.", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r514309643", "createdAt": "2020-10-29T14:38:07Z", "author": {"login": "gsmet"}, "path": "extensions/swagger-ui/deployment/src/main/java/io/quarkus/swaggerui/deployment/SwaggerUiConfig.java", "diffHunk": "@@ -0,0 +1,267 @@\n+package io.quarkus.swaggerui.deployment;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+import io.smallrye.openapi.ui.DocExpansion;\n+import io.smallrye.openapi.ui.HttpMethod;\n+import io.smallrye.openapi.ui.ThemeHref;\n+\n+@ConfigRoot\n+public class SwaggerUiConfig {\n+\n+    /**\n+     * The path where Swagger UI is available.\n+     * <p>\n+     * The value `/` is not allowed as it blocks the application from serving anything else.\n+     */\n+    @ConfigItem(defaultValue = \"/swagger-ui\")\n+    String path;\n+\n+    /**\n+     * If this should be included every time. By default this is only included when the application is running\n+     * in dev mode.\n+     */\n+    @ConfigItem\n+    boolean alwaysInclude;\n+\n+    /**\n+     * If Swagger UI should be enabled. By default, Swagger UI is enabled.\n+     */\n+    @ConfigItem(defaultValue = \"true\")\n+    boolean enable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04b87964966720881baa42f14105ab96f73652c7"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMjc3NDg5", "url": "https://github.com/quarkusio/quarkus/pull/13016#pullrequestreview-521277489", "createdAt": "2020-11-02T00:08:05Z", "commit": {"oid": "4d99c42234e5cf72306521af38225421bddeff74"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMzg1MzQ1", "url": "https://github.com/quarkusio/quarkus/pull/13016#pullrequestreview-521385345", "createdAt": "2020-11-02T07:37:31Z", "commit": {"oid": "85cc5e1b2976e0e44014d6a2655fd5a0e3069b23"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNDk2Nzc1", "url": "https://github.com/quarkusio/quarkus/pull/13016#pullrequestreview-521496775", "createdAt": "2020-11-02T10:17:43Z", "commit": {"oid": "85cc5e1b2976e0e44014d6a2655fd5a0e3069b23"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMDoxNzo0NFrOHr-LlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMDozNjozNFrOHr-33A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg2OTU4OQ==", "bodyText": "We tend to avoid that and prefer parameter injection. Otherwise you completely lose the dependencies.", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r515869589", "createdAt": "2020-11-02T10:17:44Z", "author": {"login": "gsmet"}, "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java", "diffHunk": "@@ -94,6 +97,9 @@\n \n     SmallRyeGraphQLConfig quarkusConfig;\n \n+    @Inject\n+    LaunchModeBuildItem launch;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85cc5e1b2976e0e44014d6a2655fd5a0e3069b23"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3MDUzOQ==", "bodyText": "You should make this static and pass the parameters here.\nIn a perfect world, the config would also be injected in the build steps that require it.", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r515870539", "createdAt": "2020-11-02T10:19:16Z", "author": {"login": "gsmet"}, "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java", "diffHunk": "@@ -412,63 +426,80 @@ private boolean shouldActivateService(Capabilities capabilities,\n     // UI Related\n \n     @BuildStep\n-    @Record(ExecutionTime.STATIC_INIT)\n-    void registerGraphQLUiServletExtension(\n-            BuildProducer<RouteBuildItem> routeProducer,\n+    void getGraphqlUiFinalDestination(\n             BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n             BuildProducer<NativeImageResourceBuildItem> nativeImageResourceProducer,\n             BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageDisplayableEndpointProducer,\n-            SmallRyeGraphQLRecorder recorder,\n-            LaunchModeBuildItem launchMode,\n             HttpRootPathBuildItem httpRootPath,\n-            CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n+            CurateOutcomeBuildItem curateOutcomeBuildItem,\n+            BuildProducer<SmallRyeGraphQLBuildItem> smallRyeGraphQLBuildProducer) throws Exception {\n \n-        if (!quarkusConfig.ui.enable) {\n-            return;\n-        }\n-        if (\"/\".equals(quarkusConfig.ui.rootPath)) {\n-            throw new ConfigurationError(\n-                    \"quarkus.smallrye-graphql.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n-        }\n+        if (shouldInclude()) {\n \n-        String graphQLPath = httpRootPath.adjustPath(quarkusConfig.rootPath);\n+            if (\"/\".equals(quarkusConfig.ui.rootPath)) {\n+                throw new ConfigurationError(\n+                        \"quarkus.smallrye-graphql.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n+            }\n \n-        AppArtifact artifact = WebJarUtil.getAppArtifact(curateOutcomeBuildItem, GRAPHQL_UI_WEBJAR_GROUP_ID,\n-                GRAPHQL_UI_WEBJAR_ARTIFACT_ID);\n-        if (launchMode.getLaunchMode().isDevOrTest()) {\n-            Path tempPath = WebJarUtil.devOrTest(curateOutcomeBuildItem, launchMode, artifact, GRAPHQL_UI_WEBJAR_PREFIX);\n-            WebJarUtil.updateUrl(tempPath.resolve(FILE_TO_UPDATE), graphQLPath, LINE_TO_UPDATE, LINE_FORMAT);\n+            String graphQLPath = httpRootPath.adjustPath(quarkusConfig.rootPath);\n \n-            Handler<RoutingContext> handler = recorder.uiHandler(tempPath.toAbsolutePath().toString(),\n-                    httpRootPath.adjustPath(quarkusConfig.ui.rootPath));\n-            routeProducer.produce(new RouteBuildItem(quarkusConfig.ui.rootPath, handler));\n-            routeProducer.produce(new RouteBuildItem(quarkusConfig.ui.rootPath + \"/*\", handler));\n-            notFoundPageDisplayableEndpointProducer\n-                    .produce(new NotFoundPageDisplayableEndpointBuildItem(quarkusConfig.ui.rootPath + \"/\"));\n+            AppArtifact artifact = WebJarUtil.getAppArtifact(curateOutcomeBuildItem, GRAPHQL_UI_WEBJAR_GROUP_ID,\n+                    GRAPHQL_UI_WEBJAR_ARTIFACT_ID);\n+            if (launch.getLaunchMode().isDevOrTest()) {\n+                Path tempPath = WebJarUtil.devOrTest(curateOutcomeBuildItem, launch, artifact, GRAPHQL_UI_WEBJAR_PREFIX);\n+                WebJarUtil.updateUrl(tempPath.resolve(FILE_TO_UPDATE), graphQLPath, LINE_TO_UPDATE, LINE_FORMAT);\n+\n+                smallRyeGraphQLBuildProducer.produce(new SmallRyeGraphQLBuildItem(tempPath.toAbsolutePath().toString(),\n+                        httpRootPath.adjustPath(quarkusConfig.ui.rootPath)));\n+                notFoundPageDisplayableEndpointProducer\n+                        .produce(new NotFoundPageDisplayableEndpointBuildItem(quarkusConfig.ui.rootPath + \"/\"));\n \n-        } else if (quarkusConfig.ui.alwaysInclude) {\n+            } else {\n+                Map<String, byte[]> files = WebJarUtil.production(curateOutcomeBuildItem, artifact, GRAPHQL_UI_WEBJAR_PREFIX);\n \n-            Map<String, byte[]> files = WebJarUtil.production(curateOutcomeBuildItem, artifact, GRAPHQL_UI_WEBJAR_PREFIX);\n+                for (Map.Entry<String, byte[]> file : files.entrySet()) {\n \n-            for (Map.Entry<String, byte[]> file : files.entrySet()) {\n+                    String fileName = file.getKey();\n+                    byte[] content = file.getValue();\n+                    if (fileName.endsWith(FILE_TO_UPDATE)) {\n+                        content = WebJarUtil\n+                                .updateUrl(new String(content, StandardCharsets.UTF_8), graphQLPath, LINE_TO_UPDATE,\n+                                        LINE_FORMAT)\n+                                .getBytes(StandardCharsets.UTF_8);\n+                    }\n+                    fileName = GRAPHQL_UI_FINAL_DESTINATION + \"/\" + fileName;\n \n-                String fileName = file.getKey();\n-                byte[] content = file.getValue();\n-                if (fileName.endsWith(FILE_TO_UPDATE)) {\n-                    content = WebJarUtil\n-                            .updateUrl(new String(content, StandardCharsets.UTF_8), graphQLPath, LINE_TO_UPDATE, LINE_FORMAT)\n-                            .getBytes(StandardCharsets.UTF_8);\n+                    generatedResourceProducer.produce(new GeneratedResourceBuildItem(fileName, content));\n+                    nativeImageResourceProducer.produce(new NativeImageResourceBuildItem(fileName));\n                 }\n-                fileName = GRAPHQL_UI_FINAL_DESTINATION + \"/\" + fileName;\n \n-                generatedResourceProducer.produce(new GeneratedResourceBuildItem(fileName, content));\n-                nativeImageResourceProducer.produce(new NativeImageResourceBuildItem(fileName));\n+                smallRyeGraphQLBuildProducer.produce(new SmallRyeGraphQLBuildItem(GRAPHQL_UI_FINAL_DESTINATION,\n+                        httpRootPath.adjustPath(quarkusConfig.ui.rootPath)));\n             }\n+        }\n+    }\n \n-            Handler<RoutingContext> handler = recorder\n-                    .uiHandler(GRAPHQL_UI_FINAL_DESTINATION, httpRootPath.adjustPath(quarkusConfig.ui.rootPath));\n+    @BuildStep\n+    @Record(ExecutionTime.RUNTIME_INIT)\n+    void registerGraphQLUiHandler(\n+            BuildProducer<RouteBuildItem> routeProducer,\n+            SmallRyeGraphQLRecorder recorder,\n+            SmallRyeGraphQLRuntimeConfig runtimeConfig,\n+            SmallRyeGraphQLBuildItem smallRyeGraphQLBuildItem) throws Exception {\n+\n+        if (shouldInclude()) {\n+            Handler<RoutingContext> handler = recorder.uiHandler(smallRyeGraphQLBuildItem.getGraphqlUiFinalDestination(),\n+                    smallRyeGraphQLBuildItem.getGraphqlUiPath(), runtimeConfig);\n             routeProducer.produce(new RouteBuildItem(quarkusConfig.ui.rootPath, handler));\n             routeProducer.produce(new RouteBuildItem(quarkusConfig.ui.rootPath + \"/*\", handler));\n         }\n     }\n+\n+    private boolean shouldInclude() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85cc5e1b2976e0e44014d6a2655fd5a0e3069b23"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3MjQ2Mw==", "bodyText": "So we always expose this one?", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r515872463", "createdAt": "2020-11-02T10:22:16Z", "author": {"login": "gsmet"}, "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java", "diffHunk": "@@ -166,12 +172,23 @@ void requireBody(BuildProducer<RequireBodyHandlerBuildItem> requireBodyHandlerPr\n         requireBodyHandlerProducer.produce(new RequireBodyHandlerBuildItem());\n     }\n \n+    @Record(ExecutionTime.RUNTIME_INIT)\n+    @BuildStep\n+    void buildSchemaEndpoint(\n+            BuildProducer<RouteBuildItem> routeProducer,\n+            SmallRyeGraphQLRecorder recorder,\n+            SmallRyeGraphQLRuntimeConfig runtimeConfig) {\n+\n+        Handler<RoutingContext> schemaHandler = recorder.schemaHandler(runtimeConfig);\n+        routeProducer.produce(\n+                new RouteBuildItem(quarkusConfig.rootPath + SCHEMA_PATH, schemaHandler, HandlerType.BLOCKING));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85cc5e1b2976e0e44014d6a2655fd5a0e3069b23"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3MzIzNg==", "bodyText": "I don't understand this change? We certainly prefer having proper default values.", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r515873236", "createdAt": "2020-11-02T10:23:35Z", "author": {"login": "gsmet"}, "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLUIConfig.java", "diffHunk": "@@ -17,12 +19,7 @@\n      * Always include the UI. By default this will only be included in dev and test.\n      * Setting this to true will also include the UI in Prod\n      */\n-    @ConfigItem(defaultValue = \"false\")\n-    boolean alwaysInclude;\n+    @ConfigItem\n+    Optional<Boolean> alwaysInclude;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85cc5e1b2976e0e44014d6a2655fd5a0e3069b23"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3NDM4NQ==", "bodyText": "I would simplify this by doing:\nif (!runtimeConfig.enable) {\n    event.response().setStatusCode(404);\n    event.response().end();\n    return;\n}\n\nand avoid the else.\nIn general, it's good practice to evacuate the special cases at the beginning to keep the general logic simple.", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r515874385", "createdAt": "2020-11-02T10:25:28Z", "author": {"login": "gsmet"}, "path": "extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLRecorder.java", "diffHunk": "@@ -52,18 +53,23 @@ public void createExecutionService(BeanContainer beanContainer, Schema schema) {\n         return new Handler<RoutingContext>() {\n             @Override\n             public void handle(RoutingContext event) {\n-                if (event.normalisedPath().length() == graphqlUiPath.length()) {\n+                if (runtimeConfig.enable) {\n+                    if (event.normalisedPath().length() == graphqlUiPath.length()) {\n \n-                    event.response().setStatusCode(302);\n-                    event.response().headers().set(HttpHeaders.LOCATION, graphqlUiPath + \"/\");\n+                        event.response().setStatusCode(302);\n+                        event.response().headers().set(HttpHeaders.LOCATION, graphqlUiPath + \"/\");\n+                        event.response().end();\n+                        return;\n+                    } else if (event.normalisedPath().length() == graphqlUiPath.length() + 1) {\n+                        event.reroute(graphqlUiPath + \"/index.html\");\n+                        return;\n+                    }\n+\n+                    staticHandler.handle(event);\n+                } else {\n+                    event.response().setStatusCode(404);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85cc5e1b2976e0e44014d6a2655fd5a0e3069b23"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3NDgzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * If GraphQL UI should be enabled. By default, GraphQL UI is enabled.\n          \n          \n            \n                 * If GraphQL UI should be enabled. By default, GraphQL UI is enabled if it is included (see {@code always-include}).", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r515874836", "createdAt": "2020-11-02T10:26:13Z", "author": {"login": "gsmet"}, "path": "extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLRuntimeConfig.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package io.quarkus.smallrye.graphql.runtime;\n+\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigPhase;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+\n+@ConfigRoot(name = \"smallrye-graphql\", phase = ConfigPhase.RUN_TIME)\n+public class SmallRyeGraphQLRuntimeConfig {\n+\n+    /**\n+     * If GraphQL UI should be enabled. By default, GraphQL UI is enabled.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85cc5e1b2976e0e44014d6a2655fd5a0e3069b23"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3NTA0MQ==", "bodyText": "Same here about simplifying the logic.", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r515875041", "createdAt": "2020-11-02T10:26:35Z", "author": {"login": "gsmet"}, "path": "extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLSchemaHandler.java", "diffHunk": "@@ -19,22 +19,46 @@\n     private static final String ALLOWED_METHODS = \"GET, OPTIONS\";\n     private static final String CONTENT_TYPE = \"text/plain; charset=UTF-8\";\n \n-    @Override\n-    public void handle(RoutingContext event) {\n-        GraphQLSchema graphQLSchema = CDI.current().select(GraphQLSchema.class).get();\n-        SchemaPrinter schemaPrinter = CDI.current().select(SchemaPrinter.class).get();\n+    private SmallRyeGraphQLRuntimeConfig graphQLRuntimeConfig;\n+\n+    public SmallRyeGraphQLSchemaHandler() {\n+    }\n \n-        String schemaString = schemaPrinter.print(graphQLSchema);\n+    public SmallRyeGraphQLSchemaHandler(SmallRyeGraphQLRuntimeConfig graphQLRuntimeConfig) {\n+        this.graphQLRuntimeConfig = graphQLRuntimeConfig;\n+    }\n+\n+    public SmallRyeGraphQLRuntimeConfig getSmallRyeGraphQLRuntimeConfig() {\n+        return graphQLRuntimeConfig;\n+    }\n \n+    public void setSmallRyeGraphQLRuntimeConfig(SmallRyeGraphQLRuntimeConfig graphQLRuntimeConfig) {\n+        this.graphQLRuntimeConfig = graphQLRuntimeConfig;\n+    }\n+\n+    @Override\n+    public void handle(RoutingContext event) {\n         HttpServerRequest request = event.request();\n         HttpServerResponse response = event.response();\n-        if (request.method().equals(HttpMethod.OPTIONS)) {\n-            response.headers().set(HttpHeaders.ALLOW, ALLOWED_METHODS);\n-        } else if (request.method().equals(HttpMethod.GET)) {\n-            response.headers().set(HttpHeaders.CONTENT_TYPE, CONTENT_TYPE);\n-            response.end(Buffer.buffer(schemaString));\n+\n+        if (graphQLRuntimeConfig.enable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85cc5e1b2976e0e44014d6a2655fd5a0e3069b23"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3NTM2Mw==", "bodyText": "All the comments I made for GraphQL also apply for the others.", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r515875363", "createdAt": "2020-11-02T10:27:09Z", "author": {"login": "gsmet"}, "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -110,6 +113,9 @@ public boolean getAsBoolean() {\n \n     HealthBuildTimeConfig config;\n \n+    @Inject\n+    private LaunchModeBuildItem launch;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85cc5e1b2976e0e44014d6a2655fd5a0e3069b23"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3NTY5MA==", "bodyText": "Again, let's avoid this. It has a default value, it needs to be clear to the users.", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r515875690", "createdAt": "2020-11-02T10:27:42Z", "author": {"login": "gsmet"}, "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthUIConfig.java", "diffHunk": "@@ -16,12 +18,7 @@\n      * Always include the UI. By default this will only be included in dev and test.\n      * Setting this to true will also include the UI in Prod\n      */\n-    @ConfigItem(defaultValue = \"false\")\n-    boolean alwaysInclude;\n+    @ConfigItem\n+    Optional<Boolean> alwaysInclude;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85cc5e1b2976e0e44014d6a2655fd5a0e3069b23"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3NzgxNg==", "bodyText": "It shouldn't be an Optional either.", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r515877816", "createdAt": "2020-11-02T10:31:14Z", "author": {"login": "gsmet"}, "path": "extensions/swagger-ui/deployment/src/main/java/io/quarkus/swaggerui/deployment/SwaggerUiConfig.java", "diffHunk": "@@ -0,0 +1,261 @@\n+package io.quarkus.swaggerui.deployment;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.OptionalInt;\n+\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+import io.smallrye.openapi.ui.DocExpansion;\n+import io.smallrye.openapi.ui.HttpMethod;\n+import io.smallrye.openapi.ui.ThemeHref;\n+\n+@ConfigRoot\n+public class SwaggerUiConfig {\n+\n+    /**\n+     * The path where Swagger UI is available.\n+     * <p>\n+     * The value `/` is not allowed as it blocks the application from serving anything else.\n+     */\n+    @ConfigItem(defaultValue = \"/swagger-ui\")\n+    String path;\n+\n+    /**\n+     * If this should be included every time. By default this is only included when the application is running\n+     * in dev mode.\n+     */\n+    @ConfigItem\n+    Optional<Boolean> alwaysInclude;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85cc5e1b2976e0e44014d6a2655fd5a0e3069b23"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3ODE5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * If Swagger UI is included, it should be enabled/disabled. By default, Swagger UI is enabled.\n          \n          \n            \n                 * If Swagger UI is included, it should be enabled/disabled. By default, Swagger UI is enabled if it is included (see {@code always-include}).", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r515878195", "createdAt": "2020-11-02T10:31:53Z", "author": {"login": "gsmet"}, "path": "extensions/swagger-ui/runtime/src/main/java/io/quarkus/swaggerui/runtime/SwaggerUiRuntimeConfig.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package io.quarkus.swaggerui.runtime;\n+\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigPhase;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+\n+@ConfigRoot(phase = ConfigPhase.RUN_TIME)\n+public class SwaggerUiRuntimeConfig {\n+\n+    /**\n+     * If Swagger UI is included, it should be enabled/disabled. By default, Swagger UI is enabled.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85cc5e1b2976e0e44014d6a2655fd5a0e3069b23"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg4MDM3OA==", "bodyText": "Another option would be to return two different handlers depending on the runtime config. One just returning 404 and the other properly handling the requests.", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r515880378", "createdAt": "2020-11-02T10:35:39Z", "author": {"login": "gsmet"}, "path": "extensions/smallrye-health/deployment/src/main/java/io/quarkus/smallrye/health/deployment/SmallRyeHealthProcessor.java", "diffHunk": "@@ -339,59 +345,69 @@ public void transform(TransformationContext ctx) {\n     // UI\n \n     @BuildStep\n-    @Record(ExecutionTime.STATIC_INIT)\n     void registerUiExtension(\n-            BuildProducer<RouteBuildItem> routeProducer,\n             BuildProducer<GeneratedResourceBuildItem> generatedResourceProducer,\n             BuildProducer<NativeImageResourceBuildItem> nativeImageResourceProducer,\n             BuildProducer<NotFoundPageDisplayableEndpointBuildItem> notFoundPageDisplayableEndpointProducer,\n-            SmallRyeHealthRecorder recorder,\n-            LaunchModeBuildItem launchMode,\n             HttpRootPathBuildItem httpRootPath,\n-            CurateOutcomeBuildItem curateOutcomeBuildItem) throws Exception {\n+            CurateOutcomeBuildItem curateOutcomeBuildItem,\n+            BuildProducer<SmallRyeHealthBuildItem> smallRyeHealthBuildProducer) throws Exception {\n \n-        if (!health.ui.enable) {\n-            return;\n-        }\n-        if (\"/\".equals(health.ui.rootPath)) {\n-            throw new ConfigurationError(\n-                    \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n-        }\n+        if (shouldInclude()) {\n \n-        String healthPath = httpRootPath.adjustPath(health.rootPath);\n+            if (\"/\".equals(health.ui.rootPath)) {\n+                throw new ConfigurationError(\n+                        \"quarkus.smallrye-health.root-path-ui was set to \\\"/\\\", this is not allowed as it blocks the application from serving anything else.\");\n+            }\n \n-        AppArtifact artifact = WebJarUtil.getAppArtifact(curateOutcomeBuildItem, HEALTH_UI_WEBJAR_GROUP_ID,\n-                HEALTH_UI_WEBJAR_ARTIFACT_ID);\n+            String healthPath = httpRootPath.adjustPath(health.rootPath);\n \n-        if (launchMode.getLaunchMode().isDevOrTest()) {\n-            Path tempPath = WebJarUtil.devOrTest(curateOutcomeBuildItem, launchMode, artifact, HEALTH_UI_WEBJAR_PREFIX);\n-            updateApiUrl(tempPath.resolve(FILE_TO_UPDATE), healthPath);\n+            AppArtifact artifact = WebJarUtil.getAppArtifact(curateOutcomeBuildItem, HEALTH_UI_WEBJAR_GROUP_ID,\n+                    HEALTH_UI_WEBJAR_ARTIFACT_ID);\n \n-            Handler<RoutingContext> handler = recorder.uiHandler(tempPath.toAbsolutePath().toString(),\n-                    httpRootPath.adjustPath(health.ui.rootPath));\n-            routeProducer.produce(new RouteBuildItem(health.ui.rootPath, handler));\n-            routeProducer.produce(new RouteBuildItem(health.ui.rootPath + \"/*\", handler));\n-            notFoundPageDisplayableEndpointProducer\n-                    .produce(new NotFoundPageDisplayableEndpointBuildItem(health.ui.rootPath + \"/\"));\n-        } else if (health.ui.alwaysInclude) {\n-            Map<String, byte[]> files = WebJarUtil.production(curateOutcomeBuildItem, artifact, HEALTH_UI_WEBJAR_PREFIX);\n-\n-            for (Map.Entry<String, byte[]> file : files.entrySet()) {\n-\n-                String fileName = file.getKey();\n-                byte[] content = file.getValue();\n-                if (fileName.endsWith(FILE_TO_UPDATE)) {\n-                    content = updateApiUrl(new String(content, StandardCharsets.UTF_8), healthPath)\n-                            .getBytes(StandardCharsets.UTF_8);\n+            if (launch.getLaunchMode().isDevOrTest()) {\n+                Path tempPath = WebJarUtil.devOrTest(curateOutcomeBuildItem, launch, artifact, HEALTH_UI_WEBJAR_PREFIX);\n+                updateApiUrl(tempPath.resolve(FILE_TO_UPDATE), healthPath);\n+\n+                smallRyeHealthBuildProducer.produce(new SmallRyeHealthBuildItem(tempPath.toAbsolutePath().toString(),\n+                        httpRootPath.adjustPath(health.ui.rootPath)));\n+\n+                notFoundPageDisplayableEndpointProducer\n+                        .produce(new NotFoundPageDisplayableEndpointBuildItem(health.ui.rootPath + \"/\"));\n+            } else {\n+                Map<String, byte[]> files = WebJarUtil.production(curateOutcomeBuildItem, artifact, HEALTH_UI_WEBJAR_PREFIX);\n+\n+                for (Map.Entry<String, byte[]> file : files.entrySet()) {\n+\n+                    String fileName = file.getKey();\n+                    byte[] content = file.getValue();\n+                    if (fileName.endsWith(FILE_TO_UPDATE)) {\n+                        content = updateApiUrl(new String(content, StandardCharsets.UTF_8), healthPath)\n+                                .getBytes(StandardCharsets.UTF_8);\n+                    }\n+                    fileName = HEALTH_UI_FINAL_DESTINATION + \"/\" + fileName;\n+\n+                    generatedResourceProducer.produce(new GeneratedResourceBuildItem(fileName, content));\n+                    nativeImageResourceProducer.produce(new NativeImageResourceBuildItem(fileName));\n                 }\n-                fileName = HEALTH_UI_FINAL_DESTINATION + \"/\" + fileName;\n \n-                generatedResourceProducer.produce(new GeneratedResourceBuildItem(fileName, content));\n-                nativeImageResourceProducer.produce(new NativeImageResourceBuildItem(fileName));\n+                smallRyeHealthBuildProducer.produce(new SmallRyeHealthBuildItem(HEALTH_UI_FINAL_DESTINATION,\n+                        httpRootPath.adjustPath(health.ui.rootPath)));\n             }\n+        }\n+    }\n \n-            Handler<RoutingContext> handler = recorder\n-                    .uiHandler(HEALTH_UI_FINAL_DESTINATION, httpRootPath.adjustPath(health.ui.rootPath));\n+    @BuildStep\n+    @Record(ExecutionTime.RUNTIME_INIT)\n+    void registerGraphQLUiHandler(\n+            BuildProducer<RouteBuildItem> routeProducer,\n+            SmallRyeHealthRecorder recorder,\n+            SmallRyeHealthRuntimeConfig runtimeConfig,\n+            SmallRyeHealthBuildItem smallRyeHealthBuildItem) throws Exception {\n+\n+        if (shouldInclude()) {\n+            Handler<RoutingContext> handler = recorder.uiHandler(smallRyeHealthBuildItem.getHealthUiFinalDestination(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85cc5e1b2976e0e44014d6a2655fd5a0e3069b23"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg4MDkyNA==", "bodyText": "It would be better if the handler was created by the recorder. And you could use the same technique I mention below returning two different handlers depending on the config.", "url": "https://github.com/quarkusio/quarkus/pull/13016#discussion_r515880924", "createdAt": "2020-11-02T10:36:34Z", "author": {"login": "gsmet"}, "path": "extensions/smallrye-openapi/deployment/src/main/java/io/quarkus/smallrye/openapi/deployment/SmallRyeOpenApiProcessor.java", "diffHunk": "@@ -159,7 +162,8 @@ RouteBuildItem handler(LaunchModeBuildItem launch,\n             recorder.setupClDevMode(shutdownContext);\n             displayableEndpoints.produce(new NotFoundPageDisplayableEndpointBuildItem(openApiConfig.path));\n         }\n-        return new RouteBuildItem(openApiConfig.path, new OpenApiHandler(), HandlerType.BLOCKING);\n+        OpenApiHandler openApiHandler = new OpenApiHandler(openApiRuntimeConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85cc5e1b2976e0e44014d6a2655fd5a0e3069b23"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7344c5df7e99910c0e0543f6172643a54d85205", "author": {"user": {"login": "phillip-kruger", "name": "Phillip Kr\u00fcger"}}, "url": "https://github.com/quarkusio/quarkus/commit/a7344c5df7e99910c0e0543f6172643a54d85205", "committedDate": "2020-11-03T13:41:08Z", "message": "Allow disabling the UIs in Runtime.\n\nSigned-off-by: Phillip Kruger <phillip.kruger@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MjUzODI4", "url": "https://github.com/quarkusio/quarkus/pull/13016#pullrequestreview-524253828", "createdAt": "2020-11-05T13:23:48Z", "commit": {"oid": "a7344c5df7e99910c0e0543f6172643a54d85205"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1586, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}