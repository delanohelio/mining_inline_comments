{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2NzIzNjQ1", "number": 7263, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODo0NTowN1rODg-5Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOTo0MzoxOFrODhAHzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTExNDgyOnYy", "diffSide": "RIGHT", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/ReactiveMongoCollection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODo0NTowN1rOFrfW9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNjoyNzo0MFrOFsaQ_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE0Njg3MQ==", "bodyText": "There is one @deprecated not needed.", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r381146871", "createdAt": "2020-02-19T08:45:07Z", "author": {"login": "loicmathieu"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/ReactiveMongoCollection.java", "diffHunk": "@@ -20,8 +20,9 @@\n  * A reactive API to interact with a Mongo collection.\n  *\n  * @param <T> The type that this collection will encode documents from and decode documents to.\n- * @since 1.0\n+ * @deprecated @deprecated Use {@link io.quarkus.mongodb.reactive.ReactiveMongoCollection} instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a59e3ec04c5a6f5b58734b991f143a40a39365c6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExMTk5OQ==", "bodyText": "Fixed.", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r382111999", "createdAt": "2020-02-20T16:27:40Z", "author": {"login": "cescoffier"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/ReactiveMongoCollection.java", "diffHunk": "@@ -20,8 +20,9 @@\n  * A reactive API to interact with a Mongo collection.\n  *\n  * @param <T> The type that this collection will encode documents from and decode documents to.\n- * @since 1.0\n+ * @deprecated @deprecated Use {@link io.quarkus.mongodb.reactive.ReactiveMongoCollection} instead.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE0Njg3MQ=="}, "originalCommit": {"oid": "a59e3ec04c5a6f5b58734b991f143a40a39365c6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTE1OTI5OnYy", "diffSide": "LEFT", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/impl/ReactiveMongoCollectionImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODo1OTozMFrOFrfy5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNTo0Nzo0N1rOFsYscg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE1NDAyMQ==", "bodyText": "Needed for mongodb-panache", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r381154021", "createdAt": "2020-02-19T08:59:30Z", "author": {"login": "loicmathieu"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/impl/ReactiveMongoCollectionImpl.java", "diffHunk": "@@ -60,95 +58,69 @@ public MongoNamespace getNamespace() {\n         return collection.getNamespace();\n     }\n \n-    @Override\n-    public CodecRegistry getCodecRegistry() {\n-        return collection.getCodecRegistry();\n-    }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a59e3ec04c5a6f5b58734b991f143a40a39365c6"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA4NjI1OA==", "bodyText": "The method was just moved but is still there.", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r382086258", "createdAt": "2020-02-20T15:47:47Z", "author": {"login": "cescoffier"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/impl/ReactiveMongoCollectionImpl.java", "diffHunk": "@@ -60,95 +58,69 @@ public MongoNamespace getNamespace() {\n         return collection.getNamespace();\n     }\n \n-    @Override\n-    public CodecRegistry getCodecRegistry() {\n-        return collection.getCodecRegistry();\n-    }\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE1NDAyMQ=="}, "originalCommit": {"oid": "a59e3ec04c5a6f5b58734b991f143a40a39365c6"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTIzMDA4OnYy", "diffSide": "RIGHT", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOToyMToxM1rOFrgecQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNjoyNzo1NFrOFsaRkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2NTE2OQ==", "bodyText": "Missing an a  in the javadoc ?\n@return an {@link Uni} completed with the estimated number of documents", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r381165169", "createdAt": "2020-02-19T09:21:13Z", "author": {"login": "loicmathieu"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java", "diffHunk": "@@ -0,0 +1,1410 @@\n+package io.quarkus.mongodb.reactive;\n+\n+import java.util.List;\n+\n+import org.bson.Document;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.bson.conversions.Bson;\n+\n+import com.mongodb.MongoNamespace;\n+import com.mongodb.bulk.BulkWriteResult;\n+import com.mongodb.client.model.BulkWriteOptions;\n+import com.mongodb.client.model.CountOptions;\n+import com.mongodb.client.model.CreateIndexOptions;\n+import com.mongodb.client.model.DeleteOptions;\n+import com.mongodb.client.model.DropIndexOptions;\n+import com.mongodb.client.model.EstimatedDocumentCountOptions;\n+import com.mongodb.client.model.FindOneAndDeleteOptions;\n+import com.mongodb.client.model.FindOneAndReplaceOptions;\n+import com.mongodb.client.model.FindOneAndUpdateOptions;\n+import com.mongodb.client.model.IndexModel;\n+import com.mongodb.client.model.IndexOptions;\n+import com.mongodb.client.model.InsertManyOptions;\n+import com.mongodb.client.model.InsertOneOptions;\n+import com.mongodb.client.model.RenameCollectionOptions;\n+import com.mongodb.client.model.ReplaceOptions;\n+import com.mongodb.client.model.UpdateOptions;\n+import com.mongodb.client.model.WriteModel;\n+import com.mongodb.client.model.changestream.ChangeStreamDocument;\n+import com.mongodb.client.result.DeleteResult;\n+import com.mongodb.client.result.UpdateResult;\n+import com.mongodb.reactivestreams.client.ClientSession;\n+\n+import io.quarkus.mongodb.AggregateOptions;\n+import io.quarkus.mongodb.ChangeStreamOptions;\n+import io.quarkus.mongodb.DistinctOptions;\n+import io.quarkus.mongodb.FindOptions;\n+import io.quarkus.mongodb.MapReduceOptions;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+\n+/**\n+ * A reactive API to interact with a Mongo collection.\n+ *\n+ * @param <T> The type that this collection will encode documents from and decode documents to.\n+ * @since 1.0\n+ */\n+public interface ReactiveMongoCollection<T> {\n+\n+    /**\n+     * Gets the namespace of this collection.\n+     *\n+     * @return the namespace\n+     */\n+    MongoNamespace getNamespace();\n+\n+    /**\n+     * Get the class of documents stored in this collection.\n+     *\n+     * @return the class\n+     */\n+    Class<T> getDocumentClass();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @return n {@link Uni} completed with the estimated number of documents", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a59e3ec04c5a6f5b58734b991f143a40a39365c6"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA4OTU2MA==", "bodyText": "\"replace all\" is a broken pattern! Fixing...", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r382089560", "createdAt": "2020-02-20T15:52:32Z", "author": {"login": "cescoffier"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java", "diffHunk": "@@ -0,0 +1,1410 @@\n+package io.quarkus.mongodb.reactive;\n+\n+import java.util.List;\n+\n+import org.bson.Document;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.bson.conversions.Bson;\n+\n+import com.mongodb.MongoNamespace;\n+import com.mongodb.bulk.BulkWriteResult;\n+import com.mongodb.client.model.BulkWriteOptions;\n+import com.mongodb.client.model.CountOptions;\n+import com.mongodb.client.model.CreateIndexOptions;\n+import com.mongodb.client.model.DeleteOptions;\n+import com.mongodb.client.model.DropIndexOptions;\n+import com.mongodb.client.model.EstimatedDocumentCountOptions;\n+import com.mongodb.client.model.FindOneAndDeleteOptions;\n+import com.mongodb.client.model.FindOneAndReplaceOptions;\n+import com.mongodb.client.model.FindOneAndUpdateOptions;\n+import com.mongodb.client.model.IndexModel;\n+import com.mongodb.client.model.IndexOptions;\n+import com.mongodb.client.model.InsertManyOptions;\n+import com.mongodb.client.model.InsertOneOptions;\n+import com.mongodb.client.model.RenameCollectionOptions;\n+import com.mongodb.client.model.ReplaceOptions;\n+import com.mongodb.client.model.UpdateOptions;\n+import com.mongodb.client.model.WriteModel;\n+import com.mongodb.client.model.changestream.ChangeStreamDocument;\n+import com.mongodb.client.result.DeleteResult;\n+import com.mongodb.client.result.UpdateResult;\n+import com.mongodb.reactivestreams.client.ClientSession;\n+\n+import io.quarkus.mongodb.AggregateOptions;\n+import io.quarkus.mongodb.ChangeStreamOptions;\n+import io.quarkus.mongodb.DistinctOptions;\n+import io.quarkus.mongodb.FindOptions;\n+import io.quarkus.mongodb.MapReduceOptions;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+\n+/**\n+ * A reactive API to interact with a Mongo collection.\n+ *\n+ * @param <T> The type that this collection will encode documents from and decode documents to.\n+ * @since 1.0\n+ */\n+public interface ReactiveMongoCollection<T> {\n+\n+    /**\n+     * Gets the namespace of this collection.\n+     *\n+     * @return the namespace\n+     */\n+    MongoNamespace getNamespace();\n+\n+    /**\n+     * Get the class of documents stored in this collection.\n+     *\n+     * @return the class\n+     */\n+    Class<T> getDocumentClass();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @return n {@link Uni} completed with the estimated number of documents", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2NTE2OQ=="}, "originalCommit": {"oid": "a59e3ec04c5a6f5b58734b991f143a40a39365c6"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExMjE0Nw==", "bodyText": "Fixed.", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r382112147", "createdAt": "2020-02-20T16:27:54Z", "author": {"login": "cescoffier"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java", "diffHunk": "@@ -0,0 +1,1410 @@\n+package io.quarkus.mongodb.reactive;\n+\n+import java.util.List;\n+\n+import org.bson.Document;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.bson.conversions.Bson;\n+\n+import com.mongodb.MongoNamespace;\n+import com.mongodb.bulk.BulkWriteResult;\n+import com.mongodb.client.model.BulkWriteOptions;\n+import com.mongodb.client.model.CountOptions;\n+import com.mongodb.client.model.CreateIndexOptions;\n+import com.mongodb.client.model.DeleteOptions;\n+import com.mongodb.client.model.DropIndexOptions;\n+import com.mongodb.client.model.EstimatedDocumentCountOptions;\n+import com.mongodb.client.model.FindOneAndDeleteOptions;\n+import com.mongodb.client.model.FindOneAndReplaceOptions;\n+import com.mongodb.client.model.FindOneAndUpdateOptions;\n+import com.mongodb.client.model.IndexModel;\n+import com.mongodb.client.model.IndexOptions;\n+import com.mongodb.client.model.InsertManyOptions;\n+import com.mongodb.client.model.InsertOneOptions;\n+import com.mongodb.client.model.RenameCollectionOptions;\n+import com.mongodb.client.model.ReplaceOptions;\n+import com.mongodb.client.model.UpdateOptions;\n+import com.mongodb.client.model.WriteModel;\n+import com.mongodb.client.model.changestream.ChangeStreamDocument;\n+import com.mongodb.client.result.DeleteResult;\n+import com.mongodb.client.result.UpdateResult;\n+import com.mongodb.reactivestreams.client.ClientSession;\n+\n+import io.quarkus.mongodb.AggregateOptions;\n+import io.quarkus.mongodb.ChangeStreamOptions;\n+import io.quarkus.mongodb.DistinctOptions;\n+import io.quarkus.mongodb.FindOptions;\n+import io.quarkus.mongodb.MapReduceOptions;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+\n+/**\n+ * A reactive API to interact with a Mongo collection.\n+ *\n+ * @param <T> The type that this collection will encode documents from and decode documents to.\n+ * @since 1.0\n+ */\n+public interface ReactiveMongoCollection<T> {\n+\n+    /**\n+     * Gets the namespace of this collection.\n+     *\n+     * @return the namespace\n+     */\n+    MongoNamespace getNamespace();\n+\n+    /**\n+     * Get the class of documents stored in this collection.\n+     *\n+     * @return the class\n+     */\n+    Class<T> getDocumentClass();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @return n {@link Uni} completed with the estimated number of documents", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2NTE2OQ=="}, "originalCommit": {"oid": "a59e3ec04c5a6f5b58734b991f143a40a39365c6"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTIzMTU4OnYy", "diffSide": "RIGHT", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOToyMTozN1rOFrgfUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNjoyODowM1rOFsaR9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2NTM5NQ==", "bodyText": "Same here, missing the ain the javadoc ?", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r381165395", "createdAt": "2020-02-19T09:21:37Z", "author": {"login": "loicmathieu"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java", "diffHunk": "@@ -0,0 +1,1410 @@\n+package io.quarkus.mongodb.reactive;\n+\n+import java.util.List;\n+\n+import org.bson.Document;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.bson.conversions.Bson;\n+\n+import com.mongodb.MongoNamespace;\n+import com.mongodb.bulk.BulkWriteResult;\n+import com.mongodb.client.model.BulkWriteOptions;\n+import com.mongodb.client.model.CountOptions;\n+import com.mongodb.client.model.CreateIndexOptions;\n+import com.mongodb.client.model.DeleteOptions;\n+import com.mongodb.client.model.DropIndexOptions;\n+import com.mongodb.client.model.EstimatedDocumentCountOptions;\n+import com.mongodb.client.model.FindOneAndDeleteOptions;\n+import com.mongodb.client.model.FindOneAndReplaceOptions;\n+import com.mongodb.client.model.FindOneAndUpdateOptions;\n+import com.mongodb.client.model.IndexModel;\n+import com.mongodb.client.model.IndexOptions;\n+import com.mongodb.client.model.InsertManyOptions;\n+import com.mongodb.client.model.InsertOneOptions;\n+import com.mongodb.client.model.RenameCollectionOptions;\n+import com.mongodb.client.model.ReplaceOptions;\n+import com.mongodb.client.model.UpdateOptions;\n+import com.mongodb.client.model.WriteModel;\n+import com.mongodb.client.model.changestream.ChangeStreamDocument;\n+import com.mongodb.client.result.DeleteResult;\n+import com.mongodb.client.result.UpdateResult;\n+import com.mongodb.reactivestreams.client.ClientSession;\n+\n+import io.quarkus.mongodb.AggregateOptions;\n+import io.quarkus.mongodb.ChangeStreamOptions;\n+import io.quarkus.mongodb.DistinctOptions;\n+import io.quarkus.mongodb.FindOptions;\n+import io.quarkus.mongodb.MapReduceOptions;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+\n+/**\n+ * A reactive API to interact with a Mongo collection.\n+ *\n+ * @param <T> The type that this collection will encode documents from and decode documents to.\n+ * @since 1.0\n+ */\n+public interface ReactiveMongoCollection<T> {\n+\n+    /**\n+     * Gets the namespace of this collection.\n+     *\n+     * @return the namespace\n+     */\n+    MongoNamespace getNamespace();\n+\n+    /**\n+     * Get the class of documents stored in this collection.\n+     *\n+     * @return the class\n+     */\n+    Class<T> getDocumentClass();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @return n {@link Uni} completed with the estimated number of documents\n+     */\n+    Uni<Long> estimatedDocumentCount();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the estimated number of documents", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a59e3ec04c5a6f5b58734b991f143a40a39365c6"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA4OTcxMQ==", "bodyText": "see my previous comment...", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r382089711", "createdAt": "2020-02-20T15:52:45Z", "author": {"login": "cescoffier"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java", "diffHunk": "@@ -0,0 +1,1410 @@\n+package io.quarkus.mongodb.reactive;\n+\n+import java.util.List;\n+\n+import org.bson.Document;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.bson.conversions.Bson;\n+\n+import com.mongodb.MongoNamespace;\n+import com.mongodb.bulk.BulkWriteResult;\n+import com.mongodb.client.model.BulkWriteOptions;\n+import com.mongodb.client.model.CountOptions;\n+import com.mongodb.client.model.CreateIndexOptions;\n+import com.mongodb.client.model.DeleteOptions;\n+import com.mongodb.client.model.DropIndexOptions;\n+import com.mongodb.client.model.EstimatedDocumentCountOptions;\n+import com.mongodb.client.model.FindOneAndDeleteOptions;\n+import com.mongodb.client.model.FindOneAndReplaceOptions;\n+import com.mongodb.client.model.FindOneAndUpdateOptions;\n+import com.mongodb.client.model.IndexModel;\n+import com.mongodb.client.model.IndexOptions;\n+import com.mongodb.client.model.InsertManyOptions;\n+import com.mongodb.client.model.InsertOneOptions;\n+import com.mongodb.client.model.RenameCollectionOptions;\n+import com.mongodb.client.model.ReplaceOptions;\n+import com.mongodb.client.model.UpdateOptions;\n+import com.mongodb.client.model.WriteModel;\n+import com.mongodb.client.model.changestream.ChangeStreamDocument;\n+import com.mongodb.client.result.DeleteResult;\n+import com.mongodb.client.result.UpdateResult;\n+import com.mongodb.reactivestreams.client.ClientSession;\n+\n+import io.quarkus.mongodb.AggregateOptions;\n+import io.quarkus.mongodb.ChangeStreamOptions;\n+import io.quarkus.mongodb.DistinctOptions;\n+import io.quarkus.mongodb.FindOptions;\n+import io.quarkus.mongodb.MapReduceOptions;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+\n+/**\n+ * A reactive API to interact with a Mongo collection.\n+ *\n+ * @param <T> The type that this collection will encode documents from and decode documents to.\n+ * @since 1.0\n+ */\n+public interface ReactiveMongoCollection<T> {\n+\n+    /**\n+     * Gets the namespace of this collection.\n+     *\n+     * @return the namespace\n+     */\n+    MongoNamespace getNamespace();\n+\n+    /**\n+     * Get the class of documents stored in this collection.\n+     *\n+     * @return the class\n+     */\n+    Class<T> getDocumentClass();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @return n {@link Uni} completed with the estimated number of documents\n+     */\n+    Uni<Long> estimatedDocumentCount();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the estimated number of documents", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2NTM5NQ=="}, "originalCommit": {"oid": "a59e3ec04c5a6f5b58734b991f143a40a39365c6"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExMjI0NA==", "bodyText": "Fixed.", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r382112244", "createdAt": "2020-02-20T16:28:03Z", "author": {"login": "cescoffier"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java", "diffHunk": "@@ -0,0 +1,1410 @@\n+package io.quarkus.mongodb.reactive;\n+\n+import java.util.List;\n+\n+import org.bson.Document;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.bson.conversions.Bson;\n+\n+import com.mongodb.MongoNamespace;\n+import com.mongodb.bulk.BulkWriteResult;\n+import com.mongodb.client.model.BulkWriteOptions;\n+import com.mongodb.client.model.CountOptions;\n+import com.mongodb.client.model.CreateIndexOptions;\n+import com.mongodb.client.model.DeleteOptions;\n+import com.mongodb.client.model.DropIndexOptions;\n+import com.mongodb.client.model.EstimatedDocumentCountOptions;\n+import com.mongodb.client.model.FindOneAndDeleteOptions;\n+import com.mongodb.client.model.FindOneAndReplaceOptions;\n+import com.mongodb.client.model.FindOneAndUpdateOptions;\n+import com.mongodb.client.model.IndexModel;\n+import com.mongodb.client.model.IndexOptions;\n+import com.mongodb.client.model.InsertManyOptions;\n+import com.mongodb.client.model.InsertOneOptions;\n+import com.mongodb.client.model.RenameCollectionOptions;\n+import com.mongodb.client.model.ReplaceOptions;\n+import com.mongodb.client.model.UpdateOptions;\n+import com.mongodb.client.model.WriteModel;\n+import com.mongodb.client.model.changestream.ChangeStreamDocument;\n+import com.mongodb.client.result.DeleteResult;\n+import com.mongodb.client.result.UpdateResult;\n+import com.mongodb.reactivestreams.client.ClientSession;\n+\n+import io.quarkus.mongodb.AggregateOptions;\n+import io.quarkus.mongodb.ChangeStreamOptions;\n+import io.quarkus.mongodb.DistinctOptions;\n+import io.quarkus.mongodb.FindOptions;\n+import io.quarkus.mongodb.MapReduceOptions;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+\n+/**\n+ * A reactive API to interact with a Mongo collection.\n+ *\n+ * @param <T> The type that this collection will encode documents from and decode documents to.\n+ * @since 1.0\n+ */\n+public interface ReactiveMongoCollection<T> {\n+\n+    /**\n+     * Gets the namespace of this collection.\n+     *\n+     * @return the namespace\n+     */\n+    MongoNamespace getNamespace();\n+\n+    /**\n+     * Get the class of documents stored in this collection.\n+     *\n+     * @return the class\n+     */\n+    Class<T> getDocumentClass();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @return n {@link Uni} completed with the estimated number of documents\n+     */\n+    Uni<Long> estimatedDocumentCount();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the estimated number of documents", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2NTM5NQ=="}, "originalCommit": {"oid": "a59e3ec04c5a6f5b58734b991f143a40a39365c6"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTIzMzc2OnYy", "diffSide": "RIGHT", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOToyMjoxNlrOFrggtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNjoyODoyMlrOFsaS6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2NTc0OA==", "bodyText": "Same in the other places (I didn't add a review comment for all) ...", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r381165748", "createdAt": "2020-02-19T09:22:16Z", "author": {"login": "loicmathieu"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java", "diffHunk": "@@ -0,0 +1,1410 @@\n+package io.quarkus.mongodb.reactive;\n+\n+import java.util.List;\n+\n+import org.bson.Document;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.bson.conversions.Bson;\n+\n+import com.mongodb.MongoNamespace;\n+import com.mongodb.bulk.BulkWriteResult;\n+import com.mongodb.client.model.BulkWriteOptions;\n+import com.mongodb.client.model.CountOptions;\n+import com.mongodb.client.model.CreateIndexOptions;\n+import com.mongodb.client.model.DeleteOptions;\n+import com.mongodb.client.model.DropIndexOptions;\n+import com.mongodb.client.model.EstimatedDocumentCountOptions;\n+import com.mongodb.client.model.FindOneAndDeleteOptions;\n+import com.mongodb.client.model.FindOneAndReplaceOptions;\n+import com.mongodb.client.model.FindOneAndUpdateOptions;\n+import com.mongodb.client.model.IndexModel;\n+import com.mongodb.client.model.IndexOptions;\n+import com.mongodb.client.model.InsertManyOptions;\n+import com.mongodb.client.model.InsertOneOptions;\n+import com.mongodb.client.model.RenameCollectionOptions;\n+import com.mongodb.client.model.ReplaceOptions;\n+import com.mongodb.client.model.UpdateOptions;\n+import com.mongodb.client.model.WriteModel;\n+import com.mongodb.client.model.changestream.ChangeStreamDocument;\n+import com.mongodb.client.result.DeleteResult;\n+import com.mongodb.client.result.UpdateResult;\n+import com.mongodb.reactivestreams.client.ClientSession;\n+\n+import io.quarkus.mongodb.AggregateOptions;\n+import io.quarkus.mongodb.ChangeStreamOptions;\n+import io.quarkus.mongodb.DistinctOptions;\n+import io.quarkus.mongodb.FindOptions;\n+import io.quarkus.mongodb.MapReduceOptions;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+\n+/**\n+ * A reactive API to interact with a Mongo collection.\n+ *\n+ * @param <T> The type that this collection will encode documents from and decode documents to.\n+ * @since 1.0\n+ */\n+public interface ReactiveMongoCollection<T> {\n+\n+    /**\n+     * Gets the namespace of this collection.\n+     *\n+     * @return the namespace\n+     */\n+    MongoNamespace getNamespace();\n+\n+    /**\n+     * Get the class of documents stored in this collection.\n+     *\n+     * @return the class\n+     */\n+    Class<T> getDocumentClass();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @return n {@link Uni} completed with the estimated number of documents\n+     */\n+    Uni<Long> estimatedDocumentCount();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the estimated number of documents\n+     */\n+    Uni<Long> estimatedDocumentCount(EstimatedDocumentCountOptions options);\n+\n+    /**\n+     * Counts the number of documents in the collection.\n+     *\n+     * @return n {@link Uni} completed with the number of documents", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a59e3ec04c5a6f5b58734b991f143a40a39365c6"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExMjQ4OQ==", "bodyText": "Fixed.", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r382112489", "createdAt": "2020-02-20T16:28:22Z", "author": {"login": "cescoffier"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java", "diffHunk": "@@ -0,0 +1,1410 @@\n+package io.quarkus.mongodb.reactive;\n+\n+import java.util.List;\n+\n+import org.bson.Document;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.bson.conversions.Bson;\n+\n+import com.mongodb.MongoNamespace;\n+import com.mongodb.bulk.BulkWriteResult;\n+import com.mongodb.client.model.BulkWriteOptions;\n+import com.mongodb.client.model.CountOptions;\n+import com.mongodb.client.model.CreateIndexOptions;\n+import com.mongodb.client.model.DeleteOptions;\n+import com.mongodb.client.model.DropIndexOptions;\n+import com.mongodb.client.model.EstimatedDocumentCountOptions;\n+import com.mongodb.client.model.FindOneAndDeleteOptions;\n+import com.mongodb.client.model.FindOneAndReplaceOptions;\n+import com.mongodb.client.model.FindOneAndUpdateOptions;\n+import com.mongodb.client.model.IndexModel;\n+import com.mongodb.client.model.IndexOptions;\n+import com.mongodb.client.model.InsertManyOptions;\n+import com.mongodb.client.model.InsertOneOptions;\n+import com.mongodb.client.model.RenameCollectionOptions;\n+import com.mongodb.client.model.ReplaceOptions;\n+import com.mongodb.client.model.UpdateOptions;\n+import com.mongodb.client.model.WriteModel;\n+import com.mongodb.client.model.changestream.ChangeStreamDocument;\n+import com.mongodb.client.result.DeleteResult;\n+import com.mongodb.client.result.UpdateResult;\n+import com.mongodb.reactivestreams.client.ClientSession;\n+\n+import io.quarkus.mongodb.AggregateOptions;\n+import io.quarkus.mongodb.ChangeStreamOptions;\n+import io.quarkus.mongodb.DistinctOptions;\n+import io.quarkus.mongodb.FindOptions;\n+import io.quarkus.mongodb.MapReduceOptions;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+\n+/**\n+ * A reactive API to interact with a Mongo collection.\n+ *\n+ * @param <T> The type that this collection will encode documents from and decode documents to.\n+ * @since 1.0\n+ */\n+public interface ReactiveMongoCollection<T> {\n+\n+    /**\n+     * Gets the namespace of this collection.\n+     *\n+     * @return the namespace\n+     */\n+    MongoNamespace getNamespace();\n+\n+    /**\n+     * Get the class of documents stored in this collection.\n+     *\n+     * @return the class\n+     */\n+    Class<T> getDocumentClass();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @return n {@link Uni} completed with the estimated number of documents\n+     */\n+    Uni<Long> estimatedDocumentCount();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the estimated number of documents\n+     */\n+    Uni<Long> estimatedDocumentCount(EstimatedDocumentCountOptions options);\n+\n+    /**\n+     * Counts the number of documents in the collection.\n+     *\n+     * @return n {@link Uni} completed with the number of documents", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2NTc0OA=="}, "originalCommit": {"oid": "a59e3ec04c5a6f5b58734b991f143a40a39365c6"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTIzNjY0OnYy", "diffSide": "RIGHT", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOToyMzowOFrOFrgieg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNjoyODoxMlrOFsaSaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2NjIwMg==", "bodyText": "You add a link to Uni in the Javadoc and not to Multi ?", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r381166202", "createdAt": "2020-02-19T09:23:08Z", "author": {"login": "loicmathieu"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java", "diffHunk": "@@ -0,0 +1,1410 @@\n+package io.quarkus.mongodb.reactive;\n+\n+import java.util.List;\n+\n+import org.bson.Document;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.bson.conversions.Bson;\n+\n+import com.mongodb.MongoNamespace;\n+import com.mongodb.bulk.BulkWriteResult;\n+import com.mongodb.client.model.BulkWriteOptions;\n+import com.mongodb.client.model.CountOptions;\n+import com.mongodb.client.model.CreateIndexOptions;\n+import com.mongodb.client.model.DeleteOptions;\n+import com.mongodb.client.model.DropIndexOptions;\n+import com.mongodb.client.model.EstimatedDocumentCountOptions;\n+import com.mongodb.client.model.FindOneAndDeleteOptions;\n+import com.mongodb.client.model.FindOneAndReplaceOptions;\n+import com.mongodb.client.model.FindOneAndUpdateOptions;\n+import com.mongodb.client.model.IndexModel;\n+import com.mongodb.client.model.IndexOptions;\n+import com.mongodb.client.model.InsertManyOptions;\n+import com.mongodb.client.model.InsertOneOptions;\n+import com.mongodb.client.model.RenameCollectionOptions;\n+import com.mongodb.client.model.ReplaceOptions;\n+import com.mongodb.client.model.UpdateOptions;\n+import com.mongodb.client.model.WriteModel;\n+import com.mongodb.client.model.changestream.ChangeStreamDocument;\n+import com.mongodb.client.result.DeleteResult;\n+import com.mongodb.client.result.UpdateResult;\n+import com.mongodb.reactivestreams.client.ClientSession;\n+\n+import io.quarkus.mongodb.AggregateOptions;\n+import io.quarkus.mongodb.ChangeStreamOptions;\n+import io.quarkus.mongodb.DistinctOptions;\n+import io.quarkus.mongodb.FindOptions;\n+import io.quarkus.mongodb.MapReduceOptions;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+\n+/**\n+ * A reactive API to interact with a Mongo collection.\n+ *\n+ * @param <T> The type that this collection will encode documents from and decode documents to.\n+ * @since 1.0\n+ */\n+public interface ReactiveMongoCollection<T> {\n+\n+    /**\n+     * Gets the namespace of this collection.\n+     *\n+     * @return the namespace\n+     */\n+    MongoNamespace getNamespace();\n+\n+    /**\n+     * Get the class of documents stored in this collection.\n+     *\n+     * @return the class\n+     */\n+    Class<T> getDocumentClass();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @return n {@link Uni} completed with the estimated number of documents\n+     */\n+    Uni<Long> estimatedDocumentCount();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the estimated number of documents\n+     */\n+    Uni<Long> estimatedDocumentCount(EstimatedDocumentCountOptions options);\n+\n+    /**\n+     * Counts the number of documents in the collection.\n+     *\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments();\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param filter the query filter\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(Bson filter);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param filter the query filter\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(Bson filter, CountOptions options);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(ClientSession clientSession);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(ClientSession clientSession, Bson filter);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(ClientSession clientSession, Bson filter, CountOptions options);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param fieldName the field name*\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @return a multi emitting the sequence of distinct values", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a59e3ec04c5a6f5b58734b991f143a40a39365c6"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExMjM2MQ==", "bodyText": "Fixed.", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r382112361", "createdAt": "2020-02-20T16:28:12Z", "author": {"login": "cescoffier"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java", "diffHunk": "@@ -0,0 +1,1410 @@\n+package io.quarkus.mongodb.reactive;\n+\n+import java.util.List;\n+\n+import org.bson.Document;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.bson.conversions.Bson;\n+\n+import com.mongodb.MongoNamespace;\n+import com.mongodb.bulk.BulkWriteResult;\n+import com.mongodb.client.model.BulkWriteOptions;\n+import com.mongodb.client.model.CountOptions;\n+import com.mongodb.client.model.CreateIndexOptions;\n+import com.mongodb.client.model.DeleteOptions;\n+import com.mongodb.client.model.DropIndexOptions;\n+import com.mongodb.client.model.EstimatedDocumentCountOptions;\n+import com.mongodb.client.model.FindOneAndDeleteOptions;\n+import com.mongodb.client.model.FindOneAndReplaceOptions;\n+import com.mongodb.client.model.FindOneAndUpdateOptions;\n+import com.mongodb.client.model.IndexModel;\n+import com.mongodb.client.model.IndexOptions;\n+import com.mongodb.client.model.InsertManyOptions;\n+import com.mongodb.client.model.InsertOneOptions;\n+import com.mongodb.client.model.RenameCollectionOptions;\n+import com.mongodb.client.model.ReplaceOptions;\n+import com.mongodb.client.model.UpdateOptions;\n+import com.mongodb.client.model.WriteModel;\n+import com.mongodb.client.model.changestream.ChangeStreamDocument;\n+import com.mongodb.client.result.DeleteResult;\n+import com.mongodb.client.result.UpdateResult;\n+import com.mongodb.reactivestreams.client.ClientSession;\n+\n+import io.quarkus.mongodb.AggregateOptions;\n+import io.quarkus.mongodb.ChangeStreamOptions;\n+import io.quarkus.mongodb.DistinctOptions;\n+import io.quarkus.mongodb.FindOptions;\n+import io.quarkus.mongodb.MapReduceOptions;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+\n+/**\n+ * A reactive API to interact with a Mongo collection.\n+ *\n+ * @param <T> The type that this collection will encode documents from and decode documents to.\n+ * @since 1.0\n+ */\n+public interface ReactiveMongoCollection<T> {\n+\n+    /**\n+     * Gets the namespace of this collection.\n+     *\n+     * @return the namespace\n+     */\n+    MongoNamespace getNamespace();\n+\n+    /**\n+     * Get the class of documents stored in this collection.\n+     *\n+     * @return the class\n+     */\n+    Class<T> getDocumentClass();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @return n {@link Uni} completed with the estimated number of documents\n+     */\n+    Uni<Long> estimatedDocumentCount();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the estimated number of documents\n+     */\n+    Uni<Long> estimatedDocumentCount(EstimatedDocumentCountOptions options);\n+\n+    /**\n+     * Counts the number of documents in the collection.\n+     *\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments();\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param filter the query filter\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(Bson filter);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param filter the query filter\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(Bson filter, CountOptions options);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(ClientSession clientSession);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(ClientSession clientSession, Bson filter);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(ClientSession clientSession, Bson filter, CountOptions options);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param fieldName the field name*\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @return a multi emitting the sequence of distinct values", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2NjIwMg=="}, "originalCommit": {"oid": "a59e3ec04c5a6f5b58734b991f143a40a39365c6"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTI1MDc5OnYy", "diffSide": "RIGHT", "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOToyNzowNVrOFrgrPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNjoyODozN1rOFsaTow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2ODQ0Nw==", "bodyText": "Missing JavaDoc, I know the original ReactiveMongoCollection didn't have JavaDoc for these methods but as they are part of the API and documented inside the MongoClient they should have some.", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r381168447", "createdAt": "2020-02-19T09:27:05Z", "author": {"login": "loicmathieu"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java", "diffHunk": "@@ -0,0 +1,1410 @@\n+package io.quarkus.mongodb.reactive;\n+\n+import java.util.List;\n+\n+import org.bson.Document;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.bson.conversions.Bson;\n+\n+import com.mongodb.MongoNamespace;\n+import com.mongodb.bulk.BulkWriteResult;\n+import com.mongodb.client.model.BulkWriteOptions;\n+import com.mongodb.client.model.CountOptions;\n+import com.mongodb.client.model.CreateIndexOptions;\n+import com.mongodb.client.model.DeleteOptions;\n+import com.mongodb.client.model.DropIndexOptions;\n+import com.mongodb.client.model.EstimatedDocumentCountOptions;\n+import com.mongodb.client.model.FindOneAndDeleteOptions;\n+import com.mongodb.client.model.FindOneAndReplaceOptions;\n+import com.mongodb.client.model.FindOneAndUpdateOptions;\n+import com.mongodb.client.model.IndexModel;\n+import com.mongodb.client.model.IndexOptions;\n+import com.mongodb.client.model.InsertManyOptions;\n+import com.mongodb.client.model.InsertOneOptions;\n+import com.mongodb.client.model.RenameCollectionOptions;\n+import com.mongodb.client.model.ReplaceOptions;\n+import com.mongodb.client.model.UpdateOptions;\n+import com.mongodb.client.model.WriteModel;\n+import com.mongodb.client.model.changestream.ChangeStreamDocument;\n+import com.mongodb.client.result.DeleteResult;\n+import com.mongodb.client.result.UpdateResult;\n+import com.mongodb.reactivestreams.client.ClientSession;\n+\n+import io.quarkus.mongodb.AggregateOptions;\n+import io.quarkus.mongodb.ChangeStreamOptions;\n+import io.quarkus.mongodb.DistinctOptions;\n+import io.quarkus.mongodb.FindOptions;\n+import io.quarkus.mongodb.MapReduceOptions;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+\n+/**\n+ * A reactive API to interact with a Mongo collection.\n+ *\n+ * @param <T> The type that this collection will encode documents from and decode documents to.\n+ * @since 1.0\n+ */\n+public interface ReactiveMongoCollection<T> {\n+\n+    /**\n+     * Gets the namespace of this collection.\n+     *\n+     * @return the namespace\n+     */\n+    MongoNamespace getNamespace();\n+\n+    /**\n+     * Get the class of documents stored in this collection.\n+     *\n+     * @return the class\n+     */\n+    Class<T> getDocumentClass();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @return n {@link Uni} completed with the estimated number of documents\n+     */\n+    Uni<Long> estimatedDocumentCount();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the estimated number of documents\n+     */\n+    Uni<Long> estimatedDocumentCount(EstimatedDocumentCountOptions options);\n+\n+    /**\n+     * Counts the number of documents in the collection.\n+     *\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments();\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param filter the query filter\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(Bson filter);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param filter the query filter\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(Bson filter, CountOptions options);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(ClientSession clientSession);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(ClientSession clientSession, Bson filter);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(ClientSession clientSession, Bson filter, CountOptions options);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param fieldName the field name*\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(String fieldName, Class<D> clazz);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param fieldName the field name\n+     * @param filter the query filter\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(String fieldName, Bson filter, Class<D> clazz);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param fieldName the field name\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Class<D> clazz);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param fieldName the field name\n+     * @param filter the query filter\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Bson filter, Class<D> clazz);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param fieldName the field name\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @param options the stream options\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(String fieldName, Class<D> clazz, DistinctOptions options);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param fieldName the field name\n+     * @param filter the query filter\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @param options the stream options\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(String fieldName, Bson filter, Class<D> clazz, DistinctOptions options);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param fieldName the field name\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @param options the stream options\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Class<D> clazz,\n+            DistinctOptions options);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param fieldName the field name\n+     * @param filter the query filter\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @param options the stream options\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Bson filter, Class<D> clazz,\n+            DistinctOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find();\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(Class<D> clazz);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param filter the query filter\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(Bson filter);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param filter the query filter\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(Bson filter, Class<D> clazz);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(ClientSession clientSession);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(ClientSession clientSession, Class<D> clazz);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(ClientSession clientSession, Bson filter);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(ClientSession clientSession, Bson filter, Class<D> clazz);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(Class<D> clazz, FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param filter the query filter\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(Bson filter, FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param filter the query filter\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(Bson filter, Class<D> clazz, FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(ClientSession clientSession, FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(ClientSession clientSession, Class<D> clazz, FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(ClientSession clientSession, Bson filter, FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(ClientSession clientSession, Bson filter, Class<D> clazz, FindOptions options);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param pipeline the aggregate pipeline\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    Multi<Document> aggregate(List<? extends Bson> pipeline);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param pipeline the aggregate pipeline\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    <D> Multi<D> aggregate(List<? extends Bson> pipeline, Class<D> clazz);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregate pipeline\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    Multi<Document> aggregate(ClientSession clientSession, List<? extends Bson> pipeline);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregate pipeline\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    <D> Multi<D> aggregate(ClientSession clientSession, List<? extends Bson> pipeline, Class<D> clazz);\n+\n+    //\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param pipeline the aggregate pipeline\n+     * @param options the stream options\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    Multi<Document> aggregate(List<? extends Bson> pipeline, AggregateOptions options);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param pipeline the aggregate pipeline\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    <D> Multi<D> aggregate(List<? extends Bson> pipeline, Class<D> clazz, AggregateOptions options);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregate pipeline\n+     * @param options the stream options\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    Multi<Document> aggregate(ClientSession clientSession, List<? extends Bson> pipeline,\n+            AggregateOptions options);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregate pipeline\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    <D> Multi<D> aggregate(ClientSession clientSession, List<? extends Bson> pipeline, Class<D> clazz,\n+            AggregateOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch();\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(Class<D> clazz);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(List<? extends Bson> pipeline);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(List<? extends Bson> pipeline, Class<D> clazz);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, Class<D> clazz);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession, List<? extends Bson> pipeline);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n+            Class<D> clazz);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(Class<D> clazz,\n+            ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(List<? extends Bson> pipeline,\n+            ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(List<? extends Bson> pipeline, Class<D> clazz,\n+            ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession,\n+            ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, Class<D> clazz,\n+            ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n+            ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n+            Class<D> clazz, ChangeStreamOptions options);\n+\n+    Multi<Document> mapReduce(String mapFunction, String reduceFunction);\n+\n+    <D> Multi<D> mapReduce(String mapFunction, String reduceFunction, Class<D> clazz);\n+\n+    Multi<Document> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction);\n+\n+    <D> Multi<D> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction,\n+            Class<D> clazz);\n+\n+    Multi<Document> mapReduce(String mapFunction, String reduceFunction, MapReduceOptions options);\n+\n+    <D> Multi<D> mapReduce(String mapFunction, String reduceFunction, Class<D> clazz,\n+            MapReduceOptions options);\n+\n+    Multi<Document> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction,\n+            MapReduceOptions options);\n+\n+    <D> Multi<D> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction,\n+            Class<D> clazz,\n+            MapReduceOptions options);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a59e3ec04c5a6f5b58734b991f143a40a39365c6"}, "originalPosition": 637}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA5MjI0MA==", "bodyText": "Agreed!", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r382092240", "createdAt": "2020-02-20T15:56:25Z", "author": {"login": "cescoffier"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java", "diffHunk": "@@ -0,0 +1,1410 @@\n+package io.quarkus.mongodb.reactive;\n+\n+import java.util.List;\n+\n+import org.bson.Document;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.bson.conversions.Bson;\n+\n+import com.mongodb.MongoNamespace;\n+import com.mongodb.bulk.BulkWriteResult;\n+import com.mongodb.client.model.BulkWriteOptions;\n+import com.mongodb.client.model.CountOptions;\n+import com.mongodb.client.model.CreateIndexOptions;\n+import com.mongodb.client.model.DeleteOptions;\n+import com.mongodb.client.model.DropIndexOptions;\n+import com.mongodb.client.model.EstimatedDocumentCountOptions;\n+import com.mongodb.client.model.FindOneAndDeleteOptions;\n+import com.mongodb.client.model.FindOneAndReplaceOptions;\n+import com.mongodb.client.model.FindOneAndUpdateOptions;\n+import com.mongodb.client.model.IndexModel;\n+import com.mongodb.client.model.IndexOptions;\n+import com.mongodb.client.model.InsertManyOptions;\n+import com.mongodb.client.model.InsertOneOptions;\n+import com.mongodb.client.model.RenameCollectionOptions;\n+import com.mongodb.client.model.ReplaceOptions;\n+import com.mongodb.client.model.UpdateOptions;\n+import com.mongodb.client.model.WriteModel;\n+import com.mongodb.client.model.changestream.ChangeStreamDocument;\n+import com.mongodb.client.result.DeleteResult;\n+import com.mongodb.client.result.UpdateResult;\n+import com.mongodb.reactivestreams.client.ClientSession;\n+\n+import io.quarkus.mongodb.AggregateOptions;\n+import io.quarkus.mongodb.ChangeStreamOptions;\n+import io.quarkus.mongodb.DistinctOptions;\n+import io.quarkus.mongodb.FindOptions;\n+import io.quarkus.mongodb.MapReduceOptions;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+\n+/**\n+ * A reactive API to interact with a Mongo collection.\n+ *\n+ * @param <T> The type that this collection will encode documents from and decode documents to.\n+ * @since 1.0\n+ */\n+public interface ReactiveMongoCollection<T> {\n+\n+    /**\n+     * Gets the namespace of this collection.\n+     *\n+     * @return the namespace\n+     */\n+    MongoNamespace getNamespace();\n+\n+    /**\n+     * Get the class of documents stored in this collection.\n+     *\n+     * @return the class\n+     */\n+    Class<T> getDocumentClass();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @return n {@link Uni} completed with the estimated number of documents\n+     */\n+    Uni<Long> estimatedDocumentCount();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the estimated number of documents\n+     */\n+    Uni<Long> estimatedDocumentCount(EstimatedDocumentCountOptions options);\n+\n+    /**\n+     * Counts the number of documents in the collection.\n+     *\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments();\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param filter the query filter\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(Bson filter);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param filter the query filter\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(Bson filter, CountOptions options);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(ClientSession clientSession);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(ClientSession clientSession, Bson filter);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(ClientSession clientSession, Bson filter, CountOptions options);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param fieldName the field name*\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(String fieldName, Class<D> clazz);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param fieldName the field name\n+     * @param filter the query filter\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(String fieldName, Bson filter, Class<D> clazz);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param fieldName the field name\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Class<D> clazz);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param fieldName the field name\n+     * @param filter the query filter\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Bson filter, Class<D> clazz);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param fieldName the field name\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @param options the stream options\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(String fieldName, Class<D> clazz, DistinctOptions options);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param fieldName the field name\n+     * @param filter the query filter\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @param options the stream options\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(String fieldName, Bson filter, Class<D> clazz, DistinctOptions options);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param fieldName the field name\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @param options the stream options\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Class<D> clazz,\n+            DistinctOptions options);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param fieldName the field name\n+     * @param filter the query filter\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @param options the stream options\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Bson filter, Class<D> clazz,\n+            DistinctOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find();\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(Class<D> clazz);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param filter the query filter\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(Bson filter);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param filter the query filter\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(Bson filter, Class<D> clazz);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(ClientSession clientSession);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(ClientSession clientSession, Class<D> clazz);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(ClientSession clientSession, Bson filter);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(ClientSession clientSession, Bson filter, Class<D> clazz);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(Class<D> clazz, FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param filter the query filter\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(Bson filter, FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param filter the query filter\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(Bson filter, Class<D> clazz, FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(ClientSession clientSession, FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(ClientSession clientSession, Class<D> clazz, FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(ClientSession clientSession, Bson filter, FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(ClientSession clientSession, Bson filter, Class<D> clazz, FindOptions options);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param pipeline the aggregate pipeline\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    Multi<Document> aggregate(List<? extends Bson> pipeline);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param pipeline the aggregate pipeline\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    <D> Multi<D> aggregate(List<? extends Bson> pipeline, Class<D> clazz);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregate pipeline\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    Multi<Document> aggregate(ClientSession clientSession, List<? extends Bson> pipeline);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregate pipeline\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    <D> Multi<D> aggregate(ClientSession clientSession, List<? extends Bson> pipeline, Class<D> clazz);\n+\n+    //\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param pipeline the aggregate pipeline\n+     * @param options the stream options\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    Multi<Document> aggregate(List<? extends Bson> pipeline, AggregateOptions options);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param pipeline the aggregate pipeline\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    <D> Multi<D> aggregate(List<? extends Bson> pipeline, Class<D> clazz, AggregateOptions options);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregate pipeline\n+     * @param options the stream options\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    Multi<Document> aggregate(ClientSession clientSession, List<? extends Bson> pipeline,\n+            AggregateOptions options);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregate pipeline\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    <D> Multi<D> aggregate(ClientSession clientSession, List<? extends Bson> pipeline, Class<D> clazz,\n+            AggregateOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch();\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(Class<D> clazz);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(List<? extends Bson> pipeline);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(List<? extends Bson> pipeline, Class<D> clazz);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, Class<D> clazz);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession, List<? extends Bson> pipeline);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n+            Class<D> clazz);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(Class<D> clazz,\n+            ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(List<? extends Bson> pipeline,\n+            ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(List<? extends Bson> pipeline, Class<D> clazz,\n+            ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession,\n+            ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, Class<D> clazz,\n+            ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n+            ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n+            Class<D> clazz, ChangeStreamOptions options);\n+\n+    Multi<Document> mapReduce(String mapFunction, String reduceFunction);\n+\n+    <D> Multi<D> mapReduce(String mapFunction, String reduceFunction, Class<D> clazz);\n+\n+    Multi<Document> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction);\n+\n+    <D> Multi<D> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction,\n+            Class<D> clazz);\n+\n+    Multi<Document> mapReduce(String mapFunction, String reduceFunction, MapReduceOptions options);\n+\n+    <D> Multi<D> mapReduce(String mapFunction, String reduceFunction, Class<D> clazz,\n+            MapReduceOptions options);\n+\n+    Multi<Document> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction,\n+            MapReduceOptions options);\n+\n+    <D> Multi<D> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction,\n+            Class<D> clazz,\n+            MapReduceOptions options);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2ODQ0Nw=="}, "originalCommit": {"oid": "a59e3ec04c5a6f5b58734b991f143a40a39365c6"}, "originalPosition": 637}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExMjY3NQ==", "bodyText": "I added the missing JavaDoc.", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r382112675", "createdAt": "2020-02-20T16:28:37Z", "author": {"login": "cescoffier"}, "path": "extensions/mongodb-client/runtime/src/main/java/io/quarkus/mongodb/reactive/ReactiveMongoCollection.java", "diffHunk": "@@ -0,0 +1,1410 @@\n+package io.quarkus.mongodb.reactive;\n+\n+import java.util.List;\n+\n+import org.bson.Document;\n+import org.bson.codecs.configuration.CodecRegistry;\n+import org.bson.conversions.Bson;\n+\n+import com.mongodb.MongoNamespace;\n+import com.mongodb.bulk.BulkWriteResult;\n+import com.mongodb.client.model.BulkWriteOptions;\n+import com.mongodb.client.model.CountOptions;\n+import com.mongodb.client.model.CreateIndexOptions;\n+import com.mongodb.client.model.DeleteOptions;\n+import com.mongodb.client.model.DropIndexOptions;\n+import com.mongodb.client.model.EstimatedDocumentCountOptions;\n+import com.mongodb.client.model.FindOneAndDeleteOptions;\n+import com.mongodb.client.model.FindOneAndReplaceOptions;\n+import com.mongodb.client.model.FindOneAndUpdateOptions;\n+import com.mongodb.client.model.IndexModel;\n+import com.mongodb.client.model.IndexOptions;\n+import com.mongodb.client.model.InsertManyOptions;\n+import com.mongodb.client.model.InsertOneOptions;\n+import com.mongodb.client.model.RenameCollectionOptions;\n+import com.mongodb.client.model.ReplaceOptions;\n+import com.mongodb.client.model.UpdateOptions;\n+import com.mongodb.client.model.WriteModel;\n+import com.mongodb.client.model.changestream.ChangeStreamDocument;\n+import com.mongodb.client.result.DeleteResult;\n+import com.mongodb.client.result.UpdateResult;\n+import com.mongodb.reactivestreams.client.ClientSession;\n+\n+import io.quarkus.mongodb.AggregateOptions;\n+import io.quarkus.mongodb.ChangeStreamOptions;\n+import io.quarkus.mongodb.DistinctOptions;\n+import io.quarkus.mongodb.FindOptions;\n+import io.quarkus.mongodb.MapReduceOptions;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+\n+/**\n+ * A reactive API to interact with a Mongo collection.\n+ *\n+ * @param <T> The type that this collection will encode documents from and decode documents to.\n+ * @since 1.0\n+ */\n+public interface ReactiveMongoCollection<T> {\n+\n+    /**\n+     * Gets the namespace of this collection.\n+     *\n+     * @return the namespace\n+     */\n+    MongoNamespace getNamespace();\n+\n+    /**\n+     * Get the class of documents stored in this collection.\n+     *\n+     * @return the class\n+     */\n+    Class<T> getDocumentClass();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @return n {@link Uni} completed with the estimated number of documents\n+     */\n+    Uni<Long> estimatedDocumentCount();\n+\n+    /**\n+     * Gets an estimate of the count of documents in a collection using collection metadata.\n+     *\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the estimated number of documents\n+     */\n+    Uni<Long> estimatedDocumentCount(EstimatedDocumentCountOptions options);\n+\n+    /**\n+     * Counts the number of documents in the collection.\n+     *\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments();\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param filter the query filter\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(Bson filter);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param filter the query filter\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(Bson filter, CountOptions options);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(ClientSession clientSession);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(ClientSession clientSession, Bson filter);\n+\n+    /**\n+     * Counts the number of documents in the collection according to the given options.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @param options the options describing the count\n+     * @return n {@link Uni} completed with the number of documents\n+     */\n+    Uni<Long> countDocuments(ClientSession clientSession, Bson filter, CountOptions options);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param fieldName the field name*\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(String fieldName, Class<D> clazz);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param fieldName the field name\n+     * @param filter the query filter\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(String fieldName, Bson filter, Class<D> clazz);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param fieldName the field name\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Class<D> clazz);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param fieldName the field name\n+     * @param filter the query filter\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Bson filter, Class<D> clazz);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param fieldName the field name\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @param options the stream options\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(String fieldName, Class<D> clazz, DistinctOptions options);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param fieldName the field name\n+     * @param filter the query filter\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @param options the stream options\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(String fieldName, Bson filter, Class<D> clazz, DistinctOptions options);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param fieldName the field name\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @param options the stream options\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Class<D> clazz,\n+            DistinctOptions options);\n+\n+    /**\n+     * Gets the distinct values of the specified field name.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param fieldName the field name\n+     * @param filter the query filter\n+     * @param clazz the default class to cast any distinct items into.\n+     * @param <D> the target type of the iterable.\n+     * @param options the stream options\n+     * @return a multi emitting the sequence of distinct values\n+     */\n+    <D> Multi<D> distinct(ClientSession clientSession, String fieldName, Bson filter, Class<D> clazz,\n+            DistinctOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find();\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(Class<D> clazz);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param filter the query filter\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(Bson filter);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param filter the query filter\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(Bson filter, Class<D> clazz);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(ClientSession clientSession);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(ClientSession clientSession, Class<D> clazz);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(ClientSession clientSession, Bson filter);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(ClientSession clientSession, Bson filter, Class<D> clazz);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(Class<D> clazz, FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param filter the query filter\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(Bson filter, FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param filter the query filter\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(Bson filter, Class<D> clazz, FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(ClientSession clientSession, FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(ClientSession clientSession, Class<D> clazz, FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    Multi<T> find(ClientSession clientSession, Bson filter, FindOptions options);\n+\n+    /**\n+     * Finds all documents in the collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param filter the query filter\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream with the selected documents, can be empty if none matches.\n+     */\n+    <D> Multi<D> find(ClientSession clientSession, Bson filter, Class<D> clazz, FindOptions options);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param pipeline the aggregate pipeline\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    Multi<Document> aggregate(List<? extends Bson> pipeline);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param pipeline the aggregate pipeline\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    <D> Multi<D> aggregate(List<? extends Bson> pipeline, Class<D> clazz);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregate pipeline\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    Multi<Document> aggregate(ClientSession clientSession, List<? extends Bson> pipeline);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregate pipeline\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    <D> Multi<D> aggregate(ClientSession clientSession, List<? extends Bson> pipeline, Class<D> clazz);\n+\n+    //\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param pipeline the aggregate pipeline\n+     * @param options the stream options\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    Multi<Document> aggregate(List<? extends Bson> pipeline, AggregateOptions options);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param pipeline the aggregate pipeline\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    <D> Multi<D> aggregate(List<? extends Bson> pipeline, Class<D> clazz, AggregateOptions options);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregate pipeline\n+     * @param options the stream options\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    Multi<Document> aggregate(ClientSession clientSession, List<? extends Bson> pipeline,\n+            AggregateOptions options);\n+\n+    /**\n+     * Aggregates documents according to the specified aggregation pipeline.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregate pipeline\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return a stream containing the result of the aggregation operation\n+     */\n+    <D> Multi<D> aggregate(ClientSession clientSession, List<? extends Bson> pipeline, Class<D> clazz,\n+            AggregateOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch();\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(Class<D> clazz);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(List<? extends Bson> pipeline);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(List<? extends Bson> pipeline, Class<D> clazz);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, Class<D> clazz);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession, List<? extends Bson> pipeline);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n+            Class<D> clazz);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(Class<D> clazz,\n+            ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(List<? extends Bson> pipeline,\n+            ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(List<? extends Bson> pipeline, Class<D> clazz,\n+            ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession,\n+            ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, Class<D> clazz,\n+            ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    Multi<ChangeStreamDocument<Document>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n+            ChangeStreamOptions options);\n+\n+    /**\n+     * Creates a change stream for this collection.\n+     *\n+     * @param clientSession the client session with which to associate this operation\n+     * @param pipeline the aggregation pipeline to apply to the change stream\n+     * @param clazz the class to decode each document into\n+     * @param <D> the target document type of the iterable.\n+     * @param options the stream options\n+     * @return the stream of changes\n+     */\n+    <D> Multi<ChangeStreamDocument<D>> watch(ClientSession clientSession, List<? extends Bson> pipeline,\n+            Class<D> clazz, ChangeStreamOptions options);\n+\n+    Multi<Document> mapReduce(String mapFunction, String reduceFunction);\n+\n+    <D> Multi<D> mapReduce(String mapFunction, String reduceFunction, Class<D> clazz);\n+\n+    Multi<Document> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction);\n+\n+    <D> Multi<D> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction,\n+            Class<D> clazz);\n+\n+    Multi<Document> mapReduce(String mapFunction, String reduceFunction, MapReduceOptions options);\n+\n+    <D> Multi<D> mapReduce(String mapFunction, String reduceFunction, Class<D> clazz,\n+            MapReduceOptions options);\n+\n+    Multi<Document> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction,\n+            MapReduceOptions options);\n+\n+    <D> Multi<D> mapReduce(ClientSession clientSession, String mapFunction, String reduceFunction,\n+            Class<D> clazz,\n+            MapReduceOptions options);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE2ODQ0Nw=="}, "originalCommit": {"oid": "a59e3ec04c5a6f5b58734b991f143a40a39365c6"}, "originalPosition": 637}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTMxNTk4OnYy", "diffSide": "RIGHT", "path": "extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/MongoClientBuildItem.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOTo0MzoxOFrOFrhR4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNjozMzozMFrOFsagWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE3ODMzNg==", "bodyText": "Shouldn't it contains the both reactive clients ?", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r381178336", "createdAt": "2020-02-19T09:43:18Z", "author": {"login": "loicmathieu"}, "path": "extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/MongoClientBuildItem.java", "diffHunk": "@@ -3,7 +3,7 @@\n import com.mongodb.client.MongoClient;\n \n import io.quarkus.builder.item.MultiBuildItem;\n-import io.quarkus.mongodb.ReactiveMongoClient;\n+import io.quarkus.mongodb.reactive.ReactiveMongoClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a59e3ec04c5a6f5b58734b991f143a40a39365c6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwMzQzNg==", "bodyText": "Except if it's required for Panache, it would be preferable that extensions do not use the deprecated client as it's planed for removal.", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r382103436", "createdAt": "2020-02-20T16:14:03Z", "author": {"login": "cescoffier"}, "path": "extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/MongoClientBuildItem.java", "diffHunk": "@@ -3,7 +3,7 @@\n import com.mongodb.client.MongoClient;\n \n import io.quarkus.builder.item.MultiBuildItem;\n-import io.quarkus.mongodb.ReactiveMongoClient;\n+import io.quarkus.mongodb.reactive.ReactiveMongoClient;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE3ODMzNg=="}, "originalCommit": {"oid": "a59e3ec04c5a6f5b58734b991f143a40a39365c6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExNTkyOA==", "bodyText": "I don't remember all the discussions but I think the purpose of this BuildItem is to allow extensions depending on mongodb-client (today, only panache) to acess them.\nIf we decide that panache should only provides an implementation based on Mutiny (OK for me as the implementation based on Axle didn't exist in any publicly available Quarkus version), I'm OK with including only one reactive client.", "url": "https://github.com/quarkusio/quarkus/pull/7263#discussion_r382115928", "createdAt": "2020-02-20T16:33:30Z", "author": {"login": "loicmathieu"}, "path": "extensions/mongodb-client/deployment/src/main/java/io/quarkus/mongodb/deployment/MongoClientBuildItem.java", "diffHunk": "@@ -3,7 +3,7 @@\n import com.mongodb.client.MongoClient;\n \n import io.quarkus.builder.item.MultiBuildItem;\n-import io.quarkus.mongodb.ReactiveMongoClient;\n+import io.quarkus.mongodb.reactive.ReactiveMongoClient;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE3ODMzNg=="}, "originalCommit": {"oid": "a59e3ec04c5a6f5b58734b991f143a40a39365c6"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 91, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}