{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NDEwODM2", "number": 7294, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjoyNjoxNFrODhgVBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjoyNjoxNFrODhgVBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDU5MjY5OnYy", "diffSide": "RIGHT", "path": "extensions/vault/runtime/src/main/java/io/quarkus/vault/runtime/client/OkHttpVaultClient.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjoyNjoxNFrOFsRcTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMToxMjoxMlrOFtEvag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk2NzQzOQ==", "bodyText": "@vsevel Why have you differentiated here ? Can we already have the users who have the code expecting the exceptions if nothing is available on a given path ?", "url": "https://github.com/quarkusio/quarkus/pull/7294#discussion_r381967439", "createdAt": "2020-02-20T12:26:14Z", "author": {"login": "sberyozkin"}, "path": "extensions/vault/runtime/src/main/java/io/quarkus/vault/runtime/client/OkHttpVaultClient.java", "diffHunk": "@@ -146,33 +169,45 @@ public VaultTransitEncrypt rewrap(String token, String keyName, VaultTransitRewr\n \n     // ---\n \n+    protected <T> T delete(String path, String token, Object body, Class<T> resultClass, int expectedCode) {\n+        Request request = builder(path, token).delete(requestBody(body)).build();\n+        return exec(request, resultClass, expectedCode, true);\n+    }\n+\n     protected <T> T post(String path, String token, Object body, Class<T> resultClass, int expectedCode) {\n         Request request = builder(path, token).post(requestBody(body)).build();\n-        return exec(request, resultClass, expectedCode);\n+        return exec(request, resultClass, expectedCode, true);\n     }\n \n     protected <T> T post(String path, String token, Object body, Class<T> resultClass) {\n         Request request = builder(path, token).post(requestBody(body)).build();\n-        return exec(request, resultClass);\n+        return exec(request, resultClass, true);\n     }\n \n     protected <T> T put(String path, String token, Object body, Class<T> resultClass) {\n         Request request = builder(path, token).put(requestBody(body)).build();\n-        return exec(request, resultClass);\n+        return exec(request, resultClass, true);\n     }\n \n     protected <T> T get(String path, String token, Class<T> resultClass) {\n+        return get(path, token, resultClass, true);\n+    }\n+\n+    protected <T> T get(String path, String token, Class<T> resultClass, boolean throwOn404) {\n         Request request = builder(path, token).get().build();\n-        return exec(request, resultClass);\n+        return exec(request, resultClass, throwOn404);\n     }\n \n-    private <T> T exec(Request request, Class<T> resultClass) {\n-        return exec(request, resultClass, 200);\n+    private <T> T exec(Request request, Class<T> resultClass, boolean throwOn404) {\n+        return exec(request, resultClass, 200, throwOn404);\n     }\n \n-    private <T> T exec(Request request, Class<T> resultClass, int expectedCode) {\n+    private <T> T exec(Request request, Class<T> resultClass, int expectedCode, boolean throwOn404) {\n         try (Response response = client.newCall(request).execute()) {\n             if (response.code() != expectedCode) {\n+                if (response.code() == 404 && !throwOn404) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d433fe8c6326eabd3eb966865da35f98323ea468"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE5MTM2NA==", "bodyText": "@sberyozkin historically, any code other than the expected code would yield an exception. that was the default behavior. as I was writing the tests for the crud use case, it felt that getting a 404 when getting a secret on a non existent path should return a null instead of an exception. so I kept the old behavior for all calls, except for readSecret(), where a null seemed more natural.\nare you concerned about backward compatibility? if so you are right as it changes the contract.\nor are you concerned about lack of consistency where some calls will return null, and some calls will return an exception?\nI limited the change to readSecret() because that one seemed obvious, and I did not review all other methods, but it is very well possible that returning null might be more appropriate in other cases. the 2 other get are auth/token/lookup-self and database/creds/XX. lookup-self should not return a 404 because we are getting information on our own token. and I think that database/creds/XX leading to a 404 would be an actual error. but that is debatable.\nhow would you do it? what is your suggestion?", "url": "https://github.com/quarkusio/quarkus/pull/7294#discussion_r382191364", "createdAt": "2020-02-20T18:52:32Z", "author": {"login": "vsevel"}, "path": "extensions/vault/runtime/src/main/java/io/quarkus/vault/runtime/client/OkHttpVaultClient.java", "diffHunk": "@@ -146,33 +169,45 @@ public VaultTransitEncrypt rewrap(String token, String keyName, VaultTransitRewr\n \n     // ---\n \n+    protected <T> T delete(String path, String token, Object body, Class<T> resultClass, int expectedCode) {\n+        Request request = builder(path, token).delete(requestBody(body)).build();\n+        return exec(request, resultClass, expectedCode, true);\n+    }\n+\n     protected <T> T post(String path, String token, Object body, Class<T> resultClass, int expectedCode) {\n         Request request = builder(path, token).post(requestBody(body)).build();\n-        return exec(request, resultClass, expectedCode);\n+        return exec(request, resultClass, expectedCode, true);\n     }\n \n     protected <T> T post(String path, String token, Object body, Class<T> resultClass) {\n         Request request = builder(path, token).post(requestBody(body)).build();\n-        return exec(request, resultClass);\n+        return exec(request, resultClass, true);\n     }\n \n     protected <T> T put(String path, String token, Object body, Class<T> resultClass) {\n         Request request = builder(path, token).put(requestBody(body)).build();\n-        return exec(request, resultClass);\n+        return exec(request, resultClass, true);\n     }\n \n     protected <T> T get(String path, String token, Class<T> resultClass) {\n+        return get(path, token, resultClass, true);\n+    }\n+\n+    protected <T> T get(String path, String token, Class<T> resultClass, boolean throwOn404) {\n         Request request = builder(path, token).get().build();\n-        return exec(request, resultClass);\n+        return exec(request, resultClass, throwOn404);\n     }\n \n-    private <T> T exec(Request request, Class<T> resultClass) {\n-        return exec(request, resultClass, 200);\n+    private <T> T exec(Request request, Class<T> resultClass, boolean throwOn404) {\n+        return exec(request, resultClass, 200, throwOn404);\n     }\n \n-    private <T> T exec(Request request, Class<T> resultClass, int expectedCode) {\n+    private <T> T exec(Request request, Class<T> resultClass, int expectedCode, boolean throwOn404) {\n         try (Response response = client.newCall(request).execute()) {\n             if (response.code() != expectedCode) {\n+                if (response.code() == 404 && !throwOn404) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk2NzQzOQ=="}, "originalCommit": {"oid": "d433fe8c6326eabd3eb966865da35f98323ea468"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMDIxOQ==", "bodyText": "Hi @vsevel if 404 is returned when no path actually exists in the secret engine then it is an exception IMHO, example, the path may have been set to a wrong value in quarkus (and indeed, it would also change the expectations for the existing users without a strong reason); if it returns 404 when nothing is available at that existing path then null is fine; if it is the former then I propose to keep the old behavior for the moment (and perhaps revisit with a dedicated issue ?)\nThanks", "url": "https://github.com/quarkusio/quarkus/pull/7294#discussion_r382310219", "createdAt": "2020-02-20T23:10:00Z", "author": {"login": "sberyozkin"}, "path": "extensions/vault/runtime/src/main/java/io/quarkus/vault/runtime/client/OkHttpVaultClient.java", "diffHunk": "@@ -146,33 +169,45 @@ public VaultTransitEncrypt rewrap(String token, String keyName, VaultTransitRewr\n \n     // ---\n \n+    protected <T> T delete(String path, String token, Object body, Class<T> resultClass, int expectedCode) {\n+        Request request = builder(path, token).delete(requestBody(body)).build();\n+        return exec(request, resultClass, expectedCode, true);\n+    }\n+\n     protected <T> T post(String path, String token, Object body, Class<T> resultClass, int expectedCode) {\n         Request request = builder(path, token).post(requestBody(body)).build();\n-        return exec(request, resultClass, expectedCode);\n+        return exec(request, resultClass, expectedCode, true);\n     }\n \n     protected <T> T post(String path, String token, Object body, Class<T> resultClass) {\n         Request request = builder(path, token).post(requestBody(body)).build();\n-        return exec(request, resultClass);\n+        return exec(request, resultClass, true);\n     }\n \n     protected <T> T put(String path, String token, Object body, Class<T> resultClass) {\n         Request request = builder(path, token).put(requestBody(body)).build();\n-        return exec(request, resultClass);\n+        return exec(request, resultClass, true);\n     }\n \n     protected <T> T get(String path, String token, Class<T> resultClass) {\n+        return get(path, token, resultClass, true);\n+    }\n+\n+    protected <T> T get(String path, String token, Class<T> resultClass, boolean throwOn404) {\n         Request request = builder(path, token).get().build();\n-        return exec(request, resultClass);\n+        return exec(request, resultClass, throwOn404);\n     }\n \n-    private <T> T exec(Request request, Class<T> resultClass) {\n-        return exec(request, resultClass, 200);\n+    private <T> T exec(Request request, Class<T> resultClass, boolean throwOn404) {\n+        return exec(request, resultClass, 200, throwOn404);\n     }\n \n-    private <T> T exec(Request request, Class<T> resultClass, int expectedCode) {\n+    private <T> T exec(Request request, Class<T> resultClass, int expectedCode, boolean throwOn404) {\n         try (Response response = client.newCall(request).execute()) {\n             if (response.code() != expectedCode) {\n+                if (response.code() == 404 && !throwOn404) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk2NzQzOQ=="}, "originalCommit": {"oid": "d433fe8c6326eabd3eb966865da35f98323ea468"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyMTAzMQ==", "bodyText": "hello @sberyozkin not sure I completely followed you.\nwhen you read secrets from vault, you get a 404 if the path does not exist, and the secret (which is a Map<String,String>) if it does. if no keys are added to an existing path, (I did not test but) I think it returns an empty map.\nso today the behavior in quarkus is:\n\npath does not exist => exception\npath does exist => map (which might be empty)\n\nin the PR, for the readSecret operation, I changed the behavior to be:\n\npath does not exist => null\npath does exist => map (which might be empty)\n\ndo you want me to revert to the old behavior?", "url": "https://github.com/quarkusio/quarkus/pull/7294#discussion_r382521031", "createdAt": "2020-02-21T10:58:43Z", "author": {"login": "vsevel"}, "path": "extensions/vault/runtime/src/main/java/io/quarkus/vault/runtime/client/OkHttpVaultClient.java", "diffHunk": "@@ -146,33 +169,45 @@ public VaultTransitEncrypt rewrap(String token, String keyName, VaultTransitRewr\n \n     // ---\n \n+    protected <T> T delete(String path, String token, Object body, Class<T> resultClass, int expectedCode) {\n+        Request request = builder(path, token).delete(requestBody(body)).build();\n+        return exec(request, resultClass, expectedCode, true);\n+    }\n+\n     protected <T> T post(String path, String token, Object body, Class<T> resultClass, int expectedCode) {\n         Request request = builder(path, token).post(requestBody(body)).build();\n-        return exec(request, resultClass, expectedCode);\n+        return exec(request, resultClass, expectedCode, true);\n     }\n \n     protected <T> T post(String path, String token, Object body, Class<T> resultClass) {\n         Request request = builder(path, token).post(requestBody(body)).build();\n-        return exec(request, resultClass);\n+        return exec(request, resultClass, true);\n     }\n \n     protected <T> T put(String path, String token, Object body, Class<T> resultClass) {\n         Request request = builder(path, token).put(requestBody(body)).build();\n-        return exec(request, resultClass);\n+        return exec(request, resultClass, true);\n     }\n \n     protected <T> T get(String path, String token, Class<T> resultClass) {\n+        return get(path, token, resultClass, true);\n+    }\n+\n+    protected <T> T get(String path, String token, Class<T> resultClass, boolean throwOn404) {\n         Request request = builder(path, token).get().build();\n-        return exec(request, resultClass);\n+        return exec(request, resultClass, throwOn404);\n     }\n \n-    private <T> T exec(Request request, Class<T> resultClass) {\n-        return exec(request, resultClass, 200);\n+    private <T> T exec(Request request, Class<T> resultClass, boolean throwOn404) {\n+        return exec(request, resultClass, 200, throwOn404);\n     }\n \n-    private <T> T exec(Request request, Class<T> resultClass, int expectedCode) {\n+    private <T> T exec(Request request, Class<T> resultClass, int expectedCode, boolean throwOn404) {\n         try (Response response = client.newCall(request).execute()) {\n             if (response.code() != expectedCode) {\n+                if (response.code() == 404 && !throwOn404) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk2NzQzOQ=="}, "originalCommit": {"oid": "d433fe8c6326eabd3eb966865da35f98323ea468"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyNzEyMA==", "bodyText": "@vsevel Thanks; yes the current behavior looks correct to me, as with this PR's change the difference between the non-existent path and no secrets being available at the existing path becomes null vs empty Map. I feel an exception is warranted if a user has used the path which has not been correctly configured. Please revert this one, As I said, we can have a comprehensive discussion about the way the Vault responses are treated (for all the supported engines) in a dedicated issue and change as needed :-)", "url": "https://github.com/quarkusio/quarkus/pull/7294#discussion_r382527120", "createdAt": "2020-02-21T11:13:23Z", "author": {"login": "sberyozkin"}, "path": "extensions/vault/runtime/src/main/java/io/quarkus/vault/runtime/client/OkHttpVaultClient.java", "diffHunk": "@@ -146,33 +169,45 @@ public VaultTransitEncrypt rewrap(String token, String keyName, VaultTransitRewr\n \n     // ---\n \n+    protected <T> T delete(String path, String token, Object body, Class<T> resultClass, int expectedCode) {\n+        Request request = builder(path, token).delete(requestBody(body)).build();\n+        return exec(request, resultClass, expectedCode, true);\n+    }\n+\n     protected <T> T post(String path, String token, Object body, Class<T> resultClass, int expectedCode) {\n         Request request = builder(path, token).post(requestBody(body)).build();\n-        return exec(request, resultClass, expectedCode);\n+        return exec(request, resultClass, expectedCode, true);\n     }\n \n     protected <T> T post(String path, String token, Object body, Class<T> resultClass) {\n         Request request = builder(path, token).post(requestBody(body)).build();\n-        return exec(request, resultClass);\n+        return exec(request, resultClass, true);\n     }\n \n     protected <T> T put(String path, String token, Object body, Class<T> resultClass) {\n         Request request = builder(path, token).put(requestBody(body)).build();\n-        return exec(request, resultClass);\n+        return exec(request, resultClass, true);\n     }\n \n     protected <T> T get(String path, String token, Class<T> resultClass) {\n+        return get(path, token, resultClass, true);\n+    }\n+\n+    protected <T> T get(String path, String token, Class<T> resultClass, boolean throwOn404) {\n         Request request = builder(path, token).get().build();\n-        return exec(request, resultClass);\n+        return exec(request, resultClass, throwOn404);\n     }\n \n-    private <T> T exec(Request request, Class<T> resultClass) {\n-        return exec(request, resultClass, 200);\n+    private <T> T exec(Request request, Class<T> resultClass, boolean throwOn404) {\n+        return exec(request, resultClass, 200, throwOn404);\n     }\n \n-    private <T> T exec(Request request, Class<T> resultClass, int expectedCode) {\n+    private <T> T exec(Request request, Class<T> resultClass, int expectedCode, boolean throwOn404) {\n         try (Response response = client.newCall(request).execute()) {\n             if (response.code() != expectedCode) {\n+                if (response.code() == 404 && !throwOn404) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk2NzQzOQ=="}, "originalCommit": {"oid": "d433fe8c6326eabd3eb966865da35f98323ea468"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU4MzY3NQ==", "bodyText": "ok. I will revert to the old behavior and squash all commits. then you can approve if no other comments.\nI will do this tonight.\n\nI feel an exception is warranted if a user has used the path which has not been correctly configured\n\nminor correction: we are not talking about using a path that has not been configured correctly, but rather getting a non existent path that is passed as an argument.\nif vault was a java object, it would look like this:\nMap<String, Properties> vault = new HashMap<>()\n\nvault.put(\"path1\", new Properties());\n\nProperties props2 = new Properties();\nprops2.put(\"mykey\", \"myvalue\");\nvault.put(\"path2\", props2);\n\nvault.get(\"path1\") => empty properties object\nvault.get(\"path2\") => properties object with mykey=myvalue\nvault.get(\"foobar\") => null\n\nso getting a null looks right from a java api perspective.", "url": "https://github.com/quarkusio/quarkus/pull/7294#discussion_r382583675", "createdAt": "2020-02-21T13:35:59Z", "author": {"login": "vsevel"}, "path": "extensions/vault/runtime/src/main/java/io/quarkus/vault/runtime/client/OkHttpVaultClient.java", "diffHunk": "@@ -146,33 +169,45 @@ public VaultTransitEncrypt rewrap(String token, String keyName, VaultTransitRewr\n \n     // ---\n \n+    protected <T> T delete(String path, String token, Object body, Class<T> resultClass, int expectedCode) {\n+        Request request = builder(path, token).delete(requestBody(body)).build();\n+        return exec(request, resultClass, expectedCode, true);\n+    }\n+\n     protected <T> T post(String path, String token, Object body, Class<T> resultClass, int expectedCode) {\n         Request request = builder(path, token).post(requestBody(body)).build();\n-        return exec(request, resultClass, expectedCode);\n+        return exec(request, resultClass, expectedCode, true);\n     }\n \n     protected <T> T post(String path, String token, Object body, Class<T> resultClass) {\n         Request request = builder(path, token).post(requestBody(body)).build();\n-        return exec(request, resultClass);\n+        return exec(request, resultClass, true);\n     }\n \n     protected <T> T put(String path, String token, Object body, Class<T> resultClass) {\n         Request request = builder(path, token).put(requestBody(body)).build();\n-        return exec(request, resultClass);\n+        return exec(request, resultClass, true);\n     }\n \n     protected <T> T get(String path, String token, Class<T> resultClass) {\n+        return get(path, token, resultClass, true);\n+    }\n+\n+    protected <T> T get(String path, String token, Class<T> resultClass, boolean throwOn404) {\n         Request request = builder(path, token).get().build();\n-        return exec(request, resultClass);\n+        return exec(request, resultClass, throwOn404);\n     }\n \n-    private <T> T exec(Request request, Class<T> resultClass) {\n-        return exec(request, resultClass, 200);\n+    private <T> T exec(Request request, Class<T> resultClass, boolean throwOn404) {\n+        return exec(request, resultClass, 200, throwOn404);\n     }\n \n-    private <T> T exec(Request request, Class<T> resultClass, int expectedCode) {\n+    private <T> T exec(Request request, Class<T> resultClass, int expectedCode, boolean throwOn404) {\n         try (Response response = client.newCall(request).execute()) {\n             if (response.code() != expectedCode) {\n+                if (response.code() == 404 && !throwOn404) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk2NzQzOQ=="}, "originalCommit": {"oid": "d433fe8c6326eabd3eb966865da35f98323ea468"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY0Nzk0MA==", "bodyText": "Hi Vincent @vsevel that definitely looks good when we have a local map :-). But not IMHO when the vault secret engine interface represent a remote Vault server. That foobar in your example, it can actually be set via a custom Quarkus property, but the user forgot that the path was in fact barfoo :-).\nSo yeah, please revert it and I'll be happy to merge, thanks", "url": "https://github.com/quarkusio/quarkus/pull/7294#discussion_r382647940", "createdAt": "2020-02-21T15:35:07Z", "author": {"login": "sberyozkin"}, "path": "extensions/vault/runtime/src/main/java/io/quarkus/vault/runtime/client/OkHttpVaultClient.java", "diffHunk": "@@ -146,33 +169,45 @@ public VaultTransitEncrypt rewrap(String token, String keyName, VaultTransitRewr\n \n     // ---\n \n+    protected <T> T delete(String path, String token, Object body, Class<T> resultClass, int expectedCode) {\n+        Request request = builder(path, token).delete(requestBody(body)).build();\n+        return exec(request, resultClass, expectedCode, true);\n+    }\n+\n     protected <T> T post(String path, String token, Object body, Class<T> resultClass, int expectedCode) {\n         Request request = builder(path, token).post(requestBody(body)).build();\n-        return exec(request, resultClass, expectedCode);\n+        return exec(request, resultClass, expectedCode, true);\n     }\n \n     protected <T> T post(String path, String token, Object body, Class<T> resultClass) {\n         Request request = builder(path, token).post(requestBody(body)).build();\n-        return exec(request, resultClass);\n+        return exec(request, resultClass, true);\n     }\n \n     protected <T> T put(String path, String token, Object body, Class<T> resultClass) {\n         Request request = builder(path, token).put(requestBody(body)).build();\n-        return exec(request, resultClass);\n+        return exec(request, resultClass, true);\n     }\n \n     protected <T> T get(String path, String token, Class<T> resultClass) {\n+        return get(path, token, resultClass, true);\n+    }\n+\n+    protected <T> T get(String path, String token, Class<T> resultClass, boolean throwOn404) {\n         Request request = builder(path, token).get().build();\n-        return exec(request, resultClass);\n+        return exec(request, resultClass, throwOn404);\n     }\n \n-    private <T> T exec(Request request, Class<T> resultClass) {\n-        return exec(request, resultClass, 200);\n+    private <T> T exec(Request request, Class<T> resultClass, boolean throwOn404) {\n+        return exec(request, resultClass, 200, throwOn404);\n     }\n \n-    private <T> T exec(Request request, Class<T> resultClass, int expectedCode) {\n+    private <T> T exec(Request request, Class<T> resultClass, int expectedCode, boolean throwOn404) {\n         try (Response response = client.newCall(request).execute()) {\n             if (response.code() != expectedCode) {\n+                if (response.code() == 404 && !throwOn404) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk2NzQzOQ=="}, "originalCommit": {"oid": "d433fe8c6326eabd3eb966865da35f98323ea468"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc3MTA4NQ==", "bodyText": "Hi Vincent @vsevel I was thinking while I was offline if I was unreasonable in asking you to revert this change, but eventually came to the conclusion the way it currently works is good.\nReturning to your java code example, I should say that the API designers often use the empty List or Map for a pure convenience purposes, to let the users avoid checking for null :-), as opposed to overloading the response value to mark an exceptional situation, such that the users can write (they might already be writing it this way now):\ntry {\n    return vault.get(\"path1\").get(\"secret1Key\");\n} catch (VaultException ex) {}\n\nThe new code would leak NPE and result in 500.\nSo IMHO we will be fine with keeping your original code idea in place :-) thanks", "url": "https://github.com/quarkusio/quarkus/pull/7294#discussion_r382771085", "createdAt": "2020-02-21T19:43:03Z", "author": {"login": "sberyozkin"}, "path": "extensions/vault/runtime/src/main/java/io/quarkus/vault/runtime/client/OkHttpVaultClient.java", "diffHunk": "@@ -146,33 +169,45 @@ public VaultTransitEncrypt rewrap(String token, String keyName, VaultTransitRewr\n \n     // ---\n \n+    protected <T> T delete(String path, String token, Object body, Class<T> resultClass, int expectedCode) {\n+        Request request = builder(path, token).delete(requestBody(body)).build();\n+        return exec(request, resultClass, expectedCode, true);\n+    }\n+\n     protected <T> T post(String path, String token, Object body, Class<T> resultClass, int expectedCode) {\n         Request request = builder(path, token).post(requestBody(body)).build();\n-        return exec(request, resultClass, expectedCode);\n+        return exec(request, resultClass, expectedCode, true);\n     }\n \n     protected <T> T post(String path, String token, Object body, Class<T> resultClass) {\n         Request request = builder(path, token).post(requestBody(body)).build();\n-        return exec(request, resultClass);\n+        return exec(request, resultClass, true);\n     }\n \n     protected <T> T put(String path, String token, Object body, Class<T> resultClass) {\n         Request request = builder(path, token).put(requestBody(body)).build();\n-        return exec(request, resultClass);\n+        return exec(request, resultClass, true);\n     }\n \n     protected <T> T get(String path, String token, Class<T> resultClass) {\n+        return get(path, token, resultClass, true);\n+    }\n+\n+    protected <T> T get(String path, String token, Class<T> resultClass, boolean throwOn404) {\n         Request request = builder(path, token).get().build();\n-        return exec(request, resultClass);\n+        return exec(request, resultClass, throwOn404);\n     }\n \n-    private <T> T exec(Request request, Class<T> resultClass) {\n-        return exec(request, resultClass, 200);\n+    private <T> T exec(Request request, Class<T> resultClass, boolean throwOn404) {\n+        return exec(request, resultClass, 200, throwOn404);\n     }\n \n-    private <T> T exec(Request request, Class<T> resultClass, int expectedCode) {\n+    private <T> T exec(Request request, Class<T> resultClass, int expectedCode, boolean throwOn404) {\n         try (Response response = client.newCall(request).execute()) {\n             if (response.code() != expectedCode) {\n+                if (response.code() == 404 && !throwOn404) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk2NzQzOQ=="}, "originalCommit": {"oid": "d433fe8c6326eabd3eb966865da35f98323ea468"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgwNzkxNA==", "bodyText": "404 changes have been reverted. I have squashed the commits. waiting for CI to go through. cheers.", "url": "https://github.com/quarkusio/quarkus/pull/7294#discussion_r382807914", "createdAt": "2020-02-21T21:12:12Z", "author": {"login": "vsevel"}, "path": "extensions/vault/runtime/src/main/java/io/quarkus/vault/runtime/client/OkHttpVaultClient.java", "diffHunk": "@@ -146,33 +169,45 @@ public VaultTransitEncrypt rewrap(String token, String keyName, VaultTransitRewr\n \n     // ---\n \n+    protected <T> T delete(String path, String token, Object body, Class<T> resultClass, int expectedCode) {\n+        Request request = builder(path, token).delete(requestBody(body)).build();\n+        return exec(request, resultClass, expectedCode, true);\n+    }\n+\n     protected <T> T post(String path, String token, Object body, Class<T> resultClass, int expectedCode) {\n         Request request = builder(path, token).post(requestBody(body)).build();\n-        return exec(request, resultClass, expectedCode);\n+        return exec(request, resultClass, expectedCode, true);\n     }\n \n     protected <T> T post(String path, String token, Object body, Class<T> resultClass) {\n         Request request = builder(path, token).post(requestBody(body)).build();\n-        return exec(request, resultClass);\n+        return exec(request, resultClass, true);\n     }\n \n     protected <T> T put(String path, String token, Object body, Class<T> resultClass) {\n         Request request = builder(path, token).put(requestBody(body)).build();\n-        return exec(request, resultClass);\n+        return exec(request, resultClass, true);\n     }\n \n     protected <T> T get(String path, String token, Class<T> resultClass) {\n+        return get(path, token, resultClass, true);\n+    }\n+\n+    protected <T> T get(String path, String token, Class<T> resultClass, boolean throwOn404) {\n         Request request = builder(path, token).get().build();\n-        return exec(request, resultClass);\n+        return exec(request, resultClass, throwOn404);\n     }\n \n-    private <T> T exec(Request request, Class<T> resultClass) {\n-        return exec(request, resultClass, 200);\n+    private <T> T exec(Request request, Class<T> resultClass, boolean throwOn404) {\n+        return exec(request, resultClass, 200, throwOn404);\n     }\n \n-    private <T> T exec(Request request, Class<T> resultClass, int expectedCode) {\n+    private <T> T exec(Request request, Class<T> resultClass, int expectedCode, boolean throwOn404) {\n         try (Response response = client.newCall(request).execute()) {\n             if (response.code() != expectedCode) {\n+                if (response.code() == 404 && !throwOn404) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk2NzQzOQ=="}, "originalCommit": {"oid": "d433fe8c6326eabd3eb966865da35f98323ea468"}, "originalPosition": 99}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 117, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}