{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5MTYwMDI4", "number": 10221, "title": "Reactive sql client pool in thread local", "bodyText": "Added the quarkus.datasource.reactive.thread-local experimental configuration, which stores the pool into a thread-local.", "createdAt": "2020-06-24T11:58:25Z", "url": "https://github.com/quarkusio/quarkus/pull/10221", "merged": true, "mergeCommit": {"oid": "c00822d201675069371cec1de4786ef13695310a"}, "closed": true, "closedAt": "2020-06-24T15:58:09Z", "author": {"login": "FroMage"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuZJWJAFqTQzNjU4NTM3NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcurCvzgFqTQzNzMwOTY2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NTg1Mzc0", "url": "https://github.com/quarkusio/quarkus/pull/10221#pullrequestreview-436585374", "createdAt": "2020-06-24T12:11:04Z", "commit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjoxMTowNFrOGoPYDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjoyMzoyOVrOGoPxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0ODE0Mg==", "bodyText": "I'm not too familiar with loggers and junit extensions, but isn't this going to leak in the testsuite?\nLooks like it will keep adding new InMemoryLogHandler instances, and also it's not emptying each of them after usage. I suppose the rootLogger is a global static so this might get nasty?", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444848142", "createdAt": "2020-06-24T12:11:04Z", "author": {"login": "Sanne"}, "path": "test-framework/junit5-internal/src/main/java/io/quarkus/test/QuarkusDevModeTest.java", "diffHunk": "@@ -110,6 +127,7 @@ public Object createTestInstance(TestInstanceFactoryContext factoryContext, Exte\n \n     @Override\n     public void beforeEach(ExtensionContext extensionContext) throws Exception {\n+        rootLogger.addHandler(inMemoryLogHandler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0ODgyNQ==", "bodyText": "what is the goal of this replacement? Might need a comment?", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444848825", "createdAt": "2020-06-24T12:12:31Z", "author": {"login": "Sanne"}, "path": "integration-tests/reactive-pg-client/src/test/java/io/quarkus/it/reactive/pg/client/HotReloadTestCase.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package io.quarkus.it.reactive.pg.client;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.containsString;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.logging.LogRecord;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.test.QuarkusDevModeTest;\n+\n+public class HotReloadTestCase {\n+    @RegisterExtension\n+    final static QuarkusDevModeTest TEST = new QuarkusDevModeTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(HotReloadFruitResource.class)\n+                    .addAsResource(\"application-tl.properties\", \"application.properties\"))\n+            .setLogRecordPredicate(record -> {\n+                return record.getLoggerName().startsWith(\"io.quarkus.reactive.datasource\");\n+            });\n+\n+    @AfterAll\n+    public static void afterAll() {\n+        List<LogRecord> records = TEST.getLogRecords();\n+        Assertions.assertEquals(8, records.size());\n+        // make sure that we closed all thread-local pools on reload and close\n+        Assertions.assertEquals(\"Making pool for thread: %s\", records.get(0).getMessage());\n+        Assertions.assertEquals(\"Making pool for thread: %s\", records.get(1).getMessage());\n+        Assertions.assertEquals(\"Closing pool: %s\", records.get(2).getMessage());\n+        Assertions.assertEquals(\"Closing pool: %s\", records.get(3).getMessage());\n+        Assertions.assertEquals(\"Making pool for thread: %s\", records.get(4).getMessage());\n+        Assertions.assertEquals(\"Making pool for thread: %s\", records.get(5).getMessage());\n+        Assertions.assertEquals(\"Closing pool: %s\", records.get(6).getMessage());\n+        Assertions.assertEquals(\"Closing pool: %s\", records.get(7).getMessage());\n+    }\n+\n+    @Test\n+    public void testAddNewFieldToEntity() {\n+        checkRequest(\"Orange\");\n+        TEST.modifySourceFile(HotReloadFruitResource.class, new Function<String, String>() {\n+            @Override\n+            public String apply(String s) {\n+                return s.replace(\"'Orange'\", \"'Strawberry'\");\n+            }\n+        });\n+        TEST.modifyResourceFile(\"application.properties\", new Function<String, String>() {\n+            @Override\n+            public String apply(String s) {\n+                return s.replace(\"quarkus.datasource.reactive.thread-local=true\",\n+                        \"quarkus.datasource.reactive.thread-local = true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0OTY4NQ==", "bodyText": "make it final ?", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444849685", "createdAt": "2020-06-24T12:14:17Z", "author": {"login": "Sanne"}, "path": "extensions/reactive-pg-client/runtime/src/main/java/io/quarkus/reactive/pg/client/runtime/ThreadLocalPgPool.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.quarkus.reactive.pg.client.runtime;\n+\n+import io.quarkus.reactive.datasource.runtime.ThreadLocalPool;\n+import io.vertx.core.Vertx;\n+import io.vertx.pgclient.PgConnectOptions;\n+import io.vertx.pgclient.PgPool;\n+import io.vertx.sqlclient.PoolOptions;\n+\n+public class ThreadLocalPgPool extends ThreadLocalPool<PgPool> implements PgPool {\n+\n+    private PgConnectOptions pgConnectOptions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0OTg2OA==", "bodyText": "I think it requires final", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444849868", "createdAt": "2020-06-24T12:14:37Z", "author": {"login": "Sanne"}, "path": "extensions/reactive-mysql-client/runtime/src/main/java/io/quarkus/reactive/mysql/client/runtime/ThreadLocalMySQLPool.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.quarkus.reactive.mysql.client.runtime;\n+\n+import io.quarkus.reactive.datasource.runtime.ThreadLocalPool;\n+import io.vertx.core.Vertx;\n+import io.vertx.mysqlclient.MySQLConnectOptions;\n+import io.vertx.mysqlclient.MySQLPool;\n+import io.vertx.sqlclient.PoolOptions;\n+\n+public class ThreadLocalMySQLPool extends ThreadLocalPool<MySQLPool> implements MySQLPool {\n+\n+    private MySQLConnectOptions mySQLConnectOptions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1MDA4OQ==", "bodyText": "Needs final", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444850089", "createdAt": "2020-06-24T12:15:03Z", "author": {"login": "Sanne"}, "path": "extensions/reactive-db2-client/runtime/src/main/java/io/quarkus/reactive/db2/client/runtime/ThreadLocalDB2Pool.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.quarkus.reactive.db2.client.runtime;\n+\n+import io.quarkus.reactive.datasource.runtime.ThreadLocalPool;\n+import io.vertx.core.Vertx;\n+import io.vertx.db2client.DB2ConnectOptions;\n+import io.vertx.db2client.DB2Pool;\n+import io.vertx.sqlclient.PoolOptions;\n+\n+public class ThreadLocalDB2Pool extends ThreadLocalPool<DB2Pool> implements DB2Pool {\n+\n+    private DB2ConnectOptions db2ConnectOptions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1MTI1MA==", "bodyText": "This will likely need either volatile or an AtomicReference ?\nI'd suggest using an AtomicReference, so that we can grab & clear it atomically and make sure no other concurreent user manages to race within the close().", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444851250", "createdAt": "2020-06-24T12:17:19Z", "author": {"login": "Sanne"}, "path": "extensions/reactive-datasource/runtime/src/main/java/io/quarkus/reactive/datasource/runtime/ThreadLocalPool.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package io.quarkus.reactive.datasource.runtime;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Vertx;\n+import io.vertx.sqlclient.Pool;\n+import io.vertx.sqlclient.PoolOptions;\n+import io.vertx.sqlclient.PreparedQuery;\n+import io.vertx.sqlclient.Query;\n+import io.vertx.sqlclient.Row;\n+import io.vertx.sqlclient.RowSet;\n+import io.vertx.sqlclient.SqlConnection;\n+import io.vertx.sqlclient.Transaction;\n+\n+public abstract class ThreadLocalPool<PoolType extends Pool> implements Pool {\n+\n+    private static final Logger log = Logger.getLogger(ThreadLocalPool.class);\n+\n+    private ThreadLocal<PoolType> pool = new ThreadLocal<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1MjQzNw==", "bodyText": "Seems like this need to be a Vector, and final. Or just final and synchronized..", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444852437", "createdAt": "2020-06-24T12:19:35Z", "author": {"login": "Sanne"}, "path": "extensions/reactive-datasource/runtime/src/main/java/io/quarkus/reactive/datasource/runtime/ThreadLocalPool.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package io.quarkus.reactive.datasource.runtime;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Vertx;\n+import io.vertx.sqlclient.Pool;\n+import io.vertx.sqlclient.PoolOptions;\n+import io.vertx.sqlclient.PreparedQuery;\n+import io.vertx.sqlclient.Query;\n+import io.vertx.sqlclient.Row;\n+import io.vertx.sqlclient.RowSet;\n+import io.vertx.sqlclient.SqlConnection;\n+import io.vertx.sqlclient.Transaction;\n+\n+public abstract class ThreadLocalPool<PoolType extends Pool> implements Pool {\n+\n+    private static final Logger log = Logger.getLogger(ThreadLocalPool.class);\n+\n+    private ThreadLocal<PoolType> pool = new ThreadLocal<>();\n+    private static List<Pool> threadLocalPools = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1MjYzOQ==", "bodyText": "Best to make these both final as well.", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444852639", "createdAt": "2020-06-24T12:19:56Z", "author": {"login": "Sanne"}, "path": "extensions/reactive-datasource/runtime/src/main/java/io/quarkus/reactive/datasource/runtime/ThreadLocalPool.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package io.quarkus.reactive.datasource.runtime;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Vertx;\n+import io.vertx.sqlclient.Pool;\n+import io.vertx.sqlclient.PoolOptions;\n+import io.vertx.sqlclient.PreparedQuery;\n+import io.vertx.sqlclient.Query;\n+import io.vertx.sqlclient.Row;\n+import io.vertx.sqlclient.RowSet;\n+import io.vertx.sqlclient.SqlConnection;\n+import io.vertx.sqlclient.Transaction;\n+\n+public abstract class ThreadLocalPool<PoolType extends Pool> implements Pool {\n+\n+    private static final Logger log = Logger.getLogger(ThreadLocalPool.class);\n+\n+    private ThreadLocal<PoolType> pool = new ThreadLocal<>();\n+    private static List<Pool> threadLocalPools = new ArrayList<>();\n+\n+    protected PoolOptions poolOptions;\n+    protected Vertx vertx;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1NDU3Ng==", "bodyText": "The configuration property isn't suggesting that it relates to an enhanced connection pool.\nMaybe threadlocal-pool ? Or pool-strategy= [enum: \"threadlocal\" | \"simple\" ] ?", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r444854576", "createdAt": "2020-06-24T12:23:29Z", "author": {"login": "Sanne"}, "path": "integration-tests/reactive-pg-client/src/test/resources/application-tl.properties", "diffHunk": "@@ -0,0 +1,6 @@\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=hibernate_orm_test\n+quarkus.datasource.password=hibernate_orm_test\n+quarkus.datasource.reactive.url=${reactive-postgres.url}\n+quarkus.datasource.reactive.thread-local=true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "307b35ad2918c56b8b817fee5604a426938f8742", "author": {"user": {"login": "FroMage", "name": "St\u00e9phane \u00c9pardaud"}}, "url": "https://github.com/quarkusio/quarkus/commit/307b35ad2918c56b8b817fee5604a426938f8742", "committedDate": "2020-06-24T11:56:51Z", "message": "Added a setting to turn the reactive Pools into thread-local pools\n\nOnly tested it for pg-client because they all use the same code"}, "afterCommit": {"oid": "f66f865d7ce2d77ddb5d0223ce123c21bbec1803", "author": {"user": {"login": "FroMage", "name": "St\u00e9phane \u00c9pardaud"}}, "url": "https://github.com/quarkusio/quarkus/commit/f66f865d7ce2d77ddb5d0223ce123c21bbec1803", "committedDate": "2020-06-24T12:46:53Z", "message": "Added a setting to turn the reactive Pools into thread-local pools\n\nOnly tested it for pg-client because they all use the same code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c0b348ef0d46cba42de7ab9221679e01b614cdf", "author": {"user": {"login": "FroMage", "name": "St\u00e9phane \u00c9pardaud"}}, "url": "https://github.com/quarkusio/quarkus/commit/0c0b348ef0d46cba42de7ab9221679e01b614cdf", "committedDate": "2020-06-24T13:03:52Z", "message": "QuarkusDevModeTest: added ability to collect logs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2433d84651bbb714b4bafd8a2a2b8cf7734f36c", "author": {"user": {"login": "FroMage", "name": "St\u00e9phane \u00c9pardaud"}}, "url": "https://github.com/quarkusio/quarkus/commit/d2433d84651bbb714b4bafd8a2a2b8cf7734f36c", "committedDate": "2020-06-24T13:03:52Z", "message": "Added a setting to turn the reactive Pools into thread-local pools"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f66f865d7ce2d77ddb5d0223ce123c21bbec1803", "author": {"user": {"login": "FroMage", "name": "St\u00e9phane \u00c9pardaud"}}, "url": "https://github.com/quarkusio/quarkus/commit/f66f865d7ce2d77ddb5d0223ce123c21bbec1803", "committedDate": "2020-06-24T12:46:53Z", "message": "Added a setting to turn the reactive Pools into thread-local pools\n\nOnly tested it for pg-client because they all use the same code"}, "afterCommit": {"oid": "d2433d84651bbb714b4bafd8a2a2b8cf7734f36c", "author": {"user": {"login": "FroMage", "name": "St\u00e9phane \u00c9pardaud"}}, "url": "https://github.com/quarkusio/quarkus/commit/d2433d84651bbb714b4bafd8a2a2b8cf7734f36c", "committedDate": "2020-06-24T13:03:52Z", "message": "Added a setting to turn the reactive Pools into thread-local pools"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NzcxMzg1", "url": "https://github.com/quarkusio/quarkus/pull/10221#pullrequestreview-436771385", "createdAt": "2020-06-24T15:39:08Z", "commit": {"oid": "d2433d84651bbb714b4bafd8a2a2b8cf7734f36c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MzA5NjY3", "url": "https://github.com/quarkusio/quarkus/pull/10221#pullrequestreview-437309667", "createdAt": "2020-06-25T09:10:31Z", "commit": {"oid": "d2433d84651bbb714b4bafd8a2a2b8cf7734f36c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwOToxMDozMlrOGoyJFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwOToxNTowMlrOGoyS3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQxNzc0OQ==", "bodyText": "This could be a copy on write list and relieve from synchronization, given the list will not change often.", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r445417749", "createdAt": "2020-06-25T09:10:32Z", "author": {"login": "tsegismont"}, "path": "extensions/reactive-datasource/runtime/src/main/java/io/quarkus/reactive/datasource/runtime/ThreadLocalPool.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package io.quarkus.reactive.datasource.runtime;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Vertx;\n+import io.vertx.sqlclient.Pool;\n+import io.vertx.sqlclient.PoolOptions;\n+import io.vertx.sqlclient.PreparedQuery;\n+import io.vertx.sqlclient.Query;\n+import io.vertx.sqlclient.Row;\n+import io.vertx.sqlclient.RowSet;\n+import io.vertx.sqlclient.SqlConnection;\n+import io.vertx.sqlclient.Transaction;\n+\n+public abstract class ThreadLocalPool<PoolType extends Pool> implements Pool {\n+\n+    private static final Logger log = Logger.getLogger(ThreadLocalPool.class);\n+\n+    private final AtomicReference<ThreadLocal<PoolType>> pool = new AtomicReference<>(new ThreadLocal<>());\n+    private static final List<Pool> threadLocalPools = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2433d84651bbb714b4bafd8a2a2b8cf7734f36c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQyMDI1Mw==", "bodyText": "Since you have an AtomicReference, you could use compare and swap and avoid adding a superfluous ThreadLocalPool to the list if two threads execute this part concurrently.", "url": "https://github.com/quarkusio/quarkus/pull/10221#discussion_r445420253", "createdAt": "2020-06-25T09:15:02Z", "author": {"login": "tsegismont"}, "path": "extensions/reactive-datasource/runtime/src/main/java/io/quarkus/reactive/datasource/runtime/ThreadLocalPool.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package io.quarkus.reactive.datasource.runtime;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Vertx;\n+import io.vertx.sqlclient.Pool;\n+import io.vertx.sqlclient.PoolOptions;\n+import io.vertx.sqlclient.PreparedQuery;\n+import io.vertx.sqlclient.Query;\n+import io.vertx.sqlclient.Row;\n+import io.vertx.sqlclient.RowSet;\n+import io.vertx.sqlclient.SqlConnection;\n+import io.vertx.sqlclient.Transaction;\n+\n+public abstract class ThreadLocalPool<PoolType extends Pool> implements Pool {\n+\n+    private static final Logger log = Logger.getLogger(ThreadLocalPool.class);\n+\n+    private final AtomicReference<ThreadLocal<PoolType>> pool = new AtomicReference<>(new ThreadLocal<>());\n+    private static final List<Pool> threadLocalPools = new ArrayList<>();\n+\n+    protected final PoolOptions poolOptions;\n+    protected final Vertx vertx;\n+\n+    public ThreadLocalPool(Vertx vertx, PoolOptions poolOptions) {\n+        this.vertx = vertx;\n+        this.poolOptions = poolOptions;\n+    }\n+\n+    private PoolType pool() {\n+        ThreadLocal<PoolType> poolThreadLocal = pool.get();\n+        PoolType ret = poolThreadLocal.get();\n+        if (ret == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2433d84651bbb714b4bafd8a2a2b8cf7734f36c"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3699, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}