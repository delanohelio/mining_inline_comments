{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4MjUzNTU1", "number": 9815, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODowMzoxMVrOEDVrNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODowMzoxMVrOEDVrNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTM2MzEwOnYy", "diffSide": "RIGHT", "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusTestExtension.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODowMzoxMVrOGgTEcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNToyMjozOFrOGg5J_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUyMDA1MA==", "bodyText": "Isn't this going to be always false?", "url": "https://github.com/quarkusio/quarkus/pull/9815#discussion_r436520050", "createdAt": "2020-06-08T08:03:11Z", "author": {"login": "aloubyansky"}, "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusTestExtension.java", "diffHunk": "@@ -292,6 +269,45 @@ public void beforeEach(ExtensionContext context) throws Exception {\n         }\n     }\n \n+    @Override\n+    public void afterEach(ExtensionContext context) throws Exception {\n+        if (isNativeTest(context)) {\n+            return;\n+        }\n+        if (!failedBoot) {\n+            popMockContext();\n+            for (Object afterEachCallback : afterEachCallbacks) {\n+                Map.Entry<Class<?>, ?> tuple = createQuarkusTestMethodContextTuple(context);\n+                afterEachCallback.getClass().getMethod(\"afterEach\", tuple.getKey())\n+                        .invoke(afterEachCallback, tuple.getValue());\n+            }\n+            boolean nativeImageTest = isNativeTest(context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cfb8723069245412bb4ddc673f14d059048afba"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYxMDgyMg==", "bodyText": "That must be leftover - I just moved the method. I'll take a look tomorrow", "url": "https://github.com/quarkusio/quarkus/pull/9815#discussion_r436610822", "createdAt": "2020-06-08T10:52:06Z", "author": {"login": "geoand"}, "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusTestExtension.java", "diffHunk": "@@ -292,6 +269,45 @@ public void beforeEach(ExtensionContext context) throws Exception {\n         }\n     }\n \n+    @Override\n+    public void afterEach(ExtensionContext context) throws Exception {\n+        if (isNativeTest(context)) {\n+            return;\n+        }\n+        if (!failedBoot) {\n+            popMockContext();\n+            for (Object afterEachCallback : afterEachCallbacks) {\n+                Map.Entry<Class<?>, ?> tuple = createQuarkusTestMethodContextTuple(context);\n+                afterEachCallback.getClass().getMethod(\"afterEach\", tuple.getKey())\n+                        .invoke(afterEachCallback, tuple.getValue());\n+            }\n+            boolean nativeImageTest = isNativeTest(context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUyMDA1MA=="}, "originalCommit": {"oid": "2cfb8723069245412bb4ddc673f14d059048afba"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0NDA2MA==", "bodyText": "Good catch, removed", "url": "https://github.com/quarkusio/quarkus/pull/9815#discussion_r437144060", "createdAt": "2020-06-09T05:22:38Z", "author": {"login": "geoand"}, "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusTestExtension.java", "diffHunk": "@@ -292,6 +269,45 @@ public void beforeEach(ExtensionContext context) throws Exception {\n         }\n     }\n \n+    @Override\n+    public void afterEach(ExtensionContext context) throws Exception {\n+        if (isNativeTest(context)) {\n+            return;\n+        }\n+        if (!failedBoot) {\n+            popMockContext();\n+            for (Object afterEachCallback : afterEachCallbacks) {\n+                Map.Entry<Class<?>, ?> tuple = createQuarkusTestMethodContextTuple(context);\n+                afterEachCallback.getClass().getMethod(\"afterEach\", tuple.getKey())\n+                        .invoke(afterEachCallback, tuple.getValue());\n+            }\n+            boolean nativeImageTest = isNativeTest(context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUyMDA1MA=="}, "originalCommit": {"oid": "2cfb8723069245412bb4ddc673f14d059048afba"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2953, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}