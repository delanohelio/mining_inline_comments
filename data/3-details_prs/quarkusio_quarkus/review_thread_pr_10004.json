{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NDAyOTY3", "number": 10004, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNTowNDoyMlrOEGZDlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMzozMjoxMVrOEGjNWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTM3NDI5OnYy", "diffSide": "RIGHT", "path": "extensions/smallrye-graphql/deployment/src/test/java/io/quarkus/smallrye/graphql/deployment/SecurityTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNTowNDoyMlrOGlKJow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODozMDoxM1rOGllFAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYxNjgwMw==", "bodyText": "We try to avoid star imports but as it's a test, I'll let it slide.", "url": "https://github.com/quarkusio/quarkus/pull/10004#discussion_r441616803", "createdAt": "2020-06-17T15:04:22Z", "author": {"login": "gsmet"}, "path": "extensions/smallrye-graphql/deployment/src/test/java/io/quarkus/smallrye/graphql/deployment/SecurityTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package io.quarkus.smallrye.graphql.deployment;\n+\n+import static org.hamcrest.Matchers.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a456828971f66390dabda130d1df171109f7b985"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA1Nzk4Ng==", "bodyText": "Fixed", "url": "https://github.com/quarkusio/quarkus/pull/10004#discussion_r442057986", "createdAt": "2020-06-18T08:30:13Z", "author": {"login": "jmartisk"}, "path": "extensions/smallrye-graphql/deployment/src/test/java/io/quarkus/smallrye/graphql/deployment/SecurityTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package io.quarkus.smallrye.graphql.deployment;\n+\n+import static org.hamcrest.Matchers.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYxNjgwMw=="}, "originalCommit": {"oid": "a456828971f66390dabda130d1df171109f7b985"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTM3NzMxOnYy", "diffSide": "RIGHT", "path": "extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLExecutionHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNTowNTowMFrOGlKLjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNTowNTowMFrOGlKLjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYxNzI5NA==", "bodyText": "@stuartwdouglas could you check that one? Looks like a good backport candidate.", "url": "https://github.com/quarkusio/quarkus/pull/10004#discussion_r441617294", "createdAt": "2020-06-17T15:05:00Z", "author": {"login": "gsmet"}, "path": "extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLExecutionHandler.java", "diffHunk": "@@ -50,6 +53,11 @@ public void handle(final RoutingContext ctx) {\n     }\n \n     private void doHandle(final RoutingContext ctx) {\n+        Instance<CurrentIdentityAssociation> association = Arc.container().select(CurrentIdentityAssociation.class);\n+        if (association.isResolvable()) {\n+            association.get().setIdentity(QuarkusHttpUser.getSecurityIdentity(ctx, null));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a456828971f66390dabda130d1df171109f7b985"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MzAzNzY4OnYy", "diffSide": "RIGHT", "path": "extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLExecutionHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMzozMjoxMVrOGlaunQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNzo1NDowNFrOGljxgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg4ODQxMw==", "bodyText": "This should not be resolved per request, it should either be looked up in the constructor of cached in a volatile to improve performance.", "url": "https://github.com/quarkusio/quarkus/pull/10004#discussion_r441888413", "createdAt": "2020-06-17T23:32:11Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLExecutionHandler.java", "diffHunk": "@@ -50,6 +53,11 @@ public void handle(final RoutingContext ctx) {\n     }\n \n     private void doHandle(final RoutingContext ctx) {\n+        Instance<CurrentIdentityAssociation> association = Arc.container().select(CurrentIdentityAssociation.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a456828971f66390dabda130d1df171109f7b985"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAxMjQ5NQ==", "bodyText": "I'm not quite sure how to do this.\nI can't do that in the constructor, because that is called from a recorder, so Arc.container() doesn't work yet.\nIf I store it into a volatile variable, I need to be able to store null in some cases, in which case I won't be able to say whether the association is really null, or just not attempted to resolve yet, therefore I'll need to keep a boolean field somewhere to distinguish this, and check it every time, so the performance improvement might not be worth it anymore?", "url": "https://github.com/quarkusio/quarkus/pull/10004#discussion_r442012495", "createdAt": "2020-06-18T07:08:15Z", "author": {"login": "jmartisk"}, "path": "extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLExecutionHandler.java", "diffHunk": "@@ -50,6 +53,11 @@ public void handle(final RoutingContext ctx) {\n     }\n \n     private void doHandle(final RoutingContext ctx) {\n+        Instance<CurrentIdentityAssociation> association = Arc.container().select(CurrentIdentityAssociation.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg4ODQxMw=="}, "originalCommit": {"oid": "a456828971f66390dabda130d1df171109f7b985"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAzNjYxMA==", "bodyText": "You should be able to depend on BeanContainerBuildItem in your processor and then just pass the container into the recorder.", "url": "https://github.com/quarkusio/quarkus/pull/10004#discussion_r442036610", "createdAt": "2020-06-18T07:54:04Z", "author": {"login": "stuartwdouglas"}, "path": "extensions/smallrye-graphql/runtime/src/main/java/io/quarkus/smallrye/graphql/runtime/SmallRyeGraphQLExecutionHandler.java", "diffHunk": "@@ -50,6 +53,11 @@ public void handle(final RoutingContext ctx) {\n     }\n \n     private void doHandle(final RoutingContext ctx) {\n+        Instance<CurrentIdentityAssociation> association = Arc.container().select(CurrentIdentityAssociation.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg4ODQxMw=="}, "originalCommit": {"oid": "a456828971f66390dabda130d1df171109f7b985"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2870, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}