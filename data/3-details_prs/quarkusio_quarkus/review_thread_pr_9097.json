{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNzE0NTUw", "number": 9097, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDowMjowMVrOD51OxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDo0NToxM1rOD52hXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTY3NTU2OnYy", "diffSide": "RIGHT", "path": "extensions/agroal/deployment/src/main/java/io/quarkus/agroal/deployment/AgroalProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDowMjowMVrOGRUkSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDowMjowMVrOGRUkSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgxNTk0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // add the @DataSource class otherwise it won't registered as a qualifier\n          \n          \n            \n                    // add the @DataSource class otherwise it won't be registered as a qualifier", "url": "https://github.com/quarkusio/quarkus/pull/9097#discussion_r420815944", "createdAt": "2020-05-06T14:02:01Z", "author": {"login": "gsmet"}, "path": "extensions/agroal/deployment/src/main/java/io/quarkus/agroal/deployment/AgroalProcessor.java", "diffHunk": "@@ -197,28 +163,111 @@ private static void validateBuildTimeConfig(AggregatedDataSourceBuildTimeConfigB\n         }\n     }\n \n-    @Record(ExecutionTime.RUNTIME_INIT)\n+    private DataSourceSupport getDataSourceSupport(\n+            List<AggregatedDataSourceBuildTimeConfigBuildItem> aggregatedBuildTimeConfigBuildItems,\n+            SslNativeConfigBuildItem sslNativeConfig, Capabilities capabilities) {\n+        Map<String, DataSourceSupport.Entry> dataSourceSupportEntries = new HashMap<>();\n+        for (AggregatedDataSourceBuildTimeConfigBuildItem aggregatedDataSourceBuildTimeConfig : aggregatedBuildTimeConfigBuildItems) {\n+            String dataSourceName = aggregatedDataSourceBuildTimeConfig.getName();\n+            dataSourceSupportEntries.put(dataSourceName,\n+                    new DataSourceSupport.Entry(dataSourceName, aggregatedDataSourceBuildTimeConfig.getResolvedDbKind(),\n+                            aggregatedDataSourceBuildTimeConfig.getResolvedDriverClass(),\n+                            aggregatedDataSourceBuildTimeConfig.isLegacy(), aggregatedDataSourceBuildTimeConfig.isDefault()));\n+        }\n+\n+        return new DataSourceSupport(sslNativeConfig.isExplicitlyDisabled(),\n+                capabilities.isCapabilityPresent(Capabilities.METRICS), dataSourceSupportEntries);\n+    }\n+\n+    @Record(ExecutionTime.STATIC_INIT)\n     @BuildStep\n-    void configureDataSources(AgroalRecorder recorder,\n-            BuildProducer<JdbcDataSourceBuildItem> jdbcDataSource,\n+    void generateDataSourceSupportBean(AgroalRecorder recorder,\n             List<AggregatedDataSourceBuildTimeConfigBuildItem> aggregatedBuildTimeConfigBuildItems,\n-            DataSourcesBuildTimeConfig dataSourcesBuildTimeConfig,\n-            DataSourcesJdbcBuildTimeConfig dataSourcesJdbcBuildTimeConfig,\n+            SslNativeConfigBuildItem sslNativeConfig,\n+            Capabilities capabilities,\n+            BuildProducer<AdditionalBeanBuildItem> additionalBeans,\n+            BuildProducer<SyntheticBeanBuildItem> syntheticBeanBuildItemBuildProducer) {\n+        if (aggregatedBuildTimeConfigBuildItems.isEmpty()) {\n+            // No datasource has been configured so bail out\n+            return;\n+        }\n+\n+        // make a DataSourceProducer bean\n+        additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClasses(DataSourceProducer.class).setUnremovable()\n+                .setDefaultScope(DotNames.SINGLETON).build());\n+        // add the @DataSource class otherwise it won't registered as a qualifier", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c30a471b64f97690d5782c2105fd4979091c4496"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTY3NzM5OnYy", "diffSide": "RIGHT", "path": "extensions/agroal/deployment/src/main/java/io/quarkus/agroal/deployment/AgroalProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDowMjoyNVrOGRUlcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDowMjoyNVrOGRUlcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgxNjI0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // create the DataSourceSupport bean that DataSourceProducer uses a dependency\n          \n          \n            \n                    // create the DataSourceSupport bean that DataSourceProducer uses as a dependency", "url": "https://github.com/quarkusio/quarkus/pull/9097#discussion_r420816242", "createdAt": "2020-05-06T14:02:25Z", "author": {"login": "gsmet"}, "path": "extensions/agroal/deployment/src/main/java/io/quarkus/agroal/deployment/AgroalProcessor.java", "diffHunk": "@@ -197,28 +163,111 @@ private static void validateBuildTimeConfig(AggregatedDataSourceBuildTimeConfigB\n         }\n     }\n \n-    @Record(ExecutionTime.RUNTIME_INIT)\n+    private DataSourceSupport getDataSourceSupport(\n+            List<AggregatedDataSourceBuildTimeConfigBuildItem> aggregatedBuildTimeConfigBuildItems,\n+            SslNativeConfigBuildItem sslNativeConfig, Capabilities capabilities) {\n+        Map<String, DataSourceSupport.Entry> dataSourceSupportEntries = new HashMap<>();\n+        for (AggregatedDataSourceBuildTimeConfigBuildItem aggregatedDataSourceBuildTimeConfig : aggregatedBuildTimeConfigBuildItems) {\n+            String dataSourceName = aggregatedDataSourceBuildTimeConfig.getName();\n+            dataSourceSupportEntries.put(dataSourceName,\n+                    new DataSourceSupport.Entry(dataSourceName, aggregatedDataSourceBuildTimeConfig.getResolvedDbKind(),\n+                            aggregatedDataSourceBuildTimeConfig.getResolvedDriverClass(),\n+                            aggregatedDataSourceBuildTimeConfig.isLegacy(), aggregatedDataSourceBuildTimeConfig.isDefault()));\n+        }\n+\n+        return new DataSourceSupport(sslNativeConfig.isExplicitlyDisabled(),\n+                capabilities.isCapabilityPresent(Capabilities.METRICS), dataSourceSupportEntries);\n+    }\n+\n+    @Record(ExecutionTime.STATIC_INIT)\n     @BuildStep\n-    void configureDataSources(AgroalRecorder recorder,\n-            BuildProducer<JdbcDataSourceBuildItem> jdbcDataSource,\n+    void generateDataSourceSupportBean(AgroalRecorder recorder,\n             List<AggregatedDataSourceBuildTimeConfigBuildItem> aggregatedBuildTimeConfigBuildItems,\n-            DataSourcesBuildTimeConfig dataSourcesBuildTimeConfig,\n-            DataSourcesJdbcBuildTimeConfig dataSourcesJdbcBuildTimeConfig,\n+            SslNativeConfigBuildItem sslNativeConfig,\n+            Capabilities capabilities,\n+            BuildProducer<AdditionalBeanBuildItem> additionalBeans,\n+            BuildProducer<SyntheticBeanBuildItem> syntheticBeanBuildItemBuildProducer) {\n+        if (aggregatedBuildTimeConfigBuildItems.isEmpty()) {\n+            // No datasource has been configured so bail out\n+            return;\n+        }\n+\n+        // make a DataSourceProducer bean\n+        additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClasses(DataSourceProducer.class).setUnremovable()\n+                .setDefaultScope(DotNames.SINGLETON).build());\n+        // add the @DataSource class otherwise it won't registered as a qualifier\n+        additionalBeans.produce(AdditionalBeanBuildItem.builder().addBeanClass(DataSource.class).build());\n+\n+        // create the DataSourceSupport bean that DataSourceProducer uses a dependency", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c30a471b64f97690d5782c2105fd4979091c4496"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTY5NjQyOnYy", "diffSide": "RIGHT", "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceProducer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDowNjozM1rOGRUxVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDowNjozM1rOGRUxVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgxOTI4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * and it's {@code  createDataSource} method is called at runtime in order to produce\n          \n          \n            \n             * and its {@code  createDataSource} method is called at runtime in order to produce", "url": "https://github.com/quarkusio/quarkus/pull/9097#discussion_r420819287", "createdAt": "2020-05-06T14:06:33Z", "author": {"login": "gsmet"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceProducer.java", "diffHunk": "@@ -41,64 +40,72 @@\n import io.quarkus.runtime.configuration.ConfigurationException;\n import io.quarkus.vault.CredentialsProvider;\n \n+/**\n+ * This class is sort of a producer for {@link AgroalDataSource}.\n+ *\n+ * It isn't a CDI producer in the literal sense, but it is marked as a bean\n+ * and it's {@code  createDataSource} method is called at runtime in order to produce", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c30a471b64f97690d5782c2105fd4979091c4496"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTcwNzYyOnYy", "diffSide": "RIGHT", "path": "extensions/elytron-security-jdbc/runtime/src/main/java/io/quarkus/elytron/security/jdbc/JdbcRecorder.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDowODo1OVrOGRU4ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDozODozNlrOGRWRiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyMTA5OA==", "bodyText": "Should we fix it?", "url": "https://github.com/quarkusio/quarkus/pull/9097#discussion_r420821098", "createdAt": "2020-05-06T14:08:59Z", "author": {"login": "gsmet"}, "path": "extensions/elytron-security-jdbc/runtime/src/main/java/io/quarkus/elytron/security/jdbc/JdbcRecorder.java", "diffHunk": "@@ -64,6 +64,7 @@ private void registerPrincipalQuery(PrincipalQueryConfig principalQuery, JdbcSec\n \n     private DataSource getDataSource(PrincipalQueryConfig principalQuery) {\n         return (DataSource) principalQuery.datasource\n+                // this is not correct, it should be something like 'Arc.container().instance(javax.sql.DataSource.class, new DataSource.DataSourceLiteral(name))'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c30a471b64f97690d5782c2105fd4979091c4496"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgzODE2MA==", "bodyText": "I wanted to make sure the tests run without the fix, because the way it's currently being used is good for uncovering bugs.\nI agree it should be fixed, in a second commit I guess?", "url": "https://github.com/quarkusio/quarkus/pull/9097#discussion_r420838160", "createdAt": "2020-05-06T14:31:10Z", "author": {"login": "geoand"}, "path": "extensions/elytron-security-jdbc/runtime/src/main/java/io/quarkus/elytron/security/jdbc/JdbcRecorder.java", "diffHunk": "@@ -64,6 +64,7 @@ private void registerPrincipalQuery(PrincipalQueryConfig principalQuery, JdbcSec\n \n     private DataSource getDataSource(PrincipalQueryConfig principalQuery) {\n         return (DataSource) principalQuery.datasource\n+                // this is not correct, it should be something like 'Arc.container().instance(javax.sql.DataSource.class, new DataSource.DataSourceLiteral(name))'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyMTA5OA=="}, "originalCommit": {"oid": "c30a471b64f97690d5782c2105fd4979091c4496"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg0Mjc3MA==", "bodyText": "Yeah, I would say just add another commit. Better have it right!", "url": "https://github.com/quarkusio/quarkus/pull/9097#discussion_r420842770", "createdAt": "2020-05-06T14:37:03Z", "author": {"login": "gsmet"}, "path": "extensions/elytron-security-jdbc/runtime/src/main/java/io/quarkus/elytron/security/jdbc/JdbcRecorder.java", "diffHunk": "@@ -64,6 +64,7 @@ private void registerPrincipalQuery(PrincipalQueryConfig principalQuery, JdbcSec\n \n     private DataSource getDataSource(PrincipalQueryConfig principalQuery) {\n         return (DataSource) principalQuery.datasource\n+                // this is not correct, it should be something like 'Arc.container().instance(javax.sql.DataSource.class, new DataSource.DataSourceLiteral(name))'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyMTA5OA=="}, "originalCommit": {"oid": "c30a471b64f97690d5782c2105fd4979091c4496"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg0MzkxMg==", "bodyText": "I added a second commit", "url": "https://github.com/quarkusio/quarkus/pull/9097#discussion_r420843912", "createdAt": "2020-05-06T14:38:36Z", "author": {"login": "geoand"}, "path": "extensions/elytron-security-jdbc/runtime/src/main/java/io/quarkus/elytron/security/jdbc/JdbcRecorder.java", "diffHunk": "@@ -64,6 +64,7 @@ private void registerPrincipalQuery(PrincipalQueryConfig principalQuery, JdbcSec\n \n     private DataSource getDataSource(PrincipalQueryConfig principalQuery) {\n         return (DataSource) principalQuery.datasource\n+                // this is not correct, it should be something like 'Arc.container().instance(javax.sql.DataSource.class, new DataSource.DataSourceLiteral(name))'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyMTA5OA=="}, "originalCommit": {"oid": "c30a471b64f97690d5782c2105fd4979091c4496"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTc2ODQzOnYy", "diffSide": "RIGHT", "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceProducer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDoyMToxMFrOGRVcxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDo0Mjo0MVrOGRWd_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgzMDQwNg==", "bodyText": "Can't we inject all that now if this is a CDI bean? I thought we could and tbh that was one of the reasons I pushed for this change :).", "url": "https://github.com/quarkusio/quarkus/pull/9097#discussion_r420830406", "createdAt": "2020-05-06T14:21:10Z", "author": {"login": "gsmet"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceProducer.java", "diffHunk": "@@ -41,64 +40,72 @@\n import io.quarkus.runtime.configuration.ConfigurationException;\n import io.quarkus.vault.CredentialsProvider;\n \n+/**\n+ * This class is sort of a producer for {@link AgroalDataSource}.\n+ *\n+ * It isn't a CDI producer in the literal sense, but it is marked as a bean\n+ * and it's {@code  createDataSource} method is called at runtime in order to produce\n+ * the actual {@code AgroalDataSource} objects.\n+ *\n+ * CDI scopes and qualifiers are setup at build-time, which is why this class is devoid of\n+ * any CDI annotations\n+ *\n+ */\n @SuppressWarnings(\"deprecation\")\n-public abstract class AbstractDataSourceProducer {\n+public class DataSourceProducer {\n \n-    private static final Logger log = Logger.getLogger(AbstractDataSourceProducer.class.getName());\n+    private static final Logger log = Logger.getLogger(DataSourceProducer.class.getName());\n \n-    private DataSourcesBuildTimeConfig dataSourcesBuildTimeConfig;\n-    private DataSourcesRuntimeConfig dataSourcesRuntimeConfig;\n-    private DataSourcesJdbcBuildTimeConfig dataSourcesJdbcBuildTimeConfig;\n-    private DataSourcesJdbcRuntimeConfig dataSourcesJdbcRuntimeConfig;\n+    private final DataSourcesBuildTimeConfig dataSourcesBuildTimeConfig;\n+    private final DataSourcesRuntimeConfig dataSourcesRuntimeConfig;\n+    private final DataSourcesJdbcBuildTimeConfig dataSourcesJdbcBuildTimeConfig;\n+    private final DataSourcesJdbcRuntimeConfig dataSourcesJdbcRuntimeConfig;\n+    private final LegacyDataSourcesJdbcBuildTimeConfig legacyDataSourcesJdbcBuildTimeConfig;\n+    private final LegacyDataSourcesRuntimeConfig legacyDataSourcesRuntimeConfig;\n+    private final LegacyDataSourcesJdbcRuntimeConfig legacyDataSourcesJdbcRuntimeConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c30a471b64f97690d5782c2105fd4979091c4496"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgzODM4NQ==", "bodyText": "We are injecting them, constructor injection \ud83d\ude09", "url": "https://github.com/quarkusio/quarkus/pull/9097#discussion_r420838385", "createdAt": "2020-05-06T14:31:30Z", "author": {"login": "geoand"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceProducer.java", "diffHunk": "@@ -41,64 +40,72 @@\n import io.quarkus.runtime.configuration.ConfigurationException;\n import io.quarkus.vault.CredentialsProvider;\n \n+/**\n+ * This class is sort of a producer for {@link AgroalDataSource}.\n+ *\n+ * It isn't a CDI producer in the literal sense, but it is marked as a bean\n+ * and it's {@code  createDataSource} method is called at runtime in order to produce\n+ * the actual {@code AgroalDataSource} objects.\n+ *\n+ * CDI scopes and qualifiers are setup at build-time, which is why this class is devoid of\n+ * any CDI annotations\n+ *\n+ */\n @SuppressWarnings(\"deprecation\")\n-public abstract class AbstractDataSourceProducer {\n+public class DataSourceProducer {\n \n-    private static final Logger log = Logger.getLogger(AbstractDataSourceProducer.class.getName());\n+    private static final Logger log = Logger.getLogger(DataSourceProducer.class.getName());\n \n-    private DataSourcesBuildTimeConfig dataSourcesBuildTimeConfig;\n-    private DataSourcesRuntimeConfig dataSourcesRuntimeConfig;\n-    private DataSourcesJdbcBuildTimeConfig dataSourcesJdbcBuildTimeConfig;\n-    private DataSourcesJdbcRuntimeConfig dataSourcesJdbcRuntimeConfig;\n+    private final DataSourcesBuildTimeConfig dataSourcesBuildTimeConfig;\n+    private final DataSourcesRuntimeConfig dataSourcesRuntimeConfig;\n+    private final DataSourcesJdbcBuildTimeConfig dataSourcesJdbcBuildTimeConfig;\n+    private final DataSourcesJdbcRuntimeConfig dataSourcesJdbcRuntimeConfig;\n+    private final LegacyDataSourcesJdbcBuildTimeConfig legacyDataSourcesJdbcBuildTimeConfig;\n+    private final LegacyDataSourcesRuntimeConfig legacyDataSourcesRuntimeConfig;\n+    private final LegacyDataSourcesJdbcRuntimeConfig legacyDataSourcesJdbcRuntimeConfig;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgzMDQwNg=="}, "originalCommit": {"oid": "c30a471b64f97690d5782c2105fd4979091c4496"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg0MjM0Mw==", "bodyText": "Ah yeah, what misled me was I was expecting getters to be removed but we were not relying on getters anyway before.\nMaybe we could drop checkConfigInjection then? Because we are sure things have been properly injected?", "url": "https://github.com/quarkusio/quarkus/pull/9097#discussion_r420842343", "createdAt": "2020-05-06T14:36:31Z", "author": {"login": "gsmet"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceProducer.java", "diffHunk": "@@ -41,64 +40,72 @@\n import io.quarkus.runtime.configuration.ConfigurationException;\n import io.quarkus.vault.CredentialsProvider;\n \n+/**\n+ * This class is sort of a producer for {@link AgroalDataSource}.\n+ *\n+ * It isn't a CDI producer in the literal sense, but it is marked as a bean\n+ * and it's {@code  createDataSource} method is called at runtime in order to produce\n+ * the actual {@code AgroalDataSource} objects.\n+ *\n+ * CDI scopes and qualifiers are setup at build-time, which is why this class is devoid of\n+ * any CDI annotations\n+ *\n+ */\n @SuppressWarnings(\"deprecation\")\n-public abstract class AbstractDataSourceProducer {\n+public class DataSourceProducer {\n \n-    private static final Logger log = Logger.getLogger(AbstractDataSourceProducer.class.getName());\n+    private static final Logger log = Logger.getLogger(DataSourceProducer.class.getName());\n \n-    private DataSourcesBuildTimeConfig dataSourcesBuildTimeConfig;\n-    private DataSourcesRuntimeConfig dataSourcesRuntimeConfig;\n-    private DataSourcesJdbcBuildTimeConfig dataSourcesJdbcBuildTimeConfig;\n-    private DataSourcesJdbcRuntimeConfig dataSourcesJdbcRuntimeConfig;\n+    private final DataSourcesBuildTimeConfig dataSourcesBuildTimeConfig;\n+    private final DataSourcesRuntimeConfig dataSourcesRuntimeConfig;\n+    private final DataSourcesJdbcBuildTimeConfig dataSourcesJdbcBuildTimeConfig;\n+    private final DataSourcesJdbcRuntimeConfig dataSourcesJdbcRuntimeConfig;\n+    private final LegacyDataSourcesJdbcBuildTimeConfig legacyDataSourcesJdbcBuildTimeConfig;\n+    private final LegacyDataSourcesRuntimeConfig legacyDataSourcesRuntimeConfig;\n+    private final LegacyDataSourcesJdbcRuntimeConfig legacyDataSourcesJdbcRuntimeConfig;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgzMDQwNg=="}, "originalCommit": {"oid": "c30a471b64f97690d5782c2105fd4979091c4496"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg0NzEwMQ==", "bodyText": "Good idea, I fixed it", "url": "https://github.com/quarkusio/quarkus/pull/9097#discussion_r420847101", "createdAt": "2020-05-06T14:42:41Z", "author": {"login": "geoand"}, "path": "extensions/agroal/runtime/src/main/java/io/quarkus/agroal/runtime/DataSourceProducer.java", "diffHunk": "@@ -41,64 +40,72 @@\n import io.quarkus.runtime.configuration.ConfigurationException;\n import io.quarkus.vault.CredentialsProvider;\n \n+/**\n+ * This class is sort of a producer for {@link AgroalDataSource}.\n+ *\n+ * It isn't a CDI producer in the literal sense, but it is marked as a bean\n+ * and it's {@code  createDataSource} method is called at runtime in order to produce\n+ * the actual {@code AgroalDataSource} objects.\n+ *\n+ * CDI scopes and qualifiers are setup at build-time, which is why this class is devoid of\n+ * any CDI annotations\n+ *\n+ */\n @SuppressWarnings(\"deprecation\")\n-public abstract class AbstractDataSourceProducer {\n+public class DataSourceProducer {\n \n-    private static final Logger log = Logger.getLogger(AbstractDataSourceProducer.class.getName());\n+    private static final Logger log = Logger.getLogger(DataSourceProducer.class.getName());\n \n-    private DataSourcesBuildTimeConfig dataSourcesBuildTimeConfig;\n-    private DataSourcesRuntimeConfig dataSourcesRuntimeConfig;\n-    private DataSourcesJdbcBuildTimeConfig dataSourcesJdbcBuildTimeConfig;\n-    private DataSourcesJdbcRuntimeConfig dataSourcesJdbcRuntimeConfig;\n+    private final DataSourcesBuildTimeConfig dataSourcesBuildTimeConfig;\n+    private final DataSourcesRuntimeConfig dataSourcesRuntimeConfig;\n+    private final DataSourcesJdbcBuildTimeConfig dataSourcesJdbcBuildTimeConfig;\n+    private final DataSourcesJdbcRuntimeConfig dataSourcesJdbcRuntimeConfig;\n+    private final LegacyDataSourcesJdbcBuildTimeConfig legacyDataSourcesJdbcBuildTimeConfig;\n+    private final LegacyDataSourcesRuntimeConfig legacyDataSourcesRuntimeConfig;\n+    private final LegacyDataSourcesJdbcRuntimeConfig legacyDataSourcesJdbcRuntimeConfig;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgzMDQwNg=="}, "originalCommit": {"oid": "c30a471b64f97690d5782c2105fd4979091c4496"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTg4NzAzOnYy", "diffSide": "RIGHT", "path": "extensions/elytron-security-jdbc/runtime/src/main/java/io/quarkus/elytron/security/jdbc/JdbcRecorder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDo0NToxM1rOGRWmtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDo0OTozMlrOGRW0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg0OTMzNQ==", "bodyText": "Sorry a bit late for that comment but I'm wondering if we should get rid of this lambda while we're at it. It really doesn't bring anything useful. I can do it later on if you're tired of my nitpicking :).", "url": "https://github.com/quarkusio/quarkus/pull/9097#discussion_r420849335", "createdAt": "2020-05-06T14:45:13Z", "author": {"login": "gsmet"}, "path": "extensions/elytron-security-jdbc/runtime/src/main/java/io/quarkus/elytron/security/jdbc/JdbcRecorder.java", "diffHunk": "@@ -63,8 +61,9 @@ private void registerPrincipalQuery(PrincipalQueryConfig principalQuery, JdbcSec\n     }\n \n     private DataSource getDataSource(PrincipalQueryConfig principalQuery) {\n-        return (DataSource) principalQuery.datasource\n-                .map(name -> Arc.container().instance(name).get())\n+        return principalQuery.datasource\n+                .map(name -> Arc.container()\n+                        .instance(DataSource.class, new io.quarkus.agroal.DataSource.DataSourceLiteral(name)).get())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e25e6a33f6655c2bb4e644f294eb1f9d2cc8c7a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg1MDM1MQ==", "bodyText": "Oh boy, you are right! I didn't see this was runtime code, let's fix it.", "url": "https://github.com/quarkusio/quarkus/pull/9097#discussion_r420850351", "createdAt": "2020-05-06T14:46:31Z", "author": {"login": "geoand"}, "path": "extensions/elytron-security-jdbc/runtime/src/main/java/io/quarkus/elytron/security/jdbc/JdbcRecorder.java", "diffHunk": "@@ -63,8 +61,9 @@ private void registerPrincipalQuery(PrincipalQueryConfig principalQuery, JdbcSec\n     }\n \n     private DataSource getDataSource(PrincipalQueryConfig principalQuery) {\n-        return (DataSource) principalQuery.datasource\n-                .map(name -> Arc.container().instance(name).get())\n+        return principalQuery.datasource\n+                .map(name -> Arc.container()\n+                        .instance(DataSource.class, new io.quarkus.agroal.DataSource.DataSourceLiteral(name)).get())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg0OTMzNQ=="}, "originalCommit": {"oid": "4e25e6a33f6655c2bb4e644f294eb1f9d2cc8c7a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg1Mjc4OA==", "bodyText": "Fixed", "url": "https://github.com/quarkusio/quarkus/pull/9097#discussion_r420852788", "createdAt": "2020-05-06T14:49:32Z", "author": {"login": "geoand"}, "path": "extensions/elytron-security-jdbc/runtime/src/main/java/io/quarkus/elytron/security/jdbc/JdbcRecorder.java", "diffHunk": "@@ -63,8 +61,9 @@ private void registerPrincipalQuery(PrincipalQueryConfig principalQuery, JdbcSec\n     }\n \n     private DataSource getDataSource(PrincipalQueryConfig principalQuery) {\n-        return (DataSource) principalQuery.datasource\n-                .map(name -> Arc.container().instance(name).get())\n+        return principalQuery.datasource\n+                .map(name -> Arc.container()\n+                        .instance(DataSource.class, new io.quarkus.agroal.DataSource.DataSourceLiteral(name)).get())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg0OTMzNQ=="}, "originalCommit": {"oid": "4e25e6a33f6655c2bb4e644f294eb1f9d2cc8c7a"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3252, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}