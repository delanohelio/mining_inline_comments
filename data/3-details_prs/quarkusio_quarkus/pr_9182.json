{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1Mjk2Mjcy", "number": 9182, "title": "Added support to register nested classes and reflection via classNames", "bodyText": "Resolves #9109\nAdded support for registering for Reflection  via classNames.\nNow users can register private classes which were inaccessible otherwise.", "createdAt": "2020-05-08T15:37:44Z", "url": "https://github.com/quarkusio/quarkus/pull/9182", "merged": true, "mergeCommit": {"oid": "803ee826f4e3c2f0cd40981c319e8038796b0d43"}, "closed": true, "closedAt": "2020-05-10T17:21:05Z", "author": {"login": "lower-case"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcfgI_ZgFqTQwODYxNTk1NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcf6uAogBqjMzMjAzMDMzOTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NjE1OTU0", "url": "https://github.com/quarkusio/quarkus/pull/9182#pullrequestreview-408615954", "createdAt": "2020-05-09T05:59:33Z", "commit": {"oid": "f9d0cf5e68cd415ad9b9b73c787bab961aa6b9f7"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNTo1OTozM1rOGS4uvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjowNDoyNVrOGS4wHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1NzAyMA==", "bodyText": "You can just use toString() here on the result of name()", "url": "https://github.com/quarkusio/quarkus/pull/9182#discussion_r422457020", "createdAt": "2020-05-09T05:59:33Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/RegisterForReflectionBuildStep.java", "diffHunk": "@@ -30,18 +33,48 @@\n     public void build() throws Exception {\n         for (AnnotationInstance i : combinedIndexBuildItem.getIndex()\n                 .getAnnotations(DotName.createSimple(RegisterForReflection.class.getName()))) {\n-            ClassInfo target = i.target().asClass();\n+\n             boolean methods = i.value(\"methods\") == null || i.value(\"methods\").asBoolean();\n             boolean fields = i.value(\"fields\") == null || i.value(\"fields\").asBoolean();\n+\n             AnnotationValue targetsValue = i.value(\"targets\");\n-            if (targetsValue == null) {\n+            AnnotationValue namesValue = i.value(\"names\");\n+\n+            if (targetsValue == null && namesValue == null) {\n+                ClassInfo target = i.target().asClass();\n                 reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, target.name().toString()));\n-            } else {\n+                return;\n+            }\n+\n+            Set<String> classNames = new HashSet<>();\n+            if (targetsValue != null) {\n                 Type[] targets = targetsValue.asClassArray();\n                 for (Type type : targets) {\n-                    reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, type.name().toString()));\n+                    classNames.add(String.valueOf(type.name()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9d0cf5e68cd415ad9b9b73c787bab961aa6b9f7"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1NzExOA==", "bodyText": "Why the check here?", "url": "https://github.com/quarkusio/quarkus/pull/9182#discussion_r422457118", "createdAt": "2020-05-09T06:00:59Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/RegisterForReflectionBuildStep.java", "diffHunk": "@@ -30,18 +33,48 @@\n     public void build() throws Exception {\n         for (AnnotationInstance i : combinedIndexBuildItem.getIndex()\n                 .getAnnotations(DotName.createSimple(RegisterForReflection.class.getName()))) {\n-            ClassInfo target = i.target().asClass();\n+\n             boolean methods = i.value(\"methods\") == null || i.value(\"methods\").asBoolean();\n             boolean fields = i.value(\"fields\") == null || i.value(\"fields\").asBoolean();\n+\n             AnnotationValue targetsValue = i.value(\"targets\");\n-            if (targetsValue == null) {\n+            AnnotationValue namesValue = i.value(\"names\");\n+\n+            if (targetsValue == null && namesValue == null) {\n+                ClassInfo target = i.target().asClass();\n                 reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, target.name().toString()));\n-            } else {\n+                return;\n+            }\n+\n+            Set<String> classNames = new HashSet<>();\n+            if (targetsValue != null) {\n                 Type[] targets = targetsValue.asClassArray();\n                 for (Type type : targets) {\n-                    reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, type.name().toString()));\n+                    classNames.add(String.valueOf(type.name()));\n+                }\n+            }\n+\n+            if (namesValue != null) {\n+                String[] names = namesValue.asStringArray();\n+                for (String name : names) {\n+                    if (isClass(name)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9d0cf5e68cd415ad9b9b73c787bab961aa6b9f7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1NzIyNQ==", "bodyText": "If you absolutely do need to load a class in a Quarkus build step, you should use the Thread Context Classloader.", "url": "https://github.com/quarkusio/quarkus/pull/9182#discussion_r422457225", "createdAt": "2020-05-09T06:02:26Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/RegisterForReflectionBuildStep.java", "diffHunk": "@@ -30,18 +33,48 @@\n     public void build() throws Exception {\n         for (AnnotationInstance i : combinedIndexBuildItem.getIndex()\n                 .getAnnotations(DotName.createSimple(RegisterForReflection.class.getName()))) {\n-            ClassInfo target = i.target().asClass();\n+\n             boolean methods = i.value(\"methods\") == null || i.value(\"methods\").asBoolean();\n             boolean fields = i.value(\"fields\") == null || i.value(\"fields\").asBoolean();\n+\n             AnnotationValue targetsValue = i.value(\"targets\");\n-            if (targetsValue == null) {\n+            AnnotationValue namesValue = i.value(\"names\");\n+\n+            if (targetsValue == null && namesValue == null) {\n+                ClassInfo target = i.target().asClass();\n                 reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, target.name().toString()));\n-            } else {\n+                return;\n+            }\n+\n+            Set<String> classNames = new HashSet<>();\n+            if (targetsValue != null) {\n                 Type[] targets = targetsValue.asClassArray();\n                 for (Type type : targets) {\n-                    reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, type.name().toString()));\n+                    classNames.add(String.valueOf(type.name()));\n+                }\n+            }\n+\n+            if (namesValue != null) {\n+                String[] names = namesValue.asStringArray();\n+                for (String name : names) {\n+                    if (isClass(name)) {\n+                        classNames.add(name);\n+                    }\n                 }\n             }\n+\n+            for (String className : classNames) {\n+                reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, className));\n+            }\n+        }\n+    }\n+\n+    private boolean isClass(String className) {\n+        try {\n+            Class.forName(className, false, getClass().getClassLoader());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9d0cf5e68cd415ad9b9b73c787bab961aa6b9f7"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1NzI1Ng==", "bodyText": "Perhaps calling it classNames would be better?", "url": "https://github.com/quarkusio/quarkus/pull/9182#discussion_r422457256", "createdAt": "2020-05-09T06:03:00Z", "author": {"login": "geoand"}, "path": "core/runtime/src/main/java/io/quarkus/runtime/annotations/RegisterForReflection.java", "diffHunk": "@@ -30,4 +30,11 @@\n      * generally just be placed on an empty class that is not otherwise used.\n      */\n     Class<?>[] targets() default {};\n+\n+    /**\n+     *\n+     * This allows for classes to be registered via class names. This was introduced to add the facility to\n+     * register private classes for Reflection.\n+     */\n+    String[] names() default {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9d0cf5e68cd415ad9b9b73c787bab961aa6b9f7"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1NzM3NA==", "bodyText": "If we are going to load classes (I assume to make things safer for users, we should at least be logging when the load failed.\nBut as I said above, I don't really see much point in this type of validation)", "url": "https://github.com/quarkusio/quarkus/pull/9182#discussion_r422457374", "createdAt": "2020-05-09T06:04:25Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/RegisterForReflectionBuildStep.java", "diffHunk": "@@ -30,18 +33,48 @@\n     public void build() throws Exception {\n         for (AnnotationInstance i : combinedIndexBuildItem.getIndex()\n                 .getAnnotations(DotName.createSimple(RegisterForReflection.class.getName()))) {\n-            ClassInfo target = i.target().asClass();\n+\n             boolean methods = i.value(\"methods\") == null || i.value(\"methods\").asBoolean();\n             boolean fields = i.value(\"fields\") == null || i.value(\"fields\").asBoolean();\n+\n             AnnotationValue targetsValue = i.value(\"targets\");\n-            if (targetsValue == null) {\n+            AnnotationValue namesValue = i.value(\"names\");\n+\n+            if (targetsValue == null && namesValue == null) {\n+                ClassInfo target = i.target().asClass();\n                 reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, target.name().toString()));\n-            } else {\n+                return;\n+            }\n+\n+            Set<String> classNames = new HashSet<>();\n+            if (targetsValue != null) {\n                 Type[] targets = targetsValue.asClassArray();\n                 for (Type type : targets) {\n-                    reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, type.name().toString()));\n+                    classNames.add(String.valueOf(type.name()));\n+                }\n+            }\n+\n+            if (namesValue != null) {\n+                String[] names = namesValue.asStringArray();\n+                for (String name : names) {\n+                    if (isClass(name)) {\n+                        classNames.add(name);\n+                    }\n                 }\n             }\n+\n+            for (String className : classNames) {\n+                reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, className));\n+            }\n+        }\n+    }\n+\n+    private boolean isClass(String className) {\n+        try {\n+            Class.forName(className, false, getClass().getClassLoader());\n+            return true;\n+        } catch (ClassNotFoundException e) {\n+            return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9d0cf5e68cd415ad9b9b73c787bab961aa6b9f7"}, "originalPosition": 58}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f9d0cf5e68cd415ad9b9b73c787bab961aa6b9f7", "author": {"user": {"login": "lower-case", "name": "Lovekesh Garg"}}, "url": "https://github.com/quarkusio/quarkus/commit/f9d0cf5e68cd415ad9b9b73c787bab961aa6b9f7", "committedDate": "2020-05-08T15:35:52Z", "message": "9109 | Added support for registering for Reflection  via classNames"}, "afterCommit": {"oid": "b14798cc3dd0ea4d9f539f88bfab72e75d107caa", "author": {"user": {"login": "lower-case", "name": "Lovekesh Garg"}}, "url": "https://github.com/quarkusio/quarkus/commit/b14798cc3dd0ea4d9f539f88bfab72e75d107caa", "committedDate": "2020-05-09T07:36:33Z", "message": "9109 | Added support for registering for Reflection  via classNames"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NjI0Nzg1", "url": "https://github.com/quarkusio/quarkus/pull/9182#pullrequestreview-408624785", "createdAt": "2020-05-09T07:59:17Z", "commit": {"oid": "b14798cc3dd0ea4d9f539f88bfab72e75d107caa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNzo1OToxN1rOGS5UXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNzo1OToxN1rOGS5UXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2NjY1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * This allows for classes to be registered via class names. This was introduced to add the facility to\n          \n          \n            \n                 * This allows for classes to be registered for reflection via class names. This is useful when it's necessary to", "url": "https://github.com/quarkusio/quarkus/pull/9182#discussion_r422466653", "createdAt": "2020-05-09T07:59:17Z", "author": {"login": "geoand"}, "path": "core/runtime/src/main/java/io/quarkus/runtime/annotations/RegisterForReflection.java", "diffHunk": "@@ -30,4 +30,10 @@\n      * generally just be placed on an empty class that is not otherwise used.\n      */\n     Class<?>[] targets() default {};\n+\n+    /**\n+     * This allows for classes to be registered via class names. This was introduced to add the facility to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b14798cc3dd0ea4d9f539f88bfab72e75d107caa"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NjI1ODMz", "url": "https://github.com/quarkusio/quarkus/pull/9182#pullrequestreview-408625833", "createdAt": "2020-05-09T08:10:58Z", "commit": {"oid": "b14798cc3dd0ea4d9f539f88bfab72e75d107caa"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b14798cc3dd0ea4d9f539f88bfab72e75d107caa", "author": {"user": {"login": "lower-case", "name": "Lovekesh Garg"}}, "url": "https://github.com/quarkusio/quarkus/commit/b14798cc3dd0ea4d9f539f88bfab72e75d107caa", "committedDate": "2020-05-09T07:36:33Z", "message": "9109 | Added support for registering for Reflection  via classNames"}, "afterCommit": {"oid": "2f9430853c83fcef6eed55fc7e0381b68bda5538", "author": {"user": {"login": "lower-case", "name": "Lovekesh Garg"}}, "url": "https://github.com/quarkusio/quarkus/commit/2f9430853c83fcef6eed55fc7e0381b68bda5538", "committedDate": "2020-05-09T08:23:56Z", "message": "9109 | Added support for registering for Reflection  via classNames"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2f9430853c83fcef6eed55fc7e0381b68bda5538", "author": {"user": {"login": "lower-case", "name": "Lovekesh Garg"}}, "url": "https://github.com/quarkusio/quarkus/commit/2f9430853c83fcef6eed55fc7e0381b68bda5538", "committedDate": "2020-05-09T08:23:56Z", "message": "9109 | Added support for registering for Reflection  via classNames"}, "afterCommit": {"oid": "a803c0762f0063378c60fe8416ac7742f3aa0011", "author": {"user": {"login": "lower-case", "name": "Lovekesh Garg"}}, "url": "https://github.com/quarkusio/quarkus/commit/a803c0762f0063378c60fe8416ac7742f3aa0011", "committedDate": "2020-05-09T08:24:26Z", "message": "Added support for registering for Reflection  via classNames"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a803c0762f0063378c60fe8416ac7742f3aa0011", "author": {"user": {"login": "lower-case", "name": "Lovekesh Garg"}}, "url": "https://github.com/quarkusio/quarkus/commit/a803c0762f0063378c60fe8416ac7742f3aa0011", "committedDate": "2020-05-09T08:24:26Z", "message": "Added support for registering for Reflection  via classNames"}, "afterCommit": {"oid": "02b1395152736223747e1ef20000be8b34ee666b", "author": {"user": {"login": "lower-case", "name": "Lovekesh Garg"}}, "url": "https://github.com/quarkusio/quarkus/commit/02b1395152736223747e1ef20000be8b34ee666b", "committedDate": "2020-05-10T06:13:23Z", "message": "Added support for registering nested classes and reflection via classNames"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "02b1395152736223747e1ef20000be8b34ee666b", "author": {"user": {"login": "lower-case", "name": "Lovekesh Garg"}}, "url": "https://github.com/quarkusio/quarkus/commit/02b1395152736223747e1ef20000be8b34ee666b", "committedDate": "2020-05-10T06:13:23Z", "message": "Added support for registering nested classes and reflection via classNames"}, "afterCommit": {"oid": "6c580f13a45d0df6c3c605b7480cf4c776c5ba92", "author": {"user": {"login": "lower-case", "name": "Lovekesh Garg"}}, "url": "https://github.com/quarkusio/quarkus/commit/6c580f13a45d0df6c3c605b7480cf4c776c5ba92", "committedDate": "2020-05-10T06:35:48Z", "message": "Added support for registering nested classes and reflection via classNames"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NzEyNDI2", "url": "https://github.com/quarkusio/quarkus/pull/9182#pullrequestreview-408712426", "createdAt": "2020-05-10T06:46:16Z", "commit": {"oid": "6c580f13a45d0df6c3c605b7480cf4c776c5ba92"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6c580f13a45d0df6c3c605b7480cf4c776c5ba92", "author": {"user": {"login": "lower-case", "name": "Lovekesh Garg"}}, "url": "https://github.com/quarkusio/quarkus/commit/6c580f13a45d0df6c3c605b7480cf4c776c5ba92", "committedDate": "2020-05-10T06:35:48Z", "message": "Added support for registering nested classes and reflection via classNames"}, "afterCommit": {"oid": "45a5f22c9cd7f12cfd411f0498b632a627473895", "author": {"user": {"login": "lower-case", "name": "Lovekesh Garg"}}, "url": "https://github.com/quarkusio/quarkus/commit/45a5f22c9cd7f12cfd411f0498b632a627473895", "committedDate": "2020-05-10T06:52:47Z", "message": "Added support for registering nested classes and reflection via classNames"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NzE4ODUw", "url": "https://github.com/quarkusio/quarkus/pull/9182#pullrequestreview-408718850", "createdAt": "2020-05-10T08:10:19Z", "commit": {"oid": "45a5f22c9cd7f12cfd411f0498b632a627473895"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "45a5f22c9cd7f12cfd411f0498b632a627473895", "author": {"user": {"login": "lower-case", "name": "Lovekesh Garg"}}, "url": "https://github.com/quarkusio/quarkus/commit/45a5f22c9cd7f12cfd411f0498b632a627473895", "committedDate": "2020-05-10T06:52:47Z", "message": "Added support for registering nested classes and reflection via classNames"}, "afterCommit": {"oid": "c62011bdbc8deb2aabca7975b6395bad109c61f4", "author": {"user": {"login": "lower-case", "name": "Lovekesh Garg"}}, "url": "https://github.com/quarkusio/quarkus/commit/c62011bdbc8deb2aabca7975b6395bad109c61f4", "committedDate": "2020-05-10T09:14:36Z", "message": "Added support for registering nested classes and reflection via classNames"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c62011bdbc8deb2aabca7975b6395bad109c61f4", "author": {"user": {"login": "lower-case", "name": "Lovekesh Garg"}}, "url": "https://github.com/quarkusio/quarkus/commit/c62011bdbc8deb2aabca7975b6395bad109c61f4", "committedDate": "2020-05-10T09:14:36Z", "message": "Added support for registering nested classes and reflection via classNames"}, "afterCommit": {"oid": "5399d8b5acca43ee3a4ece5509479ad59ea1bef4", "author": {"user": {"login": "lower-case", "name": "Lovekesh Garg"}}, "url": "https://github.com/quarkusio/quarkus/commit/5399d8b5acca43ee3a4ece5509479ad59ea1bef4", "committedDate": "2020-05-10T09:20:00Z", "message": "Added support for registering nested classes and reflection via classNames"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NzI4NTQ3", "url": "https://github.com/quarkusio/quarkus/pull/9182#pullrequestreview-408728547", "createdAt": "2020-05-10T10:01:40Z", "commit": {"oid": "5399d8b5acca43ee3a4ece5509479ad59ea1bef4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMDowMTo0MVrOGTCu_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMDowMTo0MVrOGTCu_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyMDkyNA==", "bodyText": "Please remove these comments", "url": "https://github.com/quarkusio/quarkus/pull/9182#discussion_r422620924", "createdAt": "2020-05-10T10:01:41Z", "author": {"login": "geoand"}, "path": "integration-tests/main/src/main/java/io/quarkus/it/runtime/ReflectionResource.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package io.quarkus.it.runtime;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.QueryParam;\n+\n+/**\n+ * User : lovekeshgarg", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5399d8b5acca43ee3a4ece5509479ad59ea1bef4"}, "originalPosition": 8}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5399d8b5acca43ee3a4ece5509479ad59ea1bef4", "author": {"user": {"login": "lower-case", "name": "Lovekesh Garg"}}, "url": "https://github.com/quarkusio/quarkus/commit/5399d8b5acca43ee3a4ece5509479ad59ea1bef4", "committedDate": "2020-05-10T09:20:00Z", "message": "Added support for registering nested classes and reflection via classNames"}, "afterCommit": {"oid": "af10c503f589533938860b5625ee3c7b1a93085d", "author": {"user": {"login": "lower-case", "name": "Lovekesh Garg"}}, "url": "https://github.com/quarkusio/quarkus/commit/af10c503f589533938860b5625ee3c7b1a93085d", "committedDate": "2020-05-10T11:51:39Z", "message": "Added support for registering nested classes and reflection via classNames"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NzQxNjk1", "url": "https://github.com/quarkusio/quarkus/pull/9182#pullrequestreview-408741695", "createdAt": "2020-05-10T12:43:32Z", "commit": {"oid": "af10c503f589533938860b5625ee3c7b1a93085d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NzQxNzUy", "url": "https://github.com/quarkusio/quarkus/pull/9182#pullrequestreview-408741752", "createdAt": "2020-05-10T12:44:26Z", "commit": {"oid": "af10c503f589533938860b5625ee3c7b1a93085d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMjo0NDoyN1rOGTD8SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMjo0NDoyN1rOGTD8SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY0MDcxMw==", "bodyText": "Actually, this should probably be a warning, not an error", "url": "https://github.com/quarkusio/quarkus/pull/9182#discussion_r422640713", "createdAt": "2020-05-10T12:44:27Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/steps/RegisterForReflectionBuildStep.java", "diffHunk": "@@ -27,22 +26,62 @@\n     CombinedIndexBuildItem combinedIndexBuildItem;\n \n     @BuildStep\n-    public void build() throws Exception {\n+    public void build() {\n         for (AnnotationInstance i : combinedIndexBuildItem.getIndex()\n                 .getAnnotations(DotName.createSimple(RegisterForReflection.class.getName()))) {\n-            ClassInfo target = i.target().asClass();\n-            boolean methods = i.value(\"methods\") == null || i.value(\"methods\").asBoolean();\n-            boolean fields = i.value(\"fields\") == null || i.value(\"fields\").asBoolean();\n+\n+            boolean methods = getBooleanValue(i, \"methods\");\n+            boolean fields = getBooleanValue(i, \"fields\");\n+            boolean ignoreNested = getBooleanValue(i, \"ignoreNested\");\n+\n             AnnotationValue targetsValue = i.value(\"targets\");\n-            if (targetsValue == null) {\n-                reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, target.name().toString()));\n-            } else {\n+            AnnotationValue classNamesValue = i.value(\"classNames\");\n+\n+            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+            if (targetsValue == null && classNamesValue == null) {\n+                ClassInfo classInfo = i.target().asClass();\n+                registerClass(classLoader, classInfo.name().toString(), methods, fields, ignoreNested);\n+                continue;\n+            }\n+\n+            if (targetsValue != null) {\n                 Type[] targets = targetsValue.asClassArray();\n                 for (Type type : targets) {\n-                    reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, type.name().toString()));\n+                    registerClass(classLoader, type.name().toString(), methods, fields, ignoreNested);\n+                }\n+            }\n+\n+            if (classNamesValue != null) {\n+                String[] classNames = classNamesValue.asStringArray();\n+                for (String className : classNames) {\n+                    registerClass(classLoader, className, methods, fields, ignoreNested);\n                 }\n             }\n         }\n     }\n \n+    /**\n+     * BFS Recursive Method to register a class and it's inner classes for Reflection.\n+     */\n+    private void registerClass(ClassLoader classLoader, String className, boolean methods, boolean fields,\n+            boolean ignoreNested) {\n+        reflectiveClass.produce(new ReflectiveClassBuildItem(methods, fields, className));\n+\n+        if (ignoreNested) {\n+            return;\n+        }\n+\n+        try {\n+            Class<?>[] declaredClasses = classLoader.loadClass(className).getDeclaredClasses();\n+            for (Class<?> clazz : declaredClasses) {\n+                registerClass(classLoader, clazz.getName(), methods, fields, false);\n+            }\n+        } catch (ClassNotFoundException e) {\n+            log.errorf(e, \"Failed to load Class %s\", className);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af10c503f589533938860b5625ee3c7b1a93085d"}, "originalPosition": 84}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0af81213ed190d2facdf099dab3de472b61afa1", "author": {"user": {"login": "lower-case", "name": "Lovekesh Garg"}}, "url": "https://github.com/quarkusio/quarkus/commit/b0af81213ed190d2facdf099dab3de472b61afa1", "committedDate": "2020-05-10T13:01:48Z", "message": "Added support to register nested classes and reflection via classNames"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "af10c503f589533938860b5625ee3c7b1a93085d", "author": {"user": {"login": "lower-case", "name": "Lovekesh Garg"}}, "url": "https://github.com/quarkusio/quarkus/commit/af10c503f589533938860b5625ee3c7b1a93085d", "committedDate": "2020-05-10T11:51:39Z", "message": "Added support for registering nested classes and reflection via classNames"}, "afterCommit": {"oid": "b0af81213ed190d2facdf099dab3de472b61afa1", "author": {"user": {"login": "lower-case", "name": "Lovekesh Garg"}}, "url": "https://github.com/quarkusio/quarkus/commit/b0af81213ed190d2facdf099dab3de472b61afa1", "committedDate": "2020-05-10T13:01:48Z", "message": "Added support to register nested classes and reflection via classNames"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3385, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}