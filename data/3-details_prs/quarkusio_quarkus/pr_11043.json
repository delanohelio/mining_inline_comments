{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MDUwOTY1", "number": 11043, "title": "implement kotlin support for mongodb panache", "bodyText": "There were two goals, as we discussed on zulip at the outset, of this PR:\n\nImplement the same support for Kotlin in MongoDB Panache as we did for Hibernate Panache.\nTry to push for greater reuse of code to reduce the amount of duplication\n\nSo there are some changes in here not strictly necessary for #1 but moves the ball down the field for #2.  That said, I didn't go all the way with the deduplication because it was taking a fair bit of time and I wanted to get the functionality in first.  Further dedeuplication would be mostly behind the scenes clean up.  However, i would like to point out how the number of visitors we have here vs the JPA version is noticably lower.  I think we can go even further, to be honest, but I wanted to checkpoint what I have here and make sure everyone's on board before going further.\nThese changes are largely limited to the MongoDB code but some did leak up in to the JPA and common areas because $reasons.  I've tried to limit that leakage and in some ways it dilutes the value of the deduplication effort but I'm reasonably happy with what I did get done and think there's value in going further.  There's a few options I'd like to explore in sharing interfaces for things like PanacheQuery and such that could further reduce the amount of duplication and move to more centralized, shared code but those cuts are likely to be deeper/more widespread and I want to get validation first.\nI'm happy to set up a bluejeans chat to walk through the PR if you'd like or you're welcome to review them on your own.  Whichever is easiest for you.  I know there are some changes in there that might raise more questions than others and I'm happy to share my thinking on those.  Hopefully you'll agree with them.", "createdAt": "2020-07-28T20:58:25Z", "url": "https://github.com/quarkusio/quarkus/pull/11043", "merged": true, "mergeCommit": {"oid": "bdcb54885045feb2934c4f091628655031abf8ac"}, "closed": true, "closedAt": "2020-08-17T17:49:51Z", "author": {"login": "evanchooly"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5vm7_ABqjM2MDAzNzQwNTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc_17f2ABqjM2NjI4OTc0ODA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3ea856fae46be01ade8f5f66c17d1a0304795c12", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/3ea856fae46be01ade8f5f66c17d1a0304795c12", "committedDate": "2020-07-28T20:36:35Z", "message": "implement kotlin support for mongodb panache"}, "afterCommit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/89e49665664f7c1523c6554fc9305e990cfa1a49", "committedDate": "2020-07-29T18:48:13Z", "message": "rebase against master again"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4Mjk4NTM5", "url": "https://github.com/quarkusio/quarkus/pull/11043#pullrequestreview-458298539", "createdAt": "2020-07-30T11:02:03Z", "commit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49"}, "state": "DISMISSED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMTowMjowM1rOG5eVHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjo0MTozM1rOG5hRLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkxODk0Mg==", "bodyText": "This is legit but a lot of interfaces inside Quarkus defines the default modifier like this.\nPlease, avoid this kind of changes not related to the PR especially for such a big PR as it adds another file to review !\nBut, OK to keep the change now that it's done.", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r462918942", "createdAt": "2020-07-30T11:02:03Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/mongodb-panache-common/runtime/src/main/java/io/quarkus/mongodb/panache/PanacheUpdate.java", "diffHunk": "@@ -18,7 +18,7 @@\n      * @param params params optional sequence of indexed parameters\n      * @return the number of entities updated.\n      */\n-    public long where(String query, Object... params);\n+    long where(String query, Object... params);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyMjMxMw==", "bodyText": "Why is there multiple @see for .persist.\nSame for update, delete, ...", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r462922313", "createdAt": "2020-07-30T11:09:21Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/mongodb-panache-kotlin/runtime/src/main/kotlin/io/quarkus/mongodb/panache/kotlin/PanacheMongoEntityBase.kt", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.mongodb.panache.kotlin\n+\n+import io.quarkus.mongodb.panache.kotlin.runtime.KotlinMongoOperations\n+\n+/**\n+ * Represents an entity. If your Mongo entities extend this class they gain auto-generated accessors\n+ * to all their public fields, as well as a lot of useful methods. Unless you have a custom ID strategy, you\n+ * should not extend this class directly but extend [PanacheMongoEntity] instead.\n+ *\n+ * @see PanacheMongoEntity\n+ */\n+@Suppress(\"unused\")\n+abstract class PanacheMongoEntityBase {\n+    companion object {\n+        @JvmStatic\n+        val operations = KotlinMongoOperations()\n+    }\n+\n+    /**\n+     * Persist this entity in the database.\n+     * This will set it's ID field if not already set.\n+     *\n+     * @see .persist\n+     * @see .persist\n+     * @see .persist", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyMzQ4Mw==", "bodyText": "Same here, the @see tags seems not correct ...", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r462923483", "createdAt": "2020-07-30T11:11:45Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/mongodb-panache-kotlin/runtime/src/main/kotlin/io/quarkus/mongodb/panache/kotlin/PanacheMongoRepositoryBase.kt", "diffHunk": "@@ -0,0 +1,821 @@\n+@file:Suppress(\"unused\")\n+\n+package io.quarkus.mongodb.panache.kotlin\n+\n+import com.mongodb.client.MongoCollection\n+import com.mongodb.client.MongoDatabase\n+import io.quarkus.mongodb.panache.kotlin.PanacheMongoEntityBase.Companion.operations\n+import io.quarkus.panache.common.Parameters\n+import io.quarkus.panache.common.Sort\n+import io.quarkus.panache.common.impl.GenerateBridge\n+import org.bson.Document\n+import java.util.stream.Stream\n+\n+/**\n+ * Represents a Repository for a specific type of entity `Entity`, with an ID type\n+ * of `Id`. Implementing this repository will gain you the exact same useful methods\n+ * that are on [PanacheMongoEntityBase]. Unless you have a custom ID strategy, you should not\n+ * implement this interface directly but implement [PanacheMongoRepository] instead.\n+ *\n+ * @param <Entity> The type of entity to operate on\n+ * @param <Id> The ID type of the entity\n+ * @see PanacheMongoRepository<Id><Entity>\n+ */\n+interface PanacheMongoRepositoryBase<Entity: Any, Id: Any> {\n+    /**\n+     * Persist the given entity in the database.\n+     * This will set it's ID field if not already set.\n+     *\n+     * @param entity the entity to insert.\n+     * @see .persist\n+     * @see .persist\n+     * @see .persist\n+     */\n+    fun persist(entity: Entity) = operations.persist(entity)\n+\n+    /**\n+     * Update the given entity in the database.\n+     *\n+     * @param entity the entity to update.\n+     * @see .update\n+     * @see .update\n+     * @see .update", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyNjk1MA==", "bodyText": "On Hibernate you don't have two companions but only one.\nCan you explain quickly why you need two here ?", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r462926950", "createdAt": "2020-07-30T11:19:26Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/mongodb-panache-kotlin/runtime/src/main/kotlin/io/quarkus/mongodb/panache/kotlin/PanacheMongoCompanion.kt", "diffHunk": "@@ -0,0 +1,770 @@\n+package io.quarkus.mongodb.panache.kotlin\n+\n+import com.mongodb.client.MongoCollection\n+import com.mongodb.client.MongoDatabase\n+import io.quarkus.mongodb.panache.kotlin.PanacheMongoEntityBase.Companion.operations\n+import io.quarkus.panache.common.Parameters\n+import io.quarkus.panache.common.Sort\n+import io.quarkus.panache.common.impl.GenerateBridge\n+import org.bson.Document\n+import org.bson.types.ObjectId\n+import java.util.stream.Stream\n+\n+interface PanacheMongoCompanion<Entity : PanacheMongoEntityBase>: PanacheMongoCompanionBase<Entity, ObjectId>\n+\n+interface PanacheMongoCompanionBase<Entity : PanacheMongoEntityBase, Id: Any> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkzMDc3MA==", "bodyText": "It seems strange to me to reuse the companion object of the entity base class ...", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r462930770", "createdAt": "2020-07-30T11:27:25Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/mongodb-panache-kotlin/runtime/src/main/kotlin/io/quarkus/mongodb/panache/kotlin/reactive/ReactivePanacheMongoRepositoryBase.kt", "diffHunk": "@@ -0,0 +1,832 @@\n+@file:Suppress(\"unused\")\n+\n+package io.quarkus.mongodb.panache.kotlin.reactive\n+\n+import io.quarkus.mongodb.panache.kotlin.reactive.ReactivePanacheMongoEntityBase.Companion.operations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkzMTQyMw==", "bodyText": "What is the advantage to use it as a companion object instead of using it statically like this is done inside the Hibernate extension ?", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r462931423", "createdAt": "2020-07-30T11:28:43Z", "author": {"login": "loicmathieu"}, "path": "extensions/panache/mongodb-panache-kotlin/runtime/src/main/kotlin/io/quarkus/mongodb/panache/kotlin/reactive/ReactivePanacheMongoEntityBase.kt", "diffHunk": "@@ -0,0 +1,56 @@\n+package io.quarkus.mongodb.panache.kotlin.reactive\n+\n+import io.quarkus.mongodb.panache.kotlin.reactive.runtime.KotlinReactiveMongoOperations\n+import io.smallrye.mutiny.Uni\n+\n+/**\n+ * Represents an entity. If your Mongo entities extend this class they gain auto-generated accessors\n+ * to all their public fields, as well as a lot of useful\n+ * methods. Unless you have a custom ID strategy, you should not extend this class directly but extend\n+ * [ReactivePanacheMongoEntity] instead.\n+ *\n+ * @see ReactivePanacheMongoEntity\n+ */\n+abstract class ReactivePanacheMongoEntityBase {\n+    companion object {\n+        val operations = KotlinReactiveMongoOperations()\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk0MDE3OQ==", "bodyText": "Please don't use System.out", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r462940179", "createdAt": "2020-07-30T11:47:29Z", "author": {"login": "loicmathieu"}, "path": "integration-tests/hibernate-orm-panache/src/main/java/io/quarkus/it/panache/BookResource.java", "diffHunk": "@@ -22,6 +22,8 @@\n     @Produces(MediaType.APPLICATION_JSON)\n     public List<Book> addAndListAll(@PathParam(\"name\") String name, @PathParam(\"author\") String author) {\n         bookDao.persist(new Book(name, author));\n-        return bookDao.listAll();\n+        List<Book> books = bookDao.listAll();\n+        System.out.println(\"****** addAndListAll books = \" + books);\n+        return books;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk0MDMwNg==", "bodyText": "System.out ?", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r462940306", "createdAt": "2020-07-30T11:47:48Z", "author": {"login": "loicmathieu"}, "path": "integration-tests/hibernate-orm-panache/src/test/java/io/quarkus/it/panache/JacksonTest.java", "diffHunk": "@@ -16,6 +16,8 @@\n     public void testJsonIgnoreHonoured() {\n         List<Book> books = RestAssured.when().get(\"/book/Berlin/Beevor\").then().extract().body().jsonPath().getList(\".\",\n                 Book.class);\n+        System.out.println(\"****** testJsonIgnoreHonoured books = \" + books);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2MDk3Mg==", "bodyText": "Can you please remove your debugging println ?", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r462960972", "createdAt": "2020-07-30T12:30:09Z", "author": {"login": "loicmathieu"}, "path": "integration-tests/mongodb-panache-kotlin/src/main/kotlin/io/quarkus/it/mongodb/panache/book/BookEntityResource.kt", "diffHunk": "@@ -0,0 +1,114 @@\n+package io.quarkus.it.mongodb.panache.book\n+\n+import io.quarkus.panache.common.Parameters\n+import io.quarkus.panache.common.Sort\n+import org.bson.types.ObjectId\n+import org.jboss.logging.Logger\n+import java.net.URI\n+import java.time.LocalDate\n+import javax.annotation.PostConstruct\n+import javax.ws.rs.Consumes\n+import javax.ws.rs.DELETE\n+import javax.ws.rs.GET\n+import javax.ws.rs.NotFoundException\n+import javax.ws.rs.PATCH\n+import javax.ws.rs.POST\n+import javax.ws.rs.PUT\n+import javax.ws.rs.Path\n+import javax.ws.rs.PathParam\n+import javax.ws.rs.Produces\n+import javax.ws.rs.QueryParam\n+import javax.ws.rs.core.MediaType\n+import javax.ws.rs.core.Response\n+\n+@Path(\"/books/entity\")\n+@Produces(MediaType.APPLICATION_JSON)\n+@Consumes(MediaType.APPLICATION_JSON)\n+class BookEntityResource {\n+    @PostConstruct\n+    fun init() {\n+        val databaseName: String = BookEntity.mongoDatabase().name\n+        val collectionName: String = BookEntity.mongoCollection().namespace.collectionName\n+        LOGGER.infov(\"Using BookEntity[database={0}, collection={1}]\", databaseName, collectionName)\n+    }\n+\n+    @GET\n+    fun getBooks(@QueryParam(\"sort\") sort: String?): List<BookEntity> {\n+        return if (sort != null) {\n+            BookEntity.listAll(Sort.ascending(sort))\n+        } else BookEntity.listAll()\n+    }\n+\n+    @POST\n+    fun addBook(book: BookEntity): Response {\n+        println(\"book = ${book}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2NzA4NA==", "bodyText": "PanacheMock provides the capability to mock entity static methods.\nIf the test can be done by mocking on the companion object, cool, if not, it should be documented somewhere that we cannot mock entity static methods in Kotlin", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r462967084", "createdAt": "2020-07-30T12:41:33Z", "author": {"login": "loicmathieu"}, "path": "integration-tests/mongodb-panache-kotlin/src/test/kotlin/io/quarkus/it/mongodb/panache/MongodbPanacheMockingTest.kt", "diffHunk": "@@ -0,0 +1,107 @@\n+package io.quarkus.it.mongodb.panache\n+\n+import io.quarkus.it.mongodb.panache.person.MockablePersonRepository\n+import io.quarkus.it.mongodb.panache.person.Person\n+import io.quarkus.it.mongodb.panache.person.PersonEntity\n+import io.quarkus.it.mongodb.panache.person.PersonRepository\n+import io.quarkus.mongodb.panache.kotlin.PanacheMongoRepositoryBase\n+import io.quarkus.test.common.QuarkusTestResource\n+import io.quarkus.test.junit.QuarkusTest\n+import io.quarkus.test.junit.mockito.InjectMock\n+import org.junit.jupiter.api.Assertions\n+import org.junit.jupiter.api.Test\n+import org.mockito.Mockito\n+import java.util.Collections\n+import javax.inject.Inject\n+import javax.ws.rs.WebApplicationException\n+\n+@QuarkusTest\n+@QuarkusTestResource(MongoTestResource::class)\n+class MongodbPanacheMockingTest {\n+    @Inject\n+    lateinit var realPersonRepository: PersonRepository\n+\n+    @InjectMock\n+    lateinit var mockablePersonRepository: MockablePersonRepository\n+\n+    // These mocks are trying to call methods against instances but kotlin doesn't allow these kinds of method calls.\n+    // they must be called against the companion object (invoked against the type not a reference).  removing these tests\n+    // for now as I neither know how to correct this at this point nor am I convinced of the utility of these tests.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49"}, "originalPosition": 29}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7fa1b02c5c50179dee334c2b9ba5bb62478d86cc", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/7fa1b02c5c50179dee334c2b9ba5bb62478d86cc", "committedDate": "2020-07-30T13:36:56Z", "message": "readd modifiers to reduce diff size"}, "afterCommit": {"oid": "8bdbbcf5202a629ef0017604ef55ea3558411781", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/8bdbbcf5202a629ef0017604ef55ea3558411781", "committedDate": "2020-07-30T20:12:20Z", "message": "implement kotlin support for mongodb panache"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c20809640105b267e2afabc942ce24f4b4b9bee0", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/c20809640105b267e2afabc942ce24f4b4b9bee0", "committedDate": "2020-08-03T18:49:16Z", "message": "added missing build steps\nmore reductions in diffs against master"}, "afterCommit": {"oid": "1f236a6a6eb710eb068791f60fdcbb00afe8a4b8", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/1f236a6a6eb710eb068791f60fdcbb00afe8a4b8", "committedDate": "2020-08-03T18:50:30Z", "message": "implement kotlin support for mongodb panache"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f236a6a6eb710eb068791f60fdcbb00afe8a4b8", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/1f236a6a6eb710eb068791f60fdcbb00afe8a4b8", "committedDate": "2020-08-03T18:50:30Z", "message": "implement kotlin support for mongodb panache"}, "afterCommit": {"oid": "8a535bb37d125799d8beee7c960f6caa269773cb", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/8a535bb37d125799d8beee7c960f6caa269773cb", "committedDate": "2020-08-04T14:19:22Z", "message": "implement kotlin support for mongodb panache"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNTY0OTI2", "url": "https://github.com/quarkusio/quarkus/pull/11043#pullrequestreview-461564926", "createdAt": "2020-08-05T11:11:37Z", "commit": {"oid": "8a535bb37d125799d8beee7c960f6caa269773cb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNTU5Mjgx", "url": "https://github.com/quarkusio/quarkus/pull/11043#pullrequestreview-462559281", "createdAt": "2020-08-06T14:13:15Z", "commit": {"oid": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe"}, "state": "DISMISSED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDoxMzoxNlrOG81a4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTowMDoyMVrOG83eww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0Mjk3Ng==", "bodyText": "Generally I prefer to split those sort of methods in two, with one taking a mutable List result parameter to avoid creating one collection per class just to throw it away in addAll.\nAlso, won't this behaviour change impact other users?", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466442976", "createdAt": "2020-08-06T14:13:16Z", "author": {"login": "FroMage"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/ExtensionLoader.java", "diffHunk": "@@ -963,6 +967,15 @@ public String toString() {\n         return chainConfig;\n     }\n \n+    protected static List<Method> getMethods(Class<?> clazz) {\n+        List<Method> declaredMethods = new ArrayList<>();\n+        if (!clazz.getName().equals(Object.class.getName())) {\n+            declaredMethods.addAll(getMethods(clazz.getSuperclass()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0NDA3OA==", "bodyText": "Not sure who calls this, but you can't box Void, so that's dodgy.", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466444078", "createdAt": "2020-08-06T14:14:55Z", "author": {"login": "FroMage"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/util/AsmUtil.java", "diffHunk": "@@ -20,6 +33,36 @@\n  */\n public class AsmUtil {\n \n+    public static final List<org.objectweb.asm.Type> PRIMITIVES = asList(\n+            VOID_TYPE,\n+            BOOLEAN_TYPE,\n+            CHAR_TYPE,\n+            BYTE_TYPE,\n+            SHORT_TYPE,\n+            INT_TYPE,\n+            FLOAT_TYPE,\n+            LONG_TYPE);\n+    public static final List<org.objectweb.asm.Type> WRAPPERS = asList(\n+            getType(Void.class),\n+            getType(Boolean.class),\n+            getType(Character.class),\n+            getType(Byte.class),\n+            getType(Short.class),\n+            getType(Integer.class),\n+            getType(Float.class),\n+            getType(Long.class));\n+    public static final Map<org.objectweb.asm.Type, org.objectweb.asm.Type> WRAPPER_TO_PRIMITIVE = new HashMap<>();\n+\n+    static {\n+        for (int i = 0; i < AsmUtil.PRIMITIVES.size(); i++) {\n+            AsmUtil.WRAPPER_TO_PRIMITIVE.put(AsmUtil.WRAPPERS.get(i), AsmUtil.PRIMITIVES.get(i));\n+        }\n+    }\n+\n+    public static org.objectweb.asm.Type autobox(org.objectweb.asm.Type primitive) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1MDAzMA==", "bodyText": "This introduces confusion wrt what is an internal vs binary name, why?", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466450030", "createdAt": "2020-08-06T14:23:27Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheEntityClassVisitor.java", "diffHunk": "@@ -52,20 +50,10 @@ public MethodVisitor visitMethod(int access, String name, String descriptor, Str\n     }\n \n     @Override\n-    protected String getModelDescriptor() {\n-        return \"Ljava/lang/Class;\";\n-    }\n-\n-    @Override\n-    protected String getPanacheOperationsBinaryName() {\n+    protected String getPanacheOperationsInternalName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1MjcwNA==", "bodyText": "This is confusing because descriptors and signatures are different, and this seems to confuse the two.", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466452704", "createdAt": "2020-08-06T14:26:51Z", "author": {"login": "FroMage"}, "path": "extensions/panache/mongodb-panache-common/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/BasePanacheMongoResourceProcessor.java", "diffHunk": "@@ -0,0 +1,384 @@\n+package io.quarkus.mongodb.panache.deployment;\n+\n+import static io.quarkus.deployment.util.JandexUtil.resolveTypeParameters;\n+import static org.jboss.jandex.DotName.createSimple;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+\n+import org.bson.codecs.pojo.annotations.BsonId;\n+import org.bson.codecs.pojo.annotations.BsonIgnore;\n+import org.bson.codecs.pojo.annotations.BsonProperty;\n+import org.bson.types.ObjectId;\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.CompositeIndex;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.FieldInfo;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.Indexer;\n+import org.jboss.jandex.MethodInfo;\n+import org.jboss.jandex.Type;\n+\n+import io.quarkus.arc.deployment.ValidationPhaseBuildItem;\n+import io.quarkus.builder.BuildException;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.ExecutionTime;\n+import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.bean.JavaBeanUtil;\n+import io.quarkus.deployment.builditem.ApplicationArchivesBuildItem;\n+import io.quarkus.deployment.builditem.ApplicationIndexBuildItem;\n+import io.quarkus.deployment.builditem.BytecodeTransformerBuildItem;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveHierarchyBuildItem;\n+import io.quarkus.deployment.index.IndexingUtil;\n+import io.quarkus.deployment.util.JandexUtil;\n+import io.quarkus.jackson.spi.JacksonModuleBuildItem;\n+import io.quarkus.jsonb.spi.JsonbDeserializerBuildItem;\n+import io.quarkus.jsonb.spi.JsonbSerializerBuildItem;\n+import io.quarkus.mongodb.deployment.MongoClientNameBuildItem;\n+import io.quarkus.mongodb.deployment.MongoUnremovableClientsBuildItem;\n+import io.quarkus.mongodb.panache.MongoEntity;\n+import io.quarkus.mongodb.panache.PanacheMongoRecorder;\n+import io.quarkus.mongodb.panache.ProjectionFor;\n+import io.quarkus.mongodb.panache.jackson.ObjectIdDeserializer;\n+import io.quarkus.mongodb.panache.jackson.ObjectIdSerializer;\n+import io.quarkus.panache.common.deployment.PanacheEntityClassesBuildItem;\n+import io.quarkus.panache.common.deployment.PanacheEntityEnhancer;\n+import io.quarkus.panache.common.deployment.PanacheMethodCustomizer;\n+import io.quarkus.panache.common.deployment.PanacheMethodCustomizerBuildItem;\n+import io.quarkus.panache.common.deployment.PanacheRepositoryEnhancer;\n+\n+public abstract class BasePanacheMongoResourceProcessor {\n+    public static final DotName BSON_ID = createSimple(BsonId.class.getName());\n+    public static final DotName BSON_IGNORE = createSimple(BsonIgnore.class.getName());\n+    public static final DotName BSON_PROPERTY = createSimple(BsonProperty.class.getName());\n+    public static final DotName MONGO_ENTITY = createSimple(MongoEntity.class.getName());\n+    public static final DotName OBJECT_ID = createSimple(ObjectId.class.getName());\n+    public static final String OBJECT_SIGNATURE = toBinarySignature(Object.class);\n+    public static final DotName PROJECTION_FOR = createSimple(ProjectionFor.class.getName());\n+\n+    protected static String toBinarySignature(Class<?> type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ2OTM3MA==", "bodyText": "Are you really sure about this unboxed type?", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466469370", "createdAt": "2020-08-06T14:50:05Z", "author": {"login": "FroMage"}, "path": "extensions/panache/mongodb-panache-kotlin/deployment/src/main/java/io/quarkus/mongodb/panache/kotlin/deployment/visitors/KotlinPanacheMongoRepositoryClassVisitor.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package io.quarkus.mongodb.panache.kotlin.deployment.visitors;\n+\n+import static io.quarkus.deployment.util.AsmUtil.getDescriptor;\n+import static io.quarkus.mongodb.panache.kotlin.deployment.KotlinGenerator.findEntityTypeArguments;\n+\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.MethodInfo;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+\n+import io.quarkus.mongodb.panache.deployment.ByteCodeType;\n+import io.quarkus.mongodb.panache.deployment.TypeBundle;\n+import io.quarkus.mongodb.panache.kotlin.deployment.KotlinGenerator;\n+import io.quarkus.panache.common.deployment.PanacheEntityEnhancer;\n+import io.quarkus.panache.common.deployment.visitors.PanacheRepositoryClassVisitor;\n+\n+public class KotlinPanacheMongoRepositoryClassVisitor extends PanacheRepositoryClassVisitor {\n+    private final TypeBundle types;\n+    private KotlinGenerator generator;\n+    final Map<String, MethodInfo> toGenerate = new TreeMap<>();\n+    final Map<String, MethodInfo> toElide = new TreeMap<>();\n+\n+    public KotlinPanacheMongoRepositoryClassVisitor(IndexView indexView, ClassVisitor outputClassVisitor, String className,\n+            TypeBundle types) {\n+        super(className, outputClassVisitor, indexView);\n+        this.types = types;\n+    }\n+\n+    @Override\n+    protected final DotName getPanacheRepositoryDotName() {\n+        return types.repository().dotName();\n+    }\n+\n+    @Override\n+    protected final DotName getPanacheRepositoryBaseDotName() {\n+        return types.repositoryBase().dotName();\n+    }\n+\n+    @Override\n+    protected final String getPanacheOperationsInternalName() {\n+        return types.operations().internalName();\n+    }\n+\n+    @Override\n+    public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {\n+        super.visit(version, access, name, signature, superName, interfaces);\n+        final String repositoryClassName = name.replace('/', '.');\n+\n+        ByteCodeType[] foundTypeArguments = findEntityTypeArguments(indexView, repositoryClassName,\n+                getPanacheRepositoryBaseDotName());\n+\n+        ByteCodeType idType = foundTypeArguments[1].unbox();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ3MTA5NA==", "bodyText": "So why don't we have a single impl for java/kotlin of the query like we do for ORM?", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466471094", "createdAt": "2020-08-06T14:52:31Z", "author": {"login": "FroMage"}, "path": "extensions/panache/mongodb-panache-kotlin/runtime/src/main/java/io/quarkus/mongodb/panache/kotlin/reactive/runtime/ReactivePanacheQueryImpl.java", "diffHunk": "@@ -0,0 +1,256 @@\n+package io.quarkus.mongodb.panache.kotlin.reactive.runtime;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.bson.Document;\n+import org.bson.conversions.Bson;\n+\n+import com.mongodb.client.model.Collation;\n+\n+import io.quarkus.mongodb.FindOptions;\n+import io.quarkus.mongodb.panache.kotlin.reactive.ReactivePanacheQuery;\n+import io.quarkus.mongodb.panache.runtime.MongoPropertyUtil;\n+import io.quarkus.mongodb.reactive.ReactiveMongoCollection;\n+import io.quarkus.panache.common.Page;\n+import io.quarkus.panache.common.Range;\n+import io.quarkus.panache.common.exception.PanacheQueryException;\n+import io.smallrye.mutiny.Multi;\n+import io.smallrye.mutiny.Uni;\n+\n+public class ReactivePanacheQueryImpl<Entity> implements ReactivePanacheQuery<Entity> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ3NTAyOA==", "bodyText": "We can break this. I didn't want to break it for ORM, but in retrospect we should have.", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466475028", "createdAt": "2020-08-06T14:58:00Z", "author": {"login": "FroMage"}, "path": "extensions/panache/mongodb-panache-kotlin/runtime/src/main/kotlin/io/quarkus/mongodb/panache/kotlin/reactive/ReactivePanacheMongoEntityBase.kt", "diffHunk": "@@ -0,0 +1,56 @@\n+package io.quarkus.mongodb.panache.kotlin.reactive\n+\n+import io.quarkus.mongodb.panache.kotlin.reactive.runtime.KotlinReactiveMongoOperations\n+import io.smallrye.mutiny.Uni\n+\n+/**\n+ * Represents an entity. If your Mongo entities extend this class they gain auto-generated accessors\n+ * to all their public fields, as well as a lot of useful\n+ * methods. Unless you have a custom ID strategy, you should not extend this class directly but extend\n+ * [ReactivePanacheMongoEntity] instead.\n+ *\n+ * @see ReactivePanacheMongoEntity\n+ */\n+abstract class ReactivePanacheMongoEntityBase {\n+    companion object {\n+        val operations = KotlinReactiveMongoOperations()\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkzMTQyMw=="}, "originalCommit": {"oid": "89e49665664f7c1523c6554fc9305e990cfa1a49"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ3NjczOQ==", "bodyText": "Feels weird to have this method defined in the Java base interface if it's only meant for Kotlin implementations. Is it called by the abstract processor? If not, it should probably belong in a Kotlin subinterface.", "url": "https://github.com/quarkusio/quarkus/pull/11043#discussion_r466476739", "createdAt": "2020-08-06T15:00:21Z", "author": {"login": "FroMage"}, "path": "extensions/panache/mongodb-panache/deployment/src/main/java/io/quarkus/mongodb/panache/deployment/ImperativeTypeBundle.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package io.quarkus.mongodb.panache.deployment;\n+\n+import io.quarkus.mongodb.panache.PanacheMongoEntity;\n+import io.quarkus.mongodb.panache.PanacheMongoEntityBase;\n+import io.quarkus.mongodb.panache.PanacheMongoRepository;\n+import io.quarkus.mongodb.panache.PanacheMongoRepositoryBase;\n+import io.quarkus.mongodb.panache.PanacheQuery;\n+import io.quarkus.mongodb.panache.PanacheUpdate;\n+import io.quarkus.mongodb.panache.runtime.MongoOperations;\n+\n+public class ImperativeTypeBundle implements TypeBundle {\n+    @Override\n+    public ByteCodeType entity() {\n+        return new ByteCodeType(PanacheMongoEntity.class);\n+    }\n+\n+    @Override\n+    public ByteCodeType entityBase() {\n+        return new ByteCodeType(PanacheMongoEntityBase.class);\n+    }\n+\n+    @Override\n+    public ByteCodeType entityBaseCompanion() {\n+        throw new UnsupportedOperationException(\"Companions are not supported in Java.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11cb12bda558fdcdd9afa2dacb5852a3479b1bfe"}, "originalPosition": 24}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4f63fe1a71ba72f6242e8e50dd2e2538b6974cb2", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/4f63fe1a71ba72f6242e8e50dd2e2538b6974cb2", "committedDate": "2020-08-07T15:23:59Z", "message": "refactor to a common implementation"}, "afterCommit": {"oid": "a6a7833ea5a0d94fbc561c4c0e960caea9d0fa1a", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/a6a7833ea5a0d94fbc561c4c0e960caea9d0fa1a", "committedDate": "2020-08-07T15:41:30Z", "message": "implement kotlin support for mongodb panache\n\nfix BuildStep scanning to check parent classes as well.\nrefactor to reduce redundant overrides\n\nreuse more of the java side\n\nreorder params.  trivial but now consistent with the other process methods\n\nrefactor to a common implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0ODI1NjM1", "url": "https://github.com/quarkusio/quarkus/pull/11043#pullrequestreview-464825635", "createdAt": "2020-08-11T07:46:47Z", "commit": {"oid": "36d8ebcd197dc56d0c918fbf12e44190be74fc7f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "36d8ebcd197dc56d0c918fbf12e44190be74fc7f", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/36d8ebcd197dc56d0c918fbf12e44190be74fc7f", "committedDate": "2020-08-10T20:21:26Z", "message": "correct javadoc->dokka conversion errors\nsync docs with the java docs"}, "afterCommit": {"oid": "f0b3c8f0674227d47342e860b49c6cfd39fb6991", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/f0b3c8f0674227d47342e860b49c6cfd39fb6991", "committedDate": "2020-08-12T17:42:49Z", "message": "implement kotlin support for mongodb panache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0adc1d3d82403733cdaa76e735b1b8f398505172", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/0adc1d3d82403733cdaa76e735b1b8f398505172", "committedDate": "2020-08-17T17:32:57Z", "message": "implement kotlin support for mongodb panache"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "12a9024e7d36c6321e274722d235202a405655c3", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/12a9024e7d36c6321e274722d235202a405655c3", "committedDate": "2020-08-13T15:01:13Z", "message": "make the return type non-nullable"}, "afterCommit": {"oid": "0adc1d3d82403733cdaa76e735b1b8f398505172", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/0adc1d3d82403733cdaa76e735b1b8f398505172", "committedDate": "2020-08-17T17:32:57Z", "message": "implement kotlin support for mongodb panache"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1005, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}