{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NzU3NzQ0", "number": 8365, "title": "added elytron ldap authentication extension", "bodyText": "see issue #6606 and #5226", "createdAt": "2020-04-02T18:53:17Z", "url": "https://github.com/quarkusio/quarkus/pull/8365", "merged": true, "mergeCommit": {"oid": "87081509b43a97ac71ed3074b62b7a83cfa5c075"}, "closed": true, "closedAt": "2020-04-09T10:01:20Z", "author": {"login": "hartimcwildfly"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcT7gQ6gBqjMxOTUxMjg3NjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcV5i5kAFqTM5MDY1NjQ1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5677d2a1274671634c678984e404d888a7712c49", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/5677d2a1274671634c678984e404d888a7712c49", "committedDate": "2020-04-02T18:50:51Z", "message": "added elytron ldap authentication extension"}, "afterCommit": {"oid": "a6da61bdb61d484d1416c71ca9d9d00625ee0872", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/a6da61bdb61d484d1416c71ca9d9d00625ee0872", "committedDate": "2020-04-03T07:09:19Z", "message": "add elytron ldap authentication extension"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a6da61bdb61d484d1416c71ca9d9d00625ee0872", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/a6da61bdb61d484d1416c71ca9d9d00625ee0872", "committedDate": "2020-04-03T07:09:19Z", "message": "add elytron ldap authentication extension"}, "afterCommit": {"oid": "8ca28fef4af8c6adf6494d3b070049a9208f317d", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/8ca28fef4af8c6adf6494d3b070049a9208f317d", "committedDate": "2020-04-03T12:09:22Z", "message": "add elytron ldap authentication extension"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MzYxNDM2", "url": "https://github.com/quarkusio/quarkus/pull/8365#pullrequestreview-387361436", "createdAt": "2020-04-03T15:30:26Z", "commit": {"oid": "8ca28fef4af8c6adf6494d3b070049a9208f317d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8ca28fef4af8c6adf6494d3b070049a9208f317d", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/8ca28fef4af8c6adf6494d3b070049a9208f317d", "committedDate": "2020-04-03T12:09:22Z", "message": "add elytron ldap authentication extension"}, "afterCommit": {"oid": "ee80efbd7734918a28d621928d9af2914482dc58", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/ee80efbd7734918a28d621928d9af2914482dc58", "committedDate": "2020-04-05T00:36:31Z", "message": "add elytron ldap authentication extension"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MTA5NjMz", "url": "https://github.com/quarkusio/quarkus/pull/8365#pullrequestreview-388109633", "createdAt": "2020-04-06T10:11:52Z", "commit": {"oid": "ee80efbd7734918a28d621928d9af2914482dc58"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDoxMTo1MlrOGBQ1HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDoxNzozOVrOGBRBlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3NzUwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Apache Maven 3.5.3+\n          \n          \n            \n            * Apache Maven {maven-version}\n          \n      \n    \n    \n  \n\n(we changed that recently)", "url": "https://github.com/quarkusio/quarkus/pull/8365#discussion_r403977500", "createdAt": "2020-04-06T10:11:52Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/security-ldap.adoc", "diffHunk": "@@ -0,0 +1,226 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Using Security with an LDAP Realm\n+\n+include::./attributes.adoc[]\n+\n+This guide demonstrates how your Quarkus application can use an LDAP server to authenticate and authorize your user identities.\n+\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee80efbd7734918a28d621928d9af2914482dc58"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3ODE3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            which is an https://docs.wildfly.org/17/WildFly_Elytron_Security.html#ldap-security-realm[`wildfly-elytron-realm-ldap`] adapter for Quarkus applications.\n          \n          \n            \n            which is a https://docs.wildfly.org/19/WildFly_Elytron_Security.html#ldap-security-realm[`wildfly-elytron-realm-ldap`] adapter for Quarkus applications.", "url": "https://github.com/quarkusio/quarkus/pull/8365#discussion_r403978174", "createdAt": "2020-04-06T10:13:09Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/security-ldap.adoc", "diffHunk": "@@ -0,0 +1,226 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Using Security with an LDAP Realm\n+\n+include::./attributes.adoc[]\n+\n+This guide demonstrates how your Quarkus application can use an LDAP server to authenticate and authorize your user identities.\n+\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+== Architecture\n+\n+In this example, we build a very simple microservice which offers three endpoints:\n+\n+* `/api/public`\n+* `/api/users/me`\n+* `/api/admin`\n+\n+The `/api/public` endpoint can be accessed anonymously.\n+The `/api/admin` endpoint is protected with RBAC (Role-Based Access Control) where only users granted with the `adminRole` role can access. At this endpoint, we use the `@RolesAllowed` annotation to declaratively enforce the access constraint.\n+The `/api/users/me` endpoint is also protected with RBAC (Role-Based Access Control) where only users granted with the `standardRole` role can access. As a response, it returns a JSON document with details about the user.\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `security-ldap-quickstart` {quickstarts-tree-url}/security-ldap-quickstart[directory].\n+\n+== Creating the Maven Project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source, subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=security-ldap-quickstart \\\n+    -Dextensions=\"elytron-security-ldap, resteasy\"\n+cd security-ldap-quickstart\n+----\n+\n+This command generates a Maven project, importing the `elytron-security-ldap` extension\n+which is an https://docs.wildfly.org/17/WildFly_Elytron_Security.html#ldap-security-realm[`wildfly-elytron-realm-ldap`] adapter for Quarkus applications.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee80efbd7734918a28d621928d9af2914482dc58"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3ODM3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            We are using `SecurityContext` to get access to the current authenticated Principal and we return the user's name. This information is loaded from the ldap server.\n          \n          \n            \n            We are using `SecurityContext` to get access to the current authenticated Principal and we return the user's name. This information is loaded from the LDAP server.", "url": "https://github.com/quarkusio/quarkus/pull/8365#discussion_r403978378", "createdAt": "2020-04-06T10:13:31Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/security-ldap.adoc", "diffHunk": "@@ -0,0 +1,226 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Using Security with an LDAP Realm\n+\n+include::./attributes.adoc[]\n+\n+This guide demonstrates how your Quarkus application can use an LDAP server to authenticate and authorize your user identities.\n+\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+== Architecture\n+\n+In this example, we build a very simple microservice which offers three endpoints:\n+\n+* `/api/public`\n+* `/api/users/me`\n+* `/api/admin`\n+\n+The `/api/public` endpoint can be accessed anonymously.\n+The `/api/admin` endpoint is protected with RBAC (Role-Based Access Control) where only users granted with the `adminRole` role can access. At this endpoint, we use the `@RolesAllowed` annotation to declaratively enforce the access constraint.\n+The `/api/users/me` endpoint is also protected with RBAC (Role-Based Access Control) where only users granted with the `standardRole` role can access. As a response, it returns a JSON document with details about the user.\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `security-ldap-quickstart` {quickstarts-tree-url}/security-ldap-quickstart[directory].\n+\n+== Creating the Maven Project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source, subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=security-ldap-quickstart \\\n+    -Dextensions=\"elytron-security-ldap, resteasy\"\n+cd security-ldap-quickstart\n+----\n+\n+This command generates a Maven project, importing the `elytron-security-ldap` extension\n+which is an https://docs.wildfly.org/17/WildFly_Elytron_Security.html#ldap-security-realm[`wildfly-elytron-realm-ldap`] adapter for Quarkus applications.\n+\n+== Writing the application\n+\n+Let's start by implementing the `/api/public` endpoint. As you can see from the source code below, it is just a regular JAX-RS resource:\n+\n+[source,java]\n+----\n+package org.acme.elytron.security.ldap;\n+\n+import javax.annotation.security.PermitAll;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/api/public\")\n+public class PublicResource {\n+\n+    @GET\n+    @PermitAll\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String publicResource() {\n+        return \"public\";\n+   }\n+}\n+----\n+\n+The source code for the `/api/admin` endpoint is also very simple. The main difference here is that we are using a `@RolesAllowed` annotation to make sure that only users granted with the `adminRole` role can access the endpoint:\n+\n+\n+[source,java]\n+----\n+package org.acme.elytron.security.ldap;\n+\n+import javax.annotation.security.RolesAllowed;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/api/admin\")\n+public class AdminResource {\n+\n+    @GET\n+    @RolesAllowed(\"adminRole\")\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String adminResource() {\n+         return \"admin\";\n+    }\n+}\n+----\n+\n+Finally, let's consider the `/api/users/me` endpoint. As you can see from the source code below, we are trusting only users with the `standardRole` role.\n+We are using `SecurityContext` to get access to the current authenticated Principal and we return the user's name. This information is loaded from the ldap server.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee80efbd7734918a28d621928d9af2914482dc58"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3ODc1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            --\n          \n          \n            \n            ----", "url": "https://github.com/quarkusio/quarkus/pull/8365#discussion_r403978754", "createdAt": "2020-04-06T10:14:07Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/security-ldap.adoc", "diffHunk": "@@ -0,0 +1,226 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Using Security with an LDAP Realm\n+\n+include::./attributes.adoc[]\n+\n+This guide demonstrates how your Quarkus application can use an LDAP server to authenticate and authorize your user identities.\n+\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+== Architecture\n+\n+In this example, we build a very simple microservice which offers three endpoints:\n+\n+* `/api/public`\n+* `/api/users/me`\n+* `/api/admin`\n+\n+The `/api/public` endpoint can be accessed anonymously.\n+The `/api/admin` endpoint is protected with RBAC (Role-Based Access Control) where only users granted with the `adminRole` role can access. At this endpoint, we use the `@RolesAllowed` annotation to declaratively enforce the access constraint.\n+The `/api/users/me` endpoint is also protected with RBAC (Role-Based Access Control) where only users granted with the `standardRole` role can access. As a response, it returns a JSON document with details about the user.\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `security-ldap-quickstart` {quickstarts-tree-url}/security-ldap-quickstart[directory].\n+\n+== Creating the Maven Project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source, subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=security-ldap-quickstart \\\n+    -Dextensions=\"elytron-security-ldap, resteasy\"\n+cd security-ldap-quickstart\n+----\n+\n+This command generates a Maven project, importing the `elytron-security-ldap` extension\n+which is an https://docs.wildfly.org/17/WildFly_Elytron_Security.html#ldap-security-realm[`wildfly-elytron-realm-ldap`] adapter for Quarkus applications.\n+\n+== Writing the application\n+\n+Let's start by implementing the `/api/public` endpoint. As you can see from the source code below, it is just a regular JAX-RS resource:\n+\n+[source,java]\n+----\n+package org.acme.elytron.security.ldap;\n+\n+import javax.annotation.security.PermitAll;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/api/public\")\n+public class PublicResource {\n+\n+    @GET\n+    @PermitAll\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String publicResource() {\n+        return \"public\";\n+   }\n+}\n+----\n+\n+The source code for the `/api/admin` endpoint is also very simple. The main difference here is that we are using a `@RolesAllowed` annotation to make sure that only users granted with the `adminRole` role can access the endpoint:\n+\n+\n+[source,java]\n+----\n+package org.acme.elytron.security.ldap;\n+\n+import javax.annotation.security.RolesAllowed;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/api/admin\")\n+public class AdminResource {\n+\n+    @GET\n+    @RolesAllowed(\"adminRole\")\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String adminResource() {\n+         return \"admin\";\n+    }\n+}\n+----\n+\n+Finally, let's consider the `/api/users/me` endpoint. As you can see from the source code below, we are trusting only users with the `standardRole` role.\n+We are using `SecurityContext` to get access to the current authenticated Principal and we return the user's name. This information is loaded from the ldap server.\n+\n+[source,java]\n+----\n+package org.acme.elytron.security.ldap;\n+\n+import javax.annotation.security.RolesAllowed;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.SecurityContext;\n+\n+@Path(\"/api/users\")\n+public class UserResource {\n+\n+    @GET\n+    @RolesAllowed(\"standardRole\")\n+    @Path(\"/me\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public String me(@Context SecurityContext securityContext) {\n+        return securityContext.getUserPrincipal().getName();\n+    }\n+}\n+----\n+\n+=== Configuring the Application\n+\n+[source,properties]\n+--", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee80efbd7734918a28d621928d9af2914482dc58"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3ODgzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            --\n          \n          \n            \n            ----", "url": "https://github.com/quarkusio/quarkus/pull/8365#discussion_r403978839", "createdAt": "2020-04-06T10:14:16Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/security-ldap.adoc", "diffHunk": "@@ -0,0 +1,226 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Using Security with an LDAP Realm\n+\n+include::./attributes.adoc[]\n+\n+This guide demonstrates how your Quarkus application can use an LDAP server to authenticate and authorize your user identities.\n+\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+== Architecture\n+\n+In this example, we build a very simple microservice which offers three endpoints:\n+\n+* `/api/public`\n+* `/api/users/me`\n+* `/api/admin`\n+\n+The `/api/public` endpoint can be accessed anonymously.\n+The `/api/admin` endpoint is protected with RBAC (Role-Based Access Control) where only users granted with the `adminRole` role can access. At this endpoint, we use the `@RolesAllowed` annotation to declaratively enforce the access constraint.\n+The `/api/users/me` endpoint is also protected with RBAC (Role-Based Access Control) where only users granted with the `standardRole` role can access. As a response, it returns a JSON document with details about the user.\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `security-ldap-quickstart` {quickstarts-tree-url}/security-ldap-quickstart[directory].\n+\n+== Creating the Maven Project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source, subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=security-ldap-quickstart \\\n+    -Dextensions=\"elytron-security-ldap, resteasy\"\n+cd security-ldap-quickstart\n+----\n+\n+This command generates a Maven project, importing the `elytron-security-ldap` extension\n+which is an https://docs.wildfly.org/17/WildFly_Elytron_Security.html#ldap-security-realm[`wildfly-elytron-realm-ldap`] adapter for Quarkus applications.\n+\n+== Writing the application\n+\n+Let's start by implementing the `/api/public` endpoint. As you can see from the source code below, it is just a regular JAX-RS resource:\n+\n+[source,java]\n+----\n+package org.acme.elytron.security.ldap;\n+\n+import javax.annotation.security.PermitAll;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/api/public\")\n+public class PublicResource {\n+\n+    @GET\n+    @PermitAll\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String publicResource() {\n+        return \"public\";\n+   }\n+}\n+----\n+\n+The source code for the `/api/admin` endpoint is also very simple. The main difference here is that we are using a `@RolesAllowed` annotation to make sure that only users granted with the `adminRole` role can access the endpoint:\n+\n+\n+[source,java]\n+----\n+package org.acme.elytron.security.ldap;\n+\n+import javax.annotation.security.RolesAllowed;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/api/admin\")\n+public class AdminResource {\n+\n+    @GET\n+    @RolesAllowed(\"adminRole\")\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String adminResource() {\n+         return \"admin\";\n+    }\n+}\n+----\n+\n+Finally, let's consider the `/api/users/me` endpoint. As you can see from the source code below, we are trusting only users with the `standardRole` role.\n+We are using `SecurityContext` to get access to the current authenticated Principal and we return the user's name. This information is loaded from the ldap server.\n+\n+[source,java]\n+----\n+package org.acme.elytron.security.ldap;\n+\n+import javax.annotation.security.RolesAllowed;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.SecurityContext;\n+\n+@Path(\"/api/users\")\n+public class UserResource {\n+\n+    @GET\n+    @RolesAllowed(\"standardRole\")\n+    @Path(\"/me\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public String me(@Context SecurityContext securityContext) {\n+        return securityContext.getUserPrincipal().getName();\n+    }\n+}\n+----\n+\n+=== Configuring the Application\n+\n+[source,properties]\n+--\n+quarkus.security.ldap.enabled=true\n+\n+quarkus.security.ldap.dir-context.principal=uid=tool,ou=accounts,o=YourCompany,c=DE\n+quarkus.security.ldap.dir-context.url=ldaps://ldap.server.local\n+quarkus.security.ldap.dir-context.password=PASSWORD\n+\n+quarkus.security.ldap.identity-mapping.rdn-identifier=uid\n+quarkus.security.ldap.identity-mapping.search-base-dn=ou=users,ou=tool,o=YourCompany,c=DE\n+\n+quarkus.security.ldap.identity-mapping.attribute-mappings.\"0\".from=cn\n+quarkus.security.ldap.identity-mapping.attribute-mappings.\"0\".to=groups\n+quarkus.security.ldap.identity-mapping.attribute-mappings.\"0\".filter=(member=uid={0})\n+quarkus.security.ldap.identity-mapping.attribute-mappings.\"0\".filter-base-dn=ou=roles,ou=tool,o=YourCompany,c=DE\n+--", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee80efbd7734918a28d621928d9af2914482dc58"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk4MDY5NQ==", "bodyText": "Just to be sure, this is mandatory?", "url": "https://github.com/quarkusio/quarkus/pull/8365#discussion_r403980695", "createdAt": "2020-04-06T10:17:39Z", "author": {"login": "gsmet"}, "path": "extensions/elytron-security-ldap/runtime/src/main/java/io/quarkus/elytron/security/ldap/config/IdentityMappingConfig.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package io.quarkus.elytron.security.ldap.config;\n+\n+import java.util.Map;\n+\n+import io.quarkus.runtime.annotations.ConfigGroup;\n+import io.quarkus.runtime.annotations.ConfigItem;\n+\n+@ConfigGroup\n+public class IdentityMappingConfig {\n+\n+    /**\n+     * The identifier which correlates to the provided user (e.g. \"uid\")\n+     */\n+    @ConfigItem\n+    public String rdnIdentifier;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee80efbd7734918a28d621928d9af2914482dc58"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6695c66edd4b140f5d55643f737662acb975b1f5", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/6695c66edd4b140f5d55643f737662acb975b1f5", "committedDate": "2020-04-07T08:59:33Z", "message": "add elytron ldap authentication extension"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "09df518d25743e509748465559327b0bd97eac51", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/09df518d25743e509748465559327b0bd97eac51", "committedDate": "2020-04-07T08:58:28Z", "message": "set default value for rdnIdentifier"}, "afterCommit": {"oid": "6695c66edd4b140f5d55643f737662acb975b1f5", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/6695c66edd4b140f5d55643f737662acb975b1f5", "committedDate": "2020-04-07T08:59:33Z", "message": "add elytron ldap authentication extension"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNjU2NDU1", "url": "https://github.com/quarkusio/quarkus/pull/8365#pullrequestreview-390656455", "createdAt": "2020-04-09T10:01:12Z", "commit": {"oid": "6695c66edd4b140f5d55643f737662acb975b1f5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4712, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}