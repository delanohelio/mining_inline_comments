{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NTQwMzcw", "number": 9340, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMTozNzowOFrOD81joA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMTowODo0OFrOD9Nu5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTE4NjI0OnYy", "diffSide": "RIGHT", "path": "test-framework/junit5/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMTozNzowOFrOGWBRow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMTozNzowOFrOGWBRow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc0Mjc1NQ==", "bodyText": "I will move this to the test-bom when CI completes on my fork", "url": "https://github.com/quarkusio/quarkus/pull/9340#discussion_r425742755", "createdAt": "2020-05-15T11:37:08Z", "author": {"login": "geoand"}, "path": "test-framework/junit5/pom.xml", "diffHunk": "@@ -38,6 +38,13 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-core</artifactId>\n         </dependency>\n+\n+        <!-- TODO: fix -->\n+        <dependency>\n+            <groupId>com.thoughtworks.xstream</groupId>\n+            <artifactId>xstream</artifactId>\n+            <version>1.4.12</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6500c7f6d805a1201e11d2c4c4f02675727700c3"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTMyNzgzOnYy", "diffSide": "RIGHT", "path": "test-framework/junit5/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMjoyNToyNFrOGWCqlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMjo0ODo0MVrOGWDbdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc2NTUyNw==", "bodyText": "I am assuming that having this in tests cause any problems / add any dependencies to the regular application. Is that valid?", "url": "https://github.com/quarkusio/quarkus/pull/9340#discussion_r425765527", "createdAt": "2020-05-15T12:25:24Z", "author": {"login": "geoand"}, "path": "test-framework/junit5/pom.xml", "diffHunk": "@@ -38,6 +38,12 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-core</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>com.thoughtworks.xstream</groupId>\n+            <artifactId>xstream</artifactId>\n+            <!-- Avoid adding this to the BOM / Version has to be kept in sync with what optaplanner uses otherwise the enforcer complains -->\n+            <version>1.4.11.1</version>\n+        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03ac12312ff8aabe12c6a4a769f62d05aed6f70b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc3ODAzNg==", "bodyText": "Seems to be", "url": "https://github.com/quarkusio/quarkus/pull/9340#discussion_r425778036", "createdAt": "2020-05-15T12:48:41Z", "author": {"login": "geoand"}, "path": "test-framework/junit5/pom.xml", "diffHunk": "@@ -38,6 +38,12 @@\n             <groupId>io.quarkus</groupId>\n             <artifactId>quarkus-core</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>com.thoughtworks.xstream</groupId>\n+            <artifactId>xstream</artifactId>\n+            <!-- Avoid adding this to the BOM / Version has to be kept in sync with what optaplanner uses otherwise the enforcer complains -->\n+            <version>1.4.11.1</version>\n+        </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc2NTUyNw=="}, "originalCommit": {"oid": "03ac12312ff8aabe12c6a4a769f62d05aed6f70b"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTE0NzI1OnYy", "diffSide": "RIGHT", "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/internal/XStreamDeepClone.java", "isResolved": false, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMTowODo0OFrOGWlArg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwODowMzoxMlrOGWrukw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyODIzOA==", "bodyText": "I don't like this, jboss marshalling has some Cloner support that is likely more appropriate to use here.\nReally though if we had support for creating an object without calling a constructor you could just use reflection to recursively clone, but adding this support requires multi release jar support and would prevent Quarkus being build with JDK8.\nIdeally we would move non-constructor based instantiation into a mini library, and then do a simple reflection based clone. I probably won't get to look at this today, but I will likely have time later this week.", "url": "https://github.com/quarkusio/quarkus/pull/9340#discussion_r426328238", "createdAt": "2020-05-18T01:08:48Z", "author": {"login": "stuartwdouglas"}, "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/internal/XStreamDeepClone.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package io.quarkus.test.junit.internal;\n+\n+import com.thoughtworks.xstream.XStream;\n+\n+/**\n+ * Super simple cloning strategy that just serializes to XML and deserializes it using xstream\n+ */\n+public class XStreamDeepClone implements DeepClone {\n+\n+    private final XStream xStream;\n+\n+    public XStreamDeepClone(ClassLoader classLoader) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2f679ebcb3e3187ec82bec591c4ba3677db2bdc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM2NTc1Mw==", "bodyText": "Sure, that's obviously the right way to do things, but is it really warranted to spend the extra cycles for this use case?", "url": "https://github.com/quarkusio/quarkus/pull/9340#discussion_r426365753", "createdAt": "2020-05-18T04:38:54Z", "author": {"login": "geoand"}, "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/internal/XStreamDeepClone.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package io.quarkus.test.junit.internal;\n+\n+import com.thoughtworks.xstream.XStream;\n+\n+/**\n+ * Super simple cloning strategy that just serializes to XML and deserializes it using xstream\n+ */\n+public class XStreamDeepClone implements DeepClone {\n+\n+    private final XStream xStream;\n+\n+    public XStreamDeepClone(ClassLoader classLoader) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyODIzOA=="}, "originalCommit": {"oid": "c2f679ebcb3e3187ec82bec591c4ba3677db2bdc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3MjU0MA==", "bodyText": "Not to mention the various corner cases that we would need look out for as opposed to this way we seems to \"just work\" - although I obviously agree that it's not the cleanest solution in the world :)", "url": "https://github.com/quarkusio/quarkus/pull/9340#discussion_r426372540", "createdAt": "2020-05-18T05:09:46Z", "author": {"login": "geoand"}, "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/internal/XStreamDeepClone.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package io.quarkus.test.junit.internal;\n+\n+import com.thoughtworks.xstream.XStream;\n+\n+/**\n+ * Super simple cloning strategy that just serializes to XML and deserializes it using xstream\n+ */\n+public class XStreamDeepClone implements DeepClone {\n+\n+    private final XStream xStream;\n+\n+    public XStreamDeepClone(ClassLoader classLoader) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyODIzOA=="}, "originalCommit": {"oid": "c2f679ebcb3e3187ec82bec591c4ba3677db2bdc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQwNTU5Nw==", "bodyText": "Took a quick look at JBoss Marshalling and it's cloner support is just for serializable or cloneable objects", "url": "https://github.com/quarkusio/quarkus/pull/9340#discussion_r426405597", "createdAt": "2020-05-18T06:58:03Z", "author": {"login": "geoand"}, "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/internal/XStreamDeepClone.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package io.quarkus.test.junit.internal;\n+\n+import com.thoughtworks.xstream.XStream;\n+\n+/**\n+ * Super simple cloning strategy that just serializes to XML and deserializes it using xstream\n+ */\n+public class XStreamDeepClone implements DeepClone {\n+\n+    private final XStream xStream;\n+\n+    public XStreamDeepClone(ClassLoader classLoader) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyODIzOA=="}, "originalCommit": {"oid": "c2f679ebcb3e3187ec82bec591c4ba3677db2bdc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxNDQxOA==", "bodyText": "In any case, if you think it best, I'll wait until the no-constructor library is in place and then update the PR to use it - just ping me about it :)", "url": "https://github.com/quarkusio/quarkus/pull/9340#discussion_r426414418", "createdAt": "2020-05-18T07:18:18Z", "author": {"login": "geoand"}, "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/internal/XStreamDeepClone.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package io.quarkus.test.junit.internal;\n+\n+import com.thoughtworks.xstream.XStream;\n+\n+/**\n+ * Super simple cloning strategy that just serializes to XML and deserializes it using xstream\n+ */\n+public class XStreamDeepClone implements DeepClone {\n+\n+    private final XStream xStream;\n+\n+    public XStreamDeepClone(ClassLoader classLoader) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyODIzOA=="}, "originalCommit": {"oid": "c2f679ebcb3e3187ec82bec591c4ba3677db2bdc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxNTkxNA==", "bodyText": "From memory it has an interface that you can implement to decide if an object can be cloned, and you can use to just pretend everything is serialisable. Lots of classes are also not going to work with the XML based approach.\nThinking about it wouldn't XStream also require a no-arg constructor, so a reflection based approach would not be any worse?", "url": "https://github.com/quarkusio/quarkus/pull/9340#discussion_r426415914", "createdAt": "2020-05-18T07:21:31Z", "author": {"login": "stuartwdouglas"}, "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/internal/XStreamDeepClone.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package io.quarkus.test.junit.internal;\n+\n+import com.thoughtworks.xstream.XStream;\n+\n+/**\n+ * Super simple cloning strategy that just serializes to XML and deserializes it using xstream\n+ */\n+public class XStreamDeepClone implements DeepClone {\n+\n+    private final XStream xStream;\n+\n+    public XStreamDeepClone(ClassLoader classLoader) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyODIzOA=="}, "originalCommit": {"oid": "c2f679ebcb3e3187ec82bec591c4ba3677db2bdc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxODUxNg==", "bodyText": "XStream doesn't call the constructor at all, see:\nXStream is not calling the default constructor during deserialization.\n\nThis is, in fact, the same case as above. XStream uses the same mechanism as the JDK serialization. When using the enhanced mode with the optimized reflection API, it does not invoke the default constructor. The solution is to implement the readResolve or readObject as demonstrated with the last question.\n\nfrom https://x-stream.github.io/faq.html.\nSo it should just work (and indeed in the test cases I added, the objects being passed around include ones with a no-args constructor)", "url": "https://github.com/quarkusio/quarkus/pull/9340#discussion_r426418516", "createdAt": "2020-05-18T07:26:37Z", "author": {"login": "geoand"}, "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/internal/XStreamDeepClone.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package io.quarkus.test.junit.internal;\n+\n+import com.thoughtworks.xstream.XStream;\n+\n+/**\n+ * Super simple cloning strategy that just serializes to XML and deserializes it using xstream\n+ */\n+public class XStreamDeepClone implements DeepClone {\n+\n+    private final XStream xStream;\n+\n+    public XStreamDeepClone(ClassLoader classLoader) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyODIzOA=="}, "originalCommit": {"oid": "c2f679ebcb3e3187ec82bec591c4ba3677db2bdc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQyMDkwOQ==", "bodyText": "FWIW, I chose this strategy because it's also used in Powemock :)", "url": "https://github.com/quarkusio/quarkus/pull/9340#discussion_r426420909", "createdAt": "2020-05-18T07:31:08Z", "author": {"login": "geoand"}, "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/internal/XStreamDeepClone.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package io.quarkus.test.junit.internal;\n+\n+import com.thoughtworks.xstream.XStream;\n+\n+/**\n+ * Super simple cloning strategy that just serializes to XML and deserializes it using xstream\n+ */\n+public class XStreamDeepClone implements DeepClone {\n+\n+    private final XStream xStream;\n+\n+    public XStreamDeepClone(ClassLoader classLoader) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyODIzOA=="}, "originalCommit": {"oid": "c2f679ebcb3e3187ec82bec591c4ba3677db2bdc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQzNjIyNw==", "bodyText": "ok, lets just go with it then", "url": "https://github.com/quarkusio/quarkus/pull/9340#discussion_r426436227", "createdAt": "2020-05-18T07:59:34Z", "author": {"login": "stuartwdouglas"}, "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/internal/XStreamDeepClone.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package io.quarkus.test.junit.internal;\n+\n+import com.thoughtworks.xstream.XStream;\n+\n+/**\n+ * Super simple cloning strategy that just serializes to XML and deserializes it using xstream\n+ */\n+public class XStreamDeepClone implements DeepClone {\n+\n+    private final XStream xStream;\n+\n+    public XStreamDeepClone(ClassLoader classLoader) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyODIzOA=="}, "originalCommit": {"oid": "c2f679ebcb3e3187ec82bec591c4ba3677db2bdc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQzODI5MQ==", "bodyText": "Cool :)", "url": "https://github.com/quarkusio/quarkus/pull/9340#discussion_r426438291", "createdAt": "2020-05-18T08:03:12Z", "author": {"login": "geoand"}, "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/internal/XStreamDeepClone.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package io.quarkus.test.junit.internal;\n+\n+import com.thoughtworks.xstream.XStream;\n+\n+/**\n+ * Super simple cloning strategy that just serializes to XML and deserializes it using xstream\n+ */\n+public class XStreamDeepClone implements DeepClone {\n+\n+    private final XStream xStream;\n+\n+    public XStreamDeepClone(ClassLoader classLoader) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyODIzOA=="}, "originalCommit": {"oid": "c2f679ebcb3e3187ec82bec591c4ba3677db2bdc"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3221, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}