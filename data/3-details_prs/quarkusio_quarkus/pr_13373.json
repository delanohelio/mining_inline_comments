{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzODQzODg1", "number": 13373, "title": "Spring Data REST", "bodyText": "cc @geoand", "createdAt": "2020-11-19T10:36:29Z", "url": "https://github.com/quarkusio/quarkus/pull/13373", "merged": true, "mergeCommit": {"oid": "75510b1d8123f566d879b61c516db92d8bb295de"}, "closed": true, "closedAt": "2021-01-04T17:26:46Z", "author": {"login": "gytis"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdeEi9TAFqTUzNDU1NzM3Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABds5vuMgFqTU2MTIwNDY3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0NTU3Mzc3", "url": "https://github.com/quarkusio/quarkus/pull/13373#pullrequestreview-534557377", "createdAt": "2020-11-19T15:22:40Z", "commit": {"oid": "ae590b3d105a12b23b83f265bf112f1b492bd15f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNToyMjo0MFrOH2j0wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNTozMTo1MFrOH2kRkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk3MjA5Nw==", "bodyText": "I am wondering how this worked before...", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r526972097", "createdAt": "2020-11-19T15:22:40Z", "author": {"login": "geoand"}, "path": "extensions/panache/rest-data-panache/deployment/src/main/java/io/quarkus/rest/data/panache/deployment/properties/ResourcePropertiesBuildItem.java", "diffHunk": "@@ -2,7 +2,7 @@\n \n import io.quarkus.builder.item.MultiBuildItem;\n \n-public class ResourcePropertiesBuildItem extends MultiBuildItem {\n+public final class ResourcePropertiesBuildItem extends MultiBuildItem {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae590b3d105a12b23b83f265bf112f1b492bd15f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk3NDI2MA==", "bodyText": "s/nor/or", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r526974260", "createdAt": "2020-11-19T15:25:18Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/spring-data-rest.adoc", "diffHunk": "@@ -0,0 +1,441 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Extension for Spring Data REST\n+\n+include::./attributes.adoc[]\n+:extension-status: experimental\n+\n+Whiles users are encouraged to use a REST Data with Panache for the REST data access endpoints generation,\n+Quarkus provides a compatibility layer for Spring Data REST in a form of `spring-data-rest` extension.\n+\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `spring-data-rest-quickstart` {quickstarts-tree-url}/spring-data-rest-quickstart[directory].\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,bash,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-data-rest-quickstart \\\n+    -Dextensions=\"spring-data-rest,resteasy-jackson,quarkus-jdbc-postgresql\"\n+cd spring-data-rest-quickstart\n+----\n+\n+This command generates a Maven project with a `spring-data-rest` extension.\n+\n+If you already have your Quarkus project configured, you can add the `spring-data-rest` extension\n+to your project by running the following command in your project base directory:\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"spring-data-rest\"\n+----\n+\n+This will add the following to your `pom.xml`:\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.quarkus</groupId>\n+    <artifactId>quarkus-spring-data-rest</artifactId>\n+</dependency>\n+----\n+\n+For the tests you will also need a `rest-assured` dependency. Add it to the `pom.xml`:\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.rest-assured</groupId>\n+    <artifactId>rest-assured</artifactId>\n+    <scope>test</scope>\n+</dependency>\n+----\n+\n+Note: both `resteasy-jackson` and `resteasy-jsonb` are supported and can be interchanged.\n+\n+== Define the Entity\n+\n+Throughout the course of this guide, the following JPA Entity will be used:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class Fruit {\n+\n+    @Id\n+    @GeneratedValue\n+    private Long id;\n+\n+    private String name;\n+\n+    private String color;\n+\n+\n+    public Fruit() {\n+    }\n+\n+    public Fruit(String name, String color) {\n+        this.name = name;\n+        this.color = color;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getColor() {\n+        return color;\n+    }\n+\n+    public void setColor(String color) {\n+        this.color = color;\n+    }\n+}\n+----\n+\n+\n+== Configure database access properties\n+\n+Add the following properties to `application.properties` to configure access to a local PostgreSQL instance.\n+\n+[source,properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=quarkus_test\n+quarkus.datasource.password=quarkus_test\n+quarkus.datasource.jdbc.url=jdbc:postgresql:quarkus_test\n+quarkus.datasource.jdbc.max-size=8\n+quarkus.datasource.jdbc.min-size=2\n+quarkus.hibernate-orm.database.generation=drop-and-create\n+----\n+\n+This configuration assumes that PostgreSQL will be running locally.\n+\n+A very easy way to accomplish that is by using the following Docker command:\n+\n+[source,bash]\n+----\n+docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 --name quarkus_test -e POSTGRES_USER=quarkus_test -e POSTGRES_PASSWORD=quarkus_test -e POSTGRES_DB=quarkus_test -p 5432:5432 postgres:11.5\n+----\n+\n+If you plan on using a different setup, please change your `application.properties` accordingly.\n+\n+== Prepare the data\n+\n+To make it easier to showcase some capabilities of Spring Data REST on Quarkus, some test data should be inserted into the database\n+by adding the following content to a new file named `src/main/resources/import.sql`:\n+\n+[source,sql]\n+----\n+INSERT INTO fruit(id, name, color) VALUES (1, 'Cherry', 'Red');\n+INSERT INTO fruit(id, name, color) VALUES (2, 'Apple', 'Red');\n+INSERT INTO fruit(id, name, color) VALUES (3, 'Banana', 'Yellow');\n+INSERT INTO fruit(id, name, color) VALUES (4, 'Avocado', 'Green');\n+INSERT INTO fruit(id, name, color) VALUES (5, 'Strawberry', 'Red');\n+----\n+\n+Hibernate ORM will execute these queries on application startup.\n+\n+== Define the repository\n+\n+It is now time to define the repository that will be used to access `Fruit`.\n+In a typical Spring Data fashion create a repository like so:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import org.springframework.data.repository.CrudRepository;\n+\n+public interface FruitsRepository extends CrudRepository<Fruit, Long> {\n+}\n+----\n+\n+The `FruitsRepository` above extends Spring Data's `org.springframework.data.repository.CrudRepository` which means that all of the latter's methods are\n+available to `FruitsRepository`.\n+\n+`spring-data-jpa` will generate an implementation for this repository. Then `spring-data-rest` will generate a REST CRUD resource for it.\n+\n+== Update the test\n+\n+To test the capabilities of `FruitsRepository` proceed to update the content of `FruitsRepositoryTest` to:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.core.IsNot.not;\n+\n+@QuarkusTest\n+class FruitsRepositoryTest {\n+\n+    @Test\n+    void testListAllFruits() {\n+        //List all, should have all 3 fruits the database has initially:\n+        given()\n+                .accept(\"application/json\")\n+                .when().get(\"/fruits\")\n+                .then()\n+                .statusCode(200)\n+                .body(\n+                        containsString(\"Cherry\"),\n+                        containsString(\"Apple\"),\n+                        containsString(\"Banana\")\n+                );\n+\n+        //Delete the Cherry:\n+        given()\n+                .when().delete(\"/fruits/1\")\n+                .then()\n+                .statusCode(204);\n+\n+        //List all, cherry should be missing now:\n+        given()\n+                .accept(\"application/json\")\n+                .when().get(\"/fruits\")\n+                .then()\n+                .statusCode(200)\n+                .body(\n+                        not(containsString(\"Cherry\")),\n+                        containsString(\"Apple\"),\n+                        containsString(\"Banana\")\n+                );\n+\n+        //Create a new Fruit\n+        given()\n+                .contentType(\"application/json\")\n+                .accept(\"application/json\")\n+                .body(\"{\\\"name\\\": \\\"Orange\\\", \\\"color\\\": \\\"Orange\\\"}\")\n+                .when().post(\"/fruits\")\n+                .then()\n+                .statusCode(201)\n+                .body(containsString(\"Orange\"))\n+                .body(\"id\", notNullValue())\n+                .extract().body().jsonPath().getString(\"id\");\n+\n+        //List all, Orange should be present now:\n+        given()\n+                .accept(\"application/json\")\n+                .when().get(\"/fruits\")\n+                .then()\n+                .statusCode(200)\n+                .body(\n+                        not(containsString(\"Cherry\")),\n+                        containsString(\"Apple\"),\n+                        containsString(\"Orange\")\n+                );\n+    }\n+}\n+\n+----\n+\n+The test can be easily run by issuing: `./mvnw test`\n+\n+== Package and run the application\n+\n+Quarkus dev mode works with the defined repositories just like with any other Quarkus extension, greatly enhancing your productivity during the dev cycle.\n+The application can be started in dev mode as usual using:\n+\n+[source, bash]\n+----\n+./mvnw compile quarkus:dev\n+----\n+\n+== Run the application as a native binary\n+\n+You can of course create a native executable following the instructions of the link:building-native-image[this] guide.\n+\n+== Supported Spring Data REST functionalities\n+\n+Quarkus currently supports a subset of Spring Data REST features, namely the most useful and most commonly used features.\n+\n+=== What is supported\n+\n+The following sections described the most important supported features of Spring Data REST.\n+\n+==== Automatic REST endpoint generation\n+\n+Interfaces that extend any of the following Spring Data repositories get automatically generated REST endpoints:\n+\n+* `org.springframework.data.repository.CrudRepository`\n+* `org.springframework.data.repository.PagingAndSortingRepository`\n+* `org.springframework.data.jpa.repository.JpaRepository`\n+\n+Endpoints generated from the above repositories expose five common REST operations:\n+\n+* `GET /fruits` - lists all entities or returns a page if `PagingAndSortingRepository` or `JpaRepository` is used.\n+* `GET /fruits/:id` - returns an entity by ID.\n+* `POST /fruits` - creates a new entity.\n+* `PUT /fruits/:id` - updates an existing entity or creates a new one with a specified ID (if allowed by the entity definition).\n+* `DELETE /fruits/:id` - deletes an entity by ID.\n+\n+There are two supported data types: `application/json` and `application/hal+json`.\n+The former is used by default, but it is highly recommended to specify which one do you prefer with an `Accept` header.\n+\n+==== Exposing many entities\n+\n+If a database contains many entities, it might not be a great idea to return them all at once.\n+`PagingAndSortingRepository` allows `spring-data-rest` extension to access data in chunks.\n+\n+Replace the `CrudRepository` with `PagingAndSortingRepository` in the `FruitsRepository`:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import org.springframework.data.repository.PagingAndSortingRepository;\n+\n+public interface FruitsRepository extends PagingAndSortingRepository<Fruit, Long> {\n+}\n+----\n+\n+Now the `GET /fruits` will accept three new query parameters: `sort`, `page` and `size`.\n+\n+|===\n+| Query parameter | Description | Default value | Example values\n+\n+| `sort`\n+| Sorts the entities that are returned by the list operation\n+| \"\"\n+| `?sort=name` (ascending name), `?sort=name,-color` (ascending name and descending color)\n+\n+| `page`\n+| Zero indexed page number. Invalid value is interpreted as 0.\n+| 0\n+| 0, 11, 100\n+\n+| `size`\n+| Page size. Minimal accepted value is 1. Any lower value is interpreted as 1.\n+| 20\n+| 1, 11, 100\n+|===\n+\n+For paged responses, `spring-data-rest` also returns a set of link headers that can be used to access other pages: first, previous, next and last.\n+\n+==== Fine tuning endpoints generation\n+\n+This allows user to specify which methods should be exposed and what path should be used to access them.\n+Spring Data REST provides two annotations that can be used: `@RepositoryRestResource` and `@RestResource`.\n+`spring-data-rest` extension supports the `exported` and `path` attributes of these annotations.\n+\n+Assume for example that fruits repository should be accessible by a `/my-fruits` path and only allow `GET` operation.\n+In such a case, `FruitsRepository` would look like so:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import java.util.Optional;\n+\n+import org.springframework.data.repository.CrudRepository;\n+import org.springframework.data.rest.core.annotation.RepositoryRestResource;\n+import org.springframework.data.rest.core.annotation.RestResource;\n+\n+@RepositoryRestResource(exported = false, path = \"/my-fruits\")\n+public interface FruitsRepository extends CrudRepository<Fruit, Long> {\n+\n+    @RestResource(exported = true)\n+    Optional<Fruit> findById(Long id);\n+\n+    @RestResource(exported = true)\n+    Iterable<Fruit> findAll();\n+}\n+----\n+\n+`spring-data-rest` uses only a subset of the repository methods for data access.\n+It is important to annotate the correct method in order to customize its REST endpoint:\n+\n+|===\n+|REST operation |CrudRepository |PagingAndSortingRepository and JpaRepository\n+\n+|Get by ID\n+|`Optional<T> findById(ID id)`\n+|`Optional<T> findById(ID id)`\n+\n+|List\n+|`Iterable<T> findAll()`\n+|`Page<T> findAll(Pageable pageable)`\n+\n+|Create\n+|`<S extends T> S save(S entity)`\n+|`<S extends T> S save(S entity)`\n+\n+|Update\n+|`<S extends T> S save(S entity)`\n+|`<S extends T> S save(S entity)`\n+\n+|Delete\n+|`void deleteById(ID id)`\n+|`void deleteById(ID id)`\n+|===\n+\n+=== What is currently unsupported\n+\n+* Only the repository methods listed above are supported. No other standard nor custom methods are supported.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae590b3d105a12b23b83f265bf112f1b492bd15f"}, "originalPosition": 422}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk3NDk0Mg==", "bodyText": "Is there a way to opt out of REST Resource generation?\nShould there be some kind of build time warning if there is a clashing user defined Resource?", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r526974942", "createdAt": "2020-11-19T15:26:08Z", "author": {"login": "geoand"}, "path": "docs/src/main/asciidoc/spring-data-rest.adoc", "diffHunk": "@@ -0,0 +1,441 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Extension for Spring Data REST\n+\n+include::./attributes.adoc[]\n+:extension-status: experimental\n+\n+Whiles users are encouraged to use a REST Data with Panache for the REST data access endpoints generation,\n+Quarkus provides a compatibility layer for Spring Data REST in a form of `spring-data-rest` extension.\n+\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `spring-data-rest-quickstart` {quickstarts-tree-url}/spring-data-rest-quickstart[directory].\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,bash,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-data-rest-quickstart \\\n+    -Dextensions=\"spring-data-rest,resteasy-jackson,quarkus-jdbc-postgresql\"\n+cd spring-data-rest-quickstart\n+----\n+\n+This command generates a Maven project with a `spring-data-rest` extension.\n+\n+If you already have your Quarkus project configured, you can add the `spring-data-rest` extension\n+to your project by running the following command in your project base directory:\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"spring-data-rest\"\n+----\n+\n+This will add the following to your `pom.xml`:\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.quarkus</groupId>\n+    <artifactId>quarkus-spring-data-rest</artifactId>\n+</dependency>\n+----\n+\n+For the tests you will also need a `rest-assured` dependency. Add it to the `pom.xml`:\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.rest-assured</groupId>\n+    <artifactId>rest-assured</artifactId>\n+    <scope>test</scope>\n+</dependency>\n+----\n+\n+Note: both `resteasy-jackson` and `resteasy-jsonb` are supported and can be interchanged.\n+\n+== Define the Entity\n+\n+Throughout the course of this guide, the following JPA Entity will be used:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class Fruit {\n+\n+    @Id\n+    @GeneratedValue\n+    private Long id;\n+\n+    private String name;\n+\n+    private String color;\n+\n+\n+    public Fruit() {\n+    }\n+\n+    public Fruit(String name, String color) {\n+        this.name = name;\n+        this.color = color;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getColor() {\n+        return color;\n+    }\n+\n+    public void setColor(String color) {\n+        this.color = color;\n+    }\n+}\n+----\n+\n+\n+== Configure database access properties\n+\n+Add the following properties to `application.properties` to configure access to a local PostgreSQL instance.\n+\n+[source,properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=quarkus_test\n+quarkus.datasource.password=quarkus_test\n+quarkus.datasource.jdbc.url=jdbc:postgresql:quarkus_test\n+quarkus.datasource.jdbc.max-size=8\n+quarkus.datasource.jdbc.min-size=2\n+quarkus.hibernate-orm.database.generation=drop-and-create\n+----\n+\n+This configuration assumes that PostgreSQL will be running locally.\n+\n+A very easy way to accomplish that is by using the following Docker command:\n+\n+[source,bash]\n+----\n+docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 --name quarkus_test -e POSTGRES_USER=quarkus_test -e POSTGRES_PASSWORD=quarkus_test -e POSTGRES_DB=quarkus_test -p 5432:5432 postgres:11.5\n+----\n+\n+If you plan on using a different setup, please change your `application.properties` accordingly.\n+\n+== Prepare the data\n+\n+To make it easier to showcase some capabilities of Spring Data REST on Quarkus, some test data should be inserted into the database\n+by adding the following content to a new file named `src/main/resources/import.sql`:\n+\n+[source,sql]\n+----\n+INSERT INTO fruit(id, name, color) VALUES (1, 'Cherry', 'Red');\n+INSERT INTO fruit(id, name, color) VALUES (2, 'Apple', 'Red');\n+INSERT INTO fruit(id, name, color) VALUES (3, 'Banana', 'Yellow');\n+INSERT INTO fruit(id, name, color) VALUES (4, 'Avocado', 'Green');\n+INSERT INTO fruit(id, name, color) VALUES (5, 'Strawberry', 'Red');\n+----\n+\n+Hibernate ORM will execute these queries on application startup.\n+\n+== Define the repository\n+\n+It is now time to define the repository that will be used to access `Fruit`.\n+In a typical Spring Data fashion create a repository like so:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import org.springframework.data.repository.CrudRepository;\n+\n+public interface FruitsRepository extends CrudRepository<Fruit, Long> {\n+}\n+----\n+\n+The `FruitsRepository` above extends Spring Data's `org.springframework.data.repository.CrudRepository` which means that all of the latter's methods are\n+available to `FruitsRepository`.\n+\n+`spring-data-jpa` will generate an implementation for this repository. Then `spring-data-rest` will generate a REST CRUD resource for it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae590b3d105a12b23b83f265bf112f1b492bd15f"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk3NjU1NA==", "bodyText": "We'll also need this test added to the GH Actions config", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r526976554", "createdAt": "2020-11-19T15:28:10Z", "author": {"login": "geoand"}, "path": "integration-tests/spring-data-rest/pom.xml", "diffHunk": "@@ -0,0 +1,168 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae590b3d105a12b23b83f265bf112f1b492bd15f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk3OTQ3NQ==", "bodyText": "I'd like to have a comment on this method describing what steps it performs and why they are needed", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r526979475", "createdAt": "2020-11-19T15:31:50Z", "author": {"login": "geoand"}, "path": "extensions/spring-data-rest/deployment/src/main/java/io/quarkus/spring/data/rest/deployment/SpringDataRestProcessor.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package io.quarkus.spring.data.rest.deployment;\n+\n+import static io.quarkus.deployment.Feature.SPRING_DATA_REST;\n+\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.Type;\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.repository.CrudRepository;\n+import org.springframework.data.repository.PagingAndSortingRepository;\n+\n+import io.quarkus.arc.deployment.GeneratedBeanBuildItem;\n+import io.quarkus.arc.deployment.GeneratedBeanGizmoAdaptor;\n+import io.quarkus.arc.deployment.UnremovableBeanBuildItem;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.gizmo.ClassOutput;\n+import io.quarkus.rest.data.panache.deployment.ResourceMetadata;\n+import io.quarkus.rest.data.panache.deployment.RestDataResourceBuildItem;\n+import io.quarkus.rest.data.panache.deployment.properties.ResourcePropertiesBuildItem;\n+import io.quarkus.spring.data.rest.deployment.crud.CrudMethodsImplementor;\n+import io.quarkus.spring.data.rest.deployment.crud.CrudPropertiesProvider;\n+import io.quarkus.spring.data.rest.deployment.paging.PagingAndSortingMethodsImplementor;\n+import io.quarkus.spring.data.rest.deployment.paging.PagingAndSortingPropertiesProvider;\n+\n+class SpringDataRestProcessor {\n+\n+    private static final DotName CRUD_REPOSITORY_INTERFACE = DotName.createSimple(CrudRepository.class.getName());\n+\n+    private static final DotName PAGING_AND_SORTING_REPOSITORY_INTERFACE = DotName\n+            .createSimple(PagingAndSortingRepository.class.getName());\n+\n+    private static final DotName JPA_REPOSITORY_INTERFACE = DotName.createSimple(JpaRepository.class.getName());\n+\n+    private static final List<DotName> EXCLUDED_INTERFACES = Arrays.asList(\n+            CRUD_REPOSITORY_INTERFACE,\n+            PAGING_AND_SORTING_REPOSITORY_INTERFACE,\n+            JPA_REPOSITORY_INTERFACE);\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(SPRING_DATA_REST);\n+    }\n+\n+    @BuildStep\n+    void registerCrudRepositories(CombinedIndexBuildItem indexBuildItem,\n+            BuildProducer<GeneratedBeanBuildItem> implementationsProducer,\n+            BuildProducer<RestDataResourceBuildItem> restDataResourceProducer,\n+            BuildProducer<ResourcePropertiesBuildItem> resourcePropertiesProducer,\n+            BuildProducer<UnremovableBeanBuildItem> unremovableBeansProducer) {\n+        IndexView index = indexBuildItem.getIndex();\n+\n+        implementResources(implementationsProducer, restDataResourceProducer, resourcePropertiesProducer,\n+                unremovableBeansProducer, new CrudMethodsImplementor(index), new CrudPropertiesProvider(index),\n+                getRepositoriesToImplement(index, CRUD_REPOSITORY_INTERFACE));\n+    }\n+\n+    @BuildStep\n+    void registerPagingAndSortingRepositories(CombinedIndexBuildItem indexBuildItem,\n+            BuildProducer<GeneratedBeanBuildItem> implementationsProducer,\n+            BuildProducer<RestDataResourceBuildItem> restDataResourceProducer,\n+            BuildProducer<ResourcePropertiesBuildItem> resourcePropertiesProducer,\n+            BuildProducer<UnremovableBeanBuildItem> unremovableBeansProducer) {\n+        IndexView index = indexBuildItem.getIndex();\n+\n+        implementResources(implementationsProducer, restDataResourceProducer, resourcePropertiesProducer,\n+                unremovableBeansProducer, new PagingAndSortingMethodsImplementor(index),\n+                new PagingAndSortingPropertiesProvider(index),\n+                getRepositoriesToImplement(index, PAGING_AND_SORTING_REPOSITORY_INTERFACE, JPA_REPOSITORY_INTERFACE));\n+    }\n+\n+    private void implementResources(BuildProducer<GeneratedBeanBuildItem> implementationsProducer,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae590b3d105a12b23b83f265bf112f1b492bd15f"}, "originalPosition": 80}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b0f13e1a3919e325adf0bfabb77f2a5109bb5470", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/b0f13e1a3919e325adf0bfabb77f2a5109bb5470", "committedDate": "2020-11-20T08:43:33Z", "message": "s"}, "afterCommit": {"oid": "6b8eed65557cae0b876622cce32f9181ac3f4302", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/6b8eed65557cae0b876622cce32f9181ac3f4302", "committedDate": "2020-11-20T08:48:14Z", "message": "Spring Data REST"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6b8eed65557cae0b876622cce32f9181ac3f4302", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/6b8eed65557cae0b876622cce32f9181ac3f4302", "committedDate": "2020-11-20T08:48:14Z", "message": "Spring Data REST"}, "afterCommit": {"oid": "fe0fc4d17ef7bc18890f38bd7ca604c7a875f062", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/fe0fc4d17ef7bc18890f38bd7ca604c7a875f062", "committedDate": "2020-11-20T09:13:34Z", "message": "Spring Data REST"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MjUzNzE1", "url": "https://github.com/quarkusio/quarkus/pull/13373#pullrequestreview-535253715", "createdAt": "2020-11-20T09:19:37Z", "commit": {"oid": "fe0fc4d17ef7bc18890f38bd7ca604c7a875f062"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fe0fc4d17ef7bc18890f38bd7ca604c7a875f062", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/fe0fc4d17ef7bc18890f38bd7ca604c7a875f062", "committedDate": "2020-11-20T09:13:34Z", "message": "Spring Data REST"}, "afterCommit": {"oid": "889f9d30fe3ec32b3bee32439e0d866d4981e45f", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/889f9d30fe3ec32b3bee32439e0d866d4981e45f", "committedDate": "2020-11-20T13:24:01Z", "message": "Spring Data REST"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MzYzNDgy", "url": "https://github.com/quarkusio/quarkus/pull/13373#pullrequestreview-536363482", "createdAt": "2020-11-23T10:58:17Z", "commit": {"oid": "889f9d30fe3ec32b3bee32439e0d866d4981e45f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDo1ODoxN1rOH4IYaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMToxMDoyNFrOH4IyPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYxOTYyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Whiles users are encouraged to use a REST Data with Panache for the REST data access endpoints generation,\n          \n          \n            \n            While users are encouraged to use REST Data with Panache for the REST data access endpoints generation,", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r528619627", "createdAt": "2020-11-23T10:58:17Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/spring-data-rest.adoc", "diffHunk": "@@ -0,0 +1,441 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Extension for Spring Data REST\n+\n+include::./attributes.adoc[]\n+:extension-status: experimental\n+\n+Whiles users are encouraged to use a REST Data with Panache for the REST data access endpoints generation,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "889f9d30fe3ec32b3bee32439e0d866d4981e45f"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYxOTcyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Quarkus provides a compatibility layer for Spring Data REST in a form of `spring-data-rest` extension.\n          \n          \n            \n            Quarkus provides a compatibility layer for Spring Data REST in the form of the `spring-data-rest` extension.", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r528619723", "createdAt": "2020-11-23T10:58:28Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/spring-data-rest.adoc", "diffHunk": "@@ -0,0 +1,441 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Extension for Spring Data REST\n+\n+include::./attributes.adoc[]\n+:extension-status: experimental\n+\n+Whiles users are encouraged to use a REST Data with Panache for the REST data access endpoints generation,\n+Quarkus provides a compatibility layer for Spring Data REST in a form of `spring-data-rest` extension.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "889f9d30fe3ec32b3bee32439e0d866d4981e45f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYxOTk1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This command generates a Maven project with a `spring-data-rest` extension.\n          \n          \n            \n            This command generates a Maven project with the `spring-data-rest` extension.", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r528619951", "createdAt": "2020-11-23T10:58:54Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/spring-data-rest.adoc", "diffHunk": "@@ -0,0 +1,441 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Extension for Spring Data REST\n+\n+include::./attributes.adoc[]\n+:extension-status: experimental\n+\n+Whiles users are encouraged to use a REST Data with Panache for the REST data access endpoints generation,\n+Quarkus provides a compatibility layer for Spring Data REST in a form of `spring-data-rest` extension.\n+\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `spring-data-rest-quickstart` {quickstarts-tree-url}/spring-data-rest-quickstart[directory].\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,bash,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-data-rest-quickstart \\\n+    -Dextensions=\"spring-data-rest,resteasy-jackson,quarkus-jdbc-postgresql\"\n+cd spring-data-rest-quickstart\n+----\n+\n+This command generates a Maven project with a `spring-data-rest` extension.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "889f9d30fe3ec32b3bee32439e0d866d4981e45f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMDE4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For the tests you will also need a `rest-assured` dependency. Add it to the `pom.xml`:\n          \n          \n            \n            For the tests you will also need REST Assured. Add it to the `pom.xml`:", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r528620188", "createdAt": "2020-11-23T10:59:21Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/spring-data-rest.adoc", "diffHunk": "@@ -0,0 +1,441 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Extension for Spring Data REST\n+\n+include::./attributes.adoc[]\n+:extension-status: experimental\n+\n+Whiles users are encouraged to use a REST Data with Panache for the REST data access endpoints generation,\n+Quarkus provides a compatibility layer for Spring Data REST in a form of `spring-data-rest` extension.\n+\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `spring-data-rest-quickstart` {quickstarts-tree-url}/spring-data-rest-quickstart[directory].\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,bash,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-data-rest-quickstart \\\n+    -Dextensions=\"spring-data-rest,resteasy-jackson,quarkus-jdbc-postgresql\"\n+cd spring-data-rest-quickstart\n+----\n+\n+This command generates a Maven project with a `spring-data-rest` extension.\n+\n+If you already have your Quarkus project configured, you can add the `spring-data-rest` extension\n+to your project by running the following command in your project base directory:\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"spring-data-rest\"\n+----\n+\n+This will add the following to your `pom.xml`:\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.quarkus</groupId>\n+    <artifactId>quarkus-spring-data-rest</artifactId>\n+</dependency>\n+----\n+\n+For the tests you will also need a `rest-assured` dependency. Add it to the `pom.xml`:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "889f9d30fe3ec32b3bee32439e0d866d4981e45f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMDY3Ng==", "bodyText": "I think you should mention the other extensions here too. Especially since you mention Jackson/JSON-B later.", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r528620676", "createdAt": "2020-11-23T11:00:09Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/spring-data-rest.adoc", "diffHunk": "@@ -0,0 +1,441 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Extension for Spring Data REST\n+\n+include::./attributes.adoc[]\n+:extension-status: experimental\n+\n+Whiles users are encouraged to use a REST Data with Panache for the REST data access endpoints generation,\n+Quarkus provides a compatibility layer for Spring Data REST in a form of `spring-data-rest` extension.\n+\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `spring-data-rest-quickstart` {quickstarts-tree-url}/spring-data-rest-quickstart[directory].\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,bash,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-data-rest-quickstart \\\n+    -Dextensions=\"spring-data-rest,resteasy-jackson,quarkus-jdbc-postgresql\"\n+cd spring-data-rest-quickstart\n+----\n+\n+This command generates a Maven project with a `spring-data-rest` extension.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYxOTk1MQ=="}, "originalCommit": {"oid": "889f9d30fe3ec32b3bee32439e0d866d4981e45f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMTIxOQ==", "bodyText": "Just remove this, it will generate a warning if you don't have the initial-size set.", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r528621219", "createdAt": "2020-11-23T11:01:06Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/spring-data-rest.adoc", "diffHunk": "@@ -0,0 +1,441 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Extension for Spring Data REST\n+\n+include::./attributes.adoc[]\n+:extension-status: experimental\n+\n+Whiles users are encouraged to use a REST Data with Panache for the REST data access endpoints generation,\n+Quarkus provides a compatibility layer for Spring Data REST in a form of `spring-data-rest` extension.\n+\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `spring-data-rest-quickstart` {quickstarts-tree-url}/spring-data-rest-quickstart[directory].\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,bash,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-data-rest-quickstart \\\n+    -Dextensions=\"spring-data-rest,resteasy-jackson,quarkus-jdbc-postgresql\"\n+cd spring-data-rest-quickstart\n+----\n+\n+This command generates a Maven project with a `spring-data-rest` extension.\n+\n+If you already have your Quarkus project configured, you can add the `spring-data-rest` extension\n+to your project by running the following command in your project base directory:\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"spring-data-rest\"\n+----\n+\n+This will add the following to your `pom.xml`:\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.quarkus</groupId>\n+    <artifactId>quarkus-spring-data-rest</artifactId>\n+</dependency>\n+----\n+\n+For the tests you will also need a `rest-assured` dependency. Add it to the `pom.xml`:\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.rest-assured</groupId>\n+    <artifactId>rest-assured</artifactId>\n+    <scope>test</scope>\n+</dependency>\n+----\n+\n+Note: both `resteasy-jackson` and `resteasy-jsonb` are supported and can be interchanged.\n+\n+== Define the Entity\n+\n+Throughout the course of this guide, the following JPA Entity will be used:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class Fruit {\n+\n+    @Id\n+    @GeneratedValue\n+    private Long id;\n+\n+    private String name;\n+\n+    private String color;\n+\n+\n+    public Fruit() {\n+    }\n+\n+    public Fruit(String name, String color) {\n+        this.name = name;\n+        this.color = color;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getColor() {\n+        return color;\n+    }\n+\n+    public void setColor(String color) {\n+        this.color = color;\n+    }\n+}\n+----\n+\n+\n+== Configure database access properties\n+\n+Add the following properties to `application.properties` to configure access to a local PostgreSQL instance.\n+\n+[source,properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=quarkus_test\n+quarkus.datasource.password=quarkus_test\n+quarkus.datasource.jdbc.url=jdbc:postgresql:quarkus_test\n+quarkus.datasource.jdbc.max-size=8\n+quarkus.datasource.jdbc.min-size=2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "889f9d30fe3ec32b3bee32439e0d866d4981e45f"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMTYyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In a typical Spring Data fashion create a repository like so:\n          \n          \n            \n            In a typical Spring Data fashion, create a repository like so:", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r528621626", "createdAt": "2020-11-23T11:01:51Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/spring-data-rest.adoc", "diffHunk": "@@ -0,0 +1,441 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Extension for Spring Data REST\n+\n+include::./attributes.adoc[]\n+:extension-status: experimental\n+\n+Whiles users are encouraged to use a REST Data with Panache for the REST data access endpoints generation,\n+Quarkus provides a compatibility layer for Spring Data REST in a form of `spring-data-rest` extension.\n+\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `spring-data-rest-quickstart` {quickstarts-tree-url}/spring-data-rest-quickstart[directory].\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,bash,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-data-rest-quickstart \\\n+    -Dextensions=\"spring-data-rest,resteasy-jackson,quarkus-jdbc-postgresql\"\n+cd spring-data-rest-quickstart\n+----\n+\n+This command generates a Maven project with a `spring-data-rest` extension.\n+\n+If you already have your Quarkus project configured, you can add the `spring-data-rest` extension\n+to your project by running the following command in your project base directory:\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"spring-data-rest\"\n+----\n+\n+This will add the following to your `pom.xml`:\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.quarkus</groupId>\n+    <artifactId>quarkus-spring-data-rest</artifactId>\n+</dependency>\n+----\n+\n+For the tests you will also need a `rest-assured` dependency. Add it to the `pom.xml`:\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.rest-assured</groupId>\n+    <artifactId>rest-assured</artifactId>\n+    <scope>test</scope>\n+</dependency>\n+----\n+\n+Note: both `resteasy-jackson` and `resteasy-jsonb` are supported and can be interchanged.\n+\n+== Define the Entity\n+\n+Throughout the course of this guide, the following JPA Entity will be used:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class Fruit {\n+\n+    @Id\n+    @GeneratedValue\n+    private Long id;\n+\n+    private String name;\n+\n+    private String color;\n+\n+\n+    public Fruit() {\n+    }\n+\n+    public Fruit(String name, String color) {\n+        this.name = name;\n+        this.color = color;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getColor() {\n+        return color;\n+    }\n+\n+    public void setColor(String color) {\n+        this.color = color;\n+    }\n+}\n+----\n+\n+\n+== Configure database access properties\n+\n+Add the following properties to `application.properties` to configure access to a local PostgreSQL instance.\n+\n+[source,properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=quarkus_test\n+quarkus.datasource.password=quarkus_test\n+quarkus.datasource.jdbc.url=jdbc:postgresql:quarkus_test\n+quarkus.datasource.jdbc.max-size=8\n+quarkus.datasource.jdbc.min-size=2\n+quarkus.hibernate-orm.database.generation=drop-and-create\n+----\n+\n+This configuration assumes that PostgreSQL will be running locally.\n+\n+A very easy way to accomplish that is by using the following Docker command:\n+\n+[source,bash]\n+----\n+docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 --name quarkus_test -e POSTGRES_USER=quarkus_test -e POSTGRES_PASSWORD=quarkus_test -e POSTGRES_DB=quarkus_test -p 5432:5432 postgres:11.5\n+----\n+\n+If you plan on using a different setup, please change your `application.properties` accordingly.\n+\n+== Prepare the data\n+\n+To make it easier to showcase some capabilities of Spring Data REST on Quarkus, some test data should be inserted into the database\n+by adding the following content to a new file named `src/main/resources/import.sql`:\n+\n+[source,sql]\n+----\n+INSERT INTO fruit(id, name, color) VALUES (1, 'Cherry', 'Red');\n+INSERT INTO fruit(id, name, color) VALUES (2, 'Apple', 'Red');\n+INSERT INTO fruit(id, name, color) VALUES (3, 'Banana', 'Yellow');\n+INSERT INTO fruit(id, name, color) VALUES (4, 'Avocado', 'Green');\n+INSERT INTO fruit(id, name, color) VALUES (5, 'Strawberry', 'Red');\n+----\n+\n+Hibernate ORM will execute these queries on application startup.\n+\n+== Define the repository\n+\n+It is now time to define the repository that will be used to access `Fruit`.\n+In a typical Spring Data fashion create a repository like so:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "889f9d30fe3ec32b3bee32439e0d866d4981e45f"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMjA0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `spring-data-jpa` will generate an implementation for this repository. Then `spring-data-rest` will generate a REST CRUD resource for it.\n          \n          \n            \n            The `spring-data-jpa` extension will generate an implementation for this repository. Then the `spring-data-rest` extension will generate a REST CRUD resource for it.", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r528622049", "createdAt": "2020-11-23T11:02:33Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/spring-data-rest.adoc", "diffHunk": "@@ -0,0 +1,441 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Extension for Spring Data REST\n+\n+include::./attributes.adoc[]\n+:extension-status: experimental\n+\n+Whiles users are encouraged to use a REST Data with Panache for the REST data access endpoints generation,\n+Quarkus provides a compatibility layer for Spring Data REST in a form of `spring-data-rest` extension.\n+\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `spring-data-rest-quickstart` {quickstarts-tree-url}/spring-data-rest-quickstart[directory].\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,bash,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-data-rest-quickstart \\\n+    -Dextensions=\"spring-data-rest,resteasy-jackson,quarkus-jdbc-postgresql\"\n+cd spring-data-rest-quickstart\n+----\n+\n+This command generates a Maven project with a `spring-data-rest` extension.\n+\n+If you already have your Quarkus project configured, you can add the `spring-data-rest` extension\n+to your project by running the following command in your project base directory:\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"spring-data-rest\"\n+----\n+\n+This will add the following to your `pom.xml`:\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.quarkus</groupId>\n+    <artifactId>quarkus-spring-data-rest</artifactId>\n+</dependency>\n+----\n+\n+For the tests you will also need a `rest-assured` dependency. Add it to the `pom.xml`:\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.rest-assured</groupId>\n+    <artifactId>rest-assured</artifactId>\n+    <scope>test</scope>\n+</dependency>\n+----\n+\n+Note: both `resteasy-jackson` and `resteasy-jsonb` are supported and can be interchanged.\n+\n+== Define the Entity\n+\n+Throughout the course of this guide, the following JPA Entity will be used:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class Fruit {\n+\n+    @Id\n+    @GeneratedValue\n+    private Long id;\n+\n+    private String name;\n+\n+    private String color;\n+\n+\n+    public Fruit() {\n+    }\n+\n+    public Fruit(String name, String color) {\n+        this.name = name;\n+        this.color = color;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getColor() {\n+        return color;\n+    }\n+\n+    public void setColor(String color) {\n+        this.color = color;\n+    }\n+}\n+----\n+\n+\n+== Configure database access properties\n+\n+Add the following properties to `application.properties` to configure access to a local PostgreSQL instance.\n+\n+[source,properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=quarkus_test\n+quarkus.datasource.password=quarkus_test\n+quarkus.datasource.jdbc.url=jdbc:postgresql:quarkus_test\n+quarkus.datasource.jdbc.max-size=8\n+quarkus.datasource.jdbc.min-size=2\n+quarkus.hibernate-orm.database.generation=drop-and-create\n+----\n+\n+This configuration assumes that PostgreSQL will be running locally.\n+\n+A very easy way to accomplish that is by using the following Docker command:\n+\n+[source,bash]\n+----\n+docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 --name quarkus_test -e POSTGRES_USER=quarkus_test -e POSTGRES_PASSWORD=quarkus_test -e POSTGRES_DB=quarkus_test -p 5432:5432 postgres:11.5\n+----\n+\n+If you plan on using a different setup, please change your `application.properties` accordingly.\n+\n+== Prepare the data\n+\n+To make it easier to showcase some capabilities of Spring Data REST on Quarkus, some test data should be inserted into the database\n+by adding the following content to a new file named `src/main/resources/import.sql`:\n+\n+[source,sql]\n+----\n+INSERT INTO fruit(id, name, color) VALUES (1, 'Cherry', 'Red');\n+INSERT INTO fruit(id, name, color) VALUES (2, 'Apple', 'Red');\n+INSERT INTO fruit(id, name, color) VALUES (3, 'Banana', 'Yellow');\n+INSERT INTO fruit(id, name, color) VALUES (4, 'Avocado', 'Green');\n+INSERT INTO fruit(id, name, color) VALUES (5, 'Strawberry', 'Red');\n+----\n+\n+Hibernate ORM will execute these queries on application startup.\n+\n+== Define the repository\n+\n+It is now time to define the repository that will be used to access `Fruit`.\n+In a typical Spring Data fashion create a repository like so:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import org.springframework.data.repository.CrudRepository;\n+\n+public interface FruitsRepository extends CrudRepository<Fruit, Long> {\n+}\n+----\n+\n+The `FruitsRepository` above extends Spring Data's `org.springframework.data.repository.CrudRepository` which means that all of the latter's methods are\n+available to `FruitsRepository`.\n+\n+`spring-data-jpa` will generate an implementation for this repository. Then `spring-data-rest` will generate a REST CRUD resource for it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "889f9d30fe3ec32b3bee32439e0d866d4981e45f"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMjE3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The test can be easily run by issuing: `./mvnw test`\n          \n          \n            \n            The test can be easily run by issuing: `./mvnw test`.", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r528622178", "createdAt": "2020-11-23T11:02:50Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/spring-data-rest.adoc", "diffHunk": "@@ -0,0 +1,441 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Extension for Spring Data REST\n+\n+include::./attributes.adoc[]\n+:extension-status: experimental\n+\n+Whiles users are encouraged to use a REST Data with Panache for the REST data access endpoints generation,\n+Quarkus provides a compatibility layer for Spring Data REST in a form of `spring-data-rest` extension.\n+\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `spring-data-rest-quickstart` {quickstarts-tree-url}/spring-data-rest-quickstart[directory].\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,bash,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-data-rest-quickstart \\\n+    -Dextensions=\"spring-data-rest,resteasy-jackson,quarkus-jdbc-postgresql\"\n+cd spring-data-rest-quickstart\n+----\n+\n+This command generates a Maven project with a `spring-data-rest` extension.\n+\n+If you already have your Quarkus project configured, you can add the `spring-data-rest` extension\n+to your project by running the following command in your project base directory:\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"spring-data-rest\"\n+----\n+\n+This will add the following to your `pom.xml`:\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.quarkus</groupId>\n+    <artifactId>quarkus-spring-data-rest</artifactId>\n+</dependency>\n+----\n+\n+For the tests you will also need a `rest-assured` dependency. Add it to the `pom.xml`:\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.rest-assured</groupId>\n+    <artifactId>rest-assured</artifactId>\n+    <scope>test</scope>\n+</dependency>\n+----\n+\n+Note: both `resteasy-jackson` and `resteasy-jsonb` are supported and can be interchanged.\n+\n+== Define the Entity\n+\n+Throughout the course of this guide, the following JPA Entity will be used:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class Fruit {\n+\n+    @Id\n+    @GeneratedValue\n+    private Long id;\n+\n+    private String name;\n+\n+    private String color;\n+\n+\n+    public Fruit() {\n+    }\n+\n+    public Fruit(String name, String color) {\n+        this.name = name;\n+        this.color = color;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getColor() {\n+        return color;\n+    }\n+\n+    public void setColor(String color) {\n+        this.color = color;\n+    }\n+}\n+----\n+\n+\n+== Configure database access properties\n+\n+Add the following properties to `application.properties` to configure access to a local PostgreSQL instance.\n+\n+[source,properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=quarkus_test\n+quarkus.datasource.password=quarkus_test\n+quarkus.datasource.jdbc.url=jdbc:postgresql:quarkus_test\n+quarkus.datasource.jdbc.max-size=8\n+quarkus.datasource.jdbc.min-size=2\n+quarkus.hibernate-orm.database.generation=drop-and-create\n+----\n+\n+This configuration assumes that PostgreSQL will be running locally.\n+\n+A very easy way to accomplish that is by using the following Docker command:\n+\n+[source,bash]\n+----\n+docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 --name quarkus_test -e POSTGRES_USER=quarkus_test -e POSTGRES_PASSWORD=quarkus_test -e POSTGRES_DB=quarkus_test -p 5432:5432 postgres:11.5\n+----\n+\n+If you plan on using a different setup, please change your `application.properties` accordingly.\n+\n+== Prepare the data\n+\n+To make it easier to showcase some capabilities of Spring Data REST on Quarkus, some test data should be inserted into the database\n+by adding the following content to a new file named `src/main/resources/import.sql`:\n+\n+[source,sql]\n+----\n+INSERT INTO fruit(id, name, color) VALUES (1, 'Cherry', 'Red');\n+INSERT INTO fruit(id, name, color) VALUES (2, 'Apple', 'Red');\n+INSERT INTO fruit(id, name, color) VALUES (3, 'Banana', 'Yellow');\n+INSERT INTO fruit(id, name, color) VALUES (4, 'Avocado', 'Green');\n+INSERT INTO fruit(id, name, color) VALUES (5, 'Strawberry', 'Red');\n+----\n+\n+Hibernate ORM will execute these queries on application startup.\n+\n+== Define the repository\n+\n+It is now time to define the repository that will be used to access `Fruit`.\n+In a typical Spring Data fashion create a repository like so:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import org.springframework.data.repository.CrudRepository;\n+\n+public interface FruitsRepository extends CrudRepository<Fruit, Long> {\n+}\n+----\n+\n+The `FruitsRepository` above extends Spring Data's `org.springframework.data.repository.CrudRepository` which means that all of the latter's methods are\n+available to `FruitsRepository`.\n+\n+`spring-data-jpa` will generate an implementation for this repository. Then `spring-data-rest` will generate a REST CRUD resource for it.\n+\n+== Update the test\n+\n+To test the capabilities of `FruitsRepository` proceed to update the content of `FruitsRepositoryTest` to:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.core.IsNot.not;\n+\n+@QuarkusTest\n+class FruitsRepositoryTest {\n+\n+    @Test\n+    void testListAllFruits() {\n+        //List all, should have all 3 fruits the database has initially:\n+        given()\n+                .accept(\"application/json\")\n+                .when().get(\"/fruits\")\n+                .then()\n+                .statusCode(200)\n+                .body(\n+                        containsString(\"Cherry\"),\n+                        containsString(\"Apple\"),\n+                        containsString(\"Banana\")\n+                );\n+\n+        //Delete the Cherry:\n+        given()\n+                .when().delete(\"/fruits/1\")\n+                .then()\n+                .statusCode(204);\n+\n+        //List all, cherry should be missing now:\n+        given()\n+                .accept(\"application/json\")\n+                .when().get(\"/fruits\")\n+                .then()\n+                .statusCode(200)\n+                .body(\n+                        not(containsString(\"Cherry\")),\n+                        containsString(\"Apple\"),\n+                        containsString(\"Banana\")\n+                );\n+\n+        //Create a new Fruit\n+        given()\n+                .contentType(\"application/json\")\n+                .accept(\"application/json\")\n+                .body(\"{\\\"name\\\": \\\"Orange\\\", \\\"color\\\": \\\"Orange\\\"}\")\n+                .when().post(\"/fruits\")\n+                .then()\n+                .statusCode(201)\n+                .body(containsString(\"Orange\"))\n+                .body(\"id\", notNullValue())\n+                .extract().body().jsonPath().getString(\"id\");\n+\n+        //List all, Orange should be present now:\n+        given()\n+                .accept(\"application/json\")\n+                .when().get(\"/fruits\")\n+                .then()\n+                .statusCode(200)\n+                .body(\n+                        not(containsString(\"Cherry\")),\n+                        containsString(\"Apple\"),\n+                        containsString(\"Orange\")\n+                );\n+    }\n+}\n+\n+----\n+\n+The test can be easily run by issuing: `./mvnw test`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "889f9d30fe3ec32b3bee32439e0d866d4981e45f"}, "originalPosition": 280}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMjMzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ./mvnw compile quarkus:dev\n          \n          \n            \n            ./mvnw quarkus:dev", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r528622339", "createdAt": "2020-11-23T11:03:07Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/spring-data-rest.adoc", "diffHunk": "@@ -0,0 +1,441 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Extension for Spring Data REST\n+\n+include::./attributes.adoc[]\n+:extension-status: experimental\n+\n+Whiles users are encouraged to use a REST Data with Panache for the REST data access endpoints generation,\n+Quarkus provides a compatibility layer for Spring Data REST in a form of `spring-data-rest` extension.\n+\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `spring-data-rest-quickstart` {quickstarts-tree-url}/spring-data-rest-quickstart[directory].\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,bash,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-data-rest-quickstart \\\n+    -Dextensions=\"spring-data-rest,resteasy-jackson,quarkus-jdbc-postgresql\"\n+cd spring-data-rest-quickstart\n+----\n+\n+This command generates a Maven project with a `spring-data-rest` extension.\n+\n+If you already have your Quarkus project configured, you can add the `spring-data-rest` extension\n+to your project by running the following command in your project base directory:\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"spring-data-rest\"\n+----\n+\n+This will add the following to your `pom.xml`:\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.quarkus</groupId>\n+    <artifactId>quarkus-spring-data-rest</artifactId>\n+</dependency>\n+----\n+\n+For the tests you will also need a `rest-assured` dependency. Add it to the `pom.xml`:\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.rest-assured</groupId>\n+    <artifactId>rest-assured</artifactId>\n+    <scope>test</scope>\n+</dependency>\n+----\n+\n+Note: both `resteasy-jackson` and `resteasy-jsonb` are supported and can be interchanged.\n+\n+== Define the Entity\n+\n+Throughout the course of this guide, the following JPA Entity will be used:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class Fruit {\n+\n+    @Id\n+    @GeneratedValue\n+    private Long id;\n+\n+    private String name;\n+\n+    private String color;\n+\n+\n+    public Fruit() {\n+    }\n+\n+    public Fruit(String name, String color) {\n+        this.name = name;\n+        this.color = color;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getColor() {\n+        return color;\n+    }\n+\n+    public void setColor(String color) {\n+        this.color = color;\n+    }\n+}\n+----\n+\n+\n+== Configure database access properties\n+\n+Add the following properties to `application.properties` to configure access to a local PostgreSQL instance.\n+\n+[source,properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=quarkus_test\n+quarkus.datasource.password=quarkus_test\n+quarkus.datasource.jdbc.url=jdbc:postgresql:quarkus_test\n+quarkus.datasource.jdbc.max-size=8\n+quarkus.datasource.jdbc.min-size=2\n+quarkus.hibernate-orm.database.generation=drop-and-create\n+----\n+\n+This configuration assumes that PostgreSQL will be running locally.\n+\n+A very easy way to accomplish that is by using the following Docker command:\n+\n+[source,bash]\n+----\n+docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 --name quarkus_test -e POSTGRES_USER=quarkus_test -e POSTGRES_PASSWORD=quarkus_test -e POSTGRES_DB=quarkus_test -p 5432:5432 postgres:11.5\n+----\n+\n+If you plan on using a different setup, please change your `application.properties` accordingly.\n+\n+== Prepare the data\n+\n+To make it easier to showcase some capabilities of Spring Data REST on Quarkus, some test data should be inserted into the database\n+by adding the following content to a new file named `src/main/resources/import.sql`:\n+\n+[source,sql]\n+----\n+INSERT INTO fruit(id, name, color) VALUES (1, 'Cherry', 'Red');\n+INSERT INTO fruit(id, name, color) VALUES (2, 'Apple', 'Red');\n+INSERT INTO fruit(id, name, color) VALUES (3, 'Banana', 'Yellow');\n+INSERT INTO fruit(id, name, color) VALUES (4, 'Avocado', 'Green');\n+INSERT INTO fruit(id, name, color) VALUES (5, 'Strawberry', 'Red');\n+----\n+\n+Hibernate ORM will execute these queries on application startup.\n+\n+== Define the repository\n+\n+It is now time to define the repository that will be used to access `Fruit`.\n+In a typical Spring Data fashion create a repository like so:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import org.springframework.data.repository.CrudRepository;\n+\n+public interface FruitsRepository extends CrudRepository<Fruit, Long> {\n+}\n+----\n+\n+The `FruitsRepository` above extends Spring Data's `org.springframework.data.repository.CrudRepository` which means that all of the latter's methods are\n+available to `FruitsRepository`.\n+\n+`spring-data-jpa` will generate an implementation for this repository. Then `spring-data-rest` will generate a REST CRUD resource for it.\n+\n+== Update the test\n+\n+To test the capabilities of `FruitsRepository` proceed to update the content of `FruitsRepositoryTest` to:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.core.IsNot.not;\n+\n+@QuarkusTest\n+class FruitsRepositoryTest {\n+\n+    @Test\n+    void testListAllFruits() {\n+        //List all, should have all 3 fruits the database has initially:\n+        given()\n+                .accept(\"application/json\")\n+                .when().get(\"/fruits\")\n+                .then()\n+                .statusCode(200)\n+                .body(\n+                        containsString(\"Cherry\"),\n+                        containsString(\"Apple\"),\n+                        containsString(\"Banana\")\n+                );\n+\n+        //Delete the Cherry:\n+        given()\n+                .when().delete(\"/fruits/1\")\n+                .then()\n+                .statusCode(204);\n+\n+        //List all, cherry should be missing now:\n+        given()\n+                .accept(\"application/json\")\n+                .when().get(\"/fruits\")\n+                .then()\n+                .statusCode(200)\n+                .body(\n+                        not(containsString(\"Cherry\")),\n+                        containsString(\"Apple\"),\n+                        containsString(\"Banana\")\n+                );\n+\n+        //Create a new Fruit\n+        given()\n+                .contentType(\"application/json\")\n+                .accept(\"application/json\")\n+                .body(\"{\\\"name\\\": \\\"Orange\\\", \\\"color\\\": \\\"Orange\\\"}\")\n+                .when().post(\"/fruits\")\n+                .then()\n+                .statusCode(201)\n+                .body(containsString(\"Orange\"))\n+                .body(\"id\", notNullValue())\n+                .extract().body().jsonPath().getString(\"id\");\n+\n+        //List all, Orange should be present now:\n+        given()\n+                .accept(\"application/json\")\n+                .when().get(\"/fruits\")\n+                .then()\n+                .statusCode(200)\n+                .body(\n+                        not(containsString(\"Cherry\")),\n+                        containsString(\"Apple\"),\n+                        containsString(\"Orange\")\n+                );\n+    }\n+}\n+\n+----\n+\n+The test can be easily run by issuing: `./mvnw test`\n+\n+== Package and run the application\n+\n+Quarkus dev mode works with the defined repositories just like with any other Quarkus extension, greatly enhancing your productivity during the dev cycle.\n+The application can be started in dev mode as usual using:\n+\n+[source, bash]\n+----\n+./mvnw compile quarkus:dev", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "889f9d30fe3ec32b3bee32439e0d866d4981e45f"}, "originalPosition": 289}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMjc0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can of course create a native executable following the instructions of the link:building-native-image[this] guide.\n          \n          \n            \n            You can of course create a native executable following the instructions of the link:building-native-image[Building native executables] guide.", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r528622748", "createdAt": "2020-11-23T11:03:58Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/spring-data-rest.adoc", "diffHunk": "@@ -0,0 +1,441 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Extension for Spring Data REST\n+\n+include::./attributes.adoc[]\n+:extension-status: experimental\n+\n+Whiles users are encouraged to use a REST Data with Panache for the REST data access endpoints generation,\n+Quarkus provides a compatibility layer for Spring Data REST in a form of `spring-data-rest` extension.\n+\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `spring-data-rest-quickstart` {quickstarts-tree-url}/spring-data-rest-quickstart[directory].\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,bash,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-data-rest-quickstart \\\n+    -Dextensions=\"spring-data-rest,resteasy-jackson,quarkus-jdbc-postgresql\"\n+cd spring-data-rest-quickstart\n+----\n+\n+This command generates a Maven project with a `spring-data-rest` extension.\n+\n+If you already have your Quarkus project configured, you can add the `spring-data-rest` extension\n+to your project by running the following command in your project base directory:\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"spring-data-rest\"\n+----\n+\n+This will add the following to your `pom.xml`:\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.quarkus</groupId>\n+    <artifactId>quarkus-spring-data-rest</artifactId>\n+</dependency>\n+----\n+\n+For the tests you will also need a `rest-assured` dependency. Add it to the `pom.xml`:\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.rest-assured</groupId>\n+    <artifactId>rest-assured</artifactId>\n+    <scope>test</scope>\n+</dependency>\n+----\n+\n+Note: both `resteasy-jackson` and `resteasy-jsonb` are supported and can be interchanged.\n+\n+== Define the Entity\n+\n+Throughout the course of this guide, the following JPA Entity will be used:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class Fruit {\n+\n+    @Id\n+    @GeneratedValue\n+    private Long id;\n+\n+    private String name;\n+\n+    private String color;\n+\n+\n+    public Fruit() {\n+    }\n+\n+    public Fruit(String name, String color) {\n+        this.name = name;\n+        this.color = color;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getColor() {\n+        return color;\n+    }\n+\n+    public void setColor(String color) {\n+        this.color = color;\n+    }\n+}\n+----\n+\n+\n+== Configure database access properties\n+\n+Add the following properties to `application.properties` to configure access to a local PostgreSQL instance.\n+\n+[source,properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=quarkus_test\n+quarkus.datasource.password=quarkus_test\n+quarkus.datasource.jdbc.url=jdbc:postgresql:quarkus_test\n+quarkus.datasource.jdbc.max-size=8\n+quarkus.datasource.jdbc.min-size=2\n+quarkus.hibernate-orm.database.generation=drop-and-create\n+----\n+\n+This configuration assumes that PostgreSQL will be running locally.\n+\n+A very easy way to accomplish that is by using the following Docker command:\n+\n+[source,bash]\n+----\n+docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 --name quarkus_test -e POSTGRES_USER=quarkus_test -e POSTGRES_PASSWORD=quarkus_test -e POSTGRES_DB=quarkus_test -p 5432:5432 postgres:11.5\n+----\n+\n+If you plan on using a different setup, please change your `application.properties` accordingly.\n+\n+== Prepare the data\n+\n+To make it easier to showcase some capabilities of Spring Data REST on Quarkus, some test data should be inserted into the database\n+by adding the following content to a new file named `src/main/resources/import.sql`:\n+\n+[source,sql]\n+----\n+INSERT INTO fruit(id, name, color) VALUES (1, 'Cherry', 'Red');\n+INSERT INTO fruit(id, name, color) VALUES (2, 'Apple', 'Red');\n+INSERT INTO fruit(id, name, color) VALUES (3, 'Banana', 'Yellow');\n+INSERT INTO fruit(id, name, color) VALUES (4, 'Avocado', 'Green');\n+INSERT INTO fruit(id, name, color) VALUES (5, 'Strawberry', 'Red');\n+----\n+\n+Hibernate ORM will execute these queries on application startup.\n+\n+== Define the repository\n+\n+It is now time to define the repository that will be used to access `Fruit`.\n+In a typical Spring Data fashion create a repository like so:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import org.springframework.data.repository.CrudRepository;\n+\n+public interface FruitsRepository extends CrudRepository<Fruit, Long> {\n+}\n+----\n+\n+The `FruitsRepository` above extends Spring Data's `org.springframework.data.repository.CrudRepository` which means that all of the latter's methods are\n+available to `FruitsRepository`.\n+\n+`spring-data-jpa` will generate an implementation for this repository. Then `spring-data-rest` will generate a REST CRUD resource for it.\n+\n+== Update the test\n+\n+To test the capabilities of `FruitsRepository` proceed to update the content of `FruitsRepositoryTest` to:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.core.IsNot.not;\n+\n+@QuarkusTest\n+class FruitsRepositoryTest {\n+\n+    @Test\n+    void testListAllFruits() {\n+        //List all, should have all 3 fruits the database has initially:\n+        given()\n+                .accept(\"application/json\")\n+                .when().get(\"/fruits\")\n+                .then()\n+                .statusCode(200)\n+                .body(\n+                        containsString(\"Cherry\"),\n+                        containsString(\"Apple\"),\n+                        containsString(\"Banana\")\n+                );\n+\n+        //Delete the Cherry:\n+        given()\n+                .when().delete(\"/fruits/1\")\n+                .then()\n+                .statusCode(204);\n+\n+        //List all, cherry should be missing now:\n+        given()\n+                .accept(\"application/json\")\n+                .when().get(\"/fruits\")\n+                .then()\n+                .statusCode(200)\n+                .body(\n+                        not(containsString(\"Cherry\")),\n+                        containsString(\"Apple\"),\n+                        containsString(\"Banana\")\n+                );\n+\n+        //Create a new Fruit\n+        given()\n+                .contentType(\"application/json\")\n+                .accept(\"application/json\")\n+                .body(\"{\\\"name\\\": \\\"Orange\\\", \\\"color\\\": \\\"Orange\\\"}\")\n+                .when().post(\"/fruits\")\n+                .then()\n+                .statusCode(201)\n+                .body(containsString(\"Orange\"))\n+                .body(\"id\", notNullValue())\n+                .extract().body().jsonPath().getString(\"id\");\n+\n+        //List all, Orange should be present now:\n+        given()\n+                .accept(\"application/json\")\n+                .when().get(\"/fruits\")\n+                .then()\n+                .statusCode(200)\n+                .body(\n+                        not(containsString(\"Cherry\")),\n+                        containsString(\"Apple\"),\n+                        containsString(\"Orange\")\n+                );\n+    }\n+}\n+\n+----\n+\n+The test can be easily run by issuing: `./mvnw test`\n+\n+== Package and run the application\n+\n+Quarkus dev mode works with the defined repositories just like with any other Quarkus extension, greatly enhancing your productivity during the dev cycle.\n+The application can be started in dev mode as usual using:\n+\n+[source, bash]\n+----\n+./mvnw compile quarkus:dev\n+----\n+\n+== Run the application as a native binary\n+\n+You can of course create a native executable following the instructions of the link:building-native-image[this] guide.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "889f9d30fe3ec32b3bee32439e0d866d4981e45f"}, "originalPosition": 294}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMjk2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The following sections described the most important supported features of Spring Data REST.\n          \n          \n            \n            The following sections describe the most important supported features of Spring Data REST.", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r528622963", "createdAt": "2020-11-23T11:04:20Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/spring-data-rest.adoc", "diffHunk": "@@ -0,0 +1,441 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Extension for Spring Data REST\n+\n+include::./attributes.adoc[]\n+:extension-status: experimental\n+\n+Whiles users are encouraged to use a REST Data with Panache for the REST data access endpoints generation,\n+Quarkus provides a compatibility layer for Spring Data REST in a form of `spring-data-rest` extension.\n+\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `spring-data-rest-quickstart` {quickstarts-tree-url}/spring-data-rest-quickstart[directory].\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,bash,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-data-rest-quickstart \\\n+    -Dextensions=\"spring-data-rest,resteasy-jackson,quarkus-jdbc-postgresql\"\n+cd spring-data-rest-quickstart\n+----\n+\n+This command generates a Maven project with a `spring-data-rest` extension.\n+\n+If you already have your Quarkus project configured, you can add the `spring-data-rest` extension\n+to your project by running the following command in your project base directory:\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"spring-data-rest\"\n+----\n+\n+This will add the following to your `pom.xml`:\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.quarkus</groupId>\n+    <artifactId>quarkus-spring-data-rest</artifactId>\n+</dependency>\n+----\n+\n+For the tests you will also need a `rest-assured` dependency. Add it to the `pom.xml`:\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.rest-assured</groupId>\n+    <artifactId>rest-assured</artifactId>\n+    <scope>test</scope>\n+</dependency>\n+----\n+\n+Note: both `resteasy-jackson` and `resteasy-jsonb` are supported and can be interchanged.\n+\n+== Define the Entity\n+\n+Throughout the course of this guide, the following JPA Entity will be used:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class Fruit {\n+\n+    @Id\n+    @GeneratedValue\n+    private Long id;\n+\n+    private String name;\n+\n+    private String color;\n+\n+\n+    public Fruit() {\n+    }\n+\n+    public Fruit(String name, String color) {\n+        this.name = name;\n+        this.color = color;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getColor() {\n+        return color;\n+    }\n+\n+    public void setColor(String color) {\n+        this.color = color;\n+    }\n+}\n+----\n+\n+\n+== Configure database access properties\n+\n+Add the following properties to `application.properties` to configure access to a local PostgreSQL instance.\n+\n+[source,properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=quarkus_test\n+quarkus.datasource.password=quarkus_test\n+quarkus.datasource.jdbc.url=jdbc:postgresql:quarkus_test\n+quarkus.datasource.jdbc.max-size=8\n+quarkus.datasource.jdbc.min-size=2\n+quarkus.hibernate-orm.database.generation=drop-and-create\n+----\n+\n+This configuration assumes that PostgreSQL will be running locally.\n+\n+A very easy way to accomplish that is by using the following Docker command:\n+\n+[source,bash]\n+----\n+docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 --name quarkus_test -e POSTGRES_USER=quarkus_test -e POSTGRES_PASSWORD=quarkus_test -e POSTGRES_DB=quarkus_test -p 5432:5432 postgres:11.5\n+----\n+\n+If you plan on using a different setup, please change your `application.properties` accordingly.\n+\n+== Prepare the data\n+\n+To make it easier to showcase some capabilities of Spring Data REST on Quarkus, some test data should be inserted into the database\n+by adding the following content to a new file named `src/main/resources/import.sql`:\n+\n+[source,sql]\n+----\n+INSERT INTO fruit(id, name, color) VALUES (1, 'Cherry', 'Red');\n+INSERT INTO fruit(id, name, color) VALUES (2, 'Apple', 'Red');\n+INSERT INTO fruit(id, name, color) VALUES (3, 'Banana', 'Yellow');\n+INSERT INTO fruit(id, name, color) VALUES (4, 'Avocado', 'Green');\n+INSERT INTO fruit(id, name, color) VALUES (5, 'Strawberry', 'Red');\n+----\n+\n+Hibernate ORM will execute these queries on application startup.\n+\n+== Define the repository\n+\n+It is now time to define the repository that will be used to access `Fruit`.\n+In a typical Spring Data fashion create a repository like so:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import org.springframework.data.repository.CrudRepository;\n+\n+public interface FruitsRepository extends CrudRepository<Fruit, Long> {\n+}\n+----\n+\n+The `FruitsRepository` above extends Spring Data's `org.springframework.data.repository.CrudRepository` which means that all of the latter's methods are\n+available to `FruitsRepository`.\n+\n+`spring-data-jpa` will generate an implementation for this repository. Then `spring-data-rest` will generate a REST CRUD resource for it.\n+\n+== Update the test\n+\n+To test the capabilities of `FruitsRepository` proceed to update the content of `FruitsRepositoryTest` to:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.core.IsNot.not;\n+\n+@QuarkusTest\n+class FruitsRepositoryTest {\n+\n+    @Test\n+    void testListAllFruits() {\n+        //List all, should have all 3 fruits the database has initially:\n+        given()\n+                .accept(\"application/json\")\n+                .when().get(\"/fruits\")\n+                .then()\n+                .statusCode(200)\n+                .body(\n+                        containsString(\"Cherry\"),\n+                        containsString(\"Apple\"),\n+                        containsString(\"Banana\")\n+                );\n+\n+        //Delete the Cherry:\n+        given()\n+                .when().delete(\"/fruits/1\")\n+                .then()\n+                .statusCode(204);\n+\n+        //List all, cherry should be missing now:\n+        given()\n+                .accept(\"application/json\")\n+                .when().get(\"/fruits\")\n+                .then()\n+                .statusCode(200)\n+                .body(\n+                        not(containsString(\"Cherry\")),\n+                        containsString(\"Apple\"),\n+                        containsString(\"Banana\")\n+                );\n+\n+        //Create a new Fruit\n+        given()\n+                .contentType(\"application/json\")\n+                .accept(\"application/json\")\n+                .body(\"{\\\"name\\\": \\\"Orange\\\", \\\"color\\\": \\\"Orange\\\"}\")\n+                .when().post(\"/fruits\")\n+                .then()\n+                .statusCode(201)\n+                .body(containsString(\"Orange\"))\n+                .body(\"id\", notNullValue())\n+                .extract().body().jsonPath().getString(\"id\");\n+\n+        //List all, Orange should be present now:\n+        given()\n+                .accept(\"application/json\")\n+                .when().get(\"/fruits\")\n+                .then()\n+                .statusCode(200)\n+                .body(\n+                        not(containsString(\"Cherry\")),\n+                        containsString(\"Apple\"),\n+                        containsString(\"Orange\")\n+                );\n+    }\n+}\n+\n+----\n+\n+The test can be easily run by issuing: `./mvnw test`\n+\n+== Package and run the application\n+\n+Quarkus dev mode works with the defined repositories just like with any other Quarkus extension, greatly enhancing your productivity during the dev cycle.\n+The application can be started in dev mode as usual using:\n+\n+[source, bash]\n+----\n+./mvnw compile quarkus:dev\n+----\n+\n+== Run the application as a native binary\n+\n+You can of course create a native executable following the instructions of the link:building-native-image[this] guide.\n+\n+== Supported Spring Data REST functionalities\n+\n+Quarkus currently supports a subset of Spring Data REST features, namely the most useful and most commonly used features.\n+\n+=== What is supported\n+\n+The following sections described the most important supported features of Spring Data REST.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "889f9d30fe3ec32b3bee32439e0d866d4981e45f"}, "originalPosition": 302}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMzMwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The former is used by default, but it is highly recommended to specify which one do you prefer with an `Accept` header.\n          \n          \n            \n            The former is used by default, but it is highly recommended to specify which one you prefer with an `Accept` header.", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r528623305", "createdAt": "2020-11-23T11:04:55Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/spring-data-rest.adoc", "diffHunk": "@@ -0,0 +1,441 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Extension for Spring Data REST\n+\n+include::./attributes.adoc[]\n+:extension-status: experimental\n+\n+Whiles users are encouraged to use a REST Data with Panache for the REST data access endpoints generation,\n+Quarkus provides a compatibility layer for Spring Data REST in a form of `spring-data-rest` extension.\n+\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `spring-data-rest-quickstart` {quickstarts-tree-url}/spring-data-rest-quickstart[directory].\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,bash,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-data-rest-quickstart \\\n+    -Dextensions=\"spring-data-rest,resteasy-jackson,quarkus-jdbc-postgresql\"\n+cd spring-data-rest-quickstart\n+----\n+\n+This command generates a Maven project with a `spring-data-rest` extension.\n+\n+If you already have your Quarkus project configured, you can add the `spring-data-rest` extension\n+to your project by running the following command in your project base directory:\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"spring-data-rest\"\n+----\n+\n+This will add the following to your `pom.xml`:\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.quarkus</groupId>\n+    <artifactId>quarkus-spring-data-rest</artifactId>\n+</dependency>\n+----\n+\n+For the tests you will also need a `rest-assured` dependency. Add it to the `pom.xml`:\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.rest-assured</groupId>\n+    <artifactId>rest-assured</artifactId>\n+    <scope>test</scope>\n+</dependency>\n+----\n+\n+Note: both `resteasy-jackson` and `resteasy-jsonb` are supported and can be interchanged.\n+\n+== Define the Entity\n+\n+Throughout the course of this guide, the following JPA Entity will be used:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class Fruit {\n+\n+    @Id\n+    @GeneratedValue\n+    private Long id;\n+\n+    private String name;\n+\n+    private String color;\n+\n+\n+    public Fruit() {\n+    }\n+\n+    public Fruit(String name, String color) {\n+        this.name = name;\n+        this.color = color;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getColor() {\n+        return color;\n+    }\n+\n+    public void setColor(String color) {\n+        this.color = color;\n+    }\n+}\n+----\n+\n+\n+== Configure database access properties\n+\n+Add the following properties to `application.properties` to configure access to a local PostgreSQL instance.\n+\n+[source,properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=quarkus_test\n+quarkus.datasource.password=quarkus_test\n+quarkus.datasource.jdbc.url=jdbc:postgresql:quarkus_test\n+quarkus.datasource.jdbc.max-size=8\n+quarkus.datasource.jdbc.min-size=2\n+quarkus.hibernate-orm.database.generation=drop-and-create\n+----\n+\n+This configuration assumes that PostgreSQL will be running locally.\n+\n+A very easy way to accomplish that is by using the following Docker command:\n+\n+[source,bash]\n+----\n+docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 --name quarkus_test -e POSTGRES_USER=quarkus_test -e POSTGRES_PASSWORD=quarkus_test -e POSTGRES_DB=quarkus_test -p 5432:5432 postgres:11.5\n+----\n+\n+If you plan on using a different setup, please change your `application.properties` accordingly.\n+\n+== Prepare the data\n+\n+To make it easier to showcase some capabilities of Spring Data REST on Quarkus, some test data should be inserted into the database\n+by adding the following content to a new file named `src/main/resources/import.sql`:\n+\n+[source,sql]\n+----\n+INSERT INTO fruit(id, name, color) VALUES (1, 'Cherry', 'Red');\n+INSERT INTO fruit(id, name, color) VALUES (2, 'Apple', 'Red');\n+INSERT INTO fruit(id, name, color) VALUES (3, 'Banana', 'Yellow');\n+INSERT INTO fruit(id, name, color) VALUES (4, 'Avocado', 'Green');\n+INSERT INTO fruit(id, name, color) VALUES (5, 'Strawberry', 'Red');\n+----\n+\n+Hibernate ORM will execute these queries on application startup.\n+\n+== Define the repository\n+\n+It is now time to define the repository that will be used to access `Fruit`.\n+In a typical Spring Data fashion create a repository like so:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import org.springframework.data.repository.CrudRepository;\n+\n+public interface FruitsRepository extends CrudRepository<Fruit, Long> {\n+}\n+----\n+\n+The `FruitsRepository` above extends Spring Data's `org.springframework.data.repository.CrudRepository` which means that all of the latter's methods are\n+available to `FruitsRepository`.\n+\n+`spring-data-jpa` will generate an implementation for this repository. Then `spring-data-rest` will generate a REST CRUD resource for it.\n+\n+== Update the test\n+\n+To test the capabilities of `FruitsRepository` proceed to update the content of `FruitsRepositoryTest` to:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.core.IsNot.not;\n+\n+@QuarkusTest\n+class FruitsRepositoryTest {\n+\n+    @Test\n+    void testListAllFruits() {\n+        //List all, should have all 3 fruits the database has initially:\n+        given()\n+                .accept(\"application/json\")\n+                .when().get(\"/fruits\")\n+                .then()\n+                .statusCode(200)\n+                .body(\n+                        containsString(\"Cherry\"),\n+                        containsString(\"Apple\"),\n+                        containsString(\"Banana\")\n+                );\n+\n+        //Delete the Cherry:\n+        given()\n+                .when().delete(\"/fruits/1\")\n+                .then()\n+                .statusCode(204);\n+\n+        //List all, cherry should be missing now:\n+        given()\n+                .accept(\"application/json\")\n+                .when().get(\"/fruits\")\n+                .then()\n+                .statusCode(200)\n+                .body(\n+                        not(containsString(\"Cherry\")),\n+                        containsString(\"Apple\"),\n+                        containsString(\"Banana\")\n+                );\n+\n+        //Create a new Fruit\n+        given()\n+                .contentType(\"application/json\")\n+                .accept(\"application/json\")\n+                .body(\"{\\\"name\\\": \\\"Orange\\\", \\\"color\\\": \\\"Orange\\\"}\")\n+                .when().post(\"/fruits\")\n+                .then()\n+                .statusCode(201)\n+                .body(containsString(\"Orange\"))\n+                .body(\"id\", notNullValue())\n+                .extract().body().jsonPath().getString(\"id\");\n+\n+        //List all, Orange should be present now:\n+        given()\n+                .accept(\"application/json\")\n+                .when().get(\"/fruits\")\n+                .then()\n+                .statusCode(200)\n+                .body(\n+                        not(containsString(\"Cherry\")),\n+                        containsString(\"Apple\"),\n+                        containsString(\"Orange\")\n+                );\n+    }\n+}\n+\n+----\n+\n+The test can be easily run by issuing: `./mvnw test`\n+\n+== Package and run the application\n+\n+Quarkus dev mode works with the defined repositories just like with any other Quarkus extension, greatly enhancing your productivity during the dev cycle.\n+The application can be started in dev mode as usual using:\n+\n+[source, bash]\n+----\n+./mvnw compile quarkus:dev\n+----\n+\n+== Run the application as a native binary\n+\n+You can of course create a native executable following the instructions of the link:building-native-image[this] guide.\n+\n+== Supported Spring Data REST functionalities\n+\n+Quarkus currently supports a subset of Spring Data REST features, namely the most useful and most commonly used features.\n+\n+=== What is supported\n+\n+The following sections described the most important supported features of Spring Data REST.\n+\n+==== Automatic REST endpoint generation\n+\n+Interfaces that extend any of the following Spring Data repositories get automatically generated REST endpoints:\n+\n+* `org.springframework.data.repository.CrudRepository`\n+* `org.springframework.data.repository.PagingAndSortingRepository`\n+* `org.springframework.data.jpa.repository.JpaRepository`\n+\n+Endpoints generated from the above repositories expose five common REST operations:\n+\n+* `GET /fruits` - lists all entities or returns a page if `PagingAndSortingRepository` or `JpaRepository` is used.\n+* `GET /fruits/:id` - returns an entity by ID.\n+* `POST /fruits` - creates a new entity.\n+* `PUT /fruits/:id` - updates an existing entity or creates a new one with a specified ID (if allowed by the entity definition).\n+* `DELETE /fruits/:id` - deletes an entity by ID.\n+\n+There are two supported data types: `application/json` and `application/hal+json`.\n+The former is used by default, but it is highly recommended to specify which one do you prefer with an `Accept` header.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "889f9d30fe3ec32b3bee32439e0d866d4981e45f"}, "originalPosition": 321}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMzQ4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `PagingAndSortingRepository` allows `spring-data-rest` extension to access data in chunks.\n          \n          \n            \n            `PagingAndSortingRepository` allows the `spring-data-rest` extension to access data in chunks.", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r528623488", "createdAt": "2020-11-23T11:05:14Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/spring-data-rest.adoc", "diffHunk": "@@ -0,0 +1,441 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Extension for Spring Data REST\n+\n+include::./attributes.adoc[]\n+:extension-status: experimental\n+\n+Whiles users are encouraged to use a REST Data with Panache for the REST data access endpoints generation,\n+Quarkus provides a compatibility layer for Spring Data REST in a form of `spring-data-rest` extension.\n+\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `spring-data-rest-quickstart` {quickstarts-tree-url}/spring-data-rest-quickstart[directory].\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,bash,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-data-rest-quickstart \\\n+    -Dextensions=\"spring-data-rest,resteasy-jackson,quarkus-jdbc-postgresql\"\n+cd spring-data-rest-quickstart\n+----\n+\n+This command generates a Maven project with a `spring-data-rest` extension.\n+\n+If you already have your Quarkus project configured, you can add the `spring-data-rest` extension\n+to your project by running the following command in your project base directory:\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"spring-data-rest\"\n+----\n+\n+This will add the following to your `pom.xml`:\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.quarkus</groupId>\n+    <artifactId>quarkus-spring-data-rest</artifactId>\n+</dependency>\n+----\n+\n+For the tests you will also need a `rest-assured` dependency. Add it to the `pom.xml`:\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.rest-assured</groupId>\n+    <artifactId>rest-assured</artifactId>\n+    <scope>test</scope>\n+</dependency>\n+----\n+\n+Note: both `resteasy-jackson` and `resteasy-jsonb` are supported and can be interchanged.\n+\n+== Define the Entity\n+\n+Throughout the course of this guide, the following JPA Entity will be used:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class Fruit {\n+\n+    @Id\n+    @GeneratedValue\n+    private Long id;\n+\n+    private String name;\n+\n+    private String color;\n+\n+\n+    public Fruit() {\n+    }\n+\n+    public Fruit(String name, String color) {\n+        this.name = name;\n+        this.color = color;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getColor() {\n+        return color;\n+    }\n+\n+    public void setColor(String color) {\n+        this.color = color;\n+    }\n+}\n+----\n+\n+\n+== Configure database access properties\n+\n+Add the following properties to `application.properties` to configure access to a local PostgreSQL instance.\n+\n+[source,properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=quarkus_test\n+quarkus.datasource.password=quarkus_test\n+quarkus.datasource.jdbc.url=jdbc:postgresql:quarkus_test\n+quarkus.datasource.jdbc.max-size=8\n+quarkus.datasource.jdbc.min-size=2\n+quarkus.hibernate-orm.database.generation=drop-and-create\n+----\n+\n+This configuration assumes that PostgreSQL will be running locally.\n+\n+A very easy way to accomplish that is by using the following Docker command:\n+\n+[source,bash]\n+----\n+docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 --name quarkus_test -e POSTGRES_USER=quarkus_test -e POSTGRES_PASSWORD=quarkus_test -e POSTGRES_DB=quarkus_test -p 5432:5432 postgres:11.5\n+----\n+\n+If you plan on using a different setup, please change your `application.properties` accordingly.\n+\n+== Prepare the data\n+\n+To make it easier to showcase some capabilities of Spring Data REST on Quarkus, some test data should be inserted into the database\n+by adding the following content to a new file named `src/main/resources/import.sql`:\n+\n+[source,sql]\n+----\n+INSERT INTO fruit(id, name, color) VALUES (1, 'Cherry', 'Red');\n+INSERT INTO fruit(id, name, color) VALUES (2, 'Apple', 'Red');\n+INSERT INTO fruit(id, name, color) VALUES (3, 'Banana', 'Yellow');\n+INSERT INTO fruit(id, name, color) VALUES (4, 'Avocado', 'Green');\n+INSERT INTO fruit(id, name, color) VALUES (5, 'Strawberry', 'Red');\n+----\n+\n+Hibernate ORM will execute these queries on application startup.\n+\n+== Define the repository\n+\n+It is now time to define the repository that will be used to access `Fruit`.\n+In a typical Spring Data fashion create a repository like so:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import org.springframework.data.repository.CrudRepository;\n+\n+public interface FruitsRepository extends CrudRepository<Fruit, Long> {\n+}\n+----\n+\n+The `FruitsRepository` above extends Spring Data's `org.springframework.data.repository.CrudRepository` which means that all of the latter's methods are\n+available to `FruitsRepository`.\n+\n+`spring-data-jpa` will generate an implementation for this repository. Then `spring-data-rest` will generate a REST CRUD resource for it.\n+\n+== Update the test\n+\n+To test the capabilities of `FruitsRepository` proceed to update the content of `FruitsRepositoryTest` to:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.core.IsNot.not;\n+\n+@QuarkusTest\n+class FruitsRepositoryTest {\n+\n+    @Test\n+    void testListAllFruits() {\n+        //List all, should have all 3 fruits the database has initially:\n+        given()\n+                .accept(\"application/json\")\n+                .when().get(\"/fruits\")\n+                .then()\n+                .statusCode(200)\n+                .body(\n+                        containsString(\"Cherry\"),\n+                        containsString(\"Apple\"),\n+                        containsString(\"Banana\")\n+                );\n+\n+        //Delete the Cherry:\n+        given()\n+                .when().delete(\"/fruits/1\")\n+                .then()\n+                .statusCode(204);\n+\n+        //List all, cherry should be missing now:\n+        given()\n+                .accept(\"application/json\")\n+                .when().get(\"/fruits\")\n+                .then()\n+                .statusCode(200)\n+                .body(\n+                        not(containsString(\"Cherry\")),\n+                        containsString(\"Apple\"),\n+                        containsString(\"Banana\")\n+                );\n+\n+        //Create a new Fruit\n+        given()\n+                .contentType(\"application/json\")\n+                .accept(\"application/json\")\n+                .body(\"{\\\"name\\\": \\\"Orange\\\", \\\"color\\\": \\\"Orange\\\"}\")\n+                .when().post(\"/fruits\")\n+                .then()\n+                .statusCode(201)\n+                .body(containsString(\"Orange\"))\n+                .body(\"id\", notNullValue())\n+                .extract().body().jsonPath().getString(\"id\");\n+\n+        //List all, Orange should be present now:\n+        given()\n+                .accept(\"application/json\")\n+                .when().get(\"/fruits\")\n+                .then()\n+                .statusCode(200)\n+                .body(\n+                        not(containsString(\"Cherry\")),\n+                        containsString(\"Apple\"),\n+                        containsString(\"Orange\")\n+                );\n+    }\n+}\n+\n+----\n+\n+The test can be easily run by issuing: `./mvnw test`\n+\n+== Package and run the application\n+\n+Quarkus dev mode works with the defined repositories just like with any other Quarkus extension, greatly enhancing your productivity during the dev cycle.\n+The application can be started in dev mode as usual using:\n+\n+[source, bash]\n+----\n+./mvnw compile quarkus:dev\n+----\n+\n+== Run the application as a native binary\n+\n+You can of course create a native executable following the instructions of the link:building-native-image[this] guide.\n+\n+== Supported Spring Data REST functionalities\n+\n+Quarkus currently supports a subset of Spring Data REST features, namely the most useful and most commonly used features.\n+\n+=== What is supported\n+\n+The following sections described the most important supported features of Spring Data REST.\n+\n+==== Automatic REST endpoint generation\n+\n+Interfaces that extend any of the following Spring Data repositories get automatically generated REST endpoints:\n+\n+* `org.springframework.data.repository.CrudRepository`\n+* `org.springframework.data.repository.PagingAndSortingRepository`\n+* `org.springframework.data.jpa.repository.JpaRepository`\n+\n+Endpoints generated from the above repositories expose five common REST operations:\n+\n+* `GET /fruits` - lists all entities or returns a page if `PagingAndSortingRepository` or `JpaRepository` is used.\n+* `GET /fruits/:id` - returns an entity by ID.\n+* `POST /fruits` - creates a new entity.\n+* `PUT /fruits/:id` - updates an existing entity or creates a new one with a specified ID (if allowed by the entity definition).\n+* `DELETE /fruits/:id` - deletes an entity by ID.\n+\n+There are two supported data types: `application/json` and `application/hal+json`.\n+The former is used by default, but it is highly recommended to specify which one do you prefer with an `Accept` header.\n+\n+==== Exposing many entities\n+\n+If a database contains many entities, it might not be a great idea to return them all at once.\n+`PagingAndSortingRepository` allows `spring-data-rest` extension to access data in chunks.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "889f9d30fe3ec32b3bee32439e0d866d4981e45f"}, "originalPosition": 326}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMzgxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `spring-data-rest` extension supports the `exported` and `path` attributes of these annotations.\n          \n          \n            \n            The `spring-data-rest` extension supports the `exported` and `path` attributes of these annotations.", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r528623815", "createdAt": "2020-11-23T11:05:52Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/spring-data-rest.adoc", "diffHunk": "@@ -0,0 +1,441 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Extension for Spring Data REST\n+\n+include::./attributes.adoc[]\n+:extension-status: experimental\n+\n+Whiles users are encouraged to use a REST Data with Panache for the REST data access endpoints generation,\n+Quarkus provides a compatibility layer for Spring Data REST in a form of `spring-data-rest` extension.\n+\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `spring-data-rest-quickstart` {quickstarts-tree-url}/spring-data-rest-quickstart[directory].\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,bash,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-data-rest-quickstart \\\n+    -Dextensions=\"spring-data-rest,resteasy-jackson,quarkus-jdbc-postgresql\"\n+cd spring-data-rest-quickstart\n+----\n+\n+This command generates a Maven project with a `spring-data-rest` extension.\n+\n+If you already have your Quarkus project configured, you can add the `spring-data-rest` extension\n+to your project by running the following command in your project base directory:\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"spring-data-rest\"\n+----\n+\n+This will add the following to your `pom.xml`:\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.quarkus</groupId>\n+    <artifactId>quarkus-spring-data-rest</artifactId>\n+</dependency>\n+----\n+\n+For the tests you will also need a `rest-assured` dependency. Add it to the `pom.xml`:\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.rest-assured</groupId>\n+    <artifactId>rest-assured</artifactId>\n+    <scope>test</scope>\n+</dependency>\n+----\n+\n+Note: both `resteasy-jackson` and `resteasy-jsonb` are supported and can be interchanged.\n+\n+== Define the Entity\n+\n+Throughout the course of this guide, the following JPA Entity will be used:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class Fruit {\n+\n+    @Id\n+    @GeneratedValue\n+    private Long id;\n+\n+    private String name;\n+\n+    private String color;\n+\n+\n+    public Fruit() {\n+    }\n+\n+    public Fruit(String name, String color) {\n+        this.name = name;\n+        this.color = color;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getColor() {\n+        return color;\n+    }\n+\n+    public void setColor(String color) {\n+        this.color = color;\n+    }\n+}\n+----\n+\n+\n+== Configure database access properties\n+\n+Add the following properties to `application.properties` to configure access to a local PostgreSQL instance.\n+\n+[source,properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=quarkus_test\n+quarkus.datasource.password=quarkus_test\n+quarkus.datasource.jdbc.url=jdbc:postgresql:quarkus_test\n+quarkus.datasource.jdbc.max-size=8\n+quarkus.datasource.jdbc.min-size=2\n+quarkus.hibernate-orm.database.generation=drop-and-create\n+----\n+\n+This configuration assumes that PostgreSQL will be running locally.\n+\n+A very easy way to accomplish that is by using the following Docker command:\n+\n+[source,bash]\n+----\n+docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 --name quarkus_test -e POSTGRES_USER=quarkus_test -e POSTGRES_PASSWORD=quarkus_test -e POSTGRES_DB=quarkus_test -p 5432:5432 postgres:11.5\n+----\n+\n+If you plan on using a different setup, please change your `application.properties` accordingly.\n+\n+== Prepare the data\n+\n+To make it easier to showcase some capabilities of Spring Data REST on Quarkus, some test data should be inserted into the database\n+by adding the following content to a new file named `src/main/resources/import.sql`:\n+\n+[source,sql]\n+----\n+INSERT INTO fruit(id, name, color) VALUES (1, 'Cherry', 'Red');\n+INSERT INTO fruit(id, name, color) VALUES (2, 'Apple', 'Red');\n+INSERT INTO fruit(id, name, color) VALUES (3, 'Banana', 'Yellow');\n+INSERT INTO fruit(id, name, color) VALUES (4, 'Avocado', 'Green');\n+INSERT INTO fruit(id, name, color) VALUES (5, 'Strawberry', 'Red');\n+----\n+\n+Hibernate ORM will execute these queries on application startup.\n+\n+== Define the repository\n+\n+It is now time to define the repository that will be used to access `Fruit`.\n+In a typical Spring Data fashion create a repository like so:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import org.springframework.data.repository.CrudRepository;\n+\n+public interface FruitsRepository extends CrudRepository<Fruit, Long> {\n+}\n+----\n+\n+The `FruitsRepository` above extends Spring Data's `org.springframework.data.repository.CrudRepository` which means that all of the latter's methods are\n+available to `FruitsRepository`.\n+\n+`spring-data-jpa` will generate an implementation for this repository. Then `spring-data-rest` will generate a REST CRUD resource for it.\n+\n+== Update the test\n+\n+To test the capabilities of `FruitsRepository` proceed to update the content of `FruitsRepositoryTest` to:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.core.IsNot.not;\n+\n+@QuarkusTest\n+class FruitsRepositoryTest {\n+\n+    @Test\n+    void testListAllFruits() {\n+        //List all, should have all 3 fruits the database has initially:\n+        given()\n+                .accept(\"application/json\")\n+                .when().get(\"/fruits\")\n+                .then()\n+                .statusCode(200)\n+                .body(\n+                        containsString(\"Cherry\"),\n+                        containsString(\"Apple\"),\n+                        containsString(\"Banana\")\n+                );\n+\n+        //Delete the Cherry:\n+        given()\n+                .when().delete(\"/fruits/1\")\n+                .then()\n+                .statusCode(204);\n+\n+        //List all, cherry should be missing now:\n+        given()\n+                .accept(\"application/json\")\n+                .when().get(\"/fruits\")\n+                .then()\n+                .statusCode(200)\n+                .body(\n+                        not(containsString(\"Cherry\")),\n+                        containsString(\"Apple\"),\n+                        containsString(\"Banana\")\n+                );\n+\n+        //Create a new Fruit\n+        given()\n+                .contentType(\"application/json\")\n+                .accept(\"application/json\")\n+                .body(\"{\\\"name\\\": \\\"Orange\\\", \\\"color\\\": \\\"Orange\\\"}\")\n+                .when().post(\"/fruits\")\n+                .then()\n+                .statusCode(201)\n+                .body(containsString(\"Orange\"))\n+                .body(\"id\", notNullValue())\n+                .extract().body().jsonPath().getString(\"id\");\n+\n+        //List all, Orange should be present now:\n+        given()\n+                .accept(\"application/json\")\n+                .when().get(\"/fruits\")\n+                .then()\n+                .statusCode(200)\n+                .body(\n+                        not(containsString(\"Cherry\")),\n+                        containsString(\"Apple\"),\n+                        containsString(\"Orange\")\n+                );\n+    }\n+}\n+\n+----\n+\n+The test can be easily run by issuing: `./mvnw test`\n+\n+== Package and run the application\n+\n+Quarkus dev mode works with the defined repositories just like with any other Quarkus extension, greatly enhancing your productivity during the dev cycle.\n+The application can be started in dev mode as usual using:\n+\n+[source, bash]\n+----\n+./mvnw compile quarkus:dev\n+----\n+\n+== Run the application as a native binary\n+\n+You can of course create a native executable following the instructions of the link:building-native-image[this] guide.\n+\n+== Supported Spring Data REST functionalities\n+\n+Quarkus currently supports a subset of Spring Data REST features, namely the most useful and most commonly used features.\n+\n+=== What is supported\n+\n+The following sections described the most important supported features of Spring Data REST.\n+\n+==== Automatic REST endpoint generation\n+\n+Interfaces that extend any of the following Spring Data repositories get automatically generated REST endpoints:\n+\n+* `org.springframework.data.repository.CrudRepository`\n+* `org.springframework.data.repository.PagingAndSortingRepository`\n+* `org.springframework.data.jpa.repository.JpaRepository`\n+\n+Endpoints generated from the above repositories expose five common REST operations:\n+\n+* `GET /fruits` - lists all entities or returns a page if `PagingAndSortingRepository` or `JpaRepository` is used.\n+* `GET /fruits/:id` - returns an entity by ID.\n+* `POST /fruits` - creates a new entity.\n+* `PUT /fruits/:id` - updates an existing entity or creates a new one with a specified ID (if allowed by the entity definition).\n+* `DELETE /fruits/:id` - deletes an entity by ID.\n+\n+There are two supported data types: `application/json` and `application/hal+json`.\n+The former is used by default, but it is highly recommended to specify which one do you prefer with an `Accept` header.\n+\n+==== Exposing many entities\n+\n+If a database contains many entities, it might not be a great idea to return them all at once.\n+`PagingAndSortingRepository` allows `spring-data-rest` extension to access data in chunks.\n+\n+Replace the `CrudRepository` with `PagingAndSortingRepository` in the `FruitsRepository`:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import org.springframework.data.repository.PagingAndSortingRepository;\n+\n+public interface FruitsRepository extends PagingAndSortingRepository<Fruit, Long> {\n+}\n+----\n+\n+Now the `GET /fruits` will accept three new query parameters: `sort`, `page` and `size`.\n+\n+|===\n+| Query parameter | Description | Default value | Example values\n+\n+| `sort`\n+| Sorts the entities that are returned by the list operation\n+| \"\"\n+| `?sort=name` (ascending name), `?sort=name,-color` (ascending name and descending color)\n+\n+| `page`\n+| Zero indexed page number. Invalid value is interpreted as 0.\n+| 0\n+| 0, 11, 100\n+\n+| `size`\n+| Page size. Minimal accepted value is 1. Any lower value is interpreted as 1.\n+| 20\n+| 1, 11, 100\n+|===\n+\n+For paged responses, `spring-data-rest` also returns a set of link headers that can be used to access other pages: first, previous, next and last.\n+\n+==== Fine tuning endpoints generation\n+\n+This allows user to specify which methods should be exposed and what path should be used to access them.\n+Spring Data REST provides two annotations that can be used: `@RepositoryRestResource` and `@RestResource`.\n+`spring-data-rest` extension supports the `exported` and `path` attributes of these annotations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "889f9d30fe3ec32b3bee32439e0d866d4981e45f"}, "originalPosition": 367}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMzkxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Assume for example that fruits repository should be accessible by a `/my-fruits` path and only allow `GET` operation.\n          \n          \n            \n            Assume for example that the Fruits repository should be accessible by a `/my-fruits` path and only allow `GET` operations.", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r528623913", "createdAt": "2020-11-23T11:06:04Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/spring-data-rest.adoc", "diffHunk": "@@ -0,0 +1,441 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Extension for Spring Data REST\n+\n+include::./attributes.adoc[]\n+:extension-status: experimental\n+\n+Whiles users are encouraged to use a REST Data with Panache for the REST data access endpoints generation,\n+Quarkus provides a compatibility layer for Spring Data REST in a form of `spring-data-rest` extension.\n+\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `spring-data-rest-quickstart` {quickstarts-tree-url}/spring-data-rest-quickstart[directory].\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,bash,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-data-rest-quickstart \\\n+    -Dextensions=\"spring-data-rest,resteasy-jackson,quarkus-jdbc-postgresql\"\n+cd spring-data-rest-quickstart\n+----\n+\n+This command generates a Maven project with a `spring-data-rest` extension.\n+\n+If you already have your Quarkus project configured, you can add the `spring-data-rest` extension\n+to your project by running the following command in your project base directory:\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"spring-data-rest\"\n+----\n+\n+This will add the following to your `pom.xml`:\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.quarkus</groupId>\n+    <artifactId>quarkus-spring-data-rest</artifactId>\n+</dependency>\n+----\n+\n+For the tests you will also need a `rest-assured` dependency. Add it to the `pom.xml`:\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.rest-assured</groupId>\n+    <artifactId>rest-assured</artifactId>\n+    <scope>test</scope>\n+</dependency>\n+----\n+\n+Note: both `resteasy-jackson` and `resteasy-jsonb` are supported and can be interchanged.\n+\n+== Define the Entity\n+\n+Throughout the course of this guide, the following JPA Entity will be used:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class Fruit {\n+\n+    @Id\n+    @GeneratedValue\n+    private Long id;\n+\n+    private String name;\n+\n+    private String color;\n+\n+\n+    public Fruit() {\n+    }\n+\n+    public Fruit(String name, String color) {\n+        this.name = name;\n+        this.color = color;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getColor() {\n+        return color;\n+    }\n+\n+    public void setColor(String color) {\n+        this.color = color;\n+    }\n+}\n+----\n+\n+\n+== Configure database access properties\n+\n+Add the following properties to `application.properties` to configure access to a local PostgreSQL instance.\n+\n+[source,properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=quarkus_test\n+quarkus.datasource.password=quarkus_test\n+quarkus.datasource.jdbc.url=jdbc:postgresql:quarkus_test\n+quarkus.datasource.jdbc.max-size=8\n+quarkus.datasource.jdbc.min-size=2\n+quarkus.hibernate-orm.database.generation=drop-and-create\n+----\n+\n+This configuration assumes that PostgreSQL will be running locally.\n+\n+A very easy way to accomplish that is by using the following Docker command:\n+\n+[source,bash]\n+----\n+docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 --name quarkus_test -e POSTGRES_USER=quarkus_test -e POSTGRES_PASSWORD=quarkus_test -e POSTGRES_DB=quarkus_test -p 5432:5432 postgres:11.5\n+----\n+\n+If you plan on using a different setup, please change your `application.properties` accordingly.\n+\n+== Prepare the data\n+\n+To make it easier to showcase some capabilities of Spring Data REST on Quarkus, some test data should be inserted into the database\n+by adding the following content to a new file named `src/main/resources/import.sql`:\n+\n+[source,sql]\n+----\n+INSERT INTO fruit(id, name, color) VALUES (1, 'Cherry', 'Red');\n+INSERT INTO fruit(id, name, color) VALUES (2, 'Apple', 'Red');\n+INSERT INTO fruit(id, name, color) VALUES (3, 'Banana', 'Yellow');\n+INSERT INTO fruit(id, name, color) VALUES (4, 'Avocado', 'Green');\n+INSERT INTO fruit(id, name, color) VALUES (5, 'Strawberry', 'Red');\n+----\n+\n+Hibernate ORM will execute these queries on application startup.\n+\n+== Define the repository\n+\n+It is now time to define the repository that will be used to access `Fruit`.\n+In a typical Spring Data fashion create a repository like so:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import org.springframework.data.repository.CrudRepository;\n+\n+public interface FruitsRepository extends CrudRepository<Fruit, Long> {\n+}\n+----\n+\n+The `FruitsRepository` above extends Spring Data's `org.springframework.data.repository.CrudRepository` which means that all of the latter's methods are\n+available to `FruitsRepository`.\n+\n+`spring-data-jpa` will generate an implementation for this repository. Then `spring-data-rest` will generate a REST CRUD resource for it.\n+\n+== Update the test\n+\n+To test the capabilities of `FruitsRepository` proceed to update the content of `FruitsRepositoryTest` to:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.core.IsNot.not;\n+\n+@QuarkusTest\n+class FruitsRepositoryTest {\n+\n+    @Test\n+    void testListAllFruits() {\n+        //List all, should have all 3 fruits the database has initially:\n+        given()\n+                .accept(\"application/json\")\n+                .when().get(\"/fruits\")\n+                .then()\n+                .statusCode(200)\n+                .body(\n+                        containsString(\"Cherry\"),\n+                        containsString(\"Apple\"),\n+                        containsString(\"Banana\")\n+                );\n+\n+        //Delete the Cherry:\n+        given()\n+                .when().delete(\"/fruits/1\")\n+                .then()\n+                .statusCode(204);\n+\n+        //List all, cherry should be missing now:\n+        given()\n+                .accept(\"application/json\")\n+                .when().get(\"/fruits\")\n+                .then()\n+                .statusCode(200)\n+                .body(\n+                        not(containsString(\"Cherry\")),\n+                        containsString(\"Apple\"),\n+                        containsString(\"Banana\")\n+                );\n+\n+        //Create a new Fruit\n+        given()\n+                .contentType(\"application/json\")\n+                .accept(\"application/json\")\n+                .body(\"{\\\"name\\\": \\\"Orange\\\", \\\"color\\\": \\\"Orange\\\"}\")\n+                .when().post(\"/fruits\")\n+                .then()\n+                .statusCode(201)\n+                .body(containsString(\"Orange\"))\n+                .body(\"id\", notNullValue())\n+                .extract().body().jsonPath().getString(\"id\");\n+\n+        //List all, Orange should be present now:\n+        given()\n+                .accept(\"application/json\")\n+                .when().get(\"/fruits\")\n+                .then()\n+                .statusCode(200)\n+                .body(\n+                        not(containsString(\"Cherry\")),\n+                        containsString(\"Apple\"),\n+                        containsString(\"Orange\")\n+                );\n+    }\n+}\n+\n+----\n+\n+The test can be easily run by issuing: `./mvnw test`\n+\n+== Package and run the application\n+\n+Quarkus dev mode works with the defined repositories just like with any other Quarkus extension, greatly enhancing your productivity during the dev cycle.\n+The application can be started in dev mode as usual using:\n+\n+[source, bash]\n+----\n+./mvnw compile quarkus:dev\n+----\n+\n+== Run the application as a native binary\n+\n+You can of course create a native executable following the instructions of the link:building-native-image[this] guide.\n+\n+== Supported Spring Data REST functionalities\n+\n+Quarkus currently supports a subset of Spring Data REST features, namely the most useful and most commonly used features.\n+\n+=== What is supported\n+\n+The following sections described the most important supported features of Spring Data REST.\n+\n+==== Automatic REST endpoint generation\n+\n+Interfaces that extend any of the following Spring Data repositories get automatically generated REST endpoints:\n+\n+* `org.springframework.data.repository.CrudRepository`\n+* `org.springframework.data.repository.PagingAndSortingRepository`\n+* `org.springframework.data.jpa.repository.JpaRepository`\n+\n+Endpoints generated from the above repositories expose five common REST operations:\n+\n+* `GET /fruits` - lists all entities or returns a page if `PagingAndSortingRepository` or `JpaRepository` is used.\n+* `GET /fruits/:id` - returns an entity by ID.\n+* `POST /fruits` - creates a new entity.\n+* `PUT /fruits/:id` - updates an existing entity or creates a new one with a specified ID (if allowed by the entity definition).\n+* `DELETE /fruits/:id` - deletes an entity by ID.\n+\n+There are two supported data types: `application/json` and `application/hal+json`.\n+The former is used by default, but it is highly recommended to specify which one do you prefer with an `Accept` header.\n+\n+==== Exposing many entities\n+\n+If a database contains many entities, it might not be a great idea to return them all at once.\n+`PagingAndSortingRepository` allows `spring-data-rest` extension to access data in chunks.\n+\n+Replace the `CrudRepository` with `PagingAndSortingRepository` in the `FruitsRepository`:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import org.springframework.data.repository.PagingAndSortingRepository;\n+\n+public interface FruitsRepository extends PagingAndSortingRepository<Fruit, Long> {\n+}\n+----\n+\n+Now the `GET /fruits` will accept three new query parameters: `sort`, `page` and `size`.\n+\n+|===\n+| Query parameter | Description | Default value | Example values\n+\n+| `sort`\n+| Sorts the entities that are returned by the list operation\n+| \"\"\n+| `?sort=name` (ascending name), `?sort=name,-color` (ascending name and descending color)\n+\n+| `page`\n+| Zero indexed page number. Invalid value is interpreted as 0.\n+| 0\n+| 0, 11, 100\n+\n+| `size`\n+| Page size. Minimal accepted value is 1. Any lower value is interpreted as 1.\n+| 20\n+| 1, 11, 100\n+|===\n+\n+For paged responses, `spring-data-rest` also returns a set of link headers that can be used to access other pages: first, previous, next and last.\n+\n+==== Fine tuning endpoints generation\n+\n+This allows user to specify which methods should be exposed and what path should be used to access them.\n+Spring Data REST provides two annotations that can be used: `@RepositoryRestResource` and `@RestResource`.\n+`spring-data-rest` extension supports the `exported` and `path` attributes of these annotations.\n+\n+Assume for example that fruits repository should be accessible by a `/my-fruits` path and only allow `GET` operation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "889f9d30fe3ec32b3bee32439e0d866d4981e45f"}, "originalPosition": 369}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyNDM3OQ==", "bodyText": "This guide should be added as a link in all the other guides.", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r528624379", "createdAt": "2020-11-23T11:06:55Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/spring-data-rest.adoc", "diffHunk": "@@ -0,0 +1,441 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Extension for Spring Data REST\n+\n+include::./attributes.adoc[]\n+:extension-status: experimental\n+\n+Whiles users are encouraged to use a REST Data with Panache for the REST data access endpoints generation,\n+Quarkus provides a compatibility layer for Spring Data REST in a form of `spring-data-rest` extension.\n+\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `spring-data-rest-quickstart` {quickstarts-tree-url}/spring-data-rest-quickstart[directory].\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,bash,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-data-rest-quickstart \\\n+    -Dextensions=\"spring-data-rest,resteasy-jackson,quarkus-jdbc-postgresql\"\n+cd spring-data-rest-quickstart\n+----\n+\n+This command generates a Maven project with a `spring-data-rest` extension.\n+\n+If you already have your Quarkus project configured, you can add the `spring-data-rest` extension\n+to your project by running the following command in your project base directory:\n+\n+[source,bash]\n+----\n+./mvnw quarkus:add-extension -Dextensions=\"spring-data-rest\"\n+----\n+\n+This will add the following to your `pom.xml`:\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.quarkus</groupId>\n+    <artifactId>quarkus-spring-data-rest</artifactId>\n+</dependency>\n+----\n+\n+For the tests you will also need a `rest-assured` dependency. Add it to the `pom.xml`:\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>io.rest-assured</groupId>\n+    <artifactId>rest-assured</artifactId>\n+    <scope>test</scope>\n+</dependency>\n+----\n+\n+Note: both `resteasy-jackson` and `resteasy-jsonb` are supported and can be interchanged.\n+\n+== Define the Entity\n+\n+Throughout the course of this guide, the following JPA Entity will be used:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class Fruit {\n+\n+    @Id\n+    @GeneratedValue\n+    private Long id;\n+\n+    private String name;\n+\n+    private String color;\n+\n+\n+    public Fruit() {\n+    }\n+\n+    public Fruit(String name, String color) {\n+        this.name = name;\n+        this.color = color;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getColor() {\n+        return color;\n+    }\n+\n+    public void setColor(String color) {\n+        this.color = color;\n+    }\n+}\n+----\n+\n+\n+== Configure database access properties\n+\n+Add the following properties to `application.properties` to configure access to a local PostgreSQL instance.\n+\n+[source,properties]\n+----\n+quarkus.datasource.db-kind=postgresql\n+quarkus.datasource.username=quarkus_test\n+quarkus.datasource.password=quarkus_test\n+quarkus.datasource.jdbc.url=jdbc:postgresql:quarkus_test\n+quarkus.datasource.jdbc.max-size=8\n+quarkus.datasource.jdbc.min-size=2\n+quarkus.hibernate-orm.database.generation=drop-and-create\n+----\n+\n+This configuration assumes that PostgreSQL will be running locally.\n+\n+A very easy way to accomplish that is by using the following Docker command:\n+\n+[source,bash]\n+----\n+docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 --name quarkus_test -e POSTGRES_USER=quarkus_test -e POSTGRES_PASSWORD=quarkus_test -e POSTGRES_DB=quarkus_test -p 5432:5432 postgres:11.5\n+----\n+\n+If you plan on using a different setup, please change your `application.properties` accordingly.\n+\n+== Prepare the data\n+\n+To make it easier to showcase some capabilities of Spring Data REST on Quarkus, some test data should be inserted into the database\n+by adding the following content to a new file named `src/main/resources/import.sql`:\n+\n+[source,sql]\n+----\n+INSERT INTO fruit(id, name, color) VALUES (1, 'Cherry', 'Red');\n+INSERT INTO fruit(id, name, color) VALUES (2, 'Apple', 'Red');\n+INSERT INTO fruit(id, name, color) VALUES (3, 'Banana', 'Yellow');\n+INSERT INTO fruit(id, name, color) VALUES (4, 'Avocado', 'Green');\n+INSERT INTO fruit(id, name, color) VALUES (5, 'Strawberry', 'Red');\n+----\n+\n+Hibernate ORM will execute these queries on application startup.\n+\n+== Define the repository\n+\n+It is now time to define the repository that will be used to access `Fruit`.\n+In a typical Spring Data fashion create a repository like so:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import org.springframework.data.repository.CrudRepository;\n+\n+public interface FruitsRepository extends CrudRepository<Fruit, Long> {\n+}\n+----\n+\n+The `FruitsRepository` above extends Spring Data's `org.springframework.data.repository.CrudRepository` which means that all of the latter's methods are\n+available to `FruitsRepository`.\n+\n+`spring-data-jpa` will generate an implementation for this repository. Then `spring-data-rest` will generate a REST CRUD resource for it.\n+\n+== Update the test\n+\n+To test the capabilities of `FruitsRepository` proceed to update the content of `FruitsRepositoryTest` to:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.core.IsNot.not;\n+\n+@QuarkusTest\n+class FruitsRepositoryTest {\n+\n+    @Test\n+    void testListAllFruits() {\n+        //List all, should have all 3 fruits the database has initially:\n+        given()\n+                .accept(\"application/json\")\n+                .when().get(\"/fruits\")\n+                .then()\n+                .statusCode(200)\n+                .body(\n+                        containsString(\"Cherry\"),\n+                        containsString(\"Apple\"),\n+                        containsString(\"Banana\")\n+                );\n+\n+        //Delete the Cherry:\n+        given()\n+                .when().delete(\"/fruits/1\")\n+                .then()\n+                .statusCode(204);\n+\n+        //List all, cherry should be missing now:\n+        given()\n+                .accept(\"application/json\")\n+                .when().get(\"/fruits\")\n+                .then()\n+                .statusCode(200)\n+                .body(\n+                        not(containsString(\"Cherry\")),\n+                        containsString(\"Apple\"),\n+                        containsString(\"Banana\")\n+                );\n+\n+        //Create a new Fruit\n+        given()\n+                .contentType(\"application/json\")\n+                .accept(\"application/json\")\n+                .body(\"{\\\"name\\\": \\\"Orange\\\", \\\"color\\\": \\\"Orange\\\"}\")\n+                .when().post(\"/fruits\")\n+                .then()\n+                .statusCode(201)\n+                .body(containsString(\"Orange\"))\n+                .body(\"id\", notNullValue())\n+                .extract().body().jsonPath().getString(\"id\");\n+\n+        //List all, Orange should be present now:\n+        given()\n+                .accept(\"application/json\")\n+                .when().get(\"/fruits\")\n+                .then()\n+                .statusCode(200)\n+                .body(\n+                        not(containsString(\"Cherry\")),\n+                        containsString(\"Apple\"),\n+                        containsString(\"Orange\")\n+                );\n+    }\n+}\n+\n+----\n+\n+The test can be easily run by issuing: `./mvnw test`\n+\n+== Package and run the application\n+\n+Quarkus dev mode works with the defined repositories just like with any other Quarkus extension, greatly enhancing your productivity during the dev cycle.\n+The application can be started in dev mode as usual using:\n+\n+[source, bash]\n+----\n+./mvnw compile quarkus:dev\n+----\n+\n+== Run the application as a native binary\n+\n+You can of course create a native executable following the instructions of the link:building-native-image[this] guide.\n+\n+== Supported Spring Data REST functionalities\n+\n+Quarkus currently supports a subset of Spring Data REST features, namely the most useful and most commonly used features.\n+\n+=== What is supported\n+\n+The following sections described the most important supported features of Spring Data REST.\n+\n+==== Automatic REST endpoint generation\n+\n+Interfaces that extend any of the following Spring Data repositories get automatically generated REST endpoints:\n+\n+* `org.springframework.data.repository.CrudRepository`\n+* `org.springframework.data.repository.PagingAndSortingRepository`\n+* `org.springframework.data.jpa.repository.JpaRepository`\n+\n+Endpoints generated from the above repositories expose five common REST operations:\n+\n+* `GET /fruits` - lists all entities or returns a page if `PagingAndSortingRepository` or `JpaRepository` is used.\n+* `GET /fruits/:id` - returns an entity by ID.\n+* `POST /fruits` - creates a new entity.\n+* `PUT /fruits/:id` - updates an existing entity or creates a new one with a specified ID (if allowed by the entity definition).\n+* `DELETE /fruits/:id` - deletes an entity by ID.\n+\n+There are two supported data types: `application/json` and `application/hal+json`.\n+The former is used by default, but it is highly recommended to specify which one do you prefer with an `Accept` header.\n+\n+==== Exposing many entities\n+\n+If a database contains many entities, it might not be a great idea to return them all at once.\n+`PagingAndSortingRepository` allows `spring-data-rest` extension to access data in chunks.\n+\n+Replace the `CrudRepository` with `PagingAndSortingRepository` in the `FruitsRepository`:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import org.springframework.data.repository.PagingAndSortingRepository;\n+\n+public interface FruitsRepository extends PagingAndSortingRepository<Fruit, Long> {\n+}\n+----\n+\n+Now the `GET /fruits` will accept three new query parameters: `sort`, `page` and `size`.\n+\n+|===\n+| Query parameter | Description | Default value | Example values\n+\n+| `sort`\n+| Sorts the entities that are returned by the list operation\n+| \"\"\n+| `?sort=name` (ascending name), `?sort=name,-color` (ascending name and descending color)\n+\n+| `page`\n+| Zero indexed page number. Invalid value is interpreted as 0.\n+| 0\n+| 0, 11, 100\n+\n+| `size`\n+| Page size. Minimal accepted value is 1. Any lower value is interpreted as 1.\n+| 20\n+| 1, 11, 100\n+|===\n+\n+For paged responses, `spring-data-rest` also returns a set of link headers that can be used to access other pages: first, previous, next and last.\n+\n+==== Fine tuning endpoints generation\n+\n+This allows user to specify which methods should be exposed and what path should be used to access them.\n+Spring Data REST provides two annotations that can be used: `@RepositoryRestResource` and `@RestResource`.\n+`spring-data-rest` extension supports the `exported` and `path` attributes of these annotations.\n+\n+Assume for example that fruits repository should be accessible by a `/my-fruits` path and only allow `GET` operation.\n+In such a case, `FruitsRepository` would look like so:\n+\n+[source,java]\n+----\n+package org.acme.spring.data.rest;\n+\n+import java.util.Optional;\n+\n+import org.springframework.data.repository.CrudRepository;\n+import org.springframework.data.rest.core.annotation.RepositoryRestResource;\n+import org.springframework.data.rest.core.annotation.RestResource;\n+\n+@RepositoryRestResource(exported = false, path = \"/my-fruits\")\n+public interface FruitsRepository extends CrudRepository<Fruit, Long> {\n+\n+    @RestResource(exported = true)\n+    Optional<Fruit> findById(Long id);\n+\n+    @RestResource(exported = true)\n+    Iterable<Fruit> findAll();\n+}\n+----\n+\n+`spring-data-rest` uses only a subset of the repository methods for data access.\n+It is important to annotate the correct method in order to customize its REST endpoint:\n+\n+|===\n+|REST operation |CrudRepository |PagingAndSortingRepository and JpaRepository\n+\n+|Get by ID\n+|`Optional<T> findById(ID id)`\n+|`Optional<T> findById(ID id)`\n+\n+|List\n+|`Iterable<T> findAll()`\n+|`Page<T> findAll(Pageable pageable)`\n+\n+|Create\n+|`<S extends T> S save(S entity)`\n+|`<S extends T> S save(S entity)`\n+\n+|Update\n+|`<S extends T> S save(S entity)`\n+|`<S extends T> S save(S entity)`\n+\n+|Delete\n+|`void deleteById(ID id)`\n+|`void deleteById(ID id)`\n+|===\n+\n+=== What is currently unsupported\n+\n+* Only the repository methods listed above are supported. No other standard or custom methods are supported.\n+* Only the `exposed` and `path` REST resource annotation properties are supported.\n+\n+== Important Technical Note\n+\n+Please note that the Spring support in Quarkus does not start a Spring Application Context nor are any Spring infrastructure classes run.\n+Spring classes and annotations are only used for reading metadata and / or are used as user code method return types or parameter types.\n+\n+== More Spring guides\n+\n+Quarkus has more Spring compatibility features. See the following guides for more details:\n+\n+* link:spring-data-jpa[Quarkus - Extension for Spring Data JPA]\n+* link:spring-di[Quarkus - Extension for Spring DI]\n+* link:spring-web[Quarkus - Extension for Spring Web]\n+* link:spring-security[Quarkus - Extension for Spring Security]\n+* link:spring-cloud-config-client[Quarkus - Reading properties from Spring Cloud Config Server]\n+* link:spring-boot-properties[Quarkus - Extension for Spring Boot properties]\n+* link:spring-cache[Quarkus - Extension for Spring Cache]\n+* link:spring-scheduled[Quarkus - Extension for Spring Scheduled]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "889f9d30fe3ec32b3bee32439e0d866d4981e45f"}, "originalPosition": 441}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyNDY3Nw==", "bodyText": "Please format pom files with 4 spaces (valid for all pom files in this PR).", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r528624677", "createdAt": "2020-11-23T11:07:29Z", "author": {"login": "gsmet"}, "path": "extensions/spring-data-rest/deployment/pom.xml", "diffHunk": "@@ -0,0 +1,72 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>quarkus-spring-data-rest-parent</artifactId>\n+    <groupId>io.quarkus</groupId>\n+    <version>999-SNAPSHOT</version>\n+    <relativePath>../pom.xml</relativePath>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>quarkus-spring-data-rest-deployment</artifactId>\n+  <name>Quarkus - Spring - Data REST - Deployment</name>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "889f9d30fe3ec32b3bee32439e0d866d4981e45f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyNTE2MQ==", "bodyText": "So I understand this shouldn't be merged for now?", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r528625161", "createdAt": "2020-11-23T11:08:25Z", "author": {"login": "gsmet"}, "path": "extensions/spring-data-rest/runtime/pom.xml", "diffHunk": "@@ -0,0 +1,97 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>quarkus-spring-data-rest-parent</artifactId>\n+    <groupId>io.quarkus</groupId>\n+    <version>999-SNAPSHOT</version>\n+    <relativePath>../pom.xml</relativePath>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>quarkus-spring-data-rest</artifactId>\n+  <name>Quarkus - Spring - Data REST - Runtime</name>\n+  <description>Generate JAX-RS resources for a Spring Data application</description>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-rest-data-panache</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-spring-data-jpa</artifactId>\n+    </dependency>\n+    <dependency><!-- TODO create Quarkus Spring Data REST API jar -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "889f9d30fe3ec32b3bee32439e0d866d4981e45f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyNTMwMA==", "bodyText": "This should be in the BOM once you have created the artifact.", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r528625300", "createdAt": "2020-11-23T11:08:41Z", "author": {"login": "gsmet"}, "path": "extensions/spring-data-rest/runtime/pom.xml", "diffHunk": "@@ -0,0 +1,97 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>quarkus-spring-data-rest-parent</artifactId>\n+    <groupId>io.quarkus</groupId>\n+    <version>999-SNAPSHOT</version>\n+    <relativePath>../pom.xml</relativePath>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>quarkus-spring-data-rest</artifactId>\n+  <name>Quarkus - Spring - Data REST - Runtime</name>\n+  <description>Generate JAX-RS resources for a Spring Data application</description>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-rest-data-panache</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-spring-data-jpa</artifactId>\n+    </dependency>\n+    <dependency><!-- TODO create Quarkus Spring Data REST API jar -->\n+      <groupId>org.springframework.data</groupId>\n+      <artifactId>spring-data-rest-core</artifactId>\n+      <version>3.3.0.RELEASE</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "889f9d30fe3ec32b3bee32439e0d866d4981e45f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyNTQ5Nw==", "bodyText": "you should add data and rest as keywords.", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r528625497", "createdAt": "2020-11-23T11:09:04Z", "author": {"login": "gsmet"}, "path": "extensions/spring-data-rest/runtime/src/main/resources/META-INF/quarkus-extension.yaml", "diffHunk": "@@ -0,0 +1,11 @@\n+---\n+name: \"Quarkus Extension for Spring Data REST\"\n+metadata:\n+  keywords:\n+    - \"spring-data\"\n+    - \"spring-data-rest\"\n+    - \"spring\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "889f9d30fe3ec32b3bee32439e0d866d4981e45f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyNjIzOQ==", "bodyText": "Given we are taking the sort parameter from the REST URL, can we check it's not sensitive to SQL injections?", "url": "https://github.com/quarkusio/quarkus/pull/13373#discussion_r528626239", "createdAt": "2020-11-23T11:10:24Z", "author": {"login": "gsmet"}, "path": "extensions/spring-data-rest/deployment/src/main/java/io/quarkus/spring/data/rest/deployment/paging/PagingAndSortingMethodsImplementor.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package io.quarkus.spring.data.rest.deployment.paging;\n+\n+import static io.quarkus.gizmo.FieldDescriptor.of;\n+import static io.quarkus.gizmo.MethodDescriptor.ofMethod;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.jboss.jandex.IndexView;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.data.repository.PagingAndSortingRepository;\n+\n+import io.quarkus.gizmo.AssignableResultHandle;\n+import io.quarkus.gizmo.BranchResult;\n+import io.quarkus.gizmo.BytecodeCreator;\n+import io.quarkus.gizmo.ClassCreator;\n+import io.quarkus.gizmo.MethodCreator;\n+import io.quarkus.gizmo.MethodDescriptor;\n+import io.quarkus.gizmo.ResultHandle;\n+import io.quarkus.panache.common.Page;\n+import io.quarkus.rest.data.panache.deployment.Constants;\n+import io.quarkus.spring.data.rest.deployment.crud.CrudMethodsImplementor;\n+\n+public class PagingAndSortingMethodsImplementor extends CrudMethodsImplementor {\n+\n+    public static final MethodDescriptor LIST_PAGED = ofMethod(PagingAndSortingRepository.class, \"findAll\",\n+            org.springframework.data.domain.Page.class, Pageable.class);\n+\n+    private static final Class<?> PANACHE_PAGE = io.quarkus.panache.common.Page.class;\n+\n+    private static final Class<?> PANACHE_SORT = io.quarkus.panache.common.Sort.class;\n+\n+    private static final Class<?> PANACHE_COLUMN = io.quarkus.panache.common.Sort.Column.class;\n+\n+    private static final Class<?> PANACHE_DIRECTION = io.quarkus.panache.common.Sort.Direction.class;\n+\n+    public PagingAndSortingMethodsImplementor(IndexView index) {\n+        super(index);\n+    }\n+\n+    public void implementList(ClassCreator classCreator, String repositoryInterface) {\n+        MethodCreator methodCreator = classCreator.getMethodCreator(\"list\", List.class, Page.class,\n+                io.quarkus.panache.common.Sort.class);\n+\n+        ResultHandle page = methodCreator.getMethodParam(0);\n+        ResultHandle sort = methodCreator.getMethodParam(1);\n+        ResultHandle pageable = toPageable(methodCreator, page, sort);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "889f9d30fe3ec32b3bee32439e0d866d4981e45f"}, "originalPosition": 49}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "889f9d30fe3ec32b3bee32439e0d866d4981e45f", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/889f9d30fe3ec32b3bee32439e0d866d4981e45f", "committedDate": "2020-11-20T13:24:01Z", "message": "Spring Data REST"}, "afterCommit": {"oid": "9be3e429cfc243a8dedf75e7b4893274c85bfb91", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/9be3e429cfc243a8dedf75e7b4893274c85bfb91", "committedDate": "2020-11-23T11:16:23Z", "message": "Spring Data REST"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2e395fedb9d685c62e93c2e13d45b0a13795e5b5", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/2e395fedb9d685c62e93c2e13d45b0a13795e5b5", "committedDate": "2020-11-23T11:19:11Z", "message": "Update docs/src/main/asciidoc/spring-data-rest.adoc\n\nCo-authored-by: Guillaume Smet <guillaume.smet@gmail.com>"}, "afterCommit": {"oid": "1e017ceded29572b48e81f6f8017432f34bb32bc", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/1e017ceded29572b48e81f6f8017432f34bb32bc", "committedDate": "2020-11-23T11:30:23Z", "message": "Spring Data REST"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1e017ceded29572b48e81f6f8017432f34bb32bc", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/1e017ceded29572b48e81f6f8017432f34bb32bc", "committedDate": "2020-11-23T11:30:23Z", "message": "Spring Data REST"}, "afterCommit": {"oid": "16a005d4d71bceb5c278dfb2e7bb56a5b2a0786e", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/16a005d4d71bceb5c278dfb2e7bb56a5b2a0786e", "committedDate": "2020-11-23T11:48:19Z", "message": "Spring Data REST"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "16a005d4d71bceb5c278dfb2e7bb56a5b2a0786e", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/16a005d4d71bceb5c278dfb2e7bb56a5b2a0786e", "committedDate": "2020-11-23T11:48:19Z", "message": "Spring Data REST"}, "afterCommit": {"oid": "7579a10a241377f6272c3dbacd19947c58706d3c", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/7579a10a241377f6272c3dbacd19947c58706d3c", "committedDate": "2020-11-24T08:27:58Z", "message": "Spring Data REST"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "da7e56b33e7c01e22e8efd54fc656e40efd11625", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/da7e56b33e7c01e22e8efd54fc656e40efd11625", "committedDate": "2020-11-24T11:49:54Z", "message": "Update docs/src/main/asciidoc/spring-data-rest.adoc\n\nCo-authored-by: Guillaume Smet <guillaume.smet@gmail.com>"}, "afterCommit": {"oid": "ed784d14eeec22e66429e543f60bcd50bc67dde4", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/ed784d14eeec22e66429e543f60bcd50bc67dde4", "committedDate": "2020-11-25T11:14:45Z", "message": "Spring Data REST"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ed784d14eeec22e66429e543f60bcd50bc67dde4", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/ed784d14eeec22e66429e543f60bcd50bc67dde4", "committedDate": "2020-11-25T11:14:45Z", "message": "Spring Data REST"}, "afterCommit": {"oid": "e29b9178b71951f0111915966ad9cdb89bbc0d39", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/e29b9178b71951f0111915966ad9cdb89bbc0d39", "committedDate": "2020-12-09T11:06:14Z", "message": "Spring Data REST"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6d52008f8dfef26017652d7237987763035ef9e", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/d6d52008f8dfef26017652d7237987763035ef9e", "committedDate": "2020-12-10T12:36:12Z", "message": "Spring Data REST"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e29b9178b71951f0111915966ad9cdb89bbc0d39", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/e29b9178b71951f0111915966ad9cdb89bbc0d39", "committedDate": "2020-12-09T11:06:14Z", "message": "Spring Data REST"}, "afterCommit": {"oid": "d6d52008f8dfef26017652d7237987763035ef9e", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/d6d52008f8dfef26017652d7237987763035ef9e", "committedDate": "2020-12-10T12:36:12Z", "message": "Spring Data REST"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMjA0Njc3", "url": "https://github.com/quarkusio/quarkus/pull/13373#pullrequestreview-561204677", "createdAt": "2021-01-04T17:26:37Z", "commit": {"oid": "d6d52008f8dfef26017652d7237987763035ef9e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1416, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}