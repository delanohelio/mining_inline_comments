{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4OTg5NzI3", "number": 10208, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOToyMjo0NVrOEISb2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOToyMjo0NVrOEISb2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTI2MTA3OnYy", "diffSide": "RIGHT", "path": "extensions/spring-data-jpa/deployment/src/main/java/io/quarkus/spring/data/deployment/generate/StockMethodsAdder.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOToyMjo0NVrOGoKIhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOTo0ODoyMVrOGoLBaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2MjI0NQ==", "bodyText": "Why this cast?", "url": "https://github.com/quarkusio/quarkus/pull/10208#discussion_r444762245", "createdAt": "2020-06-24T09:22:45Z", "author": {"login": "gsmet"}, "path": "extensions/spring-data-jpa/deployment/src/main/java/io/quarkus/spring/data/deployment/generate/StockMethodsAdder.java", "diffHunk": "@@ -134,6 +134,13 @@ private void generateSave(ClassCreator classCreator, FieldDescriptor entityClass\n                     BytecodeCreator idValueUnset;\n                     BytecodeCreator idValueSet;\n                     if (idType instanceof PrimitiveType) {\n+                        if (!idType.name().equals(DotNames.PRIMITIVE_LONG)\n+                                && !idType.name().equals(DotNames.PRIMITIVE_INTEGER)) {\n+                            throw new IllegalArgumentException(\"Id type of '\" + entityDotName + \"' is invalid.\");\n+                        }\n+                        if (idType.name().equals(DotNames.PRIMITIVE_LONG)) {\n+                            idValue = save.checkCast(idValue, int.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4c59cf1f5a3307a6be43df9ff9c880a3e7f839"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2NDUzOQ==", "bodyText": "We need to cast into int otherwise the bytecode verifier complains about bad operands on the stack (because ifne that follows expects an int to be on the stack - we don't care about it's value, we only care if it's zero or not).", "url": "https://github.com/quarkusio/quarkus/pull/10208#discussion_r444764539", "createdAt": "2020-06-24T09:26:44Z", "author": {"login": "geoand"}, "path": "extensions/spring-data-jpa/deployment/src/main/java/io/quarkus/spring/data/deployment/generate/StockMethodsAdder.java", "diffHunk": "@@ -134,6 +134,13 @@ private void generateSave(ClassCreator classCreator, FieldDescriptor entityClass\n                     BytecodeCreator idValueUnset;\n                     BytecodeCreator idValueSet;\n                     if (idType instanceof PrimitiveType) {\n+                        if (!idType.name().equals(DotNames.PRIMITIVE_LONG)\n+                                && !idType.name().equals(DotNames.PRIMITIVE_INTEGER)) {\n+                            throw new IllegalArgumentException(\"Id type of '\" + entityDotName + \"' is invalid.\");\n+                        }\n+                        if (idType.name().equals(DotNames.PRIMITIVE_LONG)) {\n+                            idValue = save.checkCast(idValue, int.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2MjI0NQ=="}, "originalCommit": {"oid": "3e4c59cf1f5a3307a6be43df9ff9c880a3e7f839"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3NDE2Mg==", "bodyText": "I suppose if the long is not a valid int, it won't be zero anyway. That's your rationale?", "url": "https://github.com/quarkusio/quarkus/pull/10208#discussion_r444774162", "createdAt": "2020-06-24T09:43:51Z", "author": {"login": "gsmet"}, "path": "extensions/spring-data-jpa/deployment/src/main/java/io/quarkus/spring/data/deployment/generate/StockMethodsAdder.java", "diffHunk": "@@ -134,6 +134,13 @@ private void generateSave(ClassCreator classCreator, FieldDescriptor entityClass\n                     BytecodeCreator idValueUnset;\n                     BytecodeCreator idValueSet;\n                     if (idType instanceof PrimitiveType) {\n+                        if (!idType.name().equals(DotNames.PRIMITIVE_LONG)\n+                                && !idType.name().equals(DotNames.PRIMITIVE_INTEGER)) {\n+                            throw new IllegalArgumentException(\"Id type of '\" + entityDotName + \"' is invalid.\");\n+                        }\n+                        if (idType.name().equals(DotNames.PRIMITIVE_LONG)) {\n+                            idValue = save.checkCast(idValue, int.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2MjI0NQ=="}, "originalCommit": {"oid": "3e4c59cf1f5a3307a6be43df9ff9c880a3e7f839"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3NjgwOA==", "bodyText": "Exactly", "url": "https://github.com/quarkusio/quarkus/pull/10208#discussion_r444776808", "createdAt": "2020-06-24T09:48:21Z", "author": {"login": "geoand"}, "path": "extensions/spring-data-jpa/deployment/src/main/java/io/quarkus/spring/data/deployment/generate/StockMethodsAdder.java", "diffHunk": "@@ -134,6 +134,13 @@ private void generateSave(ClassCreator classCreator, FieldDescriptor entityClass\n                     BytecodeCreator idValueUnset;\n                     BytecodeCreator idValueSet;\n                     if (idType instanceof PrimitiveType) {\n+                        if (!idType.name().equals(DotNames.PRIMITIVE_LONG)\n+                                && !idType.name().equals(DotNames.PRIMITIVE_INTEGER)) {\n+                            throw new IllegalArgumentException(\"Id type of '\" + entityDotName + \"' is invalid.\");\n+                        }\n+                        if (idType.name().equals(DotNames.PRIMITIVE_LONG)) {\n+                            idValue = save.checkCast(idValue, int.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2MjI0NQ=="}, "originalCommit": {"oid": "3e4c59cf1f5a3307a6be43df9ff9c880a3e7f839"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2813, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}