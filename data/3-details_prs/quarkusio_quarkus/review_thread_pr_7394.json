{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MTIwMDIx", "number": 7394, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMTozNzozNFrODiiaSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMTo0NDo1M1rODiiexw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTQxOTYxOnYy", "diffSide": "RIGHT", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusGradleUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMTozNzozNFrOFt16yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMTozNzozNFrOFt16yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxMzY0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);\n          \n          \n            \n                        throw new UncheckedIOException(ERROR_COLLECTING_PROJECT_CLASSES, e);", "url": "https://github.com/quarkusio/quarkus/pull/7394#discussion_r383613640", "createdAt": "2020-02-25T01:37:34Z", "author": {"login": "gastaldi"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusGradleUtils.java", "diffHunk": "@@ -1,19 +1,79 @@\n package io.quarkus.gradle.tasks;\n \n+import java.io.File;\n import java.io.IOException;\n import java.io.ObjectOutputStream;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.gradle.api.file.FileCollection;\n+import org.gradle.api.internal.AbstractTask;\n+import org.gradle.api.tasks.SourceSet;\n \n import io.quarkus.bootstrap.model.AppModel;\n \n public class QuarkusGradleUtils {\n \n+    private static final String ERROR_COLLECTING_PROJECT_CLASSES = \"Failed to collect project's classes in a temporary dir\";\n+\n     public static Path serializeAppModel(final AppModel appModel) throws IOException {\n         final Path serializedModel = Files.createTempFile(\"quarkus-\", \"-gradle-test\");\n         try (ObjectOutputStream out = new ObjectOutputStream(Files.newOutputStream(serializedModel))) {\n             out.writeObject(appModel);\n         }\n         return serializedModel;\n     }\n+\n+    public static String getClassesDir(SourceSet sourceSet, AbstractTask context) {\n+        final Set<String> sourcePaths = new HashSet<>();\n+        for (File sourceDir : sourceSet.getAllJava().getSrcDirs()) {\n+            sourcePaths.add(sourceDir.getAbsolutePath());\n+        }\n+\n+        FileCollection classesDirs = sourceSet.getOutput().getClassesDirs();\n+        Set<File> classDirFiles = classesDirs.getFiles();\n+        if (classDirFiles.size() == 1) {\n+            return classesDirs.getAsPath();\n+        }\n+\n+        //there does not seem to be any sane way of dealing with multiple output dirs, as there does not seem\n+        //to be a way to map them. We will need to address this at some point, but for now we just stick them\n+        //all in a temp dir\n+\n+        final Path tmpClassesDir = context.getTemporaryDir().toPath().resolve(\"quarkus-app-classes\");\n+        try {\n+            Files.createDirectories(tmpClassesDir);\n+        } catch (IOException e) {\n+            throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60c6c67468527ce677cbee14903a5a268b401565"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTQyNzUyOnYy", "diffSide": "RIGHT", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusGradleUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMTo0MjoyNlrOFt1_gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMTo0MjoyNlrOFt1_gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxNDg0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            stream.forEach(s -> {\n          \n          \n            \n                            stream.filter(Files::isRegularFile).forEach (s-> {", "url": "https://github.com/quarkusio/quarkus/pull/7394#discussion_r383614849", "createdAt": "2020-02-25T01:42:26Z", "author": {"login": "gastaldi"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusGradleUtils.java", "diffHunk": "@@ -1,19 +1,79 @@\n package io.quarkus.gradle.tasks;\n \n+import java.io.File;\n import java.io.IOException;\n import java.io.ObjectOutputStream;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.gradle.api.file.FileCollection;\n+import org.gradle.api.internal.AbstractTask;\n+import org.gradle.api.tasks.SourceSet;\n \n import io.quarkus.bootstrap.model.AppModel;\n \n public class QuarkusGradleUtils {\n \n+    private static final String ERROR_COLLECTING_PROJECT_CLASSES = \"Failed to collect project's classes in a temporary dir\";\n+\n     public static Path serializeAppModel(final AppModel appModel) throws IOException {\n         final Path serializedModel = Files.createTempFile(\"quarkus-\", \"-gradle-test\");\n         try (ObjectOutputStream out = new ObjectOutputStream(Files.newOutputStream(serializedModel))) {\n             out.writeObject(appModel);\n         }\n         return serializedModel;\n     }\n+\n+    public static String getClassesDir(SourceSet sourceSet, AbstractTask context) {\n+        final Set<String> sourcePaths = new HashSet<>();\n+        for (File sourceDir : sourceSet.getAllJava().getSrcDirs()) {\n+            sourcePaths.add(sourceDir.getAbsolutePath());\n+        }\n+\n+        FileCollection classesDirs = sourceSet.getOutput().getClassesDirs();\n+        Set<File> classDirFiles = classesDirs.getFiles();\n+        if (classDirFiles.size() == 1) {\n+            return classesDirs.getAsPath();\n+        }\n+\n+        //there does not seem to be any sane way of dealing with multiple output dirs, as there does not seem\n+        //to be a way to map them. We will need to address this at some point, but for now we just stick them\n+        //all in a temp dir\n+\n+        final Path tmpClassesDir = context.getTemporaryDir().toPath().resolve(\"quarkus-app-classes\");\n+        try {\n+            Files.createDirectories(tmpClassesDir);\n+        } catch (IOException e) {\n+            throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);\n+        }\n+        for (File c : classDirFiles) {\n+            Path cd = c.toPath();\n+            if (!Files.exists(cd)) {\n+                continue;\n+            }\n+            try (Stream<Path> stream = Files.walk(cd)) {\n+                stream.forEach(s -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60c6c67468527ce677cbee14903a5a268b401565"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTQyOTQyOnYy", "diffSide": "RIGHT", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusGradleUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMTo0Mzo0NVrOFt2AvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMTo0Mzo0NVrOFt2AvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxNTE2NA==", "bodyText": "Files.copy(s, targetPath) is faster", "url": "https://github.com/quarkusio/quarkus/pull/7394#discussion_r383615164", "createdAt": "2020-02-25T01:43:45Z", "author": {"login": "gastaldi"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusGradleUtils.java", "diffHunk": "@@ -1,19 +1,79 @@\n package io.quarkus.gradle.tasks;\n \n+import java.io.File;\n import java.io.IOException;\n import java.io.ObjectOutputStream;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.gradle.api.file.FileCollection;\n+import org.gradle.api.internal.AbstractTask;\n+import org.gradle.api.tasks.SourceSet;\n \n import io.quarkus.bootstrap.model.AppModel;\n \n public class QuarkusGradleUtils {\n \n+    private static final String ERROR_COLLECTING_PROJECT_CLASSES = \"Failed to collect project's classes in a temporary dir\";\n+\n     public static Path serializeAppModel(final AppModel appModel) throws IOException {\n         final Path serializedModel = Files.createTempFile(\"quarkus-\", \"-gradle-test\");\n         try (ObjectOutputStream out = new ObjectOutputStream(Files.newOutputStream(serializedModel))) {\n             out.writeObject(appModel);\n         }\n         return serializedModel;\n     }\n+\n+    public static String getClassesDir(SourceSet sourceSet, AbstractTask context) {\n+        final Set<String> sourcePaths = new HashSet<>();\n+        for (File sourceDir : sourceSet.getAllJava().getSrcDirs()) {\n+            sourcePaths.add(sourceDir.getAbsolutePath());\n+        }\n+\n+        FileCollection classesDirs = sourceSet.getOutput().getClassesDirs();\n+        Set<File> classDirFiles = classesDirs.getFiles();\n+        if (classDirFiles.size() == 1) {\n+            return classesDirs.getAsPath();\n+        }\n+\n+        //there does not seem to be any sane way of dealing with multiple output dirs, as there does not seem\n+        //to be a way to map them. We will need to address this at some point, but for now we just stick them\n+        //all in a temp dir\n+\n+        final Path tmpClassesDir = context.getTemporaryDir().toPath().resolve(\"quarkus-app-classes\");\n+        try {\n+            Files.createDirectories(tmpClassesDir);\n+        } catch (IOException e) {\n+            throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);\n+        }\n+        for (File c : classDirFiles) {\n+            Path cd = c.toPath();\n+            if (!Files.exists(cd)) {\n+                continue;\n+            }\n+            try (Stream<Path> stream = Files.walk(cd)) {\n+                stream.forEach(s -> {\n+                    try {\n+                        if (Files.isDirectory(s)) {\n+                            return;\n+                        }\n+                        final Path file = cd.relativize(tmpClassesDir);\n+                        final Path targetPath = tmpClassesDir.resolve(file.toString());\n+                        Files.createDirectories(targetPath.getParent());\n+                        byte[] data = Files.readAllBytes(s);\n+                        Files.write(targetPath, data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60c6c67468527ce677cbee14903a5a268b401565"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTQyOTgyOnYy", "diffSide": "RIGHT", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusGradleUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMTo0NDowMlrOFt2BAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMTo0NDowMlrOFt2BAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxNTIzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);\n          \n          \n            \n                                    throw new UncheckedIOException(ERROR_COLLECTING_PROJECT_CLASSES, e);", "url": "https://github.com/quarkusio/quarkus/pull/7394#discussion_r383615233", "createdAt": "2020-02-25T01:44:02Z", "author": {"login": "gastaldi"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusGradleUtils.java", "diffHunk": "@@ -1,19 +1,79 @@\n package io.quarkus.gradle.tasks;\n \n+import java.io.File;\n import java.io.IOException;\n import java.io.ObjectOutputStream;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.gradle.api.file.FileCollection;\n+import org.gradle.api.internal.AbstractTask;\n+import org.gradle.api.tasks.SourceSet;\n \n import io.quarkus.bootstrap.model.AppModel;\n \n public class QuarkusGradleUtils {\n \n+    private static final String ERROR_COLLECTING_PROJECT_CLASSES = \"Failed to collect project's classes in a temporary dir\";\n+\n     public static Path serializeAppModel(final AppModel appModel) throws IOException {\n         final Path serializedModel = Files.createTempFile(\"quarkus-\", \"-gradle-test\");\n         try (ObjectOutputStream out = new ObjectOutputStream(Files.newOutputStream(serializedModel))) {\n             out.writeObject(appModel);\n         }\n         return serializedModel;\n     }\n+\n+    public static String getClassesDir(SourceSet sourceSet, AbstractTask context) {\n+        final Set<String> sourcePaths = new HashSet<>();\n+        for (File sourceDir : sourceSet.getAllJava().getSrcDirs()) {\n+            sourcePaths.add(sourceDir.getAbsolutePath());\n+        }\n+\n+        FileCollection classesDirs = sourceSet.getOutput().getClassesDirs();\n+        Set<File> classDirFiles = classesDirs.getFiles();\n+        if (classDirFiles.size() == 1) {\n+            return classesDirs.getAsPath();\n+        }\n+\n+        //there does not seem to be any sane way of dealing with multiple output dirs, as there does not seem\n+        //to be a way to map them. We will need to address this at some point, but for now we just stick them\n+        //all in a temp dir\n+\n+        final Path tmpClassesDir = context.getTemporaryDir().toPath().resolve(\"quarkus-app-classes\");\n+        try {\n+            Files.createDirectories(tmpClassesDir);\n+        } catch (IOException e) {\n+            throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);\n+        }\n+        for (File c : classDirFiles) {\n+            Path cd = c.toPath();\n+            if (!Files.exists(cd)) {\n+                continue;\n+            }\n+            try (Stream<Path> stream = Files.walk(cd)) {\n+                stream.forEach(s -> {\n+                    try {\n+                        if (Files.isDirectory(s)) {\n+                            return;\n+                        }\n+                        final Path file = cd.relativize(tmpClassesDir);\n+                        final Path targetPath = tmpClassesDir.resolve(file.toString());\n+                        Files.createDirectories(targetPath.getParent());\n+                        byte[] data = Files.readAllBytes(s);\n+                        Files.write(targetPath, data);\n+                    } catch (IOException e) {\n+                        throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60c6c67468527ce677cbee14903a5a268b401565"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTQzMDE2OnYy", "diffSide": "RIGHT", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusGradleUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMTo0NDoxN1rOFt2BNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMTo0NDoxN1rOFt2BNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxNTI4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);\n          \n          \n            \n                            throw new UncheckedIOException(ERROR_COLLECTING_PROJECT_CLASSES, e);", "url": "https://github.com/quarkusio/quarkus/pull/7394#discussion_r383615286", "createdAt": "2020-02-25T01:44:17Z", "author": {"login": "gastaldi"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusGradleUtils.java", "diffHunk": "@@ -1,19 +1,79 @@\n package io.quarkus.gradle.tasks;\n \n+import java.io.File;\n import java.io.IOException;\n import java.io.ObjectOutputStream;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.gradle.api.file.FileCollection;\n+import org.gradle.api.internal.AbstractTask;\n+import org.gradle.api.tasks.SourceSet;\n \n import io.quarkus.bootstrap.model.AppModel;\n \n public class QuarkusGradleUtils {\n \n+    private static final String ERROR_COLLECTING_PROJECT_CLASSES = \"Failed to collect project's classes in a temporary dir\";\n+\n     public static Path serializeAppModel(final AppModel appModel) throws IOException {\n         final Path serializedModel = Files.createTempFile(\"quarkus-\", \"-gradle-test\");\n         try (ObjectOutputStream out = new ObjectOutputStream(Files.newOutputStream(serializedModel))) {\n             out.writeObject(appModel);\n         }\n         return serializedModel;\n     }\n+\n+    public static String getClassesDir(SourceSet sourceSet, AbstractTask context) {\n+        final Set<String> sourcePaths = new HashSet<>();\n+        for (File sourceDir : sourceSet.getAllJava().getSrcDirs()) {\n+            sourcePaths.add(sourceDir.getAbsolutePath());\n+        }\n+\n+        FileCollection classesDirs = sourceSet.getOutput().getClassesDirs();\n+        Set<File> classDirFiles = classesDirs.getFiles();\n+        if (classDirFiles.size() == 1) {\n+            return classesDirs.getAsPath();\n+        }\n+\n+        //there does not seem to be any sane way of dealing with multiple output dirs, as there does not seem\n+        //to be a way to map them. We will need to address this at some point, but for now we just stick them\n+        //all in a temp dir\n+\n+        final Path tmpClassesDir = context.getTemporaryDir().toPath().resolve(\"quarkus-app-classes\");\n+        try {\n+            Files.createDirectories(tmpClassesDir);\n+        } catch (IOException e) {\n+            throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);\n+        }\n+        for (File c : classDirFiles) {\n+            Path cd = c.toPath();\n+            if (!Files.exists(cd)) {\n+                continue;\n+            }\n+            try (Stream<Path> stream = Files.walk(cd)) {\n+                stream.forEach(s -> {\n+                    try {\n+                        if (Files.isDirectory(s)) {\n+                            return;\n+                        }\n+                        final Path file = cd.relativize(tmpClassesDir);\n+                        final Path targetPath = tmpClassesDir.resolve(file.toString());\n+                        Files.createDirectories(targetPath.getParent());\n+                        byte[] data = Files.readAllBytes(s);\n+                        Files.write(targetPath, data);\n+                    } catch (IOException e) {\n+                        throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);\n+                    }\n+\n+                });\n+            } catch (IOException e) {\n+                throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60c6c67468527ce677cbee14903a5a268b401565"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTQzMTExOnYy", "diffSide": "RIGHT", "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/classloading/DirectoryClassPathElement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMTo0NDo1M1rOFt2B0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMTo0NDo1M1rOFt2B0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxNTQ0MQ==", "bodyText": "Better also add an assert in the constructor to make sure root is never null", "url": "https://github.com/quarkusio/quarkus/pull/7394#discussion_r383615441", "createdAt": "2020-02-25T01:44:53Z", "author": {"login": "gastaldi"}, "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/classloading/DirectoryClassPathElement.java", "diffHunk": "@@ -102,4 +102,9 @@ public ProtectionDomain getProtectionDomain(ClassLoader classLoader) {\n     public void close() throws IOException {\n         //noop\n     }\n+\n+    @Override\n+    public String toString() {\n+        return root.toAbsolutePath().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60c6c67468527ce677cbee14903a5a268b401565"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4967, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}