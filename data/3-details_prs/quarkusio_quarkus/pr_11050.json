{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MjI2NTcw", "number": 11050, "title": "Qute - improve content type detection", "bodyText": "add config property for additional mappings\nresolves #10991", "createdAt": "2020-07-29T06:31:49Z", "url": "https://github.com/quarkusio/quarkus/pull/11050", "merged": true, "mergeCommit": {"oid": "479957de10359e70589263be3b1f83a7b104e453"}, "closed": true, "closedAt": "2020-07-30T07:15:57Z", "author": {"login": "mkouba"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5lD26AH2gAyNDU4MjI2NTcwOjhkYWJhZDE1MWY2NzZmMzllMGJmZjQ4YzllYzNlODBmYWUzZDNiYjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5qgy8AFqTQ1NzQ4NTk3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8dabad151f676f39e0bff48c9ec3e80fae3d3bb3", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/8dabad151f676f39e0bff48c9ec3e80fae3d3bb3", "committedDate": "2020-07-29T06:30:28Z", "message": "Qute - improve content type detection\n\n- add config property for additional mappings\n- resolves #10991"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NDg1OTc1", "url": "https://github.com/quarkusio/quarkus/pull/11050#pullrequestreview-457485975", "createdAt": "2020-07-29T12:48:40Z", "commit": {"oid": "8dabad151f676f39e0bff48c9ec3e80fae3d3bb3"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjo0ODo0MFrOG42zng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjo0ODo0MFrOG42zng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI3MTM5MA==", "bodyText": "We could use Files.probeContentType too (or instead?) to take advantage of libraries that register their own java.nio.file.spi.FileTypeDetector through the ServiceLoader mechanism", "url": "https://github.com/quarkusio/quarkus/pull/11050#discussion_r462271390", "createdAt": "2020-07-29T12:48:40Z", "author": {"login": "gastaldi"}, "path": "extensions/qute/runtime/src/main/java/io/quarkus/qute/runtime/ContentTypes.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package io.quarkus.qute.runtime;\n+\n+import java.net.URLConnection;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.qute.Variant;\n+\n+@Singleton\n+public class ContentTypes {\n+\n+    private static final Logger LOGGER = Logger.getLogger(ContentTypes.class);\n+\n+    @Inject\n+    QuteConfig config;\n+\n+    /**\n+     * \n+     * @param templatePath The path relative to the template root, uses the {@code /} path separator.\n+     * @return the content type\n+     */\n+    public String getContentType(String templatePath) {\n+        String fileName = templatePath;\n+        int slashIdx = fileName.lastIndexOf('/');\n+        if (slashIdx != -1) {\n+            fileName = fileName.substring(slashIdx, fileName.length());\n+        }\n+        int dotIdx = fileName.lastIndexOf('.');\n+        if (dotIdx != -1) {\n+            String suffix = fileName.substring(dotIdx + 1, fileName.length());\n+            String additionalContentType = config.contentTypes.get(suffix);\n+            if (additionalContentType != null) {\n+                return additionalContentType;\n+            }\n+            if (suffix.equalsIgnoreCase(\"json\")) {\n+                return Variant.APPLICATION_JSON;\n+            }\n+            String contentType = URLConnection.getFileNameMap().getContentTypeFor(fileName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dabad151f676f39e0bff48c9ec3e80fae3d3bb3"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1009, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}