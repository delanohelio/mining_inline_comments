{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MDEwOTUz", "number": 13096, "title": "Make sure Maven commands use the effective project deps, props and managed deps", "bodyText": "This adds a MavenProject-based implementation of the BuildFile which provides the effective lists of the project dependencies, managed dependencies and properties instead of relying on the project's pom.xml, which is not complete from that perspective.\nThis change also \"unsupports\" QuarkusPlatformDescriptor.getManagedDependencies(), this method doesn't seem to be used and should be completely removed in the future versions.", "createdAt": "2020-11-03T21:52:34Z", "url": "https://github.com/quarkusio/quarkus/pull/13096", "merged": true, "mergeCommit": {"oid": "5585184a339bc3740767e50067bfea51c06304fc"}, "closed": true, "closedAt": "2020-11-09T14:23:42Z", "author": {"login": "aloubyansky"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZ1GoMgFqTUyNTA2MzY2MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdayn_aAFqTUyNjEzODcxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1MDYzNjYx", "url": "https://github.com/quarkusio/quarkus/pull/13096#pullrequestreview-525063661", "createdAt": "2020-11-06T11:17:32Z", "commit": {"oid": "3a7df0e2a82ff0672819ed7f17db9f816632379e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMToxNzozMlrOHuqJHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMToxNzozMlrOHuqJHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY4NzAwNQ==", "bodyText": "@aloubyansky  Are the suppliers reading the file each time they are called?", "url": "https://github.com/quarkusio/quarkus/pull/13096#discussion_r518687005", "createdAt": "2020-11-06T11:17:32Z", "author": {"login": "ia3andy"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/MavenProjectBuildFile.java", "diffHunk": "@@ -0,0 +1,195 @@\n+package io.quarkus.maven;\n+\n+import static io.quarkus.devtools.project.extensions.Extensions.toKey;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Properties;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.apache.maven.model.Dependency;\n+import org.apache.maven.model.DependencyManagement;\n+import org.apache.maven.model.Model;\n+\n+import io.quarkus.bootstrap.model.AppArtifactCoords;\n+import io.quarkus.bootstrap.model.AppArtifactKey;\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.devtools.project.buildfile.BuildFile;\n+import io.quarkus.maven.utilities.MojoUtils;\n+import io.quarkus.platform.descriptor.QuarkusPlatformDescriptor;\n+\n+public class MavenProjectBuildFile extends BuildFile {\n+\n+    private static final Pattern PROPERTY_PATTERN = Pattern.compile(\"\\\\$\\\\{(.+)}\");\n+\n+    private Supplier<Model> modelSupplier;\n+    private Supplier<List<org.eclipse.aether.graph.Dependency>> projectDepsSupplier;\n+    private Supplier<List<org.eclipse.aether.graph.Dependency>> projectManagedDepsSupplier;\n+    private Properties projectPropsSupplier;\n+    protected List<AppArtifactCoords> dependencies;\n+    protected List<AppArtifactCoords> managedDependencies;\n+    protected Model model;\n+\n+    public MavenProjectBuildFile(Path projectDirPath, QuarkusPlatformDescriptor platformDescriptor, Supplier<Model> model,\n+            Supplier<List<org.eclipse.aether.graph.Dependency>> projectDeps,\n+            Supplier<List<org.eclipse.aether.graph.Dependency>> projectManagedDeps,\n+            Properties projectProps) {\n+        super(projectDirPath, platformDescriptor);\n+        this.modelSupplier = model;\n+        this.projectDepsSupplier = projectDeps;\n+        this.projectManagedDepsSupplier = projectManagedDeps;\n+        this.projectPropsSupplier = projectProps;\n+    }\n+\n+    @Override\n+    public BuildTool getBuildTool() {\n+        return BuildTool.MAVEN;\n+    }\n+\n+    @Override\n+    protected boolean addDependency(AppArtifactCoords coords, boolean managed) {\n+        final Dependency d = new Dependency();\n+        d.setGroupId(coords.getGroupId());\n+        d.setArtifactId(coords.getArtifactId());\n+        if (!managed) {\n+            d.setVersion(coords.getVersion());\n+        }\n+        // When classifier is empty, you get  <classifier></classifier> in the pom.xml\n+        if (coords.getClassifier() != null && !coords.getClassifier().isEmpty()) {\n+            d.setClassifier(coords.getClassifier());\n+        }\n+        d.setType(coords.getType());\n+        if (\"pom\".equalsIgnoreCase(coords.getType())) {\n+            d.setScope(\"import\");\n+            DependencyManagement dependencyManagement = model().getDependencyManagement();\n+            if (dependencyManagement == null) {\n+                dependencyManagement = new DependencyManagement();\n+                model().setDependencyManagement(dependencyManagement);\n+            }\n+            if (dependencyManagement.getDependencies()\n+                    .stream()\n+                    .noneMatch(thisDep -> d.getManagementKey().equals(resolveKey(thisDep)))) {\n+                dependencyManagement.addDependency(d);\n+                // the effective managed dependencies set may already include it\n+                if (!getManagedDependencies().contains(coords)) {\n+                    getManagedDependencies().add(coords);\n+                }\n+                return true;\n+            }\n+        } else if (model().getDependencies()\n+                .stream()\n+                .noneMatch(thisDep -> d.getManagementKey().equals(thisDep.getManagementKey()))) {\n+            model().addDependency(d);\n+            // it could still be a transitive dependency or inherited from the parent\n+            if (!getDependencies().contains(coords)) {\n+                getDependencies().add(coords);\n+            }\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    protected void removeDependency(AppArtifactKey key) throws IOException {\n+        if (model() != null) {\n+            final Iterator<AppArtifactCoords> i = getDependencies().iterator();\n+            while (i.hasNext()) {\n+                final AppArtifactCoords a = i.next();\n+                if (a.getKey().equals(key)) {\n+                    i.remove();\n+                    break;\n+                }\n+                model().getDependencies().removeIf(d -> Objects.equals(toKey(d), key));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected List<AppArtifactCoords> getDependencies() {\n+        if (dependencies == null) {\n+            final List<org.eclipse.aether.graph.Dependency> projectDeps = projectDepsSupplier.get();\n+            dependencies = new ArrayList<>(projectDeps.size());\n+            for (org.eclipse.aether.graph.Dependency dep : projectDeps) {\n+                org.eclipse.aether.artifact.Artifact a = dep.getArtifact();\n+                dependencies.add(new AppArtifactCoords(a.getGroupId(), a.getArtifactId(), a.getClassifier(),\n+                        a.getExtension(), a.getVersion()));\n+            }\n+        }\n+        return dependencies;\n+    }\n+\n+    protected List<AppArtifactCoords> getManagedDependencies() {\n+        if (managedDependencies == null) {\n+            final List<org.eclipse.aether.graph.Dependency> managedDeps = projectManagedDepsSupplier.get();\n+            managedDependencies = new ArrayList<>(managedDeps.size());\n+            for (org.eclipse.aether.graph.Dependency dep : managedDeps) {\n+                org.eclipse.aether.artifact.Artifact a = dep.getArtifact();\n+                managedDependencies.add(new AppArtifactCoords(a.getGroupId(), a.getArtifactId(), a.getClassifier(),\n+                        a.getExtension(), a.getVersion()));\n+            }\n+        }\n+        return dependencies;\n+    }\n+\n+    @Override\n+    protected void writeToDisk() throws IOException {\n+        if (model == null) {\n+            return;\n+        }\n+        try (ByteArrayOutputStream pomOutputStream = new ByteArrayOutputStream()) {\n+            MojoUtils.write(model(), pomOutputStream);\n+            writeToProjectFile(BuildTool.MAVEN.getDependenciesFile(), pomOutputStream.toByteArray());\n+        }\n+    }\n+\n+    @Override\n+    protected String getProperty(String propertyName) {\n+        return projectPropsSupplier.getProperty(propertyName);\n+    }\n+\n+    @Override\n+    protected void refreshData() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a7df0e2a82ff0672819ed7f17db9f816632379e"}, "originalPosition": 158}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a8b2308a83de871a10e590b59ff9141b4b60dd9", "author": {"user": {"login": "aloubyansky", "name": "Alexey Loubyansky"}}, "url": "https://github.com/quarkusio/quarkus/commit/0a8b2308a83de871a10e590b59ff9141b4b60dd9", "committedDate": "2020-11-06T14:58:18Z", "message": "Make sure Maven commands include the effective project deps, props and managed deps"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3a7df0e2a82ff0672819ed7f17db9f816632379e", "author": {"user": {"login": "aloubyansky", "name": "Alexey Loubyansky"}}, "url": "https://github.com/quarkusio/quarkus/commit/3a7df0e2a82ff0672819ed7f17db9f816632379e", "committedDate": "2020-11-03T21:47:47Z", "message": "Make sure Maven commands include the effective project deps, props and managed deps"}, "afterCommit": {"oid": "0a8b2308a83de871a10e590b59ff9141b4b60dd9", "author": {"user": {"login": "aloubyansky", "name": "Alexey Loubyansky"}}, "url": "https://github.com/quarkusio/quarkus/commit/0a8b2308a83de871a10e590b59ff9141b4b60dd9", "committedDate": "2020-11-06T14:58:18Z", "message": "Make sure Maven commands include the effective project deps, props and managed deps"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MTM4NzEw", "url": "https://github.com/quarkusio/quarkus/pull/13096#pullrequestreview-526138710", "createdAt": "2020-11-09T10:58:12Z", "commit": {"oid": "0a8b2308a83de871a10e590b59ff9141b4b60dd9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1618, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}