{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMjQ2MTEx", "number": 7546, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMzoyMzoyN1rODk2kaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDoyNTozNFrODlEFUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTY5Mzg3OnYy", "diffSide": "RIGHT", "path": "core/runtime/src/main/java/io/quarkus/runtime/graal/WindowsDiagnosticPrinter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMzoyMzoyN1rOFxaQzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMzoyMzoyN1rOFxaQzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM1NDgyOA==", "bodyText": "I'm not satisfied with this, but I didn't find a way in WindowsJavaThreads (or anywhere in GraalVM) to retrieve the Windows native thread ID. Suggestions are welcome here.", "url": "https://github.com/quarkusio/quarkus/pull/7546#discussion_r387354828", "createdAt": "2020-03-03T23:23:27Z", "author": {"login": "gwenneg"}, "path": "core/runtime/src/main/java/io/quarkus/runtime/graal/WindowsDiagnosticPrinter.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package io.quarkus.runtime.graal;\n+\n+import static org.graalvm.nativeimage.Platform.HOSTED_ONLY;\n+import static org.graalvm.nativeimage.Platform.WINDOWS;\n+\n+import java.io.PrintStream;\n+\n+import org.graalvm.nativeimage.ImageSingletons;\n+import org.graalvm.nativeimage.Platforms;\n+import org.graalvm.nativeimage.hosted.Feature;\n+\n+import com.oracle.svm.core.annotate.AutomaticFeature;\n+\n+/**\n+ * A signal handler that prints diagnostic thread info to standard output.\n+ */\n+@Platforms(WINDOWS.class)\n+public final class WindowsDiagnosticPrinter extends DiagnosticPrinter {\n+\n+    @Platforms(HOSTED_ONLY.class)\n+    WindowsDiagnosticPrinter() {\n+    }\n+\n+    @Override\n+    protected void printTid(PrintStream w, Thread thread) {\n+        w.println(\" tid=(unknown)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0d6e75e4b1012b3e74595fe6c4740812446916c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTkwODAyOnYy", "diffSide": "RIGHT", "path": "core/runtime/src/main/java/io/quarkus/runtime/graal/DiagnosticPrinter.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDoyNTozNFrOFxvQeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjozODozOFrOFyAQAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5ODgxMA==", "bodyText": "This solution is likely far more complex than necessary.  Before we go to this extreme, could you try wrapping the POSIX-specific code in a call to com.oracle.svm.core.os.IsDefined#isLinux/#isDarwin?  These values are constant folded and thus allow conditional compilation.", "url": "https://github.com/quarkusio/quarkus/pull/7546#discussion_r387698810", "createdAt": "2020-03-04T14:25:34Z", "author": {"login": "dmlloyd"}, "path": "core/runtime/src/main/java/io/quarkus/runtime/graal/DiagnosticPrinter.java", "diffHunk": "@@ -70,4 +44,6 @@ public static void printDiagnostics(PrintStream w) {\n             }\n         }\n     }\n+\n+    protected abstract void printTid(PrintStream w, Thread thread);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0d6e75e4b1012b3e74595fe6c4740812446916c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcyMzc5NA==", "bodyText": "Thanks for the review! I tried to avoid this complexity at first using a simple\nif (OS.getCurrent() != OS.WINDOWS) {\n    // POSIX-specific code\n}\n\nat first but it didn't work.\nI'll give IsDefined.isDarwin() || IsDefined.isLinux() a try but I'm not convinced it will work better since it will be used in a similar way (as a condition in an if block).\nEdit: Actually, after reading what @Fold does, I have to retract my previous sentence. It will probably work :)", "url": "https://github.com/quarkusio/quarkus/pull/7546#discussion_r387723794", "createdAt": "2020-03-04T15:03:11Z", "author": {"login": "gwenneg"}, "path": "core/runtime/src/main/java/io/quarkus/runtime/graal/DiagnosticPrinter.java", "diffHunk": "@@ -70,4 +44,6 @@ public static void printDiagnostics(PrintStream w) {\n             }\n         }\n     }\n+\n+    protected abstract void printTid(PrintStream w, Thread thread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5ODgxMA=="}, "originalCommit": {"oid": "c0d6e75e4b1012b3e74595fe6c4740812446916c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcyNzk2Mg==", "bodyText": "You might need to move the platform-specific code to methods.  I've had bugs where it didn't work otherwise, though the GraalVM people couldn't explain why.", "url": "https://github.com/quarkusio/quarkus/pull/7546#discussion_r387727962", "createdAt": "2020-03-04T15:09:38Z", "author": {"login": "dmlloyd"}, "path": "core/runtime/src/main/java/io/quarkus/runtime/graal/DiagnosticPrinter.java", "diffHunk": "@@ -70,4 +44,6 @@ public static void printDiagnostics(PrintStream w) {\n             }\n         }\n     }\n+\n+    protected abstract void printTid(PrintStream w, Thread thread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5ODgxMA=="}, "originalCommit": {"oid": "c0d6e75e4b1012b3e74595fe6c4740812446916c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcyOTA4MQ==", "bodyText": "You could probably have still used the OS.getCurrent() != OS.WINDOWS strategy if you put that conditional into a method with the @Fold annotation.  However the problem is that there is no artifact containing this annotation, so there's really no way to add it in real code!", "url": "https://github.com/quarkusio/quarkus/pull/7546#discussion_r387729081", "createdAt": "2020-03-04T15:11:15Z", "author": {"login": "dmlloyd"}, "path": "core/runtime/src/main/java/io/quarkus/runtime/graal/DiagnosticPrinter.java", "diffHunk": "@@ -70,4 +44,6 @@ public static void printDiagnostics(PrintStream w) {\n             }\n         }\n     }\n+\n+    protected abstract void printTid(PrintStream w, Thread thread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5ODgxMA=="}, "originalCommit": {"oid": "c0d6e75e4b1012b3e74595fe6c4740812446916c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk2NTQ1OA==", "bodyText": "I just tested IsDefined and it does solve the issue in a much simpler way. Thanks for the suggestion @dmlloyd!\nThere's only one drawback to it: we can't use IsDefined to include some Windows-specific code since there's no IsDefined.isWindows(), unless we can assume that any OS that is not Linux or Darwin is a Windows OS (which does not sound reasonnable to me).\nIf we want to retrieve and print the Windows native thread ID (assuming it's possible), then the complex version of this PR might be the only way to do it. If not, the IsDefined version is definitely the best one.\nWDYT?", "url": "https://github.com/quarkusio/quarkus/pull/7546#discussion_r387965458", "createdAt": "2020-03-04T22:11:07Z", "author": {"login": "gwenneg"}, "path": "core/runtime/src/main/java/io/quarkus/runtime/graal/DiagnosticPrinter.java", "diffHunk": "@@ -70,4 +44,6 @@ public static void printDiagnostics(PrintStream w) {\n             }\n         }\n     }\n+\n+    protected abstract void printTid(PrintStream w, Thread thread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5ODgxMA=="}, "originalCommit": {"oid": "c0d6e75e4b1012b3e74595fe6c4740812446916c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3NzIxOA==", "bodyText": "I think that for the time being it'd be OK to assume that windows == ! linux && ! macos.  It can always be revisited later, and/or an issue can be opened upstream to request an IsWindows method.\nOne option could be to introduce a utility method somewhere, marked @AlwaysInline, which does this logic so that if/when there's a better way to identify Windows it can be updated in just one place.  But I wouldn't worry too much about it otherwise.", "url": "https://github.com/quarkusio/quarkus/pull/7546#discussion_r387977218", "createdAt": "2020-03-04T22:38:38Z", "author": {"login": "dmlloyd"}, "path": "core/runtime/src/main/java/io/quarkus/runtime/graal/DiagnosticPrinter.java", "diffHunk": "@@ -70,4 +44,6 @@ public static void printDiagnostics(PrintStream w) {\n             }\n         }\n     }\n+\n+    protected abstract void printTid(PrintStream w, Thread thread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5ODgxMA=="}, "originalCommit": {"oid": "c0d6e75e4b1012b3e74595fe6c4740812446916c"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 72, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}