{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NjkzNzM1", "number": 7707, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzoxMDoyMlrODmq8Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzoxMjozM1rODmq_eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODc1OTc5OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/qute-reference.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzoxMDoyMlrOF0OCCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzozOTozOFrOF0PKBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwMDE2OA==", "bodyText": "How different is a virtual method from a @TemplateExtension?", "url": "https://github.com/quarkusio/quarkus/pull/7707#discussion_r390300168", "createdAt": "2020-03-10T13:10:22Z", "author": {"login": "gastaldi"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -242,6 +242,47 @@ If you need to render the unescaped value:\n <1> `title` that resolves to `Expressions & Escapes` will be rendered as `Expressions &amp;amp; Escapes`\n <2> `paragraph` that resolves to `<p>My text!</p>` will be rendered as `<p>My text!</p>`\n \n+===== Virtual Methods\n+\n+A virtual method is a part of an expression that looks like a regular Java method invocation.\n+It's called \"virtual\" because it does not have to match the actual method of a Java class.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63582775b56ed663148c18abae04058a88f7f485"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxMzAxOA==", "bodyText": "Virtual method is just a part of an expression. @TemplateExtension is one of the ways how to evaluate a virtual method. Others include the value resolvers generated for @TemplateData or classes used in parameter declarations - in this case a virtual method invocation is delegated to an existing instance method. But in fact, you can register a custom value resolver like in VirtualMethodParametersTest that is not backed by any Java method.", "url": "https://github.com/quarkusio/quarkus/pull/7707#discussion_r390313018", "createdAt": "2020-03-10T13:31:08Z", "author": {"login": "mkouba"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -242,6 +242,47 @@ If you need to render the unescaped value:\n <1> `title` that resolves to `Expressions & Escapes` will be rendered as `Expressions &amp;amp; Escapes`\n <2> `paragraph` that resolves to `<p>My text!</p>` will be rendered as `<p>My text!</p>`\n \n+===== Virtual Methods\n+\n+A virtual method is a part of an expression that looks like a regular Java method invocation.\n+It's called \"virtual\" because it does not have to match the actual method of a Java class.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwMDE2OA=="}, "originalCommit": {"oid": "63582775b56ed663148c18abae04058a88f7f485"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxODU5Nw==", "bodyText": "It would be nice to add a section explaining that difference", "url": "https://github.com/quarkusio/quarkus/pull/7707#discussion_r390318597", "createdAt": "2020-03-10T13:39:38Z", "author": {"login": "gastaldi"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -242,6 +242,47 @@ If you need to render the unescaped value:\n <1> `title` that resolves to `Expressions & Escapes` will be rendered as `Expressions &amp;amp; Escapes`\n <2> `paragraph` that resolves to `<p>My text!</p>` will be rendered as `<p>My text!</p>`\n \n+===== Virtual Methods\n+\n+A virtual method is a part of an expression that looks like a regular Java method invocation.\n+It's called \"virtual\" because it does not have to match the actual method of a Java class.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwMDE2OA=="}, "originalCommit": {"oid": "63582775b56ed663148c18abae04058a88f7f485"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODc2ODU4OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/qute-reference.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzoxMjozM1rOF0OHZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzozMTo1MVrOF0O2Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwMTU0Mw==", "bodyText": "It would be nice to add a snippet for the buildName virtual method (much easier than explaining it) \ud83d\ude04", "url": "https://github.com/quarkusio/quarkus/pull/7707#discussion_r390301543", "createdAt": "2020-03-10T13:12:33Z", "author": {"login": "gastaldi"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -242,6 +242,47 @@ If you need to render the unescaped value:\n <1> `title` that resolves to `Expressions & Escapes` will be rendered as `Expressions &amp;amp; Escapes`\n <2> `paragraph` that resolves to `<p>My text!</p>` will be rendered as `<p>My text!</p>`\n \n+===== Virtual Methods\n+\n+A virtual method is a part of an expression that looks like a regular Java method invocation.\n+It's called \"virtual\" because it does not have to match the actual method of a Java class.\n+In fact, any virtual method is handled by a value resolver.\n+The only difference compared to regular parts of an expression is that for a virtual method a value resolver accepts parameters that are also expressions.\n+Parameters are always evaluated first.\n+\n+.Virtual Method Example\n+[source,html]\n+----\n+<html>\n+<h1>{item.buildName(item.name,5)}</h1> <1>\n+</html>\n+----\n+<1> `buildName(item.name,5)` represents a virtual method with name `buildName` and two parameters: `item.name` and `5` (integer literal). ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63582775b56ed663148c18abae04058a88f7f485"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxMzQ3OA==", "bodyText": "Ok. I'dd add some more description.", "url": "https://github.com/quarkusio/quarkus/pull/7707#discussion_r390313478", "createdAt": "2020-03-10T13:31:51Z", "author": {"login": "mkouba"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -242,6 +242,47 @@ If you need to render the unescaped value:\n <1> `title` that resolves to `Expressions & Escapes` will be rendered as `Expressions &amp;amp; Escapes`\n <2> `paragraph` that resolves to `<p>My text!</p>` will be rendered as `<p>My text!</p>`\n \n+===== Virtual Methods\n+\n+A virtual method is a part of an expression that looks like a regular Java method invocation.\n+It's called \"virtual\" because it does not have to match the actual method of a Java class.\n+In fact, any virtual method is handled by a value resolver.\n+The only difference compared to regular parts of an expression is that for a virtual method a value resolver accepts parameters that are also expressions.\n+Parameters are always evaluated first.\n+\n+.Virtual Method Example\n+[source,html]\n+----\n+<html>\n+<h1>{item.buildName(item.name,5)}</h1> <1>\n+</html>\n+----\n+<1> `buildName(item.name,5)` represents a virtual method with name `buildName` and two parameters: `item.name` and `5` (integer literal). ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwMTU0Mw=="}, "originalCommit": {"oid": "63582775b56ed663148c18abae04058a88f7f485"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4959, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}