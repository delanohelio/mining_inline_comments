{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NTQxMjI2", "number": 7691, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjowOToyM1rODmQkAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODozODo1MlrODmavMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDQzODQzOnYy", "diffSide": "RIGHT", "path": "integration-tests/kubernetes-client/src/main/java/io/quarkus/it/kubernetes/client/Pods.java", "isResolved": false, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjowOToyNFrOFzkhig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDowMzowNFrOFz3bEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMDEwNg==", "bodyText": "I think we should keep it as is as it's probably what users will do. At least, we shouldn't see that as solving the issue.", "url": "https://github.com/quarkusio/quarkus/pull/7691#discussion_r389620106", "createdAt": "2020-03-09T12:09:24Z", "author": {"login": "gsmet"}, "path": "integration-tests/kubernetes-client/src/main/java/io/quarkus/it/kubernetes/client/Pods.java", "diffHunk": "@@ -28,8 +28,8 @@ public Pods(KubernetesClient kubernetesClient) {\n     @GET\n     @Produces(MediaType.APPLICATION_JSON)\n     @Path(\"/{namespace}\")\n-    public List<Pod> pods(@PathParam(\"namespace\") String namespace) {\n-        return kubernetesClient.pods().inNamespace(namespace).list().getItems();\n+    public Response pods(@PathParam(\"namespace\") String namespace) {\n+        return Response.ok(kubernetesClient.pods().inNamespace(namespace).list().getItems()).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c51ea75fc70ff60b5c69aae2b8c7d13ba806a9b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMDc4MQ==", "bodyText": "I don't agree, at least not in the context of the integration test. The fact that we were returning Pod meant that the entire model hierarchy was being registered for reflection, which we definitely want to avoid", "url": "https://github.com/quarkusio/quarkus/pull/7691#discussion_r389620781", "createdAt": "2020-03-09T12:10:56Z", "author": {"login": "geoand"}, "path": "integration-tests/kubernetes-client/src/main/java/io/quarkus/it/kubernetes/client/Pods.java", "diffHunk": "@@ -28,8 +28,8 @@ public Pods(KubernetesClient kubernetesClient) {\n     @GET\n     @Produces(MediaType.APPLICATION_JSON)\n     @Path(\"/{namespace}\")\n-    public List<Pod> pods(@PathParam(\"namespace\") String namespace) {\n-        return kubernetesClient.pods().inNamespace(namespace).list().getItems();\n+    public Response pods(@PathParam(\"namespace\") String namespace) {\n+        return Response.ok(kubernetesClient.pods().inNamespace(namespace).list().getItems()).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMDEwNg=="}, "originalCommit": {"oid": "2c51ea75fc70ff60b5c69aae2b8c7d13ba806a9b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1ODc1Mg==", "bodyText": "Also if people are looking at integration tests as a model to create their applications, then all the more reason to show them the \"better\" way of doing this for this use case", "url": "https://github.com/quarkusio/quarkus/pull/7691#discussion_r389658752", "createdAt": "2020-03-09T13:24:24Z", "author": {"login": "geoand"}, "path": "integration-tests/kubernetes-client/src/main/java/io/quarkus/it/kubernetes/client/Pods.java", "diffHunk": "@@ -28,8 +28,8 @@ public Pods(KubernetesClient kubernetesClient) {\n     @GET\n     @Produces(MediaType.APPLICATION_JSON)\n     @Path(\"/{namespace}\")\n-    public List<Pod> pods(@PathParam(\"namespace\") String namespace) {\n-        return kubernetesClient.pods().inNamespace(namespace).list().getItems();\n+    public Response pods(@PathParam(\"namespace\") String namespace) {\n+        return Response.ok(kubernetesClient.pods().inNamespace(namespace).list().getItems()).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMDEwNg=="}, "originalCommit": {"oid": "2c51ea75fc70ff60b5c69aae2b8c7d13ba806a9b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc5MzM3NQ==", "bodyText": "I don't know.\nI mean: we need them to be registered for reflection somehow, don't we? Otherwise it won't work well in native image. If our REST-based registration logic doesn't work very well, maybe we need to reconsider it globally?", "url": "https://github.com/quarkusio/quarkus/pull/7691#discussion_r389793375", "createdAt": "2020-03-09T16:07:28Z", "author": {"login": "gsmet"}, "path": "integration-tests/kubernetes-client/src/main/java/io/quarkus/it/kubernetes/client/Pods.java", "diffHunk": "@@ -28,8 +28,8 @@ public Pods(KubernetesClient kubernetesClient) {\n     @GET\n     @Produces(MediaType.APPLICATION_JSON)\n     @Path(\"/{namespace}\")\n-    public List<Pod> pods(@PathParam(\"namespace\") String namespace) {\n-        return kubernetesClient.pods().inNamespace(namespace).list().getItems();\n+    public Response pods(@PathParam(\"namespace\") String namespace) {\n+        return Response.ok(kubernetesClient.pods().inNamespace(namespace).list().getItems()).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMDEwNg=="}, "originalCommit": {"oid": "2c51ea75fc70ff60b5c69aae2b8c7d13ba806a9b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc5Nzc2OA==", "bodyText": "The Kubernetes Model classes are already registered by the Kubernetes extension (weakly) - and that is why the native test works :)", "url": "https://github.com/quarkusio/quarkus/pull/7691#discussion_r389797768", "createdAt": "2020-03-09T16:14:23Z", "author": {"login": "geoand"}, "path": "integration-tests/kubernetes-client/src/main/java/io/quarkus/it/kubernetes/client/Pods.java", "diffHunk": "@@ -28,8 +28,8 @@ public Pods(KubernetesClient kubernetesClient) {\n     @GET\n     @Produces(MediaType.APPLICATION_JSON)\n     @Path(\"/{namespace}\")\n-    public List<Pod> pods(@PathParam(\"namespace\") String namespace) {\n-        return kubernetesClient.pods().inNamespace(namespace).list().getItems();\n+    public Response pods(@PathParam(\"namespace\") String namespace) {\n+        return Response.ok(kubernetesClient.pods().inNamespace(namespace).list().getItems()).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMDEwNg=="}, "originalCommit": {"oid": "2c51ea75fc70ff60b5c69aae2b8c7d13ba806a9b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgwMzgxNQ==", "bodyText": "Yes I know that. What I'm wondering is: should we generalize that or not? So that the model can be used in the REST API calls without thinking twice about it.\nI'm unsure about the consequences thus the reason I ask.", "url": "https://github.com/quarkusio/quarkus/pull/7691#discussion_r389803815", "createdAt": "2020-03-09T16:23:28Z", "author": {"login": "gsmet"}, "path": "integration-tests/kubernetes-client/src/main/java/io/quarkus/it/kubernetes/client/Pods.java", "diffHunk": "@@ -28,8 +28,8 @@ public Pods(KubernetesClient kubernetesClient) {\n     @GET\n     @Produces(MediaType.APPLICATION_JSON)\n     @Path(\"/{namespace}\")\n-    public List<Pod> pods(@PathParam(\"namespace\") String namespace) {\n-        return kubernetesClient.pods().inNamespace(namespace).list().getItems();\n+    public Response pods(@PathParam(\"namespace\") String namespace) {\n+        return Response.ok(kubernetesClient.pods().inNamespace(namespace).list().getItems()).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMDEwNg=="}, "originalCommit": {"oid": "2c51ea75fc70ff60b5c69aae2b8c7d13ba806a9b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgwOTA2Nw==", "bodyText": "You can use it now without having to do anything. The use of Pod as a result type was really an oversight on my part when I created the integration test, it shouldn't have been done that way because it basically shadows the reflection registration that the Kubernetes extensions does by bringing the RESTEasy reflection generation in the mix", "url": "https://github.com/quarkusio/quarkus/pull/7691#discussion_r389809067", "createdAt": "2020-03-09T16:31:16Z", "author": {"login": "geoand"}, "path": "integration-tests/kubernetes-client/src/main/java/io/quarkus/it/kubernetes/client/Pods.java", "diffHunk": "@@ -28,8 +28,8 @@ public Pods(KubernetesClient kubernetesClient) {\n     @GET\n     @Produces(MediaType.APPLICATION_JSON)\n     @Path(\"/{namespace}\")\n-    public List<Pod> pods(@PathParam(\"namespace\") String namespace) {\n-        return kubernetesClient.pods().inNamespace(namespace).list().getItems();\n+    public Response pods(@PathParam(\"namespace\") String namespace) {\n+        return Response.ok(kubernetesClient.pods().inNamespace(namespace).list().getItems()).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMDEwNg=="}, "originalCommit": {"oid": "2c51ea75fc70ff60b5c69aae2b8c7d13ba806a9b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgxMDQyMg==", "bodyText": "Users will do that. You can be sure of that. So should we change the RESTEasy reflection registration to be weak too?\nThat's what I'm trying to ask since the beginning :).", "url": "https://github.com/quarkusio/quarkus/pull/7691#discussion_r389810422", "createdAt": "2020-03-09T16:33:12Z", "author": {"login": "gsmet"}, "path": "integration-tests/kubernetes-client/src/main/java/io/quarkus/it/kubernetes/client/Pods.java", "diffHunk": "@@ -28,8 +28,8 @@ public Pods(KubernetesClient kubernetesClient) {\n     @GET\n     @Produces(MediaType.APPLICATION_JSON)\n     @Path(\"/{namespace}\")\n-    public List<Pod> pods(@PathParam(\"namespace\") String namespace) {\n-        return kubernetesClient.pods().inNamespace(namespace).list().getItems();\n+    public Response pods(@PathParam(\"namespace\") String namespace) {\n+        return Response.ok(kubernetesClient.pods().inNamespace(namespace).list().getItems()).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMDEwNg=="}, "originalCommit": {"oid": "2c51ea75fc70ff60b5c69aae2b8c7d13ba806a9b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgxMjI4Ng==", "bodyText": "We can certainly do that, but I think it should be a following PR. We would need to do introduce a new Build Item that would be consumed by RESTEasy - or maybe it needs to be even more generalized (by forcing the weak flag)", "url": "https://github.com/quarkusio/quarkus/pull/7691#discussion_r389812286", "createdAt": "2020-03-09T16:36:13Z", "author": {"login": "geoand"}, "path": "integration-tests/kubernetes-client/src/main/java/io/quarkus/it/kubernetes/client/Pods.java", "diffHunk": "@@ -28,8 +28,8 @@ public Pods(KubernetesClient kubernetesClient) {\n     @GET\n     @Produces(MediaType.APPLICATION_JSON)\n     @Path(\"/{namespace}\")\n-    public List<Pod> pods(@PathParam(\"namespace\") String namespace) {\n-        return kubernetesClient.pods().inNamespace(namespace).list().getItems();\n+    public Response pods(@PathParam(\"namespace\") String namespace) {\n+        return Response.ok(kubernetesClient.pods().inNamespace(namespace).list().getItems()).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMDEwNg=="}, "originalCommit": {"oid": "2c51ea75fc70ff60b5c69aae2b8c7d13ba806a9b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkyOTc0NQ==", "bodyText": "Furthermore, we haven't had any users complain so far, so I maybe we shouldn't add extra complexity unless it's necessary", "url": "https://github.com/quarkusio/quarkus/pull/7691#discussion_r389929745", "createdAt": "2020-03-09T20:03:04Z", "author": {"login": "geoand"}, "path": "integration-tests/kubernetes-client/src/main/java/io/quarkus/it/kubernetes/client/Pods.java", "diffHunk": "@@ -28,8 +28,8 @@ public Pods(KubernetesClient kubernetesClient) {\n     @GET\n     @Produces(MediaType.APPLICATION_JSON)\n     @Path(\"/{namespace}\")\n-    public List<Pod> pods(@PathParam(\"namespace\") String namespace) {\n-        return kubernetesClient.pods().inNamespace(namespace).list().getItems();\n+    public Response pods(@PathParam(\"namespace\") String namespace) {\n+        return Response.ok(kubernetesClient.pods().inNamespace(namespace).list().getItems()).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMDEwNg=="}, "originalCommit": {"oid": "2c51ea75fc70ff60b5c69aae2b8c7d13ba806a9b"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjEwNTQ2OnYy", "diffSide": "RIGHT", "path": "core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/ReflectiveClassBuildItem.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODozODo1MlrOFz0wzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDowMjoyOFrOFz3Z5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg4NjE1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    private boolean weak = false;\n          \n          \n            \n                    private boolean weak;", "url": "https://github.com/quarkusio/quarkus/pull/7691#discussion_r389886159", "createdAt": "2020-03-09T18:38:52Z", "author": {"login": "gastaldi"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/ReflectiveClassBuildItem.java", "diffHunk": "@@ -121,6 +121,7 @@ public static Builder builder(String... className) {\n         private boolean methods;\n         private boolean fields;\n         private boolean finalFieldsWritable;\n+        private boolean weak = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eab6c76a116e9ca0653fb5b91365d95a7132dea9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkyOTQ0NA==", "bodyText": "Done", "url": "https://github.com/quarkusio/quarkus/pull/7691#discussion_r389929444", "createdAt": "2020-03-09T20:02:28Z", "author": {"login": "geoand"}, "path": "core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/ReflectiveClassBuildItem.java", "diffHunk": "@@ -121,6 +121,7 @@ public static Builder builder(String... className) {\n         private boolean methods;\n         private boolean fields;\n         private boolean finalFieldsWritable;\n+        private boolean weak = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg4NjE1OQ=="}, "originalCommit": {"oid": "eab6c76a116e9ca0653fb5b91365d95a7132dea9"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4953, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}