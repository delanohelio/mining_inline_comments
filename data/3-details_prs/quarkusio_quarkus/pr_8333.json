{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MDU3MTMw", "number": 8333, "title": "support for using panache with kotlin", "bodyText": "I know there's a fair bit here to discuss so I'm viewing this as an initial spike and we can revise and rethink approaches as those more panache-experienced weigh in.\nTo start, kotlin doesn't have the notion of static.  So the static helper methods on PanacheEntity have been moved to PanacheCompanion.  Two separate visitors are then used to manage the changes need for PanacheEntity and PanacheCompanion functionality.  PanacheRepository is all interface driven so no such distinctions were necessary there.\nNow one of the fun wrinkles I learned in all of this is that kotlin compiles all the default methods on interfaces (though kotlin doesn't really use that term) actually get compiled in to the implementing type.  This means that we can't make simple assumptions about the method being present meaning that it's been overridden by the developer.  It took me some time to figure out how asm works but finally it all came together.\nYou'll notice a JpaOperations.java in there.  It is basically just a copy of what's in the existing panache module.  However, I did not want to depend directly on that as it would lead to confusing autocompletes at dev time having mirrored types available.  So I added some testing to be sure that as the \"main\" panache repo evolves, we can try to catch an API drift that needs to be cleaned up on the kotlin side.\nThere are differences in the PanacheXBase types between the java and kotlin sides of the world.  Because kotlin supports nullable types, I've been able to eliminate some methods from the kotlin variant.  Namely, anything having to do with Optional I've removed as having a Entity? type is much more idiomatic.\nI'm sure I'm missing a few things but it's all up for discussion.  This PR is mostly intended to start the discussion.  It can ship as is but i'm sure i'm missing some nuances wrt panache compatibility and usage.", "createdAt": "2020-04-01T15:09:44Z", "url": "https://github.com/quarkusio/quarkus/pull/8333", "merged": true, "mergeCommit": {"oid": "0b8c70f9339d54d158419140ac71b13377804748"}, "closed": true, "closedAt": "2020-05-11T13:55:16Z", "author": {"login": "evanchooly"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTZsrMAFqTM4NTcwOTEzMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgMgDmAFqTQwOTAyMDMzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NzA5MTMz", "url": "https://github.com/quarkusio/quarkus/pull/8333#pullrequestreview-385709133", "createdAt": "2020-04-01T15:39:25Z", "commit": {"oid": "36ae36db3ec94b41b45588706ae2a5bc8a6cdcbc"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTozOToyNlrOF_GnTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo0NDowMlrOF_G0UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMjk3Mg==", "bodyText": "This is not a correct default for all implementations.", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r401712972", "createdAt": "2020-04-01T15:39:26Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/PanacheEntityEnhancer.java", "diffHunk": "@@ -189,13 +190,15 @@ private void generateMethod(MethodInfo method, AnnotationValue targetReturnTypeE\n             mv.visitEnd();\n         }\n \n-        protected abstract String getModelDescriptor();\n+        protected String getModelDescriptor() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ae36db3ec94b41b45588706ae2a5bc8a6cdcbc"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxNjMwNA==", "bodyText": "Is there really no way to declare that in the PanacheEntityBase supertype? By making it self-parameterised with PanacheEntity<Dog>?", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r401716304", "createdAt": "2020-04-01T15:44:02Z", "author": {"login": "FroMage"}, "path": "integration-tests/hibernate-orm-panache-kotlin/src/main/kotlin/io/quarkus/it/panache/kotlin/Dog.kt", "diffHunk": "@@ -0,0 +1,21 @@\n+package io.quarkus.it.panache.kotlin\n+\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheCompanion\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheEntity\n+import javax.persistence.Entity\n+import javax.persistence.ManyToOne\n+\n+@Entity\n+open class Dog() : PanacheEntity() {\n+    companion object : PanacheCompanion<Dog>()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ae36db3ec94b41b45588706ae2a5bc8a6cdcbc"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NDU5NjUw", "url": "https://github.com/quarkusio/quarkus/pull/8333#pullrequestreview-386459650", "createdAt": "2020-04-02T14:05:24Z", "commit": {"oid": "63742c92dca9ebc56d833717894669903c2a16f7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDowNToyNFrOF_s3HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDowNToyNFrOF_s3HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMzOTYxMg==", "bodyText": "I think this is exactly the same as KotlinPanacheEntityEnhancer#collectFields", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r402339612", "createdAt": "2020-04-02T14:05:24Z", "author": {"login": "geoand"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheCompanionEnhancer.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.deployment;\n+\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.DOTNAME_PANACHE_COMPANION;\n+\n+import java.lang.reflect.Modifier;\n+\n+import javax.persistence.Transient;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.FieldInfo;\n+import org.jboss.jandex.IndexView;\n+import org.objectweb.asm.ClassVisitor;\n+\n+import io.quarkus.gizmo.DescriptorUtils;\n+import io.quarkus.panache.common.deployment.EntityField;\n+import io.quarkus.panache.common.deployment.EntityModel;\n+import io.quarkus.panache.common.deployment.MetamodelInfo;\n+import io.quarkus.panache.common.deployment.PanacheEntityEnhancer;\n+\n+public class KotlinPanacheCompanionEnhancer extends PanacheEntityEnhancer<MetamodelInfo<EntityModel<EntityField>>> {\n+\n+    private static final DotName DOTNAME_TRANSIENT = DotName.createSimple(Transient.class.getName());\n+    private final ClassInfo panacheCompanionClassInfo;\n+\n+    public KotlinPanacheCompanionEnhancer(IndexView index) {\n+        super(index, KotlinPanacheResourceProcessor.DOTNAME_PANACHE_ENTITY_BASE);\n+        modelInfo = new MetamodelInfo<>();\n+        panacheCompanionClassInfo = index.getClassByName(DOTNAME_PANACHE_COMPANION);\n+    }\n+\n+    @Override\n+    public ClassVisitor apply(String className, ClassVisitor outputClassVisitor) {\n+        return new KotlinPanacheCompanionClassVisitor(className, outputClassVisitor, modelInfo, panacheEntityBaseClassInfo,\n+                panacheCompanionClassInfo, indexView.getClassByName(DotName.createSimple(className)));\n+    }\n+\n+    @Override\n+    public void collectFields(ClassInfo classInfo) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63742c92dca9ebc56d833717894669903c2a16f7"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNjA5NzY3", "url": "https://github.com/quarkusio/quarkus/pull/8333#pullrequestreview-392609767", "createdAt": "2020-04-14T05:20:27Z", "commit": {"oid": "3d983cf17d53e85e89b2323ab4d6f5d6cd10b1ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNToyMDoyN1rOGE-miA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNToyMDoyN1rOGE-miA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3MzE2MA==", "bodyText": "This is odd. Why does the bean need to be unremovable? I mean what special thing does Kotlin Panache do that needs to make the bean unremovable when it previously wasn't required?", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r407873160", "createdAt": "2020-04-14T05:20:27Z", "author": {"login": "geoand"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheResourceProcessor.java", "diffHunk": "@@ -0,0 +1,153 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.deployment;\n+\n+import static org.jboss.jandex.DotName.createSimple;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.Type;\n+import org.jetbrains.annotations.NotNull;\n+\n+import io.quarkus.arc.deployment.UnremovableBeanBuildItem;\n+import io.quarkus.arc.processor.BeanInfo;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.ApplicationIndexBuildItem;\n+import io.quarkus.deployment.builditem.BytecodeTransformerBuildItem;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.hibernate.orm.deployment.AdditionalJpaModelBuildItem;\n+import io.quarkus.hibernate.orm.deployment.HibernateEnhancersRegisteredBuildItem;\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheCompanion;\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheEntity;\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheEntityBase;\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheRepository;\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheRepositoryBase;\n+import io.quarkus.hibernate.orm.panache.kotlin.runtime.JpaOperations;\n+import io.quarkus.panache.common.deployment.EntityField;\n+import io.quarkus.panache.common.deployment.EntityModel;\n+import io.quarkus.panache.common.deployment.MetamodelInfo;\n+import io.quarkus.panache.common.deployment.PanacheFieldAccessEnhancer;\n+import io.quarkus.panache.common.deployment.PanacheRepositoryEnhancer;\n+\n+public final class KotlinPanacheResourceProcessor {\n+\n+    private static final Set<DotName> UNREMOVABLE_BEANS = Collections.singleton(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d983cf17d53e85e89b2323ab4d6f5d6cd10b1ae"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNjEwNDE0", "url": "https://github.com/quarkusio/quarkus/pull/8333#pullrequestreview-392610414", "createdAt": "2020-04-14T05:22:37Z", "commit": {"oid": "3d983cf17d53e85e89b2323ab4d6f5d6cd10b1ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNToyMjozOFrOGE-o0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNToyMjozOFrOGE-o0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3Mzc0NA==", "bodyText": "To be removed I assume?", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r407873744", "createdAt": "2020-04-14T05:22:38Z", "author": {"login": "geoand"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/runtime/src/test/kotlin/io/quarkus/hibernate/orm/panache/kotlin/runtime/TestAnalogs.kt", "diffHunk": "@@ -0,0 +1,90 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.runtime\n+\n+\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheCompanion\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheEntityBase\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheQuery\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheRepositoryBase\n+import org.junit.jupiter.api.Assertions.assertTrue\n+import org.junit.jupiter.api.Test\n+import java.lang.reflect.Modifier\n+\n+class TestAnalogs {\n+    @Test\n+    fun testJpaOperations() {\n+        compare(map(io.quarkus.hibernate.orm.panache.runtime.JpaOperations::class.java), map(JpaOperations::class.java))\n+    }\n+\n+    @Test\n+    fun testPanacheQuery() {\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheQuery::class.java), map(PanacheQuery::class.java))\n+    }\n+\n+    @Test\n+    fun testPanacheEntityBase() {\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheEntityBase::class.java, true), map(PanacheCompanion::class.java),\n+                listOf(\"findByIdOptional(arg0:Object, arg1:LockModeType)\",\n+                        \"findByIdOptional(arg0:Object)\",\n+                        \"deleteById(arg0:Object)\"))\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheEntityBase::class.java), map(PanacheEntityBase::class.java))\n+    }\n+\n+    @Test\n+    fun testPanacheRepositoryBase() {\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheRepositoryBase::class.java), map(PanacheRepositoryBase::class.java))\n+    }\n+\n+/*\n+    @Test\n+    fun testPanacheEntity() {\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheEntity::class.java), map(PanacheEntity::class))\n+    }\n+\n+    private fun map(type: KClass<PanacheEntity>): MutableList<String> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d983cf17d53e85e89b2323ab4d6f5d6cd10b1ae"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNjEwNDk2", "url": "https://github.com/quarkusio/quarkus/pull/8333#pullrequestreview-392610496", "createdAt": "2020-04-14T05:22:51Z", "commit": {"oid": "3d983cf17d53e85e89b2323ab4d6f5d6cd10b1ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNToyMjo1MVrOGE-pGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNToyMjo1MVrOGE-pGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3MzgxOQ==", "bodyText": "Is this test disabled for a specific reason?", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r407873819", "createdAt": "2020-04-14T05:22:51Z", "author": {"login": "geoand"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/runtime/src/test/kotlin/io/quarkus/hibernate/orm/panache/kotlin/runtime/TestAnalogs.kt", "diffHunk": "@@ -0,0 +1,90 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.runtime\n+\n+\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheCompanion\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheEntityBase\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheQuery\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheRepositoryBase\n+import org.junit.jupiter.api.Assertions.assertTrue\n+import org.junit.jupiter.api.Test\n+import java.lang.reflect.Modifier\n+\n+class TestAnalogs {\n+    @Test\n+    fun testJpaOperations() {\n+        compare(map(io.quarkus.hibernate.orm.panache.runtime.JpaOperations::class.java), map(JpaOperations::class.java))\n+    }\n+\n+    @Test\n+    fun testPanacheQuery() {\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheQuery::class.java), map(PanacheQuery::class.java))\n+    }\n+\n+    @Test\n+    fun testPanacheEntityBase() {\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheEntityBase::class.java, true), map(PanacheCompanion::class.java),\n+                listOf(\"findByIdOptional(arg0:Object, arg1:LockModeType)\",\n+                        \"findByIdOptional(arg0:Object)\",\n+                        \"deleteById(arg0:Object)\"))\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheEntityBase::class.java), map(PanacheEntityBase::class.java))\n+    }\n+\n+    @Test\n+    fun testPanacheRepositoryBase() {\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheRepositoryBase::class.java), map(PanacheRepositoryBase::class.java))\n+    }\n+\n+/*\n+    @Test\n+    fun testPanacheEntity() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d983cf17d53e85e89b2323ab4d6f5d6cd10b1ae"}, "originalPosition": 39}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d983cf17d53e85e89b2323ab4d6f5d6cd10b1ae", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/3d983cf17d53e85e89b2323ab4d6f5d6cd10b1ae", "committedDate": "2020-04-14T02:24:33Z", "message": "separate away from the java-based ClassVisitors"}, "afterCommit": {"oid": "9ddcd295879cbeba58c2db683174582fce9bbfed", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/9ddcd295879cbeba58c2db683174582fce9bbfed", "committedDate": "2020-04-14T13:21:11Z", "message": "reenable test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fed382d1ff84660a2c65116e5b26dd2805299e1f", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/fed382d1ff84660a2c65116e5b26dd2805299e1f", "committedDate": "2020-04-14T14:11:11Z", "message": "bump port off of 8089.\nnot married to this value.  i picked it at random."}, "afterCommit": {"oid": "25fe74185e27088d01e28a0c5e1b8fbfc8a31ad0", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/25fe74185e27088d01e28a0c5e1b8fbfc8a31ad0", "committedDate": "2020-04-17T19:02:06Z", "message": "rebase and tidy up"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "25fe74185e27088d01e28a0c5e1b8fbfc8a31ad0", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/25fe74185e27088d01e28a0c5e1b8fbfc8a31ad0", "committedDate": "2020-04-17T19:02:06Z", "message": "rebase and tidy up"}, "afterCommit": {"oid": "e7e1ff469b743c25476ecea2729807ee3bbab52a", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/e7e1ff469b743c25476ecea2729807ee3bbab52a", "committedDate": "2020-04-17T19:02:46Z", "message": "support for using panache with kotlin"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e7e1ff469b743c25476ecea2729807ee3bbab52a", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/e7e1ff469b743c25476ecea2729807ee3bbab52a", "committedDate": "2020-04-17T19:02:46Z", "message": "support for using panache with kotlin"}, "afterCommit": {"oid": "78f89f787cff2400e6e689d22a29fcff0fcb9475", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/78f89f787cff2400e6e689d22a29fcff0fcb9475", "committedDate": "2020-04-20T13:51:06Z", "message": "support for using panache with kotlin"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "78f89f787cff2400e6e689d22a29fcff0fcb9475", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/78f89f787cff2400e6e689d22a29fcff0fcb9475", "committedDate": "2020-04-20T13:51:06Z", "message": "support for using panache with kotlin"}, "afterCommit": {"oid": "24bd042f774536364ea0dd480ae083bace194dbb", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/24bd042f774536364ea0dd480ae083bace194dbb", "committedDate": "2020-04-20T15:55:44Z", "message": "support for using panache with kotlin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MjY5NzQ3", "url": "https://github.com/quarkusio/quarkus/pull/8333#pullrequestreview-397269747", "createdAt": "2020-04-21T12:15:39Z", "commit": {"oid": "24bd042f774536364ea0dd480ae083bace194dbb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjoxNTozOVrOGJChGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjoyNDo0NlrOGJC45A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzMTYxMQ==", "bodyText": "Don't repositories have an Id type parameter too?", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r412131611", "createdAt": "2020-04-21T12:15:39Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheRepositoryClassVisitor.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.deployment;\n+\n+import static io.quarkus.gizmo.Gizmo.ASM_API_VERSION;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.CLASS_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.ID_TYPE_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.JPA_OPERATIONS;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.OBJECT_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.PANACHE_ENTITY_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.PANACHE_REPOSITORY_BASE_DOTNAME;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.PANACHE_REPOSITORY_BASE_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.PANACHE_REPOSITORY_SIGNATURE;\n+import static io.quarkus.panache.common.deployment.PanacheRepositoryEnhancer.PanacheRepositoryClassVisitor.findEntityTypeArgumentsForPanacheRepository;\n+import static org.jboss.jandex.DotName.createSimple;\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.INVOKESTATIC;\n+\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.regex.Pattern;\n+\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.MethodInfo;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Type;\n+\n+import io.quarkus.gizmo.Gizmo;\n+import io.quarkus.panache.common.deployment.JandexUtil;\n+\n+class KotlinPanacheRepositoryClassVisitor extends ClassVisitor {\n+\n+    public static final Pattern DEFAULT_IMPLS = Pattern.compile(\".*PanacheRepository.*\\\\$DefaultImpls\");\n+    private final Map<String, MethodInfo> bridgeMethods = new TreeMap<>();\n+    private final IndexView indexView;\n+    private org.objectweb.asm.Type entityType;\n+    private String entitySignature;\n+\n+    public KotlinPanacheRepositoryClassVisitor(String className, ClassVisitor outputClassVisitor, IndexView indexView) {\n+        super(Gizmo.ASM_API_VERSION, outputClassVisitor);\n+        this.indexView = indexView;\n+        indexView.getClassByName(createSimple(className))\n+                .methods()\n+                .forEach(method -> {\n+                    if (method.hasAnnotation(JandexUtil.DOTNAME_GENERATE_BRIDGE)) {\n+                        bridgeMethods.put(method.name() + JandexUtil.getDescriptor(method,\n+                                m -> m.equals(\"Entity\") ? entitySignature : null), method);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24bd042f774536364ea0dd480ae083bace194dbb"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzNjQ3Mw==", "bodyText": "Mmm, it still appears disabled here. Commented out.", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r412136473", "createdAt": "2020-04-21T12:22:57Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/runtime/src/test/kotlin/io/quarkus/hibernate/orm/panache/kotlin/runtime/TestAnalogs.kt", "diffHunk": "@@ -0,0 +1,90 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.runtime\n+\n+\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheCompanion\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheEntityBase\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheQuery\n+import io.quarkus.hibernate.orm.panache.kotlin.PanacheRepositoryBase\n+import org.junit.jupiter.api.Assertions.assertTrue\n+import org.junit.jupiter.api.Test\n+import java.lang.reflect.Modifier\n+\n+class TestAnalogs {\n+    @Test\n+    fun testJpaOperations() {\n+        compare(map(io.quarkus.hibernate.orm.panache.runtime.JpaOperations::class.java), map(JpaOperations::class.java))\n+    }\n+\n+    @Test\n+    fun testPanacheQuery() {\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheQuery::class.java), map(PanacheQuery::class.java))\n+    }\n+\n+    @Test\n+    fun testPanacheEntityBase() {\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheEntityBase::class.java, true), map(PanacheCompanion::class.java),\n+                listOf(\"findByIdOptional(arg0:Object, arg1:LockModeType)\",\n+                        \"findByIdOptional(arg0:Object)\",\n+                        \"deleteById(arg0:Object)\"))\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheEntityBase::class.java), map(PanacheEntityBase::class.java))\n+    }\n+\n+    @Test\n+    fun testPanacheRepositoryBase() {\n+        compare(map(io.quarkus.hibernate.orm.panache.PanacheRepositoryBase::class.java), map(PanacheRepositoryBase::class.java))\n+    }\n+\n+/*\n+    @Test\n+    fun testPanacheEntity() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3MzgxOQ=="}, "originalCommit": {"oid": "3d983cf17d53e85e89b2323ab4d6f5d6cd10b1ae"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzNzcwMA==", "bodyText": "This can't work, as it ignores type arguments. I've already removed this method two times because it's incorrect and lures people into thinking it will work when it does not. In both cases I didn't need that method.", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r412137700", "createdAt": "2020-04-21T12:24:46Z", "author": {"login": "FroMage"}, "path": "extensions/panache/panache-common/deployment/src/main/java/io/quarkus/panache/common/deployment/JandexUtil.java", "diffHunk": "@@ -346,6 +347,23 @@ private static void unbox(MethodVisitor mv, String owner, String methodName, Str\n         mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, owner, methodName, \"()\" + returnTypeSignature, false);\n     }\n \n+    public static MethodInfo findMethod(ClassInfo classInfo, MethodInfo methodInfo) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24bd042f774536364ea0dd480ae083bace194dbb"}, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "24bd042f774536364ea0dd480ae083bace194dbb", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/24bd042f774536364ea0dd480ae083bace194dbb", "committedDate": "2020-04-20T15:55:44Z", "message": "support for using panache with kotlin"}, "afterCommit": {"oid": "115352609d61cd7c1ed6e1e3a80cffe4f8bf98f2", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/115352609d61cd7c1ed6e1e3a80cffe4f8bf98f2", "committedDate": "2020-04-29T18:11:15Z", "message": "support for using panache with kotlin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNzQ0MTk4", "url": "https://github.com/quarkusio/quarkus/pull/8333#pullrequestreview-403744198", "createdAt": "2020-04-30T17:47:34Z", "commit": {"oid": "115352609d61cd7c1ed6e1e3a80cffe4f8bf98f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNzo0NzozNFrOGOz57A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNzo0NzozNFrOGOz57A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4MzY2MA==", "bodyText": "I think this needs to be have some comments on what it does", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r418183660", "createdAt": "2020-04-30T17:47:34Z", "author": {"login": "geoand"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheCompanionClassVisitor.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.deployment;\n+\n+import static io.quarkus.gizmo.Gizmo.ASM_API_VERSION;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.CLASS_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.JPA_OPERATIONS;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.OBJECT_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.PANACHE_COMPANION_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.PANACHE_ENTITY_SIGNATURE;\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.INVOKESTATIC;\n+\n+import java.util.Map;\n+import java.util.StringJoiner;\n+import java.util.TreeMap;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.MethodInfo;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+\n+import io.quarkus.panache.common.deployment.JandexUtil;\n+\n+class KotlinPanacheCompanionClassVisitor extends ClassVisitor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "115352609d61cd7c1ed6e1e3a80cffe4f8bf98f2"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNzQ1MDAy", "url": "https://github.com/quarkusio/quarkus/pull/8333#pullrequestreview-403745002", "createdAt": "2020-04-30T17:48:39Z", "commit": {"oid": "115352609d61cd7c1ed6e1e3a80cffe4f8bf98f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNzo0ODo0MFrOGOz8SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNzo0ODo0MFrOGOz8SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4NDI2NA==", "bodyText": "Looks like this removes the final modifier among other things, but it would good to have some comments", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r418184264", "createdAt": "2020-04-30T17:48:40Z", "author": {"login": "geoand"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheEntityClassVisitor.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.deployment;\n+\n+import java.util.List;\n+import java.util.StringJoiner;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+\n+import io.quarkus.panache.common.deployment.EntityField;\n+import io.quarkus.panache.common.deployment.EntityModel;\n+import io.quarkus.panache.common.deployment.MetamodelInfo;\n+import io.quarkus.panache.common.deployment.PanacheEntityEnhancer;\n+import io.quarkus.panache.common.deployment.PanacheMethodCustomizer;\n+\n+class KotlinPanacheEntityClassVisitor extends PanacheEntityEnhancer.PanacheEntityClassVisitor<EntityField> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "115352609d61cd7c1ed6e1e3a80cffe4f8bf98f2"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNzQ3MDQ2", "url": "https://github.com/quarkusio/quarkus/pull/8333#pullrequestreview-403747046", "createdAt": "2020-04-30T17:51:21Z", "commit": {"oid": "115352609d61cd7c1ed6e1e3a80cffe4f8bf98f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNzo1MToyMVrOGO0CuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNzo1MToyMVrOGO0CuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4NTkxMw==", "bodyText": "I think we need to get rid of this \ud83d\ude09", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r418185913", "createdAt": "2020-04-30T17:51:21Z", "author": {"login": "geoand"}, "path": "integration-tests/pom.xml", "diffHunk": "@@ -17,7 +17,7 @@\n \n     <properties>\n         <maven.deploy.skip>true</maven.deploy.skip>\n-        <quarkus.build.skip>${skipTests}</quarkus.build.skip>\n+<!--        <quarkus.build.skip>${skipTests}</quarkus.build.skip>-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "115352609d61cd7c1ed6e1e3a80cffe4f8bf98f2"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0OTQ4NzE4", "url": "https://github.com/quarkusio/quarkus/pull/8333#pullrequestreview-404948718", "createdAt": "2020-05-04T12:41:16Z", "commit": {"oid": "7223c581d64871fdde2a241609a23593500c0f45"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjo0MToxNlrOGP-ebA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjo0NTo1MVrOGP-pHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwNTQyMA==", "bodyText": "WTF happened here? ;)", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r419405420", "createdAt": "2020-05-04T12:41:16Z", "author": {"login": "FroMage"}, "path": "core/runtime/src/main/java/io/quarkus/runtime/ApplicationLifecycleManager.java", "diffHunk": "@@ -27,7 +27,7 @@\n  * The {@link Application} class is responsible for starting and stopping the application,\n  * but nothing else. This class can be used to run both persistent applications that will run\n  * till they receive a signal, and command mode applications that will run until the main method\n- * returns. This class registers a shutdown hook to properly shut down the application, and handles\n+ * returns. This class registers a shut\u00aadown hook to properly shut down the application, and handles", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7223c581d64871fdde2a241609a23593500c0f45"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwODE1Ng==", "bodyText": "Up.", "url": "https://github.com/quarkusio/quarkus/pull/8333#discussion_r419408156", "createdAt": "2020-05-04T12:45:51Z", "author": {"login": "FroMage"}, "path": "extensions/panache/hibernate-orm-panache-kotlin/deployment/src/main/java/io/quarkus/hibernate/orm/panache/kotlin/deployment/KotlinPanacheRepositoryClassVisitor.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package io.quarkus.hibernate.orm.panache.kotlin.deployment;\n+\n+import static io.quarkus.gizmo.Gizmo.ASM_API_VERSION;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.CLASS_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.ID_TYPE_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.JPA_OPERATIONS;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.OBJECT_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.PANACHE_ENTITY_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.PANACHE_REPOSITORY_BASE_DOTNAME;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.PANACHE_REPOSITORY_BASE_SIGNATURE;\n+import static io.quarkus.hibernate.orm.panache.kotlin.deployment.KotlinPanacheResourceProcessor.PANACHE_REPOSITORY_SIGNATURE;\n+import static io.quarkus.panache.common.deployment.PanacheRepositoryEnhancer.PanacheRepositoryClassVisitor.findEntityTypeArgumentsForPanacheRepository;\n+import static org.jboss.jandex.DotName.createSimple;\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.INVOKESTATIC;\n+\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.regex.Pattern;\n+\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.MethodInfo;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Type;\n+\n+import io.quarkus.gizmo.Gizmo;\n+import io.quarkus.panache.common.deployment.JandexUtil;\n+\n+class KotlinPanacheRepositoryClassVisitor extends ClassVisitor {\n+\n+    public static final Pattern DEFAULT_IMPLS = Pattern.compile(\".*PanacheRepository.*\\\\$DefaultImpls\");\n+    private final Map<String, MethodInfo> bridgeMethods = new TreeMap<>();\n+    private final IndexView indexView;\n+    private org.objectweb.asm.Type entityType;\n+    private String entitySignature;\n+\n+    public KotlinPanacheRepositoryClassVisitor(String className, ClassVisitor outputClassVisitor, IndexView indexView) {\n+        super(Gizmo.ASM_API_VERSION, outputClassVisitor);\n+        this.indexView = indexView;\n+        indexView.getClassByName(createSimple(className))\n+                .methods()\n+                .forEach(method -> {\n+                    if (method.hasAnnotation(JandexUtil.DOTNAME_GENERATE_BRIDGE)) {\n+                        bridgeMethods.put(method.name() + JandexUtil.getDescriptor(method,\n+                                m -> m.equals(\"Entity\") ? entitySignature : null), method);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzMTYxMQ=="}, "originalCommit": {"oid": "24bd042f774536364ea0dd480ae083bace194dbb"}, "originalPosition": 46}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2afc17de800c57ccd4cab31b8153bbb03f541ec1", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/2afc17de800c57ccd4cab31b8153bbb03f541ec1", "committedDate": "2020-05-04T14:44:28Z", "message": "remove unnecessary mapping"}, "afterCommit": {"oid": "7e70ceedcb2c907c8cc6caedee8b21ddaca25298", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/7e70ceedcb2c907c8cc6caedee8b21ddaca25298", "committedDate": "2020-05-05T16:23:42Z", "message": "support for using panache with kotlin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fe965a8b8210d53f21de473276791c2ab5b5b9c", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/8fe965a8b8210d53f21de473276791c2ab5b5b9c", "committedDate": "2020-05-07T16:03:41Z", "message": "support for using panache with kotlin"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1c40138b789ddd588e3b016b73332e9ca6377f15", "author": {"user": {"login": "FroMage", "name": "St\u00e9phane \u00c9pardaud"}}, "url": "https://github.com/quarkusio/quarkus/commit/1c40138b789ddd588e3b016b73332e9ca6377f15", "committedDate": "2020-05-07T14:05:56Z", "message": "Forgot to add hibernate-orm-panache-kotlin to runtime bom"}, "afterCommit": {"oid": "6eb1a8946d48ed492b7acb8777e4a4698b4c78e7", "author": {"user": {"login": "FroMage", "name": "St\u00e9phane \u00c9pardaud"}}, "url": "https://github.com/quarkusio/quarkus/commit/6eb1a8946d48ed492b7acb8777e4a4698b4c78e7", "committedDate": "2020-05-07T16:06:59Z", "message": "Forgot to add hibernate-orm-panache-kotlin to runtime bom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85e32cc85d08e1559c178f7ce6a0f3c217e3c4aa", "author": {"user": {"login": "FroMage", "name": "St\u00e9phane \u00c9pardaud"}}, "url": "https://github.com/quarkusio/quarkus/commit/85e32cc85d08e1559c178f7ce6a0f3c217e3c4aa", "committedDate": "2020-05-07T16:31:38Z", "message": "Shared JpaOperations and PanacheQueryImpl between Java/Kotlin modules\n\nIntroduced quarkus-hibernate-orm-panache-common[-deployment] modules\nJpaOperations and PanacheQueryImpl moved there\nThe processor which registers and checks named queries too\n\nMade the Java and Kotlin modules use this"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f01206d4a18b1a4fdc4210bfe40b193666fc1ff3", "author": {"user": {"login": "FroMage", "name": "St\u00e9phane \u00c9pardaud"}}, "url": "https://github.com/quarkusio/quarkus/commit/f01206d4a18b1a4fdc4210bfe40b193666fc1ff3", "committedDate": "2020-05-07T16:31:38Z", "message": "Forgot to add hibernate-orm-panache-kotlin to runtime bom"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6eb1a8946d48ed492b7acb8777e4a4698b4c78e7", "author": {"user": {"login": "FroMage", "name": "St\u00e9phane \u00c9pardaud"}}, "url": "https://github.com/quarkusio/quarkus/commit/6eb1a8946d48ed492b7acb8777e4a4698b4c78e7", "committedDate": "2020-05-07T16:06:59Z", "message": "Forgot to add hibernate-orm-panache-kotlin to runtime bom"}, "afterCommit": {"oid": "f01206d4a18b1a4fdc4210bfe40b193666fc1ff3", "author": {"user": {"login": "FroMage", "name": "St\u00e9phane \u00c9pardaud"}}, "url": "https://github.com/quarkusio/quarkus/commit/f01206d4a18b1a4fdc4210bfe40b193666fc1ff3", "committedDate": "2020-05-07T16:31:38Z", "message": "Forgot to add hibernate-orm-panache-kotlin to runtime bom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90327511de2616583c60d20cdee73f59372d39d3", "author": {"user": {"login": "FroMage", "name": "St\u00e9phane \u00c9pardaud"}}, "url": "https://github.com/quarkusio/quarkus/commit/90327511de2616583c60d20cdee73f59372d39d3", "committedDate": "2020-05-11T09:42:45Z", "message": "Added unlisted extension descriptor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MDIwMzM4", "url": "https://github.com/quarkusio/quarkus/pull/8333#pullrequestreview-409020338", "createdAt": "2020-05-11T09:45:32Z", "commit": {"oid": "90327511de2616583c60d20cdee73f59372d39d3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4685, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}