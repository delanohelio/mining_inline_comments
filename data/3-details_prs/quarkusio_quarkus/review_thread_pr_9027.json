{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNTA3Nzk1", "number": 9027, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjozMDowMFrOD490eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzo0Njo1OVrOD6Qa6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDU5NzA2OnYy", "diffSide": "RIGHT", "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzRuntimeConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjozMDowMFrOGP-HJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxOToyNDozNlrOGQOxCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5OTQ2MQ==", "bodyText": "There is no need to introduce this config property. Quartz extension is built on top of the Scheduler extension - it's ok to reuse quarkus.scheduler.enabled.", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r419399461", "createdAt": "2020-05-04T12:30:00Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzRuntimeConfig.java", "diffHunk": "@@ -27,4 +27,10 @@\n     @ConfigItem\n     public boolean forceStart;\n \n+    /**\n+     * If the quartz scheduler is enabled\n+     */\n+    @ConfigItem(defaultValue = \"true\")\n+    public boolean enabled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0108de714c051f87a8095c088d51b946488ae34d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3MjMzMA==", "bodyText": "Ok, I removed the configItem from QuartzRuntimeConfig. Now there is only one in SchedulerRuntimeConfig called quarkus.scheduler.enabled.", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r419672330", "createdAt": "2020-05-04T19:24:36Z", "author": {"login": "adrianfiedler"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzRuntimeConfig.java", "diffHunk": "@@ -27,4 +27,10 @@\n     @ConfigItem\n     public boolean forceStart;\n \n+    /**\n+     * If the quartz scheduler is enabled\n+     */\n+    @ConfigItem(defaultValue = \"true\")\n+    public boolean enabled;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5OTQ2MQ=="}, "originalCommit": {"oid": "0108de714c051f87a8095c088d51b946488ae34d"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDYwMDM1OnYy", "diffSide": "RIGHT", "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjozMTowMFrOGP-JGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzo1NTowMFrOGReu7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5OTk2Mw==", "bodyText": "This test will always take at least 5s :-(", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r419399963", "createdAt": "2020-05-04T12:31:00Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest test = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(Jobs.class)\n+                    .addAsResource(new StringAsset(\"quarkus.quartz.enabled=false\"),\n+                            \"application.properties\"));\n+\n+    @Test\n+    public void testNoSchedulerInvocations() throws InterruptedException {\n+        // Check that @Scheduled method was never called\n+        assertFalse(Jobs.LATCH.await(5, TimeUnit.SECONDS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0108de714c051f87a8095c088d51b946488ae34d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3MTIwOQ==", "bodyText": "I reduced the wait time for the latch to 1.1 seconds. Not sure how to get under that time with @Scheduled(every = \"1s\").", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r419671209", "createdAt": "2020-05-04T19:22:42Z", "author": {"login": "adrianfiedler"}, "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest test = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(Jobs.class)\n+                    .addAsResource(new StringAsset(\"quarkus.quartz.enabled=false\"),\n+                            \"application.properties\"));\n+\n+    @Test\n+    public void testNoSchedulerInvocations() throws InterruptedException {\n+        // Check that @Scheduled method was never called\n+        assertFalse(Jobs.LATCH.await(5, TimeUnit.SECONDS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5OTk2Mw=="}, "originalCommit": {"oid": "0108de714c051f87a8095c088d51b946488ae34d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2MjIwOA==", "bodyText": "Hm, maybe we should add boolean isRunning() to the io.quarkus.scheduler.Scheduler so that it would be easier to test the property.\nWe should also clarify that Scheduler#pause() and Scheduler#resume() are no-op if the scheduler is disabled. And probably log a warning if it's disabled and someone attempts to call these methods.", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r419962208", "createdAt": "2020-05-05T09:00:45Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest test = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(Jobs.class)\n+                    .addAsResource(new StringAsset(\"quarkus.quartz.enabled=false\"),\n+                            \"application.properties\"));\n+\n+    @Test\n+    public void testNoSchedulerInvocations() throws InterruptedException {\n+        // Check that @Scheduled method was never called\n+        assertFalse(Jobs.LATCH.await(5, TimeUnit.SECONDS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5OTk2Mw=="}, "originalCommit": {"oid": "0108de714c051f87a8095c088d51b946488ae34d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk3ODgzNA==", "bodyText": "Hm, maybe we should add boolean isRunning() to the io.quarkus.scheduler.Scheduler so that it would be easier to test the property.\n\nEdit: Ah you meant a getter for the already existing boolean. So I guess we need a second one like enabled  so that we can check this property in resume()/pause() and log accordingly. And on creation running will be set to false if scheduler is disabled?", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r419978834", "createdAt": "2020-05-05T09:30:54Z", "author": {"login": "adrianfiedler"}, "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest test = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(Jobs.class)\n+                    .addAsResource(new StringAsset(\"quarkus.quartz.enabled=false\"),\n+                            \"application.properties\"));\n+\n+    @Test\n+    public void testNoSchedulerInvocations() throws InterruptedException {\n+        // Check that @Scheduled method was never called\n+        assertFalse(Jobs.LATCH.await(5, TimeUnit.SECONDS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5OTk2Mw=="}, "originalCommit": {"oid": "0108de714c051f87a8095c088d51b946488ae34d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwMTc4Ng==", "bodyText": "I'd say that it should always return false if enabled=false. Also don't forget that we have 2 impls of Scheduler. The default one and the quartz one. We need to think it over ;-).", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r420001786", "createdAt": "2020-05-05T10:12:58Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest test = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(Jobs.class)\n+                    .addAsResource(new StringAsset(\"quarkus.quartz.enabled=false\"),\n+                            \"application.properties\"));\n+\n+    @Test\n+    public void testNoSchedulerInvocations() throws InterruptedException {\n+        // Check that @Scheduled method was never called\n+        assertFalse(Jobs.LATCH.await(5, TimeUnit.SECONDS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5OTk2Mw=="}, "originalCommit": {"oid": "0108de714c051f87a8095c088d51b946488ae34d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDExNDgzNg==", "bodyText": "Not sure about QuartzScheduler, should we use something like scheduler.getCurrentlyExecutingJobs() > 0 to check if it (any job) is running? Or is a simple boolean check like in SimpleScheduler enough?", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r420114836", "createdAt": "2020-05-05T13:37:31Z", "author": {"login": "adrianfiedler"}, "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest test = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(Jobs.class)\n+                    .addAsResource(new StringAsset(\"quarkus.quartz.enabled=false\"),\n+                            \"application.properties\"));\n+\n+    @Test\n+    public void testNoSchedulerInvocations() throws InterruptedException {\n+        // Check that @Scheduled method was never called\n+        assertFalse(Jobs.LATCH.await(5, TimeUnit.SECONDS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5OTk2Mw=="}, "originalCommit": {"oid": "0108de714c051f87a8095c088d51b946488ae34d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE0Njg5NQ==", "bodyText": "That's a good question. Maybe we should use org.quartz.Scheduler.isInStandbyMode() but in that case we should modify the behavior of QuartzScheduler.pause() and QuartzScheduler.resume(). Currently, we call pauseAll()/resumeAll() but we should probably call standby()/start() instead. @machi1990 WDYT?", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r420146895", "createdAt": "2020-05-05T14:20:16Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest test = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(Jobs.class)\n+                    .addAsResource(new StringAsset(\"quarkus.quartz.enabled=false\"),\n+                            \"application.properties\"));\n+\n+    @Test\n+    public void testNoSchedulerInvocations() throws InterruptedException {\n+        // Check that @Scheduled method was never called\n+        assertFalse(Jobs.LATCH.await(5, TimeUnit.SECONDS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5OTk2Mw=="}, "originalCommit": {"oid": "0108de714c051f87a8095c088d51b946488ae34d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MjUwOA==", "bodyText": "Let's do it.", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r420982508", "createdAt": "2020-05-06T17:55:00Z", "author": {"login": "machi1990"}, "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest test = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(Jobs.class)\n+                    .addAsResource(new StringAsset(\"quarkus.quartz.enabled=false\"),\n+                            \"application.properties\"));\n+\n+    @Test\n+    public void testNoSchedulerInvocations() throws InterruptedException {\n+        // Check that @Scheduled method was never called\n+        assertFalse(Jobs.LATCH.await(5, TimeUnit.SECONDS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5OTk2Mw=="}, "originalCommit": {"oid": "0108de714c051f87a8095c088d51b946488ae34d"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDYwMzAyOnYy", "diffSide": "RIGHT", "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjozMTo0NFrOGP-Kwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTozMToyN1rOGQhfhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwMDM4Ng==", "bodyText": "As I commented on the issue - the preferred solution is to inject the config group directly.", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r419400386", "createdAt": "2020-05-04T12:31:44Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -68,7 +68,8 @@\n     }\n \n     public QuartzScheduler(SchedulerContext context, QuartzSupport quartzSupport, Config config) {\n-        if (!quartzSupport.getRuntimeConfig().forceStart && context.getScheduledMethods().isEmpty()) {\n+        if ((!quartzSupport.getRuntimeConfig().forceStart && context.getScheduledMethods().isEmpty())\n+                || !config.getValue(\"quarkus.quartz.enabled\", Boolean.class)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0108de714c051f87a8095c088d51b946488ae34d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY2OTY5OQ==", "bodyText": "Ok, I tried to inject the runtime config as a variable into QuartzScheduler. Here the tests failed because it was always null. But then I injected it into the constructor and now the tests pass.\nBut if I use the extension directly in any project now, I get those errors with Unsatisfied dependency for type io.quarkus.scheduler.runtime.SchedulerRuntimeConfig and qualifiers [@Default]", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r419669699", "createdAt": "2020-05-04T19:19:55Z", "author": {"login": "adrianfiedler"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -68,7 +68,8 @@\n     }\n \n     public QuartzScheduler(SchedulerContext context, QuartzSupport quartzSupport, Config config) {\n-        if (!quartzSupport.getRuntimeConfig().forceStart && context.getScheduledMethods().isEmpty()) {\n+        if ((!quartzSupport.getRuntimeConfig().forceStart && context.getScheduledMethods().isEmpty())\n+                || !config.getValue(\"quarkus.quartz.enabled\", Boolean.class)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwMDM4Ng=="}, "originalCommit": {"oid": "0108de714c051f87a8095c088d51b946488ae34d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk1NzMzMQ==", "bodyText": "But then I injected it into the constructor and now the tests pass.\n\nThat's weird. Constructor and field injection should behave identically. I'll try to change the code locally...\n\nBut if I use the extension directly in any project now...\n\nDoes it happen in both the production and the dev mode?", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r419957331", "createdAt": "2020-05-05T08:52:28Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -68,7 +68,8 @@\n     }\n \n     public QuartzScheduler(SchedulerContext context, QuartzSupport quartzSupport, Config config) {\n-        if (!quartzSupport.getRuntimeConfig().forceStart && context.getScheduledMethods().isEmpty()) {\n+        if ((!quartzSupport.getRuntimeConfig().forceStart && context.getScheduledMethods().isEmpty())\n+                || !config.getValue(\"quarkus.quartz.enabled\", Boolean.class)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwMDM4Ng=="}, "originalCommit": {"oid": "0108de714c051f87a8095c088d51b946488ae34d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2Mzg2Ng==", "bodyText": "So I've tried to change the code to use field injection (i.e. @Inject SchedulerRuntimeConfig config) and it works fine. However, constructor injection is more appropriate in this particular use case (we don't need to store the config in a field ;-).", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r419963866", "createdAt": "2020-05-05T09:03:45Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -68,7 +68,8 @@\n     }\n \n     public QuartzScheduler(SchedulerContext context, QuartzSupport quartzSupport, Config config) {\n-        if (!quartzSupport.getRuntimeConfig().forceStart && context.getScheduledMethods().isEmpty()) {\n+        if ((!quartzSupport.getRuntimeConfig().forceStart && context.getScheduledMethods().isEmpty())\n+                || !config.getValue(\"quarkus.quartz.enabled\", Boolean.class)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwMDM4Ng=="}, "originalCommit": {"oid": "0108de714c051f87a8095c088d51b946488ae34d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk3MDY0Nw==", "bodyText": "Thanks for investigating! I guess it is then some local mistake on my side.\nThen I will leave it as injected constructor param.", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r419970647", "createdAt": "2020-05-05T09:16:09Z", "author": {"login": "adrianfiedler"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -68,7 +68,8 @@\n     }\n \n     public QuartzScheduler(SchedulerContext context, QuartzSupport quartzSupport, Config config) {\n-        if (!quartzSupport.getRuntimeConfig().forceStart && context.getScheduledMethods().isEmpty()) {\n+        if ((!quartzSupport.getRuntimeConfig().forceStart && context.getScheduledMethods().isEmpty())\n+                || !config.getValue(\"quarkus.quartz.enabled\", Boolean.class)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwMDM4Ng=="}, "originalCommit": {"oid": "0108de714c051f87a8095c088d51b946488ae34d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk3OTE0Mw==", "bodyText": "I've also verified that it works with both the dev and the prod mode using the scheduler-quickstart", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r419979143", "createdAt": "2020-05-05T09:31:27Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -68,7 +68,8 @@\n     }\n \n     public QuartzScheduler(SchedulerContext context, QuartzSupport quartzSupport, Config config) {\n-        if (!quartzSupport.getRuntimeConfig().forceStart && context.getScheduledMethods().isEmpty()) {\n+        if ((!quartzSupport.getRuntimeConfig().forceStart && context.getScheduledMethods().isEmpty())\n+                || !config.getValue(\"quarkus.quartz.enabled\", Boolean.class)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwMDM4Ng=="}, "originalCommit": {"oid": "0108de714c051f87a8095c088d51b946488ae34d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDIyMjI0OnYy", "diffSide": "RIGHT", "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODo1NDoyM1rOGQgOdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODo1NDoyM1rOGQgOdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk1ODM4OA==", "bodyText": "The log message should probably reflect the conditions...", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r419958388", "createdAt": "2020-05-05T08:54:23Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -67,8 +68,10 @@\n         return scheduler;\n     }\n \n-    public QuartzScheduler(SchedulerContext context, QuartzSupport quartzSupport, Config config) {\n-        if (!quartzSupport.getRuntimeConfig().forceStart && context.getScheduledMethods().isEmpty()) {\n+    public QuartzScheduler(SchedulerContext context, QuartzSupport quartzSupport, Config config,\n+            SchedulerRuntimeConfig schedulerRuntimeConfig) {\n+        if ((!quartzSupport.getRuntimeConfig().forceStart && context.getScheduledMethods().isEmpty())\n+                || !schedulerRuntimeConfig.enabled) {\n             LOGGER.infof(\"No scheduled business methods found - Quartz scheduler will not be started\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cacb2e074cbfd1dc4343f61701b020b6f1cb0ba"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDIyNDg0OnYy", "diffSide": "RIGHT", "path": "extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/runtime/SimpleScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODo1NTowN1rOGQgQCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODo1NTowN1rOGQgQCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk1ODc5NQ==", "bodyText": "I think that we should add an INFO log message here as well. WDYT?", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r419958795", "createdAt": "2020-05-05T08:55:07Z", "author": {"login": "mkouba"}, "path": "extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/runtime/SimpleScheduler.java", "diffHunk": "@@ -51,12 +51,12 @@\n     private volatile boolean running;\n     private final List<ScheduledTask> scheduledTasks;\n \n-    public SimpleScheduler(SchedulerContext context, Config config) {\n+    public SimpleScheduler(SchedulerContext context, Config config, SchedulerRuntimeConfig schedulerRuntimeConfig) {\n         this.running = true;\n         this.scheduledTasks = new ArrayList<>();\n         this.executor = context.getExecutor();\n \n-        if (context.getScheduledMethods().isEmpty()) {\n+        if (context.getScheduledMethods().isEmpty() || !schedulerRuntimeConfig.enabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cacb2e074cbfd1dc4343f61701b020b6f1cb0ba"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDY5MTgwOnYy", "diffSide": "RIGHT", "path": "extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/runtime/SimpleScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzo1MTozMlrOGRel-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzo1MTozMlrOGRel-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MDIxNg==", "bodyText": "nitpick:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public boolean isRunning() {\n          \n          \n            \n                    if (!enabled) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    return running;\n          \n          \n            \n                }\n          \n          \n            \n                public boolean isRunning() {\n          \n          \n            \n                    return enabled && running;\n          \n          \n            \n                }", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r420980216", "createdAt": "2020-05-06T17:51:32Z", "author": {"login": "machi1990"}, "path": "extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/runtime/SimpleScheduler.java", "diffHunk": "@@ -137,12 +143,28 @@ public void run() {\n \n     @Override\n     public void pause() {\n-        running = false;\n+        if (!enabled) {\n+            LOGGER.warn(\"Scheduler is disabled and cannot be paused\");\n+        } else {\n+            running = false;\n+        }\n     }\n \n     @Override\n     public void resume() {\n-        running = true;\n+        if (!enabled) {\n+            LOGGER.warn(\"Scheduler is disabled and cannot be resumed\");\n+        } else {\n+            running = true;\n+        }\n+    }\n+\n+    @Override\n+    public boolean isRunning() {\n+        if (!enabled) {\n+            return false;\n+        }\n+        return running;\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1249fd38d8fd01c68e8f2d6d2563ceeb2610aef"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDcxMzY2OnYy", "diffSide": "RIGHT", "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "isResolved": true, "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzo1Njo0NFrOGRezRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOTo1MToxNlrOGRi7Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MzYyMA==", "bodyText": "According to this #8913 (comment), this should be null hence causing a NPE at https://github.com/quarkusio/quarkus/pull/9027/files#diff-b22e0da44e71f897e6899c8e8e9626fbR31 or am I missing something?\n/cc @mkouba", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r420983620", "createdAt": "2020-05-06T17:56:44Z", "author": {"login": "machi1990"}, "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.quartz.runtime.QuartzScheduler;\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @Inject\n+    QuartzScheduler quartzScheduler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1249fd38d8fd01c68e8f2d6d2563ceeb2610aef"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4NDc1Ng==", "bodyText": "+1", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r420984756", "createdAt": "2020-05-06T17:58:30Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.quartz.runtime.QuartzScheduler;\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @Inject\n+    QuartzScheduler quartzScheduler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MzYyMA=="}, "originalCommit": {"oid": "f1249fd38d8fd01c68e8f2d6d2563ceeb2610aef"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5Njc5MQ==", "bodyText": "So I believe that we should throw IllegalStateException from io.quarkus.quartz.runtime.QuartzScheduler.produceQuartzScheduler() if QuartzScheduler.scheduler is null. However, in this case we inject io.quarkus.quartz.runtime.QuartzScheduler which is OK. @adrianfiedler you should rather inject io.quarkus.scheduler.Scheduler which is part of the API (and is implemented by QuartzScheduler).", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r420996791", "createdAt": "2020-05-06T18:18:08Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.quartz.runtime.QuartzScheduler;\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @Inject\n+    QuartzScheduler quartzScheduler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MzYyMA=="}, "originalCommit": {"oid": "f1249fd38d8fd01c68e8f2d6d2563ceeb2610aef"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMTAzNA==", "bodyText": "Totally agree, how about \"Cannot inject not started scheduler\" as message for the ISE?\"", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421011034", "createdAt": "2020-05-06T18:41:48Z", "author": {"login": "adrianfiedler"}, "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.quartz.runtime.QuartzScheduler;\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @Inject\n+    QuartzScheduler quartzScheduler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MzYyMA=="}, "originalCommit": {"oid": "f1249fd38d8fd01c68e8f2d6d2563ceeb2610aef"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMjY1NA==", "bodyText": "I would mention Quartz here. Something like \"Cannot produce org.quartz.Scheduler - Quartz scheduler is disabled\".", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421012654", "createdAt": "2020-05-06T18:44:20Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.quartz.runtime.QuartzScheduler;\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @Inject\n+    QuartzScheduler quartzScheduler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MzYyMA=="}, "originalCommit": {"oid": "f1249fd38d8fd01c68e8f2d6d2563ceeb2610aef"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMzQ0Ng==", "bodyText": "Hm, looking at the CDI spec, we should already throw IllegalProductException because the producer is not @Dependent and returns null. Let me check this...", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421013446", "createdAt": "2020-05-06T18:45:39Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.quartz.runtime.QuartzScheduler;\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @Inject\n+    QuartzScheduler quartzScheduler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MzYyMA=="}, "originalCommit": {"oid": "f1249fd38d8fd01c68e8f2d6d2563ceeb2610aef"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxNDEzNA==", "bodyText": "Ah, we only throw IllegalProductException for normal scoped producers. Which is probably OK.", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421014134", "createdAt": "2020-05-06T18:46:43Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.quartz.runtime.QuartzScheduler;\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @Inject\n+    QuartzScheduler quartzScheduler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MzYyMA=="}, "originalCommit": {"oid": "f1249fd38d8fd01c68e8f2d6d2563ceeb2610aef"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxNDg0OQ==", "bodyText": "There is also one additonal case where org.quartz.Scheduler is null: When no scheduled methods are found and forceStart config is false.", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421014849", "createdAt": "2020-05-06T18:48:07Z", "author": {"login": "adrianfiedler"}, "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.quartz.runtime.QuartzScheduler;\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @Inject\n+    QuartzScheduler quartzScheduler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MzYyMA=="}, "originalCommit": {"oid": "f1249fd38d8fd01c68e8f2d6d2563ceeb2610aef"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxNTUyNw==", "bodyText": "Good point!", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421015527", "createdAt": "2020-05-06T18:49:14Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.quartz.runtime.QuartzScheduler;\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @Inject\n+    QuartzScheduler quartzScheduler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MzYyMA=="}, "originalCommit": {"oid": "f1249fd38d8fd01c68e8f2d6d2563ceeb2610aef"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAzNzQ2Ng==", "bodyText": "So because the producer is @singleton and it throws automatically IllegalProductException - no need to explicitly throw an ISE?", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421037466", "createdAt": "2020-05-06T19:26:24Z", "author": {"login": "adrianfiedler"}, "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.quartz.runtime.QuartzScheduler;\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @Inject\n+    QuartzScheduler quartzScheduler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MzYyMA=="}, "originalCommit": {"oid": "f1249fd38d8fd01c68e8f2d6d2563ceeb2610aef"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA0MTAxNg==", "bodyText": "Okay I double checked and injected org.quartz.Scheduler directly and did not get an IllegalProductException (value was null). I will throw then explicitly the ISE.", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421041016", "createdAt": "2020-05-06T19:32:49Z", "author": {"login": "adrianfiedler"}, "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.quartz.runtime.QuartzScheduler;\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @Inject\n+    QuartzScheduler quartzScheduler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MzYyMA=="}, "originalCommit": {"oid": "f1249fd38d8fd01c68e8f2d6d2563ceeb2610aef"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA1MTE3OA==", "bodyText": "Yes, @Singleton is not a normal scope. +1 for throwing ISE.", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421051178", "createdAt": "2020-05-06T19:51:16Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.quartz.runtime.QuartzScheduler;\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @Inject\n+    QuartzScheduler quartzScheduler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MzYyMA=="}, "originalCommit": {"oid": "f1249fd38d8fd01c68e8f2d6d2563ceeb2610aef"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDcyODg2OnYy", "diffSide": "RIGHT", "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODowMDoyMlrOGRe8pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODowMDoyMlrOGRe8pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4NjAyMA==", "bodyText": "This field should be final.", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r420986020", "createdAt": "2020-05-06T18:00:22Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -60,19 +61,25 @@\n \n     private final org.quartz.Scheduler scheduler;\n     private final Map<String, ScheduledInvoker> invokers;\n+    private boolean enabled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1249fd38d8fd01c68e8f2d6d2563ceeb2610aef"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDc0Mjk3OnYy", "diffSide": "RIGHT", "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODowNDowMlrOGRfFgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODowNDowMlrOGRfFgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4ODI5MQ==", "bodyText": "Message? In fact, I'd just throw an IllegalStateException instead of a warning. Although it seems that isInStandbyMode() never throws an expception...", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r420988291", "createdAt": "2020-05-06T18:04:02Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -185,24 +192,46 @@ public QuartzScheduler(SchedulerContext context, QuartzSupport quartzSupport, Co\n \n     @Override\n     public void pause() {\n-        try {\n-            if (scheduler != null) {\n-                scheduler.pauseAll();\n+        if (!enabled) {\n+            LOGGER.warn(\"Quartz Scheduler is disabled and cannot be paused\");\n+        } else {\n+            try {\n+                if (scheduler != null) {\n+                    scheduler.standby();\n+                }\n+            } catch (SchedulerException e) {\n+                LOGGER.warn(\"Unable to pause scheduler\", e);\n             }\n-        } catch (SchedulerException e) {\n-            LOGGER.warn(\"Unable to pause scheduler\", e);\n         }\n     }\n \n     @Override\n     public void resume() {\n-        try {\n-            if (scheduler != null) {\n-                scheduler.resumeAll();\n+        if (!enabled) {\n+            LOGGER.warn(\"Quartz Scheduler is disabled and cannot be resumed\");\n+        } else {\n+            try {\n+                if (scheduler != null) {\n+                    scheduler.start();\n+                }\n+            } catch (SchedulerException e) {\n+                LOGGER.warn(\"Unable to resume scheduler\", e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean isRunning() {\n+        if (!enabled || scheduler == null) {\n+            return false;\n+        } else {\n+            try {\n+                return !scheduler.isInStandbyMode();\n+            } catch (SchedulerException e) {\n+                LOGGER.warn(\"Unable to resume scheduler\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1249fd38d8fd01c68e8f2d6d2563ceeb2610aef"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDc2Mzg3OnYy", "diffSide": "RIGHT", "path": "extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/Scheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODowOTozOVrOGRfSqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODowOTozOVrOGRfSqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5MTY1OA==", "bodyText": "I think that we should be more specific here. Something like \"If a scheduler is running the triggers are fired and jobs are executed.\"", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r420991658", "createdAt": "2020-05-06T18:09:39Z", "author": {"login": "mkouba"}, "path": "extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/Scheduler.java", "diffHunk": "@@ -18,4 +18,9 @@\n      */\n     void resume();\n \n+    /**\n+     * @return if the scheduler is running", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1249fd38d8fd01c68e8f2d6d2563ceeb2610aef"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDc2ODQ4OnYy", "diffSide": "RIGHT", "path": "extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/runtime/SimpleScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODoxMDo1NlrOGRfVjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODoxMDo1NlrOGRfVjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5MjM5OQ==", "bodyText": "Make it final ;-)", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r420992399", "createdAt": "2020-05-06T18:10:56Z", "author": {"login": "mkouba"}, "path": "extensions/scheduler/runtime/src/main/java/io/quarkus/scheduler/runtime/SimpleScheduler.java", "diffHunk": "@@ -50,14 +50,20 @@\n     private final ExecutorService executor;\n     private volatile boolean running;\n     private final List<ScheduledTask> scheduledTasks;\n+    private boolean enabled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1249fd38d8fd01c68e8f2d6d2563ceeb2610aef"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDgwMDI2OnYy", "diffSide": "RIGHT", "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODoxOToxNlrOGRfpjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOTowMTozMlrOGRhNdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5NzUxNw==", "bodyText": "|| scheduler == null is IMHO redundant and adds no value.", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r420997517", "createdAt": "2020-05-06T18:19:16Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -185,24 +192,46 @@ public QuartzScheduler(SchedulerContext context, QuartzSupport quartzSupport, Co\n \n     @Override\n     public void pause() {\n-        try {\n-            if (scheduler != null) {\n-                scheduler.pauseAll();\n+        if (!enabled) {\n+            LOGGER.warn(\"Quartz Scheduler is disabled and cannot be paused\");\n+        } else {\n+            try {\n+                if (scheduler != null) {\n+                    scheduler.standby();\n+                }\n+            } catch (SchedulerException e) {\n+                LOGGER.warn(\"Unable to pause scheduler\", e);\n             }\n-        } catch (SchedulerException e) {\n-            LOGGER.warn(\"Unable to pause scheduler\", e);\n         }\n     }\n \n     @Override\n     public void resume() {\n-        try {\n-            if (scheduler != null) {\n-                scheduler.resumeAll();\n+        if (!enabled) {\n+            LOGGER.warn(\"Quartz Scheduler is disabled and cannot be resumed\");\n+        } else {\n+            try {\n+                if (scheduler != null) {\n+                    scheduler.start();\n+                }\n+            } catch (SchedulerException e) {\n+                LOGGER.warn(\"Unable to resume scheduler\", e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean isRunning() {\n+        if (!enabled || scheduler == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1249fd38d8fd01c68e8f2d6d2563ceeb2610aef"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyMDM2OQ==", "bodyText": "It can be enabled = true but scheduler can still be null (When no scheduled methods are found and forceStart config is false.)", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421020369", "createdAt": "2020-05-06T18:56:57Z", "author": {"login": "adrianfiedler"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -185,24 +192,46 @@ public QuartzScheduler(SchedulerContext context, QuartzSupport quartzSupport, Co\n \n     @Override\n     public void pause() {\n-        try {\n-            if (scheduler != null) {\n-                scheduler.pauseAll();\n+        if (!enabled) {\n+            LOGGER.warn(\"Quartz Scheduler is disabled and cannot be paused\");\n+        } else {\n+            try {\n+                if (scheduler != null) {\n+                    scheduler.standby();\n+                }\n+            } catch (SchedulerException e) {\n+                LOGGER.warn(\"Unable to pause scheduler\", e);\n             }\n-        } catch (SchedulerException e) {\n-            LOGGER.warn(\"Unable to pause scheduler\", e);\n         }\n     }\n \n     @Override\n     public void resume() {\n-        try {\n-            if (scheduler != null) {\n-                scheduler.resumeAll();\n+        if (!enabled) {\n+            LOGGER.warn(\"Quartz Scheduler is disabled and cannot be resumed\");\n+        } else {\n+            try {\n+                if (scheduler != null) {\n+                    scheduler.start();\n+                }\n+            } catch (SchedulerException e) {\n+                LOGGER.warn(\"Unable to resume scheduler\", e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean isRunning() {\n+        if (!enabled || scheduler == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5NzUxNw=="}, "originalCommit": {"oid": "f1249fd38d8fd01c68e8f2d6d2563ceeb2610aef"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyMTEwOA==", "bodyText": "You're right. I'm sorry for the confusion...", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421021108", "createdAt": "2020-05-06T18:58:10Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -185,24 +192,46 @@ public QuartzScheduler(SchedulerContext context, QuartzSupport quartzSupport, Co\n \n     @Override\n     public void pause() {\n-        try {\n-            if (scheduler != null) {\n-                scheduler.pauseAll();\n+        if (!enabled) {\n+            LOGGER.warn(\"Quartz Scheduler is disabled and cannot be paused\");\n+        } else {\n+            try {\n+                if (scheduler != null) {\n+                    scheduler.standby();\n+                }\n+            } catch (SchedulerException e) {\n+                LOGGER.warn(\"Unable to pause scheduler\", e);\n             }\n-        } catch (SchedulerException e) {\n-            LOGGER.warn(\"Unable to pause scheduler\", e);\n         }\n     }\n \n     @Override\n     public void resume() {\n-        try {\n-            if (scheduler != null) {\n-                scheduler.resumeAll();\n+        if (!enabled) {\n+            LOGGER.warn(\"Quartz Scheduler is disabled and cannot be resumed\");\n+        } else {\n+            try {\n+                if (scheduler != null) {\n+                    scheduler.start();\n+                }\n+            } catch (SchedulerException e) {\n+                LOGGER.warn(\"Unable to resume scheduler\", e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean isRunning() {\n+        if (!enabled || scheduler == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5NzUxNw=="}, "originalCommit": {"oid": "f1249fd38d8fd01c68e8f2d6d2563ceeb2610aef"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyMzA5NA==", "bodyText": "No problem at all, I just wanted to double check in case I oversee something.", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421023094", "createdAt": "2020-05-06T19:01:32Z", "author": {"login": "adrianfiedler"}, "path": "extensions/quartz/runtime/src/main/java/io/quarkus/quartz/runtime/QuartzScheduler.java", "diffHunk": "@@ -185,24 +192,46 @@ public QuartzScheduler(SchedulerContext context, QuartzSupport quartzSupport, Co\n \n     @Override\n     public void pause() {\n-        try {\n-            if (scheduler != null) {\n-                scheduler.pauseAll();\n+        if (!enabled) {\n+            LOGGER.warn(\"Quartz Scheduler is disabled and cannot be paused\");\n+        } else {\n+            try {\n+                if (scheduler != null) {\n+                    scheduler.standby();\n+                }\n+            } catch (SchedulerException e) {\n+                LOGGER.warn(\"Unable to pause scheduler\", e);\n             }\n-        } catch (SchedulerException e) {\n-            LOGGER.warn(\"Unable to pause scheduler\", e);\n         }\n     }\n \n     @Override\n     public void resume() {\n-        try {\n-            if (scheduler != null) {\n-                scheduler.resumeAll();\n+        if (!enabled) {\n+            LOGGER.warn(\"Quartz Scheduler is disabled and cannot be resumed\");\n+        } else {\n+            try {\n+                if (scheduler != null) {\n+                    scheduler.start();\n+                }\n+            } catch (SchedulerException e) {\n+                LOGGER.warn(\"Unable to resume scheduler\", e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean isRunning() {\n+        if (!enabled || scheduler == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5NzUxNw=="}, "originalCommit": {"oid": "f1249fd38d8fd01c68e8f2d6d2563ceeb2610aef"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDExNTc3OnYy", "diffSide": "RIGHT", "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzo0NDowNFrOGR_NOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzozMTowM1rOGSI6kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNDU1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Scheduler quartzScheduler;\n          \n          \n            \n                Scheduler scheduler;", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421514555", "createdAt": "2020-05-07T13:44:04Z", "author": {"login": "machi1990"}, "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.scheduler.Scheduler;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @Inject\n+    Scheduler quartzScheduler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2da973403d7627de3183f0e1129cd90eba090d2"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNTc2OA==", "bodyText": "Also this tests is really like this one https://github.com/quarkusio/quarkus/pull/9027/files#diff-5028b2d8d0d2b040363a8c0981f36caeR17, I think we do not need this.", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421515768", "createdAt": "2020-05-07T13:45:38Z", "author": {"login": "machi1990"}, "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.scheduler.Scheduler;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @Inject\n+    Scheduler quartzScheduler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNDU1NQ=="}, "originalCommit": {"oid": "b2da973403d7627de3183f0e1129cd90eba090d2"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUyNzgzNQ==", "bodyText": "Not sure, because this class tests the QuartzScheduler (org.quartz.Scheduler) functionality. While the other test is about SimpleScheduler functionality.", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421527835", "createdAt": "2020-05-07T14:01:19Z", "author": {"login": "adrianfiedler"}, "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.scheduler.Scheduler;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @Inject\n+    Scheduler quartzScheduler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNDU1NQ=="}, "originalCommit": {"oid": "b2da973403d7627de3183f0e1129cd90eba090d2"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYwNDg4Mw==", "bodyText": "Yes, except I am not seeing any quartz related stuff being tested. I think we can remove this test class WDYT? @mkouba.\nOther than that this PR is good to go once all the commits have been squashed.", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421604883", "createdAt": "2020-05-07T15:42:55Z", "author": {"login": "machi1990"}, "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.scheduler.Scheduler;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @Inject\n+    Scheduler quartzScheduler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNDU1NQ=="}, "originalCommit": {"oid": "b2da973403d7627de3183f0e1129cd90eba090d2"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3MjUzNQ==", "bodyText": "Yes, except I am not seeing any quartz related stuff being tested. I think we can remove this test class...\n\nI'd rather keep the test because the injected io.quarkus.scheduler.Scheduler is the io.quarkus.quartz.runtime.QuartzScheduler. So it tests our quartz integration.", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421672535", "createdAt": "2020-05-07T17:29:17Z", "author": {"login": "mkouba"}, "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.scheduler.Scheduler;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @Inject\n+    Scheduler quartzScheduler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNDU1NQ=="}, "originalCommit": {"oid": "b2da973403d7627de3183f0e1129cd90eba090d2"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3MzYxNw==", "bodyText": "Sorry, I confused it with quartz specific scheduler which throws an injection point exception. Let\u2019s keep it then. Ignore the noises!", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421673617", "createdAt": "2020-05-07T17:31:03Z", "author": {"login": "machi1990"}, "path": "extensions/quartz/deployment/src/test/java/io/quarkus/quartz/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.quartz.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.scheduler.Scheduler;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @Inject\n+    Scheduler quartzScheduler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNDU1NQ=="}, "originalCommit": {"oid": "b2da973403d7627de3183f0e1129cd90eba090d2"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDEzMDM1OnYy", "diffSide": "RIGHT", "path": "extensions/scheduler/deployment/src/test/java/io/quarkus/scheduler/test/DisabledSchedulerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzo0Njo1OVrOGR_WFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzozOTo0NlrOGSJO0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNjgyMw==", "bodyText": "Since we are only testing if scheduler is running or not, I think we can live off this class a.k.a we do not need it.", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421516823", "createdAt": "2020-05-07T13:46:59Z", "author": {"login": "machi1990"}, "path": "extensions/scheduler/deployment/src/test/java/io/quarkus/scheduler/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.scheduler.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.scheduler.Scheduler;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest test = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(Jobs.class)\n+                    .addAsResource(new StringAsset(\"quarkus.scheduler.enabled=false\"),\n+                            \"application.properties\"));\n+\n+    @Inject\n+    Scheduler scheduler;\n+\n+    @Test\n+    public void testNoSchedulerInvocations() throws InterruptedException {\n+        assertFalse(scheduler.isRunning());\n+    }\n+\n+    static class Jobs {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2da973403d7627de3183f0e1129cd90eba090d2"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3ODgwMA==", "bodyText": "I think that we do need it because if there is no scheduled method then SimpleScheduler is never started.", "url": "https://github.com/quarkusio/quarkus/pull/9027#discussion_r421678800", "createdAt": "2020-05-07T17:39:46Z", "author": {"login": "mkouba"}, "path": "extensions/scheduler/deployment/src/test/java/io/quarkus/scheduler/test/DisabledSchedulerTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.scheduler.test;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import javax.inject.Inject;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.scheduler.Scheduled;\n+import io.quarkus.scheduler.Scheduler;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class DisabledSchedulerTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest test = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(Jobs.class)\n+                    .addAsResource(new StringAsset(\"quarkus.scheduler.enabled=false\"),\n+                            \"application.properties\"));\n+\n+    @Inject\n+    Scheduler scheduler;\n+\n+    @Test\n+    public void testNoSchedulerInvocations() throws InterruptedException {\n+        assertFalse(scheduler.isRunning());\n+    }\n+\n+    static class Jobs {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNjgyMw=="}, "originalCommit": {"oid": "b2da973403d7627de3183f0e1129cd90eba090d2"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3364, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}