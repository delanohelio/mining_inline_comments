{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMDA3NzI5", "number": 10324, "title": "Updating FarJarTest for Gradle", "bodyText": "FarJarFormatWorks updated and HttpUtils created", "createdAt": "2020-06-28T06:05:23Z", "url": "https://github.com/quarkusio/quarkus/pull/10324", "merged": true, "mergeCommit": {"oid": "f7e049519ef061f5196a7679ab3cb022b18db157"}, "closed": true, "closedAt": "2020-07-01T10:23:49Z", "author": {"login": "Garima829"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcv9MvhgFqTQzOTAxMTAzMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwWyi3ABqjM0OTgxNTQ0MTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MDExMDMy", "url": "https://github.com/quarkusio/quarkus/pull/10324#pullrequestreview-439011032", "createdAt": "2020-06-29T08:58:18Z", "commit": {"oid": "9ea1ab617d7189bbdbf2a20e5858725c0a8c90f8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODo1ODoxOVrOGqLEUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODo1ODoxOVrOGqLEUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3NDcwNA==", "bodyText": "Use Logger.error for dumping error content. Rest looks good", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r446874704", "createdAt": "2020-06-29T08:58:19Z", "author": {"login": "RotBolt"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -20,6 +32,59 @@ public void testFastJarFormatWorks() throws Exception {\n         assertThat(quarkusApp).exists();\n         Path jar = quarkusApp.resolve(\"quarkus-run.jar\");\n         assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = doLaunch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+            // test that the application name and version are properly set\n+            getHttpResponse();\n+            getHttpResponse(\"\");\n+        } finally {\n+            process.destroy();\n+        }\n+    }\n+\n+    static void assertThatOutputWorksCorrectly(String logs) {\n+        assertThat(logs.isEmpty()).isFalse();\n+        String infoLogLevel = \"INFO\";\n+        assertThat(logs.contains(infoLogLevel)).isTrue();\n+        //Predicate<String> datePattern = Pattern.compile(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\\\\s\\\\d{2}:\\\\d{2}:\\\\d{2},\\\\d{3}\").asPredicate();\n+\n+        //assertThat(datePattern.test(logs)).isTrue();\n+        String basic = \"[io.quarkus] (main)\";\n+        assertThat(logs.contains(basic)).isTrue();\n+        assertThat(logs.contains(\"cdi, resteasy\")).isTrue();\n+        assertThat(logs.contains(\"JBoss Threads version\")).isFalse();\n+    }\n+\n+    private void dumpFileContentOnFailure(final Callable<Void> operation, final File logFile,\n+                                          final Class<? extends Throwable> failureType) throws Exception {\n+        try {\n+            operation.call();\n+        } catch (Throwable t) {\n+            if (failureType != null && failureType.isInstance(t)) {\n+                final String logs = FileUtils.readFileToString(logFile, \"UTF-8\");\n+                System.out.println(\"####### LOG DUMP ON FAILURE (start) ######\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ea1ab617d7189bbdbf2a20e5858725c0a8c90f8"}, "originalPosition": 73}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9ea1ab617d7189bbdbf2a20e5858725c0a8c90f8", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/9ea1ab617d7189bbdbf2a20e5858725c0a8c90f8", "committedDate": "2020-06-28T05:59:27Z", "message": "Updating FarJarTest for Gradle"}, "afterCommit": {"oid": "b7c60fa494b7dd37bfe77e52900e53e44bf0b737", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/b7c60fa494b7dd37bfe77e52900e53e44bf0b737", "committedDate": "2020-06-29T13:30:01Z", "message": "Updated FastJarFormatWorksTest and HttpUtils"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b7c60fa494b7dd37bfe77e52900e53e44bf0b737", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/b7c60fa494b7dd37bfe77e52900e53e44bf0b737", "committedDate": "2020-06-29T13:30:01Z", "message": "Updated FastJarFormatWorksTest and HttpUtils"}, "afterCommit": {"oid": "bbf8d35ee4e35abec45dcefffc79805964cdac14", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/bbf8d35ee4e35abec45dcefffc79805964cdac14", "committedDate": "2020-06-29T13:38:59Z", "message": "Updated FastJarFormatWorksTest and HttpUtils"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NzQ2OTU3", "url": "https://github.com/quarkusio/quarkus/pull/10324#pullrequestreview-438746957", "createdAt": "2020-06-28T06:07:10Z", "commit": {"oid": "9ea1ab617d7189bbdbf2a20e5858725c0a8c90f8"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwNjowNzoxMFrOGp6pxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoyMToyNVrOGqOSlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwNTc2NA==", "bodyText": "I am getting a timeout error here", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r446605764", "createdAt": "2020-06-28T06:07:10Z", "author": {"login": "Garima829"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -20,6 +32,59 @@ public void testFastJarFormatWorks() throws Exception {\n         assertThat(quarkusApp).exists();\n         Path jar = quarkusApp.resolve(\"quarkus-run.jar\");\n         assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = doLaunch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+            // test that the application name and version are properly set\n+            getHttpResponse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ea1ab617d7189bbdbf2a20e5858725c0a8c90f8"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNzUwOA==", "bodyText": "Will do", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r446927508", "createdAt": "2020-06-29T12:21:25Z", "author": {"login": "Garima829"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -20,6 +32,59 @@ public void testFastJarFormatWorks() throws Exception {\n         assertThat(quarkusApp).exists();\n         Path jar = quarkusApp.resolve(\"quarkus-run.jar\");\n         assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = doLaunch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+            // test that the application name and version are properly set\n+            getHttpResponse();\n+            getHttpResponse(\"\");\n+        } finally {\n+            process.destroy();\n+        }\n+    }\n+\n+    static void assertThatOutputWorksCorrectly(String logs) {\n+        assertThat(logs.isEmpty()).isFalse();\n+        String infoLogLevel = \"INFO\";\n+        assertThat(logs.contains(infoLogLevel)).isTrue();\n+        //Predicate<String> datePattern = Pattern.compile(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\\\\s\\\\d{2}:\\\\d{2}:\\\\d{2},\\\\d{3}\").asPredicate();\n+\n+        //assertThat(datePattern.test(logs)).isTrue();\n+        String basic = \"[io.quarkus] (main)\";\n+        assertThat(logs.contains(basic)).isTrue();\n+        assertThat(logs.contains(\"cdi, resteasy\")).isTrue();\n+        assertThat(logs.contains(\"JBoss Threads version\")).isFalse();\n+    }\n+\n+    private void dumpFileContentOnFailure(final Callable<Void> operation, final File logFile,\n+                                          final Class<? extends Throwable> failureType) throws Exception {\n+        try {\n+            operation.call();\n+        } catch (Throwable t) {\n+            if (failureType != null && failureType.isInstance(t)) {\n+                final String logs = FileUtils.readFileToString(logFile, \"UTF-8\");\n+                System.out.println(\"####### LOG DUMP ON FAILURE (start) ######\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3NDcwNA=="}, "originalCommit": {"oid": "9ea1ab617d7189bbdbf2a20e5858725c0a8c90f8"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5OTAxNDAz", "url": "https://github.com/quarkusio/quarkus/pull/10324#pullrequestreview-439901403", "createdAt": "2020-06-30T10:55:20Z", "commit": {"oid": "bbf8d35ee4e35abec45dcefffc79805964cdac14"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMDo1NToyMVrOGq3BLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMDo1NToyMVrOGq3BLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NDc5Nw==", "bodyText": "We don't want DevModeTestUtils to have an getHttpResponse method. We want your new test and the existing tests that use DevModeTestUtils.getHttpResponse to both use HttpUtils.getHttpResponse.", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447594797", "createdAt": "2020-06-30T10:55:21Z", "author": {"login": "geoand"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/HttpUtils.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.gradle;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import io.quarkus.utilities.JavaBinFinder;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import java.util.function.Supplier;\n+\n+public class HttpUtils {\n+\n+    private static Future<?> quarkusDev;\n+\n+    protected static Process doLaunch(Path jar, File output) throws IOException {\n+        List<String> commands = new ArrayList<>();\n+        commands.add(JavaBinFinder.findBin());\n+        commands.add(\"-jar\");\n+        commands.add(jar.toString());\n+        ProcessBuilder processBuilder = new ProcessBuilder(commands.toArray(new String[0]));\n+        processBuilder.redirectOutput(output);\n+        processBuilder.redirectError(output);\n+        return processBuilder.start();\n+    }\n+\n+    protected static String getHttpResponse(String path) {\n+        return DevModeTestUtils.getHttpResponse(path, getQuarkusDevBrokenReason());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbf8d35ee4e35abec45dcefffc79805964cdac14"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5OTAxOTE0", "url": "https://github.com/quarkusio/quarkus/pull/10324#pullrequestreview-439901914", "createdAt": "2020-06-30T10:56:08Z", "commit": {"oid": "bbf8d35ee4e35abec45dcefffc79805964cdac14"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMDo1NjowOFrOGq3CrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMDo1NjowOFrOGq3CrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NTE4MA==", "bodyText": "This method doesn't conceptually belong here. Best move it to a LaunchUtils class and also rename the method to launch.", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447595180", "createdAt": "2020-06-30T10:56:08Z", "author": {"login": "geoand"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/HttpUtils.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.quarkus.gradle;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import io.quarkus.utilities.JavaBinFinder;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import java.util.function.Supplier;\n+\n+public class HttpUtils {\n+\n+    private static Future<?> quarkusDev;\n+\n+    protected static Process doLaunch(Path jar, File output) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbf8d35ee4e35abec45dcefffc79805964cdac14"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5OTAyMjQ2", "url": "https://github.com/quarkusio/quarkus/pull/10324#pullrequestreview-439902246", "createdAt": "2020-06-30T10:56:35Z", "commit": {"oid": "bbf8d35ee4e35abec45dcefffc79805964cdac14"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMDo1NjozNlrOGq3Dng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMDo1NjozNlrOGq3Dng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU5NTQyMg==", "bodyText": "You should probably assert that the response is \"hello\"", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447595422", "createdAt": "2020-06-30T10:56:36Z", "author": {"login": "geoand"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -20,6 +31,51 @@ public void testFastJarFormatWorks() throws Exception {\n         assertThat(quarkusApp).exists();\n         Path jar = quarkusApp.resolve(\"quarkus-run.jar\");\n         assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = doLaunch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+            // test that the application name and version are properly set\n+            getHttpResponse(\"/hello\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbf8d35ee4e35abec45dcefffc79805964cdac14"}, "originalPosition": 45}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bbf8d35ee4e35abec45dcefffc79805964cdac14", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/bbf8d35ee4e35abec45dcefffc79805964cdac14", "committedDate": "2020-06-29T13:38:59Z", "message": "Updated FastJarFormatWorksTest and HttpUtils"}, "afterCommit": {"oid": "dca35e83d55084780d404a1ee41c56383a520ff9", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/dca35e83d55084780d404a1ee41c56383a520ff9", "committedDate": "2020-06-30T12:37:39Z", "message": "Updated FastJarFormatWorksTest, HttpUtils and made LaunchUtils"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5OTkyNDEy", "url": "https://github.com/quarkusio/quarkus/pull/10324#pullrequestreview-439992412", "createdAt": "2020-06-30T13:05:44Z", "commit": {"oid": "dca35e83d55084780d404a1ee41c56383a520ff9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzowNTo0NFrOGq7XGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzowNTo0NFrOGq7XGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NTk0NQ==", "bodyText": "Since you added this, you should probably remove the previous statement.", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447665945", "createdAt": "2020-06-30T13:05:44Z", "author": {"login": "geoand"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -20,6 +31,53 @@ public void testFastJarFormatWorks() throws Exception {\n         assertThat(quarkusApp).exists();\n         Path jar = quarkusApp.resolve(\"quarkus-run.jar\");\n         assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = launch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+            // test that the application name and version are properly set\n+\n+            getHttpResponse(\"/hello\");\n+            assertThat(getHttpResponse(\"/hello\").equals(\"hello\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dca35e83d55084780d404a1ee41c56383a520ff9"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5OTkyNjQ5", "url": "https://github.com/quarkusio/quarkus/pull/10324#pullrequestreview-439992649", "createdAt": "2020-06-30T13:05:59Z", "commit": {"oid": "dca35e83d55084780d404a1ee41c56383a520ff9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzowNjowMFrOGq7Xtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzowNjowMFrOGq7Xtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NjEwMw==", "bodyText": "No need to test this I would say", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447666103", "createdAt": "2020-06-30T13:06:00Z", "author": {"login": "geoand"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -20,6 +31,53 @@ public void testFastJarFormatWorks() throws Exception {\n         assertThat(quarkusApp).exists();\n         Path jar = quarkusApp.resolve(\"quarkus-run.jar\");\n         assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = launch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+            // test that the application name and version are properly set\n+\n+            getHttpResponse(\"/hello\");\n+            assertThat(getHttpResponse(\"/hello\").equals(\"hello\"));\n+        } finally {\n+            process.destroy();\n+        }\n+    }\n+\n+    static void assertThatOutputWorksCorrectly(String logs) {\n+        assertThat(logs.isEmpty()).isFalse();\n+        String infoLogLevel = \"INFO\";\n+        assertThat(logs.contains(infoLogLevel)).isTrue();\n+        String basic = \"[io.quarkus] (main)\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dca35e83d55084780d404a1ee41c56383a520ff9"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5OTkyNzk4", "url": "https://github.com/quarkusio/quarkus/pull/10324#pullrequestreview-439992798", "createdAt": "2020-06-30T13:06:10Z", "commit": {"oid": "dca35e83d55084780d404a1ee41c56383a520ff9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzowNjoxMFrOGq7YKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzowNjoxMFrOGq7YKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NjIxOQ==", "bodyText": "This isn't really needed either", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447666219", "createdAt": "2020-06-30T13:06:10Z", "author": {"login": "geoand"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -20,6 +31,53 @@ public void testFastJarFormatWorks() throws Exception {\n         assertThat(quarkusApp).exists();\n         Path jar = quarkusApp.resolve(\"quarkus-run.jar\");\n         assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = launch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+            // test that the application name and version are properly set\n+\n+            getHttpResponse(\"/hello\");\n+            assertThat(getHttpResponse(\"/hello\").equals(\"hello\"));\n+        } finally {\n+            process.destroy();\n+        }\n+    }\n+\n+    static void assertThatOutputWorksCorrectly(String logs) {\n+        assertThat(logs.isEmpty()).isFalse();\n+        String infoLogLevel = \"INFO\";\n+        assertThat(logs.contains(infoLogLevel)).isTrue();\n+        String basic = \"[io.quarkus] (main)\";\n+        assertThat(logs.contains(basic)).isTrue();\n+        assertThat(logs.contains(\"cdi, resteasy\")).isTrue();\n+        assertThat(logs.contains(\"JBoss Threads version\")).isFalse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dca35e83d55084780d404a1ee41c56383a520ff9"}, "originalPosition": 60}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dca35e83d55084780d404a1ee41c56383a520ff9", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/dca35e83d55084780d404a1ee41c56383a520ff9", "committedDate": "2020-06-30T12:37:39Z", "message": "Updated FastJarFormatWorksTest, HttpUtils and made LaunchUtils"}, "afterCommit": {"oid": "6ea3188671b5e58bcad9430e45ce48bdd9ee2458", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/6ea3188671b5e58bcad9430e45ce48bdd9ee2458", "committedDate": "2020-06-30T13:21:06Z", "message": "Updated FastJarFormatWorksTest, HttpUtils and made LaunchUtils"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6ea3188671b5e58bcad9430e45ce48bdd9ee2458", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/6ea3188671b5e58bcad9430e45ce48bdd9ee2458", "committedDate": "2020-06-30T13:21:06Z", "message": "Updated FastJarFormatWorksTest, HttpUtils and made LaunchUtils"}, "afterCommit": {"oid": "9715e900db8ed282a067bb8edda1ad4148cf6e6e", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/9715e900db8ed282a067bb8edda1ad4148cf6e6e", "committedDate": "2020-06-30T13:47:48Z", "message": "Updated FastJarFormatWorksTest and LaunchUtils"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMDQ3ODgx", "url": "https://github.com/quarkusio/quarkus/pull/10324#pullrequestreview-440047881", "createdAt": "2020-06-30T14:03:27Z", "commit": {"oid": "9715e900db8ed282a067bb8edda1ad4148cf6e6e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowMzoyOFrOGq98Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowMzoyOFrOGq98Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwODE4Mg==", "bodyText": "Let's call jarRun instead.", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447708182", "createdAt": "2020-06-30T14:03:28Z", "author": {"login": "geoand"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -1,13 +1,26 @@\n package io.quarkus.gradle;\n \n+import static io.quarkus.gradle.LaunchUtils.launch;\n import static org.assertj.core.api.Assertions.assertThat;\n \n import java.io.File;\n import java.nio.file.Path;\n \n+import org.apache.log4j.Logger;\n import org.junit.jupiter.api.Test;\n \n+import static org.awaitility.Awaitility.await;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.awaitility.core.ConditionTimeoutException;\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+\n public class FastJarFormatWorksTest extends QuarkusGradleWrapperTestBase {\n+    private static Future<?> quarkusDev;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9715e900db8ed282a067bb8edda1ad4148cf6e6e"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMDQ4Mjkx", "url": "https://github.com/quarkusio/quarkus/pull/10324#pullrequestreview-440048291", "createdAt": "2020-06-30T14:03:51Z", "commit": {"oid": "9715e900db8ed282a067bb8edda1ad4148cf6e6e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowMzo1MlrOGq99LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowMzo1MlrOGq99LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwODQ2MA==", "bodyText": "And the string should be \"jar run mode has terminated\"", "url": "https://github.com/quarkusio/quarkus/pull/10324#discussion_r447708460", "createdAt": "2020-06-30T14:03:52Z", "author": {"login": "geoand"}, "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -20,6 +33,55 @@ public void testFastJarFormatWorks() throws Exception {\n         assertThat(quarkusApp).exists();\n         Path jar = quarkusApp.resolve(\"quarkus-run.jar\");\n         assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = launch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+\n+            // test that the application name and version are properly set\n+            assertThat(DevModeTestUtils.getHttpResponse(\"/hello\",getQuarkusDevBrokenReason()).equals(\"hello\"));\n+        } finally {\n+            process.destroy();\n+        }\n+    }\n+\n+    static void assertThatOutputWorksCorrectly(String logs) {\n+        assertThat(logs.isEmpty()).isFalse();\n+        String infoLogLevel = \"INFO\";\n+        assertThat(logs.contains(infoLogLevel)).isTrue();\n+        assertThat(logs.contains(\"cdi, resteasy\")).isTrue();\n+    }\n+\n+    private void dumpFileContentOnFailure(final Callable<Void> operation, final File logFile,\n+                                          final Class<? extends Throwable> failureType) throws Exception {\n+\n+        final Logger log = Logger.getLogger(FastJarFormatWorksTest.class);\n+        try {\n+            operation.call();\n+        } catch (Throwable t) {\n+            log.error(\"Dumping logs that were generated in \" + logFile + \" for an operation that resulted in \"\n+                        + t.getClass().getName() + \":\",t);\n+\n+            throw t;\n+        }\n+    }\n+\n+    private static Supplier<String> getQuarkusDevBrokenReason() {\n+        return () -> {\n+            return quarkusDev == null ? null : quarkusDev.isDone() ? \"quarkusDev mode has terminated\" : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9715e900db8ed282a067bb8edda1ad4148cf6e6e"}, "originalPosition": 78}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9715e900db8ed282a067bb8edda1ad4148cf6e6e", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/9715e900db8ed282a067bb8edda1ad4148cf6e6e", "committedDate": "2020-06-30T13:47:48Z", "message": "Updated FastJarFormatWorksTest and LaunchUtils"}, "afterCommit": {"oid": "78c36321687ba42b0bd8b763d636d059487672b1", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/78c36321687ba42b0bd8b763d636d059487672b1", "committedDate": "2020-06-30T14:09:48Z", "message": "Updated FastJarFormatWorksTest and LaunchUtils"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMDU3NDIz", "url": "https://github.com/quarkusio/quarkus/pull/10324#pullrequestreview-440057423", "createdAt": "2020-06-30T14:12:44Z", "commit": {"oid": "78c36321687ba42b0bd8b763d636d059487672b1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "136f16aea8323c615183f58d8bc276eb25fba048", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/136f16aea8323c615183f58d8bc276eb25fba048", "committedDate": "2020-06-30T14:46:51Z", "message": "Updated FastJarFormatWorksTest and LaunchUtils"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "78c36321687ba42b0bd8b763d636d059487672b1", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/78c36321687ba42b0bd8b763d636d059487672b1", "committedDate": "2020-06-30T14:09:48Z", "message": "Updated FastJarFormatWorksTest and LaunchUtils"}, "afterCommit": {"oid": "136f16aea8323c615183f58d8bc276eb25fba048", "author": {"user": null}, "url": "https://github.com/quarkusio/quarkus/commit/136f16aea8323c615183f58d8bc276eb25fba048", "committedDate": "2020-06-30T14:46:51Z", "message": "Updated FastJarFormatWorksTest and LaunchUtils"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4171, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}