{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NDg2MDI2", "number": 10009, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzozNDozNVrOEFidEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzozNDozNVrOEFidEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjQyODM0OnYy", "diffSide": "RIGHT", "path": "extensions/google-cloud-functions/runtime/src/main/java/io/quarkus/gcp/functions/QuarkusBackgroundFunction.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzozNDozNVrOGjyZDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzozMjoyMVrOGl5Z-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3ODk1OA==", "bodyText": "This could happen every request?  Creation of the reader is an expensive operation and should be moved to static initialization within a @recorder.  This will become more important if GCF ends up supporting a native binding.", "url": "https://github.com/quarkusio/quarkus/pull/10009#discussion_r440178958", "createdAt": "2020-06-15T13:34:35Z", "author": {"login": "patriot1burke"}, "path": "extensions/google-cloud-functions/runtime/src/main/java/io/quarkus/gcp/functions/QuarkusBackgroundFunction.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package io.quarkus.gcp.functions;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.functions.RawBackgroundFunction;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.runtime.Application;\n+\n+public final class QuarkusBackgroundFunction implements RawBackgroundFunction {\n+\n+    protected static final String deploymentStatus;\n+    protected static boolean started = false;\n+\n+    private static volatile BackgroundFunction delegate;\n+    private static volatile Class<?> parameterType;\n+    private static volatile RawBackgroundFunction rawDelegate;\n+\n+    static {\n+        StringWriter error = new StringWriter();\n+        PrintWriter errorWriter = new PrintWriter(error, true);\n+        if (Application.currentApplication() == null) { // were we already bootstrapped?  Needed for mock unit testing.\n+            ClassLoader currentCl = Thread.currentThread().getContextClassLoader();\n+            try {\n+                // For GCP functions, we need to set the TCCL to the QuarkusHttpFunction classloader then restore it.\n+                // Without this, we have a lot of classloading issues (ClassNotFoundException on existing classes)\n+                // during static init.\n+                Thread.currentThread().setContextClassLoader(QuarkusBackgroundFunction.class.getClassLoader());\n+                Class<?> appClass = Class.forName(\"io.quarkus.runner.ApplicationImpl\");\n+                String[] args = {};\n+                Application app = (Application) appClass.getConstructor().newInstance();\n+                app.start(args);\n+                errorWriter.println(\"Quarkus bootstrapped successfully.\");\n+                started = true;\n+            } catch (Exception ex) {\n+                errorWriter.println(\"Quarkus bootstrap failed.\");\n+                ex.printStackTrace(errorWriter);\n+            } finally {\n+                Thread.currentThread().setContextClassLoader(currentCl);\n+            }\n+        } else {\n+            errorWriter.println(\"Quarkus bootstrapped successfully.\");\n+            started = true;\n+        }\n+        deploymentStatus = error.toString();\n+    }\n+\n+    static void setDelegates(String selectedDelegate, String selectedRawDelegate) {\n+        if (selectedDelegate != null) {\n+            try {\n+                Class<?> clazz = Class.forName(selectedDelegate);\n+                for (Method method : clazz.getDeclaredMethods()) {\n+                    if (method.getName().equals(\"accept\")) {\n+                        // the first parameter of the accept method is the event, we need to register it's type to\n+                        // be able to deserialize to it to mimic what a BackgroundFunction does\n+                        if (method.getParameterTypes()[0] != Object.class) {// FIXME we have two accept methods !!!\n+                            parameterType = method.getParameterTypes()[0];\n+                        }\n+                    }\n+                }\n+                delegate = (BackgroundFunction) Arc.container().instance(clazz).get();\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+\n+        if (selectedRawDelegate != null) {\n+            try {\n+                Class<?> clazz = Class.forName(selectedRawDelegate);\n+                rawDelegate = (RawBackgroundFunction) Arc.container().instance(clazz).get();\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void accept(String event, Context context) throws Exception {\n+        if (!started) {\n+            throw new IOException(deploymentStatus);\n+        }\n+\n+        // TODO maybe we can check this at static init\n+        if ((delegate == null && rawDelegate == null) || (delegate != null && rawDelegate != null)) {\n+            throw new IOException(\"We didn't found any BackgroundFunction or RawBackgroundFunction to run \" +\n+                    \"(or there is multiple one and none selected inside your application.properties)\");\n+        }\n+\n+        if (rawDelegate != null) {\n+            rawDelegate.accept(event, context);\n+        } else {\n+            // TODO maybe use Gson as it's the library used by GCF\n+            ObjectMapper mapper = new ObjectMapper();\n+            Object eventObj = mapper.readValue(event, parameterType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a25029b3acb68c3a9580a5548a733dfc36f50488"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE5NDIxNA==", "bodyText": "In fact I'm asking myself if using Jackson is really the way to implement it. GCF uses Gson for this maybe I need also to use it.\nWhat is a little tricky here is that instead of implementing the three function types (HttpFunction, BackgroundFunctin, RawBakgroundFunction), I only implements two by Quarkus (HttpFunction and RawBackgroundFunction) as BackgroundFunction is the same as RawBakgroundFunction with the input event deserialized to the type parameter. So I choose to limit code duplication to deserialize this type parameter myself instead of letting GCP doing it for me and providing only one implementation.", "url": "https://github.com/quarkusio/quarkus/pull/10009#discussion_r440194214", "createdAt": "2020-06-15T13:56:32Z", "author": {"login": "loicmathieu"}, "path": "extensions/google-cloud-functions/runtime/src/main/java/io/quarkus/gcp/functions/QuarkusBackgroundFunction.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package io.quarkus.gcp.functions;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.functions.RawBackgroundFunction;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.runtime.Application;\n+\n+public final class QuarkusBackgroundFunction implements RawBackgroundFunction {\n+\n+    protected static final String deploymentStatus;\n+    protected static boolean started = false;\n+\n+    private static volatile BackgroundFunction delegate;\n+    private static volatile Class<?> parameterType;\n+    private static volatile RawBackgroundFunction rawDelegate;\n+\n+    static {\n+        StringWriter error = new StringWriter();\n+        PrintWriter errorWriter = new PrintWriter(error, true);\n+        if (Application.currentApplication() == null) { // were we already bootstrapped?  Needed for mock unit testing.\n+            ClassLoader currentCl = Thread.currentThread().getContextClassLoader();\n+            try {\n+                // For GCP functions, we need to set the TCCL to the QuarkusHttpFunction classloader then restore it.\n+                // Without this, we have a lot of classloading issues (ClassNotFoundException on existing classes)\n+                // during static init.\n+                Thread.currentThread().setContextClassLoader(QuarkusBackgroundFunction.class.getClassLoader());\n+                Class<?> appClass = Class.forName(\"io.quarkus.runner.ApplicationImpl\");\n+                String[] args = {};\n+                Application app = (Application) appClass.getConstructor().newInstance();\n+                app.start(args);\n+                errorWriter.println(\"Quarkus bootstrapped successfully.\");\n+                started = true;\n+            } catch (Exception ex) {\n+                errorWriter.println(\"Quarkus bootstrap failed.\");\n+                ex.printStackTrace(errorWriter);\n+            } finally {\n+                Thread.currentThread().setContextClassLoader(currentCl);\n+            }\n+        } else {\n+            errorWriter.println(\"Quarkus bootstrapped successfully.\");\n+            started = true;\n+        }\n+        deploymentStatus = error.toString();\n+    }\n+\n+    static void setDelegates(String selectedDelegate, String selectedRawDelegate) {\n+        if (selectedDelegate != null) {\n+            try {\n+                Class<?> clazz = Class.forName(selectedDelegate);\n+                for (Method method : clazz.getDeclaredMethods()) {\n+                    if (method.getName().equals(\"accept\")) {\n+                        // the first parameter of the accept method is the event, we need to register it's type to\n+                        // be able to deserialize to it to mimic what a BackgroundFunction does\n+                        if (method.getParameterTypes()[0] != Object.class) {// FIXME we have two accept methods !!!\n+                            parameterType = method.getParameterTypes()[0];\n+                        }\n+                    }\n+                }\n+                delegate = (BackgroundFunction) Arc.container().instance(clazz).get();\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+\n+        if (selectedRawDelegate != null) {\n+            try {\n+                Class<?> clazz = Class.forName(selectedRawDelegate);\n+                rawDelegate = (RawBackgroundFunction) Arc.container().instance(clazz).get();\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void accept(String event, Context context) throws Exception {\n+        if (!started) {\n+            throw new IOException(deploymentStatus);\n+        }\n+\n+        // TODO maybe we can check this at static init\n+        if ((delegate == null && rawDelegate == null) || (delegate != null && rawDelegate != null)) {\n+            throw new IOException(\"We didn't found any BackgroundFunction or RawBackgroundFunction to run \" +\n+                    \"(or there is multiple one and none selected inside your application.properties)\");\n+        }\n+\n+        if (rawDelegate != null) {\n+            rawDelegate.accept(event, context);\n+        } else {\n+            // TODO maybe use Gson as it's the library used by GCF\n+            ObjectMapper mapper = new ObjectMapper();\n+            Object eventObj = mapper.readValue(event, parameterType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3ODk1OA=="}, "originalCommit": {"oid": "a25029b3acb68c3a9580a5548a733dfc36f50488"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0OTQxMQ==", "bodyText": "Is Funqy layered on top of this?  One thing to consider is that Funqy needs to be consistent across all cloud platform on what JSON marshalling layer it uses.  We can't use GSON for Funqy GCF and Jackson for Funqy Lambda.", "url": "https://github.com/quarkusio/quarkus/pull/10009#discussion_r440949411", "createdAt": "2020-06-16T15:37:54Z", "author": {"login": "patriot1burke"}, "path": "extensions/google-cloud-functions/runtime/src/main/java/io/quarkus/gcp/functions/QuarkusBackgroundFunction.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package io.quarkus.gcp.functions;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.functions.RawBackgroundFunction;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.runtime.Application;\n+\n+public final class QuarkusBackgroundFunction implements RawBackgroundFunction {\n+\n+    protected static final String deploymentStatus;\n+    protected static boolean started = false;\n+\n+    private static volatile BackgroundFunction delegate;\n+    private static volatile Class<?> parameterType;\n+    private static volatile RawBackgroundFunction rawDelegate;\n+\n+    static {\n+        StringWriter error = new StringWriter();\n+        PrintWriter errorWriter = new PrintWriter(error, true);\n+        if (Application.currentApplication() == null) { // were we already bootstrapped?  Needed for mock unit testing.\n+            ClassLoader currentCl = Thread.currentThread().getContextClassLoader();\n+            try {\n+                // For GCP functions, we need to set the TCCL to the QuarkusHttpFunction classloader then restore it.\n+                // Without this, we have a lot of classloading issues (ClassNotFoundException on existing classes)\n+                // during static init.\n+                Thread.currentThread().setContextClassLoader(QuarkusBackgroundFunction.class.getClassLoader());\n+                Class<?> appClass = Class.forName(\"io.quarkus.runner.ApplicationImpl\");\n+                String[] args = {};\n+                Application app = (Application) appClass.getConstructor().newInstance();\n+                app.start(args);\n+                errorWriter.println(\"Quarkus bootstrapped successfully.\");\n+                started = true;\n+            } catch (Exception ex) {\n+                errorWriter.println(\"Quarkus bootstrap failed.\");\n+                ex.printStackTrace(errorWriter);\n+            } finally {\n+                Thread.currentThread().setContextClassLoader(currentCl);\n+            }\n+        } else {\n+            errorWriter.println(\"Quarkus bootstrapped successfully.\");\n+            started = true;\n+        }\n+        deploymentStatus = error.toString();\n+    }\n+\n+    static void setDelegates(String selectedDelegate, String selectedRawDelegate) {\n+        if (selectedDelegate != null) {\n+            try {\n+                Class<?> clazz = Class.forName(selectedDelegate);\n+                for (Method method : clazz.getDeclaredMethods()) {\n+                    if (method.getName().equals(\"accept\")) {\n+                        // the first parameter of the accept method is the event, we need to register it's type to\n+                        // be able to deserialize to it to mimic what a BackgroundFunction does\n+                        if (method.getParameterTypes()[0] != Object.class) {// FIXME we have two accept methods !!!\n+                            parameterType = method.getParameterTypes()[0];\n+                        }\n+                    }\n+                }\n+                delegate = (BackgroundFunction) Arc.container().instance(clazz).get();\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+\n+        if (selectedRawDelegate != null) {\n+            try {\n+                Class<?> clazz = Class.forName(selectedRawDelegate);\n+                rawDelegate = (RawBackgroundFunction) Arc.container().instance(clazz).get();\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void accept(String event, Context context) throws Exception {\n+        if (!started) {\n+            throw new IOException(deploymentStatus);\n+        }\n+\n+        // TODO maybe we can check this at static init\n+        if ((delegate == null && rawDelegate == null) || (delegate != null && rawDelegate != null)) {\n+            throw new IOException(\"We didn't found any BackgroundFunction or RawBackgroundFunction to run \" +\n+                    \"(or there is multiple one and none selected inside your application.properties)\");\n+        }\n+\n+        if (rawDelegate != null) {\n+            rawDelegate.accept(event, context);\n+        } else {\n+            // TODO maybe use Gson as it's the library used by GCF\n+            ObjectMapper mapper = new ObjectMapper();\n+            Object eventObj = mapper.readValue(event, parameterType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3ODk1OA=="}, "originalCommit": {"oid": "a25029b3acb68c3a9580a5548a733dfc36f50488"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2NjkzNQ==", "bodyText": "No, Funky uses it's own invoker.\nI plan to refactor the three GCF functions extensions to share some code but not the marshalling layer.", "url": "https://github.com/quarkusio/quarkus/pull/10009#discussion_r440966935", "createdAt": "2020-06-16T16:01:56Z", "author": {"login": "loicmathieu"}, "path": "extensions/google-cloud-functions/runtime/src/main/java/io/quarkus/gcp/functions/QuarkusBackgroundFunction.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package io.quarkus.gcp.functions;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.functions.RawBackgroundFunction;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.runtime.Application;\n+\n+public final class QuarkusBackgroundFunction implements RawBackgroundFunction {\n+\n+    protected static final String deploymentStatus;\n+    protected static boolean started = false;\n+\n+    private static volatile BackgroundFunction delegate;\n+    private static volatile Class<?> parameterType;\n+    private static volatile RawBackgroundFunction rawDelegate;\n+\n+    static {\n+        StringWriter error = new StringWriter();\n+        PrintWriter errorWriter = new PrintWriter(error, true);\n+        if (Application.currentApplication() == null) { // were we already bootstrapped?  Needed for mock unit testing.\n+            ClassLoader currentCl = Thread.currentThread().getContextClassLoader();\n+            try {\n+                // For GCP functions, we need to set the TCCL to the QuarkusHttpFunction classloader then restore it.\n+                // Without this, we have a lot of classloading issues (ClassNotFoundException on existing classes)\n+                // during static init.\n+                Thread.currentThread().setContextClassLoader(QuarkusBackgroundFunction.class.getClassLoader());\n+                Class<?> appClass = Class.forName(\"io.quarkus.runner.ApplicationImpl\");\n+                String[] args = {};\n+                Application app = (Application) appClass.getConstructor().newInstance();\n+                app.start(args);\n+                errorWriter.println(\"Quarkus bootstrapped successfully.\");\n+                started = true;\n+            } catch (Exception ex) {\n+                errorWriter.println(\"Quarkus bootstrap failed.\");\n+                ex.printStackTrace(errorWriter);\n+            } finally {\n+                Thread.currentThread().setContextClassLoader(currentCl);\n+            }\n+        } else {\n+            errorWriter.println(\"Quarkus bootstrapped successfully.\");\n+            started = true;\n+        }\n+        deploymentStatus = error.toString();\n+    }\n+\n+    static void setDelegates(String selectedDelegate, String selectedRawDelegate) {\n+        if (selectedDelegate != null) {\n+            try {\n+                Class<?> clazz = Class.forName(selectedDelegate);\n+                for (Method method : clazz.getDeclaredMethods()) {\n+                    if (method.getName().equals(\"accept\")) {\n+                        // the first parameter of the accept method is the event, we need to register it's type to\n+                        // be able to deserialize to it to mimic what a BackgroundFunction does\n+                        if (method.getParameterTypes()[0] != Object.class) {// FIXME we have two accept methods !!!\n+                            parameterType = method.getParameterTypes()[0];\n+                        }\n+                    }\n+                }\n+                delegate = (BackgroundFunction) Arc.container().instance(clazz).get();\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+\n+        if (selectedRawDelegate != null) {\n+            try {\n+                Class<?> clazz = Class.forName(selectedRawDelegate);\n+                rawDelegate = (RawBackgroundFunction) Arc.container().instance(clazz).get();\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void accept(String event, Context context) throws Exception {\n+        if (!started) {\n+            throw new IOException(deploymentStatus);\n+        }\n+\n+        // TODO maybe we can check this at static init\n+        if ((delegate == null && rawDelegate == null) || (delegate != null && rawDelegate != null)) {\n+            throw new IOException(\"We didn't found any BackgroundFunction or RawBackgroundFunction to run \" +\n+                    \"(or there is multiple one and none selected inside your application.properties)\");\n+        }\n+\n+        if (rawDelegate != null) {\n+            rawDelegate.accept(event, context);\n+        } else {\n+            // TODO maybe use Gson as it's the library used by GCF\n+            ObjectMapper mapper = new ObjectMapper();\n+            Object eventObj = mapper.readValue(event, parameterType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3ODk1OA=="}, "originalCommit": {"oid": "a25029b3acb68c3a9580a5548a733dfc36f50488"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5MTAzNQ==", "bodyText": "@patriot1burke I choose to switch to Gson as it is what GCF does inside it's invoker so let's be consistent.", "url": "https://github.com/quarkusio/quarkus/pull/10009#discussion_r442391035", "createdAt": "2020-06-18T17:32:21Z", "author": {"login": "loicmathieu"}, "path": "extensions/google-cloud-functions/runtime/src/main/java/io/quarkus/gcp/functions/QuarkusBackgroundFunction.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package io.quarkus.gcp.functions;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.functions.RawBackgroundFunction;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.runtime.Application;\n+\n+public final class QuarkusBackgroundFunction implements RawBackgroundFunction {\n+\n+    protected static final String deploymentStatus;\n+    protected static boolean started = false;\n+\n+    private static volatile BackgroundFunction delegate;\n+    private static volatile Class<?> parameterType;\n+    private static volatile RawBackgroundFunction rawDelegate;\n+\n+    static {\n+        StringWriter error = new StringWriter();\n+        PrintWriter errorWriter = new PrintWriter(error, true);\n+        if (Application.currentApplication() == null) { // were we already bootstrapped?  Needed for mock unit testing.\n+            ClassLoader currentCl = Thread.currentThread().getContextClassLoader();\n+            try {\n+                // For GCP functions, we need to set the TCCL to the QuarkusHttpFunction classloader then restore it.\n+                // Without this, we have a lot of classloading issues (ClassNotFoundException on existing classes)\n+                // during static init.\n+                Thread.currentThread().setContextClassLoader(QuarkusBackgroundFunction.class.getClassLoader());\n+                Class<?> appClass = Class.forName(\"io.quarkus.runner.ApplicationImpl\");\n+                String[] args = {};\n+                Application app = (Application) appClass.getConstructor().newInstance();\n+                app.start(args);\n+                errorWriter.println(\"Quarkus bootstrapped successfully.\");\n+                started = true;\n+            } catch (Exception ex) {\n+                errorWriter.println(\"Quarkus bootstrap failed.\");\n+                ex.printStackTrace(errorWriter);\n+            } finally {\n+                Thread.currentThread().setContextClassLoader(currentCl);\n+            }\n+        } else {\n+            errorWriter.println(\"Quarkus bootstrapped successfully.\");\n+            started = true;\n+        }\n+        deploymentStatus = error.toString();\n+    }\n+\n+    static void setDelegates(String selectedDelegate, String selectedRawDelegate) {\n+        if (selectedDelegate != null) {\n+            try {\n+                Class<?> clazz = Class.forName(selectedDelegate);\n+                for (Method method : clazz.getDeclaredMethods()) {\n+                    if (method.getName().equals(\"accept\")) {\n+                        // the first parameter of the accept method is the event, we need to register it's type to\n+                        // be able to deserialize to it to mimic what a BackgroundFunction does\n+                        if (method.getParameterTypes()[0] != Object.class) {// FIXME we have two accept methods !!!\n+                            parameterType = method.getParameterTypes()[0];\n+                        }\n+                    }\n+                }\n+                delegate = (BackgroundFunction) Arc.container().instance(clazz).get();\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+\n+        if (selectedRawDelegate != null) {\n+            try {\n+                Class<?> clazz = Class.forName(selectedRawDelegate);\n+                rawDelegate = (RawBackgroundFunction) Arc.container().instance(clazz).get();\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void accept(String event, Context context) throws Exception {\n+        if (!started) {\n+            throw new IOException(deploymentStatus);\n+        }\n+\n+        // TODO maybe we can check this at static init\n+        if ((delegate == null && rawDelegate == null) || (delegate != null && rawDelegate != null)) {\n+            throw new IOException(\"We didn't found any BackgroundFunction or RawBackgroundFunction to run \" +\n+                    \"(or there is multiple one and none selected inside your application.properties)\");\n+        }\n+\n+        if (rawDelegate != null) {\n+            rawDelegate.accept(event, context);\n+        } else {\n+            // TODO maybe use Gson as it's the library used by GCF\n+            ObjectMapper mapper = new ObjectMapper();\n+            Object eventObj = mapper.readValue(event, parameterType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3ODk1OA=="}, "originalCommit": {"oid": "a25029b3acb68c3a9580a5548a733dfc36f50488"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2876, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}