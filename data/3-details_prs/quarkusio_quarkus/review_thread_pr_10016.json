{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NTY5NDQw", "number": 10016, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjowNjo0N1rOEFmggg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjowODoyMlrOEFmi0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzA5MjUwOnYy", "diffSide": "RIGHT", "path": "extensions/hibernate-reactive/runtime/src/main/java/io/quarkus/hibernate/reactive/runtime/ReactiveSessionProducer.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjowNjo0OFrOGj47AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODo0NDozNVrOGk741A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI4NTk1Mw==", "bodyText": "I think this is a justifiable limitation of the Uni<Mutiny.Session> functionality, because CompletionStage<Stage.Session> behaves in the same way, so we make it cached and use the same session in the entire request.", "url": "https://github.com/quarkusio/quarkus/pull/10016#discussion_r440285953", "createdAt": "2020-06-15T16:06:48Z", "author": {"login": "FroMage"}, "path": "extensions/hibernate-reactive/runtime/src/main/java/io/quarkus/hibernate/reactive/runtime/ReactiveSessionProducer.java", "diffHunk": "@@ -34,7 +34,7 @@\n     @RequestScoped\n     @DefaultBean\n     public Uni<Mutiny.Session> mutinySession() {\n-        return mutinySessionFactory.openSession();\n+        return mutinySessionFactory.openSession().cache();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b627340f00567a369e7d80355e9d20941b02615"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0NjcyNg==", "bodyText": "It is not a limitation, it is a bug fix \ud83d\ude04\nThe purpose of a request scoped session producer is to have a single session for the request. But if you don't add the cache operator, another session will be created anytime someone subscribes to the Uni that is injected in the users beans.", "url": "https://github.com/quarkusio/quarkus/pull/10016#discussion_r440746726", "createdAt": "2020-06-16T10:24:14Z", "author": {"login": "tsegismont"}, "path": "extensions/hibernate-reactive/runtime/src/main/java/io/quarkus/hibernate/reactive/runtime/ReactiveSessionProducer.java", "diffHunk": "@@ -34,7 +34,7 @@\n     @RequestScoped\n     @DefaultBean\n     public Uni<Mutiny.Session> mutinySession() {\n-        return mutinySessionFactory.openSession();\n+        return mutinySessionFactory.openSession().cache();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI4NTk1Mw=="}, "originalCommit": {"oid": "8b627340f00567a369e7d80355e9d20941b02615"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1NTA1Mg==", "bodyText": "so even if the uni gets subscribed to twice in the same request, that would trigger two different sessions by default? That seems rather confusing, but perhaps necessary since a subscription could happen after the original request has completed?", "url": "https://github.com/quarkusio/quarkus/pull/10016#discussion_r441155052", "createdAt": "2020-06-16T21:33:31Z", "author": {"login": "aguibert"}, "path": "extensions/hibernate-reactive/runtime/src/main/java/io/quarkus/hibernate/reactive/runtime/ReactiveSessionProducer.java", "diffHunk": "@@ -34,7 +34,7 @@\n     @RequestScoped\n     @DefaultBean\n     public Uni<Mutiny.Session> mutinySession() {\n-        return mutinySessionFactory.openSession();\n+        return mutinySessionFactory.openSession().cache();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI4NTk1Mw=="}, "originalCommit": {"oid": "8b627340f00567a369e7d80355e9d20941b02615"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM4MzEyNA==", "bodyText": "Well, with .cache you would in fact get the same session, which is what makes the most sense in this context.", "url": "https://github.com/quarkusio/quarkus/pull/10016#discussion_r441383124", "createdAt": "2020-06-17T08:44:35Z", "author": {"login": "FroMage"}, "path": "extensions/hibernate-reactive/runtime/src/main/java/io/quarkus/hibernate/reactive/runtime/ReactiveSessionProducer.java", "diffHunk": "@@ -34,7 +34,7 @@\n     @RequestScoped\n     @DefaultBean\n     public Uni<Mutiny.Session> mutinySession() {\n-        return mutinySessionFactory.openSession();\n+        return mutinySessionFactory.openSession().cache();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI4NTk1Mw=="}, "originalCommit": {"oid": "8b627340f00567a369e7d80355e9d20941b02615"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzA5ODQxOnYy", "diffSide": "RIGHT", "path": "extensions/hibernate-reactive/runtime/src/main/java/io/quarkus/hibernate/reactive/runtime/ReactiveSessionProducer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjowODoyMlrOGj4-kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDoyODoxNlrOGkVLEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI4Njg2Nw==", "bodyText": "At this point it could be interesting to figure out if the reactiveSession has already been subscribed to, because if not, it will never have been produced and doesn't need to be closed. We might be creating it just to close it.\nBut I'm pretty sure that the current implementation is based on CompletionStage so it's eager and will always be created, so we can forget this optimisation for now.", "url": "https://github.com/quarkusio/quarkus/pull/10016#discussion_r440286867", "createdAt": "2020-06-15T16:08:22Z", "author": {"login": "FroMage"}, "path": "extensions/hibernate-reactive/runtime/src/main/java/io/quarkus/hibernate/reactive/runtime/ReactiveSessionProducer.java", "diffHunk": "@@ -45,11 +45,7 @@ public void disposeStageSession(@Disposes CompletionStage<Stage.Session> reactiv\n     }\n \n     public void disposeMutinySession(@Disposes Uni<Mutiny.Session> reactiveSession) {\n-        // TODO: @AGG this is not working, need to check w/ Clement to figure out the proper way\n-        reactiveSession.on().termination((session, ex, cancelled) -> {\n-            if (session != null)\n-                session.close();\n-        });\n+        reactiveSession.subscribe().with(Mutiny.Session::close);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b627340f00567a369e7d80355e9d20941b02615"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0ODgxNw==", "bodyText": "Keep in mind that when you inject the stage version of the session, it will be eagerly created. So the Mutiny version is not less efficient.\nI had a look at the session implementation code. It seems that a connection is acquired as soon as the session is created. Perhaps this should be delayed until a connection is actually needed. But I don't know if this is possible in practice.", "url": "https://github.com/quarkusio/quarkus/pull/10016#discussion_r440748817", "createdAt": "2020-06-16T10:28:16Z", "author": {"login": "tsegismont"}, "path": "extensions/hibernate-reactive/runtime/src/main/java/io/quarkus/hibernate/reactive/runtime/ReactiveSessionProducer.java", "diffHunk": "@@ -45,11 +45,7 @@ public void disposeStageSession(@Disposes CompletionStage<Stage.Session> reactiv\n     }\n \n     public void disposeMutinySession(@Disposes Uni<Mutiny.Session> reactiveSession) {\n-        // TODO: @AGG this is not working, need to check w/ Clement to figure out the proper way\n-        reactiveSession.on().termination((session, ex, cancelled) -> {\n-            if (session != null)\n-                session.close();\n-        });\n+        reactiveSession.subscribe().with(Mutiny.Session::close);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI4Njg2Nw=="}, "originalCommit": {"oid": "8b627340f00567a369e7d80355e9d20941b02615"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2879, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}