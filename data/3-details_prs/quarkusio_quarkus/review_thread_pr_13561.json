{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5NTIzNjI5", "number": 13561, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzo1NDoxOFrOE-qdrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjozMjozMFrOE-vGgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTQyODk1OnYy", "diffSide": "RIGHT", "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzo1NDoxOFrOH78FSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjoyNzoyNVrOH8DEbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxMjQyNg==", "bodyText": "Should the view class be added for reflection?\nI don't see us doing it in the quarkus-jackson extension and it looks like reflection could be used by Jackson, right?", "url": "https://github.com/quarkusio/quarkus/pull/13561#discussion_r532612426", "createdAt": "2020-11-30T13:54:18Z", "author": {"login": "gsmet"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java", "diffHunk": "@@ -81,4 +83,30 @@ public void run() {\n         }).start();\n     }\n \n+    @GET\n+    @Path(\"/user-without-view\")\n+    public User userWithoutView() {\n+        return testUser();\n+    }\n+\n+    @JsonView(Views.Public.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83c796e441d3b97a6be7015efcbac924e8e4e752"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxMjkzNg==", "bodyText": "I'll check and see if it's needed", "url": "https://github.com/quarkusio/quarkus/pull/13561#discussion_r532612936", "createdAt": "2020-11-30T13:55:01Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java", "diffHunk": "@@ -81,4 +83,30 @@ public void run() {\n         }).start();\n     }\n \n+    @GET\n+    @Path(\"/user-without-view\")\n+    public User userWithoutView() {\n+        return testUser();\n+    }\n+\n+    @JsonView(Views.Public.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxMjQyNg=="}, "originalCommit": {"oid": "83c796e441d3b97a6be7015efcbac924e8e4e752"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYyMjY5Mg==", "bodyText": "I just tried it in native and it works without registering anything from reflection", "url": "https://github.com/quarkusio/quarkus/pull/13561#discussion_r532622692", "createdAt": "2020-11-30T14:09:08Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java", "diffHunk": "@@ -81,4 +83,30 @@ public void run() {\n         }).start();\n     }\n \n+    @GET\n+    @Path(\"/user-without-view\")\n+    public User userWithoutView() {\n+        return testUser();\n+    }\n+\n+    @JsonView(Views.Public.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxMjQyNg=="}, "originalCommit": {"oid": "83c796e441d3b97a6be7015efcbac924e8e4e752"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYyNjAyNQ==", "bodyText": "Hmmm. How does it work? It's not using reflection?", "url": "https://github.com/quarkusio/quarkus/pull/13561#discussion_r532626025", "createdAt": "2020-11-30T14:13:48Z", "author": {"login": "gsmet"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java", "diffHunk": "@@ -81,4 +83,30 @@ public void run() {\n         }).start();\n     }\n \n+    @GET\n+    @Path(\"/user-without-view\")\n+    public User userWithoutView() {\n+        return testUser();\n+    }\n+\n+    @JsonView(Views.Public.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxMjQyNg=="}, "originalCommit": {"oid": "83c796e441d3b97a6be7015efcbac924e8e4e752"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYyODYxNQ==", "bodyText": "Let me try something. I might have messed up my test", "url": "https://github.com/quarkusio/quarkus/pull/13561#discussion_r532628615", "createdAt": "2020-11-30T14:17:28Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java", "diffHunk": "@@ -81,4 +83,30 @@ public void run() {\n         }).start();\n     }\n \n+    @GET\n+    @Path(\"/user-without-view\")\n+    public User userWithoutView() {\n+        return testUser();\n+    }\n+\n+    @JsonView(Views.Public.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxMjQyNg=="}, "originalCommit": {"oid": "83c796e441d3b97a6be7015efcbac924e8e4e752"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYzMzQyNg==", "bodyText": "Indeed it fails if I actually perform a proper test. I'll fix it.", "url": "https://github.com/quarkusio/quarkus/pull/13561#discussion_r532633426", "createdAt": "2020-11-30T14:24:09Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java", "diffHunk": "@@ -81,4 +83,30 @@ public void run() {\n         }).start();\n     }\n \n+    @GET\n+    @Path(\"/user-without-view\")\n+    public User userWithoutView() {\n+        return testUser();\n+    }\n+\n+    @JsonView(Views.Public.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxMjQyNg=="}, "originalCommit": {"oid": "83c796e441d3b97a6be7015efcbac924e8e4e752"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcyNjg5NA==", "bodyText": "Properly fixed", "url": "https://github.com/quarkusio/quarkus/pull/13561#discussion_r532726894", "createdAt": "2020-11-30T16:27:25Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/test/java/io/quarkus/resteasy/reactive/jackson/deployment/test/SimpleJsonResource.java", "diffHunk": "@@ -81,4 +83,30 @@ public void run() {\n         }).start();\n     }\n \n+    @GET\n+    @Path(\"/user-without-view\")\n+    public User userWithoutView() {\n+        return testUser();\n+    }\n+\n+    @JsonView(Views.Public.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxMjQyNg=="}, "originalCommit": {"oid": "83c796e441d3b97a6be7015efcbac924e8e4e752"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjE4ODgyOnYy", "diffSide": "RIGHT", "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjozMjozMFrOH8DTjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzoxODo1MVrOH8FX6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczMDc2Ng==", "bodyText": "Sorry to be that guy but shouldn't we do this in the quarkus-jackson extension given it's a generic Jackson annotation?\nIt could be used in other extensions then.\nAnd I would do it for all @JsonView annotations in the classpath.", "url": "https://github.com/quarkusio/quarkus/pull/13561#discussion_r532730766", "createdAt": "2020-11-30T16:32:30Z", "author": {"login": "gsmet"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java", "diffHunk": "@@ -38,4 +51,24 @@ void additionalProviders(BuildProducer<AdditionalBeanBuildItem> additionalBean,\n                 .produce(new MessageBodyWriterBuildItem(JacksonMessageBodyWriter.class.getName(), Object.class.getName(),\n                         Collections.singletonList(MediaType.APPLICATION_JSON)));\n     }\n+\n+    @BuildStep\n+    void registerForReflection(Optional<ResourceScanningResultBuildItem> resourceScanningResultBuildItem,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveClass) {\n+        if (!resourceScanningResultBuildItem.isPresent()) {\n+            return;\n+        }\n+\n+        Collection<ClassInfo> resourceClasses = resourceScanningResultBuildItem.get().getScannedResources().values();\n+        Set<String> classesNeedingReflectionOnMethods = new HashSet<>();\n+        for (ClassInfo resourceClass : resourceClasses) {\n+            if (resourceClass.annotations().containsKey(JSON_VIEW)) {\n+                classesNeedingReflectionOnMethods.add(resourceClass.name().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "975f0b7a3ac3cebe8527cac1974bb124dcab1b4d"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczMjY4NQ==", "bodyText": "No, because this reflection is only needed in order to make resteasy-reactive work. Normally RESTEasy reactive does not have to perform reflection on the resource method, but in this case (and in other that we will surely find later on) it does.\nThat means that this reflection is resteasy-reactive specific, not Jackson specific.", "url": "https://github.com/quarkusio/quarkus/pull/13561#discussion_r532732685", "createdAt": "2020-11-30T16:35:05Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java", "diffHunk": "@@ -38,4 +51,24 @@ void additionalProviders(BuildProducer<AdditionalBeanBuildItem> additionalBean,\n                 .produce(new MessageBodyWriterBuildItem(JacksonMessageBodyWriter.class.getName(), Object.class.getName(),\n                         Collections.singletonList(MediaType.APPLICATION_JSON)));\n     }\n+\n+    @BuildStep\n+    void registerForReflection(Optional<ResourceScanningResultBuildItem> resourceScanningResultBuildItem,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveClass) {\n+        if (!resourceScanningResultBuildItem.isPresent()) {\n+            return;\n+        }\n+\n+        Collection<ClassInfo> resourceClasses = resourceScanningResultBuildItem.get().getScannedResources().values();\n+        Set<String> classesNeedingReflectionOnMethods = new HashSet<>();\n+        for (ClassInfo resourceClass : resourceClasses) {\n+            if (resourceClass.annotations().containsKey(JSON_VIEW)) {\n+                classesNeedingReflectionOnMethods.add(resourceClass.name().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczMDc2Ng=="}, "originalCommit": {"oid": "975f0b7a3ac3cebe8527cac1974bb124dcab1b4d"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczNDc3Ng==", "bodyText": "Maybe I'm missing something but if we do need reflection for the class referenced in JsonView, I think it's a general requirement.\nI'm not sure though if you added reflection for that?", "url": "https://github.com/quarkusio/quarkus/pull/13561#discussion_r532734776", "createdAt": "2020-11-30T16:37:54Z", "author": {"login": "gsmet"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java", "diffHunk": "@@ -38,4 +51,24 @@ void additionalProviders(BuildProducer<AdditionalBeanBuildItem> additionalBean,\n                 .produce(new MessageBodyWriterBuildItem(JacksonMessageBodyWriter.class.getName(), Object.class.getName(),\n                         Collections.singletonList(MediaType.APPLICATION_JSON)));\n     }\n+\n+    @BuildStep\n+    void registerForReflection(Optional<ResourceScanningResultBuildItem> resourceScanningResultBuildItem,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveClass) {\n+        if (!resourceScanningResultBuildItem.isPresent()) {\n+            return;\n+        }\n+\n+        Collection<ClassInfo> resourceClasses = resourceScanningResultBuildItem.get().getScannedResources().values();\n+        Set<String> classesNeedingReflectionOnMethods = new HashSet<>();\n+        for (ClassInfo resourceClass : resourceClasses) {\n+            if (resourceClass.annotations().containsKey(JSON_VIEW)) {\n+                classesNeedingReflectionOnMethods.add(resourceClass.name().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczMDc2Ng=="}, "originalCommit": {"oid": "975f0b7a3ac3cebe8527cac1974bb124dcab1b4d"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczNjE1MA==", "bodyText": "We are not doing reflection for the class referenced in the annotation, but for the class that contains the resource method in question.\nPerhaps the variables names are not clear enough?", "url": "https://github.com/quarkusio/quarkus/pull/13561#discussion_r532736150", "createdAt": "2020-11-30T16:39:50Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java", "diffHunk": "@@ -38,4 +51,24 @@ void additionalProviders(BuildProducer<AdditionalBeanBuildItem> additionalBean,\n                 .produce(new MessageBodyWriterBuildItem(JacksonMessageBodyWriter.class.getName(), Object.class.getName(),\n                         Collections.singletonList(MediaType.APPLICATION_JSON)));\n     }\n+\n+    @BuildStep\n+    void registerForReflection(Optional<ResourceScanningResultBuildItem> resourceScanningResultBuildItem,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveClass) {\n+        if (!resourceScanningResultBuildItem.isPresent()) {\n+            return;\n+        }\n+\n+        Collection<ClassInfo> resourceClasses = resourceScanningResultBuildItem.get().getScannedResources().values();\n+        Set<String> classesNeedingReflectionOnMethods = new HashSet<>();\n+        for (ClassInfo resourceClass : resourceClasses) {\n+            if (resourceClass.annotations().containsKey(JSON_VIEW)) {\n+                classesNeedingReflectionOnMethods.add(resourceClass.name().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczMDc2Ng=="}, "originalCommit": {"oid": "975f0b7a3ac3cebe8527cac1974bb124dcab1b4d"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc2MjY2OA==", "bodyText": "They are clear but I'm still puzzled on how it can work without having the class in @JsonView registered for reflection.", "url": "https://github.com/quarkusio/quarkus/pull/13561#discussion_r532762668", "createdAt": "2020-11-30T17:15:57Z", "author": {"login": "gsmet"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java", "diffHunk": "@@ -38,4 +51,24 @@ void additionalProviders(BuildProducer<AdditionalBeanBuildItem> additionalBean,\n                 .produce(new MessageBodyWriterBuildItem(JacksonMessageBodyWriter.class.getName(), Object.class.getName(),\n                         Collections.singletonList(MediaType.APPLICATION_JSON)));\n     }\n+\n+    @BuildStep\n+    void registerForReflection(Optional<ResourceScanningResultBuildItem> resourceScanningResultBuildItem,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveClass) {\n+        if (!resourceScanningResultBuildItem.isPresent()) {\n+            return;\n+        }\n+\n+        Collection<ClassInfo> resourceClasses = resourceScanningResultBuildItem.get().getScannedResources().values();\n+        Set<String> classesNeedingReflectionOnMethods = new HashSet<>();\n+        for (ClassInfo resourceClass : resourceClasses) {\n+            if (resourceClass.annotations().containsKey(JSON_VIEW)) {\n+                classesNeedingReflectionOnMethods.add(resourceClass.name().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczMDc2Ng=="}, "originalCommit": {"oid": "975f0b7a3ac3cebe8527cac1974bb124dcab1b4d"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc2NDY0OA==", "bodyText": "Why do you think the value needs to be registered? Jackson almost certainly doesn't need to do any reflection on this class. It probably just has to call isAssignable on the class", "url": "https://github.com/quarkusio/quarkus/pull/13561#discussion_r532764648", "createdAt": "2020-11-30T17:18:51Z", "author": {"login": "geoand"}, "path": "extensions/resteasy-reactive/quarkus-resteasy-reactive-jackson/deployment/src/main/java/io/quarkus/resteasy/reactive/jackson/deployment/processor/ResteasyReactiveJacksonProcessor.java", "diffHunk": "@@ -38,4 +51,24 @@ void additionalProviders(BuildProducer<AdditionalBeanBuildItem> additionalBean,\n                 .produce(new MessageBodyWriterBuildItem(JacksonMessageBodyWriter.class.getName(), Object.class.getName(),\n                         Collections.singletonList(MediaType.APPLICATION_JSON)));\n     }\n+\n+    @BuildStep\n+    void registerForReflection(Optional<ResourceScanningResultBuildItem> resourceScanningResultBuildItem,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveClass) {\n+        if (!resourceScanningResultBuildItem.isPresent()) {\n+            return;\n+        }\n+\n+        Collection<ClassInfo> resourceClasses = resourceScanningResultBuildItem.get().getScannedResources().values();\n+        Set<String> classesNeedingReflectionOnMethods = new HashSet<>();\n+        for (ClassInfo resourceClass : resourceClasses) {\n+            if (resourceClass.annotations().containsKey(JSON_VIEW)) {\n+                classesNeedingReflectionOnMethods.add(resourceClass.name().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczMDc2Ng=="}, "originalCommit": {"oid": "975f0b7a3ac3cebe8527cac1974bb124dcab1b4d"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3878, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}