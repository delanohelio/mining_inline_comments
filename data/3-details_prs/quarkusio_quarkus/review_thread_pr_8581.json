{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNjU1MTc0", "number": 8581, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTo1NjoxM1rODx__8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTo1NjoxM1rODx__8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzU1Mzc5OnYy", "diffSide": "RIGHT", "path": "extensions/jaeger/deployment/src/main/java/io/quarkus/jaeger/deployment/JaegerProcessor.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTo1NjoxM1rOGFycXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjowNDo1NFrOGF2kqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyMjUyNw==", "bodyText": "I would keep passing the boolean and initialize the class in the recorder. I think it would work the same and be a bit less confusing.\nThe recorder method wouldn't be called so the class wouldn't be accessible either.\n(Just guessing, you would need to try)", "url": "https://github.com/quarkusio/quarkus/pull/8581#discussion_r408722527", "createdAt": "2020-04-15T09:56:13Z", "author": {"login": "gsmet"}, "path": "extensions/jaeger/deployment/src/main/java/io/quarkus/jaeger/deployment/JaegerProcessor.java", "diffHunk": "@@ -29,8 +32,11 @@ void setupTracer(JaegerDeploymentRecorder jdr, JaegerBuildTimeConfig buildTimeCo\n \n         if (buildTimeConfig.enabled) {\n             boolean metricsEnabled = capabilities.isCapabilityPresent(Capabilities.METRICS);\n+            MetricsFactory metricsFactory = metricsEnabled\n+                    ? new QuarkusJaegerMetricsFactory()\n+                    : new NoopMetricsFactory();\n \n-            jdr.registerTracer(jaeger, appConfig, metricsEnabled);\n+            jdr.registerTracer(jaeger, appConfig, metricsFactory);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33243e8241106e0f3f42d2cc79cf91a4e290f730"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyOTkzOA==", "bodyText": "But that's exactly how it used to be before, and it was failing :-)\nWhat might work is to have 2 recorder methods, 1 for disabled metrics and 1 for enabled metrics. I guess.", "url": "https://github.com/quarkusio/quarkus/pull/8581#discussion_r408729938", "createdAt": "2020-04-15T10:08:55Z", "author": {"login": "Ladicek"}, "path": "extensions/jaeger/deployment/src/main/java/io/quarkus/jaeger/deployment/JaegerProcessor.java", "diffHunk": "@@ -29,8 +32,11 @@ void setupTracer(JaegerDeploymentRecorder jdr, JaegerBuildTimeConfig buildTimeCo\n \n         if (buildTimeConfig.enabled) {\n             boolean metricsEnabled = capabilities.isCapabilityPresent(Capabilities.METRICS);\n+            MetricsFactory metricsFactory = metricsEnabled\n+                    ? new QuarkusJaegerMetricsFactory()\n+                    : new NoopMetricsFactory();\n \n-            jdr.registerTracer(jaeger, appConfig, metricsEnabled);\n+            jdr.registerTracer(jaeger, appConfig, metricsFactory);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyMjUyNw=="}, "originalCommit": {"oid": "33243e8241106e0f3f42d2cc79cf91a4e290f730"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODczNDc1Mw==", "bodyText": "I am personally fine with the approach of the PR, IMHO this is what the bytecode recording is all about - being able to easily \"pass\" objects from build time to runtime.", "url": "https://github.com/quarkusio/quarkus/pull/8581#discussion_r408734753", "createdAt": "2020-04-15T10:17:38Z", "author": {"login": "geoand"}, "path": "extensions/jaeger/deployment/src/main/java/io/quarkus/jaeger/deployment/JaegerProcessor.java", "diffHunk": "@@ -29,8 +32,11 @@ void setupTracer(JaegerDeploymentRecorder jdr, JaegerBuildTimeConfig buildTimeCo\n \n         if (buildTimeConfig.enabled) {\n             boolean metricsEnabled = capabilities.isCapabilityPresent(Capabilities.METRICS);\n+            MetricsFactory metricsFactory = metricsEnabled\n+                    ? new QuarkusJaegerMetricsFactory()\n+                    : new NoopMetricsFactory();\n \n-            jdr.registerTracer(jaeger, appConfig, metricsEnabled);\n+            jdr.registerTracer(jaeger, appConfig, metricsFactory);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyMjUyNw=="}, "originalCommit": {"oid": "33243e8241106e0f3f42d2cc79cf91a4e290f730"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODczODA4Mg==", "bodyText": "No, it used to be done in QuarkusJaegerTracer based on a dynamic value and in a method called at runtime.\nI won't fight for it but I prefer when it's clear a runtime object is a runtime object.", "url": "https://github.com/quarkusio/quarkus/pull/8581#discussion_r408738082", "createdAt": "2020-04-15T10:23:48Z", "author": {"login": "gsmet"}, "path": "extensions/jaeger/deployment/src/main/java/io/quarkus/jaeger/deployment/JaegerProcessor.java", "diffHunk": "@@ -29,8 +32,11 @@ void setupTracer(JaegerDeploymentRecorder jdr, JaegerBuildTimeConfig buildTimeCo\n \n         if (buildTimeConfig.enabled) {\n             boolean metricsEnabled = capabilities.isCapabilityPresent(Capabilities.METRICS);\n+            MetricsFactory metricsFactory = metricsEnabled\n+                    ? new QuarkusJaegerMetricsFactory()\n+                    : new NoopMetricsFactory();\n \n-            jdr.registerTracer(jaeger, appConfig, metricsEnabled);\n+            jdr.registerTracer(jaeger, appConfig, metricsFactory);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyMjUyNw=="}, "originalCommit": {"oid": "33243e8241106e0f3f42d2cc79cf91a4e290f730"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0MzYzNA==", "bodyText": "Ah, I think I see what you mean now. I'll try.", "url": "https://github.com/quarkusio/quarkus/pull/8581#discussion_r408743634", "createdAt": "2020-04-15T10:34:16Z", "author": {"login": "Ladicek"}, "path": "extensions/jaeger/deployment/src/main/java/io/quarkus/jaeger/deployment/JaegerProcessor.java", "diffHunk": "@@ -29,8 +32,11 @@ void setupTracer(JaegerDeploymentRecorder jdr, JaegerBuildTimeConfig buildTimeCo\n \n         if (buildTimeConfig.enabled) {\n             boolean metricsEnabled = capabilities.isCapabilityPresent(Capabilities.METRICS);\n+            MetricsFactory metricsFactory = metricsEnabled\n+                    ? new QuarkusJaegerMetricsFactory()\n+                    : new NoopMetricsFactory();\n \n-            jdr.registerTracer(jaeger, appConfig, metricsEnabled);\n+            jdr.registerTracer(jaeger, appConfig, metricsFactory);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyMjUyNw=="}, "originalCommit": {"oid": "33243e8241106e0f3f42d2cc79cf91a4e290f730"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0NjMxMg==", "bodyText": "Or perhaps not. I have changed JaegerProcessor to be\nboolean metricsEnabled = capabilities.isCapabilityPresent(Capabilities.METRICS);\n\njdr.registerTracer(jaeger, appConfig, metricsEnabled);\njust like before, and then change the JaegerDeploymentRecorder to have this:\nMetricsFactory metricsFactory = metricsEnabled\n        ? new QuarkusJaegerMetricsFactory()\n        : new NoopMetricsFactory();\n\ninitTracerConfig(jaeger);\nquarkusTracer.setMetricsFactory(metricsFactory);\nquarkusTracer.reset();\nBut no, this leads to the same failure as before.\nI'll try the approach with 2 recorder methods.", "url": "https://github.com/quarkusio/quarkus/pull/8581#discussion_r408746312", "createdAt": "2020-04-15T10:39:30Z", "author": {"login": "Ladicek"}, "path": "extensions/jaeger/deployment/src/main/java/io/quarkus/jaeger/deployment/JaegerProcessor.java", "diffHunk": "@@ -29,8 +32,11 @@ void setupTracer(JaegerDeploymentRecorder jdr, JaegerBuildTimeConfig buildTimeCo\n \n         if (buildTimeConfig.enabled) {\n             boolean metricsEnabled = capabilities.isCapabilityPresent(Capabilities.METRICS);\n+            MetricsFactory metricsFactory = metricsEnabled\n+                    ? new QuarkusJaegerMetricsFactory()\n+                    : new NoopMetricsFactory();\n \n-            jdr.registerTracer(jaeger, appConfig, metricsEnabled);\n+            jdr.registerTracer(jaeger, appConfig, metricsFactory);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyMjUyNw=="}, "originalCommit": {"oid": "33243e8241106e0f3f42d2cc79cf91a4e290f730"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0ODA4NQ==", "bodyText": "OK, well, let's leave it at that then. It's not worth your time.", "url": "https://github.com/quarkusio/quarkus/pull/8581#discussion_r408748085", "createdAt": "2020-04-15T10:42:43Z", "author": {"login": "gsmet"}, "path": "extensions/jaeger/deployment/src/main/java/io/quarkus/jaeger/deployment/JaegerProcessor.java", "diffHunk": "@@ -29,8 +32,11 @@ void setupTracer(JaegerDeploymentRecorder jdr, JaegerBuildTimeConfig buildTimeCo\n \n         if (buildTimeConfig.enabled) {\n             boolean metricsEnabled = capabilities.isCapabilityPresent(Capabilities.METRICS);\n+            MetricsFactory metricsFactory = metricsEnabled\n+                    ? new QuarkusJaegerMetricsFactory()\n+                    : new NoopMetricsFactory();\n \n-            jdr.registerTracer(jaeger, appConfig, metricsEnabled);\n+            jdr.registerTracer(jaeger, appConfig, metricsFactory);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyMjUyNw=="}, "originalCommit": {"oid": "33243e8241106e0f3f42d2cc79cf91a4e290f730"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2OTA4Mw==", "bodyText": "The approach with 2 recorder method works:\nboolean metricsEnabled = capabilities.isCapabilityPresent(Capabilities.METRICS);\n\nif (metricsEnabled) {\n    jdr.registerTracerWithMetrics(jaeger, appConfig);\n} else {\n    jdr.registerTracer(jaeger, appConfig);\n}\nand\nsynchronized public void registerTracer(JaegerConfig jaeger, ApplicationConfig appConfig) {\n    registerTracer(jaeger, appConfig, new NoopMetricsFactory());\n}\n\nsynchronized public void registerTracerWithMetrics(JaegerConfig jaeger, ApplicationConfig appConfig) {\n    registerTracer(jaeger, appConfig, new QuarkusJaegerMetricsFactory());\n}\n\nprivate void registerTracer(JaegerConfig jaeger, ApplicationConfig appConfig, MetricsFactory metricsFactory) {\n    ...\n}\nAnd I think it's certainly worth my time, as I get to learn a lot!", "url": "https://github.com/quarkusio/quarkus/pull/8581#discussion_r408769083", "createdAt": "2020-04-15T11:24:06Z", "author": {"login": "Ladicek"}, "path": "extensions/jaeger/deployment/src/main/java/io/quarkus/jaeger/deployment/JaegerProcessor.java", "diffHunk": "@@ -29,8 +32,11 @@ void setupTracer(JaegerDeploymentRecorder jdr, JaegerBuildTimeConfig buildTimeCo\n \n         if (buildTimeConfig.enabled) {\n             boolean metricsEnabled = capabilities.isCapabilityPresent(Capabilities.METRICS);\n+            MetricsFactory metricsFactory = metricsEnabled\n+                    ? new QuarkusJaegerMetricsFactory()\n+                    : new NoopMetricsFactory();\n \n-            jdr.registerTracer(jaeger, appConfig, metricsEnabled);\n+            jdr.registerTracer(jaeger, appConfig, metricsFactory);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyMjUyNw=="}, "originalCommit": {"oid": "33243e8241106e0f3f42d2cc79cf91a4e290f730"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc5MDE4Nw==", "bodyText": "I have modified the PR to use the approach with 2 recorder methods and currently waiting for CI to finish in my fork.", "url": "https://github.com/quarkusio/quarkus/pull/8581#discussion_r408790187", "createdAt": "2020-04-15T12:04:54Z", "author": {"login": "Ladicek"}, "path": "extensions/jaeger/deployment/src/main/java/io/quarkus/jaeger/deployment/JaegerProcessor.java", "diffHunk": "@@ -29,8 +32,11 @@ void setupTracer(JaegerDeploymentRecorder jdr, JaegerBuildTimeConfig buildTimeCo\n \n         if (buildTimeConfig.enabled) {\n             boolean metricsEnabled = capabilities.isCapabilityPresent(Capabilities.METRICS);\n+            MetricsFactory metricsFactory = metricsEnabled\n+                    ? new QuarkusJaegerMetricsFactory()\n+                    : new NoopMetricsFactory();\n \n-            jdr.registerTracer(jaeger, appConfig, metricsEnabled);\n+            jdr.registerTracer(jaeger, appConfig, metricsFactory);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyMjUyNw=="}, "originalCommit": {"oid": "33243e8241106e0f3f42d2cc79cf91a4e290f730"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3511, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}