{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5MDE1MTAy", "number": 10726, "title": "Fix race conditions in KafkaStreams startup", "bodyText": "Fixes #10724", "createdAt": "2020-07-14T17:29:35Z", "url": "https://github.com/quarkusio/quarkus/pull/10726", "merged": true, "mergeCommit": {"oid": "e0bd7e75a6b3411e0e7a9a8ca09eea7130fb2825"}, "closed": true, "closedAt": "2020-07-20T10:38:46Z", "author": {"login": "pcasaes"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc05h_0ABqjM1NDUxOTMxNjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc2s92FAFqTQ1MTM3OTI1NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3979a08c08fc981b18da3e578623a34b0992b5c3", "author": {"user": {"login": "pcasaes", "name": "Paulo Casaes"}}, "url": "https://github.com/quarkusio/quarkus/commit/3979a08c08fc981b18da3e578623a34b0992b5c3", "committedDate": "2020-07-14T17:29:08Z", "message": "#10724 Start up KafkaStreams during library and not app start up"}, "afterCommit": {"oid": "6b662865a15f9d3102f78aba308e0af7dd6778a6", "author": {"user": {"login": "pcasaes", "name": "Paulo Casaes"}}, "url": "https://github.com/quarkusio/quarkus/commit/6b662865a15f9d3102f78aba308e0af7dd6778a6", "committedDate": "2020-07-14T17:31:44Z", "message": "#10724 Start up KafkaStreams during library and not app start up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NzQ4MDMx", "url": "https://github.com/quarkusio/quarkus/pull/10726#pullrequestreview-448748031", "createdAt": "2020-07-15T08:42:02Z", "commit": {"oid": "6b662865a15f9d3102f78aba308e0af7dd6778a6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODo0MjowMlrOGx0QtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODo0MjowMlrOGx0QtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg4OTY1Mw==", "bodyText": "I have no idea what this code is doing but this observer will be notified before similar observers with no priority declared (the default priority is 2500, Priority.LIBRARY_BEFORE + 500 = 1500 and observers with smaller priority values are called first).\nIf that's the intention I have nothing to add ;-).", "url": "https://github.com/quarkusio/quarkus/pull/10726#discussion_r454889653", "createdAt": "2020-07-15T08:42:02Z", "author": {"login": "mkouba"}, "path": "extensions/kafka-streams/runtime/src/main/java/io/quarkus/kafka/streams/runtime/KafkaStreamsTopologyManager.java", "diffHunk": "@@ -189,7 +191,7 @@ private static String asString(List<InetSocketAddress> addresses) {\n                 .collect(Collectors.joining(\",\"));\n     }\n \n-    void onStart(@Observes StartupEvent ev) {\n+    void onStart(@Observes @Priority(Interceptor.Priority.LIBRARY_BEFORE + 500) StartupEvent ev) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b662865a15f9d3102f78aba308e0af7dd6778a6"}, "originalPosition": 20}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6b662865a15f9d3102f78aba308e0af7dd6778a6", "author": {"user": {"login": "pcasaes", "name": "Paulo Casaes"}}, "url": "https://github.com/quarkusio/quarkus/commit/6b662865a15f9d3102f78aba308e0af7dd6778a6", "committedDate": "2020-07-14T17:31:44Z", "message": "#10724 Start up KafkaStreams during library and not app start up"}, "afterCommit": {"oid": "ef4ee7656955449f1273657892d4c8ca1963f7df", "author": {"user": {"login": "pcasaes", "name": "Paulo Casaes"}}, "url": "https://github.com/quarkusio/quarkus/commit/ef4ee7656955449f1273657892d4c8ca1963f7df", "committedDate": "2020-07-16T15:49:30Z", "message": "Instantiate KafkaStreams in producer method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNDUzNjIz", "url": "https://github.com/quarkusio/quarkus/pull/10726#pullrequestreview-450453623", "createdAt": "2020-07-17T08:03:33Z", "commit": {"oid": "ef4ee7656955449f1273657892d4c8ca1963f7df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODowMzozM1rOGzJbIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODowMzozM1rOGzJbIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI4NDk2Mw==", "bodyText": "I would use a @PreDestroy here instead.", "url": "https://github.com/quarkusio/quarkus/pull/10726#discussion_r456284963", "createdAt": "2020-07-17T08:03:33Z", "author": {"login": "gsmet"}, "path": "extensions/kafka-streams/runtime/src/main/java/io/quarkus/kafka/streams/runtime/KafkaStreamsTopologyManager.java", "diffHunk": "@@ -189,56 +188,56 @@ private static String asString(List<InetSocketAddress> addresses) {\n                 .collect(Collectors.joining(\",\"));\n     }\n \n-    void onStart(@Observes StartupEvent ev) {\n-        if (executor == null) {\n-            return;\n+    void onStop(@Observes ShutdownEvent ev) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef4ee7656955449f1273657892d4c8ca1963f7df"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNDYyMjMz", "url": "https://github.com/quarkusio/quarkus/pull/10726#pullrequestreview-450462233", "createdAt": "2020-07-17T08:17:05Z", "commit": {"oid": "ef4ee7656955449f1273657892d4c8ca1963f7df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODoxNzowNlrOGzJ19A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODoxNzowNlrOGzJ19A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5MTgyOA==", "bodyText": "I checked on a small test, a Singleton bean seems to be not created if the bean is not injected anywhere.\nCan someone confirms this behavior, I searched in CDI/Arc I did not find anything.\nIn our application we are not injecting (yet) a KafkaStreams instance, because we don't need it, so this is not gonna work.\nCan you make sure it's working (or not) in that case : not injecting the bean somewhere ?", "url": "https://github.com/quarkusio/quarkus/pull/10726#discussion_r456291828", "createdAt": "2020-07-17T08:17:06Z", "author": {"login": "vietk"}, "path": "extensions/kafka-streams/runtime/src/main/java/io/quarkus/kafka/streams/runtime/KafkaStreamsTopologyManager.java", "diffHunk": "@@ -189,56 +188,56 @@ private static String asString(List<InetSocketAddress> addresses) {\n                 .collect(Collectors.joining(\",\"));\n     }\n \n-    void onStart(@Observes StartupEvent ev) {\n-        if (executor == null) {\n-            return;\n+    void onStop(@Observes ShutdownEvent ev) {\n+        if (streams != null) {\n+            LOGGER.debug(\"Stopping Kafka Streams pipeline\");\n+            streams.close();\n         }\n+    }\n \n-        String bootstrapServersConfig = asString(runtimeConfig.bootstrapServers);\n-\n-        Properties streamsProperties = getStreamsProperties(properties, bootstrapServersConfig, runtimeConfig);\n-\n-        if (kafkaClientSupplier.isUnsatisfied()) {\n-            streams = new KafkaStreams(topology.get(), streamsProperties);\n-        } else {\n-            streams = new KafkaStreams(topology.get(), streamsProperties, kafkaClientSupplier.get());\n+    @Produces\n+    @Singleton", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef4ee7656955449f1273657892d4c8ca1963f7df"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3584869ed848b9d8c2f7052ec9a5943f13866cc", "author": {"user": {"login": "pcasaes", "name": "Paulo Casaes"}}, "url": "https://github.com/quarkusio/quarkus/commit/a3584869ed848b9d8c2f7052ec9a5943f13866cc", "committedDate": "2020-07-18T13:35:39Z", "message": "Instantiate KafkaStreams in producer method"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0d1f23fd8d096a441b265a6dc2c5e086c934a1d0", "author": {"user": {"login": "gsmet", "name": "Guillaume Smet"}}, "url": "https://github.com/quarkusio/quarkus/commit/0d1f23fd8d096a441b265a6dc2c5e086c934a1d0", "committedDate": "2020-07-17T10:09:38Z", "message": "Remove the @Startup annotations for now as they are causing build issues"}, "afterCommit": {"oid": "8e2ebbb0f08f54d23c4d18d815dab56ee312e6bd", "author": {"user": {"login": "gsmet", "name": "Guillaume Smet"}}, "url": "https://github.com/quarkusio/quarkus/commit/8e2ebbb0f08f54d23c4d18d815dab56ee312e6bd", "committedDate": "2020-07-18T13:35:39Z", "message": "Reorganize the KafkaStreams beans initialization\n\nThis will avoid race conditions and make sure everything is properly\ninitialized before consuming the beans."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMDU5OTgy", "url": "https://github.com/quarkusio/quarkus/pull/10726#pullrequestreview-451059982", "createdAt": "2020-07-18T14:19:23Z", "commit": {"oid": "8e2ebbb0f08f54d23c4d18d815dab56ee312e6bd"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQxNDoxOToyM1rOGzohTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQxNDoxOToyM1rOGzohTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc5NDQ0NA==", "bodyText": "This annotation shouldn't be necessary", "url": "https://github.com/quarkusio/quarkus/pull/10726#discussion_r456794444", "createdAt": "2020-07-18T14:19:23Z", "author": {"login": "geoand"}, "path": "extensions/kafka-streams/runtime/src/main/java/io/quarkus/kafka/streams/runtime/KafkaStreamsProducer.java", "diffHunk": "@@ -0,0 +1,309 @@\n+package io.quarkus.kafka.streams.runtime;\n+\n+import java.net.InetSocketAddress;\n+import java.time.Duration;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.PreDestroy;\n+import javax.enterprise.inject.Instance;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import org.apache.kafka.clients.CommonClientConfigs;\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.admin.AdminClientConfig;\n+import org.apache.kafka.clients.admin.ListTopicsResult;\n+import org.apache.kafka.common.config.SaslConfigs;\n+import org.apache.kafka.common.config.SslConfigs;\n+import org.apache.kafka.streams.KafkaClientSupplier;\n+import org.apache.kafka.streams.KafkaStreams;\n+import org.apache.kafka.streams.KafkaStreams.StateListener;\n+import org.apache.kafka.streams.StreamsConfig;\n+import org.apache.kafka.streams.Topology;\n+import org.apache.kafka.streams.processor.StateRestoreListener;\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.arc.Unremovable;\n+import io.quarkus.runtime.Startup;\n+\n+/**\n+ * Manages the lifecycle of a Kafka Streams pipeline. If there's a producer\n+ * method returning a KS {@link Topology}, then this topology will be configured\n+ * and started. Optionally, before starting the pipeline, this manager will wait\n+ * for a given set of topics to be created, as KS itself will fail without all\n+ * input topics being created upfront.\n+ */\n+@Singleton\n+public class KafkaStreamsProducer {\n+\n+    private static final Logger LOGGER = Logger.getLogger(KafkaStreamsProducer.class.getName());\n+\n+    private final ExecutorService executorService;\n+    private final KafkaStreams kafkaStreams;\n+    private final KafkaStreamsTopologyManager kafkaStreamsTopologyManager;\n+\n+    @Inject", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e2ebbb0f08f54d23c4d18d815dab56ee312e6bd"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMzA1OTUw", "url": "https://github.com/quarkusio/quarkus/pull/10726#pullrequestreview-451305950", "createdAt": "2020-07-20T05:32:34Z", "commit": {"oid": "8e2ebbb0f08f54d23c4d18d815dab56ee312e6bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNTozMjozNFrOGz5GhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNTozMjozNFrOGz5GhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA2NjExNg==", "bodyText": "This looks like it can be final now, correct?", "url": "https://github.com/quarkusio/quarkus/pull/10726#discussion_r457066116", "createdAt": "2020-07-20T05:32:34Z", "author": {"login": "geoand"}, "path": "extensions/kafka-streams/runtime/src/main/java/io/quarkus/kafka/streams/runtime/KafkaStreamsTopologyManager.java", "diffHunk": "@@ -1,282 +1,29 @@\n package io.quarkus.kafka.streams.runtime;\n \n-import java.net.InetSocketAddress;\n-import java.time.Duration;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.Optional;\n import java.util.Properties;\n import java.util.Set;\n import java.util.concurrent.ExecutionException;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n-import java.util.function.Function;\n-import java.util.stream.Collectors;\n \n-import javax.enterprise.context.ApplicationScoped;\n-import javax.enterprise.event.Observes;\n-import javax.enterprise.inject.Instance;\n-import javax.enterprise.inject.Produces;\n-import javax.inject.Inject;\n-import javax.inject.Singleton;\n-\n-import org.apache.kafka.clients.CommonClientConfigs;\n import org.apache.kafka.clients.admin.AdminClient;\n-import org.apache.kafka.clients.admin.AdminClientConfig;\n import org.apache.kafka.clients.admin.ListTopicsResult;\n-import org.apache.kafka.common.config.SaslConfigs;\n-import org.apache.kafka.common.config.SslConfigs;\n-import org.apache.kafka.streams.KafkaClientSupplier;\n-import org.apache.kafka.streams.KafkaStreams;\n-import org.apache.kafka.streams.KafkaStreams.StateListener;\n-import org.apache.kafka.streams.StreamsConfig;\n-import org.apache.kafka.streams.Topology;\n-import org.apache.kafka.streams.processor.StateRestoreListener;\n import org.jboss.logging.Logger;\n \n-import io.quarkus.runtime.ShutdownEvent;\n-import io.quarkus.runtime.StartupEvent;\n-\n-/**\n- * Manages the lifecycle of a Kafka Streams pipeline. If there's a producer\n- * method returning a KS {@link Topology}, then this topology will be configured\n- * and started. Optionally, before starting the pipeline, this manager will wait\n- * for a given set of topics to be created, as KS itself will fail without all\n- * input topics being created upfront.\n- */\n-@ApplicationScoped\n public class KafkaStreamsTopologyManager {\n \n     private static final Logger LOGGER = Logger.getLogger(KafkaStreamsTopologyManager.class.getName());\n \n-    private final ExecutorService executor;\n-    private volatile KafkaStreams streams;\n-    private volatile KafkaStreamsRuntimeConfig runtimeConfig;\n-    private volatile Instance<Topology> topology;\n-    private volatile Properties properties;\n     private volatile Properties adminClientConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e2ebbb0f08f54d23c4d18d815dab56ee312e6bd"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMzEwMTgz", "url": "https://github.com/quarkusio/quarkus/pull/10726#pullrequestreview-451310183", "createdAt": "2020-07-20T05:45:39Z", "commit": {"oid": "8e2ebbb0f08f54d23c4d18d815dab56ee312e6bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNTo0NTozOVrOGz5eWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNTo0NTozOVrOGz5eWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3MjIxOQ==", "bodyText": "Is it certain that this needs to be @Unremovable?", "url": "https://github.com/quarkusio/quarkus/pull/10726#discussion_r457072219", "createdAt": "2020-07-20T05:45:39Z", "author": {"login": "geoand"}, "path": "extensions/kafka-streams/runtime/src/main/java/io/quarkus/kafka/streams/runtime/KafkaStreamsProducer.java", "diffHunk": "@@ -0,0 +1,309 @@\n+package io.quarkus.kafka.streams.runtime;\n+\n+import java.net.InetSocketAddress;\n+import java.time.Duration;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.PreDestroy;\n+import javax.enterprise.inject.Instance;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import org.apache.kafka.clients.CommonClientConfigs;\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.admin.AdminClientConfig;\n+import org.apache.kafka.clients.admin.ListTopicsResult;\n+import org.apache.kafka.common.config.SaslConfigs;\n+import org.apache.kafka.common.config.SslConfigs;\n+import org.apache.kafka.streams.KafkaClientSupplier;\n+import org.apache.kafka.streams.KafkaStreams;\n+import org.apache.kafka.streams.KafkaStreams.StateListener;\n+import org.apache.kafka.streams.StreamsConfig;\n+import org.apache.kafka.streams.Topology;\n+import org.apache.kafka.streams.processor.StateRestoreListener;\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.arc.Unremovable;\n+import io.quarkus.runtime.Startup;\n+\n+/**\n+ * Manages the lifecycle of a Kafka Streams pipeline. If there's a producer\n+ * method returning a KS {@link Topology}, then this topology will be configured\n+ * and started. Optionally, before starting the pipeline, this manager will wait\n+ * for a given set of topics to be created, as KS itself will fail without all\n+ * input topics being created upfront.\n+ */\n+@Singleton\n+public class KafkaStreamsProducer {\n+\n+    private static final Logger LOGGER = Logger.getLogger(KafkaStreamsProducer.class.getName());\n+\n+    private final ExecutorService executorService;\n+    private final KafkaStreams kafkaStreams;\n+    private final KafkaStreamsTopologyManager kafkaStreamsTopologyManager;\n+\n+    @Inject\n+    public KafkaStreamsProducer(KafkaStreamsSupport kafkaStreamsSupport, KafkaStreamsRuntimeConfig runtimeConfig,\n+            Instance<Topology> topology, Instance<KafkaClientSupplier> kafkaClientSupplier,\n+            Instance<StateListener> stateListener, Instance<StateRestoreListener> globalStateRestoreListener) {\n+        // No producer for Topology -> nothing to do\n+        if (topology.isUnsatisfied()) {\n+            LOGGER.debug(\"No Topology producer; Kafka Streams will not be started\");\n+            this.executorService = null;\n+            this.kafkaStreams = null;\n+            this.kafkaStreamsTopologyManager = null;\n+            return;\n+        }\n+\n+        Properties buildTimeProperties = kafkaStreamsSupport.getProperties();\n+\n+        String bootstrapServersConfig = asString(runtimeConfig.bootstrapServers);\n+        Properties kafkaStreamsProperties = getStreamsProperties(buildTimeProperties, bootstrapServersConfig, runtimeConfig);\n+        Properties adminClientConfig = getAdminClientConfig(kafkaStreamsProperties);\n+\n+        this.executorService = Executors.newSingleThreadExecutor();\n+\n+        this.kafkaStreams = initializeKafkaStreams(kafkaStreamsProperties, runtimeConfig, adminClientConfig, topology.get(),\n+                kafkaClientSupplier, stateListener, globalStateRestoreListener, executorService);\n+        this.kafkaStreamsTopologyManager = new KafkaStreamsTopologyManager(adminClientConfig);\n+    }\n+\n+    @Produces\n+    @Singleton\n+    @Unremovable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e2ebbb0f08f54d23c4d18d815dab56ee312e6bd"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMzEwMjE3", "url": "https://github.com/quarkusio/quarkus/pull/10726#pullrequestreview-451310217", "createdAt": "2020-07-20T05:45:46Z", "commit": {"oid": "8e2ebbb0f08f54d23c4d18d815dab56ee312e6bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNTo0NTo0N1rOGz5ehg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNTo0NTo0N1rOGz5ehg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3MjI2Mg==", "bodyText": "Same here", "url": "https://github.com/quarkusio/quarkus/pull/10726#discussion_r457072262", "createdAt": "2020-07-20T05:45:47Z", "author": {"login": "geoand"}, "path": "extensions/kafka-streams/runtime/src/main/java/io/quarkus/kafka/streams/runtime/KafkaStreamsProducer.java", "diffHunk": "@@ -0,0 +1,309 @@\n+package io.quarkus.kafka.streams.runtime;\n+\n+import java.net.InetSocketAddress;\n+import java.time.Duration;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.PreDestroy;\n+import javax.enterprise.inject.Instance;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import org.apache.kafka.clients.CommonClientConfigs;\n+import org.apache.kafka.clients.admin.AdminClient;\n+import org.apache.kafka.clients.admin.AdminClientConfig;\n+import org.apache.kafka.clients.admin.ListTopicsResult;\n+import org.apache.kafka.common.config.SaslConfigs;\n+import org.apache.kafka.common.config.SslConfigs;\n+import org.apache.kafka.streams.KafkaClientSupplier;\n+import org.apache.kafka.streams.KafkaStreams;\n+import org.apache.kafka.streams.KafkaStreams.StateListener;\n+import org.apache.kafka.streams.StreamsConfig;\n+import org.apache.kafka.streams.Topology;\n+import org.apache.kafka.streams.processor.StateRestoreListener;\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.arc.Unremovable;\n+import io.quarkus.runtime.Startup;\n+\n+/**\n+ * Manages the lifecycle of a Kafka Streams pipeline. If there's a producer\n+ * method returning a KS {@link Topology}, then this topology will be configured\n+ * and started. Optionally, before starting the pipeline, this manager will wait\n+ * for a given set of topics to be created, as KS itself will fail without all\n+ * input topics being created upfront.\n+ */\n+@Singleton\n+public class KafkaStreamsProducer {\n+\n+    private static final Logger LOGGER = Logger.getLogger(KafkaStreamsProducer.class.getName());\n+\n+    private final ExecutorService executorService;\n+    private final KafkaStreams kafkaStreams;\n+    private final KafkaStreamsTopologyManager kafkaStreamsTopologyManager;\n+\n+    @Inject\n+    public KafkaStreamsProducer(KafkaStreamsSupport kafkaStreamsSupport, KafkaStreamsRuntimeConfig runtimeConfig,\n+            Instance<Topology> topology, Instance<KafkaClientSupplier> kafkaClientSupplier,\n+            Instance<StateListener> stateListener, Instance<StateRestoreListener> globalStateRestoreListener) {\n+        // No producer for Topology -> nothing to do\n+        if (topology.isUnsatisfied()) {\n+            LOGGER.debug(\"No Topology producer; Kafka Streams will not be started\");\n+            this.executorService = null;\n+            this.kafkaStreams = null;\n+            this.kafkaStreamsTopologyManager = null;\n+            return;\n+        }\n+\n+        Properties buildTimeProperties = kafkaStreamsSupport.getProperties();\n+\n+        String bootstrapServersConfig = asString(runtimeConfig.bootstrapServers);\n+        Properties kafkaStreamsProperties = getStreamsProperties(buildTimeProperties, bootstrapServersConfig, runtimeConfig);\n+        Properties adminClientConfig = getAdminClientConfig(kafkaStreamsProperties);\n+\n+        this.executorService = Executors.newSingleThreadExecutor();\n+\n+        this.kafkaStreams = initializeKafkaStreams(kafkaStreamsProperties, runtimeConfig, adminClientConfig, topology.get(),\n+                kafkaClientSupplier, stateListener, globalStateRestoreListener, executorService);\n+        this.kafkaStreamsTopologyManager = new KafkaStreamsTopologyManager(adminClientConfig);\n+    }\n+\n+    @Produces\n+    @Singleton\n+    @Unremovable\n+    @Startup\n+    public KafkaStreams getKafkaStreams() {\n+        return kafkaStreams;\n+    }\n+\n+    @Produces\n+    @Singleton\n+    @Unremovable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e2ebbb0f08f54d23c4d18d815dab56ee312e6bd"}, "originalPosition": 95}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "849fe83e813b0763c3f39c3565b8715aeaf551ec", "author": {"user": {"login": "gsmet", "name": "Guillaume Smet"}}, "url": "https://github.com/quarkusio/quarkus/commit/849fe83e813b0763c3f39c3565b8715aeaf551ec", "committedDate": "2020-07-20T07:43:02Z", "message": "Reorganize the KafkaStreams beans initialization\n\nThis will avoid race conditions and make sure everything is properly\ninitialized before consuming the beans."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e2ebbb0f08f54d23c4d18d815dab56ee312e6bd", "author": {"user": {"login": "gsmet", "name": "Guillaume Smet"}}, "url": "https://github.com/quarkusio/quarkus/commit/8e2ebbb0f08f54d23c4d18d815dab56ee312e6bd", "committedDate": "2020-07-18T13:35:39Z", "message": "Reorganize the KafkaStreams beans initialization\n\nThis will avoid race conditions and make sure everything is properly\ninitialized before consuming the beans."}, "afterCommit": {"oid": "849fe83e813b0763c3f39c3565b8715aeaf551ec", "author": {"user": {"login": "gsmet", "name": "Guillaume Smet"}}, "url": "https://github.com/quarkusio/quarkus/commit/849fe83e813b0763c3f39c3565b8715aeaf551ec", "committedDate": "2020-07-20T07:43:02Z", "message": "Reorganize the KafkaStreams beans initialization\n\nThis will avoid race conditions and make sure everything is properly\ninitialized before consuming the beans."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMzc5MjU0", "url": "https://github.com/quarkusio/quarkus/pull/10726#pullrequestreview-451379254", "createdAt": "2020-07-20T08:01:22Z", "commit": {"oid": "849fe83e813b0763c3f39c3565b8715aeaf551ec"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3560, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}