{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0MjI3Mjkx", "number": 12744, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODo0ODozOFrOEuINcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODo0ODozOFrOEuINcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODA0NDY1OnYy", "diffSide": "RIGHT", "path": "extensions/micrometer/deployment/src/main/java/io/quarkus/micrometer/deployment/export/SignalFxRegistryProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODo0ODozOFrOHiVhOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxOToxMzo0NFrOHiWWmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc2NjIwMA==", "bodyText": "Should the config be captured in a boolean or just used directly?", "url": "https://github.com/quarkusio/quarkus/pull/12744#discussion_r505766200", "createdAt": "2020-10-15T18:48:38Z", "author": {"login": "kenfinnigan"}, "path": "extensions/micrometer/deployment/src/main/java/io/quarkus/micrometer/deployment/export/SignalFxRegistryProcessor.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package io.quarkus.micrometer.deployment.export;\n+\n+import java.util.function.BooleanSupplier;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.micrometer.deployment.MicrometerRegistryProviderBuildItem;\n+import io.quarkus.micrometer.runtime.MicrometerRecorder;\n+import io.quarkus.micrometer.runtime.config.MicrometerConfig;\n+import io.quarkus.micrometer.runtime.export.SignalFxMeterRegistryProvider;\n+\n+/**\n+ * Add support for the SignalFx Meter Registry. Note that the registry may not\n+ * be available at deployment time for some projects: Avoid direct class\n+ * references.\n+ */\n+public class SignalFxRegistryProcessor {\n+    private static final Logger log = Logger.getLogger(SignalFxRegistryProcessor.class);\n+\n+    static final String REGISTRY_CLASS_NAME = \"io.micrometer.signalfx.SignalFxMeterRegistry\";\n+    static final Class<?> REGISTRY_CLASS = MicrometerRecorder.getClassForName(REGISTRY_CLASS_NAME);\n+\n+    public static class SignalFxRegistryEnabled implements BooleanSupplier {\n+        MicrometerConfig mConfig;\n+\n+        @Override\n+        public boolean getAsBoolean() {\n+            boolean test = mConfig.checkRegistryEnabledWithDefault(mConfig.export.signalfx);\n+            return REGISTRY_CLASS != null && mConfig.checkRegistryEnabledWithDefault(mConfig.export.signalfx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "435fcbd17e39128b9c2ae7404c8bf3eda151f59e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc3OTg2Nw==", "bodyText": "woops!! good catch!\nthat was a debug.. because I'd done something else stupid. Thanks!", "url": "https://github.com/quarkusio/quarkus/pull/12744#discussion_r505779867", "createdAt": "2020-10-15T19:13:44Z", "author": {"login": "ebullient"}, "path": "extensions/micrometer/deployment/src/main/java/io/quarkus/micrometer/deployment/export/SignalFxRegistryProcessor.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package io.quarkus.micrometer.deployment.export;\n+\n+import java.util.function.BooleanSupplier;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.micrometer.deployment.MicrometerRegistryProviderBuildItem;\n+import io.quarkus.micrometer.runtime.MicrometerRecorder;\n+import io.quarkus.micrometer.runtime.config.MicrometerConfig;\n+import io.quarkus.micrometer.runtime.export.SignalFxMeterRegistryProvider;\n+\n+/**\n+ * Add support for the SignalFx Meter Registry. Note that the registry may not\n+ * be available at deployment time for some projects: Avoid direct class\n+ * references.\n+ */\n+public class SignalFxRegistryProcessor {\n+    private static final Logger log = Logger.getLogger(SignalFxRegistryProcessor.class);\n+\n+    static final String REGISTRY_CLASS_NAME = \"io.micrometer.signalfx.SignalFxMeterRegistry\";\n+    static final Class<?> REGISTRY_CLASS = MicrometerRecorder.getClassForName(REGISTRY_CLASS_NAME);\n+\n+    public static class SignalFxRegistryEnabled implements BooleanSupplier {\n+        MicrometerConfig mConfig;\n+\n+        @Override\n+        public boolean getAsBoolean() {\n+            boolean test = mConfig.checkRegistryEnabledWithDefault(mConfig.export.signalfx);\n+            return REGISTRY_CLASS != null && mConfig.checkRegistryEnabledWithDefault(mConfig.export.signalfx);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc2NjIwMA=="}, "originalCommit": {"oid": "435fcbd17e39128b9c2ae7404c8bf3eda151f59e"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4323, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}