{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNjA2MTYx", "number": 10305, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwOTowMDozMVrOEJmbnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOToxNDo0NFrOEKAjDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTAyMzAwOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/qute-reference.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwOTowMDozMlrOGqLKHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwOTowMzoyNlrOGqLRRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3NjE5MQ==", "bodyText": "I think adding a sentence mentioning, what disabling such a behaviour can result in, would be a good thing. I see that there's an example output a few lines down, which shows what happens, but explicitly stating something like  \"If this property is disabled, then each standalone line will result in a new line character, in the generated output\" might be helpful", "url": "https://github.com/quarkusio/quarkus/pull/10305#discussion_r446876191", "createdAt": "2020-06-29T09:00:32Z", "author": {"login": "jaikiran"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -124,6 +124,55 @@ A closing curly bracket (`}`) is ignored if not inside an expression/tag.\n \n TIP: It is also possible to use escape sequences `\\{` and `\\}` to insert delimiters in the text. In fact, an escape sequence is usually only needed for the start delimiter, ie. `\\\\{foo}` will be rendered as `{foo}` (no evaluation will happen).\n \n+=== Removing Standalone Lines From the Template\n+\n+By default, the parser removes standalone lines from the template output.\n+A *standalone line* is a line that contains only section tags (e.g. `{#each}` and `{/each}`), parameter declarations (e.g. `{@org.acme.Foo foo}`) and whitespace characters.\n+The default behavior can be disabled by setting the property `quarkus.qute.remove-standalone-lines` to `false`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2f1949d23b5a20506c2aa19cde9f50b943f3ce9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3ODAyMw==", "bodyText": "Yep, that makes sense. Except that it's not \"a new line character\" but \"a bunch of whitespace chars resulting in a new line\" ;-).", "url": "https://github.com/quarkusio/quarkus/pull/10305#discussion_r446878023", "createdAt": "2020-06-29T09:03:26Z", "author": {"login": "mkouba"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -124,6 +124,55 @@ A closing curly bracket (`}`) is ignored if not inside an expression/tag.\n \n TIP: It is also possible to use escape sequences `\\{` and `\\}` to insert delimiters in the text. In fact, an escape sequence is usually only needed for the start delimiter, ie. `\\\\{foo}` will be rendered as `{foo}` (no evaluation will happen).\n \n+=== Removing Standalone Lines From the Template\n+\n+By default, the parser removes standalone lines from the template output.\n+A *standalone line* is a line that contains only section tags (e.g. `{#each}` and `{/each}`), parameter declarations (e.g. `{@org.acme.Foo foo}`) and whitespace characters.\n+The default behavior can be disabled by setting the property `quarkus.qute.remove-standalone-lines` to `false`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3NjE5MQ=="}, "originalCommit": {"oid": "b2f1949d23b5a20506c2aa19cde9f50b943f3ce9"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTI5ODk0OnYy", "diffSide": "RIGHT", "path": "independent-projects/qute/core/src/test/java/io/quarkus/qute/ParserTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOToxMzo1NVrOGqzZmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMDozODo1NVrOGq2exg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUzNTUxNQ==", "bodyText": "So, this appears to validate that the description:\n\nA standalone line is a line that contains only section tags (e.g. {#each} and {/each}), parameter declarations (e.g. {@org.acme.Foo foo}) and whitespace characters.\n\nhas a confusing and. I initially thought this applied to empty lines as well, but this test says it does not.\nPerhaps the following is less confusing for people like me?\n\nA standalone line is a line that contains at least one of: section tags (e.g. {#each} and {/each}) or parameter declarations (e.g. {@org.acme.Foo foo}), ignoring any whitespace characters on the same line.\n\nIt's not perfect yet, though so if you find better, I'll take it :)", "url": "https://github.com/quarkusio/quarkus/pull/10305#discussion_r447535515", "createdAt": "2020-06-30T09:13:55Z", "author": {"login": "FroMage"}, "path": "independent-projects/qute/core/src/test/java/io/quarkus/qute/ParserTest.java", "diffHunk": "@@ -180,6 +180,18 @@ public void testCdata() {\n         assertEquals(\"Hello world <strong>\", engine.parse(\"Hello {name} {[<strong>]}\").data(\"name\", \"world\").render());\n     }\n \n+    @Test\n+    public void testRemoveStandaloneLines() {\n+        Engine engine = Engine.builder().addDefaults().removeStandaloneLines(true).build();\n+        String content = \"{@java.lang.String foo}\\n\" // -> standalone\n+                + \"\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "291a50af6bd36e7a49df4318c57e5d601f1162b4"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUzODc1Mg==", "bodyText": "Yeah, as I read it it's confusing... let's fix it!", "url": "https://github.com/quarkusio/quarkus/pull/10305#discussion_r447538752", "createdAt": "2020-06-30T09:19:03Z", "author": {"login": "mkouba"}, "path": "independent-projects/qute/core/src/test/java/io/quarkus/qute/ParserTest.java", "diffHunk": "@@ -180,6 +180,18 @@ public void testCdata() {\n         assertEquals(\"Hello world <strong>\", engine.parse(\"Hello {name} {[<strong>]}\").data(\"name\", \"world\").render());\n     }\n \n+    @Test\n+    public void testRemoveStandaloneLines() {\n+        Engine engine = Engine.builder().addDefaults().removeStandaloneLines(true).build();\n+        String content = \"{@java.lang.String foo}\\n\" // -> standalone\n+                + \"\\n\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUzNTUxNQ=="}, "originalCommit": {"oid": "291a50af6bd36e7a49df4318c57e5d601f1162b4"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU4NTk5MA==", "bodyText": "Is it better now?", "url": "https://github.com/quarkusio/quarkus/pull/10305#discussion_r447585990", "createdAt": "2020-06-30T10:38:55Z", "author": {"login": "mkouba"}, "path": "independent-projects/qute/core/src/test/java/io/quarkus/qute/ParserTest.java", "diffHunk": "@@ -180,6 +180,18 @@ public void testCdata() {\n         assertEquals(\"Hello world <strong>\", engine.parse(\"Hello {name} {[<strong>]}\").data(\"name\", \"world\").render());\n     }\n \n+    @Test\n+    public void testRemoveStandaloneLines() {\n+        Engine engine = Engine.builder().addDefaults().removeStandaloneLines(true).build();\n+        String content = \"{@java.lang.String foo}\\n\" // -> standalone\n+                + \"\\n\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUzNTUxNQ=="}, "originalCommit": {"oid": "291a50af6bd36e7a49df4318c57e5d601f1162b4"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTMwMTkxOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/qute-reference.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOToxNDo0NFrOGqzbbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOToxNDo0NFrOGqzbbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUzNTk4Mw==", "bodyText": "Here I'm missing an example of a line with whitespace but no section/parameter, to show that they get kept.", "url": "https://github.com/quarkusio/quarkus/pull/10305#discussion_r447535983", "createdAt": "2020-06-30T09:14:44Z", "author": {"login": "FroMage"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -124,6 +124,56 @@ A closing curly bracket (`}`) is ignored if not inside an expression/tag.\n \n TIP: It is also possible to use escape sequences `\\{` and `\\}` to insert delimiters in the text. In fact, an escape sequence is usually only needed for the start delimiter, ie. `\\\\{foo}` will be rendered as `{foo}` (no evaluation will happen).\n \n+=== Removing Standalone Lines From the Template\n+\n+By default, Qute parser removes standalone lines from the template output.\n+A *standalone line* is a line that contains only section tags (e.g. `{#each}` and `{/each}`), parameter declarations (e.g. `{@org.acme.Foo foo}`) and whitespace characters.\n+The default behavior can be disabled by setting the property `quarkus.qute.remove-standalone-lines` to `false`.\n+In this case, all whitespace characters from a standalone line will be printed to the output.\n+\n+.Template Example\n+[source,html]\n+----\n+<html>\n+  <body>\n+     <ul>\n+     {#for item in items} <1>\n+       <li>{item.name}</li> <2>\n+     {/for} <3>\n+     </ul>\n+   <body>\n+</html>\n+----\n+<1> This is a standalone line and will be removed.\n+<2> This is not a standalone line as it contains non-whitespace characters and an expression.\n+<3> This is a standalone line and will be removed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "291a50af6bd36e7a49df4318c57e5d601f1162b4"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2672, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}