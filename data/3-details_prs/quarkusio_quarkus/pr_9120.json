{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MDg1NTA2", "number": 9120, "title": "Move the gRPC support to the main Quarkus repository", "bodyText": "This PR is the move from https://github.com/quarkusio/quarkus-grpc to the main Quarkus repository.\nIt provides the gRPC extension, the ITs, and the documentation.", "createdAt": "2020-05-06T13:08:57Z", "url": "https://github.com/quarkusio/quarkus/pull/9120", "merged": true, "mergeCommit": {"oid": "0dfe85b0bdbc8acd7646b5aa35ef1ac35c28e618"}, "closed": true, "closedAt": "2020-05-14T13:11:33Z", "author": {"login": "cescoffier"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceoc34gBqjMzMDg0MjU0NjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchNPI0gFqTQxMTc4NzEyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b25ea8def8d07a2dce0a3e6bab3b78b5d011e29", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/4b25ea8def8d07a2dce0a3e6bab3b78b5d011e29", "committedDate": "2020-05-06T13:07:11Z", "message": "Add the gRPC support documentation\n\nCo-authored-by: Michal Szynkiewicz <michal.l.szynkiewicz@gmail.com>"}, "afterCommit": {"oid": "4c92e8416fffd56878f3737deb1d45a249e83e60", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/4c92e8416fffd56878f3737deb1d45a249e83e60", "committedDate": "2020-05-06T13:11:24Z", "message": "Add the gRPC support documentation\n\nCo-authored-by: Michal Szynkiewicz <michal.l.szynkiewicz@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4c92e8416fffd56878f3737deb1d45a249e83e60", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/4c92e8416fffd56878f3737deb1d45a249e83e60", "committedDate": "2020-05-06T13:11:24Z", "message": "Add the gRPC support documentation\n\nCo-authored-by: Michal Szynkiewicz <michal.l.szynkiewicz@gmail.com>"}, "afterCommit": {"oid": "9fa26b12cf318f23be1bccdf1466e0588c8b832e", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/9fa26b12cf318f23be1bccdf1466e0588c8b832e", "committedDate": "2020-05-06T13:31:36Z", "message": "Add the gRPC support documentation\n\nCo-authored-by: Michal Szynkiewicz <michal.l.szynkiewicz@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NzIzNTQ0", "url": "https://github.com/quarkusio/quarkus/pull/9120#pullrequestreview-406723544", "createdAt": "2020-05-06T15:22:12Z", "commit": {"oid": "9fa26b12cf318f23be1bccdf1466e0588c8b832e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNToyMjoxMlrOGRYYfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNTozNjozMVrOGRZDVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg3ODQ2Mw==", "bodyText": "This one is not in the Vert.x bom we include?", "url": "https://github.com/quarkusio/quarkus/pull/9120#discussion_r420878463", "createdAt": "2020-05-06T15:22:12Z", "author": {"login": "gsmet"}, "path": "bom/runtime/pom.xml", "diffHunk": "@@ -2418,6 +2425,11 @@\n                 <artifactId>vertx-web-common</artifactId>\n                 <version>${vertx.version}</version>\n             </dependency>\n+            <dependency>\n+                <groupId>io.vertx</groupId>\n+                <artifactId>vertx-grpc</artifactId>\n+                <version>${vertx.version}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fa26b12cf318f23be1bccdf1466e0588c8b832e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg3OTIyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            = Getting Started with Quarkus gRPC\n          \n          \n            \n            = Getting Started with gRPC", "url": "https://github.com/quarkusio/quarkus/pull/9120#discussion_r420879228", "createdAt": "2020-05-06T15:23:19Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/grpc-getting-started.adoc", "diffHunk": "@@ -0,0 +1,318 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Getting Started with Quarkus gRPC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fa26b12cf318f23be1bccdf1466e0588c8b832e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg3OTQwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This page explains how to start using Quarkus gRPC.\n          \n          \n            \n            This page explains how to start using gRPC in your Quarkus application.", "url": "https://github.com/quarkusio/quarkus/pull/9120#discussion_r420879405", "createdAt": "2020-05-06T15:23:34Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/grpc-getting-started.adoc", "diffHunk": "@@ -0,0 +1,318 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Getting Started with Quarkus gRPC\n+\n+include::./attributes.adoc[]\n+\n+This page explains how to start using Quarkus gRPC.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fa26b12cf318f23be1bccdf1466e0588c8b832e"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg4MDA2Mw==", "bodyText": "This is annoying because you can't just add the extension.", "url": "https://github.com/quarkusio/quarkus/pull/9120#discussion_r420880063", "createdAt": "2020-05-06T15:24:27Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/grpc-getting-started.adoc", "diffHunk": "@@ -0,0 +1,318 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Getting Started with Quarkus gRPC\n+\n+include::./attributes.adoc[]\n+\n+This page explains how to start using Quarkus gRPC.\n+While this page describes how to configure it with Maven, it is also possible to use Gradle.\n+\n+Let's imagine you have a regular Quarkus project, generated from the https://code.quarkus.io[Quarkus project generator].\n+The default configuration is enough, but you can also select some extensions if you want.\n+\n+== Configuring your project\n+\n+Edit the `pom.xml` file to add the quarkus gRPC extension dependency and the JSR 305 (just under `<dependencies>`):\n+\n+[source, xml]\n+----\n+<dependency>\n+  <groupId>io.quarkus</groupId>\n+  <artifactId>quarkus-grpc</artifactId>\n+</dependency>\n+<dependency>\n+ <groupId>com.google.code.findbugs</groupId>\n+ <artifactId>jsr305</artifactId>\n+ <scope>provided</scope>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fa26b12cf318f23be1bccdf1466e0588c8b832e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg4MTA5Mg==", "bodyText": "Looks like they should be callouts? At least that's what I suppose from how the sentences are worded?", "url": "https://github.com/quarkusio/quarkus/pull/9120#discussion_r420881092", "createdAt": "2020-05-06T15:25:46Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/grpc-getting-started.adoc", "diffHunk": "@@ -0,0 +1,318 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Getting Started with Quarkus gRPC\n+\n+include::./attributes.adoc[]\n+\n+This page explains how to start using Quarkus gRPC.\n+While this page describes how to configure it with Maven, it is also possible to use Gradle.\n+\n+Let's imagine you have a regular Quarkus project, generated from the https://code.quarkus.io[Quarkus project generator].\n+The default configuration is enough, but you can also select some extensions if you want.\n+\n+== Configuring your project\n+\n+Edit the `pom.xml` file to add the quarkus gRPC extension dependency and the JSR 305 (just under `<dependencies>`):\n+\n+[source, xml]\n+----\n+<dependency>\n+  <groupId>io.quarkus</groupId>\n+  <artifactId>quarkus-grpc</artifactId>\n+</dependency>\n+<dependency>\n+ <groupId>com.google.code.findbugs</groupId>\n+ <artifactId>jsr305</artifactId>\n+ <scope>provided</scope>\n+</dependency>\n+----\n+\n+NOTE: The jsr305 is only used to compile the generated classes. It is not required at runtime.\n+\n+In the `<properties>` section, define the 2 following properties:\n+\n+[source, xml, subs=\"verbatim,attributes\"]\n+----\n+<grpc.version>{grpc-version}</grpc.version>\n+<protoc.version>{protoc-version}</protoc.version>\n+----\n+\n+They configure the gRPC version and the `protoc` version.\n+\n+Finally, add to the `build` section the `os-maven-plugin` extension and the `protobuf-maven-plugin` configuration.\n+\n+[source, xml, subs=\"verbatim,attributes\"]\n+----\n+<build>\n+    <extensions>\n+        <extension>\n+            <groupId>kr.motd.maven</groupId>\n+            <artifactId>os-maven-plugin</artifactId>\n+            <version>{os-maven-plugin-version}</version>\n+        </extension>\n+    </extensions>\n+\n+    <plugins>\n+        <plugin>\n+            <groupId>org.xolstice.maven.plugins</groupId>\n+            <artifactId>protobuf-maven-plugin</artifactId>\n+            <version>{protobuf-maven-plugin-version}</version>\n+            <configuration>\n+                <protocArtifact>com.google.protobuf:protoc:${protoc.version}:exe:${os.detected.classifier}</protocArtifact>\n+                <pluginId>grpc-java</pluginId>\n+                <pluginArtifact>io.grpc:protoc-gen-grpc-java:${grpc.version}:exe:${os.detected.classifier}</pluginArtifact>\n+                <protocPlugins>\n+                    <protocPlugin>\n+                        <id>quarkus-grpc-protoc-plugin</id>\n+                        <groupId>io.quarkus</groupId>\n+                        <artifactId>quarkus-grpc-protoc-plugin</artifactId>\n+                        <version>999-SNAPSHOT</version>\n+                        <mainClass>io.quarkus.grpc.protoc.plugin.MutinyGrpcGenerator</mainClass>\n+                    </protocPlugin>\n+                </protocPlugins>\n+            </configuration>\n+            <executions>\n+                <execution>\n+                    <id>compile</id>\n+                    <goals>\n+                        <goal>compile</goal>\n+                        <goal>compile-custom</goal>\n+                    </goals>\n+                </execution>\n+                <execution>\n+                    <id>test-compile</id>\n+                    <goals>\n+                        <goal>test-compile</goal>\n+                        <goal>test-compile-custom</goal>\n+                    </goals>\n+                </execution>\n+            </executions>\n+        </plugin>\n+\n+        <!-- ... -->\n+    </plugins>\n+</build>\n+----\n+\n+The `protobuf-maven-plugin` that generates stub classes from your gRPC service definition (`proto` files).\n+The class generation uses a tool named `protoc`, which is OS-specific.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fa26b12cf318f23be1bccdf1466e0588c8b832e"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg4MjAwMA==", "bodyText": "How does it work with hot reload?", "url": "https://github.com/quarkusio/quarkus/pull/9120#discussion_r420882000", "createdAt": "2020-05-06T15:26:58Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/grpc-getting-started.adoc", "diffHunk": "@@ -0,0 +1,318 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Getting Started with Quarkus gRPC\n+\n+include::./attributes.adoc[]\n+\n+This page explains how to start using Quarkus gRPC.\n+While this page describes how to configure it with Maven, it is also possible to use Gradle.\n+\n+Let's imagine you have a regular Quarkus project, generated from the https://code.quarkus.io[Quarkus project generator].\n+The default configuration is enough, but you can also select some extensions if you want.\n+\n+== Configuring your project\n+\n+Edit the `pom.xml` file to add the quarkus gRPC extension dependency and the JSR 305 (just under `<dependencies>`):\n+\n+[source, xml]\n+----\n+<dependency>\n+  <groupId>io.quarkus</groupId>\n+  <artifactId>quarkus-grpc</artifactId>\n+</dependency>\n+<dependency>\n+ <groupId>com.google.code.findbugs</groupId>\n+ <artifactId>jsr305</artifactId>\n+ <scope>provided</scope>\n+</dependency>\n+----\n+\n+NOTE: The jsr305 is only used to compile the generated classes. It is not required at runtime.\n+\n+In the `<properties>` section, define the 2 following properties:\n+\n+[source, xml, subs=\"verbatim,attributes\"]\n+----\n+<grpc.version>{grpc-version}</grpc.version>\n+<protoc.version>{protoc-version}</protoc.version>\n+----\n+\n+They configure the gRPC version and the `protoc` version.\n+\n+Finally, add to the `build` section the `os-maven-plugin` extension and the `protobuf-maven-plugin` configuration.\n+\n+[source, xml, subs=\"verbatim,attributes\"]\n+----\n+<build>\n+    <extensions>\n+        <extension>\n+            <groupId>kr.motd.maven</groupId>\n+            <artifactId>os-maven-plugin</artifactId>\n+            <version>{os-maven-plugin-version}</version>\n+        </extension>\n+    </extensions>\n+\n+    <plugins>\n+        <plugin>\n+            <groupId>org.xolstice.maven.plugins</groupId>\n+            <artifactId>protobuf-maven-plugin</artifactId>\n+            <version>{protobuf-maven-plugin-version}</version>\n+            <configuration>\n+                <protocArtifact>com.google.protobuf:protoc:${protoc.version}:exe:${os.detected.classifier}</protocArtifact>\n+                <pluginId>grpc-java</pluginId>\n+                <pluginArtifact>io.grpc:protoc-gen-grpc-java:${grpc.version}:exe:${os.detected.classifier}</pluginArtifact>\n+                <protocPlugins>\n+                    <protocPlugin>\n+                        <id>quarkus-grpc-protoc-plugin</id>\n+                        <groupId>io.quarkus</groupId>\n+                        <artifactId>quarkus-grpc-protoc-plugin</artifactId>\n+                        <version>999-SNAPSHOT</version>\n+                        <mainClass>io.quarkus.grpc.protoc.plugin.MutinyGrpcGenerator</mainClass>\n+                    </protocPlugin>\n+                </protocPlugins>\n+            </configuration>\n+            <executions>\n+                <execution>\n+                    <id>compile</id>\n+                    <goals>\n+                        <goal>compile</goal>\n+                        <goal>compile-custom</goal>\n+                    </goals>\n+                </execution>\n+                <execution>\n+                    <id>test-compile</id>\n+                    <goals>\n+                        <goal>test-compile</goal>\n+                        <goal>test-compile-custom</goal>\n+                    </goals>\n+                </execution>\n+            </executions>\n+        </plugin>\n+\n+        <!-- ... -->\n+    </plugins>\n+</build>\n+----\n+\n+The `protobuf-maven-plugin` that generates stub classes from your gRPC service definition (`proto` files).\n+The class generation uses a tool named `protoc`, which is OS-specific.\n+That's why we use the `os-maven-plugin` to target the executable compatible with the operating system.\n+\n+NOTE: This configuration instructs the `protobuf-maven-plugin` to generate the default gRPC classes and classes using Mutiny to fit with the Quarkus development experience.\n+\n+With this configuration, you can put your service and message definitions in the `src/main/proto` directory.\n+Let's start with a simple _Hello_ service.\n+Create the `src/main/proto/helloworld.proto` file with the following content:\n+\n+[source]\n+----\n+syntax = \"proto3\";\n+\n+option java_multiple_files = true;\n+option java_package = \"io.quarkus.example\";\n+option java_outer_classname = \"HelloWorldProto\";\n+\n+package helloworld;\n+\n+// The greeting service definition.\n+service Greeter {\n+    // Sends a greeting\n+    rpc SayHello (HelloRequest) returns (HelloReply) {}\n+}\n+\n+// The request message containing the user's name.\n+message HelloRequest {\n+    string name = 1;\n+}\n+\n+// The response message containing the greetings\n+message HelloReply {\n+    string message = 1;\n+}\n+----\n+\n+This `proto` file defines a simple service interface with a single method (`SayHello`), and the exchanged messages (`HelloRequest` containing the name and `HelloReply` containing the greeting message).\n+\n+Before coding, we need to generate the classes used to implement and consume gRPC services.\n+In a terminal, run:\n+\n+[source, bash]\n+----\n+$ mvn compile\n+----\n+\n+Once generated, you can look at the `target/generated-sources/protobuf` directory:\n+\n+[source, txt]\n+----\n+target/generated-sources/protobuf\n+\u251c\u2500\u2500 grpc-java\n+\u2502   \u2514\u2500\u2500 io\n+\u2502       \u2514\u2500\u2500 quarkus\n+\u2502           \u2514\u2500\u2500 example\n+\u2502               \u2514\u2500\u2500 GreeterGrpc.java\n+\u2514\u2500\u2500 java\n+    \u2514\u2500\u2500 io\n+        \u2514\u2500\u2500 quarkus\n+            \u2514\u2500\u2500 example\n+                \u251c\u2500\u2500 HelloReply.java\n+                \u251c\u2500\u2500 HelloReplyOrBuilder.java\n+                \u251c\u2500\u2500 HelloRequest.java\n+                \u251c\u2500\u2500 HelloRequestOrBuilder.java\n+                \u251c\u2500\u2500 HelloWorldProto.java\n+                \u2514\u2500\u2500 MutinyGreeterGrpc.java\n+----\n+\n+These are the classes we are going to use.\n+\n+IMPORTANT: Every time you update the `proto` files, you need to re-generate the classes (using `mvn compile`).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fa26b12cf318f23be1bccdf1466e0588c8b832e"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg4MjQxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            With Quarkus gRPC, implementing a service requires to _extend_ the generated service base implementation and exposes it as a `@Singleton` CDI bean.\n          \n          \n            \n            With Quarkus, implementing a service requires to _extend_ the generated service base implementation and expose it as a `@Singleton` CDI bean.", "url": "https://github.com/quarkusio/quarkus/pull/9120#discussion_r420882417", "createdAt": "2020-05-06T15:27:34Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/grpc-getting-started.adoc", "diffHunk": "@@ -0,0 +1,318 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Getting Started with Quarkus gRPC\n+\n+include::./attributes.adoc[]\n+\n+This page explains how to start using Quarkus gRPC.\n+While this page describes how to configure it with Maven, it is also possible to use Gradle.\n+\n+Let's imagine you have a regular Quarkus project, generated from the https://code.quarkus.io[Quarkus project generator].\n+The default configuration is enough, but you can also select some extensions if you want.\n+\n+== Configuring your project\n+\n+Edit the `pom.xml` file to add the quarkus gRPC extension dependency and the JSR 305 (just under `<dependencies>`):\n+\n+[source, xml]\n+----\n+<dependency>\n+  <groupId>io.quarkus</groupId>\n+  <artifactId>quarkus-grpc</artifactId>\n+</dependency>\n+<dependency>\n+ <groupId>com.google.code.findbugs</groupId>\n+ <artifactId>jsr305</artifactId>\n+ <scope>provided</scope>\n+</dependency>\n+----\n+\n+NOTE: The jsr305 is only used to compile the generated classes. It is not required at runtime.\n+\n+In the `<properties>` section, define the 2 following properties:\n+\n+[source, xml, subs=\"verbatim,attributes\"]\n+----\n+<grpc.version>{grpc-version}</grpc.version>\n+<protoc.version>{protoc-version}</protoc.version>\n+----\n+\n+They configure the gRPC version and the `protoc` version.\n+\n+Finally, add to the `build` section the `os-maven-plugin` extension and the `protobuf-maven-plugin` configuration.\n+\n+[source, xml, subs=\"verbatim,attributes\"]\n+----\n+<build>\n+    <extensions>\n+        <extension>\n+            <groupId>kr.motd.maven</groupId>\n+            <artifactId>os-maven-plugin</artifactId>\n+            <version>{os-maven-plugin-version}</version>\n+        </extension>\n+    </extensions>\n+\n+    <plugins>\n+        <plugin>\n+            <groupId>org.xolstice.maven.plugins</groupId>\n+            <artifactId>protobuf-maven-plugin</artifactId>\n+            <version>{protobuf-maven-plugin-version}</version>\n+            <configuration>\n+                <protocArtifact>com.google.protobuf:protoc:${protoc.version}:exe:${os.detected.classifier}</protocArtifact>\n+                <pluginId>grpc-java</pluginId>\n+                <pluginArtifact>io.grpc:protoc-gen-grpc-java:${grpc.version}:exe:${os.detected.classifier}</pluginArtifact>\n+                <protocPlugins>\n+                    <protocPlugin>\n+                        <id>quarkus-grpc-protoc-plugin</id>\n+                        <groupId>io.quarkus</groupId>\n+                        <artifactId>quarkus-grpc-protoc-plugin</artifactId>\n+                        <version>999-SNAPSHOT</version>\n+                        <mainClass>io.quarkus.grpc.protoc.plugin.MutinyGrpcGenerator</mainClass>\n+                    </protocPlugin>\n+                </protocPlugins>\n+            </configuration>\n+            <executions>\n+                <execution>\n+                    <id>compile</id>\n+                    <goals>\n+                        <goal>compile</goal>\n+                        <goal>compile-custom</goal>\n+                    </goals>\n+                </execution>\n+                <execution>\n+                    <id>test-compile</id>\n+                    <goals>\n+                        <goal>test-compile</goal>\n+                        <goal>test-compile-custom</goal>\n+                    </goals>\n+                </execution>\n+            </executions>\n+        </plugin>\n+\n+        <!-- ... -->\n+    </plugins>\n+</build>\n+----\n+\n+The `protobuf-maven-plugin` that generates stub classes from your gRPC service definition (`proto` files).\n+The class generation uses a tool named `protoc`, which is OS-specific.\n+That's why we use the `os-maven-plugin` to target the executable compatible with the operating system.\n+\n+NOTE: This configuration instructs the `protobuf-maven-plugin` to generate the default gRPC classes and classes using Mutiny to fit with the Quarkus development experience.\n+\n+With this configuration, you can put your service and message definitions in the `src/main/proto` directory.\n+Let's start with a simple _Hello_ service.\n+Create the `src/main/proto/helloworld.proto` file with the following content:\n+\n+[source]\n+----\n+syntax = \"proto3\";\n+\n+option java_multiple_files = true;\n+option java_package = \"io.quarkus.example\";\n+option java_outer_classname = \"HelloWorldProto\";\n+\n+package helloworld;\n+\n+// The greeting service definition.\n+service Greeter {\n+    // Sends a greeting\n+    rpc SayHello (HelloRequest) returns (HelloReply) {}\n+}\n+\n+// The request message containing the user's name.\n+message HelloRequest {\n+    string name = 1;\n+}\n+\n+// The response message containing the greetings\n+message HelloReply {\n+    string message = 1;\n+}\n+----\n+\n+This `proto` file defines a simple service interface with a single method (`SayHello`), and the exchanged messages (`HelloRequest` containing the name and `HelloReply` containing the greeting message).\n+\n+Before coding, we need to generate the classes used to implement and consume gRPC services.\n+In a terminal, run:\n+\n+[source, bash]\n+----\n+$ mvn compile\n+----\n+\n+Once generated, you can look at the `target/generated-sources/protobuf` directory:\n+\n+[source, txt]\n+----\n+target/generated-sources/protobuf\n+\u251c\u2500\u2500 grpc-java\n+\u2502   \u2514\u2500\u2500 io\n+\u2502       \u2514\u2500\u2500 quarkus\n+\u2502           \u2514\u2500\u2500 example\n+\u2502               \u2514\u2500\u2500 GreeterGrpc.java\n+\u2514\u2500\u2500 java\n+    \u2514\u2500\u2500 io\n+        \u2514\u2500\u2500 quarkus\n+            \u2514\u2500\u2500 example\n+                \u251c\u2500\u2500 HelloReply.java\n+                \u251c\u2500\u2500 HelloReplyOrBuilder.java\n+                \u251c\u2500\u2500 HelloRequest.java\n+                \u251c\u2500\u2500 HelloRequestOrBuilder.java\n+                \u251c\u2500\u2500 HelloWorldProto.java\n+                \u2514\u2500\u2500 MutinyGreeterGrpc.java\n+----\n+\n+These are the classes we are going to use.\n+\n+IMPORTANT: Every time you update the `proto` files, you need to re-generate the classes (using `mvn compile`).\n+\n+== Implementing a gRPC service\n+\n+Now that we have the generated classes let's implement our _hello_ service.\n+\n+With Quarkus gRPC, implementing a service requires to _extend_ the generated service base implementation and exposes it as a `@Singleton` CDI bean.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fa26b12cf318f23be1bccdf1466e0588c8b832e"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg4MzExOA==", "bodyText": "maybe add what Mutiny is in 3 words?", "url": "https://github.com/quarkusio/quarkus/pull/9120#discussion_r420883118", "createdAt": "2020-05-06T15:28:28Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/grpc-getting-started.adoc", "diffHunk": "@@ -0,0 +1,318 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Getting Started with Quarkus gRPC\n+\n+include::./attributes.adoc[]\n+\n+This page explains how to start using Quarkus gRPC.\n+While this page describes how to configure it with Maven, it is also possible to use Gradle.\n+\n+Let's imagine you have a regular Quarkus project, generated from the https://code.quarkus.io[Quarkus project generator].\n+The default configuration is enough, but you can also select some extensions if you want.\n+\n+== Configuring your project\n+\n+Edit the `pom.xml` file to add the quarkus gRPC extension dependency and the JSR 305 (just under `<dependencies>`):\n+\n+[source, xml]\n+----\n+<dependency>\n+  <groupId>io.quarkus</groupId>\n+  <artifactId>quarkus-grpc</artifactId>\n+</dependency>\n+<dependency>\n+ <groupId>com.google.code.findbugs</groupId>\n+ <artifactId>jsr305</artifactId>\n+ <scope>provided</scope>\n+</dependency>\n+----\n+\n+NOTE: The jsr305 is only used to compile the generated classes. It is not required at runtime.\n+\n+In the `<properties>` section, define the 2 following properties:\n+\n+[source, xml, subs=\"verbatim,attributes\"]\n+----\n+<grpc.version>{grpc-version}</grpc.version>\n+<protoc.version>{protoc-version}</protoc.version>\n+----\n+\n+They configure the gRPC version and the `protoc` version.\n+\n+Finally, add to the `build` section the `os-maven-plugin` extension and the `protobuf-maven-plugin` configuration.\n+\n+[source, xml, subs=\"verbatim,attributes\"]\n+----\n+<build>\n+    <extensions>\n+        <extension>\n+            <groupId>kr.motd.maven</groupId>\n+            <artifactId>os-maven-plugin</artifactId>\n+            <version>{os-maven-plugin-version}</version>\n+        </extension>\n+    </extensions>\n+\n+    <plugins>\n+        <plugin>\n+            <groupId>org.xolstice.maven.plugins</groupId>\n+            <artifactId>protobuf-maven-plugin</artifactId>\n+            <version>{protobuf-maven-plugin-version}</version>\n+            <configuration>\n+                <protocArtifact>com.google.protobuf:protoc:${protoc.version}:exe:${os.detected.classifier}</protocArtifact>\n+                <pluginId>grpc-java</pluginId>\n+                <pluginArtifact>io.grpc:protoc-gen-grpc-java:${grpc.version}:exe:${os.detected.classifier}</pluginArtifact>\n+                <protocPlugins>\n+                    <protocPlugin>\n+                        <id>quarkus-grpc-protoc-plugin</id>\n+                        <groupId>io.quarkus</groupId>\n+                        <artifactId>quarkus-grpc-protoc-plugin</artifactId>\n+                        <version>999-SNAPSHOT</version>\n+                        <mainClass>io.quarkus.grpc.protoc.plugin.MutinyGrpcGenerator</mainClass>\n+                    </protocPlugin>\n+                </protocPlugins>\n+            </configuration>\n+            <executions>\n+                <execution>\n+                    <id>compile</id>\n+                    <goals>\n+                        <goal>compile</goal>\n+                        <goal>compile-custom</goal>\n+                    </goals>\n+                </execution>\n+                <execution>\n+                    <id>test-compile</id>\n+                    <goals>\n+                        <goal>test-compile</goal>\n+                        <goal>test-compile-custom</goal>\n+                    </goals>\n+                </execution>\n+            </executions>\n+        </plugin>\n+\n+        <!-- ... -->\n+    </plugins>\n+</build>\n+----\n+\n+The `protobuf-maven-plugin` that generates stub classes from your gRPC service definition (`proto` files).\n+The class generation uses a tool named `protoc`, which is OS-specific.\n+That's why we use the `os-maven-plugin` to target the executable compatible with the operating system.\n+\n+NOTE: This configuration instructs the `protobuf-maven-plugin` to generate the default gRPC classes and classes using Mutiny to fit with the Quarkus development experience.\n+\n+With this configuration, you can put your service and message definitions in the `src/main/proto` directory.\n+Let's start with a simple _Hello_ service.\n+Create the `src/main/proto/helloworld.proto` file with the following content:\n+\n+[source]\n+----\n+syntax = \"proto3\";\n+\n+option java_multiple_files = true;\n+option java_package = \"io.quarkus.example\";\n+option java_outer_classname = \"HelloWorldProto\";\n+\n+package helloworld;\n+\n+// The greeting service definition.\n+service Greeter {\n+    // Sends a greeting\n+    rpc SayHello (HelloRequest) returns (HelloReply) {}\n+}\n+\n+// The request message containing the user's name.\n+message HelloRequest {\n+    string name = 1;\n+}\n+\n+// The response message containing the greetings\n+message HelloReply {\n+    string message = 1;\n+}\n+----\n+\n+This `proto` file defines a simple service interface with a single method (`SayHello`), and the exchanged messages (`HelloRequest` containing the name and `HelloReply` containing the greeting message).\n+\n+Before coding, we need to generate the classes used to implement and consume gRPC services.\n+In a terminal, run:\n+\n+[source, bash]\n+----\n+$ mvn compile\n+----\n+\n+Once generated, you can look at the `target/generated-sources/protobuf` directory:\n+\n+[source, txt]\n+----\n+target/generated-sources/protobuf\n+\u251c\u2500\u2500 grpc-java\n+\u2502   \u2514\u2500\u2500 io\n+\u2502       \u2514\u2500\u2500 quarkus\n+\u2502           \u2514\u2500\u2500 example\n+\u2502               \u2514\u2500\u2500 GreeterGrpc.java\n+\u2514\u2500\u2500 java\n+    \u2514\u2500\u2500 io\n+        \u2514\u2500\u2500 quarkus\n+            \u2514\u2500\u2500 example\n+                \u251c\u2500\u2500 HelloReply.java\n+                \u251c\u2500\u2500 HelloReplyOrBuilder.java\n+                \u251c\u2500\u2500 HelloRequest.java\n+                \u251c\u2500\u2500 HelloRequestOrBuilder.java\n+                \u251c\u2500\u2500 HelloWorldProto.java\n+                \u2514\u2500\u2500 MutinyGreeterGrpc.java\n+----\n+\n+These are the classes we are going to use.\n+\n+IMPORTANT: Every time you update the `proto` files, you need to re-generate the classes (using `mvn compile`).\n+\n+== Implementing a gRPC service\n+\n+Now that we have the generated classes let's implement our _hello_ service.\n+\n+With Quarkus gRPC, implementing a service requires to _extend_ the generated service base implementation and exposes it as a `@Singleton` CDI bean.\n+\n+IMPORTANT: Don't use `@ApplicationScoped` as the gRPC service implementation cannot be proxied.\n+\n+=== Implementing a service\n+\n+Create the `src/main/java/org/acme/HelloService.java` file with the following content:\n+\n+[source, java]\n+----\n+package org.acme;\n+\n+import io.grpc.stub.StreamObserver;\n+import io.quarkus.example.GreeterGrpc;\n+import io.quarkus.example.HelloReply;\n+import io.quarkus.example.HelloRequest;\n+\n+import javax.inject.Singleton;\n+\n+@Singleton                                                                                    // <1>\n+public class HelloService extends GreeterGrpc.GreeterImplBase {                               // <2>\n+\n+    @Override\n+    public void sayHello(HelloRequest request, StreamObserver<HelloReply> responseObserver) { // <3>\n+        String name = request.getName();\n+        String message = \"Hello \" + name;\n+        responseObserver.onNext(HelloReply.newBuilder().setMessage(message).build());         // <4>\n+        responseObserver.onCompleted();                                                       // <5>\n+    }\n+}\n+\n+----\n+1. Expose your implementation as bean\n+2. Extends the `ImplBase` class. This is a generated class.\n+3. Implement the methods defined in the service definition (here we have a single method)\n+4. Build and send the response\n+5. Close the response\n+\n+Quarkus also provides an additional model with Mutiny.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fa26b12cf318f23be1bccdf1466e0588c8b832e"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg4NDIxNg==", "bodyText": "How is this property mapped? If it's some magic Quarkus config, I would prefer we have some proper quarkus. config.", "url": "https://github.com/quarkusio/quarkus/pull/9120#discussion_r420884216", "createdAt": "2020-05-06T15:29:55Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/grpc-getting-started.adoc", "diffHunk": "@@ -0,0 +1,318 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Getting Started with Quarkus gRPC\n+\n+include::./attributes.adoc[]\n+\n+This page explains how to start using Quarkus gRPC.\n+While this page describes how to configure it with Maven, it is also possible to use Gradle.\n+\n+Let's imagine you have a regular Quarkus project, generated from the https://code.quarkus.io[Quarkus project generator].\n+The default configuration is enough, but you can also select some extensions if you want.\n+\n+== Configuring your project\n+\n+Edit the `pom.xml` file to add the quarkus gRPC extension dependency and the JSR 305 (just under `<dependencies>`):\n+\n+[source, xml]\n+----\n+<dependency>\n+  <groupId>io.quarkus</groupId>\n+  <artifactId>quarkus-grpc</artifactId>\n+</dependency>\n+<dependency>\n+ <groupId>com.google.code.findbugs</groupId>\n+ <artifactId>jsr305</artifactId>\n+ <scope>provided</scope>\n+</dependency>\n+----\n+\n+NOTE: The jsr305 is only used to compile the generated classes. It is not required at runtime.\n+\n+In the `<properties>` section, define the 2 following properties:\n+\n+[source, xml, subs=\"verbatim,attributes\"]\n+----\n+<grpc.version>{grpc-version}</grpc.version>\n+<protoc.version>{protoc-version}</protoc.version>\n+----\n+\n+They configure the gRPC version and the `protoc` version.\n+\n+Finally, add to the `build` section the `os-maven-plugin` extension and the `protobuf-maven-plugin` configuration.\n+\n+[source, xml, subs=\"verbatim,attributes\"]\n+----\n+<build>\n+    <extensions>\n+        <extension>\n+            <groupId>kr.motd.maven</groupId>\n+            <artifactId>os-maven-plugin</artifactId>\n+            <version>{os-maven-plugin-version}</version>\n+        </extension>\n+    </extensions>\n+\n+    <plugins>\n+        <plugin>\n+            <groupId>org.xolstice.maven.plugins</groupId>\n+            <artifactId>protobuf-maven-plugin</artifactId>\n+            <version>{protobuf-maven-plugin-version}</version>\n+            <configuration>\n+                <protocArtifact>com.google.protobuf:protoc:${protoc.version}:exe:${os.detected.classifier}</protocArtifact>\n+                <pluginId>grpc-java</pluginId>\n+                <pluginArtifact>io.grpc:protoc-gen-grpc-java:${grpc.version}:exe:${os.detected.classifier}</pluginArtifact>\n+                <protocPlugins>\n+                    <protocPlugin>\n+                        <id>quarkus-grpc-protoc-plugin</id>\n+                        <groupId>io.quarkus</groupId>\n+                        <artifactId>quarkus-grpc-protoc-plugin</artifactId>\n+                        <version>999-SNAPSHOT</version>\n+                        <mainClass>io.quarkus.grpc.protoc.plugin.MutinyGrpcGenerator</mainClass>\n+                    </protocPlugin>\n+                </protocPlugins>\n+            </configuration>\n+            <executions>\n+                <execution>\n+                    <id>compile</id>\n+                    <goals>\n+                        <goal>compile</goal>\n+                        <goal>compile-custom</goal>\n+                    </goals>\n+                </execution>\n+                <execution>\n+                    <id>test-compile</id>\n+                    <goals>\n+                        <goal>test-compile</goal>\n+                        <goal>test-compile-custom</goal>\n+                    </goals>\n+                </execution>\n+            </executions>\n+        </plugin>\n+\n+        <!-- ... -->\n+    </plugins>\n+</build>\n+----\n+\n+The `protobuf-maven-plugin` that generates stub classes from your gRPC service definition (`proto` files).\n+The class generation uses a tool named `protoc`, which is OS-specific.\n+That's why we use the `os-maven-plugin` to target the executable compatible with the operating system.\n+\n+NOTE: This configuration instructs the `protobuf-maven-plugin` to generate the default gRPC classes and classes using Mutiny to fit with the Quarkus development experience.\n+\n+With this configuration, you can put your service and message definitions in the `src/main/proto` directory.\n+Let's start with a simple _Hello_ service.\n+Create the `src/main/proto/helloworld.proto` file with the following content:\n+\n+[source]\n+----\n+syntax = \"proto3\";\n+\n+option java_multiple_files = true;\n+option java_package = \"io.quarkus.example\";\n+option java_outer_classname = \"HelloWorldProto\";\n+\n+package helloworld;\n+\n+// The greeting service definition.\n+service Greeter {\n+    // Sends a greeting\n+    rpc SayHello (HelloRequest) returns (HelloReply) {}\n+}\n+\n+// The request message containing the user's name.\n+message HelloRequest {\n+    string name = 1;\n+}\n+\n+// The response message containing the greetings\n+message HelloReply {\n+    string message = 1;\n+}\n+----\n+\n+This `proto` file defines a simple service interface with a single method (`SayHello`), and the exchanged messages (`HelloRequest` containing the name and `HelloReply` containing the greeting message).\n+\n+Before coding, we need to generate the classes used to implement and consume gRPC services.\n+In a terminal, run:\n+\n+[source, bash]\n+----\n+$ mvn compile\n+----\n+\n+Once generated, you can look at the `target/generated-sources/protobuf` directory:\n+\n+[source, txt]\n+----\n+target/generated-sources/protobuf\n+\u251c\u2500\u2500 grpc-java\n+\u2502   \u2514\u2500\u2500 io\n+\u2502       \u2514\u2500\u2500 quarkus\n+\u2502           \u2514\u2500\u2500 example\n+\u2502               \u2514\u2500\u2500 GreeterGrpc.java\n+\u2514\u2500\u2500 java\n+    \u2514\u2500\u2500 io\n+        \u2514\u2500\u2500 quarkus\n+            \u2514\u2500\u2500 example\n+                \u251c\u2500\u2500 HelloReply.java\n+                \u251c\u2500\u2500 HelloReplyOrBuilder.java\n+                \u251c\u2500\u2500 HelloRequest.java\n+                \u251c\u2500\u2500 HelloRequestOrBuilder.java\n+                \u251c\u2500\u2500 HelloWorldProto.java\n+                \u2514\u2500\u2500 MutinyGreeterGrpc.java\n+----\n+\n+These are the classes we are going to use.\n+\n+IMPORTANT: Every time you update the `proto` files, you need to re-generate the classes (using `mvn compile`).\n+\n+== Implementing a gRPC service\n+\n+Now that we have the generated classes let's implement our _hello_ service.\n+\n+With Quarkus gRPC, implementing a service requires to _extend_ the generated service base implementation and exposes it as a `@Singleton` CDI bean.\n+\n+IMPORTANT: Don't use `@ApplicationScoped` as the gRPC service implementation cannot be proxied.\n+\n+=== Implementing a service\n+\n+Create the `src/main/java/org/acme/HelloService.java` file with the following content:\n+\n+[source, java]\n+----\n+package org.acme;\n+\n+import io.grpc.stub.StreamObserver;\n+import io.quarkus.example.GreeterGrpc;\n+import io.quarkus.example.HelloReply;\n+import io.quarkus.example.HelloRequest;\n+\n+import javax.inject.Singleton;\n+\n+@Singleton                                                                                    // <1>\n+public class HelloService extends GreeterGrpc.GreeterImplBase {                               // <2>\n+\n+    @Override\n+    public void sayHello(HelloRequest request, StreamObserver<HelloReply> responseObserver) { // <3>\n+        String name = request.getName();\n+        String message = \"Hello \" + name;\n+        responseObserver.onNext(HelloReply.newBuilder().setMessage(message).build());         // <4>\n+        responseObserver.onCompleted();                                                       // <5>\n+    }\n+}\n+\n+----\n+1. Expose your implementation as bean\n+2. Extends the `ImplBase` class. This is a generated class.\n+3. Implement the methods defined in the service definition (here we have a single method)\n+4. Build and send the response\n+5. Close the response\n+\n+Quarkus also provides an additional model with Mutiny.\n+A Mutiny implementation of this service would be:\n+\n+[source, java]\n+----\n+package org.acme;\n+\n+import io.quarkus.example.HelloReply;\n+import io.quarkus.example.HelloRequest;\n+import io.quarkus.example.MutinyGreeterGrpc;\n+import io.smallrye.mutiny.Uni;\n+\n+import javax.inject.Singleton;\n+\n+@Singleton\n+public class ReactiveHelloService extends MutinyGreeterGrpc.GreeterImplBase {\n+\n+    @Override\n+    public Uni<HelloReply> sayHello(HelloRequest request) {\n+        return Uni.createFrom().item(() ->\n+                HelloReply.newBuilder().setMessage(\"Hello \" + request.getName()).build()\n+        );\n+    }\n+}\n+----\n+\n+The main differences are the following:\n+\n+* it extends the `ImplBase` from `MutinyGreeterGrpc` instead of `GreeterGrpc`\n+* the signature of the method is using Mutiny types\n+\n+=== The gRPC server\n+\n+The services are _served_ by a _server_.\n+Available services (_CDI beans_) are automatically registered and exposed.\n+\n+By default, the server is exposed on `localhost:9000`, and uses _plain-text_ (so no TLS).\n+\n+Run the application using: `mvn quarkus:dev`.\n+\n+== Consuming a gRPC service\n+\n+In this section, we are going to consume the service we expose.\n+To simplify, we are going to consume the service from the same application, which in the real world, does not make sense.\n+\n+Open the existing `org.acme.ExampleResource` class, and edit the content to become:\n+\n+[source, java]\n+----\n+package org.acme;\n+\n+import io.quarkus.example.GreeterGrpc;\n+import io.quarkus.example.HelloRequest;\n+import io.quarkus.grpc.runtime.annotations.GrpcService;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class ExampleResource {\n+\n+    @Inject\n+    @GrpcService(\"hello\")                     // <1>\n+    GreeterGrpc.GreeterBlockingStub client;   // <2>\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+\n+    @GET\n+    @Path(\"/{name}\")\n+    public String hello(@PathParam(\"name\") String name) {\n+        return client.sayHello(HelloRequest.newBuilder().setName(name).build()).getMessage();  // <3>\n+    }\n+}\n+----\n+1. Inject the service and configure its name. This name is used in the application configuration\n+2. Use the _blocking_ stub (also a generated class)\n+3. Invoke the service\n+\n+We need to configure the application to indicate where is the `hello` service.\n+In the `src/main/resources/application.properties` file, add the following property:\n+\n+[source, text]\n+----\n+hello.host=localhost", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fa26b12cf318f23be1bccdf1466e0588c8b832e"}, "originalPosition": 306}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg4NTQ3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * mutiny stubs\n          \n          \n            \n            * reactive stubs based on Mutiny", "url": "https://github.com/quarkusio/quarkus/pull/9120#discussion_r420885477", "createdAt": "2020-05-06T15:31:24Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/grpc-service-consumption.adoc", "diffHunk": "@@ -0,0 +1,208 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Consuming a gRPC Service\n+\n+include::./attributes.adoc[]\n+\n+gRPC services can be injected in your application code.\n+\n+IMPORTANT: Consuming gRPC services requires the gRPC classes to be generated.\n+Place your `proto` files in `src/main/proto` and run `mvn compile`.\n+\n+== Stubs and Injection\n+\n+gRPC generation provides several stubs, providing different way to consume a service.\n+Quarkus gRPC can inject:\n+\n+* blocking stubs\n+* mutiny stubs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fa26b12cf318f23be1bccdf1466e0588c8b832e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg4NTc5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In addition, it also can inject the gRPC `io.grpc.Channel`, that let you create other types of stubs.\n          \n          \n            \n            In addition, it also can inject the gRPC `io.grpc.Channel`, that lets you create other types of stubs.", "url": "https://github.com/quarkusio/quarkus/pull/9120#discussion_r420885792", "createdAt": "2020-05-06T15:31:37Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/grpc-service-consumption.adoc", "diffHunk": "@@ -0,0 +1,208 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Consuming a gRPC Service\n+\n+include::./attributes.adoc[]\n+\n+gRPC services can be injected in your application code.\n+\n+IMPORTANT: Consuming gRPC services requires the gRPC classes to be generated.\n+Place your `proto` files in `src/main/proto` and run `mvn compile`.\n+\n+== Stubs and Injection\n+\n+gRPC generation provides several stubs, providing different way to consume a service.\n+Quarkus gRPC can inject:\n+\n+* blocking stubs\n+* mutiny stubs\n+\n+In addition, it also can inject the gRPC `io.grpc.Channel`, that let you create other types of stubs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fa26b12cf318f23be1bccdf1466e0588c8b832e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg4NTk5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The stub class names is computed from the service name.\n          \n          \n            \n            The stub class names are computed from the service name.", "url": "https://github.com/quarkusio/quarkus/pull/9120#discussion_r420885994", "createdAt": "2020-05-06T15:31:52Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/grpc-service-consumption.adoc", "diffHunk": "@@ -0,0 +1,208 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Consuming a gRPC Service\n+\n+include::./attributes.adoc[]\n+\n+gRPC services can be injected in your application code.\n+\n+IMPORTANT: Consuming gRPC services requires the gRPC classes to be generated.\n+Place your `proto` files in `src/main/proto` and run `mvn compile`.\n+\n+== Stubs and Injection\n+\n+gRPC generation provides several stubs, providing different way to consume a service.\n+Quarkus gRPC can inject:\n+\n+* blocking stubs\n+* mutiny stubs\n+\n+In addition, it also can inject the gRPC `io.grpc.Channel`, that let you create other types of stubs.\n+\n+[source, java]\n+----\n+@Inject @GrpcService(\"hello-service\")\n+MutinyGreeterGrpc.MutinyGreeterStub mutiny;\n+\n+@Inject @GrpcService(\"hello-service\")\n+GreeterGrpc.GreeterBlockingStub blocking;\n+\n+@Inject @GrpcService(\"hello-service\")\n+Channel channel;\n+----\n+\n+The stub class names is computed from the service name.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fa26b12cf318f23be1bccdf1466e0588c8b832e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg4Njg5OA==", "bodyText": "OK, I have my answer and I don't like that. We should use proper Quarkus config. First it will avoid conflicting with other things, then it will be automatically documented.", "url": "https://github.com/quarkusio/quarkus/pull/9120#discussion_r420886898", "createdAt": "2020-05-06T15:33:06Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/grpc-service-consumption.adoc", "diffHunk": "@@ -0,0 +1,208 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Consuming a gRPC Service\n+\n+include::./attributes.adoc[]\n+\n+gRPC services can be injected in your application code.\n+\n+IMPORTANT: Consuming gRPC services requires the gRPC classes to be generated.\n+Place your `proto` files in `src/main/proto` and run `mvn compile`.\n+\n+== Stubs and Injection\n+\n+gRPC generation provides several stubs, providing different way to consume a service.\n+Quarkus gRPC can inject:\n+\n+* blocking stubs\n+* mutiny stubs\n+\n+In addition, it also can inject the gRPC `io.grpc.Channel`, that let you create other types of stubs.\n+\n+[source, java]\n+----\n+@Inject @GrpcService(\"hello-service\")\n+MutinyGreeterGrpc.MutinyGreeterStub mutiny;\n+\n+@Inject @GrpcService(\"hello-service\")\n+GreeterGrpc.GreeterBlockingStub blocking;\n+\n+@Inject @GrpcService(\"hello-service\")\n+Channel channel;\n+----\n+\n+The stub class names is computed from the service name.\n+For example, if you use `Greeter` as service name as in:\n+\n+[source]\n+----\n+service Greeter {\n+    rpc SayHello (HelloRequest) returns (HelloReply) {}\n+}\n+----\n+\n+The Mutiny stub name is: `MutinyGreeterGrpc.MutinyGreeterStub`\n+The blocking stub name is: `GreeterGrpc.GreeterBlockingStub`\n+\n+Client injection must be qualified using `@GrpcService`.\n+This annotation indicates the configuration prefix used to configure the service.\n+For example, if you set it to `hello-service`, configuring the host of the service is done using `hello-service.host`.\n+\n+== Examples\n+\n+=== Using a blocking and mutiny stubs\n+\n+[source, java]\n+----\n+@Inject @GrpcService(\"hello\") GreeterGrpc.GreeterBlockingStub blockingHelloService;\n+@Inject @GrpcService(\"hello\") MutinyGreeterGrpc.MutinyGreeterStub mutinyHelloService;\n+\n+@GET\n+@Path(\"/blocking/{name}\")\n+public String helloBlocking(@PathParam(\"name\") String name) {\n+    return blockingHelloService.sayHello(HelloRequest.newBuilder().setName(name).build()).getMessage();\n+}\n+\n+@GET\n+@Path(\"/mutiny/{name}\")\n+public Uni<String> helloMutiny(@PathParam(\"name\") String name) {\n+    return mutinyHelloService.sayHello(HelloRequest.newBuilder().setName(name).build())\n+            .onItem().apply(HelloReply::getMessage);\n+}\n+----\n+\n+Note that in this example, the `hello.host` property must be set.\n+\n+=== Handling streams\n+\n+gRPC allows sending and receiving streams:\n+\n+[source]\n+----\n+service Streaming {\n+    rpc Source(Empty) returns (stream Item) {} // Returns a stream\n+    rpc Sink(stream Item) returns (Empty) {}   // Reads a stream\n+    rpc Pipe(stream Item) returns (stream Item) {}  // Reads a streams and return a streams\n+}\n+----\n+\n+Using the Mutiny stub, you can interact with these as follows:\n+\n+[source, java]\n+----\n+package io.quarkus.grpc.example.streaming;\n+\n+import io.grpc.examples.streaming.Empty;\n+import io.grpc.examples.streaming.Item;\n+import io.grpc.examples.streaming.MutinyStreamingGrpc;\n+import io.quarkus.grpc.runtime.annotations.GrpcService;\n+import io.smallrye.mutiny.Multi;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/streaming\")\n+@Produces(MediaType.APPLICATION_JSON)\n+public class StreamingEndpoint {\n+\n+    @Inject @GrpcService(\"streaming\") MutinyStreamingGrpc.MutinyStreamingStub client;\n+\n+    @GET\n+    public Multi<String> invokeSource() {\n+        // Retrieve a stream\n+        return client.source(Empty.newBuilder().build())\n+                .onItem().apply(Item::getValue);\n+    }\n+\n+    @GET\n+    @Path(\"sink/{max}\")\n+    public Uni<Void> invokeSink(@PathParam(\"max\") int max) {\n+        // Send a stream and wait for completion\n+        Multi<Item> inputs = Multi.createFrom().range(0, max)\n+                .map(i -> Integer.toString(i))\n+                .map(i -> Item.newBuilder().setValue(i).build());\n+        return client.sink(inputs).onItem().ignore().andContinueWithNull();\n+    }\n+\n+    @GET\n+    @Path(\"/{max}\")\n+    public Multi<String> invokePipe(@PathParam(\"max\") int max) {\n+        // Send a stream and retrieve a stream\n+        Multi<Item> inputs = Multi.createFrom().range(0, max)\n+                .map(i -> Integer.toString(i))\n+                .map(i -> Item.newBuilder().setValue(i).build());\n+        return client.pipe(inputs).onItem().apply(Item::getValue);\n+    }\n+\n+}\n+\n+----\n+\n+== Client configuration\n+\n+IMPORTANT: Client configuration is controlled with the `@GrpcService` annotation.\n+\n+For a given `$NAME` (value set in the `@GrpcService` annotation) , the following configuration properties are supported:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fa26b12cf318f23be1bccdf1466e0588c8b832e"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg4NzE3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            gRPC service implementations exposed as bean are automatically registered and served by quarkus-grpc.\n          \n          \n            \n            gRPC service implementations exposed as beans are automatically registered and served by quarkus-grpc.", "url": "https://github.com/quarkusio/quarkus/pull/9120#discussion_r420887172", "createdAt": "2020-05-06T15:33:28Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/grpc-service-implementation.adoc", "diffHunk": "@@ -0,0 +1,242 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Implementing a gRPC Service\n+\n+include::./attributes.adoc[]\n+\n+gRPC service implementations exposed as bean are automatically registered and served by quarkus-grpc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fa26b12cf318f23be1bccdf1466e0588c8b832e"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg4NzcwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Then, overrides the methods defined in the service interface.\n          \n          \n            \n            Then, override the methods defined in the service interface.", "url": "https://github.com/quarkusio/quarkus/pull/9120#discussion_r420887706", "createdAt": "2020-05-06T15:34:08Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/grpc-service-implementation.adoc", "diffHunk": "@@ -0,0 +1,242 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Implementing a gRPC Service\n+\n+include::./attributes.adoc[]\n+\n+gRPC service implementations exposed as bean are automatically registered and served by quarkus-grpc.\n+\n+IMPORTANT: Implementing a gRPC service requires the gRPC classes to be generated.\n+Place your `proto` files in `src/main/proto` and run `mvn compile`.\n+\n+== Implementation base\n+\n+The generation has created 2 implementation bases:\n+\n+1. One using the default gRPC API\n+2. One using the Mutiny API\n+\n+The first classname is structured as follows: `${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`.\n+The second classname is structured as follows: `Mutiny${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`.\n+\n+For example, if you use `Greeter` as service name as in:\n+\n+[source]\n+----\n+service Greeter {\n+    rpc SayHello (HelloRequest) returns (HelloReply) {}\n+}\n+----\n+\n+The regular implementation base is: `GreeterGrpc.GreeterImplBase`.\n+The second implementation base is: `MutinyGreeterGrpc.GreeterImplBase`.\n+\n+Note that these classes are not interfaces but regular classes.\n+When extending them, you need to override the service methods defined in the service definition.\n+\n+== Implementing a service with the default gRPC API\n+\n+To implement a gRPC service using the default gRPC API, create a class extending the default implementation base.\n+Then, overrides the methods defined in the service interface.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fa26b12cf318f23be1bccdf1466e0588c8b832e"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg4NzgwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Finally, exposes the service as a CDI bean using the `@Singleton` annotation:\n          \n          \n            \n            Finally, expose the service as a CDI bean using the `@Singleton` annotation:", "url": "https://github.com/quarkusio/quarkus/pull/9120#discussion_r420887803", "createdAt": "2020-05-06T15:34:16Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/grpc-service-implementation.adoc", "diffHunk": "@@ -0,0 +1,242 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Implementing a gRPC Service\n+\n+include::./attributes.adoc[]\n+\n+gRPC service implementations exposed as bean are automatically registered and served by quarkus-grpc.\n+\n+IMPORTANT: Implementing a gRPC service requires the gRPC classes to be generated.\n+Place your `proto` files in `src/main/proto` and run `mvn compile`.\n+\n+== Implementation base\n+\n+The generation has created 2 implementation bases:\n+\n+1. One using the default gRPC API\n+2. One using the Mutiny API\n+\n+The first classname is structured as follows: `${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`.\n+The second classname is structured as follows: `Mutiny${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`.\n+\n+For example, if you use `Greeter` as service name as in:\n+\n+[source]\n+----\n+service Greeter {\n+    rpc SayHello (HelloRequest) returns (HelloReply) {}\n+}\n+----\n+\n+The regular implementation base is: `GreeterGrpc.GreeterImplBase`.\n+The second implementation base is: `MutinyGreeterGrpc.GreeterImplBase`.\n+\n+Note that these classes are not interfaces but regular classes.\n+When extending them, you need to override the service methods defined in the service definition.\n+\n+== Implementing a service with the default gRPC API\n+\n+To implement a gRPC service using the default gRPC API, create a class extending the default implementation base.\n+Then, overrides the methods defined in the service interface.\n+Finally, exposes the service as a CDI bean using the `@Singleton` annotation:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fa26b12cf318f23be1bccdf1466e0588c8b832e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg4Nzk2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Then, overrides the methods defined in the service interface.\n          \n          \n            \n            Then, override the methods defined in the service interface.", "url": "https://github.com/quarkusio/quarkus/pull/9120#discussion_r420887969", "createdAt": "2020-05-06T15:34:30Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/grpc-service-implementation.adoc", "diffHunk": "@@ -0,0 +1,242 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Implementing a gRPC Service\n+\n+include::./attributes.adoc[]\n+\n+gRPC service implementations exposed as bean are automatically registered and served by quarkus-grpc.\n+\n+IMPORTANT: Implementing a gRPC service requires the gRPC classes to be generated.\n+Place your `proto` files in `src/main/proto` and run `mvn compile`.\n+\n+== Implementation base\n+\n+The generation has created 2 implementation bases:\n+\n+1. One using the default gRPC API\n+2. One using the Mutiny API\n+\n+The first classname is structured as follows: `${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`.\n+The second classname is structured as follows: `Mutiny${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`.\n+\n+For example, if you use `Greeter` as service name as in:\n+\n+[source]\n+----\n+service Greeter {\n+    rpc SayHello (HelloRequest) returns (HelloReply) {}\n+}\n+----\n+\n+The regular implementation base is: `GreeterGrpc.GreeterImplBase`.\n+The second implementation base is: `MutinyGreeterGrpc.GreeterImplBase`.\n+\n+Note that these classes are not interfaces but regular classes.\n+When extending them, you need to override the service methods defined in the service definition.\n+\n+== Implementing a service with the default gRPC API\n+\n+To implement a gRPC service using the default gRPC API, create a class extending the default implementation base.\n+Then, overrides the methods defined in the service interface.\n+Finally, exposes the service as a CDI bean using the `@Singleton` annotation:\n+\n+[source, java]\n+----\n+import javax.inject.Singleton;\n+\n+@Singleton\n+public class HelloService extends GreeterGrpc.GreeterImplBase {\n+\n+    @Override\n+    public void sayHello(HelloRequest request, StreamObserver<HelloReply> responseObserver) {\n+        String name = request.getName();\n+        String message = \"Hello \" + name;\n+        responseObserver.onNext(HelloReply.newBuilder().setMessage(message).build());\n+        responseObserver.onCompleted();\n+    }\n+}\n+----\n+\n+== Implementing a service with the Mutiny API\n+\n+To implement a gRPC service using the Mutiny gRPC API, create a class extending the Mutiny implementation base.\n+Then, overrides the methods defined in the service interface.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fa26b12cf318f23be1bccdf1466e0588c8b832e"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg4ODA5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Finally, exposes the service as a CDI bean using the `@Singleton` annotation:\n          \n          \n            \n            Finally, expose the service as a CDI bean using the `@Singleton` annotation:", "url": "https://github.com/quarkusio/quarkus/pull/9120#discussion_r420888095", "createdAt": "2020-05-06T15:34:40Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/grpc-service-implementation.adoc", "diffHunk": "@@ -0,0 +1,242 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Implementing a gRPC Service\n+\n+include::./attributes.adoc[]\n+\n+gRPC service implementations exposed as bean are automatically registered and served by quarkus-grpc.\n+\n+IMPORTANT: Implementing a gRPC service requires the gRPC classes to be generated.\n+Place your `proto` files in `src/main/proto` and run `mvn compile`.\n+\n+== Implementation base\n+\n+The generation has created 2 implementation bases:\n+\n+1. One using the default gRPC API\n+2. One using the Mutiny API\n+\n+The first classname is structured as follows: `${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`.\n+The second classname is structured as follows: `Mutiny${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`.\n+\n+For example, if you use `Greeter` as service name as in:\n+\n+[source]\n+----\n+service Greeter {\n+    rpc SayHello (HelloRequest) returns (HelloReply) {}\n+}\n+----\n+\n+The regular implementation base is: `GreeterGrpc.GreeterImplBase`.\n+The second implementation base is: `MutinyGreeterGrpc.GreeterImplBase`.\n+\n+Note that these classes are not interfaces but regular classes.\n+When extending them, you need to override the service methods defined in the service definition.\n+\n+== Implementing a service with the default gRPC API\n+\n+To implement a gRPC service using the default gRPC API, create a class extending the default implementation base.\n+Then, overrides the methods defined in the service interface.\n+Finally, exposes the service as a CDI bean using the `@Singleton` annotation:\n+\n+[source, java]\n+----\n+import javax.inject.Singleton;\n+\n+@Singleton\n+public class HelloService extends GreeterGrpc.GreeterImplBase {\n+\n+    @Override\n+    public void sayHello(HelloRequest request, StreamObserver<HelloReply> responseObserver) {\n+        String name = request.getName();\n+        String message = \"Hello \" + name;\n+        responseObserver.onNext(HelloReply.newBuilder().setMessage(message).build());\n+        responseObserver.onCompleted();\n+    }\n+}\n+----\n+\n+== Implementing a service with the Mutiny API\n+\n+To implement a gRPC service using the Mutiny gRPC API, create a class extending the Mutiny implementation base.\n+Then, overrides the methods defined in the service interface.\n+These methods are using Mutiny types.\n+Finally, exposes the service as a CDI bean using the `@Singleton` annotation:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fa26b12cf318f23be1bccdf1466e0588c8b832e"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg4ODg2Mg==", "bodyText": "This should use our automatic doc generation.", "url": "https://github.com/quarkusio/quarkus/pull/9120#discussion_r420888862", "createdAt": "2020-05-06T15:35:44Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/grpc-service-implementation.adoc", "diffHunk": "@@ -0,0 +1,242 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Implementing a gRPC Service\n+\n+include::./attributes.adoc[]\n+\n+gRPC service implementations exposed as bean are automatically registered and served by quarkus-grpc.\n+\n+IMPORTANT: Implementing a gRPC service requires the gRPC classes to be generated.\n+Place your `proto` files in `src/main/proto` and run `mvn compile`.\n+\n+== Implementation base\n+\n+The generation has created 2 implementation bases:\n+\n+1. One using the default gRPC API\n+2. One using the Mutiny API\n+\n+The first classname is structured as follows: `${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`.\n+The second classname is structured as follows: `Mutiny${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`.\n+\n+For example, if you use `Greeter` as service name as in:\n+\n+[source]\n+----\n+service Greeter {\n+    rpc SayHello (HelloRequest) returns (HelloReply) {}\n+}\n+----\n+\n+The regular implementation base is: `GreeterGrpc.GreeterImplBase`.\n+The second implementation base is: `MutinyGreeterGrpc.GreeterImplBase`.\n+\n+Note that these classes are not interfaces but regular classes.\n+When extending them, you need to override the service methods defined in the service definition.\n+\n+== Implementing a service with the default gRPC API\n+\n+To implement a gRPC service using the default gRPC API, create a class extending the default implementation base.\n+Then, overrides the methods defined in the service interface.\n+Finally, exposes the service as a CDI bean using the `@Singleton` annotation:\n+\n+[source, java]\n+----\n+import javax.inject.Singleton;\n+\n+@Singleton\n+public class HelloService extends GreeterGrpc.GreeterImplBase {\n+\n+    @Override\n+    public void sayHello(HelloRequest request, StreamObserver<HelloReply> responseObserver) {\n+        String name = request.getName();\n+        String message = \"Hello \" + name;\n+        responseObserver.onNext(HelloReply.newBuilder().setMessage(message).build());\n+        responseObserver.onCompleted();\n+    }\n+}\n+----\n+\n+== Implementing a service with the Mutiny API\n+\n+To implement a gRPC service using the Mutiny gRPC API, create a class extending the Mutiny implementation base.\n+Then, overrides the methods defined in the service interface.\n+These methods are using Mutiny types.\n+Finally, exposes the service as a CDI bean using the `@Singleton` annotation:\n+\n+[source, java]\n+----\n+import javax.inject.Singleton;\n+\n+@Singleton\n+public class ReactiveHelloService extends MutinyGreeterGrpc.GreeterImplBase {\n+\n+    @Override\n+    public Uni<HelloReply> sayHello(HelloRequest request) {\n+        return Uni.createFrom().item(() ->\n+                HelloReply.newBuilder().setMessage(\"Hello \" + request.getName()).build()\n+        );\n+    }\n+}\n+----\n+\n+== Handling streams\n+\n+gRPC allows receiving and returning streams:\n+\n+[source]\n+----\n+service Streaming {\n+    rpc Source(Empty) returns (stream Item) {} // Returns a stream\n+    rpc Sink(stream Item) returns (Empty) {}   // Reads a stream\n+    rpc Pipe(stream Item) returns (stream Item) {}  // Reads a streams and return a streams\n+}\n+----\n+\n+Using Mutiny, you can implement these as follows:\n+\n+[source, java]\n+----\n+@Singleton\n+public class StreamingService extends MutinyStreamingGrpc.StreamingImplBase {\n+\n+    @Override\n+    public Multi<Item> source(Empty request) {\n+        // Just returns a stream emitting an item every 2ms and stopping after 10 items.\n+        return Multi.createFrom().ticks().every(Duration.ofMillis(2))\n+                .transform().byTakingFirstItems(10)\n+                .map(l -> Item.newBuilder().setValue(Long.toString(l)).build());\n+    }\n+\n+    @Override\n+    public Uni<Empty> sink(Multi<Item> request) {\n+        // Reads the incoming streams, consume all the items.\n+        return request\n+                .map(Item::getValue)\n+                .map(Long::parseLong)\n+                .collectItems().last()\n+                .map(l -> Empty.newBuilder().build());\n+    }\n+\n+    @Override\n+    public Multi<Item> pipe(Multi<Item> request) {\n+        // Reads the incoming stream, compute a sum and return the cumulative results\n+        // in the outbound stream.\n+        return request\n+                .map(Item::getValue)\n+                .map(Long::parseLong)\n+                .onItem().scan(() -> 0L, Long::sum)\n+                .onItem().apply(l -> Item.newBuilder().setValue(Long.toString(l)).build());\n+    }\n+}\n+----\n+\n+== Health check\n+For the exposed services, Quarkus gRPC exposes health information in the following format:\n+[source,protobuf]\n+----\n+syntax = \"proto3\";\n+\n+package grpc.health.v1;\n+\n+message HealthCheckRequest {\n+  string service = 1;\n+}\n+\n+message HealthCheckResponse {\n+  enum ServingStatus {\n+    UNKNOWN = 0;\n+    SERVING = 1;\n+    NOT_SERVING = 2;\n+  }\n+  ServingStatus status = 1;\n+}\n+\n+service Health {\n+  rpc Check(HealthCheckRequest) returns (HealthCheckResponse);\n+\n+  rpc Watch(HealthCheckRequest) returns (stream HealthCheckResponse);\n+}\n+----\n+\n+Clients can specify the fully qualified service name to get the health status of a specific service\n+or skip specifying the service name to get the general status of the gRPC server.\n+\n+For more details, check out the\n+https://github.com/grpc/grpc/blob/v1.28.1/doc/health-checking.md[gRPC documentation]\n+\n+Additionally, if Quarkus SmallRye Health is added to the application, a readiness check for\n+the state of the gRPC services will be added to the MicroProfile Health endpoint response, that is `/health`.\n+\n+== Reflection Service\n+\n+Quarkus gRPC Server implements the https://github.com/grpc/grpc/blob/master/doc/server-reflection.md[reflection service].\n+This service allows tools like https://github.com/fullstorydev/grpcurl[grpcurl] or https://github.com/gusaul/grpcox[grpcox] to interact with your services.\n+\n+The reflection service is enabled by default in _dev_ mode.\n+In test or production mode, you need to enable it explicitly by setting `quarkus.grpc-server.enable-reflection-service` to `true`.\n+\n+== Server configuration\n+\n+By default, the server is exposed on `localhost:9000` and uses `plain-text`.\n+\n+The following configuration properties are supported:\n+\n+|===\n+|Property |Description |Default Value\n+\n+|quarkus.grpc-server.enable-reflection-service | Enables the reflection service  | `false` (`true` in dev mode)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fa26b12cf318f23be1bccdf1466e0588c8b832e"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg4OTQyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The Quarkus gRPC extensions integrate gRPC in Quarkus application.\n          \n          \n            \n            The Quarkus gRPC extension integrate gRPC in Quarkus application.", "url": "https://github.com/quarkusio/quarkus/pull/9120#discussion_r420889428", "createdAt": "2020-05-06T15:36:31Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/grpc.adoc", "diffHunk": "@@ -0,0 +1,29 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus gRPC\n+\n+include::./attributes.adoc[]\n+\n+https://grpc.io/[gRPC] is a high-performance RPC framework.\n+It can efficiently connect services implemented using various languages and frameworks.\n+It is also applicable in the last mile of distributed computing to connect devices, mobile applications, and browsers to backend services.\n+\n+In general, gRPC uses HTTP/2, TLS, and https://developers.google.com/protocol-buffers[Protobuf (Protocol Buffers)].\n+In a microservice architecture, gRPC is an efficient, type-safe alternative to HTTP.\n+\n+The Quarkus gRPC extensions integrate gRPC in Quarkus application.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fa26b12cf318f23be1bccdf1466e0588c8b832e"}, "originalPosition": 17}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0fa30af66cd089b05c9978de224cb0d736bcb7e7", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/0fa30af66cd089b05c9978de224cb0d736bcb7e7", "committedDate": "2020-05-06T15:53:01Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Guillaume Smet <guillaume.smet@gmail.com>"}, "afterCommit": {"oid": "23d06566ebd49c8762472fa10b8d104c25581b90", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/23d06566ebd49c8762472fa10b8d104c25581b90", "committedDate": "2020-05-07T12:59:34Z", "message": "Remove explicit Vert.x dependencies from the bom as they are imported from the Vert.x Bom"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ce507ab2afcc5f4a63518d5b6104ea6be22781af", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/ce507ab2afcc5f4a63518d5b6104ea6be22781af", "committedDate": "2020-05-07T13:11:45Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Guillaume Smet <guillaume.smet@gmail.com>"}, "afterCommit": {"oid": "4b9235509d0a77cfb34cb4da44cb89b683d3cf1f", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/4b9235509d0a77cfb34cb4da44cb89b683d3cf1f", "committedDate": "2020-05-07T13:21:03Z", "message": "Remove explicit Vert.x dependencies from the bom as they are imported from the Vert.x Bom"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b9235509d0a77cfb34cb4da44cb89b683d3cf1f", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/4b9235509d0a77cfb34cb4da44cb89b683d3cf1f", "committedDate": "2020-05-07T13:21:03Z", "message": "Remove explicit Vert.x dependencies from the bom as they are imported from the Vert.x Bom"}, "afterCommit": {"oid": "6b7e85a2c268cd0d15208857cff4b6adf6046984", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/6b7e85a2c268cd0d15208857cff4b6adf6046984", "committedDate": "2020-05-09T12:00:49Z", "message": "Remove explicit Vert.x dependencies from the bom as they are imported from the Vert.x Bom"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MzUyNDI5", "url": "https://github.com/quarkusio/quarkus/pull/9120#pullrequestreview-409352429", "createdAt": "2020-05-11T16:53:07Z", "commit": {"oid": "be8d50a22441812b4783309c9a9a2e8185fa5ad4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjo1MzowN1rOGTk15Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjo1MzowN1rOGTk15Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE3OTc0OQ==", "bodyText": "Those were not converted to Quarkus configuration. Is it normal?", "url": "https://github.com/quarkusio/quarkus/pull/9120#discussion_r423179749", "createdAt": "2020-05-11T16:53:07Z", "author": {"login": "gsmet"}, "path": "docs/src/main/asciidoc/grpc-service-consumption.adoc", "diffHunk": "@@ -0,0 +1,181 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Consuming a gRPC Service\n+\n+include::./attributes.adoc[]\n+\n+gRPC services can be injected in your application code.\n+\n+IMPORTANT: Consuming gRPC services requires the gRPC classes to be generated.\n+Place your `proto` files in `src/main/proto` and run `mvn compile`.\n+\n+== Stubs and Injection\n+\n+gRPC generation provides several stubs, providing different way to consume a service.\n+Quarkus gRPC can inject:\n+\n+* blocking stubs\n+* reactive stubs based on Mutiny\n+\n+In addition, it also can inject the gRPC `io.grpc.Channel`, that lets you create other types of stubs.\n+\n+[source, java]\n+----\n+@Inject @GrpcService(\"hello-service\")\n+MutinyGreeterGrpc.MutinyGreeterStub mutiny;\n+\n+@Inject @GrpcService(\"hello-service\")\n+GreeterGrpc.GreeterBlockingStub blocking;\n+\n+@Inject @GrpcService(\"hello-service\")\n+Channel channel;\n+----\n+\n+The stub class names are computed from the service name.\n+For example, if you use `Greeter` as service name as in:\n+\n+[source]\n+----\n+service Greeter {\n+    rpc SayHello (HelloRequest) returns (HelloReply) {}\n+}\n+----\n+\n+The Mutiny stub name is: `MutinyGreeterGrpc.MutinyGreeterStub`\n+The blocking stub name is: `GreeterGrpc.GreeterBlockingStub`\n+\n+Client injection must be qualified using `@GrpcService`.\n+This annotation indicates the configuration prefix used to configure the service.\n+For example, if you set it to `hello-service`, configuring the host of the service is done using `hello-service.host`.\n+\n+== Examples\n+\n+=== Using a blocking and mutiny stubs\n+\n+[source, java]\n+----\n+@Inject @GrpcService(\"hello\") GreeterGrpc.GreeterBlockingStub blockingHelloService;\n+@Inject @GrpcService(\"hello\") MutinyGreeterGrpc.MutinyGreeterStub mutinyHelloService;\n+\n+@GET\n+@Path(\"/blocking/{name}\")\n+public String helloBlocking(@PathParam(\"name\") String name) {\n+    return blockingHelloService.sayHello(HelloRequest.newBuilder().setName(name).build()).getMessage();\n+}\n+\n+@GET\n+@Path(\"/mutiny/{name}\")\n+public Uni<String> helloMutiny(@PathParam(\"name\") String name) {\n+    return mutinyHelloService.sayHello(HelloRequest.newBuilder().setName(name).build())\n+            .onItem().apply(HelloReply::getMessage);\n+}\n+----\n+\n+Note that in this example, the `grpc.quarkus.clients.hello.host` property must be set.\n+\n+=== Handling streams\n+\n+gRPC allows sending and receiving streams:\n+\n+[source]\n+----\n+service Streaming {\n+    rpc Source(Empty) returns (stream Item) {} // Returns a stream\n+    rpc Sink(stream Item) returns (Empty) {}   // Reads a stream\n+    rpc Pipe(stream Item) returns (stream Item) {}  // Reads a streams and return a streams\n+}\n+----\n+\n+Using the Mutiny stub, you can interact with these as follows:\n+\n+[source, java]\n+----\n+package io.quarkus.grpc.example.streaming;\n+\n+import io.grpc.examples.streaming.Empty;\n+import io.grpc.examples.streaming.Item;\n+import io.grpc.examples.streaming.MutinyStreamingGrpc;\n+import io.quarkus.grpc.runtime.annotations.GrpcService;\n+import io.smallrye.mutiny.Multi;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/streaming\")\n+@Produces(MediaType.APPLICATION_JSON)\n+public class StreamingEndpoint {\n+\n+    @Inject @GrpcService(\"streaming\") MutinyStreamingGrpc.MutinyStreamingStub client;\n+\n+    @GET\n+    public Multi<String> invokeSource() {\n+        // Retrieve a stream\n+        return client.source(Empty.newBuilder().build())\n+                .onItem().apply(Item::getValue);\n+    }\n+\n+    @GET\n+    @Path(\"sink/{max}\")\n+    public Uni<Void> invokeSink(@PathParam(\"max\") int max) {\n+        // Send a stream and wait for completion\n+        Multi<Item> inputs = Multi.createFrom().range(0, max)\n+                .map(i -> Integer.toString(i))\n+                .map(i -> Item.newBuilder().setValue(i).build());\n+        return client.sink(inputs).onItem().ignore().andContinueWithNull();\n+    }\n+\n+    @GET\n+    @Path(\"/{max}\")\n+    public Multi<String> invokePipe(@PathParam(\"max\") int max) {\n+        // Send a stream and retrieve a stream\n+        Multi<Item> inputs = Multi.createFrom().range(0, max)\n+                .map(i -> Integer.toString(i))\n+                .map(i -> Item.newBuilder().setValue(i).build());\n+        return client.pipe(inputs).onItem().apply(Item::getValue);\n+    }\n+\n+}\n+\n+----\n+\n+== Client configuration\n+\n+For each gRPC service you inject in your application, you can configure the following attributes:\n+\n+include::{generated-dir}/config/quarkus-grpc-config-group-config-grpc-client-configuration.adoc[opts=optional, leveloffset=+1]\n+\n+The `service-name` is the name set in the `@GrpcService`.\n+\n+== Example of configuration\n+\n+=== Enabling TLS\n+\n+To enable TLS, use the following configuration:\n+\n+[source]\n+----\n+hello.host=localhost\n+hello.ssl.trust-store=src/main/resources/tls/ca.pem", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be8d50a22441812b4783309c9a9a2e8185fa5ad4"}, "originalPosition": 165}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MzY3ODky", "url": "https://github.com/quarkusio/quarkus/pull/9120#pullrequestreview-409367892", "createdAt": "2020-05-11T17:13:01Z", "commit": {"oid": "be8d50a22441812b4783309c9a9a2e8185fa5ad4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzoxMzowMVrOGTlmNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzoxNjowNlrOGTlt7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE5MjExNw==", "bodyText": "Shouldn't it be in the serialization category instead? I don't think we want a category for one extension?", "url": "https://github.com/quarkusio/quarkus/pull/9120#discussion_r423192117", "createdAt": "2020-05-11T17:13:01Z", "author": {"login": "gsmet"}, "path": "extensions/grpc/runtime/src/main/resources/META-INF/quarkus-extension.yaml", "diffHunk": "@@ -0,0 +1,9 @@\n+---\n+name: \"gRPC\"\n+metadata:\n+  keywords:\n+    - \"gRPC\"\n+  categories:\n+    - \"grpc\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be8d50a22441812b4783309c9a9a2e8185fa5ad4"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE5Mjc2OA==", "bodyText": "This should a sentence starting with a verb as it's what we will have on code.quarkus.io (\"Serialize...\" \"Connect to...\")", "url": "https://github.com/quarkusio/quarkus/pull/9120#discussion_r423192768", "createdAt": "2020-05-11T17:14:08Z", "author": {"login": "gsmet"}, "path": "extensions/grpc/runtime/pom.xml", "diffHunk": "@@ -0,0 +1,169 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <artifactId>quarkus-grpc-parent</artifactId>\n+        <groupId>io.quarkus</groupId>\n+        <version>999-SNAPSHOT</version>\n+    </parent>\n+\n+    <properties>\n+        <vertx.version>3.9.0</vertx.version>\n+    </properties>\n+\n+    <artifactId>quarkus-grpc</artifactId>\n+    <name>Quarkus - gRPC - Runtime</name>\n+    <description>gRPC support for Quarkus</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be8d50a22441812b4783309c9a9a2e8185fa5ad4"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE5NDA5NQ==", "bodyText": "We don't include it in a binary at all? (just to be extra sure)", "url": "https://github.com/quarkusio/quarkus/pull/9120#discussion_r423194095", "createdAt": "2020-05-11T17:16:06Z", "author": {"login": "gsmet"}, "path": "extensions/grpc/deployment/src/test/proto/test.proto", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright 2015, Google Inc.\n+// All rights reserved.\n+//\n+// Redistribution and use in source and binary forms, with or without\n+// modification, are permitted provided that the following conditions are\n+// met:\n+//\n+//     * Redistributions of source code must retain the above copyright\n+// notice, this list of conditions and the following disclaimer.\n+//     * Redistributions in binary form must reproduce the above\n+// copyright notice, this list of conditions and the following disclaimer\n+// in the documentation and/or other materials provided with the\n+// distribution.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be8d50a22441812b4783309c9a9a2e8185fa5ad4"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "be8d50a22441812b4783309c9a9a2e8185fa5ad4", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/be8d50a22441812b4783309c9a9a2e8185fa5ad4", "committedDate": "2020-05-09T17:29:58Z", "message": "Workaround missing ALPN on Java 8 242-"}, "afterCommit": {"oid": "364a0854df33d3d0e9428c82b7eb5cb26a28097e", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/364a0854df33d3d0e9428c82b7eb5cb26a28097e", "committedDate": "2020-05-12T05:43:47Z", "message": "Refine the gRPC extension description and categorisation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "364a0854df33d3d0e9428c82b7eb5cb26a28097e", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/364a0854df33d3d0e9428c82b7eb5cb26a28097e", "committedDate": "2020-05-12T05:43:47Z", "message": "Refine the gRPC extension description and categorisation"}, "afterCommit": {"oid": "44b29f98c6bc67422a9a80b91aa7e75029dd06db", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/44b29f98c6bc67422a9a80b91aa7e75029dd06db", "committedDate": "2020-05-12T13:51:18Z", "message": "Workaround missing ALPN on Java 8 242-"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMTE0Njk2", "url": "https://github.com/quarkusio/quarkus/pull/9120#pullrequestreview-410114696", "createdAt": "2020-05-12T14:42:17Z", "commit": {"oid": "44b29f98c6bc67422a9a80b91aa7e75029dd06db"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNjg3ODQ5", "url": "https://github.com/quarkusio/quarkus/pull/9120#pullrequestreview-410687849", "createdAt": "2020-05-13T08:12:02Z", "commit": {"oid": "44b29f98c6bc67422a9a80b91aa7e75029dd06db"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODoxMjowMlrOGUmVtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODoxMjowMlrOGUmVtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI1Mjg1Mg==", "bodyText": "This is incorrect. And should be moved to FeatureBuildItem. The client one should be moved to FeatureBuildItem too.", "url": "https://github.com/quarkusio/quarkus/pull/9120#discussion_r424252852", "createdAt": "2020-05-13T08:12:02Z", "author": {"login": "gsmet"}, "path": "extensions/grpc/deployment/src/main/java/io/quarkus/grpc/deployment/GrpcServerProcessor.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package io.quarkus.grpc.deployment;\n+\n+import java.lang.reflect.Modifier;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.eclipse.microprofile.config.ConfigProvider;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.logging.Logger;\n+\n+import io.grpc.internal.DnsNameResolverProvider;\n+import io.grpc.internal.PickFirstLoadBalancerProvider;\n+import io.grpc.netty.NettyChannelProvider;\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.arc.processor.DotNames;\n+import io.quarkus.deployment.IsNormal;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.ExecutionTime;\n+import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.ServiceStartBuildItem;\n+import io.quarkus.deployment.builditem.ShutdownContextBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.grpc.runtime.GrpcContainer;\n+import io.quarkus.grpc.runtime.GrpcServerRecorder;\n+import io.quarkus.grpc.runtime.config.GrpcConfiguration;\n+import io.quarkus.grpc.runtime.config.GrpcServerBuildTimeConfig;\n+import io.quarkus.grpc.runtime.health.GrpcHealthEndpoint;\n+import io.quarkus.grpc.runtime.health.GrpcHealthStorage;\n+import io.quarkus.kubernetes.spi.KubernetesPortBuildItem;\n+import io.quarkus.smallrye.health.deployment.spi.HealthBuildItem;\n+import io.quarkus.vertx.deployment.VertxBuildItem;\n+\n+public class GrpcServerProcessor {\n+\n+    private static final Logger logger = Logger.getLogger(GrpcServerProcessor.class);\n+\n+    public static final String GRPC_SERVER = \"/reactive\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44b29f98c6bc67422a9a80b91aa7e75029dd06db"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5edddec81b5373f0fbee0fceebf92678f172eabe", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/5edddec81b5373f0fbee0fceebf92678f172eabe", "committedDate": "2020-05-13T09:01:33Z", "message": "Move the gRPC extension to the main Quarkus repository\n\nThis commit contains the extension code and also update the boms and build parents with the required dependencies.\nIt changed the ban strategy for Findbugs JSR 305 as some annotation are required by the classes generated by protoc.\n\nCo-authored-by: Michal Szynkiewicz <michal.l.szynkiewicz@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "274b7a671174cf1879638aba8d9cf36686449e3d", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/274b7a671174cf1879638aba8d9cf36686449e3d", "committedDate": "2020-05-13T09:01:34Z", "message": "Add gRPC integration tests\n\nAdds ITs for plain-text, TLS, mutual auth, interceptors, streaming, health support and proto v2\n\nCo-authored-by: Michal Szynkiewicz <michal.l.szynkiewicz@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72b42ea37d6bd063896b3d491adb7c865d3ce685", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/72b42ea37d6bd063896b3d491adb7c865d3ce685", "committedDate": "2020-05-13T09:01:34Z", "message": "Add the gRPC support documentation\n\nCo-authored-by: Michal Szynkiewicz <michal.l.szynkiewicz@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afbd2b84ae92ca37eba62434a2c5bd10d53eabc4", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/afbd2b84ae92ca37eba62434a2c5bd10d53eabc4", "committedDate": "2020-05-13T09:08:58Z", "message": "gRPC extension - Change configuration format to align with the rest of Quarkus\n\n* quarkus.grpc root\n* quarkus.grpc.service -> server configuration\n* quarkus.grpc.clients.client_name -> client configuration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2765ed08c7ea2c0d2e2f9527e350d5c3ddf63146", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/2765ed08c7ea2c0d2e2f9527e350d5c3ddf63146", "committedDate": "2020-05-13T09:09:03Z", "message": "Remove the ban on the jsr 305 dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf8d70c8c442bb4300cc4c7d77c9ce4cecf3b822", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/bf8d70c8c442bb4300cc4c7d77c9ce4cecf3b822", "committedDate": "2020-05-13T09:09:03Z", "message": "Workaround missing ALPN on Java 8 242-"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "44b29f98c6bc67422a9a80b91aa7e75029dd06db", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/44b29f98c6bc67422a9a80b91aa7e75029dd06db", "committedDate": "2020-05-12T13:51:18Z", "message": "Workaround missing ALPN on Java 8 242-"}, "afterCommit": {"oid": "bf8d70c8c442bb4300cc4c7d77c9ce4cecf3b822", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/bf8d70c8c442bb4300cc4c7d77c9ce4cecf3b822", "committedDate": "2020-05-13T09:09:03Z", "message": "Workaround missing ALPN on Java 8 242-"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNzg3MTI1", "url": "https://github.com/quarkusio/quarkus/pull/9120#pullrequestreview-411787125", "createdAt": "2020-05-14T13:10:53Z", "commit": {"oid": "bf8d70c8c442bb4300cc4c7d77c9ce4cecf3b822"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3530, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}