{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzOTkzMjQ4", "number": 9645, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjo0MDowNVrOEDiLFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjo0MDo0NlrOEDiMJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTQxMDc2OnYy", "diffSide": "RIGHT", "path": ".github/workflows/ci-actions.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjo0MDowNVrOGgm2Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNjo1NzoyM1rOGg7N5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg0NDA3MQ==", "bodyText": "Why is the integration test excluded?", "url": "https://github.com/quarkusio/quarkus/pull/9645#discussion_r436844071", "createdAt": "2020-06-08T16:40:05Z", "author": {"login": "patriot1burke"}, "path": ".github/workflows/ci-actions.yml", "diffHunk": "@@ -102,12 +102,13 @@ jobs:\n         java :\n           - { name: Java8,\n               java-version: 8,\n-              maven_args: \"-pl !integration-tests/vault-app,!integration-tests/vault-agroal,!integration-tests/vault\"\n+              maven_args: \"-pl !integration-tests/vault-app,!integration-tests/vault-agroal,!integration-tests/vault,!integration-tests/google-cloud-functions-http\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a34a7530d0537f22a52dac8d9a9e56048156475e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE3NzgyOA==", "bodyText": "It's only excluded on Java 8 because GCF only supports Java 11.", "url": "https://github.com/quarkusio/quarkus/pull/9645#discussion_r437177828", "createdAt": "2020-06-09T06:57:23Z", "author": {"login": "loicmathieu"}, "path": ".github/workflows/ci-actions.yml", "diffHunk": "@@ -102,12 +102,13 @@ jobs:\n         java :\n           - { name: Java8,\n               java-version: 8,\n-              maven_args: \"-pl !integration-tests/vault-app,!integration-tests/vault-agroal,!integration-tests/vault\"\n+              maven_args: \"-pl !integration-tests/vault-app,!integration-tests/vault-agroal,!integration-tests/vault,!integration-tests/google-cloud-functions-http\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg0NDA3MQ=="}, "originalCommit": {"oid": "a34a7530d0537f22a52dac8d9a9e56048156475e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTQxMzQ5OnYy", "diffSide": "RIGHT", "path": "extensions/google-cloud-functions-http/runtime/src/main/java/io/quarkus/gcp/functions/http/QuarkusHttpFunction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjo0MDo0NlrOGgm3zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNzoyODoxOFrOGg8JrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg0NDQ5Mw==", "bodyText": "Not that big a deal, but should create the baos lazily.", "url": "https://github.com/quarkusio/quarkus/pull/9645#discussion_r436844493", "createdAt": "2020-06-08T16:40:46Z", "author": {"login": "patriot1burke"}, "path": "extensions/google-cloud-functions-http/runtime/src/main/java/io/quarkus/gcp/functions/http/QuarkusHttpFunction.java", "diffHunk": "@@ -0,0 +1,184 @@\n+package io.quarkus.gcp.functions.http;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.nio.channels.Channels;\n+import java.nio.channels.WritableByteChannel;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.omg.CORBA.portable.ResponseHandler;\n+\n+import com.google.cloud.functions.HttpFunction;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.FileRegion;\n+import io.netty.handler.codec.http.DefaultHttpRequest;\n+import io.netty.handler.codec.http.DefaultLastHttpContent;\n+import io.netty.handler.codec.http.HttpContent;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http.HttpVersion;\n+import io.netty.handler.codec.http.LastHttpContent;\n+import io.netty.util.ReferenceCountUtil;\n+import io.quarkus.netty.runtime.virtual.VirtualClientConnection;\n+import io.quarkus.netty.runtime.virtual.VirtualResponseHandler;\n+import io.quarkus.runtime.Application;\n+import io.quarkus.vertx.http.runtime.VertxHttpRecorder;\n+\n+public class QuarkusHttpFunction implements HttpFunction {\n+    protected static final String deploymentStatus;\n+    protected static boolean started = false;\n+\n+    private static final int BUFFER_SIZE = 8096;\n+\n+    static {\n+        StringWriter error = new StringWriter();\n+        PrintWriter errorWriter = new PrintWriter(error, true);\n+        if (Application.currentApplication() == null) { // were we already bootstrapped?  Needed for mock unit testing.\n+            ClassLoader currentCl = Thread.currentThread().getContextClassLoader();\n+            try {\n+                // For GCP functions, we need to set the TCCL to the QuarkusHttpFunction classloader then restore it.\n+                // Without this, we have a lot of classloading issues (ClassNotFoundException on existing classes)\n+                // during static init.\n+                Thread.currentThread().setContextClassLoader(QuarkusHttpFunction.class.getClassLoader());\n+                Class<?> appClass = Class.forName(\"io.quarkus.runner.ApplicationImpl\");\n+                String[] args = {};\n+                Application app = (Application) appClass.getConstructor().newInstance();\n+                app.start(args);\n+                errorWriter.println(\"Quarkus bootstrapped successfully.\");\n+                started = true;\n+            } catch (Exception ex) {\n+                errorWriter.println(\"Quarkus bootstrap failed.\");\n+                ex.printStackTrace(errorWriter);\n+            } finally {\n+                Thread.currentThread().setContextClassLoader(currentCl);\n+            }\n+        } else {\n+            errorWriter.println(\"Quarkus bootstrapped successfully.\");\n+            started = true;\n+        }\n+        deploymentStatus = error.toString();\n+    }\n+\n+    @Override\n+    public void service(HttpRequest request, HttpResponse response) throws IOException {\n+        if (!started) {\n+            throw new IOException(deploymentStatus);\n+        }\n+        dispatch(request, response);\n+    }\n+\n+    private void dispatch(HttpRequest request, HttpResponse response) throws IOException {\n+        try {\n+            nettyDispatch(request, response);\n+        } catch (IOException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new IOException(e);\n+        }\n+    }\n+\n+    private void nettyDispatch(HttpRequest request, HttpResponse response)\n+            throws InterruptedException, IOException, ExecutionException {\n+        String path = request.getPath();\n+        Optional<String> host = request.getFirstHeader(\"Host\");\n+        DefaultHttpRequest nettyRequest = new DefaultHttpRequest(HttpVersion.HTTP_1_1,\n+                HttpMethod.valueOf(request.getMethod()), path);\n+        host.ifPresent(h -> nettyRequest.headers().set(\"Host\", host));\n+        for (Map.Entry<String, List<String>> header : request.getHeaders().entrySet()) {\n+            nettyRequest.headers().add(header.getKey(), header.getValue());\n+        }\n+\n+        HttpContent requestContent = LastHttpContent.EMPTY_LAST_CONTENT;\n+        if (request.getContentLength() != 0) {\n+            try (ByteArrayOutputStream buffer = new ByteArrayOutputStream()) {\n+                int nRead;\n+                byte[] data = new byte[BUFFER_SIZE];\n+                while ((nRead = request.getInputStream().read(data, 0, data.length)) != -1) {\n+                    buffer.write(data, 0, nRead);\n+                }\n+                buffer.flush();\n+                byte[] byteArray = buffer.toByteArray();\n+                ByteBuf body = Unpooled.wrappedBuffer(byteArray);\n+                requestContent = new DefaultLastHttpContent(body);\n+            }\n+        }\n+\n+        ResponseHandler handler = new ResponseHandler(response);\n+        VirtualClientConnection connection = VirtualClientConnection.connect(handler, VertxHttpRecorder.VIRTUAL_HTTP);\n+        connection.sendMessage(nettyRequest);\n+        connection.sendMessage(requestContent);\n+        try {\n+            handler.future.get();\n+        } finally {\n+            connection.close();\n+        }\n+    }\n+\n+    private class ResponseHandler implements VirtualResponseHandler {\n+\n+        ByteArrayOutputStream baos;\n+        WritableByteChannel byteChannel;\n+        CompletableFuture<Void> future = new CompletableFuture<>();\n+        final HttpResponse response;\n+\n+        public ResponseHandler(HttpResponse response) {\n+            this.response = response;\n+            this.baos = new ByteArrayOutputStream(BUFFER_SIZE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a34a7530d0537f22a52dac8d9a9e56048156475e"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE5MzEzMw==", "bodyText": "Yes, I saw that you did it for Azure Functions, I was not fan of it because it makes the code harder to read but after all it's important as not all response will have a body.\nI updated the code with lazy init of tha baos.", "url": "https://github.com/quarkusio/quarkus/pull/9645#discussion_r437193133", "createdAt": "2020-06-09T07:28:18Z", "author": {"login": "loicmathieu"}, "path": "extensions/google-cloud-functions-http/runtime/src/main/java/io/quarkus/gcp/functions/http/QuarkusHttpFunction.java", "diffHunk": "@@ -0,0 +1,184 @@\n+package io.quarkus.gcp.functions.http;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.nio.channels.Channels;\n+import java.nio.channels.WritableByteChannel;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.omg.CORBA.portable.ResponseHandler;\n+\n+import com.google.cloud.functions.HttpFunction;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.FileRegion;\n+import io.netty.handler.codec.http.DefaultHttpRequest;\n+import io.netty.handler.codec.http.DefaultLastHttpContent;\n+import io.netty.handler.codec.http.HttpContent;\n+import io.netty.handler.codec.http.HttpMethod;\n+import io.netty.handler.codec.http.HttpVersion;\n+import io.netty.handler.codec.http.LastHttpContent;\n+import io.netty.util.ReferenceCountUtil;\n+import io.quarkus.netty.runtime.virtual.VirtualClientConnection;\n+import io.quarkus.netty.runtime.virtual.VirtualResponseHandler;\n+import io.quarkus.runtime.Application;\n+import io.quarkus.vertx.http.runtime.VertxHttpRecorder;\n+\n+public class QuarkusHttpFunction implements HttpFunction {\n+    protected static final String deploymentStatus;\n+    protected static boolean started = false;\n+\n+    private static final int BUFFER_SIZE = 8096;\n+\n+    static {\n+        StringWriter error = new StringWriter();\n+        PrintWriter errorWriter = new PrintWriter(error, true);\n+        if (Application.currentApplication() == null) { // were we already bootstrapped?  Needed for mock unit testing.\n+            ClassLoader currentCl = Thread.currentThread().getContextClassLoader();\n+            try {\n+                // For GCP functions, we need to set the TCCL to the QuarkusHttpFunction classloader then restore it.\n+                // Without this, we have a lot of classloading issues (ClassNotFoundException on existing classes)\n+                // during static init.\n+                Thread.currentThread().setContextClassLoader(QuarkusHttpFunction.class.getClassLoader());\n+                Class<?> appClass = Class.forName(\"io.quarkus.runner.ApplicationImpl\");\n+                String[] args = {};\n+                Application app = (Application) appClass.getConstructor().newInstance();\n+                app.start(args);\n+                errorWriter.println(\"Quarkus bootstrapped successfully.\");\n+                started = true;\n+            } catch (Exception ex) {\n+                errorWriter.println(\"Quarkus bootstrap failed.\");\n+                ex.printStackTrace(errorWriter);\n+            } finally {\n+                Thread.currentThread().setContextClassLoader(currentCl);\n+            }\n+        } else {\n+            errorWriter.println(\"Quarkus bootstrapped successfully.\");\n+            started = true;\n+        }\n+        deploymentStatus = error.toString();\n+    }\n+\n+    @Override\n+    public void service(HttpRequest request, HttpResponse response) throws IOException {\n+        if (!started) {\n+            throw new IOException(deploymentStatus);\n+        }\n+        dispatch(request, response);\n+    }\n+\n+    private void dispatch(HttpRequest request, HttpResponse response) throws IOException {\n+        try {\n+            nettyDispatch(request, response);\n+        } catch (IOException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new IOException(e);\n+        }\n+    }\n+\n+    private void nettyDispatch(HttpRequest request, HttpResponse response)\n+            throws InterruptedException, IOException, ExecutionException {\n+        String path = request.getPath();\n+        Optional<String> host = request.getFirstHeader(\"Host\");\n+        DefaultHttpRequest nettyRequest = new DefaultHttpRequest(HttpVersion.HTTP_1_1,\n+                HttpMethod.valueOf(request.getMethod()), path);\n+        host.ifPresent(h -> nettyRequest.headers().set(\"Host\", host));\n+        for (Map.Entry<String, List<String>> header : request.getHeaders().entrySet()) {\n+            nettyRequest.headers().add(header.getKey(), header.getValue());\n+        }\n+\n+        HttpContent requestContent = LastHttpContent.EMPTY_LAST_CONTENT;\n+        if (request.getContentLength() != 0) {\n+            try (ByteArrayOutputStream buffer = new ByteArrayOutputStream()) {\n+                int nRead;\n+                byte[] data = new byte[BUFFER_SIZE];\n+                while ((nRead = request.getInputStream().read(data, 0, data.length)) != -1) {\n+                    buffer.write(data, 0, nRead);\n+                }\n+                buffer.flush();\n+                byte[] byteArray = buffer.toByteArray();\n+                ByteBuf body = Unpooled.wrappedBuffer(byteArray);\n+                requestContent = new DefaultLastHttpContent(body);\n+            }\n+        }\n+\n+        ResponseHandler handler = new ResponseHandler(response);\n+        VirtualClientConnection connection = VirtualClientConnection.connect(handler, VertxHttpRecorder.VIRTUAL_HTTP);\n+        connection.sendMessage(nettyRequest);\n+        connection.sendMessage(requestContent);\n+        try {\n+            handler.future.get();\n+        } finally {\n+            connection.close();\n+        }\n+    }\n+\n+    private class ResponseHandler implements VirtualResponseHandler {\n+\n+        ByteArrayOutputStream baos;\n+        WritableByteChannel byteChannel;\n+        CompletableFuture<Void> future = new CompletableFuture<>();\n+        final HttpResponse response;\n+\n+        public ResponseHandler(HttpResponse response) {\n+            this.response = response;\n+            this.baos = new ByteArrayOutputStream(BUFFER_SIZE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg0NDQ5Mw=="}, "originalCommit": {"oid": "a34a7530d0537f22a52dac8d9a9e56048156475e"}, "originalPosition": 135}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3024, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}