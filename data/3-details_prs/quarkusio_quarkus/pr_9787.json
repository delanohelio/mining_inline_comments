{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3ODEyOTIx", "number": 9787, "title": "Refactor and Introduce ExtensionManager in CodeGen", "bodyText": "This is part of #8178\n\nImproved packages names and content\nImproved general readability and consistency\nAdded ExtensionManager to define a high level way of managing (read/write) extensions in any QuarkusProject\nRemoved most unsafe Gradle operations which were outside of the Gradle plugin (we need to figure out a way to improve the \"generic\" gradle support to make it compatible again..)\nRemoved existing project support with the create command (throws an error) -> #9875\nRemoved compatibility with project without the Quarkus platform bom defined", "createdAt": "2020-06-04T12:50:31Z", "url": "https://github.com/quarkusio/quarkus/pull/9787", "merged": true, "mergeCommit": {"oid": "c7b624d1f24a11c8690864acbfd2524d91e42d95"}, "closed": true, "closedAt": "2020-06-10T12:13:45Z", "author": {"login": "ia3andy"}, "timelineItems": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcn9j2rABqjM0MDY3MDAwOTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcp4mWcgFqTQyNzk4OTc3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "69e427b1033687ff3c8baa74112a858c6d05ca74", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/69e427b1033687ff3c8baa74112a858c6d05ca74", "committedDate": "2020-06-04T12:43:36Z", "message": "Refactor and Introduce ExtensionsManager in CodeGen\n\nThis is part of #8178\n\n- Improved packages names and content\n- Improved general readability and consistency\n- Added ExtensionManager to define a high level way of managing (read/write) extensions in any QuarkusProject\n- Removed most unsafe Gradle operations which were outside of the Gradle plugin (we need to figure out a way to improve the \"generic\" gradle support to make it compatible again..)\n- Removed existing project support with the create command (throws an error)\n- Removed compatibility with project without the Quarkus platform bom defined"}, "afterCommit": {"oid": "4e3abc3b4ad8b1297920cdb8044340b958496768", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/4e3abc3b4ad8b1297920cdb8044340b958496768", "committedDate": "2020-06-04T12:52:18Z", "message": "Refactor and Introduce ExtensionsManager in CodeGen\n\nThis is part of #8178\n\n- Improved packages names and content\n- Improved general readability and consistency\n- Added ExtensionManager to define a high level way of managing (read/write) extensions in any QuarkusProject\n- Removed most unsafe Gradle operations which were outside of the Gradle plugin (we need to figure out a way to improve the \"generic\" gradle support to make it compatible again..)\n- Removed existing project support with the create command (throws an error)\n- Removed compatibility with project without the Quarkus platform bom defined"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e3abc3b4ad8b1297920cdb8044340b958496768", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/4e3abc3b4ad8b1297920cdb8044340b958496768", "committedDate": "2020-06-04T12:52:18Z", "message": "Refactor and Introduce ExtensionsManager in CodeGen\n\nThis is part of #8178\n\n- Improved packages names and content\n- Improved general readability and consistency\n- Added ExtensionManager to define a high level way of managing (read/write) extensions in any QuarkusProject\n- Removed most unsafe Gradle operations which were outside of the Gradle plugin (we need to figure out a way to improve the \"generic\" gradle support to make it compatible again..)\n- Removed existing project support with the create command (throws an error)\n- Removed compatibility with project without the Quarkus platform bom defined"}, "afterCommit": {"oid": "56e060f7b4cb79065b8f56b44f9fa39a949ef52d", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/56e060f7b4cb79065b8f56b44f9fa39a949ef52d", "committedDate": "2020-06-04T12:58:31Z", "message": "Refactor and Introduce ExtensionsManager in CodeGen\n\nThis is part of #8178\n\n- Improved packages names and content\n- Improved general readability and consistency\n- Added ExtensionManager to define a high level way of managing (read/write) extensions in any QuarkusProject\n- Removed most unsafe Gradle operations which were outside of the Gradle plugin (we need to figure out a way to improve the \"generic\" gradle support to make it compatible again..)\n- Removed existing project support with the create command (throws an error)\n- Removed compatibility with project without the Quarkus platform bom defined"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "56e060f7b4cb79065b8f56b44f9fa39a949ef52d", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/56e060f7b4cb79065b8f56b44f9fa39a949ef52d", "committedDate": "2020-06-04T12:58:31Z", "message": "Refactor and Introduce ExtensionsManager in CodeGen\n\nThis is part of #8178\n\n- Improved packages names and content\n- Improved general readability and consistency\n- Added ExtensionManager to define a high level way of managing (read/write) extensions in any QuarkusProject\n- Removed most unsafe Gradle operations which were outside of the Gradle plugin (we need to figure out a way to improve the \"generic\" gradle support to make it compatible again..)\n- Removed existing project support with the create command (throws an error)\n- Removed compatibility with project without the Quarkus platform bom defined"}, "afterCommit": {"oid": "256650b5f9fb70ea10c1088e6d37f29f722b0bdc", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/256650b5f9fb70ea10c1088e6d37f29f722b0bdc", "committedDate": "2020-06-04T13:11:30Z", "message": "Improved codegen packages names and content"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NDM3Njkz", "url": "https://github.com/quarkusio/quarkus/pull/9787#pullrequestreview-424437693", "createdAt": "2020-06-04T13:25:34Z", "commit": {"oid": "256650b5f9fb70ea10c1088e6d37f29f722b0bdc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzoyNTozNVrOGfFlsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzoyNTozNVrOGfFlsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI1MDYwOQ==", "bodyText": "Do they have to be Extension or the AppArtifactKey is enough? Also, perhaps it would be nice to use Collection instead", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r435250609", "createdAt": "2020-06-04T13:25:35Z", "author": {"login": "gastaldi"}, "path": "independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionsManager.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package io.quarkus.devtools.project.extensions;\n+\n+import static io.quarkus.devtools.project.extensions.Extensions.equalsIgnoringVersions;\n+\n+import io.quarkus.dependencies.Extension;\n+import io.quarkus.devtools.project.BuildTool;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * This interface defines a high level way of managing (read/write) extensions in any QuarkusProject\n+ */\n+public interface ExtensionsManager {\n+\n+    /**\n+     * @return the {@link BuildTool} of this extension manager\n+     */\n+    BuildTool getBuildTool();\n+\n+    /**\n+     * Read the build file(s) to get the list of extensions installed in this Quarkus project.\n+     *\n+     * @return The list of extensions installed in the project build file(s).\n+     * @throws IOException if a problem occurs while reading the project build file(s)\n+     */\n+    List<Extension> read() throws IOException;\n+\n+    /**\n+     * Read build file(s) to check if an extension is installed in this Quarkus project.\n+     *\n+     * @param e the extensions to check\n+     * @return true if it's installed\n+     * @throws IOException if a problem occurs while reading the project build file(s)\n+     */\n+    default boolean hasExtension(Extension e) throws IOException {\n+        return read().stream().anyMatch(i -> equalsIgnoringVersions(i, e));\n+    }\n+\n+    /**\n+     * Check that the Quarkus Platform bom is defined in the project.\n+     * The Quarkus Platform Bom role is to define version to use for Quarkus extensions.\n+     *\n+     * @return true if it's defined, false else\n+     * @throws IOException if a problem occurs while reading the project build file(s)\n+     */\n+    boolean hasQuarkusPlatformBom() throws IOException;\n+\n+    /**\n+     * This is going to add all the specified extensions to the project build file(s).\n+     *\n+     * Extensions which are already installed are ignored.\n+     *\n+     * @param extensions the list of extensions to add\n+     * @return the number of added extensions (excluding already installed)\n+     * @throws IOException if a problem occurs while reading/writing the project build file(s)\n+     */\n+    int add(List<Extension> extensions) throws IOException;\n+\n+    /**\n+     * This is going to remove all the specified extensions from the project build file(s).\n+     *\n+     * This is ignoring the {@link Extension} version\n+     *\n+     * @param extensions the set of extensions to remove\n+     * @return the number of removed extensions (excluding already not installed)\n+     * @throws IOException if a problem occurs while reading/writing the project build file(s)\n+     */\n+    int remove(Set<Extension> extensions) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "256650b5f9fb70ea10c1088e6d37f29f722b0bdc"}, "originalPosition": 69}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "256650b5f9fb70ea10c1088e6d37f29f722b0bdc", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/256650b5f9fb70ea10c1088e6d37f29f722b0bdc", "committedDate": "2020-06-04T13:11:30Z", "message": "Improved codegen packages names and content"}, "afterCommit": {"oid": "9d4b45514ef8b3b1fb8833f7a782870c28c9aa7a", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/9d4b45514ef8b3b1fb8833f7a782870c28c9aa7a", "committedDate": "2020-06-04T13:36:55Z", "message": "Improved codegen packages names and content"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NDYxNTAw", "url": "https://github.com/quarkusio/quarkus/pull/9787#pullrequestreview-424461500", "createdAt": "2020-06-04T13:42:20Z", "commit": {"oid": "9d4b45514ef8b3b1fb8833f7a782870c28c9aa7a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NDY1ODU2", "url": "https://github.com/quarkusio/quarkus/pull/9787#pullrequestreview-424465856", "createdAt": "2020-06-04T13:46:49Z", "commit": {"oid": "9d4b45514ef8b3b1fb8833f7a782870c28c9aa7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo0Njo0OVrOGfGtEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo0Njo0OVrOGfGtEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI2ODg4Mw==", "bodyText": "Why remove the ability to add extensions when you create a project?\nI find the feature quite useful.", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r435268883", "createdAt": "2020-06-04T13:46:49Z", "author": {"login": "stalep"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/CreateProjectMojo.java", "diffHunk": "@@ -214,11 +212,6 @@ public void execute() throws MojoExecutionException {\n             success = createProject.execute().isSuccess();\n \n             File createdDependenciesBuildFile = new File(projectRoot, buildToolEnum.getDependenciesFile());\n-            if (success) {\n-                success = new AddExtensions(QuarkusProject.of(projectFolderPath, platform, buildToolEnum))\n-                        .extensions(extensions).execute()\n-                        .isSuccess();\n-            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d4b45514ef8b3b1fb8833f7a782870c28c9aa7a"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MDk0MTEw", "url": "https://github.com/quarkusio/quarkus/pull/9787#pullrequestreview-425094110", "createdAt": "2020-06-05T08:21:52Z", "commit": {"oid": "81aca5ca6f82bb62b7ba94a472c081e3f170ccb1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODoyMTo1MlrOGfk_EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODoyMTo1MlrOGfk_EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2NTAwOQ==", "bodyText": "remove if it should be ignored.", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r435765009", "createdAt": "2020-06-05T08:21:52Z", "author": {"login": "maxandersen"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/GradleBuildFileFromConnector.java", "diffHunk": "@@ -13,33 +14,35 @@\n import org.gradle.tooling.model.eclipse.EclipseExternalDependency;\n import org.gradle.tooling.model.eclipse.EclipseProject;\n \n-import io.quarkus.devtools.buildfile.GradleBuildFile;\n-import io.quarkus.devtools.writer.ProjectWriter;\n+import io.quarkus.devtools.project.buildfile.AbstractGradleBuildFile;\n+import io.quarkus.platform.descriptor.QuarkusPlatformDescriptor;\n \n-public class GradleBuildFileFromConnector extends GradleBuildFile {\n+public class GradleBuildFileFromConnector extends AbstractGradleBuildFile {\n \n     private List<Dependency> dependencies = null;\n \n-    public GradleBuildFileFromConnector(ProjectWriter writer) {\n-        super(writer);\n-        // we need to initialize here since there is no other single point of entry\n+    public GradleBuildFileFromConnector(final Path projectFolderPath, final QuarkusPlatformDescriptor platformDescriptor) {\n+        super(projectFolderPath, platformDescriptor);\n+    }\n+\n+    public GradleBuildFileFromConnector(Path projectFolderPath, QuarkusPlatformDescriptor platformDescriptor,\n+            Path rootProjectPath) {\n+        super(projectFolderPath, platformDescriptor, rootProjectPath);\n     }\n \n     @Override\n     public List<Dependency> getDependencies() throws IOException {\n         if (dependencies == null) {\n             EclipseProject eclipseProject = null;\n             if (getBuildContent() != null) {\n-                if (getWriter().hasFile()) {\n-                    try {\n-                        ProjectConnection connection = GradleConnector.newConnector()\n-                                .forProjectDirectory(getWriter().getProjectFolder())\n-                                .connect();\n-                        eclipseProject = connection.getModel(EclipseProject.class);\n-                    } catch (BuildException e) {\n-                        // ignore this error.\n-                        e.printStackTrace();\n-                    }\n+                try {\n+                    ProjectConnection connection = GradleConnector.newConnector()\n+                            .forProjectDirectory(getProjectFolderPath().toFile())\n+                            .connect();\n+                    eclipseProject = connection.getModel(EclipseProject.class);\n+                } catch (BuildException e) {\n+                    // ignore this error.\n+                    e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81aca5ca6f82bb62b7ba94a472c081e3f170ccb1"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MDk3MTIx", "url": "https://github.com/quarkusio/quarkus/pull/9787#pullrequestreview-425097121", "createdAt": "2020-06-05T08:26:17Z", "commit": {"oid": "81aca5ca6f82bb62b7ba94a472c081e3f170ccb1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODoyNjoxN1rOGflIWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODoyNjoxN1rOGflIWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2NzM4NA==", "bodyText": "this code could be more readable to put getProject().getRootProject().getProjectDir()  in var.", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r435767384", "createdAt": "2020-06-05T08:26:17Z", "author": {"login": "maxandersen"}, "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusPlatformTask.java", "diffHunk": "@@ -66,12 +65,11 @@ protected QuarkusPlatformDescriptor platformDescriptor() {\n     }\n \n     @Internal\n-    protected GradleBuildFile getGradleBuildFile() {\n-        final ProjectWriter writer = new FileProjectWriter(getProject().getProjectDir());\n+    protected BuildFile getGradleBuildFile() {\n         return getProject().getParent() == null\n-                ? new GradleBuildFile(writer)\n-                : new GradleBuildFile(writer,\n-                        new FileProjectWriter(getProject().getRootProject().getProjectDir()));\n+                ? new GradleBuildFileFromConnector(getProject().getProjectDir().toPath(), platformDescriptor())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81aca5ca6f82bb62b7ba94a472c081e3f170ccb1"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MTAxOTI2", "url": "https://github.com/quarkusio/quarkus/pull/9787#pullrequestreview-425101926", "createdAt": "2020-06-05T08:32:56Z", "commit": {"oid": "81aca5ca6f82bb62b7ba94a472c081e3f170ccb1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODozMjo1NlrOGflW8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODozMjo1NlrOGflW8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc3MTEyMQ==", "bodyText": "why the change of order in the signature here ?", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r435771121", "createdAt": "2020-06-05T08:32:56Z", "author": {"login": "maxandersen"}, "path": "independent-projects/tools/common/src/main/java/io/quarkus/devtools/commands/handlers/QuarkusCommandHandlers.java", "diffHunk": "@@ -11,111 +16,86 @@\n import java.util.regex.PatternSyntaxException;\n import java.util.stream.Collectors;\n \n-/**\n- * This class is thread-safe. It extracts extensions to be added to the project from an instance of\n- * {@link QuarkusCommandInvocation}.\n- */\n-public class AddExtensionsCommandHandler implements QuarkusCommand {\n-\n-    final static Printer PRINTER = new Printer();\n-\n-    @Override\n-    public QuarkusCommandOutcome execute(QuarkusCommandInvocation invocation) throws QuarkusCommandException {\n-\n-        final Set<String> extensions = invocation.getValue(AddExtensions.EXTENSIONS, Collections.emptySet());\n-        if (extensions.isEmpty()) {\n-            return QuarkusCommandOutcome.success().setValue(AddExtensions.OUTCOME_UPDATED, false);\n-        }\n-\n-        boolean updated = false;\n-        boolean success = true;\n+final class QuarkusCommandHandlers {\n \n-        final List<Extension> registry = invocation.getPlatformDescriptor().getExtensions();\n+    private QuarkusCommandHandlers() {\n+    }\n \n-        final BuildFile buildFile = invocation.getBuildFile();\n-        try {\n-            for (String query : extensions) {\n-                if (query.contains(\":\")) {\n-                    // GAV case.\n-                    updated = buildFile.addExtensionAsGAV(query) || updated;\n-                } else {\n-                    SelectionResult result = select(query, registry, false);\n-                    if (!result.matches()) {\n-                        StringBuilder sb = new StringBuilder();\n-                        // We have 3 cases, we can still have a single candidate, but the match is on label\n-                        // or we have several candidates, or none\n-                        Set<Extension> candidates = result.getExtensions();\n-                        if (candidates.isEmpty()) {\n-                            // No matches at all.\n-                            PRINTER.nok(\" Cannot find a dependency matching '\" + query + \"', maybe a typo?\");\n-                            success = false;\n-                        } else {\n-                            sb.append(Printer.NOK).append(\" Multiple extensions matching '\").append(query).append(\"'\");\n-                            result.getExtensions()\n-                                    .forEach(extension -> sb.append(System.lineSeparator()).append(\"     * \")\n-                                            .append(extension.managementKey()));\n-                            sb.append(System.lineSeparator())\n-                                    .append(\"     Be more specific e.g using the exact name or the full GAV.\");\n-                            PRINTER.print(sb.toString());\n-                            success = false;\n-                        }\n-                    } else { // Matches.\n-                        for (Extension extension : result) {\n-                            // Don't set success to false even if the dependency is not added; as it's should be idempotent.\n-                            updated = buildFile.addDependency(invocation.getPlatformDescriptor(), extension) || updated;\n-                        }\n+    static List<Extension> computeExtensionsFromQuery(final QuarkusCommandInvocation invocation,\n+            final Set<String> extensionsQuery) {\n+        final ImmutableList.Builder<Extension> builder = ImmutableList.<Extension> builder();\n+        for (String query : extensionsQuery) {\n+            if (query.contains(\":\")) {\n+                builder.add(Extensions.parse(query));\n+            } else {\n+                SelectionResult result = select(invocation.getPlatformDescriptor().getExtensions(), query, false);\n+                if (!result.matches()) {\n+                    StringBuilder sb = new StringBuilder();\n+                    // We have 3 cases, we can still have a single candidate, but the match is on label\n+                    // or we have several candidates, or none\n+                    Set<Extension> candidates = result.getExtensions();\n+                    if (candidates.isEmpty()) {\n+                        // No matches at all.\n+                        invocation.log().info(nok(\" Cannot find a dependency matching '\" + query + \"', maybe a typo?\"));\n+                        return null;\n+                    } else {\n+                        sb.append(NOK).append(\" Multiple extensions matching '\").append(query).append(\"'\");\n+                        result.getExtensions()\n+                                .forEach(extension -> sb.append(System.lineSeparator()).append(\"     * \")\n+                                        .append(extension.managementKey()));\n+                        sb.append(System.lineSeparator())\n+                                .append(\"     Be more specific e.g using the exact name or the full GAV.\");\n+                        invocation.log().info(sb.toString());\n+                        return null;\n+                    }\n+                } else { // Matches.\n+                    for (Extension extension : result) {\n+                        // Don't set success to false even if the dependency is not added; as it's should be idempotent.\n+                        builder.add(extension);\n                     }\n                 }\n             }\n-        } catch (IOException e) {\n-            throw new QuarkusCommandException(\"Failed to add extensions\", e);\n-        }\n-\n-        if (buildFile != null && updated) {\n-            try {\n-                buildFile.close();\n-            } catch (IOException e) {\n-                throw new QuarkusCommandException(\"Failed to update the project\", e);\n-            }\n         }\n-\n-        return new QuarkusCommandOutcome(success).setValue(AddExtensions.OUTCOME_UPDATED, updated);\n+        return builder.build();\n     }\n \n     /**\n      * Selection algorithm.\n      *\n+     * @param allPlatformExtensions the list of all platform extensions\n      * @param query the query\n-     * @param extensions the extension list\n      * @param labelLookup whether or not the query must be tested against the labels of the extensions. Should\n      *        be {@code false} by default.\n      * @return the list of matching candidates and whether or not a match has been found.\n      */\n-    static SelectionResult select(String query, List<Extension> extensions, boolean labelLookup) {\n+    static SelectionResult select(final List<Extension> allPlatformExtensions, final String query, final boolean labelLookup) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81aca5ca6f82bb62b7ba94a472c081e3f170ccb1"}, "originalPosition": 138}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "81aca5ca6f82bb62b7ba94a472c081e3f170ccb1", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/81aca5ca6f82bb62b7ba94a472c081e3f170ccb1", "committedDate": "2020-06-04T13:56:02Z", "message": "Fix broken QuarkusCli"}, "afterCommit": {"oid": "e18527211b20cf83d4649de38a53d151818494a8", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/e18527211b20cf83d4649de38a53d151818494a8", "committedDate": "2020-06-08T14:44:05Z", "message": "Apply discussed changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MzU5ODI1", "url": "https://github.com/quarkusio/quarkus/pull/9787#pullrequestreview-426359825", "createdAt": "2020-06-08T15:30:52Z", "commit": {"oid": "e18527211b20cf83d4649de38a53d151818494a8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTozMDo1MlrOGgkAEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTozMDo1MlrOGgkAEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5NzQ1Ng==", "bodyText": "@aloubyansky as we discussed \u2b06\ufe0f", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r436797456", "createdAt": "2020-06-08T15:30:52Z", "author": {"login": "ia3andy"}, "path": "independent-projects/tools/platform-descriptor-api/src/main/java/io/quarkus/dependencies/Extension.java", "diffHunk": "@@ -195,6 +195,9 @@ public Dependency toDependency(boolean stripVersion) {\n         if (version != null && !version.isEmpty() && !stripVersion) {\n             dependency.setVersion(version);\n         }\n+        if (type != null && !type.isEmpty()) {\n+            dependency.setType(type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e18527211b20cf83d4649de38a53d151818494a8"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MzYwMjA1", "url": "https://github.com/quarkusio/quarkus/pull/9787#pullrequestreview-426360205", "createdAt": "2020-06-08T15:31:16Z", "commit": {"oid": "e18527211b20cf83d4649de38a53d151818494a8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTozMToxNlrOGgkBLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTozMToxNlrOGgkBLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5Nzc0MA==", "bodyText": "@aloubyansky as we discussed \u2b06\ufe0f", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r436797740", "createdAt": "2020-06-08T15:31:16Z", "author": {"login": "ia3andy"}, "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/model/AppArtifactKey.java", "diffHunk": "@@ -73,12 +73,12 @@ public static AppArtifactKey fromString(String str) {\n     protected AppArtifactKey(String[] parts) {\n         this.groupId = parts[0];\n         this.artifactId = parts[1];\n-        if (parts.length == 2) {\n+        if (parts.length == 2 || parts[2] == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e18527211b20cf83d4649de38a53d151818494a8"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "48db5c8a171cf87d94b547bdd987c394c31a32bf", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/48db5c8a171cf87d94b547bdd987c394c31a32bf", "committedDate": "2020-06-08T18:11:12Z", "message": "Fix Gradle tests"}, "afterCommit": {"oid": "34f217cc71e4201f349c8b55fc2231e4c7bdf312", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/34f217cc71e4201f349c8b55fc2231e4c7bdf312", "committedDate": "2020-06-09T07:48:43Z", "message": "Fix Maven tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2ODc2MjYz", "url": "https://github.com/quarkusio/quarkus/pull/9787#pullrequestreview-426876263", "createdAt": "2020-06-09T07:52:40Z", "commit": {"oid": "34f217cc71e4201f349c8b55fc2231e4c7bdf312"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNzo1Mjo0MFrOGg8-3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNzo1Mjo0MFrOGg8-3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIwNjc0OQ==", "bodyText": "@aloubyansky maybe we should change the AppArtifactKey/Coords instead, having empty string classifier seems not working with the maven api?", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437206749", "createdAt": "2020-06-09T07:52:40Z", "author": {"login": "ia3andy"}, "path": "independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/buildfile/MavenBuildFile.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package io.quarkus.devtools.project.buildfile;\n+\n+import static io.quarkus.devtools.project.extensions.Extensions.toKey;\n+\n+import io.quarkus.bootstrap.model.AppArtifactCoords;\n+import io.quarkus.bootstrap.model.AppArtifactKey;\n+import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.maven.utilities.MojoUtils;\n+import io.quarkus.platform.descriptor.QuarkusPlatformDescriptor;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.apache.maven.model.Dependency;\n+import org.apache.maven.model.Model;\n+\n+public class MavenBuildFile extends BuildFile {\n+\n+    private AtomicReference<Model> modelRef = new AtomicReference<>();\n+\n+    public MavenBuildFile(final Path projectFolderPath, final QuarkusPlatformDescriptor platformDescriptor) {\n+        super(projectFolderPath, platformDescriptor);\n+    }\n+\n+    @Override\n+    public void writeToDisk() throws IOException {\n+        if (getModel() == null) {\n+            return;\n+        }\n+        try (ByteArrayOutputStream pomOutputStream = new ByteArrayOutputStream()) {\n+            MojoUtils.write(getModel(), pomOutputStream);\n+            writeToProjectFile(BuildTool.MAVEN.getDependenciesFile(), pomOutputStream.toByteArray());\n+        }\n+    }\n+\n+    @Override\n+    protected void addDependencyInBuildFile(AppArtifactCoords coords) throws IOException {\n+        if (getModel() != null) {\n+            final Dependency d = new Dependency();\n+            d.setGroupId(coords.getGroupId());\n+            d.setArtifactId(coords.getArtifactId());\n+            d.setVersion(coords.getVersion());\n+            // When classifier is empty, you get  <classifier></classifier> in the pom.xml\n+            if (coords.getClassifier() != null && !coords.getClassifier().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34f217cc71e4201f349c8b55fc2231e4c7bdf312"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MTcwODY1", "url": "https://github.com/quarkusio/quarkus/pull/9787#pullrequestreview-427170865", "createdAt": "2020-06-09T13:50:38Z", "commit": {"oid": "34f217cc71e4201f349c8b55fc2231e4c7bdf312"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo1MDozOVrOGhK9qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo1MDozOVrOGhK9qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzNTgxNg==", "bodyText": "Better use the singular form here: ExtensionManager. eg. https://github.com/quarkusio/quarkus-registry-descriptor/blob/master/src/main/java/io/quarkus/registry/ExtensionRegistry.java", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437435816", "createdAt": "2020-06-09T13:50:39Z", "author": {"login": "gastaldi"}, "path": "independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionsManager.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package io.quarkus.devtools.project.extensions;\n+\n+import io.quarkus.bootstrap.model.AppArtifactCoords;\n+import io.quarkus.bootstrap.model.AppArtifactKey;\n+import io.quarkus.dependencies.Extension;\n+import io.quarkus.devtools.project.BuildTool;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * This interface defines a high level way of managing (read/write) extensions in any QuarkusProject\n+ */\n+public interface ExtensionsManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34f217cc71e4201f349c8b55fc2231e4c7bdf312"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MTc3ODA5", "url": "https://github.com/quarkusio/quarkus/pull/9787#pullrequestreview-427177809", "createdAt": "2020-06-09T13:57:21Z", "commit": {"oid": "34f217cc71e4201f349c8b55fc2231e4c7bdf312"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo1NzoyMlrOGhLY3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo1NzoyMlrOGhLY3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0Mjc4Mg==", "bodyText": "Since you're refactoring Printer into ConsoleMessageFormat, try to not expose the NOK attribute there otherwise the methods in that class are meaningless", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437442782", "createdAt": "2020-06-09T13:57:22Z", "author": {"login": "gastaldi"}, "path": "independent-projects/tools/common/src/main/java/io/quarkus/devtools/commands/handlers/QuarkusCommandHandlers.java", "diffHunk": "@@ -11,111 +17,86 @@\n import java.util.regex.PatternSyntaxException;\n import java.util.stream.Collectors;\n \n-/**\n- * This class is thread-safe. It extracts extensions to be added to the project from an instance of\n- * {@link QuarkusCommandInvocation}.\n- */\n-public class AddExtensionsCommandHandler implements QuarkusCommand {\n-\n-    final static Printer PRINTER = new Printer();\n+final class QuarkusCommandHandlers {\n \n-    @Override\n-    public QuarkusCommandOutcome execute(QuarkusCommandInvocation invocation) throws QuarkusCommandException {\n-\n-        final Set<String> extensions = invocation.getValue(AddExtensions.EXTENSIONS, Collections.emptySet());\n-        if (extensions.isEmpty()) {\n-            return QuarkusCommandOutcome.success().setValue(AddExtensions.OUTCOME_UPDATED, false);\n-        }\n-\n-        boolean updated = false;\n-        boolean success = true;\n-\n-        final List<Extension> registry = invocation.getPlatformDescriptor().getExtensions();\n+    private QuarkusCommandHandlers() {\n+    }\n \n-        final BuildFile buildFile = invocation.getBuildFile();\n-        try {\n-            for (String query : extensions) {\n-                if (query.contains(\":\")) {\n-                    // GAV case.\n-                    updated = buildFile.addExtensionAsGAV(query) || updated;\n+    static List<AppArtifactCoords> computeCoordsFromQuery(final QuarkusCommandInvocation invocation,\n+            final Set<String> extensionsQuery) {\n+        final ImmutableList.Builder<AppArtifactCoords> builder = ImmutableList.builder();\n+        for (String query : extensionsQuery) {\n+            if (query.contains(\":\")) {\n+                builder.add(AppArtifactCoords.fromString(query));\n+            } else {\n+                SelectionResult result = select(query, invocation.getPlatformDescriptor().getExtensions(), false);\n+                if (result.matches()) {\n+                    final Set<AppArtifactCoords> withStrippedVersion = result.getExtensions().stream().map(Extensions::toCoords)\n+                            .map(Extensions::stripVersion).collect(Collectors.toSet());\n+                    // We strip the version because those extensions are managed\n+                    builder.addAll(withStrippedVersion);\n                 } else {\n-                    SelectionResult result = select(query, registry, false);\n-                    if (!result.matches()) {\n-                        StringBuilder sb = new StringBuilder();\n-                        // We have 3 cases, we can still have a single candidate, but the match is on label\n-                        // or we have several candidates, or none\n-                        Set<Extension> candidates = result.getExtensions();\n-                        if (candidates.isEmpty()) {\n-                            // No matches at all.\n-                            PRINTER.nok(\" Cannot find a dependency matching '\" + query + \"', maybe a typo?\");\n-                            success = false;\n-                        } else {\n-                            sb.append(Printer.NOK).append(\" Multiple extensions matching '\").append(query).append(\"'\");\n-                            result.getExtensions()\n-                                    .forEach(extension -> sb.append(System.lineSeparator()).append(\"     * \")\n-                                            .append(extension.managementKey()));\n-                            sb.append(System.lineSeparator())\n-                                    .append(\"     Be more specific e.g using the exact name or the full GAV.\");\n-                            PRINTER.print(sb.toString());\n-                            success = false;\n-                        }\n-                    } else { // Matches.\n-                        for (Extension extension : result) {\n-                            // Don't set success to false even if the dependency is not added; as it's should be idempotent.\n-                            updated = buildFile.addDependency(invocation.getPlatformDescriptor(), extension) || updated;\n-                        }\n+                    StringBuilder sb = new StringBuilder();\n+                    // We have 3 cases, we can still have a single candidate, but the match is on label\n+                    // or we have several candidates, or none\n+                    Set<Extension> candidates = result.getExtensions();\n+                    if (candidates.isEmpty()) {\n+                        // No matches at all.\n+                        invocation.log().info(nok(\" Cannot find a dependency matching '\" + query + \"', maybe a typo?\"));\n+                        return null;\n+                    } else {\n+                        sb.append(NOK).append(\" Multiple extensions matching '\").append(query).append(\"'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34f217cc71e4201f349c8b55fc2231e4c7bdf312"}, "originalPosition": 100}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MTc4NzIx", "url": "https://github.com/quarkusio/quarkus/pull/9787#pullrequestreview-427178721", "createdAt": "2020-06-09T13:58:13Z", "commit": {"oid": "34f217cc71e4201f349c8b55fc2231e4c7bdf312"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo1ODoxM1rOGhLcew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo1ODoxM1rOGhLcew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0MzcwNw==", "bodyText": "Better make these attributes private otherwise any methods in this class are meaningless", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437443707", "createdAt": "2020-06-09T13:58:13Z", "author": {"login": "gastaldi"}, "path": "independent-projects/tools/platform-descriptor-api/src/main/java/io/quarkus/platform/tools/ConsoleMessageFormat.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package io.quarkus.platform.tools;\n+\n+public final class ConsoleMessageFormat {\n+\n+    public static final String OK = \"\\u2705\";\n+    public static final String NOK = \"\\u274c\";\n+    public static final String NOOP = \"\\uD83D\\uDC4D\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34f217cc71e4201f349c8b55fc2231e4c7bdf312"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MTgwNjA3", "url": "https://github.com/quarkusio/quarkus/pull/9787#pullrequestreview-427180607", "createdAt": "2020-06-09T13:59:57Z", "commit": {"oid": "34f217cc71e4201f349c8b55fc2231e4c7bdf312"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo1OTo1OFrOGhLiJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo1OTo1OFrOGhLiJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NTE1Nw==", "bodyText": "Why was this test removed?", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437445157", "createdAt": "2020-06-09T13:59:58Z", "author": {"login": "gastaldi"}, "path": "integration-tests/maven/src/test/java/io/quarkus/maven/it/CreateProjectMojoIT.java", "diffHunk": "@@ -351,23 +304,6 @@ public void testThatDefaultPackageAreReplaced() throws Exception {\n                 \"package org.acme.quarkus.sample;\");\n     }\n \n-    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34f217cc71e4201f349c8b55fc2231e4c7bdf312"}, "originalPosition": 113}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MTgxNDky", "url": "https://github.com/quarkusio/quarkus/pull/9787#pullrequestreview-427181492", "createdAt": "2020-06-09T14:00:50Z", "commit": {"oid": "34f217cc71e4201f349c8b55fc2231e4c7bdf312"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDowMDo1MFrOGhLkxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDowMDo1MFrOGhLkxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NTgyOA==", "bodyText": "It looks like those asserts are important, why remove them?", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437445828", "createdAt": "2020-06-09T14:00:50Z", "author": {"login": "gastaldi"}, "path": "integration-tests/maven/src/test/java/io/quarkus/maven/it/CreateProjectMojoIT.java", "diffHunk": "@@ -111,40 +111,13 @@ public void testProjectGenerationFromScratch() throws MavenInvocationException,\n     }\n \n     @Test\n-    public void testProjectGenerationFromEmptyPom() throws Exception {\n+    public void testProjectGenerationWithExistingPomShouldFail() throws Exception {\n         testDir = initProject(\"projects/simple-pom-it\", \"projects/project-generation-from-empty-pom\");\n         assertThat(testDir).isDirectory();\n         invoker = initInvoker(testDir);\n         InvocationResult result = setup(new Properties());\n \n-        assertThat(result.getExitCode()).isZero();\n-\n-        assertThat(new File(testDir, \"pom.xml\")).isFile();\n-        assertThat(new File(testDir, \"src/main/java\")).isDirectory();\n-\n-        assertThat(new File(testDir, \"src/main/resources/application.properties\")).exists();\n-        assertThat(new File(testDir, \"src/main/resources/META-INF/resources/index.html\")).exists();\n-\n-        assertThat(FileUtils.readFileToString(new File(testDir, \"pom.xml\"), \"UTF-8\"))\n-                .contains(getPluginArtifactId(), MojoUtils.TEMPLATE_PROPERTY_QUARKUS_PLUGIN_VERSION_VALUE,\n-                        getPluginGroupId());\n-\n-        final Model model = loadPom(testDir);\n-        assertThat(model.getProperties().getProperty(MojoUtils.TEMPLATE_PROPERTY_QUARKUS_PLUGIN_VERSION_NAME))\n-                .isEqualTo(getPluginVersion());\n-        assertThat(model.getProperties().getProperty(MojoUtils.TEMPLATE_PROPERTY_QUARKUS_PLATFORM_ARTIFACT_ID_NAME))\n-                .isEqualTo(getBomArtifactId());\n-\n-        assertThat(model.getDependencyManagement().getDependencies().stream()\n-                .anyMatch(d -> d.getArtifactId().equals(MojoUtils.TEMPLATE_PROPERTY_QUARKUS_PLATFORM_ARTIFACT_ID_VALUE)\n-                        && d.getVersion().equals(MojoUtils.TEMPLATE_PROPERTY_QUARKUS_PLATFORM_VERSION_VALUE)\n-                        && d.getScope().equals(\"import\")\n-                        && d.getType().equals(\"pom\"))).isTrue();\n-\n-        assertThat(model.getDependencies()).isEmpty();\n-\n-        assertThat(model.getProfiles()).hasSize(1);\n-        assertThat(model.getProfiles().get(0).getId()).isEqualTo(\"native\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34f217cc71e4201f349c8b55fc2231e4c7bdf312"}, "originalPosition": 38}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "34f217cc71e4201f349c8b55fc2231e4c7bdf312", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/34f217cc71e4201f349c8b55fc2231e4c7bdf312", "committedDate": "2020-06-09T07:48:43Z", "message": "Fix Maven tests"}, "afterCommit": {"oid": "4315ce7b40fd2d6549394658a96c3f73173c305a", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/4315ce7b40fd2d6549394658a96c3f73173c305a", "committedDate": "2020-06-09T14:18:07Z", "message": "Apply requested changes\n\n- rename ExtensionsManager to ExtensionManager\n- change visibility of ConsoleMessageFormats attributes\n- rename ConsoleMessageFormat to ConsoleMessageFormats (since it's a helper)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MjEyMjUx", "url": "https://github.com/quarkusio/quarkus/pull/9787#pullrequestreview-427212251", "createdAt": "2020-06-09T14:30:33Z", "commit": {"oid": "4315ce7b40fd2d6549394658a96c3f73173c305a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDozMDozM1rOGhM-Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDozMDozM1rOGhM-Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2ODY4Nw==", "bodyText": "I'd prefer to use Collection instead. That would prevent cases where the caller has a different Collection implementation and need to convert to List to call this method", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437468687", "createdAt": "2020-06-09T14:30:33Z", "author": {"login": "gastaldi"}, "path": "independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionManager.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package io.quarkus.devtools.project.extensions;\n+\n+import io.quarkus.bootstrap.model.AppArtifactCoords;\n+import io.quarkus.bootstrap.model.AppArtifactKey;\n+import io.quarkus.dependencies.Extension;\n+import io.quarkus.devtools.project.BuildTool;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * This interface defines a high level way of managing (read/write) extensions in any QuarkusProject\n+ */\n+public interface ExtensionManager {\n+\n+    /**\n+     * @return the {@link BuildTool} of this extension manager\n+     */\n+    BuildTool getBuildTool();\n+\n+    /**\n+     * Read the build file(s) to get the list of installed extensions in this Quarkus project.\n+     *\n+     * @return The list of {@link AppArtifactCoords} installed in the project build file(s).\n+     * @throws IOException if a problem occurs while reading the project build file(s)\n+     */\n+    List<AppArtifactCoords> getInstalled() throws IOException;\n+\n+    /**\n+     * Read build file(s) to check if an extension is installed in this Quarkus project.\n+     *\n+     * @param key the {@link AppArtifactKey} of the extension to check\n+     * @return true if it's installed\n+     * @throws IOException if a problem occurs while reading the project build file(s)\n+     */\n+    default boolean isInstalled(AppArtifactKey key) throws IOException {\n+        return getInstalled().stream().anyMatch(i -> Objects.equals(i.getKey(), key));\n+    }\n+\n+    /**\n+     * Check that the Quarkus Platform bom is defined in the project.\n+     * The Quarkus Platform Bom role is to define version to use for Quarkus extensions.\n+     *\n+     * @return true if it's defined, false else\n+     * @throws IOException if a problem occurs while reading the project build file(s)\n+     */\n+    boolean hasQuarkusPlatformBom() throws IOException;\n+\n+    /**\n+     * This is going to install/add all the specified extensions to the project build file(s).\n+     *\n+     * <pre>\n+     *   - If the project Quarkus platform bom is not defined, an {@link IllegalStateException} will be thrown\n+     *   - Extensions which are already installed will ALWAYS be skipped whatever the specified version\n+     *   - The provided version will be used wasn't already installed\n+     * </pre>\n+     *\n+     * @param coords the list of {@link AppArtifactCoords} for the extensions to install\n+     * @return the {@link InstallResult}\n+     * @throws IOException if a problem occurs while reading/writing the project build file(s)\n+     */\n+    InstallResult install(List<AppArtifactCoords> coords) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4315ce7b40fd2d6549394658a96c3f73173c305a"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MjEyNjMy", "url": "https://github.com/quarkusio/quarkus/pull/9787#pullrequestreview-427212632", "createdAt": "2020-06-09T14:30:54Z", "commit": {"oid": "4315ce7b40fd2d6549394658a96c3f73173c305a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDozMDo1NVrOGhM_PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDozMDo1NVrOGhM_PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2ODk4OA==", "bodyText": "Same as above", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437468988", "createdAt": "2020-06-09T14:30:55Z", "author": {"login": "gastaldi"}, "path": "independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionManager.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package io.quarkus.devtools.project.extensions;\n+\n+import io.quarkus.bootstrap.model.AppArtifactCoords;\n+import io.quarkus.bootstrap.model.AppArtifactKey;\n+import io.quarkus.dependencies.Extension;\n+import io.quarkus.devtools.project.BuildTool;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * This interface defines a high level way of managing (read/write) extensions in any QuarkusProject\n+ */\n+public interface ExtensionManager {\n+\n+    /**\n+     * @return the {@link BuildTool} of this extension manager\n+     */\n+    BuildTool getBuildTool();\n+\n+    /**\n+     * Read the build file(s) to get the list of installed extensions in this Quarkus project.\n+     *\n+     * @return The list of {@link AppArtifactCoords} installed in the project build file(s).\n+     * @throws IOException if a problem occurs while reading the project build file(s)\n+     */\n+    List<AppArtifactCoords> getInstalled() throws IOException;\n+\n+    /**\n+     * Read build file(s) to check if an extension is installed in this Quarkus project.\n+     *\n+     * @param key the {@link AppArtifactKey} of the extension to check\n+     * @return true if it's installed\n+     * @throws IOException if a problem occurs while reading the project build file(s)\n+     */\n+    default boolean isInstalled(AppArtifactKey key) throws IOException {\n+        return getInstalled().stream().anyMatch(i -> Objects.equals(i.getKey(), key));\n+    }\n+\n+    /**\n+     * Check that the Quarkus Platform bom is defined in the project.\n+     * The Quarkus Platform Bom role is to define version to use for Quarkus extensions.\n+     *\n+     * @return true if it's defined, false else\n+     * @throws IOException if a problem occurs while reading the project build file(s)\n+     */\n+    boolean hasQuarkusPlatformBom() throws IOException;\n+\n+    /**\n+     * This is going to install/add all the specified extensions to the project build file(s).\n+     *\n+     * <pre>\n+     *   - If the project Quarkus platform bom is not defined, an {@link IllegalStateException} will be thrown\n+     *   - Extensions which are already installed will ALWAYS be skipped whatever the specified version\n+     *   - The provided version will be used wasn't already installed\n+     * </pre>\n+     *\n+     * @param coords the list of {@link AppArtifactCoords} for the extensions to install\n+     * @return the {@link InstallResult}\n+     * @throws IOException if a problem occurs while reading/writing the project build file(s)\n+     */\n+    InstallResult install(List<AppArtifactCoords> coords) throws IOException;\n+\n+    /**\n+     * This is going to uninstall/remove all the specified extensions from the project build file(s).\n+     *\n+     * This is ignoring the {@link Extension} version\n+     *\n+     * @param keys the set of {@link AppArtifactKey} for the extensions to uninstall\n+     * @return the {@link InstallResult}\n+     * @throws IOException if a problem occurs while reading/writing the project build file(s)\n+     */\n+    UninstallResult uninstall(Set<AppArtifactKey> keys) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4315ce7b40fd2d6549394658a96c3f73173c305a"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MjEzMzA5", "url": "https://github.com/quarkusio/quarkus/pull/9787#pullrequestreview-427213309", "createdAt": "2020-06-09T14:31:35Z", "commit": {"oid": "4315ce7b40fd2d6549394658a96c3f73173c305a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDozMTozNVrOGhNBLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDozMTozNVrOGhNBLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2OTQ4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                List<AppArtifactCoords> getInstalled() throws IOException;\n          \n          \n            \n                Collection<AppArtifactCoords> getInstalled() throws IOException;", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437469487", "createdAt": "2020-06-09T14:31:35Z", "author": {"login": "gastaldi"}, "path": "independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionManager.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package io.quarkus.devtools.project.extensions;\n+\n+import io.quarkus.bootstrap.model.AppArtifactCoords;\n+import io.quarkus.bootstrap.model.AppArtifactKey;\n+import io.quarkus.dependencies.Extension;\n+import io.quarkus.devtools.project.BuildTool;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * This interface defines a high level way of managing (read/write) extensions in any QuarkusProject\n+ */\n+public interface ExtensionManager {\n+\n+    /**\n+     * @return the {@link BuildTool} of this extension manager\n+     */\n+    BuildTool getBuildTool();\n+\n+    /**\n+     * Read the build file(s) to get the list of installed extensions in this Quarkus project.\n+     *\n+     * @return The list of {@link AppArtifactCoords} installed in the project build file(s).\n+     * @throws IOException if a problem occurs while reading the project build file(s)\n+     */\n+    List<AppArtifactCoords> getInstalled() throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4315ce7b40fd2d6549394658a96c3f73173c305a"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MjI3MTE1", "url": "https://github.com/quarkusio/quarkus/pull/9787#pullrequestreview-427227115", "createdAt": "2020-06-09T14:44:54Z", "commit": {"oid": "4315ce7b40fd2d6549394658a96c3f73173c305a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDo0NDo1NFrOGhNp2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDo0NDo1NFrOGhNp2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ3OTg5Ng==", "bodyText": "Instead of returning how many extensions were installed/uninstalled wouldn't be better to return which extensions were installed/uninstalled (the collection size would return the total of installed/uninstalled items)?", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437479896", "createdAt": "2020-06-09T14:44:54Z", "author": {"login": "gastaldi"}, "path": "independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionManager.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package io.quarkus.devtools.project.extensions;\n+\n+import io.quarkus.bootstrap.model.AppArtifactCoords;\n+import io.quarkus.bootstrap.model.AppArtifactKey;\n+import io.quarkus.dependencies.Extension;\n+import io.quarkus.devtools.project.BuildTool;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * This interface defines a high level way of managing (read/write) extensions in any QuarkusProject\n+ */\n+public interface ExtensionManager {\n+\n+    /**\n+     * @return the {@link BuildTool} of this extension manager\n+     */\n+    BuildTool getBuildTool();\n+\n+    /**\n+     * Read the build file(s) to get the list of installed extensions in this Quarkus project.\n+     *\n+     * @return The list of {@link AppArtifactCoords} installed in the project build file(s).\n+     * @throws IOException if a problem occurs while reading the project build file(s)\n+     */\n+    List<AppArtifactCoords> getInstalled() throws IOException;\n+\n+    /**\n+     * Read build file(s) to check if an extension is installed in this Quarkus project.\n+     *\n+     * @param key the {@link AppArtifactKey} of the extension to check\n+     * @return true if it's installed\n+     * @throws IOException if a problem occurs while reading the project build file(s)\n+     */\n+    default boolean isInstalled(AppArtifactKey key) throws IOException {\n+        return getInstalled().stream().anyMatch(i -> Objects.equals(i.getKey(), key));\n+    }\n+\n+    /**\n+     * Check that the Quarkus Platform bom is defined in the project.\n+     * The Quarkus Platform Bom role is to define version to use for Quarkus extensions.\n+     *\n+     * @return true if it's defined, false else\n+     * @throws IOException if a problem occurs while reading the project build file(s)\n+     */\n+    boolean hasQuarkusPlatformBom() throws IOException;\n+\n+    /**\n+     * This is going to install/add all the specified extensions to the project build file(s).\n+     *\n+     * <pre>\n+     *   - If the project Quarkus platform bom is not defined, an {@link IllegalStateException} will be thrown\n+     *   - Extensions which are already installed will ALWAYS be skipped whatever the specified version\n+     *   - The provided version will be used wasn't already installed\n+     * </pre>\n+     *\n+     * @param coords the list of {@link AppArtifactCoords} for the extensions to install\n+     * @return the {@link InstallResult}\n+     * @throws IOException if a problem occurs while reading/writing the project build file(s)\n+     */\n+    InstallResult install(List<AppArtifactCoords> coords) throws IOException;\n+\n+    /**\n+     * This is going to uninstall/remove all the specified extensions from the project build file(s).\n+     *\n+     * This is ignoring the {@link Extension} version\n+     *\n+     * @param keys the set of {@link AppArtifactKey} for the extensions to uninstall\n+     * @return the {@link InstallResult}\n+     * @throws IOException if a problem occurs while reading/writing the project build file(s)\n+     */\n+    UninstallResult uninstall(Set<AppArtifactKey> keys) throws IOException;\n+\n+    class InstallResult {\n+        private final int installed;\n+\n+        public InstallResult(int installed) {\n+            this.installed = installed;\n+        }\n+\n+        public int getInstalled() {\n+            return installed;\n+        }\n+\n+        public boolean isSourceUpdated() {\n+            return installed > 0;\n+        }\n+    }\n+\n+    class UninstallResult {\n+        private final int uninstalled;\n+\n+        public UninstallResult(int uninstalled) {\n+            this.uninstalled = uninstalled;\n+        }\n+\n+        public int getUninstalled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4315ce7b40fd2d6549394658a96c3f73173c305a"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MjQwMjY2", "url": "https://github.com/quarkusio/quarkus/pull/9787#pullrequestreview-427240266", "createdAt": "2020-06-09T14:57:02Z", "commit": {"oid": "4315ce7b40fd2d6549394658a96c3f73173c305a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MjY1MDc3", "url": "https://github.com/quarkusio/quarkus/pull/9787#pullrequestreview-427265077", "createdAt": "2020-06-09T15:11:39Z", "commit": {"oid": "4315ce7b40fd2d6549394658a96c3f73173c305a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNToxMTozOVrOGhO_wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNToxMTozOVrOGhO_wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUwMTg5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String EXTENSIONS_MANAGER = ToolsUtils.dotJoin(ToolsConstants.QUARKUS, NAME, \"extensions-manager\");\n          \n          \n            \n                public static final String EXTENSION_MANAGER = ToolsUtils.dotJoin(ToolsConstants.QUARKUS, NAME, \"extension-manager\");", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437501890", "createdAt": "2020-06-09T15:11:39Z", "author": {"login": "gastaldi"}, "path": "independent-projects/tools/common/src/main/java/io/quarkus/devtools/commands/AddExtensions.java", "diffHunk": "@@ -13,19 +20,26 @@\n     public static final String NAME = \"add-extensions\";\n     public static final String EXTENSIONS = ToolsUtils.dotJoin(ToolsConstants.QUARKUS, NAME, \"extensions\");\n     public static final String OUTCOME_UPDATED = ToolsUtils.dotJoin(ToolsConstants.QUARKUS, NAME, \"outcome\", \"updated\");\n+    public static final String EXTENSIONS_MANAGER = ToolsUtils.dotJoin(ToolsConstants.QUARKUS, NAME, \"extensions-manager\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4315ce7b40fd2d6549394658a96c3f73173c305a"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MjY3MjE2", "url": "https://github.com/quarkusio/quarkus/pull/9787#pullrequestreview-427267216", "createdAt": "2020-06-09T15:13:47Z", "commit": {"oid": "4315ce7b40fd2d6549394658a96c3f73173c305a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNToxMzo0N1rOGhPLKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNToxMzo0N1rOGhPLKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUwNDgxMQ==", "bodyText": "Don't expose this method, because the Registry won't be treated as a List of Extensions in the future", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437504811", "createdAt": "2020-06-09T15:13:47Z", "author": {"login": "gastaldi"}, "path": "independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/buildfile/BuildFile.java", "diffHunk": "@@ -0,0 +1,158 @@\n+package io.quarkus.devtools.project.buildfile;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static io.quarkus.devtools.project.extensions.Extensions.findInRegistry;\n+import static io.quarkus.devtools.project.extensions.Extensions.toCoords;\n+import static io.quarkus.devtools.project.extensions.Extensions.toKey;\n+import static java.util.stream.Collectors.toList;\n+\n+import io.quarkus.bootstrap.model.AppArtifactCoords;\n+import io.quarkus.bootstrap.model.AppArtifactKey;\n+import io.quarkus.dependencies.Extension;\n+import io.quarkus.devtools.project.extensions.ExtensionManager;\n+import io.quarkus.devtools.project.extensions.Extensions;\n+import io.quarkus.platform.descriptor.QuarkusPlatformDescriptor;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.atomic.LongAdder;\n+import java.util.stream.Collectors;\n+import org.apache.maven.model.Dependency;\n+\n+public abstract class BuildFile<T> implements ExtensionManager {\n+\n+    private final Path projectFolderPath;\n+    private final QuarkusPlatformDescriptor platformDescriptor;\n+\n+    public BuildFile(final Path projectFolderPath, final QuarkusPlatformDescriptor platformDescriptor) {\n+        this.projectFolderPath = checkNotNull(projectFolderPath, \"projectPath is required\");\n+        this.platformDescriptor = checkNotNull(platformDescriptor, \"platformDescriptor is required\");\n+    }\n+\n+    @Override\n+    public final boolean hasQuarkusPlatformBom() throws IOException {\n+        return containsBOM(platformDescriptor.getBomGroupId(), platformDescriptor.getBomArtifactId());\n+    }\n+\n+    @Override\n+    public final InstallResult install(List<AppArtifactCoords> coords) throws IOException {\n+        if (!hasQuarkusPlatformBom()) {\n+            throw new IllegalStateException(\"The Quarkus BOM is required to add a Quarkus extension\");\n+        }\n+        this.refreshData();\n+        final Set<AppArtifactKey> existingKeys = getDependenciesKeys();\n+        final LongAdder counter = new LongAdder();\n+        coords.stream()\n+                .filter(a -> !existingKeys.contains(a.getKey()))\n+                .forEach(e -> {\n+                    try {\n+                        addDependencyInBuildFile(e);\n+                        counter.increment();\n+                    } catch (IOException ex) {\n+                        throw new UncheckedIOException(ex);\n+                    }\n+                });\n+        this.writeToDisk();\n+        return new InstallResult(counter.intValue());\n+    }\n+\n+    @Override\n+    public final List<AppArtifactCoords> getInstalled() throws IOException {\n+        this.refreshData();\n+        return this.getDependencies().stream()\n+                .filter(d -> this.isQuarkusExtension(toKey(d)))\n+                .map(d -> toCoords(d, extractVersion(d)))\n+                .collect(toList());\n+    }\n+\n+    @Override\n+    public final UninstallResult uninstall(Set<AppArtifactKey> keys) throws IOException {\n+        this.refreshData();\n+        final Set<AppArtifactKey> existingKeys = getDependenciesKeys();\n+        final LongAdder counter = new LongAdder();\n+        keys.stream()\n+                .filter(existingKeys::contains)\n+                .forEach(k -> {\n+                    try {\n+                        removeDependencyFromBuildFile(k);\n+                        counter.increment();\n+                    } catch (IOException ex) {\n+                        throw new UncheckedIOException(ex);\n+                    }\n+                });\n+        this.writeToDisk();\n+        return new UninstallResult(counter.intValue());\n+    }\n+\n+    protected abstract void addDependencyInBuildFile(AppArtifactCoords coords) throws IOException;\n+\n+    protected abstract void removeDependencyFromBuildFile(AppArtifactKey key) throws IOException;\n+\n+    protected abstract List<Dependency> getDependencies() throws IOException;\n+\n+    protected abstract void writeToDisk() throws IOException;\n+\n+    protected abstract String getProperty(String propertyName) throws IOException;\n+\n+    protected abstract boolean containsBOM(String groupId, String artifactId) throws IOException;\n+\n+    protected abstract void refreshData();\n+\n+    protected Path getProjectFolderPath() {\n+        return projectFolderPath;\n+    }\n+\n+    protected boolean hasProjectFile(final String fileName) throws IOException {\n+        final Path filePath = projectFolderPath.resolve(fileName);\n+        return Files.exists(filePath);\n+    }\n+\n+    protected byte[] readProjectFile(final String fileName) throws IOException {\n+        final Path filePath = projectFolderPath.resolve(fileName);\n+        return Files.readAllBytes(filePath);\n+    }\n+\n+    protected void writeToProjectFile(final String fileName, final byte[] content) throws IOException {\n+        Files.write(projectFolderPath.resolve(fileName), content);\n+    }\n+\n+    private boolean isQuarkusExtension(final AppArtifactKey key) {\n+        // This will not always be true as the platform descriptor does not contain the list of all available extensions\n+        return isDefinedInRegistry(platformDescriptor.getExtensions(), key);\n+    }\n+\n+    private Set<AppArtifactKey> getDependenciesKeys() throws IOException {\n+        return getDependencies().stream().map(Extensions::toKey).collect(Collectors.toSet());\n+    }\n+\n+    private String extractVersion(final Dependency d) {\n+        String version = d != null ? d.getVersion() : null;\n+        if (version != null && version.startsWith(\"$\")) {\n+            String value = null;\n+            try {\n+                value = (String) this.getProperty(propertyName(version));\n+                if (value != null) {\n+                    return value;\n+                }\n+            } catch (IOException e) {\n+                // ignore this error.\n+            }\n+        }\n+        if (version != null) {\n+            return version;\n+        }\n+        return null;\n+    }\n+\n+    private String propertyName(final String variable) {\n+        return variable.substring(2, variable.length() - 1);\n+    }\n+\n+    public static boolean isDefinedInRegistry(List<Extension> registry, final AppArtifactKey key) {\n+        return findInRegistry(registry, key).isPresent();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4315ce7b40fd2d6549394658a96c3f73173c305a"}, "originalPosition": 156}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MjgwNDY1", "url": "https://github.com/quarkusio/quarkus/pull/9787#pullrequestreview-427280465", "createdAt": "2020-06-09T15:27:07Z", "commit": {"oid": "4315ce7b40fd2d6549394658a96c3f73173c305a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNToyNzowOFrOGhQIxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNToyNzowOFrOGhQIxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyMDU4Mg==", "bodyText": "Nice!", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437520582", "createdAt": "2020-06-09T15:27:08Z", "author": {"login": "gastaldi"}, "path": "independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/codegen/writer/FileProjectWriter.java", "diffHunk": "@@ -19,21 +19,21 @@ public FileProjectWriter(final File file) {\n     }\n \n     @Override\n-    public boolean init() {\n-        if (root.exists() && !root.isDirectory()) {\n-            System.out.println(\"Project root needs to either not exist or be a directory\");\n-            return false;\n-        } else if (!root.exists()) {\n+    public void init() throws IOException {\n+        if (!root.exists()) {\n             boolean mkdirStatus = root.mkdirs();\n             if (!mkdirStatus) {\n-                System.out.println(\"Failed to create root directory\");\n-                return false;\n+                throw new IOException(\"Failed to create root directory\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4315ce7b40fd2d6549394658a96c3f73173c305a"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MjgxMjQy", "url": "https://github.com/quarkusio/quarkus/pull/9787#pullrequestreview-427281242", "createdAt": "2020-06-09T15:27:57Z", "commit": {"oid": "4315ce7b40fd2d6549394658a96c3f73173c305a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNToyNzo1N1rOGhQLCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNToyNzo1N1rOGhQLCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyMTE2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new IOException(\"Project root needs to either not exist or be a directory\");\n          \n          \n            \n                        throw new IOException(\"Project root needs to be a directory\");", "url": "https://github.com/quarkusio/quarkus/pull/9787#discussion_r437521162", "createdAt": "2020-06-09T15:27:57Z", "author": {"login": "gastaldi"}, "path": "independent-projects/tools/common/src/main/java/io/quarkus/devtools/project/codegen/writer/FileProjectWriter.java", "diffHunk": "@@ -19,21 +19,21 @@ public FileProjectWriter(final File file) {\n     }\n \n     @Override\n-    public boolean init() {\n-        if (root.exists() && !root.isDirectory()) {\n-            System.out.println(\"Project root needs to either not exist or be a directory\");\n-            return false;\n-        } else if (!root.exists()) {\n+    public void init() throws IOException {\n+        if (!root.exists()) {\n             boolean mkdirStatus = root.mkdirs();\n             if (!mkdirStatus) {\n-                System.out.println(\"Failed to create root directory\");\n-                return false;\n+                throw new IOException(\"Failed to create root directory\");\n             }\n+            return;\n+        }\n+        if (!root.isDirectory()) {\n+            throw new IOException(\"Project root needs to either not exist or be a directory\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4315ce7b40fd2d6549394658a96c3f73173c305a"}, "originalPosition": 29}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "03e60831781bfd756c895ac706a720093887f096", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/03e60831781bfd756c895ac706a720093887f096", "committedDate": "2020-06-09T16:48:42Z", "message": "Apply new requested changes"}, "afterCommit": {"oid": "f2684d0ff3221ba63625a7c98b1480d319c499b4", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/f2684d0ff3221ba63625a7c98b1480d319c499b4", "committedDate": "2020-06-09T16:53:07Z", "message": "Apply new requested changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f2684d0ff3221ba63625a7c98b1480d319c499b4", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/f2684d0ff3221ba63625a7c98b1480d319c499b4", "committedDate": "2020-06-09T16:53:07Z", "message": "Apply new requested changes"}, "afterCommit": {"oid": "fb816155adf976ff88f37a58f2ec4a84351fb776", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/fb816155adf976ff88f37a58f2ec4a84351fb776", "committedDate": "2020-06-09T16:54:14Z", "message": "Apply new requested changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "244b9e963e360aa282f38ad82a7a3f6fb2add89d", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/244b9e963e360aa282f38ad82a7a3f6fb2add89d", "committedDate": "2020-06-09T16:54:45Z", "message": "Change exception message\n\nCo-authored-by: George Gastaldi <gegastaldi@gmail.com>"}, "afterCommit": {"oid": "036f5cda3efce894fcd6c413040b7b125005bf0d", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/036f5cda3efce894fcd6c413040b7b125005bf0d", "committedDate": "2020-06-09T17:06:00Z", "message": "Refactor and Introduce ExtensionsManager in CodeGen\n\nThis is part of #8178\n\n- Improved packages names and content\n- Improved general readability and consistency\n- Added ExtensionManager to define a high level way of managing (read/write) extensions in any QuarkusProject\n- Removed most unsafe Gradle operations which were outside of the Gradle plugin (we need to figure out a way to improve the \"generic\" gradle support to make it compatible again..)\n- Removed existing project support with the create command (throws an error) -> #9875\n- Removed compatibility with project without the Quarkus platform bom defined\n- Remove SetupIT which mostly duplicate CreateProjectMojoIT"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NDgyNTUy", "url": "https://github.com/quarkusio/quarkus/pull/9787#pullrequestreview-427482552", "createdAt": "2020-06-09T19:39:54Z", "commit": {"oid": "036f5cda3efce894fcd6c413040b7b125005bf0d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "036f5cda3efce894fcd6c413040b7b125005bf0d", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/036f5cda3efce894fcd6c413040b7b125005bf0d", "committedDate": "2020-06-09T17:06:00Z", "message": "Refactor and Introduce ExtensionsManager in CodeGen\n\nThis is part of #8178\n\n- Improved packages names and content\n- Improved general readability and consistency\n- Added ExtensionManager to define a high level way of managing (read/write) extensions in any QuarkusProject\n- Removed most unsafe Gradle operations which were outside of the Gradle plugin (we need to figure out a way to improve the \"generic\" gradle support to make it compatible again..)\n- Removed existing project support with the create command (throws an error) -> #9875\n- Removed compatibility with project without the Quarkus platform bom defined\n- Remove SetupIT which mostly duplicate CreateProjectMojoIT"}, "afterCommit": {"oid": "f9787182519221d0243dea1ed73c02f2eafa7b14", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/f9787182519221d0243dea1ed73c02f2eafa7b14", "committedDate": "2020-06-09T21:08:30Z", "message": "Refactor and Introduce ExtensionsManager in CodeGen\n\nThis is part of #8178\n\n- Improved packages names and content\n- Improved general readability and consistency\n- Added ExtensionManager to define a high level way of managing (read/write) extensions in any QuarkusProject\n- Removed most unsafe Gradle operations which were outside of the Gradle plugin (we need to figure out a way to improve the \"generic\" gradle support to make it compatible again..)\n- Removed existing project support with the create command (throws an error) -> #9875\n- Removed compatibility with project without the Quarkus platform bom defined\n- Remove SetupIT which mostly duplicate CreateProjectMojoIT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97f9981d7091c6355121c33b9aa333d9b81a4e12", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/97f9981d7091c6355121c33b9aa333d9b81a4e12", "committedDate": "2020-06-10T08:43:28Z", "message": "Refactor and Introduce ExtensionsManager in CodeGen\n\nThis is part of #8178\n\n- Improved packages names and content\n- Improved general readability and consistency\n- Added ExtensionManager to define a high level way of managing (read/write) extensions in any QuarkusProject\n- Removed most unsafe Gradle operations which were outside of the Gradle plugin (we need to figure out a way to improve the \"generic\" gradle support to make it compatible again..)\n- Removed existing project support with the create command (throws an error) -> #9875\n- Removed compatibility with project without the Quarkus platform bom defined\n- Remove SetupIT which mostly duplicate CreateProjectMojoIT"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f9787182519221d0243dea1ed73c02f2eafa7b14", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/f9787182519221d0243dea1ed73c02f2eafa7b14", "committedDate": "2020-06-09T21:08:30Z", "message": "Refactor and Introduce ExtensionsManager in CodeGen\n\nThis is part of #8178\n\n- Improved packages names and content\n- Improved general readability and consistency\n- Added ExtensionManager to define a high level way of managing (read/write) extensions in any QuarkusProject\n- Removed most unsafe Gradle operations which were outside of the Gradle plugin (we need to figure out a way to improve the \"generic\" gradle support to make it compatible again..)\n- Removed existing project support with the create command (throws an error) -> #9875\n- Removed compatibility with project without the Quarkus platform bom defined\n- Remove SetupIT which mostly duplicate CreateProjectMojoIT"}, "afterCommit": {"oid": "97f9981d7091c6355121c33b9aa333d9b81a4e12", "author": {"user": {"login": "ia3andy", "name": "Andy Damevin"}}, "url": "https://github.com/quarkusio/quarkus/commit/97f9981d7091c6355121c33b9aa333d9b81a4e12", "committedDate": "2020-06-10T08:43:28Z", "message": "Refactor and Introduce ExtensionsManager in CodeGen\n\nThis is part of #8178\n\n- Improved packages names and content\n- Improved general readability and consistency\n- Added ExtensionManager to define a high level way of managing (read/write) extensions in any QuarkusProject\n- Removed most unsafe Gradle operations which were outside of the Gradle plugin (we need to figure out a way to improve the \"generic\" gradle support to make it compatible again..)\n- Removed existing project support with the create command (throws an error) -> #9875\n- Removed compatibility with project without the Quarkus platform bom defined\n- Remove SetupIT which mostly duplicate CreateProjectMojoIT"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3OTE4NTU0", "url": "https://github.com/quarkusio/quarkus/pull/9787#pullrequestreview-427918554", "createdAt": "2020-06-10T10:23:45Z", "commit": {"oid": "97f9981d7091c6355121c33b9aa333d9b81a4e12"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3OTg5Nzc1", "url": "https://github.com/quarkusio/quarkus/pull/9787#pullrequestreview-427989775", "createdAt": "2020-06-10T12:13:33Z", "commit": {"oid": "97f9981d7091c6355121c33b9aa333d9b81a4e12"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4450, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}