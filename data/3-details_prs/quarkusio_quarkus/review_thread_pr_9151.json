{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0NjI0OTk0", "number": 9151, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMjo1MzowNFrOD6O_PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoyNzo0NFrOD6P30w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzg5NTY0OnYy", "diffSide": "RIGHT", "path": "extensions/mailer/runtime/src/main/java/io/quarkus/mailer/runtime/MailClientProducer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMjo1MzowNFrOGR9EVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMjo1OTo1OVrOGR9WVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ3OTUwOQ==", "bodyText": "Let's drop the lambdas while we're at it?", "url": "https://github.com/quarkusio/quarkus/pull/9151#discussion_r421479509", "createdAt": "2020-05-07T12:53:04Z", "author": {"login": "gsmet"}, "path": "extensions/mailer/runtime/src/main/java/io/quarkus/mailer/runtime/MailClientProducer.java", "diffHunk": "@@ -16,52 +20,74 @@\n \n     private static final Logger LOGGER = Logger.getLogger(MailClientProducer.class);\n \n-    private io.vertx.axle.ext.mail.MailClient axleMailClient;\n-    private io.vertx.reactivex.ext.mail.MailClient rxMailClient;\n-    private io.vertx.mutiny.ext.mail.MailClient mutinyClient;\n-    private MailClient client;\n+    private final io.vertx.mutiny.ext.mail.MailClient mutinyClient;\n+    private final MailClient client;\n \n-    synchronized void initialize(MailClient client) {\n-        this.client = client;\n-        this.mutinyClient = io.vertx.mutiny.ext.mail.MailClient.newInstance(client);\n+    public MailClientProducer(Vertx vertx, MailConfig config) {\n+        this.client = mailClient(vertx, config);\n+        this.mutinyClient = io.vertx.mutiny.ext.mail.MailClient.newInstance(this.client);\n     }\n \n     @Singleton\n     @Produces\n-    public synchronized MailClient mailClient() {\n+    public MailClient mailClient() {\n         return client;\n     }\n \n     @Singleton\n     @Produces\n-    public synchronized io.vertx.mutiny.ext.mail.MailClient mutinyClient() {\n+    public io.vertx.mutiny.ext.mail.MailClient mutinyClient() {\n         return mutinyClient;\n     }\n \n     @Singleton\n     @Produces\n     @Deprecated\n-    public synchronized io.vertx.axle.ext.mail.MailClient axleMailClient() {\n-        if (axleMailClient == null) {\n-            LOGGER.warn(\n-                    \"`io.vertx.axle.ext.mail.MailClient` is deprecated and will be removed in a future version - it is \"\n-                            + \"recommended to switch to `io.vertx.mutiny.ext.mail.MailClient`\");\n-            axleMailClient = io.vertx.axle.ext.mail.MailClient.newInstance(client);\n-        }\n-        return axleMailClient;\n+    public io.vertx.axle.ext.mail.MailClient axleMailClient() {\n+        LOGGER.warn(\n+                \"`io.vertx.axle.ext.mail.MailClient` is deprecated and will be removed in a future version - it is \"\n+                        + \"recommended to switch to `io.vertx.mutiny.ext.mail.MailClient`\");\n+        return io.vertx.axle.ext.mail.MailClient.newInstance(client);\n     }\n \n     @Singleton\n     @Produces\n     @Deprecated\n-    public synchronized io.vertx.reactivex.ext.mail.MailClient rxMailClient() {\n-        if (rxMailClient == null) {\n-            LOGGER.warn(\n-                    \"`io.vertx.reactivex.ext.mail.MailClient` is deprecated and will be removed in a future version - it is \"\n-                            + \"recommended to switch to `io.vertx.mutiny.ext.mail.MailClient`\");\n-            rxMailClient = io.vertx.reactivex.ext.mail.MailClient.newInstance(client);\n-        }\n-        return rxMailClient;\n+    public io.vertx.reactivex.ext.mail.MailClient rxMailClient() {\n+        LOGGER.warn(\n+                \"`io.vertx.reactivex.ext.mail.MailClient` is deprecated and will be removed in a future version - it is \"\n+                        + \"recommended to switch to `io.vertx.mutiny.ext.mail.MailClient`\");\n+        return io.vertx.reactivex.ext.mail.MailClient.newInstance(client);\n+    }\n+\n+    @PreDestroy\n+    public void stop() {\n+        client.close();\n+    }\n+\n+    private MailClient mailClient(Vertx vertx, MailConfig config) {\n+        io.vertx.ext.mail.MailConfig cfg = toVertxMailConfig(config);\n+        return MailClient.createShared(vertx, cfg);\n+    }\n+\n+    private io.vertx.ext.mail.MailConfig toVertxMailConfig(MailConfig config) {\n+        io.vertx.ext.mail.MailConfig cfg = new io.vertx.ext.mail.MailConfig();\n+        config.authMethods.ifPresent(cfg::setAuthMethods);\n+        cfg.setDisableEsmtp(config.disableEsmtp);\n+        cfg.setHostname(config.host);\n+        cfg.setKeepAlive(config.keepAlive);\n+        config.keyStore.ifPresent(cfg::setKeyStore);\n+        config.keyStorePassword.ifPresent(cfg::setKeyStorePassword);\n+        config.login.ifPresent(s -> cfg.setLogin(LoginOption.valueOf(s.toUpperCase())));\n+        config.maxPoolSize.ifPresent(cfg::setMaxPoolSize);\n+        config.ownHostName.ifPresent(cfg::setOwnHostname);\n+        config.username.ifPresent(cfg::setUsername);\n+        config.password.ifPresent(cfg::setPassword);\n+        config.port.ifPresent(cfg::setPort);\n+        cfg.setSsl(config.ssl);\n+        config.startTLS.ifPresent(s -> cfg.setStarttls(StartTLSOptions.valueOf(s.toUpperCase())));\n+        cfg.setTrustAll(config.trustAll);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fca03aaf9d8a60f2d6a668d3c3c49790bbd8c05"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4NDExOA==", "bodyText": "Sure, I'll do that once I get back to this PR :)", "url": "https://github.com/quarkusio/quarkus/pull/9151#discussion_r421484118", "createdAt": "2020-05-07T12:59:59Z", "author": {"login": "geoand"}, "path": "extensions/mailer/runtime/src/main/java/io/quarkus/mailer/runtime/MailClientProducer.java", "diffHunk": "@@ -16,52 +20,74 @@\n \n     private static final Logger LOGGER = Logger.getLogger(MailClientProducer.class);\n \n-    private io.vertx.axle.ext.mail.MailClient axleMailClient;\n-    private io.vertx.reactivex.ext.mail.MailClient rxMailClient;\n-    private io.vertx.mutiny.ext.mail.MailClient mutinyClient;\n-    private MailClient client;\n+    private final io.vertx.mutiny.ext.mail.MailClient mutinyClient;\n+    private final MailClient client;\n \n-    synchronized void initialize(MailClient client) {\n-        this.client = client;\n-        this.mutinyClient = io.vertx.mutiny.ext.mail.MailClient.newInstance(client);\n+    public MailClientProducer(Vertx vertx, MailConfig config) {\n+        this.client = mailClient(vertx, config);\n+        this.mutinyClient = io.vertx.mutiny.ext.mail.MailClient.newInstance(this.client);\n     }\n \n     @Singleton\n     @Produces\n-    public synchronized MailClient mailClient() {\n+    public MailClient mailClient() {\n         return client;\n     }\n \n     @Singleton\n     @Produces\n-    public synchronized io.vertx.mutiny.ext.mail.MailClient mutinyClient() {\n+    public io.vertx.mutiny.ext.mail.MailClient mutinyClient() {\n         return mutinyClient;\n     }\n \n     @Singleton\n     @Produces\n     @Deprecated\n-    public synchronized io.vertx.axle.ext.mail.MailClient axleMailClient() {\n-        if (axleMailClient == null) {\n-            LOGGER.warn(\n-                    \"`io.vertx.axle.ext.mail.MailClient` is deprecated and will be removed in a future version - it is \"\n-                            + \"recommended to switch to `io.vertx.mutiny.ext.mail.MailClient`\");\n-            axleMailClient = io.vertx.axle.ext.mail.MailClient.newInstance(client);\n-        }\n-        return axleMailClient;\n+    public io.vertx.axle.ext.mail.MailClient axleMailClient() {\n+        LOGGER.warn(\n+                \"`io.vertx.axle.ext.mail.MailClient` is deprecated and will be removed in a future version - it is \"\n+                        + \"recommended to switch to `io.vertx.mutiny.ext.mail.MailClient`\");\n+        return io.vertx.axle.ext.mail.MailClient.newInstance(client);\n     }\n \n     @Singleton\n     @Produces\n     @Deprecated\n-    public synchronized io.vertx.reactivex.ext.mail.MailClient rxMailClient() {\n-        if (rxMailClient == null) {\n-            LOGGER.warn(\n-                    \"`io.vertx.reactivex.ext.mail.MailClient` is deprecated and will be removed in a future version - it is \"\n-                            + \"recommended to switch to `io.vertx.mutiny.ext.mail.MailClient`\");\n-            rxMailClient = io.vertx.reactivex.ext.mail.MailClient.newInstance(client);\n-        }\n-        return rxMailClient;\n+    public io.vertx.reactivex.ext.mail.MailClient rxMailClient() {\n+        LOGGER.warn(\n+                \"`io.vertx.reactivex.ext.mail.MailClient` is deprecated and will be removed in a future version - it is \"\n+                        + \"recommended to switch to `io.vertx.mutiny.ext.mail.MailClient`\");\n+        return io.vertx.reactivex.ext.mail.MailClient.newInstance(client);\n+    }\n+\n+    @PreDestroy\n+    public void stop() {\n+        client.close();\n+    }\n+\n+    private MailClient mailClient(Vertx vertx, MailConfig config) {\n+        io.vertx.ext.mail.MailConfig cfg = toVertxMailConfig(config);\n+        return MailClient.createShared(vertx, cfg);\n+    }\n+\n+    private io.vertx.ext.mail.MailConfig toVertxMailConfig(MailConfig config) {\n+        io.vertx.ext.mail.MailConfig cfg = new io.vertx.ext.mail.MailConfig();\n+        config.authMethods.ifPresent(cfg::setAuthMethods);\n+        cfg.setDisableEsmtp(config.disableEsmtp);\n+        cfg.setHostname(config.host);\n+        cfg.setKeepAlive(config.keepAlive);\n+        config.keyStore.ifPresent(cfg::setKeyStore);\n+        config.keyStorePassword.ifPresent(cfg::setKeyStorePassword);\n+        config.login.ifPresent(s -> cfg.setLogin(LoginOption.valueOf(s.toUpperCase())));\n+        config.maxPoolSize.ifPresent(cfg::setMaxPoolSize);\n+        config.ownHostName.ifPresent(cfg::setOwnHostname);\n+        config.username.ifPresent(cfg::setUsername);\n+        config.password.ifPresent(cfg::setPassword);\n+        config.port.ifPresent(cfg::setPort);\n+        cfg.setSsl(config.ssl);\n+        config.startTLS.ifPresent(s -> cfg.setStarttls(StartTLSOptions.valueOf(s.toUpperCase())));\n+        cfg.setTrustAll(config.trustAll);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ3OTUwOQ=="}, "originalCommit": {"oid": "8fca03aaf9d8a60f2d6a668d3c3c49790bbd8c05"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzkxMTc5OnYy", "diffSide": "RIGHT", "path": "extensions/mailer/runtime/src/main/java/io/quarkus/mailer/runtime/MailClientProducer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMjo1Njo1OFrOGR9Oeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDowODozMlrOGSAVqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4MjEwNg==", "bodyText": "So when you add the mailer extension, this is mandatory and things will fail if undefined? It's a bit different than for the other extensions.\nNot related to this patch but I wonder if we should revisit this at some point.", "url": "https://github.com/quarkusio/quarkus/pull/9151#discussion_r421482106", "createdAt": "2020-05-07T12:56:58Z", "author": {"login": "gsmet"}, "path": "extensions/mailer/runtime/src/main/java/io/quarkus/mailer/runtime/MailClientProducer.java", "diffHunk": "@@ -16,52 +20,74 @@\n \n     private static final Logger LOGGER = Logger.getLogger(MailClientProducer.class);\n \n-    private io.vertx.axle.ext.mail.MailClient axleMailClient;\n-    private io.vertx.reactivex.ext.mail.MailClient rxMailClient;\n-    private io.vertx.mutiny.ext.mail.MailClient mutinyClient;\n-    private MailClient client;\n+    private final io.vertx.mutiny.ext.mail.MailClient mutinyClient;\n+    private final MailClient client;\n \n-    synchronized void initialize(MailClient client) {\n-        this.client = client;\n-        this.mutinyClient = io.vertx.mutiny.ext.mail.MailClient.newInstance(client);\n+    public MailClientProducer(Vertx vertx, MailConfig config) {\n+        this.client = mailClient(vertx, config);\n+        this.mutinyClient = io.vertx.mutiny.ext.mail.MailClient.newInstance(this.client);\n     }\n \n     @Singleton\n     @Produces\n-    public synchronized MailClient mailClient() {\n+    public MailClient mailClient() {\n         return client;\n     }\n \n     @Singleton\n     @Produces\n-    public synchronized io.vertx.mutiny.ext.mail.MailClient mutinyClient() {\n+    public io.vertx.mutiny.ext.mail.MailClient mutinyClient() {\n         return mutinyClient;\n     }\n \n     @Singleton\n     @Produces\n     @Deprecated\n-    public synchronized io.vertx.axle.ext.mail.MailClient axleMailClient() {\n-        if (axleMailClient == null) {\n-            LOGGER.warn(\n-                    \"`io.vertx.axle.ext.mail.MailClient` is deprecated and will be removed in a future version - it is \"\n-                            + \"recommended to switch to `io.vertx.mutiny.ext.mail.MailClient`\");\n-            axleMailClient = io.vertx.axle.ext.mail.MailClient.newInstance(client);\n-        }\n-        return axleMailClient;\n+    public io.vertx.axle.ext.mail.MailClient axleMailClient() {\n+        LOGGER.warn(\n+                \"`io.vertx.axle.ext.mail.MailClient` is deprecated and will be removed in a future version - it is \"\n+                        + \"recommended to switch to `io.vertx.mutiny.ext.mail.MailClient`\");\n+        return io.vertx.axle.ext.mail.MailClient.newInstance(client);\n     }\n \n     @Singleton\n     @Produces\n     @Deprecated\n-    public synchronized io.vertx.reactivex.ext.mail.MailClient rxMailClient() {\n-        if (rxMailClient == null) {\n-            LOGGER.warn(\n-                    \"`io.vertx.reactivex.ext.mail.MailClient` is deprecated and will be removed in a future version - it is \"\n-                            + \"recommended to switch to `io.vertx.mutiny.ext.mail.MailClient`\");\n-            rxMailClient = io.vertx.reactivex.ext.mail.MailClient.newInstance(client);\n-        }\n-        return rxMailClient;\n+    public io.vertx.reactivex.ext.mail.MailClient rxMailClient() {\n+        LOGGER.warn(\n+                \"`io.vertx.reactivex.ext.mail.MailClient` is deprecated and will be removed in a future version - it is \"\n+                        + \"recommended to switch to `io.vertx.mutiny.ext.mail.MailClient`\");\n+        return io.vertx.reactivex.ext.mail.MailClient.newInstance(client);\n+    }\n+\n+    @PreDestroy\n+    public void stop() {\n+        client.close();\n+    }\n+\n+    private MailClient mailClient(Vertx vertx, MailConfig config) {\n+        io.vertx.ext.mail.MailConfig cfg = toVertxMailConfig(config);\n+        return MailClient.createShared(vertx, cfg);\n+    }\n+\n+    private io.vertx.ext.mail.MailConfig toVertxMailConfig(MailConfig config) {\n+        io.vertx.ext.mail.MailConfig cfg = new io.vertx.ext.mail.MailConfig();\n+        config.authMethods.ifPresent(cfg::setAuthMethods);\n+        cfg.setDisableEsmtp(config.disableEsmtp);\n+        cfg.setHostname(config.host);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fca03aaf9d8a60f2d6a668d3c3c49790bbd8c05"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4NDM2MQ==", "bodyText": "I would prefer not touch that now TBH", "url": "https://github.com/quarkusio/quarkus/pull/9151#discussion_r421484361", "createdAt": "2020-05-07T13:00:23Z", "author": {"login": "geoand"}, "path": "extensions/mailer/runtime/src/main/java/io/quarkus/mailer/runtime/MailClientProducer.java", "diffHunk": "@@ -16,52 +20,74 @@\n \n     private static final Logger LOGGER = Logger.getLogger(MailClientProducer.class);\n \n-    private io.vertx.axle.ext.mail.MailClient axleMailClient;\n-    private io.vertx.reactivex.ext.mail.MailClient rxMailClient;\n-    private io.vertx.mutiny.ext.mail.MailClient mutinyClient;\n-    private MailClient client;\n+    private final io.vertx.mutiny.ext.mail.MailClient mutinyClient;\n+    private final MailClient client;\n \n-    synchronized void initialize(MailClient client) {\n-        this.client = client;\n-        this.mutinyClient = io.vertx.mutiny.ext.mail.MailClient.newInstance(client);\n+    public MailClientProducer(Vertx vertx, MailConfig config) {\n+        this.client = mailClient(vertx, config);\n+        this.mutinyClient = io.vertx.mutiny.ext.mail.MailClient.newInstance(this.client);\n     }\n \n     @Singleton\n     @Produces\n-    public synchronized MailClient mailClient() {\n+    public MailClient mailClient() {\n         return client;\n     }\n \n     @Singleton\n     @Produces\n-    public synchronized io.vertx.mutiny.ext.mail.MailClient mutinyClient() {\n+    public io.vertx.mutiny.ext.mail.MailClient mutinyClient() {\n         return mutinyClient;\n     }\n \n     @Singleton\n     @Produces\n     @Deprecated\n-    public synchronized io.vertx.axle.ext.mail.MailClient axleMailClient() {\n-        if (axleMailClient == null) {\n-            LOGGER.warn(\n-                    \"`io.vertx.axle.ext.mail.MailClient` is deprecated and will be removed in a future version - it is \"\n-                            + \"recommended to switch to `io.vertx.mutiny.ext.mail.MailClient`\");\n-            axleMailClient = io.vertx.axle.ext.mail.MailClient.newInstance(client);\n-        }\n-        return axleMailClient;\n+    public io.vertx.axle.ext.mail.MailClient axleMailClient() {\n+        LOGGER.warn(\n+                \"`io.vertx.axle.ext.mail.MailClient` is deprecated and will be removed in a future version - it is \"\n+                        + \"recommended to switch to `io.vertx.mutiny.ext.mail.MailClient`\");\n+        return io.vertx.axle.ext.mail.MailClient.newInstance(client);\n     }\n \n     @Singleton\n     @Produces\n     @Deprecated\n-    public synchronized io.vertx.reactivex.ext.mail.MailClient rxMailClient() {\n-        if (rxMailClient == null) {\n-            LOGGER.warn(\n-                    \"`io.vertx.reactivex.ext.mail.MailClient` is deprecated and will be removed in a future version - it is \"\n-                            + \"recommended to switch to `io.vertx.mutiny.ext.mail.MailClient`\");\n-            rxMailClient = io.vertx.reactivex.ext.mail.MailClient.newInstance(client);\n-        }\n-        return rxMailClient;\n+    public io.vertx.reactivex.ext.mail.MailClient rxMailClient() {\n+        LOGGER.warn(\n+                \"`io.vertx.reactivex.ext.mail.MailClient` is deprecated and will be removed in a future version - it is \"\n+                        + \"recommended to switch to `io.vertx.mutiny.ext.mail.MailClient`\");\n+        return io.vertx.reactivex.ext.mail.MailClient.newInstance(client);\n+    }\n+\n+    @PreDestroy\n+    public void stop() {\n+        client.close();\n+    }\n+\n+    private MailClient mailClient(Vertx vertx, MailConfig config) {\n+        io.vertx.ext.mail.MailConfig cfg = toVertxMailConfig(config);\n+        return MailClient.createShared(vertx, cfg);\n+    }\n+\n+    private io.vertx.ext.mail.MailConfig toVertxMailConfig(MailConfig config) {\n+        io.vertx.ext.mail.MailConfig cfg = new io.vertx.ext.mail.MailConfig();\n+        config.authMethods.ifPresent(cfg::setAuthMethods);\n+        cfg.setDisableEsmtp(config.disableEsmtp);\n+        cfg.setHostname(config.host);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4MjEwNg=="}, "originalCommit": {"oid": "8fca03aaf9d8a60f2d6a668d3c3c49790bbd8c05"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzMjU3OA==", "bodyText": "Yeah agreed, thus the \"at some point\". We probably need to discuss that before changing anything.", "url": "https://github.com/quarkusio/quarkus/pull/9151#discussion_r421532578", "createdAt": "2020-05-07T14:07:49Z", "author": {"login": "gsmet"}, "path": "extensions/mailer/runtime/src/main/java/io/quarkus/mailer/runtime/MailClientProducer.java", "diffHunk": "@@ -16,52 +20,74 @@\n \n     private static final Logger LOGGER = Logger.getLogger(MailClientProducer.class);\n \n-    private io.vertx.axle.ext.mail.MailClient axleMailClient;\n-    private io.vertx.reactivex.ext.mail.MailClient rxMailClient;\n-    private io.vertx.mutiny.ext.mail.MailClient mutinyClient;\n-    private MailClient client;\n+    private final io.vertx.mutiny.ext.mail.MailClient mutinyClient;\n+    private final MailClient client;\n \n-    synchronized void initialize(MailClient client) {\n-        this.client = client;\n-        this.mutinyClient = io.vertx.mutiny.ext.mail.MailClient.newInstance(client);\n+    public MailClientProducer(Vertx vertx, MailConfig config) {\n+        this.client = mailClient(vertx, config);\n+        this.mutinyClient = io.vertx.mutiny.ext.mail.MailClient.newInstance(this.client);\n     }\n \n     @Singleton\n     @Produces\n-    public synchronized MailClient mailClient() {\n+    public MailClient mailClient() {\n         return client;\n     }\n \n     @Singleton\n     @Produces\n-    public synchronized io.vertx.mutiny.ext.mail.MailClient mutinyClient() {\n+    public io.vertx.mutiny.ext.mail.MailClient mutinyClient() {\n         return mutinyClient;\n     }\n \n     @Singleton\n     @Produces\n     @Deprecated\n-    public synchronized io.vertx.axle.ext.mail.MailClient axleMailClient() {\n-        if (axleMailClient == null) {\n-            LOGGER.warn(\n-                    \"`io.vertx.axle.ext.mail.MailClient` is deprecated and will be removed in a future version - it is \"\n-                            + \"recommended to switch to `io.vertx.mutiny.ext.mail.MailClient`\");\n-            axleMailClient = io.vertx.axle.ext.mail.MailClient.newInstance(client);\n-        }\n-        return axleMailClient;\n+    public io.vertx.axle.ext.mail.MailClient axleMailClient() {\n+        LOGGER.warn(\n+                \"`io.vertx.axle.ext.mail.MailClient` is deprecated and will be removed in a future version - it is \"\n+                        + \"recommended to switch to `io.vertx.mutiny.ext.mail.MailClient`\");\n+        return io.vertx.axle.ext.mail.MailClient.newInstance(client);\n     }\n \n     @Singleton\n     @Produces\n     @Deprecated\n-    public synchronized io.vertx.reactivex.ext.mail.MailClient rxMailClient() {\n-        if (rxMailClient == null) {\n-            LOGGER.warn(\n-                    \"`io.vertx.reactivex.ext.mail.MailClient` is deprecated and will be removed in a future version - it is \"\n-                            + \"recommended to switch to `io.vertx.mutiny.ext.mail.MailClient`\");\n-            rxMailClient = io.vertx.reactivex.ext.mail.MailClient.newInstance(client);\n-        }\n-        return rxMailClient;\n+    public io.vertx.reactivex.ext.mail.MailClient rxMailClient() {\n+        LOGGER.warn(\n+                \"`io.vertx.reactivex.ext.mail.MailClient` is deprecated and will be removed in a future version - it is \"\n+                        + \"recommended to switch to `io.vertx.mutiny.ext.mail.MailClient`\");\n+        return io.vertx.reactivex.ext.mail.MailClient.newInstance(client);\n+    }\n+\n+    @PreDestroy\n+    public void stop() {\n+        client.close();\n+    }\n+\n+    private MailClient mailClient(Vertx vertx, MailConfig config) {\n+        io.vertx.ext.mail.MailConfig cfg = toVertxMailConfig(config);\n+        return MailClient.createShared(vertx, cfg);\n+    }\n+\n+    private io.vertx.ext.mail.MailConfig toVertxMailConfig(MailConfig config) {\n+        io.vertx.ext.mail.MailConfig cfg = new io.vertx.ext.mail.MailConfig();\n+        config.authMethods.ifPresent(cfg::setAuthMethods);\n+        cfg.setDisableEsmtp(config.disableEsmtp);\n+        cfg.setHostname(config.host);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4MjEwNg=="}, "originalCommit": {"oid": "8fca03aaf9d8a60f2d6a668d3c3c49790bbd8c05"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzMzA5OQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/quarkusio/quarkus/pull/9151#discussion_r421533099", "createdAt": "2020-05-07T14:08:32Z", "author": {"login": "geoand"}, "path": "extensions/mailer/runtime/src/main/java/io/quarkus/mailer/runtime/MailClientProducer.java", "diffHunk": "@@ -16,52 +20,74 @@\n \n     private static final Logger LOGGER = Logger.getLogger(MailClientProducer.class);\n \n-    private io.vertx.axle.ext.mail.MailClient axleMailClient;\n-    private io.vertx.reactivex.ext.mail.MailClient rxMailClient;\n-    private io.vertx.mutiny.ext.mail.MailClient mutinyClient;\n-    private MailClient client;\n+    private final io.vertx.mutiny.ext.mail.MailClient mutinyClient;\n+    private final MailClient client;\n \n-    synchronized void initialize(MailClient client) {\n-        this.client = client;\n-        this.mutinyClient = io.vertx.mutiny.ext.mail.MailClient.newInstance(client);\n+    public MailClientProducer(Vertx vertx, MailConfig config) {\n+        this.client = mailClient(vertx, config);\n+        this.mutinyClient = io.vertx.mutiny.ext.mail.MailClient.newInstance(this.client);\n     }\n \n     @Singleton\n     @Produces\n-    public synchronized MailClient mailClient() {\n+    public MailClient mailClient() {\n         return client;\n     }\n \n     @Singleton\n     @Produces\n-    public synchronized io.vertx.mutiny.ext.mail.MailClient mutinyClient() {\n+    public io.vertx.mutiny.ext.mail.MailClient mutinyClient() {\n         return mutinyClient;\n     }\n \n     @Singleton\n     @Produces\n     @Deprecated\n-    public synchronized io.vertx.axle.ext.mail.MailClient axleMailClient() {\n-        if (axleMailClient == null) {\n-            LOGGER.warn(\n-                    \"`io.vertx.axle.ext.mail.MailClient` is deprecated and will be removed in a future version - it is \"\n-                            + \"recommended to switch to `io.vertx.mutiny.ext.mail.MailClient`\");\n-            axleMailClient = io.vertx.axle.ext.mail.MailClient.newInstance(client);\n-        }\n-        return axleMailClient;\n+    public io.vertx.axle.ext.mail.MailClient axleMailClient() {\n+        LOGGER.warn(\n+                \"`io.vertx.axle.ext.mail.MailClient` is deprecated and will be removed in a future version - it is \"\n+                        + \"recommended to switch to `io.vertx.mutiny.ext.mail.MailClient`\");\n+        return io.vertx.axle.ext.mail.MailClient.newInstance(client);\n     }\n \n     @Singleton\n     @Produces\n     @Deprecated\n-    public synchronized io.vertx.reactivex.ext.mail.MailClient rxMailClient() {\n-        if (rxMailClient == null) {\n-            LOGGER.warn(\n-                    \"`io.vertx.reactivex.ext.mail.MailClient` is deprecated and will be removed in a future version - it is \"\n-                            + \"recommended to switch to `io.vertx.mutiny.ext.mail.MailClient`\");\n-            rxMailClient = io.vertx.reactivex.ext.mail.MailClient.newInstance(client);\n-        }\n-        return rxMailClient;\n+    public io.vertx.reactivex.ext.mail.MailClient rxMailClient() {\n+        LOGGER.warn(\n+                \"`io.vertx.reactivex.ext.mail.MailClient` is deprecated and will be removed in a future version - it is \"\n+                        + \"recommended to switch to `io.vertx.mutiny.ext.mail.MailClient`\");\n+        return io.vertx.reactivex.ext.mail.MailClient.newInstance(client);\n+    }\n+\n+    @PreDestroy\n+    public void stop() {\n+        client.close();\n+    }\n+\n+    private MailClient mailClient(Vertx vertx, MailConfig config) {\n+        io.vertx.ext.mail.MailConfig cfg = toVertxMailConfig(config);\n+        return MailClient.createShared(vertx, cfg);\n+    }\n+\n+    private io.vertx.ext.mail.MailConfig toVertxMailConfig(MailConfig config) {\n+        io.vertx.ext.mail.MailConfig cfg = new io.vertx.ext.mail.MailConfig();\n+        config.authMethods.ifPresent(cfg::setAuthMethods);\n+        cfg.setDisableEsmtp(config.disableEsmtp);\n+        cfg.setHostname(config.host);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4MjEwNg=="}, "originalCommit": {"oid": "8fca03aaf9d8a60f2d6a668d3c3c49790bbd8c05"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDA0MDUxOnYy", "diffSide": "RIGHT", "path": "extensions/mailer/deployment/src/main/java/io/quarkus/mailer/deployment/MailerProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzoyNzo0NFrOGR-e1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzozODozMVrOGR-8-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUwMjY3Nw==", "bodyText": "AFAIK it's possible to inject both the config object and the LaunchMode so there is no need to register a synthetic bean, or?", "url": "https://github.com/quarkusio/quarkus/pull/9151#discussion_r421502677", "createdAt": "2020-05-07T13:27:44Z", "author": {"login": "mkouba"}, "path": "extensions/mailer/deployment/src/main/java/io/quarkus/mailer/deployment/MailerProcessor.java", "diffHunk": "@@ -75,18 +74,17 @@ void registerAuthClass(BuildProducer<ReflectiveClassBuildItem> reflectiveClass)\n \n     @BuildStep\n     @Record(ExecutionTime.RUNTIME_INIT)\n-    MailerBuildItem build(BuildProducer<FeatureBuildItem> feature, MailConfigRecorder recorder, VertxBuildItem vertx,\n-            BeanContainerBuildItem beanContainer, LaunchModeBuildItem launchMode, ShutdownContextBuildItem shutdown,\n-            MailConfig config) {\n+    void build(BuildProducer<FeatureBuildItem> feature, MailConfigRecorder recorder,\n+            MailConfig config, LaunchModeBuildItem launchMode,\n+            BuildProducer<SyntheticBeanBuildItem> syntheticBeanBuildItemBuildProducer) {\n \n         feature.produce(new FeatureBuildItem(FeatureBuildItem.MAILER));\n \n-        RuntimeValue<MailClient> client = recorder.configureTheClient(vertx.getVertx(), beanContainer.getValue(), config,\n-                shutdown);\n-\n-        recorder.configureTheMailer(beanContainer.getValue(), config, launchMode.getLaunchMode());\n-\n-        return new MailerBuildItem(client);\n+        syntheticBeanBuildItemBuildProducer.produce(SyntheticBeanBuildItem.configure(MailerSupport.class)\n+                .scope(Singleton.class)\n+                .supplier(recorder.mailerSupportSupplier(config, launchMode.getLaunchMode()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fca03aaf9d8a60f2d6a668d3c3c49790bbd8c05"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxMDM5NA==", "bodyText": "Ah yes, I forgot that LaunchMode is also a bean, excellent!", "url": "https://github.com/quarkusio/quarkus/pull/9151#discussion_r421510394", "createdAt": "2020-05-07T13:38:31Z", "author": {"login": "geoand"}, "path": "extensions/mailer/deployment/src/main/java/io/quarkus/mailer/deployment/MailerProcessor.java", "diffHunk": "@@ -75,18 +74,17 @@ void registerAuthClass(BuildProducer<ReflectiveClassBuildItem> reflectiveClass)\n \n     @BuildStep\n     @Record(ExecutionTime.RUNTIME_INIT)\n-    MailerBuildItem build(BuildProducer<FeatureBuildItem> feature, MailConfigRecorder recorder, VertxBuildItem vertx,\n-            BeanContainerBuildItem beanContainer, LaunchModeBuildItem launchMode, ShutdownContextBuildItem shutdown,\n-            MailConfig config) {\n+    void build(BuildProducer<FeatureBuildItem> feature, MailConfigRecorder recorder,\n+            MailConfig config, LaunchModeBuildItem launchMode,\n+            BuildProducer<SyntheticBeanBuildItem> syntheticBeanBuildItemBuildProducer) {\n \n         feature.produce(new FeatureBuildItem(FeatureBuildItem.MAILER));\n \n-        RuntimeValue<MailClient> client = recorder.configureTheClient(vertx.getVertx(), beanContainer.getValue(), config,\n-                shutdown);\n-\n-        recorder.configureTheMailer(beanContainer.getValue(), config, launchMode.getLaunchMode());\n-\n-        return new MailerBuildItem(client);\n+        syntheticBeanBuildItemBuildProducer.produce(SyntheticBeanBuildItem.configure(MailerSupport.class)\n+                .scope(Singleton.class)\n+                .supplier(recorder.mailerSupportSupplier(config, launchMode.getLaunchMode()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUwMjY3Nw=="}, "originalCommit": {"oid": "8fca03aaf9d8a60f2d6a668d3c3c49790bbd8c05"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3131, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}