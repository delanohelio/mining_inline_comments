{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1ODQ4NDI3", "number": 12783, "title": "Clean up the config of service integration", "bodyText": "This PR clean up the service integration from the SmallRye GraphQL extension.\nThis include metrics, tracing, bean validation and general events.\nThe logic is as follows: Without any configuration set, the service will be auto-enabled if the relative extension is added.\nElse, the user can explicitly switch it off via config.\nIf the user explicitly switched it on but the relevant extension is not available, a warning will be printed.\nClose #12673\nSigned-off-by:Phillip Kruger phillip.kruger@gmail.com", "createdAt": "2020-10-19T10:04:20Z", "url": "https://github.com/quarkusio/quarkus/pull/12783", "merged": true, "mergeCommit": {"oid": "5b874da798b14eb3aa53228e4962b3d9a5f37b3d"}, "closed": true, "closedAt": "2020-10-23T10:16:08Z", "author": {"login": "phillip-kruger"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUCWP_AFqTUxMTY1NzAwOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdVT1RtAFqTUxNTUzMTU1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNjU3MDA4", "url": "https://github.com/quarkusio/quarkus/pull/12783#pullrequestreview-511657008", "createdAt": "2020-10-19T11:19:50Z", "commit": {"oid": "6c25332abfecab648867c25b15d2b2887742309b"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNjAzMzUz", "url": "https://github.com/quarkusio/quarkus/pull/12783#pullrequestreview-512603353", "createdAt": "2020-10-20T11:26:21Z", "commit": {"oid": "6c25332abfecab648867c25b15d2b2887742309b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMToyNjoyMVrOHk3nVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMToyNzoyNVrOHk3pxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyMTk3NA==", "bodyText": "I think we should have a proper parameter to passe the extension name and not the capability.", "url": "https://github.com/quarkusio/quarkus/pull/12783#discussion_r508421974", "createdAt": "2020-10-20T11:26:21Z", "author": {"login": "gsmet"}, "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java", "diffHunk": "@@ -341,6 +313,106 @@ void openTracingIntegration(Capabilities capabilities,\n         return classes;\n     }\n \n+    // Services Integrations\n+\n+    @BuildStep\n+    void activateMetrics(Capabilities capabilities,\n+            Optional<MetricsCapabilityBuildItem> metricsCapability,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties,\n+            BuildProducer<UnremovableBeanBuildItem> unremovableBeans) {\n+\n+        boolean activate = shouldActivateService(capabilities, quarkusConfig.metricsEnabled, metricsCapability.isPresent(),\n+                \"metrics\", \"quarkus.smallrye-graphql.metrics.enabled\");\n+        if (activate) {\n+            if (metricsCapability.isPresent() && metricsCapability.get().metricsSupported(MetricsFactory.MP_METRICS)) {\n+                unremovableBeans.produce(UnremovableBeanBuildItem.beanClassNames(\"io.smallrye.metrics.MetricRegistries\"));\n+            }\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_METRICS, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_METRICS, FALSE));\n+        }\n+    }\n+\n+    @BuildStep\n+    void activateTracing(Capabilities capabilities,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties) {\n+\n+        boolean activate = shouldActivateService(capabilities, quarkusConfig.tracingEnabled, Capability.OPENTRACING,\n+                \"quarkus.smallrye-graphql.tracing.enabled\");\n+        if (activate) {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_TRACING, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_TRACING, FALSE));\n+        }\n+    }\n+\n+    @BuildStep\n+    void activateValidation(Capabilities capabilities,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties) {\n+\n+        boolean activate = shouldActivateService(capabilities, quarkusConfig.validationEnabled, Capability.HIBERNATE_VALIDATOR,\n+                \"quarkus.smallrye-graphql.validation.enabled\");\n+        if (activate) {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_VALIDATION, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_VALIDATION, FALSE));\n+        }\n+    }\n+\n+    @BuildStep\n+    void activateEventing(BuildProducer<SystemPropertyBuildItem> systemProperties) {\n+        if (quarkusConfig.eventsEnabled) {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_EVENTS, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_EVENTS, FALSE));\n+        }\n+    }\n+\n+    private boolean shouldActivateService(Capabilities capabilities,\n+            Optional<Boolean> serviceEnabled,\n+            Capability linkedCapability,\n+            String configKey) {\n+\n+        return shouldActivateService(capabilities, serviceEnabled, capabilities.isPresent(linkedCapability),\n+                linkedCapability.getName(), configKey);\n+    }\n+\n+    private boolean shouldActivateService(Capabilities capabilities,\n+            Optional<Boolean> serviceEnabled,\n+            boolean linkedCapabilityIsPresent,\n+            String linkedCapabilityName,\n+            String configKey) {\n+\n+        if (serviceEnabled.isPresent()) {\n+            // The user explisitly asked from something\n+            boolean isEnabled = serviceEnabled.get();\n+            if (isEnabled) {\n+                if (linkedCapabilityIsPresent) {\n+                    // enable\n+                    return true;\n+                } else {\n+                    // Warn and disable\n+                    LOG.warnf(SERVICE_NOT_AVAILABLE_WARNING, configKey, linkedCapabilityName, linkedCapabilityName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c25332abfecab648867c25b15d2b2887742309b"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyMjQzMA==", "bodyText": "Isn't Micrometer the extension that should be used for Metrics now? Not sure if it's supported by your GraphQL extension though?\n/cc @ebullient @jmartisk", "url": "https://github.com/quarkusio/quarkus/pull/12783#discussion_r508422430", "createdAt": "2020-10-20T11:27:09Z", "author": {"login": "gsmet"}, "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java", "diffHunk": "@@ -341,6 +313,106 @@ void openTracingIntegration(Capabilities capabilities,\n         return classes;\n     }\n \n+    // Services Integrations\n+\n+    @BuildStep\n+    void activateMetrics(Capabilities capabilities,\n+            Optional<MetricsCapabilityBuildItem> metricsCapability,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties,\n+            BuildProducer<UnremovableBeanBuildItem> unremovableBeans) {\n+\n+        boolean activate = shouldActivateService(capabilities, quarkusConfig.metricsEnabled, metricsCapability.isPresent(),\n+                \"metrics\", \"quarkus.smallrye-graphql.metrics.enabled\");\n+        if (activate) {\n+            if (metricsCapability.isPresent() && metricsCapability.get().metricsSupported(MetricsFactory.MP_METRICS)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c25332abfecab648867c25b15d2b2887742309b"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyMjU5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Enable validation. By default this will be enabled if the bean validation extension is added.\n          \n          \n            \n                 * Enable validation. By default this will be enabled if the Hibernate Validator extension is added.", "url": "https://github.com/quarkusio/quarkus/pull/12783#discussion_r508422598", "createdAt": "2020-10-20T11:27:25Z", "author": {"login": "gsmet"}, "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLConfig.java", "diffHunk": "@@ -15,10 +17,28 @@\n     String rootPath;\n \n     /**\n-     * Enable metrics\n+     * Enable metrics. By default this will be enabled if the metrics extension is added.\n+     */\n+    @ConfigItem(name = \"metrics.enabled\")\n+    Optional<Boolean> metricsEnabled;\n+\n+    /**\n+     * Enable tracing. By default this will be enabled if the tracing extension is added.\n+     */\n+    @ConfigItem(name = \"tracing.enabled\")\n+    Optional<Boolean> tracingEnabled;\n+\n+    /**\n+     * Enable validation. By default this will be enabled if the bean validation extension is added.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c25332abfecab648867c25b15d2b2887742309b"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyOTQ3NjIx", "url": "https://github.com/quarkusio/quarkus/pull/12783#pullrequestreview-512947621", "createdAt": "2020-10-20T16:59:53Z", "commit": {"oid": "4e2167e97a0a5873c7816e5ab7ee0827be5fa76e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjo1OTo1NFrOHlIHqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzowMjo0NVrOHlIOdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5MjM5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // The user explisitly asked from something\n          \n          \n            \n                        // The user explicitly asked from something", "url": "https://github.com/quarkusio/quarkus/pull/12783#discussion_r508692393", "createdAt": "2020-10-20T16:59:54Z", "author": {"login": "gastaldi"}, "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java", "diffHunk": "@@ -341,6 +313,118 @@ void openTracingIntegration(Capabilities capabilities,\n         return classes;\n     }\n \n+    // Services Integrations\n+\n+    @BuildStep\n+    void activateMetrics(Capabilities capabilities,\n+            Optional<MetricsCapabilityBuildItem> metricsCapability,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties,\n+            BuildProducer<UnremovableBeanBuildItem> unremovableBeans) {\n+\n+        boolean activate = shouldActivateService(capabilities,\n+                quarkusConfig.metricsEnabled,\n+                metricsCapability.isPresent(),\n+                \"quarkus-smallrye-metrics\",\n+                \"metrics\",\n+                \"quarkus.smallrye-graphql.metrics.enabled\");\n+        if (activate) {\n+            if (metricsCapability.isPresent() && metricsCapability.get().metricsSupported(MetricsFactory.MP_METRICS)) {\n+                unremovableBeans.produce(UnremovableBeanBuildItem.beanClassNames(\"io.smallrye.metrics.MetricRegistries\"));\n+            }\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_METRICS, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_METRICS, FALSE));\n+        }\n+    }\n+\n+    @BuildStep\n+    void activateTracing(Capabilities capabilities,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties) {\n+\n+        boolean activate = shouldActivateService(capabilities,\n+                quarkusConfig.tracingEnabled,\n+                \"quarkus-smallrye-opentracing\",\n+                Capability.OPENTRACING,\n+                \"quarkus.smallrye-graphql.tracing.enabled\");\n+        if (activate) {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_TRACING, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_TRACING, FALSE));\n+        }\n+    }\n+\n+    @BuildStep\n+    void activateValidation(Capabilities capabilities,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties) {\n+\n+        boolean activate = shouldActivateService(capabilities,\n+                quarkusConfig.validationEnabled,\n+                \"quarkus-hibernate-validator\",\n+                Capability.HIBERNATE_VALIDATOR,\n+                \"quarkus.smallrye-graphql.validation.enabled\");\n+        if (activate) {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_VALIDATION, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_VALIDATION, FALSE));\n+        }\n+    }\n+\n+    @BuildStep\n+    void activateEventing(BuildProducer<SystemPropertyBuildItem> systemProperties) {\n+        if (quarkusConfig.eventsEnabled) {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_EVENTS, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_EVENTS, FALSE));\n+        }\n+    }\n+\n+    private boolean shouldActivateService(Capabilities capabilities,\n+            Optional<Boolean> serviceEnabled,\n+            String linkedExtensionName,\n+            Capability linkedCapability,\n+            String configKey) {\n+\n+        return shouldActivateService(capabilities, serviceEnabled, capabilities.isPresent(linkedCapability),\n+                linkedExtensionName, linkedCapability.getName(), configKey);\n+    }\n+\n+    private boolean shouldActivateService(Capabilities capabilities,\n+            Optional<Boolean> serviceEnabled,\n+            boolean linkedCapabilityIsPresent,\n+            String linkedExtensionName,\n+            String linkedCapabilityName,\n+            String configKey) {\n+\n+        if (serviceEnabled.isPresent()) {\n+            // The user explisitly asked from something", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e2167e97a0a5873c7816e5ab7ee0827be5fa76e"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5NDEzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (isEnabled) {\n          \n          \n            \n                            if (linkedCapabilityIsPresent) {\n          \n          \n            \n                                // enable\n          \n          \n            \n                                return true;\n          \n          \n            \n                            } else {\n          \n          \n            \n                                // Warn and disable\n          \n          \n            \n                                LOG.warnf(SERVICE_NOT_AVAILABLE_WARNING, configKey, linkedExtensionName, linkedCapabilityName);\n          \n          \n            \n                                return false;\n          \n          \n            \n                            }\n          \n          \n            \n                        } else {\n          \n          \n            \n                            // disable\n          \n          \n            \n                            return false;\n          \n          \n            \n                        }\n          \n          \n            \n                    } else {\n          \n          \n            \n                        // Auto dis/enable\n          \n          \n            \n                        if (linkedCapabilityIsPresent) {\n          \n          \n            \n                            // enable\n          \n          \n            \n                            return true;\n          \n          \n            \n                        } else {\n          \n          \n            \n                            // disable\n          \n          \n            \n                            return false;\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                        if (isEnabled && !linkedCapabilityIsPresent) {\n          \n          \n            \n                        \t // Warn and disable\n          \n          \n            \n                                LOG.warnf(SERVICE_NOT_AVAILABLE_WARNING, configKey, linkedExtensionName, linkedCapabilityName);\n          \n          \n            \n                        }\n          \n          \n            \n                        return (isEnabled && linkedCapabilityIsPresent);\n          \n          \n            \n                    } else {\n          \n          \n            \n                       return linkedCapabilityIsPresent;", "url": "https://github.com/quarkusio/quarkus/pull/12783#discussion_r508694134", "createdAt": "2020-10-20T17:02:45Z", "author": {"login": "gastaldi"}, "path": "extensions/smallrye-graphql/deployment/src/main/java/io/quarkus/smallrye/graphql/deployment/SmallRyeGraphQLProcessor.java", "diffHunk": "@@ -341,6 +313,118 @@ void openTracingIntegration(Capabilities capabilities,\n         return classes;\n     }\n \n+    // Services Integrations\n+\n+    @BuildStep\n+    void activateMetrics(Capabilities capabilities,\n+            Optional<MetricsCapabilityBuildItem> metricsCapability,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties,\n+            BuildProducer<UnremovableBeanBuildItem> unremovableBeans) {\n+\n+        boolean activate = shouldActivateService(capabilities,\n+                quarkusConfig.metricsEnabled,\n+                metricsCapability.isPresent(),\n+                \"quarkus-smallrye-metrics\",\n+                \"metrics\",\n+                \"quarkus.smallrye-graphql.metrics.enabled\");\n+        if (activate) {\n+            if (metricsCapability.isPresent() && metricsCapability.get().metricsSupported(MetricsFactory.MP_METRICS)) {\n+                unremovableBeans.produce(UnremovableBeanBuildItem.beanClassNames(\"io.smallrye.metrics.MetricRegistries\"));\n+            }\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_METRICS, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_METRICS, FALSE));\n+        }\n+    }\n+\n+    @BuildStep\n+    void activateTracing(Capabilities capabilities,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties) {\n+\n+        boolean activate = shouldActivateService(capabilities,\n+                quarkusConfig.tracingEnabled,\n+                \"quarkus-smallrye-opentracing\",\n+                Capability.OPENTRACING,\n+                \"quarkus.smallrye-graphql.tracing.enabled\");\n+        if (activate) {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_TRACING, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_TRACING, FALSE));\n+        }\n+    }\n+\n+    @BuildStep\n+    void activateValidation(Capabilities capabilities,\n+            BuildProducer<SystemPropertyBuildItem> systemProperties) {\n+\n+        boolean activate = shouldActivateService(capabilities,\n+                quarkusConfig.validationEnabled,\n+                \"quarkus-hibernate-validator\",\n+                Capability.HIBERNATE_VALIDATOR,\n+                \"quarkus.smallrye-graphql.validation.enabled\");\n+        if (activate) {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_VALIDATION, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_VALIDATION, FALSE));\n+        }\n+    }\n+\n+    @BuildStep\n+    void activateEventing(BuildProducer<SystemPropertyBuildItem> systemProperties) {\n+        if (quarkusConfig.eventsEnabled) {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_EVENTS, TRUE));\n+        } else {\n+            systemProperties.produce(new SystemPropertyBuildItem(ConfigKey.ENABLE_EVENTS, FALSE));\n+        }\n+    }\n+\n+    private boolean shouldActivateService(Capabilities capabilities,\n+            Optional<Boolean> serviceEnabled,\n+            String linkedExtensionName,\n+            Capability linkedCapability,\n+            String configKey) {\n+\n+        return shouldActivateService(capabilities, serviceEnabled, capabilities.isPresent(linkedCapability),\n+                linkedExtensionName, linkedCapability.getName(), configKey);\n+    }\n+\n+    private boolean shouldActivateService(Capabilities capabilities,\n+            Optional<Boolean> serviceEnabled,\n+            boolean linkedCapabilityIsPresent,\n+            String linkedExtensionName,\n+            String linkedCapabilityName,\n+            String configKey) {\n+\n+        if (serviceEnabled.isPresent()) {\n+            // The user explisitly asked from something\n+            boolean isEnabled = serviceEnabled.get();\n+            if (isEnabled) {\n+                if (linkedCapabilityIsPresent) {\n+                    // enable\n+                    return true;\n+                } else {\n+                    // Warn and disable\n+                    LOG.warnf(SERVICE_NOT_AVAILABLE_WARNING, configKey, linkedExtensionName, linkedCapabilityName);\n+                    return false;\n+                }\n+            } else {\n+                // disable\n+                return false;\n+            }\n+        } else {\n+            // Auto dis/enable\n+            if (linkedCapabilityIsPresent) {\n+                // enable\n+                return true;\n+            } else {\n+                // disable\n+                return false;\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e2167e97a0a5873c7816e5ab7ee0827be5fa76e"}, "originalPosition": 170}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df99b6e09304acc3e45a9de446c02e24a478ad7e", "author": {"user": {"login": "phillip-kruger", "name": "Phillip Kr\u00fcger"}}, "url": "https://github.com/quarkusio/quarkus/commit/df99b6e09304acc3e45a9de446c02e24a478ad7e", "committedDate": "2020-10-21T11:02:23Z", "message": "Clean up the config of service integration\n\nSigned-off-by: Phillip Kruger <phillip.kruger@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzNTcxMjI2", "url": "https://github.com/quarkusio/quarkus/pull/12783#pullrequestreview-513571226", "createdAt": "2020-10-21T11:24:00Z", "commit": {"oid": "df99b6e09304acc3e45a9de446c02e24a478ad7e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1NTMxNTUw", "url": "https://github.com/quarkusio/quarkus/pull/12783#pullrequestreview-515531550", "createdAt": "2020-10-23T10:16:02Z", "commit": {"oid": "df99b6e09304acc3e45a9de446c02e24a478ad7e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1635, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}