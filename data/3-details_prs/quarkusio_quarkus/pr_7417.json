{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NjMyNDQ4", "number": 7417, "title": "Kafka Streams SASL and SSL config", "bodyText": "Fix #4961", "createdAt": "2020-02-25T14:57:47Z", "url": "https://github.com/quarkusio/quarkus/pull/7417", "merged": true, "mergeCommit": {"oid": "837bcf832aa539e84ff16213f4f1f1e50e1da9d2"}, "closed": true, "closedAt": "2020-06-24T14:54:55Z", "author": {"login": "alesj"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIE1pzAFqTM2NDgxMzQwNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcubSwFgFqTQzNjcyODk2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0ODEzNDA1", "url": "https://github.com/quarkusio/quarkus/pull/7417#pullrequestreview-364813405", "createdAt": "2020-02-26T11:12:03Z", "commit": {"oid": "fa1326ce07f8a0a706a0ede54f698ef5538d1829"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMToxMjowNFrOFunibg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMToxNDozOVrOFunnPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyNjYwNg==", "bodyText": "Why is this a string, shouldn't it be rather a double (some for some more props below)?", "url": "https://github.com/quarkusio/quarkus/pull/7417#discussion_r384426606", "createdAt": "2020-02-26T11:12:04Z", "author": {"login": "gunnarmorling"}, "path": "extensions/kafka-streams/runtime/src/main/java/io/quarkus/kafka/streams/runtime/SaslConfig.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package io.quarkus.kafka.streams.runtime;\n+\n+import java.util.Optional;\n+\n+import io.quarkus.runtime.annotations.ConfigGroup;\n+import io.quarkus.runtime.annotations.ConfigItem;\n+\n+@ConfigGroup\n+public class SaslConfig {\n+\n+    /**\n+     * JAAS login context parameters for SASL connections in the format used by JAAS configuration files\n+     */\n+    @ConfigItem(name = \"jaas.config\")\n+    public Optional<String> jaasConfig;\n+\n+    /**\n+     * The fully qualified name of a SASL client callback handler class\n+     */\n+    @ConfigItem(name = \"client.callback.handler.class\")\n+    public Optional<String> clientCallbackHandlerClass;\n+\n+    /**\n+     * The fully qualified name of a SASL login callback handler class\n+     */\n+    @ConfigItem(name = \"login.callback.handler.class\")\n+    public Optional<String> loginCallbackHandlerClass;\n+\n+    /**\n+     * The fully qualified name of a class that implements the Login interface\n+     */\n+    @ConfigItem(name = \"login.class\")\n+    public Optional<String> loginClass;\n+\n+    /**\n+     * The Kerberos principal name that Kafka runs as\n+     */\n+    @ConfigItem(name = \"kerberos.service.name\")\n+    public Optional<String> kerberosServiceName;\n+\n+    /**\n+     * Kerberos kinit command path\n+     */\n+    @ConfigItem(name = \"kerberos.kinit.cmd\")\n+    public Optional<String> kerberosKinitCmd;\n+\n+    /**\n+     * Login thread will sleep until the specified window factor of time from last refresh\n+     */\n+    @ConfigItem(name = \"kerberos.ticket.renew.window.factor\")\n+    public Optional<String> kerberosTicketRenewWindowFactor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa1326ce07f8a0a706a0ede54f698ef5538d1829"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyNzQzMw==", "bodyText": "Should be an int. But also worth double checking with Quarkus guidelines: should it be rather Duration, and be given as such (which would impact the option name, though, which might not be desirable as it's coming from Kafka upstream IIUC).", "url": "https://github.com/quarkusio/quarkus/pull/7417#discussion_r384427433", "createdAt": "2020-02-26T11:13:44Z", "author": {"login": "gunnarmorling"}, "path": "extensions/kafka-streams/runtime/src/main/java/io/quarkus/kafka/streams/runtime/SaslConfig.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package io.quarkus.kafka.streams.runtime;\n+\n+import java.util.Optional;\n+\n+import io.quarkus.runtime.annotations.ConfigGroup;\n+import io.quarkus.runtime.annotations.ConfigItem;\n+\n+@ConfigGroup\n+public class SaslConfig {\n+\n+    /**\n+     * JAAS login context parameters for SASL connections in the format used by JAAS configuration files\n+     */\n+    @ConfigItem(name = \"jaas.config\")\n+    public Optional<String> jaasConfig;\n+\n+    /**\n+     * The fully qualified name of a SASL client callback handler class\n+     */\n+    @ConfigItem(name = \"client.callback.handler.class\")\n+    public Optional<String> clientCallbackHandlerClass;\n+\n+    /**\n+     * The fully qualified name of a SASL login callback handler class\n+     */\n+    @ConfigItem(name = \"login.callback.handler.class\")\n+    public Optional<String> loginCallbackHandlerClass;\n+\n+    /**\n+     * The fully qualified name of a class that implements the Login interface\n+     */\n+    @ConfigItem(name = \"login.class\")\n+    public Optional<String> loginClass;\n+\n+    /**\n+     * The Kerberos principal name that Kafka runs as\n+     */\n+    @ConfigItem(name = \"kerberos.service.name\")\n+    public Optional<String> kerberosServiceName;\n+\n+    /**\n+     * Kerberos kinit command path\n+     */\n+    @ConfigItem(name = \"kerberos.kinit.cmd\")\n+    public Optional<String> kerberosKinitCmd;\n+\n+    /**\n+     * Login thread will sleep until the specified window factor of time from last refresh\n+     */\n+    @ConfigItem(name = \"kerberos.ticket.renew.window.factor\")\n+    public Optional<String> kerberosTicketRenewWindowFactor;\n+\n+    /**\n+     * Percentage of random jitter added to the renewal time\n+     */\n+    @ConfigItem(name = \"kerberos.ticket.renew.jitter\")\n+    public Optional<String> kerberosTicketRenewJitter;\n+\n+    /**\n+     * Percentage of random jitter added to the renewal time\n+     */\n+    @ConfigItem(name = \"kerberos.min.time.before.relogin\")\n+    public Optional<String> kerberosMinTimeBeforeRelogin;\n+\n+    /**\n+     * Login refresh thread will sleep until the specified window factor relative to the\n+     * credential's lifetime has been reached.\n+     */\n+    @ConfigItem(name = \"login.refresh.window.factor\")\n+    public Optional<String> loginRefreshWindowFactor;\n+\n+    /**\n+     * The maximum amount of random jitter relative to the credential's lifetime\n+     */\n+    @ConfigItem(name = \"login.refresh.window.jitter\")\n+    public Optional<String> loginRefreshWindowJitter;\n+\n+    /**\n+     * The desired minimum time for the login refresh thread to wait before refreshing a credential\n+     */\n+    @ConfigItem(name = \"login.refresh.min.period.seconds\")\n+    public Optional<String> loginRefreshMinPeriodSeconds;\n+\n+    /**\n+     * The amount of buffer time before credential expiration to maintain when refreshing a credential\n+     */\n+    @ConfigItem(name = \"login.refresh.buffer.seconds\")\n+    public Optional<String> loginRefreshBufferSeconds;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa1326ce07f8a0a706a0ede54f698ef5538d1829"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyNzgzOQ==", "bodyText": "How about adding a package visible accessor?", "url": "https://github.com/quarkusio/quarkus/pull/7417#discussion_r384427839", "createdAt": "2020-02-26T11:14:39Z", "author": {"login": "gunnarmorling"}, "path": "integration-tests/kafka-streams/src/test/java/io/quarkus/it/kafka/streams/KafkaStreamsPropertiesTest.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package io.quarkus.it.kafka.streams;\n+\n+import java.lang.reflect.Field;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.kafka.streams.KafkaStreams;\n+import org.apache.kafka.streams.StreamsConfig;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+@QuarkusTestResource(KafkaTestResource.class)\n+@QuarkusTest\n+public class KafkaStreamsPropertiesTest {\n+\n+    @Inject\n+    KafkaStreams streams;\n+\n+    @Test\n+    public void testProperties() throws Exception {\n+        // reflection hack ... no other way to get raw props ...\n+        Field configField = KafkaStreams.class.getDeclaredField(\"config\");\n+        configField.setAccessible(true);\n+        StreamsConfig config = (StreamsConfig) configField.get(streams);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa1326ce07f8a0a706a0ede54f698ef5538d1829"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NTIxNzI5", "url": "https://github.com/quarkusio/quarkus/pull/7417#pullrequestreview-365521729", "createdAt": "2020-02-27T09:21:53Z", "commit": {"oid": "fa1326ce07f8a0a706a0ede54f698ef5538d1829"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwOToyMTo1M1rOFvKknA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwOToyMjo1OVrOFvKm6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAwMDYwNA==", "bodyText": "In Quarkus config, we use a dot to separate sections and a dash to separate words. It's a general comment about the config key of this PR.", "url": "https://github.com/quarkusio/quarkus/pull/7417#discussion_r385000604", "createdAt": "2020-02-27T09:21:53Z", "author": {"login": "gsmet"}, "path": "extensions/kafka-streams/runtime/src/main/java/io/quarkus/kafka/streams/runtime/KafkaStreamsRuntimeConfig.java", "diffHunk": "@@ -37,10 +37,42 @@\n     @ConfigItem\n     public List<String> topics;\n \n+    /**\n+     * The schema registry key.\n+     * e.g. to diff between different registry impls / instances\n+     * as they have this registry url under different property key.\n+     */\n+    @ConfigItem(name = \"schema.registry.key\", defaultValue = \"schema.registry.url\")\n+    public String schemaRegistryKey;\n+\n+    /**\n+     * The schema registry url.\n+     */\n+    @ConfigItem(name = \"schema.registry.url\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa1326ce07f8a0a706a0ede54f698ef5538d1829"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAwMDgyMg==", "bodyText": "Yes, it should be typed.", "url": "https://github.com/quarkusio/quarkus/pull/7417#discussion_r385000822", "createdAt": "2020-02-27T09:22:21Z", "author": {"login": "gsmet"}, "path": "extensions/kafka-streams/runtime/src/main/java/io/quarkus/kafka/streams/runtime/SaslConfig.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package io.quarkus.kafka.streams.runtime;\n+\n+import java.util.Optional;\n+\n+import io.quarkus.runtime.annotations.ConfigGroup;\n+import io.quarkus.runtime.annotations.ConfigItem;\n+\n+@ConfigGroup\n+public class SaslConfig {\n+\n+    /**\n+     * JAAS login context parameters for SASL connections in the format used by JAAS configuration files\n+     */\n+    @ConfigItem(name = \"jaas.config\")\n+    public Optional<String> jaasConfig;\n+\n+    /**\n+     * The fully qualified name of a SASL client callback handler class\n+     */\n+    @ConfigItem(name = \"client.callback.handler.class\")\n+    public Optional<String> clientCallbackHandlerClass;\n+\n+    /**\n+     * The fully qualified name of a SASL login callback handler class\n+     */\n+    @ConfigItem(name = \"login.callback.handler.class\")\n+    public Optional<String> loginCallbackHandlerClass;\n+\n+    /**\n+     * The fully qualified name of a class that implements the Login interface\n+     */\n+    @ConfigItem(name = \"login.class\")\n+    public Optional<String> loginClass;\n+\n+    /**\n+     * The Kerberos principal name that Kafka runs as\n+     */\n+    @ConfigItem(name = \"kerberos.service.name\")\n+    public Optional<String> kerberosServiceName;\n+\n+    /**\n+     * Kerberos kinit command path\n+     */\n+    @ConfigItem(name = \"kerberos.kinit.cmd\")\n+    public Optional<String> kerberosKinitCmd;\n+\n+    /**\n+     * Login thread will sleep until the specified window factor of time from last refresh\n+     */\n+    @ConfigItem(name = \"kerberos.ticket.renew.window.factor\")\n+    public Optional<String> kerberosTicketRenewWindowFactor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyNjYwNg=="}, "originalCommit": {"oid": "fa1326ce07f8a0a706a0ede54f698ef5538d1829"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAwMTE5NQ==", "bodyText": "Yeah all these properties should be Duration and we should drop the Seconds part. They will be documented so it's OK.", "url": "https://github.com/quarkusio/quarkus/pull/7417#discussion_r385001195", "createdAt": "2020-02-27T09:22:59Z", "author": {"login": "gsmet"}, "path": "extensions/kafka-streams/runtime/src/main/java/io/quarkus/kafka/streams/runtime/SaslConfig.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package io.quarkus.kafka.streams.runtime;\n+\n+import java.util.Optional;\n+\n+import io.quarkus.runtime.annotations.ConfigGroup;\n+import io.quarkus.runtime.annotations.ConfigItem;\n+\n+@ConfigGroup\n+public class SaslConfig {\n+\n+    /**\n+     * JAAS login context parameters for SASL connections in the format used by JAAS configuration files\n+     */\n+    @ConfigItem(name = \"jaas.config\")\n+    public Optional<String> jaasConfig;\n+\n+    /**\n+     * The fully qualified name of a SASL client callback handler class\n+     */\n+    @ConfigItem(name = \"client.callback.handler.class\")\n+    public Optional<String> clientCallbackHandlerClass;\n+\n+    /**\n+     * The fully qualified name of a SASL login callback handler class\n+     */\n+    @ConfigItem(name = \"login.callback.handler.class\")\n+    public Optional<String> loginCallbackHandlerClass;\n+\n+    /**\n+     * The fully qualified name of a class that implements the Login interface\n+     */\n+    @ConfigItem(name = \"login.class\")\n+    public Optional<String> loginClass;\n+\n+    /**\n+     * The Kerberos principal name that Kafka runs as\n+     */\n+    @ConfigItem(name = \"kerberos.service.name\")\n+    public Optional<String> kerberosServiceName;\n+\n+    /**\n+     * Kerberos kinit command path\n+     */\n+    @ConfigItem(name = \"kerberos.kinit.cmd\")\n+    public Optional<String> kerberosKinitCmd;\n+\n+    /**\n+     * Login thread will sleep until the specified window factor of time from last refresh\n+     */\n+    @ConfigItem(name = \"kerberos.ticket.renew.window.factor\")\n+    public Optional<String> kerberosTicketRenewWindowFactor;\n+\n+    /**\n+     * Percentage of random jitter added to the renewal time\n+     */\n+    @ConfigItem(name = \"kerberos.ticket.renew.jitter\")\n+    public Optional<String> kerberosTicketRenewJitter;\n+\n+    /**\n+     * Percentage of random jitter added to the renewal time\n+     */\n+    @ConfigItem(name = \"kerberos.min.time.before.relogin\")\n+    public Optional<String> kerberosMinTimeBeforeRelogin;\n+\n+    /**\n+     * Login refresh thread will sleep until the specified window factor relative to the\n+     * credential's lifetime has been reached.\n+     */\n+    @ConfigItem(name = \"login.refresh.window.factor\")\n+    public Optional<String> loginRefreshWindowFactor;\n+\n+    /**\n+     * The maximum amount of random jitter relative to the credential's lifetime\n+     */\n+    @ConfigItem(name = \"login.refresh.window.jitter\")\n+    public Optional<String> loginRefreshWindowJitter;\n+\n+    /**\n+     * The desired minimum time for the login refresh thread to wait before refreshing a credential\n+     */\n+    @ConfigItem(name = \"login.refresh.min.period.seconds\")\n+    public Optional<String> loginRefreshMinPeriodSeconds;\n+\n+    /**\n+     * The amount of buffer time before credential expiration to maintain when refreshing a credential\n+     */\n+    @ConfigItem(name = \"login.refresh.buffer.seconds\")\n+    public Optional<String> loginRefreshBufferSeconds;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyNzQzMw=="}, "originalCommit": {"oid": "fa1326ce07f8a0a706a0ede54f698ef5538d1829"}, "originalPosition": 88}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fb6c229c472a2b1682e6cb3ee88883ef0025560b", "author": {"user": {"login": "alesj", "name": "Ale\u0161 Justin"}}, "url": "https://github.com/quarkusio/quarkus/commit/fb6c229c472a2b1682e6cb3ee88883ef0025560b", "committedDate": "2020-02-27T14:17:36Z", "message": "Add SSL test(s)."}, "afterCommit": {"oid": "34c8025e390f78ef629008a004b3493998c9289a", "author": {"user": {"login": "alesj", "name": "Ale\u0161 Justin"}}, "url": "https://github.com/quarkusio/quarkus/commit/34c8025e390f78ef629008a004b3493998c9289a", "committedDate": "2020-02-28T14:27:08Z", "message": "Add SSL test(s)."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "34c8025e390f78ef629008a004b3493998c9289a", "author": {"user": {"login": "alesj", "name": "Ale\u0161 Justin"}}, "url": "https://github.com/quarkusio/quarkus/commit/34c8025e390f78ef629008a004b3493998c9289a", "committedDate": "2020-02-28T14:27:08Z", "message": "Add SSL test(s)."}, "afterCommit": {"oid": "d4b1fbc4f2626423d57ba4cf6a571f427f334afd", "author": {"user": {"login": "alesj", "name": "Ale\u0161 Justin"}}, "url": "https://github.com/quarkusio/quarkus/commit/d4b1fbc4f2626423d57ba4cf6a571f427f334afd", "committedDate": "2020-03-03T13:21:44Z", "message": "Make props typed, use dash."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NDg0NjY0", "url": "https://github.com/quarkusio/quarkus/pull/7417#pullrequestreview-378484664", "createdAt": "2020-03-20T13:33:12Z", "commit": {"oid": "d4b1fbc4f2626423d57ba4cf6a571f427f334afd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzozMzoxMlrOF5T0lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzozMzoxMlrOF5T0lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzNzkwOQ==", "bodyText": "Perhaps clarify the value to be used for Apicurio?", "url": "https://github.com/quarkusio/quarkus/pull/7417#discussion_r395637909", "createdAt": "2020-03-20T13:33:12Z", "author": {"login": "gunnarmorling"}, "path": "extensions/kafka-streams/runtime/src/main/java/io/quarkus/kafka/streams/runtime/KafkaStreamsRuntimeConfig.java", "diffHunk": "@@ -37,10 +37,42 @@\n     @ConfigItem\n     public List<String> topics;\n \n+    /**\n+     * The schema registry key.\n+     * e.g. to diff between different registry impls / instances", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b1fbc4f2626423d57ba4cf6a571f427f334afd"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NDc3MjA5", "url": "https://github.com/quarkusio/quarkus/pull/7417#pullrequestreview-379477209", "createdAt": "2020-03-23T14:23:33Z", "commit": {"oid": "46974051fa304158be3072d1f1aa0fcd1a860d3b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "46974051fa304158be3072d1f1aa0fcd1a860d3b", "author": {"user": {"login": "alesj", "name": "Ale\u0161 Justin"}}, "url": "https://github.com/quarkusio/quarkus/commit/46974051fa304158be3072d1f1aa0fcd1a860d3b", "committedDate": "2020-03-23T14:11:26Z", "message": "Docs about different registry url keys."}, "afterCommit": {"oid": "16df4e9ac65e8caf28c7f92ddfed01161fbb2c69", "author": {"user": {"login": "gsmet", "name": "Guillaume Smet"}}, "url": "https://github.com/quarkusio/quarkus/commit/16df4e9ac65e8caf28c7f92ddfed01161fbb2c69", "committedDate": "2020-04-28T12:54:55Z", "message": "Get rid of runtime lambdas in Kafka Streams"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxODQ1OTQ3", "url": "https://github.com/quarkusio/quarkus/pull/7417#pullrequestreview-401845947", "createdAt": "2020-04-28T13:40:59Z", "commit": {"oid": "16df4e9ac65e8caf28c7f92ddfed01161fbb2c69"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzo0MDo1OVrOGNUlhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzo0MDo1OVrOGNUlhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYyMTk1Ng==", "bodyText": "I don't understand why we need that here?", "url": "https://github.com/quarkusio/quarkus/pull/7417#discussion_r416621956", "createdAt": "2020-04-28T13:40:59Z", "author": {"login": "gsmet"}, "path": "extensions/kafka-streams/runtime/src/main/java/io/quarkus/kafka/streams/runtime/KafkaStreamsTopologyManager.java", "diffHunk": "@@ -80,17 +84,90 @@ private static Properties getStreamsProperties(Properties properties, String boo\n         // build-time options\n         streamsProperties.putAll(properties);\n \n+        // dynamic add -- back-compatibility\n+        streamsProperties.putAll(KafkaStreamsPropertiesUtil.quarkusKafkaStreamsProperties());\n+        streamsProperties.putAll(KafkaStreamsPropertiesUtil.appKafkaStreamsProperties());\n+\n         // add runtime options\n         streamsProperties.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServersConfig);\n         streamsProperties.put(StreamsConfig.APPLICATION_ID_CONFIG, runtimeConfig.applicationId);\n \n+        // app id\n         if (runtimeConfig.applicationServer.isPresent()) {\n             streamsProperties.put(StreamsConfig.APPLICATION_SERVER_CONFIG, runtimeConfig.applicationServer.get());\n         }\n \n+        // schema registry\n+        if (runtimeConfig.schemaRegistryUrl.isPresent()) {\n+            streamsProperties.put(runtimeConfig.schemaRegistryKey, runtimeConfig.schemaRegistryUrl.get());\n+        }\n+\n+        // sasl\n+        SaslConfig sc = runtimeConfig.sasl;\n+        if (sc != null) {\n+            setProperty(sc.jaasConfig, streamsProperties, SaslConfigs.SASL_JAAS_CONFIG);\n+\n+            setProperty(sc.clientCallbackHandlerClass, streamsProperties, SaslConfigs.SASL_CLIENT_CALLBACK_HANDLER_CLASS);\n+\n+            setProperty(sc.loginCallbackHandlerClass, streamsProperties, SaslConfigs.SASL_LOGIN_CALLBACK_HANDLER_CLASS);\n+            setProperty(sc.loginClass, streamsProperties, SaslConfigs.SASL_LOGIN_CLASS);\n+\n+            setProperty(sc.kerberosServiceName, streamsProperties, SaslConfigs.SASL_KERBEROS_SERVICE_NAME);\n+            setProperty(sc.kerberosKinitCmd, streamsProperties, SaslConfigs.SASL_KERBEROS_KINIT_CMD);\n+            setProperty(sc.kerberosTicketRenewWindowFactor, streamsProperties,\n+                    SaslConfigs.SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR);\n+            setProperty(sc.kerberosTicketRenewJitter, streamsProperties, SaslConfigs.SASL_KERBEROS_TICKET_RENEW_JITTER);\n+            setProperty(sc.kerberosMinTimeBeforeRelogin, streamsProperties, SaslConfigs.SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN);\n+\n+            setProperty(sc.loginRefreshWindowFactor, streamsProperties, SaslConfigs.SASL_LOGIN_REFRESH_WINDOW_FACTOR);\n+            setProperty(sc.loginRefreshWindowJitter, streamsProperties, SaslConfigs.SASL_LOGIN_REFRESH_WINDOW_JITTER);\n+\n+            setProperty(sc.loginRefreshMinPeriod, streamsProperties, SaslConfigs.SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS,\n+                    DurationToSecondsFunction.INSTANCE);\n+            setProperty(sc.loginRefreshBuffer, streamsProperties, SaslConfigs.SASL_LOGIN_REFRESH_BUFFER_SECONDS,\n+                    DurationToSecondsFunction.INSTANCE);\n+        }\n+\n+        // ssl\n+        SslConfig ssl = runtimeConfig.ssl;\n+        if (ssl != null) {\n+            setProperty(ssl.protocol, streamsProperties, SslConfigs.SSL_PROTOCOL_CONFIG);\n+            setProperty(ssl.provider, streamsProperties, SslConfigs.SSL_PROVIDER_CONFIG);\n+            setProperty(ssl.cipherSuites, streamsProperties, SslConfigs.SSL_CIPHER_SUITES_CONFIG);\n+            setProperty(ssl.enabledProtocols, streamsProperties, SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG);\n+\n+            setStoreConfig(ssl.truststore, streamsProperties, \"ssl.truststore\");\n+            setStoreConfig(ssl.keystore, streamsProperties, \"ssl.keystore\");\n+            setStoreConfig(ssl.key, streamsProperties, \"ssl.key\");\n+\n+            setProperty(ssl.keymanagerAlgorithm, streamsProperties, SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);\n+            setProperty(ssl.trustmanagerAlgorithm, streamsProperties, SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n+            setProperty(ssl.endpointIdentificationAlgorithm.map(s -> \"\\\"\\\"\".equals(s) ? \"\" : s), streamsProperties,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16df4e9ac65e8caf28c7f92ddfed01161fbb2c69"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNDg0MDEw", "url": "https://github.com/quarkusio/quarkus/pull/7417#pullrequestreview-403484010", "createdAt": "2020-04-30T12:46:35Z", "commit": {"oid": "16df4e9ac65e8caf28c7f92ddfed01161fbb2c69"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMjo0NjozNVrOGOnnuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMjo0NjozNVrOGOnnuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk4MjM5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        setProperty(ssl.endpointIdentificationAlgorithm.map(s -> \"\\\"\\\"\".equals(s) ? \"\" : s), streamsProperties,\n          \n          \n            \n                        setProperty(ssl.endpointIdentificationAlgorithm.orElse(\"\"), streamsProperties,", "url": "https://github.com/quarkusio/quarkus/pull/7417#discussion_r417982395", "createdAt": "2020-04-30T12:46:35Z", "author": {"login": "dmlloyd"}, "path": "extensions/kafka-streams/runtime/src/main/java/io/quarkus/kafka/streams/runtime/KafkaStreamsTopologyManager.java", "diffHunk": "@@ -80,17 +84,90 @@ private static Properties getStreamsProperties(Properties properties, String boo\n         // build-time options\n         streamsProperties.putAll(properties);\n \n+        // dynamic add -- back-compatibility\n+        streamsProperties.putAll(KafkaStreamsPropertiesUtil.quarkusKafkaStreamsProperties());\n+        streamsProperties.putAll(KafkaStreamsPropertiesUtil.appKafkaStreamsProperties());\n+\n         // add runtime options\n         streamsProperties.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServersConfig);\n         streamsProperties.put(StreamsConfig.APPLICATION_ID_CONFIG, runtimeConfig.applicationId);\n \n+        // app id\n         if (runtimeConfig.applicationServer.isPresent()) {\n             streamsProperties.put(StreamsConfig.APPLICATION_SERVER_CONFIG, runtimeConfig.applicationServer.get());\n         }\n \n+        // schema registry\n+        if (runtimeConfig.schemaRegistryUrl.isPresent()) {\n+            streamsProperties.put(runtimeConfig.schemaRegistryKey, runtimeConfig.schemaRegistryUrl.get());\n+        }\n+\n+        // sasl\n+        SaslConfig sc = runtimeConfig.sasl;\n+        if (sc != null) {\n+            setProperty(sc.jaasConfig, streamsProperties, SaslConfigs.SASL_JAAS_CONFIG);\n+\n+            setProperty(sc.clientCallbackHandlerClass, streamsProperties, SaslConfigs.SASL_CLIENT_CALLBACK_HANDLER_CLASS);\n+\n+            setProperty(sc.loginCallbackHandlerClass, streamsProperties, SaslConfigs.SASL_LOGIN_CALLBACK_HANDLER_CLASS);\n+            setProperty(sc.loginClass, streamsProperties, SaslConfigs.SASL_LOGIN_CLASS);\n+\n+            setProperty(sc.kerberosServiceName, streamsProperties, SaslConfigs.SASL_KERBEROS_SERVICE_NAME);\n+            setProperty(sc.kerberosKinitCmd, streamsProperties, SaslConfigs.SASL_KERBEROS_KINIT_CMD);\n+            setProperty(sc.kerberosTicketRenewWindowFactor, streamsProperties,\n+                    SaslConfigs.SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR);\n+            setProperty(sc.kerberosTicketRenewJitter, streamsProperties, SaslConfigs.SASL_KERBEROS_TICKET_RENEW_JITTER);\n+            setProperty(sc.kerberosMinTimeBeforeRelogin, streamsProperties, SaslConfigs.SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN);\n+\n+            setProperty(sc.loginRefreshWindowFactor, streamsProperties, SaslConfigs.SASL_LOGIN_REFRESH_WINDOW_FACTOR);\n+            setProperty(sc.loginRefreshWindowJitter, streamsProperties, SaslConfigs.SASL_LOGIN_REFRESH_WINDOW_JITTER);\n+\n+            setProperty(sc.loginRefreshMinPeriod, streamsProperties, SaslConfigs.SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS,\n+                    DurationToSecondsFunction.INSTANCE);\n+            setProperty(sc.loginRefreshBuffer, streamsProperties, SaslConfigs.SASL_LOGIN_REFRESH_BUFFER_SECONDS,\n+                    DurationToSecondsFunction.INSTANCE);\n+        }\n+\n+        // ssl\n+        SslConfig ssl = runtimeConfig.ssl;\n+        if (ssl != null) {\n+            setProperty(ssl.protocol, streamsProperties, SslConfigs.SSL_PROTOCOL_CONFIG);\n+            setProperty(ssl.provider, streamsProperties, SslConfigs.SSL_PROVIDER_CONFIG);\n+            setProperty(ssl.cipherSuites, streamsProperties, SslConfigs.SSL_CIPHER_SUITES_CONFIG);\n+            setProperty(ssl.enabledProtocols, streamsProperties, SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG);\n+\n+            setStoreConfig(ssl.truststore, streamsProperties, \"ssl.truststore\");\n+            setStoreConfig(ssl.keystore, streamsProperties, \"ssl.keystore\");\n+            setStoreConfig(ssl.key, streamsProperties, \"ssl.key\");\n+\n+            setProperty(ssl.keymanagerAlgorithm, streamsProperties, SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG);\n+            setProperty(ssl.trustmanagerAlgorithm, streamsProperties, SslConfigs.SSL_TRUSTMANAGER_ALGORITHM_CONFIG);\n+            setProperty(ssl.endpointIdentificationAlgorithm.map(s -> \"\\\"\\\"\".equals(s) ? \"\" : s), streamsProperties,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16df4e9ac65e8caf28c7f92ddfed01161fbb2c69"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1ODAzMDU2", "url": "https://github.com/quarkusio/quarkus/pull/7417#pullrequestreview-405803056", "createdAt": "2020-05-05T13:45:54Z", "commit": {"oid": "5c89efbb8fe01b4044e74513eb3f7e7ff60737c5"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3c98e0eaecb463cd6327733c33081d5f37762310", "author": {"user": {"login": "alesj", "name": "Ale\u0161 Justin"}}, "url": "https://github.com/quarkusio/quarkus/commit/3c98e0eaecb463cd6327733c33081d5f37762310", "committedDate": "2020-05-06T09:12:46Z", "message": "Remove empty hack."}, "afterCommit": {"oid": "dba2d4bbc758adda9e72a470766d21d4f5c87c96", "author": {"user": {"login": "alesj", "name": "Ale\u0161 Justin"}}, "url": "https://github.com/quarkusio/quarkus/commit/dba2d4bbc758adda9e72a470766d21d4f5c87c96", "committedDate": "2020-05-18T11:54:55Z", "message": "Handle #4961 - Kafka Streams sasl, ssl config."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dba2d4bbc758adda9e72a470766d21d4f5c87c96", "author": {"user": {"login": "alesj", "name": "Ale\u0161 Justin"}}, "url": "https://github.com/quarkusio/quarkus/commit/dba2d4bbc758adda9e72a470766d21d4f5c87c96", "committedDate": "2020-05-18T11:54:55Z", "message": "Handle #4961 - Kafka Streams sasl, ssl config."}, "afterCommit": {"oid": "d3d550bbee83c2e315e942e3848aa4090f5b9a85", "author": {"user": {"login": "alesj", "name": "Ale\u0161 Justin"}}, "url": "https://github.com/quarkusio/quarkus/commit/d3d550bbee83c2e315e942e3848aa4090f5b9a85", "committedDate": "2020-05-18T14:52:51Z", "message": "Handle #4961 - Kafka Streams sasl, ssl config."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d3d550bbee83c2e315e942e3848aa4090f5b9a85", "author": {"user": {"login": "alesj", "name": "Ale\u0161 Justin"}}, "url": "https://github.com/quarkusio/quarkus/commit/d3d550bbee83c2e315e942e3848aa4090f5b9a85", "committedDate": "2020-05-18T14:52:51Z", "message": "Handle #4961 - Kafka Streams sasl, ssl config."}, "afterCommit": {"oid": "2040dc05998c6616a562ba3ef19d2bf4bb838f58", "author": {"user": {"login": "alesj", "name": "Ale\u0161 Justin"}}, "url": "https://github.com/quarkusio/quarkus/commit/2040dc05998c6616a562ba3ef19d2bf4bb838f58", "committedDate": "2020-05-20T09:38:10Z", "message": "Handle #4961 - Kafka Streams sasl, ssl config."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75914f6c99ff4b5fa25a95e991b92f8349fb11c2", "author": {"user": {"login": "alesj", "name": "Ale\u0161 Justin"}}, "url": "https://github.com/quarkusio/quarkus/commit/75914f6c99ff4b5fa25a95e991b92f8349fb11c2", "committedDate": "2020-06-22T10:32:21Z", "message": "Handle #4961 - Kafka Streams sasl, ssl config."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2040dc05998c6616a562ba3ef19d2bf4bb838f58", "author": {"user": {"login": "alesj", "name": "Ale\u0161 Justin"}}, "url": "https://github.com/quarkusio/quarkus/commit/2040dc05998c6616a562ba3ef19d2bf4bb838f58", "committedDate": "2020-05-20T09:38:10Z", "message": "Handle #4961 - Kafka Streams sasl, ssl config."}, "afterCommit": {"oid": "75914f6c99ff4b5fa25a95e991b92f8349fb11c2", "author": {"user": {"login": "alesj", "name": "Ale\u0161 Justin"}}, "url": "https://github.com/quarkusio/quarkus/commit/75914f6c99ff4b5fa25a95e991b92f8349fb11c2", "committedDate": "2020-06-22T10:32:21Z", "message": "Handle #4961 - Kafka Streams sasl, ssl config."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "daf56bf1ba6a633a8e803b7964167d881f6f0661", "author": {"user": {"login": "vietk", "name": null}}, "url": "https://github.com/quarkusio/quarkus/commit/daf56bf1ba6a633a8e803b7964167d881f6f0661", "committedDate": "2020-06-22T15:00:37Z", "message": "Fix \"SSL Handshake failed\" issue\n\n- Add security.protocol as quarkus runtime options and allow replaying\n  the option as runtime init\n- Enable enableAllSecurityServices when building the native image for\n  the integration test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NzI4OTYx", "url": "https://github.com/quarkusio/quarkus/pull/7417#pullrequestreview-436728961", "createdAt": "2020-06-24T14:54:31Z", "commit": {"oid": "daf56bf1ba6a633a8e803b7964167d881f6f0661"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4009, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}