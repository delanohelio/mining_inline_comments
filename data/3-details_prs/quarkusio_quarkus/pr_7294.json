{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NDEwODM2", "number": 7294, "title": "Add Vault write and delete secret Fixes #7155", "bodyText": "Fixes #7155 plus provides deleteSecret.\nreadSecret has been changed also to return null if the path does not exist (rather than throwing a 404)", "createdAt": "2020-02-19T21:40:51Z", "url": "https://github.com/quarkusio/quarkus/pull/7294", "merged": true, "mergeCommit": {"oid": "268107aec7b550de9123b5219f5980d2a1ca2199"}, "closed": true, "closedAt": "2020-02-21T23:36:21Z", "author": {"login": "vsevel"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGKQFlgFqTM2MTg2MDM4OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGobEmAFqTM2Mjk3NzA4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxODYwMzg4", "url": "https://github.com/quarkusio/quarkus/pull/7294#pullrequestreview-361860388", "createdAt": "2020-02-20T12:26:14Z", "commit": {"oid": "d433fe8c6326eabd3eb966865da35f98323ea468"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjoyNjoxNFrOFsRcTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjoyNjoxNFrOFsRcTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk2NzQzOQ==", "bodyText": "@vsevel Why have you differentiated here ? Can we already have the users who have the code expecting the exceptions if nothing is available on a given path ?", "url": "https://github.com/quarkusio/quarkus/pull/7294#discussion_r381967439", "createdAt": "2020-02-20T12:26:14Z", "author": {"login": "sberyozkin"}, "path": "extensions/vault/runtime/src/main/java/io/quarkus/vault/runtime/client/OkHttpVaultClient.java", "diffHunk": "@@ -146,33 +169,45 @@ public VaultTransitEncrypt rewrap(String token, String keyName, VaultTransitRewr\n \n     // ---\n \n+    protected <T> T delete(String path, String token, Object body, Class<T> resultClass, int expectedCode) {\n+        Request request = builder(path, token).delete(requestBody(body)).build();\n+        return exec(request, resultClass, expectedCode, true);\n+    }\n+\n     protected <T> T post(String path, String token, Object body, Class<T> resultClass, int expectedCode) {\n         Request request = builder(path, token).post(requestBody(body)).build();\n-        return exec(request, resultClass, expectedCode);\n+        return exec(request, resultClass, expectedCode, true);\n     }\n \n     protected <T> T post(String path, String token, Object body, Class<T> resultClass) {\n         Request request = builder(path, token).post(requestBody(body)).build();\n-        return exec(request, resultClass);\n+        return exec(request, resultClass, true);\n     }\n \n     protected <T> T put(String path, String token, Object body, Class<T> resultClass) {\n         Request request = builder(path, token).put(requestBody(body)).build();\n-        return exec(request, resultClass);\n+        return exec(request, resultClass, true);\n     }\n \n     protected <T> T get(String path, String token, Class<T> resultClass) {\n+        return get(path, token, resultClass, true);\n+    }\n+\n+    protected <T> T get(String path, String token, Class<T> resultClass, boolean throwOn404) {\n         Request request = builder(path, token).get().build();\n-        return exec(request, resultClass);\n+        return exec(request, resultClass, throwOn404);\n     }\n \n-    private <T> T exec(Request request, Class<T> resultClass) {\n-        return exec(request, resultClass, 200);\n+    private <T> T exec(Request request, Class<T> resultClass, boolean throwOn404) {\n+        return exec(request, resultClass, 200, throwOn404);\n     }\n \n-    private <T> T exec(Request request, Class<T> resultClass, int expectedCode) {\n+    private <T> T exec(Request request, Class<T> resultClass, int expectedCode, boolean throwOn404) {\n         try (Response response = client.newCall(request).execute()) {\n             if (response.code() != expectedCode) {\n+                if (response.code() == 404 && !throwOn404) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d433fe8c6326eabd3eb966865da35f98323ea468"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMTcxMDk0", "url": "https://github.com/quarkusio/quarkus/pull/7294#pullrequestreview-362171094", "createdAt": "2020-02-20T19:25:59Z", "commit": {"oid": "d433fe8c6326eabd3eb966865da35f98323ea468"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65e98b2681ff312d748ff2688b1826e3568ddd6b", "author": {"user": {"login": "vsevel", "name": "Vincent Sevel"}}, "url": "https://github.com/quarkusio/quarkus/commit/65e98b2681ff312d748ff2688b1826e3568ddd6b", "committedDate": "2020-02-21T21:09:28Z", "message": "Add Vault write and delete secret"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "093215077f1ee4d1df2049feda31ca2b94c5b590", "author": {"user": {"login": "vsevel", "name": "Vincent Sevel"}}, "url": "https://github.com/quarkusio/quarkus/commit/093215077f1ee4d1df2049feda31ca2b94c5b590", "committedDate": "2020-02-21T21:08:53Z", "message": "Add Vault write and delete secret"}, "afterCommit": {"oid": "65e98b2681ff312d748ff2688b1826e3568ddd6b", "author": {"user": {"login": "vsevel", "name": "Vincent Sevel"}}, "url": "https://github.com/quarkusio/quarkus/commit/65e98b2681ff312d748ff2688b1826e3568ddd6b", "committedDate": "2020-02-21T21:09:28Z", "message": "Add Vault write and delete secret"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTc3MDgx", "url": "https://github.com/quarkusio/quarkus/pull/7294#pullrequestreview-362977081", "createdAt": "2020-02-21T23:35:24Z", "commit": {"oid": "65e98b2681ff312d748ff2688b1826e3568ddd6b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4142, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}