{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMTM5NzM1", "number": 10379, "title": "Add support for mutiny types in reactive routes", "bodyText": "Add support for Uni, Multi, and SSE to reactive routes.", "createdAt": "2020-06-30T16:15:56Z", "url": "https://github.com/quarkusio/quarkus/pull/10379", "merged": true, "mergeCommit": {"oid": "2f20cf5ad61558e341e6a967ace4aa3fce2cc61c"}, "closed": true, "closedAt": "2020-07-03T06:48:58Z", "author": {"login": "cescoffier"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcvwT1lAH2gAyNDQyMTM5NzM1OjcyMjVhZjZhYTY5NWNkMTU3NzgyMTY5N2Q3NDU2MTQ0MzVhZGEyMGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcxNkGVAFqTQ0MjE3NzIxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7225af6aa695cd1577821697d745614435ada20d", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/7225af6aa695cd1577821697d745614435ada20d", "committedDate": "2020-06-28T17:57:38Z", "message": "Add support for Uni and synchronous result in reactive routes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c748c5f2b6163053033bcc57612981a04166933", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/5c748c5f2b6163053033bcc57612981a04166933", "committedDate": "2020-06-29T13:23:13Z", "message": "Add support for Multi to  Reactive Routes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91e4741765370c374a37c99e9192b6b05cf1ca03", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/91e4741765370c374a37c99e9192b6b05cf1ca03", "committedDate": "2020-06-30T09:21:20Z", "message": "Add support for SSE response to Reactive Routes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00a6480706294e28269bebc93681856e7e7d90ae", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/00a6480706294e28269bebc93681856e7e7d90ae", "committedDate": "2020-06-30T16:14:59Z", "message": "Extend reactive route documentation with the Mutiny support"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNjkyMTIz", "url": "https://github.com/quarkusio/quarkus/pull/10379#pullrequestreview-440692123", "createdAt": "2020-07-01T09:16:31Z", "commit": {"oid": "00a6480706294e28269bebc93681856e7e7d90ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOToxNjozMVrOGrd0PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOToxNjozMVrOGrd0PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzMDQ2MQ==", "bodyText": "Hm, does it make sense to always produce a JSON array? It's not very consistent with Uni<String> and String return types.", "url": "https://github.com/quarkusio/quarkus/pull/10379#discussion_r448230461", "createdAt": "2020-07-01T09:16:31Z", "author": {"login": "mkouba"}, "path": "docs/src/main/asciidoc/reactive-routes.adoc", "diffHunk": "@@ -163,6 +163,189 @@ public class SimpleRoutes {\n ----\n <1> The `path` value is used as a prefix for any route method declared on the class where `Route#path()` is used. The `produces` value is used for content-based routing for all routes where `Route#produces()` is empty.\n \n+=== Returning Unis\n+\n+In a reactive route, you can return a `Uni` directly:\n+\n+[source,java]\n+----\n+@Route(path = \"/hello\")\n+Uni<String> hello(RoutingContext context) {\n+    return Uni.createFrom().item(\"Hello world!\");\n+}\n+\n+@Route(path = \"/person\")\n+Uni<Person> getPerson(RoutingContext context) {\n+    return Uni.createFrom().item(() -> new Person(\"neo\", 12345));\n+}\n+----\n+\n+Returning `Unis` is convenient when using a reactive client:\n+\n+[source,java]\n+----\n+@Route(path = \"/mail\")\n+Uni<Void> sendEmail(RoutingContext context) {\n+    return mailer.send(...);\n+}\n+----\n+\n+The item produced by the returned `Uni` can be:\n+\n+* a string - written into the HTTP response directly\n+* a buffer - written into the HTTP response directly\n+* an object - written into the HTTP response after having been encoded into JSON.\n+The `content-type` header is set to `application/json` if not already set.\n+\n+If the returned `Uni` produces a failure (or is `null`), an HTTP 500 response is written.\n+\n+Returning a `Uni<Void>` produces a 204 response (no content).\n+\n+=== Returning results\n+\n+You can also return a result directly:\n+\n+[source, java]\n+----\n+@Route(path = \"/hello\")\n+String helloSync(RoutingContext context) {\n+    return \"Hello world\";\n+}\n+----\n+\n+Be aware, the processing must be **non-blocking** as reactive routes are invoked on the IO Thread.\n+Otherwise, use the `blocking` attribute of the `@Route` annotation.\n+\n+The method can return:\n+\n+* a string - written into the HTTP response directly\n+* a buffer - written into the HTTP response directly\n+* an object - written into the HTTP response after having been encoded into JSON.\n+The `content-type` header is set to `application/json` if not already set.\n+\n+=== Returning Multis\n+\n+A reactive route can return a `Multi`.\n+The items are written one by one, in the response.\n+The response `Transfer-Encoding` header is set to `chunked`.\n+\n+[source, java]\n+----\n+@Route(path = \"/hello\")\n+Multi<String> hellos(RoutingContext context) {\n+    return Multi.createFrom().items(\"hello\", \"world\", \"!\");  // <1>\n+}\n+----\n+1. Produces `[\"hello\", \"world\", \"!\"]`\n+\n+The method can return:\n+\n+* a `Multi<String>` - the items are written one by one in a JSON Array.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00a6480706294e28269bebc93681856e7e7d90ae"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNjk4NTMx", "url": "https://github.com/quarkusio/quarkus/pull/10379#pullrequestreview-440698531", "createdAt": "2020-07-01T09:24:53Z", "commit": {"oid": "00a6480706294e28269bebc93681856e7e7d90ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOToyNDo1M1rOGreGvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOToyNDo1M1rOGreGvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzNTE5OQ==", "bodyText": "+1 if a method returns something we should make the context param optional...", "url": "https://github.com/quarkusio/quarkus/pull/10379#discussion_r448235199", "createdAt": "2020-07-01T09:24:53Z", "author": {"login": "mkouba"}, "path": "extensions/vertx-web/deployment/src/main/java/io/quarkus/vertx/web/deployment/VertxWebProcessor.java", "diffHunk": "@@ -496,25 +473,74 @@ void implementInvoke(BeanInfo bean, MethodInfo method, ClassCreator invokerCreat\n \n         ResultHandle paramHandle;\n         MethodDescriptor methodDescriptor;\n+        String returnType = descriptor.getReturnType().name().toString();\n+\n+        // TODO Make Routing Context optional, allow injected Response and Request individually.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00a6480706294e28269bebc93681856e7e7d90ae"}, "originalPosition": 215}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwOTA0MDE0", "url": "https://github.com/quarkusio/quarkus/pull/10379#pullrequestreview-440904014", "createdAt": "2020-07-01T14:08:17Z", "commit": {"oid": "00a6480706294e28269bebc93681856e7e7d90ae"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "673c1b5d56bf76491cc35d56af1e88caf93e0321", "author": {"user": {"login": "cescoffier", "name": "Clement Escoffier"}}, "url": "https://github.com/quarkusio/quarkus/commit/673c1b5d56bf76491cc35d56af1e88caf93e0321", "committedDate": "2020-07-02T14:34:45Z", "message": "Handle Json Array streaming separately from the unprocessed stream."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMTc3MjE4", "url": "https://github.com/quarkusio/quarkus/pull/10379#pullrequestreview-442177218", "createdAt": "2020-07-03T06:36:34Z", "commit": {"oid": "673c1b5d56bf76491cc35d56af1e88caf93e0321"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4221, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}