{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NDM0OTMy", "number": 13468, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzowMDowMVrOE9UXdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzowMDowMVrOE9UXdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzMyMjc4OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/security-openid-connect-web-authentication.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzowMDowMVrOH58eTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzowMDowMVrOH58eTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyMTY3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Register your own `io.quarkus.oidc.TokenStateManager' implementation as an ApplicationScoped CDI bean if you need to customize the way the tokens are associated with the session cookie. For exmaple, you may want to keep the tokens in a database and have only a database pointer stored in a session cookie. Note though that it may present some challenges in making the tokens available across multiple microservices nodes.\n          \n          \n            \n            Register your own `io.quarkus.oidc.TokenStateManager' implementation as an `@ApplicationScoped` CDI bean if you need to customize the way the tokens are associated with the session cookie. For example, you may want to keep the tokens in a database and have only a database pointer stored in a session cookie. Note though that it may present some challenges in making the tokens available across multiple microservices nodes.", "url": "https://github.com/quarkusio/quarkus/pull/13468#discussion_r530521676", "createdAt": "2020-11-25T17:00:01Z", "author": {"login": "gastaldi"}, "path": "docs/src/main/asciidoc/security-openid-connect-web-authentication.adoc", "diffHunk": "@@ -362,6 +362,17 @@ You can have this process further optimized by having a simple JavaScript functi\n \n Note this user session can not be extended forever - the returning user with the expired ID token will have to re-authenticate at the OIDC provider endpoint once the refresh token has expired.\n \n+=== TokenStateManager\n+\n+OIDC `CodeAuthenticationMechanism` is using the default `io.quarkus.oidc.TokenStateManager' interface implementation to keep the ID, access and refresh tokens returned in the authorization code or refresh grant responses in a session cookie. It makes Quarkus OIDC endpoints completely stateless.\n+\n+If all of these tokens are JWT tokens then combining them may produce a session cookie value larger than 4KB and the browsers may not keep this cookie.\n+In such cases, you can use `quarkus.oidc.token-state-manager.split-tokens=true` to have a unique session token per each of these three tokens.\n+\n+Alternatively, if having an ID token only is sufficient for your Quarkus endpoint and no access or refresh tokens are used then set `quarkus.oidc.state-session-manager.stategy=id-token`.\n+\n+Register your own `io.quarkus.oidc.TokenStateManager' implementation as an ApplicationScoped CDI bean if you need to customize the way the tokens are associated with the session cookie. For exmaple, you may want to keep the tokens in a database and have only a database pointer stored in a session cookie. Note though that it may present some challenges in making the tokens available across multiple microservices nodes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "856cda520f2ad7f111ad704047d09b9188f05d05"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3831, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}