{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNTU4Mzg1", "number": 6581, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMDowNTo0MlrODYcx8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMToxNDoxNVrODYd_eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTYzOTUyOnYy", "diffSide": "RIGHT", "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/EventImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMDowNTo0MlrOFeUD-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMDozOToxN1rOFeVDXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMzMDI5OA==", "bodyText": "Not sure if we should log this somehow - we know there are tx observers but either Narayna isn't present (no access to SyncRegistry) or no tx is in progress ATM.", "url": "https://github.com/quarkusio/quarkus/pull/6581#discussion_r367330298", "createdAt": "2020-01-16T10:05:42Z", "author": {"login": "manovotn"}, "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/EventImpl.java", "diffHunk": "@@ -209,8 +228,42 @@ void notify(T event) {\n         }\n \n         void notify(T event, ObserverExceptionHandler exceptionHandler, boolean async) {\n-            if (!isEmpty()) {\n+            if (!transactionalObserverMethodsEmpty()) {\n+                InstanceHandle<TransactionSynchronizationRegistry> registryInstance = Arc.container()\n+                        .instance(TransactionSynchronizationRegistry.class);\n+                if (registryInstance.isAvailable() && registryInstance.get().getTransactionStatus() == 0) {\n+                    // we have one or more transactional OM, and TransactionSynchronizationRegistry is available\n+                    // we attempts to register JTA synchronization\n+                    List<DeferredEventNotification<?>> deferredEvents = new ArrayList<>();\n+                    EventContext eventContext = new EventContextImpl<>(event, eventMetadata);\n+                    for (ObserverMethod<? super T> om : transactionalObserverMethods) {\n+                        deferredEvents\n+                                .add(new DeferredEventNotification(om, eventContext, Status.valueOf(om.getTransactionPhase())));\n+                    }\n+                    Synchronization sync = new ArcSynchronization(deferredEvents);\n+                    TransactionSynchronizationRegistry registry = registryInstance.get();\n+                    try {\n+                        registry.registerInterposedSynchronization(sync);\n+                    } catch (Exception e) {\n+                        if (e.getCause() instanceof RollbackException || e.getCause() instanceof IllegalStateException) {\n+                            // registration failed, merge back with non-transactional methods\n+                            // AFTER_SUCCESS are accordingly to CDI spec left out\n+                            observerMethods.addAll(transactionalObserverMethods.stream()\n+                                    .filter(observerMethod -> !observerMethod.getTransactionPhase()\n+                                            .equals(TransactionPhase.AFTER_SUCCESS))\n+                                    .collect(Collectors.toList()));\n+                        }\n+                    }\n+                } else {\n+                    // no JTA available, we will have to notify transactional OM along with all other OM\n+                    observerMethods.addAll(transactionalObserverMethods);\n+                    // TODO log this somehow?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fb3e1b7b256ebc6e3266d3a60201d4a55bc32ec"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM0NjUyNA==", "bodyText": "I don't think we should log anything here...", "url": "https://github.com/quarkusio/quarkus/pull/6581#discussion_r367346524", "createdAt": "2020-01-16T10:39:17Z", "author": {"login": "mkouba"}, "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/EventImpl.java", "diffHunk": "@@ -209,8 +228,42 @@ void notify(T event) {\n         }\n \n         void notify(T event, ObserverExceptionHandler exceptionHandler, boolean async) {\n-            if (!isEmpty()) {\n+            if (!transactionalObserverMethodsEmpty()) {\n+                InstanceHandle<TransactionSynchronizationRegistry> registryInstance = Arc.container()\n+                        .instance(TransactionSynchronizationRegistry.class);\n+                if (registryInstance.isAvailable() && registryInstance.get().getTransactionStatus() == 0) {\n+                    // we have one or more transactional OM, and TransactionSynchronizationRegistry is available\n+                    // we attempts to register JTA synchronization\n+                    List<DeferredEventNotification<?>> deferredEvents = new ArrayList<>();\n+                    EventContext eventContext = new EventContextImpl<>(event, eventMetadata);\n+                    for (ObserverMethod<? super T> om : transactionalObserverMethods) {\n+                        deferredEvents\n+                                .add(new DeferredEventNotification(om, eventContext, Status.valueOf(om.getTransactionPhase())));\n+                    }\n+                    Synchronization sync = new ArcSynchronization(deferredEvents);\n+                    TransactionSynchronizationRegistry registry = registryInstance.get();\n+                    try {\n+                        registry.registerInterposedSynchronization(sync);\n+                    } catch (Exception e) {\n+                        if (e.getCause() instanceof RollbackException || e.getCause() instanceof IllegalStateException) {\n+                            // registration failed, merge back with non-transactional methods\n+                            // AFTER_SUCCESS are accordingly to CDI spec left out\n+                            observerMethods.addAll(transactionalObserverMethods.stream()\n+                                    .filter(observerMethod -> !observerMethod.getTransactionPhase()\n+                                            .equals(TransactionPhase.AFTER_SUCCESS))\n+                                    .collect(Collectors.toList()));\n+                        }\n+                    }\n+                } else {\n+                    // no JTA available, we will have to notify transactional OM along with all other OM\n+                    observerMethods.addAll(transactionalObserverMethods);\n+                    // TODO log this somehow?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMzMDI5OA=="}, "originalCommit": {"oid": "0fb3e1b7b256ebc6e3266d3a60201d4a55bc32ec"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTc0NTAyOnYy", "diffSide": "LEFT", "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/ObserverInfo.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMDozOTo1MlrOFeVEjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjo0NzozNlrOFeYNzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM0NjgyOA==", "bodyText": "I'd keep this warning (with a modified message) when JTA is not available...", "url": "https://github.com/quarkusio/quarkus/pull/6581#discussion_r367346828", "createdAt": "2020-01-16T10:39:52Z", "author": {"login": "mkouba"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/ObserverInfo.java", "diffHunk": "@@ -73,12 +72,6 @@ static ObserverInfo create(BeanInfo declaringBean, MethodInfo observerMethod, In\n             isAsync = context.isAsync();\n         }\n \n-        if (!TransactionPhase.IN_PROGRESS.equals(transactionPhase)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fb3e1b7b256ebc6e3266d3a60201d4a55bc32ec"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM3MDA2Mw==", "bodyText": "This is done in processor - at deployment time we don't really know if we will have access to TransactionSynchronizationRegistry, right?", "url": "https://github.com/quarkusio/quarkus/pull/6581#discussion_r367370063", "createdAt": "2020-01-16T11:35:07Z", "author": {"login": "manovotn"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/ObserverInfo.java", "diffHunk": "@@ -73,12 +72,6 @@ static ObserverInfo create(BeanInfo declaringBean, MethodInfo observerMethod, In\n             isAsync = context.isAsync();\n         }\n \n-        if (!TransactionPhase.IN_PROGRESS.equals(transactionPhase)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM0NjgyOA=="}, "originalCommit": {"oid": "0fb3e1b7b256ebc6e3266d3a60201d4a55bc32ec"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5ODM1MQ==", "bodyText": "JTA extension registers Capabilities.TRANSACTIONS and so it's really easy to verify if it's available - just inject the Capabilities build item and then Capabilities.isCapabilityPresent(String).", "url": "https://github.com/quarkusio/quarkus/pull/6581#discussion_r367398351", "createdAt": "2020-01-16T12:47:36Z", "author": {"login": "mkouba"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/ObserverInfo.java", "diffHunk": "@@ -73,12 +72,6 @@ static ObserverInfo create(BeanInfo declaringBean, MethodInfo observerMethod, In\n             isAsync = context.isAsync();\n         }\n \n-        if (!TransactionPhase.IN_PROGRESS.equals(transactionPhase)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM0NjgyOA=="}, "originalCommit": {"oid": "0fb3e1b7b256ebc6e3266d3a60201d4a55bc32ec"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTgzMjAwOnYy", "diffSide": "LEFT", "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/ArcContainerImpl.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMToxMjowOFrOFeV6fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjo1NDoyOFrOFeYYfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MDYzOA==", "bodyText": "Why do you remove this line? We can sort them once and then it's not necessary to sort them every time a notifier is executed, or?", "url": "https://github.com/quarkusio/quarkus/pull/6581#discussion_r367360638", "createdAt": "2020-01-16T11:12:08Z", "author": {"login": "mkouba"}, "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/ArcContainerImpl.java", "diffHunk": "@@ -541,8 +541,6 @@ private static int compareAlternativeBeans(InjectableBean<?> bean1, InjectableBe\n                 }\n             }\n         }\n-        // Observers with smaller priority values are called first\n-        Collections.sort(resolvedObservers, InjectableObserverMethod::compare);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fb3e1b7b256ebc6e3266d3a60201d4a55bc32ec"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2Mjc4OA==", "bodyText": "Because I split them into tx and standard ones and then, when JTA is not available, I need to merge them together again, which means I need to sort them again anyway so this just avoids double sort.", "url": "https://github.com/quarkusio/quarkus/pull/6581#discussion_r367362788", "createdAt": "2020-01-16T11:17:35Z", "author": {"login": "manovotn"}, "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/ArcContainerImpl.java", "diffHunk": "@@ -541,8 +541,6 @@ private static int compareAlternativeBeans(InjectableBean<?> bean1, InjectableBe\n                 }\n             }\n         }\n-        // Observers with smaller priority values are called first\n-        Collections.sort(resolvedObservers, InjectableObserverMethod::compare);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MDYzOA=="}, "originalCommit": {"oid": "0fb3e1b7b256ebc6e3266d3a60201d4a55bc32ec"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MzUzNA==", "bodyText": "Hm, you mean when a transaction is not available? We could probably optimize this a little bit...", "url": "https://github.com/quarkusio/quarkus/pull/6581#discussion_r367363534", "createdAt": "2020-01-16T11:19:20Z", "author": {"login": "mkouba"}, "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/ArcContainerImpl.java", "diffHunk": "@@ -541,8 +541,6 @@ private static int compareAlternativeBeans(InjectableBean<?> bean1, InjectableBe\n                 }\n             }\n         }\n-        // Observers with smaller priority values are called first\n-        Collections.sort(resolvedObservers, InjectableObserverMethod::compare);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MDYzOA=="}, "originalCommit": {"oid": "0fb3e1b7b256ebc6e3266d3a60201d4a55bc32ec"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM3MjkxMw==", "bodyText": "In what way? We cannot really know before hand if a tx will be active (e.g. if we will need to merge them together).", "url": "https://github.com/quarkusio/quarkus/pull/6581#discussion_r367372913", "createdAt": "2020-01-16T11:42:28Z", "author": {"login": "manovotn"}, "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/ArcContainerImpl.java", "diffHunk": "@@ -541,8 +541,6 @@ private static int compareAlternativeBeans(InjectableBean<?> bean1, InjectableBe\n                 }\n             }\n         }\n-        // Observers with smaller priority values are called first\n-        Collections.sort(resolvedObservers, InjectableObserverMethod::compare);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MDYzOA=="}, "originalCommit": {"oid": "0fb3e1b7b256ebc6e3266d3a60201d4a55bc32ec"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQwMTA4NQ==", "bodyText": "Well, you could only have one sorted list List<InjectableObserverMethod<? super T>> and when a TX is not active (or no TX observers) just use the list or when a TX is active simply filter the list and add only TX observers to the synchronization...", "url": "https://github.com/quarkusio/quarkus/pull/6581#discussion_r367401085", "createdAt": "2020-01-16T12:54:28Z", "author": {"login": "mkouba"}, "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/ArcContainerImpl.java", "diffHunk": "@@ -541,8 +541,6 @@ private static int compareAlternativeBeans(InjectableBean<?> bean1, InjectableBe\n                 }\n             }\n         }\n-        // Observers with smaller priority values are called first\n-        Collections.sort(resolvedObservers, InjectableObserverMethod::compare);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MDYzOA=="}, "originalCommit": {"oid": "0fb3e1b7b256ebc6e3266d3a60201d4a55bc32ec"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTgzNDIxOnYy", "diffSide": "RIGHT", "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/EventImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMToxMjo1NlrOFeV7ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMToxMjo1NlrOFeV7ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MDk2Mw==", "bodyText": "\"We attempt to...\" ;-)", "url": "https://github.com/quarkusio/quarkus/pull/6581#discussion_r367360963", "createdAt": "2020-01-16T11:12:56Z", "author": {"login": "mkouba"}, "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/EventImpl.java", "diffHunk": "@@ -209,8 +228,42 @@ void notify(T event) {\n         }\n \n         void notify(T event, ObserverExceptionHandler exceptionHandler, boolean async) {\n-            if (!isEmpty()) {\n+            if (!transactionalObserverMethodsEmpty()) {\n+                InstanceHandle<TransactionSynchronizationRegistry> registryInstance = Arc.container()\n+                        .instance(TransactionSynchronizationRegistry.class);\n+                if (registryInstance.isAvailable() && registryInstance.get().getTransactionStatus() == 0) {\n+                    // we have one or more transactional OM, and TransactionSynchronizationRegistry is available\n+                    // we attempts to register JTA synchronization", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fb3e1b7b256ebc6e3266d3a60201d4a55bc32ec"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTgzODAwOnYy", "diffSide": "RIGHT", "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/EventImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMToxNDoxNVrOFeV98A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMToxNDoxNVrOFeV98A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MTUyMA==", "bodyText": "We should use the constant from javax.transaction.Status...", "url": "https://github.com/quarkusio/quarkus/pull/6581#discussion_r367361520", "createdAt": "2020-01-16T11:14:15Z", "author": {"login": "mkouba"}, "path": "independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/EventImpl.java", "diffHunk": "@@ -209,8 +228,42 @@ void notify(T event) {\n         }\n \n         void notify(T event, ObserverExceptionHandler exceptionHandler, boolean async) {\n-            if (!isEmpty()) {\n+            if (!transactionalObserverMethodsEmpty()) {\n+                InstanceHandle<TransactionSynchronizationRegistry> registryInstance = Arc.container()\n+                        .instance(TransactionSynchronizationRegistry.class);\n+                if (registryInstance.isAvailable() && registryInstance.get().getTransactionStatus() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fb3e1b7b256ebc6e3266d3a60201d4a55bc32ec"}, "originalPosition": 91}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1218, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}