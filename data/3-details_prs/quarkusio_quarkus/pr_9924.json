{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNjQzNTM5", "number": 9924, "title": "ArC - support @TransientReference", "bodyText": "resolves #6858", "createdAt": "2020-06-10T19:04:43Z", "url": "https://github.com/quarkusio/quarkus/pull/9924", "merged": true, "mergeCommit": {"oid": "13b05d0528402f82fdd5aaa8e707288b43142316"}, "closed": true, "closedAt": "2020-06-11T13:57:24Z", "author": {"login": "mkouba"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqFvQzgFqTQyODU2Mzc5OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqJN9vAFqTQyODY2MjE3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTYzNzk5", "url": "https://github.com/quarkusio/quarkus/pull/9924#pullrequestreview-428563799", "createdAt": "2020-06-11T03:13:28Z", "commit": {"oid": "abc82d8cf937f50df47476d530e80230b5cd3534"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMzoxMzoyOFrOGiNEGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMzozMTo1OFrOGiNVqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUxODgwOA==", "bodyText": "Maybe extract to a util method? The same destroy logic appears four times in this class.", "url": "https://github.com/quarkusio/quarkus/pull/9924#discussion_r438518808", "createdAt": "2020-06-11T03:13:28Z", "author": {"login": "manovotn"}, "path": "independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanGenerator.java", "diffHunk": "@@ -1414,6 +1462,12 @@ void implementCreateForClassBean(ClassOutput classOutput, ClassCreator beanCreat\n                 create.invokeVirtualMethod(MethodDescriptor.of(methodInjection.target.asMethod()), instanceHandle,\n                         referenceHandles);\n             }\n+\n+            // Destroy injected transient references\n+            for (TransientReference transientReference : transientReferences) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abc82d8cf937f50df47476d530e80230b5cd3534"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyMjA1Mg==", "bodyText": "Nice, I didn't even know we actually have Annotated impls just for InjectionPoint :)", "url": "https://github.com/quarkusio/quarkus/pull/9924#discussion_r438522052", "createdAt": "2020-06-11T03:26:42Z", "author": {"login": "manovotn"}, "path": "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/transientreference/TransientReferenceDestroyedTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package io.quarkus.arc.test.transientreference;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.arc.test.ArcTestContainer;\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.context.control.ActivateRequestContext;\n+import javax.enterprise.inject.Disposes;\n+import javax.enterprise.inject.Produces;\n+import javax.enterprise.inject.TransientReference;\n+import javax.enterprise.inject.spi.AnnotatedField;\n+import javax.enterprise.inject.spi.InjectionPoint;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+public class TransientReferenceDestroyedTest {\n+\n+    @RegisterExtension\n+    public ArcTestContainer container = new ArcTestContainer(Controller.class, InterceptedController.class, BeerProducer.class,\n+            Beer.class);\n+\n+    @Test\n+    public void testTransientReferences() {\n+        Controller controller = Arc.container().instance(Controller.class).get();\n+        assertNotNull(controller.theBeer);\n+        assertTrue(Arc.container().instance(Integer.class).get() > 0);\n+        assertEquals(3, BeerProducer.DESTROYED.size(), \"Destroyed beers: \" + BeerProducer.DESTROYED);\n+        assertTrue(BeerProducer.DESTROYED.contains(1));\n+        assertTrue(BeerProducer.DESTROYED.contains(2));\n+        assertTrue(BeerProducer.DESTROYED.contains(3));\n+\n+        BeerProducer.COUNTER.set(0);\n+        BeerProducer.DESTROYED.clear();\n+\n+        InterceptedController interceptedController = Arc.container().instance(InterceptedController.class).get();\n+        assertNotNull(interceptedController.getTheBeer());\n+        assertTrue(Arc.container().instance(Long.class).get() > 0);\n+        assertEquals(3, BeerProducer.DESTROYED.size(), \"Destroyed beers: \" + BeerProducer.DESTROYED);\n+        assertTrue(BeerProducer.DESTROYED.contains(1));\n+        assertTrue(BeerProducer.DESTROYED.contains(2));\n+        assertTrue(BeerProducer.DESTROYED.contains(3));\n+    }\n+\n+    @Singleton\n+    static class Controller {\n+\n+        @Inject\n+        Beer theBeer;\n+\n+        Controller(@TransientReference Beer beer) {\n+        }\n+\n+        @Inject\n+        void setBeer(@TransientReference Beer beer) {\n+        }\n+\n+        @Produces\n+        int produceInt(@TransientReference Beer beer) {\n+            return beer.id;\n+        }\n+\n+    }\n+\n+    @ActivateRequestContext\n+    @ApplicationScoped\n+    static class InterceptedController {\n+\n+        @Inject\n+        Beer theBeer;\n+\n+        InterceptedController() {\n+        }\n+\n+        @Inject\n+        InterceptedController(@TransientReference Beer beer) {\n+        }\n+\n+        public Beer getTheBeer() {\n+            return theBeer;\n+        }\n+\n+        @Inject\n+        void setBeer(@TransientReference Beer beer) {\n+        }\n+\n+        @Produces\n+        long produceLong(@TransientReference Beer beer) {\n+            return beer.id;\n+        }\n+\n+    }\n+\n+    @Singleton\n+    static class BeerProducer {\n+\n+        static final AtomicInteger COUNTER = new AtomicInteger();\n+        static final List<Integer> DESTROYED = new CopyOnWriteArrayList<>();\n+\n+        @Dependent\n+        @Produces\n+        Beer newBeer(InjectionPoint injectionPoint) {\n+            int id;\n+            if (injectionPoint.getAnnotated() instanceof AnnotatedField) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abc82d8cf937f50df47476d530e80230b5cd3534"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyMzMwNA==", "bodyText": "Should we also test injection of transient reference bean into observer method?", "url": "https://github.com/quarkusio/quarkus/pull/9924#discussion_r438523304", "createdAt": "2020-06-11T03:31:58Z", "author": {"login": "manovotn"}, "path": "independent-projects/arc/tests/src/test/java/io/quarkus/arc/test/transientreference/TransientReferenceDestroyedTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package io.quarkus.arc.test.transientreference;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.arc.test.ArcTestContainer;\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.context.control.ActivateRequestContext;\n+import javax.enterprise.inject.Disposes;\n+import javax.enterprise.inject.Produces;\n+import javax.enterprise.inject.TransientReference;\n+import javax.enterprise.inject.spi.AnnotatedField;\n+import javax.enterprise.inject.spi.InjectionPoint;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+public class TransientReferenceDestroyedTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abc82d8cf937f50df47476d530e80230b5cd3534"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8acd8af344ed03d37d2f6bfaa666ea40e36b026", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/c8acd8af344ed03d37d2f6bfaa666ea40e36b026", "committedDate": "2020-06-11T06:49:28Z", "message": "ArC - support @TransientReference\n\n- resolves #6858"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "abc82d8cf937f50df47476d530e80230b5cd3534", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/abc82d8cf937f50df47476d530e80230b5cd3534", "committedDate": "2020-06-10T19:03:43Z", "message": "ArC - support @TransientReference\n\n- resolves #6858"}, "afterCommit": {"oid": "c8acd8af344ed03d37d2f6bfaa666ea40e36b026", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus/commit/c8acd8af344ed03d37d2f6bfaa666ea40e36b026", "committedDate": "2020-06-11T06:49:28Z", "message": "ArC - support @TransientReference\n\n- resolves #6858"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NjYyMTcw", "url": "https://github.com/quarkusio/quarkus/pull/9924#pullrequestreview-428662170", "createdAt": "2020-06-11T07:35:18Z", "commit": {"oid": "c8acd8af344ed03d37d2f6bfaa666ea40e36b026"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4341, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}