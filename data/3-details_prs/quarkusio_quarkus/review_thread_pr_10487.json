{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NDkxNjQ5", "number": 10487, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNDozNToxMFrOELiV1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNDo0MjozNFrOELiZ1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTMyNDM5OnYy", "diffSide": "RIGHT", "path": "test-framework/security/src/main/java/io/quarkus/test/security/QuarkusSecurityTestExtension.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNDozNToxMFrOGtIi1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNTowNDoyN1rOGtI6VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3OTA5NA==", "bodyText": "Shouldn't this be false?", "url": "https://github.com/quarkusio/quarkus/pull/10487#discussion_r449979094", "createdAt": "2020-07-06T04:35:10Z", "author": {"login": "geoand"}, "path": "test-framework/security/src/main/java/io/quarkus/test/security/QuarkusSecurityTestExtension.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package io.quarkus.test.security;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+\n+import javax.enterprise.inject.spi.CDI;\n+\n+import io.quarkus.security.runtime.QuarkusPrincipal;\n+import io.quarkus.security.runtime.QuarkusSecurityIdentity;\n+import io.quarkus.test.junit.callback.QuarkusTestAfterEachCallback;\n+import io.quarkus.test.junit.callback.QuarkusTestBeforeEachCallback;\n+import io.quarkus.test.junit.callback.QuarkusTestMethodContext;\n+\n+public class QuarkusSecurityTestExtension implements QuarkusTestBeforeEachCallback, QuarkusTestAfterEachCallback {\n+\n+    @Override\n+    public void afterEach(QuarkusTestMethodContext context) {\n+        CDI.current().select(TestAuthController.class).get().setEnabled(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9d1bf44ad662ffe47b0b4c7ff0e5017b821fa5f"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4MDgwMQ==", "bodyText": "No, the default state is for security to be enabled.", "url": "https://github.com/quarkusio/quarkus/pull/10487#discussion_r449980801", "createdAt": "2020-07-06T04:43:24Z", "author": {"login": "stuartwdouglas"}, "path": "test-framework/security/src/main/java/io/quarkus/test/security/QuarkusSecurityTestExtension.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package io.quarkus.test.security;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+\n+import javax.enterprise.inject.spi.CDI;\n+\n+import io.quarkus.security.runtime.QuarkusPrincipal;\n+import io.quarkus.security.runtime.QuarkusSecurityIdentity;\n+import io.quarkus.test.junit.callback.QuarkusTestAfterEachCallback;\n+import io.quarkus.test.junit.callback.QuarkusTestBeforeEachCallback;\n+import io.quarkus.test.junit.callback.QuarkusTestMethodContext;\n+\n+public class QuarkusSecurityTestExtension implements QuarkusTestBeforeEachCallback, QuarkusTestAfterEachCallback {\n+\n+    @Override\n+    public void afterEach(QuarkusTestMethodContext context) {\n+        CDI.current().select(TestAuthController.class).get().setEnabled(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3OTA5NA=="}, "originalCommit": {"oid": "e9d1bf44ad662ffe47b0b4c7ff0e5017b821fa5f"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4MTk1Ng==", "bodyText": "oops, I just realised that the default was false, so the first test would run with security disabled, I have fixed this.", "url": "https://github.com/quarkusio/quarkus/pull/10487#discussion_r449981956", "createdAt": "2020-07-06T04:49:30Z", "author": {"login": "stuartwdouglas"}, "path": "test-framework/security/src/main/java/io/quarkus/test/security/QuarkusSecurityTestExtension.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package io.quarkus.test.security;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+\n+import javax.enterprise.inject.spi.CDI;\n+\n+import io.quarkus.security.runtime.QuarkusPrincipal;\n+import io.quarkus.security.runtime.QuarkusSecurityIdentity;\n+import io.quarkus.test.junit.callback.QuarkusTestAfterEachCallback;\n+import io.quarkus.test.junit.callback.QuarkusTestBeforeEachCallback;\n+import io.quarkus.test.junit.callback.QuarkusTestMethodContext;\n+\n+public class QuarkusSecurityTestExtension implements QuarkusTestBeforeEachCallback, QuarkusTestAfterEachCallback {\n+\n+    @Override\n+    public void afterEach(QuarkusTestMethodContext context) {\n+        CDI.current().select(TestAuthController.class).get().setEnabled(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3OTA5NA=="}, "originalCommit": {"oid": "e9d1bf44ad662ffe47b0b4c7ff0e5017b821fa5f"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4NTEwOQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/quarkusio/quarkus/pull/10487#discussion_r449985109", "createdAt": "2020-07-06T05:04:27Z", "author": {"login": "geoand"}, "path": "test-framework/security/src/main/java/io/quarkus/test/security/QuarkusSecurityTestExtension.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package io.quarkus.test.security;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+\n+import javax.enterprise.inject.spi.CDI;\n+\n+import io.quarkus.security.runtime.QuarkusPrincipal;\n+import io.quarkus.security.runtime.QuarkusSecurityIdentity;\n+import io.quarkus.test.junit.callback.QuarkusTestAfterEachCallback;\n+import io.quarkus.test.junit.callback.QuarkusTestBeforeEachCallback;\n+import io.quarkus.test.junit.callback.QuarkusTestMethodContext;\n+\n+public class QuarkusSecurityTestExtension implements QuarkusTestBeforeEachCallback, QuarkusTestAfterEachCallback {\n+\n+    @Override\n+    public void afterEach(QuarkusTestMethodContext context) {\n+        CDI.current().select(TestAuthController.class).get().setEnabled(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3OTA5NA=="}, "originalCommit": {"oid": "e9d1bf44ad662ffe47b0b4c7ff0e5017b821fa5f"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTMzNDYxOnYy", "diffSide": "RIGHT", "path": "test-framework/security/src/main/java/io/quarkus/test/security/TestSecurity.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNDo0MjozNFrOGtIo1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNDo0MjozNFrOGtIo1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4MDYyOQ==", "bodyText": "I am not sold on the name, but I don't have any better alternatives to offer :(", "url": "https://github.com/quarkusio/quarkus/pull/10487#discussion_r449980629", "createdAt": "2020-07-06T04:42:34Z", "author": {"login": "geoand"}, "path": "test-framework/security/src/main/java/io/quarkus/test/security/TestSecurity.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package io.quarkus.test.security;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ ElementType.TYPE, ElementType.METHOD })\n+public @interface TestSecurity {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9d1bf44ad662ffe47b0b4c7ff0e5017b821fa5f"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2561, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}