{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1OTI4Mjgz", "number": 12791, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTowMToxMFrOEvXHCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTowMToxMFrOEvXHCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDk3MTYzOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/opentracing.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTowMToxMFrOHkTLNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTowMToxMFrOHkTLNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNDk1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            NOTE: this is the best way to add OpenTracing capability to reactive messaging based application by adding the `Traced` annotation to all incoming methods.\n          \n          \n            \n            NOTE: the best way to add OpenTracing capability to reactive messaging based applications is by adding the `Traced` annotation to all incoming methods.", "url": "https://github.com/quarkusio/quarkus/pull/12791#discussion_r507824951", "createdAt": "2020-10-19T15:01:10Z", "author": {"login": "gastaldi"}, "path": "docs/src/main/asciidoc/opentracing.adoc", "diffHunk": "@@ -165,6 +165,33 @@ Then visit the http://localhost:16686[Jaeger UI] to see the tracing information.\n \n Hit `CTRL+C` to stop the application.\n \n+== Tracing additional methods\n+\n+REST endpoints are automatically traced.\n+If you need to trace additional methods, you can use the `org.eclipse.microprofile.opentracing.Traced` annotation at class or method level.\n+\n+This can be useful to trace incoming requests from non-REST calls (like request coming from a message) or to create spans inside a trace.\n+\n+Here is an example of a `FrancophoneService` which methods are traced.\n+\n+[code, java]\n+----\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.eclipse.microprofile.opentracing.Traced;\n+\n+@Traced\n+@ApplicationScoped\n+public class FrancophoneService {\n+\n+    public String bonjour() {\n+        return \"bonjour\";\n+    }\n+}\n+----\n+\n+NOTE: this is the best way to add OpenTracing capability to reactive messaging based application by adding the `Traced` annotation to all incoming methods.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c13cfb15fea4731c019fc5f2543658e2d3782e82"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4176, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}