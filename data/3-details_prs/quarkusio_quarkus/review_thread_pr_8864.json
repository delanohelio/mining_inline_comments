{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MTY4OTE5", "number": 8864, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDoxMjo0MVrOD5AfzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMjoyNzoyNFrOD5MCdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTAzNTY0OnYy", "diffSide": "RIGHT", "path": "devtools/maven/src/main/java/io/quarkus/maven/DevMojo.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDoxMjo0MVrOGQCPuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNToyOTowNVrOGQFpPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2NzE5Mw==", "bodyText": "I find this very fragile. IIRC, it's not the first time we discuss about this. What happens if there is a properly escaped space in the property? That happens a lot with paths on Windows.\nCan't we get some Maven classes to parse the command line somehow? I thought we did that somewhere else last time we discussed this.", "url": "https://github.com/quarkusio/quarkus/pull/8864#discussion_r419467193", "createdAt": "2020-05-04T14:12:41Z", "author": {"login": "gsmet"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/DevMojo.java", "diffHunk": "@@ -642,13 +643,47 @@ void prepare() throws Exception {\n             if (devModeContext.isEnablePreview()) {\n                 args.add(DevModeContext.ENABLE_PREVIEW_FLAG);\n             }\n+\n+            propagateUserProperties();\n+\n             args.add(\"-jar\");\n             args.add(tempFile.getAbsolutePath());\n             if (argsString != null) {\n                 args.addAll(Arrays.asList(CommandLineUtils.translateCommandline(argsString)));\n             }\n         }\n \n+        private void propagateUserProperties() {\n+            final String mavenCmdLine = BootstrapMavenOptions.getMavenCmdLine();\n+            if (mavenCmdLine == null || mavenCmdLine.isEmpty()) {\n+                return;\n+            }\n+            int i = mavenCmdLine.indexOf(\"-D\");\n+            if (i < 0) {\n+                return;\n+            }\n+            final StringBuilder buf = new StringBuilder();\n+            buf.append(\"-D\");\n+            i += 2;\n+            while (i < mavenCmdLine.length()) {\n+                final char ch = mavenCmdLine.charAt(i++);\n+                if (!Character.isWhitespace(ch)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b5a0b5911eb3d17bfd9d4c41c72df10f6e36c54"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ4MTE0OQ==", "bodyText": "You're right about escaping. It's not Maven-specific parsing though.", "url": "https://github.com/quarkusio/quarkus/pull/8864#discussion_r419481149", "createdAt": "2020-05-04T14:31:36Z", "author": {"login": "aloubyansky"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/DevMojo.java", "diffHunk": "@@ -642,13 +643,47 @@ void prepare() throws Exception {\n             if (devModeContext.isEnablePreview()) {\n                 args.add(DevModeContext.ENABLE_PREVIEW_FLAG);\n             }\n+\n+            propagateUserProperties();\n+\n             args.add(\"-jar\");\n             args.add(tempFile.getAbsolutePath());\n             if (argsString != null) {\n                 args.addAll(Arrays.asList(CommandLineUtils.translateCommandline(argsString)));\n             }\n         }\n \n+        private void propagateUserProperties() {\n+            final String mavenCmdLine = BootstrapMavenOptions.getMavenCmdLine();\n+            if (mavenCmdLine == null || mavenCmdLine.isEmpty()) {\n+                return;\n+            }\n+            int i = mavenCmdLine.indexOf(\"-D\");\n+            if (i < 0) {\n+                return;\n+            }\n+            final StringBuilder buf = new StringBuilder();\n+            buf.append(\"-D\");\n+            i += 2;\n+            while (i < mavenCmdLine.length()) {\n+                final char ch = mavenCmdLine.charAt(i++);\n+                if (!Character.isWhitespace(ch)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2NzE5Mw=="}, "originalCommit": {"oid": "2b5a0b5911eb3d17bfd9d4c41c72df10f6e36c54"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ4MzA4Mw==", "bodyText": "I agree the escaping is not Maven specific but I suppose we should be in line with what Maven does? AFAICS we are in a Maven specific module.", "url": "https://github.com/quarkusio/quarkus/pull/8864#discussion_r419483083", "createdAt": "2020-05-04T14:34:14Z", "author": {"login": "gsmet"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/DevMojo.java", "diffHunk": "@@ -642,13 +643,47 @@ void prepare() throws Exception {\n             if (devModeContext.isEnablePreview()) {\n                 args.add(DevModeContext.ENABLE_PREVIEW_FLAG);\n             }\n+\n+            propagateUserProperties();\n+\n             args.add(\"-jar\");\n             args.add(tempFile.getAbsolutePath());\n             if (argsString != null) {\n                 args.addAll(Arrays.asList(CommandLineUtils.translateCommandline(argsString)));\n             }\n         }\n \n+        private void propagateUserProperties() {\n+            final String mavenCmdLine = BootstrapMavenOptions.getMavenCmdLine();\n+            if (mavenCmdLine == null || mavenCmdLine.isEmpty()) {\n+                return;\n+            }\n+            int i = mavenCmdLine.indexOf(\"-D\");\n+            if (i < 0) {\n+                return;\n+            }\n+            final StringBuilder buf = new StringBuilder();\n+            buf.append(\"-D\");\n+            i += 2;\n+            while (i < mavenCmdLine.length()) {\n+                final char ch = mavenCmdLine.charAt(i++);\n+                if (!Character.isWhitespace(ch)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2NzE5Mw=="}, "originalCommit": {"oid": "2b5a0b5911eb3d17bfd9d4c41c72df10f6e36c54"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUwNjk0NA==", "bodyText": "I don't think Maven does that anywhere. I can't think of reason why it would need to.", "url": "https://github.com/quarkusio/quarkus/pull/8864#discussion_r419506944", "createdAt": "2020-05-04T15:06:36Z", "author": {"login": "aloubyansky"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/DevMojo.java", "diffHunk": "@@ -642,13 +643,47 @@ void prepare() throws Exception {\n             if (devModeContext.isEnablePreview()) {\n                 args.add(DevModeContext.ENABLE_PREVIEW_FLAG);\n             }\n+\n+            propagateUserProperties();\n+\n             args.add(\"-jar\");\n             args.add(tempFile.getAbsolutePath());\n             if (argsString != null) {\n                 args.addAll(Arrays.asList(CommandLineUtils.translateCommandline(argsString)));\n             }\n         }\n \n+        private void propagateUserProperties() {\n+            final String mavenCmdLine = BootstrapMavenOptions.getMavenCmdLine();\n+            if (mavenCmdLine == null || mavenCmdLine.isEmpty()) {\n+                return;\n+            }\n+            int i = mavenCmdLine.indexOf(\"-D\");\n+            if (i < 0) {\n+                return;\n+            }\n+            final StringBuilder buf = new StringBuilder();\n+            buf.append(\"-D\");\n+            i += 2;\n+            while (i < mavenCmdLine.length()) {\n+                final char ch = mavenCmdLine.charAt(i++);\n+                if (!Character.isWhitespace(ch)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2NzE5Mw=="}, "originalCommit": {"oid": "2b5a0b5911eb3d17bfd9d4c41c72df10f6e36c54"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUxMDcwNw==", "bodyText": "I would have expected Maven to have code to parse parameters of the command line? But maybe I'm missing something obvious :).", "url": "https://github.com/quarkusio/quarkus/pull/8864#discussion_r419510707", "createdAt": "2020-05-04T15:11:57Z", "author": {"login": "gsmet"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/DevMojo.java", "diffHunk": "@@ -642,13 +643,47 @@ void prepare() throws Exception {\n             if (devModeContext.isEnablePreview()) {\n                 args.add(DevModeContext.ENABLE_PREVIEW_FLAG);\n             }\n+\n+            propagateUserProperties();\n+\n             args.add(\"-jar\");\n             args.add(tempFile.getAbsolutePath());\n             if (argsString != null) {\n                 args.addAll(Arrays.asList(CommandLineUtils.translateCommandline(argsString)));\n             }\n         }\n \n+        private void propagateUserProperties() {\n+            final String mavenCmdLine = BootstrapMavenOptions.getMavenCmdLine();\n+            if (mavenCmdLine == null || mavenCmdLine.isEmpty()) {\n+                return;\n+            }\n+            int i = mavenCmdLine.indexOf(\"-D\");\n+            if (i < 0) {\n+                return;\n+            }\n+            final StringBuilder buf = new StringBuilder();\n+            buf.append(\"-D\");\n+            i += 2;\n+            while (i < mavenCmdLine.length()) {\n+                final char ch = mavenCmdLine.charAt(i++);\n+                if (!Character.isWhitespace(ch)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2NzE5Mw=="}, "originalCommit": {"oid": "2b5a0b5911eb3d17bfd9d4c41c72df10f6e36c54"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUxNzkzNg==", "bodyText": "Is there a reason why we need to propogate individual parameters here and not just pass on the full system properties map ?", "url": "https://github.com/quarkusio/quarkus/pull/8864#discussion_r419517936", "createdAt": "2020-05-04T15:22:13Z", "author": {"login": "maxandersen"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/DevMojo.java", "diffHunk": "@@ -642,13 +643,47 @@ void prepare() throws Exception {\n             if (devModeContext.isEnablePreview()) {\n                 args.add(DevModeContext.ENABLE_PREVIEW_FLAG);\n             }\n+\n+            propagateUserProperties();\n+\n             args.add(\"-jar\");\n             args.add(tempFile.getAbsolutePath());\n             if (argsString != null) {\n                 args.addAll(Arrays.asList(CommandLineUtils.translateCommandline(argsString)));\n             }\n         }\n \n+        private void propagateUserProperties() {\n+            final String mavenCmdLine = BootstrapMavenOptions.getMavenCmdLine();\n+            if (mavenCmdLine == null || mavenCmdLine.isEmpty()) {\n+                return;\n+            }\n+            int i = mavenCmdLine.indexOf(\"-D\");\n+            if (i < 0) {\n+                return;\n+            }\n+            final StringBuilder buf = new StringBuilder();\n+            buf.append(\"-D\");\n+            i += 2;\n+            while (i < mavenCmdLine.length()) {\n+                final char ch = mavenCmdLine.charAt(i++);\n+                if (!Character.isWhitespace(ch)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2NzE5Mw=="}, "originalCommit": {"oid": "2b5a0b5911eb3d17bfd9d4c41c72df10f6e36c54"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUyMjg3Ng==", "bodyText": "That would probably mean persisting them to a file and then reading it and setting the properties in the dev mode process. I thought it'd be easier to parse a \"little\" string to pass what's in it on.", "url": "https://github.com/quarkusio/quarkus/pull/8864#discussion_r419522876", "createdAt": "2020-05-04T15:29:05Z", "author": {"login": "aloubyansky"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/DevMojo.java", "diffHunk": "@@ -642,13 +643,47 @@ void prepare() throws Exception {\n             if (devModeContext.isEnablePreview()) {\n                 args.add(DevModeContext.ENABLE_PREVIEW_FLAG);\n             }\n+\n+            propagateUserProperties();\n+\n             args.add(\"-jar\");\n             args.add(tempFile.getAbsolutePath());\n             if (argsString != null) {\n                 args.addAll(Arrays.asList(CommandLineUtils.translateCommandline(argsString)));\n             }\n         }\n \n+        private void propagateUserProperties() {\n+            final String mavenCmdLine = BootstrapMavenOptions.getMavenCmdLine();\n+            if (mavenCmdLine == null || mavenCmdLine.isEmpty()) {\n+                return;\n+            }\n+            int i = mavenCmdLine.indexOf(\"-D\");\n+            if (i < 0) {\n+                return;\n+            }\n+            final StringBuilder buf = new StringBuilder();\n+            buf.append(\"-D\");\n+            i += 2;\n+            while (i < mavenCmdLine.length()) {\n+                final char ch = mavenCmdLine.charAt(i++);\n+                if (!Character.isWhitespace(ch)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2NzE5Mw=="}, "originalCommit": {"oid": "2b5a0b5911eb3d17bfd9d4c41c72df10f6e36c54"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjc3NDk0OnYy", "diffSide": "RIGHT", "path": "integration-tests/maven/src/test/resources/projects/multimodule-revision-prop/html/src/main/resources/META-INF/resources/a.html", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMTozNDowOFrOGQTEKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMjowNzoxOFrOGQT-4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0Mjc2Mg==", "bodyText": "added by mistake or ?", "url": "https://github.com/quarkusio/quarkus/pull/8864#discussion_r419742762", "createdAt": "2020-05-04T21:34:08Z", "author": {"login": "maxandersen"}, "path": "integration-tests/maven/src/test/resources/projects/multimodule-revision-prop/html/src/main/resources/META-INF/resources/a.html", "diffHunk": "@@ -0,0 +1 @@\n+sadfasdfasdfas", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b5a0b5911eb3d17bfd9d4c41c72df10f6e36c54"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1Nzc5Mw==", "bodyText": "This is just a copy of the multimodule project that already existed in the TS.", "url": "https://github.com/quarkusio/quarkus/pull/8864#discussion_r419757793", "createdAt": "2020-05-04T22:07:18Z", "author": {"login": "aloubyansky"}, "path": "integration-tests/maven/src/test/resources/projects/multimodule-revision-prop/html/src/main/resources/META-INF/resources/a.html", "diffHunk": "@@ -0,0 +1 @@\n+sadfasdfasdfas", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0Mjc2Mg=="}, "originalCommit": {"oid": "2b5a0b5911eb3d17bfd9d4c41c72df10f6e36c54"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjc4MTU4OnYy", "diffSide": "RIGHT", "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/ModelUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMTozNjozMVrOGQTIYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMjowNTo1MFrOGQT8sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0Mzg0Mw==", "bodyText": "couldn't the property expression be in any part of the version string ?", "url": "https://github.com/quarkusio/quarkus/pull/8864#discussion_r419743843", "createdAt": "2020-05-04T21:36:31Z", "author": {"login": "maxandersen"}, "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/ModelUtils.java", "diffHunk": "@@ -184,6 +210,39 @@ public static String getVersion(Model model) {\n         throw new IllegalStateException(\"Failed to determine version for project model\");\n     }\n \n+    public static String getVersion(Model model) {\n+        final String rawVersion = getRawVersion(model);\n+        return isUnresolvedVersion(rawVersion) ? resolveVersion(rawVersion, model) : rawVersion;\n+    }\n+\n+    public static boolean isUnresolvedVersion(String version) {\n+        return version.charAt(0) == '$';//UNRESOLVED_VERSION_PATTERN.matcher(version).find();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b5a0b5911eb3d17bfd9d4c41c72df10f6e36c54"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1MjAxNw==", "bodyText": "Since I was the one who added UNRESOLVED_VERSION_PATTERN I am also a litte surprised by this change.\nThe Maven documentation doesn't exactly answer this question but I don't see why you should not be allowed to start the raw version with a literal string.\nIt seems the only thing that is explicitly forbidden as per above mentioned doc is the usage of any other property than revision, sha1 or changelist.", "url": "https://github.com/quarkusio/quarkus/pull/8864#discussion_r419752017", "createdAt": "2020-05-04T21:54:02Z", "author": {"login": "famod"}, "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/ModelUtils.java", "diffHunk": "@@ -184,6 +210,39 @@ public static String getVersion(Model model) {\n         throw new IllegalStateException(\"Failed to determine version for project model\");\n     }\n \n+    public static String getVersion(Model model) {\n+        final String rawVersion = getRawVersion(model);\n+        return isUnresolvedVersion(rawVersion) ? resolveVersion(rawVersion, model) : rawVersion;\n+    }\n+\n+    public static boolean isUnresolvedVersion(String version) {\n+        return version.charAt(0) == '$';//UNRESOLVED_VERSION_PATTERN.matcher(version).find();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0Mzg0Mw=="}, "originalCommit": {"oid": "2b5a0b5911eb3d17bfd9d4c41c72df10f6e36c54"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1NzIzNA==", "bodyText": "I'll change it back.", "url": "https://github.com/quarkusio/quarkus/pull/8864#discussion_r419757234", "createdAt": "2020-05-04T22:05:50Z", "author": {"login": "aloubyansky"}, "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/ModelUtils.java", "diffHunk": "@@ -184,6 +210,39 @@ public static String getVersion(Model model) {\n         throw new IllegalStateException(\"Failed to determine version for project model\");\n     }\n \n+    public static String getVersion(Model model) {\n+        final String rawVersion = getRawVersion(model);\n+        return isUnresolvedVersion(rawVersion) ? resolveVersion(rawVersion, model) : rawVersion;\n+    }\n+\n+    public static boolean isUnresolvedVersion(String version) {\n+        return version.charAt(0) == '$';//UNRESOLVED_VERSION_PATTERN.matcher(version).find();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0Mzg0Mw=="}, "originalCommit": {"oid": "2b5a0b5911eb3d17bfd9d4c41c72df10f6e36c54"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjg3MjYzOnYy", "diffSide": "RIGHT", "path": "devtools/maven/src/main/java/io/quarkus/maven/DevMojo.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMjowNzoyMVrOGQT--Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMjoxMTozOVrOGQUF7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1NzgxNw==", "bodyText": "might be minor issue but this will only consider things explicitly set on the command line; it will not honor .mvn/maven.config", "url": "https://github.com/quarkusio/quarkus/pull/8864#discussion_r419757817", "createdAt": "2020-05-04T22:07:21Z", "author": {"login": "maxandersen"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/DevMojo.java", "diffHunk": "@@ -642,13 +643,47 @@ void prepare() throws Exception {\n             if (devModeContext.isEnablePreview()) {\n                 args.add(DevModeContext.ENABLE_PREVIEW_FLAG);\n             }\n+\n+            propagateUserProperties();\n+\n             args.add(\"-jar\");\n             args.add(tempFile.getAbsolutePath());\n             if (argsString != null) {\n                 args.addAll(Arrays.asList(CommandLineUtils.translateCommandline(argsString)));\n             }\n         }\n \n+        private void propagateUserProperties() {\n+            final String mavenCmdLine = BootstrapMavenOptions.getMavenCmdLine();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b5a0b5911eb3d17bfd9d4c41c72df10f6e36c54"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1OTU5OA==", "bodyText": "I'd classify it as a separate issue which should be fixed in the bootstrap Maven context/resolver.", "url": "https://github.com/quarkusio/quarkus/pull/8864#discussion_r419759598", "createdAt": "2020-05-04T22:11:39Z", "author": {"login": "aloubyansky"}, "path": "devtools/maven/src/main/java/io/quarkus/maven/DevMojo.java", "diffHunk": "@@ -642,13 +643,47 @@ void prepare() throws Exception {\n             if (devModeContext.isEnablePreview()) {\n                 args.add(DevModeContext.ENABLE_PREVIEW_FLAG);\n             }\n+\n+            propagateUserProperties();\n+\n             args.add(\"-jar\");\n             args.add(tempFile.getAbsolutePath());\n             if (argsString != null) {\n                 args.addAll(Arrays.asList(CommandLineUtils.translateCommandline(argsString)));\n             }\n         }\n \n+        private void propagateUserProperties() {\n+            final String mavenCmdLine = BootstrapMavenOptions.getMavenCmdLine();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1NzgxNw=="}, "originalCommit": {"oid": "2b5a0b5911eb3d17bfd9d4c41c72df10f6e36c54"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjkyNjYzOnYy", "diffSide": "RIGHT", "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/ModelUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMjoyNzoyNFrOGQUeqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMjozMjozN1rOGQUmOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc2NTkzMA==", "bodyText": "this would not handle case where there are nested properties would it ?", "url": "https://github.com/quarkusio/quarkus/pull/8864#discussion_r419765930", "createdAt": "2020-05-04T22:27:24Z", "author": {"login": "maxandersen"}, "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/ModelUtils.java", "diffHunk": "@@ -184,6 +210,39 @@ public static String getVersion(Model model) {\n         throw new IllegalStateException(\"Failed to determine version for project model\");\n     }\n \n+    public static String getVersion(Model model) {\n+        final String rawVersion = getRawVersion(model);\n+        return isUnresolvedVersion(rawVersion) ? resolveVersion(rawVersion, model) : rawVersion;\n+    }\n+\n+    public static boolean isUnresolvedVersion(String version) {\n+        return getUnresolvedVersionPattern().matcher(version).find();\n+    }\n+\n+    public static String resolveVersion(String rawVersion, Model rawModel) {\n+        final Map<String, String> props = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af17877fc73eebd058409aee1de98fd9a6bf6083"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc2Nzg2NA==", "bodyText": "Nesting is not allowed in Maven project versions.", "url": "https://github.com/quarkusio/quarkus/pull/8864#discussion_r419767864", "createdAt": "2020-05-04T22:32:37Z", "author": {"login": "aloubyansky"}, "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/resolver/maven/workspace/ModelUtils.java", "diffHunk": "@@ -184,6 +210,39 @@ public static String getVersion(Model model) {\n         throw new IllegalStateException(\"Failed to determine version for project model\");\n     }\n \n+    public static String getVersion(Model model) {\n+        final String rawVersion = getRawVersion(model);\n+        return isUnresolvedVersion(rawVersion) ? resolveVersion(rawVersion, model) : rawVersion;\n+    }\n+\n+    public static boolean isUnresolvedVersion(String version) {\n+        return getUnresolvedVersionPattern().matcher(version).find();\n+    }\n+\n+    public static String resolveVersion(String rawVersion, Model rawModel) {\n+        final Map<String, String> props = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc2NTkzMA=="}, "originalCommit": {"oid": "af17877fc73eebd058409aee1de98fd9a6bf6083"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3291, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}