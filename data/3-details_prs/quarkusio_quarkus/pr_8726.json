{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NjU0NDIz", "number": 8726, "title": "Add support for enabling CDI beans based on build time properties", "bodyText": "", "createdAt": "2020-04-21T12:52:23Z", "url": "https://github.com/quarkusio/quarkus/pull/8726", "merged": true, "mergeCommit": {"oid": "b177575365cafcc24c0ef0b47a8c18ed7da67116"}, "closed": true, "closedAt": "2020-04-24T09:37:44Z", "author": {"login": "geoand"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZz9CagBqjMyNTYzMTE2MzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcasnmBgFqTM5OTcxNDg4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a136c6f01022aa1bb87959d101ca09df36be4339", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/a136c6f01022aa1bb87959d101ca09df36be4339", "committedDate": "2020-04-21T12:51:05Z", "message": "Add support for enabling CDI beans based on build time properties"}, "afterCommit": {"oid": "9e3dd7890f7e692afe57a3a4f955122cdac9f55c", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/9e3dd7890f7e692afe57a3a4f955122cdac9f55c", "committedDate": "2020-04-21T13:45:54Z", "message": "Add support for enabling CDI beans based on build time properties"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e3dd7890f7e692afe57a3a4f955122cdac9f55c", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/9e3dd7890f7e692afe57a3a4f955122cdac9f55c", "committedDate": "2020-04-21T13:45:54Z", "message": "Add support for enabling CDI beans based on build time properties"}, "afterCommit": {"oid": "7e447e79d058f240a2715778d7702bb4b47d5720", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/7e447e79d058f240a2715778d7702bb4b47d5720", "committedDate": "2020-04-21T14:26:30Z", "message": "Add support for enabling CDI beans based on build time properties"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3OTk2Mzg4", "url": "https://github.com/quarkusio/quarkus/pull/8726#pullrequestreview-397996388", "createdAt": "2020-04-22T09:13:00Z", "commit": {"oid": "7e447e79d058f240a2715778d7702bb4b47d5720"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwOToxMzowMFrOGJsDYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwOToxNzowN1rOGJsO_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgxMjEyOQ==", "bodyText": "matche -> matches\nbuilt -> build", "url": "https://github.com/quarkusio/quarkus/pull/8726#discussion_r412812129", "createdAt": "2020-04-22T09:13:00Z", "author": {"login": "manovotn"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/BuildTimeEnabledProcessor.java", "diffHunk": "@@ -109,8 +117,82 @@ public void transform(TransformationContext ctx) {\n         }));\n     }\n \n+    /**\n+     * Uses {@link AnnotationsTransformer} to do the following:\n+     *\n+     * Adds the {@code @Alternative} annotation to any class or producer that is annotated with {code @IfBuildProperty}\n+     * when the value of property specified by the annotation does not matche the user defined built time property.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e447e79d058f240a2715778d7702bb4b47d5720"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgxMjI3Nw==", "bodyText": "built -> build", "url": "https://github.com/quarkusio/quarkus/pull/8726#discussion_r412812277", "createdAt": "2020-04-22T09:13:13Z", "author": {"login": "manovotn"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/BuildTimeEnabledProcessor.java", "diffHunk": "@@ -109,8 +117,82 @@ public void transform(TransformationContext ctx) {\n         }));\n     }\n \n+    /**\n+     * Uses {@link AnnotationsTransformer} to do the following:\n+     *\n+     * Adds the {@code @Alternative} annotation to any class or producer that is annotated with {code @IfBuildProperty}\n+     * when the value of property specified by the annotation does not matche the user defined built time property.\n+     *\n+     * Adds the {@code @AlternativePriority} annotation to any class or producer that is annotated with\n+     * {code @IfBuildProperty} when the value of property specified by the annotation matches the user defined built time", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e447e79d058f240a2715778d7702bb4b47d5720"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgxMzU1MA==", "bodyText": "springValue? :-)", "url": "https://github.com/quarkusio/quarkus/pull/8726#discussion_r412813550", "createdAt": "2020-04-22T09:15:03Z", "author": {"login": "manovotn"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/BuildTimeEnabledProcessor.java", "diffHunk": "@@ -109,8 +117,82 @@ public void transform(TransformationContext ctx) {\n         }));\n     }\n \n+    /**\n+     * Uses {@link AnnotationsTransformer} to do the following:\n+     *\n+     * Adds the {@code @Alternative} annotation to any class or producer that is annotated with {code @IfBuildProperty}\n+     * when the value of property specified by the annotation does not matche the user defined built time property.\n+     *\n+     * Adds the {@code @AlternativePriority} annotation to any class or producer that is annotated with\n+     * {code @IfBuildProperty} when the value of property specified by the annotation matches the user defined built time\n+     * property.\n+     *\n+     * This effectively means that a bean annotated with {@code @IfBuildProperty} is only enabled when\n+     * the property specified in the annotation matches the actual value of the build property.\n+     */\n+    @BuildStep\n+    void ifBuildProperty(BuildProducer<AnnotationsTransformerBuildItem> annotationsTransformer) {\n+        annotationsTransformer.produce(new AnnotationsTransformerBuildItem(new AnnotationsTransformer() {\n+            @Override\n+            public boolean appliesTo(AnnotationTarget.Kind kind) {\n+                return kind == AnnotationTarget.Kind.METHOD || kind == AnnotationTarget.Kind.CLASS\n+                        || kind == AnnotationTarget.Kind.FIELD;\n+            }\n+\n+            @Override\n+            public void transform(TransformationContext ctx) {\n+                AnnotationInstance annotationInstance = find(ctx.getAnnotations(), IF_BUILD_PROPERTY);\n+                if (annotationInstance == null) {\n+                    return;\n+                }\n+\n+                String propertyName = annotationInstance.value(\"name\").asString();\n+                String expectedSpringValue = annotationInstance.value(\"stringValue\").asString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e447e79d058f240a2715778d7702bb4b47d5720"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgxNDUyOA==", "bodyText": "I'd also add a line that mentions that by default if the property is missing you don't enable the bean but it's configurable.", "url": "https://github.com/quarkusio/quarkus/pull/8726#discussion_r412814528", "createdAt": "2020-04-22T09:16:20Z", "author": {"login": "manovotn"}, "path": "extensions/arc/runtime/src/main/java/io/quarkus/arc/properties/IfBuildProperty.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package io.quarkus.arc.properties;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * When applied to a bean class or producer method (or field), the bean will only be enabled\n+ * if the Quarkus build time property matches the provided value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e447e79d058f240a2715778d7702bb4b47d5720"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgxNTEwMg==", "bodyText": "bean is to enabled -> bean is to be enabled\nhas not specified  -> has not been specified", "url": "https://github.com/quarkusio/quarkus/pull/8726#discussion_r412815102", "createdAt": "2020-04-22T09:17:07Z", "author": {"login": "manovotn"}, "path": "extensions/arc/runtime/src/main/java/io/quarkus/arc/properties/IfBuildProperty.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package io.quarkus.arc.properties;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * When applied to a bean class or producer method (or field), the bean will only be enabled\n+ * if the Quarkus build time property matches the provided value.\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ ElementType.METHOD, ElementType.TYPE, ElementType.FIELD })\n+public @interface IfBuildProperty {\n+\n+    /**\n+     * Name of the build time property to check\n+     */\n+    String name();\n+\n+    /**\n+     * Expected {@code String} value of the build time property (specified by {@code name}) if the bean is to be enabled\n+     */\n+    String stringValue();\n+\n+    /**\n+     * Determines if the bean is to enabled when the property name specified by {@code name} has not specified at all", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e447e79d058f240a2715778d7702bb4b47d5720"}, "originalPosition": 27}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7e447e79d058f240a2715778d7702bb4b47d5720", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/7e447e79d058f240a2715778d7702bb4b47d5720", "committedDate": "2020-04-21T14:26:30Z", "message": "Add support for enabling CDI beans based on build time properties"}, "afterCommit": {"oid": "8eee53f9ef914094c412628eddf349b214eeb510", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/8eee53f9ef914094c412628eddf349b214eeb510", "committedDate": "2020-04-22T11:12:07Z", "message": "Add support for enabling CDI beans based on build time properties"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8eee53f9ef914094c412628eddf349b214eeb510", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/8eee53f9ef914094c412628eddf349b214eeb510", "committedDate": "2020-04-22T11:12:07Z", "message": "Add support for enabling CDI beans based on build time properties"}, "afterCommit": {"oid": "96d17f5fed5a248a22648e71ddc76e3fc361a23d", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/96d17f5fed5a248a22648e71ddc76e3fc361a23d", "committedDate": "2020-04-22T11:19:14Z", "message": "Add support for enabling CDI beans based on build time properties"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "96d17f5fed5a248a22648e71ddc76e3fc361a23d", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/96d17f5fed5a248a22648e71ddc76e3fc361a23d", "committedDate": "2020-04-22T11:19:14Z", "message": "Add support for enabling CDI beans based on build time properties"}, "afterCommit": {"oid": "627e71a13e1ec1d3aaf5c3ff7c7ccd058ead15b5", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/627e71a13e1ec1d3aaf5c3ff7c7ccd058ead15b5", "committedDate": "2020-04-22T13:12:51Z", "message": "Add support for enabling CDI beans based on build time properties"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MjgzMjA3", "url": "https://github.com/quarkusio/quarkus/pull/8726#pullrequestreview-398283207", "createdAt": "2020-04-22T15:00:34Z", "commit": {"oid": "627e71a13e1ec1d3aaf5c3ff7c7ccd058ead15b5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MDI0MDQ1", "url": "https://github.com/quarkusio/quarkus/pull/8726#pullrequestreview-399024045", "createdAt": "2020-04-23T11:54:58Z", "commit": {"oid": "627e71a13e1ec1d3aaf5c3ff7c7ccd058ead15b5"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMTo1NDo1OFrOGKlZCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjowMToxNVrOGKlojw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc1MTU2Mg==", "bodyText": "I wonder if it makes to place this annotation in a separate package? I think that it would make sense to place all of them (@IfBuildProfile) in a single package?", "url": "https://github.com/quarkusio/quarkus/pull/8726#discussion_r413751562", "createdAt": "2020-04-23T11:54:58Z", "author": {"login": "mkouba"}, "path": "extensions/arc/runtime/src/main/java/io/quarkus/arc/properties/IfBuildProperty.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package io.quarkus.arc.properties;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "627e71a13e1ec1d3aaf5c3ff7c7ccd058ead15b5"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc1MTkxNQ==", "bodyText": "Wrong logger class?", "url": "https://github.com/quarkusio/quarkus/pull/8726#discussion_r413751915", "createdAt": "2020-04-23T11:55:33Z", "author": {"login": "mkouba"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/BuildTimeEnabledProcessor.java", "diffHunk": "@@ -0,0 +1,198 @@\n+package io.quarkus.arc.deployment;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.config.spi.ConfigProviderResolver;\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.FieldInfo;\n+import org.jboss.jandex.MethodInfo;\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.arc.processor.AnnotationsTransformer;\n+import io.quarkus.arc.processor.DotNames;\n+import io.quarkus.arc.processor.Transformation;\n+import io.quarkus.arc.profile.IfBuildProfile;\n+import io.quarkus.arc.profile.UnlessBuildProfile;\n+import io.quarkus.arc.properties.IfBuildProperty;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.runtime.configuration.ProfileManager;\n+\n+public class BuildTimeEnabledProcessor {\n+\n+    private static final Logger LOGGER = Logger.getLogger(AutoInjectFieldProcessor.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "627e71a13e1ec1d3aaf5c3ff7c7ccd058ead15b5"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc1MzA1MQ==", "bodyText": "Hm, the key for fieldTargets is String...", "url": "https://github.com/quarkusio/quarkus/pull/8726#discussion_r413753051", "createdAt": "2020-04-23T11:57:23Z", "author": {"login": "mkouba"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/BuildTimeEnabledProcessor.java", "diffHunk": "@@ -0,0 +1,198 @@\n+package io.quarkus.arc.deployment;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.config.spi.ConfigProviderResolver;\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.FieldInfo;\n+import org.jboss.jandex.MethodInfo;\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.arc.processor.AnnotationsTransformer;\n+import io.quarkus.arc.processor.DotNames;\n+import io.quarkus.arc.processor.Transformation;\n+import io.quarkus.arc.profile.IfBuildProfile;\n+import io.quarkus.arc.profile.UnlessBuildProfile;\n+import io.quarkus.arc.properties.IfBuildProperty;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.runtime.configuration.ProfileManager;\n+\n+public class BuildTimeEnabledProcessor {\n+\n+    private static final Logger LOGGER = Logger.getLogger(AutoInjectFieldProcessor.class);\n+\n+    private static final DotName IF_BUILD_PROFILE = DotName.createSimple(IfBuildProfile.class.getName());\n+    private static final DotName UNLESS_BUILD_PROFILE = DotName.createSimple(UnlessBuildProfile.class.getName());\n+\n+    private static final DotName IF_BUILD_PROPERTY = DotName.createSimple(IfBuildProperty.class.getName());\n+\n+    @BuildStep\n+    void ifBuildProfile(CombinedIndexBuildItem index, BuildProducer<BuildTimeConditionBuildItem> producer) {\n+        Collection<AnnotationInstance> annotationInstances = index.getIndex().getAnnotations(IF_BUILD_PROFILE);\n+        for (AnnotationInstance instance : annotationInstances) {\n+            String profileOnInstance = instance.value().asString();\n+            boolean enabled = profileOnInstance.equals(ProfileManager.getActiveProfile());\n+            if (enabled) {\n+                LOGGER.debug(\"Enabling \" + instance + \" since the profile value matches the active profile.\");\n+            } else {\n+                LOGGER.debug(\"Disabling \" + instance + \" since the profile value does not match the active profile.\");\n+            }\n+            producer.produce(new BuildTimeConditionBuildItem(instance.target(), enabled));\n+        }\n+    }\n+\n+    @BuildStep\n+    void unlessBuildProfile(CombinedIndexBuildItem index, BuildProducer<BuildTimeConditionBuildItem> producer) {\n+        Collection<AnnotationInstance> annotationInstances = index.getIndex().getAnnotations(UNLESS_BUILD_PROFILE);\n+        for (AnnotationInstance instance : annotationInstances) {\n+            String profileOnInstance = instance.value().asString();\n+            boolean enabled = !profileOnInstance.equals(ProfileManager.getActiveProfile());\n+            if (enabled) {\n+                LOGGER.debug(\"Enabling \" + instance + \" since the profile value does not match the active profile.\");\n+            } else {\n+                LOGGER.debug(\"Disabling \" + instance + \" since the profile value matches the active profile.\");\n+            }\n+            producer.produce(new BuildTimeConditionBuildItem(instance.target(), enabled));\n+        }\n+    }\n+\n+    @BuildStep\n+    void ifBuildProperty(CombinedIndexBuildItem index, BuildProducer<BuildTimeConditionBuildItem> producer) {\n+        Config config = ConfigProviderResolver.instance().getConfig();\n+        Collection<AnnotationInstance> annotationInstances = index.getIndex().getAnnotations(IF_BUILD_PROPERTY);\n+        for (AnnotationInstance instance : annotationInstances) {\n+            String propertyName = instance.value(\"name\").asString();\n+            String expectedStringValue = instance.value(\"stringValue\").asString();\n+            AnnotationValue enableIfMissingValue = instance.value(\"enableIfMissing\");\n+            boolean enableIfMissing = enableIfMissingValue != null && enableIfMissingValue.asBoolean();\n+\n+            Optional<String> optionalValue = config.getOptionalValue(propertyName, String.class);\n+            boolean enabled;\n+            if (optionalValue.isPresent()) {\n+                if (optionalValue.get().equals(expectedStringValue)) {\n+                    LOGGER.debug(\"Enabling \" + instance + \" since the property value matches the expected one.\");\n+                    enabled = true;\n+                } else {\n+                    LOGGER.debug(\"Disabling \" + instance\n+                            + \" since the property value does not match the expected one.\");\n+                    enabled = false;\n+                }\n+            } else {\n+                if (enableIfMissing) {\n+                    LOGGER.debug(\"Enabling \" + instance\n+                            + \" since the property has not been set and 'enableIfMissing' is set to 'true'.\");\n+                    enabled = true;\n+                } else {\n+                    LOGGER.debug(\"Disabling \" + instance\n+                            + \" since the property has not been set and 'enableIfMissing' is set to 'false'.\");\n+                    enabled = false;\n+                }\n+            }\n+\n+            producer.produce(new BuildTimeConditionBuildItem(instance.target(), enabled));\n+        }\n+    }\n+\n+    @BuildStep\n+    void conditionTransformer(List<BuildTimeConditionBuildItem> buildTimeConditions,\n+            BuildProducer<AnnotationsTransformerBuildItem> annotationsTransformer) {\n+        if (buildTimeConditions.isEmpty()) {\n+            return;\n+        }\n+\n+        /*\n+         * Determine whether each of the targets was enabled or not by combining their 'enabled' values\n+         * Done this way in order to support having different annotation specify different conditions\n+         * under which the bean is enabled and then combining all of them using a logical 'AND'\n+         */\n+        final Map<DotName, Boolean> classTargets = new HashMap<>(); //don't use ClassInfo because it doesn't implement equals and hashCode\n+        final Map<String, Boolean> fieldTargets = new HashMap<>(); // don't use FieldInfo because it doesn't implement equals and hashCode\n+        final Map<MethodInfo, Boolean> methodTargets = new HashMap<>();\n+        for (BuildTimeConditionBuildItem buildTimeCondition : buildTimeConditions) {\n+            AnnotationTarget target = buildTimeCondition.getTarget();\n+            AnnotationTarget.Kind kind = target.kind();\n+            if (kind == AnnotationTarget.Kind.CLASS) {\n+                DotName classDotName = target.asClass().name();\n+                Boolean allPreviousConditionsTrue = classTargets.getOrDefault(classDotName, true);\n+                classTargets.put(classDotName, allPreviousConditionsTrue && buildTimeCondition.isEnabled());\n+            } else if (kind == AnnotationTarget.Kind.METHOD) {\n+                MethodInfo method = target.asMethod();\n+                Boolean allPreviousConditionsTrue = methodTargets.getOrDefault(method, true);\n+                methodTargets.put(method, allPreviousConditionsTrue && buildTimeCondition.isEnabled());\n+            } else if (kind == AnnotationTarget.Kind.FIELD) {\n+                FieldInfo field = target.asField();\n+                Boolean allPreviousConditionsTrue = fieldTargets.getOrDefault(field, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "627e71a13e1ec1d3aaf5c3ff7c7ccd058ead15b5"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc1Mzg5Ng==", "bodyText": "Just use ctx.isClas() and friends?", "url": "https://github.com/quarkusio/quarkus/pull/8726#discussion_r413753896", "createdAt": "2020-04-23T11:58:40Z", "author": {"login": "mkouba"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/BuildTimeEnabledProcessor.java", "diffHunk": "@@ -0,0 +1,198 @@\n+package io.quarkus.arc.deployment;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.config.spi.ConfigProviderResolver;\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.FieldInfo;\n+import org.jboss.jandex.MethodInfo;\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.arc.processor.AnnotationsTransformer;\n+import io.quarkus.arc.processor.DotNames;\n+import io.quarkus.arc.processor.Transformation;\n+import io.quarkus.arc.profile.IfBuildProfile;\n+import io.quarkus.arc.profile.UnlessBuildProfile;\n+import io.quarkus.arc.properties.IfBuildProperty;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.runtime.configuration.ProfileManager;\n+\n+public class BuildTimeEnabledProcessor {\n+\n+    private static final Logger LOGGER = Logger.getLogger(AutoInjectFieldProcessor.class);\n+\n+    private static final DotName IF_BUILD_PROFILE = DotName.createSimple(IfBuildProfile.class.getName());\n+    private static final DotName UNLESS_BUILD_PROFILE = DotName.createSimple(UnlessBuildProfile.class.getName());\n+\n+    private static final DotName IF_BUILD_PROPERTY = DotName.createSimple(IfBuildProperty.class.getName());\n+\n+    @BuildStep\n+    void ifBuildProfile(CombinedIndexBuildItem index, BuildProducer<BuildTimeConditionBuildItem> producer) {\n+        Collection<AnnotationInstance> annotationInstances = index.getIndex().getAnnotations(IF_BUILD_PROFILE);\n+        for (AnnotationInstance instance : annotationInstances) {\n+            String profileOnInstance = instance.value().asString();\n+            boolean enabled = profileOnInstance.equals(ProfileManager.getActiveProfile());\n+            if (enabled) {\n+                LOGGER.debug(\"Enabling \" + instance + \" since the profile value matches the active profile.\");\n+            } else {\n+                LOGGER.debug(\"Disabling \" + instance + \" since the profile value does not match the active profile.\");\n+            }\n+            producer.produce(new BuildTimeConditionBuildItem(instance.target(), enabled));\n+        }\n+    }\n+\n+    @BuildStep\n+    void unlessBuildProfile(CombinedIndexBuildItem index, BuildProducer<BuildTimeConditionBuildItem> producer) {\n+        Collection<AnnotationInstance> annotationInstances = index.getIndex().getAnnotations(UNLESS_BUILD_PROFILE);\n+        for (AnnotationInstance instance : annotationInstances) {\n+            String profileOnInstance = instance.value().asString();\n+            boolean enabled = !profileOnInstance.equals(ProfileManager.getActiveProfile());\n+            if (enabled) {\n+                LOGGER.debug(\"Enabling \" + instance + \" since the profile value does not match the active profile.\");\n+            } else {\n+                LOGGER.debug(\"Disabling \" + instance + \" since the profile value matches the active profile.\");\n+            }\n+            producer.produce(new BuildTimeConditionBuildItem(instance.target(), enabled));\n+        }\n+    }\n+\n+    @BuildStep\n+    void ifBuildProperty(CombinedIndexBuildItem index, BuildProducer<BuildTimeConditionBuildItem> producer) {\n+        Config config = ConfigProviderResolver.instance().getConfig();\n+        Collection<AnnotationInstance> annotationInstances = index.getIndex().getAnnotations(IF_BUILD_PROPERTY);\n+        for (AnnotationInstance instance : annotationInstances) {\n+            String propertyName = instance.value(\"name\").asString();\n+            String expectedStringValue = instance.value(\"stringValue\").asString();\n+            AnnotationValue enableIfMissingValue = instance.value(\"enableIfMissing\");\n+            boolean enableIfMissing = enableIfMissingValue != null && enableIfMissingValue.asBoolean();\n+\n+            Optional<String> optionalValue = config.getOptionalValue(propertyName, String.class);\n+            boolean enabled;\n+            if (optionalValue.isPresent()) {\n+                if (optionalValue.get().equals(expectedStringValue)) {\n+                    LOGGER.debug(\"Enabling \" + instance + \" since the property value matches the expected one.\");\n+                    enabled = true;\n+                } else {\n+                    LOGGER.debug(\"Disabling \" + instance\n+                            + \" since the property value does not match the expected one.\");\n+                    enabled = false;\n+                }\n+            } else {\n+                if (enableIfMissing) {\n+                    LOGGER.debug(\"Enabling \" + instance\n+                            + \" since the property has not been set and 'enableIfMissing' is set to 'true'.\");\n+                    enabled = true;\n+                } else {\n+                    LOGGER.debug(\"Disabling \" + instance\n+                            + \" since the property has not been set and 'enableIfMissing' is set to 'false'.\");\n+                    enabled = false;\n+                }\n+            }\n+\n+            producer.produce(new BuildTimeConditionBuildItem(instance.target(), enabled));\n+        }\n+    }\n+\n+    @BuildStep\n+    void conditionTransformer(List<BuildTimeConditionBuildItem> buildTimeConditions,\n+            BuildProducer<AnnotationsTransformerBuildItem> annotationsTransformer) {\n+        if (buildTimeConditions.isEmpty()) {\n+            return;\n+        }\n+\n+        /*\n+         * Determine whether each of the targets was enabled or not by combining their 'enabled' values\n+         * Done this way in order to support having different annotation specify different conditions\n+         * under which the bean is enabled and then combining all of them using a logical 'AND'\n+         */\n+        final Map<DotName, Boolean> classTargets = new HashMap<>(); //don't use ClassInfo because it doesn't implement equals and hashCode\n+        final Map<String, Boolean> fieldTargets = new HashMap<>(); // don't use FieldInfo because it doesn't implement equals and hashCode\n+        final Map<MethodInfo, Boolean> methodTargets = new HashMap<>();\n+        for (BuildTimeConditionBuildItem buildTimeCondition : buildTimeConditions) {\n+            AnnotationTarget target = buildTimeCondition.getTarget();\n+            AnnotationTarget.Kind kind = target.kind();\n+            if (kind == AnnotationTarget.Kind.CLASS) {\n+                DotName classDotName = target.asClass().name();\n+                Boolean allPreviousConditionsTrue = classTargets.getOrDefault(classDotName, true);\n+                classTargets.put(classDotName, allPreviousConditionsTrue && buildTimeCondition.isEnabled());\n+            } else if (kind == AnnotationTarget.Kind.METHOD) {\n+                MethodInfo method = target.asMethod();\n+                Boolean allPreviousConditionsTrue = methodTargets.getOrDefault(method, true);\n+                methodTargets.put(method, allPreviousConditionsTrue && buildTimeCondition.isEnabled());\n+            } else if (kind == AnnotationTarget.Kind.FIELD) {\n+                FieldInfo field = target.asField();\n+                Boolean allPreviousConditionsTrue = fieldTargets.getOrDefault(field, true);\n+                fieldTargets.put(toUniqueString(field), allPreviousConditionsTrue && buildTimeCondition.isEnabled());\n+            }\n+        }\n+\n+        // the transformer just tries to match targets and then enables or disables the bean accordingly\n+        annotationsTransformer.produce(new AnnotationsTransformerBuildItem(new AnnotationsTransformer() {\n+            @Override\n+            public boolean appliesTo(AnnotationTarget.Kind kind) {\n+                return kind == AnnotationTarget.Kind.METHOD || kind == AnnotationTarget.Kind.CLASS\n+                        || kind == AnnotationTarget.Kind.FIELD;\n+            }\n+\n+            @Override\n+            public void transform(TransformationContext ctx) {\n+                AnnotationTarget target = ctx.getTarget();\n+                AnnotationTarget.Kind kind = target.kind();\n+                if (kind == AnnotationTarget.Kind.CLASS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "627e71a13e1ec1d3aaf5c3ff7c7ccd058ead15b5"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc1NTUzNQ==", "bodyText": "I think that you should use the BeanArchiveIndexBuildItem here because you're only working with beans, right?", "url": "https://github.com/quarkusio/quarkus/pull/8726#discussion_r413755535", "createdAt": "2020-04-23T12:01:15Z", "author": {"login": "mkouba"}, "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/BuildTimeEnabledProcessor.java", "diffHunk": "@@ -0,0 +1,198 @@\n+package io.quarkus.arc.deployment;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.config.spi.ConfigProviderResolver;\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.FieldInfo;\n+import org.jboss.jandex.MethodInfo;\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.arc.processor.AnnotationsTransformer;\n+import io.quarkus.arc.processor.DotNames;\n+import io.quarkus.arc.processor.Transformation;\n+import io.quarkus.arc.profile.IfBuildProfile;\n+import io.quarkus.arc.profile.UnlessBuildProfile;\n+import io.quarkus.arc.properties.IfBuildProperty;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.runtime.configuration.ProfileManager;\n+\n+public class BuildTimeEnabledProcessor {\n+\n+    private static final Logger LOGGER = Logger.getLogger(AutoInjectFieldProcessor.class);\n+\n+    private static final DotName IF_BUILD_PROFILE = DotName.createSimple(IfBuildProfile.class.getName());\n+    private static final DotName UNLESS_BUILD_PROFILE = DotName.createSimple(UnlessBuildProfile.class.getName());\n+\n+    private static final DotName IF_BUILD_PROPERTY = DotName.createSimple(IfBuildProperty.class.getName());\n+\n+    @BuildStep\n+    void ifBuildProfile(CombinedIndexBuildItem index, BuildProducer<BuildTimeConditionBuildItem> producer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "627e71a13e1ec1d3aaf5c3ff7c7ccd058ead15b5"}, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "627e71a13e1ec1d3aaf5c3ff7c7ccd058ead15b5", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/627e71a13e1ec1d3aaf5c3ff7c7ccd058ead15b5", "committedDate": "2020-04-22T13:12:51Z", "message": "Add support for enabling CDI beans based on build time properties"}, "afterCommit": {"oid": "3d5d9816780a05b3414c8411b2d852da4a705d64", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/3d5d9816780a05b3414c8411b2d852da4a705d64", "committedDate": "2020-04-23T12:52:20Z", "message": "Add support for enabling CDI beans based on build time properties"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NTcyNDQ2", "url": "https://github.com/quarkusio/quarkus/pull/8726#pullrequestreview-399572446", "createdAt": "2020-04-24T00:53:15Z", "commit": {"oid": "3d5d9816780a05b3414c8411b2d852da4a705d64"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDo1MzoxNVrOGLB9oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDo1MzoxNVrOGLB9oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIxOTY4MQ==", "bodyText": "Just curious, would it make sense to use a regular expression here? eg. v.*\nIf so, perhaps String matches() would be more appropriate", "url": "https://github.com/quarkusio/quarkus/pull/8726#discussion_r414219681", "createdAt": "2020-04-24T00:53:15Z", "author": {"login": "gastaldi"}, "path": "extensions/arc/runtime/src/main/java/io/quarkus/arc/properties/IfBuildProperty.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package io.quarkus.arc.properties;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * When applied to a bean class or producer method (or field), the bean will only be enabled\n+ * if the Quarkus build time property matches the provided value.\n+ * By default, the bean is not enabled when the build time property is not defined at all, but this behavior is configurable\n+ * via the {#code enableIfMissing} property.\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ ElementType.METHOD, ElementType.TYPE, ElementType.FIELD })\n+public @interface IfBuildProperty {\n+\n+    /**\n+     * Name of the build time property to check\n+     */\n+    String name();\n+\n+    /**\n+     * Expected {@code String} value of the build time property (specified by {@code name}) if the bean is to be enabled\n+     */\n+    String stringValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d5d9816780a05b3414c8411b2d852da4a705d64"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NzA1ODk0", "url": "https://github.com/quarkusio/quarkus/pull/8726#pullrequestreview-399705894", "createdAt": "2020-04-24T07:33:23Z", "commit": {"oid": "3d5d9816780a05b3414c8411b2d852da4a705d64"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "689a6e4122595dd8791b945544a436419b5e43d4", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/689a6e4122595dd8791b945544a436419b5e43d4", "committedDate": "2020-04-24T07:44:21Z", "message": "Add support for enabling CDI beans based on build time properties"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d5d9816780a05b3414c8411b2d852da4a705d64", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/3d5d9816780a05b3414c8411b2d852da4a705d64", "committedDate": "2020-04-23T12:52:20Z", "message": "Add support for enabling CDI beans based on build time properties"}, "afterCommit": {"oid": "689a6e4122595dd8791b945544a436419b5e43d4", "author": {"user": {"login": "geoand", "name": "Georgios Andrianakis"}}, "url": "https://github.com/quarkusio/quarkus/commit/689a6e4122595dd8791b945544a436419b5e43d4", "committedDate": "2020-04-24T07:44:21Z", "message": "Add support for enabling CDI beans based on build time properties"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NzE0ODgy", "url": "https://github.com/quarkusio/quarkus/pull/8726#pullrequestreview-399714882", "createdAt": "2020-04-24T07:47:11Z", "commit": {"oid": "689a6e4122595dd8791b945544a436419b5e43d4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4467, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}