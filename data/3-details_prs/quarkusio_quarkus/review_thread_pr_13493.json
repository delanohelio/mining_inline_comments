{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MTM4MjU4", "number": 13493, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjowNjozOVrOE9sZsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjowNzo0OVrOE9sbHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTI2MDY2OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/qute-reference.adoc", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjowNjozOVrOH6hNiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjozNjo1M1rOH688Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEyMzU5Mg==", "bodyText": "What about asUni? and asMulti?", "url": "https://github.com/quarkusio/quarkus/pull/13493#discussion_r531123592", "createdAt": "2020-11-26T16:06:39Z", "author": {"login": "cescoffier"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -862,6 +863,50 @@ We can include the tag like this:\n <1> `item` is resolved to an iteration element and can be referenced using the `it` key in the tag template.\n <2> Tag content injected using the `nested-content` key in the tag template.\n \n+=== Rendering Output\n+\n+`TemplateInstance` provides several ways to trigger the rendering and consume the result.\n+The most straightforward approach is represented by `TemplateInstance.render()`.\n+This method triggers a synchronous rendering, i.e. the current thread is blocked until the rendering is finished, and returns the output.\n+By contrast, `TemplateInstance.renderAsync()` returns a `CompletionStage<String>` which is completed when the rendering is finished.\n+\n+.`TemplateInstance.renderAsync()` Example\n+[source,java]\n+----\n+template.data(foo).renderAsync().whenComplete((result, failure) -> { <1>\n+   if (failure == null) {\n+      // consume the output...\n+   } else {\n+      // process failure...\n+   }\n+};\n+----\n+<1> Register a callback that is executed once the rendering is finished. \n+\n+There are also two methods that return https://smallrye.io/smallrye-mutiny/[Mutiny] types.\n+`TemplateInstance.createUni()` returns a new `Uni<String>` object.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c03316f1807b314e03ca420ee392a1531c641ba0"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQxNTkwOQ==", "bodyText": "Hm, I don't know. I usually only use asX() methods to easily cast a more generic type to a subtype, e.g. something like org.jboss.jandex.AnnotationTarget.asMethod().", "url": "https://github.com/quarkusio/quarkus/pull/13493#discussion_r531415909", "createdAt": "2020-11-27T07:06:38Z", "author": {"login": "mkouba"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -862,6 +863,50 @@ We can include the tag like this:\n <1> `item` is resolved to an iteration element and can be referenced using the `it` key in the tag template.\n <2> Tag content injected using the `nested-content` key in the tag template.\n \n+=== Rendering Output\n+\n+`TemplateInstance` provides several ways to trigger the rendering and consume the result.\n+The most straightforward approach is represented by `TemplateInstance.render()`.\n+This method triggers a synchronous rendering, i.e. the current thread is blocked until the rendering is finished, and returns the output.\n+By contrast, `TemplateInstance.renderAsync()` returns a `CompletionStage<String>` which is completed when the rendering is finished.\n+\n+.`TemplateInstance.renderAsync()` Example\n+[source,java]\n+----\n+template.data(foo).renderAsync().whenComplete((result, failure) -> { <1>\n+   if (failure == null) {\n+      // consume the output...\n+   } else {\n+      // process failure...\n+   }\n+};\n+----\n+<1> Register a callback that is executed once the rendering is finished. \n+\n+There are also two methods that return https://smallrye.io/smallrye-mutiny/[Mutiny] types.\n+`TemplateInstance.createUni()` returns a new `Uni<String>` object.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEyMzU5Mg=="}, "originalCommit": {"oid": "c03316f1807b314e03ca420ee392a1531c641ba0"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQxNjI4Mw==", "bodyText": "as you have renderAsync, maybe renderAsUni and renderAsMulti?", "url": "https://github.com/quarkusio/quarkus/pull/13493#discussion_r531416283", "createdAt": "2020-11-27T07:07:47Z", "author": {"login": "cescoffier"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -862,6 +863,50 @@ We can include the tag like this:\n <1> `item` is resolved to an iteration element and can be referenced using the `it` key in the tag template.\n <2> Tag content injected using the `nested-content` key in the tag template.\n \n+=== Rendering Output\n+\n+`TemplateInstance` provides several ways to trigger the rendering and consume the result.\n+The most straightforward approach is represented by `TemplateInstance.render()`.\n+This method triggers a synchronous rendering, i.e. the current thread is blocked until the rendering is finished, and returns the output.\n+By contrast, `TemplateInstance.renderAsync()` returns a `CompletionStage<String>` which is completed when the rendering is finished.\n+\n+.`TemplateInstance.renderAsync()` Example\n+[source,java]\n+----\n+template.data(foo).renderAsync().whenComplete((result, failure) -> { <1>\n+   if (failure == null) {\n+      // consume the output...\n+   } else {\n+      // process failure...\n+   }\n+};\n+----\n+<1> Register a callback that is executed once the rendering is finished. \n+\n+There are also two methods that return https://smallrye.io/smallrye-mutiny/[Mutiny] types.\n+`TemplateInstance.createUni()` returns a new `Uni<String>` object.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEyMzU5Mg=="}, "originalCommit": {"oid": "c03316f1807b314e03ca420ee392a1531c641ba0"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQxOTMzMA==", "bodyText": "The thing is that createUni() and createMulti() don't trigger rendering. It's the subscription that does trigger it.", "url": "https://github.com/quarkusio/quarkus/pull/13493#discussion_r531419330", "createdAt": "2020-11-27T07:17:08Z", "author": {"login": "mkouba"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -862,6 +863,50 @@ We can include the tag like this:\n <1> `item` is resolved to an iteration element and can be referenced using the `it` key in the tag template.\n <2> Tag content injected using the `nested-content` key in the tag template.\n \n+=== Rendering Output\n+\n+`TemplateInstance` provides several ways to trigger the rendering and consume the result.\n+The most straightforward approach is represented by `TemplateInstance.render()`.\n+This method triggers a synchronous rendering, i.e. the current thread is blocked until the rendering is finished, and returns the output.\n+By contrast, `TemplateInstance.renderAsync()` returns a `CompletionStage<String>` which is completed when the rendering is finished.\n+\n+.`TemplateInstance.renderAsync()` Example\n+[source,java]\n+----\n+template.data(foo).renderAsync().whenComplete((result, failure) -> { <1>\n+   if (failure == null) {\n+      // consume the output...\n+   } else {\n+      // process failure...\n+   }\n+};\n+----\n+<1> Register a callback that is executed once the rendering is finished. \n+\n+There are also two methods that return https://smallrye.io/smallrye-mutiny/[Mutiny] types.\n+`TemplateInstance.createUni()` returns a new `Uni<String>` object.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEyMzU5Mg=="}, "originalCommit": {"oid": "c03316f1807b314e03ca420ee392a1531c641ba0"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3NzkxOA==", "bodyText": "Right!\nSo, let's keep createUni and createMulti.", "url": "https://github.com/quarkusio/quarkus/pull/13493#discussion_r531577918", "createdAt": "2020-11-27T12:36:53Z", "author": {"login": "cescoffier"}, "path": "docs/src/main/asciidoc/qute-reference.adoc", "diffHunk": "@@ -862,6 +863,50 @@ We can include the tag like this:\n <1> `item` is resolved to an iteration element and can be referenced using the `it` key in the tag template.\n <2> Tag content injected using the `nested-content` key in the tag template.\n \n+=== Rendering Output\n+\n+`TemplateInstance` provides several ways to trigger the rendering and consume the result.\n+The most straightforward approach is represented by `TemplateInstance.render()`.\n+This method triggers a synchronous rendering, i.e. the current thread is blocked until the rendering is finished, and returns the output.\n+By contrast, `TemplateInstance.renderAsync()` returns a `CompletionStage<String>` which is completed when the rendering is finished.\n+\n+.`TemplateInstance.renderAsync()` Example\n+[source,java]\n+----\n+template.data(foo).renderAsync().whenComplete((result, failure) -> { <1>\n+   if (failure == null) {\n+      // consume the output...\n+   } else {\n+      // process failure...\n+   }\n+};\n+----\n+<1> Register a callback that is executed once the rendering is finished. \n+\n+There are also two methods that return https://smallrye.io/smallrye-mutiny/[Mutiny] types.\n+`TemplateInstance.createUni()` returns a new `Uni<String>` object.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEyMzU5Mg=="}, "originalCommit": {"oid": "c03316f1807b314e03ca420ee392a1531c641ba0"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTI2NDMwOnYy", "diffSide": "RIGHT", "path": "independent-projects/qute/core/src/main/java/io/quarkus/qute/TemplateImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjowNzo0OVrOH6hPvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzowODowM1rOH6zFLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEyNDE1Nw==", "bodyText": "When not just Uni.createFrom().completionStage(() -> renderAsync()) ?", "url": "https://github.com/quarkusio/quarkus/pull/13493#discussion_r531124157", "createdAt": "2020-11-26T16:07:49Z", "author": {"login": "cescoffier"}, "path": "independent-projects/qute/core/src/main/java/io/quarkus/qute/TemplateImpl.java", "diffHunk": "@@ -79,6 +80,17 @@ public String render() {\n                     }));\n         }\n \n+        @Override\n+        public Uni<String> createUni() {\n+            return Uni.createFrom().emitter(emitter -> renderAsync().whenComplete((r, f) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c03316f1807b314e03ca420ee392a1531c641ba0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQxNjM2Nw==", "bodyText": "Ah, I missed the UniCreate.completionStage(Supplier<? extends CompletionStage<? extends T>>) variant. All the reactive APIs are so rich ;-).", "url": "https://github.com/quarkusio/quarkus/pull/13493#discussion_r531416367", "createdAt": "2020-11-27T07:08:03Z", "author": {"login": "mkouba"}, "path": "independent-projects/qute/core/src/main/java/io/quarkus/qute/TemplateImpl.java", "diffHunk": "@@ -79,6 +80,17 @@ public String render() {\n                     }));\n         }\n \n+        @Override\n+        public Uni<String> createUni() {\n+            return Uni.createFrom().emitter(emitter -> renderAsync().whenComplete((r, f) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEyNDE1Nw=="}, "originalCommit": {"oid": "c03316f1807b314e03ca420ee392a1531c641ba0"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3846, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}