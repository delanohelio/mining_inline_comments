{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0MDE0NzU2", "number": 972, "title": "Apicurio Registry events", "bodyText": "from #970 but this time taking into accound the feedback from @dmvolod . Events are produced at storage layer level and sent to Vertx event bus, so all REST interfaces will produce events... and the underliying technology used to share the events, for now HTTP and CloudEvents, is abstracted.\nI avoided to have to modify every storage layer by adding new methods and implemented events producing by following the delegation pattern, overloading the functionalities and firing the corresponding events for some specific storage actions...", "createdAt": "2020-11-02T12:07:09Z", "url": "https://github.com/Apicurio/apicurio-registry/pull/972", "merged": true, "mergeCommit": {"oid": "9e2e89ee0b3051917edee386f28bfdebe7db0a2b"}, "closed": true, "closedAt": "2020-11-23T14:03:17Z", "author": {"login": "famartinrh"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbaq8tABqjM5ODI5NzgzNjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdea481ABqjQwMjIwMDM2OTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ffa9f9e3033a21d243075044a023272f32b9ddd5", "author": {"user": {"login": "famartinrh", "name": "Fabian Martinez"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/ffa9f9e3033a21d243075044a023272f32b9ddd5", "committedDate": "2020-11-11T09:29:40Z", "message": "registry events - send events to kafka when using kafka storage"}, "afterCommit": {"oid": "c198622ea1721d35d325218576f85b4e7e2a6c6e", "author": {"user": {"login": "famartinrh", "name": "Fabian Martinez"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/c198622ea1721d35d325218576f85b4e7e2a6c6e", "committedDate": "2020-11-11T09:37:25Z", "message": "registry events - send events to kafka when using kafka storage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MDQ4NjY5", "url": "https://github.com/Apicurio/apicurio-registry/pull/972#pullrequestreview-528048669", "createdAt": "2020-11-11T10:30:02Z", "commit": {"oid": "c198622ea1721d35d325218576f85b4e7e2a6c6e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDozMDowMlrOHxHVEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDozMDowMlrOHxHVEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2MjM1NQ==", "bodyText": "Is producerPproperties or producerProperties?", "url": "https://github.com/Apicurio/apicurio-registry/pull/972#discussion_r521262355", "createdAt": "2020-11-11T10:30:02Z", "author": {"login": "antonmry"}, "path": "storage/streams/src/main/java/io/apicurio/registry/streams/events/KafkaEventSink.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package io.apicurio.registry.streams.events;\n+\n+import java.time.Instant;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.UUID;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.header.Headers;\n+import org.apache.kafka.common.header.internals.RecordHeaders;\n+import org.apache.kafka.common.serialization.Serdes;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.apicurio.registry.events.EventSink;\n+import io.apicurio.registry.utils.RegistryProperties;\n+import io.apicurio.registry.utils.kafka.AsyncProducer;\n+import io.apicurio.registry.utils.kafka.ProducerActions;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.eventbus.Message;\n+\n+/**\n+ * @author Fabian Martinez\n+ */\n+@ApplicationScoped\n+public class KafkaEventSink implements EventSink {\n+\n+    private static final Logger log = LoggerFactory.getLogger(KafkaEventSink.class);\n+\n+    @Inject\n+    @RegistryProperties(\n+            value = {\"registry.streams.common\", \"registry.streams.events\"},\n+            empties = {\"ssl.endpoint.identification.algorithm=\"}\n+    )\n+    Properties producerPproperties;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c198622ea1721d35d325218576f85b4e7e2a6c6e"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MDUxMDI4", "url": "https://github.com/Apicurio/apicurio-registry/pull/972#pullrequestreview-528051028", "createdAt": "2020-11-11T10:33:24Z", "commit": {"oid": "c198622ea1721d35d325218576f85b4e7e2a6c6e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDozMzoyNFrOHxHcDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDozMzoyNFrOHxHcDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2NDE0MQ==", "bodyText": "It should be Optional or Mandatory?", "url": "https://github.com/Apicurio/apicurio-registry/pull/972#discussion_r521264141", "createdAt": "2020-11-11T10:33:24Z", "author": {"login": "antonmry"}, "path": "storage/streams/src/main/java/io/apicurio/registry/streams/events/KafkaEventSink.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package io.apicurio.registry.streams.events;\n+\n+import java.time.Instant;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.UUID;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.header.Headers;\n+import org.apache.kafka.common.header.internals.RecordHeaders;\n+import org.apache.kafka.common.serialization.Serdes;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.apicurio.registry.events.EventSink;\n+import io.apicurio.registry.utils.RegistryProperties;\n+import io.apicurio.registry.utils.kafka.AsyncProducer;\n+import io.apicurio.registry.utils.kafka.ProducerActions;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.eventbus.Message;\n+\n+/**\n+ * @author Fabian Martinez\n+ */\n+@ApplicationScoped\n+public class KafkaEventSink implements EventSink {\n+\n+    private static final Logger log = LoggerFactory.getLogger(KafkaEventSink.class);\n+\n+    @Inject\n+    @RegistryProperties(\n+            value = {\"registry.streams.common\", \"registry.streams.events\"},\n+            empties = {\"ssl.endpoint.identification.algorithm=\"}\n+    )\n+    Properties producerPproperties;\n+\n+    private ProducerActions<UUID, byte[]> producer;\n+    private Integer partition;\n+\n+    @ConfigProperty(name = \"registry.events.kafka.topic\")\n+    Optional<String> eventsTopic;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c198622ea1721d35d325218576f85b4e7e2a6c6e"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MDUxNzA0", "url": "https://github.com/Apicurio/apicurio-registry/pull/972#pullrequestreview-528051704", "createdAt": "2020-11-11T10:34:17Z", "commit": {"oid": "c198622ea1721d35d325218576f85b4e7e2a6c6e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDozNDoxOFrOHxHeTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDozNDoxOFrOHxHeTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2NDcxNg==", "bodyText": "Where are the rest of Kafka properties defined? BOOTSTRAP_SERVERS_CONFIG, Auth, etc.", "url": "https://github.com/Apicurio/apicurio-registry/pull/972#discussion_r521264716", "createdAt": "2020-11-11T10:34:18Z", "author": {"login": "antonmry"}, "path": "storage/streams/src/main/java/io/apicurio/registry/streams/events/KafkaEventSink.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package io.apicurio.registry.streams.events;\n+\n+import java.time.Instant;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.UUID;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.header.Headers;\n+import org.apache.kafka.common.header.internals.RecordHeaders;\n+import org.apache.kafka.common.serialization.Serdes;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.apicurio.registry.events.EventSink;\n+import io.apicurio.registry.utils.RegistryProperties;\n+import io.apicurio.registry.utils.kafka.AsyncProducer;\n+import io.apicurio.registry.utils.kafka.ProducerActions;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.eventbus.Message;\n+\n+/**\n+ * @author Fabian Martinez\n+ */\n+@ApplicationScoped\n+public class KafkaEventSink implements EventSink {\n+\n+    private static final Logger log = LoggerFactory.getLogger(KafkaEventSink.class);\n+\n+    @Inject\n+    @RegistryProperties(\n+            value = {\"registry.streams.common\", \"registry.streams.events\"},\n+            empties = {\"ssl.endpoint.identification.algorithm=\"}\n+    )\n+    Properties producerPproperties;\n+\n+    private ProducerActions<UUID, byte[]> producer;\n+    private Integer partition;\n+\n+    @ConfigProperty(name = \"registry.events.kafka.topic\")\n+    Optional<String> eventsTopic;\n+\n+    @ConfigProperty(name = \"registry.events.kafka.topic-partition\")\n+    Optional<Integer> eventsTopicPartition;\n+\n+    @PostConstruct\n+    void init() {\n+        partition = eventsTopicPartition.orElse(0);\n+    }\n+\n+    @Override\n+    public String name() {\n+        return \"Kafka Sink\";\n+    }\n+\n+    @Override\n+    public boolean isConfigured() {\n+        return eventsTopic.isPresent();\n+    }\n+\n+    @Override\n+    public void handle(Message<Buffer> message) {\n+        String type = message.headers().get(\"type\");\n+\n+        log.info(\"Firing event \" + type);\n+\n+        UUID uuid = UUID.randomUUID();\n+\n+        Headers headers = new RecordHeaders();\n+        headers.add(\"ce_id\", uuid.toString().getBytes());\n+        headers.add(\"ce_specversion\", \"1.0\".getBytes());\n+        headers.add(\"ce_source\", \"apicurio-registry\".getBytes());\n+        headers.add(\"ce_type\", type.getBytes());\n+        headers.add(\"ce_time\", Instant.now().toString().getBytes());\n+        headers.add(\"content-type\", \"application/json\".getBytes());\n+\n+        getProducer()\n+            .apply(new ProducerRecord<UUID, byte[]>(\n+                    eventsTopic.get(),\n+                    partition,\n+                    uuid,\n+                    message.body().getBytes(),\n+                    headers));\n+\n+    }\n+\n+    public synchronized ProducerActions<UUID, byte[]> getProducer() {\n+        if (producer == null) {\n+            producer = new AsyncProducer<UUID, byte[]>(\n+                    producerPproperties,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c198622ea1721d35d325218576f85b4e7e2a6c6e"}, "originalPosition": 95}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3bfc48190343fab3fda3d6780c09abfbdb16bcdb", "author": {"user": {"login": "famartinrh", "name": "Fabian Martinez"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/3bfc48190343fab3fda3d6780c09abfbdb16bcdb", "committedDate": "2020-11-11T12:08:05Z", "message": "fix typo"}, "afterCommit": {"oid": "8ab5f04e16ecebd55d901a0c7e00f057614721da", "author": {"user": {"login": "famartinrh", "name": "Fabian Martinez"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/8ab5f04e16ecebd55d901a0c7e00f057614721da", "committedDate": "2020-11-11T12:08:19Z", "message": "fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a168e30d1e0fb1f5c960bdfa85ad6f8ccdb49b06", "author": {"user": {"login": "famartinrh", "name": "Fabian Martinez"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/a168e30d1e0fb1f5c960bdfa85ad6f8ccdb49b06", "committedDate": "2020-11-20T17:30:47Z", "message": "apicurio events - first version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "103839dd0f9066b7a5b58c57e5882381506085d7", "author": {"user": {"login": "famartinrh", "name": "Fabian Martinez"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/103839dd0f9066b7a5b58c57e5882381506085d7", "committedDate": "2020-11-20T17:30:47Z", "message": "registry events - v2 - implement events producing at storage layer level, plus using vertx event bus"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a57da0804e187fe66e28de9a678eb86ec519c3e", "author": {"user": {"login": "famartinrh", "name": "Fabian Martinez"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/9a57da0804e187fe66e28de9a678eb86ec519c3e", "committedDate": "2020-11-20T17:30:47Z", "message": "basic test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc35371e10c2f4fda2456d3efb3c0c98678a4fd1", "author": {"user": {"login": "famartinrh", "name": "Fabian Martinez"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/fc35371e10c2f4fda2456d3efb3c0c98678a4fd1", "committedDate": "2020-11-20T17:30:47Z", "message": "registry events - send events to kafka when using kafka storage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02a8d896ae39b052c5fc2c38fa99f5e9c88dd01f", "author": {"user": {"login": "famartinrh", "name": "Fabian Martinez"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/02a8d896ae39b052c5fc2c38fa99f5e9c88dd01f", "committedDate": "2020-11-20T17:30:47Z", "message": "fix EventSourcedRegistryStorage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99377b56192d0cbf3bbe16ce00070d9d9c797271", "author": {"user": {"login": "famartinrh", "name": "Fabian Martinez"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/99377b56192d0cbf3bbe16ce00070d9d9c797271", "committedDate": "2020-11-20T17:30:47Z", "message": "fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a2d7e5b760affcb7158ece1e5b2a0c413969ebf", "author": {"user": {"login": "famartinrh", "name": "Fabian Martinez"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/2a2d7e5b760affcb7158ece1e5b2a0c413969ebf", "committedDate": "2020-11-20T17:30:47Z", "message": "improve structure and kafka events for everyone"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78b9ab56dcebcfb8e08bdbe07fcd13bfb853b86f", "author": {"user": {"login": "famartinrh", "name": "Fabian Martinez"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/78b9ab56dcebcfb8e08bdbe07fcd13bfb853b86f", "committedDate": "2020-11-20T17:30:47Z", "message": "fix properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad5fa10c3bc36a45affba0f808e891d5671ad5a5", "author": {"user": {"login": "famartinrh", "name": "Fabian Martinez"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/ad5fa10c3bc36a45affba0f808e891d5671ad5a5", "committedDate": "2020-11-20T17:30:47Z", "message": "improve kafka events"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b8140b22bc7d44082ea2b1a355422b03995a7c15", "author": {"user": {"login": "famartinrh", "name": "Fabian Martinez"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/b8140b22bc7d44082ea2b1a355422b03995a7c15", "committedDate": "2020-11-12T09:50:02Z", "message": "fix properties"}, "afterCommit": {"oid": "ad5fa10c3bc36a45affba0f808e891d5671ad5a5", "author": {"user": {"login": "famartinrh", "name": "Fabian Martinez"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/ad5fa10c3bc36a45affba0f808e891d5671ad5a5", "committedDate": "2020-11-20T17:30:47Z", "message": "improve kafka events"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4359, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}