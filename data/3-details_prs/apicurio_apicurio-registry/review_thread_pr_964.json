{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyMzMzMjky", "number": 964, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNToxMDo0MVrOEzWBjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNToxOTowOFrOEzWR9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjczNjc4OnYy", "diffSide": "RIGHT", "path": "docs/modules/ROOT/partials/getting-started/proc-managing-artifacts-using-maven-plugin.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNToxMDo0MVrOHqgkVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNToxMDo0MVrOHqgkVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzNTgyOA==", "bodyText": "Suggest \"even if your test passes..\" or \"even if your artifact content passes\" to be more clear?", "url": "https://github.com/Apicurio/apicurio-registry/pull/964#discussion_r514335828", "createdAt": "2020-10-29T15:10:41Z", "author": {"login": "smccarthy-ie"}, "path": "docs/modules/ROOT/partials/getting-started/proc-managing-artifacts-using-maven-plugin.adoc", "diffHunk": "@@ -12,67 +12,111 @@\n * {registry} must be installed and running in your environment\n * Maven must be installed and configured in your environment\n \n-.Procedure\n+== Registering an artifact using the Maven plug-in\n+\n+Probably the most common use case for the Maven plug-in is registering artifacts during a build.  You can accomplish\n+this by using the `register` goal provided.  Simply update your Maven `pom.xml` file to use the\n+`apicurio-registry-maven-plugin` to upload an artifact to {registry}.\n+\n+The following example shows registering an Apache Avro schema artifact:\n \n-. Update your Maven `pom.xml` file to use the `apicurio-registry-maven-plugin` to upload an artifact to {registry}. The following example shows registering an Apache Avro schema artifact:\n-+\n [source,xml]\n ----\n <plugin>\n-<groupId>io.apicurio</groupId>\n-<artifactId>apicurio-registry-maven-plugin</artifactId>\n-<version>${registry.version}</version>\n-<executions>\n-  <execution>\n-    <phase>generate-sources</phase>\n-    <goals>\n-      <goal>register</goal> <1>\n-    </goals>\n-    <configuration>\n-      <registryUrl>http://my-cluster-service-registry-myproject.example.com/api</registryUrl> <2>\n-      <artifactType>AVRO</artifactType> \n-      <artifacts>\n-        <schema1>${project.basedir}/schemas/schema1.avsc</schema1> <3>\n-      </artifacts>\n-    </configuration>\n-  </execution>\n-</executions>\n+  <groupId>io.apicurio</groupId>\n+  <artifactId>apicurio-registry-maven-plugin</artifactId>\n+  <version>${registry.version}</version>\n+  <executions>\n+    <execution>\n+      <phase>generate-sources</phase>\n+      <goals>\n+        <goal>register</goal> <1>\n+      </goals>\n+      <configuration>\n+        <registryUrl>http://my-cluster-service-registry-myproject.example.com/api</registryUrl> <2>\n+        <artifactType>AVRO</artifactType>\n+        <artifacts>\n+          <schema1>${project.basedir}/schemas/schema1.avsc</schema1> <3>\n+        </artifacts>\n+      </configuration>\n+    </execution>\n+  </executions>\n </plugin>\n ----\n-+\n <1> Specify `register` as the execution goal to upload an artifact to the registry.\n <2> You must specify the {registry} URL with the `/api` endpoint.\n-<3> You can upload multiple artifacts using the artifact ID and location. \n+<3> You can upload multiple artifacts using the artifact ID and location.\n+\n+== Downloading an artifact using the Maven plug-in\n+You can also use the Maven plug-in to download artifacts from {registry}.  This is often useful, for example, when\n+generating code from a registered schema.\n+\n+The following example shows downloading a single schema by its artifact ID.\n \n-. You can also update your Maven `pom.xml` file to download a previously registered artifact from {registry}:\n-+\n [source,xml]\n ----\n <plugin>\n <groupId>io.apicurio</groupId>\n <artifactId>apicurio-registry-maven-plugin</artifactId>\n <version>${registry.version}</version>\n-<executions>   \n+<executions>\n   <execution>\n-    <phase>generate-sources</phase> \n+    <phase>generate-sources</phase>\n     <goals>\n       <goal>download</goal> <1>\n     </goals>\n     <configuration>\n       <registryUrl>http://my-cluster-service-registry-myproject.example.com/api</registryUrl> <2>\n-          <ids>\n-            <param1>schema1</param1> <3>\n-          </ids>\n+      <ids>\n+        <param1>schema1</param1> <3>\n+      </ids>\n+      <artifactExtension>.avsc</artifactExtension> <4>\n       <outputDirectory>${project.build.directory}</outputDirectory>\n    </configuration>\n  </execution>\n-</executions>   \n+</executions>\n </plugin>\n ----\n-+\n <1> Specify `download` as the execution goal.\n <2> You must specify the {registry} URL with the `/api` endpoint.\n <3> You can download multiple artifacts to a specified directory using the artifact ID.\n+<4> The plug-in will automatically (try to) choose an appropriate file extension, but you can override it using `<artifactExtension>`.\n+\n+== Testing an artifact\n+You may want to simply verify that an artifact can be registered without actually making any changes.  This is most\n+often useful when rules have been configured in {registry}.  Testing the artifact will result in a failure if the\n+artifact content violates any of the configured rules.\n+\n+NOTE: No content will be added to {registry} even if it passes all of the configured rules.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bd0a0dfc8c1f8b04c0b01c5e7d8d667a9f0e1bd"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjc3ODc4OnYy", "diffSide": "RIGHT", "path": "docs/modules/ROOT/partials/getting-started/proc-managing-artifacts-using-maven-plugin.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNToxOTowOFrOHqg-fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNToxOTowOFrOHqg-fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0MjUyNw==", "bodyText": "Suggest removing parentheses: \"automatically try to choose...\"", "url": "https://github.com/Apicurio/apicurio-registry/pull/964#discussion_r514342527", "createdAt": "2020-10-29T15:19:08Z", "author": {"login": "smccarthy-ie"}, "path": "docs/modules/ROOT/partials/getting-started/proc-managing-artifacts-using-maven-plugin.adoc", "diffHunk": "@@ -12,67 +12,111 @@\n * {registry} must be installed and running in your environment\n * Maven must be installed and configured in your environment\n \n-.Procedure\n+== Registering an artifact using the Maven plug-in\n+\n+Probably the most common use case for the Maven plug-in is registering artifacts during a build.  You can accomplish\n+this by using the `register` goal provided.  Simply update your Maven `pom.xml` file to use the\n+`apicurio-registry-maven-plugin` to upload an artifact to {registry}.\n+\n+The following example shows registering an Apache Avro schema artifact:\n \n-. Update your Maven `pom.xml` file to use the `apicurio-registry-maven-plugin` to upload an artifact to {registry}. The following example shows registering an Apache Avro schema artifact:\n-+\n [source,xml]\n ----\n <plugin>\n-<groupId>io.apicurio</groupId>\n-<artifactId>apicurio-registry-maven-plugin</artifactId>\n-<version>${registry.version}</version>\n-<executions>\n-  <execution>\n-    <phase>generate-sources</phase>\n-    <goals>\n-      <goal>register</goal> <1>\n-    </goals>\n-    <configuration>\n-      <registryUrl>http://my-cluster-service-registry-myproject.example.com/api</registryUrl> <2>\n-      <artifactType>AVRO</artifactType> \n-      <artifacts>\n-        <schema1>${project.basedir}/schemas/schema1.avsc</schema1> <3>\n-      </artifacts>\n-    </configuration>\n-  </execution>\n-</executions>\n+  <groupId>io.apicurio</groupId>\n+  <artifactId>apicurio-registry-maven-plugin</artifactId>\n+  <version>${registry.version}</version>\n+  <executions>\n+    <execution>\n+      <phase>generate-sources</phase>\n+      <goals>\n+        <goal>register</goal> <1>\n+      </goals>\n+      <configuration>\n+        <registryUrl>http://my-cluster-service-registry-myproject.example.com/api</registryUrl> <2>\n+        <artifactType>AVRO</artifactType>\n+        <artifacts>\n+          <schema1>${project.basedir}/schemas/schema1.avsc</schema1> <3>\n+        </artifacts>\n+      </configuration>\n+    </execution>\n+  </executions>\n </plugin>\n ----\n-+\n <1> Specify `register` as the execution goal to upload an artifact to the registry.\n <2> You must specify the {registry} URL with the `/api` endpoint.\n-<3> You can upload multiple artifacts using the artifact ID and location. \n+<3> You can upload multiple artifacts using the artifact ID and location.\n+\n+== Downloading an artifact using the Maven plug-in\n+You can also use the Maven plug-in to download artifacts from {registry}.  This is often useful, for example, when\n+generating code from a registered schema.\n+\n+The following example shows downloading a single schema by its artifact ID.\n \n-. You can also update your Maven `pom.xml` file to download a previously registered artifact from {registry}:\n-+\n [source,xml]\n ----\n <plugin>\n <groupId>io.apicurio</groupId>\n <artifactId>apicurio-registry-maven-plugin</artifactId>\n <version>${registry.version}</version>\n-<executions>   \n+<executions>\n   <execution>\n-    <phase>generate-sources</phase> \n+    <phase>generate-sources</phase>\n     <goals>\n       <goal>download</goal> <1>\n     </goals>\n     <configuration>\n       <registryUrl>http://my-cluster-service-registry-myproject.example.com/api</registryUrl> <2>\n-          <ids>\n-            <param1>schema1</param1> <3>\n-          </ids>\n+      <ids>\n+        <param1>schema1</param1> <3>\n+      </ids>\n+      <artifactExtension>.avsc</artifactExtension> <4>\n       <outputDirectory>${project.build.directory}</outputDirectory>\n    </configuration>\n  </execution>\n-</executions>   \n+</executions>\n </plugin>\n ----\n-+\n <1> Specify `download` as the execution goal.\n <2> You must specify the {registry} URL with the `/api` endpoint.\n <3> You can download multiple artifacts to a specified directory using the artifact ID.\n+<4> The plug-in will automatically (try to) choose an appropriate file extension, but you can override it using `<artifactExtension>`.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bd0a0dfc8c1f8b04c0b01c5e7d8d667a9f0e1bd"}, "originalPosition": 105}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3469, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}