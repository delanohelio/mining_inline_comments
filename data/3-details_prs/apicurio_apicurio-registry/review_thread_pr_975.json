{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0MTU2MzY3", "number": 975, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzozNDoxMlrOE0zuTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzozNDo1NFrOE0zvmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODA4ODQ1OnYy", "diffSide": "RIGHT", "path": "utils/tests/src/main/java/io/apicurio/registry/utils/tests/RegistryRestClientExtension.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzozNDoxMlrOHsu8Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzozNDoxMlrOHsu8Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY2ODQ4Ng==", "bodyText": "Can you re-use this rather than creating a new one each time?  Maybe inside LazyRegistryRestClient?", "url": "https://github.com/Apicurio/apicurio-registry/pull/975#discussion_r516668486", "createdAt": "2020-11-03T13:34:12Z", "author": {"login": "EricWittmann"}, "path": "utils/tests/src/main/java/io/apicurio/registry/utils/tests/RegistryRestClientExtension.java", "diffHunk": "@@ -1,53 +1,35 @@\n package io.apicurio.registry.utils.tests;\n \n-import java.lang.reflect.ParameterizedType;\n import java.lang.reflect.Type;\n-\n import org.junit.jupiter.api.extension.ExtensionContext;\n import org.junit.jupiter.api.extension.ParameterContext;\n import org.junit.jupiter.api.extension.ParameterResolutionException;\n import org.junit.jupiter.api.extension.ParameterResolver;\n \n import io.apicurio.registry.client.RegistryRestClient;\n-import io.apicurio.registry.client.RegistryRestClientFactory;\n \n /**\n  * @author famartin\n  */\n public class RegistryRestClientExtension implements ParameterResolver {\n-    \n-    private static RegistryRestClient CLIENT;\n-    \n-    private static final RegistryRestClient getRestClient() {\n-        if (CLIENT == null) {\n-            CLIENT = RegistryRestClientFactory.create(TestUtils.getRegistryApiUrl());\n-        }\n-        return CLIENT;\n-    }\n-    \n+\n     @Override\n     public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) throws ParameterResolutionException {\n         Type type = parameterContext.getParameter().getParameterizedType();\n         if (type instanceof Class) {\n             if (type == RegistryRestClient.class) {\n                 return true;\n-            }\n-        } else if (type instanceof ParameterizedType) {\n-            ParameterizedType pt = (ParameterizedType) type;\n-            Type rawType = pt.getRawType();\n-            if (rawType == RegistryRestClient.class) {\n+            } else if (RegistryRestClient.class.isAssignableFrom((Class)type)){\n                 return true;\n             }\n         }\n+\n         return false;\n     }\n \n     @Override\n     public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) throws ParameterResolutionException {\n-        ExtensionContext.Store store = extensionContext.getStore(ExtensionContext.Namespace.GLOBAL);\n-        return store.getOrComputeIfAbsent(\"registry_rest_client\", k -> {\n-            return getRestClient();\n-        });\n+        return new LazyRegistryRestClient(TestUtils.getRegistryApiUrl());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e88d69726f437fd4650c13483c1ae45f25dc62cd"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODA5MTc5OnYy", "diffSide": "RIGHT", "path": "utils/tests/src/main/java/io/apicurio/registry/utils/tests/LazyRegistryRestClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzozNDo1NFrOHsu-GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzozNDo1NFrOHsu-GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY2ODk1Mw==", "bodyText": "Minor point, but I'd probably call this delegate rather than instance... unless you make this an actual singleton.", "url": "https://github.com/Apicurio/apicurio-registry/pull/975#discussion_r516668953", "createdAt": "2020-11-03T13:34:54Z", "author": {"login": "EricWittmann"}, "path": "utils/tests/src/main/java/io/apicurio/registry/utils/tests/LazyRegistryRestClient.java", "diffHunk": "@@ -0,0 +1,209 @@\n+package io.apicurio.registry.utils.tests;\n+\n+import java.io.InputStream;\n+import java.util.List;\n+import io.apicurio.registry.client.RegistryRestClient;\n+import io.apicurio.registry.client.RegistryRestClientFactory;\n+import io.apicurio.registry.rest.beans.ArtifactMetaData;\n+import io.apicurio.registry.rest.beans.ArtifactSearchResults;\n+import io.apicurio.registry.rest.beans.EditableMetaData;\n+import io.apicurio.registry.rest.beans.IfExistsType;\n+import io.apicurio.registry.rest.beans.Rule;\n+import io.apicurio.registry.rest.beans.SearchOver;\n+import io.apicurio.registry.rest.beans.SortOrder;\n+import io.apicurio.registry.rest.beans.UpdateState;\n+import io.apicurio.registry.rest.beans.VersionMetaData;\n+import io.apicurio.registry.rest.beans.VersionSearchResults;\n+import io.apicurio.registry.types.ArtifactType;\n+import io.apicurio.registry.types.RuleType;\n+\n+/**\n+ * @author famartin\n+ */\n+public class LazyRegistryRestClient implements RegistryRestClient {\n+\n+    private RegistryRestClient instance;\n+    private String apiUrl;\n+\n+    public LazyRegistryRestClient(String apiUrl) {\n+        this.apiUrl = apiUrl;\n+    }\n+\n+    private synchronized RegistryRestClient getInstance() {\n+        if (instance == null) {\n+            instance = RegistryRestClientFactory.create(apiUrl);\n+        }\n+        return instance;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e88d69726f437fd4650c13483c1ae45f25dc62cd"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3478, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}