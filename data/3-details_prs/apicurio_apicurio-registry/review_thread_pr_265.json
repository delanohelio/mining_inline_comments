{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMjk1MTM1", "number": 265, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzowMTozN1rODeyz1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzowMTozN1rODeyz1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjE2MzQzOnYy", "diffSide": "RIGHT", "path": "app/src/test/java/io/apicurio/registry/AbstractRegistryTestBase.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzowMTozN1rOFoIDOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDozMjozM1rOFoLJrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYxOTI1OQ==", "bodyText": "Null? Why not throw some RuntimeException ... ?", "url": "https://github.com/Apicurio/apicurio-registry/pull/265#discussion_r377619259", "createdAt": "2020-02-11T13:01:37Z", "author": {"login": "alesj"}, "path": "app/src/test/java/io/apicurio/registry/AbstractRegistryTestBase.java", "diffHunk": "@@ -41,9 +42,12 @@ protected String generateArtifactId() {\n      * @param resourceName the resource name\n      */\n     protected final String resourceToString(String resourceName) {\n-        InputStream stream = getClass().getResourceAsStream(resourceName);\n-        Assertions.assertNotNull(stream, \"Resource not found: \" + resourceName);\n-        return new BufferedReader(new InputStreamReader(stream)).lines().collect(Collectors.joining(\"\\n\"));\n+        try (InputStream stream = getClass().getResourceAsStream(resourceName)) {\n+            Assertions.assertNotNull(stream, \"Resource not found: \" + resourceName);\n+            return new BufferedReader(new InputStreamReader(stream)).lines().collect(Collectors.joining(\"\\n\"));\n+        } catch (IOException e) {\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab95aa8813502b9de703266b1930714d8566d54c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NTU1OA==", "bodyText": "OK, I will change it (after the call), NPE is much more fun ;)", "url": "https://github.com/Apicurio/apicurio-registry/pull/265#discussion_r377665558", "createdAt": "2020-02-11T14:25:35Z", "author": {"login": "rsvoboda"}, "path": "app/src/test/java/io/apicurio/registry/AbstractRegistryTestBase.java", "diffHunk": "@@ -41,9 +42,12 @@ protected String generateArtifactId() {\n      * @param resourceName the resource name\n      */\n     protected final String resourceToString(String resourceName) {\n-        InputStream stream = getClass().getResourceAsStream(resourceName);\n-        Assertions.assertNotNull(stream, \"Resource not found: \" + resourceName);\n-        return new BufferedReader(new InputStreamReader(stream)).lines().collect(Collectors.joining(\"\\n\"));\n+        try (InputStream stream = getClass().getResourceAsStream(resourceName)) {\n+            Assertions.assertNotNull(stream, \"Resource not found: \" + resourceName);\n+            return new BufferedReader(new InputStreamReader(stream)).lines().collect(Collectors.joining(\"\\n\"));\n+        } catch (IOException e) {\n+            return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYxOTI1OQ=="}, "originalCommit": {"oid": "ab95aa8813502b9de703266b1930714d8566d54c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3MDA2MQ==", "bodyText": "PR sent", "url": "https://github.com/Apicurio/apicurio-registry/pull/265#discussion_r377670061", "createdAt": "2020-02-11T14:32:33Z", "author": {"login": "rsvoboda"}, "path": "app/src/test/java/io/apicurio/registry/AbstractRegistryTestBase.java", "diffHunk": "@@ -41,9 +42,12 @@ protected String generateArtifactId() {\n      * @param resourceName the resource name\n      */\n     protected final String resourceToString(String resourceName) {\n-        InputStream stream = getClass().getResourceAsStream(resourceName);\n-        Assertions.assertNotNull(stream, \"Resource not found: \" + resourceName);\n-        return new BufferedReader(new InputStreamReader(stream)).lines().collect(Collectors.joining(\"\\n\"));\n+        try (InputStream stream = getClass().getResourceAsStream(resourceName)) {\n+            Assertions.assertNotNull(stream, \"Resource not found: \" + resourceName);\n+            return new BufferedReader(new InputStreamReader(stream)).lines().collect(Collectors.joining(\"\\n\"));\n+        } catch (IOException e) {\n+            return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYxOTI1OQ=="}, "originalCommit": {"oid": "ab95aa8813502b9de703266b1930714d8566d54c"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3426, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}