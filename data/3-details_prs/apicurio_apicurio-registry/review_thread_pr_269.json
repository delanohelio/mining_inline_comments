{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNTYzMDU1", "number": 269, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzo1MTowOFrODez1WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzo1MTowOFrODez1WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjMzMTEzOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/rules/validity/KafkaConnectContentValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzo1MTowOFrOFoJo1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzo1ODozMVrOFoJ5vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY0NTI2OQ==", "bodyText": "Hmmm ... does Java really always create static fields before running static init block?\nSo we don't end-up with NPE on jsonConverter at line 45 ... on some random occasion ...", "url": "https://github.com/Apicurio/apicurio-registry/pull/269#discussion_r377645269", "createdAt": "2020-02-11T13:51:08Z", "author": {"login": "alesj"}, "path": "app/src/main/java/io/apicurio/registry/rules/validity/KafkaConnectContentValidator.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.rules.validity;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.apache.kafka.connect.json.JsonConverter;\n+import org.apache.kafka.connect.json.JsonConverterConfig;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import io.apicurio.registry.content.ContentHandle;\n+\n+/**\n+ * A content validator implementation for the Kafka Connect schema content type.\n+ * @author eric.wittmann@gmail.com\n+ */\n+@ApplicationScoped\n+public class KafkaConnectContentValidator implements ContentValidator {\n+    \n+    private static final ObjectMapper mapper = new ObjectMapper();\n+    private static final JsonConverter jsonConverter = new JsonConverter();\n+    static {\n+        Map<String, Object> configs = new HashMap<>();\n+        configs.put(\"converter.type\", \"key\");\n+        configs.put(JsonConverterConfig.SCHEMAS_CACHE_SIZE_CONFIG, new Integer(0));\n+        jsonConverter.configure(configs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "305d8b50e3e7e7700f3adcb89a64499bdda6a547"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY0OTU5OQ==", "bodyText": "They are executed in textual order.", "url": "https://github.com/Apicurio/apicurio-registry/pull/269#discussion_r377649599", "createdAt": "2020-02-11T13:58:31Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/rules/validity/KafkaConnectContentValidator.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.rules.validity;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.apache.kafka.connect.json.JsonConverter;\n+import org.apache.kafka.connect.json.JsonConverterConfig;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import io.apicurio.registry.content.ContentHandle;\n+\n+/**\n+ * A content validator implementation for the Kafka Connect schema content type.\n+ * @author eric.wittmann@gmail.com\n+ */\n+@ApplicationScoped\n+public class KafkaConnectContentValidator implements ContentValidator {\n+    \n+    private static final ObjectMapper mapper = new ObjectMapper();\n+    private static final JsonConverter jsonConverter = new JsonConverter();\n+    static {\n+        Map<String, Object> configs = new HashMap<>();\n+        configs.put(\"converter.type\", \"key\");\n+        configs.put(JsonConverterConfig.SCHEMAS_CACHE_SIZE_CONFIG, new Integer(0));\n+        jsonConverter.configure(configs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY0NTI2OQ=="}, "originalCommit": {"oid": "305d8b50e3e7e7700f3adcb89a64499bdda6a547"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3429, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}