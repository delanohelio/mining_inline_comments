{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4OTE0OTAx", "number": 803, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMzoyNDo0NlrOEgYZkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjo0ODoxNFrOEhxF0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzg5NjUwOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/rest/RulesResourceImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMzoyNDo0NlrOHNNaWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNTozNDozMVrOHOi6sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYxMzI3NQ==", "bodyText": "If the same rule is configured in both places, won't it show up twice in the list?", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r483613275", "createdAt": "2020-09-04T13:24:46Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/rest/RulesResourceImpl.java", "diffHunk": "@@ -55,12 +65,19 @@\n     @Current\n     RegistryStorage storage;\n \n+    @Inject\n+    RulesProperties rulesProperties;\n+\n     /**\n      * @see io.apicurio.registry.rest.RulesResource#listGlobalRules()\n      */\n     @Override\n     public List<RuleType> listGlobalRules() {\n-        return storage.getGlobalRules();\n+        List<RuleType> rules = storage.getGlobalRules();\n+        List<RuleType> defaultRules = rulesProperties.getDefaultGlobalRules(rules);\n+        return Stream.concat(rules.stream(), defaultRules.stream())\n+            .sorted()\n+            .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea000da256127f624a9105c69abe6af6746f1d0"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU3OTIzOA==", "bodyText": "getDefaultGlobalRules() takes a list of RuleType enums that will be filtered out of the returned list. So this concatenation of the 2 lists will only include the global rules that are in storage plus any default global rules that aren't in the list from storage.\nI have renamed getDefaultGlobalRules() to getFilteredDefaultGlobalRules() in the latest commit to hopefully make it clearer that it's (potentially) a sub-list that is returned.", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r484579238", "createdAt": "2020-09-07T22:39:09Z", "author": {"login": "ajborley"}, "path": "app/src/main/java/io/apicurio/registry/rest/RulesResourceImpl.java", "diffHunk": "@@ -55,12 +65,19 @@\n     @Current\n     RegistryStorage storage;\n \n+    @Inject\n+    RulesProperties rulesProperties;\n+\n     /**\n      * @see io.apicurio.registry.rest.RulesResource#listGlobalRules()\n      */\n     @Override\n     public List<RuleType> listGlobalRules() {\n-        return storage.getGlobalRules();\n+        List<RuleType> rules = storage.getGlobalRules();\n+        List<RuleType> defaultRules = rulesProperties.getDefaultGlobalRules(rules);\n+        return Stream.concat(rules.stream(), defaultRules.stream())\n+            .sorted()\n+            .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYxMzI3NQ=="}, "originalCommit": {"oid": "0ea000da256127f624a9105c69abe6af6746f1d0"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAxNDE5Mg==", "bodyText": "Ah yes - that is the part I missed.  I didn't notice that it was passing in the rules.", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r485014192", "createdAt": "2020-09-08T15:34:31Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/rest/RulesResourceImpl.java", "diffHunk": "@@ -55,12 +65,19 @@\n     @Current\n     RegistryStorage storage;\n \n+    @Inject\n+    RulesProperties rulesProperties;\n+\n     /**\n      * @see io.apicurio.registry.rest.RulesResource#listGlobalRules()\n      */\n     @Override\n     public List<RuleType> listGlobalRules() {\n-        return storage.getGlobalRules();\n+        List<RuleType> rules = storage.getGlobalRules();\n+        List<RuleType> defaultRules = rulesProperties.getDefaultGlobalRules(rules);\n+        return Stream.concat(rules.stream(), defaultRules.stream())\n+            .sorted()\n+            .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYxMzI3NQ=="}, "originalCommit": {"oid": "0ea000da256127f624a9105c69abe6af6746f1d0"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzkwNTUyOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/rest/RulesResourceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMzoyNzoxOFrOHNNfyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMjozOToxNlrOHOIXtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYxNDY2NQ==", "bodyText": "But if the global rule does exist then the API responds with a 20x (success) response without having done anything.  Do we need a new response for that?  Some sort of HTTP conflict response?", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r483614665", "createdAt": "2020-09-04T13:27:18Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/rest/RulesResourceImpl.java", "diffHunk": "@@ -113,7 +149,15 @@ public Rule updateGlobalRuleConfig(RuleType rule, Rule data) {\n      */\n     @Override\n     public void deleteGlobalRule(RuleType rule) {\n-        storage.deleteGlobalRule(rule);\n+        try {\n+            storage.deleteGlobalRule(rule);\n+        } catch (RuleNotFoundException ruleNotFoundException) {\n+            // This global rule doesn't exist in storage - if the rule also does not exist in\n+            // the default global rules, throw the RuleNotFoundException\n+            if (rulesProperties.getDefaultGlobalRuleConfiguration(rule) == null) {\n+                throw ruleNotFoundException;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea000da256127f624a9105c69abe6af6746f1d0"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU3OTI1Mw==", "bodyText": "Good point - I have updated this to throw a new exception type (DefaultRuleDeletionException) and return a 409 Conflict response.", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r484579253", "createdAt": "2020-09-07T22:39:16Z", "author": {"login": "ajborley"}, "path": "app/src/main/java/io/apicurio/registry/rest/RulesResourceImpl.java", "diffHunk": "@@ -113,7 +149,15 @@ public Rule updateGlobalRuleConfig(RuleType rule, Rule data) {\n      */\n     @Override\n     public void deleteGlobalRule(RuleType rule) {\n-        storage.deleteGlobalRule(rule);\n+        try {\n+            storage.deleteGlobalRule(rule);\n+        } catch (RuleNotFoundException ruleNotFoundException) {\n+            // This global rule doesn't exist in storage - if the rule also does not exist in\n+            // the default global rules, throw the RuleNotFoundException\n+            if (rulesProperties.getDefaultGlobalRuleConfiguration(rule) == null) {\n+                throw ruleNotFoundException;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYxNDY2NQ=="}, "originalCommit": {"oid": "0ea000da256127f624a9105c69abe6af6746f1d0"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzkzMTI5OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMzozNDowN1rOHNNvDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMjozOToyM1rOHOIXyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYxODU3Mw==", "bodyText": "I think this should remain - if there are no rules to apply we want to skip the UPDATE section below.", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r483618573", "createdAt": "2020-09-04T13:34:07Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java", "diffHunk": "@@ -61,17 +66,26 @@ public void applyRules(String artifactId, ArtifactType artifactType, ContentHand\n             rules = storage.getGlobalRules();\r\n             useGlobalRules = true;\r\n         }\r\n-        if (rules.isEmpty()) {\r\n-            return;\r\n+\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea000da256127f624a9105c69abe6af6746f1d0"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU3OTI3NQ==", "bodyText": "Good spot, have put it back!", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r484579275", "createdAt": "2020-09-07T22:39:23Z", "author": {"login": "ajborley"}, "path": "app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java", "diffHunk": "@@ -61,17 +66,26 @@ public void applyRules(String artifactId, ArtifactType artifactType, ContentHand\n             rules = storage.getGlobalRules();\r\n             useGlobalRules = true;\r\n         }\r\n-        if (rules.isEmpty()) {\r\n-            return;\r\n+\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYxODU3Mw=="}, "originalCommit": {"oid": "0ea000da256127f624a9105c69abe6af6746f1d0"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzk2OTgzOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMzo0NDoyM1rOHNOGbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMjozOToyOFrOHOIX1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYyNDU1OA==", "bodyText": "This could be me misunderstanding how concat() works, but won't this be a problem if the same rule exists in both?  We don't want to run the rules twice.  But maybe concat de-dupes the items in the stream?", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r483624558", "createdAt": "2020-09-04T13:44:23Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java", "diffHunk": "@@ -61,17 +66,26 @@ public void applyRules(String artifactId, ArtifactType artifactType, ContentHand\n             rules = storage.getGlobalRules();\r\n             useGlobalRules = true;\r\n         }\r\n-        if (rules.isEmpty()) {\r\n-            return;\r\n+\r\n+        List<RuleType> defaultGlobalRules = rulesProperties.getDefaultGlobalRules(rules);\r\n+        if (!defaultGlobalRules.isEmpty()) {\r\n+            // We have default global rules as well as rules from storage, so use the concatenated list\r\n+            rules = Stream.concat(rules.stream(), defaultGlobalRules.stream())\r\n+                .collect(Collectors.toList());\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea000da256127f624a9105c69abe6af6746f1d0"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU3OTI4NA==", "bodyText": "This is down to my badly-named method again. Hopefully it's clearer now - in this case defaultGlobalRules only contains configured rules that are not found in the rules from storage.", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r484579284", "createdAt": "2020-09-07T22:39:28Z", "author": {"login": "ajborley"}, "path": "app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java", "diffHunk": "@@ -61,17 +66,26 @@ public void applyRules(String artifactId, ArtifactType artifactType, ContentHand\n             rules = storage.getGlobalRules();\r\n             useGlobalRules = true;\r\n         }\r\n-        if (rules.isEmpty()) {\r\n-            return;\r\n+\r\n+        List<RuleType> defaultGlobalRules = rulesProperties.getDefaultGlobalRules(rules);\r\n+        if (!defaultGlobalRules.isEmpty()) {\r\n+            // We have default global rules as well as rules from storage, so use the concatenated list\r\n+            rules = Stream.concat(rules.stream(), defaultGlobalRules.stream())\r\n+                .collect(Collectors.toList());\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYyNDU1OA=="}, "originalCommit": {"oid": "0ea000da256127f624a9105c69abe6af6746f1d0"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzk3NzQyOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMzo0NjoxNVrOHNOK6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMjozOTozMVrOHOIX3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYyNTcwNQ==", "bodyText": "Do we want the default rules to take precedent over configured rules?  Probably not?", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r483625705", "createdAt": "2020-09-04T13:46:15Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java", "diffHunk": "@@ -61,17 +66,26 @@ public void applyRules(String artifactId, ArtifactType artifactType, ContentHand\n             rules = storage.getGlobalRules();\r\n             useGlobalRules = true;\r\n         }\r\n-        if (rules.isEmpty()) {\r\n-            return;\r\n+\r\n+        List<RuleType> defaultGlobalRules = rulesProperties.getDefaultGlobalRules(rules);\r\n+        if (!defaultGlobalRules.isEmpty()) {\r\n+            // We have default global rules as well as rules from storage, so use the concatenated list\r\n+            rules = Stream.concat(rules.stream(), defaultGlobalRules.stream())\r\n+                .collect(Collectors.toList());\r\n         }\r\n+\r\n         ContentHandle currentArtifactContent = null;\r\n         if (ruleApplicationType == RuleApplicationType.UPDATE) {\r\n             StoredArtifact currentArtifact = storage.getArtifact(artifactId);\r\n             currentArtifactContent = currentArtifact.getContent();\r\n         }\r\n         for (RuleType ruleType : rules) {\r\n-            RuleConfigurationDto configurationDto = useGlobalRules ?\r\n-                                                    storage.getGlobalRule(ruleType) : storage.getArtifactRule(artifactId, ruleType);\r\n+            RuleConfigurationDto configurationDto;\r\n+            if (defaultGlobalRules.contains(ruleType)) {\r\n+                configurationDto = rulesProperties.getDefaultGlobalRuleConfiguration(ruleType);\r\n+            } else {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea000da256127f624a9105c69abe6af6746f1d0"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU3OTI5Mg==", "bodyText": "As defaultGlobalRules only contains rules that are not found in the rules from storage, then we know to retrieve the rule configuration from the default global rules here. Otherwise the rule must be from storage, so we get the configuration from storage.", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r484579292", "createdAt": "2020-09-07T22:39:31Z", "author": {"login": "ajborley"}, "path": "app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java", "diffHunk": "@@ -61,17 +66,26 @@ public void applyRules(String artifactId, ArtifactType artifactType, ContentHand\n             rules = storage.getGlobalRules();\r\n             useGlobalRules = true;\r\n         }\r\n-        if (rules.isEmpty()) {\r\n-            return;\r\n+\r\n+        List<RuleType> defaultGlobalRules = rulesProperties.getDefaultGlobalRules(rules);\r\n+        if (!defaultGlobalRules.isEmpty()) {\r\n+            // We have default global rules as well as rules from storage, so use the concatenated list\r\n+            rules = Stream.concat(rules.stream(), defaultGlobalRules.stream())\r\n+                .collect(Collectors.toList());\r\n         }\r\n+\r\n         ContentHandle currentArtifactContent = null;\r\n         if (ruleApplicationType == RuleApplicationType.UPDATE) {\r\n             StoredArtifact currentArtifact = storage.getArtifact(artifactId);\r\n             currentArtifactContent = currentArtifact.getContent();\r\n         }\r\n         for (RuleType ruleType : rules) {\r\n-            RuleConfigurationDto configurationDto = useGlobalRules ?\r\n-                                                    storage.getGlobalRule(ruleType) : storage.getArtifactRule(artifactId, ruleType);\r\n+            RuleConfigurationDto configurationDto;\r\n+            if (defaultGlobalRules.contains(ruleType)) {\r\n+                configurationDto = rulesProperties.getDefaultGlobalRuleConfiguration(ruleType);\r\n+            } else {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYyNTcwNQ=="}, "originalCommit": {"oid": "0ea000da256127f624a9105c69abe6af6746f1d0"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzk5ODY4OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMzo1MTo0OFrOHNOXiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMjozOTozNlrOHOIX5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYyODkzNw==", "bodyText": "While you're in here, can you rename this method to applyRules since I believe it applies all rules not just one?  IMO this was not properly named originally.", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r483628937", "createdAt": "2020-09-04T13:51:48Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java", "diffHunk": "@@ -117,8 +131,22 @@ public void applyRule(String artifactId, long artifactVersion, ArtifactType arti\n             throws RuleViolationException {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea000da256127f624a9105c69abe6af6746f1d0"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU3OTMwMw==", "bodyText": "Done \ud83d\udc4d", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r484579303", "createdAt": "2020-09-07T22:39:36Z", "author": {"login": "ajborley"}, "path": "app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java", "diffHunk": "@@ -117,8 +131,22 @@ public void applyRule(String artifactId, long artifactVersion, ArtifactType arti\n             throws RuleViolationException {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYyODkzNw=="}, "originalCommit": {"oid": "0ea000da256127f624a9105c69abe6af6746f1d0"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNDAwMDgzOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMzo1MjoyMVrOHNOY3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMjozOTo0MVrOHOIX-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYyOTI3Nw==", "bodyText": "Opportunity to share logic with the other applyRules impl?", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r483629277", "createdAt": "2020-09-04T13:52:21Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java", "diffHunk": "@@ -117,8 +131,22 @@ public void applyRule(String artifactId, long artifactVersion, ArtifactType arti\n             throws RuleViolationException {\r\n         StoredArtifact versionContent = storage.getArtifactVersion(artifactId, artifactVersion);\r\n         // Get the rules for this artifact\r\n-        for (RuleType ruleType : storage.getGlobalRules()) {\r\n-            RuleConfigurationDto configurationDto = storage.getGlobalRule(ruleType);\r\n+\r\n+        List<RuleType> globalRules = storage.getGlobalRules();\r\n+        List<RuleType> defaultGlobalRules = rulesProperties.getDefaultGlobalRules(globalRules);\r\n+        if (!defaultGlobalRules.isEmpty()) {\r\n+            // We have default global rules as well as rules from storage, so use the concatenated list\r\n+            globalRules = Stream.concat(\r\n+                globalRules.stream(),\r\n+                defaultGlobalRules.stream()).collect(Collectors.toList());\r\n+        }\r\n+        for (RuleType ruleType : globalRules) {\r\n+            RuleConfigurationDto configurationDto;\r\n+            if (defaultGlobalRules.contains(ruleType)) {\r\n+                configurationDto = rulesProperties.getDefaultGlobalRuleConfiguration(ruleType);\r\n+            } else {\r\n+                configurationDto = storage.getGlobalRule(ruleType);\r\n+            }\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea000da256127f624a9105c69abe6af6746f1d0"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU3OTMyMA==", "bodyText": "Good idea - have done some refactoring.", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r484579320", "createdAt": "2020-09-07T22:39:41Z", "author": {"login": "ajborley"}, "path": "app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java", "diffHunk": "@@ -117,8 +131,22 @@ public void applyRule(String artifactId, long artifactVersion, ArtifactType arti\n             throws RuleViolationException {\r\n         StoredArtifact versionContent = storage.getArtifactVersion(artifactId, artifactVersion);\r\n         // Get the rules for this artifact\r\n-        for (RuleType ruleType : storage.getGlobalRules()) {\r\n-            RuleConfigurationDto configurationDto = storage.getGlobalRule(ruleType);\r\n+\r\n+        List<RuleType> globalRules = storage.getGlobalRules();\r\n+        List<RuleType> defaultGlobalRules = rulesProperties.getDefaultGlobalRules(globalRules);\r\n+        if (!defaultGlobalRules.isEmpty()) {\r\n+            // We have default global rules as well as rules from storage, so use the concatenated list\r\n+            globalRules = Stream.concat(\r\n+                globalRules.stream(),\r\n+                defaultGlobalRules.stream()).collect(Collectors.toList());\r\n+        }\r\n+        for (RuleType ruleType : globalRules) {\r\n+            RuleConfigurationDto configurationDto;\r\n+            if (defaultGlobalRules.contains(ruleType)) {\r\n+                configurationDto = rulesProperties.getDefaultGlobalRuleConfiguration(ruleType);\r\n+            } else {\r\n+                configurationDto = storage.getGlobalRule(ruleType);\r\n+            }\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYyOTI3Nw=="}, "originalCommit": {"oid": "0ea000da256127f624a9105c69abe6af6746f1d0"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODQyNzY4OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjo0ODoxNFrOHPQ7eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNDoxNjo0N1rOHP2RzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2ODA1OA==", "bodyText": "I think this should be wrapped in a check for useGlobalRules.  Basically, if there are rules defined at the artifact level, we always use those - we never merge the global rules (configured or default) with the artifact rules.", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r485768058", "createdAt": "2020-09-09T16:48:14Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java", "diffHunk": "@@ -45,37 +48,59 @@\n     @Inject\r\n     RuleExecutorFactory factory;\r\n \r\n+    @Inject\r\n+    RulesProperties rulesProperties;\r\n+\r\n     /**\r\n      * @see io.apicurio.registry.rules.RulesService#applyRules(java.lang.String, io.apicurio.registry.types.ArtifactType, ContentHandle, io.apicurio.registry.rules.RuleApplicationType)\r\n      */\r\n     @Override\r\n     public void applyRules(String artifactId, ArtifactType artifactType, ContentHandle artifactContent,\r\n-                           RuleApplicationType ruleApplicationType) throws RuleViolationException {\r\n-        boolean useGlobalRules = false;\r\n+                          RuleApplicationType ruleApplicationType) throws RuleViolationException {\r\n         @SuppressWarnings(\"unchecked\")\r\n         List<RuleType> rules = Collections.EMPTY_LIST;\r\n         if (ruleApplicationType == RuleApplicationType.UPDATE) {\r\n             rules = storage.getArtifactRules(artifactId);\r\n         }\r\n-        if (rules.isEmpty()) {\r\n-            rules = storage.getGlobalRules();\r\n-            useGlobalRules = true;\r\n-        }\r\n-        if (rules.isEmpty()) {\r\n-            return;\r\n-        }\r\n         ContentHandle currentArtifactContent = null;\r\n         if (ruleApplicationType == RuleApplicationType.UPDATE) {\r\n             StoredArtifact currentArtifact = storage.getArtifact(artifactId);\r\n             currentArtifactContent = currentArtifact.getContent();\r\n         }\r\n-        for (RuleType ruleType : rules) {\r\n-            RuleConfigurationDto configurationDto = useGlobalRules ?\r\n-                                                    storage.getGlobalRule(ruleType) : storage.getArtifactRule(artifactId, ruleType);\r\n-            RuleExecutor executor = factory.createExecutor(ruleType);\r\n-            RuleContext context = new RuleContext(artifactId, artifactType, configurationDto.getConfiguration(),\r\n-                                                  currentArtifactContent, artifactContent);\r\n-            executor.execute(context);\r\n+\r\n+        applyGlobalAndArtifactRules(artifactId, artifactType, currentArtifactContent, artifactContent, rules);\r\n+    }\r\n+\r\n+    private void applyGlobalAndArtifactRules(String artifactId, ArtifactType artifactType, ContentHandle currentArtifactContent, ContentHandle updatedArtifactContent, List<RuleType> artifactRules) {\r\n+\r\n+        boolean useGlobalRules = false;\r\n+        if (artifactRules.isEmpty()) {\r\n+            artifactRules = storage.getGlobalRules();\r\n+            useGlobalRules = true;\r\n+        }\r\n+\r\n+        List<RuleType> filteredDefaultGlobalRules = rulesProperties.getFilteredDefaultGlobalRules(artifactRules);\r\n+        if (!filteredDefaultGlobalRules.isEmpty()) {\r\n+            // We have default global rules (with any storage rules filtered out) plus rules from storage, so concatenate the 2 lists\r\n+            artifactRules = Stream.concat(artifactRules.stream(), filteredDefaultGlobalRules.stream())\r\n+                .collect(Collectors.toList());\r\n+        }\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70851ca7ae69d185e6a4ce795e7869c9209fe000"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc3MDI1Mw==", "bodyText": "The logic is that configured artifact rules always override globals... the idea was that the user needs a way to say \"enable validation but not compatibility\" even when the compatibility rule has been configured globally.  However, now that I write this out, there is no way for the user to say \"disable all rules\" at the artifact level, because that would look the same as \"no artifact rule configuration exists\".  :( :(", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r485770253", "createdAt": "2020-09-09T16:50:56Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java", "diffHunk": "@@ -45,37 +48,59 @@\n     @Inject\r\n     RuleExecutorFactory factory;\r\n \r\n+    @Inject\r\n+    RulesProperties rulesProperties;\r\n+\r\n     /**\r\n      * @see io.apicurio.registry.rules.RulesService#applyRules(java.lang.String, io.apicurio.registry.types.ArtifactType, ContentHandle, io.apicurio.registry.rules.RuleApplicationType)\r\n      */\r\n     @Override\r\n     public void applyRules(String artifactId, ArtifactType artifactType, ContentHandle artifactContent,\r\n-                           RuleApplicationType ruleApplicationType) throws RuleViolationException {\r\n-        boolean useGlobalRules = false;\r\n+                          RuleApplicationType ruleApplicationType) throws RuleViolationException {\r\n         @SuppressWarnings(\"unchecked\")\r\n         List<RuleType> rules = Collections.EMPTY_LIST;\r\n         if (ruleApplicationType == RuleApplicationType.UPDATE) {\r\n             rules = storage.getArtifactRules(artifactId);\r\n         }\r\n-        if (rules.isEmpty()) {\r\n-            rules = storage.getGlobalRules();\r\n-            useGlobalRules = true;\r\n-        }\r\n-        if (rules.isEmpty()) {\r\n-            return;\r\n-        }\r\n         ContentHandle currentArtifactContent = null;\r\n         if (ruleApplicationType == RuleApplicationType.UPDATE) {\r\n             StoredArtifact currentArtifact = storage.getArtifact(artifactId);\r\n             currentArtifactContent = currentArtifact.getContent();\r\n         }\r\n-        for (RuleType ruleType : rules) {\r\n-            RuleConfigurationDto configurationDto = useGlobalRules ?\r\n-                                                    storage.getGlobalRule(ruleType) : storage.getArtifactRule(artifactId, ruleType);\r\n-            RuleExecutor executor = factory.createExecutor(ruleType);\r\n-            RuleContext context = new RuleContext(artifactId, artifactType, configurationDto.getConfiguration(),\r\n-                                                  currentArtifactContent, artifactContent);\r\n-            executor.execute(context);\r\n+\r\n+        applyGlobalAndArtifactRules(artifactId, artifactType, currentArtifactContent, artifactContent, rules);\r\n+    }\r\n+\r\n+    private void applyGlobalAndArtifactRules(String artifactId, ArtifactType artifactType, ContentHandle currentArtifactContent, ContentHandle updatedArtifactContent, List<RuleType> artifactRules) {\r\n+\r\n+        boolean useGlobalRules = false;\r\n+        if (artifactRules.isEmpty()) {\r\n+            artifactRules = storage.getGlobalRules();\r\n+            useGlobalRules = true;\r\n+        }\r\n+\r\n+        List<RuleType> filteredDefaultGlobalRules = rulesProperties.getFilteredDefaultGlobalRules(artifactRules);\r\n+        if (!filteredDefaultGlobalRules.isEmpty()) {\r\n+            // We have default global rules (with any storage rules filtered out) plus rules from storage, so concatenate the 2 lists\r\n+            artifactRules = Stream.concat(artifactRules.stream(), filteredDefaultGlobalRules.stream())\r\n+                .collect(Collectors.toList());\r\n+        }\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2ODA1OA=="}, "originalCommit": {"oid": "70851ca7ae69d185e6a4ce795e7869c9209fe000"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc3MjQ5OA==", "bodyText": "I'm open to solutions. :)", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r485772498", "createdAt": "2020-09-09T16:53:37Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java", "diffHunk": "@@ -45,37 +48,59 @@\n     @Inject\r\n     RuleExecutorFactory factory;\r\n \r\n+    @Inject\r\n+    RulesProperties rulesProperties;\r\n+\r\n     /**\r\n      * @see io.apicurio.registry.rules.RulesService#applyRules(java.lang.String, io.apicurio.registry.types.ArtifactType, ContentHandle, io.apicurio.registry.rules.RuleApplicationType)\r\n      */\r\n     @Override\r\n     public void applyRules(String artifactId, ArtifactType artifactType, ContentHandle artifactContent,\r\n-                           RuleApplicationType ruleApplicationType) throws RuleViolationException {\r\n-        boolean useGlobalRules = false;\r\n+                          RuleApplicationType ruleApplicationType) throws RuleViolationException {\r\n         @SuppressWarnings(\"unchecked\")\r\n         List<RuleType> rules = Collections.EMPTY_LIST;\r\n         if (ruleApplicationType == RuleApplicationType.UPDATE) {\r\n             rules = storage.getArtifactRules(artifactId);\r\n         }\r\n-        if (rules.isEmpty()) {\r\n-            rules = storage.getGlobalRules();\r\n-            useGlobalRules = true;\r\n-        }\r\n-        if (rules.isEmpty()) {\r\n-            return;\r\n-        }\r\n         ContentHandle currentArtifactContent = null;\r\n         if (ruleApplicationType == RuleApplicationType.UPDATE) {\r\n             StoredArtifact currentArtifact = storage.getArtifact(artifactId);\r\n             currentArtifactContent = currentArtifact.getContent();\r\n         }\r\n-        for (RuleType ruleType : rules) {\r\n-            RuleConfigurationDto configurationDto = useGlobalRules ?\r\n-                                                    storage.getGlobalRule(ruleType) : storage.getArtifactRule(artifactId, ruleType);\r\n-            RuleExecutor executor = factory.createExecutor(ruleType);\r\n-            RuleContext context = new RuleContext(artifactId, artifactType, configurationDto.getConfiguration(),\r\n-                                                  currentArtifactContent, artifactContent);\r\n-            executor.execute(context);\r\n+\r\n+        applyGlobalAndArtifactRules(artifactId, artifactType, currentArtifactContent, artifactContent, rules);\r\n+    }\r\n+\r\n+    private void applyGlobalAndArtifactRules(String artifactId, ArtifactType artifactType, ContentHandle currentArtifactContent, ContentHandle updatedArtifactContent, List<RuleType> artifactRules) {\r\n+\r\n+        boolean useGlobalRules = false;\r\n+        if (artifactRules.isEmpty()) {\r\n+            artifactRules = storage.getGlobalRules();\r\n+            useGlobalRules = true;\r\n+        }\r\n+\r\n+        List<RuleType> filteredDefaultGlobalRules = rulesProperties.getFilteredDefaultGlobalRules(artifactRules);\r\n+        if (!filteredDefaultGlobalRules.isEmpty()) {\r\n+            // We have default global rules (with any storage rules filtered out) plus rules from storage, so concatenate the 2 lists\r\n+            artifactRules = Stream.concat(artifactRules.stream(), filteredDefaultGlobalRules.stream())\r\n+                .collect(Collectors.toList());\r\n+        }\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2ODA1OA=="}, "originalCommit": {"oid": "70851ca7ae69d185e6a4ce795e7869c9209fe000"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc3MjY4Mg==", "bodyText": "Ping @Apicurio/developers", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r485772682", "createdAt": "2020-09-09T16:53:48Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java", "diffHunk": "@@ -45,37 +48,59 @@\n     @Inject\r\n     RuleExecutorFactory factory;\r\n \r\n+    @Inject\r\n+    RulesProperties rulesProperties;\r\n+\r\n     /**\r\n      * @see io.apicurio.registry.rules.RulesService#applyRules(java.lang.String, io.apicurio.registry.types.ArtifactType, ContentHandle, io.apicurio.registry.rules.RuleApplicationType)\r\n      */\r\n     @Override\r\n     public void applyRules(String artifactId, ArtifactType artifactType, ContentHandle artifactContent,\r\n-                           RuleApplicationType ruleApplicationType) throws RuleViolationException {\r\n-        boolean useGlobalRules = false;\r\n+                          RuleApplicationType ruleApplicationType) throws RuleViolationException {\r\n         @SuppressWarnings(\"unchecked\")\r\n         List<RuleType> rules = Collections.EMPTY_LIST;\r\n         if (ruleApplicationType == RuleApplicationType.UPDATE) {\r\n             rules = storage.getArtifactRules(artifactId);\r\n         }\r\n-        if (rules.isEmpty()) {\r\n-            rules = storage.getGlobalRules();\r\n-            useGlobalRules = true;\r\n-        }\r\n-        if (rules.isEmpty()) {\r\n-            return;\r\n-        }\r\n         ContentHandle currentArtifactContent = null;\r\n         if (ruleApplicationType == RuleApplicationType.UPDATE) {\r\n             StoredArtifact currentArtifact = storage.getArtifact(artifactId);\r\n             currentArtifactContent = currentArtifact.getContent();\r\n         }\r\n-        for (RuleType ruleType : rules) {\r\n-            RuleConfigurationDto configurationDto = useGlobalRules ?\r\n-                                                    storage.getGlobalRule(ruleType) : storage.getArtifactRule(artifactId, ruleType);\r\n-            RuleExecutor executor = factory.createExecutor(ruleType);\r\n-            RuleContext context = new RuleContext(artifactId, artifactType, configurationDto.getConfiguration(),\r\n-                                                  currentArtifactContent, artifactContent);\r\n-            executor.execute(context);\r\n+\r\n+        applyGlobalAndArtifactRules(artifactId, artifactType, currentArtifactContent, artifactContent, rules);\r\n+    }\r\n+\r\n+    private void applyGlobalAndArtifactRules(String artifactId, ArtifactType artifactType, ContentHandle currentArtifactContent, ContentHandle updatedArtifactContent, List<RuleType> artifactRules) {\r\n+\r\n+        boolean useGlobalRules = false;\r\n+        if (artifactRules.isEmpty()) {\r\n+            artifactRules = storage.getGlobalRules();\r\n+            useGlobalRules = true;\r\n+        }\r\n+\r\n+        List<RuleType> filteredDefaultGlobalRules = rulesProperties.getFilteredDefaultGlobalRules(artifactRules);\r\n+        if (!filteredDefaultGlobalRules.isEmpty()) {\r\n+            // We have default global rules (with any storage rules filtered out) plus rules from storage, so concatenate the 2 lists\r\n+            artifactRules = Stream.concat(artifactRules.stream(), filteredDefaultGlobalRules.stream())\r\n+                .collect(Collectors.toList());\r\n+        }\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2ODA1OA=="}, "originalCommit": {"oid": "70851ca7ae69d185e6a4ce795e7869c9209fe000"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4NzQ3Mg==", "bodyText": "The Validity rule can be given a NONE value - if we add a NONE for the Compatibility rule (and handle it in the checking code) then a user could override any global rules for a specific artifact. Does that work?\nThanks for clarifying the precedence of rules - I have refactored that code to hopefully clarify things.\nStill working on why the tests are failing..", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r486287472", "createdAt": "2020-09-10T12:14:33Z", "author": {"login": "ajborley"}, "path": "app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java", "diffHunk": "@@ -45,37 +48,59 @@\n     @Inject\r\n     RuleExecutorFactory factory;\r\n \r\n+    @Inject\r\n+    RulesProperties rulesProperties;\r\n+\r\n     /**\r\n      * @see io.apicurio.registry.rules.RulesService#applyRules(java.lang.String, io.apicurio.registry.types.ArtifactType, ContentHandle, io.apicurio.registry.rules.RuleApplicationType)\r\n      */\r\n     @Override\r\n     public void applyRules(String artifactId, ArtifactType artifactType, ContentHandle artifactContent,\r\n-                           RuleApplicationType ruleApplicationType) throws RuleViolationException {\r\n-        boolean useGlobalRules = false;\r\n+                          RuleApplicationType ruleApplicationType) throws RuleViolationException {\r\n         @SuppressWarnings(\"unchecked\")\r\n         List<RuleType> rules = Collections.EMPTY_LIST;\r\n         if (ruleApplicationType == RuleApplicationType.UPDATE) {\r\n             rules = storage.getArtifactRules(artifactId);\r\n         }\r\n-        if (rules.isEmpty()) {\r\n-            rules = storage.getGlobalRules();\r\n-            useGlobalRules = true;\r\n-        }\r\n-        if (rules.isEmpty()) {\r\n-            return;\r\n-        }\r\n         ContentHandle currentArtifactContent = null;\r\n         if (ruleApplicationType == RuleApplicationType.UPDATE) {\r\n             StoredArtifact currentArtifact = storage.getArtifact(artifactId);\r\n             currentArtifactContent = currentArtifact.getContent();\r\n         }\r\n-        for (RuleType ruleType : rules) {\r\n-            RuleConfigurationDto configurationDto = useGlobalRules ?\r\n-                                                    storage.getGlobalRule(ruleType) : storage.getArtifactRule(artifactId, ruleType);\r\n-            RuleExecutor executor = factory.createExecutor(ruleType);\r\n-            RuleContext context = new RuleContext(artifactId, artifactType, configurationDto.getConfiguration(),\r\n-                                                  currentArtifactContent, artifactContent);\r\n-            executor.execute(context);\r\n+\r\n+        applyGlobalAndArtifactRules(artifactId, artifactType, currentArtifactContent, artifactContent, rules);\r\n+    }\r\n+\r\n+    private void applyGlobalAndArtifactRules(String artifactId, ArtifactType artifactType, ContentHandle currentArtifactContent, ContentHandle updatedArtifactContent, List<RuleType> artifactRules) {\r\n+\r\n+        boolean useGlobalRules = false;\r\n+        if (artifactRules.isEmpty()) {\r\n+            artifactRules = storage.getGlobalRules();\r\n+            useGlobalRules = true;\r\n+        }\r\n+\r\n+        List<RuleType> filteredDefaultGlobalRules = rulesProperties.getFilteredDefaultGlobalRules(artifactRules);\r\n+        if (!filteredDefaultGlobalRules.isEmpty()) {\r\n+            // We have default global rules (with any storage rules filtered out) plus rules from storage, so concatenate the 2 lists\r\n+            artifactRules = Stream.concat(artifactRules.stream(), filteredDefaultGlobalRules.stream())\r\n+                .collect(Collectors.toList());\r\n+        }\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2ODA1OA=="}, "originalCommit": {"oid": "70851ca7ae69d185e6a4ce795e7869c9209fe000"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM3OTk4MQ==", "bodyText": "Yeah I think using the NONE configuration option is the only solution I can think of as well.  I'll open a ticket to add that option to the compat rule.", "url": "https://github.com/Apicurio/apicurio-registry/pull/803#discussion_r486379981", "createdAt": "2020-09-10T14:16:47Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/rules/RulesServiceImpl.java", "diffHunk": "@@ -45,37 +48,59 @@\n     @Inject\r\n     RuleExecutorFactory factory;\r\n \r\n+    @Inject\r\n+    RulesProperties rulesProperties;\r\n+\r\n     /**\r\n      * @see io.apicurio.registry.rules.RulesService#applyRules(java.lang.String, io.apicurio.registry.types.ArtifactType, ContentHandle, io.apicurio.registry.rules.RuleApplicationType)\r\n      */\r\n     @Override\r\n     public void applyRules(String artifactId, ArtifactType artifactType, ContentHandle artifactContent,\r\n-                           RuleApplicationType ruleApplicationType) throws RuleViolationException {\r\n-        boolean useGlobalRules = false;\r\n+                          RuleApplicationType ruleApplicationType) throws RuleViolationException {\r\n         @SuppressWarnings(\"unchecked\")\r\n         List<RuleType> rules = Collections.EMPTY_LIST;\r\n         if (ruleApplicationType == RuleApplicationType.UPDATE) {\r\n             rules = storage.getArtifactRules(artifactId);\r\n         }\r\n-        if (rules.isEmpty()) {\r\n-            rules = storage.getGlobalRules();\r\n-            useGlobalRules = true;\r\n-        }\r\n-        if (rules.isEmpty()) {\r\n-            return;\r\n-        }\r\n         ContentHandle currentArtifactContent = null;\r\n         if (ruleApplicationType == RuleApplicationType.UPDATE) {\r\n             StoredArtifact currentArtifact = storage.getArtifact(artifactId);\r\n             currentArtifactContent = currentArtifact.getContent();\r\n         }\r\n-        for (RuleType ruleType : rules) {\r\n-            RuleConfigurationDto configurationDto = useGlobalRules ?\r\n-                                                    storage.getGlobalRule(ruleType) : storage.getArtifactRule(artifactId, ruleType);\r\n-            RuleExecutor executor = factory.createExecutor(ruleType);\r\n-            RuleContext context = new RuleContext(artifactId, artifactType, configurationDto.getConfiguration(),\r\n-                                                  currentArtifactContent, artifactContent);\r\n-            executor.execute(context);\r\n+\r\n+        applyGlobalAndArtifactRules(artifactId, artifactType, currentArtifactContent, artifactContent, rules);\r\n+    }\r\n+\r\n+    private void applyGlobalAndArtifactRules(String artifactId, ArtifactType artifactType, ContentHandle currentArtifactContent, ContentHandle updatedArtifactContent, List<RuleType> artifactRules) {\r\n+\r\n+        boolean useGlobalRules = false;\r\n+        if (artifactRules.isEmpty()) {\r\n+            artifactRules = storage.getGlobalRules();\r\n+            useGlobalRules = true;\r\n+        }\r\n+\r\n+        List<RuleType> filteredDefaultGlobalRules = rulesProperties.getFilteredDefaultGlobalRules(artifactRules);\r\n+        if (!filteredDefaultGlobalRules.isEmpty()) {\r\n+            // We have default global rules (with any storage rules filtered out) plus rules from storage, so concatenate the 2 lists\r\n+            artifactRules = Stream.concat(artifactRules.stream(), filteredDefaultGlobalRules.stream())\r\n+                .collect(Collectors.toList());\r\n+        }\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2ODA1OA=="}, "originalCommit": {"oid": "70851ca7ae69d185e6a4ce795e7869c9209fe000"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3524, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}