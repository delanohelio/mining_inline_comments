{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxOTQwNzg5", "number": 811, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzo0MDoyMVrOEhyWNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODozNTo1NVrOEhzg0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODYzMzUwOnYy", "diffSide": "RIGHT", "path": "utils/serde/src/main/java/io/apicurio/registry/utils/serde/AbstractKafkaDeserializer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzo0MDoyMVrOHPS9DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzo0MDoyMVrOHPS9DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMTIyOQ==", "bodyText": "Some of this logic is duplicated in JsonSchemaKafkaDeserializer I think - is there an opportunity to consolidate this?", "url": "https://github.com/Apicurio/apicurio-registry/pull/811#discussion_r485801229", "createdAt": "2020-09-09T17:40:21Z", "author": {"login": "EricWittmann"}, "path": "utils/serde/src/main/java/io/apicurio/registry/utils/serde/AbstractKafkaDeserializer.java", "diffHunk": "@@ -76,4 +82,40 @@ public U deserialize(String topic, byte[] data) {\n         int start = buffer.position() + buffer.arrayOffset();\n         return readData(schema, buffer, start, length);\n     }\n+\n+    @Override\n+    public U deserialize(String topic, Headers headers, byte[] data) {\n+        if (data == null) {\n+            return null;\n+        }\n+        // check if data contains the magic byte\n+        if (data[0] == MAGIC_BYTE){\n+            return deserialize(topic, data);\n+        } else {\n+            Long id = headerUtils.getGlobalId(headers);\n+            if (id == null) {\n+                String artifactId = headerUtils.getArtifactId(headers);\n+                Integer version = headerUtils.getVersion(headers);\n+                id = toGlobalId(artifactId, version);\n+            }\n+            T schema = getCache().getSchema(id);\n+            ByteBuffer buffer = ByteBuffer.wrap(data);\n+            int length = buffer.limit();\n+            int start = buffer.position();\n+            return readData(headers, schema, buffer, start, length);\n+        }\n+    }\n+\n+    protected Long toGlobalId(String artifactId, Integer version) {\n+        if (artifactId == null) {\n+            throw new RuntimeException(\"ArtifactId not found in headers.\");\n+        }\n+        if (version == null) {\n+            ArtifactMetaData amd = getClient().getArtifactMetaData(artifactId);\n+            return amd.getGlobalId();\n+        } else {\n+            VersionMetaData vmd = getClient().getArtifactVersionMetaData(version, artifactId);\n+            return vmd.getGlobalId();\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05bb53ec2f2065798132e45449fca167e460722f"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODY0MDAxOnYy", "diffSide": "RIGHT", "path": "utils/serde/src/main/java/io/apicurio/registry/utils/serde/AbstractKafkaSerDe.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzo0MjowNlrOHPTBEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMToyOTozOFrOHPvLuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMjI1Nw==", "bodyText": "I think this should be apicurio.registry.use.headers to match the other config prop names.", "url": "https://github.com/Apicurio/apicurio-registry/pull/811#discussion_r485802257", "createdAt": "2020-09-09T17:42:06Z", "author": {"login": "EricWittmann"}, "path": "utils/serde/src/main/java/io/apicurio/registry/utils/serde/AbstractKafkaSerDe.java", "diffHunk": "@@ -48,12 +51,19 @@\n     public static final String REGISTRY_ID_HANDLER_CONFIG_PARAM = \"apicurio.registry.id-handler\";\n     public static final String REGISTRY_CONFLUENT_ID_HANDLER_CONFIG_PARAM = \"apicurio.registry.as-confluent\";\n \n+    // Constants for using headers to store the ids\n+    public static final String USE_HEADERS = \"apicurio.use.headers\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05bb53ec2f2065798132e45449fca167e460722f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI2MzczOQ==", "bodyText": "Agree", "url": "https://github.com/Apicurio/apicurio-registry/pull/811#discussion_r486263739", "createdAt": "2020-09-10T11:29:38Z", "author": {"login": "tagarr"}, "path": "utils/serde/src/main/java/io/apicurio/registry/utils/serde/AbstractKafkaSerDe.java", "diffHunk": "@@ -48,12 +51,19 @@\n     public static final String REGISTRY_ID_HANDLER_CONFIG_PARAM = \"apicurio.registry.id-handler\";\n     public static final String REGISTRY_CONFLUENT_ID_HANDLER_CONFIG_PARAM = \"apicurio.registry.as-confluent\";\n \n+    // Constants for using headers to store the ids\n+    public static final String USE_HEADERS = \"apicurio.use.headers\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMjI1Nw=="}, "originalCommit": {"oid": "05bb53ec2f2065798132e45449fca167e460722f"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODY0ODQ0OnYy", "diffSide": "RIGHT", "path": "utils/serde/src/main/java/io/apicurio/registry/utils/serde/AbstractKafkaSerializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzo0NDo1MVrOHPTGrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMTozNDoxOVrOHPvVAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMzY5NQ==", "bodyText": "I was expecting the decision point to be a configuration property, not the presence of the Headers object - what determines which variant of serialize is called?", "url": "https://github.com/Apicurio/apicurio-registry/pull/811#discussion_r485803695", "createdAt": "2020-09-09T17:44:51Z", "author": {"login": "EricWittmann"}, "path": "utils/serde/src/main/java/io/apicurio/registry/utils/serde/AbstractKafkaSerializer.java", "diffHunk": "@@ -65,12 +74,18 @@ public AbstractKafkaSerializer(\n             String artifactId = getArtifactIdStrategy().artifactId(topic, isKey(), schema);\n             long id = getGlobalIdStrategy().findId(getClient(), artifactId, artifactType(), schema);\n             ByteArrayOutputStream out = new ByteArrayOutputStream();\n-            out.write(MAGIC_BYTE);\n-            getIdHandler().writeId(id, out);\n-            serializeData(schema, data, out);\n+            if (headerUtils != null) {\n+                headerUtils.addSchemaHeaders(headers, artifactId, id);\n+                serializeData(headers, schema, data, out);\n+            } else {\n+                out.write(MAGIC_BYTE);\n+                getIdHandler().writeId(id, out);\n+                serializeData(schema, data, out);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05bb53ec2f2065798132e45449fca167e460722f"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI2NjExNQ==", "bodyText": "The headerUtil is effectively only created if the config has been set", "url": "https://github.com/Apicurio/apicurio-registry/pull/811#discussion_r486266115", "createdAt": "2020-09-10T11:34:19Z", "author": {"login": "tagarr"}, "path": "utils/serde/src/main/java/io/apicurio/registry/utils/serde/AbstractKafkaSerializer.java", "diffHunk": "@@ -65,12 +74,18 @@ public AbstractKafkaSerializer(\n             String artifactId = getArtifactIdStrategy().artifactId(topic, isKey(), schema);\n             long id = getGlobalIdStrategy().findId(getClient(), artifactId, artifactType(), schema);\n             ByteArrayOutputStream out = new ByteArrayOutputStream();\n-            out.write(MAGIC_BYTE);\n-            getIdHandler().writeId(id, out);\n-            serializeData(schema, data, out);\n+            if (headerUtils != null) {\n+                headerUtils.addSchemaHeaders(headers, artifactId, id);\n+                serializeData(headers, schema, data, out);\n+            } else {\n+                out.write(MAGIC_BYTE);\n+                getIdHandler().writeId(id, out);\n+                serializeData(schema, data, out);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMzY5NQ=="}, "originalCommit": {"oid": "05bb53ec2f2065798132e45449fca167e460722f"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODY1NzE0OnYy", "diffSide": "RIGHT", "path": "utils/serde/src/main/java/io/apicurio/registry/utils/serde/AvroKafkaDeserializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzo0NzozM1rOHPTMNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMTozNDoyNlrOHPvVNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwNTEwOA==", "bodyText": "Isn't this caught above on lines 94-97?", "url": "https://github.com/Apicurio/apicurio-registry/pull/811#discussion_r485805108", "createdAt": "2020-09-09T17:47:33Z", "author": {"login": "EricWittmann"}, "path": "utils/serde/src/main/java/io/apicurio/registry/utils/serde/AvroKafkaDeserializer.java", "diffHunk": "@@ -77,8 +82,24 @@ protected Schema toSchema(Response response) {\n \n     @Override\n     protected U readData(Schema schema, ByteBuffer buffer, int start, int length) {\n+        return readData(null, schema, buffer, start, length);\n+    }\n+\n+    @Override\n+    protected U readData(Headers headers, Schema schema, ByteBuffer buffer, int start, int length) {\n+        AvroEncoding encoding = null;\n+        if (headers != null){\n+            encoding = headerUtils.getEncoding(headers);\n+        }\n+        if (encoding == null) {\n+            // no encoding in header or no headers so use config\n+            encoding = configEncoding;\n+        }\n         try {\n             DatumReader<U> reader = avroDatumProvider.createDatumReader(schema);\n+            if (encoding == null) {\n+                encoding = configEncoding;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05bb53ec2f2065798132e45449fca167e460722f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI2NjE2Ng==", "bodyText": "yes", "url": "https://github.com/Apicurio/apicurio-registry/pull/811#discussion_r486266166", "createdAt": "2020-09-10T11:34:26Z", "author": {"login": "tagarr"}, "path": "utils/serde/src/main/java/io/apicurio/registry/utils/serde/AvroKafkaDeserializer.java", "diffHunk": "@@ -77,8 +82,24 @@ protected Schema toSchema(Response response) {\n \n     @Override\n     protected U readData(Schema schema, ByteBuffer buffer, int start, int length) {\n+        return readData(null, schema, buffer, start, length);\n+    }\n+\n+    @Override\n+    protected U readData(Headers headers, Schema schema, ByteBuffer buffer, int start, int length) {\n+        AvroEncoding encoding = null;\n+        if (headers != null){\n+            encoding = headerUtils.getEncoding(headers);\n+        }\n+        if (encoding == null) {\n+            // no encoding in header or no headers so use config\n+            encoding = configEncoding;\n+        }\n         try {\n             DatumReader<U> reader = avroDatumProvider.createDatumReader(schema);\n+            if (encoding == null) {\n+                encoding = configEncoding;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwNTEwOA=="}, "originalCommit": {"oid": "05bb53ec2f2065798132e45449fca167e460722f"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODgyNDQ5OnYy", "diffSide": "RIGHT", "path": "utils/serde/src/main/java/io/apicurio/registry/utils/serde/AvroKafkaSerializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODozNTo1NVrOHPU0DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMTozNDozNlrOHPvVjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzMTY5Mw==", "bodyText": "Might this be null sometimes?", "url": "https://github.com/Apicurio/apicurio-registry/pull/811#discussion_r485831693", "createdAt": "2020-09-09T18:35:55Z", "author": {"login": "EricWittmann"}, "path": "utils/serde/src/main/java/io/apicurio/registry/utils/serde/AvroKafkaSerializer.java", "diffHunk": "@@ -104,6 +112,12 @@ protected void serializeData(Schema schema, U data, OutputStream out) throws IOE\n         encoder.flush();\n     }\n \n+    @Override\n+    protected void serializeData(Headers headers, Schema schema, U data, ByteArrayOutputStream out) throws IOException {\n+        headerUtils.addEncodingHeader(headers, encoding);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05bb53ec2f2065798132e45449fca167e460722f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI2NjI1Mw==", "bodyText": "yes", "url": "https://github.com/Apicurio/apicurio-registry/pull/811#discussion_r486266253", "createdAt": "2020-09-10T11:34:36Z", "author": {"login": "tagarr"}, "path": "utils/serde/src/main/java/io/apicurio/registry/utils/serde/AvroKafkaSerializer.java", "diffHunk": "@@ -104,6 +112,12 @@ protected void serializeData(Schema schema, U data, OutputStream out) throws IOE\n         encoder.flush();\n     }\n \n+    @Override\n+    protected void serializeData(Headers headers, Schema schema, U data, ByteArrayOutputStream out) throws IOException {\n+        headerUtils.addEncodingHeader(headers, encoding);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzMTY5Mw=="}, "originalCommit": {"oid": "05bb53ec2f2065798132e45449fca167e460722f"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3526, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}