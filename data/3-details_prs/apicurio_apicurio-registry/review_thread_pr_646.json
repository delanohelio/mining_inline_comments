{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3OTE3NDYx", "number": 646, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNjo1NzowNlrOEH1lqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODo0Nzo1M1rOEH3-FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjUzNDgyOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNjo1NzowNlrOGnbtvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNjo1NzowNlrOGnbtvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwMTcyNA==", "bodyText": "The last upstream Quarkus version is 1.5.2. In that blog, they state that it is safe to upgrade from 1.5.1 to 1.5.2.", "url": "https://github.com/Apicurio/apicurio-registry/pull/646#discussion_r444001724", "createdAt": "2020-06-23T06:57:06Z", "author": {"login": "carlesarnal"}, "path": "pom.xml", "diffHunk": "@@ -114,7 +114,7 @@\n         <yarn.version>1.22.4</yarn.version>\n         \n         <!-- Quarkus Version -->\n-        <quarkus.version>1.5.0.Final</quarkus.version>\n+        <quarkus.version>1.5.1.Final</quarkus.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4da634882804383f270a20f643f48a6b5d529f2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjkyNTAxOnYy", "diffSide": "RIGHT", "path": "utils/kafka/src/main/java/io/apicurio/registry/utils/kafka/ConsumerContainer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODo0Nzo1M1rOGnfhKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODo0Nzo1M1rOGnfhKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA2NDA0Mg==", "bodyText": "Maybe extract a method here could be a good idea.", "url": "https://github.com/Apicurio/apicurio-registry/pull/646#discussion_r444064042", "createdAt": "2020-06-23T08:47:53Z", "author": {"login": "carlesarnal"}, "path": "utils/kafka/src/main/java/io/apicurio/registry/utils/kafka/ConsumerContainer.java", "diffHunk": "@@ -132,42 +147,46 @@ public ConsumerContainer(\n \n     private void consumerLoop() {\n         boolean waitingForSubscriptionOrAssignment = false;\n-        Map<TopicPartition, Long> activeTopics = idlePingConsumer == null ? null : new HashMap<>();\n+        Map<TopicPartition, Long> activeTopics = idlePingHandler == null ? null : new HashMap<>();\n         try (KafkaConsumer<K, V> consumer = new KafkaConsumer<>(consumerProperties, keyDeserializer, valueDeserializer)) {\n-            while (!stopping) {\n-                CompletableFuture<Consumer<K, V>> task = waitingForSubscriptionOrAssignment\n-                                                         ? tasks.take()\n-                                                         : tasks.poll();\n+            while (!closed) {\n+                CompletableFuture<Consumer<K, V>> task;\n+                boolean interrupted = false;\n+                try {\n+                    task = waitingForSubscriptionOrAssignment ? tasks.take() : tasks.poll();\n+                } catch (InterruptedException e) {\n+                    log.warn(\"Consumer thread interrupted\", e);\n+                    task = null;\n+                    interrupted = true;\n+                }\n                 if (task != null) {\n                     task.complete(consumer);\n                     if (waitingForSubscriptionOrAssignment) {\n                         waitingForSubscriptionOrAssignment = consumer.subscription().isEmpty() &&\n-                                                             consumer.assignment().isEmpty();\n+                                consumer.assignment().isEmpty();\n                     }\n-                } else {\n+                } else if (!interrupted) {\n                     assert !waitingForSubscriptionOrAssignment;\n \n-                    boolean[] flag = new boolean[1];\n-                    ConsumerRecords<K, V> records = consumeRetryable(null, r -> {\n-                        try {\n-                            return consumer.poll(consumerPollTimeout);\n-                        } catch (IllegalStateException e) { // thrown when there's no subscription or assignment\n-                            log.info(\"{} - will wait\", e.getMessage());\n-                            flag[0] = true;\n-                            return null;\n-                        }\n-                    }, consumer);\n-                    waitingForSubscriptionOrAssignment = flag[0];\n+                    ConsumerRecords<K, V> records = null;\n+                    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4da634882804383f270a20f643f48a6b5d529f2"}, "originalPosition": 173}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3317, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}