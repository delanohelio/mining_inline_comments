{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNzcyMDc4", "number": 506, "title": "Add jsonschema and protobuf support for ccompat api", "bodyText": "", "createdAt": "2020-05-20T14:02:05Z", "url": "https://github.com/Apicurio/apicurio-registry/pull/506", "merged": true, "mergeCommit": {"oid": "495ead2f420e09f7046941241740d516db9025a9"}, "closed": true, "closedAt": "2020-05-28T11:37:11Z", "author": {"login": "carlesarnal"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjMpvWgFqTQxNTU2NzI0OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABclsSPzAFqTQyMDAyMTU2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NTY3MjQ4", "url": "https://github.com/Apicurio/apicurio-registry/pull/506#pullrequestreview-415567248", "createdAt": "2020-05-20T17:37:53Z", "commit": {"oid": "87fafda4565ccaab077cedc13bef08b771b1e4fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNzozNzo1M1rOGYWs5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNzozNzo1M1rOGYWs5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE5MDk1MQ==", "bodyText": "Are Confluent's schema type constants the same as ours??", "url": "https://github.com/Apicurio/apicurio-registry/pull/506#discussion_r428190951", "createdAt": "2020-05-20T17:37:53Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/ccompat/rest/impl/CompatibilityResourceImpl.java", "diffHunk": "@@ -68,9 +68,8 @@ public CompatibilityCheckResponse testCompatibilityBySubjectName(\n             SchemaContent request) throws Exception {\r\n \r\n         CompatibilityCheckResponse result = facade.parseVersionString(subject, versionString, version -> {\r\n-            // TODO are we safe to assume AVRO?\r\n             try {\r\n-                rules.applyRule(subject, version, ArtifactType.AVRO, ContentHandle.create(request.getSchema()));\r\n+                rules.applyRule(subject, version, ArtifactType.fromValue(request.getSchemaType()), ContentHandle.create(request.getSchema()));\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87fafda4565ccaab077cedc13bef08b771b1e4fe"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NTY5MzU4", "url": "https://github.com/Apicurio/apicurio-registry/pull/506#pullrequestreview-415569358", "createdAt": "2020-05-20T17:40:37Z", "commit": {"oid": "87fafda4565ccaab077cedc13bef08b771b1e4fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNzo0MDozN1rOGYWzQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNzo0MDozN1rOGYWzQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE5MjU3OQ==", "bodyText": "I would prefer to not sure wildcards for imports.", "url": "https://github.com/Apicurio/apicurio-registry/pull/506#discussion_r428192579", "createdAt": "2020-05-20T17:40:37Z", "author": {"login": "EricWittmann"}, "path": "app/src/test/java/io/apicurio/registry/ConfluentClientTest.java", "diffHunk": "@@ -16,38 +16,43 @@\n \n package io.apicurio.registry;\n \n+import io.apicurio.registry.ccompat.dto.SchemaContent;\n import io.apicurio.registry.support.HealthUtils;\n-import io.confluent.connect.avro.AvroConverter;\n+import io.apicurio.registry.support.TestCmmn;\n+import io.confluent.kafka.schemaregistry.SchemaProvider;\n+import io.confluent.kafka.schemaregistry.avro.AvroSchemaProvider;\n import io.confluent.kafka.schemaregistry.client.CachedSchemaRegistryClient;\n import io.confluent.kafka.schemaregistry.client.SchemaRegistryClient;\n+import io.confluent.kafka.schemaregistry.client.rest.RestService;\n import io.confluent.kafka.schemaregistry.client.rest.exceptions.RestClientException;\n-import io.confluent.kafka.serializers.AbstractKafkaAvroSerDeConfig;\n+import io.confluent.kafka.schemaregistry.json.JsonSchemaProvider;\n+import io.confluent.kafka.schemaregistry.protobuf.ProtobufSchemaProvider;\n import io.confluent.kafka.serializers.KafkaAvroDeserializer;\n import io.confluent.kafka.serializers.KafkaAvroSerializer;\n+import io.confluent.kafka.serializers.json.KafkaJsonSchemaDeserializer;\n+import io.confluent.kafka.serializers.json.KafkaJsonSchemaSerializer;\n+import io.confluent.kafka.serializers.json.KafkaJsonSchemaSerializerConfig;\n+import io.confluent.kafka.serializers.protobuf.KafkaProtobufDeserializer;\n+import io.confluent.kafka.serializers.protobuf.KafkaProtobufSerializer;\n+import io.confluent.kafka.serializers.protobuf.KafkaProtobufSerializerConfig;\n import io.quarkus.test.junit.QuarkusTest;\n import org.apache.avro.Schema;\n import org.apache.avro.generic.GenericData;\n-import org.apache.kafka.connect.data.SchemaAndValue;\n-import org.apache.kafka.connect.data.Struct;\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n \n import static io.apicurio.registry.utils.tests.TestUtils.retry;\n \n-import java.nio.ByteBuffer;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.concurrent.ThreadLocalRandom;\n-import java.util.function.BiConsumer;\n-import java.util.function.Consumer;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87fafda4565ccaab077cedc13bef08b771b1e4fe"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NTcxMTQ3", "url": "https://github.com/Apicurio/apicurio-registry/pull/506#pullrequestreview-415571147", "createdAt": "2020-05-20T17:43:03Z", "commit": {"oid": "87fafda4565ccaab077cedc13bef08b771b1e4fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNzo0MzowM1rOGYW42g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNzo0MzowM1rOGYW42g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE5NDAxMA==", "bodyText": "Why is this all removed?", "url": "https://github.com/Apicurio/apicurio-registry/pull/506#discussion_r428194010", "createdAt": "2020-05-20T17:43:03Z", "author": {"login": "EricWittmann"}, "path": "app/src/test/java/io/apicurio/registry/ConfluentClientTest.java", "diffHunk": "@@ -184,81 +233,4 @@ public void testDelete() throws Exception {\n             return null;\n         });\n     }\n-\n-    @Test\n-    public void testConverter_PreRegisterSchema() {\n-        String subject = generateArtifactId();\n-        String name = \"myr\" + ThreadLocalRandom.current().nextInt(0, Integer.MAX_VALUE);\n-        testConverter(\n-            subject,\n-            name,\n-            false,\n-            (client) -> {\n-                try {\n-                    Schema schema = new Schema.Parser().parse(String.format(\"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"%s\\\",\\\"fields\\\":[{\\\"name\\\":\\\"bar\\\",\\\"type\\\":\\\"string\\\"}],\\\"connect.name\\\":\\\"%s\\\"}\", name, name));\n-                    int id = client.register(subject + \"-value\", schema);\n-                    client.reset();\n-                    // can be async ...\n-                    Schema retry = retry(() -> client.getById(id));\n-                    Assertions.assertNotNull(retry);\n-                } catch (Exception e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            },\n-            (c, b) -> {\n-            }\n-        );\n-    }\n-\n-    @Test\n-    public void testConverter_AutoRegisterSchema() {\n-        String name = \"myr\" + ThreadLocalRandom.current().nextInt(0, Integer.MAX_VALUE);\n-        testConverter(\n-            generateArtifactId(),\n-            name,\n-            true,\n-            (c) -> {\n-            },\n-            (client, bytes) -> {\n-                try {\n-                    client.reset();\n-                    Schema retry = retry(() -> {\n-                        ByteBuffer buffer = ByteBuffer.wrap(bytes);\n-                        buffer.get(); // magic-byte\n-                        int id = buffer.getInt();\n-                        return client.getById(id);\n-                    });\n-                    Assertions.assertNotNull(retry);\n-                } catch (Exception e) {\n-                    throw new IllegalStateException(e);\n-                }\n-            }\n-        );\n-    }\n-\n-    private void testConverter(String subject, String name, boolean autoRegister, Consumer<SchemaRegistryClient> pre, BiConsumer<SchemaRegistryClient, byte[]> post) {\n-        SchemaRegistryClient client = buildClient();\n-\n-        pre.accept(client);\n-\n-        org.apache.kafka.connect.data.Schema cs =\n-            org.apache.kafka.connect.data.SchemaBuilder.struct()\n-                                                       .name(name).field(\"bar\", org.apache.kafka.connect.data.Schema.STRING_SCHEMA);\n-        Struct struct = new Struct(cs);\n-        struct.put(\"bar\", \"somebar\");\n-\n-        AvroConverter converter = new AvroConverter(client);\n-        Map<String, Object> config = new HashMap<>();\n-        config.put(AbstractKafkaAvroSerDeConfig.SCHEMA_REGISTRY_URL_CONFIG, \"dummy\");\n-        config.put(AbstractKafkaAvroSerDeConfig.AUTO_REGISTER_SCHEMAS, autoRegister);\n-        converter.configure(config, false);\n-\n-        byte[] bytes = converter.fromConnectData(subject, cs, struct);\n-\n-        post.accept(client, bytes);\n-\n-        SchemaAndValue sav = converter.toConnectData(subject, bytes);\n-        Struct ir = (Struct) sav.value();\n-        Assertions.assertEquals(\"somebar\", ir.get(\"bar\").toString());\n-    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87fafda4565ccaab077cedc13bef08b771b1e4fe"}, "originalPosition": 197}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NTcyMjE0", "url": "https://github.com/Apicurio/apicurio-registry/pull/506#pullrequestreview-415572214", "createdAt": "2020-05-20T17:44:27Z", "commit": {"oid": "87fafda4565ccaab077cedc13bef08b771b1e4fe"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e3eb7112724e026dbacecb7e987239606c5d7e9", "author": {"user": {"login": "EricWittmann", "name": "Eric Wittmann"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/8e3eb7112724e026dbacecb7e987239606c5d7e9", "committedDate": "2020-05-20T17:34:26Z", "message": "Merge branch 'master' into update-ccompat-api-cover-latest-version-406"}, "afterCommit": {"oid": "c1ce5744bd3e1718a1c66e9decca0188812a1190", "author": {"user": {"login": "carlesarnal", "name": "Carles Arnal"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/c1ce5744bd3e1718a1c66e9decca0188812a1190", "committedDate": "2020-05-21T08:58:53Z", "message": "Add jsonschema and protobuf support for ccompat api"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8ea419b952c9efb80fece6c6041169227220cf1b", "author": {"user": {"login": "carlesarnal", "name": "Carles Arnal"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/8ea419b952c9efb80fece6c6041169227220cf1b", "committedDate": "2020-05-25T06:14:27Z", "message": "Merge branch 'master' into update-ccompat-api-cover-latest-version-406"}, "afterCommit": {"oid": "afb53fec216a10403fdbf67730833a981c7855ad", "author": {"user": {"login": "carlesarnal", "name": "Carles Arnal"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/afb53fec216a10403fdbf67730833a981c7855ad", "committedDate": "2020-05-25T11:35:59Z", "message": "Fix problem with jersey already present in the classpath"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8ec675191dd7d1dae35c6e1e538989a2d711f9d", "author": {"user": {"login": "carlesarnal", "name": "Carles Arnal"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/b8ec675191dd7d1dae35c6e1e538989a2d711f9d", "committedDate": "2020-05-28T07:12:13Z", "message": "Add jsonschema and protobuf support for ccompat api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f676d604f848e78229b43f7999a4cb1954dd0a7", "author": {"user": {"login": "carlesarnal", "name": "Carles Arnal"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/3f676d604f848e78229b43f7999a4cb1954dd0a7", "committedDate": "2020-05-28T07:12:13Z", "message": "Remove import wildcard"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "868eb3e3859931bf78e0f220c52eef69b1d4daaa", "author": {"user": {"login": "carlesarnal", "name": "Carles Arnal"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/868eb3e3859931bf78e0f220c52eef69b1d4daaa", "committedDate": "2020-05-28T07:12:13Z", "message": "Fix problem with jersey already present in the classpath"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "242f2fa2805e14a63e1fc168252a0ee0f433e618", "author": {"user": {"login": "carlesarnal", "name": "Carles Arnal"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/242f2fa2805e14a63e1fc168252a0ee0f433e618", "committedDate": "2020-05-28T07:12:13Z", "message": "Add scope provided to registry client test dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a419178d3f57bdc93b72803ca1d7e51690a38700", "author": {"user": {"login": "carlesarnal", "name": "Carles Arnal"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/a419178d3f57bdc93b72803ca1d7e51690a38700", "committedDate": "2020-05-28T07:12:13Z", "message": "Add registered types endpoint"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a7382d458d54f94b0842debfbad1c03c5a105d77", "author": {"user": {"login": "carlesarnal", "name": "Carles Arnal"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/a7382d458d54f94b0842debfbad1c03c5a105d77", "committedDate": "2020-05-26T08:34:37Z", "message": "Add registered types endpoint"}, "afterCommit": {"oid": "a419178d3f57bdc93b72803ca1d7e51690a38700", "author": {"user": {"login": "carlesarnal", "name": "Carles Arnal"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/a419178d3f57bdc93b72803ca1d7e51690a38700", "committedDate": "2020-05-28T07:12:13Z", "message": "Add registered types endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ae1dbc30f652b4ca5f55d9477b6c61e1735470c", "author": {"user": {"login": "carlesarnal", "name": "Carles Arnal"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/9ae1dbc30f652b4ca5f55d9477b6c61e1735470c", "committedDate": "2020-05-28T08:29:43Z", "message": "Add get subject versions endpoint to ccompat api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab1b2252c460e74a9229330b30fe755e6fe598fd", "author": {"user": {"login": "carlesarnal", "name": "Carles Arnal"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/ab1b2252c460e74a9229330b30fe755e6fe598fd", "committedDate": "2020-05-28T09:53:10Z", "message": "Add referencedby endpoint and update some references"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMDIxNTY4", "url": "https://github.com/Apicurio/apicurio-registry/pull/506#pullrequestreview-420021568", "createdAt": "2020-05-28T11:37:02Z", "commit": {"oid": "ab1b2252c460e74a9229330b30fe755e6fe598fd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4500, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}