{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMDkyNzk1", "number": 774, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTowMjozMlrOEaBP7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzowMTozMlrOEahFGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzE4ODk0OnYy", "diffSide": "RIGHT", "path": "app/src/test/java/io/apicurio/registry/RegistrySerdeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTowMjozMlrOHDLo6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNToyNTo0MFrOHDMrQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA5ODQ3Mw==", "bodyText": "I think it would be good to check these bytes here to ensure the data has been encoded as json. I think this test would currently still pass if the encoding was avro-binary.", "url": "https://github.com/Apicurio/apicurio-registry/pull/774#discussion_r473098473", "createdAt": "2020-08-19T15:02:32Z", "author": {"login": "ajborley"}, "path": "app/src/test/java/io/apicurio/registry/RegistrySerdeTest.java", "diffHunk": "@@ -209,6 +208,33 @@ public void testAvro(Supplier<RegistryService> supplier) throws Exception {\n         }\n     }\n \n+    @RegistryServiceTest\n+    public void testAvroJSON(Supplier<RegistryService> supplier) throws Exception {\n+        Schema schema = new Schema.Parser().parse(\"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"myrecord3\\\",\\\"fields\\\":[{\\\"name\\\":\\\"bar\\\",\\\"type\\\":\\\"string\\\"}]}\");\n+        try (AvroKafkaSerializer<GenericData.Record> serializer = new AvroKafkaSerializer<GenericData.Record>(supplier.get());\n+             Deserializer<GenericData.Record> deserializer = new AvroKafkaDeserializer<>(supplier.get())) {\n+            HashMap<String, String> config = new HashMap();\n+            config.put(AvroEncoding.AVRO_ENCODING, AvroEncoding.AVRO_JSON );\n+            serializer.configure(config,false);\n+            deserializer.configure(config, false);\n+            serializer.setGlobalIdStrategy(new AutoRegisterIdStrategy<>());\n+\n+            GenericData.Record record = new GenericData.Record(schema);\n+            record.put(\"bar\", \"somebar\");\n+\n+            String subject = generateArtifactId();\n+\n+            byte[] bytes = serializer.serialize(subject, record);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "899357fa32afbe9748841891564ae585e76bd16d"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzExNTQ1Nw==", "bodyText": "Agreed.", "url": "https://github.com/Apicurio/apicurio-registry/pull/774#discussion_r473115457", "createdAt": "2020-08-19T15:25:40Z", "author": {"login": "EricWittmann"}, "path": "app/src/test/java/io/apicurio/registry/RegistrySerdeTest.java", "diffHunk": "@@ -209,6 +208,33 @@ public void testAvro(Supplier<RegistryService> supplier) throws Exception {\n         }\n     }\n \n+    @RegistryServiceTest\n+    public void testAvroJSON(Supplier<RegistryService> supplier) throws Exception {\n+        Schema schema = new Schema.Parser().parse(\"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"myrecord3\\\",\\\"fields\\\":[{\\\"name\\\":\\\"bar\\\",\\\"type\\\":\\\"string\\\"}]}\");\n+        try (AvroKafkaSerializer<GenericData.Record> serializer = new AvroKafkaSerializer<GenericData.Record>(supplier.get());\n+             Deserializer<GenericData.Record> deserializer = new AvroKafkaDeserializer<>(supplier.get())) {\n+            HashMap<String, String> config = new HashMap();\n+            config.put(AvroEncoding.AVRO_ENCODING, AvroEncoding.AVRO_JSON );\n+            serializer.configure(config,false);\n+            deserializer.configure(config, false);\n+            serializer.setGlobalIdStrategy(new AutoRegisterIdStrategy<>());\n+\n+            GenericData.Record record = new GenericData.Record(schema);\n+            record.put(\"bar\", \"somebar\");\n+\n+            String subject = generateArtifactId();\n+\n+            byte[] bytes = serializer.serialize(subject, record);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA5ODQ3Mw=="}, "originalCommit": {"oid": "899357fa32afbe9748841891564ae585e76bd16d"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjM5ODQ1OnYy", "diffSide": "RIGHT", "path": "app/src/test/java/io/apicurio/registry/RegistrySerdeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzowMDowN1rOHD_oUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzowMDowN1rOHD_oUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1MDI5MQ==", "bodyText": "Extra space at the end ...", "url": "https://github.com/Apicurio/apicurio-registry/pull/774#discussion_r473950291", "createdAt": "2020-08-20T13:00:07Z", "author": {"login": "alesj"}, "path": "app/src/test/java/io/apicurio/registry/RegistrySerdeTest.java", "diffHunk": "@@ -209,6 +210,38 @@ public void testAvro(Supplier<RegistryService> supplier) throws Exception {\n         }\n     }\n \n+    @RegistryServiceTest\n+    public void testAvroJSON(Supplier<RegistryService> supplier) throws Exception {\n+        Schema schema = new Schema.Parser().parse(\"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"myrecord3\\\",\\\"fields\\\":[{\\\"name\\\":\\\"bar\\\",\\\"type\\\":\\\"string\\\"}]}\");\n+        try (AvroKafkaSerializer<GenericData.Record> serializer = new AvroKafkaSerializer<GenericData.Record>(supplier.get());\n+             Deserializer<GenericData.Record> deserializer = new AvroKafkaDeserializer<>(supplier.get())) {\n+            HashMap<String, String> config = new HashMap();\n+            config.put(AvroEncoding.AVRO_ENCODING, AvroEncoding.AVRO_JSON );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9384781dbacf8c0aabfd6d4867f8eb0b8d58cf9"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjQwNDA5OnYy", "diffSide": "RIGHT", "path": "utils/serde/src/main/java/io/apicurio/registry/utils/serde/AvroEncoding.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzowMTozMlrOHD_rzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzowMTozMlrOHD_rzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1MTE4MQ==", "bodyText": "No need for this, it's already set to this", "url": "https://github.com/Apicurio/apicurio-registry/pull/774#discussion_r473951181", "createdAt": "2020-08-20T13:01:32Z", "author": {"login": "alesj"}, "path": "utils/serde/src/main/java/io/apicurio/registry/utils/serde/AvroEncoding.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package io.apicurio.registry.utils.serde;\n+\n+import java.util.Map;\n+\n+public enum AvroEncoding {\n+\n+    BINARY,\n+    JSON;\n+\n+    public static final String AVRO_ENCODING = \"apicurio.avro.encoding\";\n+\n+    public static final String AVRO_JSON = \"JSON\";\n+\n+    public static final String AVRO_BINARY = \"BINARY\";\n+\n+    public static AvroEncoding fromConfig(Map<String, ?> config){\n+        AvroEncoding encoding = AvroEncoding.BINARY;\n+        if(config.containsKey(AVRO_ENCODING)){\n+            try {\n+                encoding = AvroEncoding.valueOf((String) config.get(AVRO_ENCODING));\n+            }\n+            catch (IllegalArgumentException ex){\n+                encoding = AvroEncoding.BINARY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9384781dbacf8c0aabfd6d4867f8eb0b8d58cf9"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3340, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}