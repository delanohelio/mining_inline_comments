{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0MjkzNzAw", "number": 977, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMTowOTo0OFrOE0wkwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwOToyOToxNVrOE1kfOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzU3MjQ4OnYy", "diffSide": "RIGHT", "path": ".github/workflows/integration-tests.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMTowOTo0OFrOHsqC6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDo1OToxOVrOHsywWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4ODI2Nw==", "bodyText": "Maybe create a separated PR for the Kafka changes?", "url": "https://github.com/Apicurio/apicurio-registry/pull/977#discussion_r516588267", "createdAt": "2020-11-03T11:09:48Z", "author": {"login": "carlesarnal"}, "path": ".github/workflows/integration-tests.yaml", "diffHunk": "@@ -39,11 +39,11 @@ jobs:\n           restore-keys: |\n             ${{ runner.os }}-maven-\n       - name: Build All Variants\n-        run: mvn clean install -Pprod -Pjpa -Pinfinispan -Pkafka -Pstreams -Pasyncmem -DskipTests -pl !tests\n-      - name: Run Integration Tests - kafka streams\n+        run: mvn clean install -Pprod -Psql -Pinfinispan -Pstreams -Pasyncmem -DskipTests -pl !tests", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d4246f140a97ebf2b9f7c3bcc47445e57242f12"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjczMDk2OQ==", "bodyText": "Yeah you're right - I should have removed the kafka storage in a separate PR... I'll do that.", "url": "https://github.com/Apicurio/apicurio-registry/pull/977#discussion_r516730969", "createdAt": "2020-11-03T14:59:19Z", "author": {"login": "EricWittmann"}, "path": ".github/workflows/integration-tests.yaml", "diffHunk": "@@ -39,11 +39,11 @@ jobs:\n           restore-keys: |\n             ${{ runner.os }}-maven-\n       - name: Build All Variants\n-        run: mvn clean install -Pprod -Pjpa -Pinfinispan -Pkafka -Pstreams -Pasyncmem -DskipTests -pl !tests\n-      - name: Run Integration Tests - kafka streams\n+        run: mvn clean install -Pprod -Psql -Pinfinispan -Pstreams -Pasyncmem -DskipTests -pl !tests", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4ODI2Nw=="}, "originalCommit": {"oid": "7d4246f140a97ebf2b9f7c3bcc47445e57242f12"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzU4MDU3OnYy", "diffSide": "RIGHT", "path": ".github/workflows/verify.yaml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMToxMTo1MlrOHsqHkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzowNToxOVrOHst4Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4OTQ1Ng==", "bodyText": "Unless we're removing definitely the Kafka storage in the 2.0.x release I'm not in favour of removing it from the verify workflow.", "url": "https://github.com/Apicurio/apicurio-registry/pull/977#discussion_r516589456", "createdAt": "2020-11-03T11:11:52Z", "author": {"login": "carlesarnal"}, "path": ".github/workflows/verify.yaml", "diffHunk": "@@ -38,7 +38,7 @@ jobs:\n           restore-keys: |\n             ${{ runner.os }}-maven-\n       - name: Build All Variants\n-        run: mvn clean install -Pprod -Pjpa -Pinfinispan -Pkafka -Pstreams -Pasyncmem -pl !tests\n+        run: mvn clean install -Pprod -Psql -Pinfinispan -Pstreams -Pasyncmem -pl !tests", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d4246f140a97ebf2b9f7c3bcc47445e57242f12"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYyNTcyNg==", "bodyText": "I think it's definitive, because the storage/kafka module is gone", "url": "https://github.com/Apicurio/apicurio-registry/pull/977#discussion_r516625726", "createdAt": "2020-11-03T12:20:31Z", "author": {"login": "famartinrh"}, "path": ".github/workflows/verify.yaml", "diffHunk": "@@ -38,7 +38,7 @@ jobs:\n           restore-keys: |\n             ${{ runner.os }}-maven-\n       - name: Build All Variants\n-        run: mvn clean install -Pprod -Pjpa -Pinfinispan -Pkafka -Pstreams -Pasyncmem -pl !tests\n+        run: mvn clean install -Pprod -Psql -Pinfinispan -Pstreams -Pasyncmem -pl !tests", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4OTQ1Ng=="}, "originalCommit": {"oid": "7d4246f140a97ebf2b9f7c3bcc47445e57242f12"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY1MTAxOQ==", "bodyText": "Sorry, haven't reviewed everything yet. If that's the case, then I fall back to my previous comment, to separate the Kafka storage stuff into a separate PR.", "url": "https://github.com/Apicurio/apicurio-registry/pull/977#discussion_r516651019", "createdAt": "2020-11-03T13:05:19Z", "author": {"login": "carlesarnal"}, "path": ".github/workflows/verify.yaml", "diffHunk": "@@ -38,7 +38,7 @@ jobs:\n           restore-keys: |\n             ${{ runner.os }}-maven-\n       - name: Build All Variants\n-        run: mvn clean install -Pprod -Pjpa -Pinfinispan -Pkafka -Pstreams -Pasyncmem -pl !tests\n+        run: mvn clean install -Pprod -Psql -Pinfinispan -Pstreams -Pasyncmem -pl !tests", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4OTQ1Ng=="}, "originalCommit": {"oid": "7d4246f140a97ebf2b9f7c3bcc47445e57242f12"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjA3ODAzOnYy", "diffSide": "RIGHT", "path": "app/src/test/java/io/apicurio/registry/RegistryClientTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwOToyOToxNVrOHt6j3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMjoyNjozM1rOHuA_Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkwNzQyMw==", "bodyText": "this shouldn't need to be changed, instead search query should be case insensitive", "url": "https://github.com/Apicurio/apicurio-registry/pull/977#discussion_r517907423", "createdAt": "2020-11-05T09:29:15Z", "author": {"login": "famartinrh"}, "path": "app/src/test/java/io/apicurio/registry/RegistryClientTest.java", "diffHunk": "@@ -107,7 +107,7 @@ void testSearchArtifact(RegistryRestClient restClient) throws Exception {\n             Assertions.assertNotNull(artifactMetaData);\r\n         });\r\n \r\n-        ArtifactSearchResults results = restClient.searchArtifacts(name.toUpperCase(), SearchOver.name, SortOrder.asc, 0, 2);\r\n+        ArtifactSearchResults results = restClient.searchArtifacts(name, SearchOver.name, SortOrder.asc, 0, 2);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0f5ee004fea532541fd835752902eb76b9462f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5NDA3NA==", "bodyText": "Case insensitive searching for a SQL database is dependent on the configuration of the DB.  And it varies from DB to DB.  I think it's safer to not rely on case-insensitive searching in the existing unit tests.\nThat said, I think you're probably right that searching should be case insensitive.  I'll open a GitHub issue for that and introduce a test (later) that is specific to that issue.", "url": "https://github.com/Apicurio/apicurio-registry/pull/977#discussion_r517994074", "createdAt": "2020-11-05T11:52:54Z", "author": {"login": "EricWittmann"}, "path": "app/src/test/java/io/apicurio/registry/RegistryClientTest.java", "diffHunk": "@@ -107,7 +107,7 @@ void testSearchArtifact(RegistryRestClient restClient) throws Exception {\n             Assertions.assertNotNull(artifactMetaData);\r\n         });\r\n \r\n-        ArtifactSearchResults results = restClient.searchArtifacts(name.toUpperCase(), SearchOver.name, SortOrder.asc, 0, 2);\r\n+        ArtifactSearchResults results = restClient.searchArtifacts(name, SearchOver.name, SortOrder.asc, 0, 2);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkwNzQyMw=="}, "originalCommit": {"oid": "c0f5ee004fea532541fd835752902eb76b9462f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5NzYzMg==", "bodyText": "ok thanks, I just was thinking that the new storage implementation needed some tweaks to do case-insensitive queries", "url": "https://github.com/Apicurio/apicurio-registry/pull/977#discussion_r517997632", "createdAt": "2020-11-05T11:58:52Z", "author": {"login": "famartinrh"}, "path": "app/src/test/java/io/apicurio/registry/RegistryClientTest.java", "diffHunk": "@@ -107,7 +107,7 @@ void testSearchArtifact(RegistryRestClient restClient) throws Exception {\n             Assertions.assertNotNull(artifactMetaData);\r\n         });\r\n \r\n-        ArtifactSearchResults results = restClient.searchArtifacts(name.toUpperCase(), SearchOver.name, SortOrder.asc, 0, 2);\r\n+        ArtifactSearchResults results = restClient.searchArtifacts(name, SearchOver.name, SortOrder.asc, 0, 2);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkwNzQyMw=="}, "originalCommit": {"oid": "c0f5ee004fea532541fd835752902eb76b9462f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAxMjY3OQ==", "bodyText": "It might.  I'll work on that in a followup. :)  I opened a few followup GitHub issues.", "url": "https://github.com/Apicurio/apicurio-registry/pull/977#discussion_r518012679", "createdAt": "2020-11-05T12:26:33Z", "author": {"login": "EricWittmann"}, "path": "app/src/test/java/io/apicurio/registry/RegistryClientTest.java", "diffHunk": "@@ -107,7 +107,7 @@ void testSearchArtifact(RegistryRestClient restClient) throws Exception {\n             Assertions.assertNotNull(artifactMetaData);\r\n         });\r\n \r\n-        ArtifactSearchResults results = restClient.searchArtifacts(name.toUpperCase(), SearchOver.name, SortOrder.asc, 0, 2);\r\n+        ArtifactSearchResults results = restClient.searchArtifacts(name, SearchOver.name, SortOrder.asc, 0, 2);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkwNzQyMw=="}, "originalCommit": {"oid": "c0f5ee004fea532541fd835752902eb76b9462f1"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3481, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}