{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxOTQwNzg5", "number": 811, "title": "Add support for clean Avro issue#643", "bodyText": "Add option to use headers instead of magic byte for serializing the global-ids", "createdAt": "2020-09-08T10:19:19Z", "url": "https://github.com/Apicurio/apicurio-registry/pull/811", "merged": true, "mergeCommit": {"oid": "2f58cbbfd7d33b4bfb3d0102a203e15e072d084d"}, "closed": true, "closedAt": "2020-09-11T16:32:47Z", "author": {"login": "tagarr"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHP0P4gFqTQ4NTI1NDMxMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdH4C1UgFqTQ4Njk1NDk1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MjU0MzEx", "url": "https://github.com/Apicurio/apicurio-registry/pull/811#pullrequestreview-485254311", "createdAt": "2020-09-09T17:40:21Z", "commit": {"oid": "05bb53ec2f2065798132e45449fca167e460722f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzo0MDoyMVrOHPS9DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzo0MDoyMVrOHPS9DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMTIyOQ==", "bodyText": "Some of this logic is duplicated in JsonSchemaKafkaDeserializer I think - is there an opportunity to consolidate this?", "url": "https://github.com/Apicurio/apicurio-registry/pull/811#discussion_r485801229", "createdAt": "2020-09-09T17:40:21Z", "author": {"login": "EricWittmann"}, "path": "utils/serde/src/main/java/io/apicurio/registry/utils/serde/AbstractKafkaDeserializer.java", "diffHunk": "@@ -76,4 +82,40 @@ public U deserialize(String topic, byte[] data) {\n         int start = buffer.position() + buffer.arrayOffset();\n         return readData(schema, buffer, start, length);\n     }\n+\n+    @Override\n+    public U deserialize(String topic, Headers headers, byte[] data) {\n+        if (data == null) {\n+            return null;\n+        }\n+        // check if data contains the magic byte\n+        if (data[0] == MAGIC_BYTE){\n+            return deserialize(topic, data);\n+        } else {\n+            Long id = headerUtils.getGlobalId(headers);\n+            if (id == null) {\n+                String artifactId = headerUtils.getArtifactId(headers);\n+                Integer version = headerUtils.getVersion(headers);\n+                id = toGlobalId(artifactId, version);\n+            }\n+            T schema = getCache().getSchema(id);\n+            ByteBuffer buffer = ByteBuffer.wrap(data);\n+            int length = buffer.limit();\n+            int start = buffer.position();\n+            return readData(headers, schema, buffer, start, length);\n+        }\n+    }\n+\n+    protected Long toGlobalId(String artifactId, Integer version) {\n+        if (artifactId == null) {\n+            throw new RuntimeException(\"ArtifactId not found in headers.\");\n+        }\n+        if (version == null) {\n+            ArtifactMetaData amd = getClient().getArtifactMetaData(artifactId);\n+            return amd.getGlobalId();\n+        } else {\n+            VersionMetaData vmd = getClient().getArtifactVersionMetaData(version, artifactId);\n+            return vmd.getGlobalId();\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05bb53ec2f2065798132e45449fca167e460722f"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MjU1NjA3", "url": "https://github.com/Apicurio/apicurio-registry/pull/811#pullrequestreview-485255607", "createdAt": "2020-09-09T17:42:06Z", "commit": {"oid": "05bb53ec2f2065798132e45449fca167e460722f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzo0MjowNlrOHPTBEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzo0MjowNlrOHPTBEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMjI1Nw==", "bodyText": "I think this should be apicurio.registry.use.headers to match the other config prop names.", "url": "https://github.com/Apicurio/apicurio-registry/pull/811#discussion_r485802257", "createdAt": "2020-09-09T17:42:06Z", "author": {"login": "EricWittmann"}, "path": "utils/serde/src/main/java/io/apicurio/registry/utils/serde/AbstractKafkaSerDe.java", "diffHunk": "@@ -48,12 +51,19 @@\n     public static final String REGISTRY_ID_HANDLER_CONFIG_PARAM = \"apicurio.registry.id-handler\";\n     public static final String REGISTRY_CONFLUENT_ID_HANDLER_CONFIG_PARAM = \"apicurio.registry.as-confluent\";\n \n+    // Constants for using headers to store the ids\n+    public static final String USE_HEADERS = \"apicurio.use.headers\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05bb53ec2f2065798132e45449fca167e460722f"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MjU3NTk3", "url": "https://github.com/Apicurio/apicurio-registry/pull/811#pullrequestreview-485257597", "createdAt": "2020-09-09T17:44:51Z", "commit": {"oid": "05bb53ec2f2065798132e45449fca167e460722f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzo0NDo1MVrOHPTGrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzo0NDo1MVrOHPTGrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMzY5NQ==", "bodyText": "I was expecting the decision point to be a configuration property, not the presence of the Headers object - what determines which variant of serialize is called?", "url": "https://github.com/Apicurio/apicurio-registry/pull/811#discussion_r485803695", "createdAt": "2020-09-09T17:44:51Z", "author": {"login": "EricWittmann"}, "path": "utils/serde/src/main/java/io/apicurio/registry/utils/serde/AbstractKafkaSerializer.java", "diffHunk": "@@ -65,12 +74,18 @@ public AbstractKafkaSerializer(\n             String artifactId = getArtifactIdStrategy().artifactId(topic, isKey(), schema);\n             long id = getGlobalIdStrategy().findId(getClient(), artifactId, artifactType(), schema);\n             ByteArrayOutputStream out = new ByteArrayOutputStream();\n-            out.write(MAGIC_BYTE);\n-            getIdHandler().writeId(id, out);\n-            serializeData(schema, data, out);\n+            if (headerUtils != null) {\n+                headerUtils.addSchemaHeaders(headers, artifactId, id);\n+                serializeData(headers, schema, data, out);\n+            } else {\n+                out.write(MAGIC_BYTE);\n+                getIdHandler().writeId(id, out);\n+                serializeData(schema, data, out);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05bb53ec2f2065798132e45449fca167e460722f"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MjU5Mzk3", "url": "https://github.com/Apicurio/apicurio-registry/pull/811#pullrequestreview-485259397", "createdAt": "2020-09-09T17:47:32Z", "commit": {"oid": "05bb53ec2f2065798132e45449fca167e460722f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzo0NzozM1rOHPTMNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzo0NzozM1rOHPTMNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwNTEwOA==", "bodyText": "Isn't this caught above on lines 94-97?", "url": "https://github.com/Apicurio/apicurio-registry/pull/811#discussion_r485805108", "createdAt": "2020-09-09T17:47:33Z", "author": {"login": "EricWittmann"}, "path": "utils/serde/src/main/java/io/apicurio/registry/utils/serde/AvroKafkaDeserializer.java", "diffHunk": "@@ -77,8 +82,24 @@ protected Schema toSchema(Response response) {\n \n     @Override\n     protected U readData(Schema schema, ByteBuffer buffer, int start, int length) {\n+        return readData(null, schema, buffer, start, length);\n+    }\n+\n+    @Override\n+    protected U readData(Headers headers, Schema schema, ByteBuffer buffer, int start, int length) {\n+        AvroEncoding encoding = null;\n+        if (headers != null){\n+            encoding = headerUtils.getEncoding(headers);\n+        }\n+        if (encoding == null) {\n+            // no encoding in header or no headers so use config\n+            encoding = configEncoding;\n+        }\n         try {\n             DatumReader<U> reader = avroDatumProvider.createDatumReader(schema);\n+            if (encoding == null) {\n+                encoding = configEncoding;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05bb53ec2f2065798132e45449fca167e460722f"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MjkzNDI4", "url": "https://github.com/Apicurio/apicurio-registry/pull/811#pullrequestreview-485293428", "createdAt": "2020-09-09T18:35:55Z", "commit": {"oid": "05bb53ec2f2065798132e45449fca167e460722f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODozNTo1NVrOHPU0DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODozNTo1NVrOHPU0DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzMTY5Mw==", "bodyText": "Might this be null sometimes?", "url": "https://github.com/Apicurio/apicurio-registry/pull/811#discussion_r485831693", "createdAt": "2020-09-09T18:35:55Z", "author": {"login": "EricWittmann"}, "path": "utils/serde/src/main/java/io/apicurio/registry/utils/serde/AvroKafkaSerializer.java", "diffHunk": "@@ -104,6 +112,12 @@ protected void serializeData(Schema schema, U data, OutputStream out) throws IOE\n         encoder.flush();\n     }\n \n+    @Override\n+    protected void serializeData(Headers headers, Schema schema, U data, ByteArrayOutputStream out) throws IOException {\n+        headerUtils.addEncodingHeader(headers, encoding);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05bb53ec2f2065798132e45449fca167e460722f"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a51f2c8d0c682cc32a880e2f81d6ee53bf14f142", "author": {"user": {"login": "tagarr", "name": "Tony Garrard"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/a51f2c8d0c682cc32a880e2f81d6ee53bf14f142", "committedDate": "2020-09-10T14:20:06Z", "message": "Add support for clean Avro issue#643\n\nAdd option to use headers instead of magic\nbyte for serializing the global-ids\n\nSigned-off-by: A. Garrard <GARRARD@uk.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09432122165727e25f30fc7a41224af5de3b26bb", "author": {"user": {"login": "tagarr", "name": "Tony Garrard"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/09432122165727e25f30fc7a41224af5de3b26bb", "committedDate": "2020-09-10T14:20:06Z", "message": "Add clean avro issue 643\n\nAlways use headerUtils for consumer, so can consume\nany message\n\nSigned-off-by: A. Garrard <GARRARD@uk.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79179625d71d4b75f5cb708624d281a860d78a80", "author": {"user": {"login": "tagarr", "name": "Tony Garrard"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/79179625d71d4b75f5cb708624d281a860d78a80", "committedDate": "2020-09-10T14:20:06Z", "message": "Add pure avro option issue 643\n\nAdd some comments on the constants\nused by the headers\n\nSigned-off-by: A. Garrard <GARRARD@uk.ibm.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d122d36ec2959e1eb54e74a36c0f904fa1e9d545", "author": {"user": {"login": "tagarr", "name": "Tony Garrard"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/d122d36ec2959e1eb54e74a36c0f904fa1e9d545", "committedDate": "2020-09-10T14:20:06Z", "message": "Add clean avro option\n\nRefactor code according to comments\n\nSigned-off-by: A. Garrard <GARRARD@uk.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "05bb53ec2f2065798132e45449fca167e460722f", "author": {"user": {"login": "tagarr", "name": "Tony Garrard"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/05bb53ec2f2065798132e45449fca167e460722f", "committedDate": "2020-09-08T09:31:33Z", "message": "Add pure avro option issue 643\n\nAdd some comments on the constants\nused by the headers\n\nSigned-off-by: A. Garrard <GARRARD@uk.ibm.com>"}, "afterCommit": {"oid": "d122d36ec2959e1eb54e74a36c0f904fa1e9d545", "author": {"user": {"login": "tagarr", "name": "Tony Garrard"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/d122d36ec2959e1eb54e74a36c0f904fa1e9d545", "committedDate": "2020-09-10T14:20:06Z", "message": "Add clean avro option\n\nRefactor code according to comments\n\nSigned-off-by: A. Garrard <GARRARD@uk.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2OTU0OTU5", "url": "https://github.com/Apicurio/apicurio-registry/pull/811#pullrequestreview-486954959", "createdAt": "2020-09-11T16:32:29Z", "commit": {"oid": "d122d36ec2959e1eb54e74a36c0f904fa1e9d545"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4425, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}