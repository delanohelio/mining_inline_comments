{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MDE4MzE1", "number": 1034, "title": "ksql - generate globalId from kafka record", "bodyText": "Implements the abstraction in the SQL storage to provide the globalId in the ksql storage the globalId is generated from the kafka record partition + offset (similarly to the streams impl)", "createdAt": "2020-11-26T11:36:19Z", "url": "https://github.com/Apicurio/apicurio-registry/pull/1034", "merged": true, "mergeCommit": {"oid": "2f8062e0e5d0d02c3db95a6a1c2ebe0b1bf00748"}, "closed": true, "closedAt": "2020-12-01T13:59:16Z", "author": {"login": "famartinrh"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgRTfMgH2gAyNTI4MDE4MzE1OmNmMTE3YzdhZDY3YzliOWY5MzFkODBjOWVmMGJkYjUxOGQ2YTg2N2U=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdh6ZdHAFqTU0MTkxODY5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "cf117c7ad67c9b9f931d80c9ef0bdb518d6a867e", "author": {"user": {"login": "famartinrh", "name": "Fabian Martinez"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/cf117c7ad67c9b9f931d80c9ef0bdb518d6a867e", "committedDate": "2020-11-26T11:32:29Z", "message": "ksql - generate globalId from kafka record"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MjQ0NjY4", "url": "https://github.com/Apicurio/apicurio-registry/pull/1034#pullrequestreview-539244668", "createdAt": "2020-11-26T11:48:23Z", "commit": {"oid": "cf117c7ad67c9b9f931d80c9ef0bdb518d6a867e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMTo0ODoyM1rOH6YFZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMTo0ODoyM1rOH6YFZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk3NDA1Mw==", "bodyText": "Why don't just bind the globalId, like we're doing with the other parameters?", "url": "https://github.com/Apicurio/apicurio-registry/pull/1034#discussion_r530974053", "createdAt": "2020-11-26T11:48:23Z", "author": {"login": "carlesarnal"}, "path": "utils/sql/src/main/java/io/apicurio/registry/storage/impl/sql/CommonSqlStatements.java", "diffHunk": "@@ -147,17 +147,20 @@ public String updateArtifactLatest() {\n     public String updateArtifactLatestGlobalId() {\n         return \"UPDATE artifacts SET latest = (SELECT v.globalId FROM versions v WHERE v.artifactId = ? AND v.version = ?) WHERE artifactId = ?\";\n     }\n-    \n+\n     /**\n      * @see io.apicurio.registry.storage.impl.sql.SqlStatements#insertVersion()\n      */\n     @Override\n-    public String insertVersion(boolean firstVersion) {\n+    public String insertVersion(boolean firstVersion, String globalId) {\n+        String query;\n         if (firstVersion) {\n-            return \"INSERT INTO versions (artifactId, version, state, name, description, createdBy, createdOn, labels, properties, contentId) VALUES (?, 1, ?, ?, ?, ?, ?, ?, ?, ?)\";\n+            query = \"INSERT INTO versions (globalId, artifactId, version, state, name, description, createdBy, createdOn, labels, properties, contentId) VALUES (%s, ?, 1, ?, ?, ?, ?, ?, ?, ?, ?)\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf117c7ad67c9b9f931d80c9ef0bdb518d6a867e"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMTY3Nzcz", "url": "https://github.com/Apicurio/apicurio-registry/pull/1034#pullrequestreview-541167773", "createdAt": "2020-11-30T18:11:42Z", "commit": {"oid": "cf117c7ad67c9b9f931d80c9ef0bdb518d6a867e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODoxMTo0MlrOH8HfiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODoxMTo0MlrOH8HfiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc5OTM2OA==", "bodyText": "We may need to revisit this for multi-tenancy if we go that way.  Fine for now though.  I wonder if we could use 10 or 12 bits when shifting to give us more headroom for the offset.  The less we bitshift the offset the fewer partitions we can have, but right now we can have 65k partitions which seems high.  Bitshifting by 10 would give us 1024 partitions and more headroom before we overran the integer.  Overrunning the integer is a concern for the ccompat API, which uses an integer for the globalId instead of a long.\nThoughts @Apicurio/developers ?", "url": "https://github.com/Apicurio/apicurio-registry/pull/1034#discussion_r532799368", "createdAt": "2020-11-30T18:11:42Z", "author": {"login": "EricWittmann"}, "path": "storage/ksql/src/main/java/io/apicurio/registry/storage/impl/ksql/sql/KafkaSQLSink.java", "diffHunk": "@@ -233,4 +264,16 @@ private boolean isGlobalRules(String artifactId) {\n         return artifactId.equals(KafkaSqlRegistryStorage.GLOBAL_RULES_ID);\n     }\n \n+    public long toGlobalId(long offset, int partition) {\n+        return getBaseOffset() + (offset << 16) + partition;\n+    }\n+\n+    // just to make sure we can always move the whole system\n+    // and not get duplicates; e.g. after move baseOffset = max(globalId) + 1\n+    public long getBaseOffset() {\n+        //TODO\n+        //        return Long.parseLong(properties.getProperty(\"storage.base.offset\", \"0\"));\n+        return 0;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf117c7ad67c9b9f931d80c9ef0bdb518d6a867e"}, "originalPosition": 150}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMTY5NjUy", "url": "https://github.com/Apicurio/apicurio-registry/pull/1034#pullrequestreview-541169652", "createdAt": "2020-11-30T18:14:07Z", "commit": {"oid": "cf117c7ad67c9b9f931d80c9ef0bdb518d6a867e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODoxNDowN1rOH8HlGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODoxNDowN1rOH8HlGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgwMDc5Mg==", "bodyText": "To avoid a SQL injection vector, this could instead actually make a call to the DB to get the next value and return it.", "url": "https://github.com/Apicurio/apicurio-registry/pull/1034#discussion_r532800792", "createdAt": "2020-11-30T18:14:07Z", "author": {"login": "EricWittmann"}, "path": "utils/sql/src/main/java/io/apicurio/registry/storage/impl/sql/SqlGlobalIdGenerator.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2020 Red Hat\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.apicurio.registry.storage.impl.sql;\n+\n+/**\n+ * @author Fabian Martinez\n+ */\n+public class SqlGlobalIdGenerator implements GlobalIdGenerator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf117c7ad67c9b9f931d80c9ef0bdb518d6a867e"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMTcxNjM4", "url": "https://github.com/Apicurio/apicurio-registry/pull/1034#pullrequestreview-541171638", "createdAt": "2020-11-30T18:16:51Z", "commit": {"oid": "cf117c7ad67c9b9f931d80c9ef0bdb518d6a867e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODoxNjo1MlrOH8HrnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODoxNjo1MlrOH8HrnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgwMjQ2MA==", "bodyText": "If we change the date type to add WITHOUT TIME ZONE then I think we should do it in the artifacts table too.  Also we should change any other CLOB types to TEXT.  Should be consistent...", "url": "https://github.com/Apicurio/apicurio-registry/pull/1034#discussion_r532802460", "createdAt": "2020-11-30T18:16:52Z", "author": {"login": "EricWittmann"}, "path": "utils/sql/src/main/resources/io/apicurio/registry/storage/impl/sql/h2.ddl", "diffHunk": "@@ -25,7 +25,9 @@ ALTER TABLE content ADD CONSTRAINT UNQ_content_1 UNIQUE (contentHash);\n CREATE INDEX IDX_content_1 ON content(canonicalHash);\n CREATE INDEX IDX_content_2 ON content(contentHash);\n \n-CREATE TABLE versions (globalId BIGINT AUTO_INCREMENT NOT NULL, artifactId VARCHAR(512) NOT NULL, version INT NOT NULL, state VARCHAR(64) NOT NULL, name VARCHAR(512), description VARCHAR(1024), createdBy VARCHAR(256), createdOn TIMESTAMP NOT NULL, labels CLOB, properties CLOB, contentId BIGINT NOT NULL);\n+CREATE SEQUENCE globalidsequence;\n+\n+CREATE TABLE versions (globalId BIGINT NOT NULL, artifactId VARCHAR(512) NOT NULL, version INT NOT NULL, state VARCHAR(64) NOT NULL, name VARCHAR(512), description VARCHAR(1024), createdBy VARCHAR(256), createdOn TIMESTAMP WITHOUT TIME ZONE NOT NULL, labels TEXT, properties TEXT, contentId BIGINT NOT NULL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf117c7ad67c9b9f931d80c9ef0bdb518d6a867e"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f3862af0fdb02b4040079ca069b3258bef96eee", "author": {"user": {"login": "famartinrh", "name": "Fabian Martinez"}}, "url": "https://github.com/Apicurio/apicurio-registry/commit/5f3862af0fdb02b4040079ca069b3258bef96eee", "committedDate": "2020-12-01T11:54:33Z", "message": "obtain globalId in sql storage with separated call to the DB"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxOTE4Njk0", "url": "https://github.com/Apicurio/apicurio-registry/pull/1034#pullrequestreview-541918694", "createdAt": "2020-12-01T13:59:02Z", "commit": {"oid": "5f3862af0fdb02b4040079ca069b3258bef96eee"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4399, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}