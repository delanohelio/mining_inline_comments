{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0OTk0NTIz", "number": 983, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNzoyMTowNlrOE1htEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNzoyMTowNlrOE1htEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NTYyMTk1OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/rules/compatibility/GenericCompatibilityDifference.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNzoyMTowNlrOHt2PoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMjowMTo1MlrOHuALhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgzNjcwNA==", "bodyText": "What does such context mean?", "url": "https://github.com/Apicurio/apicurio-registry/pull/983#discussion_r517836704", "createdAt": "2020-11-05T07:21:06Z", "author": {"login": "ronsher"}, "path": "app/src/main/java/io/apicurio/registry/rules/compatibility/GenericCompatibilityDifference.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Red Hat\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.rules.compatibility;\n+\n+import io.apicurio.registry.rest.beans.RuleViolationCause;\n+\n+/**\n+ * @author eric.wittmann@gmail.com\n+ */\n+public class GenericCompatibilityDifference implements CompatibilityDifference {\n+\n+    private final String message;\n+    \n+    /**\n+     * Constructor.\n+     * @param e\n+     */\n+    public GenericCompatibilityDifference(Exception e) {\n+        this.message = e.getMessage();\n+    }\n+\n+    /**\n+     * Constructor.\n+     * @param message\n+     */\n+    public GenericCompatibilityDifference(String message) {\n+        this.message = message;\n+    }\n+    \n+    /**\n+     * @see io.apicurio.registry.rules.compatibility.CompatibilityDifference#asRuleViolationCause()\n+     */\n+    @Override\n+    public RuleViolationCause asRuleViolationCause() {\n+        RuleViolationCause cause = new RuleViolationCause();\n+        cause.setDescription(message);\n+        cause.setContext(\"/\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "634d483ce5ff4cfa429d11f89ad98ece734ab1f3"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5OTQ5Mw==", "bodyText": "The context is intended to mean where in the document the error/issue exists.  So basically a \"path\" into the document to help identify the location of the problem.  For most of our compatibility support we don't have that information.  For example, the Avro libraries don't provide a lot of feedback when doing this compatibility check - they give you a \"yes\" or \"no\".  So in these cases we just have a high level error message and  use \"/\" to indicate the root or entire document.", "url": "https://github.com/Apicurio/apicurio-registry/pull/983#discussion_r517999493", "createdAt": "2020-11-05T12:01:52Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/rules/compatibility/GenericCompatibilityDifference.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Red Hat\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.rules.compatibility;\n+\n+import io.apicurio.registry.rest.beans.RuleViolationCause;\n+\n+/**\n+ * @author eric.wittmann@gmail.com\n+ */\n+public class GenericCompatibilityDifference implements CompatibilityDifference {\n+\n+    private final String message;\n+    \n+    /**\n+     * Constructor.\n+     * @param e\n+     */\n+    public GenericCompatibilityDifference(Exception e) {\n+        this.message = e.getMessage();\n+    }\n+\n+    /**\n+     * Constructor.\n+     * @param message\n+     */\n+    public GenericCompatibilityDifference(String message) {\n+        this.message = message;\n+    }\n+    \n+    /**\n+     * @see io.apicurio.registry.rules.compatibility.CompatibilityDifference#asRuleViolationCause()\n+     */\n+    @Override\n+    public RuleViolationCause asRuleViolationCause() {\n+        RuleViolationCause cause = new RuleViolationCause();\n+        cause.setDescription(message);\n+        cause.setContext(\"/\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgzNjcwNA=="}, "originalCommit": {"oid": "634d483ce5ff4cfa429d11f89ad98ece734ab1f3"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3484, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}