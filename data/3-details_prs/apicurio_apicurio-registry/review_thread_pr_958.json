{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNzczNzA5", "number": 958, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDoxNjo1NlrOEyX_LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDoyOToyOVrOE01QHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjU3MjYwOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/rules/compatibility/CompatibilityExecutionResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDoxNjo1NlrOHo-ikg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDozOTozMFrOHo_vLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcyOTc0Ng==", "bodyText": "When should someone return an empty compatibility result? What does it mean?", "url": "https://github.com/Apicurio/apicurio-registry/pull/958#discussion_r512729746", "createdAt": "2020-10-27T14:16:56Z", "author": {"login": "ronsher"}, "path": "app/src/main/java/io/apicurio/registry/rules/compatibility/CompatibilityExecutionResult.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.apicurio.registry.rules.compatibility;\n+\n+import io.apicurio.registry.rules.compatibility.jsonschema.diff.Difference;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+/**\n+ * Created by aohana\n+ */\n+public class CompatibilityExecutionResult {\n+\n+    private boolean isCompatible;\n+    private Set<Difference> incompatibleDifferences;\n+\n+    public CompatibilityExecutionResult(boolean isCompatible, Set<Difference> incompatibleDifferences) {\n+        this.isCompatible = isCompatible;\n+        this.incompatibleDifferences = incompatibleDifferences;\n+    }\n+\n+    public boolean isCompatible() {\n+        return isCompatible;\n+    }\n+\n+    public void setCompatible(boolean compatible) {\n+        isCompatible = compatible;\n+    }\n+\n+    public Set<Difference> getIncompatibleDifferences() {\n+        return incompatibleDifferences;\n+    }\n+\n+    public void setIncompatibleDifferences(Set<Difference> incompatibleDifferences) {\n+        this.incompatibleDifferences = incompatibleDifferences;\n+    }\n+\n+    public static CompatibilityExecutionResult empty(boolean isCompatible) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62ba1b08426f73e30e14676915a60047ce7ffdf3"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc0OTM1OQ==", "bodyText": "all the schema types (except JSON) currently don't have information on the compatibility error so they will return isCompatible (true/false) and an empty diff set", "url": "https://github.com/Apicurio/apicurio-registry/pull/958#discussion_r512749359", "createdAt": "2020-10-27T14:39:30Z", "author": {"login": "adiohana"}, "path": "app/src/main/java/io/apicurio/registry/rules/compatibility/CompatibilityExecutionResult.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.apicurio.registry.rules.compatibility;\n+\n+import io.apicurio.registry.rules.compatibility.jsonschema.diff.Difference;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+/**\n+ * Created by aohana\n+ */\n+public class CompatibilityExecutionResult {\n+\n+    private boolean isCompatible;\n+    private Set<Difference> incompatibleDifferences;\n+\n+    public CompatibilityExecutionResult(boolean isCompatible, Set<Difference> incompatibleDifferences) {\n+        this.isCompatible = isCompatible;\n+        this.incompatibleDifferences = incompatibleDifferences;\n+    }\n+\n+    public boolean isCompatible() {\n+        return isCompatible;\n+    }\n+\n+    public void setCompatible(boolean compatible) {\n+        isCompatible = compatible;\n+    }\n+\n+    public Set<Difference> getIncompatibleDifferences() {\n+        return incompatibleDifferences;\n+    }\n+\n+    public void setIncompatibleDifferences(Set<Difference> incompatibleDifferences) {\n+        this.incompatibleDifferences = incompatibleDifferences;\n+    }\n+\n+    public static CompatibilityExecutionResult empty(boolean isCompatible) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcyOTc0Ng=="}, "originalCommit": {"oid": "62ba1b08426f73e30e14676915a60047ce7ffdf3"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjU3Njc3OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/rules/compatibility/CompatibilityChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDoxNzo0M1rOHo-lMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDoxNzo0M1rOHo-lMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjczMDQxOQ==", "bodyText": "Indentation isn't compatible with existing code", "url": "https://github.com/Apicurio/apicurio-registry/pull/958#discussion_r512730419", "createdAt": "2020-10-27T14:17:43Z", "author": {"login": "ronsher"}, "path": "app/src/main/java/io/apicurio/registry/rules/compatibility/CompatibilityChecker.java", "diffHunk": "@@ -37,17 +38,17 @@\n      *                           (e.g. a global COMPATIBILITY rule with {@see io.apicurio.registry.rules.RuleApplicationType#CREATE})\n      * @param proposedArtifact   MUST NOT be null\n      */\n-    default boolean isCompatibleWith(CompatibilityLevel compatibilityLevel, List<ContentHandle> existingArtifacts, ContentHandle proposedArtifact) {\n+    default CompatibilityExecutionResult testCompatibility(CompatibilityLevel compatibilityLevel, List<ContentHandle> existingArtifacts, ContentHandle proposedArtifact) {\n         requireNonNull(compatibilityLevel, \"compatibilityLevel MUST NOT be null\");\n         requireNonNull(existingArtifacts, \"existingArtifacts MUST NOT be null\");\n         requireNonNull(proposedArtifact, \"proposedArtifact MUST NOT be null\");\n         if (existingArtifacts.contains(null)) {\n             throw new IllegalStateException(\"existingArtifacts contains null element(s)\");\n         }\n-        return isCompatibleWith(\n-            compatibilityLevel,\n-            existingArtifacts.stream().map(ContentHandle::content).collect(Collectors.toList()),\n-            proposedArtifact.content()\n+        return testCompatibility(\n+                compatibilityLevel,\n+                existingArtifacts.stream().map(ContentHandle::content).collect(Collectors.toList()),\n+                proposedArtifact.content()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62ba1b08426f73e30e14676915a60047ce7ffdf3"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjU4MDI4OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/rules/compatibility/CompatibilityExecutionResult.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDoxODoyNlrOHo-ncg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDoxODoyNlrOHo-ncg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjczMDk5NA==", "bodyText": "Can you add to the comment some explanation on this class?", "url": "https://github.com/Apicurio/apicurio-registry/pull/958#discussion_r512730994", "createdAt": "2020-10-27T14:18:26Z", "author": {"login": "ronsher"}, "path": "app/src/main/java/io/apicurio/registry/rules/compatibility/CompatibilityExecutionResult.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.apicurio.registry.rules.compatibility;\n+\n+import io.apicurio.registry.rules.compatibility.jsonschema.diff.Difference;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+/**\n+ * Created by aohana\n+ */\n+public class CompatibilityExecutionResult {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62ba1b08426f73e30e14676915a60047ce7ffdf3"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjU4NDU2OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/rules/compatibility/CompatibilityRuleExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDoxOToxMFrOHo-qAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDoxOToxMFrOHo-qAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjczMTY0OA==", "bodyText": "indentation too deep", "url": "https://github.com/Apicurio/apicurio-registry/pull/958#discussion_r512731648", "createdAt": "2020-10-27T14:19:10Z", "author": {"login": "ronsher"}, "path": "app/src/main/java/io/apicurio/registry/rules/compatibility/CompatibilityRuleExecutor.java", "diffHunk": "@@ -56,14 +61,31 @@ public void execute(RuleContext context) throws RuleViolationException {\n         CompatibilityChecker checker = provider.getCompatibilityChecker();\n         List<ContentHandle> existingArtifacts = context.getCurrentContent() != null\n             ? singletonList(context.getCurrentContent()) : emptyList();\n-        if (!checker.isCompatibleWith(\n-            level,\n-            existingArtifacts,\n-            context.getUpdatedContent())\n-        ) {\n-            throw new RuleViolationException(String.format(\"Incompatible artifact: %s [%s]\",\n-                context.getArtifactId(), context.getArtifactType()),\n-                RuleType.COMPATIBILITY, context.getConfiguration());\n+        CompatibilityExecutionResult compatibilityExecutionResult = checker.testCompatibility(\n+                level,\n+                existingArtifacts,\n+                context.getUpdatedContent());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62ba1b08426f73e30e14676915a60047ce7ffdf3"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjYyNzg5OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/rules/compatibility/jsonschema/JsonSchemaDiffLibrary.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDoyNzowNFrOHo_FNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDoyNzowNFrOHo_FNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjczODYxMg==", "bodyText": "indentation", "url": "https://github.com/Apicurio/apicurio-registry/pull/958#discussion_r512738612", "createdAt": "2020-10-27T14:27:04Z", "author": {"login": "ronsher"}, "path": "app/src/main/java/io/apicurio/registry/rules/compatibility/jsonschema/JsonSchemaDiffLibrary.java", "diffHunk": "@@ -45,12 +48,12 @@ public static DiffContext findDifferences(String original, String updated) {\n             JSONObject updatedJson = MAPPER.readValue(updated, JSONObject.class);\n \n             Schema originalSchema = SchemaLoader.builder()\n-                .schemaJson(originalJson)\n-                .build().load().build();\n+                    .schemaJson(originalJson)\n+                    .build().load().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62ba1b08426f73e30e14676915a60047ce7ffdf3"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjYzMDA2OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/rules/compatibility/jsonschema/diff/DiffContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDoyNzoyNVrOHo_Gig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDoyNzoyNVrOHo_Gig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjczODk1NA==", "bodyText": "indentation", "url": "https://github.com/Apicurio/apicurio-registry/pull/958#discussion_r512738954", "createdAt": "2020-10-27T14:27:25Z", "author": {"login": "ronsher"}, "path": "app/src/main/java/io/apicurio/registry/rules/compatibility/jsonschema/diff/DiffContext.java", "diffHunk": "@@ -85,12 +86,12 @@ private void addToDifferenceSets(Difference difference) {\n \n     public void addDifference(DiffType type, Object originalSubchema, Object updatedSubchema) {\n         Difference difference = Difference.builder()\n-            .diffType(type)\n-            .pathOriginal(\"\")\n-            .pathUpdated(pathUpdated)\n-            .subSchemaOriginal(Objects.toString(originalSubchema)) // make sure toString is good enough\n-            .subSchemaUpdated(Objects.toString(updatedSubchema))\n-            .build();\n+                .diffType(type)\n+                .pathOriginal(\"\")\n+                .pathUpdated(pathUpdated)\n+                .subSchemaOriginal(Objects.toString(originalSubchema)) // make sure toString is good enough\n+                .subSchemaUpdated(Objects.toString(updatedSubchema))\n+                .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62ba1b08426f73e30e14676915a60047ce7ffdf3"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjU5NjgzOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/rules/compatibility/CompatibilityExecutionResult.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMTowMzo0OFrOHpkutA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMTowMzo0OFrOHpkutA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM1NTQ0NA==", "bodyText": "...result for a compatibility check", "url": "https://github.com/Apicurio/apicurio-registry/pull/958#discussion_r513355444", "createdAt": "2020-10-28T11:03:48Z", "author": {"login": "ronsher"}, "path": "app/src/main/java/io/apicurio/registry/rules/compatibility/CompatibilityExecutionResult.java", "diffHunk": "@@ -7,6 +7,9 @@\n \n /**\n  * Created by aohana\n+ *\n+ * Holds the result for compatibility check", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d312f451c0e556b6761af8ec43f413aa6c5b85c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODMzODg1OnYy", "diffSide": "RIGHT", "path": "common/src/main/resources/META-INF/openapi.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDoyOToyOVrOHsxUkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDoyOToyOVrOHsxUkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcwNzQ3NQ==", "bodyText": ":) nice catch", "url": "https://github.com/Apicurio/apicurio-registry/pull/958#discussion_r516707475", "createdAt": "2020-11-03T14:29:29Z", "author": {"login": "EricWittmann"}, "path": "common/src/main/resources/META-INF/openapi.json", "diffHunk": "@@ -2233,7 +2233,7 @@\n                 }\n             },\n             \"RuleViolationCause\": {\n-                \"title\": \"Root Type for RuleViolationCAuse\",\n+                \"title\": \"Root Type for RuleViolationCause\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5eb00eb9b0d6497940a845685711e20871c1973"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3464, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}