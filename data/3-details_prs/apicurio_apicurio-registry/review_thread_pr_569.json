{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MjM4ODc5", "number": 569, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODowMTozOVrOEA_M5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODowMjozM1rOEA_NyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDcwOTUxOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/util/SearchUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODowMTozOVrOGcm3eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODowMTozOVrOGcm3eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY1MDEwNQ==", "bodyText": "Name could be null for either or both.", "url": "https://github.com/Apicurio/apicurio-registry/pull/569#discussion_r432650105", "createdAt": "2020-05-29T18:01:39Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/util/SearchUtil.java", "diffHunk": "@@ -29,16 +29,30 @@\n  */\n public class SearchUtil {\n \n-    public static Comparator<String> comparator(SortOrder sortOrder) {\n-        return (id1, id2) -> compare(sortOrder, id1, id2);\n+    public static Comparator<ArtifactMetaDataDto> comparator(SortOrder sortOrder) {\n+\n+        final Comparator<ArtifactMetaDataDto> metaDataComparator = ((id1, id2) -> compare(sortOrder, id1, id2));\n+\n+        return metaDataComparator.thenComparing(idComparator(sortOrder));\n+    }\n+\n+    private static Comparator<ArtifactMetaDataDto> idComparator(SortOrder sortOrder) {\n+        return (artifactMetaDataDto1, artifactMetaDataDto2) -> {\n+            switch (sortOrder) {\n+                case desc:\n+                    return artifactMetaDataDto1.getId().compareTo(artifactMetaDataDto2.getId());\n+                default:\n+                    return artifactMetaDataDto2.getId().compareToIgnoreCase(artifactMetaDataDto1.getId());\n+            }\n+        };\n     }\n \n-    public static int compare(SortOrder sortOrder, String id1, String id2) {\n+    public static int compare(SortOrder sortOrder, ArtifactMetaDataDto id1, ArtifactMetaDataDto id2) {\n         switch (sortOrder) {\n             case desc:\n-                return id2.compareToIgnoreCase(id1);\n+                return id2.getName().compareToIgnoreCase(id1.getName());\n             default:\n-                return id1.compareToIgnoreCase(id2);\n+                return id1.getName().compareToIgnoreCase(id2.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b5daec040f6c0ce0677b4451f226679b96eddbe"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDcxMTc2OnYy", "diffSide": "RIGHT", "path": "app/src/test/java/io/apicurio/registry/RegistryClientTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODowMjozM1rOGcm49Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODowMjozM1rOGcm49Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY1MDQ4NQ==", "bodyText": "Also maybe throw in an artifact with no name.  In that case the ID should be used as the name.", "url": "https://github.com/Apicurio/apicurio-registry/pull/569#discussion_r432650485", "createdAt": "2020-05-29T18:02:33Z", "author": {"login": "EricWittmann"}, "path": "app/src/test/java/io/apicurio/registry/RegistryClientTest.java", "diffHunk": "@@ -188,6 +188,61 @@ public void testLabels(Supplier<RegistryService> supplier) throws Exception {\n         }\n     }\n \n+    @RegistryServiceTest\n+    void nameOrderingTest(Supplier<RegistryService> supplier) throws Exception {\n+\n+        final String firstArtifactId = generateArtifactId();\n+        final String secondArtifactId = generateArtifactId();\n+        RegistryService client = supplier.get();\n+\n+        try {\n+\n+            // warm-up\n+            client.listArtifacts();\n+\n+            String name = \"aaaTestorder\" + ThreadLocalRandom.current().nextInt(1000000);\n+            ByteArrayInputStream artifactData = new ByteArrayInputStream(\n+                    (\"{\\\"type\\\":\\\"record\\\",\\\"title\\\":\\\"\" + name + \"\\\",\\\"fields\\\":[{\\\"name\\\":\\\"foo\\\",\\\"type\\\":\\\"string\\\"}]}\")\n+                            .getBytes(StandardCharsets.UTF_8));\n+\n+            CompletionStage<ArtifactMetaData> cs = client.createArtifact(ArtifactType.JSON, firstArtifactId, null, artifactData);\n+            long id = ConcurrentUtil.result(cs).getGlobalId();\n+\n+            retry(() -> {\n+                ArtifactMetaData artifactMetaData = client.getArtifactMetaDataByGlobalId(id);\n+                Assertions.assertNotNull(artifactMetaData);\n+            });\n+\n+            String secondName = \"bbbTestorder\" + ThreadLocalRandom.current().nextInt(1000000);\n+            ByteArrayInputStream secondData = new ByteArrayInputStream(\n+                    (\"{\\\"type\\\":\\\"record\\\",\\\"title\\\":\\\"\" + secondName + \"\\\",\\\"fields\\\":[{\\\"name\\\":\\\"foo\\\",\\\"type\\\":\\\"string\\\"}]}\")\n+                            .getBytes(StandardCharsets.UTF_8));\n+\n+            CompletionStage<ArtifactMetaData> secondCs = client.createArtifact(ArtifactType.JSON, secondArtifactId, null, secondData);\n+            long secondId = ConcurrentUtil.result(secondCs).getGlobalId();\n \n+            retry(() -> {\n+                ArtifactMetaData artifactMetaData = client.getArtifactMetaDataByGlobalId(secondId);\n+                Assertions.assertNotNull(artifactMetaData);\n+            });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b5daec040f6c0ce0677b4451f226679b96eddbe"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3362, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}