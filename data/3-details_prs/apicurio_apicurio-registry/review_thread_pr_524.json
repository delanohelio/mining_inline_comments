{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNDUyMDg3", "number": 524, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzozMTowN1rOD_Ypqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzozMTowN1rOD_Ypqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzkwNzYzOnYy", "diffSide": "RIGHT", "path": "utils/tests/src/main/java/io/apicurio/registry/utils/tests/RegistryServiceExtension.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzozMTowN1rOGaBO0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzozNTo0NlrOGaBXIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzNjMzNg==", "bodyText": "Can you make \"all\" one of the java constants along with \"create\" and \"cached\"?", "url": "https://github.com/Apicurio/apicurio-registry/pull/524#discussion_r429936336", "createdAt": "2020-05-25T13:31:07Z", "author": {"login": "EricWittmann"}, "path": "utils/tests/src/main/java/io/apicurio/registry/utils/tests/RegistryServiceExtension.java", "diffHunk": "@@ -89,21 +93,34 @@ public boolean supportsTestTemplate(ExtensionContext context) {\n         String registryUrl = TestUtils.getRegistryUrl(rst);\n \n         ExtensionContext.Store store = context.getStore(ExtensionContext.Namespace.GLOBAL);\n-        RegistryServiceWrapper plain = store.getOrComputeIfAbsent(\n-            \"plain_client\",\n-            k -> new RegistryServiceWrapper(k, \"create\", registryUrl),\n-            RegistryServiceWrapper.class\n-        );\n-        RegistryServiceWrapper cached = store.getOrComputeIfAbsent(\n-            \"cached_client\",\n-            k -> new RegistryServiceWrapper(k, \"cached\", registryUrl),\n-            RegistryServiceWrapper.class\n-        );\n-\n-        return Stream.of(\n-            new RegistryServiceTestTemplateInvocationContext(plain),\n-            new RegistryServiceTestTemplateInvocationContext(cached)\n-        );\n+\n+        List<TestTemplateInvocationContext> invocationCtxts = new ArrayList<>();\n+\n+        if (testRegistryClient(REGISTRY_CLIENT_CREATE)) {\n+            RegistryServiceWrapper plain = store.getOrComputeIfAbsent(\n+                    \"plain_client\",\n+                    k -> new RegistryServiceWrapper(k, REGISTRY_CLIENT_CREATE, registryUrl),\n+                    RegistryServiceWrapper.class\n+                );\n+            invocationCtxts.add(new RegistryServiceTestTemplateInvocationContext(plain));\n+        }\n+\n+        if (testRegistryClient(REGISTRY_CLIENT_CACHED)) {\n+            RegistryServiceWrapper cached = store.getOrComputeIfAbsent(\n+                    \"cached_client\",\n+                    k -> new RegistryServiceWrapper(k, REGISTRY_CLIENT_CACHED, registryUrl),\n+                    RegistryServiceWrapper.class\n+                );\n+            invocationCtxts.add(new RegistryServiceTestTemplateInvocationContext(cached));\n+        }\n+\n+        return invocationCtxts.stream();\n+    }\n+\n+    private boolean testRegistryClient(String clientType) {\n+        String testRegistryClients = TestUtils.getTestRegistryClients();\n+        return testRegistryClients == null || testRegistryClients.equalsIgnoreCase(\"all\")\n+                || testRegistryClients.equalsIgnoreCase(clientType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913490eb484fe6db67d0d7f246dec9556d0a3e8b"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzODQ2Ng==", "bodyText": "done :)", "url": "https://github.com/Apicurio/apicurio-registry/pull/524#discussion_r429938466", "createdAt": "2020-05-25T13:35:46Z", "author": {"login": "famartinrh"}, "path": "utils/tests/src/main/java/io/apicurio/registry/utils/tests/RegistryServiceExtension.java", "diffHunk": "@@ -89,21 +93,34 @@ public boolean supportsTestTemplate(ExtensionContext context) {\n         String registryUrl = TestUtils.getRegistryUrl(rst);\n \n         ExtensionContext.Store store = context.getStore(ExtensionContext.Namespace.GLOBAL);\n-        RegistryServiceWrapper plain = store.getOrComputeIfAbsent(\n-            \"plain_client\",\n-            k -> new RegistryServiceWrapper(k, \"create\", registryUrl),\n-            RegistryServiceWrapper.class\n-        );\n-        RegistryServiceWrapper cached = store.getOrComputeIfAbsent(\n-            \"cached_client\",\n-            k -> new RegistryServiceWrapper(k, \"cached\", registryUrl),\n-            RegistryServiceWrapper.class\n-        );\n-\n-        return Stream.of(\n-            new RegistryServiceTestTemplateInvocationContext(plain),\n-            new RegistryServiceTestTemplateInvocationContext(cached)\n-        );\n+\n+        List<TestTemplateInvocationContext> invocationCtxts = new ArrayList<>();\n+\n+        if (testRegistryClient(REGISTRY_CLIENT_CREATE)) {\n+            RegistryServiceWrapper plain = store.getOrComputeIfAbsent(\n+                    \"plain_client\",\n+                    k -> new RegistryServiceWrapper(k, REGISTRY_CLIENT_CREATE, registryUrl),\n+                    RegistryServiceWrapper.class\n+                );\n+            invocationCtxts.add(new RegistryServiceTestTemplateInvocationContext(plain));\n+        }\n+\n+        if (testRegistryClient(REGISTRY_CLIENT_CACHED)) {\n+            RegistryServiceWrapper cached = store.getOrComputeIfAbsent(\n+                    \"cached_client\",\n+                    k -> new RegistryServiceWrapper(k, REGISTRY_CLIENT_CACHED, registryUrl),\n+                    RegistryServiceWrapper.class\n+                );\n+            invocationCtxts.add(new RegistryServiceTestTemplateInvocationContext(cached));\n+        }\n+\n+        return invocationCtxts.stream();\n+    }\n+\n+    private boolean testRegistryClient(String clientType) {\n+        String testRegistryClients = TestUtils.getTestRegistryClients();\n+        return testRegistryClients == null || testRegistryClients.equalsIgnoreCase(\"all\")\n+                || testRegistryClients.equalsIgnoreCase(clientType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkzNjMzNg=="}, "originalCommit": {"oid": "913490eb484fe6db67d0d7f246dec9556d0a3e8b"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3356, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}