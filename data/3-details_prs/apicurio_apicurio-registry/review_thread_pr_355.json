{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NTc4NjMy", "number": 355, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjo0MjowM1rODt7z0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToxNTowOVrODx_Cuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDkyNDMzOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/content/canon/XsdContentCanonicalizer.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjo0MjowNFrOF_pWHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNToxODoyNVrOGAaCdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4MjAxMg==", "bodyText": "Use java.nio.charset.StandardCharsets.UTF_8 here instead of the string.", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r402282012", "createdAt": "2020-04-02T12:42:04Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/content/canon/XsdContentCanonicalizer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 JBoss Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.content.canon;\n+\n+import java.io.IOException;\n+\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.apache.xml.security.Init;\n+import org.apache.xml.security.c14n.CanonicalizationException;\n+import org.apache.xml.security.c14n.Canonicalizer;\n+import org.apache.xml.security.c14n.InvalidCanonicalizerException;\n+import org.xml.sax.SAXException;\n+\n+import io.apicurio.registry.content.ContentCanonicalizer;\n+import io.apicurio.registry.content.ContentHandle;\n+\n+/**\n+ * @author cfoskin@redhat.com\n+ */\n+public class XsdContentCanonicalizer implements ContentCanonicalizer {\n+\n+    /**\n+     * @see io.apicurio.registry.content.ContentCanonicalizer#canonicalize(io.apicurio.registry.content.ContentHandle)\n+     */\n+    @Override\n+    public ContentHandle canonicalize(ContentHandle content) {\n+        Init.init(); // this library needs to be initialized using the static init()\n+        try {\n+            Canonicalizer canon = Canonicalizer.getInstance(Canonicalizer.ALGO_ID_C14N_OMIT_COMMENTS);\n+            byte[] canonXmlBytes = canon.canonicalize(content.bytes());\n+            String canonicalized = new String(canonXmlBytes, \"UTF-8\"); // for UTF-8 encoding", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3f45c16e2d4ed280ae16f8ab172d75f1d1de4a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4Njg2MQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r402286861", "createdAt": "2020-04-02T12:50:01Z", "author": {"login": "cfoskin"}, "path": "app/src/main/java/io/apicurio/registry/content/canon/XsdContentCanonicalizer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 JBoss Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.content.canon;\n+\n+import java.io.IOException;\n+\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.apache.xml.security.Init;\n+import org.apache.xml.security.c14n.CanonicalizationException;\n+import org.apache.xml.security.c14n.Canonicalizer;\n+import org.apache.xml.security.c14n.InvalidCanonicalizerException;\n+import org.xml.sax.SAXException;\n+\n+import io.apicurio.registry.content.ContentCanonicalizer;\n+import io.apicurio.registry.content.ContentHandle;\n+\n+/**\n+ * @author cfoskin@redhat.com\n+ */\n+public class XsdContentCanonicalizer implements ContentCanonicalizer {\n+\n+    /**\n+     * @see io.apicurio.registry.content.ContentCanonicalizer#canonicalize(io.apicurio.registry.content.ContentHandle)\n+     */\n+    @Override\n+    public ContentHandle canonicalize(ContentHandle content) {\n+        Init.init(); // this library needs to be initialized using the static init()\n+        try {\n+            Canonicalizer canon = Canonicalizer.getInstance(Canonicalizer.ALGO_ID_C14N_OMIT_COMMENTS);\n+            byte[] canonXmlBytes = canon.canonicalize(content.bytes());\n+            String canonicalized = new String(canonXmlBytes, \"UTF-8\"); // for UTF-8 encoding", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4MjAxMg=="}, "originalCommit": {"oid": "3d3f45c16e2d4ed280ae16f8ab172d75f1d1de4a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU2ODI2Ng==", "bodyText": "No, use IoUtil ... so we have bytes <--> string all in one single place!", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r402568266", "createdAt": "2020-04-02T19:45:13Z", "author": {"login": "alesj"}, "path": "app/src/main/java/io/apicurio/registry/content/canon/XsdContentCanonicalizer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 JBoss Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.content.canon;\n+\n+import java.io.IOException;\n+\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.apache.xml.security.Init;\n+import org.apache.xml.security.c14n.CanonicalizationException;\n+import org.apache.xml.security.c14n.Canonicalizer;\n+import org.apache.xml.security.c14n.InvalidCanonicalizerException;\n+import org.xml.sax.SAXException;\n+\n+import io.apicurio.registry.content.ContentCanonicalizer;\n+import io.apicurio.registry.content.ContentHandle;\n+\n+/**\n+ * @author cfoskin@redhat.com\n+ */\n+public class XsdContentCanonicalizer implements ContentCanonicalizer {\n+\n+    /**\n+     * @see io.apicurio.registry.content.ContentCanonicalizer#canonicalize(io.apicurio.registry.content.ContentHandle)\n+     */\n+    @Override\n+    public ContentHandle canonicalize(ContentHandle content) {\n+        Init.init(); // this library needs to be initialized using the static init()\n+        try {\n+            Canonicalizer canon = Canonicalizer.getInstance(Canonicalizer.ALGO_ID_C14N_OMIT_COMMENTS);\n+            byte[] canonXmlBytes = canon.canonicalize(content.bytes());\n+            String canonicalized = new String(canonXmlBytes, \"UTF-8\"); // for UTF-8 encoding", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4MjAxMg=="}, "originalCommit": {"oid": "3d3f45c16e2d4ed280ae16f8ab172d75f1d1de4a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3OTc2MA==", "bodyText": "@EricWittmann @alesj I can use String canonicalized = IOUtils.toString(canon.canonicalize(content.bytes()), \"UTF-8\");  but I cant use the StandardCharsets.UTF_8 then? it either takes a byte[], String or InputStream, Charset   wdyt?", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r402779760", "createdAt": "2020-04-03T07:14:28Z", "author": {"login": "cfoskin"}, "path": "app/src/main/java/io/apicurio/registry/content/canon/XsdContentCanonicalizer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 JBoss Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.content.canon;\n+\n+import java.io.IOException;\n+\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.apache.xml.security.Init;\n+import org.apache.xml.security.c14n.CanonicalizationException;\n+import org.apache.xml.security.c14n.Canonicalizer;\n+import org.apache.xml.security.c14n.InvalidCanonicalizerException;\n+import org.xml.sax.SAXException;\n+\n+import io.apicurio.registry.content.ContentCanonicalizer;\n+import io.apicurio.registry.content.ContentHandle;\n+\n+/**\n+ * @author cfoskin@redhat.com\n+ */\n+public class XsdContentCanonicalizer implements ContentCanonicalizer {\n+\n+    /**\n+     * @see io.apicurio.registry.content.ContentCanonicalizer#canonicalize(io.apicurio.registry.content.ContentHandle)\n+     */\n+    @Override\n+    public ContentHandle canonicalize(ContentHandle content) {\n+        Init.init(); // this library needs to be initialized using the static init()\n+        try {\n+            Canonicalizer canon = Canonicalizer.getInstance(Canonicalizer.ALGO_ID_C14N_OMIT_COMMENTS);\n+            byte[] canonXmlBytes = canon.canonicalize(content.bytes());\n+            String canonicalized = new String(canonXmlBytes, \"UTF-8\"); // for UTF-8 encoding", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4MjAxMg=="}, "originalCommit": {"oid": "3d3f45c16e2d4ed280ae16f8ab172d75f1d1de4a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA3ODYxOA==", "bodyText": "I think Ales is suggesting you use IoUtil which is a registry class.  No the one from apache commons.", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r403078618", "createdAt": "2020-04-03T15:16:32Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/content/canon/XsdContentCanonicalizer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 JBoss Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.content.canon;\n+\n+import java.io.IOException;\n+\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.apache.xml.security.Init;\n+import org.apache.xml.security.c14n.CanonicalizationException;\n+import org.apache.xml.security.c14n.Canonicalizer;\n+import org.apache.xml.security.c14n.InvalidCanonicalizerException;\n+import org.xml.sax.SAXException;\n+\n+import io.apicurio.registry.content.ContentCanonicalizer;\n+import io.apicurio.registry.content.ContentHandle;\n+\n+/**\n+ * @author cfoskin@redhat.com\n+ */\n+public class XsdContentCanonicalizer implements ContentCanonicalizer {\n+\n+    /**\n+     * @see io.apicurio.registry.content.ContentCanonicalizer#canonicalize(io.apicurio.registry.content.ContentHandle)\n+     */\n+    @Override\n+    public ContentHandle canonicalize(ContentHandle content) {\n+        Init.init(); // this library needs to be initialized using the static init()\n+        try {\n+            Canonicalizer canon = Canonicalizer.getInstance(Canonicalizer.ALGO_ID_C14N_OMIT_COMMENTS);\n+            byte[] canonXmlBytes = canon.canonicalize(content.bytes());\n+            String canonicalized = new String(canonXmlBytes, \"UTF-8\"); // for UTF-8 encoding", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4MjAxMg=="}, "originalCommit": {"oid": "3d3f45c16e2d4ed280ae16f8ab172d75f1d1de4a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA3ODk1OA==", "bodyText": "https://github.com/Apicurio/apicurio-registry/blob/master/common/src/main/java/io/apicurio/registry/utils/IoUtil.java#L109-L111", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r403078958", "createdAt": "2020-04-03T15:17:04Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/content/canon/XsdContentCanonicalizer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 JBoss Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.content.canon;\n+\n+import java.io.IOException;\n+\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.apache.xml.security.Init;\n+import org.apache.xml.security.c14n.CanonicalizationException;\n+import org.apache.xml.security.c14n.Canonicalizer;\n+import org.apache.xml.security.c14n.InvalidCanonicalizerException;\n+import org.xml.sax.SAXException;\n+\n+import io.apicurio.registry.content.ContentCanonicalizer;\n+import io.apicurio.registry.content.ContentHandle;\n+\n+/**\n+ * @author cfoskin@redhat.com\n+ */\n+public class XsdContentCanonicalizer implements ContentCanonicalizer {\n+\n+    /**\n+     * @see io.apicurio.registry.content.ContentCanonicalizer#canonicalize(io.apicurio.registry.content.ContentHandle)\n+     */\n+    @Override\n+    public ContentHandle canonicalize(ContentHandle content) {\n+        Init.init(); // this library needs to be initialized using the static init()\n+        try {\n+            Canonicalizer canon = Canonicalizer.getInstance(Canonicalizer.ALGO_ID_C14N_OMIT_COMMENTS);\n+            byte[] canonXmlBytes = canon.canonicalize(content.bytes());\n+            String canonicalized = new String(canonXmlBytes, \"UTF-8\"); // for UTF-8 encoding", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4MjAxMg=="}, "originalCommit": {"oid": "3d3f45c16e2d4ed280ae16f8ab172d75f1d1de4a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA3OTc5OA==", "bodyText": "ah.. will update", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r403079798", "createdAt": "2020-04-03T15:18:25Z", "author": {"login": "cfoskin"}, "path": "app/src/main/java/io/apicurio/registry/content/canon/XsdContentCanonicalizer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 JBoss Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.content.canon;\n+\n+import java.io.IOException;\n+\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.apache.xml.security.Init;\n+import org.apache.xml.security.c14n.CanonicalizationException;\n+import org.apache.xml.security.c14n.Canonicalizer;\n+import org.apache.xml.security.c14n.InvalidCanonicalizerException;\n+import org.xml.sax.SAXException;\n+\n+import io.apicurio.registry.content.ContentCanonicalizer;\n+import io.apicurio.registry.content.ContentHandle;\n+\n+/**\n+ * @author cfoskin@redhat.com\n+ */\n+public class XsdContentCanonicalizer implements ContentCanonicalizer {\n+\n+    /**\n+     * @see io.apicurio.registry.content.ContentCanonicalizer#canonicalize(io.apicurio.registry.content.ContentHandle)\n+     */\n+    @Override\n+    public ContentHandle canonicalize(ContentHandle content) {\n+        Init.init(); // this library needs to be initialized using the static init()\n+        try {\n+            Canonicalizer canon = Canonicalizer.getInstance(Canonicalizer.ALGO_ID_C14N_OMIT_COMMENTS);\n+            byte[] canonXmlBytes = canon.canonicalize(content.bytes());\n+            String canonicalized = new String(canonXmlBytes, \"UTF-8\"); // for UTF-8 encoding", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4MjAxMg=="}, "originalCommit": {"oid": "3d3f45c16e2d4ed280ae16f8ab172d75f1d1de4a"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDkyODcxOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/rules/validity/XsdContentValidator.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjo0MzoxMFrOF_pYtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjowMzo0N1rOGBUf5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4MjY3Nw==", "bodyText": "Looks good!", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r402282677", "createdAt": "2020-04-02T12:43:10Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/rules/validity/XsdContentValidator.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 JBoss Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.rules.validity;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.xml.XMLConstants;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.stream.StreamSource;\n+import javax.xml.validation.SchemaFactory;\n+import io.apicurio.registry.content.ContentHandle;\n+\n+/**\n+ * @author cfoskin@redhat.com\n+ */\n+@ApplicationScoped\n+public class XsdContentValidator implements ContentValidator {\n+\n+    /**\n+     * @see io.apicurio.registry.rules.validity.ContentValidator#validate(io.apicurio.registry.rules.validity.ValidityLevel,\n+     *      io.apicurio.registry.content.ContentHandle)\n+     */\n+    @Override\n+    public void validate(ValidityLevel level, ContentHandle artifactContent) throws InvalidContentException {\n+        if (level == ValidityLevel.SYNTAX_ONLY || level == ValidityLevel.FULL) {\n+            try {\n+                // try to parse it\n+                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+                DocumentBuilder builder = factory.newDocumentBuilder();\n+                builder.parse(artifactContent.stream());\n+\n+                if (level == ValidityLevel.FULL) {\n+                    // validate that its a valid schema\n+                    Source source = new StreamSource(artifactContent.stream());\n+                    SchemaFactory schemaFactory = SchemaFactory\n+                            .newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n+                    schemaFactory.newSchema(source);\n+                }\n+            } catch (Exception e) {\n+                throw new InvalidContentException(\"Syntax violation for XSD Schema artifact.\", e);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3f45c16e2d4ed280ae16f8ab172d75f1d1de4a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU2ODk0Mw==", "bodyText": "Shouldn't Source's stream be closed ?", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r402568943", "createdAt": "2020-04-02T19:46:32Z", "author": {"login": "alesj"}, "path": "app/src/main/java/io/apicurio/registry/rules/validity/XsdContentValidator.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 JBoss Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.rules.validity;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.xml.XMLConstants;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.stream.StreamSource;\n+import javax.xml.validation.SchemaFactory;\n+import io.apicurio.registry.content.ContentHandle;\n+\n+/**\n+ * @author cfoskin@redhat.com\n+ */\n+@ApplicationScoped\n+public class XsdContentValidator implements ContentValidator {\n+\n+    /**\n+     * @see io.apicurio.registry.rules.validity.ContentValidator#validate(io.apicurio.registry.rules.validity.ValidityLevel,\n+     *      io.apicurio.registry.content.ContentHandle)\n+     */\n+    @Override\n+    public void validate(ValidityLevel level, ContentHandle artifactContent) throws InvalidContentException {\n+        if (level == ValidityLevel.SYNTAX_ONLY || level == ValidityLevel.FULL) {\n+            try {\n+                // try to parse it\n+                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+                DocumentBuilder builder = factory.newDocumentBuilder();\n+                builder.parse(artifactContent.stream());\n+\n+                if (level == ValidityLevel.FULL) {\n+                    // validate that its a valid schema\n+                    Source source = new StreamSource(artifactContent.stream());\n+                    SchemaFactory schemaFactory = SchemaFactory\n+                            .newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n+                    schemaFactory.newSchema(source);\n+                }\n+            } catch (Exception e) {\n+                throw new InvalidContentException(\"Syntax violation for XSD Schema artifact.\", e);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4MjY3Nw=="}, "originalCommit": {"oid": "3d3f45c16e2d4ed280ae16f8ab172d75f1d1de4a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA4MDcxOQ==", "bodyText": "It's a ByteArrayInputStream coming from the content handle, so actually I think it doesn't need to be.  However, it would probably be best practice to close it.\n@cfoskin Can you make sure to close the input stream you're getting on line 45 and also the one on line 49?", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r403080719", "createdAt": "2020-04-03T15:19:38Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/rules/validity/XsdContentValidator.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 JBoss Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.rules.validity;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.xml.XMLConstants;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.stream.StreamSource;\n+import javax.xml.validation.SchemaFactory;\n+import io.apicurio.registry.content.ContentHandle;\n+\n+/**\n+ * @author cfoskin@redhat.com\n+ */\n+@ApplicationScoped\n+public class XsdContentValidator implements ContentValidator {\n+\n+    /**\n+     * @see io.apicurio.registry.rules.validity.ContentValidator#validate(io.apicurio.registry.rules.validity.ValidityLevel,\n+     *      io.apicurio.registry.content.ContentHandle)\n+     */\n+    @Override\n+    public void validate(ValidityLevel level, ContentHandle artifactContent) throws InvalidContentException {\n+        if (level == ValidityLevel.SYNTAX_ONLY || level == ValidityLevel.FULL) {\n+            try {\n+                // try to parse it\n+                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+                DocumentBuilder builder = factory.newDocumentBuilder();\n+                builder.parse(artifactContent.stream());\n+\n+                if (level == ValidityLevel.FULL) {\n+                    // validate that its a valid schema\n+                    Source source = new StreamSource(artifactContent.stream());\n+                    SchemaFactory schemaFactory = SchemaFactory\n+                            .newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n+                    schemaFactory.newSchema(source);\n+                }\n+            } catch (Exception e) {\n+                throw new InvalidContentException(\"Syntax violation for XSD Schema artifact.\", e);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4MjY3Nw=="}, "originalCommit": {"oid": "3d3f45c16e2d4ed280ae16f8ab172d75f1d1de4a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0MzkwNA==", "bodyText": "Well, you don't know what kind of stream you might get -- it depends on the actual ContentHandle impl.\nAs per contract -- which we probably need to add :-) -- you should close it.\ne.g. see that our extension of BufferedInputStream, where in close() we copy buffered bytes.", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r403443904", "createdAt": "2020-04-04T08:40:50Z", "author": {"login": "alesj"}, "path": "app/src/main/java/io/apicurio/registry/rules/validity/XsdContentValidator.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 JBoss Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.rules.validity;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.xml.XMLConstants;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.stream.StreamSource;\n+import javax.xml.validation.SchemaFactory;\n+import io.apicurio.registry.content.ContentHandle;\n+\n+/**\n+ * @author cfoskin@redhat.com\n+ */\n+@ApplicationScoped\n+public class XsdContentValidator implements ContentValidator {\n+\n+    /**\n+     * @see io.apicurio.registry.rules.validity.ContentValidator#validate(io.apicurio.registry.rules.validity.ValidityLevel,\n+     *      io.apicurio.registry.content.ContentHandle)\n+     */\n+    @Override\n+    public void validate(ValidityLevel level, ContentHandle artifactContent) throws InvalidContentException {\n+        if (level == ValidityLevel.SYNTAX_ONLY || level == ValidityLevel.FULL) {\n+            try {\n+                // try to parse it\n+                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+                DocumentBuilder builder = factory.newDocumentBuilder();\n+                builder.parse(artifactContent.stream());\n+\n+                if (level == ValidityLevel.FULL) {\n+                    // validate that its a valid schema\n+                    Source source = new StreamSource(artifactContent.stream());\n+                    SchemaFactory schemaFactory = SchemaFactory\n+                            .newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n+                    schemaFactory.newSchema(source);\n+                }\n+            } catch (Exception e) {\n+                throw new InvalidContentException(\"Syntax violation for XSD Schema artifact.\", e);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4MjY3Nw=="}, "originalCommit": {"oid": "3d3f45c16e2d4ed280ae16f8ab172d75f1d1de4a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAzNzYwNw==", "bodyText": "Yep - I showed Colum the try-with-resources java syntax, so this is in progress.", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r404037607", "createdAt": "2020-04-06T12:03:47Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/rules/validity/XsdContentValidator.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 JBoss Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.rules.validity;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.xml.XMLConstants;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.stream.StreamSource;\n+import javax.xml.validation.SchemaFactory;\n+import io.apicurio.registry.content.ContentHandle;\n+\n+/**\n+ * @author cfoskin@redhat.com\n+ */\n+@ApplicationScoped\n+public class XsdContentValidator implements ContentValidator {\n+\n+    /**\n+     * @see io.apicurio.registry.rules.validity.ContentValidator#validate(io.apicurio.registry.rules.validity.ValidityLevel,\n+     *      io.apicurio.registry.content.ContentHandle)\n+     */\n+    @Override\n+    public void validate(ValidityLevel level, ContentHandle artifactContent) throws InvalidContentException {\n+        if (level == ValidityLevel.SYNTAX_ONLY || level == ValidityLevel.FULL) {\n+            try {\n+                // try to parse it\n+                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+                DocumentBuilder builder = factory.newDocumentBuilder();\n+                builder.parse(artifactContent.stream());\n+\n+                if (level == ValidityLevel.FULL) {\n+                    // validate that its a valid schema\n+                    Source source = new StreamSource(artifactContent.stream());\n+                    SchemaFactory schemaFactory = SchemaFactory\n+                            .newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n+                    schemaFactory.newSchema(source);\n+                }\n+            } catch (Exception e) {\n+                throw new InvalidContentException(\"Syntax violation for XSD Schema artifact.\", e);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4MjY3Nw=="}, "originalCommit": {"oid": "3d3f45c16e2d4ed280ae16f8ab172d75f1d1de4a"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDkzMjMyOnYy", "diffSide": "RIGHT", "path": "app/src/test/java/io/apicurio/registry/content/ContentCanonicalizerFactoryTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjo0NDowNlrOF_pa6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjoyODo1MlrOF_zaTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4MzI0Mg==", "bodyText": "Can you externalize these two files to test resources?", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r402283242", "createdAt": "2020-04-02T12:44:06Z", "author": {"login": "EricWittmann"}, "path": "app/src/test/java/io/apicurio/registry/content/ContentCanonicalizerFactoryTest.java", "diffHunk": "@@ -171,5 +171,44 @@ void testKafkaConnect() {\n         Assertions.assertEquals(expected, actual);\n     }\n \n+    /**\n+    * Test method for {@link io.apicurio.registry.content.ContentCanonicalizerFactory#create(io.apicurio.registry.types.ArtifactType)}.\n+    */\n+    @Test\n+    void testXsd() {\n+       ContentCanonicalizerFactory factory = new ContentCanonicalizerFactory();\n+       ContentCanonicalizer canonicalizer = factory.create(ArtifactType.XSD);\n+       String before = \"<xs:schema xmlns:xs=\\\"http://www.w3.org/2001/XMLSchema\\\">\\n\"\n+               + \"<xs:element             name=\\\"shiporder\\\">\\n\" + \"  <xs:complexType>\\n\"\n+               + \"    <xs:sequence>\\n\"\n+               + \"      <xs:element            name=\\\"orderperson\\\" type=\\\"xs:string\\\"/>\\n\"\n+               + \"      <xs:element       name=\\\"shipto\\\">\\n\" + \"        <xs:complexType>\\n\"\n+               + \"          <xs:sequence>\\n\"\n+               + \"            <xs:element          type=\\\"xs:string\\\"  name=\\\"name\\\" />\\n\"\n+               + \"            <xs:element               type=\\\"xs:string\\\" name=\\\"address\\\"/>\\n\"\n+               + \"            <xs:element      type=\\\"xs:string\\\"  name=\\\"city\\\"/>\\n\"\n+               + \"            <xs:element    type=\\\"xs:string\\\" name=\\\"country\\\"/>\\n\"\n+               + \"          </xs:sequence>\\n\" + \"        </xs:complexType>\\n\" + \"      </xs:element>\\n\"\n+               + \"    </xs:sequence>\\n\"\n+               + \"    <xs:attribute use=\\\"required\\\" type=\\\"xs:string\\\" name=\\\"orderid\\\"/>\\n\"\n+               + \"  </xs:complexType>\\n\" + \"</xs:element>\\n\" + \"</xs:schema>\";\n \n+       String expected = \"<xs:schema xmlns:xs=\\\"http://www.w3.org/2001/XMLSchema\\\">\\n\"\n+               + \"<xs:element name=\\\"shiporder\\\">\\n\" + \"  <xs:complexType>\\n\" + \"    <xs:sequence>\\n\"\n+               + \"      <xs:element name=\\\"orderperson\\\" type=\\\"xs:string\\\"></xs:element>\\n\"\n+               + \"      <xs:element name=\\\"shipto\\\">\\n\" + \"        <xs:complexType>\\n\"\n+               + \"          <xs:sequence>\\n\"\n+               + \"            <xs:element name=\\\"name\\\" type=\\\"xs:string\\\"></xs:element>\\n\"\n+               + \"            <xs:element name=\\\"address\\\" type=\\\"xs:string\\\"></xs:element>\\n\"\n+               + \"            <xs:element name=\\\"city\\\" type=\\\"xs:string\\\"></xs:element>\\n\"\n+               + \"            <xs:element name=\\\"country\\\" type=\\\"xs:string\\\"></xs:element>\\n\"\n+               + \"          </xs:sequence>\\n\" + \"        </xs:complexType>\\n\" + \"      </xs:element>\\n\"\n+               + \"    </xs:sequence>\\n\"\n+               + \"    <xs:attribute name=\\\"orderid\\\" type=\\\"xs:string\\\" use=\\\"required\\\"></xs:attribute>\\n\"\n+               + \"  </xs:complexType>\\n\" + \"</xs:element>\\n\" + \"</xs:schema>\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3f45c16e2d4ed280ae16f8ab172d75f1d1de4a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4NzU1NQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r402287555", "createdAt": "2020-04-02T12:51:10Z", "author": {"login": "cfoskin"}, "path": "app/src/test/java/io/apicurio/registry/content/ContentCanonicalizerFactoryTest.java", "diffHunk": "@@ -171,5 +171,44 @@ void testKafkaConnect() {\n         Assertions.assertEquals(expected, actual);\n     }\n \n+    /**\n+    * Test method for {@link io.apicurio.registry.content.ContentCanonicalizerFactory#create(io.apicurio.registry.types.ArtifactType)}.\n+    */\n+    @Test\n+    void testXsd() {\n+       ContentCanonicalizerFactory factory = new ContentCanonicalizerFactory();\n+       ContentCanonicalizer canonicalizer = factory.create(ArtifactType.XSD);\n+       String before = \"<xs:schema xmlns:xs=\\\"http://www.w3.org/2001/XMLSchema\\\">\\n\"\n+               + \"<xs:element             name=\\\"shiporder\\\">\\n\" + \"  <xs:complexType>\\n\"\n+               + \"    <xs:sequence>\\n\"\n+               + \"      <xs:element            name=\\\"orderperson\\\" type=\\\"xs:string\\\"/>\\n\"\n+               + \"      <xs:element       name=\\\"shipto\\\">\\n\" + \"        <xs:complexType>\\n\"\n+               + \"          <xs:sequence>\\n\"\n+               + \"            <xs:element          type=\\\"xs:string\\\"  name=\\\"name\\\" />\\n\"\n+               + \"            <xs:element               type=\\\"xs:string\\\" name=\\\"address\\\"/>\\n\"\n+               + \"            <xs:element      type=\\\"xs:string\\\"  name=\\\"city\\\"/>\\n\"\n+               + \"            <xs:element    type=\\\"xs:string\\\" name=\\\"country\\\"/>\\n\"\n+               + \"          </xs:sequence>\\n\" + \"        </xs:complexType>\\n\" + \"      </xs:element>\\n\"\n+               + \"    </xs:sequence>\\n\"\n+               + \"    <xs:attribute use=\\\"required\\\" type=\\\"xs:string\\\" name=\\\"orderid\\\"/>\\n\"\n+               + \"  </xs:complexType>\\n\" + \"</xs:element>\\n\" + \"</xs:schema>\";\n \n+       String expected = \"<xs:schema xmlns:xs=\\\"http://www.w3.org/2001/XMLSchema\\\">\\n\"\n+               + \"<xs:element name=\\\"shiporder\\\">\\n\" + \"  <xs:complexType>\\n\" + \"    <xs:sequence>\\n\"\n+               + \"      <xs:element name=\\\"orderperson\\\" type=\\\"xs:string\\\"></xs:element>\\n\"\n+               + \"      <xs:element name=\\\"shipto\\\">\\n\" + \"        <xs:complexType>\\n\"\n+               + \"          <xs:sequence>\\n\"\n+               + \"            <xs:element name=\\\"name\\\" type=\\\"xs:string\\\"></xs:element>\\n\"\n+               + \"            <xs:element name=\\\"address\\\" type=\\\"xs:string\\\"></xs:element>\\n\"\n+               + \"            <xs:element name=\\\"city\\\" type=\\\"xs:string\\\"></xs:element>\\n\"\n+               + \"            <xs:element name=\\\"country\\\" type=\\\"xs:string\\\"></xs:element>\\n\"\n+               + \"          </xs:sequence>\\n\" + \"        </xs:complexType>\\n\" + \"      </xs:element>\\n\"\n+               + \"    </xs:sequence>\\n\"\n+               + \"    <xs:attribute name=\\\"orderid\\\" type=\\\"xs:string\\\" use=\\\"required\\\"></xs:attribute>\\n\"\n+               + \"  </xs:complexType>\\n\" + \"</xs:element>\\n\" + \"</xs:schema>\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4MzI0Mg=="}, "originalCommit": {"oid": "3d3f45c16e2d4ed280ae16f8ab172d75f1d1de4a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMxNDY1MQ==", "bodyText": "Is it ok to extend AbstractRegistryTestBase to utilise the methods there?", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r402314651", "createdAt": "2020-04-02T13:31:55Z", "author": {"login": "cfoskin"}, "path": "app/src/test/java/io/apicurio/registry/content/ContentCanonicalizerFactoryTest.java", "diffHunk": "@@ -171,5 +171,44 @@ void testKafkaConnect() {\n         Assertions.assertEquals(expected, actual);\n     }\n \n+    /**\n+    * Test method for {@link io.apicurio.registry.content.ContentCanonicalizerFactory#create(io.apicurio.registry.types.ArtifactType)}.\n+    */\n+    @Test\n+    void testXsd() {\n+       ContentCanonicalizerFactory factory = new ContentCanonicalizerFactory();\n+       ContentCanonicalizer canonicalizer = factory.create(ArtifactType.XSD);\n+       String before = \"<xs:schema xmlns:xs=\\\"http://www.w3.org/2001/XMLSchema\\\">\\n\"\n+               + \"<xs:element             name=\\\"shiporder\\\">\\n\" + \"  <xs:complexType>\\n\"\n+               + \"    <xs:sequence>\\n\"\n+               + \"      <xs:element            name=\\\"orderperson\\\" type=\\\"xs:string\\\"/>\\n\"\n+               + \"      <xs:element       name=\\\"shipto\\\">\\n\" + \"        <xs:complexType>\\n\"\n+               + \"          <xs:sequence>\\n\"\n+               + \"            <xs:element          type=\\\"xs:string\\\"  name=\\\"name\\\" />\\n\"\n+               + \"            <xs:element               type=\\\"xs:string\\\" name=\\\"address\\\"/>\\n\"\n+               + \"            <xs:element      type=\\\"xs:string\\\"  name=\\\"city\\\"/>\\n\"\n+               + \"            <xs:element    type=\\\"xs:string\\\" name=\\\"country\\\"/>\\n\"\n+               + \"          </xs:sequence>\\n\" + \"        </xs:complexType>\\n\" + \"      </xs:element>\\n\"\n+               + \"    </xs:sequence>\\n\"\n+               + \"    <xs:attribute use=\\\"required\\\" type=\\\"xs:string\\\" name=\\\"orderid\\\"/>\\n\"\n+               + \"  </xs:complexType>\\n\" + \"</xs:element>\\n\" + \"</xs:schema>\";\n \n+       String expected = \"<xs:schema xmlns:xs=\\\"http://www.w3.org/2001/XMLSchema\\\">\\n\"\n+               + \"<xs:element name=\\\"shiporder\\\">\\n\" + \"  <xs:complexType>\\n\" + \"    <xs:sequence>\\n\"\n+               + \"      <xs:element name=\\\"orderperson\\\" type=\\\"xs:string\\\"></xs:element>\\n\"\n+               + \"      <xs:element name=\\\"shipto\\\">\\n\" + \"        <xs:complexType>\\n\"\n+               + \"          <xs:sequence>\\n\"\n+               + \"            <xs:element name=\\\"name\\\" type=\\\"xs:string\\\"></xs:element>\\n\"\n+               + \"            <xs:element name=\\\"address\\\" type=\\\"xs:string\\\"></xs:element>\\n\"\n+               + \"            <xs:element name=\\\"city\\\" type=\\\"xs:string\\\"></xs:element>\\n\"\n+               + \"            <xs:element name=\\\"country\\\" type=\\\"xs:string\\\"></xs:element>\\n\"\n+               + \"          </xs:sequence>\\n\" + \"        </xs:complexType>\\n\" + \"      </xs:element>\\n\"\n+               + \"    </xs:sequence>\\n\"\n+               + \"    <xs:attribute name=\\\"orderid\\\" type=\\\"xs:string\\\" use=\\\"required\\\"></xs:attribute>\\n\"\n+               + \"  </xs:complexType>\\n\" + \"</xs:element>\\n\" + \"</xs:schema>\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4MzI0Mg=="}, "originalCommit": {"oid": "3d3f45c16e2d4ed280ae16f8ab172d75f1d1de4a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0NjkyNQ==", "bodyText": "Yes I think so.", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r402446925", "createdAt": "2020-04-02T16:28:52Z", "author": {"login": "EricWittmann"}, "path": "app/src/test/java/io/apicurio/registry/content/ContentCanonicalizerFactoryTest.java", "diffHunk": "@@ -171,5 +171,44 @@ void testKafkaConnect() {\n         Assertions.assertEquals(expected, actual);\n     }\n \n+    /**\n+    * Test method for {@link io.apicurio.registry.content.ContentCanonicalizerFactory#create(io.apicurio.registry.types.ArtifactType)}.\n+    */\n+    @Test\n+    void testXsd() {\n+       ContentCanonicalizerFactory factory = new ContentCanonicalizerFactory();\n+       ContentCanonicalizer canonicalizer = factory.create(ArtifactType.XSD);\n+       String before = \"<xs:schema xmlns:xs=\\\"http://www.w3.org/2001/XMLSchema\\\">\\n\"\n+               + \"<xs:element             name=\\\"shiporder\\\">\\n\" + \"  <xs:complexType>\\n\"\n+               + \"    <xs:sequence>\\n\"\n+               + \"      <xs:element            name=\\\"orderperson\\\" type=\\\"xs:string\\\"/>\\n\"\n+               + \"      <xs:element       name=\\\"shipto\\\">\\n\" + \"        <xs:complexType>\\n\"\n+               + \"          <xs:sequence>\\n\"\n+               + \"            <xs:element          type=\\\"xs:string\\\"  name=\\\"name\\\" />\\n\"\n+               + \"            <xs:element               type=\\\"xs:string\\\" name=\\\"address\\\"/>\\n\"\n+               + \"            <xs:element      type=\\\"xs:string\\\"  name=\\\"city\\\"/>\\n\"\n+               + \"            <xs:element    type=\\\"xs:string\\\" name=\\\"country\\\"/>\\n\"\n+               + \"          </xs:sequence>\\n\" + \"        </xs:complexType>\\n\" + \"      </xs:element>\\n\"\n+               + \"    </xs:sequence>\\n\"\n+               + \"    <xs:attribute use=\\\"required\\\" type=\\\"xs:string\\\" name=\\\"orderid\\\"/>\\n\"\n+               + \"  </xs:complexType>\\n\" + \"</xs:element>\\n\" + \"</xs:schema>\";\n \n+       String expected = \"<xs:schema xmlns:xs=\\\"http://www.w3.org/2001/XMLSchema\\\">\\n\"\n+               + \"<xs:element name=\\\"shiporder\\\">\\n\" + \"  <xs:complexType>\\n\" + \"    <xs:sequence>\\n\"\n+               + \"      <xs:element name=\\\"orderperson\\\" type=\\\"xs:string\\\"></xs:element>\\n\"\n+               + \"      <xs:element name=\\\"shipto\\\">\\n\" + \"        <xs:complexType>\\n\"\n+               + \"          <xs:sequence>\\n\"\n+               + \"            <xs:element name=\\\"name\\\" type=\\\"xs:string\\\"></xs:element>\\n\"\n+               + \"            <xs:element name=\\\"address\\\" type=\\\"xs:string\\\"></xs:element>\\n\"\n+               + \"            <xs:element name=\\\"city\\\" type=\\\"xs:string\\\"></xs:element>\\n\"\n+               + \"            <xs:element name=\\\"country\\\" type=\\\"xs:string\\\"></xs:element>\\n\"\n+               + \"          </xs:sequence>\\n\" + \"        </xs:complexType>\\n\" + \"      </xs:element>\\n\"\n+               + \"    </xs:sequence>\\n\"\n+               + \"    <xs:attribute name=\\\"orderid\\\" type=\\\"xs:string\\\" use=\\\"required\\\"></xs:attribute>\\n\"\n+               + \"  </xs:complexType>\\n\" + \"</xs:element>\\n\" + \"</xs:schema>\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4MzI0Mg=="}, "originalCommit": {"oid": "3d3f45c16e2d4ed280ae16f8ab172d75f1d1de4a"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDkzODkwOnYy", "diffSide": "RIGHT", "path": "app/src/test/resources/io/apicurio/registry/rules/validity/xml-schema-invalid-semantics.xsd", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjo0NTo1MVrOF_pfIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjo1ODo1MVrOF_p_Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4NDMyMw==", "bodyText": "In what way is this semantically invalid?  I can't tell by just looking. :)", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r402284323", "createdAt": "2020-04-02T12:45:51Z", "author": {"login": "EricWittmann"}, "path": "app/src/test/resources/io/apicurio/registry/rules/validity/xml-schema-invalid-semantics.xsd", "diffHunk": "@@ -0,0 +1,19 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n+<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n+<xs:element name=\"shiporder\">\n+    <xs:sequence>\n+      <xs:element name=\"orderperson\" type=\"xs:string\"/>\n+      <xs:element name=\"shipto\">\n+        <xs:complexType>\n+          <xs:sequence>\n+            <xs:element name=\"name\" type=\"xs:string\"/>\n+            <xs:element name=\"address\" type=\"xs:string\"/>\n+            <xs:element name=\"city\" type=\"xs:string\"/>\n+            <xs:element name=\"country\" type=\"xs:string\"/>\n+          </xs:sequence>\n+        </xs:complexType>\n+      </xs:element>\n+    <xs:attribute name=\"orderid\" type=\"xs:string\" use=\"required\"/>\n+  </xs:complexType>\n+</xs:element>\n+</xs:schema>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3f45c16e2d4ed280ae16f8ab172d75f1d1de4a"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4NjU3MQ==", "bodyText": "trying to remember now! Line 4 has an opening <xs: sequence> but its missing closing one. I think the </xs:complexType> on line 17 has no opening tag also.", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r402286571", "createdAt": "2020-04-02T12:49:34Z", "author": {"login": "cfoskin"}, "path": "app/src/test/resources/io/apicurio/registry/rules/validity/xml-schema-invalid-semantics.xsd", "diffHunk": "@@ -0,0 +1,19 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n+<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n+<xs:element name=\"shiporder\">\n+    <xs:sequence>\n+      <xs:element name=\"orderperson\" type=\"xs:string\"/>\n+      <xs:element name=\"shipto\">\n+        <xs:complexType>\n+          <xs:sequence>\n+            <xs:element name=\"name\" type=\"xs:string\"/>\n+            <xs:element name=\"address\" type=\"xs:string\"/>\n+            <xs:element name=\"city\" type=\"xs:string\"/>\n+            <xs:element name=\"country\" type=\"xs:string\"/>\n+          </xs:sequence>\n+        </xs:complexType>\n+      </xs:element>\n+    <xs:attribute name=\"orderid\" type=\"xs:string\" use=\"required\"/>\n+  </xs:complexType>\n+</xs:element>\n+</xs:schema>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4NDMyMw=="}, "originalCommit": {"oid": "3d3f45c16e2d4ed280ae16f8ab172d75f1d1de4a"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4OTkwMg==", "bodyText": "OK but those would be syntax errors then, not semantic errors.  So this would fail even if the Validity rule were set to SYNTAX_ONLY", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r402289902", "createdAt": "2020-04-02T12:54:50Z", "author": {"login": "EricWittmann"}, "path": "app/src/test/resources/io/apicurio/registry/rules/validity/xml-schema-invalid-semantics.xsd", "diffHunk": "@@ -0,0 +1,19 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n+<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n+<xs:element name=\"shiporder\">\n+    <xs:sequence>\n+      <xs:element name=\"orderperson\" type=\"xs:string\"/>\n+      <xs:element name=\"shipto\">\n+        <xs:complexType>\n+          <xs:sequence>\n+            <xs:element name=\"name\" type=\"xs:string\"/>\n+            <xs:element name=\"address\" type=\"xs:string\"/>\n+            <xs:element name=\"city\" type=\"xs:string\"/>\n+            <xs:element name=\"country\" type=\"xs:string\"/>\n+          </xs:sequence>\n+        </xs:complexType>\n+      </xs:element>\n+    <xs:attribute name=\"orderid\" type=\"xs:string\" use=\"required\"/>\n+  </xs:complexType>\n+</xs:element>\n+</xs:schema>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4NDMyMw=="}, "originalCommit": {"oid": "3d3f45c16e2d4ed280ae16f8ab172d75f1d1de4a"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5MDY5MQ==", "bodyText": "A semantic error in the context of XSD would be something that is valid XML syntax but doesn't conform to the XSD format.  Like including an element <xs:foo>not allowed</xs:foo> - where the XML is fine but not allowed for an XSD file.", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r402290691", "createdAt": "2020-04-02T12:56:05Z", "author": {"login": "EricWittmann"}, "path": "app/src/test/resources/io/apicurio/registry/rules/validity/xml-schema-invalid-semantics.xsd", "diffHunk": "@@ -0,0 +1,19 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n+<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n+<xs:element name=\"shiporder\">\n+    <xs:sequence>\n+      <xs:element name=\"orderperson\" type=\"xs:string\"/>\n+      <xs:element name=\"shipto\">\n+        <xs:complexType>\n+          <xs:sequence>\n+            <xs:element name=\"name\" type=\"xs:string\"/>\n+            <xs:element name=\"address\" type=\"xs:string\"/>\n+            <xs:element name=\"city\" type=\"xs:string\"/>\n+            <xs:element name=\"country\" type=\"xs:string\"/>\n+          </xs:sequence>\n+        </xs:complexType>\n+      </xs:element>\n+    <xs:attribute name=\"orderid\" type=\"xs:string\" use=\"required\"/>\n+  </xs:complexType>\n+</xs:element>\n+</xs:schema>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4NDMyMw=="}, "originalCommit": {"oid": "3d3f45c16e2d4ed280ae16f8ab172d75f1d1de4a"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5MjQ4Nw==", "bodyText": "Yep you're right! Ill need to fix that", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r402292487", "createdAt": "2020-04-02T12:58:51Z", "author": {"login": "cfoskin"}, "path": "app/src/test/resources/io/apicurio/registry/rules/validity/xml-schema-invalid-semantics.xsd", "diffHunk": "@@ -0,0 +1,19 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n+<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n+<xs:element name=\"shiporder\">\n+    <xs:sequence>\n+      <xs:element name=\"orderperson\" type=\"xs:string\"/>\n+      <xs:element name=\"shipto\">\n+        <xs:complexType>\n+          <xs:sequence>\n+            <xs:element name=\"name\" type=\"xs:string\"/>\n+            <xs:element name=\"address\" type=\"xs:string\"/>\n+            <xs:element name=\"city\" type=\"xs:string\"/>\n+            <xs:element name=\"country\" type=\"xs:string\"/>\n+          </xs:sequence>\n+        </xs:complexType>\n+      </xs:element>\n+    <xs:attribute name=\"orderid\" type=\"xs:string\" use=\"required\"/>\n+  </xs:complexType>\n+</xs:element>\n+</xs:schema>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI4NDMyMw=="}, "originalCommit": {"oid": "3d3f45c16e2d4ed280ae16f8ab172d75f1d1de4a"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODQ1Mjk2OnYy", "diffSide": "RIGHT", "path": "app/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzowOTozMVrOGBhotA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzowOTozMVrOGBhotA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI1Mjg1Mg==", "bodyText": "The version should be pulled up into the root pom.xml file.  You'll see the pattern for this in that file.", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r404252852", "createdAt": "2020-04-06T17:09:31Z", "author": {"login": "EricWittmann"}, "path": "app/pom.xml", "diffHunk": "@@ -80,6 +80,12 @@\n \t\t\t<artifactId>xmlsec</artifactId>\n \t\t\t<version>1.3.0</version>\n \t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>wsdl4j</groupId>\n+\t\t\t<artifactId>wsdl4j</artifactId>\n+\t\t\t<version>1.6.3</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f31e956efb89c7acc3e6a7f0236dc069e3438f3e"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODQ1ODUwOnYy", "diffSide": "RIGHT", "path": "app/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzoxMTowN1rOGBhsVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzoyMDoyMlrOGB2JaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI1Mzc4MQ==", "bodyText": "It seems you have re-formatted this file and as a result have replaced all of the spaces with tabs.  This will break the github diff (as you can see).  Please restore the previous format and, if you can, use spaces for indentation instead of tabs for any new changes to the file.", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r404253781", "createdAt": "2020-04-06T17:11:07Z", "author": {"login": "EricWittmann"}, "path": "app/pom.xml", "diffHunk": "@@ -1,276 +1,291 @@\n <?xml version=\"1.0\"?>\n <project", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a83f4808c21d1ae1e03b14dc0c8b2a09f4f21e"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4ODkwNQ==", "bodyText": "yep.. I thought I changed that setting to 4 spaces and didn't notice the diff. Should be ok now.", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r404588905", "createdAt": "2020-04-07T07:20:22Z", "author": {"login": "cfoskin"}, "path": "app/pom.xml", "diffHunk": "@@ -1,276 +1,291 @@\n <?xml version=\"1.0\"?>\n <project", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI1Mzc4MQ=="}, "originalCommit": {"oid": "52a83f4808c21d1ae1e03b14dc0c8b2a09f4f21e"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODQ1OTYxOnYy", "diffSide": "RIGHT", "path": "app/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzoxMToyN1rOGBhtKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzoxMToyN1rOGBhtKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI1Mzk5Mg==", "bodyText": "Version should be pulled up into the root pom.xml file.", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r404253992", "createdAt": "2020-04-06T17:11:27Z", "author": {"login": "EricWittmann"}, "path": "app/pom.xml", "diffHunk": "@@ -1,276 +1,291 @@\n <?xml version=\"1.0\"?>\n <project\n-    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\n-    xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n-    <modelVersion>4.0.0</modelVersion>\n-    <parent>\n-        <groupId>io.apicurio</groupId>\n-        <artifactId>apicurio-registry</artifactId>\n-        <version>1.1.3-SNAPSHOT</version>\n-        <relativePath>../pom.xml</relativePath>\n-    </parent>\n+\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\n+\txmlns=\"http://maven.apache.org/POM/4.0.0\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+\t<modelVersion>4.0.0</modelVersion>\n+\t<parent>\n+\t\t<groupId>io.apicurio</groupId>\n+\t\t<artifactId>apicurio-registry</artifactId>\n+\t\t<version>1.1.3-SNAPSHOT</version>\n+\t\t<relativePath>../pom.xml</relativePath>\n+\t</parent>\n \n-    <artifactId>apicurio-registry-app</artifactId>\n-    <packaging>jar</packaging>\n-    <name>apicurio-registry-app</name>\n+\t<artifactId>apicurio-registry-app</artifactId>\n+\t<packaging>jar</packaging>\n+\t<name>apicurio-registry-app</name>\n \n-    <dependencies>\n-        <!-- Project -->\n-        <dependency>\n-            <groupId>io.apicurio</groupId>\n-            <artifactId>apicurio-registry-common</artifactId>\n-        </dependency>\n+\t<dependencies>\n+\t\t<!-- Project -->\n+\t\t<dependency>\n+\t\t\t<groupId>io.apicurio</groupId>\n+\t\t\t<artifactId>apicurio-registry-common</artifactId>\n+\t\t</dependency>\n \n-        <dependency>\n-            <groupId>io.apicurio</groupId>\n-            <artifactId>apicurio-registry-search-client</artifactId>\n-        </dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>io.apicurio</groupId>\n+\t\t\t<artifactId>apicurio-registry-search-client</artifactId>\n+\t\t</dependency>\n \n-        <!-- Quarkus Dependencies -->\n-        <dependency>\n-            <groupId>io.quarkus</groupId>\n-            <artifactId>quarkus-undertow</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>io.quarkus</groupId>\n-            <artifactId>quarkus-jackson</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>io.quarkus</groupId>\n-            <artifactId>quarkus-resteasy-jackson</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>io.quarkus</groupId>\n-            <artifactId>quarkus-smallrye-health</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>io.quarkus</groupId>\n-            <artifactId>quarkus-smallrye-metrics</artifactId>\n-        </dependency>\n+\t\t<!-- Quarkus Dependencies -->\n+\t\t<dependency>\n+\t\t\t<groupId>io.quarkus</groupId>\n+\t\t\t<artifactId>quarkus-undertow</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>io.quarkus</groupId>\n+\t\t\t<artifactId>quarkus-jackson</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>io.quarkus</groupId>\n+\t\t\t<artifactId>quarkus-resteasy-jackson</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>io.quarkus</groupId>\n+\t\t\t<artifactId>quarkus-smallrye-health</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>io.quarkus</groupId>\n+\t\t\t<artifactId>quarkus-smallrye-metrics</artifactId>\n+\t\t</dependency>\n \n-        <!-- Third Party Libraries -->\n-        <dependency>\n-            <groupId>io.apicurio</groupId>\n-            <artifactId>apicurio-data-models</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.avro</groupId>\n-            <artifactId>avro</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>com.networknt</groupId>\n-            <artifactId>json-schema-validator</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>com.squareup.wire</groupId>\n-            <artifactId>wire-schema</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.projectlombok</groupId>\n-            <artifactId>lombok</artifactId>\n-            <scope>compile</scope>\n-        </dependency>\n-        \n-        <!-- Kafka Connect -->\n-        <dependency>\n-            <groupId>org.apache.kafka</groupId>\n-            <artifactId>connect-api</artifactId>\n-        </dependency>\n-        <dependency>\n-            <groupId>org.apache.kafka</groupId>\n-            <artifactId>connect-json</artifactId>\n-        </dependency>\n-        \n-        <!-- GraphQL -->\n-        <dependency>\n-            <groupId>com.graphql-java</groupId>\n-            <artifactId>graphql-java</artifactId>\n-        </dependency>\n+\t\t<!-- Third Party Libraries -->\n+\t\t<dependency>\n+\t\t\t<groupId>io.apicurio</groupId>\n+\t\t\t<artifactId>apicurio-data-models</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.apache.avro</groupId>\n+\t\t\t<artifactId>avro</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>com.networknt</groupId>\n+\t\t\t<artifactId>json-schema-validator</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>com.squareup.wire</groupId>\n+\t\t\t<artifactId>wire-schema</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.projectlombok</groupId>\n+\t\t\t<artifactId>lombok</artifactId>\n+\t\t\t<scope>compile</scope>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>commons-io</groupId>\n+\t\t\t<artifactId>commons-io</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>xml-security</groupId>\n+\t\t\t<artifactId>xmlsec</artifactId>\n+\t\t\t<version>1.3.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a83f4808c21d1ae1e03b14dc0c8b2a09f4f21e"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODQ2Mjg2OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/content/ContentCanonicalizerFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzoxMjoyMFrOGBhvPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzoxMjoyMFrOGBhvPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI1NDUyNw==", "bodyText": "Good.", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r404254527", "createdAt": "2020-04-06T17:12:20Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/content/ContentCanonicalizerFactory.java", "diffHunk": "@@ -37,7 +38,10 @@\n     private ContentCanonicalizer kconnect = new KafkaConnectContentCanonicalizer();\n     private ContentCanonicalizer json = new JsonContentCanonicalizer();\n     private ContentCanonicalizer graphql = new GraphQLContentCanonicalizer();\n-    \n+    private ContentCanonicalizer xsd = new XmlContentCanonicalizer();\n+    private ContentCanonicalizer wsdl = new XmlContentCanonicalizer();\n+    private ContentCanonicalizer xml = new XmlContentCanonicalizer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a83f4808c21d1ae1e03b14dc0c8b2a09f4f21e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODQ2NDY5OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/content/ContentCanonicalizerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzoxMjo1MFrOGBhwaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzoxMjo1MFrOGBhwaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI1NDgyNw==", "bodyText": "Good - just fix the indentation of line 72 - the return xml; is not properly indented.", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r404254827", "createdAt": "2020-04-06T17:12:50Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/content/ContentCanonicalizerFactory.java", "diffHunk": "@@ -60,8 +64,12 @@ public ContentCanonicalizer create(ArtifactType type) {\n                 return noop;\n             case GRAPHQL:\n                 return graphql;\n-            default:\n-                break;\n+            case XSD:\n+                return xsd;\n+            case WSDL:\n+                return wsdl;\n+            case XML:\n+             return xml;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a83f4808c21d1ae1e03b14dc0c8b2a09f4f21e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODQ3MjQzOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/content/canon/XmlContentCanonicalizer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzoxNDozOFrOGBh1FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODowMTozM1rOGB3n-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI1NjAyMQ==", "bodyText": "How often does this need to be initialized?  Check the javadoc for that init() method to find out.  Is it something that needs to be called every time you get an instance of a Canonicalizer?  I hope not but do not know offhand.\nIt's possible/likely this only needs to be done once, in which case we could put it in a static initializer.", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r404256021", "createdAt": "2020-04-06T17:14:38Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/content/canon/XmlContentCanonicalizer.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 JBoss Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.content.canon;\n+\n+import java.io.IOException;\n+import javax.xml.parsers.ParserConfigurationException;\n+import org.apache.xml.security.Init;\n+import io.apicurio.registry.utils.IoUtil;\n+import org.apache.xml.security.c14n.CanonicalizationException;\n+import org.apache.xml.security.c14n.Canonicalizer;\n+import org.apache.xml.security.c14n.InvalidCanonicalizerException;\n+import org.xml.sax.SAXException;\n+import io.apicurio.registry.content.ContentCanonicalizer;\n+import io.apicurio.registry.content.ContentHandle;\n+\n+/**\n+ * @author cfoskin@redhat.com\n+ */\n+\n+public class XmlContentCanonicalizer implements ContentCanonicalizer {\n+\n+    /**\n+     * @see io.apicurio.registry.content.ContentCanonicalizer#canonicalize(io.apicurio.registry.content.ContentHandle)\n+     */\n+    @Override\n+    public ContentHandle canonicalize(ContentHandle content) {\n+        Init.init(); // this library needs to be initialized using the static init()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a83f4808c21d1ae1e03b14dc0c8b2a09f4f21e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYxMzExMg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r404613112", "createdAt": "2020-04-07T08:01:33Z", "author": {"login": "cfoskin"}, "path": "app/src/main/java/io/apicurio/registry/content/canon/XmlContentCanonicalizer.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 JBoss Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.content.canon;\n+\n+import java.io.IOException;\n+import javax.xml.parsers.ParserConfigurationException;\n+import org.apache.xml.security.Init;\n+import io.apicurio.registry.utils.IoUtil;\n+import org.apache.xml.security.c14n.CanonicalizationException;\n+import org.apache.xml.security.c14n.Canonicalizer;\n+import org.apache.xml.security.c14n.InvalidCanonicalizerException;\n+import org.xml.sax.SAXException;\n+import io.apicurio.registry.content.ContentCanonicalizer;\n+import io.apicurio.registry.content.ContentHandle;\n+\n+/**\n+ * @author cfoskin@redhat.com\n+ */\n+\n+public class XmlContentCanonicalizer implements ContentCanonicalizer {\n+\n+    /**\n+     * @see io.apicurio.registry.content.ContentCanonicalizer#canonicalize(io.apicurio.registry.content.ContentHandle)\n+     */\n+    @Override\n+    public ContentHandle canonicalize(ContentHandle content) {\n+        Init.init(); // this library needs to be initialized using the static init()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI1NjAyMQ=="}, "originalCommit": {"oid": "52a83f4808c21d1ae1e03b14dc0c8b2a09f4f21e"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODQ3NjYzOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/content/canon/XmlContentCanonicalizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzoxNTo0MFrOGBh3xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzoxNTo0MFrOGBh3xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI1NjcxMQ==", "bodyText": "Check the javadoc for Canonicalizer and see if it is threadsafe.  If it is, then we can create just one of these and re-use it each time this method is called.", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r404256711", "createdAt": "2020-04-06T17:15:40Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/content/canon/XmlContentCanonicalizer.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 JBoss Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.content.canon;\n+\n+import java.io.IOException;\n+import javax.xml.parsers.ParserConfigurationException;\n+import org.apache.xml.security.Init;\n+import io.apicurio.registry.utils.IoUtil;\n+import org.apache.xml.security.c14n.CanonicalizationException;\n+import org.apache.xml.security.c14n.Canonicalizer;\n+import org.apache.xml.security.c14n.InvalidCanonicalizerException;\n+import org.xml.sax.SAXException;\n+import io.apicurio.registry.content.ContentCanonicalizer;\n+import io.apicurio.registry.content.ContentHandle;\n+\n+/**\n+ * @author cfoskin@redhat.com\n+ */\n+\n+public class XmlContentCanonicalizer implements ContentCanonicalizer {\n+\n+    /**\n+     * @see io.apicurio.registry.content.ContentCanonicalizer#canonicalize(io.apicurio.registry.content.ContentHandle)\n+     */\n+    @Override\n+    public ContentHandle canonicalize(ContentHandle content) {\n+        Init.init(); // this library needs to be initialized using the static init()\n+        try {\n+            Canonicalizer canon = Canonicalizer.getInstance(Canonicalizer.ALGO_ID_C14N_OMIT_COMMENTS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a83f4808c21d1ae1e03b14dc0c8b2a09f4f21e"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODQ3NzU5OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/rules/compatibility/ArtifactTypeAdapterFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzoxNTo1OFrOGBh4bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzoxNTo1OFrOGBh4bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI1Njg3Ng==", "bodyText": "Correct.", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r404256876", "createdAt": "2020-04-06T17:15:58Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/rules/compatibility/ArtifactTypeAdapterFactory.java", "diffHunk": "@@ -39,6 +39,10 @@\n         ADAPTERS.put(ArtifactType.OPENAPI, NoopArtifactTypeAdapter.INSTANCE);\n         ADAPTERS.put(ArtifactType.ASYNCAPI, NoopArtifactTypeAdapter.INSTANCE);\n         ADAPTERS.put(ArtifactType.GRAPHQL, NoopArtifactTypeAdapter.INSTANCE);\n+        ADAPTERS.put(ArtifactType.XSD, NoopArtifactTypeAdapter.INSTANCE);\n+        ADAPTERS.put(ArtifactType.WSDL, NoopArtifactTypeAdapter.INSTANCE);\n+        ADAPTERS.put(ArtifactType.XML, NoopArtifactTypeAdapter.INSTANCE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a83f4808c21d1ae1e03b14dc0c8b2a09f4f21e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODQ3ODQxOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/rules/validity/ContentValidatorFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzoxNjoxNVrOGBh4-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzoxNjoxNVrOGBh4-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI1NzAxOA==", "bodyText": "+1", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r404257018", "createdAt": "2020-04-06T17:16:15Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/rules/validity/ContentValidatorFactory.java", "diffHunk": "@@ -63,8 +70,12 @@ public ContentValidator createValidator(ArtifactType artifactType) {\n                 return protofdValidator;\n             case GRAPHQL:\n                 return graphqlValidator;\n-            default:\n-                break;\n+            case XSD:\n+                return xsdValidator;\n+            case WSDL:\n+                return wsdlValidator;\n+            case XML:\n+                return xmlValidator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a83f4808c21d1ae1e03b14dc0c8b2a09f4f21e"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODQ4NjI2OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/rules/validity/WsdlContentValidator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzoxODoyM1rOGBh-Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzoxODoyM1rOGBh-Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI1ODMyMw==", "bodyText": "The logic looks great here.  The only thing to check is which of these objects you're using are threadsafe and can be re-used.  You'll need to check the javadoc for each:\n\nDocumentBuilderFactory\nDocumentBuilder\nWSDLFactory\nWSDLReader\n\nI'm guessing the factories can be cached and re-used, but you'll need to confirm by reading the javadocs for all those classes.", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r404258323", "createdAt": "2020-04-06T17:18:23Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/rules/validity/WsdlContentValidator.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 JBoss Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.rules.validity;\n+\n+import java.io.InputStream;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.wsdl.factory.WSDLFactory;\n+import javax.wsdl.xml.WSDLReader;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import org.w3c.dom.Document;\n+import io.apicurio.registry.content.ContentHandle;\n+\n+/**\n+ * @author cfoskin@redhat.com\n+ */\n+@ApplicationScoped\n+public class WsdlContentValidator implements ContentValidator {\n+\n+    /**\n+     * @see io.apicurio.registry.rules.validity.ContentValidator#validate(io.apicurio.registry.rules.validity.ValidityLevel,\n+     *      io.apicurio.registry.content.ContentHandle)\n+     */\n+    @Override\n+    public void validate(ValidityLevel level, ContentHandle artifactContent) throws InvalidContentException {\n+        if (level == ValidityLevel.SYNTAX_ONLY || level == ValidityLevel.FULL) {\n+            try (InputStream stream = artifactContent.stream()) {\n+                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+                factory.setNamespaceAware(true);\n+                DocumentBuilder builder = factory.newDocumentBuilder();\n+                // just try to parse it\n+                Document wsdlDoc = builder.parse(stream);\n+                \n+                if (level == ValidityLevel.FULL) {\n+                    // validate that its a valid schema\n+                    WSDLFactory wsdlFactory = WSDLFactory.newInstance();\n+                    WSDLReader wsdlReader = wsdlFactory.newWSDLReader();\n+                    wsdlReader.readWSDL(null, wsdlDoc);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a83f4808c21d1ae1e03b14dc0c8b2a09f4f21e"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODQ5MDE2OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/rules/validity/XmlContentValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzoxOToyMlrOGBiAeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzoxOToyMlrOGBiAeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI1ODkzNw==", "bodyText": "Looks good!  Same note as before - check which of these things (if any) can be cached and re-used.", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r404258937", "createdAt": "2020-04-06T17:19:22Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/rules/validity/XmlContentValidator.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 JBoss Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.rules.validity;\n+\n+import java.io.InputStream;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import io.apicurio.registry.content.ContentHandle;\n+\n+/**\n+ * @author cfoskin@redhat.com This class can be used to validate plain XML and only does syntax validation\n+ */\n+@ApplicationScoped\n+public class XmlContentValidator implements ContentValidator {\n+\n+    /**\n+     * @see io.apicurio.registry.rules.validity.ContentValidator#validate(io.apicurio.registry.rules.validity.ValidityLevel,\n+     *      io.apicurio.registry.content.ContentHandle)\n+     */\n+    @Override\n+    public void validate(ValidityLevel level, ContentHandle artifactContent) throws InvalidContentException {\n+        if (level == ValidityLevel.SYNTAX_ONLY || level == ValidityLevel.FULL) {\n+            try (InputStream stream = artifactContent.stream()) {\n+                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+                DocumentBuilder builder = factory.newDocumentBuilder();\n+                // just try to parse it\n+                builder.parse(stream);\n+            } catch (Exception e) {\n+                throw new InvalidContentException(\"Syntax violation for XML Schema artifact.\", e);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a83f4808c21d1ae1e03b14dc0c8b2a09f4f21e"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODQ5MzYyOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/rules/validity/XsdContentValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzoyMDoxOFrOGBiCog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzoyMDoxOFrOGBiCog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI1OTQ5MA==", "bodyText": "This logic looks perfect now.  But again, we need to figure out which of these resources can be cached/re-used.  See previous comments. :)", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r404259490", "createdAt": "2020-04-06T17:20:18Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/rules/validity/XsdContentValidator.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 JBoss Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.rules.validity;\n+\n+import java.io.InputStream;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.xml.XMLConstants;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.stream.StreamSource;\n+import javax.xml.validation.SchemaFactory;\n+import io.apicurio.registry.content.ContentHandle;\n+\n+/**\n+ * @author cfoskin@redhat.com\n+ */\n+@ApplicationScoped\n+public class XsdContentValidator implements ContentValidator {\n+\n+    /**\n+     * @see io.apicurio.registry.rules.validity.ContentValidator#validate(io.apicurio.registry.rules.validity.ValidityLevel,\n+     *      io.apicurio.registry.content.ContentHandle)\n+     */\n+    @Override\n+    public void validate(ValidityLevel level, ContentHandle artifactContent) throws InvalidContentException {\n+        if (level == ValidityLevel.SYNTAX_ONLY || level == ValidityLevel.FULL) {\n+            try (InputStream stream = artifactContent.stream()) {\n+                // try to parse it\n+                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+                DocumentBuilder builder = factory.newDocumentBuilder();\n+                builder.parse(stream);\n+\n+                if (level == ValidityLevel.FULL) {\n+                    try (InputStream semanticStream = artifactContent.stream()) {\n+                        // validate that its a valid schema\n+                        Source source = new StreamSource(semanticStream);\n+                        SchemaFactory schemaFactory = SchemaFactory\n+                                .newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n+                        schemaFactory.newSchema(source);\n+                    }\n+                }\n+            } catch (Exception e) {\n+                throw new InvalidContentException(\"Syntax violation for XSD Schema artifact.\", e);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a83f4808c21d1ae1e03b14dc0c8b2a09f4f21e"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODQ5ODAyOnYy", "diffSide": "RIGHT", "path": "app/src/test/java/io/apicurio/registry/content/ContentCanonicalizerFactoryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzoyMTozMlrOGBiFhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzoyMTozMlrOGBiFhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2MDIzMQ==", "bodyText": "Logic is good but please rename the test files to:\n\nwsdl-before.wsdl\nwsdl-expected.wsdl\n\nThey are not wsdl-schemas, just wsdl. :)", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r404260231", "createdAt": "2020-04-06T17:21:32Z", "author": {"login": "EricWittmann"}, "path": "app/src/test/java/io/apicurio/registry/content/ContentCanonicalizerFactoryTest.java", "diffHunk": "@@ -171,5 +172,48 @@ void testKafkaConnect() {\n         Assertions.assertEquals(expected, actual);\n     }\n \n+    /**\n+    * Test method for {@link io.apicurio.registry.content.ContentCanonicalizerFactory#create(io.apicurio.registry.types.ArtifactType)}.\n+    */\n+    @Test\n+    void testXsd() {\n+       ContentCanonicalizerFactory factory = new ContentCanonicalizerFactory();\n+       ContentCanonicalizer canonicalizer = factory.create(ArtifactType.XSD);\n+\n+       ContentHandle content = resourceToContentHandle(\"xml-schema-before.xsd\");\n+       String expected = resourceToString(\"xml-schema-expected.xsd\");\n+       \n+       String actual = canonicalizer.canonicalize(content).content();\n+       Assertions.assertEquals(expected, actual);\n+    }\n+    \n+    /**\n+     * Test method for {@link io.apicurio.registry.content.ContentCanonicalizerFactory#create(io.apicurio.registry.types.ArtifactType)}.\n+     */\n+     @Test\n+     void testWsdl() {\n+        ContentCanonicalizerFactory factory = new ContentCanonicalizerFactory();\n+        ContentCanonicalizer canonicalizer = factory.create(ArtifactType.WSDL);\n+\n+        ContentHandle content = resourceToContentHandle(\"wsdl-schema-before.wsdl\");\n+        String expected = resourceToString(\"wsdl-schema-expected.wsdl\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a83f4808c21d1ae1e03b14dc0c8b2a09f4f21e"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODUwMTM3OnYy", "diffSide": "RIGHT", "path": "app/src/test/java/io/apicurio/registry/rules/validity/WsdlContentValidatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzoyMjoyOFrOGBiHzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOToyMzoyMFrOGB6w8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2MDgxMw==", "bodyText": "For each of these wsdl test resources, please drop the \"-schema\" from the filenames.", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r404260813", "createdAt": "2020-04-06T17:22:28Z", "author": {"login": "EricWittmann"}, "path": "app/src/test/java/io/apicurio/registry/rules/validity/WsdlContentValidatorTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 JBoss Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.rules.validity;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import io.apicurio.registry.AbstractRegistryTestBase;\n+import io.apicurio.registry.content.ContentHandle;\n+\n+/**\n+ * @author cfoskin@redhat.com\n+ */\n+public class WsdlContentValidatorTest extends AbstractRegistryTestBase {\n+    @Test\n+    public void testValidSyntax() throws Exception {\n+        ContentHandle content = resourceToContentHandle(\"wsdl-schema-valid.wsdl\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a83f4808c21d1ae1e03b14dc0c8b2a09f4f21e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY2NDU2MA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r404664560", "createdAt": "2020-04-07T09:23:20Z", "author": {"login": "cfoskin"}, "path": "app/src/test/java/io/apicurio/registry/rules/validity/WsdlContentValidatorTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 JBoss Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.rules.validity;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import io.apicurio.registry.AbstractRegistryTestBase;\n+import io.apicurio.registry.content.ContentHandle;\n+\n+/**\n+ * @author cfoskin@redhat.com\n+ */\n+public class WsdlContentValidatorTest extends AbstractRegistryTestBase {\n+    @Test\n+    public void testValidSyntax() throws Exception {\n+        ContentHandle content = resourceToContentHandle(\"wsdl-schema-valid.wsdl\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2MDgxMw=="}, "originalCommit": {"oid": "52a83f4808c21d1ae1e03b14dc0c8b2a09f4f21e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODUwODUyOnYy", "diffSide": "RIGHT", "path": "app/src/test/java/io/apicurio/registry/rules/validity/WsdlContentValidatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzoyNDoxOVrOGBiMXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTo0MDoxM1rOGB7apQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2MTk4Mg==", "bodyText": "I think we should perhaps have a separate file for this where the syntax is valid but the semantics are invalid.  Your test uses the same valid WSDL file for both the syntax and the semantic validity check.  That's fine, but we should also have a test where the syntax is valid (and therefore passes here) but the semantics are invalid.  In fact you could just re-use the wsdl-schema-invalid-semantics.wsdl test file I think.", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r404261982", "createdAt": "2020-04-06T17:24:19Z", "author": {"login": "EricWittmann"}, "path": "app/src/test/java/io/apicurio/registry/rules/validity/WsdlContentValidatorTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 JBoss Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.rules.validity;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import io.apicurio.registry.AbstractRegistryTestBase;\n+import io.apicurio.registry.content.ContentHandle;\n+\n+/**\n+ * @author cfoskin@redhat.com\n+ */\n+public class WsdlContentValidatorTest extends AbstractRegistryTestBase {\n+    @Test\n+    public void testValidSyntax() throws Exception {\n+        ContentHandle content = resourceToContentHandle(\"wsdl-schema-valid.wsdl\");\n+        WsdlContentValidator validator = new WsdlContentValidator();\n+        validator.validate(ValidityLevel.SYNTAX_ONLY, content);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a83f4808c21d1ae1e03b14dc0c8b2a09f4f21e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY3NTIzNw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r404675237", "createdAt": "2020-04-07T09:40:13Z", "author": {"login": "cfoskin"}, "path": "app/src/test/java/io/apicurio/registry/rules/validity/WsdlContentValidatorTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 JBoss Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.rules.validity;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import io.apicurio.registry.AbstractRegistryTestBase;\n+import io.apicurio.registry.content.ContentHandle;\n+\n+/**\n+ * @author cfoskin@redhat.com\n+ */\n+public class WsdlContentValidatorTest extends AbstractRegistryTestBase {\n+    @Test\n+    public void testValidSyntax() throws Exception {\n+        ContentHandle content = resourceToContentHandle(\"wsdl-schema-valid.wsdl\");\n+        WsdlContentValidator validator = new WsdlContentValidator();\n+        validator.validate(ValidityLevel.SYNTAX_ONLY, content);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2MTk4Mg=="}, "originalCommit": {"oid": "52a83f4808c21d1ae1e03b14dc0c8b2a09f4f21e"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODUxNTc1OnYy", "diffSide": "RIGHT", "path": "app/src/test/java/io/apicurio/registry/rules/validity/XsdContentValidatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzoyNjoyMVrOGBiRMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTozOToxMlrOGB7YMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2MzIxOQ==", "bodyText": "Same note here as in the WSDL content validator test.  You can add another test within this method to also run the SYNTAX_ONLY validity against the xml-schema-invalid-semantics.xsd test file and it should be valid.", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r404263219", "createdAt": "2020-04-06T17:26:21Z", "author": {"login": "EricWittmann"}, "path": "app/src/test/java/io/apicurio/registry/rules/validity/XsdContentValidatorTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 JBoss Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.rules.validity;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import io.apicurio.registry.AbstractRegistryTestBase;\n+import io.apicurio.registry.content.ContentHandle;\n+\n+/**\n+ * @author cfoskin@redhat.com\n+ */\n+public class XsdContentValidatorTest extends AbstractRegistryTestBase {\n+    @Test\n+    public void testValidSyntax() throws Exception {\n+        ContentHandle content = resourceToContentHandle(\"xml-schema-valid.xsd\");\n+        XsdContentValidator validator = new XsdContentValidator();\n+        validator.validate(ValidityLevel.SYNTAX_ONLY, content);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a83f4808c21d1ae1e03b14dc0c8b2a09f4f21e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY3NDYxMQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r404674611", "createdAt": "2020-04-07T09:39:12Z", "author": {"login": "cfoskin"}, "path": "app/src/test/java/io/apicurio/registry/rules/validity/XsdContentValidatorTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 JBoss Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.rules.validity;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import io.apicurio.registry.AbstractRegistryTestBase;\n+import io.apicurio.registry.content.ContentHandle;\n+\n+/**\n+ * @author cfoskin@redhat.com\n+ */\n+public class XsdContentValidatorTest extends AbstractRegistryTestBase {\n+    @Test\n+    public void testValidSyntax() throws Exception {\n+        ContentHandle content = resourceToContentHandle(\"xml-schema-valid.xsd\");\n+        XsdContentValidator validator = new XsdContentValidator();\n+        validator.validate(ValidityLevel.SYNTAX_ONLY, content);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2MzIxOQ=="}, "originalCommit": {"oid": "52a83f4808c21d1ae1e03b14dc0c8b2a09f4f21e"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODUyODc0OnYy", "diffSide": "RIGHT", "path": "app/src/test/resources/io/apicurio/registry/content/xml-schema-expected.xsd", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzoyOTozN1rOGBiZkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMTo1NDoyNFrOGB_-QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2NTM2Mw==", "bodyText": "What additional options are there for the XML Canonicalizer?  Looking at this file I am noticing the strange/inconsistent indentation for some of the elements.  For example lines 8 and 13 don't line up, and in general the tabbing seems to be preserved from the source.  I'm wondering if there is a more aggressive option we can enable for XML canonicalization that normalizes the indentation of the elements, removing e.g. extra whitespace.", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r404265363", "createdAt": "2020-04-06T17:29:37Z", "author": {"login": "EricWittmann"}, "path": "app/src/test/resources/io/apicurio/registry/content/xml-schema-expected.xsd", "diffHunk": "@@ -0,0 +1,20 @@\n+<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n+<xs:element name=\"shiporder\">\n+  <xs:complexType>\n+  <xs:sequence>\n+\t<xs:element name=\"orderperson\" type=\"xs:string\"></xs:element>\n+\t <xs:element name=\"shipto\">\n+\t   <xs:complexType>\n+\t\t<xs:sequence>\n+\t\t   <xs:element name=\"name\" type=\"xs:string\"></xs:element>\n+\t\t   <xs:element name=\"address\" type=\"xs:string\"></xs:element>\n+\t\t   <xs:element name=\"city\" type=\"xs:string\"></xs:element>\n+\t\t   <xs:element name=\"country\" type=\"xs:string\"></xs:element>\n+\t     </xs:sequence>\n+\t    </xs:complexType>\n+\t   </xs:element>\n+\t </xs:sequence>\n+\t <xs:attribute name=\"orderid\" type=\"xs:string\" use=\"required\"></xs:attribute>\n+  </xs:complexType>\n+</xs:element>\n+</xs:schema>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a83f4808c21d1ae1e03b14dc0c8b2a09f4f21e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDcwNTkyNQ==", "bodyText": "@EricWittmann I could be wrong but it doesn't look like there are any options to do that..  I've been looking into it and I think the spec says to normalise the whitespace within tags etc but not outside this..  Whitespace outside of the document element and within start and end tags is normalized. All whitespace in character content is retained (excluding characters removed during line feed normalization)  I think that means the indentation should be preserved. WDYT?", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r404705925", "createdAt": "2020-04-07T10:31:56Z", "author": {"login": "cfoskin"}, "path": "app/src/test/resources/io/apicurio/registry/content/xml-schema-expected.xsd", "diffHunk": "@@ -0,0 +1,20 @@\n+<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n+<xs:element name=\"shiporder\">\n+  <xs:complexType>\n+  <xs:sequence>\n+\t<xs:element name=\"orderperson\" type=\"xs:string\"></xs:element>\n+\t <xs:element name=\"shipto\">\n+\t   <xs:complexType>\n+\t\t<xs:sequence>\n+\t\t   <xs:element name=\"name\" type=\"xs:string\"></xs:element>\n+\t\t   <xs:element name=\"address\" type=\"xs:string\"></xs:element>\n+\t\t   <xs:element name=\"city\" type=\"xs:string\"></xs:element>\n+\t\t   <xs:element name=\"country\" type=\"xs:string\"></xs:element>\n+\t     </xs:sequence>\n+\t    </xs:complexType>\n+\t   </xs:element>\n+\t </xs:sequence>\n+\t <xs:attribute name=\"orderid\" type=\"xs:string\" use=\"required\"></xs:attribute>\n+  </xs:complexType>\n+</xs:element>\n+</xs:schema>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2NTM2Mw=="}, "originalCommit": {"oid": "52a83f4808c21d1ae1e03b14dc0c8b2a09f4f21e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc0NzkyOQ==", "bodyText": "Yeah if that's the language in the spec then it's doing what the spec says.  Do you have a link to that language?", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r404747929", "createdAt": "2020-04-07T11:50:34Z", "author": {"login": "EricWittmann"}, "path": "app/src/test/resources/io/apicurio/registry/content/xml-schema-expected.xsd", "diffHunk": "@@ -0,0 +1,20 @@\n+<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n+<xs:element name=\"shiporder\">\n+  <xs:complexType>\n+  <xs:sequence>\n+\t<xs:element name=\"orderperson\" type=\"xs:string\"></xs:element>\n+\t <xs:element name=\"shipto\">\n+\t   <xs:complexType>\n+\t\t<xs:sequence>\n+\t\t   <xs:element name=\"name\" type=\"xs:string\"></xs:element>\n+\t\t   <xs:element name=\"address\" type=\"xs:string\"></xs:element>\n+\t\t   <xs:element name=\"city\" type=\"xs:string\"></xs:element>\n+\t\t   <xs:element name=\"country\" type=\"xs:string\"></xs:element>\n+\t     </xs:sequence>\n+\t    </xs:complexType>\n+\t   </xs:element>\n+\t </xs:sequence>\n+\t <xs:attribute name=\"orderid\" type=\"xs:string\" use=\"required\"></xs:attribute>\n+  </xs:complexType>\n+</xs:element>\n+</xs:schema>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2NTM2Mw=="}, "originalCommit": {"oid": "52a83f4808c21d1ae1e03b14dc0c8b2a09f4f21e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc0OTg4OQ==", "bodyText": "Yep - https://www.w3.org/TR/2001/REC-xml-c14n-20010315#Terminology 1.1", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r404749889", "createdAt": "2020-04-07T11:54:24Z", "author": {"login": "cfoskin"}, "path": "app/src/test/resources/io/apicurio/registry/content/xml-schema-expected.xsd", "diffHunk": "@@ -0,0 +1,20 @@\n+<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n+<xs:element name=\"shiporder\">\n+  <xs:complexType>\n+  <xs:sequence>\n+\t<xs:element name=\"orderperson\" type=\"xs:string\"></xs:element>\n+\t <xs:element name=\"shipto\">\n+\t   <xs:complexType>\n+\t\t<xs:sequence>\n+\t\t   <xs:element name=\"name\" type=\"xs:string\"></xs:element>\n+\t\t   <xs:element name=\"address\" type=\"xs:string\"></xs:element>\n+\t\t   <xs:element name=\"city\" type=\"xs:string\"></xs:element>\n+\t\t   <xs:element name=\"country\" type=\"xs:string\"></xs:element>\n+\t     </xs:sequence>\n+\t    </xs:complexType>\n+\t   </xs:element>\n+\t </xs:sequence>\n+\t <xs:attribute name=\"orderid\" type=\"xs:string\" use=\"required\"></xs:attribute>\n+  </xs:complexType>\n+</xs:element>\n+</xs:schema>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2NTM2Mw=="}, "originalCommit": {"oid": "52a83f4808c21d1ae1e03b14dc0c8b2a09f4f21e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjYwMjg3OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTozNzo1NFrOGCJpnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjo1OTo0MVrOGCNQTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkwODQ0Nw==", "bodyText": "I need to see whats causing this.. it all looks formatted fine in eclipse locally", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r404908447", "createdAt": "2020-04-07T15:37:54Z", "author": {"login": "cfoskin"}, "path": "pom.xml", "diffHunk": "@@ -137,7 +137,9 @@\n \t\t<!-- Dependency versions -->\n \t\t<lombok.version>1.18.12</lombok.version>\n \t\t<h2.version>1.4.199</h2.version>\n-\n+        <xmlsec.version>2.1.5</xmlsec.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cff6f2f114cfc2336e3c71bf656d5f586c4bef1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2NzUwMA==", "bodyText": "The file probably has a history of a mix of spaces and tabs.  So no matter how you format it this is going to happen in GitHub.  You probably need to replace it with latest and then redo your local changes without formatting in Eclipse.\nI'll think about reformatting all the pom.xml files in a separate PR later.", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r404967500", "createdAt": "2020-04-07T16:59:41Z", "author": {"login": "EricWittmann"}, "path": "pom.xml", "diffHunk": "@@ -137,7 +137,9 @@\n \t\t<!-- Dependency versions -->\n \t\t<lombok.version>1.18.12</lombok.version>\n \t\t<h2.version>1.4.199</h2.version>\n-\n+        <xmlsec.version>2.1.5</xmlsec.version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkwODQ0Nw=="}, "originalCommit": {"oid": "5cff6f2f114cfc2336e3c71bf656d5f586c4bef1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjk1NjA4OnYy", "diffSide": "RIGHT", "path": "app/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjo1NzozMlrOGCNKdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTowODo0M1rOGCSJLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2NjAwNQ==", "bodyText": "What did you need in commons-io?", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r404966005", "createdAt": "2020-04-07T16:57:32Z", "author": {"login": "EricWittmann"}, "path": "app/pom.xml", "diffHunk": "@@ -70,7 +71,19 @@\n             <artifactId>lombok</artifactId>\n             <scope>compile</scope>\n         </dependency>\n-        \n+        <dependency>\n+            <groupId>commons-io</groupId>\n+            <artifactId>commons-io</artifactId>\n+        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bc36b3ecd7014aa92fa3c34ff0ed642d075e548"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA0NzU5Nw==", "bodyText": "Ah that was before I knew about the registry IoUtil. I will remove now", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r405047597", "createdAt": "2020-04-07T19:08:43Z", "author": {"login": "cfoskin"}, "path": "app/pom.xml", "diffHunk": "@@ -70,7 +71,19 @@\n             <artifactId>lombok</artifactId>\n             <scope>compile</scope>\n         </dependency>\n-        \n+        <dependency>\n+            <groupId>commons-io</groupId>\n+            <artifactId>commons-io</artifactId>\n+        </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2NjAwNQ=="}, "originalCommit": {"oid": "9bc36b3ecd7014aa92fa3c34ff0ed642d075e548"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzY1MjExOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/rules/validity/WsdlContentValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzo1NToyM1rOGC6ejA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzo1NToyM1rOGC6ejA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwODQyOA==", "bodyText": "Looks good!", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r405708428", "createdAt": "2020-04-08T17:55:23Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/rules/validity/WsdlContentValidator.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 JBoss Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.apicurio.registry.rules.validity;\n+\n+import java.io.InputStream;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.wsdl.WSDLException;\n+import javax.wsdl.factory.WSDLFactory;\n+import javax.wsdl.xml.WSDLReader;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.w3c.dom.Document;\n+import io.apicurio.registry.content.ContentHandle;\n+\n+/**\n+ * @author cfoskin@redhat.com\n+ */\n+@ApplicationScoped\n+public class WsdlContentValidator implements ContentValidator {\n+\n+    private static ThreadLocal<DocumentBuilder> threadLocaldocBuilder = new ThreadLocal<DocumentBuilder>() {\n+        @Override\n+        protected DocumentBuilder initialValue() {\n+            DocumentBuilder builder = null;\n+            try {\n+                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+                factory.setNamespaceAware(true);\n+                builder = factory.newDocumentBuilder();\n+            } catch (ParserConfigurationException e) {\n+                throw new RuntimeException(e);\n+            }\n+            return builder;\n+        }\n+\n+        public DocumentBuilder get() {\n+            return super.get();\n+        }\n+    };\n+\n+    private static ThreadLocal<WSDLReader> threadLocalWsdlReader = new ThreadLocal<WSDLReader>() {\n+        @Override\n+        protected WSDLReader initialValue() {\n+            WSDLReader wsdlReader = null;\n+            try {\n+                WSDLFactory wsdlFactory = WSDLFactory.newInstance();\n+                wsdlReader = wsdlFactory.newWSDLReader();\n+            } catch (WSDLException e) {\n+                throw new RuntimeException(e);\n+            }\n+            return wsdlReader;\n+\n+        }\n+\n+        public WSDLReader get() {\n+            return super.get();\n+        }\n+    };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "293c29b78669e06b35a7fc2206f0ee5839872faa"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzM5NTA0OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToxNDozNlrOGFw6Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjo0NzoyNFrOGF4Cqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NzQyMg==", "bodyText": "Duplicated <!-- Schema types -->", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r408697422", "createdAt": "2020-04-15T09:14:36Z", "author": {"login": "jsenko"}, "path": "pom.xml", "diffHunk": "@@ -105,26 +105,29 @@\n \t\t<!-- Quarkus Version -->\n \t\t<quarkus.version>1.3.1.Final</quarkus.version>\n \n-\t\t<!-- Jandex -->\n-\t\t<jandex.version>1.0.7</jandex.version>\n+        <!-- Schema types -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd54deed7b1bfaf46844bcca59a45f0846b74770"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgxNDI1MA==", "bodyText": "Thanks @jsenko I must of missed it when resolving merge conflicts", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r408814250", "createdAt": "2020-04-15T12:47:24Z", "author": {"login": "cfoskin"}, "path": "pom.xml", "diffHunk": "@@ -105,26 +105,29 @@\n \t\t<!-- Quarkus Version -->\n \t\t<quarkus.version>1.3.1.Final</quarkus.version>\n \n-\t\t<!-- Jandex -->\n-\t\t<jandex.version>1.0.7</jandex.version>\n+        <!-- Schema types -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NzQyMg=="}, "originalCommit": {"oid": "fd54deed7b1bfaf46844bcca59a45f0846b74770"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzM5NzA3OnYy", "diffSide": "LEFT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToxNTowOVrOGFw7ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToxNTowOVrOGFw7ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NzczOA==", "bodyText": "This is required", "url": "https://github.com/Apicurio/apicurio-registry/pull/355#discussion_r408697738", "createdAt": "2020-04-15T09:15:09Z", "author": {"login": "jsenko"}, "path": "pom.xml", "diffHunk": "@@ -105,26 +105,29 @@\n \t\t<!-- Quarkus Version -->\n \t\t<quarkus.version>1.3.1.Final</quarkus.version>\n \n-\t\t<!-- Jandex -->\n-\t\t<jandex.version>1.0.7</jandex.version>\n+        <!-- Schema types -->\n+        <avro.version>1.9.2</avro.version>\n+        <json-schema-validator.version>1.0.36</json-schema-validator.version>\n+        <wire-schema.version>3.0.2</wire-schema.version>\n+        <protobuf.version>3.11.4</protobuf.version>\n \n \t\t<!-- Schema types -->\n \t\t<avro.version>1.9.2</avro.version>\n \t\t<json-schema-validator.version>1.0.38</json-schema-validator.version>\n \t\t<wire-schema.version>3.1.0</wire-schema.version>\n \t\t<protobuf.version>3.11.4</protobuf.version>\n \n-\t\t<!-- Storage types -->\n-\t\t<infinispan.version>10.1.5.Final</infinispan.version>\n+        <!-- gRPC -->\n+        <grpc.version>1.27.0</grpc.version>\n \n \t\t<!-- gRPC -->\n \t\t<grpc.version>1.28.0</grpc.version>\n \n \t\t<!-- Confluent API / client -->\n \t\t<confluent.version>5.4.1</confluent.version>\n \n-\t\t<!-- Default Quarkus configuration profile -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd54deed7b1bfaf46844bcca59a45f0846b74770"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3378, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}