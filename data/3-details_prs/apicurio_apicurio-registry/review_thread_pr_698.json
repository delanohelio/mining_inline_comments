{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxMTgyMTkx", "number": 698, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDo1NzozMVrOEPkWRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMjozMzoyOVrOEUlkBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzU5NjIyOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/metrics/RestMetricsResponseFilter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDo1NzozMVrOGzWURg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwOToxMjo1MVrOG7YB3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5NjE5OA==", "bodyText": "This is info now but I think we should change it to debug or just removing it. Leaving it here for the moment until more iteration is done to the PR", "url": "https://github.com/Apicurio/apicurio-registry/pull/698#discussion_r456496198", "createdAt": "2020-07-17T14:57:31Z", "author": {"login": "miguelsorianod"}, "path": "app/src/main/java/io/apicurio/registry/metrics/RestMetricsResponseFilter.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package io.apicurio.registry.metrics;\n+\n+import static io.apicurio.registry.metrics.MetricIDs.*;\n+\n+import static org.eclipse.microprofile.metrics.MetricRegistry.Type.APPLICATION;\n+import static org.eclipse.microprofile.metrics.MetricType.COUNTER;\n+\n+import java.io.IOException;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.eclipse.microprofile.metrics.annotation.RegistryType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Provider\n+@RestMetricsResponseFilteredNameBinding\n+public class RestMetricsResponseFilter implements ContainerResponseFilter {\n+\n+\t@Inject\n+\t@RegistryType(type = APPLICATION)\n+\tMetricRegistry metricRegistry;\n+\n+\tprivate static final Logger log = LoggerFactory.getLogger(RestMetricsResponseFilter.class);\n+\n+\tString REST_RESPONSE_STATUS_CODE_COUNT = \"rest_response_status_code\";\n+\tString REST_RESPONSE_STATUS_CODE_COUNT_DESC = \"Total number of REST HTTP Response Codes across all endpoints.\";\n+\n+\t@Override\n+\tpublic void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext)\n+\t\t\tthrows IOException {\n+\t\tlog.info(\"'{} {}'\", requestContext.getMethod(), requestContext.getUriInfo().getRequestUri().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf23b7832e57d9c170086b805bba94705856057f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM2NjY2NA==", "bodyText": "Agreed - should be either debug or trace level.", "url": "https://github.com/Apicurio/apicurio-registry/pull/698#discussion_r464366664", "createdAt": "2020-08-03T11:56:24Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/metrics/RestMetricsResponseFilter.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package io.apicurio.registry.metrics;\n+\n+import static io.apicurio.registry.metrics.MetricIDs.*;\n+\n+import static org.eclipse.microprofile.metrics.MetricRegistry.Type.APPLICATION;\n+import static org.eclipse.microprofile.metrics.MetricType.COUNTER;\n+\n+import java.io.IOException;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.eclipse.microprofile.metrics.annotation.RegistryType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Provider\n+@RestMetricsResponseFilteredNameBinding\n+public class RestMetricsResponseFilter implements ContainerResponseFilter {\n+\n+\t@Inject\n+\t@RegistryType(type = APPLICATION)\n+\tMetricRegistry metricRegistry;\n+\n+\tprivate static final Logger log = LoggerFactory.getLogger(RestMetricsResponseFilter.class);\n+\n+\tString REST_RESPONSE_STATUS_CODE_COUNT = \"rest_response_status_code\";\n+\tString REST_RESPONSE_STATUS_CODE_COUNT_DESC = \"Total number of REST HTTP Response Codes across all endpoints.\";\n+\n+\t@Override\n+\tpublic void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext)\n+\t\t\tthrows IOException {\n+\t\tlog.info(\"'{} {}'\", requestContext.getMethod(), requestContext.getUriInfo().getRequestUri().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5NjE5OA=="}, "originalCommit": {"oid": "bf23b7832e57d9c170086b805bba94705856057f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM4NDAyNg==", "bodyText": "After thinking about this more, let's delete this. :) I think it is redundant since we have logging enabled (via annotation) for all the REST implementation classes.", "url": "https://github.com/Apicurio/apicurio-registry/pull/698#discussion_r464384026", "createdAt": "2020-08-03T12:34:27Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/metrics/RestMetricsResponseFilter.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package io.apicurio.registry.metrics;\n+\n+import static io.apicurio.registry.metrics.MetricIDs.*;\n+\n+import static org.eclipse.microprofile.metrics.MetricRegistry.Type.APPLICATION;\n+import static org.eclipse.microprofile.metrics.MetricType.COUNTER;\n+\n+import java.io.IOException;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.eclipse.microprofile.metrics.annotation.RegistryType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Provider\n+@RestMetricsResponseFilteredNameBinding\n+public class RestMetricsResponseFilter implements ContainerResponseFilter {\n+\n+\t@Inject\n+\t@RegistryType(type = APPLICATION)\n+\tMetricRegistry metricRegistry;\n+\n+\tprivate static final Logger log = LoggerFactory.getLogger(RestMetricsResponseFilter.class);\n+\n+\tString REST_RESPONSE_STATUS_CODE_COUNT = \"rest_response_status_code\";\n+\tString REST_RESPONSE_STATUS_CODE_COUNT_DESC = \"Total number of REST HTTP Response Codes across all endpoints.\";\n+\n+\t@Override\n+\tpublic void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext)\n+\t\t\tthrows IOException {\n+\t\tlog.info(\"'{} {}'\", requestContext.getMethod(), requestContext.getUriInfo().getRequestUri().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5NjE5OA=="}, "originalCommit": {"oid": "bf23b7832e57d9c170086b805bba94705856057f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkxMjg2Mg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/Apicurio/apicurio-registry/pull/698#discussion_r464912862", "createdAt": "2020-08-04T09:12:51Z", "author": {"login": "miguelsorianod"}, "path": "app/src/main/java/io/apicurio/registry/metrics/RestMetricsResponseFilter.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package io.apicurio.registry.metrics;\n+\n+import static io.apicurio.registry.metrics.MetricIDs.*;\n+\n+import static org.eclipse.microprofile.metrics.MetricRegistry.Type.APPLICATION;\n+import static org.eclipse.microprofile.metrics.MetricType.COUNTER;\n+\n+import java.io.IOException;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.eclipse.microprofile.metrics.annotation.RegistryType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Provider\n+@RestMetricsResponseFilteredNameBinding\n+public class RestMetricsResponseFilter implements ContainerResponseFilter {\n+\n+\t@Inject\n+\t@RegistryType(type = APPLICATION)\n+\tMetricRegistry metricRegistry;\n+\n+\tprivate static final Logger log = LoggerFactory.getLogger(RestMetricsResponseFilter.class);\n+\n+\tString REST_RESPONSE_STATUS_CODE_COUNT = \"rest_response_status_code\";\n+\tString REST_RESPONSE_STATUS_CODE_COUNT_DESC = \"Total number of REST HTTP Response Codes across all endpoints.\";\n+\n+\t@Override\n+\tpublic void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext)\n+\t\t\tthrows IOException {\n+\t\tlog.info(\"'{} {}'\", requestContext.getMethod(), requestContext.getUriInfo().getRequestUri().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5NjE5OA=="}, "originalCommit": {"oid": "bf23b7832e57d9c170086b805bba94705856057f"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzY0OTg2OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/metrics/RestMetricsResponseFilter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNToxMToxMVrOGzW0vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwOToxMzo1NlrOG7YECA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUwNDUxMA==", "bodyText": "I would replace the class name by something more meaningful, maybe RegisterStatusCodeResponseFilter.", "url": "https://github.com/Apicurio/apicurio-registry/pull/698#discussion_r456504510", "createdAt": "2020-07-17T15:11:11Z", "author": {"login": "carlesarnal"}, "path": "app/src/main/java/io/apicurio/registry/metrics/RestMetricsResponseFilter.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package io.apicurio.registry.metrics;\n+\n+import static io.apicurio.registry.metrics.MetricIDs.*;\n+\n+import static org.eclipse.microprofile.metrics.MetricRegistry.Type.APPLICATION;\n+import static org.eclipse.microprofile.metrics.MetricType.COUNTER;\n+\n+import java.io.IOException;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.eclipse.microprofile.metrics.annotation.RegistryType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Provider\n+@RestMetricsResponseFilteredNameBinding\n+public class RestMetricsResponseFilter implements ContainerResponseFilter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf23b7832e57d9c170086b805bba94705856057f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM2NzU5OA==", "bodyText": "Unless we think the filter is going to track additional metrics.  But if we're renaming I'd suggest RestStatusCodeMetricsResponseFilter.", "url": "https://github.com/Apicurio/apicurio-registry/pull/698#discussion_r464367598", "createdAt": "2020-08-03T11:58:35Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/metrics/RestMetricsResponseFilter.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package io.apicurio.registry.metrics;\n+\n+import static io.apicurio.registry.metrics.MetricIDs.*;\n+\n+import static org.eclipse.microprofile.metrics.MetricRegistry.Type.APPLICATION;\n+import static org.eclipse.microprofile.metrics.MetricType.COUNTER;\n+\n+import java.io.IOException;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.eclipse.microprofile.metrics.annotation.RegistryType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Provider\n+@RestMetricsResponseFilteredNameBinding\n+public class RestMetricsResponseFilter implements ContainerResponseFilter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUwNDUxMA=="}, "originalCommit": {"oid": "bf23b7832e57d9c170086b805bba94705856057f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkxMzQxNg==", "bodyText": "I think we should keep the current name as there is other information other than status code being gathered", "url": "https://github.com/Apicurio/apicurio-registry/pull/698#discussion_r464913416", "createdAt": "2020-08-04T09:13:56Z", "author": {"login": "miguelsorianod"}, "path": "app/src/main/java/io/apicurio/registry/metrics/RestMetricsResponseFilter.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package io.apicurio.registry.metrics;\n+\n+import static io.apicurio.registry.metrics.MetricIDs.*;\n+\n+import static org.eclipse.microprofile.metrics.MetricRegistry.Type.APPLICATION;\n+import static org.eclipse.microprofile.metrics.MetricType.COUNTER;\n+\n+import java.io.IOException;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.eclipse.microprofile.metrics.annotation.RegistryType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Provider\n+@RestMetricsResponseFilteredNameBinding\n+public class RestMetricsResponseFilter implements ContainerResponseFilter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUwNDUxMA=="}, "originalCommit": {"oid": "bf23b7832e57d9c170086b805bba94705856057f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzY1NTkyOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/metrics/RestMetricsResponseFilteredNameBinding.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNToxMjo1NVrOGzW4hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNToxMjo1NVrOGzW4hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUwNTQ3Nw==", "bodyText": "Same here, I would replace this name by something more related to its behaviour.", "url": "https://github.com/Apicurio/apicurio-registry/pull/698#discussion_r456505477", "createdAt": "2020-07-17T15:12:55Z", "author": {"login": "carlesarnal"}, "path": "app/src/main/java/io/apicurio/registry/metrics/RestMetricsResponseFilteredNameBinding.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package io.apicurio.registry.metrics;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import javax.ws.rs.NameBinding;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf23b7832e57d9c170086b805bba94705856057f"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMDIyNDA3OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/io/apicurio/registry/metrics/RestMetricsResponseFilter.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMjozMzoyOVrOG63uVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMzoyNjoxN1rOG-Ocbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM4MzU3Mw==", "bodyText": "Can you please add a javadoc comment at the top to explain what this filter is doing?", "url": "https://github.com/Apicurio/apicurio-registry/pull/698#discussion_r464383573", "createdAt": "2020-08-03T12:33:29Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/metrics/RestMetricsResponseFilter.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 Red Hat\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.apicurio.registry.metrics;\n+\n+import static io.apicurio.registry.metrics.MetricIDs.REST_GROUP_TAG;\n+import static org.eclipse.microprofile.metrics.MetricRegistry.Type.APPLICATION;\n+import static org.eclipse.microprofile.metrics.MetricType.COUNTER;\n+import static org.eclipse.microprofile.metrics.MetricType.TIMER;\n+\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerRequestFilter;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+import javax.ws.rs.container.ResourceInfo;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.eclipse.microprofile.metrics.Timer;\n+import org.eclipse.microprofile.metrics.annotation.RegistryType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.smallrye.metrics.app.Clock;\n+\n+@Provider\n+@RestMetricsResponseFilteredNameBinding\n+public class RestMetricsResponseFilter implements ContainerRequestFilter, ContainerResponseFilter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a6b75bf4120ab8d369eac9e184247fa79498384"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkxNDExMw==", "bodyText": "Ok, going to do it now \ud83d\udc4d", "url": "https://github.com/Apicurio/apicurio-registry/pull/698#discussion_r464914113", "createdAt": "2020-08-04T09:14:58Z", "author": {"login": "miguelsorianod"}, "path": "app/src/main/java/io/apicurio/registry/metrics/RestMetricsResponseFilter.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 Red Hat\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.apicurio.registry.metrics;\n+\n+import static io.apicurio.registry.metrics.MetricIDs.REST_GROUP_TAG;\n+import static org.eclipse.microprofile.metrics.MetricRegistry.Type.APPLICATION;\n+import static org.eclipse.microprofile.metrics.MetricType.COUNTER;\n+import static org.eclipse.microprofile.metrics.MetricType.TIMER;\n+\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerRequestFilter;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+import javax.ws.rs.container.ResourceInfo;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.eclipse.microprofile.metrics.Timer;\n+import org.eclipse.microprofile.metrics.annotation.RegistryType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.smallrye.metrics.app.Clock;\n+\n+@Provider\n+@RestMetricsResponseFilteredNameBinding\n+public class RestMetricsResponseFilter implements ContainerRequestFilter, ContainerResponseFilter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM4MzU3Mw=="}, "originalCommit": {"oid": "1a6b75bf4120ab8d369eac9e184247fa79498384"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk0MDY0OA==", "bodyText": "Documentation added. @EricWittmann is there something pending?", "url": "https://github.com/Apicurio/apicurio-registry/pull/698#discussion_r464940648", "createdAt": "2020-08-04T10:01:19Z", "author": {"login": "miguelsorianod"}, "path": "app/src/main/java/io/apicurio/registry/metrics/RestMetricsResponseFilter.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 Red Hat\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.apicurio.registry.metrics;\n+\n+import static io.apicurio.registry.metrics.MetricIDs.REST_GROUP_TAG;\n+import static org.eclipse.microprofile.metrics.MetricRegistry.Type.APPLICATION;\n+import static org.eclipse.microprofile.metrics.MetricType.COUNTER;\n+import static org.eclipse.microprofile.metrics.MetricType.TIMER;\n+\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerRequestFilter;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+import javax.ws.rs.container.ResourceInfo;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.eclipse.microprofile.metrics.Timer;\n+import org.eclipse.microprofile.metrics.annotation.RegistryType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.smallrye.metrics.app.Clock;\n+\n+@Provider\n+@RestMetricsResponseFilteredNameBinding\n+public class RestMetricsResponseFilter implements ContainerRequestFilter, ContainerResponseFilter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM4MzU3Mw=="}, "originalCommit": {"oid": "1a6b75bf4120ab8d369eac9e184247fa79498384"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkwMTU1MQ==", "bodyText": "Hey @miguelsorianod we've been working on getting the build to work properly in CI and I've been trying to recover from hurricane outages.  I haven't forgotten about this!", "url": "https://github.com/Apicurio/apicurio-registry/pull/698#discussion_r467901551", "createdAt": "2020-08-10T13:26:17Z", "author": {"login": "EricWittmann"}, "path": "app/src/main/java/io/apicurio/registry/metrics/RestMetricsResponseFilter.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 Red Hat\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.apicurio.registry.metrics;\n+\n+import static io.apicurio.registry.metrics.MetricIDs.REST_GROUP_TAG;\n+import static org.eclipse.microprofile.metrics.MetricRegistry.Type.APPLICATION;\n+import static org.eclipse.microprofile.metrics.MetricType.COUNTER;\n+import static org.eclipse.microprofile.metrics.MetricType.TIMER;\n+\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerRequestFilter;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+import javax.ws.rs.container.ResourceInfo;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.eclipse.microprofile.metrics.Timer;\n+import org.eclipse.microprofile.metrics.annotation.RegistryType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.smallrye.metrics.app.Clock;\n+\n+@Provider\n+@RestMetricsResponseFilteredNameBinding\n+public class RestMetricsResponseFilter implements ContainerRequestFilter, ContainerResponseFilter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM4MzU3Mw=="}, "originalCommit": {"oid": "1a6b75bf4120ab8d369eac9e184247fa79498384"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3324, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}