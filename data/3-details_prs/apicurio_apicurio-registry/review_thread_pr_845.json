{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4MDQ0NjM5", "number": 845, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNzowOToxMFrOEkZZMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNzowOToxMFrOEkZZMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjAwMjQwOnYy", "diffSide": "RIGHT", "path": "rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNzowOToxMFrOHTUW-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOToxNToxNVrOHTZBbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAxODU1Mw==", "bodyText": "Maybe these checks could be extracted to separated methods?", "url": "https://github.com/Apicurio/apicurio-registry/pull/845#discussion_r490018553", "createdAt": "2020-09-17T07:09:10Z", "author": {"login": "carlesarnal"}, "path": "rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java", "diffHunk": "@@ -79,31 +112,84 @@\n         initServices(retrofit);\n     }\n \n-    RegistryRestClientImpl(String baseUrl, Map<String, String> headers) {\n-        if (!baseUrl.endsWith(\"/\")) {\n-            baseUrl += \"/\";\n-        }\n+    private static OkHttpClient createHttpClientWithConfig(String baseUrl, Map<String, Object> configs) {\n+        OkHttpClient.Builder okHttpClientBuilder = new OkHttpClient.Builder();\n+        okHttpClientBuilder = addHeaders(okHttpClientBuilder, baseUrl, configs);\n+        okHttpClientBuilder = addSSL(okHttpClientBuilder, configs);\n+        return okHttpClientBuilder.build();\n+    }\n \n-        final OkHttpClient okHttpClient = createWithHeaders(headers);\n+    private static OkHttpClient.Builder addHeaders(OkHttpClient.Builder okHttpClientBuilder, String baseUrl, Map<String, Object> configs) {\n \n-        this.retrofit = new Retrofit.Builder()\n-                .client(okHttpClient)\n-                .addConverterFactory(JacksonConverterFactory.create())\n-                .baseUrl(baseUrl)\n-                .build();\n+        Map<String, String> requestHeaders = configs.entrySet().stream()\n+            .filter(map -> map.getKey().startsWith(REGISTRY_REQUEST_HEADERS_PREFIX))\n+            .collect(Collectors.toMap(map -> map.getKey()\n+                .replace(REGISTRY_REQUEST_HEADERS_PREFIX, \"\"), map -> map.getValue().toString()));\n \n-        this.requestHandler = new RequestHandler();\n+        if(!requestHeaders.containsKey(\"Authorization\")) {\n+            // Check if url includes user/password\n+            // and add auth header if it does\n+            HttpUrl url = HttpUrl.parse(baseUrl);\n+            String user = url.encodedUsername();\n+            String pwd = url.encodedPassword();\n+            if (user != null && !user.isEmpty()) {\n+                String credentials = Credentials.basic(user, pwd);\n+                requestHeaders.put(\"Authorization\", credentials);\n+            }\n+        }\n \n-        initServices(retrofit);\n+        if(!requestHeaders.isEmpty()) {\n+            final Interceptor headersInterceptor = new HeadersInterceptor(requestHeaders);\n+            return okHttpClientBuilder.addInterceptor(headersInterceptor);\n+        } else {\n+            return okHttpClientBuilder;\n+        }\n     }\n \n-    private static OkHttpClient createWithHeaders(Map<String, String> headers) {\n-\n-        final Interceptor headersInterceptor = new HeadersInterceptor(headers);\n-\n-        return new OkHttpClient.Builder()\n-                .addInterceptor(headersInterceptor)\n-                .build();\n+    private static OkHttpClient.Builder addSSL(OkHttpClient.Builder okHttpClientBuilder, Map<String, Object> configs) {\n+\n+        try {\n+            KeyManager[] keyManagers = null;\n+            TrustManager[] trustManagers = null;\n+\n+            if (configs.containsKey(REGISTRY_REQUEST_KEYSTORE_LOCATION)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec5308a5918ceedad6576250c4608a2eb0e0ce48"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA5NDk1OA==", "bodyText": "Good idea - I have refactored in my latest commit \ud83d\udc4d", "url": "https://github.com/Apicurio/apicurio-registry/pull/845#discussion_r490094958", "createdAt": "2020-09-17T09:15:15Z", "author": {"login": "ajborley"}, "path": "rest-client/src/main/java/io/apicurio/registry/client/RegistryRestClientImpl.java", "diffHunk": "@@ -79,31 +112,84 @@\n         initServices(retrofit);\n     }\n \n-    RegistryRestClientImpl(String baseUrl, Map<String, String> headers) {\n-        if (!baseUrl.endsWith(\"/\")) {\n-            baseUrl += \"/\";\n-        }\n+    private static OkHttpClient createHttpClientWithConfig(String baseUrl, Map<String, Object> configs) {\n+        OkHttpClient.Builder okHttpClientBuilder = new OkHttpClient.Builder();\n+        okHttpClientBuilder = addHeaders(okHttpClientBuilder, baseUrl, configs);\n+        okHttpClientBuilder = addSSL(okHttpClientBuilder, configs);\n+        return okHttpClientBuilder.build();\n+    }\n \n-        final OkHttpClient okHttpClient = createWithHeaders(headers);\n+    private static OkHttpClient.Builder addHeaders(OkHttpClient.Builder okHttpClientBuilder, String baseUrl, Map<String, Object> configs) {\n \n-        this.retrofit = new Retrofit.Builder()\n-                .client(okHttpClient)\n-                .addConverterFactory(JacksonConverterFactory.create())\n-                .baseUrl(baseUrl)\n-                .build();\n+        Map<String, String> requestHeaders = configs.entrySet().stream()\n+            .filter(map -> map.getKey().startsWith(REGISTRY_REQUEST_HEADERS_PREFIX))\n+            .collect(Collectors.toMap(map -> map.getKey()\n+                .replace(REGISTRY_REQUEST_HEADERS_PREFIX, \"\"), map -> map.getValue().toString()));\n \n-        this.requestHandler = new RequestHandler();\n+        if(!requestHeaders.containsKey(\"Authorization\")) {\n+            // Check if url includes user/password\n+            // and add auth header if it does\n+            HttpUrl url = HttpUrl.parse(baseUrl);\n+            String user = url.encodedUsername();\n+            String pwd = url.encodedPassword();\n+            if (user != null && !user.isEmpty()) {\n+                String credentials = Credentials.basic(user, pwd);\n+                requestHeaders.put(\"Authorization\", credentials);\n+            }\n+        }\n \n-        initServices(retrofit);\n+        if(!requestHeaders.isEmpty()) {\n+            final Interceptor headersInterceptor = new HeadersInterceptor(requestHeaders);\n+            return okHttpClientBuilder.addInterceptor(headersInterceptor);\n+        } else {\n+            return okHttpClientBuilder;\n+        }\n     }\n \n-    private static OkHttpClient createWithHeaders(Map<String, String> headers) {\n-\n-        final Interceptor headersInterceptor = new HeadersInterceptor(headers);\n-\n-        return new OkHttpClient.Builder()\n-                .addInterceptor(headersInterceptor)\n-                .build();\n+    private static OkHttpClient.Builder addSSL(OkHttpClient.Builder okHttpClientBuilder, Map<String, Object> configs) {\n+\n+        try {\n+            KeyManager[] keyManagers = null;\n+            TrustManager[] trustManagers = null;\n+\n+            if (configs.containsKey(REGISTRY_REQUEST_KEYSTORE_LOCATION)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAxODU1Mw=="}, "originalCommit": {"oid": "ec5308a5918ceedad6576250c4608a2eb0e0ce48"}, "originalPosition": 161}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3538, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}