{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5Njg0OTMz", "number": 1041, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzo1NTo0NVrOE-_Vcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzo1NTo0NVrOE-_Vcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDg0ODUwOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/apicurio/registry/auth/Auth.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzo1NTo0NVrOH8b8cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzo1NTo0NVrOH8b8cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEzNDQ1MQ==", "bodyText": "Remember to remove this before merging.", "url": "https://github.com/Apicurio/apicurio-registry/pull/1041#discussion_r533134451", "createdAt": "2020-12-01T07:55:45Z", "author": {"login": "carlesarnal"}, "path": "common/src/main/java/io/apicurio/registry/auth/Auth.java", "diffHunk": "@@ -16,28 +16,33 @@\n \n package io.apicurio.registry.auth;\n \n-import io.apicurio.registry.auth.config.BasicCredentialsConfig;\n-import io.apicurio.registry.auth.config.ClientCredentialsConfig;\n-import io.apicurio.registry.auth.config.CredentialsConfig;\n+import java.util.Map;\n \n /**\n  * @author carnalca@redhat.com\n  */\n-public class Auth {\n+public interface Auth {\n+    \n+    /**\n+     * Called to apply this auth mechanism to the HTTP request headers.  Typically an implementation\n+     * would add an \"Authorization\" header or something similar.\n+     * @param requestHeaders\n+     */\n+    public void apply(Map<String, String> requestHeaders);\n \n-    private final CredentialsConfig config;\n-\n-    public Auth(CredentialsConfig config) {\n-        this.config = config;\n-    }\n-\n-    public AuthStrategy getAuthStrategy() {\n-\n-        if (config instanceof ClientCredentialsConfig) {\n-            return new KeycloakAuth((ClientCredentialsConfig) config);\n-        } else if (config instanceof BasicCredentialsConfig) {\n-            return new BasicAuth((BasicCredentialsConfig) config);\n-        }\n-        throw new IllegalStateException(\"Invalid credentials configuration class\");\n-    }\n+//    private final CredentialsConfig config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "414142729d4f3e4d0e211f3ca7f12b5447c89d43"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3506, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}