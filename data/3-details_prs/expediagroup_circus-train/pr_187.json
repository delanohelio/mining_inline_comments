{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMzY2OTA4", "number": 187, "title": "Full overwrite replication delete data", "bodyText": "\ud83d\udcdd Description\nPR for deleting data associated with the existing replica table when using FULL_OVERWRITE replication.\nI have added new DataManipulationClients which are clients with the correct access for respective replications - s3->s3, hdfs->s3, hdfs->hdfs.\n\ud83d\udd17 Related Issues\n#185 - this is the PR to implement the new replication mode, currently only drops the existing table.", "createdAt": "2020-06-10T10:39:22Z", "url": "https://github.com/ExpediaGroup/circus-train/pull/187", "merged": true, "mergeCommit": {"oid": "03a8adb4801b8e2ad3c5ec59934d3ad5735a5149"}, "closed": true, "closedAt": "2020-06-26T14:31:30Z", "author": {"login": "JayGreeeen"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceWG3KgH2gAyNDMyMzY2OTA4OjY0MjkzMmNhMGMxMTJkNDdhNTlkYjg4ZmZlOGRhOTZlNmNhMThhYzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcvEECOgFqTQzODMzOTQ1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "642932ca0c112d47a59db88ffe8da96e6ca18ac8", "author": {"user": {"login": "JayGreeeen", "name": "Jay Green-Stevens"}}, "url": "https://github.com/ExpediaGroup/circus-train/commit/642932ca0c112d47a59db88ffe8da96e6ca18ac8", "committedDate": "2020-05-05T15:49:13Z", "message": "Added new replication mode to overwrite tables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "068a9d5254716512e9b991ac851ba6e856a131c0", "author": {"user": {"login": "JayGreeeen", "name": "Jay Green-Stevens"}}, "url": "https://github.com/ExpediaGroup/circus-train/commit/068a9d5254716512e9b991ac851ba6e856a131c0", "committedDate": "2020-05-05T15:53:21Z", "message": "Updating changelog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb4d269b0148cd47c47c1846820f04555da75bc6", "author": {"user": {"login": "JayGreeeen", "name": "Jay Green-Stevens"}}, "url": "https://github.com/ExpediaGroup/circus-train/commit/eb4d269b0148cd47c47c1846820f04555da75bc6", "committedDate": "2020-05-12T14:16:22Z", "message": "Added integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77c6564f7ff0b36066f3796103817d1a9756d258", "author": {"user": {"login": "JayGreeeen", "name": "Jay Green-Stevens"}}, "url": "https://github.com/ExpediaGroup/circus-train/commit/77c6564f7ff0b36066f3796103817d1a9756d258", "committedDate": "2020-05-12T14:42:06Z", "message": "Added more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb7e5a51d2dbb3e59dc78355d99c2c9b62c84240", "author": {"user": {"login": "JayGreeeen", "name": "Jay Green-Stevens"}}, "url": "https://github.com/ExpediaGroup/circus-train/commit/bb7e5a51d2dbb3e59dc78355d99c2c9b62c84240", "committedDate": "2020-05-29T14:12:42Z", "message": "Working on deleting data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e73ade5ef7dead4a98ea3ce055882053b67d2dd7", "author": {"user": {"login": "JayGreeeen", "name": "Jay Green-Stevens"}}, "url": "https://github.com/ExpediaGroup/circus-train/commit/e73ade5ef7dead4a98ea3ce055882053b67d2dd7", "committedDate": "2020-06-01T17:30:34Z", "message": "Got data clean-up working"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9abaee4bebec0e19db4497be7ee1ebdf2fd21f0a", "author": {"user": {"login": "JayGreeeen", "name": "Jay Green-Stevens"}}, "url": "https://github.com/ExpediaGroup/circus-train/commit/9abaee4bebec0e19db4497be7ee1ebdf2fd21f0a", "committedDate": "2020-06-02T14:18:40Z", "message": "Cleaning up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f9ef59fefca4b2348c6e80a25420164751be09d", "author": {"user": {"login": "JayGreeeen", "name": "Jay Green-Stevens"}}, "url": "https://github.com/ExpediaGroup/circus-train/commit/9f9ef59fefca4b2348c6e80a25420164751be09d", "committedDate": "2020-06-03T10:37:32Z", "message": "Commiting changes to switch branch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0293a817b1ab3812678a13d46ecadf77b6cb4216", "author": {"user": {"login": "JayGreeeen", "name": "Jay Green-Stevens"}}, "url": "https://github.com/ExpediaGroup/circus-train/commit/0293a817b1ab3812678a13d46ecadf77b6cb4216", "committedDate": "2020-06-05T15:38:58Z", "message": "Refactoring. Added tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c60280b49df899624863905f4dfdd874b17323f7", "author": {"user": {"login": "JayGreeeen", "name": "Jay Green-Stevens"}}, "url": "https://github.com/ExpediaGroup/circus-train/commit/c60280b49df899624863905f4dfdd874b17323f7", "committedDate": "2020-06-09T17:03:36Z", "message": "Refactoring. Added to integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a40e93634257a716e25d6d41f63f4228a52d50c8", "author": {"user": {"login": "JayGreeeen", "name": "Jay Green-Stevens"}}, "url": "https://github.com/ExpediaGroup/circus-train/commit/a40e93634257a716e25d6d41f63f4228a52d50c8", "committedDate": "2020-06-09T17:11:00Z", "message": "Resetting some changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7376c434f8589e882ef18501073deb23f51b6d62", "author": {"user": {"login": "JayGreeeen", "name": "Jay Green-Stevens"}}, "url": "https://github.com/ExpediaGroup/circus-train/commit/7376c434f8589e882ef18501073deb23f51b6d62", "committedDate": "2020-06-09T17:12:08Z", "message": "Merge branch 'master' into full-overwrite-replication-delete-data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a80cb4dfc5c2d6ed56f7000086693d9ae765bad5", "author": {"user": {"login": "JayGreeeen", "name": "Jay Green-Stevens"}}, "url": "https://github.com/ExpediaGroup/circus-train/commit/a80cb4dfc5c2d6ed56f7000086693d9ae765bad5", "committedDate": "2020-06-10T10:26:30Z", "message": "Fixed tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e4dd13b7255e8fa3c5399bbb83827ddf80c6815", "author": {"user": {"login": "JayGreeeen", "name": "Jay Green-Stevens"}}, "url": "https://github.com/ExpediaGroup/circus-train/commit/3e4dd13b7255e8fa3c5399bbb83827ddf80c6815", "committedDate": "2020-06-10T10:59:06Z", "message": "Fixing comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3OTQ4MjIx", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#pullrequestreview-427948221", "createdAt": "2020-06-10T11:09:02Z", "commit": {"oid": "3e4dd13b7255e8fa3c5399bbb83827ddf80c6815"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMTowOTowM1rOGhv_uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMTowOTowM1rOGhv_uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA0MjU1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Checks that the replica location is an hdfs location. This will delete replica data whether it is been replicated\n          \n          \n            \n               * Checks that the replica location is an hdfs location. This will delete replica data whether it has been replicated", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r438042553", "createdAt": "2020-06-10T11:09:03Z", "author": {"login": "cmathiesen"}, "path": "circus-train-distcp-copier/src/main/java/com/hotels/bdp/circustrain/distcpcopier/HdfsDataManipulationClientFactory.java", "diffHunk": "@@ -43,22 +43,22 @@ public HdfsDataManipulationClientFactory(@Value(\"#{replicaHiveConf}\") Configurat\n     this.conf = conf;\n   }\n \n-  // The HDFS client doesn't need to use the path\n+  // The HDFS client doesn't need to use the path.\n   @Override\n   public DataManipulationClient newInstance(String path) {\n     return new HdfsDataManipulationClient(conf);\n   }\n \n   /**\n-   * Checks that the replica location is are an hdfs location. This will delete replica data whether it is been\n-   * replicated from s3 or hdfs.\n+   * Checks that the replica location is an hdfs location. This will delete replica data whether it is been replicated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4dd13b7255e8fa3c5399bbb83827ddf80c6815"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fff5ea17334a785a6ddf2d294e65016a50b7bd5e", "author": {"user": {"login": "JayGreeeen", "name": "Jay Green-Stevens"}}, "url": "https://github.com/ExpediaGroup/circus-train/commit/fff5ea17334a785a6ddf2d294e65016a50b7bd5e", "committedDate": "2020-06-10T11:21:12Z", "message": "Update circus-train-distcp-copier/src/main/java/com/hotels/bdp/circustrain/distcpcopier/HdfsDataManipulationClientFactory.java\n\nCo-authored-by: cmathiesen <t-cmathiesen@hotels.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3OTU1MDIw", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#pullrequestreview-427955020", "createdAt": "2020-06-10T11:19:56Z", "commit": {"oid": "3e4dd13b7255e8fa3c5399bbb83827ddf80c6815"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMToxOTo1NlrOGhwUIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMTo1NzowOFrOGhxaug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA0Nzc3Ng==", "bodyText": "supportsDeletion -> maybe more generic -> supportsSchemas (like copierFactory) or supportsDataManipulation()??", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r438047776", "createdAt": "2020-06-10T11:19:56Z", "author": {"login": "patduin"}, "path": "circus-train-api/src/main/java/com/hotels/bdp/circustrain/api/data/DataManipulationClientFactory.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.api.data;\n+\n+import java.util.Map;\n+\n+public interface DataManipulationClientFactory {\n+\n+  DataManipulationClient newInstance(String path);\n+\n+  boolean supportsDeletion(String sourceLocation, String targetLocation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4dd13b7255e8fa3c5399bbb83827ddf80c6815"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA0OTk0MA==", "bodyText": "This implies state needs to be kept in the implementation which is not desirable can we have the copierOptions in the newInstance(path, copierOptions) instead?", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r438049940", "createdAt": "2020-06-10T11:24:16Z", "author": {"login": "patduin"}, "path": "circus-train-api/src/main/java/com/hotels/bdp/circustrain/api/data/DataManipulationClientFactory.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.api.data;\n+\n+import java.util.Map;\n+\n+public interface DataManipulationClientFactory {\n+\n+  DataManipulationClient newInstance(String path);\n+\n+  boolean supportsDeletion(String sourceLocation, String targetLocation);\n+\n+  void withCopierOptions(Map<String, Object> copierOptions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4dd13b7255e8fa3c5399bbb83827ddf80c6815"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA1MTAxNg==", "bodyText": "This should give you a DataManipulationClientFactory I think. This is actually a DataManipulationClientFactoryFactory responsible for selecting the correct Factory DataManipulationClientFactory", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r438051016", "createdAt": "2020-06-10T11:26:27Z", "author": {"login": "patduin"}, "path": "circus-train-api/src/main/java/com/hotels/bdp/circustrain/api/data/DataManipulationClientFactoryManager.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.api.data;\n+\n+public interface DataManipulationClientFactoryManager {\n+\n+  public DataManipulationClient getClientForPath(String replicaLocation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4dd13b7255e8fa3c5399bbb83827ddf80c6815"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA1MjMxOA==", "bodyText": "These need to go, these beans should be stateless.", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r438052318", "createdAt": "2020-06-10T11:29:07Z", "author": {"login": "patduin"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/data/DefaultDataManipulationClientFactoryManager.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.core.data;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.stereotype.Component;\n+\n+import com.hotels.bdp.circustrain.api.Modules;\n+import com.hotels.bdp.circustrain.api.data.DataManipulationClient;\n+import com.hotels.bdp.circustrain.api.data.DataManipulationClientFactory;\n+import com.hotels.bdp.circustrain.api.data.DataManipulationClientFactoryManager;\n+\n+@Profile({ Modules.REPLICATION })\n+@Component\n+@Order(Ordered.LOWEST_PRECEDENCE)\n+public class DefaultDataManipulationClientFactoryManager implements DataManipulationClientFactoryManager {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(DefaultDataManipulationClientFactoryManager.class);\n+\n+  private List<DataManipulationClientFactory> clientFactories;\n+  private Map<String, Object> copierOptions;\n+  private String sourceLocation;\n+\n+  @Autowired\n+  public DefaultDataManipulationClientFactoryManager(List<DataManipulationClientFactory> clientFactories) {\n+    this.clientFactories = clientFactories;\n+  }\n+\n+  @PostConstruct\n+  void postConstruct() {\n+    LOG.debug(\"Initialized with {} DataManipulationClientFactories\", clientFactories.size());\n+    for (DataManipulationClientFactory clientFactory : clientFactories) {\n+      LOG.debug(\"ClientFactory class {}\", clientFactory.getClass().getName());\n+    }\n+  }\n+\n+  public DataManipulationClient getClientForPath(String replicaLocation) {\n+    for (DataManipulationClientFactory clientFactory : clientFactories) {\n+      if (clientFactory.supportsDeletion(sourceLocation, replicaLocation)) {\n+        LOG\n+            .debug(\"Found client factory {} for cleanup at location {}.\", clientFactory.getClass().getName(),\n+                replicaLocation);\n+        clientFactory.withCopierOptions(copierOptions);\n+        return clientFactory.newInstance(replicaLocation);\n+      }\n+    }\n+    throw new UnsupportedOperationException(\n+        \"No DataManipulationClient found which can delete the data at location: \" + replicaLocation);\n+  }\n+\n+  public void withCopierOptions(Map<String, Object> copierOptions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4dd13b7255e8fa3c5399bbb83827ddf80c6815"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA1MjQ0NA==", "bodyText": "Interface on left hand side please.", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r438052444", "createdAt": "2020-06-10T11:29:21Z", "author": {"login": "patduin"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/UnpartitionedTableReplication.java", "diffHunk": "@@ -51,8 +52,8 @@\n   private final String replicaTableName;\n   private Metrics metrics = Metrics.NULL_VALUE;\n   private final Map<String, Object> copierOptions;\n-\n   private final CopierListener copierListener;\n+  private final DefaultDataManipulationClientFactoryManager clientFactoryManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4dd13b7255e8fa3c5399bbb83827ddf80c6815"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA1MjcyNQ==", "bodyText": "interface DefaultDataManipulationClientFactoryManager -> DataManipulationClientFactoryManager", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r438052725", "createdAt": "2020-06-10T11:29:51Z", "author": {"login": "patduin"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/ReplicationFactoryImpl.java", "diffHunk": "@@ -43,20 +44,23 @@\n   private final CopierListener copierListener;\n   private final PartitionPredicateFactory partitionPredicateFactory;\n   private final CopierOptions copierOptions;\n+  private final DefaultDataManipulationClientFactoryManager clientFactoryManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4dd13b7255e8fa3c5399bbb83827ddf80c6815"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA1MzE0NA==", "bodyText": "interface DefaultDataManipulationClientFactoryManager -> DataManipulationClientFactoryManager\nand yes I know then you can't use your handy with methods anymore but that's a good thing :)", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r438053144", "createdAt": "2020-06-10T11:30:39Z", "author": {"login": "patduin"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/PartitionedTableReplication.java", "diffHunk": "@@ -55,6 +56,7 @@\n   private Metrics metrics = Metrics.NULL_VALUE;\n   private final Map<String, Object> copierOptions;\n   private final CopierListener copierListener;\n+  private final DefaultDataManipulationClientFactoryManager clientFactoryManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4dd13b7255e8fa3c5399bbb83827ddf80c6815"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA1NDI1Mg==", "bodyText": "I think this code will become easier if you get the Factory here and not the manager.", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r438054252", "createdAt": "2020-06-10T11:33:00Z", "author": {"login": "patduin"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/hive/DropTableService.java", "diffHunk": "@@ -55,13 +99,57 @@ public void removeTableParamsAndDrop(\n       }\n       client.alter_table(databaseName, tableName, table);\n     }\n-    LOG\n-        .info(\"Dropping table '{}.{}'.\", table.getDbName(), table.getTableName());\n-    client.dropTable(table.getDbName(), table.getTableName(), false, true);\n+    LOG.info(\"Dropping table '{}.{}'.\", databaseName, tableName);\n+    client.dropTable(databaseName, tableName, false, true);\n+  }\n+\n+  private void deleteData(\n+      DefaultDataManipulationClientFactoryManager dataManipulationClientFactoryManager,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4dd13b7255e8fa3c5399bbb83827ddf80c6815"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA1NTk1MA==", "bodyText": "use com.hotels.hcommon.hive.metastore.iterator.PartitionIterator please (https://github.com/HotelsDotCom/hcommon-hive-metastore) there might be many partitions pulling them all out might not scale well", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r438055950", "createdAt": "2020-06-10T11:36:40Z", "author": {"login": "patduin"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/hive/DropTableService.java", "diffHunk": "@@ -55,13 +99,57 @@ public void removeTableParamsAndDrop(\n       }\n       client.alter_table(databaseName, tableName, table);\n     }\n-    LOG\n-        .info(\"Dropping table '{}.{}'.\", table.getDbName(), table.getTableName());\n-    client.dropTable(table.getDbName(), table.getTableName(), false, true);\n+    LOG.info(\"Dropping table '{}.{}'.\", databaseName, tableName);\n+    client.dropTable(databaseName, tableName, false, true);\n+  }\n+\n+  private void deleteData(\n+      DefaultDataManipulationClientFactoryManager dataManipulationClientFactoryManager,\n+      String replicaDataLocation) {\n+    try {\n+      LOG.info(\"Dropping table data from location: {}.\", replicaDataLocation);\n+      DataManipulationClient client = dataManipulationClientFactoryManager.getClientForPath(replicaDataLocation);\n+      boolean dataDeleted = client.delete(replicaDataLocation);\n+      LOG.info(\"Data deleted: {}.\", dataDeleted);\n+    } catch (IOException e) {\n+      LOG.info(\"Could not drop replica table data at location:{}.\", replicaDataLocation);\n+    }\n+  }\n+\n+  private void deletePartitionData(\n+      DefaultDataManipulationClientFactoryManager dataManipulationClientFactoryManager,\n+      String replicaTableLocation,\n+      List<String> replicaPartitionLocations) {\n+    try {\n+      LOG.info(\"Dropping partition data from base location: {}.\", replicaTableLocation);\n+      DataManipulationClient client = dataManipulationClientFactoryManager.getClientForPath(replicaTableLocation);\n+      for (String location : replicaPartitionLocations) {\n+        boolean deleted = client.delete(location);\n+        LOG.debug(\"Attempted to delete data from location: {}. Successful deletion = {}.\", location, deleted);\n+      }\n+    } catch (IOException e) {\n+      LOG.info(\"Could not drop replica partition data at location:{}.\", replicaTableLocation);\n+    } catch (UnsupportedOperationException e) {\n+      LOG.info(e.getMessage());\n+    }\n   }\n \n   private boolean isExternal(Map<String, String> tableParameters) {\n     CaseInsensitiveMap caseInsensitiveParams = new CaseInsensitiveMap(tableParameters);\n     return IS_EXTERNAL.equalsIgnoreCase((String) caseInsensitiveParams.get(EXTERNAL_KEY));\n   }\n+\n+  private List<String> getPartitionLocations(CloseableMetaStoreClient client, String databaseName, String tableName) {\n+    List<String> locations = new ArrayList<>();\n+    try {\n+      locations = client", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4dd13b7255e8fa3c5399bbb83827ddf80c6815"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA1NzI1NQ==", "bodyText": "should be the interface and probably needs to be the factory", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r438057255", "createdAt": "2020-06-10T11:39:27Z", "author": {"login": "patduin"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/hive/DropTableService.java", "diffHunk": "@@ -36,16 +42,54 @@\n   /**\n    * Removes all parameters from a table before dropping the table.\n    */\n-  public void removeTableParamsAndDrop(\n+  public void removeTableParamsAndDrop(CloseableMetaStoreClient client, String databaseName, String tableName)\n+    throws TException {\n+    Table table = getTable(client, databaseName, tableName);\n+    if (table != null) {\n+      dropTable(client, table, databaseName, tableName);\n+    }\n+  }\n+\n+  /**\n+   * Drops the table and its associated data. If the table is unpartitioned the table location is used. If the table is\n+   * partitioned then the data will be dropped from each partition location.\n+   */\n+  public void dropTableAndData(\n       CloseableMetaStoreClient client,\n       String databaseName,\n-      String tableName) throws TException {\n-    Table table;\n+      String tableName,\n+      DefaultDataManipulationClientFactoryManager dataManipulationClientFactoryManager)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fff5ea17334a785a6ddf2d294e65016a50b7bd5e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA1ODcwNA==", "bodyText": "remove try catch, it does't add anything. You're swallowing the exception this way, just let it be thrown, calling class is responsible for deciding what to do with it.", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r438058704", "createdAt": "2020-06-10T11:42:25Z", "author": {"login": "patduin"}, "path": "circus-train-distcp-copier/src/main/java/com/hotels/bdp/circustrain/distcpcopier/HdfsDataManipulationClient.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.distcpcopier;\n+\n+import java.io.IOException;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.hotels.bdp.circustrain.api.data.DataManipulationClient;\n+\n+public class HdfsDataManipulationClient implements DataManipulationClient {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(HdfsDataManipulationClient.class);\n+\n+  private Configuration conf;\n+  private FileSystem fs;\n+\n+  public HdfsDataManipulationClient(Configuration conf) {\n+    this.conf = conf;\n+  }\n+\n+  @Override\n+  public boolean delete(String path) throws IOException {\n+    return delete(new Path(path));\n+  }\n+\n+  private boolean delete(Path path) throws IOException {\n+    try {\n+      LOG.info(\"Deleting all data at location: {}\", path);\n+      fs = path.getFileSystem(conf);\n+      return fs.delete(path, true);\n+    } catch (IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fff5ea17334a785a6ddf2d294e65016a50b7bd5e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA2NTU2OA==", "bodyText": "I wonder if we should add config override like: https://github.com/HotelsDotCom/circus-train/blob/c5b428173bafb1339713aee43958dd27904dc0c4/circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/DefaultCopierFactoryManager.java#L64\n@massdosage  what do you think?\nMy concern is that someone overrides a s3s3Copier factory but gets a S3s3DataManipulationClient which then doesn't instantiate the AWS client correctly cause of the differences between a s3MapReduceOptions and S3S3Options.", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r438065568", "createdAt": "2020-06-10T11:56:35Z", "author": {"login": "patduin"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/data/DefaultDataManipulationClientFactoryManager.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.core.data;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.stereotype.Component;\n+\n+import com.hotels.bdp.circustrain.api.Modules;\n+import com.hotels.bdp.circustrain.api.data.DataManipulationClient;\n+import com.hotels.bdp.circustrain.api.data.DataManipulationClientFactory;\n+import com.hotels.bdp.circustrain.api.data.DataManipulationClientFactoryManager;\n+\n+@Profile({ Modules.REPLICATION })\n+@Component\n+@Order(Ordered.LOWEST_PRECEDENCE)\n+public class DefaultDataManipulationClientFactoryManager implements DataManipulationClientFactoryManager {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(DefaultDataManipulationClientFactoryManager.class);\n+\n+  private List<DataManipulationClientFactory> clientFactories;\n+  private Map<String, Object> copierOptions;\n+  private String sourceLocation;\n+\n+  @Autowired\n+  public DefaultDataManipulationClientFactoryManager(List<DataManipulationClientFactory> clientFactories) {\n+    this.clientFactories = clientFactories;\n+  }\n+\n+  @PostConstruct\n+  void postConstruct() {\n+    LOG.debug(\"Initialized with {} DataManipulationClientFactories\", clientFactories.size());\n+    for (DataManipulationClientFactory clientFactory : clientFactories) {\n+      LOG.debug(\"ClientFactory class {}\", clientFactory.getClass().getName());\n+    }\n+  }\n+\n+  public DataManipulationClient getClientForPath(String replicaLocation) {\n+    for (DataManipulationClientFactory clientFactory : clientFactories) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fff5ea17334a785a6ddf2d294e65016a50b7bd5e"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA2NTg1MA==", "bodyText": "See my comment in the interface this should return a Factory not the client.", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r438065850", "createdAt": "2020-06-10T11:57:08Z", "author": {"login": "patduin"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/data/DefaultDataManipulationClientFactoryManager.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.core.data;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.stereotype.Component;\n+\n+import com.hotels.bdp.circustrain.api.Modules;\n+import com.hotels.bdp.circustrain.api.data.DataManipulationClient;\n+import com.hotels.bdp.circustrain.api.data.DataManipulationClientFactory;\n+import com.hotels.bdp.circustrain.api.data.DataManipulationClientFactoryManager;\n+\n+@Profile({ Modules.REPLICATION })\n+@Component\n+@Order(Ordered.LOWEST_PRECEDENCE)\n+public class DefaultDataManipulationClientFactoryManager implements DataManipulationClientFactoryManager {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(DefaultDataManipulationClientFactoryManager.class);\n+\n+  private List<DataManipulationClientFactory> clientFactories;\n+  private Map<String, Object> copierOptions;\n+  private String sourceLocation;\n+\n+  @Autowired\n+  public DefaultDataManipulationClientFactoryManager(List<DataManipulationClientFactory> clientFactories) {\n+    this.clientFactories = clientFactories;\n+  }\n+\n+  @PostConstruct\n+  void postConstruct() {\n+    LOG.debug(\"Initialized with {} DataManipulationClientFactories\", clientFactories.size());\n+    for (DataManipulationClientFactory clientFactory : clientFactories) {\n+      LOG.debug(\"ClientFactory class {}\", clientFactory.getClass().getName());\n+    }\n+  }\n+\n+  public DataManipulationClient getClientForPath(String replicaLocation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fff5ea17334a785a6ddf2d294e65016a50b7bd5e"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "962e03688ea62be60552b71bcff1c304c805e3ab", "author": {"user": {"login": "JayGreeeen", "name": "Jay Green-Stevens"}}, "url": "https://github.com/ExpediaGroup/circus-train/commit/962e03688ea62be60552b71bcff1c304c805e3ab", "committedDate": "2020-06-11T12:04:00Z", "message": "Refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e70eb44f11e92a9dd3fb1479f8b4fde0e56cff3", "author": {"user": {"login": "JayGreeeen", "name": "Jay Green-Stevens"}}, "url": "https://github.com/ExpediaGroup/circus-train/commit/9e70eb44f11e92a9dd3fb1479f8b4fde0e56cff3", "committedDate": "2020-06-11T16:10:00Z", "message": "Merging master. Fixing conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09f7c52eb43beecfb1a28558b3bee1e80992a920", "author": {"user": {"login": "JayGreeeen", "name": "Jay Green-Stevens"}}, "url": "https://github.com/ExpediaGroup/circus-train/commit/09f7c52eb43beecfb1a28558b3bee1e80992a920", "committedDate": "2020-06-12T10:35:48Z", "message": "Refactoring and testing."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b", "author": {"user": {"login": "JayGreeeen", "name": "Jay Green-Stevens"}}, "url": "https://github.com/ExpediaGroup/circus-train/commit/4d72abdb9c029de1eea597d18fe6c450aaca351b", "committedDate": "2020-06-12T11:27:09Z", "message": "Removing print message."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMzM5NDMw", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#pullrequestreview-432339430", "createdAt": "2020-06-17T12:15:50Z", "commit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjoxNTo1MFrOGlC-lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjo0NzoyMlrOGlEFWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ5OTI4Ng==", "bodyText": "Having looked through this I'm not sure whether we need to expose the term \"client\". Could we just call it a Data Manipulator? Feels more generic to me. Then this property would become data-manipulator-factory-class. Obviously impacts on the rest of the doc so I won't comment again on this below. What do others think?", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441499286", "createdAt": "2020-06-17T12:15:50Z", "author": {"login": "massdosage"}, "path": "README.md", "diffHunk": "@@ -328,6 +328,7 @@ If data is being replicated to HDFS then Circus Train will use DistCp to copy th\n             skip-crc: false\n             ssl-configuration-file: /foo/bar/ssl-config\n             copier-factory-class: com.hotels.bdp.circustrain.distcpcopier.DistCpCopier\n+            client-manipulation-factory-class: com.hotels.bdp.circustrain.distcpcopier.HdfsDataManipulationClientFactory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwMDAzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public interface DataManipulationClient {\n          \n          \n            \n            public interface DataManipulator {", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441500035", "createdAt": "2020-06-17T12:17:15Z", "author": {"login": "massdosage"}, "path": "circus-train-api/src/main/java/com/hotels/bdp/circustrain/api/data/DataManipulationClient.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.api.data;\n+\n+import java.io.IOException;\n+\n+public interface DataManipulationClient {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwMDM4MQ==", "bodyText": "Add javadoc describing when the IOE could occur. As an end user I'd be most curious to know what the difference is between this returning false and an exception occurring,", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441500381", "createdAt": "2020-06-17T12:17:55Z", "author": {"login": "massdosage"}, "path": "circus-train-api/src/main/java/com/hotels/bdp/circustrain/api/data/DataManipulationClient.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.api.data;\n+\n+import java.io.IOException;\n+\n+public interface DataManipulationClient {\n+\n+  /**\n+   * Returns boolean stating whether the deletion was successful or not.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwMDU1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public interface DataManipulationClientFactory {\n          \n          \n            \n            public interface DataManipulatorFactory {", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441500551", "createdAt": "2020-06-17T12:18:15Z", "author": {"login": "massdosage"}, "path": "circus-train-api/src/main/java/com/hotels/bdp/circustrain/api/data/DataManipulationClientFactory.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.api.data;\n+\n+import java.util.Map;\n+\n+import org.apache.hadoop.fs.Path;\n+\n+public interface DataManipulationClientFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwMDgyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public interface DataManipulationClientFactoryManager {\n          \n          \n            \n            public interface DataManipulatorFactoryManager {", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441500826", "createdAt": "2020-06-17T12:18:42Z", "author": {"login": "massdosage"}, "path": "circus-train-api/src/main/java/com/hotels/bdp/circustrain/api/data/DataManipulationClientFactoryManager.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.api.data;\n+\n+import java.util.Map;\n+\n+import org.apache.hadoop.fs.Path;\n+\n+public interface DataManipulationClientFactoryManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwMTI1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final Logger LOG = LoggerFactory.getLogger(AwsDataManipulationClient.class);\n          \n          \n            \n              private static final Logger log = LoggerFactory.getLogger(AwsDataManipulationClient.class);", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441501255", "createdAt": "2020-06-17T12:19:28Z", "author": {"login": "massdosage"}, "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AwsDataManipulationClient.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static com.hotels.bdp.circustrain.aws.AmazonS3URIs.toAmazonS3URI;\n+\n+import java.net.URI;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.DeleteObjectsRequest;\n+import com.amazonaws.services.s3.model.DeleteObjectsRequest.KeyVersion;\n+import com.amazonaws.services.s3.model.DeleteObjectsResult;\n+import com.amazonaws.services.s3.model.ObjectListing;\n+import com.amazonaws.services.s3.model.S3ObjectSummary;\n+\n+import com.hotels.bdp.circustrain.api.data.DataManipulationClient;\n+\n+public class AwsDataManipulationClient implements DataManipulationClient {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(AwsDataManipulationClient.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwMjUxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final Logger LOG = LoggerFactory.getLogger(DefaultDataManipulationClientFactoryManager.class);\n          \n          \n            \n              private static final Logger log = LoggerFactory.getLogger(DefaultDataManipulationClientFactoryManager.class);", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441502512", "createdAt": "2020-06-17T12:21:41Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/data/DefaultDataManipulationClientFactoryManager.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.core.data;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.stereotype.Component;\n+\n+import com.hotels.bdp.circustrain.api.Modules;\n+import com.hotels.bdp.circustrain.api.data.DataManipulationClientFactory;\n+import com.hotels.bdp.circustrain.api.data.DataManipulationClientFactoryManager;\n+\n+@Profile({ Modules.REPLICATION })\n+@Component\n+@Order(Ordered.LOWEST_PRECEDENCE)\n+public class DefaultDataManipulationClientFactoryManager implements DataManipulationClientFactoryManager {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(DefaultDataManipulationClientFactoryManager.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwNDAxOQ==", "bodyText": "This does more than just check, it also performs the cleanup. Perhaps rename to cleanupReplicaIfRequired. Or maybe better move the if (replicationMode == FULL_OVERWRITE) { up to where it was before and then call this method cleanupReplica as it only applies to that mode.", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441504019", "createdAt": "2020-06-17T12:24:19Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "diffHunk": "@@ -445,4 +437,23 @@ public TableAndStatistics getTableAndStatistics(TableReplication tableReplicatio\n         tableReplication.getReplicaTableName());\n   }\n \n+  public void checkIfReplicaCleanupRequired(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwNDMzOQ==", "bodyText": "Wouldn't it be better to move this to line 448? There's no need to create a client unless we get that far.", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441504339", "createdAt": "2020-06-17T12:24:53Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "diffHunk": "@@ -445,4 +437,23 @@ public TableAndStatistics getTableAndStatistics(TableReplication tableReplicatio\n         tableReplication.getReplicaTableName());\n   }\n \n+  public void checkIfReplicaCleanupRequired(\n+      String replicaDatabaseName,\n+      String replicaTableName,\n+      DataManipulationClient dataManipulationClient) {\n+    try (CloseableMetaStoreClient client = getMetaStoreClientSupplier().get()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwNDU0NQ==", "bodyText": "Should we log e here too so we know why?", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441504545", "createdAt": "2020-06-17T12:25:16Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "diffHunk": "@@ -445,4 +437,23 @@ public TableAndStatistics getTableAndStatistics(TableReplication tableReplicatio\n         tableReplication.getReplicaTableName());\n   }\n \n+  public void checkIfReplicaCleanupRequired(\n+      String replicaDatabaseName,\n+      String replicaTableName,\n+      DataManipulationClient dataManipulationClient) {\n+    try (CloseableMetaStoreClient client = getMetaStoreClientSupplier().get()) {\n+      if (replicationMode == FULL_OVERWRITE) {\n+        LOG.debug(\"Replication mode: FULL_OVERWRITE. Checking for existing replica table.\");\n+        DropTableService dropTableService = new DropTableService();\n+        try {\n+            dropTableService\n+              .dropTableAndData(client, replicaDatabaseName, replicaTableName,\n+                  dataManipulationClient);\n+        } catch (Exception e) {\n+          LOG.info(\"Replica table '\" + replicaDatabaseName + \".\" + replicaTableName + \"' was not dropped.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwNTQ0Nw==", "bodyText": "How is this different to dropTable now? If we're always going to remove the params in that method then I'm not sure we need this one anymore?", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441505447", "createdAt": "2020-06-17T12:26:50Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/hive/DropTableService.java", "diffHunk": "@@ -25,28 +28,69 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.hotels.bdp.circustrain.api.data.DataManipulationClient;\n import com.hotels.hcommon.hive.metastore.client.api.CloseableMetaStoreClient;\n+import com.hotels.hcommon.hive.metastore.iterator.PartitionIterator;\n \n public class DropTableService {\n \n   private static final Logger LOG = LoggerFactory.getLogger(DropTableService.class);\n   private static final String EXTERNAL_KEY = \"EXTERNAL\";\n   private static final String IS_EXTERNAL = \"TRUE\";\n+  private static final short BATCH_SIZE = (short) 10;\n \n   /**\n    * Removes all parameters from a table before dropping the table.\n    */\n-  public void removeTableParamsAndDrop(\n+  public void removeTableParamsAndDrop(CloseableMetaStoreClient client, String databaseName, String tableName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwNjUwMg==", "bodyText": "Are we OK with not doing the whole partition iterator trick here? I guess for most of this type of table they're generally not very big so it's unlikely this will return tens of thousands of partitions and run out of memory like we've had in other parts of the code so it's probably fine.", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441506502", "createdAt": "2020-06-17T12:28:41Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/hive/DropTableService.java", "diffHunk": "@@ -25,28 +28,69 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.hotels.bdp.circustrain.api.data.DataManipulationClient;\n import com.hotels.hcommon.hive.metastore.client.api.CloseableMetaStoreClient;\n+import com.hotels.hcommon.hive.metastore.iterator.PartitionIterator;\n \n public class DropTableService {\n \n   private static final Logger LOG = LoggerFactory.getLogger(DropTableService.class);\n   private static final String EXTERNAL_KEY = \"EXTERNAL\";\n   private static final String IS_EXTERNAL = \"TRUE\";\n+  private static final short BATCH_SIZE = (short) 10;\n \n   /**\n    * Removes all parameters from a table before dropping the table.\n    */\n-  public void removeTableParamsAndDrop(\n+  public void removeTableParamsAndDrop(CloseableMetaStoreClient client, String databaseName, String tableName)\n+    throws TException {\n+    Table table = getTable(client, databaseName, tableName);\n+    if (table != null) {\n+      dropTable(client, table, databaseName, tableName);\n+    }\n+  }\n+\n+  /**\n+   * Drops the table and its associated data. If the table is unpartitioned the table location is used. If the table is\n+   * partitioned then the data will be dropped from each partition location.\n+   */\n+  public void dropTableAndData(\n       CloseableMetaStoreClient client,\n       String databaseName,\n-      String tableName) throws TException {\n-    Table table;\n+      String tableName,\n+      DataManipulationClient dataManipulationClient)\n+    throws TException {\n+    LOG.debug(\"Dropping table {}.{} and its data.\", databaseName, tableName);\n+    Table table = getTable(client, databaseName, tableName);\n+\n+    if (table != null) {\n+      String replicaLocation = table.getSd().getLocation();\n+      if (table.getPartitionKeysSize() == 0) {\n+        deleteData(dataManipulationClient, replicaLocation);\n+      } else {\n+        List<String> partitionLocations = getPartitionLocations(client, table);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwNjg3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  LOG.info(\"Dropping table data from location: {}.\", replicaDataLocation);\n          \n          \n            \n                  LOG.info(\"Deleting table data from location: {}.\", replicaDataLocation);", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441506876", "createdAt": "2020-06-17T12:29:20Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/hive/DropTableService.java", "diffHunk": "@@ -56,13 +100,52 @@ public void removeTableParamsAndDrop(\n       }\n       client.alter_table(databaseName, tableName, table);\n     }\n-    LOG\n-        .info(\"Dropping table '{}.{}'.\", table.getDbName(), table.getTableName());\n-    client.dropTable(table.getDbName(), table.getTableName(), false, true);\n+    LOG.info(\"Dropping table '{}.{}'.\", databaseName, tableName);\n+    client.dropTable(databaseName, tableName, false, true);\n+  }\n+\n+  private void deleteData(DataManipulationClient dataManipulationClient, String replicaDataLocation) {\n+    try {\n+      LOG.info(\"Dropping table data from location: {}.\", replicaDataLocation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwNzEyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  LOG.info(\"Could not drop replica table data at location:{}.\", replicaDataLocation);\n          \n          \n            \n                  LOG.info(\"Error deleting table data from location:{}.\", replicaDataLocation);\n          \n      \n    \n    \n  \n\nI think we should also log e so we can see why it failed to delete the data.", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441507123", "createdAt": "2020-06-17T12:29:48Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/hive/DropTableService.java", "diffHunk": "@@ -56,13 +100,52 @@ public void removeTableParamsAndDrop(\n       }\n       client.alter_table(databaseName, tableName, table);\n     }\n-    LOG\n-        .info(\"Dropping table '{}.{}'.\", table.getDbName(), table.getTableName());\n-    client.dropTable(table.getDbName(), table.getTableName(), false, true);\n+    LOG.info(\"Dropping table '{}.{}'.\", databaseName, tableName);\n+    client.dropTable(databaseName, tableName, false, true);\n+  }\n+\n+  private void deleteData(DataManipulationClient dataManipulationClient, String replicaDataLocation) {\n+    try {\n+      LOG.info(\"Dropping table data from location: {}.\", replicaDataLocation);\n+      boolean dataDeleted = dataManipulationClient.delete(replicaDataLocation);\n+      LOG.info(\"Data deleted: {}.\", dataDeleted);\n+    } catch (IOException e) {\n+      LOG.info(\"Could not drop replica table data at location:{}.\", replicaDataLocation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwODAwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  LOG.info(\"Dropping partition data from base location: {}.\", replicaTableLocation);\n          \n          \n            \n                  LOG.info(\"Deleting partition data from base location: {}.\", replicaTableLocation);\n          \n      \n    \n    \n  \n\n(although, I'm not sure it's even worth logging or using this as theoretically the partition locations could be completely unrelated to the table's base location.", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441508009", "createdAt": "2020-06-17T12:31:28Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/hive/DropTableService.java", "diffHunk": "@@ -56,13 +100,52 @@ public void removeTableParamsAndDrop(\n       }\n       client.alter_table(databaseName, tableName, table);\n     }\n-    LOG\n-        .info(\"Dropping table '{}.{}'.\", table.getDbName(), table.getTableName());\n-    client.dropTable(table.getDbName(), table.getTableName(), false, true);\n+    LOG.info(\"Dropping table '{}.{}'.\", databaseName, tableName);\n+    client.dropTable(databaseName, tableName, false, true);\n+  }\n+\n+  private void deleteData(DataManipulationClient dataManipulationClient, String replicaDataLocation) {\n+    try {\n+      LOG.info(\"Dropping table data from location: {}.\", replicaDataLocation);\n+      boolean dataDeleted = dataManipulationClient.delete(replicaDataLocation);\n+      LOG.info(\"Data deleted: {}.\", dataDeleted);\n+    } catch (IOException e) {\n+      LOG.info(\"Could not drop replica table data at location:{}.\", replicaDataLocation);\n+    }\n+  }\n+\n+  private void deletePartitionData(\n+      DataManipulationClient dataManipulationClient,\n+      String replicaTableLocation,\n+      List<String> replicaPartitionLocations) {\n+    try {\n+      LOG.info(\"Dropping partition data from base location: {}.\", replicaTableLocation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwODg4MA==", "bodyText": "At the moment this will stop if one of the partitions couldn't be dropped. Wouldn't it be better to put the try/catch around line 124 so it can try each location? And then basically do an AND on the booleans returned so if any one is false then the method returns false.", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441508880", "createdAt": "2020-06-17T12:33:02Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/hive/DropTableService.java", "diffHunk": "@@ -56,13 +100,52 @@ public void removeTableParamsAndDrop(\n       }\n       client.alter_table(databaseName, tableName, table);\n     }\n-    LOG\n-        .info(\"Dropping table '{}.{}'.\", table.getDbName(), table.getTableName());\n-    client.dropTable(table.getDbName(), table.getTableName(), false, true);\n+    LOG.info(\"Dropping table '{}.{}'.\", databaseName, tableName);\n+    client.dropTable(databaseName, tableName, false, true);\n+  }\n+\n+  private void deleteData(DataManipulationClient dataManipulationClient, String replicaDataLocation) {\n+    try {\n+      LOG.info(\"Dropping table data from location: {}.\", replicaDataLocation);\n+      boolean dataDeleted = dataManipulationClient.delete(replicaDataLocation);\n+      LOG.info(\"Data deleted: {}.\", dataDeleted);\n+    } catch (IOException e) {\n+      LOG.info(\"Could not drop replica table data at location:{}.\", replicaDataLocation);\n+    }\n+  }\n+\n+  private void deletePartitionData(\n+      DataManipulationClient dataManipulationClient,\n+      String replicaTableLocation,\n+      List<String> replicaPartitionLocations) {\n+    try {\n+      LOG.info(\"Dropping partition data from base location: {}.\", replicaTableLocation);\n+      for (String location : replicaPartitionLocations) {\n+        boolean deleted = dataManipulationClient.delete(location);\n+        LOG.debug(\"Attempted to delete data from location: {}. Successful deletion = {}.\", location, deleted);\n+      }\n+    } catch (IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwOTExNw==", "bodyText": "Then this message can log the actual partition location which will be more meaningful (and also log the exception)", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441509117", "createdAt": "2020-06-17T12:33:28Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/hive/DropTableService.java", "diffHunk": "@@ -56,13 +100,52 @@ public void removeTableParamsAndDrop(\n       }\n       client.alter_table(databaseName, tableName, table);\n     }\n-    LOG\n-        .info(\"Dropping table '{}.{}'.\", table.getDbName(), table.getTableName());\n-    client.dropTable(table.getDbName(), table.getTableName(), false, true);\n+    LOG.info(\"Dropping table '{}.{}'.\", databaseName, tableName);\n+    client.dropTable(databaseName, tableName, false, true);\n+  }\n+\n+  private void deleteData(DataManipulationClient dataManipulationClient, String replicaDataLocation) {\n+    try {\n+      LOG.info(\"Dropping table data from location: {}.\", replicaDataLocation);\n+      boolean dataDeleted = dataManipulationClient.delete(replicaDataLocation);\n+      LOG.info(\"Data deleted: {}.\", dataDeleted);\n+    } catch (IOException e) {\n+      LOG.info(\"Could not drop replica table data at location:{}.\", replicaDataLocation);\n+    }\n+  }\n+\n+  private void deletePartitionData(\n+      DataManipulationClient dataManipulationClient,\n+      String replicaTableLocation,\n+      List<String> replicaPartitionLocations) {\n+    try {\n+      LOG.info(\"Dropping partition data from base location: {}.\", replicaTableLocation);\n+      for (String location : replicaPartitionLocations) {\n+        boolean deleted = dataManipulationClient.delete(location);\n+        LOG.debug(\"Attempted to delete data from location: {}. Successful deletion = {}.\", location, deleted);\n+      }\n+    } catch (IOException e) {\n+      LOG.info(\"Could not drop replica partition data at location:{}.\", replicaTableLocation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwOTE3MQ==", "bodyText": "Why do we need this?", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441509171", "createdAt": "2020-06-17T12:33:35Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/hive/DropTableService.java", "diffHunk": "@@ -56,13 +100,52 @@ public void removeTableParamsAndDrop(\n       }\n       client.alter_table(databaseName, tableName, table);\n     }\n-    LOG\n-        .info(\"Dropping table '{}.{}'.\", table.getDbName(), table.getTableName());\n-    client.dropTable(table.getDbName(), table.getTableName(), false, true);\n+    LOG.info(\"Dropping table '{}.{}'.\", databaseName, tableName);\n+    client.dropTable(databaseName, tableName, false, true);\n+  }\n+\n+  private void deleteData(DataManipulationClient dataManipulationClient, String replicaDataLocation) {\n+    try {\n+      LOG.info(\"Dropping table data from location: {}.\", replicaDataLocation);\n+      boolean dataDeleted = dataManipulationClient.delete(replicaDataLocation);\n+      LOG.info(\"Data deleted: {}.\", dataDeleted);\n+    } catch (IOException e) {\n+      LOG.info(\"Could not drop replica table data at location:{}.\", replicaDataLocation);\n+    }\n+  }\n+\n+  private void deletePartitionData(\n+      DataManipulationClient dataManipulationClient,\n+      String replicaTableLocation,\n+      List<String> replicaPartitionLocations) {\n+    try {\n+      LOG.info(\"Dropping partition data from base location: {}.\", replicaTableLocation);\n+      for (String location : replicaPartitionLocations) {\n+        boolean deleted = dataManipulationClient.delete(location);\n+        LOG.debug(\"Attempted to delete data from location: {}. Successful deletion = {}.\", location, deleted);\n+      }\n+    } catch (IOException e) {\n+      LOG.info(\"Could not drop replica partition data at location:{}.\", replicaTableLocation);\n+    } catch (UnsupportedOperationException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwOTczNg==", "bodyText": "Ah OK, so we do use the iterator but we then add them all to a list so this could still OOM. I think it's alright to do this for now but the \"proper\" way would be to use the iterator, not an intermediate collection.", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441509736", "createdAt": "2020-06-17T12:34:32Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/hive/DropTableService.java", "diffHunk": "@@ -56,13 +100,52 @@ public void removeTableParamsAndDrop(\n       }\n       client.alter_table(databaseName, tableName, table);\n     }\n-    LOG\n-        .info(\"Dropping table '{}.{}'.\", table.getDbName(), table.getTableName());\n-    client.dropTable(table.getDbName(), table.getTableName(), false, true);\n+    LOG.info(\"Dropping table '{}.{}'.\", databaseName, tableName);\n+    client.dropTable(databaseName, tableName, false, true);\n+  }\n+\n+  private void deleteData(DataManipulationClient dataManipulationClient, String replicaDataLocation) {\n+    try {\n+      LOG.info(\"Dropping table data from location: {}.\", replicaDataLocation);\n+      boolean dataDeleted = dataManipulationClient.delete(replicaDataLocation);\n+      LOG.info(\"Data deleted: {}.\", dataDeleted);\n+    } catch (IOException e) {\n+      LOG.info(\"Could not drop replica table data at location:{}.\", replicaDataLocation);\n+    }\n+  }\n+\n+  private void deletePartitionData(\n+      DataManipulationClient dataManipulationClient,\n+      String replicaTableLocation,\n+      List<String> replicaPartitionLocations) {\n+    try {\n+      LOG.info(\"Dropping partition data from base location: {}.\", replicaTableLocation);\n+      for (String location : replicaPartitionLocations) {\n+        boolean deleted = dataManipulationClient.delete(location);\n+        LOG.debug(\"Attempted to delete data from location: {}. Successful deletion = {}.\", location, deleted);\n+      }\n+    } catch (IOException e) {\n+      LOG.info(\"Could not drop replica partition data at location:{}.\", replicaTableLocation);\n+    } catch (UnsupportedOperationException e) {\n+      LOG.info(e.getMessage());\n+    }\n   }\n \n   private boolean isExternal(Map<String, String> tableParameters) {\n     CaseInsensitiveMap caseInsensitiveParams = new CaseInsensitiveMap(tableParameters);\n     return IS_EXTERNAL.equalsIgnoreCase((String) caseInsensitiveParams.get(EXTERNAL_KEY));\n   }\n+\n+  private List<String> getPartitionLocations(CloseableMetaStoreClient client, Table table) {\n+    List<String> locations = new ArrayList<>();\n+    try {\n+      PartitionIterator partitionIterator = new PartitionIterator(client, table, BATCH_SIZE);\n+      while (partitionIterator.hasNext()) {\n+        locations.add(partitionIterator.next().getSd().getLocation());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxMDE0NA==", "bodyText": "Log the exception.\nAlso, should we swallow all these exceptions with warnings or should we throw them and fail the replication?", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441510144", "createdAt": "2020-06-17T12:35:15Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/hive/DropTableService.java", "diffHunk": "@@ -56,13 +100,52 @@ public void removeTableParamsAndDrop(\n       }\n       client.alter_table(databaseName, tableName, table);\n     }\n-    LOG\n-        .info(\"Dropping table '{}.{}'.\", table.getDbName(), table.getTableName());\n-    client.dropTable(table.getDbName(), table.getTableName(), false, true);\n+    LOG.info(\"Dropping table '{}.{}'.\", databaseName, tableName);\n+    client.dropTable(databaseName, tableName, false, true);\n+  }\n+\n+  private void deleteData(DataManipulationClient dataManipulationClient, String replicaDataLocation) {\n+    try {\n+      LOG.info(\"Dropping table data from location: {}.\", replicaDataLocation);\n+      boolean dataDeleted = dataManipulationClient.delete(replicaDataLocation);\n+      LOG.info(\"Data deleted: {}.\", dataDeleted);\n+    } catch (IOException e) {\n+      LOG.info(\"Could not drop replica table data at location:{}.\", replicaDataLocation);\n+    }\n+  }\n+\n+  private void deletePartitionData(\n+      DataManipulationClient dataManipulationClient,\n+      String replicaTableLocation,\n+      List<String> replicaPartitionLocations) {\n+    try {\n+      LOG.info(\"Dropping partition data from base location: {}.\", replicaTableLocation);\n+      for (String location : replicaPartitionLocations) {\n+        boolean deleted = dataManipulationClient.delete(location);\n+        LOG.debug(\"Attempted to delete data from location: {}. Successful deletion = {}.\", location, deleted);\n+      }\n+    } catch (IOException e) {\n+      LOG.info(\"Could not drop replica partition data at location:{}.\", replicaTableLocation);\n+    } catch (UnsupportedOperationException e) {\n+      LOG.info(e.getMessage());\n+    }\n   }\n \n   private boolean isExternal(Map<String, String> tableParameters) {\n     CaseInsensitiveMap caseInsensitiveParams = new CaseInsensitiveMap(tableParameters);\n     return IS_EXTERNAL.equalsIgnoreCase((String) caseInsensitiveParams.get(EXTERNAL_KEY));\n   }\n+\n+  private List<String> getPartitionLocations(CloseableMetaStoreClient client, Table table) {\n+    List<String> locations = new ArrayList<>();\n+    try {\n+      PartitionIterator partitionIterator = new PartitionIterator(client, table, BATCH_SIZE);\n+      while (partitionIterator.hasNext()) {\n+        locations.add(partitionIterator.next().getSd().getLocation());\n+      }\n+    } catch (TException e) {\n+      LOG.info(\"Could not list partitions for {}.{}.\", table.getDbName(), table.getTableName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxMDY4Mw==", "bodyText": "You can do this on line 39", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441510683", "createdAt": "2020-06-17T12:36:08Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/data/DefaultDataManipulationClientFactoryManagerTest.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.core.data;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.hotels.bdp.circustrain.api.data.DataManipulationClient;\n+import com.hotels.bdp.circustrain.api.data.DataManipulationClientFactory;\n+import com.hotels.bdp.circustrain.api.data.DataManipulationClientFactoryManager;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class DefaultDataManipulationClientFactoryManagerTest {\n+\n+  private DataManipulationClientFactory s3s3ClientFactory;\n+  private DataManipulationClientFactory s3MapReduceClientFactory;\n+  private DataManipulationClientFactory hdfsClientFactory;\n+\n+  private DataManipulationClientFactoryManager manager;\n+  private DataManipulationClientFactory clientFactory;\n+  private Path sourceLocation;\n+  private Path replicaLocation;\n+  private final String s3Path = \"s3://<path>\";\n+  private final String hdfsPath = \"hdfs://<path>\";\n+  private final Map<String, Object> copierOptions = new HashMap<>();\n+\n+  @Before\n+  public void setup() {\n+    s3s3ClientFactory = new TestDataManipulationClientFactory();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxMTc1Mg==", "bodyText": "similar for lines 56, 59", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441511752", "createdAt": "2020-06-17T12:38:00Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/data/DefaultDataManipulationClientFactoryManagerTest.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.core.data;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.hotels.bdp.circustrain.api.data.DataManipulationClient;\n+import com.hotels.bdp.circustrain.api.data.DataManipulationClientFactory;\n+import com.hotels.bdp.circustrain.api.data.DataManipulationClientFactoryManager;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class DefaultDataManipulationClientFactoryManagerTest {\n+\n+  private DataManipulationClientFactory s3s3ClientFactory;\n+  private DataManipulationClientFactory s3MapReduceClientFactory;\n+  private DataManipulationClientFactory hdfsClientFactory;\n+\n+  private DataManipulationClientFactoryManager manager;\n+  private DataManipulationClientFactory clientFactory;\n+  private Path sourceLocation;\n+  private Path replicaLocation;\n+  private final String s3Path = \"s3://<path>\";\n+  private final String hdfsPath = \"hdfs://<path>\";\n+  private final Map<String, Object> copierOptions = new HashMap<>();\n+\n+  @Before\n+  public void setup() {\n+    s3s3ClientFactory = new TestDataManipulationClientFactory();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxMDY4Mw=="}, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxMjc4Mg==", "bodyText": "Might be cleaner to have a small enum with the types S3_S3, S3_MAPREDUCE and HDFS and then have one method called something like setManipulatorType. You could also pass the type in to the constructor and then not need this extra method.", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441512782", "createdAt": "2020-06-17T12:39:44Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/data/DefaultDataManipulationClientFactoryManagerTest.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.core.data;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.hotels.bdp.circustrain.api.data.DataManipulationClient;\n+import com.hotels.bdp.circustrain.api.data.DataManipulationClientFactory;\n+import com.hotels.bdp.circustrain.api.data.DataManipulationClientFactoryManager;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class DefaultDataManipulationClientFactoryManagerTest {\n+\n+  private DataManipulationClientFactory s3s3ClientFactory;\n+  private DataManipulationClientFactory s3MapReduceClientFactory;\n+  private DataManipulationClientFactory hdfsClientFactory;\n+\n+  private DataManipulationClientFactoryManager manager;\n+  private DataManipulationClientFactory clientFactory;\n+  private Path sourceLocation;\n+  private Path replicaLocation;\n+  private final String s3Path = \"s3://<path>\";\n+  private final String hdfsPath = \"hdfs://<path>\";\n+  private final Map<String, Object> copierOptions = new HashMap<>();\n+\n+  @Before\n+  public void setup() {\n+    s3s3ClientFactory = new TestDataManipulationClientFactory();\n+    ((TestDataManipulationClientFactory) s3s3ClientFactory).setS3Client();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxMzMxNA==", "bodyText": "Static import Assert.", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441513314", "createdAt": "2020-06-17T12:40:36Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/data/DefaultDataManipulationClientFactoryManagerTest.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.core.data;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.hotels.bdp.circustrain.api.data.DataManipulationClient;\n+import com.hotels.bdp.circustrain.api.data.DataManipulationClientFactory;\n+import com.hotels.bdp.circustrain.api.data.DataManipulationClientFactoryManager;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class DefaultDataManipulationClientFactoryManagerTest {\n+\n+  private DataManipulationClientFactory s3s3ClientFactory;\n+  private DataManipulationClientFactory s3MapReduceClientFactory;\n+  private DataManipulationClientFactory hdfsClientFactory;\n+\n+  private DataManipulationClientFactoryManager manager;\n+  private DataManipulationClientFactory clientFactory;\n+  private Path sourceLocation;\n+  private Path replicaLocation;\n+  private final String s3Path = \"s3://<path>\";\n+  private final String hdfsPath = \"hdfs://<path>\";\n+  private final Map<String, Object> copierOptions = new HashMap<>();\n+\n+  @Before\n+  public void setup() {\n+    s3s3ClientFactory = new TestDataManipulationClientFactory();\n+    ((TestDataManipulationClientFactory) s3s3ClientFactory).setS3Client();\n+\n+    s3MapReduceClientFactory = new TestDataManipulationClientFactory();\n+    ((TestDataManipulationClientFactory) s3MapReduceClientFactory).setS3MapreduceClient();\n+\n+    hdfsClientFactory = new TestDataManipulationClientFactory();\n+    ((TestDataManipulationClientFactory) hdfsClientFactory).setHdfsClient();\n+\n+    manager = new DefaultDataManipulationClientFactoryManager(\n+        Arrays.asList(s3s3ClientFactory, s3MapReduceClientFactory, hdfsClientFactory));\n+    sourceLocation = new Path(s3Path);\n+  }\n+\n+  @Test\n+  public void awsClientReturnedForS3S3Copy() {\n+    replicaLocation = new Path(s3Path);\n+    clientFactory = manager.getClientFactory(sourceLocation, replicaLocation, copierOptions);\n+\n+    Assert.assertTrue(((TestDataManipulationClientFactory) clientFactory).isS3S3Client());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxMzk2MQ==", "bodyText": "Is this checking anything other than the logic you've put in the test class itself? I don't think so?", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441513961", "createdAt": "2020-06-17T12:41:43Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/data/DefaultDataManipulationClientFactoryManagerTest.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.core.data;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.hotels.bdp.circustrain.api.data.DataManipulationClient;\n+import com.hotels.bdp.circustrain.api.data.DataManipulationClientFactory;\n+import com.hotels.bdp.circustrain.api.data.DataManipulationClientFactoryManager;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class DefaultDataManipulationClientFactoryManagerTest {\n+\n+  private DataManipulationClientFactory s3s3ClientFactory;\n+  private DataManipulationClientFactory s3MapReduceClientFactory;\n+  private DataManipulationClientFactory hdfsClientFactory;\n+\n+  private DataManipulationClientFactoryManager manager;\n+  private DataManipulationClientFactory clientFactory;\n+  private Path sourceLocation;\n+  private Path replicaLocation;\n+  private final String s3Path = \"s3://<path>\";\n+  private final String hdfsPath = \"hdfs://<path>\";\n+  private final Map<String, Object> copierOptions = new HashMap<>();\n+\n+  @Before\n+  public void setup() {\n+    s3s3ClientFactory = new TestDataManipulationClientFactory();\n+    ((TestDataManipulationClientFactory) s3s3ClientFactory).setS3Client();\n+\n+    s3MapReduceClientFactory = new TestDataManipulationClientFactory();\n+    ((TestDataManipulationClientFactory) s3MapReduceClientFactory).setS3MapreduceClient();\n+\n+    hdfsClientFactory = new TestDataManipulationClientFactory();\n+    ((TestDataManipulationClientFactory) hdfsClientFactory).setHdfsClient();\n+\n+    manager = new DefaultDataManipulationClientFactoryManager(\n+        Arrays.asList(s3s3ClientFactory, s3MapReduceClientFactory, hdfsClientFactory));\n+    sourceLocation = new Path(s3Path);\n+  }\n+\n+  @Test\n+  public void awsClientReturnedForS3S3Copy() {\n+    replicaLocation = new Path(s3Path);\n+    clientFactory = manager.getClientFactory(sourceLocation, replicaLocation, copierOptions);\n+\n+    Assert.assertTrue(((TestDataManipulationClientFactory) clientFactory).isS3S3Client());\n+  }\n+\n+  @Test\n+  public void awsMapReduceClientReturnedForHdfsS3Copy() {\n+    sourceLocation = new Path(hdfsPath);\n+    replicaLocation = new Path(s3Path);\n+    clientFactory = manager.getClientFactory(sourceLocation, replicaLocation, copierOptions);\n+\n+    Assert.assertTrue(((TestDataManipulationClientFactory) clientFactory).isS3MapreduceClient());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxNDcyMA==", "bodyText": "If you're mocking this (line 64) then why are you doing this?", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441514720", "createdAt": "2020-06-17T12:42:59Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/hive/DropTableServiceTest.java", "diffHunk": "@@ -59,6 +72,10 @@ public void setUp() throws TException {\n     table.setTableName(TABLE_NAME);\n     table.setDbName(DB_NAME);\n     when(client.getTable(DB_NAME, TABLE_NAME)).thenReturn(table);\n+\n+    storageDescriptor = new StorageDescriptor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxNTEyOQ==", "bodyText": "You could put this in a for loop from 1-11, would remove a few lines of code.", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441515129", "createdAt": "2020-06-17T12:43:41Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/hive/DropTableServiceTest.java", "diffHunk": "@@ -132,4 +149,97 @@ public void removeParamsAndDropTableDoesNotExist() throws TException {\n     verify(client).getTable(DB_NAME, TABLE_NAME);\n     verifyNoMoreInteractions(client);\n   }\n+\n+  @Test\n+  public void dropTableAndDataSuccess() throws TException, IOException {\n+    table.setParameters(Collections.emptyMap());\n+\n+    service.dropTableAndData(client, DB_NAME, TABLE_NAME, dataManipulationClient);\n+\n+    verify(client).getTable(DB_NAME, TABLE_NAME);\n+    verify(client).dropTable(DB_NAME, TABLE_NAME, false, true);\n+    verifyNoMoreInteractions(client);\n+  }\n+\n+  @Test\n+  public void dropTableAndDataTableDoesNotExist() throws TException {\n+    doThrow(new NoSuchObjectException()).when(client).getTable(DB_NAME, TABLE_NAME);\n+\n+    service.dropTableAndData(client, DB_NAME, TABLE_NAME, dataManipulationClient);\n+\n+    verify(client).getTable(DB_NAME, TABLE_NAME);\n+    verifyNoMoreInteractions(client);\n+  }\n+\n+  @Test\n+  public void dropPartitionedTableSuccess() throws TException, IOException {\n+    List<String> partitionNames = Arrays.asList(\"name\", \"surname\");\n+    List<Partition> partitions = createPartitions(partitionNames.size());\n+\n+    when(client.listPartitionNames(DB_NAME, TABLE_NAME, (short) -1)).thenReturn(partitionNames);\n+    when(client.getPartitionsByNames(DB_NAME, TABLE_NAME, partitionNames)).thenReturn(partitions);\n+    table.setPartitionKeys(createFieldSchemaList(partitionNames));\n+\n+    service.dropTableAndData(client, DB_NAME, TABLE_NAME, dataManipulationClient);\n+\n+    verify(client).getTable(DB_NAME, TABLE_NAME);\n+    verify(client).dropTable(DB_NAME, TABLE_NAME, false, true);\n+    verify(dataManipulationClient).delete(PARTITION_LOCATION + \"1\");\n+    verify(dataManipulationClient).delete(PARTITION_LOCATION + \"2\");\n+  }\n+\n+  @Test\n+  public void dropPartitionedTableMultipleBatches() throws TException, IOException {\n+    List<String> partitionNames = new ArrayList<>();\n+    List<String> batch1 = Arrays\n+        .asList(\"title\", \"name\", \"middle\", \"surname\", \"streetname\", \"postcode\", \"county\", \"country\", \"continent\",\n+            \"colour\");\n+    List<String> batch2 = Arrays.asList(\"other\");\n+    partitionNames.addAll(batch1);\n+    partitionNames.addAll(batch2);\n+\n+    List<Partition> partitionBatch1 = createPartitions(partitionNames.size());\n+    Partition partitionBatch2 = partitionBatch1.remove(partitionBatch1.size() - 1);\n+    when(client.listPartitionNames(DB_NAME, TABLE_NAME, (short) -1)).thenReturn(partitionNames);\n+    when(client.getPartitionsByNames(DB_NAME, TABLE_NAME, batch1)).thenReturn(partitionBatch1);\n+    when(client.getPartitionsByNames(DB_NAME, TABLE_NAME, batch2)).thenReturn(Arrays.asList(partitionBatch2));\n+    \n+    table.setPartitionKeys(createFieldSchemaList(partitionNames));\n+\n+    service.dropTableAndData(client, DB_NAME, TABLE_NAME, dataManipulationClient);\n+\n+    verify(client).getTable(DB_NAME, TABLE_NAME);\n+    verify(client).dropTable(DB_NAME, TABLE_NAME, false, true);\n+    verify(dataManipulationClient).delete(PARTITION_LOCATION + \"1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxNTM4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final Logger LOG = LoggerFactory.getLogger(HdfsDataManipulationClient.class);\n          \n          \n            \n              private static final Logger log = LoggerFactory.getLogger(HdfsDataManipulationClient.class);", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441515385", "createdAt": "2020-06-17T12:44:05Z", "author": {"login": "massdosage"}, "path": "circus-train-distcp-copier/src/main/java/com/hotels/bdp/circustrain/distcpcopier/HdfsDataManipulationClient.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.distcpcopier;\n+\n+import java.io.IOException;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.hotels.bdp.circustrain.api.data.DataManipulationClient;\n+\n+public class HdfsDataManipulationClient implements DataManipulationClient {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(HdfsDataManipulationClient.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxNTgzNw==", "bodyText": "You can do this in one line above.", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441515837", "createdAt": "2020-06-17T12:44:51Z", "author": {"login": "massdosage"}, "path": "circus-train-distcp-copier/src/test/java/com/hotels/bdp/circustrain/distcpcopier/HdfsDataManipulationClientFactoryTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.distcpcopier;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class HdfsDataManipulationClientFactoryTest {\n+\n+  private String sourceLocation;\n+  private String replicaLocation;\n+\n+  private final String s3Path = \"s3://<path>\";\n+  private final String hdfsPath = \"hdfs://<path>\";\n+\n+  private @Mock Configuration conf;\n+\n+  private HdfsDataManipulationClientFactory clientFactory;\n+\n+  @Before\n+  public void setup() {\n+    clientFactory = new HdfsDataManipulationClientFactory(conf);\n+  }\n+\n+  // This client factory will technically support all schemes including replicating to and from s3. However the s3\n+  // client factories take higher precedence so this client factory wont be used for s3.\n+  @Test\n+  public void checkSupportsHdfs() {\n+    sourceLocation = hdfsPath;\n+    replicaLocation = hdfsPath;\n+\n+    boolean support = clientFactory.supportsSchemes(sourceLocation, replicaLocation);\n+    assertTrue(support);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxNTkzNw==", "bodyText": "Ditto and below etc.", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441515937", "createdAt": "2020-06-17T12:45:00Z", "author": {"login": "massdosage"}, "path": "circus-train-distcp-copier/src/test/java/com/hotels/bdp/circustrain/distcpcopier/HdfsDataManipulationClientFactoryTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.distcpcopier;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class HdfsDataManipulationClientFactoryTest {\n+\n+  private String sourceLocation;\n+  private String replicaLocation;\n+\n+  private final String s3Path = \"s3://<path>\";\n+  private final String hdfsPath = \"hdfs://<path>\";\n+\n+  private @Mock Configuration conf;\n+\n+  private HdfsDataManipulationClientFactory clientFactory;\n+\n+  @Before\n+  public void setup() {\n+    clientFactory = new HdfsDataManipulationClientFactory(conf);\n+  }\n+\n+  // This client factory will technically support all schemes including replicating to and from s3. However the s3\n+  // client factories take higher precedence so this client factory wont be used for s3.\n+  @Test\n+  public void checkSupportsHdfs() {\n+    sourceLocation = hdfsPath;\n+    replicaLocation = hdfsPath;\n+\n+    boolean support = clientFactory.supportsSchemes(sourceLocation, replicaLocation);\n+    assertTrue(support);\n+  }\n+\n+  @Test\n+  public void checkSupportsHdfsUpperCase() {\n+    sourceLocation = hdfsPath.toUpperCase();\n+    replicaLocation = hdfsPath.toUpperCase();\n+\n+    boolean support = clientFactory.supportsSchemes(sourceLocation, replicaLocation);\n+    assertTrue(support);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxNjk0OA==", "bodyText": "Same as in other test.", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441516948", "createdAt": "2020-06-17T12:46:38Z", "author": {"login": "massdosage"}, "path": "circus-train-s3-mapreduce-cp/src/test/java/com/hotels/bdp/circustrain/s3mapreducecp/aws/AwsMapreduceDataManipulationClientFactoryTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.s3mapreducecp.aws;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class AwsMapreduceDataManipulationClientFactoryTest {\n+\n+  private Path sourceLocation;\n+  private Path replicaLocation;\n+\n+  private String sourceScheme;\n+  private String replicaScheme;\n+\n+  private final Path s3Path = new Path(\"s3://<path>\");\n+  private final Path hdfsPath = new Path(\"hdfs://<path>\");\n+\n+  private @Mock Configuration conf;\n+\n+  private AwsMapreduceDataManipulationClientFactory clientFactory;\n+\n+  @Before\n+  public void setup() {\n+    clientFactory = new AwsMapreduceDataManipulationClientFactory(conf);\n+  }\n+\n+  @Test\n+  public void checkSupportsHdfsToS3() {\n+    sourceLocation = hdfsPath;\n+    replicaLocation = s3Path;\n+    sourceScheme = sourceLocation.toUri().getScheme();\n+    replicaScheme = replicaLocation.toUri().getScheme();\n+\n+    boolean support = clientFactory.supportsSchemes(sourceScheme, replicaScheme);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxNzQwMg==", "bodyText": "etc.", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r441517402", "createdAt": "2020-06-17T12:47:22Z", "author": {"login": "massdosage"}, "path": "circus-train-s3-s3-copier/src/test/java/com/hotels/bdp/circustrain/s3s3copier/aws/AwsDataManipulationClientFactoryTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.s3s3copier.aws;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class AwsDataManipulationClientFactoryTest {\n+\n+  private Path sourceLocation;\n+  private Path replicaLocation;\n+\n+  private String sourceScheme;\n+  private String replicaScheme;\n+\n+  private final String s3Path = \"s3://<path>\";\n+  private final String hdfsPath = \"hdfs://<path>\";\n+\n+  private @Mock Configuration conf;\n+  private @Mock AmazonS3ClientFactory s3ClientFactory;\n+\n+  private AwsS3DataManipulationClientFactory clientFactory;\n+\n+  @Before\n+  public void setup() {\n+    clientFactory = new AwsS3DataManipulationClientFactory(s3ClientFactory);\n+  }\n+\n+  @Test\n+  public void checkSupportsS3ToS3() {\n+    sourceLocation = new Path(s3Path);\n+    replicaLocation = new Path(s3Path);\n+    sourceScheme = sourceLocation.toUri().getScheme();\n+    replicaScheme = replicaLocation.toUri().getScheme();\n+\n+    boolean support = clientFactory.supportsSchemes(sourceScheme, replicaScheme);\n+    assertTrue(support);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d72abdb9c029de1eea597d18fe6c450aaca351b"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de738909d163edeaf76e74b91b6578200d499105", "author": {"user": {"login": "JayGreeeen", "name": "Jay Green-Stevens"}}, "url": "https://github.com/ExpediaGroup/circus-train/commit/de738909d163edeaf76e74b91b6578200d499105", "committedDate": "2020-06-18T15:01:13Z", "message": "Refactoring based on PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e573dbd92c57f1a690ae86f9c8c581afa8742ea8", "author": {"user": {"login": "JayGreeeen", "name": "Jay Green-Stevens"}}, "url": "https://github.com/ExpediaGroup/circus-train/commit/e573dbd92c57f1a690ae86f9c8c581afa8742ea8", "committedDate": "2020-06-18T16:36:03Z", "message": "Removing commented out code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "effe0a1f1c1dfc428b90863be503db83e0a498a2", "author": {"user": {"login": "JayGreeeen", "name": "Jay Green-Stevens"}}, "url": "https://github.com/ExpediaGroup/circus-train/commit/effe0a1f1c1dfc428b90863be503db83e0a498a2", "committedDate": "2020-06-19T10:10:24Z", "message": "Fixing leftover 'manipulation client' references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b65c3c4dd4b2702156cc7379cc20e4809e43761", "author": {"user": {"login": "JayGreeeen", "name": "Jay Green-Stevens"}}, "url": "https://github.com/ExpediaGroup/circus-train/commit/5b65c3c4dd4b2702156cc7379cc20e4809e43761", "committedDate": "2020-06-19T10:26:35Z", "message": "Increasing partition iterator batch size to 1000"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8db48fa7a30c53f7c18b666904637a54b7adb5de", "author": {"user": {"login": "JayGreeeen", "name": "Jay Green-Stevens"}}, "url": "https://github.com/ExpediaGroup/circus-train/commit/8db48fa7a30c53f7c18b666904637a54b7adb5de", "committedDate": "2020-06-19T11:40:04Z", "message": "Fixed test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MDY1OTMw", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#pullrequestreview-434065930", "createdAt": "2020-06-19T13:12:53Z", "commit": {"oid": "8db48fa7a30c53f7c18b666904637a54b7adb5de"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzoxMjo1M1rOGmUWXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzozNDoxMVrOGmVBPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzMjQ3OA==", "bodyText": "Please document the \"may throw an error\" part using the standard Javadoc for exceptions thrown.", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r442832478", "createdAt": "2020-06-19T13:12:53Z", "author": {"login": "massdosage"}, "path": "circus-train-api/src/main/java/com/hotels/bdp/circustrain/api/data/DataManipulator.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.api.data;\n+\n+import java.io.IOException;\n+\n+public interface DataManipulator {\n+\n+  /**\n+   * Returns boolean stating whether the deletion was successful or not. May through an error while attempting to delete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db48fa7a30c53f7c18b666904637a54b7adb5de"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzMzA0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class AwsDataManipulator implements DataManipulator {\n          \n          \n            \n            public class S3DataManipulator implements DataManipulator {\n          \n      \n    \n    \n  \n\nfeels like a more accurate/specific name to me", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r442833044", "createdAt": "2020-06-19T13:14:06Z", "author": {"login": "massdosage"}, "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AwsDataManipulator.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static com.hotels.bdp.circustrain.aws.AmazonS3URIs.toAmazonS3URI;\n+\n+import java.net.URI;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3URI;\n+import com.amazonaws.services.s3.model.DeleteObjectsRequest;\n+import com.amazonaws.services.s3.model.DeleteObjectsRequest.KeyVersion;\n+import com.amazonaws.services.s3.model.DeleteObjectsResult;\n+import com.amazonaws.services.s3.model.ObjectListing;\n+import com.amazonaws.services.s3.model.S3ObjectSummary;\n+\n+import com.hotels.bdp.circustrain.api.data.DataManipulator;\n+\n+public class AwsDataManipulator implements DataManipulator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db48fa7a30c53f7c18b666904637a54b7adb5de"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzNTIyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public DataManipulatorFactory getClientFactory(\n          \n          \n            \n              public DataManipulatorFactory getFactory(\n          \n      \n    \n    \n  \n\n(since we've removed the word \"client\" elsewhere)", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r442835227", "createdAt": "2020-06-19T13:18:22Z", "author": {"login": "massdosage"}, "path": "circus-train-api/src/main/java/com/hotels/bdp/circustrain/api/data/DataManipulatorFactoryManager.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.api.data;\n+\n+import java.util.Map;\n+\n+import org.apache.hadoop.fs.Path;\n+\n+public interface DataManipulatorFactoryManager {\n+\n+  public DataManipulatorFactory getClientFactory(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db48fa7a30c53f7c18b666904637a54b7adb5de"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzNTgzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      log.debug(\"Found ClientFactory '{}' using config\", clientFactoryClassName);\n          \n          \n            \n                      log.debug(\"Found DataManipulatorFactory '{}' using config\", clientFactoryClassName);", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r442835833", "createdAt": "2020-06-19T13:19:32Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/data/DefaultDataManipulatorFactoryManager.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.core.data;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.stereotype.Component;\n+\n+import com.hotels.bdp.circustrain.api.Modules;\n+import com.hotels.bdp.circustrain.api.data.DataManipulatorFactory;\n+import com.hotels.bdp.circustrain.api.data.DataManipulatorFactoryManager;\n+\n+@Profile({ Modules.REPLICATION })\n+@Component\n+@Order(Ordered.LOWEST_PRECEDENCE)\n+public class DefaultDataManipulatorFactoryManager implements DataManipulatorFactoryManager {\n+\n+  private static final Logger log = LoggerFactory.getLogger(DefaultDataManipulatorFactoryManager.class);\n+  static final String DATA_MANIPULATOR_FACTORY_CLASS = \"data-manipulator-factory-class\";\n+\n+  private List<DataManipulatorFactory> dataManipulatorFactories;\n+\n+  @Autowired\n+  public DefaultDataManipulatorFactoryManager(List<DataManipulatorFactory> factories) {\n+    this.dataManipulatorFactories = factories;\n+  }\n+\n+  @PostConstruct\n+  void postConstruct() {\n+    log.debug(\"Initialized with {} DataManipulatorFactories\", dataManipulatorFactories.size());\n+    for (DataManipulatorFactory clientFactory : dataManipulatorFactories) {\n+      log.debug(\"DataManipulatorFactory class {}\", clientFactory.getClass().getName());\n+    }\n+  }\n+\n+  @Override\n+  public DataManipulatorFactory getClientFactory(\n+      Path sourceTableLocation,\n+      Path replicaTableLocation,\n+      Map<String, Object> copierOptions) {\n+    String replicaLocation = replicaTableLocation.toUri().getScheme();\n+    String sourceLocation = sourceTableLocation.toUri().getScheme();\n+\n+    if (copierOptions.containsKey(DATA_MANIPULATOR_FACTORY_CLASS)) {\n+      for (DataManipulatorFactory clientFactory : dataManipulatorFactories) {\n+        final String clientFactoryClassName = clientFactory.getClass().getName();\n+        if (clientFactoryClassName.equals(copierOptions.get(DATA_MANIPULATOR_FACTORY_CLASS).toString())) {\n+          log.debug(\"Found ClientFactory '{}' using config\", clientFactoryClassName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db48fa7a30c53f7c18b666904637a54b7adb5de"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzNTk4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                for (DataManipulatorFactory clientFactory : dataManipulatorFactories) {\n          \n          \n            \n                for (DataManipulatorFactory factory : dataManipulatorFactories) {", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r442835987", "createdAt": "2020-06-19T13:19:51Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/data/DefaultDataManipulatorFactoryManager.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.core.data;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.stereotype.Component;\n+\n+import com.hotels.bdp.circustrain.api.Modules;\n+import com.hotels.bdp.circustrain.api.data.DataManipulatorFactory;\n+import com.hotels.bdp.circustrain.api.data.DataManipulatorFactoryManager;\n+\n+@Profile({ Modules.REPLICATION })\n+@Component\n+@Order(Ordered.LOWEST_PRECEDENCE)\n+public class DefaultDataManipulatorFactoryManager implements DataManipulatorFactoryManager {\n+\n+  private static final Logger log = LoggerFactory.getLogger(DefaultDataManipulatorFactoryManager.class);\n+  static final String DATA_MANIPULATOR_FACTORY_CLASS = \"data-manipulator-factory-class\";\n+\n+  private List<DataManipulatorFactory> dataManipulatorFactories;\n+\n+  @Autowired\n+  public DefaultDataManipulatorFactoryManager(List<DataManipulatorFactory> factories) {\n+    this.dataManipulatorFactories = factories;\n+  }\n+\n+  @PostConstruct\n+  void postConstruct() {\n+    log.debug(\"Initialized with {} DataManipulatorFactories\", dataManipulatorFactories.size());\n+    for (DataManipulatorFactory clientFactory : dataManipulatorFactories) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db48fa7a30c53f7c18b666904637a54b7adb5de"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzNjEwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  for (DataManipulatorFactory clientFactory : dataManipulatorFactories) {\n          \n          \n            \n                  for (DataManipulatorFactory factory : dataManipulatorFactories) {", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r442836104", "createdAt": "2020-06-19T13:20:03Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/data/DefaultDataManipulatorFactoryManager.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.core.data;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.stereotype.Component;\n+\n+import com.hotels.bdp.circustrain.api.Modules;\n+import com.hotels.bdp.circustrain.api.data.DataManipulatorFactory;\n+import com.hotels.bdp.circustrain.api.data.DataManipulatorFactoryManager;\n+\n+@Profile({ Modules.REPLICATION })\n+@Component\n+@Order(Ordered.LOWEST_PRECEDENCE)\n+public class DefaultDataManipulatorFactoryManager implements DataManipulatorFactoryManager {\n+\n+  private static final Logger log = LoggerFactory.getLogger(DefaultDataManipulatorFactoryManager.class);\n+  static final String DATA_MANIPULATOR_FACTORY_CLASS = \"data-manipulator-factory-class\";\n+\n+  private List<DataManipulatorFactory> dataManipulatorFactories;\n+\n+  @Autowired\n+  public DefaultDataManipulatorFactoryManager(List<DataManipulatorFactory> factories) {\n+    this.dataManipulatorFactories = factories;\n+  }\n+\n+  @PostConstruct\n+  void postConstruct() {\n+    log.debug(\"Initialized with {} DataManipulatorFactories\", dataManipulatorFactories.size());\n+    for (DataManipulatorFactory clientFactory : dataManipulatorFactories) {\n+      log.debug(\"DataManipulatorFactory class {}\", clientFactory.getClass().getName());\n+    }\n+  }\n+\n+  @Override\n+  public DataManipulatorFactory getClientFactory(\n+      Path sourceTableLocation,\n+      Path replicaTableLocation,\n+      Map<String, Object> copierOptions) {\n+    String replicaLocation = replicaTableLocation.toUri().getScheme();\n+    String sourceLocation = sourceTableLocation.toUri().getScheme();\n+\n+    if (copierOptions.containsKey(DATA_MANIPULATOR_FACTORY_CLASS)) {\n+      for (DataManipulatorFactory clientFactory : dataManipulatorFactories) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db48fa7a30c53f7c18b666904637a54b7adb5de"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzNjIwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final String clientFactoryClassName = clientFactory.getClass().getName();\n          \n          \n            \n                    final String factoryClassName = clientFactory.getClass().getName();", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r442836201", "createdAt": "2020-06-19T13:20:15Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/data/DefaultDataManipulatorFactoryManager.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.core.data;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.stereotype.Component;\n+\n+import com.hotels.bdp.circustrain.api.Modules;\n+import com.hotels.bdp.circustrain.api.data.DataManipulatorFactory;\n+import com.hotels.bdp.circustrain.api.data.DataManipulatorFactoryManager;\n+\n+@Profile({ Modules.REPLICATION })\n+@Component\n+@Order(Ordered.LOWEST_PRECEDENCE)\n+public class DefaultDataManipulatorFactoryManager implements DataManipulatorFactoryManager {\n+\n+  private static final Logger log = LoggerFactory.getLogger(DefaultDataManipulatorFactoryManager.class);\n+  static final String DATA_MANIPULATOR_FACTORY_CLASS = \"data-manipulator-factory-class\";\n+\n+  private List<DataManipulatorFactory> dataManipulatorFactories;\n+\n+  @Autowired\n+  public DefaultDataManipulatorFactoryManager(List<DataManipulatorFactory> factories) {\n+    this.dataManipulatorFactories = factories;\n+  }\n+\n+  @PostConstruct\n+  void postConstruct() {\n+    log.debug(\"Initialized with {} DataManipulatorFactories\", dataManipulatorFactories.size());\n+    for (DataManipulatorFactory clientFactory : dataManipulatorFactories) {\n+      log.debug(\"DataManipulatorFactory class {}\", clientFactory.getClass().getName());\n+    }\n+  }\n+\n+  @Override\n+  public DataManipulatorFactory getClientFactory(\n+      Path sourceTableLocation,\n+      Path replicaTableLocation,\n+      Map<String, Object> copierOptions) {\n+    String replicaLocation = replicaTableLocation.toUri().getScheme();\n+    String sourceLocation = sourceTableLocation.toUri().getScheme();\n+\n+    if (copierOptions.containsKey(DATA_MANIPULATOR_FACTORY_CLASS)) {\n+      for (DataManipulatorFactory clientFactory : dataManipulatorFactories) {\n+        final String clientFactoryClassName = clientFactory.getClass().getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db48fa7a30c53f7c18b666904637a54b7adb5de"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzNjY2NQ==", "bodyText": "What does this line do? The result isn't being assigned to anything - is it needed?", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r442836665", "createdAt": "2020-06-19T13:21:15Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "diffHunk": "@@ -435,6 +427,9 @@ public ReplicaLocationManager getLocationManager(\n       SourceLocationManager sourceLocationManager) {\n     CleanupLocationManager cleanupLocationManager = CleanupLocationManagerFactory\n         .newInstance(eventId, housekeepingListener, replicaCatalogListener, tableReplication);\n+\n+    sourceLocationManager.getTableLocation();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db48fa7a30c53f7c18b666904637a54b7adb5de"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzODE5MA==", "bodyText": "I think this and the changes below are much clearer now, also better using the partition iterator properly, nice.", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r442838190", "createdAt": "2020-06-19T13:24:09Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/hive/DropTableService.java", "diffHunk": "@@ -25,28 +26,62 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.hotels.bdp.circustrain.api.data.DataManipulator;\n import com.hotels.hcommon.hive.metastore.client.api.CloseableMetaStoreClient;\n+import com.hotels.hcommon.hive.metastore.iterator.PartitionIterator;\n \n public class DropTableService {\n \n-  private static final Logger LOG = LoggerFactory.getLogger(DropTableService.class);\n+  private static final Logger log = LoggerFactory.getLogger(DropTableService.class);\n   private static final String EXTERNAL_KEY = \"EXTERNAL\";\n   private static final String IS_EXTERNAL = \"TRUE\";\n+  private static final short BATCH_SIZE = (short) 1000;\n \n   /**\n    * Removes all parameters from a table before dropping the table.\n+   * \n+   * @throws Exception if the table can't be deleted.\n    */\n-  public void removeTableParamsAndDrop(\n+  public void dropTable(CloseableMetaStoreClient client, String databaseName, String tableName) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db48fa7a30c53f7c18b666904637a54b7adb5de"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzOTExOQ==", "bodyText": "Woah, what's up with those double semi-colons?!?!? Crrraazzyy, they need to GO! (and below)", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r442839119", "createdAt": "2020-06-19T13:26:01Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/data/DefaultDataManipulatorFactoryManagerTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.core.data;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import static com.hotels.bdp.circustrain.core.data.DefaultDataManipulatorFactoryManager.DATA_MANIPULATOR_FACTORY_CLASS;\n+import static com.hotels.bdp.circustrain.core.data.DefaultDataManipulatorFactoryManagerTest.DataManipulatorType.HDFS;\n+import static com.hotels.bdp.circustrain.core.data.DefaultDataManipulatorFactoryManagerTest.DataManipulatorType.S3_MAPREDUCE;\n+import static com.hotels.bdp.circustrain.core.data.DefaultDataManipulatorFactoryManagerTest.DataManipulatorType.S3_S3;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.hotels.bdp.circustrain.api.data.DataManipulator;\n+import com.hotels.bdp.circustrain.api.data.DataManipulatorFactory;\n+import com.hotels.bdp.circustrain.api.data.DataManipulatorFactoryManager;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class DefaultDataManipulatorFactoryManagerTest {\n+\n+  private DataManipulatorFactory s3s3DataManipulatorFactory = new TestDataManipulatorFactory(S3_S3);;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db48fa7a30c53f7c18b666904637a54b7adb5de"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzOTU1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void awsClientReturnedForS3S3Copy() {\n          \n          \n            \n              public void s3ManipulatorReturnedForS3S3Copy() {\n          \n      \n    \n    \n  \n\n(and similar renames for methods below since we don't use the word \"client\" for these anymore)", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r442839556", "createdAt": "2020-06-19T13:26:52Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/data/DefaultDataManipulatorFactoryManagerTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.core.data;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import static com.hotels.bdp.circustrain.core.data.DefaultDataManipulatorFactoryManager.DATA_MANIPULATOR_FACTORY_CLASS;\n+import static com.hotels.bdp.circustrain.core.data.DefaultDataManipulatorFactoryManagerTest.DataManipulatorType.HDFS;\n+import static com.hotels.bdp.circustrain.core.data.DefaultDataManipulatorFactoryManagerTest.DataManipulatorType.S3_MAPREDUCE;\n+import static com.hotels.bdp.circustrain.core.data.DefaultDataManipulatorFactoryManagerTest.DataManipulatorType.S3_S3;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.hotels.bdp.circustrain.api.data.DataManipulator;\n+import com.hotels.bdp.circustrain.api.data.DataManipulatorFactory;\n+import com.hotels.bdp.circustrain.api.data.DataManipulatorFactoryManager;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class DefaultDataManipulatorFactoryManagerTest {\n+\n+  private DataManipulatorFactory s3s3DataManipulatorFactory = new TestDataManipulatorFactory(S3_S3);;\n+  private DataManipulatorFactory s3MapReduceDataManipulatorFactory = new TestDataManipulatorFactory(S3_MAPREDUCE);;\n+  private DataManipulatorFactory hdfsDataManipulatorFactory = new TestDataManipulatorFactory(HDFS);;\n+\n+  private DataManipulatorFactoryManager manager;\n+  private DataManipulatorFactory clientFactory;\n+  private Path sourceLocation;\n+  private Path replicaLocation;\n+  private final String s3Path = \"s3://<path>\";\n+  private final String hdfsPath = \"hdfs://<path>\";\n+  private final Map<String, Object> copierOptions = new HashMap<>();\n+\n+  @Before\n+  public void setup() {\n+    manager = new DefaultDataManipulatorFactoryManager(\n+        Arrays.asList(s3s3DataManipulatorFactory, s3MapReduceDataManipulatorFactory, hdfsDataManipulatorFactory));\n+    sourceLocation = new Path(s3Path);\n+  }\n+\n+  @Test\n+  public void awsClientReturnedForS3S3Copy() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db48fa7a30c53f7c18b666904637a54b7adb5de"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzOTkzOQ==", "bodyText": "I'd prefer using assertEquals here, you get a better error message from JUnit if this fails rather than just \"wasn't true\".", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r442839939", "createdAt": "2020-06-19T13:27:36Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/data/DefaultDataManipulatorFactoryManagerTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.core.data;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import static com.hotels.bdp.circustrain.core.data.DefaultDataManipulatorFactoryManager.DATA_MANIPULATOR_FACTORY_CLASS;\n+import static com.hotels.bdp.circustrain.core.data.DefaultDataManipulatorFactoryManagerTest.DataManipulatorType.HDFS;\n+import static com.hotels.bdp.circustrain.core.data.DefaultDataManipulatorFactoryManagerTest.DataManipulatorType.S3_MAPREDUCE;\n+import static com.hotels.bdp.circustrain.core.data.DefaultDataManipulatorFactoryManagerTest.DataManipulatorType.S3_S3;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.hotels.bdp.circustrain.api.data.DataManipulator;\n+import com.hotels.bdp.circustrain.api.data.DataManipulatorFactory;\n+import com.hotels.bdp.circustrain.api.data.DataManipulatorFactoryManager;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class DefaultDataManipulatorFactoryManagerTest {\n+\n+  private DataManipulatorFactory s3s3DataManipulatorFactory = new TestDataManipulatorFactory(S3_S3);;\n+  private DataManipulatorFactory s3MapReduceDataManipulatorFactory = new TestDataManipulatorFactory(S3_MAPREDUCE);;\n+  private DataManipulatorFactory hdfsDataManipulatorFactory = new TestDataManipulatorFactory(HDFS);;\n+\n+  private DataManipulatorFactoryManager manager;\n+  private DataManipulatorFactory clientFactory;\n+  private Path sourceLocation;\n+  private Path replicaLocation;\n+  private final String s3Path = \"s3://<path>\";\n+  private final String hdfsPath = \"hdfs://<path>\";\n+  private final Map<String, Object> copierOptions = new HashMap<>();\n+\n+  @Before\n+  public void setup() {\n+    manager = new DefaultDataManipulatorFactoryManager(\n+        Arrays.asList(s3s3DataManipulatorFactory, s3MapReduceDataManipulatorFactory, hdfsDataManipulatorFactory));\n+    sourceLocation = new Path(s3Path);\n+  }\n+\n+  @Test\n+  public void awsClientReturnedForS3S3Copy() {\n+    replicaLocation = new Path(s3Path);\n+    clientFactory = manager.getClientFactory(sourceLocation, replicaLocation, copierOptions);\n+\n+    assertTrue(((TestDataManipulatorFactory) clientFactory).getType() == S3_S3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db48fa7a30c53f7c18b666904637a54b7adb5de"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0MDA0NA==", "bodyText": "Ditto (and etc. below)", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r442840044", "createdAt": "2020-06-19T13:27:49Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/data/DefaultDataManipulatorFactoryManagerTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.core.data;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import static com.hotels.bdp.circustrain.core.data.DefaultDataManipulatorFactoryManager.DATA_MANIPULATOR_FACTORY_CLASS;\n+import static com.hotels.bdp.circustrain.core.data.DefaultDataManipulatorFactoryManagerTest.DataManipulatorType.HDFS;\n+import static com.hotels.bdp.circustrain.core.data.DefaultDataManipulatorFactoryManagerTest.DataManipulatorType.S3_MAPREDUCE;\n+import static com.hotels.bdp.circustrain.core.data.DefaultDataManipulatorFactoryManagerTest.DataManipulatorType.S3_S3;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.hotels.bdp.circustrain.api.data.DataManipulator;\n+import com.hotels.bdp.circustrain.api.data.DataManipulatorFactory;\n+import com.hotels.bdp.circustrain.api.data.DataManipulatorFactoryManager;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class DefaultDataManipulatorFactoryManagerTest {\n+\n+  private DataManipulatorFactory s3s3DataManipulatorFactory = new TestDataManipulatorFactory(S3_S3);;\n+  private DataManipulatorFactory s3MapReduceDataManipulatorFactory = new TestDataManipulatorFactory(S3_MAPREDUCE);;\n+  private DataManipulatorFactory hdfsDataManipulatorFactory = new TestDataManipulatorFactory(HDFS);;\n+\n+  private DataManipulatorFactoryManager manager;\n+  private DataManipulatorFactory clientFactory;\n+  private Path sourceLocation;\n+  private Path replicaLocation;\n+  private final String s3Path = \"s3://<path>\";\n+  private final String hdfsPath = \"hdfs://<path>\";\n+  private final Map<String, Object> copierOptions = new HashMap<>();\n+\n+  @Before\n+  public void setup() {\n+    manager = new DefaultDataManipulatorFactoryManager(\n+        Arrays.asList(s3s3DataManipulatorFactory, s3MapReduceDataManipulatorFactory, hdfsDataManipulatorFactory));\n+    sourceLocation = new Path(s3Path);\n+  }\n+\n+  @Test\n+  public void awsClientReturnedForS3S3Copy() {\n+    replicaLocation = new Path(s3Path);\n+    clientFactory = manager.getClientFactory(sourceLocation, replicaLocation, copierOptions);\n+\n+    assertTrue(((TestDataManipulatorFactory) clientFactory).getType() == S3_S3);\n+  }\n+\n+  @Test\n+  public void awsMapReduceClientReturnedForHdfsS3Copy() {\n+    sourceLocation = new Path(hdfsPath);\n+    replicaLocation = new Path(s3Path);\n+    clientFactory = manager.getClientFactory(sourceLocation, replicaLocation, copierOptions);\n+\n+    assertTrue(((TestDataManipulatorFactory) clientFactory).getType() == S3_MAPREDUCE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db48fa7a30c53f7c18b666904637a54b7adb5de"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0MDIzMQ==", "bodyText": "Does this need to be public?", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r442840231", "createdAt": "2020-06-19T13:28:13Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/data/DefaultDataManipulatorFactoryManagerTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.core.data;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import static com.hotels.bdp.circustrain.core.data.DefaultDataManipulatorFactoryManager.DATA_MANIPULATOR_FACTORY_CLASS;\n+import static com.hotels.bdp.circustrain.core.data.DefaultDataManipulatorFactoryManagerTest.DataManipulatorType.HDFS;\n+import static com.hotels.bdp.circustrain.core.data.DefaultDataManipulatorFactoryManagerTest.DataManipulatorType.S3_MAPREDUCE;\n+import static com.hotels.bdp.circustrain.core.data.DefaultDataManipulatorFactoryManagerTest.DataManipulatorType.S3_S3;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.hotels.bdp.circustrain.api.data.DataManipulator;\n+import com.hotels.bdp.circustrain.api.data.DataManipulatorFactory;\n+import com.hotels.bdp.circustrain.api.data.DataManipulatorFactoryManager;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class DefaultDataManipulatorFactoryManagerTest {\n+\n+  private DataManipulatorFactory s3s3DataManipulatorFactory = new TestDataManipulatorFactory(S3_S3);;\n+  private DataManipulatorFactory s3MapReduceDataManipulatorFactory = new TestDataManipulatorFactory(S3_MAPREDUCE);;\n+  private DataManipulatorFactory hdfsDataManipulatorFactory = new TestDataManipulatorFactory(HDFS);;\n+\n+  private DataManipulatorFactoryManager manager;\n+  private DataManipulatorFactory clientFactory;\n+  private Path sourceLocation;\n+  private Path replicaLocation;\n+  private final String s3Path = \"s3://<path>\";\n+  private final String hdfsPath = \"hdfs://<path>\";\n+  private final Map<String, Object> copierOptions = new HashMap<>();\n+\n+  @Before\n+  public void setup() {\n+    manager = new DefaultDataManipulatorFactoryManager(\n+        Arrays.asList(s3s3DataManipulatorFactory, s3MapReduceDataManipulatorFactory, hdfsDataManipulatorFactory));\n+    sourceLocation = new Path(s3Path);\n+  }\n+\n+  @Test\n+  public void awsClientReturnedForS3S3Copy() {\n+    replicaLocation = new Path(s3Path);\n+    clientFactory = manager.getClientFactory(sourceLocation, replicaLocation, copierOptions);\n+\n+    assertTrue(((TestDataManipulatorFactory) clientFactory).getType() == S3_S3);\n+  }\n+\n+  @Test\n+  public void awsMapReduceClientReturnedForHdfsS3Copy() {\n+    sourceLocation = new Path(hdfsPath);\n+    replicaLocation = new Path(s3Path);\n+    clientFactory = manager.getClientFactory(sourceLocation, replicaLocation, copierOptions);\n+\n+    assertTrue(((TestDataManipulatorFactory) clientFactory).getType() == S3_MAPREDUCE);\n+  }\n+\n+  @Test\n+  public void hdfsClientReturnedForHdfsCopy() {\n+    sourceLocation = new Path(hdfsPath);\n+    replicaLocation = new Path(hdfsPath);\n+    clientFactory = manager.getClientFactory(sourceLocation, replicaLocation, copierOptions);\n+\n+    assertTrue(((TestDataManipulatorFactory) clientFactory).getType() == HDFS);\n+  }\n+\n+  @Test\n+  public void clientReturnedFromCopierOption() {\n+    replicaLocation = new Path(hdfsPath);\n+    TestDataManipulatorFactory testFactory = new TestDataManipulatorFactory(HDFS);\n+    manager = new DefaultDataManipulatorFactoryManager(Arrays.asList(testFactory));\n+    copierOptions.put(DATA_MANIPULATOR_FACTORY_CLASS, testFactory.getClass().getName());\n+\n+    clientFactory = manager.getClientFactory(sourceLocation, replicaLocation, copierOptions);\n+\n+    assertEquals(clientFactory, testFactory);\n+  }\n+\n+  @Test(expected = UnsupportedOperationException.class)\n+  public void noSupportingFactory() {\n+    replicaLocation = new Path(\"<path>\");\n+    clientFactory = manager.getClientFactory(sourceLocation, replicaLocation, copierOptions);\n+\n+    assertTrue(((TestDataManipulatorFactory) clientFactory).getType() == HDFS);\n+  }\n+\n+  public enum DataManipulatorType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db48fa7a30c53f7c18b666904637a54b7adb5de"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0MDMwOA==", "bodyText": "Can this be private?", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r442840308", "createdAt": "2020-06-19T13:28:22Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/data/DefaultDataManipulatorFactoryManagerTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.core.data;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import static com.hotels.bdp.circustrain.core.data.DefaultDataManipulatorFactoryManager.DATA_MANIPULATOR_FACTORY_CLASS;\n+import static com.hotels.bdp.circustrain.core.data.DefaultDataManipulatorFactoryManagerTest.DataManipulatorType.HDFS;\n+import static com.hotels.bdp.circustrain.core.data.DefaultDataManipulatorFactoryManagerTest.DataManipulatorType.S3_MAPREDUCE;\n+import static com.hotels.bdp.circustrain.core.data.DefaultDataManipulatorFactoryManagerTest.DataManipulatorType.S3_S3;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.hotels.bdp.circustrain.api.data.DataManipulator;\n+import com.hotels.bdp.circustrain.api.data.DataManipulatorFactory;\n+import com.hotels.bdp.circustrain.api.data.DataManipulatorFactoryManager;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class DefaultDataManipulatorFactoryManagerTest {\n+\n+  private DataManipulatorFactory s3s3DataManipulatorFactory = new TestDataManipulatorFactory(S3_S3);;\n+  private DataManipulatorFactory s3MapReduceDataManipulatorFactory = new TestDataManipulatorFactory(S3_MAPREDUCE);;\n+  private DataManipulatorFactory hdfsDataManipulatorFactory = new TestDataManipulatorFactory(HDFS);;\n+\n+  private DataManipulatorFactoryManager manager;\n+  private DataManipulatorFactory clientFactory;\n+  private Path sourceLocation;\n+  private Path replicaLocation;\n+  private final String s3Path = \"s3://<path>\";\n+  private final String hdfsPath = \"hdfs://<path>\";\n+  private final Map<String, Object> copierOptions = new HashMap<>();\n+\n+  @Before\n+  public void setup() {\n+    manager = new DefaultDataManipulatorFactoryManager(\n+        Arrays.asList(s3s3DataManipulatorFactory, s3MapReduceDataManipulatorFactory, hdfsDataManipulatorFactory));\n+    sourceLocation = new Path(s3Path);\n+  }\n+\n+  @Test\n+  public void awsClientReturnedForS3S3Copy() {\n+    replicaLocation = new Path(s3Path);\n+    clientFactory = manager.getClientFactory(sourceLocation, replicaLocation, copierOptions);\n+\n+    assertTrue(((TestDataManipulatorFactory) clientFactory).getType() == S3_S3);\n+  }\n+\n+  @Test\n+  public void awsMapReduceClientReturnedForHdfsS3Copy() {\n+    sourceLocation = new Path(hdfsPath);\n+    replicaLocation = new Path(s3Path);\n+    clientFactory = manager.getClientFactory(sourceLocation, replicaLocation, copierOptions);\n+\n+    assertTrue(((TestDataManipulatorFactory) clientFactory).getType() == S3_MAPREDUCE);\n+  }\n+\n+  @Test\n+  public void hdfsClientReturnedForHdfsCopy() {\n+    sourceLocation = new Path(hdfsPath);\n+    replicaLocation = new Path(hdfsPath);\n+    clientFactory = manager.getClientFactory(sourceLocation, replicaLocation, copierOptions);\n+\n+    assertTrue(((TestDataManipulatorFactory) clientFactory).getType() == HDFS);\n+  }\n+\n+  @Test\n+  public void clientReturnedFromCopierOption() {\n+    replicaLocation = new Path(hdfsPath);\n+    TestDataManipulatorFactory testFactory = new TestDataManipulatorFactory(HDFS);\n+    manager = new DefaultDataManipulatorFactoryManager(Arrays.asList(testFactory));\n+    copierOptions.put(DATA_MANIPULATOR_FACTORY_CLASS, testFactory.getClass().getName());\n+\n+    clientFactory = manager.getClientFactory(sourceLocation, replicaLocation, copierOptions);\n+\n+    assertEquals(clientFactory, testFactory);\n+  }\n+\n+  @Test(expected = UnsupportedOperationException.class)\n+  public void noSupportingFactory() {\n+    replicaLocation = new Path(\"<path>\");\n+    clientFactory = manager.getClientFactory(sourceLocation, replicaLocation, copierOptions);\n+\n+    assertTrue(((TestDataManipulatorFactory) clientFactory).getType() == HDFS);\n+  }\n+\n+  public enum DataManipulatorType {\n+    S3_S3,\n+    S3_MAPREDUCE,\n+    HDFS\n+  }\n+\n+  class TestDataManipulatorFactory implements DataManipulatorFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db48fa7a30c53f7c18b666904637a54b7adb5de"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0MDU1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void alteringExistingUnpartitionedReplicaTableSucceeds() throws Exception, IOException {\n          \n          \n            \n              public void alteringExistingUnpartitionedReplicaTableSucceeds() throws Exception {", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r442840557", "createdAt": "2020-06-19T13:28:53Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/ReplicaTest.java", "diffHunk": "@@ -187,7 +192,7 @@ private Replica newReplica(TableReplication tableReplication) {\n   }\n \n   @Test\n-  public void alteringExistingUnpartitionedReplicaTableSucceeds() throws TException, IOException {\n+  public void alteringExistingUnpartitionedReplicaTableSucceeds() throws Exception, IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db48fa7a30c53f7c18b666904637a54b7adb5de"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0MDY2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void alteringExistingUnpartitionedReplicaTableWithNoStatsSucceeds() throws Exception, IOException {\n          \n          \n            \n              public void alteringExistingUnpartitionedReplicaTableWithNoStatsSucceeds() throws Exception {\n          \n      \n    \n    \n  \n\netc. below too", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r442840668", "createdAt": "2020-06-19T13:29:07Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/ReplicaTest.java", "diffHunk": "@@ -196,7 +201,7 @@ public void alteringExistingUnpartitionedReplicaTableSucceeds() throws TExceptio\n   }\n \n   @Test\n-  public void alteringExistingUnpartitionedReplicaTableWithNoStatsSucceeds() throws TException, IOException {\n+  public void alteringExistingUnpartitionedReplicaTableWithNoStatsSucceeds() throws Exception, IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db48fa7a30c53f7c18b666904637a54b7adb5de"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0MjY4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String asiafileKey = String\n          \n          \n            \n                    String asiaFileKey = String", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r442842680", "createdAt": "2020-06-19T13:32:47Z", "author": {"login": "massdosage"}, "path": "circus-train-integration-tests/src/test/java/com/hotels/bdp/circustrain/integration/CircusTrainReplicationModeIntegrationTest.java", "diffHunk": "@@ -230,18 +242,26 @@ public void partitionedTableFullOverwrite() throws Exception {\n       public void checkAssertion() throws Exception {\n         Table hiveTable = replicaCatalog.client().getTable(DATABASE, TARGET_PARTITIONED_TABLE);\n         URI replicaLocation = toUri(\"s3a://replica/\", DATABASE, TARGET_PARTITIONED_TABLE);\n+        String eventId = hiveTable.getParameters().get(REPLICATION_EVENT.parameterName());\n         assertThat(hiveTable.getSd().getLocation(), is(replicaLocation.toString()));\n-        assertThat(hiveTable.getParameters().get(REPLICATION_EVENT.parameterName()), startsWith(\"ctp-\"));\n+        assertThat(eventId, startsWith(\"ctp-\"));\n         assertThat(hiveTable.getParameters().get(REPLICATION_MODE.parameterName()), is(\"FULL_OVERWRITE\"));\n         assertThat(hiveTable.getParameters().get(\"paramToUpdate\"), is(\"updated\"));\n         assertThat(hiveTable.getSd().getCols(), is(DATA_COLUMNS));\n \n-        List<Partition> partitions = replicaCatalog\n-            .client()\n-            .listPartitions(DATABASE, TARGET_PARTITIONED_TABLE, (short) -1);\n-        assertThat(partitions.size(), is(2));\n-        assertThat(partitions.get(0).getValues(), is(Arrays.asList(\"Asia\", \"China\")));\n-        assertThat(partitions.get(1).getValues(), is(Arrays.asList(\"Europe\", \"UK\")));\n+        // Assert files have been copied from source and replica file is deleted\n+        List<S3ObjectSummary> replicaFiles = TestUtils.listObjects(s3Client, \"replica\");\n+        assertThat(replicaFiles.size(), is(2));\n+\n+        String partitionAsia = \"continent=Asia/country=China\";\n+        String asiafileKey = String", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db48fa7a30c53f7c18b666904637a54b7adb5de"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0MjgyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String europefileKey = String\n          \n          \n            \n                    String europeFileKey = String", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r442842825", "createdAt": "2020-06-19T13:33:02Z", "author": {"login": "massdosage"}, "path": "circus-train-integration-tests/src/test/java/com/hotels/bdp/circustrain/integration/CircusTrainReplicationModeIntegrationTest.java", "diffHunk": "@@ -230,18 +242,26 @@ public void partitionedTableFullOverwrite() throws Exception {\n       public void checkAssertion() throws Exception {\n         Table hiveTable = replicaCatalog.client().getTable(DATABASE, TARGET_PARTITIONED_TABLE);\n         URI replicaLocation = toUri(\"s3a://replica/\", DATABASE, TARGET_PARTITIONED_TABLE);\n+        String eventId = hiveTable.getParameters().get(REPLICATION_EVENT.parameterName());\n         assertThat(hiveTable.getSd().getLocation(), is(replicaLocation.toString()));\n-        assertThat(hiveTable.getParameters().get(REPLICATION_EVENT.parameterName()), startsWith(\"ctp-\"));\n+        assertThat(eventId, startsWith(\"ctp-\"));\n         assertThat(hiveTable.getParameters().get(REPLICATION_MODE.parameterName()), is(\"FULL_OVERWRITE\"));\n         assertThat(hiveTable.getParameters().get(\"paramToUpdate\"), is(\"updated\"));\n         assertThat(hiveTable.getSd().getCols(), is(DATA_COLUMNS));\n \n-        List<Partition> partitions = replicaCatalog\n-            .client()\n-            .listPartitions(DATABASE, TARGET_PARTITIONED_TABLE, (short) -1);\n-        assertThat(partitions.size(), is(2));\n-        assertThat(partitions.get(0).getValues(), is(Arrays.asList(\"Asia\", \"China\")));\n-        assertThat(partitions.get(1).getValues(), is(Arrays.asList(\"Europe\", \"UK\")));\n+        // Assert files have been copied from source and replica file is deleted\n+        List<S3ObjectSummary> replicaFiles = TestUtils.listObjects(s3Client, \"replica\");\n+        assertThat(replicaFiles.size(), is(2));\n+\n+        String partitionAsia = \"continent=Asia/country=China\";\n+        String asiafileKey = String\n+            .format(\"%s/%s/%s/%s/%s\", DATABASE, TARGET_PARTITIONED_TABLE, eventId, partitionAsia, PART_00000);\n+        assertThat(replicaFiles.get(0).getKey(), is(asiafileKey));\n+\n+        String partitionEurope = \"continent=Europe/country=UK\";\n+        String europefileKey = String", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db48fa7a30c53f7c18b666904637a54b7adb5de"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0MzQ1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Supports copying from hdfs/ a file to s3.\n          \n          \n            \n               * Supports copying from HDFS to S3.", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#discussion_r442843454", "createdAt": "2020-06-19T13:34:11Z", "author": {"login": "massdosage"}, "path": "circus-train-s3-mapreduce-cp/src/main/java/com/hotels/bdp/circustrain/s3mapreducecp/aws/AwsMapreduceDataManipulatorFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.s3mapreducecp.aws;\n+\n+import java.util.Map;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.stereotype.Component;\n+\n+import com.hotels.bdp.circustrain.api.Modules;\n+import com.hotels.bdp.circustrain.api.data.DataManipulator;\n+import com.hotels.bdp.circustrain.api.data.DataManipulatorFactory;\n+import com.hotels.bdp.circustrain.aws.AwsDataManipulator;\n+import com.hotels.bdp.circustrain.aws.S3Schemes;\n+\n+@Profile({ Modules.REPLICATION })\n+@Component\n+@Order(Ordered.LOWEST_PRECEDENCE - 1)\n+public class AwsMapreduceDataManipulatorFactory implements DataManipulatorFactory {\n+\n+  private AwsS3ClientFactory s3ClientFactory;\n+\n+  private Configuration conf;\n+\n+  @Autowired\n+  public AwsMapreduceDataManipulatorFactory(@Value(\"#{replicaHiveConf}\") Configuration conf) {\n+    this.conf = conf;\n+    s3ClientFactory = new AwsS3ClientFactory();\n+  }\n+\n+  // The hdfs -> s3 data manipulator doesn't need to use the path for the client.\n+  @Override\n+  public DataManipulator newInstance(Path path, Map<String, Object> copierOptions) {\n+    return new AwsDataManipulator(s3ClientFactory.newInstance(conf));\n+  }\n+\n+  /**\n+   * Supports copying from hdfs/ a file to s3.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db48fa7a30c53f7c18b666904637a54b7adb5de"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15c6c8f92f360b1c013d241d028c5fb6d0db3599", "author": {"user": {"login": "JayGreeeen", "name": "Jay Green-Stevens"}}, "url": "https://github.com/ExpediaGroup/circus-train/commit/15c6c8f92f360b1c013d241d028c5fb6d0db3599", "committedDate": "2020-06-19T17:11:28Z", "message": "Renaming and cleaning up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63ab25760145c10bb34d8cfb14b56da259d10fba", "author": {"user": {"login": "JayGreeeen", "name": "Jay Green-Stevens"}}, "url": "https://github.com/ExpediaGroup/circus-train/commit/63ab25760145c10bb34d8cfb14b56da259d10fba", "committedDate": "2020-06-19T17:23:59Z", "message": "Removing a couple left over uses of 'client'"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDA0NDk1", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#pullrequestreview-435004495", "createdAt": "2020-06-22T14:54:19Z", "commit": {"oid": "63ab25760145c10bb34d8cfb14b56da259d10fba"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MzM5NDU5", "url": "https://github.com/ExpediaGroup/circus-train/pull/187#pullrequestreview-438339459", "createdAt": "2020-06-26T14:24:33Z", "commit": {"oid": "63ab25760145c10bb34d8cfb14b56da259d10fba"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3814, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}