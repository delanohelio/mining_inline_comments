{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3NTA3NDEy", "number": 175, "reviewThreads": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOTowMTowMlrODnwhrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDoyNToxMFrODoW02w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDE2MTEwOnYy", "diffSide": "RIGHT", "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOTowMTowMlrOF18CEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOTowMTowMlrOF18CEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwMjQxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final int DEFAULT_CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n          \n          \n            \n              private static final int DEFAULT_MAX_CREDENTIALS_DURATION_SECONDS = TimeUnit.HOURS.toSeconds(12);", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392102417", "createdAt": "2020-03-13T09:01:02Z", "author": {"login": "teabot"}, "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "diffHunk": "@@ -16,45 +16,57 @@\n package com.hotels.bdp.circustrain.aws;\n \n import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Preconditions.checkNotNull;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.hadoop.conf.Configuration;\n \n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleCredentialDuration\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDE2NzY0OnYy", "diffSide": "RIGHT", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOTowMzoyOVrOF18GVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOTowMzoyOVrOF18GVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwMzUxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return MapUtils.getIntValue(copierOptions, Keys.ASSUME_ROLE_CREDENTIAL_DURATION.keyName(), 12 * 60 * 60);\n          \n          \n            \n                return MapUtils.getIntValue(copierOptions, Keys.ASSUME_ROLE_CREDENTIAL_DURATION.keyName(), TimeUnit.HOURS.toSeconds(12));", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392103510", "createdAt": "2020-03-13T09:03:29Z", "author": {"login": "teabot"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java", "diffHunk": "@@ -131,6 +148,10 @@ public String getAssumedRole() {\n     return MapUtils.getString(copierOptions, Keys.ASSUME_ROLE.keyName(), null);\n   }\n \n+  public int getAssumedRoleCredentialDuration() {\n+    return MapUtils.getIntValue(copierOptions, Keys.ASSUME_ROLE_CREDENTIAL_DURATION.keyName(), 12 * 60 * 60);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDE3NTExOnYy", "diffSide": "RIGHT", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwOTowNjowOVrOF18LCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjozMTozMFrOF2KaEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwNDcxMg==", "bodyText": "What does -1 mean in this context? If it for example means 'unbounded', then assign to suitably named constant:\n   private static final int UNBOUNDED = -1;\n   ...\n   return MapUtils.getInteger(copierOptions, Keys.MAX_THREAD_POOL_SIZE.keyName(), UNBOUNDED);\n\nNote, I use unbounded as an example - I don't know what -1 means in this context - which is precisely the problem this addresses.", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392104712", "createdAt": "2020-03-13T09:06:09Z", "author": {"login": "teabot"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java", "diffHunk": "@@ -86,6 +95,14 @@ public S3S3CopierOptions(Map<String, Object> copierOptions) {\n     this.copierOptions = new HashMap<>(copierOptions);\n   }\n \n+  public void overrideMaxThreadPoolSize(int newMax) {\n+    copierOptions.put(Keys.MAX_THREAD_POOL_SIZE.keyName(), newMax);\n+  }\n+\n+  public int getMaxThreadPoolSize() {\n+    return MapUtils.getInteger(copierOptions, Keys.MAX_THREAD_POOL_SIZE.keyName(), -1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4MTUzNA==", "bodyText": "-1 in this context means to default to using the default pool size for transferManager. Took that suggestion though and updated the code accordingly to get rid of any magic number checks. New var name is USE_DEFAULT_THREAD_POOL_MAX", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392281534", "createdAt": "2020-03-13T15:00:08Z", "author": {"login": "KenFigueiredo"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java", "diffHunk": "@@ -86,6 +95,14 @@ public S3S3CopierOptions(Map<String, Object> copierOptions) {\n     this.copierOptions = new HashMap<>(copierOptions);\n   }\n \n+  public void overrideMaxThreadPoolSize(int newMax) {\n+    copierOptions.put(Keys.MAX_THREAD_POOL_SIZE.keyName(), newMax);\n+  }\n+\n+  public int getMaxThreadPoolSize() {\n+    return MapUtils.getInteger(copierOptions, Keys.MAX_THREAD_POOL_SIZE.keyName(), -1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwNDcxMg=="}, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzNzkzOQ==", "bodyText": "removed as per @patduin comment of just defaulting to 10 w/ our own executor.", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392337939", "createdAt": "2020-03-13T16:31:30Z", "author": {"login": "KenFigueiredo"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java", "diffHunk": "@@ -86,6 +95,14 @@ public S3S3CopierOptions(Map<String, Object> copierOptions) {\n     this.copierOptions = new HashMap<>(copierOptions);\n   }\n \n+  public void overrideMaxThreadPoolSize(int newMax) {\n+    copierOptions.put(Keys.MAX_THREAD_POOL_SIZE.keyName(), newMax);\n+  }\n+\n+  public int getMaxThreadPoolSize() {\n+    return MapUtils.getInteger(copierOptions, Keys.MAX_THREAD_POOL_SIZE.keyName(), -1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEwNDcxMg=="}, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTAyNDcwOnYy", "diffSide": "RIGHT", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMzo1Mzo0NFrOF2Efhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMzo1Mzo0NFrOF2Efhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI0MTAzMQ==", "bodyText": "Amount of time", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392241031", "createdAt": "2020-03-13T13:53:44Z", "author": {"login": "barnharts4"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java", "diffHunk": "@@ -60,10 +60,19 @@\n      * access to the target.\n      */\n     ASSUME_ROLE(\"assume-role\"),\n+    /**\n+     * Number of time (in seconds) that the AWS SDK should assume the given role for.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTE4ODU4OnYy", "diffSide": "RIGHT", "path": "CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDozNzo0N1rOF2GHIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDozNzo0N1rOF2GHIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI2NzU1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ## [16.0.1] - TBD\n          \n          \n            \n            ## [16.1.0] - TBD\n          \n      \n    \n    \n  \n\nI think we can consider this a new feature rather than just a bug fix.", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392267552", "createdAt": "2020-03-13T14:37:47Z", "author": {"login": "massdosage"}, "path": "CHANGELOG.md", "diffHunk": "@@ -1,3 +1,8 @@\n+## [16.0.1] - TBD", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTIwNzU5OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo0Mjo0NFrOF2GTPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzozMjoxMVrOF2MheA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3MDY1Mw==", "bodyText": "I don't want to overcomplicate things but I do want to make sure our configuration across the whole project is consistent. Currently when we've used the word duration (see expired-path-duration) this refers to an ISO duration (see https://www.digi.com/resources/documentation/digidocs/90001437-13/reference/r_iso_8601_duration_format.htm). The other time-based configuration I can spot is the metrics reporter period and time-unit. I'd prefer we use that, or if we only ever want to support seconds then we add that to the configuration property name.", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392270653", "createdAt": "2020-03-13T14:42:44Z", "author": {"login": "massdosage"}, "path": "README.md", "diffHunk": "@@ -396,7 +396,9 @@ If data is being replicated from S3 to S3 then Circus Train will use the AWS S3\n |`copier-options.canned-acl`|No|AWS Canned ACL name. See [Access Control List (ACL) Overview](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) for possible values. If not specified `S3S3Copier` will not specify any canned ACL.|\n |`copier-options.copier-factory-class`|No|Controls which copier is used for replication if provided.|\n |`copier-options.s3s3-retry-max-copy-attempts`|No|Controls the maximum number of attempts if AWS throws an error during copy. Default value is 3.|\n-| `copier-options.assume-role`|No|ARN of an IAM role to assume when writing S3 data to the target S3 location. Useful when the target is in a different AWS account than Circus Train is running in. Note that if JCEKS is also configured, JCEKS credentials will be used instead of assuming a role. If `assume-role` is not specified, the copier will use instance credentials. The role provided must have read access to the S3 source and write access to the S3 target.|\n+|`copier-options.assume-role`|No|ARN of an IAM role to assume when writing S3 data to the target S3 location. Useful when the target is in a different AWS account than Circus Train is running in. Note that if JCEKS is also configured, JCEKS credentials will be used instead of assuming a role. If `assume-role` is not specified, the copier will use instance credentials. The role provided must have read access to the S3 source and write access to the S3 target.|\n+|`copier-options.assume-role-credential-duration`|No| Number of time (in seconds) that the AWS SDK should assume the given role for. Default value is 12 hours.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3MjYwMA==", "bodyText": "moved to #176", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392372600", "createdAt": "2020-03-13T17:32:11Z", "author": {"login": "KenFigueiredo"}, "path": "README.md", "diffHunk": "@@ -396,7 +396,9 @@ If data is being replicated from S3 to S3 then Circus Train will use the AWS S3\n |`copier-options.canned-acl`|No|AWS Canned ACL name. See [Access Control List (ACL) Overview](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) for possible values. If not specified `S3S3Copier` will not specify any canned ACL.|\n |`copier-options.copier-factory-class`|No|Controls which copier is used for replication if provided.|\n |`copier-options.s3s3-retry-max-copy-attempts`|No|Controls the maximum number of attempts if AWS throws an error during copy. Default value is 3.|\n-| `copier-options.assume-role`|No|ARN of an IAM role to assume when writing S3 data to the target S3 location. Useful when the target is in a different AWS account than Circus Train is running in. Note that if JCEKS is also configured, JCEKS credentials will be used instead of assuming a role. If `assume-role` is not specified, the copier will use instance credentials. The role provided must have read access to the S3 source and write access to the S3 target.|\n+|`copier-options.assume-role`|No|ARN of an IAM role to assume when writing S3 data to the target S3 location. Useful when the target is in a different AWS account than Circus Train is running in. Note that if JCEKS is also configured, JCEKS credentials will be used instead of assuming a role. If `assume-role` is not specified, the copier will use instance credentials. The role provided must have read access to the S3 source and write access to the S3 target.|\n+|`copier-options.assume-role-credential-duration`|No| Number of time (in seconds) that the AWS SDK should assume the given role for. Default value is 12 hours.|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3MDY1Mw=="}, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTIxMzE0OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo0NDoxM1rOF2GW0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo0NDoxM1rOF2GW0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3MTU3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |`s3s3-max-thread-pool-size`|No| Max number of threads to use for the transferManager thread pool. Defaults internally to 10 if unset on the client.|\n          \n          \n            \n            |`s3s3-max-thread-pool-size`|No| Max number of threads to use for the transferManager thread pool. Default value is 10.|\n          \n      \n    \n    \n  \n\nThe end users don't know about and can't use the client themselves can they?", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392271570", "createdAt": "2020-03-13T14:44:13Z", "author": {"login": "massdosage"}, "path": "README.md", "diffHunk": "@@ -396,7 +396,9 @@ If data is being replicated from S3 to S3 then Circus Train will use the AWS S3\n |`copier-options.canned-acl`|No|AWS Canned ACL name. See [Access Control List (ACL) Overview](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) for possible values. If not specified `S3S3Copier` will not specify any canned ACL.|\n |`copier-options.copier-factory-class`|No|Controls which copier is used for replication if provided.|\n |`copier-options.s3s3-retry-max-copy-attempts`|No|Controls the maximum number of attempts if AWS throws an error during copy. Default value is 3.|\n-| `copier-options.assume-role`|No|ARN of an IAM role to assume when writing S3 data to the target S3 location. Useful when the target is in a different AWS account than Circus Train is running in. Note that if JCEKS is also configured, JCEKS credentials will be used instead of assuming a role. If `assume-role` is not specified, the copier will use instance credentials. The role provided must have read access to the S3 source and write access to the S3 target.|\n+|`copier-options.assume-role`|No|ARN of an IAM role to assume when writing S3 data to the target S3 location. Useful when the target is in a different AWS account than Circus Train is running in. Note that if JCEKS is also configured, JCEKS credentials will be used instead of assuming a role. If `assume-role` is not specified, the copier will use instance credentials. The role provided must have read access to the S3 source and write access to the S3 target.|\n+|`copier-options.assume-role-credential-duration`|No| Number of time (in seconds) that the AWS SDK should assume the given role for. Default value is 12 hours.|\n+|`s3s3-max-thread-pool-size`|No| Max number of threads to use for the transferManager thread pool. Defaults internally to 10 if unset on the client.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTIxNTY2OnYy", "diffSide": "RIGHT", "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo0NDo1OFrOF2GYhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzozMjowMFrOF2MhFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3MjAwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private STSAssumeRoleSessionCredentialsProvider credProvider;\n          \n          \n            \n              private STSAssumeRoleSessionCredentialsProvider credentialsProvider;", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392272006", "createdAt": "2020-03-13T14:44:58Z", "author": {"login": "massdosage"}, "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "diffHunk": "@@ -16,45 +16,57 @@\n package com.hotels.bdp.circustrain.aws;\n \n import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Preconditions.checkNotNull;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.hadoop.conf.Configuration;\n \n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleCredentialDuration\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n \n-  private AWSCredentials credentials;\n   private final Configuration conf;\n+  private STSAssumeRoleSessionCredentialsProvider credProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3MjUwMw==", "bodyText": "moved to #176", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392372503", "createdAt": "2020-03-13T17:32:00Z", "author": {"login": "KenFigueiredo"}, "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "diffHunk": "@@ -16,45 +16,57 @@\n package com.hotels.bdp.circustrain.aws;\n \n import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Preconditions.checkNotNull;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.hadoop.conf.Configuration;\n \n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleCredentialDuration\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n \n-  private AWSCredentials credentials;\n   private final Configuration conf;\n+  private STSAssumeRoleSessionCredentialsProvider credProvider;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3MjAwNg=="}, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTIxOTcyOnYy", "diffSide": "RIGHT", "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo0NTo1MlrOF2Ga9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzozMTo1NFrOF2Mg4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3MjYyOQ==", "bodyText": "Move this to line 42, there's no point getting the duration if this is going to fail.", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392272629", "createdAt": "2020-03-13T14:45:52Z", "author": {"login": "massdosage"}, "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "diffHunk": "@@ -16,45 +16,57 @@\n package com.hotels.bdp.circustrain.aws;\n \n import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Preconditions.checkNotNull;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.hadoop.conf.Configuration;\n \n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleCredentialDuration\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n \n-  private AWSCredentials credentials;\n   private final Configuration conf;\n+  private STSAssumeRoleSessionCredentialsProvider credProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n+  private void initializeCredProvider() {\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    int credDuration = conf.getInt(ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n+\n+    checkArgument(StringUtils.isNotEmpty(roleArn),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3MjQ1MA==", "bodyText": "moved to #176", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392372450", "createdAt": "2020-03-13T17:31:54Z", "author": {"login": "KenFigueiredo"}, "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "diffHunk": "@@ -16,45 +16,57 @@\n package com.hotels.bdp.circustrain.aws;\n \n import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Preconditions.checkNotNull;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.hadoop.conf.Configuration;\n \n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleCredentialDuration\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n \n-  private AWSCredentials credentials;\n   private final Configuration conf;\n+  private STSAssumeRoleSessionCredentialsProvider credProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n+  private void initializeCredProvider() {\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    int credDuration = conf.getInt(ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n+\n+    checkArgument(StringUtils.isNotEmpty(roleArn),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3MjYyOQ=="}, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTIyNjkzOnYy", "diffSide": "RIGHT", "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo0Nzo0OFrOF2GfhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzozMTo0NFrOF2MgjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3Mzc5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private void initializeCredProvider() {\n          \n          \n            \n              private void initializeCredentialProvider() {", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392273797", "createdAt": "2020-03-13T14:47:48Z", "author": {"login": "massdosage"}, "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "diffHunk": "@@ -16,45 +16,57 @@\n package com.hotels.bdp.circustrain.aws;\n \n import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Preconditions.checkNotNull;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.hadoop.conf.Configuration;\n \n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleCredentialDuration\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n \n-  private AWSCredentials credentials;\n   private final Configuration conf;\n+  private STSAssumeRoleSessionCredentialsProvider credProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n+  private void initializeCredProvider() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3MjM2NQ==", "bodyText": "moved to #176", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392372365", "createdAt": "2020-03-13T17:31:44Z", "author": {"login": "KenFigueiredo"}, "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "diffHunk": "@@ -16,45 +16,57 @@\n package com.hotels.bdp.circustrain.aws;\n \n import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Preconditions.checkNotNull;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.hadoop.conf.Configuration;\n \n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleCredentialDuration\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n \n-  private AWSCredentials credentials;\n   private final Configuration conf;\n+  private STSAssumeRoleSessionCredentialsProvider credProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n+  private void initializeCredProvider() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3Mzc5Nw=="}, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTIzNDUzOnYy", "diffSide": "RIGHT", "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo0OTo1MlrOF2GknA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzozMTo0MFrOF2Mgbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3NTEwMA==", "bodyText": "I'm a bit confused why there are so many other changes to this class when the only change I can really see that is necessary is making this value configurable instead of a hardcoded value?", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392275100", "createdAt": "2020-03-13T14:49:52Z", "author": {"login": "massdosage"}, "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "diffHunk": "@@ -16,45 +16,57 @@\n package com.hotels.bdp.circustrain.aws;\n \n import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Preconditions.checkNotNull;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.hadoop.conf.Configuration;\n \n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleCredentialDuration\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n \n-  private AWSCredentials credentials;\n   private final Configuration conf;\n+  private STSAssumeRoleSessionCredentialsProvider credProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n+  private void initializeCredProvider() {\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    int credDuration = conf.getInt(ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n+\n+    checkArgument(StringUtils.isNotEmpty(roleArn),\n+        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n+\n+    // STSAssumeRoleSessionCredentialsProvider should auto refresh its creds in the background.\n+    this.credProvider = new STSAssumeRoleSessionCredentialsProvider\n+        .Builder(roleArn, \"ct-assume-role-session\")\n+        .withRoleSessionDurationSeconds(credDuration)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3MjMzNA==", "bodyText": "moved to #176", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392372334", "createdAt": "2020-03-13T17:31:40Z", "author": {"login": "KenFigueiredo"}, "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "diffHunk": "@@ -16,45 +16,57 @@\n package com.hotels.bdp.circustrain.aws;\n \n import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Preconditions.checkNotNull;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.hadoop.conf.Configuration;\n \n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleCredentialDuration\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n \n-  private AWSCredentials credentials;\n   private final Configuration conf;\n+  private STSAssumeRoleSessionCredentialsProvider credProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n+  private void initializeCredProvider() {\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    int credDuration = conf.getInt(ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n+\n+    checkArgument(StringUtils.isNotEmpty(roleArn),\n+        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n+\n+    // STSAssumeRoleSessionCredentialsProvider should auto refresh its creds in the background.\n+    this.credProvider = new STSAssumeRoleSessionCredentialsProvider\n+        .Builder(roleArn, \"ct-assume-role-session\")\n+        .withRoleSessionDurationSeconds(credDuration)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3NTEwMA=="}, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTI1MTYwOnYy", "diffSide": "RIGHT", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3Copier.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo1NDozM1rOF2Gv0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjoxODo0MFrOF2J8_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3Nzk3MQ==", "bodyText": "What's the reason for splitting this into two lines? I think it was fine the way it was before.", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392277971", "createdAt": "2020-03-13T14:54:33Z", "author": {"login": "massdosage"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3Copier.java", "diffHunk": "@@ -173,8 +172,16 @@ private void initialiseAllCopyRequests() {\n         initialiseCopyJobs(subLocation, targetS3Uri);\n       }\n     }\n-    LOG\n-        .info(\"Finished initialising {} copy job(s)\", copyJobRequests.size());\n+\n+    int totalCopyJobs = copyJobRequests.size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMyOTA3Ng==", "bodyText": "I use the totalCopyJob request number to make a determination about what the thread pool size should be in the determineThreadPoolSize method. I figured since we use it twice it could be worth throwing into a variable.", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392329076", "createdAt": "2020-03-13T16:16:28Z", "author": {"login": "KenFigueiredo"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3Copier.java", "diffHunk": "@@ -173,8 +172,16 @@ private void initialiseAllCopyRequests() {\n         initialiseCopyJobs(subLocation, targetS3Uri);\n       }\n     }\n-    LOG\n-        .info(\"Finished initialising {} copy job(s)\", copyJobRequests.size());\n+\n+    int totalCopyJobs = copyJobRequests.size();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3Nzk3MQ=="}, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzMDA0OA==", "bodyText": "Ah, OK, I didn't spot that, sorry, you're right.", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392330048", "createdAt": "2020-03-13T16:18:02Z", "author": {"login": "massdosage"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3Copier.java", "diffHunk": "@@ -173,8 +172,16 @@ private void initialiseAllCopyRequests() {\n         initialiseCopyJobs(subLocation, targetS3Uri);\n       }\n     }\n-    LOG\n-        .info(\"Finished initialising {} copy job(s)\", copyJobRequests.size());\n+\n+    int totalCopyJobs = copyJobRequests.size();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3Nzk3MQ=="}, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzMDQ5NQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392330495", "createdAt": "2020-03-13T16:18:40Z", "author": {"login": "massdosage"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3Copier.java", "diffHunk": "@@ -173,8 +172,16 @@ private void initialiseAllCopyRequests() {\n         initialiseCopyJobs(subLocation, targetS3Uri);\n       }\n     }\n-    LOG\n-        .info(\"Finished initialising {} copy job(s)\", copyJobRequests.size());\n+\n+    int totalCopyJobs = copyJobRequests.size();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3Nzk3MQ=="}, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTI1MjY5OnYy", "diffSide": "RIGHT", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3Copier.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo1NDo1MlrOF2GwkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjoyNDoyNlrOF2KKHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3ODE2MA==", "bodyText": "Why has all this been moved down here instead of where it was being done above?", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392278160", "createdAt": "2020-03-13T14:54:52Z", "author": {"login": "massdosage"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3Copier.java", "diffHunk": "@@ -173,8 +172,16 @@ private void initialiseAllCopyRequests() {\n         initialiseCopyJobs(subLocation, targetS3Uri);\n       }\n     }\n-    LOG\n-        .info(\"Finished initialising {} copy job(s)\", copyJobRequests.size());\n+\n+    int totalCopyJobs = copyJobRequests.size();\n+    LOG.info(\"Finished initialising {} copy job(s)\", totalCopyJobs);\n+    s3s3CopierOptions.overrideMaxThreadPoolSize(determineThreadPoolSize(totalCopyJobs, s3s3CopierOptions.getMaxThreadPoolSize()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzMDg2Mg==", "bodyText": "OK, so that's why you had to move it down here then.", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392330862", "createdAt": "2020-03-13T16:19:15Z", "author": {"login": "massdosage"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3Copier.java", "diffHunk": "@@ -173,8 +172,16 @@ private void initialiseAllCopyRequests() {\n         initialiseCopyJobs(subLocation, targetS3Uri);\n       }\n     }\n-    LOG\n-        .info(\"Finished initialising {} copy job(s)\", copyJobRequests.size());\n+\n+    int totalCopyJobs = copyJobRequests.size();\n+    LOG.info(\"Finished initialising {} copy job(s)\", totalCopyJobs);\n+    s3s3CopierOptions.overrideMaxThreadPoolSize(determineThreadPoolSize(totalCopyJobs, s3s3CopierOptions.getMaxThreadPoolSize()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3ODE2MA=="}, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzMTkyMg==", "bodyText": "So the thought behind this was that we don't initialize the target & transferManager until we know how much work we need to do and we can optimize how we allocate those threads dynamically. The number of threads we allocate to the threadpool has a diminishing return if we go over the total number of copies we need to make.\nI.e. if we have 250 copy jobs and we allocate a threadpool of 1000 to transfermanager, we're going to have ~750 idle threads. This made a fairly significant difference in overhead and the total replication time from our testing of about an average of ~400 MB/s (granted the # of files & size of those files will drastically change that number)", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392331922", "createdAt": "2020-03-13T16:21:00Z", "author": {"login": "KenFigueiredo"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3Copier.java", "diffHunk": "@@ -173,8 +172,16 @@ private void initialiseAllCopyRequests() {\n         initialiseCopyJobs(subLocation, targetS3Uri);\n       }\n     }\n-    LOG\n-        .info(\"Finished initialising {} copy job(s)\", copyJobRequests.size());\n+\n+    int totalCopyJobs = copyJobRequests.size();\n+    LOG.info(\"Finished initialising {} copy job(s)\", totalCopyJobs);\n+    s3s3CopierOptions.overrideMaxThreadPoolSize(determineThreadPoolSize(totalCopyJobs, s3s3CopierOptions.getMaxThreadPoolSize()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3ODE2MA=="}, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzMzg1NA==", "bodyText": "OK.", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392333854", "createdAt": "2020-03-13T16:24:26Z", "author": {"login": "massdosage"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3Copier.java", "diffHunk": "@@ -173,8 +172,16 @@ private void initialiseAllCopyRequests() {\n         initialiseCopyJobs(subLocation, targetS3Uri);\n       }\n     }\n-    LOG\n-        .info(\"Finished initialising {} copy job(s)\", copyJobRequests.size());\n+\n+    int totalCopyJobs = copyJobRequests.size();\n+    LOG.info(\"Finished initialising {} copy job(s)\", totalCopyJobs);\n+    s3s3CopierOptions.overrideMaxThreadPoolSize(determineThreadPoolSize(totalCopyJobs, s3s3CopierOptions.getMaxThreadPoolSize()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3ODE2MA=="}, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTI1NjU3OnYy", "diffSide": "RIGHT", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3Copier.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo1NTo0OFrOF2GzEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjoyODo1MVrOF2KUEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3ODgwMA==", "bodyText": "I've got a feeling this was set to debug for a reason, why is it being changed to warn?", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392278800", "createdAt": "2020-03-13T14:55:48Z", "author": {"login": "massdosage"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3Copier.java", "diffHunk": "@@ -292,7 +299,7 @@ private Copy submitCopyJob(CopyJobRequest copyJob) {\n                   copyObjectRequest.getSourceBucketName(),\n                   copyObjectRequest.getSourceKey());\n           LOG\n-              .debug(\"Copy failed with exception:\", e);\n+              .warn(\"Copy failed with exception:\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzMTg1Ng==", "bodyText": "The reason I say this is because we usually log errors on warn/error level so if we don't then it's usually been done like that for a reason. My assumption is that we have some retry logic so this was causing the logs to be noisy and was downgraded to debug but I could be wrong, in which case warn is fine.", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392331856", "createdAt": "2020-03-13T16:20:52Z", "author": {"login": "massdosage"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3Copier.java", "diffHunk": "@@ -292,7 +299,7 @@ private Copy submitCopyJob(CopyJobRequest copyJob) {\n                   copyObjectRequest.getSourceBucketName(),\n                   copyObjectRequest.getSourceKey());\n           LOG\n-              .debug(\"Copy failed with exception:\", e);\n+              .warn(\"Copy failed with exception:\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3ODgwMA=="}, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzNTEyNw==", "bodyText": "I changed this because during my testing of all of this since some of the failures we had around the testing of this made those errors fail silently. If we're running in production, we don't necessarily want to have debug logs on but we still want to see what the failure for a given job was.", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392335127", "createdAt": "2020-03-13T16:26:35Z", "author": {"login": "KenFigueiredo"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3Copier.java", "diffHunk": "@@ -292,7 +299,7 @@ private Copy submitCopyJob(CopyJobRequest copyJob) {\n                   copyObjectRequest.getSourceBucketName(),\n                   copyObjectRequest.getSourceKey());\n           LOG\n-              .debug(\"Copy failed with exception:\", e);\n+              .warn(\"Copy failed with exception:\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3ODgwMA=="}, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzNjQwMg==", "bodyText": "OK, well, let's leave it like this then and if it later becomes apparent why we put this down to debug we'll just just put it back again.", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392336402", "createdAt": "2020-03-13T16:28:51Z", "author": {"login": "massdosage"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3Copier.java", "diffHunk": "@@ -292,7 +299,7 @@ private Copy submitCopyJob(CopyJobRequest copyJob) {\n                   copyObjectRequest.getSourceBucketName(),\n                   copyObjectRequest.getSourceKey());\n           LOG\n-              .debug(\"Copy failed with exception:\", e);\n+              .warn(\"Copy failed with exception:\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3ODgwMA=="}, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTI2NTE3OnYy", "diffSide": "LEFT", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo1Nzo1OFrOF2G4oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjoyODowM1rOF2KSYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4MDIyNQ==", "bodyText": "I don't really mind but why was this removed?", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392280225", "createdAt": "2020-03-13T14:57:58Z", "author": {"login": "massdosage"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java", "diffHunk": "@@ -56,15 +57,14 @@ public JceksAmazonS3ClientFactory(Security security) {\n   @Override\n   public AmazonS3 newInstance(AmazonS3URI uri, S3S3CopierOptions s3s3CopierOptions) {\n     HadoopAWSCredentialProviderChain credentialProviderChain = getCredentialsProviderChain(\n-        s3s3CopierOptions.getAssumedRole());\n+        s3s3CopierOptions.getAssumedRole(), s3s3CopierOptions.getAssumedRoleCredentialDuration());\n     return newS3Client(uri, s3s3CopierOptions, credentialProviderChain);\n   }\n \n   private AmazonS3 newS3Client(\n       AmazonS3URI uri,\n       S3S3CopierOptions s3s3CopierOptions,\n       HadoopAWSCredentialProviderChain credentialProviderChain) {\n-    LOG.debug(\"trying to get a client for uri '{}'\", uri);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzNTk2OA==", "bodyText": "unintentional - I had a ton of additional debug logs that I had reverted for the PR, and this one must have gotten caught with it.", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392335968", "createdAt": "2020-03-13T16:28:03Z", "author": {"login": "KenFigueiredo"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java", "diffHunk": "@@ -56,15 +57,14 @@ public JceksAmazonS3ClientFactory(Security security) {\n   @Override\n   public AmazonS3 newInstance(AmazonS3URI uri, S3S3CopierOptions s3s3CopierOptions) {\n     HadoopAWSCredentialProviderChain credentialProviderChain = getCredentialsProviderChain(\n-        s3s3CopierOptions.getAssumedRole());\n+        s3s3CopierOptions.getAssumedRole(), s3s3CopierOptions.getAssumedRoleCredentialDuration());\n     return newS3Client(uri, s3s3CopierOptions, credentialProviderChain);\n   }\n \n   private AmazonS3 newS3Client(\n       AmazonS3URI uri,\n       S3S3CopierOptions s3s3CopierOptions,\n       HadoopAWSCredentialProviderChain credentialProviderChain) {\n-    LOG.debug(\"trying to get a client for uri '{}'\", uri);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4MDIyNQ=="}, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTI4MDI1OnYy", "diffSide": "RIGHT", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTowMjowNFrOF2HCVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjozMzoxOVrOF2KeEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4MjcxMA==", "bodyText": "Depending on what you decide to do based on @teabot's comment about the -1 magic number, it might be worth introducing a \"can't be <=0 check\" when we get the config and then this can just check >0", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392282710", "createdAt": "2020-03-13T15:02:04Z", "author": {"login": "massdosage"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java", "diffHunk": "@@ -103,13 +103,27 @@ private String regionForUri(AmazonS3 client, AmazonS3URI uri) {\n     return bucketRegion;\n   }\n \n+  private AmazonS3ClientBuilder applyClientConfigurations(AmazonS3ClientBuilder builder, S3S3CopierOptions s3s3CopierOptions) {\n+    ClientConfiguration clientConfiguration = new ClientConfiguration();\n+\n+    if (s3s3CopierOptions.getMaxThreadPoolSize() != -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzODk2Mw==", "bodyText": "removed entirely as per @patduin comments", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392338963", "createdAt": "2020-03-13T16:33:19Z", "author": {"login": "KenFigueiredo"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java", "diffHunk": "@@ -103,13 +103,27 @@ private String regionForUri(AmazonS3 client, AmazonS3URI uri) {\n     return bucketRegion;\n   }\n \n+  private AmazonS3ClientBuilder applyClientConfigurations(AmazonS3ClientBuilder builder, S3S3CopierOptions s3s3CopierOptions) {\n+    ClientConfiguration clientConfiguration = new ClientConfiguration();\n+\n+    if (s3s3CopierOptions.getMaxThreadPoolSize() != -1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4MjcxMA=="}, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTI4MjA3OnYy", "diffSide": "RIGHT", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTowMjozMVrOF2HDgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTowMjozMVrOF2HDgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4MzAxMA==", "bodyText": "perhaps default this to 10 (as per readme)  and remove the if check for -1 in the TransferManagerFactory. Just always set our own.", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392283010", "createdAt": "2020-03-13T15:02:31Z", "author": {"login": "patduin"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java", "diffHunk": "@@ -77,6 +87,7 @@ public String keyName() {\n   }\n \n   private final Map<String, Object> copierOptions;\n+  public static final int USE_DEFAULT_MAX_THREAD_POOL = -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df860e16c709278b091bec93d7b99119f376f6f5"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTI4NzI0OnYy", "diffSide": "RIGHT", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTowMzo1MVrOF2HG2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTowMzo1MVrOF2HG2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4Mzg2NA==", "bodyText": "just always set our own executor, will be easier to read the code.", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392283864", "createdAt": "2020-03-13T15:03:51Z", "author": {"login": "patduin"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactory.java", "diffHunk": "@@ -26,12 +31,19 @@\n @Component\n public class TransferManagerFactory {\n \n+  private static final Logger LOG = LoggerFactory.getLogger(TransferManagerFactory.class);\n+\n   public TransferManager newInstance(AmazonS3 targetS3Client, S3S3CopierOptions s3s3CopierOptions) {\n-    return TransferManagerBuilder\n-        .standard()\n+    TransferManagerBuilder builder = TransferManagerBuilder.standard()\n         .withMultipartCopyThreshold(s3s3CopierOptions.getMultipartCopyThreshold())\n         .withMultipartCopyPartSize(s3s3CopierOptions.getMultipartCopyPartSize())\n-        .withS3Client(targetS3Client)\n-        .build();\n+        .withS3Client(targetS3Client);\n+\n+    if (s3s3CopierOptions.getMaxThreadPoolSize() != S3S3CopierOptions.USE_DEFAULT_THREAD_POOL_MAX) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b7356b0958d6ec301ced55981b6811b0d2b53f5"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTI5MDg0OnYy", "diffSide": "RIGHT", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTowNDo1OFrOF2HJbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTowNDo1OFrOF2HJbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4NDUyNw==", "bodyText": "remove the if just set the default.", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392284527", "createdAt": "2020-03-13T15:04:58Z", "author": {"login": "patduin"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java", "diffHunk": "@@ -103,13 +103,27 @@ private String regionForUri(AmazonS3 client, AmazonS3URI uri) {\n     return bucketRegion;\n   }\n \n+  private AmazonS3ClientBuilder applyClientConfigurations(AmazonS3ClientBuilder builder, S3S3CopierOptions s3s3CopierOptions) {\n+    ClientConfiguration clientConfiguration = new ClientConfiguration();\n+\n+    if (s3s3CopierOptions.getMaxThreadPoolSize() != S3S3CopierOptions.USE_DEFAULT_THREAD_POOL_MAX) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b7356b0958d6ec301ced55981b6811b0d2b53f5"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTI5MTY5OnYy", "diffSide": "RIGHT", "path": "circus-train-s3-s3-copier/src/test/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactoryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTowNToxMlrOF2HJ9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTowNToxMlrOF2HJ9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4NDY2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                TransferManagerConfiguration tmConfig = transferManager.getConfiguration();\n          \n          \n            \n                TransferManagerConfiguration managerConfig = transferManager.getConfiguration();", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392284662", "createdAt": "2020-03-13T15:05:12Z", "author": {"login": "massdosage"}, "path": "circus-train-s3-s3-copier/src/test/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactoryTest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.hotels.bdp.circustrain.s3s3copier.aws;\n+\n+import static org.junit.Assert.assertThat;\n+import static org.hamcrest.CoreMatchers.is;\n+\n+import java.util.HashMap;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.transfer.TransferManager;\n+import com.amazonaws.services.s3.transfer.TransferManagerConfiguration;\n+\n+import com.hotels.bdp.circustrain.s3s3copier.S3S3CopierOptions;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class TransferManagerFactoryTest {\n+\n+  @Mock private AmazonS3 mockClient;\n+  private final Long MULTIPART_COPY_THRESHOLD_VALUE = 1L;\n+  private final Long MULTIPART_COPY_PART_SIZE = 1L;\n+\n+  @Test\n+  public void shouldCreateDefaultTransferManagerClient() {\n+    S3S3CopierOptions s3Options = new S3S3CopierOptions(new HashMap<String, Object>() {{\n+      put(S3S3CopierOptions.Keys.MULTIPART_COPY_THRESHOLD.keyName(), MULTIPART_COPY_THRESHOLD_VALUE);\n+      put(S3S3CopierOptions.Keys.MULTIPART_COPY_PART_SIZE.keyName(), MULTIPART_COPY_PART_SIZE);\n+    }});\n+\n+    TransferManagerFactory factory = new TransferManagerFactory();\n+    TransferManager transferManager = factory.newInstance(mockClient, s3Options);\n+    assertThat(transferManager.getAmazonS3Client(), is(mockClient));\n+\n+    TransferManagerConfiguration tmConfig = transferManager.getConfiguration();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTI5NTQxOnYy", "diffSide": "RIGHT", "path": "circus-train-s3-s3-copier/src/test/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactoryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTowNjoxMVrOF2HMYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTowNjoxMVrOF2HMYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4NTI4MA==", "bodyText": "Thanks for adding this, shocking we didn't already have a test class for it!", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392285280", "createdAt": "2020-03-13T15:06:11Z", "author": {"login": "massdosage"}, "path": "circus-train-s3-s3-copier/src/test/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactoryTest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.hotels.bdp.circustrain.s3s3copier.aws;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTI5ODU2OnYy", "diffSide": "RIGHT", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTowNzowOFrOF2HOlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTo0NjoyMVrOF2ItBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4NTg0NQ==", "bodyText": "Can we add a unit test for this if statement or is it not straightforward to check the existence of the executor factory?", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392285845", "createdAt": "2020-03-13T15:07:08Z", "author": {"login": "massdosage"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactory.java", "diffHunk": "@@ -26,12 +31,19 @@\n @Component\n public class TransferManagerFactory {\n \n+  private static final Logger LOG = LoggerFactory.getLogger(TransferManagerFactory.class);\n+\n   public TransferManager newInstance(AmazonS3 targetS3Client, S3S3CopierOptions s3s3CopierOptions) {\n-    return TransferManagerBuilder\n-        .standard()\n+    TransferManagerBuilder builder = TransferManagerBuilder.standard()\n         .withMultipartCopyThreshold(s3s3CopierOptions.getMultipartCopyThreshold())\n         .withMultipartCopyPartSize(s3s3CopierOptions.getMultipartCopyPartSize())\n-        .withS3Client(targetS3Client)\n-        .build();\n+        .withS3Client(targetS3Client);\n+\n+    if (s3s3CopierOptions.getMaxThreadPoolSize() != -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMxMDAyMg==", "bodyText": "I had originally added the transfermanagerFactoryTest to cover it but found that it wasn't straightforward. That property is directly set on the executor factory which transferManager stores under a private final w/o any getters.", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392310022", "createdAt": "2020-03-13T15:46:21Z", "author": {"login": "KenFigueiredo"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactory.java", "diffHunk": "@@ -26,12 +31,19 @@\n @Component\n public class TransferManagerFactory {\n \n+  private static final Logger LOG = LoggerFactory.getLogger(TransferManagerFactory.class);\n+\n   public TransferManager newInstance(AmazonS3 targetS3Client, S3S3CopierOptions s3s3CopierOptions) {\n-    return TransferManagerBuilder\n-        .standard()\n+    TransferManagerBuilder builder = TransferManagerBuilder.standard()\n         .withMultipartCopyThreshold(s3s3CopierOptions.getMultipartCopyThreshold())\n         .withMultipartCopyPartSize(s3s3CopierOptions.getMultipartCopyPartSize())\n-        .withS3Client(targetS3Client)\n-        .build();\n+        .withS3Client(targetS3Client);\n+\n+    if (s3s3CopierOptions.getMaxThreadPoolSize() != -1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4NTg0NQ=="}, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTMwNzc5OnYy", "diffSide": "RIGHT", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTowOTo0MVrOF2HUYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMToyNzozMFrOF2vw6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4NzMyOA==", "bodyText": "Why do we need this here as well as in the TransferManagerFactory?", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392287328", "createdAt": "2020-03-13T15:09:41Z", "author": {"login": "massdosage"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java", "diffHunk": "@@ -103,13 +103,27 @@ private String regionForUri(AmazonS3 client, AmazonS3URI uri) {\n     return bucketRegion;\n   }\n \n+  private AmazonS3ClientBuilder applyClientConfigurations(AmazonS3ClientBuilder builder, S3S3CopierOptions s3s3CopierOptions) {\n+    ClientConfiguration clientConfiguration = new ClientConfiguration();\n+\n+    if (s3s3CopierOptions.getMaxThreadPoolSize() != -1) {\n+      clientConfiguration.withMaxConnections(s3s3CopierOptions.getMaxThreadPoolSize());\n+    }\n+\n+    return builder.withClientConfiguration(clientConfiguration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMxMTQwMA==", "bodyText": "The call in TransferManagerFactory sets the max threads that are available for its pool but doesn't update the default connection limit that the S3Client has of 50. So if you were to set a thread pool of 100, you'd start hitting connection failures.\nFrom my research into it, the most efficient scenario is to match # of threads to # of available connections.", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392311400", "createdAt": "2020-03-13T15:48:32Z", "author": {"login": "KenFigueiredo"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java", "diffHunk": "@@ -103,13 +103,27 @@ private String regionForUri(AmazonS3 client, AmazonS3URI uri) {\n     return bucketRegion;\n   }\n \n+  private AmazonS3ClientBuilder applyClientConfigurations(AmazonS3ClientBuilder builder, S3S3CopierOptions s3s3CopierOptions) {\n+    ClientConfiguration clientConfiguration = new ClientConfiguration();\n+\n+    if (s3s3CopierOptions.getMaxThreadPoolSize() != -1) {\n+      clientConfiguration.withMaxConnections(s3s3CopierOptions.getMaxThreadPoolSize());\n+    }\n+\n+    return builder.withClientConfiguration(clientConfiguration);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4NzMyOA=="}, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0OTk5NQ==", "bodyText": "OK", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392949995", "createdAt": "2020-03-16T11:27:30Z", "author": {"login": "massdosage"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/JceksAmazonS3ClientFactory.java", "diffHunk": "@@ -103,13 +103,27 @@ private String regionForUri(AmazonS3 client, AmazonS3URI uri) {\n     return bucketRegion;\n   }\n \n+  private AmazonS3ClientBuilder applyClientConfigurations(AmazonS3ClientBuilder builder, S3S3CopierOptions s3s3CopierOptions) {\n+    ClientConfiguration clientConfiguration = new ClientConfiguration();\n+\n+    if (s3s3CopierOptions.getMaxThreadPoolSize() != -1) {\n+      clientConfiguration.withMaxConnections(s3s3CopierOptions.getMaxThreadPoolSize());\n+    }\n+\n+    return builder.withClientConfiguration(clientConfiguration);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4NzMyOA=="}, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTMwOTM1OnYy", "diffSide": "RIGHT", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/ExecutorServiceFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNToxMDoxMFrOF2HVWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjo1Njo0OFrOF2LW7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4NzU3OQ==", "bodyText": "Can we just have a simple test class for this?", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392287579", "createdAt": "2020-03-13T15:10:10Z", "author": {"login": "massdosage"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/ExecutorServiceFactory.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM1MzUxOQ==", "bodyText": "good catch - this is actually completely unused and unneeded now due to it being replaced by the lambda call. Removed.", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392353519", "createdAt": "2020-03-13T16:56:48Z", "author": {"login": "KenFigueiredo"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/ExecutorServiceFactory.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4NzU3OQ=="}, "originalCommit": {"oid": "e8454abc8598f24e2a7e682da8ea0eed2f8db236"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjI4NTI5OnYy", "diffSide": "RIGHT", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMDoxNjo1MVrOF2RDBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMDoxNjo1MVrOF2RDBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ0NjcyNQ==", "bodyText": "beating elliot to it let's make 10 a constant: DEFAULT_MAX_THREAD_POOL_SIZE", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392446725", "createdAt": "2020-03-13T20:16:51Z", "author": {"login": "patduin"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java", "diffHunk": "@@ -86,6 +91,14 @@ public S3S3CopierOptions(Map<String, Object> copierOptions) {\n     this.copierOptions = new HashMap<>(copierOptions);\n   }\n \n+  public void overrideMaxThreadPoolSize(int newMax) {\n+    copierOptions.put(Keys.MAX_THREAD_POOL_SIZE.keyName(), newMax);\n+  }\n+\n+  public int getMaxThreadPoolSize() {\n+    return MapUtils.getInteger(copierOptions, Keys.MAX_THREAD_POOL_SIZE.keyName(), 10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "463fbb2bcd1a68b0e6f0f8888584e21254079199"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTcxNjAyOnYy", "diffSide": "RIGHT", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMToyNDozM1rOF2vqzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMToyNDozM1rOF2vqzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0ODQyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void overrideMaxThreadPoolSize(int newMax) {\n          \n          \n            \n              public void setMaxThreadPoolSize(int maxThreadPoolSize) {", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392948429", "createdAt": "2020-03-16T11:24:33Z", "author": {"login": "massdosage"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java", "diffHunk": "@@ -86,6 +91,14 @@ public S3S3CopierOptions(Map<String, Object> copierOptions) {\n     this.copierOptions = new HashMap<>(copierOptions);\n   }\n \n+  public void overrideMaxThreadPoolSize(int newMax) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "463fbb2bcd1a68b0e6f0f8888584e21254079199"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTcyOTQyOnYy", "diffSide": "RIGHT", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMToyODoxM1rOF2vyXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDowNToyNFrOF21nGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk1MDM2Ng==", "bodyText": "Left over from other PR, NABD though.", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392950366", "createdAt": "2020-03-16T11:28:13Z", "author": {"login": "massdosage"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java", "diffHunk": "@@ -18,6 +18,7 @@\n import java.net.URI;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.concurrent.TimeUnit;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "463fbb2bcd1a68b0e6f0f8888584e21254079199"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA0NTc4Nw==", "bodyText": "Removed!", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r393045787", "createdAt": "2020-03-16T14:05:24Z", "author": {"login": "KenFigueiredo"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/S3S3CopierOptions.java", "diffHunk": "@@ -18,6 +18,7 @@\n import java.net.URI;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.concurrent.TimeUnit;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk1MDM2Ng=="}, "originalCommit": {"oid": "463fbb2bcd1a68b0e6f0f8888584e21254079199"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTczMjA5OnYy", "diffSide": "RIGHT", "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMToyOTowMlrOF2vz8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDowNToyOFrOF21nSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk1MDc3MA==", "bodyText": "This doesn't look right?", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r392950770", "createdAt": "2020-03-16T11:29:02Z", "author": {"login": "massdosage"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactory.java", "diffHunk": "@@ -15,8 +15,15 @@\n  */\n package com.hotels.bdp.circustrain.s3s3copier.aws;\n \n+\n+import java.util.concurrent.Executors;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n \n+import jline.internal.Log;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "463fbb2bcd1a68b0e6f0f8888584e21254079199"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA0NTgzNA==", "bodyText": "looks like left over from an incorrect import. May need to tweak my IDE settings \ud83d\ude05\nRemoved.", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r393045834", "createdAt": "2020-03-16T14:05:28Z", "author": {"login": "KenFigueiredo"}, "path": "circus-train-s3-s3-copier/src/main/java/com/hotels/bdp/circustrain/s3s3copier/aws/TransferManagerFactory.java", "diffHunk": "@@ -15,8 +15,15 @@\n  */\n package com.hotels.bdp.circustrain.s3s3copier.aws;\n \n+\n+import java.util.concurrent.Executors;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n \n+import jline.internal.Log;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk1MDc3MA=="}, "originalCommit": {"oid": "463fbb2bcd1a68b0e6f0f8888584e21254079199"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjQzNjExOnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDoyNToxMFrOF22tFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTowNjo1NlrOF24lmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA2MzcwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |`s3s3-max-thread-pool-size`|No| Max number of threads to use for the transferManager thread pool. Default value is 10.|\n          \n          \n            \n            |`copier-options.s3s3-max-thread-pool-size`|No| Max number of threads to use for the transferManager thread pool. Default value is 10.|\n          \n      \n    \n    \n  \n\nMissed the prefix that all the others have ^", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r393063700", "createdAt": "2020-03-16T14:25:10Z", "author": {"login": "massdosage"}, "path": "README.md", "diffHunk": "@@ -396,7 +396,8 @@ If data is being replicated from S3 to S3 then Circus Train will use the AWS S3\n |`copier-options.canned-acl`|No|AWS Canned ACL name. See [Access Control List (ACL) Overview](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) for possible values. If not specified `S3S3Copier` will not specify any canned ACL.|\n |`copier-options.copier-factory-class`|No|Controls which copier is used for replication if provided.|\n |`copier-options.s3s3-retry-max-copy-attempts`|No|Controls the maximum number of attempts if AWS throws an error during copy. Default value is 3.|\n-| `copier-options.assume-role`|No|ARN of an IAM role to assume when writing S3 data to the target S3 location. Useful when the target is in a different AWS account than Circus Train is running in. Note that if JCEKS is also configured, JCEKS credentials will be used instead of assuming a role. If `assume-role` is not specified, the copier will use instance credentials. The role provided must have read access to the S3 source and write access to the S3 target.|\n+|`copier-options.assume-role`|No|ARN of an IAM role to assume when writing S3 data to the target S3 location. Useful when the target is in a different AWS account than Circus Train is running in. Note that if JCEKS is also configured, JCEKS credentials will be used instead of assuming a role. If `assume-role` is not specified, the copier will use instance credentials. The role provided must have read access to the S3 source and write access to the S3 target.|\n+|`s3s3-max-thread-pool-size`|No| Max number of threads to use for the transferManager thread pool. Default value is 10.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5ab2b3666fda97d8ce3da90142c8acad1a20855"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA5NDU1NQ==", "bodyText": "good catch - updated", "url": "https://github.com/ExpediaGroup/circus-train/pull/175#discussion_r393094555", "createdAt": "2020-03-16T15:06:56Z", "author": {"login": "KenFigueiredo"}, "path": "README.md", "diffHunk": "@@ -396,7 +396,8 @@ If data is being replicated from S3 to S3 then Circus Train will use the AWS S3\n |`copier-options.canned-acl`|No|AWS Canned ACL name. See [Access Control List (ACL) Overview](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) for possible values. If not specified `S3S3Copier` will not specify any canned ACL.|\n |`copier-options.copier-factory-class`|No|Controls which copier is used for replication if provided.|\n |`copier-options.s3s3-retry-max-copy-attempts`|No|Controls the maximum number of attempts if AWS throws an error during copy. Default value is 3.|\n-| `copier-options.assume-role`|No|ARN of an IAM role to assume when writing S3 data to the target S3 location. Useful when the target is in a different AWS account than Circus Train is running in. Note that if JCEKS is also configured, JCEKS credentials will be used instead of assuming a role. If `assume-role` is not specified, the copier will use instance credentials. The role provided must have read access to the S3 source and write access to the S3 target.|\n+|`copier-options.assume-role`|No|ARN of an IAM role to assume when writing S3 data to the target S3 location. Useful when the target is in a different AWS account than Circus Train is running in. Note that if JCEKS is also configured, JCEKS credentials will be used instead of assuming a role. If `assume-role` is not specified, the copier will use instance credentials. The role provided must have read access to the S3 source and write access to the S3 target.|\n+|`s3s3-max-thread-pool-size`|No| Max number of threads to use for the transferManager thread pool. Default value is 10.|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA2MzcwMA=="}, "originalCommit": {"oid": "f5ab2b3666fda97d8ce3da90142c8acad1a20855"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3868, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}