{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0MzE3MDgz", "number": 208, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwOTo0OTo1MFrOFCOiXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTo1MDozN1rOFC4ikQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3ODc5NjQ2OnYy", "diffSide": "RIGHT", "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/S3DataManipulator.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwOTo0OTo1MFrOIBQk9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNDozMjoxNFrOIBfkDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE5MTA5NQ==", "bodyText": "Is false the most appropriate return value here? Although this is a special case, we have that 0 files have been deleted out of 0 requested (unless the return value is also an indication that a delete operation did actually take place).", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r538191095", "createdAt": "2020-12-08T09:49:50Z", "author": {"login": "nvitucci"}, "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/S3DataManipulator.java", "diffHunk": "@@ -54,6 +54,11 @@ public boolean delete(String path) {\n     List<KeyVersion> keysToDelete = getKeysToDelete(bucket, uri.getKey());\n     log.debug(\"Deleting keys: {}\", keysToDelete.stream().map(k -> k.getKey()).collect(Collectors.toList()));\n \n+    if (keysToDelete.isEmpty()) {\n+      log.info(\"Nothing to delete at location: {}\", path);\n+      return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "211c39cc3259b36c65bd6b2a1ae97dd42dd07c9d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE5NDg2Mg==", "bodyText": "Hmm, I'm not actually sure, I couldn't find the result of this method used anywhere", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r538194862", "createdAt": "2020-12-08T09:54:58Z", "author": {"login": "andreeapad"}, "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/S3DataManipulator.java", "diffHunk": "@@ -54,6 +54,11 @@ public boolean delete(String path) {\n     List<KeyVersion> keysToDelete = getKeysToDelete(bucket, uri.getKey());\n     log.debug(\"Deleting keys: {}\", keysToDelete.stream().map(k -> k.getKey()).collect(Collectors.toList()));\n \n+    if (keysToDelete.isEmpty()) {\n+      log.info(\"Nothing to delete at location: {}\", path);\n+      return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE5MTA5NQ=="}, "originalCommit": {"oid": "211c39cc3259b36c65bd6b2a1ae97dd42dd07c9d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODIwMDU0MQ==", "bodyText": "Same here, the only call I have found for this method discards the return value. @patduin, what do you think?", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r538200541", "createdAt": "2020-12-08T10:02:32Z", "author": {"login": "nvitucci"}, "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/S3DataManipulator.java", "diffHunk": "@@ -54,6 +54,11 @@ public boolean delete(String path) {\n     List<KeyVersion> keysToDelete = getKeysToDelete(bucket, uri.getKey());\n     log.debug(\"Deleting keys: {}\", keysToDelete.stream().map(k -> k.getKey()).collect(Collectors.toList()));\n \n+    if (keysToDelete.isEmpty()) {\n+      log.info(\"Nothing to delete at location: {}\", path);\n+      return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE5MTA5NQ=="}, "originalCommit": {"oid": "211c39cc3259b36c65bd6b2a1ae97dd42dd07c9d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM3NzY1NQ==", "bodyText": "I think it's ok, false is what io.File.delete() does.\nUnfortunately this class does not have a test, luckily that will soon be fixed right @andreeapad ?!? :)", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r538377655", "createdAt": "2020-12-08T13:37:28Z", "author": {"login": "patduin"}, "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/S3DataManipulator.java", "diffHunk": "@@ -54,6 +54,11 @@ public boolean delete(String path) {\n     List<KeyVersion> keysToDelete = getKeysToDelete(bucket, uri.getKey());\n     log.debug(\"Deleting keys: {}\", keysToDelete.stream().map(k -> k.getKey()).collect(Collectors.toList()));\n \n+    if (keysToDelete.isEmpty()) {\n+      log.info(\"Nothing to delete at location: {}\", path);\n+      return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE5MTA5NQ=="}, "originalCommit": {"oid": "211c39cc3259b36c65bd6b2a1ae97dd42dd07c9d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQzNjYyMQ==", "bodyText": "yes, good point @patduin  \ud83d\ude04", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r538436621", "createdAt": "2020-12-08T14:32:14Z", "author": {"login": "andreeapad"}, "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/S3DataManipulator.java", "diffHunk": "@@ -54,6 +54,11 @@ public boolean delete(String path) {\n     List<KeyVersion> keysToDelete = getKeysToDelete(bucket, uri.getKey());\n     log.debug(\"Deleting keys: {}\", keysToDelete.stream().map(k -> k.getKey()).collect(Collectors.toList()));\n \n+    if (keysToDelete.isEmpty()) {\n+      log.info(\"Nothing to delete at location: {}\", path);\n+      return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE5MTA5NQ=="}, "originalCommit": {"oid": "211c39cc3259b36c65bd6b2a1ae97dd42dd07c9d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTM3NDk0OnYy", "diffSide": "RIGHT", "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjo1OTo1OFrOIBpwOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzo0MzowN1rOIBsnUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYwMzU3OA==", "bodyText": "This may be slightly pedantic, but this test is testing that calling delete on s3://empty-bucket does what is expected.  The situation of the error is just slightly different - calling delete on s3://bucket/empty-folder/, where empty-folder has no sub-keys.  Maybe we should add a test for this (or change this test)?", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r538603578", "createdAt": "2020-12-08T16:59:58Z", "author": {"login": "barnharts4"}, "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.hadoop.fs.s3a.BasicAWSCredentialsProvider;\n+import org.gaul.s3proxy.junit.S3ProxyRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class S3DataManipulatorTest {\n+\n+  private static final String AWS_ACCESS_KEY = \"access\";\n+  private static final String AWS_SECRET_KEY = \"secret\";\n+  private static final String BUCKET = \"bucket\";\n+  private static final String EMPTY_BUCKET = \"empty-bucket\";\n+  private static final String PATH =\"s3://\" + BUCKET;\n+  private static final String EMPTY_PATH =\"s3://\" + EMPTY_BUCKET;\n+\n+  public @Rule TemporaryFolder temp = new TemporaryFolder();\n+  public @Rule S3ProxyRule s3Proxy = S3ProxyRule.builder().withCredentials(AWS_ACCESS_KEY, AWS_SECRET_KEY).build();\n+\n+  private S3DataManipulator s3DataManipulator;\n+  private AmazonS3 s3Client;\n+\n+  @Before\n+  public void setUp() {\n+    s3Client = newClient();\n+    s3DataManipulator = new S3DataManipulator(s3Client);\n+  }\n+\n+  private AmazonS3 newClient() {\n+    AwsClientBuilder.EndpointConfiguration endpointConfiguration = new AwsClientBuilder.EndpointConfiguration(s3Proxy.getUri().toString(),\n+        Regions.DEFAULT_REGION.getName());\n+    AmazonS3 newClient = AmazonS3ClientBuilder\n+        .standard()\n+        .withCredentials(new BasicAWSCredentialsProvider(AWS_ACCESS_KEY, AWS_SECRET_KEY))\n+        .withEndpointConfiguration(endpointConfiguration)\n+        .build();\n+    return newClient;\n+  }\n+\n+  @Test\n+  public void deleteFails() {\n+    s3Client.createBucket(EMPTY_BUCKET);\n+    boolean result = s3DataManipulator.delete(EMPTY_PATH);\n+    assertThat(result, is(false));\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd12f4651738060a6a61c9eceed32095433dc86"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY1MDQ1MQ==", "bodyText": "yes, I updated the tests \ud83d\udc4d", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r538650451", "createdAt": "2020-12-08T17:43:07Z", "author": {"login": "andreeapad"}, "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.hadoop.fs.s3a.BasicAWSCredentialsProvider;\n+import org.gaul.s3proxy.junit.S3ProxyRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class S3DataManipulatorTest {\n+\n+  private static final String AWS_ACCESS_KEY = \"access\";\n+  private static final String AWS_SECRET_KEY = \"secret\";\n+  private static final String BUCKET = \"bucket\";\n+  private static final String EMPTY_BUCKET = \"empty-bucket\";\n+  private static final String PATH =\"s3://\" + BUCKET;\n+  private static final String EMPTY_PATH =\"s3://\" + EMPTY_BUCKET;\n+\n+  public @Rule TemporaryFolder temp = new TemporaryFolder();\n+  public @Rule S3ProxyRule s3Proxy = S3ProxyRule.builder().withCredentials(AWS_ACCESS_KEY, AWS_SECRET_KEY).build();\n+\n+  private S3DataManipulator s3DataManipulator;\n+  private AmazonS3 s3Client;\n+\n+  @Before\n+  public void setUp() {\n+    s3Client = newClient();\n+    s3DataManipulator = new S3DataManipulator(s3Client);\n+  }\n+\n+  private AmazonS3 newClient() {\n+    AwsClientBuilder.EndpointConfiguration endpointConfiguration = new AwsClientBuilder.EndpointConfiguration(s3Proxy.getUri().toString(),\n+        Regions.DEFAULT_REGION.getName());\n+    AmazonS3 newClient = AmazonS3ClientBuilder\n+        .standard()\n+        .withCredentials(new BasicAWSCredentialsProvider(AWS_ACCESS_KEY, AWS_SECRET_KEY))\n+        .withEndpointConfiguration(endpointConfiguration)\n+        .build();\n+    return newClient;\n+  }\n+\n+  @Test\n+  public void deleteFails() {\n+    s3Client.createBucket(EMPTY_BUCKET);\n+    boolean result = s3DataManipulator.delete(EMPTY_PATH);\n+    assertThat(result, is(false));\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYwMzU3OA=="}, "originalCommit": {"oid": "8bd12f4651738060a6a61c9eceed32095433dc86"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NTMwNTA1OnYy", "diffSide": "RIGHT", "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/S3DataManipulator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMDoyNTozMFrOICNTmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMDo0MTo0NVrOICOAFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE4NjA3Mw==", "bodyText": "Maybe move this to line 61 as there's no point outputting this if there's nothing to delete?", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539186073", "createdAt": "2020-12-09T10:25:30Z", "author": {"login": "massdosage"}, "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/S3DataManipulator.java", "diffHunk": "@@ -54,6 +54,11 @@ public boolean delete(String path) {\n     List<KeyVersion> keysToDelete = getKeysToDelete(bucket, uri.getKey());\n     log.debug(\"Deleting keys: {}\", keysToDelete.stream().map(k -> k.getKey()).collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea80dd69b3602cabcb38567d923443720a3eb803"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE5NzQ2Mw==", "bodyText": "yeah", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539197463", "createdAt": "2020-12-09T10:41:45Z", "author": {"login": "andreeapad"}, "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/S3DataManipulator.java", "diffHunk": "@@ -54,6 +54,11 @@ public boolean delete(String path) {\n     List<KeyVersion> keysToDelete = getKeysToDelete(bucket, uri.getKey());\n     log.debug(\"Deleting keys: {}\", keysToDelete.stream().map(k -> k.getKey()).collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE4NjA3Mw=="}, "originalCommit": {"oid": "ea80dd69b3602cabcb38567d923443720a3eb803"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NTMxMjE1OnYy", "diffSide": "RIGHT", "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMDoyNzowMFrOICNXog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMDoyNzowMFrOICNXog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE4NzEwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void deleteInexistentFolderFails() {\n          \n          \n            \n              public void deleteNonexistentFolderFails() {", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539187106", "createdAt": "2020-12-09T10:27:00Z", "author": {"login": "massdosage"}, "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.hadoop.fs.s3a.BasicAWSCredentialsProvider;\n+import org.gaul.s3proxy.junit.S3ProxyRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class S3DataManipulatorTest {\n+\n+  private static final String AWS_ACCESS_KEY = \"access\";\n+  private static final String AWS_SECRET_KEY = \"secret\";\n+  private static final String BUCKET = \"bucket\";\n+  private static final String BUCKET_PATH = \"s3://\" + BUCKET;\n+  private static final String FOLDER = \"folder\";\n+  private static final String EMPTY_BUCKET = \"empty-bucket\";\n+\n+  public @Rule TemporaryFolder temp = new TemporaryFolder();\n+  public @Rule S3ProxyRule s3Proxy = S3ProxyRule.builder().withCredentials(AWS_ACCESS_KEY, AWS_SECRET_KEY).build();\n+\n+  private S3DataManipulator s3DataManipulator;\n+  private AmazonS3 s3Client;\n+\n+  @Before\n+  public void setUp() {\n+    s3Client = newClient();\n+    s3DataManipulator = new S3DataManipulator(s3Client);\n+  }\n+\n+  private AmazonS3 newClient() {\n+    AwsClientBuilder.EndpointConfiguration endpointConfiguration = new AwsClientBuilder.EndpointConfiguration(s3Proxy.getUri().toString(),\n+        Regions.DEFAULT_REGION.getName());\n+    AmazonS3 newClient = AmazonS3ClientBuilder\n+        .standard()\n+        .withCredentials(new BasicAWSCredentialsProvider(AWS_ACCESS_KEY, AWS_SECRET_KEY))\n+        .withEndpointConfiguration(endpointConfiguration)\n+        .build();\n+    return newClient;\n+  }\n+\n+  @Test\n+  public void deleteFolderSucceeds() throws IOException {\n+    s3Client.createBucket(BUCKET);\n+    File inputData = temp.newFile(\"data\");\n+    s3Client.putObject(BUCKET, FOLDER, inputData);\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/\" + FOLDER);\n+    assertThat(result, is(true));\n+  }\n+\n+  @Test\n+  public void deleteInexistentFolderFails() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea80dd69b3602cabcb38567d923443720a3eb803"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NTMxMzc2OnYy", "diffSide": "RIGHT", "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMDoyNzoxNVrOICNYfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMDoyNzoxNVrOICNYfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE4NzMyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/inexistent-folder\");\n          \n          \n            \n                boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/nonexistent-folder\");", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539187326", "createdAt": "2020-12-09T10:27:15Z", "author": {"login": "massdosage"}, "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.hadoop.fs.s3a.BasicAWSCredentialsProvider;\n+import org.gaul.s3proxy.junit.S3ProxyRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class S3DataManipulatorTest {\n+\n+  private static final String AWS_ACCESS_KEY = \"access\";\n+  private static final String AWS_SECRET_KEY = \"secret\";\n+  private static final String BUCKET = \"bucket\";\n+  private static final String BUCKET_PATH = \"s3://\" + BUCKET;\n+  private static final String FOLDER = \"folder\";\n+  private static final String EMPTY_BUCKET = \"empty-bucket\";\n+\n+  public @Rule TemporaryFolder temp = new TemporaryFolder();\n+  public @Rule S3ProxyRule s3Proxy = S3ProxyRule.builder().withCredentials(AWS_ACCESS_KEY, AWS_SECRET_KEY).build();\n+\n+  private S3DataManipulator s3DataManipulator;\n+  private AmazonS3 s3Client;\n+\n+  @Before\n+  public void setUp() {\n+    s3Client = newClient();\n+    s3DataManipulator = new S3DataManipulator(s3Client);\n+  }\n+\n+  private AmazonS3 newClient() {\n+    AwsClientBuilder.EndpointConfiguration endpointConfiguration = new AwsClientBuilder.EndpointConfiguration(s3Proxy.getUri().toString(),\n+        Regions.DEFAULT_REGION.getName());\n+    AmazonS3 newClient = AmazonS3ClientBuilder\n+        .standard()\n+        .withCredentials(new BasicAWSCredentialsProvider(AWS_ACCESS_KEY, AWS_SECRET_KEY))\n+        .withEndpointConfiguration(endpointConfiguration)\n+        .build();\n+    return newClient;\n+  }\n+\n+  @Test\n+  public void deleteFolderSucceeds() throws IOException {\n+    s3Client.createBucket(BUCKET);\n+    File inputData = temp.newFile(\"data\");\n+    s3Client.putObject(BUCKET, FOLDER, inputData);\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/\" + FOLDER);\n+    assertThat(result, is(true));\n+  }\n+\n+  @Test\n+  public void deleteInexistentFolderFails() {\n+    s3Client.createBucket(BUCKET);\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/inexistent-folder\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea80dd69b3602cabcb38567d923443720a3eb803"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NTMyMDA3OnYy", "diffSide": "RIGHT", "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMDoyODo0NlrOICNcaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMDozNzoxMFrOICNzqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE4ODMzMQ==", "bodyText": "Method says \"succeeds\" but assertion is on method returning false. Is the behaviour here that it will return false as it can't actually delete a bucket?", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539188331", "createdAt": "2020-12-09T10:28:46Z", "author": {"login": "massdosage"}, "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.hadoop.fs.s3a.BasicAWSCredentialsProvider;\n+import org.gaul.s3proxy.junit.S3ProxyRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class S3DataManipulatorTest {\n+\n+  private static final String AWS_ACCESS_KEY = \"access\";\n+  private static final String AWS_SECRET_KEY = \"secret\";\n+  private static final String BUCKET = \"bucket\";\n+  private static final String BUCKET_PATH = \"s3://\" + BUCKET;\n+  private static final String FOLDER = \"folder\";\n+  private static final String EMPTY_BUCKET = \"empty-bucket\";\n+\n+  public @Rule TemporaryFolder temp = new TemporaryFolder();\n+  public @Rule S3ProxyRule s3Proxy = S3ProxyRule.builder().withCredentials(AWS_ACCESS_KEY, AWS_SECRET_KEY).build();\n+\n+  private S3DataManipulator s3DataManipulator;\n+  private AmazonS3 s3Client;\n+\n+  @Before\n+  public void setUp() {\n+    s3Client = newClient();\n+    s3DataManipulator = new S3DataManipulator(s3Client);\n+  }\n+\n+  private AmazonS3 newClient() {\n+    AwsClientBuilder.EndpointConfiguration endpointConfiguration = new AwsClientBuilder.EndpointConfiguration(s3Proxy.getUri().toString(),\n+        Regions.DEFAULT_REGION.getName());\n+    AmazonS3 newClient = AmazonS3ClientBuilder\n+        .standard()\n+        .withCredentials(new BasicAWSCredentialsProvider(AWS_ACCESS_KEY, AWS_SECRET_KEY))\n+        .withEndpointConfiguration(endpointConfiguration)\n+        .build();\n+    return newClient;\n+  }\n+\n+  @Test\n+  public void deleteFolderSucceeds() throws IOException {\n+    s3Client.createBucket(BUCKET);\n+    File inputData = temp.newFile(\"data\");\n+    s3Client.putObject(BUCKET, FOLDER, inputData);\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/\" + FOLDER);\n+    assertThat(result, is(true));\n+  }\n+\n+  @Test\n+  public void deleteInexistentFolderFails() {\n+    s3Client.createBucket(BUCKET);\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/inexistent-folder\");\n+    assertThat(result, is(false));\n+  }\n+\n+  @Test\n+  public void deleteBucketSucceeds() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea80dd69b3602cabcb38567d923443720a3eb803"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE5NDI4MQ==", "bodyText": "oops, it should be fails in this case, I have to modify the test to make it succeed actually", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539194281", "createdAt": "2020-12-09T10:37:10Z", "author": {"login": "andreeapad"}, "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.hadoop.fs.s3a.BasicAWSCredentialsProvider;\n+import org.gaul.s3proxy.junit.S3ProxyRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class S3DataManipulatorTest {\n+\n+  private static final String AWS_ACCESS_KEY = \"access\";\n+  private static final String AWS_SECRET_KEY = \"secret\";\n+  private static final String BUCKET = \"bucket\";\n+  private static final String BUCKET_PATH = \"s3://\" + BUCKET;\n+  private static final String FOLDER = \"folder\";\n+  private static final String EMPTY_BUCKET = \"empty-bucket\";\n+\n+  public @Rule TemporaryFolder temp = new TemporaryFolder();\n+  public @Rule S3ProxyRule s3Proxy = S3ProxyRule.builder().withCredentials(AWS_ACCESS_KEY, AWS_SECRET_KEY).build();\n+\n+  private S3DataManipulator s3DataManipulator;\n+  private AmazonS3 s3Client;\n+\n+  @Before\n+  public void setUp() {\n+    s3Client = newClient();\n+    s3DataManipulator = new S3DataManipulator(s3Client);\n+  }\n+\n+  private AmazonS3 newClient() {\n+    AwsClientBuilder.EndpointConfiguration endpointConfiguration = new AwsClientBuilder.EndpointConfiguration(s3Proxy.getUri().toString(),\n+        Regions.DEFAULT_REGION.getName());\n+    AmazonS3 newClient = AmazonS3ClientBuilder\n+        .standard()\n+        .withCredentials(new BasicAWSCredentialsProvider(AWS_ACCESS_KEY, AWS_SECRET_KEY))\n+        .withEndpointConfiguration(endpointConfiguration)\n+        .build();\n+    return newClient;\n+  }\n+\n+  @Test\n+  public void deleteFolderSucceeds() throws IOException {\n+    s3Client.createBucket(BUCKET);\n+    File inputData = temp.newFile(\"data\");\n+    s3Client.putObject(BUCKET, FOLDER, inputData);\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/\" + FOLDER);\n+    assertThat(result, is(true));\n+  }\n+\n+  @Test\n+  public void deleteInexistentFolderFails() {\n+    s3Client.createBucket(BUCKET);\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/inexistent-folder\");\n+    assertThat(result, is(false));\n+  }\n+\n+  @Test\n+  public void deleteBucketSucceeds() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE4ODMzMQ=="}, "originalCommit": {"oid": "ea80dd69b3602cabcb38567d923443720a3eb803"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NTQyMDc1OnYy", "diffSide": "RIGHT", "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMDo1MDo1OVrOICOX1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMDo1NToyMVrOICOjRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIwMzU0MQ==", "bodyText": "I think this is actually non-existent bucket not empty right? As we don't create it anywhere.", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539203541", "createdAt": "2020-12-09T10:50:59Z", "author": {"login": "massdosage"}, "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.hadoop.fs.s3a.BasicAWSCredentialsProvider;\n+import org.gaul.s3proxy.junit.S3ProxyRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class S3DataManipulatorTest {\n+\n+  private static final String AWS_ACCESS_KEY = \"access\";\n+  private static final String AWS_SECRET_KEY = \"secret\";\n+  private static final String BUCKET = \"bucket\";\n+  private static final String BUCKET_PATH = \"s3://\" + BUCKET;\n+  private static final String FOLDER = \"folder\";\n+  private static final String EMPTY_BUCKET = \"empty-bucket\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9f728266ff5f04457b4a10e544b903398da4f4f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIwNTQwNA==", "bodyText": "We create it in the last test. If we try to delete a non-existent bucket, we get an AmazonS3Exception. Should I add a test for that as well?", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539205404", "createdAt": "2020-12-09T10:53:47Z", "author": {"login": "andreeapad"}, "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.hadoop.fs.s3a.BasicAWSCredentialsProvider;\n+import org.gaul.s3proxy.junit.S3ProxyRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class S3DataManipulatorTest {\n+\n+  private static final String AWS_ACCESS_KEY = \"access\";\n+  private static final String AWS_SECRET_KEY = \"secret\";\n+  private static final String BUCKET = \"bucket\";\n+  private static final String BUCKET_PATH = \"s3://\" + BUCKET;\n+  private static final String FOLDER = \"folder\";\n+  private static final String EMPTY_BUCKET = \"empty-bucket\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIwMzU0MQ=="}, "originalCommit": {"oid": "f9f728266ff5f04457b4a10e544b903398da4f4f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIwNjQ2OA==", "bodyText": "Ah you're right, sorry,  I missed that. Might as well add a test for a non-existent bucket, it's an edge case we should never run into but to be thorough would be good to test it.", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539206468", "createdAt": "2020-12-09T10:55:21Z", "author": {"login": "massdosage"}, "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.hadoop.fs.s3a.BasicAWSCredentialsProvider;\n+import org.gaul.s3proxy.junit.S3ProxyRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class S3DataManipulatorTest {\n+\n+  private static final String AWS_ACCESS_KEY = \"access\";\n+  private static final String AWS_SECRET_KEY = \"secret\";\n+  private static final String BUCKET = \"bucket\";\n+  private static final String BUCKET_PATH = \"s3://\" + BUCKET;\n+  private static final String FOLDER = \"folder\";\n+  private static final String EMPTY_BUCKET = \"empty-bucket\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIwMzU0MQ=="}, "originalCommit": {"oid": "f9f728266ff5f04457b4a10e544b903398da4f4f"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NTQ2NzM2OnYy", "diffSide": "RIGHT", "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTowMTozMlrOICOznw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTowOTozOVrOICPIiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIxMDY1NQ==", "bodyText": "If this throws an exception you don't need to store the result or assert on it as that code will never execute.", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539210655", "createdAt": "2020-12-09T11:01:32Z", "author": {"login": "massdosage"}, "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.hadoop.fs.s3a.BasicAWSCredentialsProvider;\n+import org.gaul.s3proxy.junit.S3ProxyRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+import com.amazonaws.services.s3.model.AmazonS3Exception;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class S3DataManipulatorTest {\n+\n+  private static final String AWS_ACCESS_KEY = \"access\";\n+  private static final String AWS_SECRET_KEY = \"secret\";\n+  private static final String BUCKET = \"bucket\";\n+  private static final String BUCKET_PATH = \"s3://\" + BUCKET;\n+  private static final String FOLDER = \"folder\";\n+  private static final String EMPTY_BUCKET = \"empty-bucket\";\n+\n+  public @Rule TemporaryFolder temp = new TemporaryFolder();\n+  public @Rule S3ProxyRule s3Proxy = S3ProxyRule.builder().withCredentials(AWS_ACCESS_KEY, AWS_SECRET_KEY).build();\n+\n+  private S3DataManipulator s3DataManipulator;\n+  private AmazonS3 s3Client;\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    s3Client = newClient();\n+    s3DataManipulator = new S3DataManipulator(s3Client);\n+    s3Client.createBucket(BUCKET);\n+    File inputData = temp.newFile(\"data\");\n+    s3Client.putObject(BUCKET, FOLDER, inputData);\n+  }\n+\n+  private AmazonS3 newClient() {\n+    AwsClientBuilder.EndpointConfiguration endpointConfiguration = new AwsClientBuilder.EndpointConfiguration(s3Proxy.getUri().toString(),\n+        Regions.DEFAULT_REGION.getName());\n+    AmazonS3 newClient = AmazonS3ClientBuilder\n+        .standard()\n+        .withCredentials(new BasicAWSCredentialsProvider(AWS_ACCESS_KEY, AWS_SECRET_KEY))\n+        .withEndpointConfiguration(endpointConfiguration)\n+        .build();\n+    return newClient;\n+  }\n+\n+  @Test\n+  public void deleteFolderSucceeds() {\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/\" + FOLDER);\n+    assertThat(result, is(true));\n+  }\n+\n+  @Test\n+  public void deleteNonexistentFolderFails() {\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/nonexistent-folder\");\n+    assertThat(result, is(false));\n+  }\n+\n+  @Test\n+  public void deleteBucketSucceeds() {\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH);\n+    assertThat(result, is(true));\n+  }\n+\n+  @Test\n+  public void deleteEmptyBucketFails() {\n+    s3Client.createBucket(EMPTY_BUCKET);\n+    boolean result = s3DataManipulator.delete(\"s3://\" + EMPTY_BUCKET);\n+    assertThat(result, is(false));\n+  }\n+\n+  @Test(expected = AmazonS3Exception.class)\n+  public void deleteNonExistentBucketThrowsException() {\n+    boolean result = s3DataManipulator.delete(\"s3://\" + \"nonexistent-bucket\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "775991bef427d18f040ccbd11238504ce2df73b3"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIxNjAwOQ==", "bodyText": "true, copy pasted and forgot to update \ud83d\ude04", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539216009", "createdAt": "2020-12-09T11:09:39Z", "author": {"login": "andreeapad"}, "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.hadoop.fs.s3a.BasicAWSCredentialsProvider;\n+import org.gaul.s3proxy.junit.S3ProxyRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+import com.amazonaws.services.s3.model.AmazonS3Exception;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class S3DataManipulatorTest {\n+\n+  private static final String AWS_ACCESS_KEY = \"access\";\n+  private static final String AWS_SECRET_KEY = \"secret\";\n+  private static final String BUCKET = \"bucket\";\n+  private static final String BUCKET_PATH = \"s3://\" + BUCKET;\n+  private static final String FOLDER = \"folder\";\n+  private static final String EMPTY_BUCKET = \"empty-bucket\";\n+\n+  public @Rule TemporaryFolder temp = new TemporaryFolder();\n+  public @Rule S3ProxyRule s3Proxy = S3ProxyRule.builder().withCredentials(AWS_ACCESS_KEY, AWS_SECRET_KEY).build();\n+\n+  private S3DataManipulator s3DataManipulator;\n+  private AmazonS3 s3Client;\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    s3Client = newClient();\n+    s3DataManipulator = new S3DataManipulator(s3Client);\n+    s3Client.createBucket(BUCKET);\n+    File inputData = temp.newFile(\"data\");\n+    s3Client.putObject(BUCKET, FOLDER, inputData);\n+  }\n+\n+  private AmazonS3 newClient() {\n+    AwsClientBuilder.EndpointConfiguration endpointConfiguration = new AwsClientBuilder.EndpointConfiguration(s3Proxy.getUri().toString(),\n+        Regions.DEFAULT_REGION.getName());\n+    AmazonS3 newClient = AmazonS3ClientBuilder\n+        .standard()\n+        .withCredentials(new BasicAWSCredentialsProvider(AWS_ACCESS_KEY, AWS_SECRET_KEY))\n+        .withEndpointConfiguration(endpointConfiguration)\n+        .build();\n+    return newClient;\n+  }\n+\n+  @Test\n+  public void deleteFolderSucceeds() {\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/\" + FOLDER);\n+    assertThat(result, is(true));\n+  }\n+\n+  @Test\n+  public void deleteNonexistentFolderFails() {\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/nonexistent-folder\");\n+    assertThat(result, is(false));\n+  }\n+\n+  @Test\n+  public void deleteBucketSucceeds() {\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH);\n+    assertThat(result, is(true));\n+  }\n+\n+  @Test\n+  public void deleteEmptyBucketFails() {\n+    s3Client.createBucket(EMPTY_BUCKET);\n+    boolean result = s3DataManipulator.delete(\"s3://\" + EMPTY_BUCKET);\n+    assertThat(result, is(false));\n+  }\n+\n+  @Test(expected = AmazonS3Exception.class)\n+  public void deleteNonExistentBucketThrowsException() {\n+    boolean result = s3DataManipulator.delete(\"s3://\" + \"nonexistent-bucket\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIxMDY1NQ=="}, "originalCommit": {"oid": "775991bef427d18f040ccbd11238504ce2df73b3"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NTY3NTc4OnYy", "diffSide": "RIGHT", "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTo1MDowM1rOICQsWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMjoxMjowMlrOICRgnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI0MTU2Mg==", "bodyText": "OMG, not sure how this slipped through but we don't want * imports, please get your IDE to expand these.", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539241562", "createdAt": "2020-12-09T11:50:03Z", "author": {"login": "massdosage"}, "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffebcfff8005c8537a6cef454f483764a3795b9a"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI1NDk0Mw==", "bodyText": "fixed, not sure what happened either", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539254943", "createdAt": "2020-12-09T12:12:02Z", "author": {"login": "andreeapad"}, "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI0MTU2Mg=="}, "originalCommit": {"oid": "ffebcfff8005c8537a6cef454f483764a3795b9a"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NTY3ODI1OnYy", "diffSide": "RIGHT", "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTo1MDozN1rOICQttA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMjowNzoyOFrOICRWEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI0MTkwOA==", "bodyText": "You don't need the + :)", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539241908", "createdAt": "2020-12-09T11:50:37Z", "author": {"login": "massdosage"}, "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.hadoop.fs.s3a.BasicAWSCredentialsProvider;\n+import org.gaul.s3proxy.junit.S3ProxyRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+import com.amazonaws.services.s3.model.AmazonS3Exception;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class S3DataManipulatorTest {\n+\n+  private static final String AWS_ACCESS_KEY = \"access\";\n+  private static final String AWS_SECRET_KEY = \"secret\";\n+  private static final String BUCKET = \"bucket\";\n+  private static final String BUCKET_PATH = \"s3://\" + BUCKET;\n+  private static final String FOLDER = \"folder\";\n+  private static final String EMPTY_BUCKET = \"empty-bucket\";\n+\n+  public @Rule TemporaryFolder temp = new TemporaryFolder();\n+  public @Rule S3ProxyRule s3Proxy = S3ProxyRule.builder().withCredentials(AWS_ACCESS_KEY, AWS_SECRET_KEY).build();\n+\n+  private S3DataManipulator s3DataManipulator;\n+  private AmazonS3 s3Client;\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    s3Client = newClient();\n+    s3DataManipulator = new S3DataManipulator(s3Client);\n+    s3Client.createBucket(BUCKET);\n+    File inputData = temp.newFile(\"data\");\n+    s3Client.putObject(BUCKET, FOLDER, inputData);\n+  }\n+\n+  private AmazonS3 newClient() {\n+    AwsClientBuilder.EndpointConfiguration endpointConfiguration = new AwsClientBuilder.EndpointConfiguration(s3Proxy.getUri().toString(),\n+        Regions.DEFAULT_REGION.getName());\n+    AmazonS3 newClient = AmazonS3ClientBuilder\n+        .standard()\n+        .withCredentials(new BasicAWSCredentialsProvider(AWS_ACCESS_KEY, AWS_SECRET_KEY))\n+        .withEndpointConfiguration(endpointConfiguration)\n+        .build();\n+    return newClient;\n+  }\n+\n+  @Test\n+  public void deleteFolderSucceeds() {\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/\" + FOLDER);\n+    assertThat(result, is(true));\n+  }\n+\n+  @Test\n+  public void deleteNonexistentFolderFails() {\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/nonexistent-folder\");\n+    assertThat(result, is(false));\n+  }\n+\n+  @Test\n+  public void deleteBucketSucceeds() {\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH);\n+    assertThat(result, is(true));\n+  }\n+\n+  @Test\n+  public void deleteEmptyBucketFails() {\n+    s3Client.createBucket(EMPTY_BUCKET);\n+    boolean result = s3DataManipulator.delete(\"s3://\" + EMPTY_BUCKET);\n+    assertThat(result, is(false));\n+  }\n+\n+  @Test(expected = AmazonS3Exception.class)\n+  public void deleteNonExistentBucketThrowsException() {\n+    s3DataManipulator.delete(\"s3://\" + \"nonexistent-bucket\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffebcfff8005c8537a6cef454f483764a3795b9a"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI1MjI0Mg==", "bodyText": "ahhhhh", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539252242", "createdAt": "2020-12-09T12:07:28Z", "author": {"login": "andreeapad"}, "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.hadoop.fs.s3a.BasicAWSCredentialsProvider;\n+import org.gaul.s3proxy.junit.S3ProxyRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+import com.amazonaws.services.s3.model.AmazonS3Exception;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class S3DataManipulatorTest {\n+\n+  private static final String AWS_ACCESS_KEY = \"access\";\n+  private static final String AWS_SECRET_KEY = \"secret\";\n+  private static final String BUCKET = \"bucket\";\n+  private static final String BUCKET_PATH = \"s3://\" + BUCKET;\n+  private static final String FOLDER = \"folder\";\n+  private static final String EMPTY_BUCKET = \"empty-bucket\";\n+\n+  public @Rule TemporaryFolder temp = new TemporaryFolder();\n+  public @Rule S3ProxyRule s3Proxy = S3ProxyRule.builder().withCredentials(AWS_ACCESS_KEY, AWS_SECRET_KEY).build();\n+\n+  private S3DataManipulator s3DataManipulator;\n+  private AmazonS3 s3Client;\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    s3Client = newClient();\n+    s3DataManipulator = new S3DataManipulator(s3Client);\n+    s3Client.createBucket(BUCKET);\n+    File inputData = temp.newFile(\"data\");\n+    s3Client.putObject(BUCKET, FOLDER, inputData);\n+  }\n+\n+  private AmazonS3 newClient() {\n+    AwsClientBuilder.EndpointConfiguration endpointConfiguration = new AwsClientBuilder.EndpointConfiguration(s3Proxy.getUri().toString(),\n+        Regions.DEFAULT_REGION.getName());\n+    AmazonS3 newClient = AmazonS3ClientBuilder\n+        .standard()\n+        .withCredentials(new BasicAWSCredentialsProvider(AWS_ACCESS_KEY, AWS_SECRET_KEY))\n+        .withEndpointConfiguration(endpointConfiguration)\n+        .build();\n+    return newClient;\n+  }\n+\n+  @Test\n+  public void deleteFolderSucceeds() {\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/\" + FOLDER);\n+    assertThat(result, is(true));\n+  }\n+\n+  @Test\n+  public void deleteNonexistentFolderFails() {\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/nonexistent-folder\");\n+    assertThat(result, is(false));\n+  }\n+\n+  @Test\n+  public void deleteBucketSucceeds() {\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH);\n+    assertThat(result, is(true));\n+  }\n+\n+  @Test\n+  public void deleteEmptyBucketFails() {\n+    s3Client.createBucket(EMPTY_BUCKET);\n+    boolean result = s3DataManipulator.delete(\"s3://\" + EMPTY_BUCKET);\n+    assertThat(result, is(false));\n+  }\n+\n+  @Test(expected = AmazonS3Exception.class)\n+  public void deleteNonExistentBucketThrowsException() {\n+    s3DataManipulator.delete(\"s3://\" + \"nonexistent-bucket\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI0MTkwOA=="}, "originalCommit": {"oid": "ffebcfff8005c8537a6cef454f483764a3795b9a"}, "originalPosition": 102}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3923, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}