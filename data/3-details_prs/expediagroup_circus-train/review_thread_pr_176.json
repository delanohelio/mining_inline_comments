{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3ODgyNzY4", "number": 176, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzoxOTo1MVrODn6dCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTozOTowOVrODoSu8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTc4NzYyOnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzoxOTo1MVrOF2MHBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzozNjo0MVrOF2Mqtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2NTgzMA==", "bodyText": "As per @massdosage\n\nI don't want to overcomplicate things but I do want to make sure our configuration across the whole project is consistent. Currently when we've used the word duration (see expired-path-duration) this refers to an ISO duration (see https://www.digi.com/resources/documentation/digidocs/90001437-13/reference/r_iso_8601_duration_format.htm). The other time-based configuration I can spot is the metrics reporter period and time-unit. I'd prefer we use that, or if we only ever want to support seconds then we add that to the configuration property name.", "url": "https://github.com/ExpediaGroup/circus-train/pull/176#discussion_r392365830", "createdAt": "2020-03-13T17:19:51Z", "author": {"login": "KenFigueiredo"}, "path": "README.md", "diffHunk": "@@ -396,7 +396,9 @@ If data is being replicated from S3 to S3 then Circus Train will use the AWS S3\n |`copier-options.canned-acl`|No|AWS Canned ACL name. See [Access Control List (ACL) Overview](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) for possible values. If not specified `S3S3Copier` will not specify any canned ACL.|\n |`copier-options.copier-factory-class`|No|Controls which copier is used for replication if provided.|\n |`copier-options.s3s3-retry-max-copy-attempts`|No|Controls the maximum number of attempts if AWS throws an error during copy. Default value is 3.|\n-| `copier-options.assume-role`|No|ARN of an IAM role to assume when writing S3 data to the target S3 location. Useful when the target is in a different AWS account than Circus Train is running in. Note that if JCEKS is also configured, JCEKS credentials will be used instead of assuming a role. If `assume-role` is not specified, the copier will use instance credentials. The role provided must have read access to the S3 source and write access to the S3 target.|\n+|`copier-options.assume-role`|No|ARN of an IAM role to assume when writing S3 data to the target S3 location. Useful when the target is in a different AWS account than Circus Train is running in. Note that if JCEKS is also configured, JCEKS credentials will be used instead of assuming a role. If `assume-role` is not specified, the copier will use instance credentials. The role provided must have read access to the S3 source and write access to the S3 target.|\n+|`copier-options.assume-role-credential-duration`|No| Amount of time (in seconds) that the AWS SDK should assume the given role for. Default value is 12 hours.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b7356b0958d6ec301ced55981b6811b0d2b53f5"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3NDk2Nw==", "bodyText": "switched name to assume-role-credential-period", "url": "https://github.com/ExpediaGroup/circus-train/pull/176#discussion_r392374967", "createdAt": "2020-03-13T17:36:41Z", "author": {"login": "KenFigueiredo"}, "path": "README.md", "diffHunk": "@@ -396,7 +396,9 @@ If data is being replicated from S3 to S3 then Circus Train will use the AWS S3\n |`copier-options.canned-acl`|No|AWS Canned ACL name. See [Access Control List (ACL) Overview](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) for possible values. If not specified `S3S3Copier` will not specify any canned ACL.|\n |`copier-options.copier-factory-class`|No|Controls which copier is used for replication if provided.|\n |`copier-options.s3s3-retry-max-copy-attempts`|No|Controls the maximum number of attempts if AWS throws an error during copy. Default value is 3.|\n-| `copier-options.assume-role`|No|ARN of an IAM role to assume when writing S3 data to the target S3 location. Useful when the target is in a different AWS account than Circus Train is running in. Note that if JCEKS is also configured, JCEKS credentials will be used instead of assuming a role. If `assume-role` is not specified, the copier will use instance credentials. The role provided must have read access to the S3 source and write access to the S3 target.|\n+|`copier-options.assume-role`|No|ARN of an IAM role to assume when writing S3 data to the target S3 location. Useful when the target is in a different AWS account than Circus Train is running in. Note that if JCEKS is also configured, JCEKS credentials will be used instead of assuming a role. If `assume-role` is not specified, the copier will use instance credentials. The role provided must have read access to the S3 source and write access to the S3 target.|\n+|`copier-options.assume-role-credential-duration`|No| Amount of time (in seconds) that the AWS SDK should assume the given role for. Default value is 12 hours.|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2NTgzMA=="}, "originalCommit": {"oid": "6b7356b0958d6ec301ced55981b6811b0d2b53f5"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTc5MTc3OnYy", "diffSide": "RIGHT", "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzoyMDo1OVrOF2MJgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzoyMDo1OVrOF2MJgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2NjQ2Nw==", "bodyText": "As per @massdosage\n\nMove this to line 42, there's no point getting the duration if this is going to fail.", "url": "https://github.com/ExpediaGroup/circus-train/pull/176#discussion_r392366467", "createdAt": "2020-03-13T17:20:59Z", "author": {"login": "KenFigueiredo"}, "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "diffHunk": "@@ -16,45 +16,59 @@\n package com.hotels.bdp.circustrain.aws;\n \n import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.hadoop.conf.Configuration;\n \n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleCredentialDuration\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = (int) TimeUnit.HOURS.toSeconds(12); // max duration in seconds for assumed role credentials\n \n-  private AWSCredentials credentials;\n   private final Configuration conf;\n+  private STSAssumeRoleSessionCredentialsProvider credProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n+  private void initializeCredProvider() {\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    int credDuration = conf.getInt(ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n+\n+    checkArgument(StringUtils.isNotEmpty(roleArn),\n+        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b7356b0958d6ec301ced55981b6811b0d2b53f5"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTc5MzM1OnYy", "diffSide": "RIGHT", "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzoyMToyOFrOF2MKig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTozOTo1N1rOF2wJ-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2NjczMA==", "bodyText": "As per @massdosage\n\nI'm a bit confused why there are so many other changes to this class when the only change I can really see that is necessary is making this value configurable instead of a hardcoded value?", "url": "https://github.com/ExpediaGroup/circus-train/pull/176#discussion_r392366730", "createdAt": "2020-03-13T17:21:28Z", "author": {"login": "KenFigueiredo"}, "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "diffHunk": "@@ -16,45 +16,59 @@\n package com.hotels.bdp.circustrain.aws;\n \n import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.hadoop.conf.Configuration;\n \n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleCredentialDuration\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = (int) TimeUnit.HOURS.toSeconds(12); // max duration in seconds for assumed role credentials\n \n-  private AWSCredentials credentials;\n   private final Configuration conf;\n+  private STSAssumeRoleSessionCredentialsProvider credProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n+  private void initializeCredProvider() {\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    int credDuration = conf.getInt(ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n+\n+    checkArgument(StringUtils.isNotEmpty(roleArn),\n+        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n+\n+    // STSAssumeRoleSessionCredentialsProvider should auto refresh its creds in the background.\n+    this.credProvider = new STSAssumeRoleSessionCredentialsProvider\n+        .Builder(roleArn, \"ct-assume-role-session\")\n+        .withRoleSessionDurationSeconds(credDuration)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b7356b0958d6ec301ced55981b6811b0d2b53f5"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3NjYxMg==", "bodyText": "So it's two changes to resolve this issue:\n\nMake the assume role time configurable to allow roles that have shorter assume durations than 12 hours\nDon't cache the credential in our AssumeRoleCredentialProvider. The issue being that we we're holding the token and never refreshing it. If we had a replication that lasted more than 12 hours we'd start failing with expiredToken errors from AWS", "url": "https://github.com/ExpediaGroup/circus-train/pull/176#discussion_r392376612", "createdAt": "2020-03-13T17:39:48Z", "author": {"login": "KenFigueiredo"}, "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "diffHunk": "@@ -16,45 +16,59 @@\n package com.hotels.bdp.circustrain.aws;\n \n import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.hadoop.conf.Configuration;\n \n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleCredentialDuration\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = (int) TimeUnit.HOURS.toSeconds(12); // max duration in seconds for assumed role credentials\n \n-  private AWSCredentials credentials;\n   private final Configuration conf;\n+  private STSAssumeRoleSessionCredentialsProvider credProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n+  private void initializeCredProvider() {\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    int credDuration = conf.getInt(ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n+\n+    checkArgument(StringUtils.isNotEmpty(roleArn),\n+        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n+\n+    // STSAssumeRoleSessionCredentialsProvider should auto refresh its creds in the background.\n+    this.credProvider = new STSAssumeRoleSessionCredentialsProvider\n+        .Builder(roleArn, \"ct-assume-role-session\")\n+        .withRoleSessionDurationSeconds(credDuration)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2NjczMA=="}, "originalCommit": {"oid": "6b7356b0958d6ec301ced55981b6811b0d2b53f5"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5Mjg1MA==", "bodyText": "To expand on that, Ken's changes now enable STSAssumeRoleSessionCredentialsProvider's built-in refresher background thread, so that the user of this class doesn't have to worry about calling refresh manually before the duration times out.", "url": "https://github.com/ExpediaGroup/circus-train/pull/176#discussion_r392392850", "createdAt": "2020-03-13T18:12:46Z", "author": {"login": "barnharts4"}, "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "diffHunk": "@@ -16,45 +16,59 @@\n package com.hotels.bdp.circustrain.aws;\n \n import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.hadoop.conf.Configuration;\n \n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleCredentialDuration\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = (int) TimeUnit.HOURS.toSeconds(12); // max duration in seconds for assumed role credentials\n \n-  private AWSCredentials credentials;\n   private final Configuration conf;\n+  private STSAssumeRoleSessionCredentialsProvider credProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n+  private void initializeCredProvider() {\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    int credDuration = conf.getInt(ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n+\n+    checkArgument(StringUtils.isNotEmpty(roleArn),\n+        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n+\n+    // STSAssumeRoleSessionCredentialsProvider should auto refresh its creds in the background.\n+    this.credProvider = new STSAssumeRoleSessionCredentialsProvider\n+        .Builder(roleArn, \"ct-assume-role-session\")\n+        .withRoleSessionDurationSeconds(credDuration)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2NjczMA=="}, "originalCommit": {"oid": "6b7356b0958d6ec301ced55981b6811b0d2b53f5"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk1NjQwOA==", "bodyText": "OK, thanks for the further explanation, makes sense.", "url": "https://github.com/ExpediaGroup/circus-train/pull/176#discussion_r392956408", "createdAt": "2020-03-16T11:39:57Z", "author": {"login": "massdosage"}, "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "diffHunk": "@@ -16,45 +16,59 @@\n package com.hotels.bdp.circustrain.aws;\n \n import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.hadoop.conf.Configuration;\n \n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleCredentialDuration\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = (int) TimeUnit.HOURS.toSeconds(12); // max duration in seconds for assumed role credentials\n \n-  private AWSCredentials credentials;\n   private final Configuration conf;\n+  private STSAssumeRoleSessionCredentialsProvider credProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n+  private void initializeCredProvider() {\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    int credDuration = conf.getInt(ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n+\n+    checkArgument(StringUtils.isNotEmpty(roleArn),\n+        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n+\n+    // STSAssumeRoleSessionCredentialsProvider should auto refresh its creds in the background.\n+    this.credProvider = new STSAssumeRoleSessionCredentialsProvider\n+        .Builder(roleArn, \"ct-assume-role-session\")\n+        .withRoleSessionDurationSeconds(credDuration)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2NjczMA=="}, "originalCommit": {"oid": "6b7356b0958d6ec301ced55981b6811b0d2b53f5"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTc5NjY4OnYy", "diffSide": "RIGHT", "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzoyMjoyN1rOF2MMvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzoyMjoyN1rOF2MMvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2NzI5Mg==", "bodyText": "As per @massdosage\n\nSuggestion:\nprivate STSAssumeRoleSessionCredentialsProvider credentialsProvider;", "url": "https://github.com/ExpediaGroup/circus-train/pull/176#discussion_r392367292", "createdAt": "2020-03-13T17:22:27Z", "author": {"login": "KenFigueiredo"}, "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "diffHunk": "@@ -16,45 +16,59 @@\n package com.hotels.bdp.circustrain.aws;\n \n import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.hadoop.conf.Configuration;\n \n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleCredentialDuration\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = (int) TimeUnit.HOURS.toSeconds(12); // max duration in seconds for assumed role credentials\n \n-  private AWSCredentials credentials;\n   private final Configuration conf;\n+  private STSAssumeRoleSessionCredentialsProvider credProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b7356b0958d6ec301ced55981b6811b0d2b53f5"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTc5ODM3OnYy", "diffSide": "RIGHT", "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzoyMzowMFrOF2MN3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzoyMzowMFrOF2MN3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2NzU4MA==", "bodyText": "As per @massdosage\n\nSuggestion:\nprivate void initializeCredentialProvider() {", "url": "https://github.com/ExpediaGroup/circus-train/pull/176#discussion_r392367580", "createdAt": "2020-03-13T17:23:00Z", "author": {"login": "KenFigueiredo"}, "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "diffHunk": "@@ -16,45 +16,59 @@\n package com.hotels.bdp.circustrain.aws;\n \n import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.hadoop.conf.Configuration;\n \n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleCredentialDuration\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = (int) TimeUnit.HOURS.toSeconds(12); // max duration in seconds for assumed role credentials\n \n-  private AWSCredentials credentials;\n   private final Configuration conf;\n+  private STSAssumeRoleSessionCredentialsProvider credProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n+  private void initializeCredProvider() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b7356b0958d6ec301ced55981b6811b0d2b53f5"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjI4ODUwOnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMDoxODowOFrOF2RFDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzo1MDo1MVrOF21ApA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ0NzI0NA==", "bodyText": "copy paste leftover?", "url": "https://github.com/ExpediaGroup/circus-train/pull/176#discussion_r392447244", "createdAt": "2020-03-13T20:18:08Z", "author": {"login": "patduin"}, "path": "README.md", "diffHunk": "@@ -396,7 +396,9 @@ If data is being replicated from S3 to S3 then Circus Train will use the AWS S3\n |`copier-options.canned-acl`|No|AWS Canned ACL name. See [Access Control List (ACL) Overview](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) for possible values. If not specified `S3S3Copier` will not specify any canned ACL.|\n |`copier-options.copier-factory-class`|No|Controls which copier is used for replication if provided.|\n |`copier-options.s3s3-retry-max-copy-attempts`|No|Controls the maximum number of attempts if AWS throws an error during copy. Default value is 3.|\n-| `copier-options.assume-role`|No|ARN of an IAM role to assume when writing S3 data to the target S3 location. Useful when the target is in a different AWS account than Circus Train is running in. Note that if JCEKS is also configured, JCEKS credentials will be used instead of assuming a role. If `assume-role` is not specified, the copier will use instance credentials. The role provided must have read access to the S3 source and write access to the S3 target.|\n+|`copier-options.assume-role`|No|ARN of an IAM role to assume when writing S3 data to the target S3 location. Useful when the target is in a different AWS account than Circus Train is running in. Note that if JCEKS is also configured, JCEKS credentials will be used instead of assuming a role. If `assume-role` is not specified, the copier will use instance credentials. The role provided must have read access to the S3 source and write access to the S3 target.|\n+|`copier-options.assume-role-credential-period`|No| Amount of time (in seconds) that the AWS SDK should assume the given role for. Default value is 12 hours.|\n+|`s3s3-max-thread-pool-size`|No| Max number of threads to use for the transferManager thread pool. Defaults internally to 10 if unset on the client.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "896bf6889a2d32e275508e813424f2690ac69177"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAzNTk0MA==", "bodyText": "yup - good catch. Removed!", "url": "https://github.com/ExpediaGroup/circus-train/pull/176#discussion_r393035940", "createdAt": "2020-03-16T13:50:51Z", "author": {"login": "KenFigueiredo"}, "path": "README.md", "diffHunk": "@@ -396,7 +396,9 @@ If data is being replicated from S3 to S3 then Circus Train will use the AWS S3\n |`copier-options.canned-acl`|No|AWS Canned ACL name. See [Access Control List (ACL) Overview](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) for possible values. If not specified `S3S3Copier` will not specify any canned ACL.|\n |`copier-options.copier-factory-class`|No|Controls which copier is used for replication if provided.|\n |`copier-options.s3s3-retry-max-copy-attempts`|No|Controls the maximum number of attempts if AWS throws an error during copy. Default value is 3.|\n-| `copier-options.assume-role`|No|ARN of an IAM role to assume when writing S3 data to the target S3 location. Useful when the target is in a different AWS account than Circus Train is running in. Note that if JCEKS is also configured, JCEKS credentials will be used instead of assuming a role. If `assume-role` is not specified, the copier will use instance credentials. The role provided must have read access to the S3 source and write access to the S3 target.|\n+|`copier-options.assume-role`|No|ARN of an IAM role to assume when writing S3 data to the target S3 location. Useful when the target is in a different AWS account than Circus Train is running in. Note that if JCEKS is also configured, JCEKS credentials will be used instead of assuming a role. If `assume-role` is not specified, the copier will use instance credentials. The role provided must have read access to the S3 source and write access to the S3 target.|\n+|`copier-options.assume-role-credential-period`|No| Amount of time (in seconds) that the AWS SDK should assume the given role for. Default value is 12 hours.|\n+|`s3s3-max-thread-pool-size`|No| Max number of threads to use for the transferManager thread pool. Defaults internally to 10 if unset on the client.|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ0NzI0NA=="}, "originalCommit": {"oid": "896bf6889a2d32e275508e813424f2690ac69177"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTc0MDM5OnYy", "diffSide": "RIGHT", "path": "CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTozMTozMFrOF2v4-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTozMTozMFrOF2v4-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk1MjA1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Fix AssumeRoleCredentialProvider not auto renewing credentials on expiration.\n          \n          \n            \n            * Fix AssumeRoleCredentialProvider not auto-renewing credentials on expiration.", "url": "https://github.com/ExpediaGroup/circus-train/pull/176#discussion_r392952056", "createdAt": "2020-03-16T11:31:30Z", "author": {"login": "massdosage"}, "path": "CHANGELOG.md", "diffHunk": "@@ -1,3 +1,7 @@\n+## [16.0.1] - TBD\n+### Changed\n+* Fix AssumeRoleCredentialProvider not auto renewing credentials on expiration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "896bf6889a2d32e275508e813424f2690ac69177"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTc0OTYyOnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTozNDoyMVrOF2v-oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTozNDoyMVrOF2v-oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk1MzUwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |`copier-options.assume-role-credential-period`|No| Amount of time (in seconds) that the AWS SDK should assume the given role for. Default value is 12 hours.|\n          \n          \n            \n            |`copier-options.assume-role-session-duration-seconds`|No| Amount of time (in seconds) that the AWS SDK should assume the given role for. Default value is 12 hours.|\n          \n      \n    \n    \n  \n\nNow that I read through the code I see that AWS call it \"roleSessionDurationSeconds\" so I think that's the best thing to name it so people familiar with their SDK well recognise it.", "url": "https://github.com/ExpediaGroup/circus-train/pull/176#discussion_r392953504", "createdAt": "2020-03-16T11:34:21Z", "author": {"login": "massdosage"}, "path": "README.md", "diffHunk": "@@ -396,7 +396,9 @@ If data is being replicated from S3 to S3 then Circus Train will use the AWS S3\n |`copier-options.canned-acl`|No|AWS Canned ACL name. See [Access Control List (ACL) Overview](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) for possible values. If not specified `S3S3Copier` will not specify any canned ACL.|\n |`copier-options.copier-factory-class`|No|Controls which copier is used for replication if provided.|\n |`copier-options.s3s3-retry-max-copy-attempts`|No|Controls the maximum number of attempts if AWS throws an error during copy. Default value is 3.|\n-| `copier-options.assume-role`|No|ARN of an IAM role to assume when writing S3 data to the target S3 location. Useful when the target is in a different AWS account than Circus Train is running in. Note that if JCEKS is also configured, JCEKS credentials will be used instead of assuming a role. If `assume-role` is not specified, the copier will use instance credentials. The role provided must have read access to the S3 source and write access to the S3 target.|\n+|`copier-options.assume-role`|No|ARN of an IAM role to assume when writing S3 data to the target S3 location. Useful when the target is in a different AWS account than Circus Train is running in. Note that if JCEKS is also configured, JCEKS credentials will be used instead of assuming a role. If `assume-role` is not specified, the copier will use instance credentials. The role provided must have read access to the S3 source and write access to the S3 target.|\n+|`copier-options.assume-role-credential-period`|No| Amount of time (in seconds) that the AWS SDK should assume the given role for. Default value is 12 hours.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "896bf6889a2d32e275508e813424f2690ac69177"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTc2MzQ0OnYy", "diffSide": "RIGHT", "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTozODozMlrOF2wHIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTozODozMlrOF2wHIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk1NTY4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final String ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleCredentialDuration\";\n          \n          \n            \n              public static final String ASSUME_ROLE_SESSION_DURATION_SECONDS_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleSessionDurationSeconds\";\n          \n      \n    \n    \n  \n\netc...", "url": "https://github.com/ExpediaGroup/circus-train/pull/176#discussion_r392955682", "createdAt": "2020-03-16T11:38:32Z", "author": {"login": "massdosage"}, "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "diffHunk": "@@ -16,45 +16,58 @@\n package com.hotels.bdp.circustrain.aws;\n \n import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.hadoop.conf.Configuration;\n \n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleCredentialDuration\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "896bf6889a2d32e275508e813424f2690ac69177"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTc2NTYxOnYy", "diffSide": "RIGHT", "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTozOToxMFrOF2wIfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTozOToxMFrOF2wIfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk1NjAyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                int credDuration = conf.getInt(ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);\n          \n          \n            \n                int rollSessionDuration = conf.getInt(ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);", "url": "https://github.com/ExpediaGroup/circus-train/pull/176#discussion_r392956028", "createdAt": "2020-03-16T11:39:10Z", "author": {"login": "massdosage"}, "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/AssumeRoleCredentialProvider.java", "diffHunk": "@@ -16,45 +16,58 @@\n package com.hotels.bdp.circustrain.aws;\n \n import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.hadoop.conf.Configuration;\n \n import com.amazonaws.auth.AWSCredentials;\n import com.amazonaws.auth.AWSCredentialsProvider;\n import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;\n-import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider.Builder;\n \n public class AssumeRoleCredentialProvider implements AWSCredentialsProvider {\n \n   public static final String ASSUME_ROLE_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRole\";\n-  private static final int CREDENTIALS_DURATION = 12 * 60 * 60; // max duration in seconds for assumed role credentials\n+  public static final String ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME = \"com.hotels.bdp.circustrain.aws.AssumeRoleCredentialProvider.assumeRoleCredentialDuration\";\n+  private static final int DEFAULT_CREDENTIALS_DURATION = (int) TimeUnit.HOURS.toSeconds(12); // max duration in seconds for assumed role credentials\n \n-  private AWSCredentials credentials;\n   private final Configuration conf;\n+  private STSAssumeRoleSessionCredentialsProvider credentialsProvider;\n \n   public AssumeRoleCredentialProvider(Configuration conf) {\n     this.conf = conf;\n   }\n \n+  private void initializeCredentialProvider() {\n+    String roleArn = conf.get(ASSUME_ROLE_PROPERTY_NAME);\n+    checkArgument(StringUtils.isNotEmpty(roleArn),\n+        \"Role ARN must not be empty, please set: \" + ASSUME_ROLE_PROPERTY_NAME);\n+\n+    int credDuration = conf.getInt(ASSUME_ROLE_CREDENTIAL_DURATION_PROPERTY_NAME, DEFAULT_CREDENTIALS_DURATION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "896bf6889a2d32e275508e813424f2690ac69177"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3872, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}