{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMjIxNTY1", "number": 167, "title": "Issue #166 - Replica.updateMetastore calls metastore with batched partition lists.", "bodyText": "Fixes Issue #166\nLog file output from running test on table with 5019 partitions:\n21:01:53.209 [main] INFO  com.hotels.bdp.circustrain.core.replica.Replica - Updating replica table metadata.\n21:01:53.334 [main] INFO  com.hotels.hcommon.hive.metastore.client.closeable.CloseableMetaStoreClientInvocationHandler - Couldn't invoke method public abstract org.apache.hadoop.hive.metastore.api.Table org.apache.hadoop.hive.metastore.IMetaStoreClient.getTable(java.lang.String,java.lang.String) throws org.apache.hadoop.hive.metastore.api.MetaException,org.apache.thrift.TException,org.apache.hadoop.hive.metastore.api.NoSuchObjectException\n21:11:02.672 [main] INFO  com.hotels.bdp.circustrain.core.replica.Replica - Creating 5019 new partitions.\n21:11:02.677 [main] INFO  com.hotels.bdp.circustrain.core.replica.Replica - Creating partitions 0 through 999\n21:15:21.485 [main] INFO  com.hotels.bdp.circustrain.core.replica.Replica - Creating partitions 1000 through 1999\n21:19:35.692 [main] INFO  com.hotels.bdp.circustrain.core.replica.Replica - Creating partitions 2000 through 2999\n21:23:57.927 [main] INFO  com.hotels.bdp.circustrain.core.replica.Replica - Creating partitions 3000 through 3999\n21:28:13.187 [main] INFO  com.hotels.bdp.circustrain.core.replica.Replica - Creating partitions 4000 through 4999\n21:32:30.142 [main] INFO  com.hotels.bdp.circustrain.core.replica.Replica - Creating partitions 5000 through 5018\n21:32:35.818 [main] INFO  hive.metastore - Closed a connection to metastore, current connections: 0\n21:32:35.818 [main] INFO  com.hotels.bdp.circustrain.core.PartitionedTableReplication - Replicated 5019 partitions of table test.barnparttest5000.", "createdAt": "2020-02-05T07:24:33Z", "url": "https://github.com/ExpediaGroup/circus-train/pull/167", "merged": true, "mergeCommit": {"oid": "3ce18cca93d83e8204c3796a2912b451b02b474c"}, "closed": true, "closedAt": "2020-02-06T09:57:31Z", "author": {"login": "barnharts4"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBC7W1gH2gAyMzcxMjIxNTY1OjVkMTdhZTMzNjhiNGNhMzRmNTkyNzdjN2MzYjg1N2RlZGUxNjYxMDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBnlbRgFqTM1NDMxNDI0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5d17ae3368b4ca34f59277c7c3b857dede166107", "author": {"user": {"login": "barnharts4", "name": "Scott Barnhart"}}, "url": "https://github.com/ExpediaGroup/circus-train/commit/5d17ae3368b4ca34f59277c7c3b857dede166107", "committedDate": "2020-02-04T15:04:39Z", "message": "Merge pull request #1 from HotelsDotCom/master\n\nmerge upstream master into my branch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fd60973b60f997c6c80069826598161282ea4c3", "author": {"user": null}, "url": "https://github.com/ExpediaGroup/circus-train/commit/3fd60973b60f997c6c80069826598161282ea4c3", "committedDate": "2020-02-05T07:20:08Z", "message": "Issue 166 - call metastore with batched partition lists"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317", "author": {"user": null}, "url": "https://github.com/ExpediaGroup/circus-train/commit/92d556ad13977fda339f0cfb16aaa3bc45349317", "committedDate": "2020-02-05T07:33:59Z", "message": "follow import order"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNTIzODMw", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#pullrequestreview-353523830", "createdAt": "2020-02-05T08:04:47Z", "commit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNjMzNDk4", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#pullrequestreview-353633498", "createdAt": "2020-02-05T11:07:11Z", "commit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMTowNzoxMVrOFlz8sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMTowOTowNVrOFl0AEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE5Mjc1Mw==", "bodyText": "shouldn't this be sublist instead of partitionsToAlter.\nclient.alter_partitions(replicaDatabaseName, replicaTableName, partitionsToAlter);", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375192753", "createdAt": "2020-02-05T11:07:11Z", "author": {"login": "abhimanyugupta07"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "diffHunk": "@@ -189,7 +222,13 @@ public void updateMetadata(\n       if (!partitionsToAlter.isEmpty()) {\n         LOG.info(\"Altering {} existing partitions.\", partitionsToAlter.size());\n         try {\n-          client.alter_partitions(replicaDatabaseName, replicaTableName, partitionsToAlter);\n+          int counter = 0;\n+          for (List<Partition> sublist : Lists.partition(partitionsToAlter, partitionBatchSize)) {\n+            int start = counter * partitionBatchSize;\n+            LOG.info(\"Altering partitions {} through {}\", start, start + sublist.size() - 1);\n+            client.alter_partitions(replicaDatabaseName, replicaTableName, partitionsToAlter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE5MzYxOA==", "bodyText": "here too. sublist instead of statisticsToSet ?", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375193618", "createdAt": "2020-02-05T11:09:05Z", "author": {"login": "abhimanyugupta07"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "diffHunk": "@@ -203,7 +242,13 @@ public void updateMetadata(\n       if (!statisticsToSet.isEmpty()) {\n         LOG.info(\"Setting column statistics for {} partitions.\", statisticsToSet.size());\n         try {\n-          client.setPartitionColumnStatistics(new SetPartitionsStatsRequest(statisticsToSet));\n+          int counter = 0;\n+          for (List<ColumnStatistics> sublist : Lists.partition(statisticsToSet, partitionBatchSize)) {\n+            int start = counter * partitionBatchSize;\n+            LOG.info(\"Setting column statistics for partitions {} through {}\", start, start + sublist.size() - 1);\n+            client.setPartitionColumnStatistics(new SetPartitionsStatsRequest(statisticsToSet));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "originalPosition": 100}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNjQ2NDIw", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#pullrequestreview-353646420", "createdAt": "2020-02-05T11:30:21Z", "commit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMTozMDoyMVrOFl0j0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMTozMDoyMVrOFl0j0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwMjc3MA==", "bodyText": "I think to test the batching for alter_partition and setPartitionColumnStatistics usecase, it will be nice to have more than one existing partitions.", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375202770", "createdAt": "2020-02-05T11:30:21Z", "author": {"login": "abhimanyugupta07"}, "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/ReplicaTest.java", "diffHunk": "@@ -425,18 +440,28 @@ public void alteringExistingPartitionedReplicaTableWithPartitionsSucceeds() thro\n     verify(mockMetaStoreClient).updateTableColumnStatistics(columnStatistics);\n     verify(mockReplicaLocationManager).addCleanUpLocation(anyString(), any(Path.class));\n     verify(mockMetaStoreClient).alter_partitions(eq(DB_NAME), eq(TABLE_NAME), alterPartitionCaptor.capture());\n-    verify(mockMetaStoreClient).add_partitions(addPartitionCaptor.capture());\n+    verify(mockMetaStoreClient, times(2)).add_partitions(addPartitionCaptor.capture());\n \n     assertThat(alterPartitionCaptor.getValue().size(), is(1));\n-    assertThat(addPartitionCaptor.getValue().size(), is(1));\n+\n+    // Validate that the args were expected number of batches (2), and expected batch sizes (2, then 1) since\n+    // we sent a list of 3 new partitions and used a partitionBatchSize of 2\n+\n+    List<List<Partition>> addCaptorValues = addPartitionCaptor.getAllValues();\n+    List<Partition> firstBatch = addCaptorValues.get(0);\n+    List<Partition> secondBatch = addCaptorValues.get(1);\n+    assertThat(addCaptorValues.size(), is(2));\n+    assertThat(firstBatch.size(), is(2));\n+    assertThat(secondBatch.size(), is(1));\n \n     Partition altered = alterPartitionCaptor.getValue().get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "originalPosition": 161}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNjU0Njk0", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#pullrequestreview-353654694", "createdAt": "2020-02-05T11:45:57Z", "commit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMTo0NTo1OFrOFl086g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMTo1NTowMlrOFl1LwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwOTE5NA==", "bodyText": "Minor, but these imports should go along with the other google imports. I've made a mental note to update our hotels-oss-parent with a plugin that automatically does this that we've started using in EG org on GitHub so this is automated by Maven.", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375209194", "createdAt": "2020-02-05T11:45:58Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "diffHunk": "@@ -30,6 +30,8 @@\n import java.util.Map;\n import java.util.Objects;\n \n+import com.google.common.annotations.VisibleForTesting;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMDMyNg==", "bodyText": "NABD but you could inline this on line 77 and then only have the assignment in the constructor below which actually allows you to override the value.", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375210326", "createdAt": "2020-02-05T11:48:34Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "diffHunk": "@@ -89,6 +93,29 @@\n     this.housekeepingListener = housekeepingListener;\n     replicationMode = tableReplication.getReplicationMode();\n     this.tableReplication = tableReplication;\n+    this.partitionBatchSize = DEFAULT_PARTITION_BATCH_SIZE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMDQ2MQ==", "bodyText": "What does this comment mean?", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375210461", "createdAt": "2020-02-05T11:48:52Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "diffHunk": "@@ -89,6 +93,29 @@\n     this.housekeepingListener = housekeepingListener;\n     replicationMode = tableReplication.getReplicationMode();\n     this.tableReplication = tableReplication;\n+    this.partitionBatchSize = DEFAULT_PARTITION_BATCH_SIZE;\n+  }\n+\n+  /**\n+   * Use {@link ReplicaFactory}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMTUxNg==", "bodyText": "I've never come across Lists.partition before, looks good.", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375211516", "createdAt": "2020-02-05T11:51:24Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "diffHunk": "@@ -175,7 +202,13 @@ public void updateMetadata(\n       if (!partitionsToCreate.isEmpty()) {\n         LOG.info(\"Creating {} new partitions.\", partitionsToCreate.size());\n         try {\n-          client.add_partitions(partitionsToCreate);\n+          int counter = 0;\n+          for (List<Partition> sublist : Lists.partition(partitionsToCreate, partitionBatchSize)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMjM2OA==", "bodyText": "I know it's not the most readable format but our import ordering is this: https://github.com/ExpediaGroup/eg-oss-parent/blob/master/pom.xml#L102", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375212368", "createdAt": "2020-02-05T11:53:33Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/ReplicaTest.java", "diffHunk": "@@ -22,22 +22,29 @@\n import static org.mockito.Matchers.anyString;\n import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoMoreInteractions;\n import static org.mockito.Mockito.when;\n \n import static com.hotels.bdp.circustrain.api.CircusTrainTableParameter.REPLICATION_EVENT;\n import static com.hotels.bdp.circustrain.api.CircusTrainTableParameter.REPLICATION_MODE;\n \n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.Comparator;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n+import com.google.common.base.Supplier;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMjk5Mg==", "bodyText": "Yeah, it feels like we are missing some tests that would have caught the issues you called out above. I'd suggest writing new tests (or modifying existing) and getting them to fail with the current code and then fixing the code and they should then pass.", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375212992", "createdAt": "2020-02-05T11:55:02Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/ReplicaTest.java", "diffHunk": "@@ -425,18 +440,28 @@ public void alteringExistingPartitionedReplicaTableWithPartitionsSucceeds() thro\n     verify(mockMetaStoreClient).updateTableColumnStatistics(columnStatistics);\n     verify(mockReplicaLocationManager).addCleanUpLocation(anyString(), any(Path.class));\n     verify(mockMetaStoreClient).alter_partitions(eq(DB_NAME), eq(TABLE_NAME), alterPartitionCaptor.capture());\n-    verify(mockMetaStoreClient).add_partitions(addPartitionCaptor.capture());\n+    verify(mockMetaStoreClient, times(2)).add_partitions(addPartitionCaptor.capture());\n \n     assertThat(alterPartitionCaptor.getValue().size(), is(1));\n-    assertThat(addPartitionCaptor.getValue().size(), is(1));\n+\n+    // Validate that the args were expected number of batches (2), and expected batch sizes (2, then 1) since\n+    // we sent a list of 3 new partitions and used a partitionBatchSize of 2\n+\n+    List<List<Partition>> addCaptorValues = addPartitionCaptor.getAllValues();\n+    List<Partition> firstBatch = addCaptorValues.get(0);\n+    List<Partition> secondBatch = addCaptorValues.get(1);\n+    assertThat(addCaptorValues.size(), is(2));\n+    assertThat(firstBatch.size(), is(2));\n+    assertThat(secondBatch.size(), is(1));\n \n     Partition altered = alterPartitionCaptor.getValue().get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwMjc3MA=="}, "originalCommit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "originalPosition": 161}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16181026e39d0716bc05590ca18589368b4852d1", "author": {"user": null}, "url": "https://github.com/ExpediaGroup/circus-train/commit/16181026e39d0716bc05590ca18589368b4852d1", "committedDate": "2020-02-05T22:27:27Z", "message": "PR comments, restructure test to accomodate any number of altered/added partitions, and test combinations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d1aa30f9bdcad23cf1efaf1125fffb0d5f7f0a4", "author": {"user": null}, "url": "https://github.com/ExpediaGroup/circus-train/commit/0d1aa30f9bdcad23cf1efaf1125fffb0d5f7f0a4", "committedDate": "2020-02-05T22:53:23Z", "message": "optimize imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf76303f2a823029fa5aedc2374125b5e71cf9f7", "author": {"user": null}, "url": "https://github.com/ExpediaGroup/circus-train/commit/bf76303f2a823029fa5aedc2374125b5e71cf9f7", "committedDate": "2020-02-05T22:57:33Z", "message": "add releaese data to changelog - let's be optimistic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0aa35464dd74f0a4fef65d8cb7e67f8befb430cd", "author": {"user": null}, "url": "https://github.com/ExpediaGroup/circus-train/commit/0aa35464dd74f0a4fef65d8cb7e67f8befb430cd", "committedDate": "2020-02-06T00:43:11Z", "message": "test cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MzA4NzE1", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#pullrequestreview-354308715", "createdAt": "2020-02-06T09:35:47Z", "commit": {"oid": "0aa35464dd74f0a4fef65d8cb7e67f8befb430cd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MzE1NTA2", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#pullrequestreview-354315506", "createdAt": "2020-02-06T09:46:00Z", "commit": {"oid": "0aa35464dd74f0a4fef65d8cb7e67f8befb430cd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MzE0MjQy", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#pullrequestreview-354314242", "createdAt": "2020-02-06T09:44:07Z", "commit": {"oid": "0aa35464dd74f0a4fef65d8cb7e67f8befb430cd"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwOTo0NDowN1rOFmUzUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwOTo0Njo1N1rOFmU5FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTczMTAyNw==", "bodyText": "Ah, OK.", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375731027", "createdAt": "2020-02-06T09:44:07Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "diffHunk": "@@ -89,6 +93,29 @@\n     this.housekeepingListener = housekeepingListener;\n     replicationMode = tableReplication.getReplicationMode();\n     this.tableReplication = tableReplication;\n+    this.partitionBatchSize = DEFAULT_PARTITION_BATCH_SIZE;\n+  }\n+\n+  /**\n+   * Use {@link ReplicaFactory}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMDQ2MQ=="}, "originalCommit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTczMjUwMQ==", "bodyText": "For another day but I wonder if we could use JUnit's \"parameterised\" feature to do this.", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375732501", "createdAt": "2020-02-06T09:46:57Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/ReplicaTest.java", "diffHunk": "@@ -423,41 +466,106 @@ public void alteringExistingPartitionedReplicaTableWithPartitionsSucceeds() thro\n \n     verify(mockMetaStoreClient).alter_table(eq(DB_NAME), eq(TABLE_NAME), any(Table.class));\n     verify(mockMetaStoreClient).updateTableColumnStatistics(columnStatistics);\n-    verify(mockReplicaLocationManager).addCleanUpLocation(anyString(), any(Path.class));\n-    verify(mockMetaStoreClient).alter_partitions(eq(DB_NAME), eq(TABLE_NAME), alterPartitionCaptor.capture());\n-    verify(mockMetaStoreClient).add_partitions(addPartitionCaptor.capture());\n+    verify(mockReplicaLocationManager, times(numTestAlterPartitions)).addCleanUpLocation(anyString(), any(Path.class));\n+    verify(mockMetaStoreClient, times(numAlterBatches)).alter_partitions(eq(DB_NAME), eq(TABLE_NAME), alterPartitionCaptor.capture());\n+    verify(mockMetaStoreClient, times(numAddBatches)).add_partitions(addPartitionCaptor.capture());\n+\n+    // Validate that the args were expected number of batches , and expected batch sizes\n+    List<List<Partition>> addCaptorValues = addPartitionCaptor.getAllValues();\n+    assertThat(addCaptorValues.size(), is(numAddBatches));\n+\n+    for (int batchNdx = 0; batchNdx < numAddBatches; batchNdx++) {\n+      int thisBatchSize = batchNdx < (numAddBatches - 1) ? TEST_PARTITION_BATCH_SIZE : lastAddBatchSize;\n+      List<Partition> addBatch = addCaptorValues.get(batchNdx);\n+      assertThat(addBatch.size(), is(thisBatchSize));\n+      for (int entryInBatchNdx = 0; entryInBatchNdx < addBatch.size(); entryInBatchNdx++) {\n+        assertThat(addBatch.get(entryInBatchNdx).getValues(),\n+                is(Arrays.asList(String.format(\"new_%s\", (batchNdx * TEST_PARTITION_BATCH_SIZE) + entryInBatchNdx),\n+                        String.format(\"new_%s_sub\", (batchNdx * TEST_PARTITION_BATCH_SIZE) + entryInBatchNdx))));\n+      }\n+    }\n \n-    assertThat(alterPartitionCaptor.getValue().size(), is(1));\n-    assertThat(addPartitionCaptor.getValue().size(), is(1));\n+    List<List<Partition>> alterCaptorValues = alterPartitionCaptor.getAllValues();\n+    assertThat(alterCaptorValues.size(), is(numAlterBatches));\n+    for (int batchNdx = 0; batchNdx < numAlterBatches; batchNdx++) {\n+      int thisBatchSize = batchNdx < (numAlterBatches - 1) ? TEST_PARTITION_BATCH_SIZE : lastAlterBatchSize;\n+      List<Partition> alterBatch = alterCaptorValues.get(batchNdx);\n+      assertThat(alterBatch.size(), is(thisBatchSize));\n+      for (int entryInBatchNdx = 0; entryInBatchNdx < alterBatch.size(); entryInBatchNdx++) {\n+        assertThat(alterBatch.get(entryInBatchNdx).getValues(),\n+                is(Arrays.asList(String.format(\"exist_%s\", (batchNdx * TEST_PARTITION_BATCH_SIZE) + entryInBatchNdx),\n+                        String.format(\"exist_%s_sub\", (batchNdx * TEST_PARTITION_BATCH_SIZE) + entryInBatchNdx))));\n+      }\n+    }\n \n-    Partition altered = alterPartitionCaptor.getValue().get(0);\n-    assertThat(altered.getValues(), is(Arrays.asList(\"one\", \"two\")));\n+    verify(mockMetaStoreClient, times(numStatisticsBatches)).setPartitionColumnStatistics(setStatsRequestCaptor.capture());\n+    List<SetPartitionsStatsRequest> statsRequestList = setStatsRequestCaptor.getAllValues();\n+    assertThat(statsRequestList.size(), is(numStatisticsBatches));\n \n-    Partition added = addPartitionCaptor.getValue().get(0);\n-    assertThat(added.getValues(), is(Arrays.asList(\"three\", \"four\")));\n+    List<ColumnStatistics> columnStats = new ArrayList<>();\n+    for (int colStatNdx = 0; colStatNdx < numStatisticsBatches; colStatNdx++) {\n+      int thisBatchSize = colStatNdx < (numStatisticsBatches - 1) ? TEST_PARTITION_BATCH_SIZE : lastStatisticsBatchSize;\n+      assertThat(statsRequestList.get(colStatNdx).getColStats().size(), is(thisBatchSize));\n+      columnStats.addAll(statsRequestList.get(colStatNdx).getColStats());\n+    }\n \n-    verify(mockMetaStoreClient).setPartitionColumnStatistics(setStatsRequestCaptor.capture());\n-    SetPartitionsStatsRequest statsRequest = setStatsRequestCaptor.getValue();\n+    assertThat(columnStats.size(), is(numTestAlterPartitions + numTestAddPartitions));\n \n-    List<ColumnStatistics> columnStats = new ArrayList<>(statsRequest.getColStats());\n-    Collections.sort(columnStats, new Comparator<ColumnStatistics>() {\n-      @Override\n-      public int compare(ColumnStatistics o1, ColumnStatistics o2) {\n-        return o1.getStatsDesc().getPartName().compareTo(o2.getStatsDesc().getPartName());\n-      }\n-    });\n-    assertThat(columnStats.size(), is(2));\n+    for (int colStatNdx = 0; colStatNdx < numTestAlterPartitions; colStatNdx++) {\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().isIsTblLevel(), is(false));\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().getDbName(), is(DB_NAME));\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().getTableName(), is(TABLE_NAME));\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().getPartName(),\n+              is(String.format(\"c=exist_%s/d=exist_%s_sub\", colStatNdx, colStatNdx)));\n+      assertThat(columnStats.get(colStatNdx).getStatsObj().size(), is(2));\n+    }\n \n-    assertThat(columnStats.get(0).getStatsDesc().isIsTblLevel(), is(false));\n-    assertThat(columnStats.get(0).getStatsDesc().getDbName(), is(DB_NAME));\n-    assertThat(columnStats.get(0).getStatsDesc().getTableName(), is(TABLE_NAME));\n-    assertThat(columnStats.get(0).getStatsDesc().getPartName(), is(\"c=one/d=two\"));\n-    assertThat(columnStats.get(0).getStatsObj().size(), is(2));\n-    assertThat(columnStats.get(1).getStatsDesc().isIsTblLevel(), is(false));\n-    assertThat(columnStats.get(1).getStatsDesc().getDbName(), is(DB_NAME));\n-    assertThat(columnStats.get(1).getStatsDesc().getTableName(), is(TABLE_NAME));\n-    assertThat(columnStats.get(1).getStatsDesc().getPartName(), is(\"c=three/d=four\"));\n-    assertThat(columnStats.get(1).getStatsObj().size(), is(2));\n+    for (int colStatNdx = numTestAlterPartitions, addPartColStatNdx = 0;\n+         colStatNdx < numTestAlterPartitions + numTestAddPartitions;\n+         colStatNdx++, addPartColStatNdx++) {\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().isIsTblLevel(), is(false));\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().getDbName(), is(DB_NAME));\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().getTableName(), is(TABLE_NAME));\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().getPartName(),\n+              is(String.format(\"c=new_%s/d=new_%s_sub\", addPartColStatNdx, addPartColStatNdx)));\n+      assertThat(columnStats.get(colStatNdx).getStatsObj().size(), is(2));\n+    }\n+  }\n+\n+\n+  @Test\n+  public void alteringExistingPartitionedReplicaTableWithNewPartitionsInBatchesSucceeds_0_0() throws TException, IOException {\n+    alterExistingPartitionedReplicaTableWithNewPartitionsInBatches(0,0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa35464dd74f0a4fef65d8cb7e67f8befb430cd"}, "originalPosition": 231}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3780, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}