{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1Nzg2NTgy", "number": 163, "title": "Reusing copier for AVRO schemas", "bodyText": "The idea is to reuse the Copier for the avro schema. Treating it as a data file benefit is that any fixes we do in the copier (regarding ACL, credentials or anything) will be picked up automatically. The only downside I can think of is custom copiers not expecting to copy a schema file. But perhaps that's something we can live with or can be adjusted fairly easily in custom third party copiers.\nfixes #162", "createdAt": "2020-01-22T10:49:20Z", "url": "https://github.com/ExpediaGroup/circus-train/pull/163", "merged": true, "mergeCommit": {"oid": "c5b428173bafb1339713aee43958dd27904dc0c4"}, "closed": true, "closedAt": "2020-01-24T11:51:27Z", "author": {"login": "patduin"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb8zbs2AH2gAyMzY1Nzg2NTgyOjZkOGIzM2JjZWY0ZWU4MDBkNTk0MjU1YTRjMWRlNTI4MWJhZTIwZGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb9Pu9vgH2gAyMzY1Nzg2NTgyOjAyNWRlYTRiZDIwYzBkYjFhZTgzNjJkNzYzYWU2NjYwMDcxM2M3ODM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6d8b33bcef4ee800d594255a4c1de5281bae20dc", "author": {"user": null}, "url": "https://github.com/ExpediaGroup/circus-train/commit/6d8b33bcef4ee800d594255a4c1de5281bae20dc", "committedDate": "2020-01-22T10:45:48Z", "message": "Reusing copier for AVRO schemas"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c", "author": {"user": null}, "url": "https://github.com/ExpediaGroup/circus-train/commit/1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c", "committedDate": "2020-01-22T11:03:42Z", "message": "fixing nameService a bit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NTA1NjE2", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#pullrequestreview-346505616", "createdAt": "2020-01-22T11:05:07Z", "commit": {"oid": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMTowNTowN1rOFgYS3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMTowNTowN1rOFgYS3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ5Njc5Ng==", "bodyText": "@abhimanyugupta07  does this seem correct to you?", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369496796", "createdAt": "2020-01-22T11:05:07Z", "author": {"login": "patduin"}, "path": "circus-train-avro/src/test/java/com/hotels/bdp/circustrain/avro/util/FileSystemPathResolverTest.java", "diffHunk": "@@ -73,7 +81,7 @@ public void resolveNameServicesAddsAuthorityToPathWithoutScheme() {\n     setDfsPaths(\"foo\");\n     Path input = new Path(\"/etl/test/avsc/schema.avsc\");\n     Path result = resolver.resolveNameServices(input);\n-    Path expected = new Path(\"/foo/etl/test/avsc/schema.avsc\");\n+    Path expected = new Path(\"/etl/test/avsc/schema.avsc\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NTA3MTQ5", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#pullrequestreview-346507149", "createdAt": "2020-01-22T11:07:54Z", "commit": {"oid": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMTowNzo1NFrOFgYXsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMTowNzo1NFrOFgYXsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ5ODAzNQ==", "bodyText": "This test is broken I'll fix it...", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369498035", "createdAt": "2020-01-22T11:07:54Z", "author": {"login": "patduin"}, "path": "circus-train-avro/src/test/java/com/hotels/bdp/circustrain/avro/util/SchemaCopierTest.java", "diffHunk": "@@ -26,21 +26,39 @@\n import org.apache.hadoop.fs.FileSystem;\n import org.apache.hadoop.fs.Path;\n import org.apache.hadoop.hive.conf.HiveConf;\n+import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n \n+import com.hotels.bdp.circustrain.api.copier.CopierFactoryManager;\n+import com.hotels.bdp.circustrain.api.copier.CopierOptions;\n+import com.hotels.bdp.circustrain.api.event.EventTableReplication;\n+\n+@RunWith(MockitoJUnitRunner.class)\n public class SchemaCopierTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NTA3NTI2", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#pullrequestreview-346507526", "createdAt": "2020-01-22T11:08:40Z", "commit": {"oid": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMTowODo0MVrOFgYY2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMTowODo0MVrOFgYY2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ5ODMyOQ==", "bodyText": "mocking a Map, madness!", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369498329", "createdAt": "2020-01-22T11:08:41Z", "author": {"login": "patduin"}, "path": "circus-train-s3-mapreduce-cp-copier/src/test/java/com/hotels/bdp/circustrain/s3mapreducecpcopier/S3MapReduceCpCopierTest.java", "diffHunk": "@@ -104,23 +106,41 @@ public void tableArgsAndConfiguration() throws Exception {\n     assertThat(options.getCredentialsProvider(), is(credentialsProvider));\n   }\n \n+  @Test\n+  public void tableArgsAndConfigurationOneFileCopy() throws Exception {\n+    Path sourceDataBaseFile = new Path(\"hdfs://source/data.txt\");\n+    Path replicaDataFile = new Path(\"s3://target/data.txt\");\n+    copierOptions.put(CopierOptions.COPY_DESTINATION_IS_FILE, \"true\");\n+    S3MapReduceCpCopier copier = new S3MapReduceCpCopier(conf, sourceDataBaseFile, Collections.<Path>emptyList(),\n+        replicaDataFile, copierOptions, executor, metricRegistry);\n+    Metrics metrics = copier.copy();\n+    assertThat(metrics, not(nullValue()));\n+\n+    verify(executor).exec(confCaptor.capture(), optionsCaptor.capture());\n+\n+    S3MapReduceCpOptions options = optionsCaptor.getValue();\n+    assertThat(options.getSources(), is(Arrays.asList(sourceDataBaseFile)));\n+    assertThat(options.getTarget(), is(replicaDataFile.toUri()));\n+    assertThat(options.getCredentialsProvider(), is(credentialsProvider));\n+  }\n+\n   @Test\n   public void overwriteAllCopierOptions() throws Exception {\n-    when(copierOptions.get(CREDENTIAL_PROVIDER)).thenReturn(\"jceks://hdfs/foo/bar.jceks\");\n-    when(copierOptions.get(MULTIPART_UPLOAD_CHUNK_SIZE)).thenReturn(\"1234\");\n-    when(copierOptions.get(S3_SERVER_SIDE_ENCRYPTION)).thenReturn(\"true\");\n-    when(copierOptions.get(STORAGE_CLASS)).thenReturn(\"reduced_redundancy\");\n-    when(copierOptions.get(TASK_BANDWIDTH)).thenReturn(\"567\");\n-    when(copierOptions.get(NUMBER_OF_WORKERS_PER_MAP)).thenReturn(\"89\");\n-    when(copierOptions.get(MULTIPART_UPLOAD_THRESHOLD)).thenReturn(\"123456\");\n-    when(copierOptions.get(MAX_MAPS)).thenReturn(\"78\");\n-    when(copierOptions.get(COPY_STRATEGY)).thenReturn(\"the-strategy\");\n-    when(copierOptions.get(LOG_PATH)).thenReturn(\"hdfs://path/to/logs/\");\n-    when(copierOptions.get(REGION)).thenReturn(\"us-east-1\");\n-    when(copierOptions.get(IGNORE_FAILURES)).thenReturn(\"true\");\n-    when(copierOptions.get(CANNED_ACL)).thenReturn(CannedAccessControlList.BucketOwnerFullControl.toString());\n-\n-    S3MapReduceCpCopier copier = new S3MapReduceCpCopier(conf, sourceDataBaseLocation, Collections.<Path> emptyList(),\n+    copierOptions.put(CREDENTIAL_PROVIDER, \"jceks://hdfs/foo/bar.jceks\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NTMzOTQ2", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#pullrequestreview-346533946", "createdAt": "2020-01-22T11:57:42Z", "commit": {"oid": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMTo1Nzo0MlrOFgZqYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMjoxMzo0NlrOFgaCsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUxOTIwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Change the way the AVRO Schema Copier works, reusing normal 'data' copier. See [#162](https://github.com/HotelsDotCom/circus-train/issues/162). \n          \n          \n            \n            * AVRO Schema Copier now re-uses the normal 'data' copier instead of its own. See [#162](https://github.com/HotelsDotCom/circus-train/issues/162).", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369519200", "createdAt": "2020-01-22T11:57:42Z", "author": {"login": "massdosage"}, "path": "CHANGELOG.md", "diffHunk": "@@ -1,5 +1,8 @@\n-## [15.0.0] - 2019-11-12\n+## TBD - TBD\n+### Changed\n+* Change the way the AVRO Schema Copier works, reusing normal 'data' copier. See [#162](https://github.com/HotelsDotCom/circus-train/issues/162). ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyMDA4MA==", "bodyText": "Should we document this in the README somewhere?", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369520080", "createdAt": "2020-01-22T11:59:49Z", "author": {"login": "massdosage"}, "path": "circus-train-api/src/main/java/com/hotels/bdp/circustrain/api/copier/CopierOptions.java", "diffHunk": "@@ -21,6 +21,10 @@\n \n   String IGNORE_MISSING_PARTITION_FOLDER_ERRORS = \"ignore-missing-partition-folder-errors\";\n \n+  // internal option used to track if the destination of the replication should be treated as a folder or file. Value\n+  // can be parsed with Boolean.parseValue. If not set a folder is assumed.\n+  String COPY_DESTINATION_IS_FILE = \"copy-destination-is-file\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyMDgzMg==", "bodyText": "remove blank line", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369520832", "createdAt": "2020-01-22T12:01:39Z", "author": {"login": "massdosage"}, "path": "circus-train-avro/src/main/java/com/hotels/bdp/circustrain/avro/transformation/AbstractAvroSerDeTransformation.java", "diffHunk": "@@ -85,8 +91,15 @@ public void tableReplicationStart(EventTableReplication tableReplication, String\n   }\n \n   @Override\n-  public void tableReplicationSuccess(EventTableReplication tableReplication, String eventId) {}\n+  public void tableReplicationSuccess(EventTableReplication tableReplication, String eventId) {\n+    this.eventId = null;\n+    this.tableReplication = null;\n+  }\n \n   @Override\n-  public void tableReplicationFailure(EventTableReplication tableReplication, String eventId, Throwable t) {}\n+  public void tableReplicationFailure(EventTableReplication tableReplication, String eventId, Throwable t) {\n+    this.eventId = null;\n+    this.tableReplication = null;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyMTgwNg==", "bodyText": "NABD but you could consider moving these out of the if statement and then re-using them in both the if() clause and here.", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369521806", "createdAt": "2020-01-22T12:04:09Z", "author": {"login": "massdosage"}, "path": "circus-train-avro/src/main/java/com/hotels/bdp/circustrain/avro/util/FileSystemPathResolver.java", "diffHunk": "@@ -58,21 +58,22 @@ public Path resolveScheme(Path path) {\n   }\n \n   public Path resolveNameServices(Path path) {\n-    String nameService = configuration.get(DFSConfigKeys.DFS_NAMESERVICES);\n-    if (isNotBlank(nameService)) {\n-      URI uri = path.toUri();\n-      String scheme = uri.getScheme();\n-      String url = uri.getPath();\n-      final String original = path.toString();\n-      if (isBlank(scheme)) {\n-        url = String.format(\"/%s%s\", nameService, path);\n-        path = new Path(url);\n-      } else {\n-        path = new Path(scheme, nameService, url);\n+    if (\"hdfs\".equalsIgnoreCase(path.toUri().getScheme())) {\n+      String nameService = configuration.get(DFSConfigKeys.DFS_NAMESERVICES);\n+      if (isNotBlank(nameService)) {\n+        URI uri = path.toUri();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyMjA2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Map<String, Object> mergeCopierOptions = new HashMap<>(TableReplication\n          \n          \n            \n                Map<String, Object> mergedCopierOptions = new HashMap<>(TableReplication", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369522065", "createdAt": "2020-01-22T12:04:49Z", "author": {"login": "massdosage"}, "path": "circus-train-avro/src/main/java/com/hotels/bdp/circustrain/avro/util/SchemaCopier.java", "diffHunk": "@@ -41,64 +44,42 @@\n   private static final Logger LOG = LoggerFactory.getLogger(SchemaCopier.class);\n \n   private final Configuration sourceHiveConf;\n-  private final Configuration replicaHiveConf;\n+  private final CopierFactoryManager copierFactoryManager;\n+  private final CopierOptions globalCopierOptions;\n \n   @Autowired\n-  public SchemaCopier(Configuration sourceHiveConf, Configuration replicaHiveConf) {\n+  public SchemaCopier(\n+      Configuration sourceHiveConf,\n+      CopierFactoryManager copierFactoryManager,\n+      CopierOptions globalCopierOptions) {\n     this.sourceHiveConf = sourceHiveConf;\n-    this.replicaHiveConf = replicaHiveConf;\n+    this.copierFactoryManager = copierFactoryManager;\n+    this.globalCopierOptions = globalCopierOptions;\n   }\n \n-  public Path copy(String source, String destination) {\n+  public Path copy(String source, String destination, EventTableReplication eventTableReplication, String eventId) {\n     checkNotNull(source, \"source cannot be null\");\n     checkNotNull(destination, \"destinationFolder cannot be null\");\n \n-    java.nio.file.Path temporaryDirectory = createTempDirectory();\n-\n     FileSystemPathResolver sourceFileSystemPathResolver = new FileSystemPathResolver(sourceHiveConf);\n     Path sourceLocation = new Path(source);\n     sourceLocation = sourceFileSystemPathResolver.resolveScheme(sourceLocation);\n     sourceLocation = sourceFileSystemPathResolver.resolveNameServices(sourceLocation);\n-    Path localLocation = new Path(temporaryDirectory.toString(), fileName(source));\n-    copyToLocal(sourceLocation, localLocation);\n-\n-    Path destinationLocation = new Path(destination, fileName(source));\n-    copyToRemote(localLocation, destinationLocation);\n-\n-    LOG.info(\"Avro schema has been copied from '{}' to '{}'\", sourceLocation, destinationLocation);\n-    return destinationLocation;\n-  }\n-\n-  private java.nio.file.Path createTempDirectory() {\n-    java.nio.file.Path temporaryDirectory = null;\n-    try {\n-      temporaryDirectory = Files.createTempDirectory(\"avro-schema-download-folder\");\n-      temporaryDirectory.toFile().deleteOnExit();\n-    } catch (IOException e) {\n-      throw new CircusTrainException(\"Couldn't create temporaryDirectory in the default temporary directory\", e);\n-    }\n-    return temporaryDirectory;\n-  }\n-\n-  private void copyToLocal(Path sourceLocation, Path localLocation) {\n-    try {\n-      FileSystem sourceFileSystem;\n-      sourceFileSystem = sourceLocation.getFileSystem(sourceHiveConf);\n-      sourceFileSystem.copyToLocalFile(false, sourceLocation, localLocation);\n-      LOG.info(\"Copy from {} to {} succeeded\", sourceLocation, localLocation);\n-    } catch (IOException e) {\n-      throw new CircusTrainException(\"Couldn't copy file from \" + sourceLocation + \" to \" + localLocation, e);\n-    }\n-  }\n \n-  private void copyToRemote(Path localLocation, Path remoteDestinationLocation) {\n-    FileSystem destinationFileSystem;\n-    try {\n-      destinationFileSystem = remoteDestinationLocation.getFileSystem(replicaHiveConf);\n-      destinationFileSystem.copyFromLocalFile(localLocation, remoteDestinationLocation);\n-    } catch (IOException e) {\n-      throw new CircusTrainException(\"Couldn't copy file from \" + localLocation + \" to \" + remoteDestinationLocation,\n-          e);\n-    }\n+    Path destinationSchemaFile = new Path(destination, sourceLocation.getName());\n+\n+    Map<String, Object> mergeCopierOptions = new HashMap<>(TableReplication", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyMjI3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                LOG.info(\"Going to replicate the Avro schema from '{}' to '{}'\", sourceLocation, destinationSchemaFile);\n          \n          \n            \n                LOG.info(\"Replicating Avro schema from '{}' to '{}'\", sourceLocation, destinationSchemaFile);", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369522278", "createdAt": "2020-01-22T12:05:19Z", "author": {"login": "massdosage"}, "path": "circus-train-avro/src/main/java/com/hotels/bdp/circustrain/avro/util/SchemaCopier.java", "diffHunk": "@@ -41,64 +44,42 @@\n   private static final Logger LOG = LoggerFactory.getLogger(SchemaCopier.class);\n \n   private final Configuration sourceHiveConf;\n-  private final Configuration replicaHiveConf;\n+  private final CopierFactoryManager copierFactoryManager;\n+  private final CopierOptions globalCopierOptions;\n \n   @Autowired\n-  public SchemaCopier(Configuration sourceHiveConf, Configuration replicaHiveConf) {\n+  public SchemaCopier(\n+      Configuration sourceHiveConf,\n+      CopierFactoryManager copierFactoryManager,\n+      CopierOptions globalCopierOptions) {\n     this.sourceHiveConf = sourceHiveConf;\n-    this.replicaHiveConf = replicaHiveConf;\n+    this.copierFactoryManager = copierFactoryManager;\n+    this.globalCopierOptions = globalCopierOptions;\n   }\n \n-  public Path copy(String source, String destination) {\n+  public Path copy(String source, String destination, EventTableReplication eventTableReplication, String eventId) {\n     checkNotNull(source, \"source cannot be null\");\n     checkNotNull(destination, \"destinationFolder cannot be null\");\n \n-    java.nio.file.Path temporaryDirectory = createTempDirectory();\n-\n     FileSystemPathResolver sourceFileSystemPathResolver = new FileSystemPathResolver(sourceHiveConf);\n     Path sourceLocation = new Path(source);\n     sourceLocation = sourceFileSystemPathResolver.resolveScheme(sourceLocation);\n     sourceLocation = sourceFileSystemPathResolver.resolveNameServices(sourceLocation);\n-    Path localLocation = new Path(temporaryDirectory.toString(), fileName(source));\n-    copyToLocal(sourceLocation, localLocation);\n-\n-    Path destinationLocation = new Path(destination, fileName(source));\n-    copyToRemote(localLocation, destinationLocation);\n-\n-    LOG.info(\"Avro schema has been copied from '{}' to '{}'\", sourceLocation, destinationLocation);\n-    return destinationLocation;\n-  }\n-\n-  private java.nio.file.Path createTempDirectory() {\n-    java.nio.file.Path temporaryDirectory = null;\n-    try {\n-      temporaryDirectory = Files.createTempDirectory(\"avro-schema-download-folder\");\n-      temporaryDirectory.toFile().deleteOnExit();\n-    } catch (IOException e) {\n-      throw new CircusTrainException(\"Couldn't create temporaryDirectory in the default temporary directory\", e);\n-    }\n-    return temporaryDirectory;\n-  }\n-\n-  private void copyToLocal(Path sourceLocation, Path localLocation) {\n-    try {\n-      FileSystem sourceFileSystem;\n-      sourceFileSystem = sourceLocation.getFileSystem(sourceHiveConf);\n-      sourceFileSystem.copyToLocalFile(false, sourceLocation, localLocation);\n-      LOG.info(\"Copy from {} to {} succeeded\", sourceLocation, localLocation);\n-    } catch (IOException e) {\n-      throw new CircusTrainException(\"Couldn't copy file from \" + sourceLocation + \" to \" + localLocation, e);\n-    }\n-  }\n \n-  private void copyToRemote(Path localLocation, Path remoteDestinationLocation) {\n-    FileSystem destinationFileSystem;\n-    try {\n-      destinationFileSystem = remoteDestinationLocation.getFileSystem(replicaHiveConf);\n-      destinationFileSystem.copyFromLocalFile(localLocation, remoteDestinationLocation);\n-    } catch (IOException e) {\n-      throw new CircusTrainException(\"Couldn't copy file from \" + localLocation + \" to \" + remoteDestinationLocation,\n-          e);\n-    }\n+    Path destinationSchemaFile = new Path(destination, sourceLocation.getName());\n+\n+    Map<String, Object> mergeCopierOptions = new HashMap<>(TableReplication\n+        .getMergedCopierOptions(globalCopierOptions.getCopierOptions(), eventTableReplication.getCopierOptions()));\n+    mergeCopierOptions.put(CopierOptions.COPY_DESTINATION_IS_FILE, \"true\");\n+    CopierFactory copierFactory = copierFactoryManager\n+        .getCopierFactory(sourceLocation, destinationSchemaFile, mergeCopierOptions);\n+    LOG.info(\"Going to replicate the Avro schema from '{}' to '{}'\", sourceLocation, destinationSchemaFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyMjYyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .info(\"Avro schema '{} byes' has been copied from '{}' to '{}'\", metrics.getBytesReplicated(), sourceLocation,\n          \n          \n            \n                    .info(\"Avro schema '{} bytes' has been copied from '{}' to '{}'\", metrics.getBytesReplicated(), sourceLocation,", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369522628", "createdAt": "2020-01-22T12:06:18Z", "author": {"login": "massdosage"}, "path": "circus-train-avro/src/main/java/com/hotels/bdp/circustrain/avro/util/SchemaCopier.java", "diffHunk": "@@ -41,64 +44,42 @@\n   private static final Logger LOG = LoggerFactory.getLogger(SchemaCopier.class);\n \n   private final Configuration sourceHiveConf;\n-  private final Configuration replicaHiveConf;\n+  private final CopierFactoryManager copierFactoryManager;\n+  private final CopierOptions globalCopierOptions;\n \n   @Autowired\n-  public SchemaCopier(Configuration sourceHiveConf, Configuration replicaHiveConf) {\n+  public SchemaCopier(\n+      Configuration sourceHiveConf,\n+      CopierFactoryManager copierFactoryManager,\n+      CopierOptions globalCopierOptions) {\n     this.sourceHiveConf = sourceHiveConf;\n-    this.replicaHiveConf = replicaHiveConf;\n+    this.copierFactoryManager = copierFactoryManager;\n+    this.globalCopierOptions = globalCopierOptions;\n   }\n \n-  public Path copy(String source, String destination) {\n+  public Path copy(String source, String destination, EventTableReplication eventTableReplication, String eventId) {\n     checkNotNull(source, \"source cannot be null\");\n     checkNotNull(destination, \"destinationFolder cannot be null\");\n \n-    java.nio.file.Path temporaryDirectory = createTempDirectory();\n-\n     FileSystemPathResolver sourceFileSystemPathResolver = new FileSystemPathResolver(sourceHiveConf);\n     Path sourceLocation = new Path(source);\n     sourceLocation = sourceFileSystemPathResolver.resolveScheme(sourceLocation);\n     sourceLocation = sourceFileSystemPathResolver.resolveNameServices(sourceLocation);\n-    Path localLocation = new Path(temporaryDirectory.toString(), fileName(source));\n-    copyToLocal(sourceLocation, localLocation);\n-\n-    Path destinationLocation = new Path(destination, fileName(source));\n-    copyToRemote(localLocation, destinationLocation);\n-\n-    LOG.info(\"Avro schema has been copied from '{}' to '{}'\", sourceLocation, destinationLocation);\n-    return destinationLocation;\n-  }\n-\n-  private java.nio.file.Path createTempDirectory() {\n-    java.nio.file.Path temporaryDirectory = null;\n-    try {\n-      temporaryDirectory = Files.createTempDirectory(\"avro-schema-download-folder\");\n-      temporaryDirectory.toFile().deleteOnExit();\n-    } catch (IOException e) {\n-      throw new CircusTrainException(\"Couldn't create temporaryDirectory in the default temporary directory\", e);\n-    }\n-    return temporaryDirectory;\n-  }\n-\n-  private void copyToLocal(Path sourceLocation, Path localLocation) {\n-    try {\n-      FileSystem sourceFileSystem;\n-      sourceFileSystem = sourceLocation.getFileSystem(sourceHiveConf);\n-      sourceFileSystem.copyToLocalFile(false, sourceLocation, localLocation);\n-      LOG.info(\"Copy from {} to {} succeeded\", sourceLocation, localLocation);\n-    } catch (IOException e) {\n-      throw new CircusTrainException(\"Couldn't copy file from \" + sourceLocation + \" to \" + localLocation, e);\n-    }\n-  }\n \n-  private void copyToRemote(Path localLocation, Path remoteDestinationLocation) {\n-    FileSystem destinationFileSystem;\n-    try {\n-      destinationFileSystem = remoteDestinationLocation.getFileSystem(replicaHiveConf);\n-      destinationFileSystem.copyFromLocalFile(localLocation, remoteDestinationLocation);\n-    } catch (IOException e) {\n-      throw new CircusTrainException(\"Couldn't copy file from \" + localLocation + \" to \" + remoteDestinationLocation,\n-          e);\n-    }\n+    Path destinationSchemaFile = new Path(destination, sourceLocation.getName());\n+\n+    Map<String, Object> mergeCopierOptions = new HashMap<>(TableReplication\n+        .getMergedCopierOptions(globalCopierOptions.getCopierOptions(), eventTableReplication.getCopierOptions()));\n+    mergeCopierOptions.put(CopierOptions.COPY_DESTINATION_IS_FILE, \"true\");\n+    CopierFactory copierFactory = copierFactoryManager\n+        .getCopierFactory(sourceLocation, destinationSchemaFile, mergeCopierOptions);\n+    LOG.info(\"Going to replicate the Avro schema from '{}' to '{}'\", sourceLocation, destinationSchemaFile);\n+    Copier copier = copierFactory.newInstance(eventId, sourceLocation, destinationSchemaFile, mergeCopierOptions);\n+    Metrics metrics = copier.copy();\n+\n+    LOG\n+        .info(\"Avro schema '{} byes' has been copied from '{}' to '{}'\", metrics.getBytesReplicated(), sourceLocation,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyMzYxNw==", "bodyText": "I guess previously if there was no schema it would assume that HDFS was in use whereas s3 paths always start with s3. I think this is usually the case with our on-prem setup so I'm not sure if the change you made to always check hdfs will work for those cases...", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369523617", "createdAt": "2020-01-22T12:08:54Z", "author": {"login": "massdosage"}, "path": "circus-train-avro/src/test/java/com/hotels/bdp/circustrain/avro/util/FileSystemPathResolverTest.java", "diffHunk": "@@ -73,7 +81,7 @@ public void resolveNameServicesAddsAuthorityToPathWithoutScheme() {\n     setDfsPaths(\"foo\");\n     Path input = new Path(\"/etl/test/avsc/schema.avsc\");\n     Path result = resolver.resolveNameServices(input);\n-    Path expected = new Path(\"/foo/etl/test/avsc/schema.avsc\");\n+    Path expected = new Path(\"/etl/test/avsc/schema.avsc\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ5Njc5Ng=="}, "originalCommit": {"oid": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyMzg5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  CopierFactoryManager CopierFactoryManager,\n          \n          \n            \n                  CopierFactoryManager copierFactoryManager,", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369523891", "createdAt": "2020-01-22T12:09:46Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/ReplicationFactoryImpl.java", "diffHunk": "@@ -50,13 +47,13 @@\n   public ReplicationFactoryImpl(\n       SourceFactory sourceFactory,\n       ReplicaFactory replicaFactory,\n-      CopierFactoryManager copierFactoryManager,\n+      CopierFactoryManager CopierFactoryManager,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyNDI4Mg==", "bodyText": "Not sure why GH is moaning about no newline here?", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369524282", "createdAt": "2020-01-22T12:10:50Z", "author": {"login": "massdosage"}, "path": "circus-train-integration-tests/src/test/data/com/hotels/bdp/circustrain/integration/CircusTrainHdfsS3IntegrationTest/unpartitioned-single-table-avro-schema.yml", "diffHunk": "@@ -0,0 +1,10 @@\n+table-replications:\n+  - source-table:\n+      database-name: ${circus-train-runner.database-name}\n+      table-name: ct_table_u\n+    replica-table:\n+      table-name: ct_table_u_copy\n+      table-location: s3a://replica/${circus-train-runner.database-name}/ct_table_u_copy\n+security:\n+  credential-provider: jceks://file/${config-location}/aws.jceks\n+      ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyNDQxOA==", "bodyText": "Is there a reason we are using s3a here rather than just s3?", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369524418", "createdAt": "2020-01-22T12:11:15Z", "author": {"login": "massdosage"}, "path": "circus-train-integration-tests/src/test/data/com/hotels/bdp/circustrain/integration/CircusTrainHdfsS3IntegrationTest/unpartitioned-single-table-avro-schema.yml", "diffHunk": "@@ -0,0 +1,10 @@\n+table-replications:\n+  - source-table:\n+      database-name: ${circus-train-runner.database-name}\n+      table-name: ct_table_u\n+    replica-table:\n+      table-name: ct_table_u_copy\n+      table-location: s3a://replica/${circus-train-runner.database-name}/ct_table_u_copy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyNDQ1Mg==", "bodyText": "Ditto", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369524452", "createdAt": "2020-01-22T12:11:21Z", "author": {"login": "massdosage"}, "path": "circus-train-integration-tests/src/test/data/com/hotels/bdp/circustrain/integration/CircusTrainS3S3IntegrationTest/unpartitioned-single-table-avro-schema.yml", "diffHunk": "@@ -0,0 +1,9 @@\n+table-replications:\n+  - source-table:\n+      database-name: ${circus-train-runner.database-name}\n+      table-name: ct_table_u\n+    replica-table:\n+      table-name: ct_table_u_copy\n+      table-location: s3a://replica/${circus-train-runner.database-name}/ct_table_u_copy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyNTEyNA==", "bodyText": ":)", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369525124", "createdAt": "2020-01-22T12:13:02Z", "author": {"login": "massdosage"}, "path": "circus-train-s3-mapreduce-cp-copier/src/test/java/com/hotels/bdp/circustrain/s3mapreducecpcopier/S3MapReduceCpCopierTest.java", "diffHunk": "@@ -104,23 +106,41 @@ public void tableArgsAndConfiguration() throws Exception {\n     assertThat(options.getCredentialsProvider(), is(credentialsProvider));\n   }\n \n+  @Test\n+  public void tableArgsAndConfigurationOneFileCopy() throws Exception {\n+    Path sourceDataBaseFile = new Path(\"hdfs://source/data.txt\");\n+    Path replicaDataFile = new Path(\"s3://target/data.txt\");\n+    copierOptions.put(CopierOptions.COPY_DESTINATION_IS_FILE, \"true\");\n+    S3MapReduceCpCopier copier = new S3MapReduceCpCopier(conf, sourceDataBaseFile, Collections.<Path>emptyList(),\n+        replicaDataFile, copierOptions, executor, metricRegistry);\n+    Metrics metrics = copier.copy();\n+    assertThat(metrics, not(nullValue()));\n+\n+    verify(executor).exec(confCaptor.capture(), optionsCaptor.capture());\n+\n+    S3MapReduceCpOptions options = optionsCaptor.getValue();\n+    assertThat(options.getSources(), is(Arrays.asList(sourceDataBaseFile)));\n+    assertThat(options.getTarget(), is(replicaDataFile.toUri()));\n+    assertThat(options.getCredentialsProvider(), is(credentialsProvider));\n+  }\n+\n   @Test\n   public void overwriteAllCopierOptions() throws Exception {\n-    when(copierOptions.get(CREDENTIAL_PROVIDER)).thenReturn(\"jceks://hdfs/foo/bar.jceks\");\n-    when(copierOptions.get(MULTIPART_UPLOAD_CHUNK_SIZE)).thenReturn(\"1234\");\n-    when(copierOptions.get(S3_SERVER_SIDE_ENCRYPTION)).thenReturn(\"true\");\n-    when(copierOptions.get(STORAGE_CLASS)).thenReturn(\"reduced_redundancy\");\n-    when(copierOptions.get(TASK_BANDWIDTH)).thenReturn(\"567\");\n-    when(copierOptions.get(NUMBER_OF_WORKERS_PER_MAP)).thenReturn(\"89\");\n-    when(copierOptions.get(MULTIPART_UPLOAD_THRESHOLD)).thenReturn(\"123456\");\n-    when(copierOptions.get(MAX_MAPS)).thenReturn(\"78\");\n-    when(copierOptions.get(COPY_STRATEGY)).thenReturn(\"the-strategy\");\n-    when(copierOptions.get(LOG_PATH)).thenReturn(\"hdfs://path/to/logs/\");\n-    when(copierOptions.get(REGION)).thenReturn(\"us-east-1\");\n-    when(copierOptions.get(IGNORE_FAILURES)).thenReturn(\"true\");\n-    when(copierOptions.get(CANNED_ACL)).thenReturn(CannedAccessControlList.BucketOwnerFullControl.toString());\n-\n-    S3MapReduceCpCopier copier = new S3MapReduceCpCopier(conf, sourceDataBaseLocation, Collections.<Path> emptyList(),\n+    copierOptions.put(CREDENTIAL_PROVIDER, \"jceks://hdfs/foo/bar.jceks\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ5ODMyOQ=="}, "originalCommit": {"oid": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyNTQyNw==", "bodyText": "Or is this only used internally so we wouldn't want to advertise it?", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369525427", "createdAt": "2020-01-22T12:13:46Z", "author": {"login": "massdosage"}, "path": "circus-train-api/src/main/java/com/hotels/bdp/circustrain/api/copier/CopierOptions.java", "diffHunk": "@@ -21,6 +21,10 @@\n \n   String IGNORE_MISSING_PARTITION_FOLDER_ERRORS = \"ignore-missing-partition-folder-errors\";\n \n+  // internal option used to track if the destination of the replication should be treated as a folder or file. Value\n+  // can be parsed with Boolean.parseValue. If not set a folder is assumed.\n+  String COPY_DESTINATION_IS_FILE = \"copy-destination-is-file\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyMDA4MA=="}, "originalCommit": {"oid": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NjEwMDc0", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#pullrequestreview-346610074", "createdAt": "2020-01-22T14:05:32Z", "commit": {"oid": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNDowNTozMlrOFgdNKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNDowNjoxM1rOFgdOrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU3NzI1Nw==", "bodyText": "A general question: is there a reason to prefer the generic assertThat to more specific methods, like assertNotNull in this case?", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369577257", "createdAt": "2020-01-22T14:05:32Z", "author": {"login": "nvitucci"}, "path": "circus-train-api/src/test/java/com/hotels/bdp/circustrain/api/conf/TableReplicationTest.java", "diffHunk": "@@ -89,4 +93,26 @@ public void nullTableLocation() throws Exception {\n     assertThat(violations.size(), is(1));\n   }\n \n+  @Test\n+  public void mergeNullOptions() {\n+    Map<String, Object> mergedCopierOptions = tableReplication.getMergedCopierOptions(null);\n+    assertThat(mergedCopierOptions, is(not(nullValue())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU3NzY0NA==", "bodyText": "Ditto: why not assertEquals?", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369577644", "createdAt": "2020-01-22T14:06:13Z", "author": {"login": "nvitucci"}, "path": "circus-train-api/src/test/java/com/hotels/bdp/circustrain/api/conf/TableReplicationTest.java", "diffHunk": "@@ -89,4 +93,26 @@ public void nullTableLocation() throws Exception {\n     assertThat(violations.size(), is(1));\n   }\n \n+  @Test\n+  public void mergeNullOptions() {\n+    Map<String, Object> mergedCopierOptions = tableReplication.getMergedCopierOptions(null);\n+    assertThat(mergedCopierOptions, is(not(nullValue())));\n+    assertThat(mergedCopierOptions.isEmpty(), is(true));\n+  }\n+\n+  @Test\n+  public void mergeOptions() {\n+    Map<String, Object> globalOptions = new HashMap<>();\n+    globalOptions.put(\"one\", Integer.valueOf(1));\n+    globalOptions.put(\"two\", Integer.valueOf(2));\n+    Map<String, Object> overrideOptions = new HashMap<>();\n+    overrideOptions.put(\"two\", \"two\");\n+    overrideOptions.put(\"three\", \"three\");\n+    tableReplication.setCopierOptions(overrideOptions);\n+    Map<String, Object> mergedCopierOptions = tableReplication.getMergedCopierOptions(globalOptions);\n+    assertThat((Integer) mergedCopierOptions.get(\"one\"), is(Integer.valueOf(1)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e75ca74e314e1f3f8479bcf87d63df8f5c5bdf6c", "author": {"user": {"login": "patduin", "name": "Patrick Duin"}}, "url": "https://github.com/ExpediaGroup/circus-train/commit/e75ca74e314e1f3f8479bcf87d63df8f5c5bdf6c", "committedDate": "2020-01-22T15:02:47Z", "message": "Update CHANGELOG.md\n\nCo-Authored-By: Adrian Woodhead <awoodhead@expediagroup.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec92fbd560c3a50cc14e95e2d4bc26bbfb90a42f", "author": {"user": {"login": "patduin", "name": "Patrick Duin"}}, "url": "https://github.com/ExpediaGroup/circus-train/commit/ec92fbd560c3a50cc14e95e2d4bc26bbfb90a42f", "committedDate": "2020-01-22T15:05:27Z", "message": "Update circus-train-avro/src/main/java/com/hotels/bdp/circustrain/avro/util/SchemaCopier.java\n\nCo-Authored-By: Adrian Woodhead <awoodhead@expediagroup.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc35c2c9ae0ed6078d6e09b1637f857f2761b54f", "author": {"user": {"login": "patduin", "name": "Patrick Duin"}}, "url": "https://github.com/ExpediaGroup/circus-train/commit/bc35c2c9ae0ed6078d6e09b1637f857f2761b54f", "committedDate": "2020-01-22T15:05:43Z", "message": "Update circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/ReplicationFactoryImpl.java\n\nCo-Authored-By: Adrian Woodhead <awoodhead@expediagroup.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NzIxMjQ5", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#pullrequestreview-346721249", "createdAt": "2020-01-22T16:23:01Z", "commit": {"oid": "bc35c2c9ae0ed6078d6e09b1637f857f2761b54f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjoyMzowMVrOFgiYiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjoyMzowMVrOFgiYiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY2MjA5MQ==", "bodyText": "Why was this changed ?", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r369662091", "createdAt": "2020-01-22T16:23:01Z", "author": {"login": "abhimanyugupta07"}, "path": "circus-train-avro/src/main/java/com/hotels/bdp/circustrain/avro/transformation/AbstractAvroSerDeTransformation.java", "diffHunk": "@@ -85,8 +91,15 @@ public void tableReplicationStart(EventTableReplication tableReplication, String\n   }\n \n   @Override\n-  public void tableReplicationSuccess(EventTableReplication tableReplication, String eventId) {}\n+  public void tableReplicationSuccess(EventTableReplication tableReplication, String eventId) {\n+    this.eventId = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc35c2c9ae0ed6078d6e09b1637f857f2761b54f"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4099685cd0e25d45de2408a79d16f0c5d247a957", "author": {"user": null}, "url": "https://github.com/ExpediaGroup/circus-train/commit/4099685cd0e25d45de2408a79d16f0c5d247a957", "committedDate": "2020-01-22T16:35:37Z", "message": "Fixed test, fixed some naming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a560b779926207da92981a444830df179b3a275c", "author": {"user": null}, "url": "https://github.com/ExpediaGroup/circus-train/commit/a560b779926207da92981a444830df179b3a275c", "committedDate": "2020-01-22T16:39:29Z", "message": "constant"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83641af2c9109618b70d527dd1b52602c6872cdb", "author": {"user": null}, "url": "https://github.com/ExpediaGroup/circus-train/commit/83641af2c9109618b70d527dd1b52602c6872cdb", "committedDate": "2020-01-23T11:30:29Z", "message": "header"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MjQwNDU2", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#pullrequestreview-347240456", "createdAt": "2020-01-23T11:53:34Z", "commit": {"oid": "83641af2c9109618b70d527dd1b52602c6872cdb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d2746fe60045f44ca57fdc2fa91158ab125b7e1", "author": {"user": null}, "url": "https://github.com/ExpediaGroup/circus-train/commit/8d2746fe60045f44ca57fdc2fa91158ab125b7e1", "committedDate": "2020-01-23T13:38:53Z", "message": "reverted null assigments and fixed tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a97963de94be6393a18f510ce5659595d247200", "author": {"user": {"login": "patduin", "name": "Patrick Duin"}}, "url": "https://github.com/ExpediaGroup/circus-train/commit/4a97963de94be6393a18f510ce5659595d247200", "committedDate": "2020-01-23T13:46:44Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: Adrian Woodhead <awoodhead@expediagroup.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "803b72af77907422f896d30cbcc7f71e738026ee", "author": {"user": null}, "url": "https://github.com/ExpediaGroup/circus-train/commit/803b72af77907422f896d30cbcc7f71e738026ee", "committedDate": "2020-01-23T13:47:10Z", "message": "refactored"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35cc000860bda846085d0b680b7c119fde13eac0", "author": {"user": null}, "url": "https://github.com/ExpediaGroup/circus-train/commit/35cc000860bda846085d0b680b7c119fde13eac0", "committedDate": "2020-01-23T13:47:20Z", "message": "Merge branch 'issue-162' of github.com:HotelsDotCom/circus-train into issue-162"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5448f7b91aad292e267926024e904107c5330942", "author": {"user": null}, "url": "https://github.com/ExpediaGroup/circus-train/commit/5448f7b91aad292e267926024e904107c5330942", "committedDate": "2020-01-23T13:53:36Z", "message": "formatting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NDg3NDU3", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#pullrequestreview-347487457", "createdAt": "2020-01-23T17:44:08Z", "commit": {"oid": "5448f7b91aad292e267926024e904107c5330942"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzo0NDowOFrOFhHBtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzo1MjoxMFrOFhHQHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2MjQ1NA==", "bodyText": "Should we consider this a 15.1.0 release? It's somewhere between a bug fix and a feature...", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r370262454", "createdAt": "2020-01-23T17:44:08Z", "author": {"login": "massdosage"}, "path": "CHANGELOG.md", "diffHunk": "@@ -1,5 +1,8 @@\n-## [15.0.0] - 2019-11-12\n+## TBD - TBD", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5448f7b91aad292e267926024e904107c5330942"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2Mzg3MA==", "bodyText": "CopierFactoryFactory ;)", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r370263870", "createdAt": "2020-01-23T17:47:21Z", "author": {"login": "massdosage"}, "path": "circus-train-api/src/main/java/com/hotels/bdp/circustrain/api/copier/CopierFactoryManager.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.api.copier;\n+\n+import java.util.Map;\n+\n+import org.apache.hadoop.fs.Path;\n+\n+public interface CopierFactoryManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5448f7b91aad292e267926024e904107c5330942"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2NjE0MQ==", "bodyText": "OK, weird, let's leave it like this for now then.", "url": "https://github.com/ExpediaGroup/circus-train/pull/163#discussion_r370266141", "createdAt": "2020-01-23T17:52:10Z", "author": {"login": "massdosage"}, "path": "circus-train-integration-tests/src/test/data/com/hotels/bdp/circustrain/integration/CircusTrainHdfsS3IntegrationTest/unpartitioned-single-table-avro-schema.yml", "diffHunk": "@@ -0,0 +1,10 @@\n+table-replications:\n+  - source-table:\n+      database-name: ${circus-train-runner.database-name}\n+      table-name: ct_table_u\n+    replica-table:\n+      table-name: ct_table_u_copy\n+      table-location: s3a://replica/${circus-train-runner.database-name}/ct_table_u_copy", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyNDQxOA=="}, "originalCommit": {"oid": "1c6ebf524b9c94dcfa0c64d9f8730ae69eac954c"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "025dea4bd20c0db1ae8362d763ae66600713c783", "author": {"user": null}, "url": "https://github.com/ExpediaGroup/circus-train/commit/025dea4bd20c0db1ae8362d763ae66600713c783", "committedDate": "2020-01-23T19:44:11Z", "message": "bumped version"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3775, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}