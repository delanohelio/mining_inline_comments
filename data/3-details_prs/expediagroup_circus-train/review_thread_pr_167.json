{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMjIxNTY1", "number": 167, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMTowNzoxMVrODdSxUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwOTo0Njo1N1rODdnsgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDQyODM1OnYy", "diffSide": "RIGHT", "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMTowNzoxMVrOFlz8sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNDo0MTozOFrOFl6Mjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE5Mjc1Mw==", "bodyText": "shouldn't this be sublist instead of partitionsToAlter.\nclient.alter_partitions(replicaDatabaseName, replicaTableName, partitionsToAlter);", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375192753", "createdAt": "2020-02-05T11:07:11Z", "author": {"login": "abhimanyugupta07"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "diffHunk": "@@ -189,7 +222,13 @@ public void updateMetadata(\n       if (!partitionsToAlter.isEmpty()) {\n         LOG.info(\"Altering {} existing partitions.\", partitionsToAlter.size());\n         try {\n-          client.alter_partitions(replicaDatabaseName, replicaTableName, partitionsToAlter);\n+          int counter = 0;\n+          for (List<Partition> sublist : Lists.partition(partitionsToAlter, partitionBatchSize)) {\n+            int start = counter * partitionBatchSize;\n+            LOG.info(\"Altering partitions {} through {}\", start, start + sublist.size() - 1);\n+            client.alter_partitions(replicaDatabaseName, replicaTableName, partitionsToAlter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI5NTExOA==", "bodyText": "good catch, thanks!", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375295118", "createdAt": "2020-02-05T14:41:38Z", "author": {"login": "barnharts4"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "diffHunk": "@@ -189,7 +222,13 @@ public void updateMetadata(\n       if (!partitionsToAlter.isEmpty()) {\n         LOG.info(\"Altering {} existing partitions.\", partitionsToAlter.size());\n         try {\n-          client.alter_partitions(replicaDatabaseName, replicaTableName, partitionsToAlter);\n+          int counter = 0;\n+          for (List<Partition> sublist : Lists.partition(partitionsToAlter, partitionBatchSize)) {\n+            int start = counter * partitionBatchSize;\n+            LOG.info(\"Altering partitions {} through {}\", start, start + sublist.size() - 1);\n+            client.alter_partitions(replicaDatabaseName, replicaTableName, partitionsToAlter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE5Mjc1Mw=="}, "originalCommit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDQzMzY1OnYy", "diffSide": "RIGHT", "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMTowOTowNVrOFl0AEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNDo0MTo1M1rOFl6NLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE5MzYxOA==", "bodyText": "here too. sublist instead of statisticsToSet ?", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375193618", "createdAt": "2020-02-05T11:09:05Z", "author": {"login": "abhimanyugupta07"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "diffHunk": "@@ -203,7 +242,13 @@ public void updateMetadata(\n       if (!statisticsToSet.isEmpty()) {\n         LOG.info(\"Setting column statistics for {} partitions.\", statisticsToSet.size());\n         try {\n-          client.setPartitionColumnStatistics(new SetPartitionsStatsRequest(statisticsToSet));\n+          int counter = 0;\n+          for (List<ColumnStatistics> sublist : Lists.partition(statisticsToSet, partitionBatchSize)) {\n+            int start = counter * partitionBatchSize;\n+            LOG.info(\"Setting column statistics for partitions {} through {}\", start, start + sublist.size() - 1);\n+            client.setPartitionColumnStatistics(new SetPartitionsStatsRequest(statisticsToSet));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI5NTI3Ng==", "bodyText": "yep, thanks", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375295276", "createdAt": "2020-02-05T14:41:53Z", "author": {"login": "barnharts4"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "diffHunk": "@@ -203,7 +242,13 @@ public void updateMetadata(\n       if (!statisticsToSet.isEmpty()) {\n         LOG.info(\"Setting column statistics for {} partitions.\", statisticsToSet.size());\n         try {\n-          client.setPartitionColumnStatistics(new SetPartitionsStatsRequest(statisticsToSet));\n+          int counter = 0;\n+          for (List<ColumnStatistics> sublist : Lists.partition(statisticsToSet, partitionBatchSize)) {\n+            int start = counter * partitionBatchSize;\n+            LOG.info(\"Setting column statistics for partitions {} through {}\", start, start + sublist.size() - 1);\n+            client.setPartitionColumnStatistics(new SetPartitionsStatsRequest(statisticsToSet));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE5MzYxOA=="}, "originalCommit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDQ5MzA0OnYy", "diffSide": "RIGHT", "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/ReplicaTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMTozMDoyMVrOFl0j0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNDo1NzoyMVrOFl6zpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwMjc3MA==", "bodyText": "I think to test the batching for alter_partition and setPartitionColumnStatistics usecase, it will be nice to have more than one existing partitions.", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375202770", "createdAt": "2020-02-05T11:30:21Z", "author": {"login": "abhimanyugupta07"}, "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/ReplicaTest.java", "diffHunk": "@@ -425,18 +440,28 @@ public void alteringExistingPartitionedReplicaTableWithPartitionsSucceeds() thro\n     verify(mockMetaStoreClient).updateTableColumnStatistics(columnStatistics);\n     verify(mockReplicaLocationManager).addCleanUpLocation(anyString(), any(Path.class));\n     verify(mockMetaStoreClient).alter_partitions(eq(DB_NAME), eq(TABLE_NAME), alterPartitionCaptor.capture());\n-    verify(mockMetaStoreClient).add_partitions(addPartitionCaptor.capture());\n+    verify(mockMetaStoreClient, times(2)).add_partitions(addPartitionCaptor.capture());\n \n     assertThat(alterPartitionCaptor.getValue().size(), is(1));\n-    assertThat(addPartitionCaptor.getValue().size(), is(1));\n+\n+    // Validate that the args were expected number of batches (2), and expected batch sizes (2, then 1) since\n+    // we sent a list of 3 new partitions and used a partitionBatchSize of 2\n+\n+    List<List<Partition>> addCaptorValues = addPartitionCaptor.getAllValues();\n+    List<Partition> firstBatch = addCaptorValues.get(0);\n+    List<Partition> secondBatch = addCaptorValues.get(1);\n+    assertThat(addCaptorValues.size(), is(2));\n+    assertThat(firstBatch.size(), is(2));\n+    assertThat(secondBatch.size(), is(1));\n \n     Partition altered = alterPartitionCaptor.getValue().get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMjk5Mg==", "bodyText": "Yeah, it feels like we are missing some tests that would have caught the issues you called out above. I'd suggest writing new tests (or modifying existing) and getting them to fail with the current code and then fixing the code and they should then pass.", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375212992", "createdAt": "2020-02-05T11:55:02Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/ReplicaTest.java", "diffHunk": "@@ -425,18 +440,28 @@ public void alteringExistingPartitionedReplicaTableWithPartitionsSucceeds() thro\n     verify(mockMetaStoreClient).updateTableColumnStatistics(columnStatistics);\n     verify(mockReplicaLocationManager).addCleanUpLocation(anyString(), any(Path.class));\n     verify(mockMetaStoreClient).alter_partitions(eq(DB_NAME), eq(TABLE_NAME), alterPartitionCaptor.capture());\n-    verify(mockMetaStoreClient).add_partitions(addPartitionCaptor.capture());\n+    verify(mockMetaStoreClient, times(2)).add_partitions(addPartitionCaptor.capture());\n \n     assertThat(alterPartitionCaptor.getValue().size(), is(1));\n-    assertThat(addPartitionCaptor.getValue().size(), is(1));\n+\n+    // Validate that the args were expected number of batches (2), and expected batch sizes (2, then 1) since\n+    // we sent a list of 3 new partitions and used a partitionBatchSize of 2\n+\n+    List<List<Partition>> addCaptorValues = addPartitionCaptor.getAllValues();\n+    List<Partition> firstBatch = addCaptorValues.get(0);\n+    List<Partition> secondBatch = addCaptorValues.get(1);\n+    assertThat(addCaptorValues.size(), is(2));\n+    assertThat(firstBatch.size(), is(2));\n+    assertThat(secondBatch.size(), is(1));\n \n     Partition altered = alterPartitionCaptor.getValue().get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwMjc3MA=="}, "originalCommit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI5NzM1NQ==", "bodyText": "hmm, I agree with adding more tests for for alter_partition and setPartitionColumnStatistics but how would you suggest I get current(old) code to fail?  I guess I could mock a failure of the metastore client if the size of the list was longer than the partitionBatchSize, but that seems fairly contrived and not really testing anything except my ability to mock stuff.", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375297355", "createdAt": "2020-02-05T14:45:14Z", "author": {"login": "barnharts4"}, "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/ReplicaTest.java", "diffHunk": "@@ -425,18 +440,28 @@ public void alteringExistingPartitionedReplicaTableWithPartitionsSucceeds() thro\n     verify(mockMetaStoreClient).updateTableColumnStatistics(columnStatistics);\n     verify(mockReplicaLocationManager).addCleanUpLocation(anyString(), any(Path.class));\n     verify(mockMetaStoreClient).alter_partitions(eq(DB_NAME), eq(TABLE_NAME), alterPartitionCaptor.capture());\n-    verify(mockMetaStoreClient).add_partitions(addPartitionCaptor.capture());\n+    verify(mockMetaStoreClient, times(2)).add_partitions(addPartitionCaptor.capture());\n \n     assertThat(alterPartitionCaptor.getValue().size(), is(1));\n-    assertThat(addPartitionCaptor.getValue().size(), is(1));\n+\n+    // Validate that the args were expected number of batches (2), and expected batch sizes (2, then 1) since\n+    // we sent a list of 3 new partitions and used a partitionBatchSize of 2\n+\n+    List<List<Partition>> addCaptorValues = addPartitionCaptor.getAllValues();\n+    List<Partition> firstBatch = addCaptorValues.get(0);\n+    List<Partition> secondBatch = addCaptorValues.get(1);\n+    assertThat(addCaptorValues.size(), is(2));\n+    assertThat(firstBatch.size(), is(2));\n+    assertThat(secondBatch.size(), is(1));\n \n     Partition altered = alterPartitionCaptor.getValue().get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwMjc3MA=="}, "originalCommit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMwMzY3OQ==", "bodyText": "or maybe you didn't mean the issue of overwhelming the HMS with the full list, but rather the issue that I forgot to use sublist above?  In that case, yes, good point.", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375303679", "createdAt": "2020-02-05T14:55:11Z", "author": {"login": "barnharts4"}, "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/ReplicaTest.java", "diffHunk": "@@ -425,18 +440,28 @@ public void alteringExistingPartitionedReplicaTableWithPartitionsSucceeds() thro\n     verify(mockMetaStoreClient).updateTableColumnStatistics(columnStatistics);\n     verify(mockReplicaLocationManager).addCleanUpLocation(anyString(), any(Path.class));\n     verify(mockMetaStoreClient).alter_partitions(eq(DB_NAME), eq(TABLE_NAME), alterPartitionCaptor.capture());\n-    verify(mockMetaStoreClient).add_partitions(addPartitionCaptor.capture());\n+    verify(mockMetaStoreClient, times(2)).add_partitions(addPartitionCaptor.capture());\n \n     assertThat(alterPartitionCaptor.getValue().size(), is(1));\n-    assertThat(addPartitionCaptor.getValue().size(), is(1));\n+\n+    // Validate that the args were expected number of batches (2), and expected batch sizes (2, then 1) since\n+    // we sent a list of 3 new partitions and used a partitionBatchSize of 2\n+\n+    List<List<Partition>> addCaptorValues = addPartitionCaptor.getAllValues();\n+    List<Partition> firstBatch = addCaptorValues.get(0);\n+    List<Partition> secondBatch = addCaptorValues.get(1);\n+    assertThat(addCaptorValues.size(), is(2));\n+    assertThat(firstBatch.size(), is(2));\n+    assertThat(secondBatch.size(), is(1));\n \n     Partition altered = alterPartitionCaptor.getValue().get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwMjc3MA=="}, "originalCommit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMwNTEyNw==", "bodyText": "Yes. Your last comment is what I meant. Just adding two more existing partitions in the test should give you a batch to trigger the changes you made.", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375305127", "createdAt": "2020-02-05T14:57:21Z", "author": {"login": "abhimanyugupta07"}, "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/ReplicaTest.java", "diffHunk": "@@ -425,18 +440,28 @@ public void alteringExistingPartitionedReplicaTableWithPartitionsSucceeds() thro\n     verify(mockMetaStoreClient).updateTableColumnStatistics(columnStatistics);\n     verify(mockReplicaLocationManager).addCleanUpLocation(anyString(), any(Path.class));\n     verify(mockMetaStoreClient).alter_partitions(eq(DB_NAME), eq(TABLE_NAME), alterPartitionCaptor.capture());\n-    verify(mockMetaStoreClient).add_partitions(addPartitionCaptor.capture());\n+    verify(mockMetaStoreClient, times(2)).add_partitions(addPartitionCaptor.capture());\n \n     assertThat(alterPartitionCaptor.getValue().size(), is(1));\n-    assertThat(addPartitionCaptor.getValue().size(), is(1));\n+\n+    // Validate that the args were expected number of batches (2), and expected batch sizes (2, then 1) since\n+    // we sent a list of 3 new partitions and used a partitionBatchSize of 2\n+\n+    List<List<Partition>> addCaptorValues = addPartitionCaptor.getAllValues();\n+    List<Partition> firstBatch = addCaptorValues.get(0);\n+    List<Partition> secondBatch = addCaptorValues.get(1);\n+    assertThat(addCaptorValues.size(), is(2));\n+    assertThat(firstBatch.size(), is(2));\n+    assertThat(secondBatch.size(), is(1));\n \n     Partition altered = alterPartitionCaptor.getValue().get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwMjc3MA=="}, "originalCommit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDUzMzUxOnYy", "diffSide": "RIGHT", "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMTo0NTo1OFrOFl086g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNDo1MDoyNFrOFl6iHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwOTE5NA==", "bodyText": "Minor, but these imports should go along with the other google imports. I've made a mental note to update our hotels-oss-parent with a plugin that automatically does this that we've started using in EG org on GitHub so this is automated by Maven.", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375209194", "createdAt": "2020-02-05T11:45:58Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "diffHunk": "@@ -30,6 +30,8 @@\n import java.util.Map;\n import java.util.Objects;\n \n+import com.google.common.annotations.VisibleForTesting;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI5ODQzNQ==", "bodyText": "Yeah, I am struggling with the correct IntelliJ settings to match circus train's preferred import layout.  Obviously DSP standards are not matching up well with HCOM in this circumstance. Do you have a doc or a settings file or something so that I can update?", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375298435", "createdAt": "2020-02-05T14:46:53Z", "author": {"login": "barnharts4"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "diffHunk": "@@ -30,6 +30,8 @@\n import java.util.Map;\n import java.util.Objects;\n \n+import com.google.common.annotations.VisibleForTesting;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwOTE5NA=="}, "originalCommit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMwMDYzOA==", "bodyText": "This will do it once I've merged and released the parent - https://github.com/HotelsDotCom/circus-train/pull/168/files\nI'm getting timeouts publishing to Maven Central right now, they've had lots of scalability issues in the last few months so I'm going to leave it for today and try again tomorrow.", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375300638", "createdAt": "2020-02-05T14:50:24Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "diffHunk": "@@ -30,6 +30,8 @@\n import java.util.Map;\n import java.util.Objects;\n \n+import com.google.common.annotations.VisibleForTesting;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwOTE5NA=="}, "originalCommit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDU0MDM4OnYy", "diffSide": "RIGHT", "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMTo0ODozNFrOFl1BVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMTo0ODozNFrOFl1BVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMDMyNg==", "bodyText": "NABD but you could inline this on line 77 and then only have the assignment in the constructor below which actually allows you to override the value.", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375210326", "createdAt": "2020-02-05T11:48:34Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "diffHunk": "@@ -89,6 +93,29 @@\n     this.housekeepingListener = housekeepingListener;\n     replicationMode = tableReplication.getReplicationMode();\n     this.tableReplication = tableReplication;\n+    this.partitionBatchSize = DEFAULT_PARTITION_BATCH_SIZE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDU0MTMxOnYy", "diffSide": "RIGHT", "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMTo0ODo1MlrOFl1B3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwOTo0NDowN1rOFmUzUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMDQ2MQ==", "bodyText": "What does this comment mean?", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375210461", "createdAt": "2020-02-05T11:48:52Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "diffHunk": "@@ -89,6 +93,29 @@\n     this.housekeepingListener = housekeepingListener;\n     replicationMode = tableReplication.getReplicationMode();\n     this.tableReplication = tableReplication;\n+    this.partitionBatchSize = DEFAULT_PARTITION_BATCH_SIZE;\n+  }\n+\n+  /**\n+   * Use {@link ReplicaFactory}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI5OTA2NA==", "bodyText": "It was copied from the other constructor, and it means that this constructor is package-private and to construct this, you need to use ReplicaFactory.", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375299064", "createdAt": "2020-02-05T14:47:52Z", "author": {"login": "barnharts4"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "diffHunk": "@@ -89,6 +93,29 @@\n     this.housekeepingListener = housekeepingListener;\n     replicationMode = tableReplication.getReplicationMode();\n     this.tableReplication = tableReplication;\n+    this.partitionBatchSize = DEFAULT_PARTITION_BATCH_SIZE;\n+  }\n+\n+  /**\n+   * Use {@link ReplicaFactory}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMDQ2MQ=="}, "originalCommit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTczMTAyNw==", "bodyText": "Ah, OK.", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375731027", "createdAt": "2020-02-06T09:44:07Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "diffHunk": "@@ -89,6 +93,29 @@\n     this.housekeepingListener = housekeepingListener;\n     replicationMode = tableReplication.getReplicationMode();\n     this.tableReplication = tableReplication;\n+    this.partitionBatchSize = DEFAULT_PARTITION_BATCH_SIZE;\n+  }\n+\n+  /**\n+   * Use {@link ReplicaFactory}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMDQ2MQ=="}, "originalCommit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDU0Nzg5OnYy", "diffSide": "RIGHT", "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMTo1MToyNFrOFl1F_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMTo1MToyNFrOFl1F_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMTUxNg==", "bodyText": "I've never come across Lists.partition before, looks good.", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375211516", "createdAt": "2020-02-05T11:51:24Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/main/java/com/hotels/bdp/circustrain/core/replica/Replica.java", "diffHunk": "@@ -175,7 +202,13 @@ public void updateMetadata(\n       if (!partitionsToCreate.isEmpty()) {\n         LOG.info(\"Creating {} new partitions.\", partitionsToCreate.size());\n         try {\n-          client.add_partitions(partitionsToCreate);\n+          int counter = 0;\n+          for (List<Partition> sublist : Lists.partition(partitionsToCreate, partitionBatchSize)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDU1MzM3OnYy", "diffSide": "RIGHT", "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/ReplicaTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMTo1MzozM1rOFl1JUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNDo0ODoxMFrOFl6ctw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMjM2OA==", "bodyText": "I know it's not the most readable format but our import ordering is this: https://github.com/ExpediaGroup/eg-oss-parent/blob/master/pom.xml#L102", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375212368", "createdAt": "2020-02-05T11:53:33Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/ReplicaTest.java", "diffHunk": "@@ -22,22 +22,29 @@\n import static org.mockito.Matchers.anyString;\n import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoMoreInteractions;\n import static org.mockito.Mockito.when;\n \n import static com.hotels.bdp.circustrain.api.CircusTrainTableParameter.REPLICATION_EVENT;\n import static com.hotels.bdp.circustrain.api.CircusTrainTableParameter.REPLICATION_MODE;\n \n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.Comparator;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n+import com.google.common.base.Supplier;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI5OTI1NQ==", "bodyText": "ah, thanks, just what I was looking for!", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375299255", "createdAt": "2020-02-05T14:48:10Z", "author": {"login": "barnharts4"}, "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/ReplicaTest.java", "diffHunk": "@@ -22,22 +22,29 @@\n import static org.mockito.Matchers.anyString;\n import static org.mockito.Matchers.eq;\n import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoMoreInteractions;\n import static org.mockito.Mockito.when;\n \n import static com.hotels.bdp.circustrain.api.CircusTrainTableParameter.REPLICATION_EVENT;\n import static com.hotels.bdp.circustrain.api.CircusTrainTableParameter.REPLICATION_MODE;\n \n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.Comparator;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n+import com.google.common.base.Supplier;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMjM2OA=="}, "originalCommit": {"oid": "92d556ad13977fda339f0cfb16aaa3bc45349317"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzg1NjY0OnYy", "diffSide": "RIGHT", "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/ReplicaTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwOTo0Njo1N1rOFmU5FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNzozODowMVrOFmkGDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTczMjUwMQ==", "bodyText": "For another day but I wonder if we could use JUnit's \"parameterised\" feature to do this.", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375732501", "createdAt": "2020-02-06T09:46:57Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/ReplicaTest.java", "diffHunk": "@@ -423,41 +466,106 @@ public void alteringExistingPartitionedReplicaTableWithPartitionsSucceeds() thro\n \n     verify(mockMetaStoreClient).alter_table(eq(DB_NAME), eq(TABLE_NAME), any(Table.class));\n     verify(mockMetaStoreClient).updateTableColumnStatistics(columnStatistics);\n-    verify(mockReplicaLocationManager).addCleanUpLocation(anyString(), any(Path.class));\n-    verify(mockMetaStoreClient).alter_partitions(eq(DB_NAME), eq(TABLE_NAME), alterPartitionCaptor.capture());\n-    verify(mockMetaStoreClient).add_partitions(addPartitionCaptor.capture());\n+    verify(mockReplicaLocationManager, times(numTestAlterPartitions)).addCleanUpLocation(anyString(), any(Path.class));\n+    verify(mockMetaStoreClient, times(numAlterBatches)).alter_partitions(eq(DB_NAME), eq(TABLE_NAME), alterPartitionCaptor.capture());\n+    verify(mockMetaStoreClient, times(numAddBatches)).add_partitions(addPartitionCaptor.capture());\n+\n+    // Validate that the args were expected number of batches , and expected batch sizes\n+    List<List<Partition>> addCaptorValues = addPartitionCaptor.getAllValues();\n+    assertThat(addCaptorValues.size(), is(numAddBatches));\n+\n+    for (int batchNdx = 0; batchNdx < numAddBatches; batchNdx++) {\n+      int thisBatchSize = batchNdx < (numAddBatches - 1) ? TEST_PARTITION_BATCH_SIZE : lastAddBatchSize;\n+      List<Partition> addBatch = addCaptorValues.get(batchNdx);\n+      assertThat(addBatch.size(), is(thisBatchSize));\n+      for (int entryInBatchNdx = 0; entryInBatchNdx < addBatch.size(); entryInBatchNdx++) {\n+        assertThat(addBatch.get(entryInBatchNdx).getValues(),\n+                is(Arrays.asList(String.format(\"new_%s\", (batchNdx * TEST_PARTITION_BATCH_SIZE) + entryInBatchNdx),\n+                        String.format(\"new_%s_sub\", (batchNdx * TEST_PARTITION_BATCH_SIZE) + entryInBatchNdx))));\n+      }\n+    }\n \n-    assertThat(alterPartitionCaptor.getValue().size(), is(1));\n-    assertThat(addPartitionCaptor.getValue().size(), is(1));\n+    List<List<Partition>> alterCaptorValues = alterPartitionCaptor.getAllValues();\n+    assertThat(alterCaptorValues.size(), is(numAlterBatches));\n+    for (int batchNdx = 0; batchNdx < numAlterBatches; batchNdx++) {\n+      int thisBatchSize = batchNdx < (numAlterBatches - 1) ? TEST_PARTITION_BATCH_SIZE : lastAlterBatchSize;\n+      List<Partition> alterBatch = alterCaptorValues.get(batchNdx);\n+      assertThat(alterBatch.size(), is(thisBatchSize));\n+      for (int entryInBatchNdx = 0; entryInBatchNdx < alterBatch.size(); entryInBatchNdx++) {\n+        assertThat(alterBatch.get(entryInBatchNdx).getValues(),\n+                is(Arrays.asList(String.format(\"exist_%s\", (batchNdx * TEST_PARTITION_BATCH_SIZE) + entryInBatchNdx),\n+                        String.format(\"exist_%s_sub\", (batchNdx * TEST_PARTITION_BATCH_SIZE) + entryInBatchNdx))));\n+      }\n+    }\n \n-    Partition altered = alterPartitionCaptor.getValue().get(0);\n-    assertThat(altered.getValues(), is(Arrays.asList(\"one\", \"two\")));\n+    verify(mockMetaStoreClient, times(numStatisticsBatches)).setPartitionColumnStatistics(setStatsRequestCaptor.capture());\n+    List<SetPartitionsStatsRequest> statsRequestList = setStatsRequestCaptor.getAllValues();\n+    assertThat(statsRequestList.size(), is(numStatisticsBatches));\n \n-    Partition added = addPartitionCaptor.getValue().get(0);\n-    assertThat(added.getValues(), is(Arrays.asList(\"three\", \"four\")));\n+    List<ColumnStatistics> columnStats = new ArrayList<>();\n+    for (int colStatNdx = 0; colStatNdx < numStatisticsBatches; colStatNdx++) {\n+      int thisBatchSize = colStatNdx < (numStatisticsBatches - 1) ? TEST_PARTITION_BATCH_SIZE : lastStatisticsBatchSize;\n+      assertThat(statsRequestList.get(colStatNdx).getColStats().size(), is(thisBatchSize));\n+      columnStats.addAll(statsRequestList.get(colStatNdx).getColStats());\n+    }\n \n-    verify(mockMetaStoreClient).setPartitionColumnStatistics(setStatsRequestCaptor.capture());\n-    SetPartitionsStatsRequest statsRequest = setStatsRequestCaptor.getValue();\n+    assertThat(columnStats.size(), is(numTestAlterPartitions + numTestAddPartitions));\n \n-    List<ColumnStatistics> columnStats = new ArrayList<>(statsRequest.getColStats());\n-    Collections.sort(columnStats, new Comparator<ColumnStatistics>() {\n-      @Override\n-      public int compare(ColumnStatistics o1, ColumnStatistics o2) {\n-        return o1.getStatsDesc().getPartName().compareTo(o2.getStatsDesc().getPartName());\n-      }\n-    });\n-    assertThat(columnStats.size(), is(2));\n+    for (int colStatNdx = 0; colStatNdx < numTestAlterPartitions; colStatNdx++) {\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().isIsTblLevel(), is(false));\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().getDbName(), is(DB_NAME));\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().getTableName(), is(TABLE_NAME));\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().getPartName(),\n+              is(String.format(\"c=exist_%s/d=exist_%s_sub\", colStatNdx, colStatNdx)));\n+      assertThat(columnStats.get(colStatNdx).getStatsObj().size(), is(2));\n+    }\n \n-    assertThat(columnStats.get(0).getStatsDesc().isIsTblLevel(), is(false));\n-    assertThat(columnStats.get(0).getStatsDesc().getDbName(), is(DB_NAME));\n-    assertThat(columnStats.get(0).getStatsDesc().getTableName(), is(TABLE_NAME));\n-    assertThat(columnStats.get(0).getStatsDesc().getPartName(), is(\"c=one/d=two\"));\n-    assertThat(columnStats.get(0).getStatsObj().size(), is(2));\n-    assertThat(columnStats.get(1).getStatsDesc().isIsTblLevel(), is(false));\n-    assertThat(columnStats.get(1).getStatsDesc().getDbName(), is(DB_NAME));\n-    assertThat(columnStats.get(1).getStatsDesc().getTableName(), is(TABLE_NAME));\n-    assertThat(columnStats.get(1).getStatsDesc().getPartName(), is(\"c=three/d=four\"));\n-    assertThat(columnStats.get(1).getStatsObj().size(), is(2));\n+    for (int colStatNdx = numTestAlterPartitions, addPartColStatNdx = 0;\n+         colStatNdx < numTestAlterPartitions + numTestAddPartitions;\n+         colStatNdx++, addPartColStatNdx++) {\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().isIsTblLevel(), is(false));\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().getDbName(), is(DB_NAME));\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().getTableName(), is(TABLE_NAME));\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().getPartName(),\n+              is(String.format(\"c=new_%s/d=new_%s_sub\", addPartColStatNdx, addPartColStatNdx)));\n+      assertThat(columnStats.get(colStatNdx).getStatsObj().size(), is(2));\n+    }\n+  }\n+\n+\n+  @Test\n+  public void alteringExistingPartitionedReplicaTableWithNewPartitionsInBatchesSucceeds_0_0() throws TException, IOException {\n+    alterExistingPartitionedReplicaTableWithNewPartitionsInBatches(0,0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa35464dd74f0a4fef65d8cb7e67f8befb430cd"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg1OTE5NQ==", "bodyText": "I looked into that, but found references to Parameterized not working with MockitoJUnitRunner (https://stackoverflow.com/questions/12606148/passing-parameterized-input-using-mockitos) so I didn't pursue further in the interest of time.  But yes, that would be the perfect for this situation.", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375859195", "createdAt": "2020-02-06T14:19:13Z", "author": {"login": "barnharts4"}, "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/ReplicaTest.java", "diffHunk": "@@ -423,41 +466,106 @@ public void alteringExistingPartitionedReplicaTableWithPartitionsSucceeds() thro\n \n     verify(mockMetaStoreClient).alter_table(eq(DB_NAME), eq(TABLE_NAME), any(Table.class));\n     verify(mockMetaStoreClient).updateTableColumnStatistics(columnStatistics);\n-    verify(mockReplicaLocationManager).addCleanUpLocation(anyString(), any(Path.class));\n-    verify(mockMetaStoreClient).alter_partitions(eq(DB_NAME), eq(TABLE_NAME), alterPartitionCaptor.capture());\n-    verify(mockMetaStoreClient).add_partitions(addPartitionCaptor.capture());\n+    verify(mockReplicaLocationManager, times(numTestAlterPartitions)).addCleanUpLocation(anyString(), any(Path.class));\n+    verify(mockMetaStoreClient, times(numAlterBatches)).alter_partitions(eq(DB_NAME), eq(TABLE_NAME), alterPartitionCaptor.capture());\n+    verify(mockMetaStoreClient, times(numAddBatches)).add_partitions(addPartitionCaptor.capture());\n+\n+    // Validate that the args were expected number of batches , and expected batch sizes\n+    List<List<Partition>> addCaptorValues = addPartitionCaptor.getAllValues();\n+    assertThat(addCaptorValues.size(), is(numAddBatches));\n+\n+    for (int batchNdx = 0; batchNdx < numAddBatches; batchNdx++) {\n+      int thisBatchSize = batchNdx < (numAddBatches - 1) ? TEST_PARTITION_BATCH_SIZE : lastAddBatchSize;\n+      List<Partition> addBatch = addCaptorValues.get(batchNdx);\n+      assertThat(addBatch.size(), is(thisBatchSize));\n+      for (int entryInBatchNdx = 0; entryInBatchNdx < addBatch.size(); entryInBatchNdx++) {\n+        assertThat(addBatch.get(entryInBatchNdx).getValues(),\n+                is(Arrays.asList(String.format(\"new_%s\", (batchNdx * TEST_PARTITION_BATCH_SIZE) + entryInBatchNdx),\n+                        String.format(\"new_%s_sub\", (batchNdx * TEST_PARTITION_BATCH_SIZE) + entryInBatchNdx))));\n+      }\n+    }\n \n-    assertThat(alterPartitionCaptor.getValue().size(), is(1));\n-    assertThat(addPartitionCaptor.getValue().size(), is(1));\n+    List<List<Partition>> alterCaptorValues = alterPartitionCaptor.getAllValues();\n+    assertThat(alterCaptorValues.size(), is(numAlterBatches));\n+    for (int batchNdx = 0; batchNdx < numAlterBatches; batchNdx++) {\n+      int thisBatchSize = batchNdx < (numAlterBatches - 1) ? TEST_PARTITION_BATCH_SIZE : lastAlterBatchSize;\n+      List<Partition> alterBatch = alterCaptorValues.get(batchNdx);\n+      assertThat(alterBatch.size(), is(thisBatchSize));\n+      for (int entryInBatchNdx = 0; entryInBatchNdx < alterBatch.size(); entryInBatchNdx++) {\n+        assertThat(alterBatch.get(entryInBatchNdx).getValues(),\n+                is(Arrays.asList(String.format(\"exist_%s\", (batchNdx * TEST_PARTITION_BATCH_SIZE) + entryInBatchNdx),\n+                        String.format(\"exist_%s_sub\", (batchNdx * TEST_PARTITION_BATCH_SIZE) + entryInBatchNdx))));\n+      }\n+    }\n \n-    Partition altered = alterPartitionCaptor.getValue().get(0);\n-    assertThat(altered.getValues(), is(Arrays.asList(\"one\", \"two\")));\n+    verify(mockMetaStoreClient, times(numStatisticsBatches)).setPartitionColumnStatistics(setStatsRequestCaptor.capture());\n+    List<SetPartitionsStatsRequest> statsRequestList = setStatsRequestCaptor.getAllValues();\n+    assertThat(statsRequestList.size(), is(numStatisticsBatches));\n \n-    Partition added = addPartitionCaptor.getValue().get(0);\n-    assertThat(added.getValues(), is(Arrays.asList(\"three\", \"four\")));\n+    List<ColumnStatistics> columnStats = new ArrayList<>();\n+    for (int colStatNdx = 0; colStatNdx < numStatisticsBatches; colStatNdx++) {\n+      int thisBatchSize = colStatNdx < (numStatisticsBatches - 1) ? TEST_PARTITION_BATCH_SIZE : lastStatisticsBatchSize;\n+      assertThat(statsRequestList.get(colStatNdx).getColStats().size(), is(thisBatchSize));\n+      columnStats.addAll(statsRequestList.get(colStatNdx).getColStats());\n+    }\n \n-    verify(mockMetaStoreClient).setPartitionColumnStatistics(setStatsRequestCaptor.capture());\n-    SetPartitionsStatsRequest statsRequest = setStatsRequestCaptor.getValue();\n+    assertThat(columnStats.size(), is(numTestAlterPartitions + numTestAddPartitions));\n \n-    List<ColumnStatistics> columnStats = new ArrayList<>(statsRequest.getColStats());\n-    Collections.sort(columnStats, new Comparator<ColumnStatistics>() {\n-      @Override\n-      public int compare(ColumnStatistics o1, ColumnStatistics o2) {\n-        return o1.getStatsDesc().getPartName().compareTo(o2.getStatsDesc().getPartName());\n-      }\n-    });\n-    assertThat(columnStats.size(), is(2));\n+    for (int colStatNdx = 0; colStatNdx < numTestAlterPartitions; colStatNdx++) {\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().isIsTblLevel(), is(false));\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().getDbName(), is(DB_NAME));\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().getTableName(), is(TABLE_NAME));\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().getPartName(),\n+              is(String.format(\"c=exist_%s/d=exist_%s_sub\", colStatNdx, colStatNdx)));\n+      assertThat(columnStats.get(colStatNdx).getStatsObj().size(), is(2));\n+    }\n \n-    assertThat(columnStats.get(0).getStatsDesc().isIsTblLevel(), is(false));\n-    assertThat(columnStats.get(0).getStatsDesc().getDbName(), is(DB_NAME));\n-    assertThat(columnStats.get(0).getStatsDesc().getTableName(), is(TABLE_NAME));\n-    assertThat(columnStats.get(0).getStatsDesc().getPartName(), is(\"c=one/d=two\"));\n-    assertThat(columnStats.get(0).getStatsObj().size(), is(2));\n-    assertThat(columnStats.get(1).getStatsDesc().isIsTblLevel(), is(false));\n-    assertThat(columnStats.get(1).getStatsDesc().getDbName(), is(DB_NAME));\n-    assertThat(columnStats.get(1).getStatsDesc().getTableName(), is(TABLE_NAME));\n-    assertThat(columnStats.get(1).getStatsDesc().getPartName(), is(\"c=three/d=four\"));\n-    assertThat(columnStats.get(1).getStatsObj().size(), is(2));\n+    for (int colStatNdx = numTestAlterPartitions, addPartColStatNdx = 0;\n+         colStatNdx < numTestAlterPartitions + numTestAddPartitions;\n+         colStatNdx++, addPartColStatNdx++) {\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().isIsTblLevel(), is(false));\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().getDbName(), is(DB_NAME));\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().getTableName(), is(TABLE_NAME));\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().getPartName(),\n+              is(String.format(\"c=new_%s/d=new_%s_sub\", addPartColStatNdx, addPartColStatNdx)));\n+      assertThat(columnStats.get(colStatNdx).getStatsObj().size(), is(2));\n+    }\n+  }\n+\n+\n+  @Test\n+  public void alteringExistingPartitionedReplicaTableWithNewPartitionsInBatchesSucceeds_0_0() throws TException, IOException {\n+    alterExistingPartitionedReplicaTableWithNewPartitionsInBatches(0,0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTczMjUwMQ=="}, "originalCommit": {"oid": "0aa35464dd74f0a4fef65d8cb7e67f8befb430cd"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4MTU4MA==", "bodyText": "Ah, OK. We should move to JUnit5 at some point as then it can definitely be done, see https://github.com/ExpediaGroup/beekeeper/blob/master/beekeeper-path-scheduler-apiary/src/test/java/com/expediagroup/beekeeper/scheduler/filter/WhitelistedListenerEventFilterTest.java", "url": "https://github.com/ExpediaGroup/circus-train/pull/167#discussion_r375981580", "createdAt": "2020-02-06T17:38:01Z", "author": {"login": "massdosage"}, "path": "circus-train-core/src/test/java/com/hotels/bdp/circustrain/core/replica/ReplicaTest.java", "diffHunk": "@@ -423,41 +466,106 @@ public void alteringExistingPartitionedReplicaTableWithPartitionsSucceeds() thro\n \n     verify(mockMetaStoreClient).alter_table(eq(DB_NAME), eq(TABLE_NAME), any(Table.class));\n     verify(mockMetaStoreClient).updateTableColumnStatistics(columnStatistics);\n-    verify(mockReplicaLocationManager).addCleanUpLocation(anyString(), any(Path.class));\n-    verify(mockMetaStoreClient).alter_partitions(eq(DB_NAME), eq(TABLE_NAME), alterPartitionCaptor.capture());\n-    verify(mockMetaStoreClient).add_partitions(addPartitionCaptor.capture());\n+    verify(mockReplicaLocationManager, times(numTestAlterPartitions)).addCleanUpLocation(anyString(), any(Path.class));\n+    verify(mockMetaStoreClient, times(numAlterBatches)).alter_partitions(eq(DB_NAME), eq(TABLE_NAME), alterPartitionCaptor.capture());\n+    verify(mockMetaStoreClient, times(numAddBatches)).add_partitions(addPartitionCaptor.capture());\n+\n+    // Validate that the args were expected number of batches , and expected batch sizes\n+    List<List<Partition>> addCaptorValues = addPartitionCaptor.getAllValues();\n+    assertThat(addCaptorValues.size(), is(numAddBatches));\n+\n+    for (int batchNdx = 0; batchNdx < numAddBatches; batchNdx++) {\n+      int thisBatchSize = batchNdx < (numAddBatches - 1) ? TEST_PARTITION_BATCH_SIZE : lastAddBatchSize;\n+      List<Partition> addBatch = addCaptorValues.get(batchNdx);\n+      assertThat(addBatch.size(), is(thisBatchSize));\n+      for (int entryInBatchNdx = 0; entryInBatchNdx < addBatch.size(); entryInBatchNdx++) {\n+        assertThat(addBatch.get(entryInBatchNdx).getValues(),\n+                is(Arrays.asList(String.format(\"new_%s\", (batchNdx * TEST_PARTITION_BATCH_SIZE) + entryInBatchNdx),\n+                        String.format(\"new_%s_sub\", (batchNdx * TEST_PARTITION_BATCH_SIZE) + entryInBatchNdx))));\n+      }\n+    }\n \n-    assertThat(alterPartitionCaptor.getValue().size(), is(1));\n-    assertThat(addPartitionCaptor.getValue().size(), is(1));\n+    List<List<Partition>> alterCaptorValues = alterPartitionCaptor.getAllValues();\n+    assertThat(alterCaptorValues.size(), is(numAlterBatches));\n+    for (int batchNdx = 0; batchNdx < numAlterBatches; batchNdx++) {\n+      int thisBatchSize = batchNdx < (numAlterBatches - 1) ? TEST_PARTITION_BATCH_SIZE : lastAlterBatchSize;\n+      List<Partition> alterBatch = alterCaptorValues.get(batchNdx);\n+      assertThat(alterBatch.size(), is(thisBatchSize));\n+      for (int entryInBatchNdx = 0; entryInBatchNdx < alterBatch.size(); entryInBatchNdx++) {\n+        assertThat(alterBatch.get(entryInBatchNdx).getValues(),\n+                is(Arrays.asList(String.format(\"exist_%s\", (batchNdx * TEST_PARTITION_BATCH_SIZE) + entryInBatchNdx),\n+                        String.format(\"exist_%s_sub\", (batchNdx * TEST_PARTITION_BATCH_SIZE) + entryInBatchNdx))));\n+      }\n+    }\n \n-    Partition altered = alterPartitionCaptor.getValue().get(0);\n-    assertThat(altered.getValues(), is(Arrays.asList(\"one\", \"two\")));\n+    verify(mockMetaStoreClient, times(numStatisticsBatches)).setPartitionColumnStatistics(setStatsRequestCaptor.capture());\n+    List<SetPartitionsStatsRequest> statsRequestList = setStatsRequestCaptor.getAllValues();\n+    assertThat(statsRequestList.size(), is(numStatisticsBatches));\n \n-    Partition added = addPartitionCaptor.getValue().get(0);\n-    assertThat(added.getValues(), is(Arrays.asList(\"three\", \"four\")));\n+    List<ColumnStatistics> columnStats = new ArrayList<>();\n+    for (int colStatNdx = 0; colStatNdx < numStatisticsBatches; colStatNdx++) {\n+      int thisBatchSize = colStatNdx < (numStatisticsBatches - 1) ? TEST_PARTITION_BATCH_SIZE : lastStatisticsBatchSize;\n+      assertThat(statsRequestList.get(colStatNdx).getColStats().size(), is(thisBatchSize));\n+      columnStats.addAll(statsRequestList.get(colStatNdx).getColStats());\n+    }\n \n-    verify(mockMetaStoreClient).setPartitionColumnStatistics(setStatsRequestCaptor.capture());\n-    SetPartitionsStatsRequest statsRequest = setStatsRequestCaptor.getValue();\n+    assertThat(columnStats.size(), is(numTestAlterPartitions + numTestAddPartitions));\n \n-    List<ColumnStatistics> columnStats = new ArrayList<>(statsRequest.getColStats());\n-    Collections.sort(columnStats, new Comparator<ColumnStatistics>() {\n-      @Override\n-      public int compare(ColumnStatistics o1, ColumnStatistics o2) {\n-        return o1.getStatsDesc().getPartName().compareTo(o2.getStatsDesc().getPartName());\n-      }\n-    });\n-    assertThat(columnStats.size(), is(2));\n+    for (int colStatNdx = 0; colStatNdx < numTestAlterPartitions; colStatNdx++) {\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().isIsTblLevel(), is(false));\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().getDbName(), is(DB_NAME));\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().getTableName(), is(TABLE_NAME));\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().getPartName(),\n+              is(String.format(\"c=exist_%s/d=exist_%s_sub\", colStatNdx, colStatNdx)));\n+      assertThat(columnStats.get(colStatNdx).getStatsObj().size(), is(2));\n+    }\n \n-    assertThat(columnStats.get(0).getStatsDesc().isIsTblLevel(), is(false));\n-    assertThat(columnStats.get(0).getStatsDesc().getDbName(), is(DB_NAME));\n-    assertThat(columnStats.get(0).getStatsDesc().getTableName(), is(TABLE_NAME));\n-    assertThat(columnStats.get(0).getStatsDesc().getPartName(), is(\"c=one/d=two\"));\n-    assertThat(columnStats.get(0).getStatsObj().size(), is(2));\n-    assertThat(columnStats.get(1).getStatsDesc().isIsTblLevel(), is(false));\n-    assertThat(columnStats.get(1).getStatsDesc().getDbName(), is(DB_NAME));\n-    assertThat(columnStats.get(1).getStatsDesc().getTableName(), is(TABLE_NAME));\n-    assertThat(columnStats.get(1).getStatsDesc().getPartName(), is(\"c=three/d=four\"));\n-    assertThat(columnStats.get(1).getStatsObj().size(), is(2));\n+    for (int colStatNdx = numTestAlterPartitions, addPartColStatNdx = 0;\n+         colStatNdx < numTestAlterPartitions + numTestAddPartitions;\n+         colStatNdx++, addPartColStatNdx++) {\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().isIsTblLevel(), is(false));\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().getDbName(), is(DB_NAME));\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().getTableName(), is(TABLE_NAME));\n+      assertThat(columnStats.get(colStatNdx).getStatsDesc().getPartName(),\n+              is(String.format(\"c=new_%s/d=new_%s_sub\", addPartColStatNdx, addPartColStatNdx)));\n+      assertThat(columnStats.get(colStatNdx).getStatsObj().size(), is(2));\n+    }\n+  }\n+\n+\n+  @Test\n+  public void alteringExistingPartitionedReplicaTableWithNewPartitionsInBatchesSucceeds_0_0() throws TException, IOException {\n+    alterExistingPartitionedReplicaTableWithNewPartitionsInBatches(0,0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTczMjUwMQ=="}, "originalCommit": {"oid": "0aa35464dd74f0a4fef65d8cb7e67f8befb430cd"}, "originalPosition": 231}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3855, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}