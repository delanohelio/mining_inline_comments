{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0MzE3MDgz", "number": 208, "title": "Add check for empty list delete", "bodyText": "", "createdAt": "2020-12-08T09:37:59Z", "url": "https://github.com/ExpediaGroup/circus-train/pull/208", "merged": true, "mergeCommit": {"oid": "ee5f0dcd83a1e70e881a94589ffac66a8d20f5d3"}, "closed": true, "closedAt": "2020-12-09T14:58:26Z", "author": {"login": "andreeapad"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkGqvAgH2gAyNTM0MzE3MDgzOmE2NmY3ZDdmNzcwMjkzZmZlNjdiYTc0NTM0MGNkMDJhY2E4MjVjYTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkf3xYgFqTU0ODI1NjUzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a66f7d7f770293ffe67ba745340cd02aca825ca0", "author": {"user": null}, "url": "https://github.com/ExpediaGroup/circus-train/commit/a66f7d7f770293ffe67ba745340cd02aca825ca0", "committedDate": "2020-12-08T09:24:37Z", "message": "add check for empty list to delete"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "211c39cc3259b36c65bd6b2a1ae97dd42dd07c9d", "author": {"user": null}, "url": "https://github.com/ExpediaGroup/circus-train/commit/211c39cc3259b36c65bd6b2a1ae97dd42dd07c9d", "committedDate": "2020-12-08T09:34:35Z", "message": "Update CHANGELOG.md"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2OTcyNDU0", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#pullrequestreview-546972454", "createdAt": "2020-12-08T09:49:50Z", "commit": {"oid": "211c39cc3259b36c65bd6b2a1ae97dd42dd07c9d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwOTo0OTo1MFrOIBQk9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwOTo0OTo1MFrOIBQk9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE5MTA5NQ==", "bodyText": "Is false the most appropriate return value here? Although this is a special case, we have that 0 files have been deleted out of 0 requested (unless the return value is also an indication that a delete operation did actually take place).", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r538191095", "createdAt": "2020-12-08T09:49:50Z", "author": {"login": "nvitucci"}, "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/S3DataManipulator.java", "diffHunk": "@@ -54,6 +54,11 @@ public boolean delete(String path) {\n     List<KeyVersion> keysToDelete = getKeysToDelete(bucket, uri.getKey());\n     log.debug(\"Deleting keys: {}\", keysToDelete.stream().map(k -> k.getKey()).collect(Collectors.toList()));\n \n+    if (keysToDelete.isEmpty()) {\n+      log.info(\"Nothing to delete at location: {}\", path);\n+      return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "211c39cc3259b36c65bd6b2a1ae97dd42dd07c9d"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3MjIxMDAx", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#pullrequestreview-547221001", "createdAt": "2020-12-08T13:14:08Z", "commit": {"oid": "211c39cc3259b36c65bd6b2a1ae97dd42dd07c9d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b50aa22d1c97270301ad74002cb11b6d8a9a3b9b", "author": {"user": null}, "url": "https://github.com/ExpediaGroup/circus-train/commit/b50aa22d1c97270301ad74002cb11b6d8a9a3b9b", "committedDate": "2020-12-08T16:17:12Z", "message": "Add test for S3DataManipulator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed72141ea25f41ccb185c4e234575c74463fd1fb", "author": {"user": null}, "url": "https://github.com/ExpediaGroup/circus-train/commit/ed72141ea25f41ccb185c4e234575c74463fd1fb", "committedDate": "2020-12-08T16:17:23Z", "message": "Add test dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bd12f4651738060a6a61c9eceed32095433dc86", "author": {"user": null}, "url": "https://github.com/ExpediaGroup/circus-train/commit/8bd12f4651738060a6a61c9eceed32095433dc86", "committedDate": "2020-12-08T16:24:39Z", "message": "licence"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NDM2NjYy", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#pullrequestreview-547436662", "createdAt": "2020-12-08T16:59:58Z", "commit": {"oid": "8bd12f4651738060a6a61c9eceed32095433dc86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjo1OTo1OFrOIBpwOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjo1OTo1OFrOIBpwOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYwMzU3OA==", "bodyText": "This may be slightly pedantic, but this test is testing that calling delete on s3://empty-bucket does what is expected.  The situation of the error is just slightly different - calling delete on s3://bucket/empty-folder/, where empty-folder has no sub-keys.  Maybe we should add a test for this (or change this test)?", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r538603578", "createdAt": "2020-12-08T16:59:58Z", "author": {"login": "barnharts4"}, "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.hadoop.fs.s3a.BasicAWSCredentialsProvider;\n+import org.gaul.s3proxy.junit.S3ProxyRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class S3DataManipulatorTest {\n+\n+  private static final String AWS_ACCESS_KEY = \"access\";\n+  private static final String AWS_SECRET_KEY = \"secret\";\n+  private static final String BUCKET = \"bucket\";\n+  private static final String EMPTY_BUCKET = \"empty-bucket\";\n+  private static final String PATH =\"s3://\" + BUCKET;\n+  private static final String EMPTY_PATH =\"s3://\" + EMPTY_BUCKET;\n+\n+  public @Rule TemporaryFolder temp = new TemporaryFolder();\n+  public @Rule S3ProxyRule s3Proxy = S3ProxyRule.builder().withCredentials(AWS_ACCESS_KEY, AWS_SECRET_KEY).build();\n+\n+  private S3DataManipulator s3DataManipulator;\n+  private AmazonS3 s3Client;\n+\n+  @Before\n+  public void setUp() {\n+    s3Client = newClient();\n+    s3DataManipulator = new S3DataManipulator(s3Client);\n+  }\n+\n+  private AmazonS3 newClient() {\n+    AwsClientBuilder.EndpointConfiguration endpointConfiguration = new AwsClientBuilder.EndpointConfiguration(s3Proxy.getUri().toString(),\n+        Regions.DEFAULT_REGION.getName());\n+    AmazonS3 newClient = AmazonS3ClientBuilder\n+        .standard()\n+        .withCredentials(new BasicAWSCredentialsProvider(AWS_ACCESS_KEY, AWS_SECRET_KEY))\n+        .withEndpointConfiguration(endpointConfiguration)\n+        .build();\n+    return newClient;\n+  }\n+\n+  @Test\n+  public void deleteFails() {\n+    s3Client.createBucket(EMPTY_BUCKET);\n+    boolean result = s3DataManipulator.delete(EMPTY_PATH);\n+    assertThat(result, is(false));\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd12f4651738060a6a61c9eceed32095433dc86"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "950e9e1b07250a3f232662e4f47cefffad9e7120", "author": {"user": null}, "url": "https://github.com/ExpediaGroup/circus-train/commit/950e9e1b07250a3f232662e4f47cefffad9e7120", "committedDate": "2020-12-08T17:41:22Z", "message": "Modify tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ea693a5ae062aeb3354ab0611e6ad15fdd6c1b9", "author": {"user": null}, "url": "https://github.com/ExpediaGroup/circus-train/commit/2ea693a5ae062aeb3354ab0611e6ad15fdd6c1b9", "committedDate": "2020-12-08T17:46:30Z", "message": "Change test names + add test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bbe36b209dce26d55cf9140e8c0bc2bf99854b8", "author": {"user": null}, "url": "https://github.com/ExpediaGroup/circus-train/commit/2bbe36b209dce26d55cf9140e8c0bc2bf99854b8", "committedDate": "2020-12-08T17:51:56Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea80dd69b3602cabcb38567d923443720a3eb803", "author": {"user": null}, "url": "https://github.com/ExpediaGroup/circus-train/commit/ea80dd69b3602cabcb38567d923443720a3eb803", "committedDate": "2020-12-08T18:17:58Z", "message": "delete test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MDM5MzIz", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#pullrequestreview-548039323", "createdAt": "2020-12-09T10:25:30Z", "commit": {"oid": "ea80dd69b3602cabcb38567d923443720a3eb803"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMDoyNTozMFrOICNTmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMDoyODo0NlrOICNcaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE4NjA3Mw==", "bodyText": "Maybe move this to line 61 as there's no point outputting this if there's nothing to delete?", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539186073", "createdAt": "2020-12-09T10:25:30Z", "author": {"login": "massdosage"}, "path": "circus-train-aws/src/main/java/com/hotels/bdp/circustrain/aws/S3DataManipulator.java", "diffHunk": "@@ -54,6 +54,11 @@ public boolean delete(String path) {\n     List<KeyVersion> keysToDelete = getKeysToDelete(bucket, uri.getKey());\n     log.debug(\"Deleting keys: {}\", keysToDelete.stream().map(k -> k.getKey()).collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea80dd69b3602cabcb38567d923443720a3eb803"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE4NzEwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void deleteInexistentFolderFails() {\n          \n          \n            \n              public void deleteNonexistentFolderFails() {", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539187106", "createdAt": "2020-12-09T10:27:00Z", "author": {"login": "massdosage"}, "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.hadoop.fs.s3a.BasicAWSCredentialsProvider;\n+import org.gaul.s3proxy.junit.S3ProxyRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class S3DataManipulatorTest {\n+\n+  private static final String AWS_ACCESS_KEY = \"access\";\n+  private static final String AWS_SECRET_KEY = \"secret\";\n+  private static final String BUCKET = \"bucket\";\n+  private static final String BUCKET_PATH = \"s3://\" + BUCKET;\n+  private static final String FOLDER = \"folder\";\n+  private static final String EMPTY_BUCKET = \"empty-bucket\";\n+\n+  public @Rule TemporaryFolder temp = new TemporaryFolder();\n+  public @Rule S3ProxyRule s3Proxy = S3ProxyRule.builder().withCredentials(AWS_ACCESS_KEY, AWS_SECRET_KEY).build();\n+\n+  private S3DataManipulator s3DataManipulator;\n+  private AmazonS3 s3Client;\n+\n+  @Before\n+  public void setUp() {\n+    s3Client = newClient();\n+    s3DataManipulator = new S3DataManipulator(s3Client);\n+  }\n+\n+  private AmazonS3 newClient() {\n+    AwsClientBuilder.EndpointConfiguration endpointConfiguration = new AwsClientBuilder.EndpointConfiguration(s3Proxy.getUri().toString(),\n+        Regions.DEFAULT_REGION.getName());\n+    AmazonS3 newClient = AmazonS3ClientBuilder\n+        .standard()\n+        .withCredentials(new BasicAWSCredentialsProvider(AWS_ACCESS_KEY, AWS_SECRET_KEY))\n+        .withEndpointConfiguration(endpointConfiguration)\n+        .build();\n+    return newClient;\n+  }\n+\n+  @Test\n+  public void deleteFolderSucceeds() throws IOException {\n+    s3Client.createBucket(BUCKET);\n+    File inputData = temp.newFile(\"data\");\n+    s3Client.putObject(BUCKET, FOLDER, inputData);\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/\" + FOLDER);\n+    assertThat(result, is(true));\n+  }\n+\n+  @Test\n+  public void deleteInexistentFolderFails() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea80dd69b3602cabcb38567d923443720a3eb803"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE4NzMyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/inexistent-folder\");\n          \n          \n            \n                boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/nonexistent-folder\");", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539187326", "createdAt": "2020-12-09T10:27:15Z", "author": {"login": "massdosage"}, "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.hadoop.fs.s3a.BasicAWSCredentialsProvider;\n+import org.gaul.s3proxy.junit.S3ProxyRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class S3DataManipulatorTest {\n+\n+  private static final String AWS_ACCESS_KEY = \"access\";\n+  private static final String AWS_SECRET_KEY = \"secret\";\n+  private static final String BUCKET = \"bucket\";\n+  private static final String BUCKET_PATH = \"s3://\" + BUCKET;\n+  private static final String FOLDER = \"folder\";\n+  private static final String EMPTY_BUCKET = \"empty-bucket\";\n+\n+  public @Rule TemporaryFolder temp = new TemporaryFolder();\n+  public @Rule S3ProxyRule s3Proxy = S3ProxyRule.builder().withCredentials(AWS_ACCESS_KEY, AWS_SECRET_KEY).build();\n+\n+  private S3DataManipulator s3DataManipulator;\n+  private AmazonS3 s3Client;\n+\n+  @Before\n+  public void setUp() {\n+    s3Client = newClient();\n+    s3DataManipulator = new S3DataManipulator(s3Client);\n+  }\n+\n+  private AmazonS3 newClient() {\n+    AwsClientBuilder.EndpointConfiguration endpointConfiguration = new AwsClientBuilder.EndpointConfiguration(s3Proxy.getUri().toString(),\n+        Regions.DEFAULT_REGION.getName());\n+    AmazonS3 newClient = AmazonS3ClientBuilder\n+        .standard()\n+        .withCredentials(new BasicAWSCredentialsProvider(AWS_ACCESS_KEY, AWS_SECRET_KEY))\n+        .withEndpointConfiguration(endpointConfiguration)\n+        .build();\n+    return newClient;\n+  }\n+\n+  @Test\n+  public void deleteFolderSucceeds() throws IOException {\n+    s3Client.createBucket(BUCKET);\n+    File inputData = temp.newFile(\"data\");\n+    s3Client.putObject(BUCKET, FOLDER, inputData);\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/\" + FOLDER);\n+    assertThat(result, is(true));\n+  }\n+\n+  @Test\n+  public void deleteInexistentFolderFails() {\n+    s3Client.createBucket(BUCKET);\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/inexistent-folder\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea80dd69b3602cabcb38567d923443720a3eb803"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE4ODMzMQ==", "bodyText": "Method says \"succeeds\" but assertion is on method returning false. Is the behaviour here that it will return false as it can't actually delete a bucket?", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539188331", "createdAt": "2020-12-09T10:28:46Z", "author": {"login": "massdosage"}, "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.hadoop.fs.s3a.BasicAWSCredentialsProvider;\n+import org.gaul.s3proxy.junit.S3ProxyRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class S3DataManipulatorTest {\n+\n+  private static final String AWS_ACCESS_KEY = \"access\";\n+  private static final String AWS_SECRET_KEY = \"secret\";\n+  private static final String BUCKET = \"bucket\";\n+  private static final String BUCKET_PATH = \"s3://\" + BUCKET;\n+  private static final String FOLDER = \"folder\";\n+  private static final String EMPTY_BUCKET = \"empty-bucket\";\n+\n+  public @Rule TemporaryFolder temp = new TemporaryFolder();\n+  public @Rule S3ProxyRule s3Proxy = S3ProxyRule.builder().withCredentials(AWS_ACCESS_KEY, AWS_SECRET_KEY).build();\n+\n+  private S3DataManipulator s3DataManipulator;\n+  private AmazonS3 s3Client;\n+\n+  @Before\n+  public void setUp() {\n+    s3Client = newClient();\n+    s3DataManipulator = new S3DataManipulator(s3Client);\n+  }\n+\n+  private AmazonS3 newClient() {\n+    AwsClientBuilder.EndpointConfiguration endpointConfiguration = new AwsClientBuilder.EndpointConfiguration(s3Proxy.getUri().toString(),\n+        Regions.DEFAULT_REGION.getName());\n+    AmazonS3 newClient = AmazonS3ClientBuilder\n+        .standard()\n+        .withCredentials(new BasicAWSCredentialsProvider(AWS_ACCESS_KEY, AWS_SECRET_KEY))\n+        .withEndpointConfiguration(endpointConfiguration)\n+        .build();\n+    return newClient;\n+  }\n+\n+  @Test\n+  public void deleteFolderSucceeds() throws IOException {\n+    s3Client.createBucket(BUCKET);\n+    File inputData = temp.newFile(\"data\");\n+    s3Client.putObject(BUCKET, FOLDER, inputData);\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/\" + FOLDER);\n+    assertThat(result, is(true));\n+  }\n+\n+  @Test\n+  public void deleteInexistentFolderFails() {\n+    s3Client.createBucket(BUCKET);\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/inexistent-folder\");\n+    assertThat(result, is(false));\n+  }\n+\n+  @Test\n+  public void deleteBucketSucceeds() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea80dd69b3602cabcb38567d923443720a3eb803"}, "originalPosition": 88}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d55040ccb432c387a29015d146b281173f61f50d", "author": {"user": null}, "url": "https://github.com/ExpediaGroup/circus-train/commit/d55040ccb432c387a29015d146b281173f61f50d", "committedDate": "2020-12-09T10:37:43Z", "message": "typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84cbe071a9802ec28fe37b515ec6113ef7d0a511", "author": {"user": null}, "url": "https://github.com/ExpediaGroup/circus-train/commit/84cbe071a9802ec28fe37b515ec6113ef7d0a511", "committedDate": "2020-12-09T10:42:06Z", "message": "move log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9f728266ff5f04457b4a10e544b903398da4f4f", "author": {"user": null}, "url": "https://github.com/ExpediaGroup/circus-train/commit/f9f728266ff5f04457b4a10e544b903398da4f4f", "committedDate": "2020-12-09T10:42:45Z", "message": "Update tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MDYwNDE2", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#pullrequestreview-548060416", "createdAt": "2020-12-09T10:50:59Z", "commit": {"oid": "f9f728266ff5f04457b4a10e544b903398da4f4f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMDo1MDo1OVrOICOX1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMDo1MDo1OVrOICOX1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIwMzU0MQ==", "bodyText": "I think this is actually non-existent bucket not empty right? As we don't create it anywhere.", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539203541", "createdAt": "2020-12-09T10:50:59Z", "author": {"login": "massdosage"}, "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.hadoop.fs.s3a.BasicAWSCredentialsProvider;\n+import org.gaul.s3proxy.junit.S3ProxyRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class S3DataManipulatorTest {\n+\n+  private static final String AWS_ACCESS_KEY = \"access\";\n+  private static final String AWS_SECRET_KEY = \"secret\";\n+  private static final String BUCKET = \"bucket\";\n+  private static final String BUCKET_PATH = \"s3://\" + BUCKET;\n+  private static final String FOLDER = \"folder\";\n+  private static final String EMPTY_BUCKET = \"empty-bucket\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9f728266ff5f04457b4a10e544b903398da4f4f"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "775991bef427d18f040ccbd11238504ce2df73b3", "author": {"user": null}, "url": "https://github.com/ExpediaGroup/circus-train/commit/775991bef427d18f040ccbd11238504ce2df73b3", "committedDate": "2020-12-09T10:57:29Z", "message": "Add test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MDY4OTQ3", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#pullrequestreview-548068947", "createdAt": "2020-12-09T11:01:32Z", "commit": {"oid": "775991bef427d18f040ccbd11238504ce2df73b3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTowMTozMlrOICOznw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTowMTozMlrOICOznw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIxMDY1NQ==", "bodyText": "If this throws an exception you don't need to store the result or assert on it as that code will never execute.", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539210655", "createdAt": "2020-12-09T11:01:32Z", "author": {"login": "massdosage"}, "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.hadoop.fs.s3a.BasicAWSCredentialsProvider;\n+import org.gaul.s3proxy.junit.S3ProxyRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+import com.amazonaws.services.s3.model.AmazonS3Exception;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class S3DataManipulatorTest {\n+\n+  private static final String AWS_ACCESS_KEY = \"access\";\n+  private static final String AWS_SECRET_KEY = \"secret\";\n+  private static final String BUCKET = \"bucket\";\n+  private static final String BUCKET_PATH = \"s3://\" + BUCKET;\n+  private static final String FOLDER = \"folder\";\n+  private static final String EMPTY_BUCKET = \"empty-bucket\";\n+\n+  public @Rule TemporaryFolder temp = new TemporaryFolder();\n+  public @Rule S3ProxyRule s3Proxy = S3ProxyRule.builder().withCredentials(AWS_ACCESS_KEY, AWS_SECRET_KEY).build();\n+\n+  private S3DataManipulator s3DataManipulator;\n+  private AmazonS3 s3Client;\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    s3Client = newClient();\n+    s3DataManipulator = new S3DataManipulator(s3Client);\n+    s3Client.createBucket(BUCKET);\n+    File inputData = temp.newFile(\"data\");\n+    s3Client.putObject(BUCKET, FOLDER, inputData);\n+  }\n+\n+  private AmazonS3 newClient() {\n+    AwsClientBuilder.EndpointConfiguration endpointConfiguration = new AwsClientBuilder.EndpointConfiguration(s3Proxy.getUri().toString(),\n+        Regions.DEFAULT_REGION.getName());\n+    AmazonS3 newClient = AmazonS3ClientBuilder\n+        .standard()\n+        .withCredentials(new BasicAWSCredentialsProvider(AWS_ACCESS_KEY, AWS_SECRET_KEY))\n+        .withEndpointConfiguration(endpointConfiguration)\n+        .build();\n+    return newClient;\n+  }\n+\n+  @Test\n+  public void deleteFolderSucceeds() {\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/\" + FOLDER);\n+    assertThat(result, is(true));\n+  }\n+\n+  @Test\n+  public void deleteNonexistentFolderFails() {\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/nonexistent-folder\");\n+    assertThat(result, is(false));\n+  }\n+\n+  @Test\n+  public void deleteBucketSucceeds() {\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH);\n+    assertThat(result, is(true));\n+  }\n+\n+  @Test\n+  public void deleteEmptyBucketFails() {\n+    s3Client.createBucket(EMPTY_BUCKET);\n+    boolean result = s3DataManipulator.delete(\"s3://\" + EMPTY_BUCKET);\n+    assertThat(result, is(false));\n+  }\n+\n+  @Test(expected = AmazonS3Exception.class)\n+  public void deleteNonExistentBucketThrowsException() {\n+    boolean result = s3DataManipulator.delete(\"s3://\" + \"nonexistent-bucket\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "775991bef427d18f040ccbd11238504ce2df73b3"}, "originalPosition": 102}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffebcfff8005c8537a6cef454f483764a3795b9a", "author": {"user": null}, "url": "https://github.com/ExpediaGroup/circus-train/commit/ffebcfff8005c8537a6cef454f483764a3795b9a", "committedDate": "2020-12-09T11:10:24Z", "message": "Remove redundant assert in test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MTA0NjI3", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#pullrequestreview-548104627", "createdAt": "2020-12-09T11:50:03Z", "commit": {"oid": "ffebcfff8005c8537a6cef454f483764a3795b9a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTo1MDowM1rOICQsWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTo1MDowM1rOICQsWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI0MTU2Mg==", "bodyText": "OMG, not sure how this slipped through but we don't want * imports, please get your IDE to expand these.", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539241562", "createdAt": "2020-12-09T11:50:03Z", "author": {"login": "massdosage"}, "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffebcfff8005c8537a6cef454f483764a3795b9a"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MTA1MDI4", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#pullrequestreview-548105028", "createdAt": "2020-12-09T11:50:37Z", "commit": {"oid": "ffebcfff8005c8537a6cef454f483764a3795b9a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTo1MDozN1rOICQttA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMTo1MDozN1rOICQttA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI0MTkwOA==", "bodyText": "You don't need the + :)", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#discussion_r539241908", "createdAt": "2020-12-09T11:50:37Z", "author": {"login": "massdosage"}, "path": "circus-train-aws/src/test/java/com/hotels/bdp/circustrain/aws/S3DataManipulatorTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright (C) 2016-2020 Expedia, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.hotels.bdp.circustrain.aws;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.*;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.hadoop.fs.s3a.BasicAWSCredentialsProvider;\n+import org.gaul.s3proxy.junit.S3ProxyRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.s3.AmazonS3;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+import com.amazonaws.services.s3.model.AmazonS3Exception;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class S3DataManipulatorTest {\n+\n+  private static final String AWS_ACCESS_KEY = \"access\";\n+  private static final String AWS_SECRET_KEY = \"secret\";\n+  private static final String BUCKET = \"bucket\";\n+  private static final String BUCKET_PATH = \"s3://\" + BUCKET;\n+  private static final String FOLDER = \"folder\";\n+  private static final String EMPTY_BUCKET = \"empty-bucket\";\n+\n+  public @Rule TemporaryFolder temp = new TemporaryFolder();\n+  public @Rule S3ProxyRule s3Proxy = S3ProxyRule.builder().withCredentials(AWS_ACCESS_KEY, AWS_SECRET_KEY).build();\n+\n+  private S3DataManipulator s3DataManipulator;\n+  private AmazonS3 s3Client;\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    s3Client = newClient();\n+    s3DataManipulator = new S3DataManipulator(s3Client);\n+    s3Client.createBucket(BUCKET);\n+    File inputData = temp.newFile(\"data\");\n+    s3Client.putObject(BUCKET, FOLDER, inputData);\n+  }\n+\n+  private AmazonS3 newClient() {\n+    AwsClientBuilder.EndpointConfiguration endpointConfiguration = new AwsClientBuilder.EndpointConfiguration(s3Proxy.getUri().toString(),\n+        Regions.DEFAULT_REGION.getName());\n+    AmazonS3 newClient = AmazonS3ClientBuilder\n+        .standard()\n+        .withCredentials(new BasicAWSCredentialsProvider(AWS_ACCESS_KEY, AWS_SECRET_KEY))\n+        .withEndpointConfiguration(endpointConfiguration)\n+        .build();\n+    return newClient;\n+  }\n+\n+  @Test\n+  public void deleteFolderSucceeds() {\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/\" + FOLDER);\n+    assertThat(result, is(true));\n+  }\n+\n+  @Test\n+  public void deleteNonexistentFolderFails() {\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH + \"/nonexistent-folder\");\n+    assertThat(result, is(false));\n+  }\n+\n+  @Test\n+  public void deleteBucketSucceeds() {\n+    boolean result = s3DataManipulator.delete(BUCKET_PATH);\n+    assertThat(result, is(true));\n+  }\n+\n+  @Test\n+  public void deleteEmptyBucketFails() {\n+    s3Client.createBucket(EMPTY_BUCKET);\n+    boolean result = s3DataManipulator.delete(\"s3://\" + EMPTY_BUCKET);\n+    assertThat(result, is(false));\n+  }\n+\n+  @Test(expected = AmazonS3Exception.class)\n+  public void deleteNonExistentBucketThrowsException() {\n+    s3DataManipulator.delete(\"s3://\" + \"nonexistent-bucket\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffebcfff8005c8537a6cef454f483764a3795b9a"}, "originalPosition": 102}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fe05743fbfb58a380c540ecac8ce256f7a01889", "author": {"user": null}, "url": "https://github.com/ExpediaGroup/circus-train/commit/4fe05743fbfb58a380c540ecac8ce256f7a01889", "committedDate": "2020-12-09T12:09:12Z", "message": "Fix stuff"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MjQwMzk5", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#pullrequestreview-548240399", "createdAt": "2020-12-09T14:31:04Z", "commit": {"oid": "4fe05743fbfb58a380c540ecac8ce256f7a01889"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MjU2NTMy", "url": "https://github.com/ExpediaGroup/circus-train/pull/208#pullrequestreview-548256532", "createdAt": "2020-12-09T14:46:29Z", "commit": {"oid": "4fe05743fbfb58a380c540ecac8ce256f7a01889"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3842, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}