{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNjk1NTg1", "number": 11255, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODowOTo0MlrODw0gtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDowMDoyOFrODw2H4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTE4NTgxOnYy", "diffSide": "RIGHT", "path": "core/server/common/src/main/java/alluxio/master/AbstractMaster.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODowOTo0MlrOGEBzOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTowMjozNlrOGEDGGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3Njk4NA==", "bodyText": "Can't we leave the Journal interfaces the same but wrap context here with a forwarder context that holds the lock.\nSo Journal implementations wouldn't need to manage the lock.", "url": "https://github.com/Alluxio/alluxio/pull/11255#discussion_r406876984", "createdAt": "2020-04-10T18:09:42Z", "author": {"login": "ggezer"}, "path": "core/server/common/src/main/java/alluxio/master/AbstractMaster.java", "diffHunk": "@@ -133,12 +132,9 @@ protected ExecutorService getExecutorService() {\n \n   @Override\n   public JournalContext createJournalContext() throws UnavailableException {\n-    // All modifications to journaled state must happen inside of a journal context so that we can\n-    // persist the state change. As a mechanism to allow for state pauses, we acquire the state\n-    // change lock before entering any code paths that could modify journaled state.\n-    try (LockResource l = new LockResource(mMasterContext.stateChangeLock())) {\n-      return mJournal.createJournalContext();\n-    }\n+    // Use the state change lock for the journal context, since all modifications to journaled\n+    // state must happen inside of a journal context.\n+    return mJournal.createJournalContext(mMasterContext.stateChangeLock());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7bd1d0215e114fdeeb8086003b546c6c8d5e304"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5ODIwMg==", "bodyText": "I added a new journal context for the state change lock", "url": "https://github.com/Alluxio/alluxio/pull/11255#discussion_r406898202", "createdAt": "2020-04-10T19:02:36Z", "author": {"login": "gpang"}, "path": "core/server/common/src/main/java/alluxio/master/AbstractMaster.java", "diffHunk": "@@ -133,12 +132,9 @@ protected ExecutorService getExecutorService() {\n \n   @Override\n   public JournalContext createJournalContext() throws UnavailableException {\n-    // All modifications to journaled state must happen inside of a journal context so that we can\n-    // persist the state change. As a mechanism to allow for state pauses, we acquire the state\n-    // change lock before entering any code paths that could modify journaled state.\n-    try (LockResource l = new LockResource(mMasterContext.stateChangeLock())) {\n-      return mJournal.createJournalContext();\n-    }\n+    // Use the state change lock for the journal context, since all modifications to journaled\n+    // state must happen inside of a journal context.\n+    return mJournal.createJournalContext(mMasterContext.stateChangeLock());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3Njk4NA=="}, "originalCommit": {"oid": "e7bd1d0215e114fdeeb8086003b546c6c8d5e304"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTQ0OTkyOnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDowMDoyOVrOGEEW0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDoxMjozMVrOGEEmig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxODg2NQ==", "bodyText": "why is this synchronized now?", "url": "https://github.com/Alluxio/alluxio/pull/11255#discussion_r406918865", "createdAt": "2020-04-10T20:00:29Z", "author": {"login": "ggezer"}, "path": "core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java", "diffHunk": "@@ -655,11 +655,13 @@ public long getNewContainerId() throws UnavailableException {\n    * @return a {@link JournalEntry} representing the state of the container id generator\n    */\n   private JournalEntry getContainerIdJournalEntry() {\n-    BlockContainerIdGeneratorEntry blockContainerIdGenerator =\n-        BlockContainerIdGeneratorEntry.newBuilder().setNextContainerId(mJournaledNextContainerId)\n-            .build();\n-    return JournalEntry.newBuilder().setBlockContainerIdGenerator(blockContainerIdGenerator)\n-        .build();\n+    synchronized (mBlockContainerIdGenerator) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec63f2e415cff5da59a25519961215198c794c8"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyMjg5MA==", "bodyText": "O, I think this is strictly more correct, since mJournaledNextContainerId is protected by mBlockContainerIdGenerator.", "url": "https://github.com/Alluxio/alluxio/pull/11255#discussion_r406922890", "createdAt": "2020-04-10T20:12:31Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java", "diffHunk": "@@ -655,11 +655,13 @@ public long getNewContainerId() throws UnavailableException {\n    * @return a {@link JournalEntry} representing the state of the container id generator\n    */\n   private JournalEntry getContainerIdJournalEntry() {\n-    BlockContainerIdGeneratorEntry blockContainerIdGenerator =\n-        BlockContainerIdGeneratorEntry.newBuilder().setNextContainerId(mJournaledNextContainerId)\n-            .build();\n-    return JournalEntry.newBuilder().setBlockContainerIdGenerator(blockContainerIdGenerator)\n-        .build();\n+    synchronized (mBlockContainerIdGenerator) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxODg2NQ=="}, "originalCommit": {"oid": "4ec63f2e415cff5da59a25519961215198c794c8"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1830, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}