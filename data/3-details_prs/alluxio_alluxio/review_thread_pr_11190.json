{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwNjc2MjY2", "number": 11190, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNTo1Njo1M1rODrR9CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNjo0Nzo0M1rODrTaUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzA5NTEzOnYy", "diffSide": "RIGHT", "path": "job/common/src/main/java/alluxio/job/plan/transform/CompactConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNTo1Njo1M1rOF7iHJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNTo1Njo1M1rOF7iHJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2OTE4OA==", "bodyText": "Should this have output partition too?", "url": "https://github.com/Alluxio/alluxio/pull/11190#discussion_r397969188", "createdAt": "2020-03-25T15:56:53Z", "author": {"login": "gpang"}, "path": "job/common/src/main/java/alluxio/job/plan/transform/CompactConfig.java", "diffHunk": "@@ -119,7 +131,7 @@ public boolean equals(Object obj) {\n       return false;\n     }\n     CompactConfig that = (CompactConfig) obj;\n-    return mPartitionInfo.equals(that.mPartitionInfo)\n+    return mInputPartitionInfo.equals(that.mInputPartitionInfo)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "490ee32be25be2222ebfd840c9c4445d1dc848e4"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzA5NTUyOnYy", "diffSide": "RIGHT", "path": "job/common/src/main/java/alluxio/job/plan/transform/CompactConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNTo1Njo1OVrOF7iHbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNTo1Njo1OVrOF7iHbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2OTI2Mg==", "bodyText": "Should this have output partition too?", "url": "https://github.com/Alluxio/alluxio/pull/11190#discussion_r397969262", "createdAt": "2020-03-25T15:56:59Z", "author": {"login": "gpang"}, "path": "job/common/src/main/java/alluxio/job/plan/transform/CompactConfig.java", "diffHunk": "@@ -128,7 +140,7 @@ public boolean equals(Object obj) {\n \n   @Override\n   public int hashCode() {\n-    return Objects.hashCode(mPartitionInfo, mInput, mOutput, mMaxNumFiles, mMinFileSize);\n+    return Objects.hashCode(mInputPartitionInfo, mInput, mOutput, mMaxNumFiles, mMinFileSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "490ee32be25be2222ebfd840c9c4445d1dc848e4"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzA5NTgwOnYy", "diffSide": "RIGHT", "path": "job/common/src/main/java/alluxio/job/plan/transform/CompactConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNTo1NzowNFrOF7iHow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNTo1NzowNFrOF7iHow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk2OTMxNQ==", "bodyText": "Should this have output partition too?", "url": "https://github.com/Alluxio/alluxio/pull/11190#discussion_r397969315", "createdAt": "2020-03-25T15:57:04Z", "author": {"login": "gpang"}, "path": "job/common/src/main/java/alluxio/job/plan/transform/CompactConfig.java", "diffHunk": "@@ -138,7 +150,7 @@ public String toString() {\n         .add(\"output\", mOutput)\n         .add(\"maxNumFiles\", mMaxNumFiles)\n         .add(\"minFileSize\", mMinFileSize)\n-        .add(\"partitionInfo\", mPartitionInfo)\n+        .add(\"partitionInfo\", mInputPartitionInfo)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "490ee32be25be2222ebfd840c9c4445d1dc848e4"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzEwMzcwOnYy", "diffSide": "RIGHT", "path": "job/common/src/main/java/alluxio/job/plan/transform/PartitionInfo.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNTo1ODo0OFrOF7iNJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODoxNDo0NlrOF7oPNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3MDcyNA==", "bodyText": "Why does this not look like other transform config properties, like \"file.count.max\"?", "url": "https://github.com/Alluxio/alluxio/pull/11190#discussion_r397970724", "createdAt": "2020-03-25T15:58:48Z", "author": {"login": "gpang"}, "path": "job/common/src/main/java/alluxio/job/plan/transform/PartitionInfo.java", "diffHunk": "@@ -27,6 +27,11 @@\n public class PartitionInfo implements Serializable {\n   private static final long serialVersionUID = 6905153658064056381L;\n \n+  /**\n+   * Key in Serde Properties to denote parquet compression method.\n+   */\n+  public static final String PARQUET_COMPRESSION = \"parquet.compression\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "490ee32be25be2222ebfd840c9c4445d1dc848e4"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA2OTU1Nw==", "bodyText": "Ah. Let me make it file.parquet.compression.", "url": "https://github.com/Alluxio/alluxio/pull/11190#discussion_r398069557", "createdAt": "2020-03-25T18:14:46Z", "author": {"login": "bradyoo"}, "path": "job/common/src/main/java/alluxio/job/plan/transform/PartitionInfo.java", "diffHunk": "@@ -27,6 +27,11 @@\n public class PartitionInfo implements Serializable {\n   private static final long serialVersionUID = 6905153658064056381L;\n \n+  /**\n+   * Key in Serde Properties to denote parquet compression method.\n+   */\n+  public static final String PARQUET_COMPRESSION = \"parquet.compression\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3MDcyNA=="}, "originalCommit": {"oid": "490ee32be25be2222ebfd840c9c4445d1dc848e4"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzEwNzk5OnYy", "diffSide": "RIGHT", "path": "job/server/src/main/java/alluxio/job/plan/transform/format/TableWriter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNTo1OTozOVrOF7iP4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNTo1OTozOVrOF7iP4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3MTQyNQ==", "bodyText": "if this is null, what does it do/mean?", "url": "https://github.com/Alluxio/alluxio/pull/11190#discussion_r397971425", "createdAt": "2020-03-25T15:59:39Z", "author": {"login": "gpang"}, "path": "job/server/src/main/java/alluxio/job/plan/transform/format/TableWriter.java", "diffHunk": "@@ -25,11 +27,21 @@\n    * @param schema the table schema\n    * @param uri the URI to the output\n    * @return the writer for the output\n-   * @throws IOException when failed to create the writer\n    */\n   static TableWriter create(TableSchema schema, AlluxioURI uri) throws IOException {\n+    return create(schema, uri, null);\n+  }\n+\n+  /**\n+   * @param schema the table schema\n+   * @param uri the URI to the output\n+   * @param partitionInfo the writer for the output", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "490ee32be25be2222ebfd840c9c4445d1dc848e4"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzExMDg5OnYy", "diffSide": "RIGHT", "path": "job/server/src/main/java/alluxio/job/plan/transform/format/parquet/ParquetWriter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNjowMDoxOFrOF7iR1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNjowMDoxOFrOF7iR1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3MTkyNg==", "bodyText": "can we add @Nullable?", "url": "https://github.com/Alluxio/alluxio/pull/11190#discussion_r397971926", "createdAt": "2020-03-25T16:00:18Z", "author": {"login": "gpang"}, "path": "job/server/src/main/java/alluxio/job/plan/transform/format/parquet/ParquetWriter.java", "diffHunk": "@@ -55,11 +57,43 @@ private ParquetWriter(org.apache.parquet.hadoop.ParquetWriter<Record> writer) {\n    * @param schema the schema\n    * @param uri the URI to the output\n    * @return the writer\n-   * @throws IOException when failed to create the writer\n    */\n   public static ParquetWriter create(TableSchema schema, AlluxioURI uri)\n       throws IOException {\n-    return ParquetWriter.create(schema, uri, ROW_GROUP_SIZE, true);\n+    return ParquetWriter.create(schema, uri, ROW_GROUP_SIZE, true, DEFAULT_COMPRESSION_CODEC);\n+  }\n+\n+  /**\n+   * Creates a parquet writer based on the partitionInfo.\n+   *\n+   * @param schema the schema\n+   * @param uri the URI to the output\n+   * @param partitionInfo the partitionInfo\n+   * @return the writer\n+   */\n+  public static ParquetWriter create(TableSchema schema, AlluxioURI uri,\n+                                     PartitionInfo partitionInfo) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "490ee32be25be2222ebfd840c9c4445d1dc848e4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzExMTk4OnYy", "diffSide": "RIGHT", "path": "job/server/src/main/java/alluxio/job/plan/transform/format/parquet/ParquetWriter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNjowMDozMFrOF7iShw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNjowMDozMFrOF7iShw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk3MjEwMw==", "bodyText": "can we add that this could be null?", "url": "https://github.com/Alluxio/alluxio/pull/11190#discussion_r397972103", "createdAt": "2020-03-25T16:00:30Z", "author": {"login": "gpang"}, "path": "job/server/src/main/java/alluxio/job/plan/transform/format/parquet/ParquetWriter.java", "diffHunk": "@@ -55,11 +57,43 @@ private ParquetWriter(org.apache.parquet.hadoop.ParquetWriter<Record> writer) {\n    * @param schema the schema\n    * @param uri the URI to the output\n    * @return the writer\n-   * @throws IOException when failed to create the writer\n    */\n   public static ParquetWriter create(TableSchema schema, AlluxioURI uri)\n       throws IOException {\n-    return ParquetWriter.create(schema, uri, ROW_GROUP_SIZE, true);\n+    return ParquetWriter.create(schema, uri, ROW_GROUP_SIZE, true, DEFAULT_COMPRESSION_CODEC);\n+  }\n+\n+  /**\n+   * Creates a parquet writer based on the partitionInfo.\n+   *\n+   * @param schema the schema\n+   * @param uri the URI to the output\n+   * @param partitionInfo the partitionInfo", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "490ee32be25be2222ebfd840c9c4445d1dc848e4"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzMzMzk0OnYy", "diffSide": "RIGHT", "path": "table/server/common/src/main/java/alluxio/table/common/transform/TransformDefinition.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNjo0Nzo0M1rOF7kfew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDo0NTozOFrOF97hpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAwODE4Nw==", "bodyText": "the properties and the definition represent the same transformation, right? Then, can we just pass in one of them, and derive the other?", "url": "https://github.com/Alluxio/alluxio/pull/11190#discussion_r398008187", "createdAt": "2020-03-25T16:47:43Z", "author": {"login": "gpang"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/TransformDefinition.java", "diffHunk": "@@ -26,18 +26,21 @@\n public class TransformDefinition {\n   private final String mDefinition;\n   private final List<TransformAction> mActions;\n+  private final Properties mProperties;\n \n   /**\n    * The user-provided definition is normalized by:\n    * 1. trimming whitespaces and semicolon from the beginning and end;\n    * 2. normalize to lower case.\n-   *\n-   * @param definition the string definition\n+   *  @param definition the string definition\n    * @param actions the list of actions\n+   * @param properties the list of properties extracted from definition\n    */\n-  private TransformDefinition(String definition, List<TransformAction> actions) {\n+  private TransformDefinition(String definition, List<TransformAction> actions,\n+                              Properties properties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "490ee32be25be2222ebfd840c9c4445d1dc848e4"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEwNDI5Ng==", "bodyText": "We can. But I would like to do that later. This constructor is also not public and the way this constructor gets called is by taking a definition and getting the properties.", "url": "https://github.com/Alluxio/alluxio/pull/11190#discussion_r398104296", "createdAt": "2020-03-25T19:10:30Z", "author": {"login": "bradyoo"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/TransformDefinition.java", "diffHunk": "@@ -26,18 +26,21 @@\n public class TransformDefinition {\n   private final String mDefinition;\n   private final List<TransformAction> mActions;\n+  private final Properties mProperties;\n \n   /**\n    * The user-provided definition is normalized by:\n    * 1. trimming whitespaces and semicolon from the beginning and end;\n    * 2. normalize to lower case.\n-   *\n-   * @param definition the string definition\n+   *  @param definition the string definition\n    * @param actions the list of actions\n+   * @param properties the list of properties extracted from definition\n    */\n-  private TransformDefinition(String definition, List<TransformAction> actions) {\n+  private TransformDefinition(String definition, List<TransformAction> actions,\n+                              Properties properties) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAwODE4Nw=="}, "originalCommit": {"oid": "490ee32be25be2222ebfd840c9c4445d1dc848e4"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4MjcyNA==", "bodyText": "Does doing it later mean refactoring it later? I am fine with that. If so, can you leave a TODO?", "url": "https://github.com/Alluxio/alluxio/pull/11190#discussion_r400482724", "createdAt": "2020-03-30T20:45:38Z", "author": {"login": "gpang"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/TransformDefinition.java", "diffHunk": "@@ -26,18 +26,21 @@\n public class TransformDefinition {\n   private final String mDefinition;\n   private final List<TransformAction> mActions;\n+  private final Properties mProperties;\n \n   /**\n    * The user-provided definition is normalized by:\n    * 1. trimming whitespaces and semicolon from the beginning and end;\n    * 2. normalize to lower case.\n-   *\n-   * @param definition the string definition\n+   *  @param definition the string definition\n    * @param actions the list of actions\n+   * @param properties the list of properties extracted from definition\n    */\n-  private TransformDefinition(String definition, List<TransformAction> actions) {\n+  private TransformDefinition(String definition, List<TransformAction> actions,\n+                              Properties properties) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAwODE4Nw=="}, "originalCommit": {"oid": "490ee32be25be2222ebfd840c9c4445d1dc848e4"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1781, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}