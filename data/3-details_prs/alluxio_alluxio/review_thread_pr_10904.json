{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MDQxMzU0", "number": 10904, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMDozNTozOFrODfvrVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMDo0NDozMVrODgAyEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjEzNTg4OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/metrics/MetricsSystem.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMDozNTozOFrOFpoSNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMjo0OTowNFrOFpqOKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE5NTk1Nw==", "bodyText": "Would it be easier to just use startsWith as a string instead of using regex?", "url": "https://github.com/Alluxio/alluxio/pull/10904#discussion_r379195957", "createdAt": "2020-02-14T00:35:38Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/metrics/MetricsSystem.java", "diffHunk": "@@ -621,19 +625,25 @@ public static Timer timer(String name) {\n   }\n \n   /**\n-   * Gets master metric with the given metric name.\n+   * Gets all the master metrics belongs to the given metric names.\n    *\n-   * @param name the name of the metric to get\n-   * @return a metric set with the master metric of the given metric name\n+   * @param metricNames the name of the metrics to get\n+   * @return a metric map from metric name to metrics with this name\n    */\n-  public static Set<Metric> getMasterMetric(String name) {\n-    Set<Metric> set = new HashSet<>();\n-    String fullName = getMasterMetricName(name);\n-    Metric alluxioMetric = getMetricValue(fullName);\n-    if (alluxioMetric != null) {\n-      set.add(alluxioMetric);\n+  public static Map<String, Set<Metric>> getMasterMetrics(Set<String> metricNames) {\n+    Map<String, Set<Metric>> res = new HashMap<>();\n+    for (Map.Entry<String, com.codahale.metrics.Metric> entry\n+        : METRIC_REGISTRY.getMetrics().entrySet()) {\n+      Matcher matcher = METRIC_NAME_PATTERN.matcher(entry.getKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d714855aa07264bc838153cbfb131f57817f583c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIyNzY4OA==", "bodyText": "This patten helps reduce the traverse of the given name set, the complexity is O(n), n = metrics number in the whole metrics system.\nIf using startsWtih, the complexity is O(n*m), m = number of elements in the given metrics name set.\nThat's why I changed from startsWith to pattern matching.", "url": "https://github.com/Alluxio/alluxio/pull/10904#discussion_r379227688", "createdAt": "2020-02-14T02:49:04Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/metrics/MetricsSystem.java", "diffHunk": "@@ -621,19 +625,25 @@ public static Timer timer(String name) {\n   }\n \n   /**\n-   * Gets master metric with the given metric name.\n+   * Gets all the master metrics belongs to the given metric names.\n    *\n-   * @param name the name of the metric to get\n-   * @return a metric set with the master metric of the given metric name\n+   * @param metricNames the name of the metrics to get\n+   * @return a metric map from metric name to metrics with this name\n    */\n-  public static Set<Metric> getMasterMetric(String name) {\n-    Set<Metric> set = new HashSet<>();\n-    String fullName = getMasterMetricName(name);\n-    Metric alluxioMetric = getMetricValue(fullName);\n-    if (alluxioMetric != null) {\n-      set.add(alluxioMetric);\n+  public static Map<String, Set<Metric>> getMasterMetrics(Set<String> metricNames) {\n+    Map<String, Set<Metric>> res = new HashMap<>();\n+    for (Map.Entry<String, com.codahale.metrics.Metric> entry\n+        : METRIC_REGISTRY.getMetrics().entrySet()) {\n+      Matcher matcher = METRIC_NAME_PATTERN.matcher(entry.getKey());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE5NTk1Nw=="}, "originalCommit": {"oid": "d714855aa07264bc838153cbfb131f57817f583c"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODkzODQzOnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/metrics/DefaultMetricsMaster.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMDo0NDozMlrOFqDJpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTozODozM1rOFqEY9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzNjEzMw==", "bodyText": "nit: This seems like an odd line break. Does it not fit on one line?", "url": "https://github.com/Alluxio/alluxio/pull/10904#discussion_r379636133", "createdAt": "2020-02-14T20:44:32Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/master/metrics/DefaultMetricsMaster.java", "diffHunk": "@@ -53,8 +51,10 @@\n  */\n public class DefaultMetricsMaster extends CoreMaster implements MetricsMaster, NoopJournaled {\n   private static final Logger LOG = LoggerFactory.getLogger(DefaultMetricsMaster.class);\n-  private final Set<MultiValueMetricsAggregator> mMultiValueMetricsAggregatorRegistry =\n-      new HashSet<>();\n+  // A map from the to be aggregated metric name to aggregator itself\n+  // This registry only holds aggregator for master metrics\n+  private final Map<String, MultiValueMetricsAggregator>\n+      mAggregatorRegistry = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a856d512093badd15b467696ad005d02bd7f8582"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY1NjQzNw==", "bodyText": "Fixed, thanks", "url": "https://github.com/Alluxio/alluxio/pull/10904#discussion_r379656437", "createdAt": "2020-02-14T21:38:33Z", "author": {"login": "LuQQiu"}, "path": "core/server/master/src/main/java/alluxio/master/metrics/DefaultMetricsMaster.java", "diffHunk": "@@ -53,8 +51,10 @@\n  */\n public class DefaultMetricsMaster extends CoreMaster implements MetricsMaster, NoopJournaled {\n   private static final Logger LOG = LoggerFactory.getLogger(DefaultMetricsMaster.class);\n-  private final Set<MultiValueMetricsAggregator> mMultiValueMetricsAggregatorRegistry =\n-      new HashSet<>();\n+  // A map from the to be aggregated metric name to aggregator itself\n+  // This registry only holds aggregator for master metrics\n+  private final Map<String, MultiValueMetricsAggregator>\n+      mAggregatorRegistry = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzNjEzMw=="}, "originalCommit": {"oid": "a856d512093badd15b467696ad005d02bd7f8582"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2031, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}