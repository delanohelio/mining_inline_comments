{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5OTcxMzU2", "number": 12642, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzoyNzoyNFrOFFtrVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzoyNzoyNFrOFFtrVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTM1NTcyOnYy", "diffSide": "RIGHT", "path": "core/server/common/src/main/java/alluxio/underfs/AbstractUfsManager.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzoyNzoyNFrOIGXFxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMjowNDo0MFrOIIQNjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU0MDY3Nw==", "bodyText": "I am confused. Why could there be multiple journal locations?\nShouldn't this look similar to the root ufs client, which there is only 1 of?", "url": "https://github.com/Alluxio/alluxio/pull/12642#discussion_r543540677", "createdAt": "2020-12-15T17:27:24Z", "author": {"login": "gpang"}, "path": "core/server/common/src/main/java/alluxio/underfs/AbstractUfsManager.java", "diffHunk": "@@ -209,6 +214,27 @@ public UfsClient getRoot() {\n     }\n   }\n \n+  @Override\n+  public UfsClient getJournal(URI location) {\n+    synchronized (this) {\n+      if (mJournalUfsClientMap == null) {\n+        mJournalUfsClientMap = new HashMap<>();\n+      }\n+      UfsClient ufsClient = mJournalUfsClientMap.get(location.getScheme());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fd0ae297cf8468b33b13eb7c32f1600d92b845a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg1ODI1Nw==", "bodyText": "From the master.log, It seems that there are multiple journal for different service need format.\n2020-12-16 10:48:04,744 INFO  cli.Format (Format.java:format(121)) - Formatting master journal: /Users/mbl/projects/github/alluxio-2/journal/\n2020-12-16 10:48:04,825 INFO  extensions.ExtensionFactoryRegistry (ExtensionFactoryRegistry.java:scanLibs(169)) - Loading core jars from /Users/mbl/projects/github/alluxio-2/lib\n2020-12-16 10:48:05,000 INFO  extensions.ExtensionFactoryRegistry (ExtensionFactoryRegistry.java:scanExtensions(159)) - Loading extension jars from /Users/mbl/projects/github/alluxio-2/extensions\n2020-12-16 10:48:05,032 INFO  ufs.UfsJournal (UfsJournal.java:format(428)) - Formatting /Users/mbl/projects/github/alluxio-2/journal/BlockMaster/v1\n2020-12-16 10:48:05,058 INFO  ufs.UfsJournal (UfsJournal.java:format(428)) - Formatting /Users/mbl/projects/github/alluxio-2/journal/TableMaster/v1\n2020-12-16 10:48:05,060 INFO  ufs.UfsJournal (UfsJournal.java:format(428)) - Formatting /Users/mbl/projects/github/alluxio-2/journal/FileSystemMaster/v1\n2020-12-16 10:48:05,060 INFO  ufs.UfsJournal (UfsJournal.java:format(428)) - Formatting /Users/mbl/projects/github/alluxio-2/journal/MetaMaster/v1\n2020-12-16 10:48:05,061 INFO  ufs.UfsJournal (UfsJournal.java:format(428)) - Formatting /Users/mbl/projects/github/alluxio-2/journal/MetricsMaster/v1\n2020-12-16 10:48:05,062 INFO  cli.Format (Format.java:main(106)) - Formatting complete\n\nAlso, from the following Format#format, there are lots of master services, each one need create journal.\npublic static void format(Mode mode, AlluxioConfiguration alluxioConf) throws IOException {\n    NoopUfsManager noopUfsManager = new NoopUfsManager();\n    switch (mode) {\n      case MASTER:\n        URI journalLocation = JournalUtils.getJournalLocation();\n        LOG.info(\"Formatting master journal: {}\", journalLocation);\n        JournalSystem journalSystem = new JournalSystem.Builder()\n            .setLocation(journalLocation).build(CommonUtils.ProcessType.MASTER);\n        for (String masterServiceName : ServiceUtils.getMasterServiceNames()) {\n          journalSystem.createJournal(new NoopMaster(masterServiceName, noopUfsManager));\n        }\n        journalSystem.format();\n        break;\n...\nThe following screenshots are shown that, there is one location for one journal of one master service, but there are lots of master services.", "url": "https://github.com/Alluxio/alluxio/pull/12642#discussion_r543858257", "createdAt": "2020-12-16T02:52:12Z", "author": {"login": "maobaolong"}, "path": "core/server/common/src/main/java/alluxio/underfs/AbstractUfsManager.java", "diffHunk": "@@ -209,6 +214,27 @@ public UfsClient getRoot() {\n     }\n   }\n \n+  @Override\n+  public UfsClient getJournal(URI location) {\n+    synchronized (this) {\n+      if (mJournalUfsClientMap == null) {\n+        mJournalUfsClientMap = new HashMap<>();\n+      }\n+      UfsClient ufsClient = mJournalUfsClientMap.get(location.getScheme());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU0MDY3Nw=="}, "originalCommit": {"oid": "4fd0ae297cf8468b33b13eb7c32f1600d92b845a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMDMxNg==", "bodyText": "@maobaolong I see. Then, does this PR actually help with the original motivation of avoiding loading the UFS journal jars? It seems like this will create a new UFS client for each master service (block, fs, table, etc) to format each, and each one will have a different location, so it will load the jars again?\nIn this example, I feel like the ideal behavior should be to load the UFS jars once for the location /Users/mbl/projects/github/alluxio-2/journal/, and all the master services are going to be sub-directories of that single UFS journal location. Does this current PR already behave in this way?", "url": "https://github.com/Alluxio/alluxio/pull/12642#discussion_r545310316", "createdAt": "2020-12-17T18:30:15Z", "author": {"login": "gpang"}, "path": "core/server/common/src/main/java/alluxio/underfs/AbstractUfsManager.java", "diffHunk": "@@ -209,6 +214,27 @@ public UfsClient getRoot() {\n     }\n   }\n \n+  @Override\n+  public UfsClient getJournal(URI location) {\n+    synchronized (this) {\n+      if (mJournalUfsClientMap == null) {\n+        mJournalUfsClientMap = new HashMap<>();\n+      }\n+      UfsClient ufsClient = mJournalUfsClientMap.get(location.getScheme());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU0MDY3Nw=="}, "originalCommit": {"oid": "4fd0ae297cf8468b33b13eb7c32f1600d92b845a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ4NjM0Mw==", "bodyText": "@gpang Thanks for your review again. I think it just load the jars once during the format, since location.getScheme(), I use the scheme of the location as the key mapping to the related Underfilesystem.\nAnd I did a format test using this PR, the behavior running as expected.", "url": "https://github.com/Alluxio/alluxio/pull/12642#discussion_r545486343", "createdAt": "2020-12-18T00:05:21Z", "author": {"login": "maobaolong"}, "path": "core/server/common/src/main/java/alluxio/underfs/AbstractUfsManager.java", "diffHunk": "@@ -209,6 +214,27 @@ public UfsClient getRoot() {\n     }\n   }\n \n+  @Override\n+  public UfsClient getJournal(URI location) {\n+    synchronized (this) {\n+      if (mJournalUfsClientMap == null) {\n+        mJournalUfsClientMap = new HashMap<>();\n+      }\n+      UfsClient ufsClient = mJournalUfsClientMap.get(location.getScheme());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU0MDY3Nw=="}, "originalCommit": {"oid": "4fd0ae297cf8468b33b13eb7c32f1600d92b845a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUwMzAwNQ==", "bodyText": "@maobaolong O, you are right. the scheme will always be the same. Then I am confused as to why we even need the map to begin with. The scheme for all the journals should always be the same, since they are always a sub-directory of the journal location right?\nI feel like the map will always have only 1 entry, so we should just not use a map?", "url": "https://github.com/Alluxio/alluxio/pull/12642#discussion_r545503005", "createdAt": "2020-12-18T00:55:00Z", "author": {"login": "gpang"}, "path": "core/server/common/src/main/java/alluxio/underfs/AbstractUfsManager.java", "diffHunk": "@@ -209,6 +214,27 @@ public UfsClient getRoot() {\n     }\n   }\n \n+  @Override\n+  public UfsClient getJournal(URI location) {\n+    synchronized (this) {\n+      if (mJournalUfsClientMap == null) {\n+        mJournalUfsClientMap = new HashMap<>();\n+      }\n+      UfsClient ufsClient = mJournalUfsClientMap.get(location.getScheme());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU0MDY3Nw=="}, "originalCommit": {"oid": "4fd0ae297cf8468b33b13eb7c32f1600d92b845a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUyNTEzNQ==", "bodyText": "@gpang OK, I remove the map now.", "url": "https://github.com/Alluxio/alluxio/pull/12642#discussion_r545525135", "createdAt": "2020-12-18T02:04:40Z", "author": {"login": "maobaolong"}, "path": "core/server/common/src/main/java/alluxio/underfs/AbstractUfsManager.java", "diffHunk": "@@ -209,6 +214,27 @@ public UfsClient getRoot() {\n     }\n   }\n \n+  @Override\n+  public UfsClient getJournal(URI location) {\n+    synchronized (this) {\n+      if (mJournalUfsClientMap == null) {\n+        mJournalUfsClientMap = new HashMap<>();\n+      }\n+      UfsClient ufsClient = mJournalUfsClientMap.get(location.getScheme());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU0MDY3Nw=="}, "originalCommit": {"oid": "4fd0ae297cf8468b33b13eb7c32f1600d92b845a"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 955, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}