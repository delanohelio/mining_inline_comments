{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNzYxMzU1", "number": 11210, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzo0NjoxN1rODrwv6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODo0MzoyNlrODryMwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjE0MDU3OnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/evictor/LFUCacheEvictor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzo0NjoxN1rOF8S-pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMDowMDowOFrOF8er6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2OTgyOQ==", "bodyText": "nit: save Math.log(mLogBase)) as a constant since we need this frequently?", "url": "https://github.com/Alluxio/alluxio/pull/11210#discussion_r398769829", "createdAt": "2020-03-26T17:46:17Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/evictor/LFUCacheEvictor.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.file.cache.evictor;\n+\n+import alluxio.client.file.cache.CacheEvictor;\n+import alluxio.client.file.cache.PageId;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+\n+import java.util.HashMap;\n+import java.util.LinkedHashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * LFU client-side cache eviction policy.\n+ */\n+@ThreadSafe\n+public class LFUCacheEvictor implements CacheEvictor {\n+  private static final int PAGE_MAP_INIT_CAPACITY = 200;\n+  private static final float PAGE_MAP_INIT_LOAD_FACTOR = 0.75f;\n+  private static final int BUCKET_MAP_INIT_CAPACITY = 32;\n+  private static final float BUCKET_MAP_INIT_LOAD_FACTOR = 0.75f;\n+\n+  private final Map<PageId, Integer> mPageMap = new HashMap<>(\n+      PAGE_MAP_INIT_CAPACITY, PAGE_MAP_INIT_LOAD_FACTOR);\n+\n+  private final Map<Integer, Set<PageId>> mBucketMap =\n+      new HashMap<>(BUCKET_MAP_INIT_CAPACITY, BUCKET_MAP_INIT_LOAD_FACTOR);\n+  private int mMinBucket = -1;\n+  private final double mLogBase;\n+\n+  /**\n+   * Required constructor.\n+   *\n+   * @param conf Alluxio configuration\n+   */\n+  public LFUCacheEvictor(AlluxioConfiguration conf) {\n+    mLogBase = conf.getDouble(PropertyKey.USER_CLIENT_CACHE_EVICTOR_LFU_LOGBASE);\n+  }\n+\n+  private int getBucket(int count) {\n+    return (int) (Math.log(count) / Math.log(mLogBase));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e7db50a177aeda497855023587bab1c3f1339b"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk2MTY0MA==", "bodyText": "Good idea! Updated.", "url": "https://github.com/Alluxio/alluxio/pull/11210#discussion_r398961640", "createdAt": "2020-03-27T00:00:08Z", "author": {"login": "bf8086"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/evictor/LFUCacheEvictor.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.file.cache.evictor;\n+\n+import alluxio.client.file.cache.CacheEvictor;\n+import alluxio.client.file.cache.PageId;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+\n+import java.util.HashMap;\n+import java.util.LinkedHashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * LFU client-side cache eviction policy.\n+ */\n+@ThreadSafe\n+public class LFUCacheEvictor implements CacheEvictor {\n+  private static final int PAGE_MAP_INIT_CAPACITY = 200;\n+  private static final float PAGE_MAP_INIT_LOAD_FACTOR = 0.75f;\n+  private static final int BUCKET_MAP_INIT_CAPACITY = 32;\n+  private static final float BUCKET_MAP_INIT_LOAD_FACTOR = 0.75f;\n+\n+  private final Map<PageId, Integer> mPageMap = new HashMap<>(\n+      PAGE_MAP_INIT_CAPACITY, PAGE_MAP_INIT_LOAD_FACTOR);\n+\n+  private final Map<Integer, Set<PageId>> mBucketMap =\n+      new HashMap<>(BUCKET_MAP_INIT_CAPACITY, BUCKET_MAP_INIT_LOAD_FACTOR);\n+  private int mMinBucket = -1;\n+  private final double mLogBase;\n+\n+  /**\n+   * Required constructor.\n+   *\n+   * @param conf Alluxio configuration\n+   */\n+  public LFUCacheEvictor(AlluxioConfiguration conf) {\n+    mLogBase = conf.getDouble(PropertyKey.USER_CLIENT_CACHE_EVICTOR_LFU_LOGBASE);\n+  }\n+\n+  private int getBucket(int count) {\n+    return (int) (Math.log(count) / Math.log(mLogBase));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2OTgyOQ=="}, "originalCommit": {"oid": "a6e7db50a177aeda497855023587bab1c3f1339b"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjI0MTQ4OnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/evictor/LFUCacheEvictor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODowOTowM1rOF8T_aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzo1OTo0OVrOF8erbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc4NjQwOQ==", "bodyText": "If we change LinkedHashSet to LinkedHashMap with access order (check LRUCacheEvictor), don't we have a LRU bucket in that case? @calvinjia", "url": "https://github.com/Alluxio/alluxio/pull/11210#discussion_r398786409", "createdAt": "2020-03-26T18:09:03Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/evictor/LFUCacheEvictor.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.file.cache.evictor;\n+\n+import alluxio.client.file.cache.CacheEvictor;\n+import alluxio.client.file.cache.PageId;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+\n+import java.util.HashMap;\n+import java.util.LinkedHashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * LFU client-side cache eviction policy.\n+ */\n+@ThreadSafe\n+public class LFUCacheEvictor implements CacheEvictor {\n+  private static final int PAGE_MAP_INIT_CAPACITY = 200;\n+  private static final float PAGE_MAP_INIT_LOAD_FACTOR = 0.75f;\n+  private static final int BUCKET_MAP_INIT_CAPACITY = 32;\n+  private static final float BUCKET_MAP_INIT_LOAD_FACTOR = 0.75f;\n+\n+  private final Map<PageId, Integer> mPageMap = new HashMap<>(\n+      PAGE_MAP_INIT_CAPACITY, PAGE_MAP_INIT_LOAD_FACTOR);\n+\n+  private final Map<Integer, Set<PageId>> mBucketMap =\n+      new HashMap<>(BUCKET_MAP_INIT_CAPACITY, BUCKET_MAP_INIT_LOAD_FACTOR);\n+  private int mMinBucket = -1;\n+  private final double mLogBase;\n+\n+  /**\n+   * Required constructor.\n+   *\n+   * @param conf Alluxio configuration\n+   */\n+  public LFUCacheEvictor(AlluxioConfiguration conf) {\n+    mLogBase = conf.getDouble(PropertyKey.USER_CLIENT_CACHE_EVICTOR_LFU_LOGBASE);\n+  }\n+\n+  private int getBucket(int count) {\n+    return (int) (Math.log(count) / Math.log(mLogBase));\n+  }\n+\n+  private void addPageToBucket(PageId pageId, int bucket) {\n+    mBucketMap.compute(bucket, (bucketKey, pageSet) -> {\n+      Set<PageId> set = pageSet == null ? new LinkedHashSet<>() : pageSet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e7db50a177aeda497855023587bab1c3f1339b"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk2MTUxNw==", "bodyText": "Done.", "url": "https://github.com/Alluxio/alluxio/pull/11210#discussion_r398961517", "createdAt": "2020-03-26T23:59:49Z", "author": {"login": "bf8086"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/evictor/LFUCacheEvictor.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.file.cache.evictor;\n+\n+import alluxio.client.file.cache.CacheEvictor;\n+import alluxio.client.file.cache.PageId;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+\n+import java.util.HashMap;\n+import java.util.LinkedHashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * LFU client-side cache eviction policy.\n+ */\n+@ThreadSafe\n+public class LFUCacheEvictor implements CacheEvictor {\n+  private static final int PAGE_MAP_INIT_CAPACITY = 200;\n+  private static final float PAGE_MAP_INIT_LOAD_FACTOR = 0.75f;\n+  private static final int BUCKET_MAP_INIT_CAPACITY = 32;\n+  private static final float BUCKET_MAP_INIT_LOAD_FACTOR = 0.75f;\n+\n+  private final Map<PageId, Integer> mPageMap = new HashMap<>(\n+      PAGE_MAP_INIT_CAPACITY, PAGE_MAP_INIT_LOAD_FACTOR);\n+\n+  private final Map<Integer, Set<PageId>> mBucketMap =\n+      new HashMap<>(BUCKET_MAP_INIT_CAPACITY, BUCKET_MAP_INIT_LOAD_FACTOR);\n+  private int mMinBucket = -1;\n+  private final double mLogBase;\n+\n+  /**\n+   * Required constructor.\n+   *\n+   * @param conf Alluxio configuration\n+   */\n+  public LFUCacheEvictor(AlluxioConfiguration conf) {\n+    mLogBase = conf.getDouble(PropertyKey.USER_CLIENT_CACHE_EVICTOR_LFU_LOGBASE);\n+  }\n+\n+  private int getBucket(int count) {\n+    return (int) (Math.log(count) / Math.log(mLogBase));\n+  }\n+\n+  private void addPageToBucket(PageId pageId, int bucket) {\n+    mBucketMap.compute(bucket, (bucketKey, pageSet) -> {\n+      Set<PageId> set = pageSet == null ? new LinkedHashSet<>() : pageSet;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc4NjQwOQ=="}, "originalCommit": {"oid": "a6e7db50a177aeda497855023587bab1c3f1339b"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjM3ODI0OnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/evictor/LRUCacheEvictor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODo0MzoyNlrOF8VV9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODo0MzoyNlrOF8VV9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwODU2Ng==", "bodyText": "oops", "url": "https://github.com/Alluxio/alluxio/pull/11210#discussion_r398808566", "createdAt": "2020-03-26T18:43:26Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/evictor/LRUCacheEvictor.java", "diffHunk": "@@ -36,6 +37,14 @@\n       Collections.synchronizedMap(new LinkedHashMap<>(LINKED_HASH_MAP_INIT_CAPACITY,\n           LINKED_HASH_MAP_INIT_LOAD_FACTOR, LINKED_HASH_MAP_ACCESS_ORDERED));\n \n+  /**\n+   * Required constructor.\n+   *\n+   * @param conf Alluxio configuration\n+   */\n+  public LRUCacheEvictor(AlluxioConfiguration conf) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e7db50a177aeda497855023587bab1c3f1339b"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1807, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}