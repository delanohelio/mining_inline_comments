{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MDEyMjQz", "number": 10963, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzowNzo1N1rODhtdDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODozMDoxMFrODh-MZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Njc0MzE5OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzowNzo1N1rOFsmUxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzowNzo1N1rOFsmUxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMwOTU3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          + \"after being cached for this time period. \")\n          \n          \n            \n                          + \"after being cached for this time period.\")\n          \n      \n    \n    \n  \n\nAlso, can you add what the implications may be if it is too short, and too long?", "url": "https://github.com/Alluxio/alluxio/pull/10963#discussion_r382309575", "createdAt": "2020-02-20T23:07:57Z", "author": {"login": "gpang"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -2079,6 +2079,14 @@ public String toString() {\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n           .setScope(Scope.MASTER)\n               .build();\n+  public static final PropertyKey MASTER_WORKER_INFO_CACHE_REFRESH_TIME =\n+      new Builder(Name.MASTER_WORKER_INFO_CACHE_REFRESH_TIME)\n+          .setDefaultValue(\"10sec\")\n+          .setDescription(\"The worker information list will be refreshed \"\n+              + \"after being cached for this time period. \")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd70a4380636274aa9d345db9e64f06b2285bd7"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Njc0Njc3OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzowOTo0NFrOFsmW-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMjo1OToyNVrOFsqP6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMDEzNg==", "bodyText": "Can we include the information from e in this exception message?", "url": "https://github.com/Alluxio/alluxio/pull/10963#discussion_r382310136", "createdAt": "2020-02-20T23:09:44Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java", "diffHunk": "@@ -407,6 +431,14 @@ public long getUsedBytes() {\n     if (mSafeModeManager.isInSafeMode()) {\n       throw new UnavailableException(ExceptionMessage.MASTER_IN_SAFEMODE.getMessage());\n     }\n+    try {\n+      return mWorkerInfoCache.get(WORKER_INFO_CACHE_KEY);\n+    } catch (ExecutionException e) {\n+      throw new UnavailableException(\"Unable to get worker info list from cache\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd70a4380636274aa9d345db9e64f06b2285bd7"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3Mzg2NA==", "bodyText": "Yeah, added the exception message", "url": "https://github.com/Alluxio/alluxio/pull/10963#discussion_r382373864", "createdAt": "2020-02-21T02:59:25Z", "author": {"login": "LuQQiu"}, "path": "core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java", "diffHunk": "@@ -407,6 +431,14 @@ public long getUsedBytes() {\n     if (mSafeModeManager.isInSafeMode()) {\n       throw new UnavailableException(ExceptionMessage.MASTER_IN_SAFEMODE.getMessage());\n     }\n+    try {\n+      return mWorkerInfoCache.get(WORKER_INFO_CACHE_KEY);\n+    } catch (ExecutionException e) {\n+      throw new UnavailableException(\"Unable to get worker info list from cache\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMDEzNg=="}, "originalCommit": {"oid": "ffd70a4380636274aa9d345db9e64f06b2285bd7"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTQ4NDkwOnYy", "diffSide": "RIGHT", "path": "core/common/src/test/java/alluxio/ConfigurationTestUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODoyOTo1MVrOFtAdQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOTowNDo0MFrOFtBbLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczNzcyOQ==", "bodyText": "should all integration tests just use a shorter refresh time, like 20ms?", "url": "https://github.com/Alluxio/alluxio/pull/10963#discussion_r382737729", "createdAt": "2020-02-21T18:29:51Z", "author": {"login": "gpang"}, "path": "core/common/src/test/java/alluxio/ConfigurationTestUtils.java", "diffHunk": "@@ -140,6 +140,9 @@ public static InstancedConfiguration defaults() {\n     conf.put(PropertyKey.MASTER_PERSISTENCE_INITIAL_INTERVAL_MS, \"20ms\");\n     conf.put(PropertyKey.MASTER_PERSISTENCE_SCHEDULER_INTERVAL_MS, \"20ms\");\n \n+    // faster refresh\n+    conf.put(PropertyKey.MASTER_WORKER_INFO_CACHE_REFRESH_TIME, \"100ms\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e87cd8567042e98597a652a5369a865fb4caaf72"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1MzU4MA==", "bodyText": "I am worried if the too frequent getWorkerInfoList calls will create locking contentions in integration tests.", "url": "https://github.com/Alluxio/alluxio/pull/10963#discussion_r382753580", "createdAt": "2020-02-21T19:04:40Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/test/java/alluxio/ConfigurationTestUtils.java", "diffHunk": "@@ -140,6 +140,9 @@ public static InstancedConfiguration defaults() {\n     conf.put(PropertyKey.MASTER_PERSISTENCE_INITIAL_INTERVAL_MS, \"20ms\");\n     conf.put(PropertyKey.MASTER_PERSISTENCE_SCHEDULER_INTERVAL_MS, \"20ms\");\n \n+    // faster refresh\n+    conf.put(PropertyKey.MASTER_WORKER_INFO_CACHE_REFRESH_TIME, \"100ms\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczNzcyOQ=="}, "originalCommit": {"oid": "e87cd8567042e98597a652a5369a865fb4caaf72"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTQ4NTgyOnYy", "diffSide": "RIGHT", "path": "tests/src/test/java/alluxio/client/fs/FileOutStreamAsyncWriteIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODozMDoxMFrOFtAd4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODozMDoxMFrOFtAd4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczNzg4OQ==", "bodyText": "if the test config has a faster time, this doesn't have to be set, right?", "url": "https://github.com/Alluxio/alluxio/pull/10963#discussion_r382737889", "createdAt": "2020-02-21T18:30:10Z", "author": {"login": "gpang"}, "path": "tests/src/test/java/alluxio/client/fs/FileOutStreamAsyncWriteIntegrationTest.java", "diffHunk": "@@ -174,7 +175,8 @@ public void asyncWriteNoEvictBeforeBlockCommit() throws Exception {\n       PropertyKey.Name.USER_FILE_PERSISTENCE_INITIAL_WAIT_TIME, \"1min\",\n       PropertyKey.Name.WORKER_MEMORY_SIZE, TINY_WORKER_MEM,\n       PropertyKey.Name.USER_BLOCK_SIZE_BYTES_DEFAULT, TINY_BLOCK_SIZE,\n-      PropertyKey.Name.USER_FILE_BUFFER_BYTES, \"8k\"\n+      PropertyKey.Name.USER_FILE_BUFFER_BYTES, \"8k\",\n+      PropertyKey.Name.MASTER_WORKER_INFO_CACHE_REFRESH_TIME, \"20ms\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e87cd8567042e98597a652a5369a865fb4caaf72"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1961, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}