{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NDQ3MTky", "number": 11224, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjo1MDo0M1rODudZpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjo1MDo0M1rODudZpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDQyNzkwOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fs/command/DistributedLoadCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjo1MDo0M1rOGAdymw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNzowNTo0M1rOGAegWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0MTI3NQ==", "bodyText": "Was the issue that checking everything in serial was too slow? Because this still waits for all the jobs to be checked.", "url": "https://github.com/Alluxio/alluxio/pull/11224#discussion_r403141275", "createdAt": "2020-04-03T16:50:43Z", "author": {"login": "gpang"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DistributedLoadCommand.java", "diffHunk": "@@ -194,38 +195,34 @@ private JobAttempt newJob(AlluxioURI filePath, int replication) {\n   }\n \n   /**\n-   * Waits one job to complete.\n+   * Waits for at least one job to complete.\n    */\n-  private void waitJob() throws IOException {\n-    boolean removed = false;\n+  private void waitJob() {\n+    AtomicBoolean removed = new AtomicBoolean(false);\n     while (true) {\n-      Iterator<JobAttempt> iterator = mSubmittedJobAttempts.iterator();\n-\n-      while (iterator.hasNext()) {\n-        JobAttempt jobAttempt = iterator.next();\n+      mSubmittedJobAttempts = mSubmittedJobAttempts.parallelStream().filter((jobAttempt) -> {\n         Status check = jobAttempt.check();\n-\n         switch (check) {\n           case CREATED:\n           case RUNNING:\n-            continue;\n+            return true;\n           case CANCELED:\n           case COMPLETED:\n-            removed = true;\n-            jobAttempt.close();\n-            iterator.remove();\n-            continue;\n-          case FAILED:\n-            if (!jobAttempt.run()) {\n-              removed = true;\n-              iterator.remove();\n+            removed.set(true);\n+            try {\n+              jobAttempt.close();\n+            } catch (IOException e) {\n+              LOG.warn(\"Unable to close job master client\", e);\n             }\n-            continue;\n+            return false;\n+          case FAILED:\n+            removed.set(true);\n+            return false;\n           default:\n             throw new IllegalStateException(String.format(\"Unexpected Status: %s\", check));\n         }\n-      }\n-      if (removed) {\n+      }).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79fd7b6c6f7df5898eed4e2d63212b833d3beae8"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE1Mjk4Nw==", "bodyText": "that is correct. Performing listStatus on all 1000 jobs in serial is slow. There are ways to do this asynchronously but that would mean that there will be some concurrency concerns with the rest of the code and this feels like enough of an improvement.", "url": "https://github.com/Alluxio/alluxio/pull/11224#discussion_r403152987", "createdAt": "2020-04-03T17:05:43Z", "author": {"login": "bradyoo"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DistributedLoadCommand.java", "diffHunk": "@@ -194,38 +195,34 @@ private JobAttempt newJob(AlluxioURI filePath, int replication) {\n   }\n \n   /**\n-   * Waits one job to complete.\n+   * Waits for at least one job to complete.\n    */\n-  private void waitJob() throws IOException {\n-    boolean removed = false;\n+  private void waitJob() {\n+    AtomicBoolean removed = new AtomicBoolean(false);\n     while (true) {\n-      Iterator<JobAttempt> iterator = mSubmittedJobAttempts.iterator();\n-\n-      while (iterator.hasNext()) {\n-        JobAttempt jobAttempt = iterator.next();\n+      mSubmittedJobAttempts = mSubmittedJobAttempts.parallelStream().filter((jobAttempt) -> {\n         Status check = jobAttempt.check();\n-\n         switch (check) {\n           case CREATED:\n           case RUNNING:\n-            continue;\n+            return true;\n           case CANCELED:\n           case COMPLETED:\n-            removed = true;\n-            jobAttempt.close();\n-            iterator.remove();\n-            continue;\n-          case FAILED:\n-            if (!jobAttempt.run()) {\n-              removed = true;\n-              iterator.remove();\n+            removed.set(true);\n+            try {\n+              jobAttempt.close();\n+            } catch (IOException e) {\n+              LOG.warn(\"Unable to close job master client\", e);\n             }\n-            continue;\n+            return false;\n+          case FAILED:\n+            removed.set(true);\n+            return false;\n           default:\n             throw new IllegalStateException(String.format(\"Unexpected Status: %s\", check));\n         }\n-      }\n-      if (removed) {\n+      }).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0MTI3NQ=="}, "originalCommit": {"oid": "79fd7b6c6f7df5898eed4e2d63212b833d3beae8"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1814, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}