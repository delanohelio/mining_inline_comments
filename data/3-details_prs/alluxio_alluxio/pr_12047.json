{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1NTk1MTIx", "number": 12047, "title": "Add Azure Data Lake Gen 1 support for UFS", "bodyText": "Adds ADL Gen1 UFS extension as a HDFS extension.\nAttn @apc999 @madanadit", "createdAt": "2020-08-28T19:09:36Z", "url": "https://github.com/Alluxio/alluxio/pull/12047", "merged": true, "mergeCommit": {"oid": "384f944fa6c6986adeca8e598b62feebd7872276"}, "closed": true, "closedAt": "2020-09-08T19:36:48Z", "author": {"login": "bastrik"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdDLZFpAH2gAyNDc1NTk1MTIxOjQ5NjFiM2NhNjY1OTdlNDdhMmFkYjRmNGUyOWM4M2IzNGY1OWQyYTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdG84UaAFqTQ4NDQzNzAxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4961b3ca66597e47a2adb4f4e29c83b34f59d2a5", "author": {"user": {"login": "bastrik", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/4961b3ca66597e47a2adb4f4e29c83b34f59d2a5", "committedDate": "2020-08-28T02:15:22Z", "message": "Azure datalake gen1 support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1289e049f4f06e7b498af192c2e3901d6b85c986", "author": {"user": {"login": "bastrik", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/1289e049f4f06e7b498af192c2e3901d6b85c986", "committedDate": "2020-08-28T02:22:09Z", "message": "Add file permission override"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDYzNzQ5", "url": "https://github.com/Alluxio/alluxio/pull/12047#pullrequestreview-480063749", "createdAt": "2020-09-01T19:46:14Z", "commit": {"oid": "1289e049f4f06e7b498af192c2e3901d6b85c986"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOTo0NjoxNVrOHLFt5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOTo0ODoxNFrOHLFx9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM5MDA1NA==", "bodyText": "plz remove commented lines if this is not meant to be used", "url": "https://github.com/Alluxio/alluxio/pull/12047#discussion_r481390054", "createdAt": "2020-09-01T19:46:15Z", "author": {"login": "apc999"}, "path": "underfs/adl/src/main/java/alluxio/underfs/adl/AdlUnderFileSystem.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.adl;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.conf.PropertyKey;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+import alluxio.underfs.hdfs.HdfsUnderFileSystem;\n+import alluxio.underfs.options.FileLocationOptions;\n+\n+import com.google.common.base.MoreObjects;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.permission.FsPermission;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * An {@link UnderFileSystem} uses the Microsoft Azure Blob Storage.\n+ */\n+@ThreadSafe\n+public class AdlUnderFileSystem extends HdfsUnderFileSystem {\n+  private static final Logger LOG = LoggerFactory.getLogger(AdlUnderFileSystem.class);\n+\n+  /** Constant for the adl URI scheme. */\n+  public static final String SCHEME_INSECURE = \"adl://\";\n+\n+  /** Constant for the adls URI scheme. */\n+  public static final String SCHEME_SECURE = \"adls://\";\n+\n+  /**\n+   * Prepares the configuration for this Adl as an HDFS configuration.\n+   *\n+   * @param conf the configuration for this UFS\n+   * @return the created configuration\n+   */\n+  //// @TODO: modify this\n+  public static Configuration createConfiguration(UnderFileSystemConfiguration conf) {\n+    Configuration adlConf = HdfsUnderFileSystem.createConfiguration(conf);\n+    for (Map.Entry<String, String> entry : conf.toMap().entrySet()) {\n+      String key = entry.getKey();\n+      String value = entry.getValue();\n+      if (PropertyKey.Template.UNDERFS_AZURE_CLIENT_ID.matches(key)) {\n+        adlConf.set(key, value);\n+      }\n+      if (PropertyKey.Template.UNDERFS_AZURE_CLIENT_SECRET.matches(key)) {\n+        adlConf.set(key, value);\n+      }\n+      if (PropertyKey.Template.UNDERFS_AZURE_REFRESH_URL.matches(key)) {\n+        adlConf.set(key, value);\n+      }\n+    }\n+    adlConf.set(\"fs.adl.oauth2.access.token.provider.type\", \"ClientCredential\");\n+//    adlConf.set(\"fs.adl.account.ruizhbigcacheadlsgen1.oauth2.access.token.provider.type\", \"ClientCredential\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1289e049f4f06e7b498af192c2e3901d6b85c986"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM5MDQ1Mw==", "bodyText": "4-space indentation for wrapped lines.\nsee https://docs.alluxio.io/os/user/stable/en/contributor/Code-Conventions.html#javadoc-style", "url": "https://github.com/Alluxio/alluxio/pull/12047#discussion_r481390453", "createdAt": "2020-09-01T19:47:02Z", "author": {"login": "apc999"}, "path": "underfs/adl/src/main/java/alluxio/underfs/adl/AdlUnderFileSystemFactory.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.adl;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+import alluxio.underfs.UnderFileSystemFactory;\n+\n+import com.google.common.base.Preconditions;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Factory for creating {@link AdlUnderFileSystem}.\n+ */\n+@ThreadSafe\n+public class AdlUnderFileSystemFactory implements UnderFileSystemFactory {\n+\n+  /**\n+   * Constructs a new {@link AdlUnderFileSystemFactory}.\n+   */\n+  public AdlUnderFileSystemFactory() {}\n+\n+  @Override\n+  public UnderFileSystem create(String path, UnderFileSystemConfiguration conf) {\n+    Preconditions.checkArgument(path != null, \"path may not be null\");\n+    return AdlUnderFileSystem.createInstance(new AlluxioURI(path), conf);\n+  }\n+\n+  @Override\n+  public boolean supportsPath(String path) {\n+    return path != null\n+            && (path.startsWith(AdlUnderFileSystem.SCHEME_SECURE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1289e049f4f06e7b498af192c2e3901d6b85c986"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM5MDk1OQ==", "bodyText": "indentation", "url": "https://github.com/Alluxio/alluxio/pull/12047#discussion_r481390959", "createdAt": "2020-09-01T19:47:59Z", "author": {"login": "apc999"}, "path": "underfs/adl/src/main/java/alluxio/underfs/adl/AdlUnderFileSystem.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.adl;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.conf.PropertyKey;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+import alluxio.underfs.hdfs.HdfsUnderFileSystem;\n+import alluxio.underfs.options.FileLocationOptions;\n+\n+import com.google.common.base.MoreObjects;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.permission.FsPermission;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * An {@link UnderFileSystem} uses the Microsoft Azure Blob Storage.\n+ */\n+@ThreadSafe\n+public class AdlUnderFileSystem extends HdfsUnderFileSystem {\n+  private static final Logger LOG = LoggerFactory.getLogger(AdlUnderFileSystem.class);\n+\n+  /** Constant for the adl URI scheme. */\n+  public static final String SCHEME_INSECURE = \"adl://\";\n+\n+  /** Constant for the adls URI scheme. */\n+  public static final String SCHEME_SECURE = \"adls://\";\n+\n+  /**\n+   * Prepares the configuration for this Adl as an HDFS configuration.\n+   *\n+   * @param conf the configuration for this UFS\n+   * @return the created configuration\n+   */\n+  //// @TODO: modify this\n+  public static Configuration createConfiguration(UnderFileSystemConfiguration conf) {\n+    Configuration adlConf = HdfsUnderFileSystem.createConfiguration(conf);\n+    for (Map.Entry<String, String> entry : conf.toMap().entrySet()) {\n+      String key = entry.getKey();\n+      String value = entry.getValue();\n+      if (PropertyKey.Template.UNDERFS_AZURE_CLIENT_ID.matches(key)) {\n+        adlConf.set(key, value);\n+      }\n+      if (PropertyKey.Template.UNDERFS_AZURE_CLIENT_SECRET.matches(key)) {\n+        adlConf.set(key, value);\n+      }\n+      if (PropertyKey.Template.UNDERFS_AZURE_REFRESH_URL.matches(key)) {\n+        adlConf.set(key, value);\n+      }\n+    }\n+    adlConf.set(\"fs.adl.oauth2.access.token.provider.type\", \"ClientCredential\");\n+//    adlConf.set(\"fs.adl.account.ruizhbigcacheadlsgen1.oauth2.access.token.provider.type\", \"ClientCredential\");\n+    return adlConf;\n+  }\n+\n+  /**\n+   * Factory method to construct a new Adl {@link UnderFileSystem}.\n+   *\n+   * @param uri the {@link AlluxioURI} for this UFS\n+   * @param conf the configuration for this UFS\n+   * @return a new Adl {@link UnderFileSystem} instance\n+   */\n+  public static AdlUnderFileSystem createInstance(AlluxioURI uri,\n+                                                  UnderFileSystemConfiguration conf) {\n+    Configuration adlConf = createConfiguration(conf);\n+    return new AdlUnderFileSystem(uri, conf, adlConf);\n+  }\n+\n+  /**\n+   * Constructs a new Adl {@link UnderFileSystem}.\n+   *\n+   * @param ufsUri the {@link AlluxioURI} for this UFS\n+   * @param conf the configuration for this UFS\n+   * @param adlConf the configuration for this Adl UFS\n+   */\n+  public AdlUnderFileSystem(AlluxioURI ufsUri, UnderFileSystemConfiguration conf,\n+                            final Configuration adlConf) {\n+    super(ufsUri, conf, adlConf);\n+  }\n+\n+  @Override\n+  public String getUnderFSType() {\n+    return \"adl\";\n+  }\n+\n+  @Override\n+  public long getBlockSizeByte(String path) throws IOException {\n+    // adl is an object store, so use the default block size, like other object stores.\n+    return mUfsConf.getBytes(PropertyKey.USER_BLOCK_SIZE_BYTES_DEFAULT);\n+  }\n+\n+  @Override\n+  public UfsStatus getStatus(String path) throws IOException {\n+    UfsStatus status = super.getStatus(path);\n+    if (status instanceof UfsFileStatus) {\n+      // adl is backed by an object store but always claims its block size to be 512MB.\n+      // reset the block size in UfsFileStatus according to getBlockSizeByte\n+      return new UfsFileStatus(path,\n+              ((UfsFileStatus) status).getContentHash(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1289e049f4f06e7b498af192c2e3901d6b85c986"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM5MTA5NA==", "bodyText": "indentation, https://docs.alluxio.io/os/user/stable/en/contributor/Code-Conventions.html#javadoc-style", "url": "https://github.com/Alluxio/alluxio/pull/12047#discussion_r481391094", "createdAt": "2020-09-01T19:48:14Z", "author": {"login": "apc999"}, "path": "underfs/adl/src/main/java/alluxio/underfs/adl/AdlUnderFileSystem.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.adl;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.conf.PropertyKey;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+import alluxio.underfs.hdfs.HdfsUnderFileSystem;\n+import alluxio.underfs.options.FileLocationOptions;\n+\n+import com.google.common.base.MoreObjects;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.permission.FsPermission;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * An {@link UnderFileSystem} uses the Microsoft Azure Blob Storage.\n+ */\n+@ThreadSafe\n+public class AdlUnderFileSystem extends HdfsUnderFileSystem {\n+  private static final Logger LOG = LoggerFactory.getLogger(AdlUnderFileSystem.class);\n+\n+  /** Constant for the adl URI scheme. */\n+  public static final String SCHEME_INSECURE = \"adl://\";\n+\n+  /** Constant for the adls URI scheme. */\n+  public static final String SCHEME_SECURE = \"adls://\";\n+\n+  /**\n+   * Prepares the configuration for this Adl as an HDFS configuration.\n+   *\n+   * @param conf the configuration for this UFS\n+   * @return the created configuration\n+   */\n+  //// @TODO: modify this\n+  public static Configuration createConfiguration(UnderFileSystemConfiguration conf) {\n+    Configuration adlConf = HdfsUnderFileSystem.createConfiguration(conf);\n+    for (Map.Entry<String, String> entry : conf.toMap().entrySet()) {\n+      String key = entry.getKey();\n+      String value = entry.getValue();\n+      if (PropertyKey.Template.UNDERFS_AZURE_CLIENT_ID.matches(key)) {\n+        adlConf.set(key, value);\n+      }\n+      if (PropertyKey.Template.UNDERFS_AZURE_CLIENT_SECRET.matches(key)) {\n+        adlConf.set(key, value);\n+      }\n+      if (PropertyKey.Template.UNDERFS_AZURE_REFRESH_URL.matches(key)) {\n+        adlConf.set(key, value);\n+      }\n+    }\n+    adlConf.set(\"fs.adl.oauth2.access.token.provider.type\", \"ClientCredential\");\n+//    adlConf.set(\"fs.adl.account.ruizhbigcacheadlsgen1.oauth2.access.token.provider.type\", \"ClientCredential\");\n+    return adlConf;\n+  }\n+\n+  /**\n+   * Factory method to construct a new Adl {@link UnderFileSystem}.\n+   *\n+   * @param uri the {@link AlluxioURI} for this UFS\n+   * @param conf the configuration for this UFS\n+   * @return a new Adl {@link UnderFileSystem} instance\n+   */\n+  public static AdlUnderFileSystem createInstance(AlluxioURI uri,\n+                                                  UnderFileSystemConfiguration conf) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1289e049f4f06e7b498af192c2e3901d6b85c986"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMzYxMjMz", "url": "https://github.com/Alluxio/alluxio/pull/12047#pullrequestreview-481361233", "createdAt": "2020-09-02T22:37:05Z", "commit": {"oid": "1289e049f4f06e7b498af192c2e3901d6b85c986"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjozNzowNlrOHMMnSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjozNzowNlrOHMMnSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU1MTYyNg==", "bodyText": "is this comment stale?", "url": "https://github.com/Alluxio/alluxio/pull/12047#discussion_r482551626", "createdAt": "2020-09-02T22:37:06Z", "author": {"login": "madanadit"}, "path": "underfs/adl/src/main/java/alluxio/underfs/adl/AdlUnderFileSystem.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.adl;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.conf.PropertyKey;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+import alluxio.underfs.hdfs.HdfsUnderFileSystem;\n+import alluxio.underfs.options.FileLocationOptions;\n+\n+import com.google.common.base.MoreObjects;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.permission.FsPermission;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * An {@link UnderFileSystem} uses the Microsoft Azure Blob Storage.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1289e049f4f06e7b498af192c2e3901d6b85c986"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf5517551b0f111c0e7c6e7fcb6a1540bb4d7c94", "author": {"user": {"login": "bastrik", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/bf5517551b0f111c0e7c6e7fcb6a1540bb4d7c94", "committedDate": "2020-09-02T23:25:09Z", "message": "fix style & comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNTE2NjM0", "url": "https://github.com/Alluxio/alluxio/pull/12047#pullrequestreview-481516634", "createdAt": "2020-09-03T06:06:26Z", "commit": {"oid": "2c89f1a4da3cb3e907eafb6effb635a13ea14bd2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MzUwNTA4", "url": "https://github.com/Alluxio/alluxio/pull/12047#pullrequestreview-484350508", "createdAt": "2020-09-08T17:27:12Z", "commit": {"oid": "2c89f1a4da3cb3e907eafb6effb635a13ea14bd2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6df32dd33040b42b16b3ee47984fd6d0da1cfd6", "author": {"user": {"login": "bastrik", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/f6df32dd33040b42b16b3ee47984fd6d0da1cfd6", "committedDate": "2020-09-08T18:36:40Z", "message": "Add markdown"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c89f1a4da3cb3e907eafb6effb635a13ea14bd2", "author": {"user": {"login": "bastrik", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/2c89f1a4da3cb3e907eafb6effb635a13ea14bd2", "committedDate": "2020-09-02T23:57:19Z", "message": "Add markdown"}, "afterCommit": {"oid": "f6df32dd33040b42b16b3ee47984fd6d0da1cfd6", "author": {"user": {"login": "bastrik", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/f6df32dd33040b42b16b3ee47984fd6d0da1cfd6", "committedDate": "2020-09-08T18:36:40Z", "message": "Add markdown"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NDM3MDE5", "url": "https://github.com/Alluxio/alluxio/pull/12047#pullrequestreview-484437019", "createdAt": "2020-09-08T19:36:36Z", "commit": {"oid": "f6df32dd33040b42b16b3ee47984fd6d0da1cfd6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3637, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}