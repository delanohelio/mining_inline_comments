{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyODIzMzc5", "number": 11548, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNTozMToxMFrOEEi-GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzozOTowNlrOEEyHlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjAyNzEzOnYy", "diffSide": "RIGHT", "path": "stress/shell/src/main/java/alluxio/stress/cli/Benchmark.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNTozMToxMFrOGiPCfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNjoyNDowNVrOGiQBDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1MTE2NQ==", "bodyText": "Instead of passing in this via the parameters, can we just introduce a simple java class that just stores the json fields? Then, we can let the nameTransformer be a Function<ProfileClass, String> and the function implementation can deal with it how it chooses.", "url": "https://github.com/Alluxio/alluxio/pull/11548#discussion_r438551165", "createdAt": "2020-06-11T05:31:10Z", "author": {"login": "gpang"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/Benchmark.java", "diffHunk": "@@ -167,13 +167,14 @@ public String run(String[] args) throws Exception {\n    *\n    * @param startMs the start time\n    * @param endMs the end time\n+   * @param isTTFB check if method is time to first byte function\n    * @param nameTransformer function which transforms the type and method into a name. If the\n    *                        function returns null, then the method is skipped\n    * @return a map of names to statistics\n    */\n   @SuppressFBWarnings(value = \"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n   protected Map<String, MethodStatistics> processMethodProfiles(long startMs, long endMs,\n-      BiFunction<String, String, String> nameTransformer) throws IOException {\n+      boolean isTTFB, BiFunction<String, String, String> nameTransformer) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd2b298b66224c6999ef9b8144dc8eb9dd0c5ee0"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU2NzE4MQ==", "bodyText": "changed to Function<ProfileClass, String>.", "url": "https://github.com/Alluxio/alluxio/pull/11548#discussion_r438567181", "createdAt": "2020-06-11T06:24:05Z", "author": {"login": "HelloHorizon"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/Benchmark.java", "diffHunk": "@@ -167,13 +167,14 @@ public String run(String[] args) throws Exception {\n    *\n    * @param startMs the start time\n    * @param endMs the end time\n+   * @param isTTFB check if method is time to first byte function\n    * @param nameTransformer function which transforms the type and method into a name. If the\n    *                        function returns null, then the method is skipped\n    * @return a map of names to statistics\n    */\n   @SuppressFBWarnings(value = \"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n   protected Map<String, MethodStatistics> processMethodProfiles(long startMs, long endMs,\n-      BiFunction<String, String, String> nameTransformer) throws IOException {\n+      boolean isTTFB, BiFunction<String, String, String> nameTransformer) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1MTE2NQ=="}, "originalCommit": {"oid": "dd2b298b66224c6999ef9b8144dc8eb9dd0c5ee0"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDQzNTY1OnYy", "diffSide": "RIGHT", "path": "stress/shell/src/main/java/alluxio/stress/cli/Benchmark.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzoxNzo0MFrOGinD_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzozMToyNVrOGiniRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0NDc2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              protected static final class JavaAgentInput {\n          \n          \n            \n              protected static final class ProfileInput {", "url": "https://github.com/Alluxio/alluxio/pull/11548#discussion_r438944764", "createdAt": "2020-06-11T17:17:40Z", "author": {"login": "gpang"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/Benchmark.java", "diffHunk": "@@ -230,6 +233,46 @@ public String run(String[] args) throws Exception {\n     return nameStatistics;\n   }\n \n+  protected static final class JavaAgentInput {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26919f425b870e68df847f9e3b1b0e2140fef499"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1MjUxNw==", "bodyText": "changed.", "url": "https://github.com/Alluxio/alluxio/pull/11548#discussion_r438952517", "createdAt": "2020-06-11T17:31:25Z", "author": {"login": "HelloHorizon"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/Benchmark.java", "diffHunk": "@@ -230,6 +233,46 @@ public String run(String[] args) throws Exception {\n     return nameStatistics;\n   }\n \n+  protected static final class JavaAgentInput {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0NDc2NA=="}, "originalCommit": {"oid": "26919f425b870e68df847f9e3b1b0e2140fef499"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDQzNjExOnYy", "diffSide": "RIGHT", "path": "stress/shell/src/main/java/alluxio/stress/cli/Benchmark.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzoxNzo1MFrOGinERg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzoyNTo1NFrOGinWHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0NDgzOA==", "bodyText": "why is the setter needed?", "url": "https://github.com/Alluxio/alluxio/pull/11548#discussion_r438944838", "createdAt": "2020-06-11T17:17:50Z", "author": {"login": "gpang"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/Benchmark.java", "diffHunk": "@@ -230,6 +233,46 @@ public String run(String[] args) throws Exception {\n     return nameStatistics;\n   }\n \n+  protected static final class JavaAgentInput {\n+    private String mType;\n+    private String mMethod;\n+    private boolean mIsttfb;\n+\n+    JavaAgentInput(String type, String method, boolean isttfb) {\n+      mType = type;\n+      mMethod = method;\n+      mIsttfb = isttfb;\n+    }\n+\n+    /**\n+     * @return class type\n+     */\n+    public String getType() {\n+      return mType;\n+    }\n+\n+    /**\n+     * @return method name\n+     */\n+    public String getMethod() {\n+      return mMethod;\n+    }\n+\n+    /**\n+     * @return method name\n+     */\n+    public void setMethod(String method) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26919f425b870e68df847f9e3b1b0e2140fef499"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0OTQwNQ==", "bodyText": "it is used in StressMasterBench.", "url": "https://github.com/Alluxio/alluxio/pull/11548#discussion_r438949405", "createdAt": "2020-06-11T17:25:54Z", "author": {"login": "HelloHorizon"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/Benchmark.java", "diffHunk": "@@ -230,6 +233,46 @@ public String run(String[] args) throws Exception {\n     return nameStatistics;\n   }\n \n+  protected static final class JavaAgentInput {\n+    private String mType;\n+    private String mMethod;\n+    private boolean mIsttfb;\n+\n+    JavaAgentInput(String type, String method, boolean isttfb) {\n+      mType = type;\n+      mMethod = method;\n+      mIsttfb = isttfb;\n+    }\n+\n+    /**\n+     * @return class type\n+     */\n+    public String getType() {\n+      return mType;\n+    }\n+\n+    /**\n+     * @return method name\n+     */\n+    public String getMethod() {\n+      return mMethod;\n+    }\n+\n+    /**\n+     * @return method name\n+     */\n+    public void setMethod(String method) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0NDgzOA=="}, "originalCommit": {"oid": "26919f425b870e68df847f9e3b1b0e2140fef499"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDQ0NDU1OnYy", "diffSide": "RIGHT", "path": "stress/shell/src/main/java/alluxio/stress/cli/Benchmark.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzoyMDoxNFrOGinJag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzozMTo1MFrOGinjIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0NjE1NA==", "bodyText": "NIT: I think the term nameTransformer made more sense?", "url": "https://github.com/Alluxio/alluxio/pull/11548#discussion_r438946154", "createdAt": "2020-06-11T17:20:14Z", "author": {"login": "gpang"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/Benchmark.java", "diffHunk": "@@ -167,13 +167,13 @@ public String run(String[] args) throws Exception {\n    *\n    * @param startMs the start time\n    * @param endMs the end time\n-   * @param nameTransformer function which transforms the type and method into a name. If the\n+   * @param javaAgentTransformer function which transforms the type and method into a name. If the\n    *                        function returns null, then the method is skipped\n    * @return a map of names to statistics\n    */\n   @SuppressFBWarnings(value = \"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n   protected Map<String, MethodStatistics> processMethodProfiles(long startMs, long endMs,\n-      BiFunction<String, String, String> nameTransformer) throws IOException {\n+      Function<JavaAgentInput, String> javaAgentTransformer) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26919f425b870e68df847f9e3b1b0e2140fef499"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1MjczOA==", "bodyText": "changed.", "url": "https://github.com/Alluxio/alluxio/pull/11548#discussion_r438952738", "createdAt": "2020-06-11T17:31:50Z", "author": {"login": "HelloHorizon"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/Benchmark.java", "diffHunk": "@@ -167,13 +167,13 @@ public String run(String[] args) throws Exception {\n    *\n    * @param startMs the start time\n    * @param endMs the end time\n-   * @param nameTransformer function which transforms the type and method into a name. If the\n+   * @param javaAgentTransformer function which transforms the type and method into a name. If the\n    *                        function returns null, then the method is skipped\n    * @return a map of names to statistics\n    */\n   @SuppressFBWarnings(value = \"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n   protected Map<String, MethodStatistics> processMethodProfiles(long startMs, long endMs,\n-      BiFunction<String, String, String> nameTransformer) throws IOException {\n+      Function<JavaAgentInput, String> javaAgentTransformer) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0NjE1NA=="}, "originalCommit": {"oid": "26919f425b870e68df847f9e3b1b0e2140fef499"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDQ0Njc2OnYy", "diffSide": "RIGHT", "path": "stress/shell/src/main/java/alluxio/stress/cli/StressMasterBench.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzoyMDo1MFrOGinKug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzozMjoxM1rOGinj6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0NjQ5MA==", "bodyText": "If the class was renamed, then this would probably be profileInput", "url": "https://github.com/Alluxio/alluxio/pull/11548#discussion_r438946490", "createdAt": "2020-06-11T17:20:50Z", "author": {"login": "gpang"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/StressMasterBench.java", "diffHunk": "@@ -215,13 +215,15 @@ public synchronized void addAdditionalResult() throws IOException {\n         return;\n       }\n       Map<String, MethodStatistics> nameStatistics =\n-          processMethodProfiles(mResult.getRecordStartMs(), mResult.getEndMs(), (type, method) -> {\n-            if (type.contains(\"RPC\")) {\n-              final int classNameDivider = method.lastIndexOf(\".\");\n-              method = method.substring(classNameDivider + 1);\n-            }\n-            return type + \":\" + method;\n-          });\n+          processMethodProfiles(mResult.getRecordStartMs(), mResult.getEndMs(),\n+              javaAgentInput -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26919f425b870e68df847f9e3b1b0e2140fef499"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1MjkzOQ==", "bodyText": "changed.", "url": "https://github.com/Alluxio/alluxio/pull/11548#discussion_r438952939", "createdAt": "2020-06-11T17:32:13Z", "author": {"login": "HelloHorizon"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/StressMasterBench.java", "diffHunk": "@@ -215,13 +215,15 @@ public synchronized void addAdditionalResult() throws IOException {\n         return;\n       }\n       Map<String, MethodStatistics> nameStatistics =\n-          processMethodProfiles(mResult.getRecordStartMs(), mResult.getEndMs(), (type, method) -> {\n-            if (type.contains(\"RPC\")) {\n-              final int classNameDivider = method.lastIndexOf(\".\");\n-              method = method.substring(classNameDivider + 1);\n-            }\n-            return type + \":\" + method;\n-          });\n+          processMethodProfiles(mResult.getRecordStartMs(), mResult.getEndMs(),\n+              javaAgentInput -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0NjQ5MA=="}, "originalCommit": {"oid": "26919f425b870e68df847f9e3b1b0e2140fef499"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDQ0NzEwOnYy", "diffSide": "RIGHT", "path": "stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzoyMDo1NlrOGinK8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzozMjozM1rOGinkpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0NjU0NA==", "bodyText": "If the class was renamed, then this would probably be profileInput", "url": "https://github.com/Alluxio/alluxio/pull/11548#discussion_r438946544", "createdAt": "2020-06-11T17:20:56Z", "author": {"login": "gpang"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java", "diffHunk": "@@ -195,13 +195,9 @@ public ClientIOTaskResult runLocal() throws Exception {\n     Map<String, SummaryStatistics> summaryStatistics = new HashMap<>();\n \n     Map<String, MethodStatistics> nameStatistics =\n-        processMethodProfiles(startMs, endMs, (type, method) -> {\n-          if ((type.equals(\"AlluxioBlockInStream\") && method.equals(\"readChunk\")) || (\n-              type.equals(\"HDFSPacketReceiver\") && method.equals(\"doRead\")) || (\n-              type.equals(\"HDFSBlockReaderRemote\")\n-                  && method.equals(\"newBlockReader\")\n-                  || method.equals(\"readChunk\"))) {\n-            return method;\n+        processMethodProfiles(startMs, endMs, javaAgentInput -> {\n+          if (javaAgentInput.getIsttfb()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26919f425b870e68df847f9e3b1b0e2140fef499"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1MzEyNA==", "bodyText": "changed.", "url": "https://github.com/Alluxio/alluxio/pull/11548#discussion_r438953124", "createdAt": "2020-06-11T17:32:33Z", "author": {"login": "HelloHorizon"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java", "diffHunk": "@@ -195,13 +195,9 @@ public ClientIOTaskResult runLocal() throws Exception {\n     Map<String, SummaryStatistics> summaryStatistics = new HashMap<>();\n \n     Map<String, MethodStatistics> nameStatistics =\n-        processMethodProfiles(startMs, endMs, (type, method) -> {\n-          if ((type.equals(\"AlluxioBlockInStream\") && method.equals(\"readChunk\")) || (\n-              type.equals(\"HDFSPacketReceiver\") && method.equals(\"doRead\")) || (\n-              type.equals(\"HDFSBlockReaderRemote\")\n-                  && method.equals(\"newBlockReader\")\n-                  || method.equals(\"readChunk\"))) {\n-            return method;\n+        processMethodProfiles(startMs, endMs, javaAgentInput -> {\n+          if (javaAgentInput.getIsttfb()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0NjU0NA=="}, "originalCommit": {"oid": "26919f425b870e68df847f9e3b1b0e2140fef499"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDUwODE5OnYy", "diffSide": "RIGHT", "path": "stress/shell/src/main/java/alluxio/stress/cli/StressMasterBench.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzozODo1MVrOGinyGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODowMDoxOFrOGio0Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1NjU3MA==", "bodyText": "this should not set the input, but just have local variables, to construct the name with.", "url": "https://github.com/Alluxio/alluxio/pull/11548#discussion_r438956570", "createdAt": "2020-06-11T17:38:51Z", "author": {"login": "gpang"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/StressMasterBench.java", "diffHunk": "@@ -215,13 +215,15 @@ public synchronized void addAdditionalResult() throws IOException {\n         return;\n       }\n       Map<String, MethodStatistics> nameStatistics =\n-          processMethodProfiles(mResult.getRecordStartMs(), mResult.getEndMs(), (type, method) -> {\n-            if (type.contains(\"RPC\")) {\n-              final int classNameDivider = method.lastIndexOf(\".\");\n-              method = method.substring(classNameDivider + 1);\n-            }\n-            return type + \":\" + method;\n-          });\n+          processMethodProfiles(mResult.getRecordStartMs(), mResult.getEndMs(),\n+              javaAgentInput -> {\n+              if (javaAgentInput.getType().contains(\"RPC\")) {\n+                final int classNameDivider = javaAgentInput.getMethod().lastIndexOf(\".\");\n+                javaAgentInput.setMethod(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26919f425b870e68df847f9e3b1b0e2140fef499"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2ODgyOQ==", "bodyText": "Got u.", "url": "https://github.com/Alluxio/alluxio/pull/11548#discussion_r438968829", "createdAt": "2020-06-11T17:53:52Z", "author": {"login": "HelloHorizon"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/StressMasterBench.java", "diffHunk": "@@ -215,13 +215,15 @@ public synchronized void addAdditionalResult() throws IOException {\n         return;\n       }\n       Map<String, MethodStatistics> nameStatistics =\n-          processMethodProfiles(mResult.getRecordStartMs(), mResult.getEndMs(), (type, method) -> {\n-            if (type.contains(\"RPC\")) {\n-              final int classNameDivider = method.lastIndexOf(\".\");\n-              method = method.substring(classNameDivider + 1);\n-            }\n-            return type + \":\" + method;\n-          });\n+          processMethodProfiles(mResult.getRecordStartMs(), mResult.getEndMs(),\n+              javaAgentInput -> {\n+              if (javaAgentInput.getType().contains(\"RPC\")) {\n+                final int classNameDivider = javaAgentInput.getMethod().lastIndexOf(\".\");\n+                javaAgentInput.setMethod(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1NjU3MA=="}, "originalCommit": {"oid": "26919f425b870e68df847f9e3b1b0e2140fef499"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MzQ1MA==", "bodyText": "changed.", "url": "https://github.com/Alluxio/alluxio/pull/11548#discussion_r438973450", "createdAt": "2020-06-11T18:00:18Z", "author": {"login": "HelloHorizon"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/StressMasterBench.java", "diffHunk": "@@ -215,13 +215,15 @@ public synchronized void addAdditionalResult() throws IOException {\n         return;\n       }\n       Map<String, MethodStatistics> nameStatistics =\n-          processMethodProfiles(mResult.getRecordStartMs(), mResult.getEndMs(), (type, method) -> {\n-            if (type.contains(\"RPC\")) {\n-              final int classNameDivider = method.lastIndexOf(\".\");\n-              method = method.substring(classNameDivider + 1);\n-            }\n-            return type + \":\" + method;\n-          });\n+          processMethodProfiles(mResult.getRecordStartMs(), mResult.getEndMs(),\n+              javaAgentInput -> {\n+              if (javaAgentInput.getType().contains(\"RPC\")) {\n+                final int classNameDivider = javaAgentInput.getMethod().lastIndexOf(\".\");\n+                javaAgentInput.setMethod(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1NjU3MA=="}, "originalCommit": {"oid": "26919f425b870e68df847f9e3b1b0e2140fef499"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDUwOTAzOnYy", "diffSide": "RIGHT", "path": "stress/shell/src/main/java/alluxio/stress/cli/Benchmark.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzozOTowNlrOGinyoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODowMDoxNFrOGioz5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1NjcwNA==", "bodyText": "these all should be final.", "url": "https://github.com/Alluxio/alluxio/pull/11548#discussion_r438956704", "createdAt": "2020-06-11T17:39:06Z", "author": {"login": "gpang"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/Benchmark.java", "diffHunk": "@@ -230,6 +233,46 @@ public String run(String[] args) throws Exception {\n     return nameStatistics;\n   }\n \n+  protected static final class JavaAgentInput {\n+    private String mType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26919f425b870e68df847f9e3b1b0e2140fef499"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2MDQ2NA==", "bodyText": "do you want me to remove the setMethod() in ProfileInput?", "url": "https://github.com/Alluxio/alluxio/pull/11548#discussion_r438960464", "createdAt": "2020-06-11T17:44:07Z", "author": {"login": "HelloHorizon"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/Benchmark.java", "diffHunk": "@@ -230,6 +233,46 @@ public String run(String[] args) throws Exception {\n     return nameStatistics;\n   }\n \n+  protected static final class JavaAgentInput {\n+    private String mType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1NjcwNA=="}, "originalCommit": {"oid": "26919f425b870e68df847f9e3b1b0e2140fef499"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MzQxNQ==", "bodyText": "changed.", "url": "https://github.com/Alluxio/alluxio/pull/11548#discussion_r438973415", "createdAt": "2020-06-11T18:00:14Z", "author": {"login": "HelloHorizon"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/Benchmark.java", "diffHunk": "@@ -230,6 +233,46 @@ public String run(String[] args) throws Exception {\n     return nameStatistics;\n   }\n \n+  protected static final class JavaAgentInput {\n+    private String mType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1NjcwNA=="}, "originalCommit": {"oid": "26919f425b870e68df847f9e3b1b0e2140fef499"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1623, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}