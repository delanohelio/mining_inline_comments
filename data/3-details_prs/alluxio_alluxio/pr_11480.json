{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzOTM2NjU5", "number": 11480, "title": "Add an HDFS validation tool", "bodyText": "This tool validates all aspects for an HDFS path. It serves as a pre-mount check for both root mount and nested mount.", "createdAt": "2020-05-27T15:35:16Z", "url": "https://github.com/Alluxio/alluxio/pull/11480", "merged": true, "mergeCommit": {"oid": "38745c9c8578508f39a56e650607a182b75bac36"}, "closed": true, "closedAt": "2020-06-12T03:58:46Z", "author": {"login": "jiacheliu3"}, "timelineItems": {"totalCount": 71, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcihM9oAH2gAyNDIzOTM2NjU5Ojc4NzczMGE1ZjY4MGM0NGRhMDY2ZTZmNWY2ZGUzYTFjZjU1OGZkYzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqYPGbgH2gAyNDIzOTM2NjU5OjAxNWM1Yjg1M2RhYWIzOTAwNDg3YjZiMTE2ZmI3MWVkOTg3ZDcwMjg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "787730a5f680c44da066e6f5f6de3a1cf558fdc0", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/787730a5f680c44da066e6f5f6de3a1cf558fdc0", "committedDate": "2020-05-18T15:00:32Z", "message": "testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8aa0986241bcc1b4e8b259aab045398513d15c72", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/8aa0986241bcc1b4e8b259aab045398513d15c72", "committedDate": "2020-05-19T07:02:24Z", "message": "add driver command"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64f17091ac173f98a2d7c55c12146c6d8a662415", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/64f17091ac173f98a2d7c55c12146c6d8a662415", "committedDate": "2020-05-27T15:32:38Z", "message": "core logic, doesn't compile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53b595426200dfdc63002a8cf3ac9695f80f9450", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/53b595426200dfdc63002a8cf3ac9695f80f9450", "committedDate": "2020-05-28T08:04:49Z", "message": "refactor ValidationTask to use TaskResult"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "025995aaf9aab07b3d72cb5f014ec26970e9a015", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/025995aaf9aab07b3d72cb5f014ec26970e9a015", "committedDate": "2020-05-28T13:06:17Z", "message": "restructure hdfs val tasks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32fcb8b4c7e00e454ba35aaa3879d7898bf68a9d", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/32fcb8b4c7e00e454ba35aaa3879d7898bf68a9d", "committedDate": "2020-05-28T13:08:44Z", "message": "add dependency to ufs-hdfs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1749eaf2873328273c90a984475667d97d00c30", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/b1749eaf2873328273c90a984475667d97d00c30", "committedDate": "2020-06-01T11:01:10Z", "message": "compiles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d651568c62e65187fad953abc55046260af4fb4", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/2d651568c62e65187fad953abc55046260af4fb4", "committedDate": "2020-06-02T02:25:54Z", "message": "adding unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2da4e2867fa11e9a776733e09e76b04e5ec782f2", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/2da4e2867fa11e9a776733e09e76b04e5ec782f2", "committedDate": "2020-06-02T13:48:56Z", "message": "added some more unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcbbcffaac1fb2d2d5c3e9faa43022d9e1bd8561", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/dcbbcffaac1fb2d2d5c3e9faa43022d9e1bd8561", "committedDate": "2020-06-02T13:49:54Z", "message": "add unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cef53099ad91c584eeac77e07072362d6784aa75", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/cef53099ad91c584eeac77e07072362d6784aa75", "committedDate": "2020-06-04T14:17:40Z", "message": "Merge remote-tracking branch 'upstream/master' into hdfs-validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c4b1d4045bd9fef87c80fe69e6d9a5e41a8681f", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/6c4b1d4045bd9fef87c80fe69e6d9a5e41a8681f", "committedDate": "2020-06-04T15:01:21Z", "message": "rebase and use new TaskResult"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe04aba03fc54a82a83cf6fa19f0c8fac9bead4f", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/fe04aba03fc54a82a83cf6fa19f0c8fac9bead4f", "committedDate": "2020-06-04T15:46:50Z", "message": "cluster mode collect results"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c28018ea95f6933c45efc225a199233858725f46", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/c28018ea95f6933c45efc225a199233858725f46", "committedDate": "2020-06-05T16:03:48Z", "message": "use annotation to tag ufs tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c760c29d86a603574d96c5486b5ae1db3ccb640", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/2c760c29d86a603574d96c5486b5ae1db3ccb640", "committedDate": "2020-06-06T05:53:58Z", "message": "runUfsTests return TaskResult"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d93f2a1730c55b626344707fe9f6711fd76818c8", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/d93f2a1730c55b626344707fe9f6711fd76818c8", "committedDate": "2020-06-07T07:22:45Z", "message": "fixed on tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6a2818d4d71c313a6b01514506cb181eff35c78", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/f6a2818d4d71c313a6b01514506cb181eff35c78", "committedDate": "2020-06-07T07:52:54Z", "message": "move the tool to another path"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a98d3e8a712ba7ee41ab0cc00e3a07255e4dd862", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/a98d3e8a712ba7ee41ab0cc00e3a07255e4dd862", "committedDate": "2020-06-07T10:54:28Z", "message": "resolve checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f988a9410d08d25197d7e54b478398f5cc0bc4c7", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/f988a9410d08d25197d7e54b478398f5cc0bc4c7", "committedDate": "2020-06-07T13:48:06Z", "message": "ser/de from remote hosts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1137a7ca2d78354e16d760d4ce61eb00676813a3", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/1137a7ca2d78354e16d760d4ce61eb00676813a3", "committedDate": "2020-06-07T13:57:00Z", "message": "print command return"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8b619001845e62dc02e117ec9730f84dae2c6ac", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/e8b619001845e62dc02e117ec9730f84dae2c6ac", "committedDate": "2020-06-07T14:07:44Z", "message": "use a marker for json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2eb97e3ad18c8beae94baf481b18120f55e4aa7b", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/2eb97e3ad18c8beae94baf481b18120f55e4aa7b", "committedDate": "2020-06-07T14:12:34Z", "message": "debug printouts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cd097302eb6f76a7955a070573fd50441f304c2", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/3cd097302eb6f76a7955a070573fd50441f304c2", "committedDate": "2020-06-08T05:57:05Z", "message": "replace marker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "860c044d90de2bd3ca4734669b91fbf9054afa7f", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/860c044d90de2bd3ca4734669b91fbf9054afa7f", "committedDate": "2020-06-08T06:05:33Z", "message": "handle unknown host"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/142db925bc9d2ec39fc536ef2f0172a78127b836", "committedDate": "2020-06-08T06:26:22Z", "message": "fix unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjA4Njg4", "url": "https://github.com/Alluxio/alluxio/pull/11480#pullrequestreview-426208688", "createdAt": "2020-06-08T12:59:45Z", "commit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMjo1OTo0NVrOGgcfWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMjo1OTo0NVrOGgcfWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY3NDM5NA==", "bodyText": "Moved to a more generalized path", "url": "https://github.com/Alluxio/alluxio/pull/11480#discussion_r436674394", "createdAt": "2020-06-08T12:59:45Z", "author": {"login": "jiacheliu3"}, "path": "core/common/src/main/java/alluxio/cli/JsonSerializable.java", "diffHunk": "@@ -9,14 +9,16 @@\n  * See the NOTICE file distributed with this work for information regarding copyright ownership.\n  */\n \n-package alluxio.stress;\n+package alluxio.cli;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjEwMjg1", "url": "https://github.com/Alluxio/alluxio/pull/11480#pullrequestreview-426210285", "createdAt": "2020-06-08T13:01:37Z", "commit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowMTozOFrOGgcmig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowMTozOFrOGgcmig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY3NjIzNA==", "bodyText": "Is there a better way for this kind of wrapper methods?", "url": "https://github.com/Alluxio/alluxio/pull/11480#discussion_r436676234", "createdAt": "2020-06-08T13:01:38Z", "author": {"login": "jiacheliu3"}, "path": "core/common/src/main/java/alluxio/cli/JsonSerializable.java", "diffHunk": "@@ -51,6 +53,12 @@ default String toJson() throws JsonProcessingException {\n     return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(this);\n   }\n \n+  static <T extends JsonSerializable> String listToJson(List<T> list) throws JsonProcessingException {\n+    ObjectMapper objectMapper = new ObjectMapper();\n+    objectMapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);\n+    return objectMapper.writeValueAsString(list);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjEwODc3", "url": "https://github.com/Alluxio/alluxio/pull/11480#pullrequestreview-426210877", "createdAt": "2020-06-08T13:02:23Z", "commit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowMjoyM1rOGgco-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowMjoyM1rOGgco-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY3Njg1OQ==", "bodyText": "Setting these two to public and using this class to parse Alluxio impersonation properties", "url": "https://github.com/Alluxio/alluxio/pull/11480#discussion_r436676859", "createdAt": "2020-06-08T13:02:23Z", "author": {"login": "jiacheliu3"}, "path": "core/common/src/main/java/alluxio/security/authentication/ImpersonationAuthenticator.java", "diffHunk": "@@ -146,4 +148,12 @@ public void authenticate(String connectionUser, String impersonationUser)\n         connectionUser, impersonationUser, connectionUser, impersonationUser,\n         RuntimeConstants.ALLUXIO_SECURITY_DOCS_URL));\n   }\n+\n+  public Map<String, Set<String>> getImpersonationUsers() {\n+    return Collections.unmodifiableMap(mImpersonationUsers);\n+  }\n+\n+  public Map<String, Set<String>> getmImpersonationGroups() {\n+    return Collections.unmodifiableMap(mImpersonationGroups);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjExMjA3", "url": "https://github.com/Alluxio/alluxio/pull/11480#pullrequestreview-426211207", "createdAt": "2020-06-08T13:02:47Z", "commit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowMjo0N1rOGgcqVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowMjo0N1rOGgcqVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY3NzIwNg==", "bodyText": "Moved to a util class", "url": "https://github.com/Alluxio/alluxio/pull/11480#discussion_r436677206", "createdAt": "2020-06-08T13:02:47Z", "author": {"login": "jiacheliu3"}, "path": "integration/tools/src/main/java/alluxio/cli/ValidateHms.java", "diffHunk": "@@ -154,7 +154,7 @@ private boolean checkHmsUri(String uriAddress) throws Exception {\n       uri = new URI(uriAddress);\n     } catch (Throwable t) {\n       mResults.computeIfAbsent(State.FAILED, k -> new ArrayList<>()).add(\n-          new TaskResult(State.FAILED, \"HmsUrisSyntaxCheck\", getErrorInfo(t),\n+          new TaskResult(State.FAILED, \"HmsUrisSyntaxCheck\", ValidateUtils.getErrorInfo(t),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjExNjA4", "url": "https://github.com/Alluxio/alluxio/pull/11480#pullrequestreview-426211608", "createdAt": "2020-06-08T13:03:15Z", "commit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowMzoxNlrOGgcsDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowMzoxNlrOGgcsDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY3NzY0Ng==", "bodyText": "Using JsonSerializable to do serialization.", "url": "https://github.com/Alluxio/alluxio/pull/11480#discussion_r436677646", "createdAt": "2020-06-08T13:03:16Z", "author": {"login": "jiacheliu3"}, "path": "integration/tools/src/main/java/alluxio/cli/ValidateUtils.java", "diffHunk": "@@ -37,7 +41,7 @@ private ValidateUtils() {} // prevent instantiation\n   /**\n    * Represents the result of a given task.\n    */\n-  public static class TaskResult implements Serializable {\n+  public static class TaskResult implements JsonSerializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjEyMjg1", "url": "https://github.com/Alluxio/alluxio/pull/11480#pullrequestreview-426212285", "createdAt": "2020-06-08T13:04:06Z", "commit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowNDowNlrOGgcu9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowNDowNlrOGgcu9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY3ODM5MA==", "bodyText": "Updated this test to be able to validate a nested mount path", "url": "https://github.com/Alluxio/alluxio/pull/11480#discussion_r436678390", "createdAt": "2020-06-08T13:04:06Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/UnderFileSystemContractTest.java", "diffHunk": "@@ -52,14 +60,31 @@\n   @Parameter(names = {\"--help\"}, help = true)\n   private boolean mHelp = false;\n \n-  private InstancedConfiguration mConf\n-      = new InstancedConfiguration(ConfigurationUtils.defaults());\n-\n+  private InstancedConfiguration mConf;\n   private UnderFileSystem mUfs;\n \n-  private UnderFileSystemContractTest() {}\n+  /**\n+   * A constructor from default.\n+   * */\n+  public UnderFileSystemContractTest() {\n+    mConf = new InstancedConfiguration(ConfigurationUtils.defaults());\n+  }\n \n-  private void run() throws Exception {\n+  /**\n+   * Initiate the tests for a specific UFS path and UFS configs.\n+   *\n+   * @param path the UFS path\n+   * @param conf the UFs configurations\n+   * */\n+  public UnderFileSystemContractTest(String path, InstancedConfiguration conf) {\n+    mUfsPath = path;\n+    mConf = conf;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjEzNDE3", "url": "https://github.com/Alluxio/alluxio/pull/11480#pullrequestreview-426213417", "createdAt": "2020-06-08T13:05:31Z", "commit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowNTozMVrOGgcz-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowNTozMVrOGgcz-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY3OTY3NQ==", "bodyText": "Use a constructor now instead of static block, as the validation can be against a nested mount.", "url": "https://github.com/Alluxio/alluxio/pull/11480#discussion_r436679675", "createdAt": "2020-06-08T13:05:31Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/ValidateEnv.java", "diffHunk": "@@ -87,80 +93,108 @@\n   private static final List<ValidationTask> MASTER_TASKS = new ArrayList<>();\n   private static final List<ValidationTask> WORKER_TASKS = new ArrayList<>();\n \n-  private static final AlluxioConfiguration CONF;\n+  private final AlluxioConfiguration mConf;\n+  private final String mPath;\n \n-  static {\n-    CONF = InstancedConfiguration.defaults();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjE0MTU2", "url": "https://github.com/Alluxio/alluxio/pull/11480#pullrequestreview-426214156", "createdAt": "2020-06-08T13:06:28Z", "commit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowNjoyOVrOGgc3aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowNjoyOVrOGgc3aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY4MDU1Mg==", "bodyText": "After some tests I find JCommand to be better. Will refactor this to use JCommand.", "url": "https://github.com/Alluxio/alluxio/pull/11480#discussion_r436680552", "createdAt": "2020-06-08T13:06:29Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/ValidateHdfsMount.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package alluxio.cli;\n+\n+import alluxio.cli.validation.ApplicableUfsType;\n+import alluxio.conf.InstancedConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.Source;\n+import alluxio.shell.CommandReturn;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+import alluxio.util.ConfigurationUtils;\n+import alluxio.util.ShellUtils;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * A tool to validate an HDFS mount, before the paths is mounted to Alluxio.\n+ * */\n+public class ValidateHdfsMount {\n+  private static final Logger LOG = LoggerFactory.getLogger(ValidateHdfsMount.class);\n+  private static final String JSON_START_POS_MARKER = \"ValidateHdfsMount task results: \\n\";\n+\n+  private static final Option READONLY_OPTION =\n+          Option.builder()\n+                  .longOpt(\"readonly\")\n+                  .required(false)\n+                  .hasArg(false)\n+                  .desc(\"mount point is readonly in Alluxio\")\n+                  .build();\n+  private static final Option SHARED_OPTION =\n+          Option.builder()\n+                  .longOpt(\"shared\")\n+                  .required(false)\n+                  .hasArg(false)\n+                  .desc(\"mount point is shared\")\n+                  .build();\n+  private static final Option OPTION_OPTION =\n+          Option.builder()\n+                  .longOpt(\"option\")\n+                  .required(false)\n+                  .hasArg(true)\n+                  .numberOfArgs(2)\n+                  .argName(\"key=value\")\n+                  .valueSeparator('=')\n+                  .desc(\"options associated with this mount point\")\n+                  .build();\n+  private static final Option LOCAL_OPTION =\n+          Option.builder().required(false).longOpt(\"local\").hasArg(false)\n+                  .desc(\"running only on localhost\").build();\n+  private static final Options OPTIONS =\n+          new Options().addOption(READONLY_OPTION).addOption(SHARED_OPTION)\n+                  .addOption(OPTION_OPTION).addOption(LOCAL_OPTION);\n+\n+  /**\n+   * Invokes {@link UnderFileSystemContractTest} to validate UFS operations.\n+   *\n+   * @param path the UFS path\n+   * @param conf the UFS conf\n+   * @return a {@link alluxio.cli.ValidateUtils.TaskResult} containing the validation result\n+   *        of the UFS operations\n+   * */\n+  public static ValidateUtils.TaskResult runUfsTests(String path, InstancedConfiguration conf) {\n+    try {\n+      UnderFileSystemContractTest test = new UnderFileSystemContractTest(path, conf);\n+      return test.runValidationTask();\n+    } catch (IOException e) {\n+      return new ValidateUtils.TaskResult(ValidateUtils.State.FAILED, \"ufsTests\",\n+              ValidateUtils.getErrorInfo(e), \"\");\n+    }\n+  }\n+\n+  /**\n+   * The entrance.\n+   *\n+   * @param args command line arguments\n+   * */\n+  public static void main(String[] args) throws Exception {\n+    // TODO(jiacheng): use jccommand?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjE0NjQ5", "url": "https://github.com/Alluxio/alluxio/pull/11480#pullrequestreview-426214649", "createdAt": "2020-06-08T13:07:04Z", "commit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowNzowNFrOGgc5lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowNzowNFrOGgc5lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY4MTExMQ==", "bodyText": "This will be resolved", "url": "https://github.com/Alluxio/alluxio/pull/11480#discussion_r436681111", "createdAt": "2020-06-08T13:07:04Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/validation/HadoopConfigurationFileParser.java", "diffHunk": "@@ -87,4 +87,32 @@ public HadoopConfigurationFileParser() {}\n     }\n     return ret;\n   }\n+\n+  // TODO(jiacheng): keep only one", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjE1OTc4", "url": "https://github.com/Alluxio/alluxio/pull/11480#pullrequestreview-426215978", "createdAt": "2020-06-08T13:08:44Z", "commit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowODo0NFrOGgc_rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzowODo0NFrOGgc_rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY4MjY2OA==", "bodyText": "This is the previous alluxio.cli.validation.HdfsValidationTask where the hdfs configs defined in Alluxio property are compared against the hadoop config defined in hadoop env variables.", "url": "https://github.com/Alluxio/alluxio/pull/11480#discussion_r436682668", "createdAt": "2020-06-08T13:08:44Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/validation/HdfsConfParityValidationTask.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package alluxio.cli.validation;\n+\n+import alluxio.cli.ValidateUtils;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.util.io.PathUtils;\n+\n+import org.apache.commons.cli.Option;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Compares HDFS configuration in Alluxio and in HDFS environment variables.\n+ * */\n+@ApplicableUfsType(ApplicableUfsType.Type.HDFS)\n+public class HdfsConfParityValidationTask extends HdfsConfValidationTask {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjE4MTkz", "url": "https://github.com/Alluxio/alluxio/pull/11480#pullrequestreview-426218193", "createdAt": "2020-06-08T13:11:26Z", "commit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoxMToyNlrOGgdJsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoxMToyNlrOGgdJsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY4NTIzNA==", "bodyText": "Do we want to assume the current running user needs impersonation? I don't think so.", "url": "https://github.com/Alluxio/alluxio/pull/11480#discussion_r436685234", "createdAt": "2020-06-08T13:11:26Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/validation/HdfsImpersonationValidationTask.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package alluxio.cli.validation;\n+\n+import alluxio.cli.ValidateUtils;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.security.authentication.ImpersonationAuthenticator;\n+import alluxio.util.network.NetworkAddressUtils;\n+\n+import com.google.common.collect.Sets;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Validates the impersonation configurations in alluxio and hdfs.\n+ * */\n+@ApplicableUfsType(ApplicableUfsType.Type.HDFS)\n+public class HdfsImpersonationValidationTask extends HdfsConfValidationTask {\n+  private final Map<String, Set<String>> mImpersonationUsers;\n+  private final Map<String, Set<String>> mImpersonationGroups;\n+  private final Mode mMode;\n+\n+  /**\n+   * Creates a new instance of {@link HdfsImpersonationValidationTask}\n+   * for validating impersonation configuration.\n+   *\n+   * @param path the UFS path\n+   * @param conf the UFS configuration\n+   * @param mode the mode for validation\n+   */\n+  public HdfsImpersonationValidationTask(String path, AlluxioConfiguration conf, Mode mode) {\n+    super(path, conf);\n+    mMode = mode;\n+    ImpersonationAuthenticator ia = new ImpersonationAuthenticator(mConf);\n+    mImpersonationUsers = ia.getImpersonationUsers();\n+    mImpersonationGroups = ia.getmImpersonationGroups();\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return String.format(\"ValidateImpersonationConf%s\", mMode);\n+  }\n+\n+  private boolean shouldSkip() {\n+    // If no impersonation setting in Alluxio, skip the check\n+    if (mImpersonationUsers.entrySet().size() == 0\n+            && mImpersonationGroups.size() == 0) {\n+      mMsg.append(\"No impersonation setting found in Alluxio. \"\n+              + \"Skip the impersonation validation step.\\n\");\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  private ValidateUtils.TaskResult validateImpersonationUsers() {\n+    String taskName = \"Validate alluxio impersonation users\";\n+    ValidateUtils.State state = ValidateUtils.State.OK;\n+    StringBuilder msg = new StringBuilder();\n+    StringBuilder advice = new StringBuilder();\n+    for (Map.Entry<String, Set<String>> entry : mImpersonationUsers.entrySet()) {\n+      String userName = entry.getKey();\n+      Set<String> impUsers = entry.getValue();\n+      PropertyKey alluxioKey =\n+              PropertyKey.Template.MASTER_IMPERSONATION_USERS_OPTION.format(userName);\n+      String hdfsKey = String.format(\"hadoop.proxyuser.%s.users\", userName);\n+      msg.append(String.format(\"User %s has impersonation configured in Alluxio property %s=%s. %n\",\n+              userName, alluxioKey.toString(), mConf.get(alluxioKey)));\n+\n+      // The impersonation user is not configured in core-site.xml\n+      if (!mCoreConf.containsKey(hdfsKey)) {\n+        state = ValidateUtils.State.FAILED;\n+        msg.append(String.format(\"But %s is not configured in hadoop proxyuser.%n\",\n+                hdfsKey));\n+        advice.append(String.format(\"Please configure %s to match %s.%n\",\n+                hdfsKey, alluxioKey.toString()));\n+        continue;\n+      }\n+      String hdfsImpUsers = mCoreConf.get(hdfsKey);\n+\n+      // Consider wildcard separately\n+      if (impUsers.contains(ImpersonationAuthenticator.WILDCARD)) {\n+        if (hdfsImpUsers.equals(ImpersonationAuthenticator.WILDCARD)) {\n+          // If impersonation is enabled for all users in Alluxio and HDFS, succeed\n+          msg.append(String.format(\"User %s can impersonate any user in Alluxio and HDFS.%n\",\n+                  userName));\n+        } else {\n+          state = ValidateUtils.State.FAILED;\n+          msg.append(String.format(\"User %s can impersonate any user in \"\n+                  + \"Alluxio but only %s in HDFS.%n\", userName, hdfsImpUsers));\n+          advice.append(String.format(\"Please set %s to %s. \",\n+                  hdfsKey, ImpersonationAuthenticator.WILDCARD));\n+        }\n+        continue;\n+      } else if (hdfsImpUsers.equals(ImpersonationAuthenticator.WILDCARD)) {\n+        msg.append(String.format(\"User %s can impersonate any user in HDFS.%n\", userName));\n+        continue;\n+      }\n+\n+      // Not using wildcard, compare the exact usernames\n+      Set<String> nameSet = new HashSet<>(Arrays.asList(hdfsImpUsers.split(\",\")));\n+      System.out.format(\"Impersonable users: %s%n\", nameSet);\n+      // The proxyuser can be enabled to impersonate more users than defined in Alluxio\n+      Set<String> missedUsers = Sets.difference(impUsers, nameSet); // in alluxio not in hdfs\n+      System.out.format(\"Found missed users %s%n\", missedUsers);\n+      if (missedUsers.size() > 0) {\n+        state = ValidateUtils.State.FAILED;\n+        msg.append(String.format(\"User %s can impersonate as users %s in Alluxio but \"\n+                + \"not in HDFS.%n\", userName, missedUsers));\n+        advice.append(String.format(\"Please add the missing users to %s. \", hdfsKey));\n+        continue;\n+      }\n+\n+      // All checks passed\n+      msg.append(\"All impersonable users in Alluxio are found in HDFS. \\n\");\n+    }\n+\n+    return new ValidateUtils.TaskResult(state, taskName, msg.toString(), advice.toString());\n+  }\n+\n+  // TODO(jiacheng): refactor with users logic\n+  private ValidateUtils.TaskResult validateImpersonationGroups() {\n+    String taskName = \"Validate alluxio impersonation groups\";\n+    ValidateUtils.State state = ValidateUtils.State.OK;\n+    StringBuilder msg = new StringBuilder();\n+    StringBuilder advice = new StringBuilder();\n+    for (Map.Entry<String, Set<String>> entry : mImpersonationGroups.entrySet()) {\n+      String userName = entry.getKey();\n+      Set<String> impGroups = entry.getValue();\n+      PropertyKey alluxioKey = PropertyKey.Template\n+              .MASTER_IMPERSONATION_GROUPS_OPTION.format(userName);\n+      String hdfsKey = String.format(\"hadoop.proxyuser.%s.groups\", userName);\n+      msg.append(String.format(\"User %s has impersonation configured in Alluxio property %s=%s. \",\n+              userName, alluxioKey.toString(), mConf.get(alluxioKey)));\n+\n+      // The impersonation group is not configured in core-site.xml\n+      if (!mCoreConf.containsKey(hdfsKey)) {\n+        state = ValidateUtils.State.FAILED;\n+        msg.append(String.format(\"But %s is not configured in hadoop proxyuser. \", hdfsKey));\n+        advice.append(String.format(\"Please configure %s to match %s\",\n+                hdfsKey, alluxioKey.toString()));\n+        continue;\n+      }\n+      String hdfsImpGroups = mCoreConf.get(hdfsKey);\n+\n+      // Consider wildcard separately\n+      if (impGroups.contains(ImpersonationAuthenticator.WILDCARD)) {\n+        if (hdfsImpGroups.equals(ImpersonationAuthenticator.WILDCARD)) {\n+          // If impersonation is enabled for all users in Alluxio and HDFS, succeed\n+          msg.append(String.format(\"User %s can impersonate any group in \"\n+                  + \"Alluxio and HDFS. \", userName));\n+        } else {\n+          msg.append(String.format(\"User %s can impersonate any group \"\n+                  + \"in Alluxio but not in HDFS. \", userName));\n+          advice.append(String.format(\"Please set %s to %s. \",\n+                  hdfsKey, ImpersonationAuthenticator.WILDCARD));\n+        }\n+        continue;\n+      } else if (hdfsImpGroups.equals(ImpersonationAuthenticator.WILDCARD)) {\n+        msg.append(String.format(\"User %s can impersonate any group in HDFS.%n\", userName));\n+        continue;\n+      }\n+\n+      // The impersonation group has different configuration in core-site.xml\n+      Set<String> nameSet = new HashSet<>(Arrays.asList(hdfsImpGroups.split(\",\")));\n+      System.out.format(\"Impersonable groups: %s%n\", nameSet);\n+      // The proxyuser can be enabled to impersonate more groups than defined in Alluxio\n+      Set<String> missedGroups = Sets.difference(impGroups, nameSet); // in alluxio not in hdfs\n+      System.out.format(\"Found missed groups %s%n\", missedGroups);\n+      if (missedGroups.size() > 0) {\n+        state = ValidateUtils.State.FAILED;\n+        msg.append(String.format(\"User %s can impersonate as groups %s \"\n+                + \"in Alluxio but not in HDFS.\", userName, missedGroups));\n+        advice.append(String.format(\"Please add the missing groups to %s. \", hdfsKey));\n+        continue;\n+      }\n+\n+      // All checks passed\n+      msg.append(String.format(\"Found matching configuration in %s and %s. \",\n+              alluxioKey.toString(), hdfsKey));\n+    }\n+    return new ValidateUtils.TaskResult(state, taskName, msg.toString(), advice.toString());\n+  }\n+\n+  // At least the current host should be in hadoop.proxy.<username>.hosts\n+  private ValidateUtils.TaskResult validateImpersonationHosts() {\n+    String taskName = \"Validate proxyuser hosts\";\n+    ValidateUtils.State state = ValidateUtils.State.OK;\n+    StringBuilder msg = new StringBuilder();\n+    StringBuilder advice = new StringBuilder();\n+\n+    // current host\n+    String localhost = NetworkAddressUtils.getLocalHostName(1000);\n+\n+    // All the possible users Alluxio needs\n+    Set<String> allUsers = Sets.union(mImpersonationUsers.keySet(), mImpersonationGroups.keySet());\n+    for (String userName : allUsers) {\n+      msg.append(String.format(\"User %s is configured to allow impersonation is Alluxio. \",\n+              userName));\n+\n+      String hdfsKey = String.format(\"hadoop.proxyuser.%s.hosts\", userName);\n+      if (!mCoreConf.containsKey(hdfsKey)) {\n+        state = ValidateUtils.State.FAILED;\n+        msg.append(\"But the user is not allowed to use impersonation on this host.\");\n+        advice.append(String.format(\"Please configure %s to contain %s. \", hdfsKey, localhost));\n+        continue;\n+      }\n+\n+      String proxyHosts = mCoreConf.get(hdfsKey);\n+      // Consider wildcard separately\n+      if (proxyHosts.equals(ImpersonationAuthenticator.WILDCARD)) {\n+        msg.append(String.format(\"The user is enabled for impersonation from all hosts. \"));\n+        continue;\n+      }\n+      // If wildcard is not used and the localhost is not in the permitted list\n+      if (!proxyHosts.contains(localhost)) {\n+        state = ValidateUtils.State.FAILED;\n+        msg.append(String.format(\"But %s does not contain host %s. \", hdfsKey, localhost));\n+        advice.append(String.format(\"Please enable host %s in %s. \", localhost, hdfsKey));\n+        continue;\n+      }\n+\n+      // Passed all checks\n+      msg.append(String.format(\"Host %s is enabled to use impersonation in HDFS. \", localhost));\n+    }\n+    return new ValidateUtils.TaskResult(state, taskName, msg.toString(), advice.toString());\n+  }\n+\n+  @Override\n+  public ValidateUtils.TaskResult validate(Map<String, String> optionMap) {\n+    if (shouldSkip()) {\n+      return new ValidateUtils.TaskResult(ValidateUtils.State.SKIPPED, getName(),\n+              mMsg.toString(), mAdvice.toString());\n+    }\n+\n+    ValidateUtils.TaskResult loadConfig = loadHdfsConfig();\n+    if (loadConfig.getState() != ValidateUtils.State.OK) {\n+      return loadConfig;\n+    }\n+\n+    // TODO(jiacheng): do we want to check the current user even if", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "originalPosition": 242}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjE5NTM5", "url": "https://github.com/Alluxio/alluxio/pull/11480#pullrequestreview-426219539", "createdAt": "2020-06-08T13:13:02Z", "commit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoxMzowMlrOGgdPeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoxMzowMlrOGgdPeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY4NjcxMw==", "bodyText": "One limitation of the current check is, we can only know which users need impersonation based on the Alluxio properties. If the user does not define alluxio.security.impersonation.bob.users field, there's no way to know if bob needs to be validated.", "url": "https://github.com/Alluxio/alluxio/pull/11480#discussion_r436686713", "createdAt": "2020-06-08T13:13:02Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/validation/HdfsImpersonationValidationTask.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package alluxio.cli.validation;\n+\n+import alluxio.cli.ValidateUtils;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.security.authentication.ImpersonationAuthenticator;\n+import alluxio.util.network.NetworkAddressUtils;\n+\n+import com.google.common.collect.Sets;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Validates the impersonation configurations in alluxio and hdfs.\n+ * */\n+@ApplicableUfsType(ApplicableUfsType.Type.HDFS)\n+public class HdfsImpersonationValidationTask extends HdfsConfValidationTask {\n+  private final Map<String, Set<String>> mImpersonationUsers;\n+  private final Map<String, Set<String>> mImpersonationGroups;\n+  private final Mode mMode;\n+\n+  /**\n+   * Creates a new instance of {@link HdfsImpersonationValidationTask}\n+   * for validating impersonation configuration.\n+   *\n+   * @param path the UFS path\n+   * @param conf the UFS configuration\n+   * @param mode the mode for validation\n+   */\n+  public HdfsImpersonationValidationTask(String path, AlluxioConfiguration conf, Mode mode) {\n+    super(path, conf);\n+    mMode = mode;\n+    ImpersonationAuthenticator ia = new ImpersonationAuthenticator(mConf);\n+    mImpersonationUsers = ia.getImpersonationUsers();\n+    mImpersonationGroups = ia.getmImpersonationGroups();\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return String.format(\"ValidateImpersonationConf%s\", mMode);\n+  }\n+\n+  private boolean shouldSkip() {\n+    // If no impersonation setting in Alluxio, skip the check\n+    if (mImpersonationUsers.entrySet().size() == 0\n+            && mImpersonationGroups.size() == 0) {\n+      mMsg.append(\"No impersonation setting found in Alluxio. \"\n+              + \"Skip the impersonation validation step.\\n\");\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  private ValidateUtils.TaskResult validateImpersonationUsers() {\n+    String taskName = \"Validate alluxio impersonation users\";\n+    ValidateUtils.State state = ValidateUtils.State.OK;\n+    StringBuilder msg = new StringBuilder();\n+    StringBuilder advice = new StringBuilder();\n+    for (Map.Entry<String, Set<String>> entry : mImpersonationUsers.entrySet()) {\n+      String userName = entry.getKey();\n+      Set<String> impUsers = entry.getValue();\n+      PropertyKey alluxioKey =\n+              PropertyKey.Template.MASTER_IMPERSONATION_USERS_OPTION.format(userName);\n+      String hdfsKey = String.format(\"hadoop.proxyuser.%s.users\", userName);\n+      msg.append(String.format(\"User %s has impersonation configured in Alluxio property %s=%s. %n\",\n+              userName, alluxioKey.toString(), mConf.get(alluxioKey)));\n+\n+      // The impersonation user is not configured in core-site.xml\n+      if (!mCoreConf.containsKey(hdfsKey)) {\n+        state = ValidateUtils.State.FAILED;\n+        msg.append(String.format(\"But %s is not configured in hadoop proxyuser.%n\",\n+                hdfsKey));\n+        advice.append(String.format(\"Please configure %s to match %s.%n\",\n+                hdfsKey, alluxioKey.toString()));\n+        continue;\n+      }\n+      String hdfsImpUsers = mCoreConf.get(hdfsKey);\n+\n+      // Consider wildcard separately\n+      if (impUsers.contains(ImpersonationAuthenticator.WILDCARD)) {\n+        if (hdfsImpUsers.equals(ImpersonationAuthenticator.WILDCARD)) {\n+          // If impersonation is enabled for all users in Alluxio and HDFS, succeed\n+          msg.append(String.format(\"User %s can impersonate any user in Alluxio and HDFS.%n\",\n+                  userName));\n+        } else {\n+          state = ValidateUtils.State.FAILED;\n+          msg.append(String.format(\"User %s can impersonate any user in \"\n+                  + \"Alluxio but only %s in HDFS.%n\", userName, hdfsImpUsers));\n+          advice.append(String.format(\"Please set %s to %s. \",\n+                  hdfsKey, ImpersonationAuthenticator.WILDCARD));\n+        }\n+        continue;\n+      } else if (hdfsImpUsers.equals(ImpersonationAuthenticator.WILDCARD)) {\n+        msg.append(String.format(\"User %s can impersonate any user in HDFS.%n\", userName));\n+        continue;\n+      }\n+\n+      // Not using wildcard, compare the exact usernames\n+      Set<String> nameSet = new HashSet<>(Arrays.asList(hdfsImpUsers.split(\",\")));\n+      System.out.format(\"Impersonable users: %s%n\", nameSet);\n+      // The proxyuser can be enabled to impersonate more users than defined in Alluxio\n+      Set<String> missedUsers = Sets.difference(impUsers, nameSet); // in alluxio not in hdfs\n+      System.out.format(\"Found missed users %s%n\", missedUsers);\n+      if (missedUsers.size() > 0) {\n+        state = ValidateUtils.State.FAILED;\n+        msg.append(String.format(\"User %s can impersonate as users %s in Alluxio but \"\n+                + \"not in HDFS.%n\", userName, missedUsers));\n+        advice.append(String.format(\"Please add the missing users to %s. \", hdfsKey));\n+        continue;\n+      }\n+\n+      // All checks passed\n+      msg.append(\"All impersonable users in Alluxio are found in HDFS. \\n\");\n+    }\n+\n+    return new ValidateUtils.TaskResult(state, taskName, msg.toString(), advice.toString());\n+  }\n+\n+  // TODO(jiacheng): refactor with users logic\n+  private ValidateUtils.TaskResult validateImpersonationGroups() {\n+    String taskName = \"Validate alluxio impersonation groups\";\n+    ValidateUtils.State state = ValidateUtils.State.OK;\n+    StringBuilder msg = new StringBuilder();\n+    StringBuilder advice = new StringBuilder();\n+    for (Map.Entry<String, Set<String>> entry : mImpersonationGroups.entrySet()) {\n+      String userName = entry.getKey();\n+      Set<String> impGroups = entry.getValue();\n+      PropertyKey alluxioKey = PropertyKey.Template\n+              .MASTER_IMPERSONATION_GROUPS_OPTION.format(userName);\n+      String hdfsKey = String.format(\"hadoop.proxyuser.%s.groups\", userName);\n+      msg.append(String.format(\"User %s has impersonation configured in Alluxio property %s=%s. \",\n+              userName, alluxioKey.toString(), mConf.get(alluxioKey)));\n+\n+      // The impersonation group is not configured in core-site.xml\n+      if (!mCoreConf.containsKey(hdfsKey)) {\n+        state = ValidateUtils.State.FAILED;\n+        msg.append(String.format(\"But %s is not configured in hadoop proxyuser. \", hdfsKey));\n+        advice.append(String.format(\"Please configure %s to match %s\",\n+                hdfsKey, alluxioKey.toString()));\n+        continue;\n+      }\n+      String hdfsImpGroups = mCoreConf.get(hdfsKey);\n+\n+      // Consider wildcard separately\n+      if (impGroups.contains(ImpersonationAuthenticator.WILDCARD)) {\n+        if (hdfsImpGroups.equals(ImpersonationAuthenticator.WILDCARD)) {\n+          // If impersonation is enabled for all users in Alluxio and HDFS, succeed\n+          msg.append(String.format(\"User %s can impersonate any group in \"\n+                  + \"Alluxio and HDFS. \", userName));\n+        } else {\n+          msg.append(String.format(\"User %s can impersonate any group \"\n+                  + \"in Alluxio but not in HDFS. \", userName));\n+          advice.append(String.format(\"Please set %s to %s. \",\n+                  hdfsKey, ImpersonationAuthenticator.WILDCARD));\n+        }\n+        continue;\n+      } else if (hdfsImpGroups.equals(ImpersonationAuthenticator.WILDCARD)) {\n+        msg.append(String.format(\"User %s can impersonate any group in HDFS.%n\", userName));\n+        continue;\n+      }\n+\n+      // The impersonation group has different configuration in core-site.xml\n+      Set<String> nameSet = new HashSet<>(Arrays.asList(hdfsImpGroups.split(\",\")));\n+      System.out.format(\"Impersonable groups: %s%n\", nameSet);\n+      // The proxyuser can be enabled to impersonate more groups than defined in Alluxio\n+      Set<String> missedGroups = Sets.difference(impGroups, nameSet); // in alluxio not in hdfs\n+      System.out.format(\"Found missed groups %s%n\", missedGroups);\n+      if (missedGroups.size() > 0) {\n+        state = ValidateUtils.State.FAILED;\n+        msg.append(String.format(\"User %s can impersonate as groups %s \"\n+                + \"in Alluxio but not in HDFS.\", userName, missedGroups));\n+        advice.append(String.format(\"Please add the missing groups to %s. \", hdfsKey));\n+        continue;\n+      }\n+\n+      // All checks passed\n+      msg.append(String.format(\"Found matching configuration in %s and %s. \",\n+              alluxioKey.toString(), hdfsKey));\n+    }\n+    return new ValidateUtils.TaskResult(state, taskName, msg.toString(), advice.toString());\n+  }\n+\n+  // At least the current host should be in hadoop.proxy.<username>.hosts\n+  private ValidateUtils.TaskResult validateImpersonationHosts() {\n+    String taskName = \"Validate proxyuser hosts\";\n+    ValidateUtils.State state = ValidateUtils.State.OK;\n+    StringBuilder msg = new StringBuilder();\n+    StringBuilder advice = new StringBuilder();\n+\n+    // current host\n+    String localhost = NetworkAddressUtils.getLocalHostName(1000);\n+\n+    // All the possible users Alluxio needs\n+    Set<String> allUsers = Sets.union(mImpersonationUsers.keySet(), mImpersonationGroups.keySet());\n+    for (String userName : allUsers) {\n+      msg.append(String.format(\"User %s is configured to allow impersonation is Alluxio. \",\n+              userName));\n+\n+      String hdfsKey = String.format(\"hadoop.proxyuser.%s.hosts\", userName);\n+      if (!mCoreConf.containsKey(hdfsKey)) {\n+        state = ValidateUtils.State.FAILED;\n+        msg.append(\"But the user is not allowed to use impersonation on this host.\");\n+        advice.append(String.format(\"Please configure %s to contain %s. \", hdfsKey, localhost));\n+        continue;\n+      }\n+\n+      String proxyHosts = mCoreConf.get(hdfsKey);\n+      // Consider wildcard separately\n+      if (proxyHosts.equals(ImpersonationAuthenticator.WILDCARD)) {\n+        msg.append(String.format(\"The user is enabled for impersonation from all hosts. \"));\n+        continue;\n+      }\n+      // If wildcard is not used and the localhost is not in the permitted list\n+      if (!proxyHosts.contains(localhost)) {\n+        state = ValidateUtils.State.FAILED;\n+        msg.append(String.format(\"But %s does not contain host %s. \", hdfsKey, localhost));\n+        advice.append(String.format(\"Please enable host %s in %s. \", localhost, hdfsKey));\n+        continue;\n+      }\n+\n+      // Passed all checks\n+      msg.append(String.format(\"Host %s is enabled to use impersonation in HDFS. \", localhost));\n+    }\n+    return new ValidateUtils.TaskResult(state, taskName, msg.toString(), advice.toString());\n+  }\n+\n+  @Override\n+  public ValidateUtils.TaskResult validate(Map<String, String> optionMap) {\n+    if (shouldSkip()) {\n+      return new ValidateUtils.TaskResult(ValidateUtils.State.SKIPPED, getName(),\n+              mMsg.toString(), mAdvice.toString());\n+    }\n+\n+    ValidateUtils.TaskResult loadConfig = loadHdfsConfig();\n+    if (loadConfig.getState() != ValidateUtils.State.OK) {\n+      return loadConfig;\n+    }\n+\n+    // TODO(jiacheng): do we want to check the current user even if\n+    //  there's no impersonation setting?\n+    switch (mMode) {\n+      case USERS:\n+        return validateImpersonationUsers();\n+      case GROUPS:\n+        return validateImpersonationGroups();\n+      case HOSTS:\n+        return validateImpersonationHosts();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "originalPosition": 250}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjIyMjM5", "url": "https://github.com/Alluxio/alluxio/pull/11480#pullrequestreview-426222239", "createdAt": "2020-06-08T13:16:20Z", "commit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoxNjoyMVrOGgdbYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoxNjoyMVrOGgdbYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY4OTc2Mw==", "bodyText": "Need to double check if the same format holds true in CDH.", "url": "https://github.com/Alluxio/alluxio/pull/11480#discussion_r436689763", "createdAt": "2020-06-08T13:16:21Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/validation/HdfsVersionValidationTask.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package alluxio.cli.validation;\n+\n+import alluxio.cli.ValidateUtils;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.util.ShellUtils;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Validates if the HDFS version works with the UFS version specified in\n+ * alluxio configuration.\n+ * */\n+@ApplicableUfsType(ApplicableUfsType.Type.HDFS)\n+public class HdfsVersionValidationTask extends AbstractValidationTask {\n+  private final AlluxioConfiguration mConf;\n+\n+  /**\n+   * Creates a new instance of {@link HdfsVersionValidationTask}\n+   * for validating HDFS version.\n+   * @param conf configuration\n+   */\n+  public HdfsVersionValidationTask(AlluxioConfiguration conf) {\n+    mConf = conf;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return \"ValidateHdfsVersion\";\n+  }\n+\n+  protected String parseVersion(String output) {\n+    // An example output from \"hadoop version\" command:\n+    //    Hadoop 2.7.2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjIzNjY2", "url": "https://github.com/Alluxio/alluxio/pull/11480#pullrequestreview-426223666", "createdAt": "2020-06-08T13:18:03Z", "commit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoxODowNFrOGgdhgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoxODowNFrOGgdhgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5MTMzMQ==", "bodyText": "Hadoop native lib may be defined here.", "url": "https://github.com/Alluxio/alluxio/pull/11480#discussion_r436691331", "createdAt": "2020-06-08T13:18:04Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/validation/NativeLibValidationTask.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package alluxio.cli.validation;\n+\n+import alluxio.cli.ValidateUtils;\n+import alluxio.conf.AlluxioConfiguration;\n+\n+import java.io.File;\n+import java.util.Map;\n+import java.util.StringTokenizer;\n+\n+/**\n+ * Validates the Java native libs defined in the system property.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjI1MDQ5", "url": "https://github.com/Alluxio/alluxio/pull/11480#pullrequestreview-426225049", "createdAt": "2020-06-08T13:19:48Z", "commit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoxOTo0OFrOGgdnwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoxOTo0OFrOGgdnwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5MjkyOA==", "bodyText": "Partially updated classes like this are from validateEnv. They are not all run in this validateHdfsMount tool.", "url": "https://github.com/Alluxio/alluxio/pull/11480#discussion_r436692928", "createdAt": "2020-06-08T13:19:48Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java", "diffHunk": "@@ -27,7 +27,8 @@\n /**\n  * Task for validating security configurations.\n  */\n-public final class SecureHdfsValidationTask extends HdfsValidationTask {\n+@ApplicableUfsType(ApplicableUfsType.Type.HDFS)\n+public final class SecureHdfsValidationTask extends AbstractValidationTask {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjI4NDMy", "url": "https://github.com/Alluxio/alluxio/pull/11480#pullrequestreview-426228432", "createdAt": "2020-06-08T13:23:43Z", "commit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyMzo0M1rOGgd2HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoyMzo0M1rOGgd2HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5NjYwNA==", "bodyText": "Now if the namenode / nameservice is not accessible there will be an exception here. I'm trying to add another test using hadoopClient.isHealthy() in hadoop client, which should be more verbose and specific.", "url": "https://github.com/Alluxio/alluxio/pull/11480#discussion_r436696604", "createdAt": "2020-06-08T13:23:43Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/validation/UfsDirectoryValidationTask.java", "diffHunk": "@@ -30,27 +31,41 @@\n    * Creates a new instance of {@link UfsDirectoryValidationTask}\n    * for validating root under file system.\n    *\n-   * @param conf configuration\n+   * @param path the UFS path\n+   * @param conf the UFS configuration\n    */\n-  public UfsDirectoryValidationTask(AlluxioConfiguration conf) {\n-    mUfs = UnderFileSystem.Factory.createForRoot(conf);\n-    mPath = conf.get(PropertyKey.MASTER_MOUNT_TABLE_ROOT_UFS);\n+  public UfsDirectoryValidationTask(String path, AlluxioConfiguration conf) {\n+    mPath = path;\n+    mUfs = UnderFileSystem.Factory.create(mPath, conf);\n   }\n \n   @Override\n-  public TaskResult validate(Map<String, String> optionsMap) {\n+  public String getName() {\n+    return \"ValidateUfsDir\";\n+  }\n+\n+  @Override\n+  public ValidateUtils.TaskResult validate(Map<String, String> optionsMap) {\n+    StringBuilder msg = new StringBuilder();\n+    StringBuilder advice = new StringBuilder();\n     try {\n       UfsStatus[] listStatus = mUfs.listStatus(mPath);\n       if (listStatus == null) {\n-        System.err.format(\"Unable to list under file system path %s.%n\", mPath);\n-        return TaskResult.FAILED;\n+        msg.append(String.format(\"Unable to list under file system path %s. \", mPath));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b3f1f26f81c40a8da58a62e0e942c226c3047c9", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/3b3f1f26f81c40a8da58a62e0e942c226c3047c9", "committedDate": "2020-06-08T13:26:10Z", "message": "improvements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NjQ1NTM5", "url": "https://github.com/Alluxio/alluxio/pull/11480#pullrequestreview-426645539", "createdAt": "2020-06-08T21:47:43Z", "commit": {"oid": "3b3f1f26f81c40a8da58a62e0e942c226c3047c9"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMTo0Nzo0M1rOGgxmEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzo0MzowMlrOGg0Abg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyMDE3Ng==", "bodyText": "this class is also used by job_server, may be moved to alluxio.utils?", "url": "https://github.com/Alluxio/alluxio/pull/11480#discussion_r437020176", "createdAt": "2020-06-08T21:47:43Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/cli/JsonSerializable.java", "diffHunk": "@@ -9,14 +9,16 @@\n  * See the NOTICE file distributed with this work for information regarding copyright ownership.\n  */\n \n-package alluxio.stress;\n+package alluxio.cli;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY3NDM5NA=="}, "originalCommit": {"oid": "142db925bc9d2ec39fc536ef2f0172a78127b836"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1MjY5NA==", "bodyText": "shell should not depend on core-server-common, why this is added?", "url": "https://github.com/Alluxio/alluxio/pull/11480#discussion_r437052694", "createdAt": "2020-06-08T23:19:09Z", "author": {"login": "LuQQiu"}, "path": "shell/pom.xml", "diffHunk": "@@ -103,6 +103,28 @@\n       <type>test-jar</type>\n       <scope>test</scope>\n     </dependency>\n+      <dependency>\n+          <groupId>org.alluxio</groupId>\n+          <artifactId>alluxio-core-server-common</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3f1f26f81c40a8da58a62e0e942c226c3047c9"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1Mjk2Nw==", "bodyText": "what does errStream use for ?", "url": "https://github.com/Alluxio/alluxio/pull/11480#discussion_r437052967", "createdAt": "2020-06-08T23:20:06Z", "author": {"login": "LuQQiu"}, "path": "shell/src/main/java/alluxio/cli/RunTestUtils.java", "diffHunk": "@@ -27,18 +28,29 @@\n   private RunTestUtils() {} // prevent instantiation\n \n   /**\n-   * Prints information of the test result.\n+   * Prints information of the test result to redirected streams.\n    *\n    * @param pass the test result\n+   * @param outStream stream for stdout\n+   * @param errStream stream for stderr\n    */\n-  public static void printPassInfo(boolean pass) {\n+  public static void printPassInfo(boolean pass, PrintStream outStream, PrintStream errStream) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3f1f26f81c40a8da58a62e0e942c226c3047c9"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1MzE2Nw==", "bodyText": "this function only prints the succeed (== pass) information?", "url": "https://github.com/Alluxio/alluxio/pull/11480#discussion_r437053167", "createdAt": "2020-06-08T23:20:39Z", "author": {"login": "LuQQiu"}, "path": "shell/src/main/java/alluxio/cli/RunTestUtils.java", "diffHunk": "@@ -27,18 +28,29 @@\n   private RunTestUtils() {} // prevent instantiation\n \n   /**\n-   * Prints information of the test result.\n+   * Prints information of the test result to redirected streams.\n    *\n    * @param pass the test result\n+   * @param outStream stream for stdout\n+   * @param errStream stream for stderr\n    */\n-  public static void printPassInfo(boolean pass) {\n+  public static void printPassInfo(boolean pass, PrintStream outStream, PrintStream errStream) {\n     if (pass) {\n-      System.out.println(Constants.ANSI_GREEN + \"Passed the test!\" + Constants.ANSI_RESET);\n+      outStream.println(Constants.ANSI_GREEN + \"Passed the test!\" + Constants.ANSI_RESET);\n     } else {\n-      System.out.println(Constants.ANSI_RED + \"Failed the test!\" + Constants.ANSI_RESET);\n+      outStream.println(Constants.ANSI_RED + \"Failed the test!\" + Constants.ANSI_RESET);\n     }\n   }\n \n+  /**\n+   * Prints information of the test result.\n+   *\n+   * @param pass the test result\n+   */\n+  public static void printPassInfo(boolean pass) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3f1f26f81c40a8da58a62e0e942c226c3047c9"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1OTUzOQ==", "bodyText": "license header", "url": "https://github.com/Alluxio/alluxio/pull/11480#discussion_r437059539", "createdAt": "2020-06-08T23:42:34Z", "author": {"login": "LuQQiu"}, "path": "shell/src/main/java/alluxio/cli/ValidateHdfsMount.java", "diffHunk": "@@ -0,0 +1,235 @@\n+package alluxio.cli;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3f1f26f81c40a8da58a62e0e942c226c3047c9"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1OTY5NA==", "bodyText": "The path", "url": "https://github.com/Alluxio/alluxio/pull/11480#discussion_r437059694", "createdAt": "2020-06-08T23:43:02Z", "author": {"login": "LuQQiu"}, "path": "shell/src/main/java/alluxio/cli/ValidateHdfsMount.java", "diffHunk": "@@ -0,0 +1,235 @@\n+package alluxio.cli;\n+\n+import alluxio.cli.validation.ApplicableUfsType;\n+import alluxio.conf.InstancedConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.Source;\n+import alluxio.shell.CommandReturn;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+import alluxio.util.ConfigurationUtils;\n+import alluxio.util.ShellUtils;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * A tool to validate an HDFS mount, before the paths is mounted to Alluxio.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3f1f26f81c40a8da58a62e0e942c226c3047c9"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NzA1MjAw", "url": "https://github.com/Alluxio/alluxio/pull/11480#pullrequestreview-426705200", "createdAt": "2020-06-09T00:14:06Z", "commit": {"oid": "3b3f1f26f81c40a8da58a62e0e942c226c3047c9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMDoxNDowNlrOGg0hOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMDoxNjoxMVrOGg0jXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2ODA5MA==", "bodyText": "@madanadit Is the ValidateHdfs required to run on all nodes? @jiacheliu3 I saw the local option and validate hdfs will run by default on local and remote nodes. The problem is this requires SSH and file permissions which is hard to fulfill in real env. I would suggest either remove the remote check (or at least make it optional) or expose validateHdfs rpcs in master/worker. Then we can ask for the server check through rpc channel.", "url": "https://github.com/Alluxio/alluxio/pull/11480#discussion_r437068090", "createdAt": "2020-06-09T00:14:06Z", "author": {"login": "LuQQiu"}, "path": "shell/src/main/java/alluxio/cli/ValidateHdfsMount.java", "diffHunk": "@@ -0,0 +1,235 @@\n+package alluxio.cli;\n+\n+import alluxio.cli.validation.ApplicableUfsType;\n+import alluxio.conf.InstancedConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.Source;\n+import alluxio.shell.CommandReturn;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+import alluxio.util.ConfigurationUtils;\n+import alluxio.util.ShellUtils;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * A tool to validate an HDFS mount, before the paths is mounted to Alluxio.\n+ * */\n+public class ValidateHdfsMount {\n+  private static final Logger LOG = LoggerFactory.getLogger(ValidateHdfsMount.class);\n+  private static final String JSON_START_POS_MARKER = \"ValidateHdfsMount task results: \\n\";\n+\n+  private static final Option READONLY_OPTION =\n+          Option.builder()\n+                  .longOpt(\"readonly\")\n+                  .required(false)\n+                  .hasArg(false)\n+                  .desc(\"mount point is readonly in Alluxio\")\n+                  .build();\n+  private static final Option SHARED_OPTION =\n+          Option.builder()\n+                  .longOpt(\"shared\")\n+                  .required(false)\n+                  .hasArg(false)\n+                  .desc(\"mount point is shared\")\n+                  .build();\n+  private static final Option OPTION_OPTION =\n+          Option.builder()\n+                  .longOpt(\"option\")\n+                  .required(false)\n+                  .hasArg(true)\n+                  .numberOfArgs(2)\n+                  .argName(\"key=value\")\n+                  .valueSeparator('=')\n+                  .desc(\"options associated with this mount point\")\n+                  .build();\n+  private static final Option LOCAL_OPTION =\n+          Option.builder().required(false).longOpt(\"local\").hasArg(false)\n+                  .desc(\"running only on localhost\").build();\n+  private static final Options OPTIONS =\n+          new Options().addOption(READONLY_OPTION).addOption(SHARED_OPTION)\n+                  .addOption(OPTION_OPTION).addOption(LOCAL_OPTION);\n+\n+  /**\n+   * Invokes {@link UnderFileSystemContractTest} to validate UFS operations.\n+   *\n+   * @param path the UFS path\n+   * @param conf the UFS conf\n+   * @return a {@link alluxio.cli.ValidateUtils.TaskResult} containing the validation result\n+   *        of the UFS operations\n+   * */\n+  public static ValidateUtils.TaskResult runUfsTests(String path, InstancedConfiguration conf) {\n+    try {\n+      UnderFileSystemContractTest test = new UnderFileSystemContractTest(path, conf);\n+      return test.runValidationTask();\n+    } catch (IOException e) {\n+      return new ValidateUtils.TaskResult(ValidateUtils.State.FAILED, \"ufsTests\",\n+              ValidateUtils.getErrorInfo(e), \"\");\n+    }\n+  }\n+\n+  /**\n+   * The entrance.\n+   *\n+   * @param args command line arguments\n+   * */\n+  public static void main(String[] args) throws Exception {\n+    // TODO(jiacheng): use jccommand?\n+    CommandLineParser parser = new DefaultParser();\n+    CommandLine cmd = null;\n+    try {\n+      cmd = parser.parse(OPTIONS, args, true /* stopAtNonOption */);\n+    } catch (ParseException e) {\n+      System.exit(1);\n+    }\n+    args = cmd.getArgs();\n+    String ufsPath = args[0];\n+\n+    InstancedConfiguration conf = InstancedConfiguration.defaults();\n+    if (cmd.hasOption(LOCAL_OPTION.getLongOpt())) {\n+      // Merge options from the command line option\n+      UnderFileSystemConfiguration ufsConf = UnderFileSystemConfiguration.defaults(conf);\n+      if (cmd.hasOption(READONLY_OPTION.getLongOpt())) {\n+        ufsConf.setReadOnly(true);\n+      }\n+      if (cmd.hasOption(SHARED_OPTION.getLongOpt())) {\n+        ufsConf.setShared(true);\n+      }\n+      if (cmd.hasOption(OPTION_OPTION.getLongOpt())) {\n+        Properties properties = cmd.getOptionProperties(OPTION_OPTION.getLongOpt());\n+        ufsConf.merge(properties, Source.MOUNT_OPTION);\n+        LOG.debug(\"Options from cmdline: {}\", properties);\n+      }\n+\n+      // Run validateEnv\n+      Map<String, String> validateOpts = ImmutableMap.of();\n+      ValidateEnv validate = new ValidateEnv(ufsPath, ufsConf);\n+      List<ValidateUtils.TaskResult> results = validate.validateUfs(\n+              ApplicableUfsType.Type.HDFS, validateOpts);\n+\n+      // Run runUfsTests\n+      if (ufsConf.isReadOnly()) {\n+        LOG.debug(\"Ufs operations are skipped because the path is readonly.\");\n+        results.add(new ValidateUtils.TaskResult(ValidateUtils.State.SKIPPED,\n+                UnderFileSystemContractTest.TASK_NAME,\n+                String.format(\"UFS path %s is readonly, skipped UFS operation tests.\", ufsPath),\n+                \"\"));\n+      } else {\n+        results.add(runUfsTests(ufsPath, new InstancedConfiguration(ufsConf)));\n+      }\n+\n+      // Serialize the results back to the calling node\n+      printResults(results);\n+\n+      System.exit(0);\n+    }\n+\n+    // Cluster mode\n+    LOG.info(\"Invoking the command remotely on the Alluxio cluster.\");\n+\n+    // how many nodes in the cluster\n+    Set<String> hosts = ConfigurationUtils.getServerHostnames(conf);\n+    ExecutorService executor = Executors.newFixedThreadPool(hosts.size());\n+\n+    // Invoke validateHdfsMount locally on each host\n+    Map<String, CompletableFuture<CommandReturn>> resultFuture = new HashMap<>();\n+    for (String host : hosts) {\n+      LOG.info(\"validate hdfs mount on host {}\", host);\n+\n+      // We make the assumption that the Alluxio WORK_DIR is the same\n+      String workDir = conf.get(PropertyKey.WORK_DIR);\n+      String alluxioBinPath = Paths.get(workDir, \"bin/alluxio\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3f1f26f81c40a8da58a62e0e942c226c3047c9"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2ODYzOQ==", "bodyText": "Why we choose to put the validateHdfs logic inside validateEnv?\npersonally i will prefer to have a separate class for the hdfs<>ValidationTask. and ValidateEnv can call the hdfs<>ValidationTasks if it's root ufs is hdfs. This is because many of the ValidateEnv tasks are not related to hdfs.", "url": "https://github.com/Alluxio/alluxio/pull/11480#discussion_r437068639", "createdAt": "2020-06-09T00:16:11Z", "author": {"login": "LuQQiu"}, "path": "shell/src/main/java/alluxio/cli/ValidateEnv.java", "diffHunk": "@@ -87,80 +93,108 @@\n   private static final List<ValidationTask> MASTER_TASKS = new ArrayList<>();\n   private static final List<ValidationTask> WORKER_TASKS = new ArrayList<>();\n \n-  private static final AlluxioConfiguration CONF;\n+  private final AlluxioConfiguration mConf;\n+  private final String mPath;\n \n-  static {\n-    CONF = InstancedConfiguration.defaults();\n+  /**\n+   * Initializes from the target UFS path and configurations.\n+   *\n+   * @param path the UFS path\n+   * @param conf the UFS configurtions\n+   * */\n+  public ValidateEnv(String path, AlluxioConfiguration conf) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3f1f26f81c40a8da58a62e0e942c226c3047c9"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf3fc88f206e946eea54a89741a459b9402f3647", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/cf3fc88f206e946eea54a89741a459b9402f3647", "committedDate": "2020-06-10T16:35:22Z", "message": "update pom"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MjM5MTQ0", "url": "https://github.com/Alluxio/alluxio/pull/11480#pullrequestreview-428239144", "createdAt": "2020-06-10T16:38:24Z", "commit": {"oid": "cf3fc88f206e946eea54a89741a459b9402f3647"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjozODoyNFrOGh9bSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjozODoyNFrOGh9bSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI2MjYwMg==", "bodyText": "Extra whitespace removed", "url": "https://github.com/Alluxio/alluxio/pull/11480#discussion_r438262602", "createdAt": "2020-06-10T16:38:24Z", "author": {"login": "jiacheliu3"}, "path": "shell/pom.xml", "diffHunk": "@@ -103,6 +113,5 @@\n       <type>test-jar</type>\n       <scope>test</scope>\n     </dependency>\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf3fc88f206e946eea54a89741a459b9402f3647"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MjM5MzYy", "url": "https://github.com/Alluxio/alluxio/pull/11480#pullrequestreview-428239362", "createdAt": "2020-06-10T16:38:39Z", "commit": {"oid": "cf3fc88f206e946eea54a89741a459b9402f3647"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjozODo0MFrOGh9b7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjozODo0MFrOGh9b7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI2Mjc2Ng==", "bodyText": "Looks like this is where it should really be? Double checking with you @LuQQiu", "url": "https://github.com/Alluxio/alluxio/pull/11480#discussion_r438262766", "createdAt": "2020-06-10T16:38:40Z", "author": {"login": "jiacheliu3"}, "path": "shell/pom.xml", "diffHunk": "@@ -63,6 +63,10 @@\n       <groupId>com.beust</groupId>\n       <artifactId>jcommander</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.commons</groupId>\n+      <artifactId>commons-compress</artifactId>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf3fc88f206e946eea54a89741a459b9402f3647"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99680346c71c20366e5a2065290e915e0e15ea84", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/99680346c71c20366e5a2065290e915e0e15ea84", "committedDate": "2020-06-10T16:51:55Z", "message": "resolve some comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09347fc6566bc4e860da132e206cd9d4d895e0cf", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/09347fc6566bc4e860da132e206cd9d4d895e0cf", "committedDate": "2020-06-10T17:00:38Z", "message": "remove cluster mode"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MjU5NDUz", "url": "https://github.com/Alluxio/alluxio/pull/11480#pullrequestreview-428259453", "createdAt": "2020-06-10T17:04:17Z", "commit": {"oid": "09347fc6566bc4e860da132e206cd9d4d895e0cf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzowNDoxN1rOGh-Xbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzowNDoxN1rOGh-Xbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI3Nzk5OQ==", "bodyText": "do you mind summarizing the module dependencies changed with this PR w/ reasons?", "url": "https://github.com/Alluxio/alluxio/pull/11480#discussion_r438277999", "createdAt": "2020-06-10T17:04:17Z", "author": {"login": "madanadit"}, "path": "shell/pom.xml", "diffHunk": "@@ -91,8 +95,14 @@\n       <version>${project.version}</version>\n     </dependency>\n     <dependency>\n-      <groupId>org.apache.commons</groupId>\n-      <artifactId>commons-compress</artifactId>\n+      <groupId>org.alluxio</groupId>\n+      <artifactId>alluxio-examples</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09347fc6566bc4e860da132e206cd9d4d895e0cf"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MjY0NDg1", "url": "https://github.com/Alluxio/alluxio/pull/11480#pullrequestreview-428264485", "createdAt": "2020-06-10T17:10:57Z", "commit": {"oid": "09347fc6566bc4e860da132e206cd9d4d895e0cf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzoxMDo1N1rOGh-mvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzoxMDo1N1rOGh-mvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI4MTkxOQ==", "bodyText": "why do you need to set these properties?", "url": "https://github.com/Alluxio/alluxio/pull/11480#discussion_r438281919", "createdAt": "2020-06-10T17:10:57Z", "author": {"login": "madanadit"}, "path": "shell/src/main/java/alluxio/cli/UnderFileSystemContractTest.java", "diffHunk": "@@ -84,6 +109,63 @@ private void run() throws Exception {\n     System.out.printf(\"Tests completed with %d failed.%n\", failedCnt);\n   }\n \n+  /**\n+   * Runs the tests and return a {@link alluxio.cli.ValidateUtils.TaskResult}.\n+   *\n+   * @return a task result for all UFS tests\n+   * */\n+  public ValidateUtils.TaskResult runValidationTask() throws IOException {\n+    Closer closer = Closer.create();\n+    final ByteArrayOutputStream msgBuf = new ByteArrayOutputStream();\n+    final ByteArrayOutputStream adviceBuf = new ByteArrayOutputStream();\n+    PrintStream msgStream = new PrintStream(msgBuf, true);\n+    PrintStream adviceStream = new PrintStream(adviceBuf, true);\n+    closer.register(msgStream);\n+    closer.register(adviceStream);\n+    closer.register(msgBuf);\n+    closer.register(adviceBuf);\n+    try {\n+      UnderFileSystemConfiguration ufsConf = getUfsConf();\n+      UnderFileSystemFactory factory = UnderFileSystemFactoryRegistry.find(mUfsPath, ufsConf);\n+      // Check if the ufs path is valid\n+      if (factory == null || !factory.supportsPath(mUfsPath)) {\n+        msgStream.append(String.format(\"%s is not a valid path%n\", mUfsPath));\n+        adviceStream.append(String.format(\"Please validate if %s is a correct path\\n\", mUfsPath));\n+        return new ValidateUtils.TaskResult(ValidateUtils.State.FAILED, TASK_NAME,\n+                msgBuf.toString(), adviceBuf.toString());\n+      }\n+\n+      // Set common properties\n+      mConf.set(PropertyKey.UNDERFS_LISTING_LENGTH, \"50\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09347fc6566bc4e860da132e206cd9d4d895e0cf"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4738033507dee7df99436a0921b27e321116c937", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/4738033507dee7df99436a0921b27e321116c937", "committedDate": "2020-06-10T17:15:27Z", "message": "add cmdline"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MjY4NzEy", "url": "https://github.com/Alluxio/alluxio/pull/11480#pullrequestreview-428268712", "createdAt": "2020-06-10T17:16:36Z", "commit": {"oid": "09347fc6566bc4e860da132e206cd9d4d895e0cf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzoxNjozNlrOGh-zcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzoxNjozNlrOGh-zcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI4NTE2OA==", "bodyText": "is this better suited part of the interface definition?", "url": "https://github.com/Alluxio/alluxio/pull/11480#discussion_r438285168", "createdAt": "2020-06-10T17:16:36Z", "author": {"login": "madanadit"}, "path": "shell/src/main/java/alluxio/cli/validation/AbstractValidationTask.java", "diffHunk": "@@ -20,6 +20,13 @@\n  * Abstract class for validation environment.\n  */\n public abstract class AbstractValidationTask implements ValidationTask {\n+  /**\n+   * Gets the name of the task.\n+   *\n+   * @return the task name\n+   * */\n+  public abstract String getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09347fc6566bc4e860da132e206cd9d4d895e0cf"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MjcxMjQ2", "url": "https://github.com/Alluxio/alluxio/pull/11480#pullrequestreview-428271246", "createdAt": "2020-06-10T17:19:53Z", "commit": {"oid": "09347fc6566bc4e860da132e206cd9d4d895e0cf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzoxOTo1M1rOGh-63g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzoxOTo1M1rOGh-63g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI4NzA3MA==", "bodyText": "we agreed to validate local conf only w/o ssh?", "url": "https://github.com/Alluxio/alluxio/pull/11480#discussion_r438287070", "createdAt": "2020-06-10T17:19:53Z", "author": {"login": "madanadit"}, "path": "shell/src/main/java/alluxio/cli/validation/ClusterConfConsistencyValidationTask.java", "diffHunk": "@@ -122,37 +147,34 @@ public TaskResult validate(Map<String, String> optionMap) throws InterruptedExce\n         }\n         String remoteValue = allProperties.get(remoteNode).getProperty(propertyName);\n         if (!StringUtils.equals(remoteValue, baseValue)) {\n-          System.err.format(\"%s: Property \\\"%s\\\" is inconsistent between node %s and %s.%n\",\n-              errLabel, propertyName, baseNode, remoteNode);\n-          System.err.format(\" %s: %s%n %s: %s%n\", baseNode, Objects.toString(baseValue, \"not set\"),\n-              remoteNode,  Objects.toString(remoteValue, \"not set\"));\n+          msg.append(String.format(\"%s: Property \\\"%s\\\" is inconsistent between node %s and %s.%n\",\n+              errLabel, propertyName, baseNode, remoteNode));\n+          msg.append(String.format(\" %s: %s%n %s: %s%n\", baseNode,\n+                  Objects.toString(baseValue, \"not set\"),\n+              remoteNode,  Objects.toString(remoteValue, \"not set\")));\n+          advice.append(String.format(\"Please check your settings for property %s on %s and %s.%n\",\n+                  propertyName, baseNode, remoteNode));\n           isConsistent = false;\n         }\n       }\n       if (!isConsistent) {\n-        result = result == TaskResult.FAILED ? TaskResult.FAILED : errLevel;\n+        state = state == ValidateUtils.State.FAILED ? ValidateUtils.State.FAILED : errLevel;\n       }\n     }\n-    return result;\n+    return new ValidateUtils.TaskResult(state, getName(), msg.toString(), advice.toString());\n   }\n \n-  @Nullable\n-  private Properties getNodeConf(String node) {\n-    try {\n-      String homeDir = mConf.get(PropertyKey.HOME);\n-      String remoteCommand = String.format(\n-          \"%s/bin/alluxio getConf\", homeDir);\n-      String localCommand = String.format(\n-          \"ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -tt %s \\\"bash %s\\\"\",\n-          node, remoteCommand);\n-      String[] command = {\"bash\", \"-c\", localCommand};\n-      Properties properties = new Properties();\n-      Process process = Runtime.getRuntime().exec(command);\n-      properties.load(process.getInputStream());\n-      return properties;\n-    } catch (IOException e) {\n-      System.err.format(\"Unable to retrieve configuration for %s: %s.\", node, e.getMessage());\n-      return null;\n-    }\n+  private Properties getNodeConf(String node) throws IOException {\n+    String homeDir = mConf.get(PropertyKey.HOME);\n+    String remoteCommand = String.format(\n+        \"%s/bin/alluxio getConf\", homeDir);\n+    String localCommand = String.format(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09347fc6566bc4e860da132e206cd9d4d895e0cf"}, "originalPosition": 164}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2d5fc1a2c2c06679df5e1da5c7d99971faf58f4", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/f2d5fc1a2c2c06679df5e1da5c7d99971faf58f4", "committedDate": "2020-06-10T17:33:48Z", "message": "group results in the end"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55b44bfc643ceb4b0dbac02bc4bd6d67b7808116", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/55b44bfc643ceb4b0dbac02bc4bd6d67b7808116", "committedDate": "2020-06-10T18:01:19Z", "message": "correct super user check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94e6c76210f158292c8e7e6d293422fead2fb400", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/94e6c76210f158292c8e7e6d293422fead2fb400", "committedDate": "2020-06-11T11:42:54Z", "message": "move hdfs validation tasks and rewrite impersonation check logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cc3601cdb607fc574c650a6caf4131e72e88ed1", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/6cc3601cdb607fc574c650a6caf4131e72e88ed1", "committedDate": "2020-06-11T11:50:51Z", "message": "merge updated master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b4a15412c8dd3ac4f21c801262473d63cf3218f", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/7b4a15412c8dd3ac4f21c801262473d63cf3218f", "committedDate": "2020-06-11T12:15:05Z", "message": "master is too fast i gotta catch up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d726454116a9919602e40b6bff0f60e36df25aae", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/d726454116a9919602e40b6bff0f60e36df25aae", "committedDate": "2020-06-11T12:49:00Z", "message": "resolve comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ad06f2a3bafa66919b0a18f2ed142c30e1e9337", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/4ad06f2a3bafa66919b0a18f2ed142c30e1e9337", "committedDate": "2020-06-11T13:17:00Z", "message": "resolve TODOs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "379f56fea0eae80186e74a782e7f40cd123dd20a", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/379f56fea0eae80186e74a782e7f40cd123dd20a", "committedDate": "2020-06-11T13:24:27Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "508bdc5cd3f003bc56273d954f03bae43b0a0a26", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/508bdc5cd3f003bc56273d954f03bae43b0a0a26", "committedDate": "2020-06-11T14:29:05Z", "message": "resolve comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0ac42fa46e20e8a955e169fbe6b33dc5bfe6933", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/f0ac42fa46e20e8a955e169fbe6b33dc5bfe6933", "committedDate": "2020-06-11T14:38:28Z", "message": "pom update and checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e7aa61de5cc376548823bd786450149c4fc8cd1", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/4e7aa61de5cc376548823bd786450149c4fc8cd1", "committedDate": "2020-06-11T14:40:42Z", "message": "pom update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4OTkyMzM1", "url": "https://github.com/Alluxio/alluxio/pull/11480#pullrequestreview-428992335", "createdAt": "2020-06-11T14:53:28Z", "commit": {"oid": "4e7aa61de5cc376548823bd786450149c4fc8cd1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDo1MzoyOFrOGihBmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDo1MzoyOFrOGihBmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0NTg0OQ==", "bodyText": "@madanadit PTAL at the impersonation check now, updated per our discussion today. Now the logic goes as follows:\n// Skipped if authType is NOSASL\nvalidateProxyUsers(String alluxioUser) {\n// if neither hadoop.proxyuser.alluxioUser.users and hadoop.proxyuser.alluxioUser.groups are configured -> ERROR\n// If either is *, OK\n// Otherwise  -> WARN and let the user check. \n}\n\nWhat do you think about the final WARN scenario? Maybe hadoop.proxyuser.alluxioUser.users or hadoop.proxyuser.alluxioUser.groups has some config but we don't really know if that's what we want. I left a TODO in case we want to add a little more to this part.", "url": "https://github.com/Alluxio/alluxio/pull/11480#discussion_r438845849", "createdAt": "2020-06-11T14:53:28Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/validation/hdfs/HdfsProxyUserValidationTask.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package alluxio.cli.validation.hdfs;\n+\n+import alluxio.cli.ValidationUtils;\n+import alluxio.cli.validation.ApplicableUfsType;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.exception.status.UnauthenticatedException;\n+import alluxio.security.authentication.AuthType;\n+import alluxio.security.authentication.ImpersonationAuthenticator;\n+import alluxio.security.user.UserState;\n+\n+import java.util.Map;\n+\n+/**\n+ * Validates the proxyuser configurations for alluxio in hdfs.\n+ * */\n+@ApplicableUfsType(ApplicableUfsType.Type.HDFS)\n+public class HdfsProxyUserValidationTask extends HdfsConfValidationTask {\n+  /**\n+   * Creates a new instance of {@link HdfsProxyUserValidationTask}\n+   * for validating proxyuser configuration.\n+   *\n+   * @param path the UFS path\n+   * @param conf the UFS configuration\n+   */\n+  public HdfsProxyUserValidationTask(String path, AlluxioConfiguration conf) {\n+    super(path, conf);\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return \"ValidateProxyUserConf\";\n+  }\n+\n+  private String getCurrentUser() throws UnauthenticatedException {\n+    UserState s = UserState.Factory.create(mConf);\n+    return s.getUser().getName();\n+  }\n+\n+  private ValidationUtils.TaskResult validateProxyUsers(String userName) {\n+    String proxyUserKey = String.format(\"hadoop.proxyuser.%s.users\", userName);\n+    String proxyGroupKey = String.format(\"hadoop.proxyuser.%s.groups\", userName);\n+    String proxyUsers = mCoreConf.getOrDefault(proxyUserKey, \"\");\n+    String proxyGroups = mCoreConf.getOrDefault(proxyGroupKey, \"\");\n+\n+    // Neither proxy users or groups is configured in core-site.xml\n+    if (proxyUsers.equals(\"\") && proxyGroups.equals(\"\")) {\n+      mMsg.append(String.format(\"Alluxio is running as user %s. But neither %s or %s is \"\n+              + \"configured in hadoop configuration. Alluxio is not able to perform \"\n+              + \"impersonation.%n\", userName, proxyUserKey, proxyGroupKey));\n+      mAdvice.append(String.format(\"Please enable Alluxio user %s to impersonate.%n\", userName));\n+\n+      return new ValidationUtils.TaskResult(ValidationUtils.State.FAILED, getName(), mMsg.toString(),\n+              mAdvice.toString());\n+    }\n+\n+    // If proxy users/groups is *, alluxio can impersonate anyone\n+    if (proxyUsers.equals(ImpersonationAuthenticator.WILDCARD)\n+            || proxyGroups.equals(ImpersonationAuthenticator.WILDCARD)) {\n+      mMsg.append(String.format(\"Alluxio user %s can impersonate as any user/group in HDFS.%n\",\n+              userName));\n+      return new ValidationUtils.TaskResult(ValidationUtils.State.OK, getName(),\n+              mMsg.toString(), mAdvice.toString());\n+    }\n+\n+    // There are proxyable users and groups for the Alluxio user in HDFS,\n+    // but we cannot know if that is a full set.\n+    // Leave a warning for the user to double check.\n+    // TODO(jiacheng): can we do better check than this?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e7aa61de5cc376548823bd786450149c4fc8cd1"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d842b19e37c3fd60cea8504e72ea7958ea1f15b2", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/d842b19e37c3fd60cea8504e72ea7958ea1f15b2", "committedDate": "2020-06-11T15:02:26Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4b7f78c344d71cb1493617c67c6105f1279229b", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/c4b7f78c344d71cb1493617c67c6105f1279229b", "committedDate": "2020-06-11T15:34:54Z", "message": "spotbugs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5Mjk4OTg4", "url": "https://github.com/Alluxio/alluxio/pull/11480#pullrequestreview-429298988", "createdAt": "2020-06-11T21:24:34Z", "commit": {"oid": "c4b7f78c344d71cb1493617c67c6105f1279229b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MzA2NzYz", "url": "https://github.com/Alluxio/alluxio/pull/11480#pullrequestreview-429306763", "createdAt": "2020-06-11T21:39:00Z", "commit": {"oid": "c4b7f78c344d71cb1493617c67c6105f1279229b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "015c5b853daab3900487b6b116fb71ed987d7028", "author": {"user": {"login": "jiacheliu3", "name": "Jiacheng Liu"}}, "url": "https://github.com/Alluxio/alluxio/commit/015c5b853daab3900487b6b116fb71ed987d7028", "committedDate": "2020-06-12T01:05:07Z", "message": "checkcheckstyle"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4442, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}