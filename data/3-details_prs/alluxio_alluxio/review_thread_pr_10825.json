{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5ODEyNTUx", "number": 10825, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxOToxMTo0MVrODcvkFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMToxNzoxM1rODcx0qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDY2MDA0OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/util/EnvironmentUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxOToxMTo0MVrOFk8ozg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMTowNTo1M1rOFk_8Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI4NjU0Mg==", "bodyText": "make this call in UpdateCheck instance so that we query the metadata service only once and not for each call like isCFT  / isEMR? try to minimize the metadata service calls needed", "url": "https://github.com/Alluxio/alluxio/pull/10825#discussion_r374286542", "createdAt": "2020-02-03T19:11:41Z", "author": {"login": "madanadit"}, "path": "core/common/src/main/java/alluxio/util/EnvironmentUtils.java", "diffHunk": "@@ -45,5 +59,197 @@ public static boolean isKubernetes() {\n     return System.getenv(\"KUBERNETES_SERVICE_HOST\") != null;\n   }\n \n+  /**\n+   * Utility to detect the EC2 deployment environment.\n+   *\n+   * @return true, if running on EC2\n+   */\n+  public static boolean isEC2() {\n+    return isEC2WithUUID() || isEC2WithProductUUID() || isEC2WithInstanceIdentity();\n+  }\n+\n+  /**\n+   * Utility to detect the Google compute engine deployment environment.\n+   *\n+   * @return true, if running on gce\n+   */\n+  public static boolean isGoogleComputeEngine() {\n+    return isGCEWithMetadata() || isGCEWithBiosVendor();\n+  }\n+\n+  /**\n+   * Gets the EC2 product code if any.\n+   *\n+   * @return the first product code if any, an empty string otherwise\n+   */\n+  public static String getEC2ProductCode() {\n+    try {\n+      List<String> productCodes = EC2MetadataUtils.getProductCodes();\n+      if (productCodes.size() < 1) {\n+        return \"\";\n+      }\n+      return productCodes.get(0);\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not EC2 instance\n+      // or this EC2 does not have product code\n+      return \"\";\n+    }\n+  }\n+\n+  /**\n+   * @return true if this instance is launched from CFT, false otherwise\n+   */\n+  public static boolean isCFT() {\n+    try {\n+      String userData = EC2MetadataUtils.getUserData();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de47fe1986edbb732820d2a26daf607bb8f27aab"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM0MDY1OA==", "bodyText": "Move this call to UpdateCheck, thanks", "url": "https://github.com/Alluxio/alluxio/pull/10825#discussion_r374340658", "createdAt": "2020-02-03T21:05:53Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/util/EnvironmentUtils.java", "diffHunk": "@@ -45,5 +59,197 @@ public static boolean isKubernetes() {\n     return System.getenv(\"KUBERNETES_SERVICE_HOST\") != null;\n   }\n \n+  /**\n+   * Utility to detect the EC2 deployment environment.\n+   *\n+   * @return true, if running on EC2\n+   */\n+  public static boolean isEC2() {\n+    return isEC2WithUUID() || isEC2WithProductUUID() || isEC2WithInstanceIdentity();\n+  }\n+\n+  /**\n+   * Utility to detect the Google compute engine deployment environment.\n+   *\n+   * @return true, if running on gce\n+   */\n+  public static boolean isGoogleComputeEngine() {\n+    return isGCEWithMetadata() || isGCEWithBiosVendor();\n+  }\n+\n+  /**\n+   * Gets the EC2 product code if any.\n+   *\n+   * @return the first product code if any, an empty string otherwise\n+   */\n+  public static String getEC2ProductCode() {\n+    try {\n+      List<String> productCodes = EC2MetadataUtils.getProductCodes();\n+      if (productCodes.size() < 1) {\n+        return \"\";\n+      }\n+      return productCodes.get(0);\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not EC2 instance\n+      // or this EC2 does not have product code\n+      return \"\";\n+    }\n+  }\n+\n+  /**\n+   * @return true if this instance is launched from CFT, false otherwise\n+   */\n+  public static boolean isCFT() {\n+    try {\n+      String userData = EC2MetadataUtils.getUserData();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI4NjU0Mg=="}, "originalCommit": {"oid": "de47fe1986edbb732820d2a26daf607bb8f27aab"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDY5ODc4OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/util/EnvironmentUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxOToyNDowOVrOFk9BDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMTowNjoxMVrOFk_8sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI5Mjc1MA==", "bodyText": "nit: instead of reading the entire file, read a limited number of bytes into a buffer of length=content.size only?", "url": "https://github.com/Alluxio/alluxio/pull/10825#discussion_r374292750", "createdAt": "2020-02-03T19:24:09Z", "author": {"login": "madanadit"}, "path": "core/common/src/main/java/alluxio/util/EnvironmentUtils.java", "diffHunk": "@@ -45,5 +59,197 @@ public static boolean isKubernetes() {\n     return System.getenv(\"KUBERNETES_SERVICE_HOST\") != null;\n   }\n \n+  /**\n+   * Utility to detect the EC2 deployment environment.\n+   *\n+   * @return true, if running on EC2\n+   */\n+  public static boolean isEC2() {\n+    return isEC2WithUUID() || isEC2WithProductUUID() || isEC2WithInstanceIdentity();\n+  }\n+\n+  /**\n+   * Utility to detect the Google compute engine deployment environment.\n+   *\n+   * @return true, if running on gce\n+   */\n+  public static boolean isGoogleComputeEngine() {\n+    return isGCEWithMetadata() || isGCEWithBiosVendor();\n+  }\n+\n+  /**\n+   * Gets the EC2 product code if any.\n+   *\n+   * @return the first product code if any, an empty string otherwise\n+   */\n+  public static String getEC2ProductCode() {\n+    try {\n+      List<String> productCodes = EC2MetadataUtils.getProductCodes();\n+      if (productCodes.size() < 1) {\n+        return \"\";\n+      }\n+      return productCodes.get(0);\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not EC2 instance\n+      // or this EC2 does not have product code\n+      return \"\";\n+    }\n+  }\n+\n+  /**\n+   * @return true if this instance is launched from CFT, false otherwise\n+   */\n+  public static boolean isCFT() {\n+    try {\n+      String userData = EC2MetadataUtils.getUserData();\n+      if (!userData.isEmpty() && userData.contains(\"cft_configure\")) {\n+        return true;\n+      }\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not EC2 instance\n+      // or this EC2 does not have user data\n+      return false;\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * @return true if this instance is launched from EMR, false otherwise\n+   */\n+  public static boolean isEMR() {\n+    try {\n+      String userData = EC2MetadataUtils.getUserData();\n+      if (!userData.isEmpty() && userData.contains(\"emr-apps\")\n+          && userData.contains(\"emr-platform\")) {\n+        return true;\n+      }\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not EC2 instance\n+      // or this EC2 does not have user data\n+      return false;\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Check if this instance is an EC2 instance with UUID file.\n+   * This method does not work on new m5 or c5 ec2 instances.\n+   *\n+   * @return true if jvm runs in EC2 instance with UUID file, false otherwise\n+   */\n+  @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  private static boolean isEC2WithUUID() {\n+    try {\n+      return fileExistAndStartWithIdentifier(\"/sys/hypervisor/uuid\", \"ec2\");\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not EC2 instance\n+      // or this check is not valid\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Check if this instance is an EC2 instance with product UUID file\n+   * This method does not work on new m5 or c5 instances.\n+   *\n+   * @return true if jvm runs in EC2 instance with product UUID file, false otherwise\n+   */\n+  @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  private static boolean isEC2WithProductUUID() {\n+    try {\n+      return fileExistAndStartWithIdentifier(\"/sys/devices/virtual/dmi/id/product_uuid\", \"EC2\");\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not EC2 instance\n+      // or this check is not valid\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Check if this instance is an EC2 instance with instance identity.\n+   * Note that other cloud providers make this instance metadata URL available\n+   * and may thus cause false positive.\n+   *\n+   * @return true if jvm runs in EC2 instance with instance identity, false otherwise\n+   */\n+  private static boolean isEC2WithInstanceIdentity() {\n+    try {\n+      EC2MetadataUtils.getInstanceInfo();\n+      return true;\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not EC2 instance\n+      // or this check is not valid\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * @return true, if running on GCE with google metadata available\n+   */\n+  private static boolean isGCEWithMetadata() {\n+    try {\n+      String url = \"http://metadata.google.internal/computeMetadata/v1/instance/zone\";\n+      HttpGet post = new HttpGet(url);\n+      post.setHeader(\"Metadata-Flavor\", \"Google\");\n+      HttpClient client = HttpClientBuilder.create()\n+          .setDefaultRequestConfig(\n+              RequestConfig.custom()\n+                  .setConnectionRequestTimeout(1000)\n+                  .setConnectTimeout(1000)\n+                  .setSocketTimeout(1000)\n+                  .build())\n+          .build();\n+      HttpResponse response = client.execute(post);\n+\n+      int responseCode = response.getStatusLine().getStatusCode();\n+      if (responseCode != HttpURLConnection.HTTP_OK) {\n+        return false;\n+      }\n+      String zone = EntityUtils.toString(response.getEntity(), \"UTF-8\");\n+      return !zone.isEmpty();\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not GCE instance\n+      // or this GCE does not allow fetching metadata\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * @return true, if running on GCE with Google bios vendor\n+   */\n+  private static boolean isGCEWithBiosVendor() {\n+    try {\n+      Process process = Runtime.getRuntime().exec(\"sudo dmidecode -s bios-vendor\");\n+      try (Reader reader = new InputStreamReader(process.getInputStream())) {\n+        String output = CharStreams.toString(reader);\n+        return output.contains(\"Google\");\n+      }\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not\n+      // running on Google bios vendor\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Checks if the target file exists and starts with the identifier string.\n+   *\n+   * @param filePath the file to check\n+   * @param identifier the string identifier to check\n+   * @return true if file exists and starts with the identifier\n+   */\n+  private static boolean fileExistAndStartWithIdentifier(String filePath,\n+      String identifier) throws IOException {\n+    if (FileUtils.exists(filePath)) {\n+      try (Reader reader = new InputStreamReader(new FileInputStream(filePath))) {\n+        String content = CharStreams.toString(reader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de47fe1986edbb732820d2a26daf607bb8f27aab"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM0MDc4NA==", "bodyText": "Change to read only the identifer size length in the file. Thanks", "url": "https://github.com/Alluxio/alluxio/pull/10825#discussion_r374340784", "createdAt": "2020-02-03T21:06:11Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/util/EnvironmentUtils.java", "diffHunk": "@@ -45,5 +59,197 @@ public static boolean isKubernetes() {\n     return System.getenv(\"KUBERNETES_SERVICE_HOST\") != null;\n   }\n \n+  /**\n+   * Utility to detect the EC2 deployment environment.\n+   *\n+   * @return true, if running on EC2\n+   */\n+  public static boolean isEC2() {\n+    return isEC2WithUUID() || isEC2WithProductUUID() || isEC2WithInstanceIdentity();\n+  }\n+\n+  /**\n+   * Utility to detect the Google compute engine deployment environment.\n+   *\n+   * @return true, if running on gce\n+   */\n+  public static boolean isGoogleComputeEngine() {\n+    return isGCEWithMetadata() || isGCEWithBiosVendor();\n+  }\n+\n+  /**\n+   * Gets the EC2 product code if any.\n+   *\n+   * @return the first product code if any, an empty string otherwise\n+   */\n+  public static String getEC2ProductCode() {\n+    try {\n+      List<String> productCodes = EC2MetadataUtils.getProductCodes();\n+      if (productCodes.size() < 1) {\n+        return \"\";\n+      }\n+      return productCodes.get(0);\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not EC2 instance\n+      // or this EC2 does not have product code\n+      return \"\";\n+    }\n+  }\n+\n+  /**\n+   * @return true if this instance is launched from CFT, false otherwise\n+   */\n+  public static boolean isCFT() {\n+    try {\n+      String userData = EC2MetadataUtils.getUserData();\n+      if (!userData.isEmpty() && userData.contains(\"cft_configure\")) {\n+        return true;\n+      }\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not EC2 instance\n+      // or this EC2 does not have user data\n+      return false;\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * @return true if this instance is launched from EMR, false otherwise\n+   */\n+  public static boolean isEMR() {\n+    try {\n+      String userData = EC2MetadataUtils.getUserData();\n+      if (!userData.isEmpty() && userData.contains(\"emr-apps\")\n+          && userData.contains(\"emr-platform\")) {\n+        return true;\n+      }\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not EC2 instance\n+      // or this EC2 does not have user data\n+      return false;\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Check if this instance is an EC2 instance with UUID file.\n+   * This method does not work on new m5 or c5 ec2 instances.\n+   *\n+   * @return true if jvm runs in EC2 instance with UUID file, false otherwise\n+   */\n+  @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  private static boolean isEC2WithUUID() {\n+    try {\n+      return fileExistAndStartWithIdentifier(\"/sys/hypervisor/uuid\", \"ec2\");\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not EC2 instance\n+      // or this check is not valid\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Check if this instance is an EC2 instance with product UUID file\n+   * This method does not work on new m5 or c5 instances.\n+   *\n+   * @return true if jvm runs in EC2 instance with product UUID file, false otherwise\n+   */\n+  @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  private static boolean isEC2WithProductUUID() {\n+    try {\n+      return fileExistAndStartWithIdentifier(\"/sys/devices/virtual/dmi/id/product_uuid\", \"EC2\");\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not EC2 instance\n+      // or this check is not valid\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Check if this instance is an EC2 instance with instance identity.\n+   * Note that other cloud providers make this instance metadata URL available\n+   * and may thus cause false positive.\n+   *\n+   * @return true if jvm runs in EC2 instance with instance identity, false otherwise\n+   */\n+  private static boolean isEC2WithInstanceIdentity() {\n+    try {\n+      EC2MetadataUtils.getInstanceInfo();\n+      return true;\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not EC2 instance\n+      // or this check is not valid\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * @return true, if running on GCE with google metadata available\n+   */\n+  private static boolean isGCEWithMetadata() {\n+    try {\n+      String url = \"http://metadata.google.internal/computeMetadata/v1/instance/zone\";\n+      HttpGet post = new HttpGet(url);\n+      post.setHeader(\"Metadata-Flavor\", \"Google\");\n+      HttpClient client = HttpClientBuilder.create()\n+          .setDefaultRequestConfig(\n+              RequestConfig.custom()\n+                  .setConnectionRequestTimeout(1000)\n+                  .setConnectTimeout(1000)\n+                  .setSocketTimeout(1000)\n+                  .build())\n+          .build();\n+      HttpResponse response = client.execute(post);\n+\n+      int responseCode = response.getStatusLine().getStatusCode();\n+      if (responseCode != HttpURLConnection.HTTP_OK) {\n+        return false;\n+      }\n+      String zone = EntityUtils.toString(response.getEntity(), \"UTF-8\");\n+      return !zone.isEmpty();\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not GCE instance\n+      // or this GCE does not allow fetching metadata\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * @return true, if running on GCE with Google bios vendor\n+   */\n+  private static boolean isGCEWithBiosVendor() {\n+    try {\n+      Process process = Runtime.getRuntime().exec(\"sudo dmidecode -s bios-vendor\");\n+      try (Reader reader = new InputStreamReader(process.getInputStream())) {\n+        String output = CharStreams.toString(reader);\n+        return output.contains(\"Google\");\n+      }\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not\n+      // running on Google bios vendor\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Checks if the target file exists and starts with the identifier string.\n+   *\n+   * @param filePath the file to check\n+   * @param identifier the string identifier to check\n+   * @return true if file exists and starts with the identifier\n+   */\n+  private static boolean fileExistAndStartWithIdentifier(String filePath,\n+      String identifier) throws IOException {\n+    if (FileUtils.exists(filePath)) {\n+      try (Reader reader = new InputStreamReader(new FileInputStream(filePath))) {\n+        String content = CharStreams.toString(reader);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI5Mjc1MA=="}, "originalCommit": {"oid": "de47fe1986edbb732820d2a26daf607bb8f27aab"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDcwOTA5OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/util/EnvironmentUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxOToyNzoyNVrOFk9HXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMTowNjoxNlrOFk_8zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI5NDM2Nw==", "bodyText": "nit: rename to ec2UUIDFileExistsWithID?", "url": "https://github.com/Alluxio/alluxio/pull/10825#discussion_r374294367", "createdAt": "2020-02-03T19:27:25Z", "author": {"login": "madanadit"}, "path": "core/common/src/main/java/alluxio/util/EnvironmentUtils.java", "diffHunk": "@@ -45,5 +59,197 @@ public static boolean isKubernetes() {\n     return System.getenv(\"KUBERNETES_SERVICE_HOST\") != null;\n   }\n \n+  /**\n+   * Utility to detect the EC2 deployment environment.\n+   *\n+   * @return true, if running on EC2\n+   */\n+  public static boolean isEC2() {\n+    return isEC2WithUUID() || isEC2WithProductUUID() || isEC2WithInstanceIdentity();\n+  }\n+\n+  /**\n+   * Utility to detect the Google compute engine deployment environment.\n+   *\n+   * @return true, if running on gce\n+   */\n+  public static boolean isGoogleComputeEngine() {\n+    return isGCEWithMetadata() || isGCEWithBiosVendor();\n+  }\n+\n+  /**\n+   * Gets the EC2 product code if any.\n+   *\n+   * @return the first product code if any, an empty string otherwise\n+   */\n+  public static String getEC2ProductCode() {\n+    try {\n+      List<String> productCodes = EC2MetadataUtils.getProductCodes();\n+      if (productCodes.size() < 1) {\n+        return \"\";\n+      }\n+      return productCodes.get(0);\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not EC2 instance\n+      // or this EC2 does not have product code\n+      return \"\";\n+    }\n+  }\n+\n+  /**\n+   * @return true if this instance is launched from CFT, false otherwise\n+   */\n+  public static boolean isCFT() {\n+    try {\n+      String userData = EC2MetadataUtils.getUserData();\n+      if (!userData.isEmpty() && userData.contains(\"cft_configure\")) {\n+        return true;\n+      }\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not EC2 instance\n+      // or this EC2 does not have user data\n+      return false;\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * @return true if this instance is launched from EMR, false otherwise\n+   */\n+  public static boolean isEMR() {\n+    try {\n+      String userData = EC2MetadataUtils.getUserData();\n+      if (!userData.isEmpty() && userData.contains(\"emr-apps\")\n+          && userData.contains(\"emr-platform\")) {\n+        return true;\n+      }\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not EC2 instance\n+      // or this EC2 does not have user data\n+      return false;\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Check if this instance is an EC2 instance with UUID file.\n+   * This method does not work on new m5 or c5 ec2 instances.\n+   *\n+   * @return true if jvm runs in EC2 instance with UUID file, false otherwise\n+   */\n+  @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  private static boolean isEC2WithUUID() {\n+    try {\n+      return fileExistAndStartWithIdentifier(\"/sys/hypervisor/uuid\", \"ec2\");\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not EC2 instance\n+      // or this check is not valid\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Check if this instance is an EC2 instance with product UUID file\n+   * This method does not work on new m5 or c5 instances.\n+   *\n+   * @return true if jvm runs in EC2 instance with product UUID file, false otherwise\n+   */\n+  @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  private static boolean isEC2WithProductUUID() {\n+    try {\n+      return fileExistAndStartWithIdentifier(\"/sys/devices/virtual/dmi/id/product_uuid\", \"EC2\");\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not EC2 instance\n+      // or this check is not valid\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Check if this instance is an EC2 instance with instance identity.\n+   * Note that other cloud providers make this instance metadata URL available\n+   * and may thus cause false positive.\n+   *\n+   * @return true if jvm runs in EC2 instance with instance identity, false otherwise\n+   */\n+  private static boolean isEC2WithInstanceIdentity() {\n+    try {\n+      EC2MetadataUtils.getInstanceInfo();\n+      return true;\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not EC2 instance\n+      // or this check is not valid\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * @return true, if running on GCE with google metadata available\n+   */\n+  private static boolean isGCEWithMetadata() {\n+    try {\n+      String url = \"http://metadata.google.internal/computeMetadata/v1/instance/zone\";\n+      HttpGet post = new HttpGet(url);\n+      post.setHeader(\"Metadata-Flavor\", \"Google\");\n+      HttpClient client = HttpClientBuilder.create()\n+          .setDefaultRequestConfig(\n+              RequestConfig.custom()\n+                  .setConnectionRequestTimeout(1000)\n+                  .setConnectTimeout(1000)\n+                  .setSocketTimeout(1000)\n+                  .build())\n+          .build();\n+      HttpResponse response = client.execute(post);\n+\n+      int responseCode = response.getStatusLine().getStatusCode();\n+      if (responseCode != HttpURLConnection.HTTP_OK) {\n+        return false;\n+      }\n+      String zone = EntityUtils.toString(response.getEntity(), \"UTF-8\");\n+      return !zone.isEmpty();\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not GCE instance\n+      // or this GCE does not allow fetching metadata\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * @return true, if running on GCE with Google bios vendor\n+   */\n+  private static boolean isGCEWithBiosVendor() {\n+    try {\n+      Process process = Runtime.getRuntime().exec(\"sudo dmidecode -s bios-vendor\");\n+      try (Reader reader = new InputStreamReader(process.getInputStream())) {\n+        String output = CharStreams.toString(reader);\n+        return output.contains(\"Google\");\n+      }\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not\n+      // running on Google bios vendor\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Checks if the target file exists and starts with the identifier string.\n+   *\n+   * @param filePath the file to check\n+   * @param identifier the string identifier to check\n+   * @return true if file exists and starts with the identifier\n+   */\n+  private static boolean fileExistAndStartWithIdentifier(String filePath,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de47fe1986edbb732820d2a26daf607bb8f27aab"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM0MDgxMg==", "bodyText": "Done.", "url": "https://github.com/Alluxio/alluxio/pull/10825#discussion_r374340812", "createdAt": "2020-02-03T21:06:16Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/util/EnvironmentUtils.java", "diffHunk": "@@ -45,5 +59,197 @@ public static boolean isKubernetes() {\n     return System.getenv(\"KUBERNETES_SERVICE_HOST\") != null;\n   }\n \n+  /**\n+   * Utility to detect the EC2 deployment environment.\n+   *\n+   * @return true, if running on EC2\n+   */\n+  public static boolean isEC2() {\n+    return isEC2WithUUID() || isEC2WithProductUUID() || isEC2WithInstanceIdentity();\n+  }\n+\n+  /**\n+   * Utility to detect the Google compute engine deployment environment.\n+   *\n+   * @return true, if running on gce\n+   */\n+  public static boolean isGoogleComputeEngine() {\n+    return isGCEWithMetadata() || isGCEWithBiosVendor();\n+  }\n+\n+  /**\n+   * Gets the EC2 product code if any.\n+   *\n+   * @return the first product code if any, an empty string otherwise\n+   */\n+  public static String getEC2ProductCode() {\n+    try {\n+      List<String> productCodes = EC2MetadataUtils.getProductCodes();\n+      if (productCodes.size() < 1) {\n+        return \"\";\n+      }\n+      return productCodes.get(0);\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not EC2 instance\n+      // or this EC2 does not have product code\n+      return \"\";\n+    }\n+  }\n+\n+  /**\n+   * @return true if this instance is launched from CFT, false otherwise\n+   */\n+  public static boolean isCFT() {\n+    try {\n+      String userData = EC2MetadataUtils.getUserData();\n+      if (!userData.isEmpty() && userData.contains(\"cft_configure\")) {\n+        return true;\n+      }\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not EC2 instance\n+      // or this EC2 does not have user data\n+      return false;\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * @return true if this instance is launched from EMR, false otherwise\n+   */\n+  public static boolean isEMR() {\n+    try {\n+      String userData = EC2MetadataUtils.getUserData();\n+      if (!userData.isEmpty() && userData.contains(\"emr-apps\")\n+          && userData.contains(\"emr-platform\")) {\n+        return true;\n+      }\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not EC2 instance\n+      // or this EC2 does not have user data\n+      return false;\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Check if this instance is an EC2 instance with UUID file.\n+   * This method does not work on new m5 or c5 ec2 instances.\n+   *\n+   * @return true if jvm runs in EC2 instance with UUID file, false otherwise\n+   */\n+  @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  private static boolean isEC2WithUUID() {\n+    try {\n+      return fileExistAndStartWithIdentifier(\"/sys/hypervisor/uuid\", \"ec2\");\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not EC2 instance\n+      // or this check is not valid\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Check if this instance is an EC2 instance with product UUID file\n+   * This method does not work on new m5 or c5 instances.\n+   *\n+   * @return true if jvm runs in EC2 instance with product UUID file, false otherwise\n+   */\n+  @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  private static boolean isEC2WithProductUUID() {\n+    try {\n+      return fileExistAndStartWithIdentifier(\"/sys/devices/virtual/dmi/id/product_uuid\", \"EC2\");\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not EC2 instance\n+      // or this check is not valid\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Check if this instance is an EC2 instance with instance identity.\n+   * Note that other cloud providers make this instance metadata URL available\n+   * and may thus cause false positive.\n+   *\n+   * @return true if jvm runs in EC2 instance with instance identity, false otherwise\n+   */\n+  private static boolean isEC2WithInstanceIdentity() {\n+    try {\n+      EC2MetadataUtils.getInstanceInfo();\n+      return true;\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not EC2 instance\n+      // or this check is not valid\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * @return true, if running on GCE with google metadata available\n+   */\n+  private static boolean isGCEWithMetadata() {\n+    try {\n+      String url = \"http://metadata.google.internal/computeMetadata/v1/instance/zone\";\n+      HttpGet post = new HttpGet(url);\n+      post.setHeader(\"Metadata-Flavor\", \"Google\");\n+      HttpClient client = HttpClientBuilder.create()\n+          .setDefaultRequestConfig(\n+              RequestConfig.custom()\n+                  .setConnectionRequestTimeout(1000)\n+                  .setConnectTimeout(1000)\n+                  .setSocketTimeout(1000)\n+                  .build())\n+          .build();\n+      HttpResponse response = client.execute(post);\n+\n+      int responseCode = response.getStatusLine().getStatusCode();\n+      if (responseCode != HttpURLConnection.HTTP_OK) {\n+        return false;\n+      }\n+      String zone = EntityUtils.toString(response.getEntity(), \"UTF-8\");\n+      return !zone.isEmpty();\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not GCE instance\n+      // or this GCE does not allow fetching metadata\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * @return true, if running on GCE with Google bios vendor\n+   */\n+  private static boolean isGCEWithBiosVendor() {\n+    try {\n+      Process process = Runtime.getRuntime().exec(\"sudo dmidecode -s bios-vendor\");\n+      try (Reader reader = new InputStreamReader(process.getInputStream())) {\n+        String output = CharStreams.toString(reader);\n+        return output.contains(\"Google\");\n+      }\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not\n+      // running on Google bios vendor\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Checks if the target file exists and starts with the identifier string.\n+   *\n+   * @param filePath the file to check\n+   * @param identifier the string identifier to check\n+   * @return true if file exists and starts with the identifier\n+   */\n+  private static boolean fileExistAndStartWithIdentifier(String filePath,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI5NDM2Nw=="}, "originalCommit": {"oid": "de47fe1986edbb732820d2a26daf607bb8f27aab"}, "originalPosition": 209}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTAzMDE4OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/util/EnvironmentUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMToxNzoxM1rOFlAPag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMToxNzoxM1rOFlAPag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM0NTU3OA==", "bodyText": "nit: is this early line break needed?", "url": "https://github.com/Alluxio/alluxio/pull/10825#discussion_r374345578", "createdAt": "2020-02-03T21:17:13Z", "author": {"login": "madanadit"}, "path": "core/common/src/main/java/alluxio/util/EnvironmentUtils.java", "diffHunk": "@@ -45,5 +60,200 @@ public static boolean isKubernetes() {\n     return System.getenv(\"KUBERNETES_SERVICE_HOST\") != null;\n   }\n \n+  /**\n+   * Utility to detect the EC2 deployment environment.\n+   *\n+   * @return true, if running on EC2\n+   */\n+  public static boolean isEC2() {\n+    return isEC2WithUUID() || isEC2WithProductUUID() || isEC2WithInstanceIdentity();\n+  }\n+\n+  /**\n+   * Utility to detect the Google compute engine deployment environment.\n+   *\n+   * @return true, if running on gce\n+   */\n+  public static boolean isGoogleComputeEngine() {\n+    return isGCEWithMetadata() || isGCEWithBiosVendor();\n+  }\n+\n+  /**\n+   * Gets the EC2 product code if any.\n+   *\n+   * @return the first product code if any, an empty string otherwise\n+   */\n+  public static String getEC2ProductCode() {\n+    try {\n+      List<String> productCodes = EC2MetadataUtils.getProductCodes();\n+      if (productCodes.size() < 1) {\n+        return \"\";\n+      }\n+      return productCodes.get(0);\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not EC2 instance\n+      // or this EC2 does not have product code\n+      return \"\";\n+    }\n+  }\n+\n+  /**\n+   * Checks whether the given user data belongs to an instance launched\n+   * through CFT.\n+   *\n+   * @param userData the ec2 instance user data\n+   * @return true if this instance is launched from CFT, false otherwise\n+   */\n+  public static boolean isCFT(String userData) {\n+    return !userData.isEmpty() && userData.contains(\"cft_configure\");\n+  }\n+\n+  /**\n+   * Checks whether the given user data belongs to an instance launched\n+   * through EMR.\n+   *\n+   * @param userData the ec2 instance user data\n+   * @return true if this instance is launched from EMR, false otherwise\n+   */\n+  public static boolean isEMR(String userData) {\n+    return !userData.isEmpty() && userData.contains(\"emr-apps\")\n+        && userData.contains(\"emr-platform\");\n+  }\n+\n+  /**\n+   * Check if this instance is an EC2 instance with UUID file.\n+   * This method does not work on new m5 or c5 ec2 instances.\n+   *\n+   * @return true if jvm runs in EC2 instance with UUID file, false otherwise\n+   */\n+  @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  private static boolean isEC2WithUUID() {\n+    try {\n+      return ec2UUIDFileExistsWithID(\"/sys/hypervisor/uuid\", \"ec2\");\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not EC2 instance\n+      // or this check is not valid\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Check if this instance is an EC2 instance with product UUID file\n+   * This method does not work on new m5 or c5 instances.\n+   *\n+   * @return true if jvm runs in EC2 instance with product UUID file, false otherwise\n+   */\n+  @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  private static boolean isEC2WithProductUUID() {\n+    try {\n+      return ec2UUIDFileExistsWithID(\"/sys/devices/virtual/dmi/id/product_uuid\", \"EC2\");\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not EC2 instance\n+      // or this check is not valid\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Check if this instance is an EC2 instance with instance identity.\n+   * Note that other cloud providers make this instance metadata URL available\n+   * and may thus cause false positive.\n+   *\n+   * @return true if jvm runs in EC2 instance with instance identity, false otherwise\n+   */\n+  private static boolean isEC2WithInstanceIdentity() {\n+    try {\n+      EC2MetadataUtils.getInstanceInfo();\n+      return true;\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not EC2 instance\n+      // or this check is not valid\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * @return true, if running on GCE with google metadata available\n+   */\n+  private static boolean isGCEWithMetadata() {\n+    try {\n+      String url = \"http://metadata.google.internal/computeMetadata/v1/instance/zone\";\n+      HttpGet post = new HttpGet(url);\n+      post.setHeader(\"Metadata-Flavor\", \"Google\");\n+      HttpClient client = HttpClientBuilder.create()\n+          .setDefaultRequestConfig(\n+              RequestConfig.custom()\n+                  .setConnectionRequestTimeout(1000)\n+                  .setConnectTimeout(1000)\n+                  .setSocketTimeout(1000)\n+                  .build())\n+          .build();\n+      HttpResponse response = client.execute(post);\n+\n+      int responseCode = response.getStatusLine().getStatusCode();\n+      if (responseCode != HttpURLConnection.HTTP_OK) {\n+        return false;\n+      }\n+      String zone = EntityUtils.toString(response.getEntity(), \"UTF-8\");\n+      return !zone.isEmpty();\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not GCE instance\n+      // or this GCE does not allow fetching metadata\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * @return true, if running on GCE with Google bios vendor\n+   */\n+  private static boolean isGCEWithBiosVendor() {\n+    try {\n+      Process process = Runtime.getRuntime().exec(\"sudo dmidecode -s bios-vendor\");\n+      try (Reader reader = new InputStreamReader(process.getInputStream())) {\n+        String output = CharStreams.toString(reader);\n+        return output.contains(\"Google\");\n+      }\n+    } catch (Throwable t) {\n+      // Exceptions are expected if this instance is not\n+      // running on Google bios vendor\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Checks if the target ec2 UUID file exists and starts with the identifier string.\n+   *\n+   * @param filePath the file to check\n+   * @param identifier the string identifier to check\n+   * @return true if file exists and starts with the identifier\n+   */\n+  private static boolean ec2UUIDFileExistsWithID(String filePath,\n+      String identifier) throws IOException {\n+    if (FileUtils.exists(filePath)) {\n+      int length = identifier.length();\n+      // Read the first several bytes to see\n+      // if file starts with id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "271f7ac2d6ab6a837f79db3e94319052abe73b55"}, "originalPosition": 203}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2122, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}