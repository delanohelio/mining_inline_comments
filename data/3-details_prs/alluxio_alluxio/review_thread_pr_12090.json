{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMTY5MTM4", "number": 12090, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzoxNDoyMFrOEjPNGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzoxNzoxNVrOEjPSbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Mzg0NzMwOnYy", "diffSide": "RIGHT", "path": "job/common/src/main/java/alluxio/job/plan/transform/CompactConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzoxNDoyMFrOHRe8nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzozMDoyOFrOHRfjQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA5NDg3Nw==", "bodyText": "curious why affectedPath includes input?", "url": "https://github.com/Alluxio/alluxio/pull/12090#discussion_r488094877", "createdAt": "2020-09-14T17:14:20Z", "author": {"login": "yuzhu"}, "path": "job/common/src/main/java/alluxio/job/plan/transform/CompactConfig.java", "diffHunk": "@@ -161,4 +163,9 @@ public String toString() {\n   public String getName() {\n     return NAME;\n   }\n+\n+  @Override\n+  public Collection<String> affectedPaths() {\n+    return ImmutableList.of(mInput, mOutput);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e222d44a7324104935d360ed763f2d2804d618f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEwNDc2OQ==", "bodyText": "it may be a bit weird but I think including input is correct from the user's point of view.", "url": "https://github.com/Alluxio/alluxio/pull/12090#discussion_r488104769", "createdAt": "2020-09-14T17:30:28Z", "author": {"login": "bradyoo"}, "path": "job/common/src/main/java/alluxio/job/plan/transform/CompactConfig.java", "diffHunk": "@@ -161,4 +163,9 @@ public String toString() {\n   public String getName() {\n     return NAME;\n   }\n+\n+  @Override\n+  public Collection<String> affectedPaths() {\n+    return ImmutableList.of(mInput, mOutput);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA5NDg3Nw=="}, "originalCommit": {"oid": "1e222d44a7324104935d360ed763f2d2804d618f"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Mzg2MDk0OnYy", "diffSide": "RIGHT", "path": "job/common/src/test/java/alluxio/job/CrashPlanConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzoxNzoxNlrOHRfEHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzoxNzoxNlrOHRfEHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA5Njc5Nw==", "bodyText": "use Objects.hashCode() ?", "url": "https://github.com/Alluxio/alluxio/pull/12090#discussion_r488096797", "createdAt": "2020-09-14T17:17:16Z", "author": {"login": "yuzhu"}, "path": "job/common/src/test/java/alluxio/job/CrashPlanConfig.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.job;\n+\n+import alluxio.job.plan.PlanConfig;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.Collection;\n+\n+/**\n+ * Config for a plan that does nothing.\n+ */\n+public class CrashPlanConfig implements PlanConfig {\n+\n+  public static final String NAME = \"Crash\";\n+\n+  public String mPath;\n+\n+  public CrashPlanConfig(@JsonProperty(\"path\") String path) {\n+    mPath = path;\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {\n+    if (obj == null) {\n+      return false;\n+    }\n+    return obj instanceof CrashPlanConfig;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return 42;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e222d44a7324104935d360ed763f2d2804d618f"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1169, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}