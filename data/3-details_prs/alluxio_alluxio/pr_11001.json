{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MjI5OTI0", "number": 11001, "title": "Refactor CommonUtils.waitFor to use value supplier", "bodyText": "We have many instances in our code where we use CommonUtils.waitFor to wait for a certain condition to be equal to something but the last state of the object is not clear when there is a Timeout. This code has a new API that could be opted into to get such a benefit.", "createdAt": "2020-02-24T21:03:41Z", "url": "https://github.com/Alluxio/alluxio/pull/11001", "merged": true, "mergeCommit": {"oid": "e10c5b72bc031cbd7c2c39f773bb6425380b0b9b"}, "closed": true, "closedAt": "2020-02-26T22:39:06Z", "author": {"login": "bradyoo"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHkBuSgH2gAyMzc5MjI5OTI0OjFjMTM2ZTFkNmViODIzNTU3OTYzNjllNzE2ZDY3ZDhmMDAzMDBhNDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIOmsugFqTM2NTI5NjcyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1c136e1d6eb82355796369e716d67d8f00300a43", "author": {"user": {"login": "bradyoo", "name": "Bradley Yoo"}}, "url": "https://github.com/Alluxio/alluxio/commit/1c136e1d6eb82355796369e716d67d8f00300a43", "committedDate": "2020-02-24T21:02:01Z", "message": "Refactor CommonUtils.waitFor and use new api capabilities on couple usages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "066e79201ed5b12dab1c88988ad3827fa7a35b4b", "author": {"user": {"login": "bradyoo", "name": "Bradley Yoo"}}, "url": "https://github.com/Alluxio/alluxio/commit/066e79201ed5b12dab1c88988ad3827fa7a35b4b", "committedDate": "2020-02-24T21:09:34Z", "message": "refactor JobGrpcClientUtils.waitFor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNzAyNzY4", "url": "https://github.com/Alluxio/alluxio/pull/11001#pullrequestreview-363702768", "createdAt": "2020-02-24T21:10:46Z", "commit": {"oid": "066e79201ed5b12dab1c88988ad3827fa7a35b4b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMToxMDo0NlrOFtv9xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMToxMDo0NlrOFtv9xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxNjEwMA==", "bodyText": "Being able to ObjectUtils.toString the previous value is the main benefit.", "url": "https://github.com/Alluxio/alluxio/pull/11001#discussion_r383516100", "createdAt": "2020-02-24T21:10:46Z", "author": {"login": "bradyoo"}, "path": "core/common/src/main/java/alluxio/util/CommonUtils.java", "diffHunk": "@@ -321,32 +323,53 @@ public static void waitFor(String description, Supplier<Boolean> condition)\n    */\n   public static void waitFor(String description, Supplier<Boolean> condition,\n       WaitForOptions options) throws InterruptedException, TimeoutException {\n-    waitForResult(description, () -> condition.get() ? true : null, options);\n+    waitForResult(description, condition, (b) -> b, options);\n   }\n \n   /**\n-   * Waits for an operation to return a non-null value with a specified timeout.\n+   * Waits for the object to meet a certain condition.\n    *\n-   * @param description the description of this operation\n-   * @param operation the operation\n+   * @param description a description of what causes condition to be met.\n+   * @param objectSupplier the object to check the condition for\n+   * @param condition the condition to wait on\n+   * @param <T> type of the object\n+   * @return the object\n+   * @throws TimeoutException if the function times out while waiting for the condition to be true\n+   * @throws InterruptedException if the thread was interrupted\n+   */\n+  public static <T> T waitForResult(String description, Supplier<T> objectSupplier,\n+                                    Function<T, Boolean> condition)\n+      throws TimeoutException, InterruptedException {\n+    return waitForResult(description, objectSupplier, condition, WaitForOptions.defaults());\n+  }\n+\n+  /**\n+   * Waits for the object to meet a certain condition.\n+   *\n+   * @param description a description of what causes condition to be met.\n+   * @param objectSupplier the object to check the condition for\n+   * @param condition the condition to wait on\n    * @param options the options to use\n-   * @param <T> the type of the return value\n-   * @throws TimeoutException if the function times out while waiting to get a non-null value\n-   * @return the first non-null value generated by the operation\n+   * @param <T> type of the object\n+   * @return the object\n+   * @throws TimeoutException if the function times out while waiting for the condition to be true\n+   * @throws InterruptedException if the thread was interrupted\n    */\n-  public static <T> T waitForResult(String description, Supplier<T> operation,\n-      WaitForOptions options) throws InterruptedException, TimeoutException {\n-    T t;\n+  public static <T> T waitForResult(String description, Supplier<T> objectSupplier,\n+                                    Function<T, Boolean> condition, WaitForOptions options)\n+      throws TimeoutException, InterruptedException {\n+    T value;\n     long start = System.currentTimeMillis();\n     int interval = options.getInterval();\n     int timeout = options.getTimeoutMs();\n-    while ((t = operation.get()) == null) {\n+    while (condition.apply(value = objectSupplier.get()) != true) {\n       if (timeout != WaitForOptions.NEVER && System.currentTimeMillis() - start > timeout) {\n-        throw new TimeoutException(\"Timed out waiting for \" + description + \" options: \" + options);\n+        throw new TimeoutException(\"Timed out waiting for \" + description + \" options: \" + options\n+            + \" last value: \" + ObjectUtils.toString(value));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "066e79201ed5b12dab1c88988ad3827fa7a35b4b"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f20595067fbd3391a26f9fbd515320a29006cf35", "author": {"user": {"login": "bradyoo", "name": "Bradley Yoo"}}, "url": "https://github.com/Alluxio/alluxio/commit/f20595067fbd3391a26f9fbd515320a29006cf35", "committedDate": "2020-02-24T21:35:44Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0caea0226c8745db1a8f0c36f3a6c732fd02954", "author": {"user": {"login": "bradyoo", "name": "Bradley Yoo"}}, "url": "https://github.com/Alluxio/alluxio/commit/d0caea0226c8745db1a8f0c36f3a6c732fd02954", "committedDate": "2020-02-24T21:36:51Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15a03b38f04fd6aa83a2755d07221a4cf8d9cc6e", "author": {"user": {"login": "bradyoo", "name": "Bradley Yoo"}}, "url": "https://github.com/Alluxio/alluxio/commit/15a03b38f04fd6aa83a2755d07221a4cf8d9cc6e", "committedDate": "2020-02-24T21:59:42Z", "message": "fix build error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1Mjk2NzI1", "url": "https://github.com/Alluxio/alluxio/pull/11001#pullrequestreview-365296725", "createdAt": "2020-02-26T22:38:25Z", "commit": {"oid": "15a03b38f04fd6aa83a2755d07221a4cf8d9cc6e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4886, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}