{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NjUyODY3", "number": 11518, "title": "Add profile agent reporting to ClientIOBench", "bodyText": "", "createdAt": "2020-06-04T07:48:58Z", "url": "https://github.com/Alluxio/alluxio/pull/11518", "merged": true, "mergeCommit": {"oid": "a108a6b7176fd9aebcffb62a95dde2001e738128"}, "closed": true, "closedAt": "2020-06-08T20:03:12Z", "author": {"login": "HelloHorizon"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcn5sGOgBqjM0MDU2NzIzMDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpWHGxgFqTQyNjU3NzYwOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "671093b275287b5d1e7e0f04a50cf0acfbf4232a", "author": {"user": {"login": "HelloHorizon", "name": "Shouwei Chen"}}, "url": "https://github.com/Alluxio/alluxio/commit/671093b275287b5d1e7e0f04a50cf0acfbf4232a", "committedDate": "2020-06-04T08:03:24Z", "message": "Remove IOEception"}, "afterCommit": {"oid": "f38041128e3dc01fec76cb2dceec740aa64f06fb", "author": {"user": {"login": "HelloHorizon", "name": "Shouwei Chen"}}, "url": "https://github.com/Alluxio/alluxio/commit/f38041128e3dc01fec76cb2dceec740aa64f06fb", "committedDate": "2020-06-04T08:21:33Z", "message": "Resolve conflict"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NjA5MTYy", "url": "https://github.com/Alluxio/alluxio/pull/11518#pullrequestreview-424609162", "createdAt": "2020-06-04T16:09:20Z", "commit": {"oid": "8d51be0de699f23fdb4629efd747a0861b09c38a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjowOToyMFrOGfNXxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjo1NTo1N1rOGfPKng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM3ODExNw==", "bodyText": "Since this is common, and may be common to more, can we just put this in BaseParameters?", "url": "https://github.com/Alluxio/alluxio/pull/11518#discussion_r435378117", "createdAt": "2020-06-04T16:09:20Z", "author": {"login": "gpang"}, "path": "stress/common/src/main/java/alluxio/stress/client/ClientIOParameters.java", "diffHunk": "@@ -93,6 +93,11 @@\n           + \"file will be round-robin across these number of workers.\")\n   public int mWriteNumWorkers = 1;\n \n+  @Parameter(names = {\"--profile-agent\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d51be0de699f23fdb4629efd747a0861b09c38a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwMjM3NA==", "bodyText": "Can we add this response time graph before the time to first byte graph? You can just move this line up before the for loop, since it will add it to the list first.", "url": "https://github.com/Alluxio/alluxio/pull/11518#discussion_r435402374", "createdAt": "2020-06-04T16:47:38Z", "author": {"login": "gpang"}, "path": "stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java", "diffHunk": "@@ -202,8 +276,21 @@ public ClientIOTaskResult aggregate(Iterable<TaskResult> results) throws Excepti\n               String series = summary.mParameters.getDescription(fieldNames.getSecond());\n               responseTimeGraph.addDataSeries(series, summary.getThroughputData());\n               responseTimeGraph.setErrors(series, summary.collectErrors());\n-            }\n \n+              for (Map.Entry<String, SummaryStatistics> entry :\n+                  getStatisticsPerMethod().entrySet()) {\n+                final String method = entry.getKey();\n+                final LineGraph.Data timeToFirstByte = entry.getValue().computeTimeData();\n+\n+                if (method.equals(\"readChunk\")) {\n+                  LineGraph timeToFirstByteLineGraph =\n+                      new LineGraph(operation + \" - Time To First Byte (ms) \" + method, subTitle,\n+                          \"Percentile\", \"Time To First Byte (ms)\");\n+                  timeToFirstByteLineGraph.addDataSeries(series, timeToFirstByte);\n+                  graphs.add(timeToFirstByteLineGraph);\n+                }\n+              }\n+            }\n             graphs.add(responseTimeGraph);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d51be0de699f23fdb4629efd747a0861b09c38a"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwNTQyNw==", "bodyText": "this may need to catch additional ones like: https://github.com/Alluxio/alluxio/blob/master/stress/shell/src/main/java/alluxio/stress/cli/StressMasterBench.java#L243", "url": "https://github.com/Alluxio/alluxio/pull/11518#discussion_r435405427", "createdAt": "2020-06-04T16:52:34Z", "author": {"login": "gpang"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java", "diffHunk": "@@ -164,9 +184,121 @@ public ClientIOTaskResult runLocal() throws Exception {\n     ClientIOTaskResult.ThreadCountResult result = context.getResult();\n     LOG.info(String.format(\"thread count: %d, errors: %d, IO throughput (MB/s): %f\", numThreads,\n         result.getErrors().size(), result.getIOMBps()));\n+\n     return result;\n   }\n \n+  /**\n+   * Read the log file from java agent log file.\n+   *\n+   * @param clientIOTaskResult client io task result\n+   * @return ClientIOTaskResult with java agent info\n+   * @throws IOException\n+   */\n+  @SuppressFBWarnings(value = \"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  public synchronized ClientIOTaskResult addAdditionalResult(ClientIOTaskResult clientIOTaskResult)\n+      throws IOException {\n+    Map<String, PartialResultStatistic> methodNameToHistogram = new HashMap<>();\n+\n+    try (final BufferedReader reader = new BufferedReader(new FileReader(AGENT_OUTPUT_PATH))) {\n+      String line;\n+\n+      final ObjectMapper objectMapper = new ObjectMapper();\n+      while ((line = reader.readLine()) != null) {\n+        final Map<String, Object> lineMap;\n+        try {\n+          lineMap = objectMapper.readValue(line, Map.class);\n+        } catch (JsonParseException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d51be0de699f23fdb4629efd747a0861b09c38a"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwNTc5Mg==", "bodyText": "you may have to do do the special casting like here: https://github.com/Alluxio/alluxio/blob/master/stress/shell/src/main/java/alluxio/stress/cli/StressMasterBench.java#L250", "url": "https://github.com/Alluxio/alluxio/pull/11518#discussion_r435405792", "createdAt": "2020-06-04T16:53:14Z", "author": {"login": "gpang"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java", "diffHunk": "@@ -164,9 +184,121 @@ public ClientIOTaskResult runLocal() throws Exception {\n     ClientIOTaskResult.ThreadCountResult result = context.getResult();\n     LOG.info(String.format(\"thread count: %d, errors: %d, IO throughput (MB/s): %f\", numThreads,\n         result.getErrors().size(), result.getIOMBps()));\n+\n     return result;\n   }\n \n+  /**\n+   * Read the log file from java agent log file.\n+   *\n+   * @param clientIOTaskResult client io task result\n+   * @return ClientIOTaskResult with java agent info\n+   * @throws IOException\n+   */\n+  @SuppressFBWarnings(value = \"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  public synchronized ClientIOTaskResult addAdditionalResult(ClientIOTaskResult clientIOTaskResult)\n+      throws IOException {\n+    Map<String, PartialResultStatistic> methodNameToHistogram = new HashMap<>();\n+\n+    try (final BufferedReader reader = new BufferedReader(new FileReader(AGENT_OUTPUT_PATH))) {\n+      String line;\n+\n+      final ObjectMapper objectMapper = new ObjectMapper();\n+      while ((line = reader.readLine()) != null) {\n+        final Map<String, Object> lineMap;\n+        try {\n+          lineMap = objectMapper.readValue(line, Map.class);\n+        } catch (JsonParseException e) {\n+          // skip the last line of a not completed file\n+          break;\n+        }\n+\n+        final String type = (String) lineMap.get(\"type\");\n+        final String methodName = (String) lineMap.get(\"methodName\");\n+        final Integer duration = (Integer) lineMap.get(\"duration\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d51be0de699f23fdb4629efd747a0861b09c38a"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwNzUxOA==", "bodyText": "This seems to share a lot with : https://github.com/Alluxio/alluxio/blob/master/stress/shell/src/main/java/alluxio/stress/cli/StressMasterBench.java#L225\nCan we refactor this out to be shared?\n@bradyoo", "url": "https://github.com/Alluxio/alluxio/pull/11518#discussion_r435407518", "createdAt": "2020-06-04T16:55:57Z", "author": {"login": "gpang"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java", "diffHunk": "@@ -164,9 +184,121 @@ public ClientIOTaskResult runLocal() throws Exception {\n     ClientIOTaskResult.ThreadCountResult result = context.getResult();\n     LOG.info(String.format(\"thread count: %d, errors: %d, IO throughput (MB/s): %f\", numThreads,\n         result.getErrors().size(), result.getIOMBps()));\n+\n     return result;\n   }\n \n+  /**\n+   * Read the log file from java agent log file.\n+   *\n+   * @param clientIOTaskResult client io task result\n+   * @return ClientIOTaskResult with java agent info\n+   * @throws IOException\n+   */\n+  @SuppressFBWarnings(value = \"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  public synchronized ClientIOTaskResult addAdditionalResult(ClientIOTaskResult clientIOTaskResult)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d51be0de699f23fdb4629efd747a0861b09c38a"}, "originalPosition": 88}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "81f5624ff5e117a1e1546daed44a61c9cacfb1ef", "author": {"user": {"login": "HelloHorizon", "name": "Shouwei Chen"}}, "url": "https://github.com/Alluxio/alluxio/commit/81f5624ff5e117a1e1546daed44a61c9cacfb1ef", "committedDate": "2020-06-05T07:50:38Z", "message": "Move profile-agent to baseparameter, add execption and error check"}, "afterCommit": {"oid": "e0de66b98f45faf9031f848770ef9b27897f8d36", "author": {"user": {"login": "HelloHorizon", "name": "Shouwei Chen"}}, "url": "https://github.com/Alluxio/alluxio/commit/e0de66b98f45faf9031f848770ef9b27897f8d36", "committedDate": "2020-06-05T07:25:50Z", "message": "Add HDFS TTFB support"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "080da2169cf43c8228bfeb97ab2861542f1f53c2", "author": {"user": {"login": "HelloHorizon", "name": "Shouwei Chen"}}, "url": "https://github.com/Alluxio/alluxio/commit/080da2169cf43c8228bfeb97ab2861542f1f53c2", "committedDate": "2020-06-05T07:54:44Z", "message": "Move profile-agent to baseparameter, add execption and error check"}, "afterCommit": {"oid": "31a4484e85625eddd39d51235e14bd1eb42716f3", "author": {"user": {"login": "HelloHorizon", "name": "Shouwei Chen"}}, "url": "https://github.com/Alluxio/alluxio/commit/31a4484e85625eddd39d51235e14bd1eb42716f3", "committedDate": "2020-06-05T08:03:09Z", "message": "Move profile-agent to baseparameter, add execption and error check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NDQ2MDQ4", "url": "https://github.com/Alluxio/alluxio/pull/11518#pullrequestreview-425446048", "createdAt": "2020-06-05T16:23:18Z", "commit": {"oid": "90f1abd907e2874bb953dbf0bfbf5227dea756bf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjoyMzoxOVrOGf1Fxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjo0MjoyNFrOGf1reg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAyODg3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      series + \", thread \" + entry.getKey(), entry.getValue().computeTimeData());\n          \n          \n            \n                      series + \", thread: \" + entry.getKey(), entry.getValue().computeTimeData());", "url": "https://github.com/Alluxio/alluxio/pull/11518#discussion_r436028870", "createdAt": "2020-06-05T16:23:19Z", "author": {"login": "gpang"}, "path": "stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java", "diffHunk": "@@ -116,6 +174,13 @@ private long computeLastEndMs() {\n     return data;\n   }\n \n+  private void getTimeToFistByteData(String series, LineGraph lineGraph) {\n+    for (Map.Entry<Integer, SummaryStatistics> entry : mTimeToFirstByte.entrySet()) {\n+      lineGraph.addDataSeries(\n+          series + \", thread \" + entry.getKey(), entry.getValue().computeTimeData());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90f1abd907e2874bb953dbf0bfbf5227dea756bf"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAyOTYyMQ==", "bodyText": "why was static removed?", "url": "https://github.com/Alluxio/alluxio/pull/11518#discussion_r436029621", "createdAt": "2020-06-05T16:24:52Z", "author": {"login": "gpang"}, "path": "stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java", "diffHunk": "@@ -161,7 +226,7 @@ public ClientIOTaskResult aggregate(Iterable<TaskResult> results) throws Excepti\n   /**\n    * The graph generator for this summary.\n    */\n-  public static final class GraphGenerator extends alluxio.stress.GraphGenerator {\n+  public final class GraphGenerator extends alluxio.stress.GraphGenerator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90f1abd907e2874bb953dbf0bfbf5227dea756bf"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAzMDI0Nw==", "bodyText": "Since this is now in base parameters, this block can be moved to Benchmark, right?", "url": "https://github.com/Alluxio/alluxio/pull/11518#discussion_r436030247", "createdAt": "2020-06-05T16:26:01Z", "author": {"login": "gpang"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/StressMasterBench.java", "diffHunk": "@@ -84,8 +84,8 @@ public void prepare() throws Exception {\n           \"fixed count must be > 0. fixedCount: \" + mParameters.mFixedCount);\n     }\n \n-    if (!mParameters.mProfileAgent.isEmpty()) {\n-      mBaseParameters.mJavaOpts.add(\"-javaagent:\" + mParameters.mProfileAgent\n+    if (!mBaseParameters.mProfileAgent.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90f1abd907e2874bb953dbf0bfbf5227dea756bf"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAzMDQyMw==", "bodyText": "Since this is now in base parameters, this block can be moved to Benchmark, right?", "url": "https://github.com/Alluxio/alluxio/pull/11518#discussion_r436030423", "createdAt": "2020-06-05T16:26:19Z", "author": {"login": "gpang"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java", "diffHunk": "@@ -77,6 +89,10 @@ public void prepare() throws Exception {\n           \"%s is a single-node client IO stress test, so it cannot be run in cluster mode without\"\n               + \" flag '%s 1'.\", this.getClass().getName(), BaseParameters.CLUSTER_LIMIT_FLAG));\n     }\n+    if (!mBaseParameters.mProfileAgent.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90f1abd907e2874bb953dbf0bfbf5227dea756bf"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAzODUyMg==", "bodyText": "Why isn't this class just using a Histogram? That is a useful library to handle all the times.", "url": "https://github.com/Alluxio/alluxio/pull/11518#discussion_r436038522", "createdAt": "2020-06-05T16:42:24Z", "author": {"login": "gpang"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java", "diffHunk": "@@ -162,11 +182,132 @@ public ClientIOTaskResult runLocal() throws Exception {\n     service.awaitTermination(30, TimeUnit.SECONDS);\n \n     ClientIOTaskResult.ThreadCountResult result = context.getResult();\n+\n     LOG.info(String.format(\"thread count: %d, errors: %d, IO throughput (MB/s): %f\", numThreads,\n         result.getErrors().size(), result.getIOMBps()));\n+\n     return result;\n   }\n \n+  /**\n+   * Read the log file from java agent log file.\n+   *\n+   * @return summary statistics\n+   * @throws IOException\n+   */\n+  @SuppressFBWarnings(value = \"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  public synchronized SummaryStatistics addAdditionalResult() throws IOException {\n+    Map<String, PartialResultStatistic> timeToFirstByte = new HashMap<>();\n+\n+    try (final BufferedReader reader = new BufferedReader(new FileReader(AGENT_OUTPUT_PATH))) {\n+      String line;\n+\n+      final ObjectMapper objectMapper = new ObjectMapper();\n+      while ((line = reader.readLine()) != null) {\n+        final Map<String, Object> lineMap;\n+        try {\n+          lineMap = objectMapper.readValue(line, Map.class);\n+        } catch (JsonParseException | MismatchedInputException e) {\n+          // skip the last line of a not completed file\n+          break;\n+        }\n+\n+        final String type = (String) lineMap.get(\"type\");\n+        final String methodName = (String) lineMap.get(\"methodName\");\n+        final Integer duration = (Integer) lineMap.get(\"duration\");\n+\n+        if (type == null || methodName == null || duration == null) {\n+          continue;\n+        }\n+\n+        if ((type.equals(\"AlluxioBlockInStream\") && methodName.equals(\"readChunk\"))\n+            || (type.equals(\"HDFSPacketReceiver\") && methodName.equals(\"doRead\"))) {\n+          if (!timeToFirstByte.containsKey(methodName)) {\n+            timeToFirstByte.put(methodName, new PartialResultStatistic());\n+          }\n+\n+          final PartialResultStatistic statistic = timeToFirstByte.get(methodName);\n+          statistic.mTimeToFirstByteNs.add(duration);\n+          statistic.mNumSuccess += 1;\n+\n+          if (duration > statistic.mMaxTimeToFirstByteNs[0]) {\n+            statistic.mMaxTimeToFirstByteNs[0] = duration;\n+            Arrays.sort(statistic.mMaxTimeToFirstByteNs);\n+          }\n+        }\n+      }\n+    }\n+    if (timeToFirstByte.containsKey(\"readChunk\")) {\n+      Collections.sort(timeToFirstByte.get(\"readChunk\").mTimeToFirstByteNs);\n+      SummaryStatistics stats = new SummaryStatistics(\n+          timeToFirstByte.get(\"readChunk\").mNumSuccess,\n+          computeTimePercentileMS(timeToFirstByte.get(\"readChunk\").mTimeToFirstByteNs),\n+          computeTime99PercentileMS(timeToFirstByte.get(\"readChunk\").mTimeToFirstByteNs),\n+          computeMaxTimeMS(timeToFirstByte.get(\"readChunk\").mMaxTimeToFirstByteNs));\n+      return stats;\n+    } else if (timeToFirstByte.containsKey(\"doRead\")) {\n+      Collections.sort(timeToFirstByte.get(\"doRead\").mTimeToFirstByteNs);\n+      SummaryStatistics stats = new SummaryStatistics(\n+          timeToFirstByte.get(\"doRead\").mNumSuccess,\n+          computeTimePercentileMS(timeToFirstByte.get(\"doRead\").mTimeToFirstByteNs),\n+          computeTime99PercentileMS(timeToFirstByte.get(\"doRead\").mTimeToFirstByteNs),\n+          computeMaxTimeMS(timeToFirstByte.get(\"doRead\").mMaxTimeToFirstByteNs));\n+      return stats;\n+    }\n+    return new SummaryStatistics();\n+  }\n+\n+  private float[] computeTimePercentileMS(ArrayList<Integer> rawTime) {\n+    float[] timePercentileMS = new float[101];\n+    int step = rawTime.size() / 100;\n+\n+    for (int index = 0; index < 101; index++) {\n+      timePercentileMS[index] = (float) rawTime.get(step * index).intValue() / Constants.MS_NANO;\n+    }\n+\n+    return timePercentileMS;\n+  }\n+\n+  private float[] computeTime99PercentileMS(ArrayList<Integer> rawTime) {\n+    int length = rawTime.size() - 1;\n+    float[] timePercentileMS = new float[6];\n+\n+    for (int index = 0; index < 6; index++) {\n+      timePercentileMS[index] = (float) rawTime.get(\n+          (int) (length * (100.0 - 1.0 / Math.pow(10.0, index)) / 100.0))\n+          / Constants.MS_NANO;\n+    }\n+\n+    return timePercentileMS;\n+  }\n+\n+  private float[] computeMaxTimeMS(long[] rawTime) {\n+    int step = rawTime.length;\n+    float[] timePercentileMS = new float[step];\n+\n+    for (int index = 0; index < step; index++) {\n+      timePercentileMS[index] = (float) rawTime[index] / Constants.MS_NANO;\n+    }\n+\n+    return timePercentileMS;\n+  }\n+\n+  /**\n+   * Result statistics of time to first byte measurement.\n+   */\n+  private final class PartialResultStatistic {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90f1abd907e2874bb953dbf0bfbf5227dea756bf"}, "originalPosition": 191}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f65f773e4a363fa8e9bb74917475525ecd8278a", "author": {"user": {"login": "HelloHorizon", "name": "Shouwei Chen"}}, "url": "https://github.com/Alluxio/alluxio/commit/6f65f773e4a363fa8e9bb74917475525ecd8278a", "committedDate": "2020-06-06T01:03:54Z", "message": "Resolve conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "023035dc195cb00e4dc3275298e9d6c7b8546416", "author": {"user": {"login": "HelloHorizon", "name": "Shouwei Chen"}}, "url": "https://github.com/Alluxio/alluxio/commit/023035dc195cb00e4dc3275298e9d6c7b8546416", "committedDate": "2020-06-06T01:03:54Z", "message": "Change json format and graph generator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "121516cb741b8aac9d6f6496d7974339b445f0c9", "author": {"user": {"login": "HelloHorizon", "name": "Shouwei Chen"}}, "url": "https://github.com/Alluxio/alluxio/commit/121516cb741b8aac9d6f6496d7974339b445f0c9", "committedDate": "2020-06-06T01:03:54Z", "message": "Fix style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba37f22a737cdf2e90a44eea53a1bc4bd046206f", "author": {"user": {"login": "HelloHorizon", "name": "Shouwei Chen"}}, "url": "https://github.com/Alluxio/alluxio/commit/ba37f22a737cdf2e90a44eea53a1bc4bd046206f", "committedDate": "2020-06-06T01:03:54Z", "message": "Add HDFS TTFB support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21b9ea3cca42905fcc0aaa84bd88f23400dd9eaf", "author": {"user": {"login": "HelloHorizon", "name": "Shouwei Chen"}}, "url": "https://github.com/Alluxio/alluxio/commit/21b9ea3cca42905fcc0aaa84bd88f23400dd9eaf", "committedDate": "2020-06-06T01:06:15Z", "message": "Move profile-agent to baseparameter, add execption and error check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f04fce2072bf55c2e598582374d64637d4637562", "author": {"user": {"login": "HelloHorizon", "name": "Shouwei Chen"}}, "url": "https://github.com/Alluxio/alluxio/commit/f04fce2072bf55c2e598582374d64637d4637562", "committedDate": "2020-06-06T01:06:15Z", "message": "fix style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9245e58ce1bfe23285ccc78234b4d5c4d46682f", "author": {"user": {"login": "HelloHorizon", "name": "Shouwei Chen"}}, "url": "https://github.com/Alluxio/alluxio/commit/b9245e58ce1bfe23285ccc78234b4d5c4d46682f", "committedDate": "2020-06-06T01:06:15Z", "message": "fix baseParameter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "90f1abd907e2874bb953dbf0bfbf5227dea756bf", "author": {"user": {"login": "HelloHorizon", "name": "Shouwei Chen"}}, "url": "https://github.com/Alluxio/alluxio/commit/90f1abd907e2874bb953dbf0bfbf5227dea756bf", "committedDate": "2020-06-05T14:54:18Z", "message": "fix baseParameter"}, "afterCommit": {"oid": "b9245e58ce1bfe23285ccc78234b4d5c4d46682f", "author": {"user": {"login": "HelloHorizon", "name": "Shouwei Chen"}}, "url": "https://github.com/Alluxio/alluxio/commit/b9245e58ce1bfe23285ccc78234b4d5c4d46682f", "committedDate": "2020-06-06T01:06:15Z", "message": "fix baseParameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb35f8e27ad5cd1ab74689fa0a7291b666578d4a", "author": {"user": {"login": "HelloHorizon", "name": "Shouwei Chen"}}, "url": "https://github.com/Alluxio/alluxio/commit/fb35f8e27ad5cd1ab74689fa0a7291b666578d4a", "committedDate": "2020-06-06T04:56:57Z", "message": "Move profile agent to benchmark, use histogram"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NDQwOTQy", "url": "https://github.com/Alluxio/alluxio/pull/11518#pullrequestreview-426440942", "createdAt": "2020-06-08T17:04:11Z", "commit": {"oid": "fb35f8e27ad5cd1ab74689fa0a7291b666578d4a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzowNDoxMVrOGgnupg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzowNDoxMVrOGgnupg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg1ODUzNA==", "bodyText": "I think we should ignore his max response time array (and maybe add a TODO to represent it correctly), or implement it correctly. The original purpose of it was to collect the max response time over time of the test, so if the array had 20 entries, the 1st entry would be the max response time of the first 1/20th of the run, the 2nd entry is the max response time for the 2nd 1/20th of the run, and so on.\nI don't think this is collecting the max this way.", "url": "https://github.com/Alluxio/alluxio/pull/11518#discussion_r436858534", "createdAt": "2020-06-08T17:04:11Z", "author": {"login": "gpang"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java", "diffHunk": "@@ -162,11 +177,129 @@ public ClientIOTaskResult runLocal() throws Exception {\n     service.awaitTermination(30, TimeUnit.SECONDS);\n \n     ClientIOTaskResult.ThreadCountResult result = context.getResult();\n+\n     LOG.info(String.format(\"thread count: %d, errors: %d, IO throughput (MB/s): %f\", numThreads,\n         result.getErrors().size(), result.getIOMBps()));\n+\n     return result;\n   }\n \n+  /**\n+   * Read the log file from java agent log file.\n+   *\n+   * @return summary statistics\n+   * @throws IOException\n+   */\n+  @SuppressFBWarnings(value = \"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  public synchronized SummaryStatistics addAdditionalResult()\n+      throws IOException, DataFormatException {\n+    Map<String, PartialResultStatistic> methodDescToHistogram = new HashMap<>();\n+\n+    try (final BufferedReader reader = new BufferedReader(\n+        new FileReader(BaseParameters.AGENT_OUTPUT_PATH))) {\n+      String line;\n+\n+      final ObjectMapper objectMapper = new ObjectMapper();\n+      while ((line = reader.readLine()) != null) {\n+        final Map<String, Object> lineMap;\n+        try {\n+          lineMap = objectMapper.readValue(line, Map.class);\n+        } catch (JsonParseException | MismatchedInputException e) {\n+          // skip the last line of a not completed file\n+          break;\n+        }\n+\n+        final String type = (String) lineMap.get(\"type\");\n+        final String methodName = (String) lineMap.get(\"methodName\");\n+        final Integer duration = (Integer) lineMap.get(\"duration\");\n+\n+        if (type == null || methodName == null || duration == null) {\n+          continue;\n+        }\n+\n+        if ((type.equals(\"AlluxioBlockInStream\") && methodName.equals(\"readChunk\"))\n+            || (type.equals(\"HDFSPacketReceiver\") && methodName.equals(\"doRead\"))) {\n+          if (!methodDescToHistogram.containsKey(methodName)) {\n+            methodDescToHistogram.put(methodName, new PartialResultStatistic());\n+          }\n+\n+          final PartialResultStatistic statistic = methodDescToHistogram.get(methodName);\n+          statistic.mTimeToFirstByteNs.recordValue(duration);\n+          statistic.mNumSuccess += 1;\n+\n+          if (duration > statistic.mMaxTimeToFirstByteNs[0]) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb35f8e27ad5cd1ab74689fa0a7291b666578d4a"}, "originalPosition": 115}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a73c3f6ce3f53fb8a78cc3277637aa17d3d68e00", "author": {"user": {"login": "HelloHorizon", "name": "Shouwei Chen"}}, "url": "https://github.com/Alluxio/alluxio/commit/a73c3f6ce3f53fb8a78cc3277637aa17d3d68e00", "committedDate": "2020-06-08T19:05:02Z", "message": "Fix max time to fisrt byte array"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a691883fedb63a9ad2773287c95ed8ed04b11f12", "author": {"user": {"login": "HelloHorizon", "name": "Shouwei Chen"}}, "url": "https://github.com/Alluxio/alluxio/commit/a691883fedb63a9ad2773287c95ed8ed04b11f12", "committedDate": "2020-06-08T19:07:17Z", "message": "Fix delete"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NTc3NjA5", "url": "https://github.com/Alluxio/alluxio/pull/11518#pullrequestreview-426577609", "createdAt": "2020-06-08T20:02:39Z", "commit": {"oid": "a691883fedb63a9ad2773287c95ed8ed04b11f12"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4469, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}