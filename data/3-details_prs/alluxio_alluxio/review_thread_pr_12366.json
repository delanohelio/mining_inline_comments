{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4MjY4MTAw", "number": 12366, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMTowNToyOFrOE9BTdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToyNTo0NlrOFB_qNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDE5OTU4OnYy", "diffSide": "RIGHT", "path": "core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournal.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMTowNToyOFrOH5fN7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMDo1MTo0OVrOH71pEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0MjM0OQ==", "bodyText": "The root UFS is different from the journal UFS. If the UfsManager doesn't have it already, it should have a method for acquiring the journal UFS (to also use the journal conf, instead of the root ufs conf).\nYou can basically think of the journal UFS as a different mount point (separate from any other mount point), which is just for accessing the journal UFS.", "url": "https://github.com/Alluxio/alluxio/pull/12366#discussion_r530042349", "createdAt": "2020-11-25T01:05:28Z", "author": {"login": "gpang"}, "path": "core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournal.java", "diffHunk": "@@ -146,7 +146,8 @@ protected static UnderFileSystemConfiguration getJournalUfsConf() {\n    */\n   public UfsJournal(URI location, Master master, long quietPeriodMs,\n       Supplier<Set<JournalSink>> journalSinks) {\n-    this(location, master, UnderFileSystem.Factory.create(location.toString(), getJournalUfsConf()),\n+    this(location, master, master.getMasterContext().getUfsManager().getRoot().acquireUfsResource()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ae1e175c96b710856ba4648d30022d2b9c10a12"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUwNjg5Ng==", "bodyText": "OK", "url": "https://github.com/Alluxio/alluxio/pull/12366#discussion_r532506896", "createdAt": "2020-11-30T10:51:49Z", "author": {"login": "maobaolong"}, "path": "core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournal.java", "diffHunk": "@@ -146,7 +146,8 @@ protected static UnderFileSystemConfiguration getJournalUfsConf() {\n    */\n   public UfsJournal(URI location, Master master, long quietPeriodMs,\n       Supplier<Set<JournalSink>> journalSinks) {\n-    this(location, master, UnderFileSystem.Factory.create(location.toString(), getJournalUfsConf()),\n+    this(location, master, master.getMasterContext().getUfsManager().getRoot().acquireUfsResource()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0MjM0OQ=="}, "originalCommit": {"oid": "9ae1e175c96b710856ba4648d30022d2b9c10a12"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjI3MTI3OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTowNDowOVrOIA6nUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMzozNzoyM1rOICAy3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzMTI1MA==", "bodyText": "I don't these parameters are necessary. The journal is a not actually a mount point. There is already a config prefix for the journal config: https://github.com/Alluxio/alluxio/blob/v2.4.1/core/common/src/main/java/alluxio/conf/PropertyKey.java#L1163", "url": "https://github.com/Alluxio/alluxio/pull/12366#discussion_r537831250", "createdAt": "2020-12-07T21:04:09Z", "author": {"login": "gpang"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -1241,6 +1241,45 @@ public String toString() {\n           .setScope(Scope.MASTER)\n           .build();\n \n+  //\n+  // Mount table journal related properties", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "163d57bbc5584cab16af55ad7f55f396fa05c81b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk4MTA4Nw==", "bodyText": "Thanks for remind me, I've enlarge the access scope of the getJournalUfsConf  from protected to public and turn to use getJournalUfsConf  instead.", "url": "https://github.com/Alluxio/alluxio/pull/12366#discussion_r538981087", "createdAt": "2020-12-09T03:37:23Z", "author": {"login": "maobaolong"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -1241,6 +1241,45 @@ public String toString() {\n           .setScope(Scope.MASTER)\n           .build();\n \n+  //\n+  // Mount table journal related properties", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzMTI1MA=="}, "originalCommit": {"oid": "163d57bbc5584cab16af55ad7f55f396fa05c81b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjI4NTkzOnYy", "diffSide": "RIGHT", "path": "tests/src/test/java/alluxio/client/hadoop/FileSystemRenameIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTowNzo0MVrOIA6vrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMzoxNjowOFrOICAWeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzMzM5MA==", "bodyText": "Why is this change necessary?", "url": "https://github.com/Alluxio/alluxio/pull/12366#discussion_r537833390", "createdAt": "2020-12-07T21:07:41Z", "author": {"login": "gpang"}, "path": "tests/src/test/java/alluxio/client/hadoop/FileSystemRenameIntegrationTest.java", "diffHunk": "@@ -236,7 +236,7 @@ public void basicRenameTest7() throws Exception {\n     // Due to Hadoop 1 support we stick with the deprecated version. If we drop support for it\n     // FSDataOutputStream.hflush will be the new one.\n     //#ifdef HADOOP1\n-    o.sync();\n+//    o.sync();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "163d57bbc5584cab16af55ad7f55f396fa05c81b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3MzgxOA==", "bodyText": "Sorry, it is an accident change, reverted it in last commit.", "url": "https://github.com/Alluxio/alluxio/pull/12366#discussion_r538973818", "createdAt": "2020-12-09T03:16:08Z", "author": {"login": "maobaolong"}, "path": "tests/src/test/java/alluxio/client/hadoop/FileSystemRenameIntegrationTest.java", "diffHunk": "@@ -236,7 +236,7 @@ public void basicRenameTest7() throws Exception {\n     // Due to Hadoop 1 support we stick with the deprecated version. If we drop support for it\n     // FSDataOutputStream.hflush will be the new one.\n     //#ifdef HADOOP1\n-    o.sync();\n+//    o.sync();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzMzM5MA=="}, "originalCommit": {"oid": "163d57bbc5584cab16af55ad7f55f396fa05c81b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjI5OTQ3OnYy", "diffSide": "LEFT", "path": "core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournal.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToxMDo1OVrOIA63aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNjowMToyMlrOICD7cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzNTM2OQ==", "bodyText": "Calling getJournalUfsConf(), or doing the same operations as that method (https://github.com/Alluxio/alluxio/blob/v2.4.1/core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournal.java#L131), is important. Is the new behavior equivalent to the previous call to getJournalUfsConf()?", "url": "https://github.com/Alluxio/alluxio/pull/12366#discussion_r537835369", "createdAt": "2020-12-07T21:10:59Z", "author": {"login": "gpang"}, "path": "core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournal.java", "diffHunk": "@@ -146,7 +146,9 @@ protected static UnderFileSystemConfiguration getJournalUfsConf() {\n    */\n   public UfsJournal(URI location, Master master, long quietPeriodMs,\n       Supplier<Set<JournalSink>> journalSinks) {\n-    this(location, master, UnderFileSystem.Factory.create(location.toString(), getJournalUfsConf()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "163d57bbc5584cab16af55ad7f55f396fa05c81b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzMjQzNA==", "bodyText": "Thanks for this suggestion, I'm doing the same operations getJournalUfsConf()  in the AbstractUfsManager#getJournal", "url": "https://github.com/Alluxio/alluxio/pull/12366#discussion_r539032434", "createdAt": "2020-12-09T06:01:22Z", "author": {"login": "maobaolong"}, "path": "core/server/common/src/main/java/alluxio/master/journal/ufs/UfsJournal.java", "diffHunk": "@@ -146,7 +146,9 @@ protected static UnderFileSystemConfiguration getJournalUfsConf() {\n    */\n   public UfsJournal(URI location, Master master, long quietPeriodMs,\n       Supplier<Set<JournalSink>> journalSinks) {\n-    this(location, master, UnderFileSystem.Factory.create(location.toString(), getJournalUfsConf()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzNTM2OQ=="}, "originalCommit": {"oid": "163d57bbc5584cab16af55ad7f55f396fa05c81b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjMyNDUyOnYy", "diffSide": "RIGHT", "path": "core/server/common/src/main/java/alluxio/master/NoopUfsManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToxNzowNFrOIA7FtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMzoxNDoxNVrOICAUJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzOTAyOQ==", "bodyText": "Does the NOOP one require this implementation?", "url": "https://github.com/Alluxio/alluxio/pull/12366#discussion_r537839029", "createdAt": "2020-12-07T21:17:04Z", "author": {"login": "gpang"}, "path": "core/server/common/src/main/java/alluxio/master/NoopUfsManager.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master;\n+\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.underfs.AbstractUfsManager;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.util.network.NetworkAddressUtils;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Implementation of UfsManager that does nothing. This is useful for testing and\n+ * for situations where we don't want to start a real UfsManager,e.g. when formatting the journal.\n+ */\n+public class NoopUfsManager extends AbstractUfsManager {\n+\n+  @Override\n+  protected void connectUfs(UnderFileSystem fs) throws IOException {\n+    fs.connectFromMaster(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "163d57bbc5584cab16af55ad7f55f396fa05c81b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3MzIyMA==", "bodyText": "No, removed it in last commit", "url": "https://github.com/Alluxio/alluxio/pull/12366#discussion_r538973220", "createdAt": "2020-12-09T03:14:15Z", "author": {"login": "maobaolong"}, "path": "core/server/common/src/main/java/alluxio/master/NoopUfsManager.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master;\n+\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.underfs.AbstractUfsManager;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.util.network.NetworkAddressUtils;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Implementation of UfsManager that does nothing. This is useful for testing and\n+ * for situations where we don't want to start a real UfsManager,e.g. when formatting the journal.\n+ */\n+public class NoopUfsManager extends AbstractUfsManager {\n+\n+  @Override\n+  protected void connectUfs(UnderFileSystem fs) throws IOException {\n+    fs.connectFromMaster(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzOTAyOQ=="}, "originalCommit": {"oid": "163d57bbc5584cab16af55ad7f55f396fa05c81b"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjM1MzgxOnYy", "diffSide": "RIGHT", "path": "core/server/common/src/main/java/alluxio/underfs/AbstractUfsManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToyNDozMVrOIA7W3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNjoxNjoxM1rOICEQ3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0MzQyMQ==", "bodyText": "It looks like we are reusing the mounts to store the journal UFS as well. Can you document that in a comment somewhere? Maybe near the top of this class?", "url": "https://github.com/Alluxio/alluxio/pull/12366#discussion_r537843421", "createdAt": "2020-12-07T21:24:31Z", "author": {"login": "gpang"}, "path": "core/server/common/src/main/java/alluxio/underfs/AbstractUfsManager.java", "diffHunk": "@@ -209,6 +210,30 @@ public UfsClient getRoot() {\n     }\n   }\n \n+  @Override\n+  public UfsClient getJournal() {\n+    synchronized (this) {\n+      if (mJournalUfsClient == null) {\n+        String uri = ServerConfiguration.get(PropertyKey.MASTER_MOUNT_TABLE_JOURNAL_UFS);\n+        boolean readOnly =\n+            ServerConfiguration.getBoolean(PropertyKey.MASTER_MOUNT_TABLE_JOURNAL_READONLY);\n+        boolean shared = ServerConfiguration\n+            .getBoolean(PropertyKey.MASTER_MOUNT_TABLE_JOURNAL_SHARED);\n+        Map<String, String> conf =\n+            ServerConfiguration.getNestedProperties(PropertyKey.MASTER_MOUNT_TABLE_JOURNAL_OPTION);\n+        addMount(IdUtils.JOURNAL_MOUNT_ID, new AlluxioURI(uri),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "163d57bbc5584cab16af55ad7f55f396fa05c81b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzNzkxOQ==", "bodyText": "Done. added comments on the class java doc.", "url": "https://github.com/Alluxio/alluxio/pull/12366#discussion_r539037919", "createdAt": "2020-12-09T06:16:13Z", "author": {"login": "maobaolong"}, "path": "core/server/common/src/main/java/alluxio/underfs/AbstractUfsManager.java", "diffHunk": "@@ -209,6 +210,30 @@ public UfsClient getRoot() {\n     }\n   }\n \n+  @Override\n+  public UfsClient getJournal() {\n+    synchronized (this) {\n+      if (mJournalUfsClient == null) {\n+        String uri = ServerConfiguration.get(PropertyKey.MASTER_MOUNT_TABLE_JOURNAL_UFS);\n+        boolean readOnly =\n+            ServerConfiguration.getBoolean(PropertyKey.MASTER_MOUNT_TABLE_JOURNAL_READONLY);\n+        boolean shared = ServerConfiguration\n+            .getBoolean(PropertyKey.MASTER_MOUNT_TABLE_JOURNAL_SHARED);\n+        Map<String, String> conf =\n+            ServerConfiguration.getNestedProperties(PropertyKey.MASTER_MOUNT_TABLE_JOURNAL_OPTION);\n+        addMount(IdUtils.JOURNAL_MOUNT_ID, new AlluxioURI(uri),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0MzQyMQ=="}, "originalCommit": {"oid": "163d57bbc5584cab16af55ad7f55f396fa05c81b"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjM1ODkzOnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/util/IdUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToyNTo0NlrOIA7ZzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMzoxMzo0NFrOICAThg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0NDE3Mg==", "bodyText": "NIT: I think this only applies to UFS journal, so maybe rename this toUFS_JOURNAL_MOUNT_ID, and add a comment that the journal ufs is stored as a special mount in the ufs manager.", "url": "https://github.com/Alluxio/alluxio/pull/12366#discussion_r537844172", "createdAt": "2020-12-07T21:25:46Z", "author": {"login": "gpang"}, "path": "core/common/src/main/java/alluxio/util/IdUtils.java", "diffHunk": "@@ -34,6 +34,7 @@\n   public static final long INVALID_WORKER_ID = -1;\n   public static final long INVALID_MOUNT_ID = -1;\n   public static final long ROOT_MOUNT_ID = 1;\n+  public static final long JOURNAL_MOUNT_ID = Long.MAX_VALUE - 10000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "163d57bbc5584cab16af55ad7f55f396fa05c81b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3MzA2Mg==", "bodyText": "Done", "url": "https://github.com/Alluxio/alluxio/pull/12366#discussion_r538973062", "createdAt": "2020-12-09T03:13:44Z", "author": {"login": "maobaolong"}, "path": "core/common/src/main/java/alluxio/util/IdUtils.java", "diffHunk": "@@ -34,6 +34,7 @@\n   public static final long INVALID_WORKER_ID = -1;\n   public static final long INVALID_MOUNT_ID = -1;\n   public static final long ROOT_MOUNT_ID = 1;\n+  public static final long JOURNAL_MOUNT_ID = Long.MAX_VALUE - 10000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0NDE3Mg=="}, "originalCommit": {"oid": "163d57bbc5584cab16af55ad7f55f396fa05c81b"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1071, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}