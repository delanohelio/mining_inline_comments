{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MDI4NzA0", "number": 11567, "title": "Add alluxio.hadoop.LocalCacheFileSystem.java", "bodyText": "move CacheManager singleton to CacheManager.Factory, so multiple different classes can access this singleton.\nChange LocalCachingFileSystem from inheriting AbstractFileSystem to Hadoop Filesystem,  to reduce the complexity & reduce # of calls of merge hadoop conf (to 1 per LocalCachingFileSystem)", "createdAt": "2020-06-16T07:32:22Z", "url": "https://github.com/Alluxio/alluxio/pull/11567", "merged": true, "mergeCommit": {"oid": "e0f44c3f1df22f4ea1b24ee4e0b9ed7cc8f24873"}, "closed": true, "closedAt": "2020-07-14T05:54:19Z", "author": {"login": "apc999"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcr5YUxgFqTQzMTc2MDg4MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc0rFIaABqjM1NDE5MDU5NzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNzYwODgx", "url": "https://github.com/Alluxio/alluxio/pull/11567#pullrequestreview-431760881", "createdAt": "2020-06-16T18:03:14Z", "commit": {"oid": "6627357b88352e656e46bc1acd0ceaccce2cc9c5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODowMzoxNFrOGknDwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODoxMzoyMFrOGknaVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA0MTg1Nw==", "bodyText": "Should we set this to null? Or the idea is if we fail once we do not retry creating the cache manager in the future? If its the latter, update the javadoc to state we only try once.", "url": "https://github.com/Alluxio/alluxio/pull/11567#discussion_r441041857", "createdAt": "2020-06-16T18:03:14Z", "author": {"login": "calvinjia"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/CacheManager.java", "diffHunk": "@@ -12,20 +12,71 @@\n package alluxio.client.file.cache;\n \n import alluxio.conf.AlluxioConfiguration;\n+import alluxio.metrics.MetricKey;\n+import alluxio.metrics.MetricsSystem;\n+\n+import com.codahale.metrics.Counter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.io.IOException;\n+import java.util.Optional;\n+\n+import javax.annotation.Nullable;\n \n /**\n  * Interface for managing cached pages.\n  */\n public interface CacheManager extends AutoCloseable  {\n+\n   /**\n-   * @param conf the Alluxio configuration\n-   * @return an instance of {@link CacheManager}\n+   * Factory class to get or create a CacheManager.\n    */\n-  static CacheManager create(AlluxioConfiguration conf) throws IOException {\n-    // TODO(feng): make cache manager type configurable when we introduce more implementations.\n-    return new NoExceptionCacheManager(LocalCacheManager.create(conf));\n+  class Factory {\n+    private static final Logger LOG = LoggerFactory.getLogger(Factory.class);\n+    private static Optional<CacheManager> sCacheManager = null;\n+\n+    /**\n+     * @param conf the Alluxio configuration\n+     * @return current CacheManager, creating a new one if it doesn't yet exist\n+     */\n+    @Nullable\n+    public static synchronized CacheManager get(AlluxioConfiguration conf) throws IOException {\n+      // TODO(feng): support multiple cache managers\n+      if (sCacheManager == null) {\n+        try {\n+          sCacheManager = Optional.of(create(conf));\n+        } catch (IOException e) {\n+          sCacheManager = Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6627357b88352e656e46bc1acd0ceaccce2cc9c5"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA0MjEyNw==", "bodyText": "document null value meaning?", "url": "https://github.com/Alluxio/alluxio/pull/11567#discussion_r441042127", "createdAt": "2020-06-16T18:03:43Z", "author": {"login": "calvinjia"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/CacheManager.java", "diffHunk": "@@ -12,20 +12,71 @@\n package alluxio.client.file.cache;\n \n import alluxio.conf.AlluxioConfiguration;\n+import alluxio.metrics.MetricKey;\n+import alluxio.metrics.MetricsSystem;\n+\n+import com.codahale.metrics.Counter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.io.IOException;\n+import java.util.Optional;\n+\n+import javax.annotation.Nullable;\n \n /**\n  * Interface for managing cached pages.\n  */\n public interface CacheManager extends AutoCloseable  {\n+\n   /**\n-   * @param conf the Alluxio configuration\n-   * @return an instance of {@link CacheManager}\n+   * Factory class to get or create a CacheManager.\n    */\n-  static CacheManager create(AlluxioConfiguration conf) throws IOException {\n-    // TODO(feng): make cache manager type configurable when we introduce more implementations.\n-    return new NoExceptionCacheManager(LocalCacheManager.create(conf));\n+  class Factory {\n+    private static final Logger LOG = LoggerFactory.getLogger(Factory.class);\n+    private static Optional<CacheManager> sCacheManager = null;\n+\n+    /**\n+     * @param conf the Alluxio configuration\n+     * @return current CacheManager, creating a new one if it doesn't yet exist", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6627357b88352e656e46bc1acd0ceaccce2cc9c5"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA0MjYyMA==", "bodyText": "Do we need to throw the exception here, I thought we are using null as the signal of failed to create?", "url": "https://github.com/Alluxio/alluxio/pull/11567#discussion_r441042620", "createdAt": "2020-06-16T18:04:40Z", "author": {"login": "calvinjia"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/CacheManager.java", "diffHunk": "@@ -12,20 +12,71 @@\n package alluxio.client.file.cache;\n \n import alluxio.conf.AlluxioConfiguration;\n+import alluxio.metrics.MetricKey;\n+import alluxio.metrics.MetricsSystem;\n+\n+import com.codahale.metrics.Counter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.io.IOException;\n+import java.util.Optional;\n+\n+import javax.annotation.Nullable;\n \n /**\n  * Interface for managing cached pages.\n  */\n public interface CacheManager extends AutoCloseable  {\n+\n   /**\n-   * @param conf the Alluxio configuration\n-   * @return an instance of {@link CacheManager}\n+   * Factory class to get or create a CacheManager.\n    */\n-  static CacheManager create(AlluxioConfiguration conf) throws IOException {\n-    // TODO(feng): make cache manager type configurable when we introduce more implementations.\n-    return new NoExceptionCacheManager(LocalCacheManager.create(conf));\n+  class Factory {\n+    private static final Logger LOG = LoggerFactory.getLogger(Factory.class);\n+    private static Optional<CacheManager> sCacheManager = null;\n+\n+    /**\n+     * @param conf the Alluxio configuration\n+     * @return current CacheManager, creating a new one if it doesn't yet exist\n+     */\n+    @Nullable\n+    public static synchronized CacheManager get(AlluxioConfiguration conf) throws IOException {\n+      // TODO(feng): support multiple cache managers\n+      if (sCacheManager == null) {\n+        try {\n+          sCacheManager = Optional.of(create(conf));\n+        } catch (IOException e) {\n+          sCacheManager = Optional.empty();\n+          throw e;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6627357b88352e656e46bc1acd0ceaccce2cc9c5"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA0MzM0MQ==", "bodyText": "Since CacheManager.Factory.get is nullable, we should put this in a null check instead of exception clause? Up to you how you want to handle the error path", "url": "https://github.com/Alluxio/alluxio/pull/11567#discussion_r441043341", "createdAt": "2020-06-16T18:05:54Z", "author": {"login": "calvinjia"}, "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystem.java", "diffHunk": "@@ -147,7 +148,8 @@ public static FileSystem create(FileSystemContext context) {\n       if (conf.getBoolean(PropertyKey.USER_CLIENT_CACHE_ENABLED)\n           && CommonUtils.PROCESS_TYPE.get().equals(CommonUtils.ProcessType.CLIENT)) {\n         try {\n-          return new LocalCacheFileSystem(fs, conf);\n+          CacheManager cacheManager = CacheManager.Factory.get(conf);\n+          return new LocalCacheFileSystem(cacheManager, fs, conf);\n         } catch (IOException e) {\n           LOG.error(\"Fallback without client caching: \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6627357b88352e656e46bc1acd0ceaccce2cc9c5"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA0NDA0MQ==", "bodyText": "Should this be allowed to be null? It looks like we have fallback logic in the appropriate places", "url": "https://github.com/Alluxio/alluxio/pull/11567#discussion_r441044041", "createdAt": "2020-06-16T18:07:04Z", "author": {"login": "calvinjia"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheFileSystem.java", "diffHunk": "@@ -19,49 +19,30 @@\n import alluxio.conf.AlluxioConfiguration;\n import alluxio.exception.AlluxioException;\n import alluxio.grpc.OpenFilePOptions;\n-import alluxio.metrics.MetricKey;\n-import alluxio.metrics.MetricsSystem;\n \n-import com.codahale.metrics.Counter;\n+import com.google.common.base.Preconditions;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import java.io.IOException;\n-import java.util.Optional;\n \n /**\n  * A FileSystem implementation with a local cache.\n  */\n public class LocalCacheFileSystem extends DelegatingFileSystem {\n   private static final Logger LOG = LoggerFactory.getLogger(LocalCacheFileSystem.class);\n-  private static Optional<CacheManager> sCacheManager;\n-\n+  private final CacheManager mCacheManager;\n   private final AlluxioConfiguration mConf;\n \n-  // TODO(binfan): Remove the IOException throwing or make this into a factory method\n   /**\n+   * @param cacheManage cache manager\n    * @param fs a FileSystem instance to query on local cache miss\n    * @param conf the configuration, only respected for the first call\n    */\n-  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(\n-      value = \"ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD\",\n-      justification = \"write to static is made threadsafe\")\n-  public LocalCacheFileSystem(FileSystem fs, AlluxioConfiguration conf) throws IOException {\n+  public LocalCacheFileSystem(CacheManager cacheManage, FileSystem fs, AlluxioConfiguration conf) {\n     super(fs);\n-    // TODO(feng): support multiple cache managers\n-    if (sCacheManager == null) {\n-      synchronized (LocalCacheFileSystem.class) {\n-        if (sCacheManager == null) {\n-          try {\n-            sCacheManager = Optional.of(CacheManager.create(conf));\n-          } catch (IOException e) {\n-            Metrics.CREATE_ERRORS.inc();\n-            throw new IOException(\"Failed to create CacheManager\", e);\n-          }\n-        }\n-      }\n-    }\n-    mConf = conf;\n+    mCacheManager = Preconditions.checkNotNull(cacheManage, \"cacheManager\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6627357b88352e656e46bc1acd0ceaccce2cc9c5"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA0NDU0Ng==", "bodyText": "Please add comments stating this is only to be used internally/most methods are not implemented", "url": "https://github.com/Alluxio/alluxio/pull/11567#discussion_r441044546", "createdAt": "2020-06-16T18:07:59Z", "author": {"login": "calvinjia"}, "path": "core/client/hdfs/src/main/java/alluxio/hadoop/AlluxioHdfsFileSystem.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.hadoop;\n+\n+import static com.google.common.hash.Hashing.md5;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.file.FileInStream;\n+import alluxio.client.file.FileOutStream;\n+import alluxio.client.file.URIStatus;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.grpc.CreateDirectoryPOptions;\n+import alluxio.grpc.CreateFilePOptions;\n+import alluxio.grpc.DeletePOptions;\n+import alluxio.grpc.ExistsPOptions;\n+import alluxio.grpc.FreePOptions;\n+import alluxio.grpc.GetStatusPOptions;\n+import alluxio.grpc.ListStatusPOptions;\n+import alluxio.grpc.MountPOptions;\n+import alluxio.grpc.OpenFilePOptions;\n+import alluxio.grpc.RenamePOptions;\n+import alluxio.grpc.ScheduleAsyncPersistencePOptions;\n+import alluxio.grpc.SetAclAction;\n+import alluxio.grpc.SetAclPOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.grpc.UnmountPOptions;\n+import alluxio.security.authorization.AclEntry;\n+import alluxio.security.authorization.Mode;\n+import alluxio.wire.BlockLocationInfo;\n+import alluxio.wire.FileInfo;\n+import alluxio.wire.MountPointInfo;\n+import alluxio.wire.SyncPointInfo;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.permission.FsPermission;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A wrapper class to translate Hadoop FileSystem to Alluxio FileSystem.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6627357b88352e656e46bc1acd0ceaccce2cc9c5"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA0NjA2Mg==", "bodyText": "For now it is okay not to support this but can we leave a TODO? Otherwise if we use the API later in LocalCacheFileInStream, there will be unexpected issues.", "url": "https://github.com/Alluxio/alluxio/pull/11567#discussion_r441046062", "createdAt": "2020-06-16T18:10:31Z", "author": {"login": "calvinjia"}, "path": "core/client/hdfs/src/main/java/alluxio/hadoop/AlluxioHdfsInputStream.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.hadoop;\n+\n+import alluxio.client.file.FileInStream;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+\n+import java.io.IOException;\n+\n+/**\n+ * A wrapper class to translate Hadoop FileSystem FSDataInputStream to Alluxio FileSystem\n+ * FileInStream.\n+ */\n+public class AlluxioHdfsInputStream extends FileInStream {\n+  private final FSDataInputStream mInput;\n+\n+  /**\n+   * @param input Hadoop FileSystem FSDataInputStream\n+   */\n+  public AlluxioHdfsInputStream(FSDataInputStream input) {\n+    mInput = Preconditions.checkNotNull(input, \"null\");\n+  }\n+\n+  @Override\n+  public int read(byte[] bytes) throws IOException {\n+    return mInput.read(bytes);\n+  }\n+\n+  @Override\n+  public int read(byte[] bytes, int offset, int length) throws IOException {\n+    return mInput.read(bytes, offset, length);\n+  }\n+\n+  @Override\n+  public int read() throws IOException {\n+    return mInput.read();\n+  }\n+\n+  @Override\n+  public long skip(long length) throws IOException {\n+    return mInput.skip(length);\n+  }\n+\n+  @Override\n+  public int available() throws IOException {\n+    return mInput.available();\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    mInput.close();\n+  }\n+\n+  @Override\n+  public synchronized void mark(int limit) {\n+    mInput.mark(limit);\n+  }\n+\n+  @Override\n+  public synchronized void reset() throws IOException {\n+    mInput.reset();\n+  }\n+\n+  @Override\n+  public boolean markSupported() {\n+    return mInput.markSupported();\n+  }\n+\n+  @Override\n+  public void seek(long position) throws IOException {\n+    mInput.seek(position);\n+  }\n+\n+  @Override\n+  public long getPos() throws IOException {\n+    return mInput.getPos();\n+  }\n+\n+  @Override\n+  public long remaining() {\n+    throw new UnsupportedOperationException(\"Remaining is not supported\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6627357b88352e656e46bc1acd0ceaccce2cc9c5"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA0NzYzOA==", "bodyText": "Although its a wrapper, do we want to make a new Filesystem every time?", "url": "https://github.com/Alluxio/alluxio/pull/11567#discussion_r441047638", "createdAt": "2020-06-16T18:13:20Z", "author": {"login": "calvinjia"}, "path": "core/client/hdfs/src/main/java/alluxio/hadoop/LocalCachingFileSystem.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.hadoop;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.file.cache.CacheManager;\n+import alluxio.client.file.cache.LocalCacheFileInStream;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.AlluxioProperties;\n+import alluxio.conf.InstancedConfiguration;\n+import alluxio.conf.Source;\n+import alluxio.grpc.OpenFilePOptions;\n+import alluxio.metrics.MetricsConfig;\n+import alluxio.metrics.MetricsSystem;\n+import alluxio.util.ConfigurationUtils;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.permission.FsPermission;\n+import org.apache.hadoop.util.Progressable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+/**\n+ * An Alluxio client compatible with Apache Hadoop {@link org.apache.hadoop.fs.FileSystem}\n+ * interface, using Alluxio local cache. On cache miss,\n+ */\n+public class LocalCachingFileSystem extends org.apache.hadoop.fs.FileSystem {\n+  private static final Logger LOG = LoggerFactory.getLogger(LocalCachingFileSystem.class);\n+  // The filesystem to query on cache miss\n+  private final org.apache.hadoop.fs.FileSystem mExternalFileSystem;\n+  private CacheManager mCacheManager;\n+  private org.apache.hadoop.conf.Configuration mHadoopConf;\n+  private AlluxioConfiguration mAlluxioConf;\n+\n+  /**\n+   * @param fileSystem File System instance\n+   */\n+  LocalCachingFileSystem(org.apache.hadoop.fs.FileSystem fileSystem) {\n+    mExternalFileSystem = Preconditions.checkNotNull(fileSystem, \"filesystem\");\n+  }\n+\n+  @Override\n+  public synchronized void initialize(URI uri, org.apache.hadoop.conf.Configuration conf)\n+      throws IOException {\n+    super.initialize(uri, conf);\n+    mHadoopConf = conf;\n+\n+    // Set statistics\n+    setConf(conf);\n+\n+    // Take hadoop configuration to merge to Alluxio configuration\n+    Map<String, Object> hadoopConfProperties =\n+        HadoopConfigurationUtils.getConfigurationFromHadoop(conf);\n+    LOG.info(\"Creating Alluxio configuration from Hadoop configuration {}\", hadoopConfProperties);\n+    AlluxioProperties alluxioProps = ConfigurationUtils.defaults();\n+    // Merge relevant Hadoop configuration into Alluxio's configuration.\n+    alluxioProps.merge(hadoopConfProperties, Source.RUNTIME);\n+    // Creating a new instanced configuration from an AlluxioProperties object isn't expensive.\n+    mAlluxioConf = new InstancedConfiguration(alluxioProps);\n+\n+    // Handle metrics\n+    Properties metricsProperties = new Properties();\n+    for (Map.Entry<String, String> entry : conf) {\n+      metricsProperties.setProperty(entry.getKey(), entry.getValue());\n+    }\n+    MetricsSystem.startSinksFromConfig(new MetricsConfig(metricsProperties));\n+\n+    mCacheManager = CacheManager.Factory.get(mAlluxioConf);\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    // super.close should be called first before releasing the resources in this instance, as the\n+    // super class may invoke other methods in this class. For example,\n+    // org.apache.hadoop.fs.FileSystem.close may check the existence of certain temp files before\n+    // closing\n+    super.close();\n+    mExternalFileSystem.close();\n+  }\n+\n+  /**\n+   * @return scheme\n+   */\n+  // @Override This doesn't exist in Hadoop 1.x, so cannot put {@literal @Override}.\n+  public String getScheme() {\n+    return mExternalFileSystem.getScheme();\n+  }\n+\n+  @Override\n+  public FSDataInputStream open(Path path, int bufferSize) throws IOException {\n+    if (mCacheManager == null) {\n+      return mExternalFileSystem.open(path, bufferSize);\n+    }\n+    return new FSDataInputStream(new HdfsFileInputStream(\n+        new LocalCacheFileInStream(\n+            new AlluxioURI(path.toString()),\n+            OpenFilePOptions.getDefaultInstance(),\n+            new AlluxioHdfsFileSystem(mExternalFileSystem, mAlluxioConf), mCacheManager),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6627357b88352e656e46bc1acd0ceaccce2cc9c5"}, "originalPosition": 117}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "39b35e4afab6fbaebd089315158f2aac918e406e", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/39b35e4afab6fbaebd089315158f2aac918e406e", "committedDate": "2020-06-16T19:25:34Z", "message": "Address comments"}, "afterCommit": {"oid": "aae3c92939a793f7ef9e50915b5d7c2abc9c6558", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/aae3c92939a793f7ef9e50915b5d7c2abc9c6558", "committedDate": "2020-06-17T04:38:23Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "206ee7482ee48bcc26271c908b11aa2eef94ce38", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/206ee7482ee48bcc26271c908b11aa2eef94ce38", "committedDate": "2020-07-02T22:54:22Z", "message": "Add LocalCachingFileSystem"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2eb243df914f58e5461da55d542160ce85b651a3", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/2eb243df914f58e5461da55d542160ce85b651a3", "committedDate": "2020-07-02T22:54:22Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aae3c92939a793f7ef9e50915b5d7c2abc9c6558", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/aae3c92939a793f7ef9e50915b5d7c2abc9c6558", "committedDate": "2020-06-17T04:38:23Z", "message": "Address comments"}, "afterCommit": {"oid": "9d3264a576a654291a481f25d3dc6c87ec3fdb9b", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/9d3264a576a654291a481f25d3dc6c87ec3fdb9b", "committedDate": "2020-07-02T23:20:53Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1805639212ef92f9e0a91e9e9c1ad6644ed2ea82", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/1805639212ef92f9e0a91e9e9c1ad6644ed2ea82", "committedDate": "2020-07-02T23:31:39Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9d3264a576a654291a481f25d3dc6c87ec3fdb9b", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/9d3264a576a654291a481f25d3dc6c87ec3fdb9b", "committedDate": "2020-07-02T23:20:53Z", "message": "Address comments"}, "afterCommit": {"oid": "1805639212ef92f9e0a91e9e9c1ad6644ed2ea82", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/1805639212ef92f9e0a91e9e9c1ad6644ed2ea82", "committedDate": "2020-07-02T23:31:39Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MDY4NzE3", "url": "https://github.com/Alluxio/alluxio/pull/11567#pullrequestreview-444068717", "createdAt": "2020-07-07T16:41:25Z", "commit": {"oid": "1805639212ef92f9e0a91e9e9c1ad6644ed2ea82"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjo0MToyNVrOGuG4Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjo0MToyNVrOGuG4Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwMDQxMQ==", "bodyText": "Should we use file id here?", "url": "https://github.com/Alluxio/alluxio/pull/11567#discussion_r451000411", "createdAt": "2020-07-07T16:41:25Z", "author": {"login": "calvinjia"}, "path": "core/client/hdfs/src/main/java/alluxio/hadoop/HadoopUtils.java", "diffHunk": "@@ -184,5 +189,30 @@ private static void setConfigurationFromSystemProperty(Configuration configurati\n     }\n   }\n \n+  /**\n+   * @param alluxioURI Alluxio uri\n+   * @return corresponding Hadoop Path instance\n+   */\n+  public static Path toPath(AlluxioURI alluxioURI) {\n+    return new Path(alluxioURI.toString());\n+  }\n+\n+  /**\n+   * @param status Hadoop file status\n+   * @return corresponding Alluxio uri status instance\n+   */\n+  public static URIStatus toUriStatus(FileStatus status) {\n+    // FilePath is a unique identifier for a file, however it can be a long string\n+    // hence using md5 hash of the file path as the identifier in the cache.\n+    FileInfo info = new FileInfo();\n+    info.setFileIdentifier(md5().hashString(status.getPath().toString(), UTF_8).toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1805639212ef92f9e0a91e9e9c1ad6644ed2ea82"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MDY5MzIz", "url": "https://github.com/Alluxio/alluxio/pull/11567#pullrequestreview-444069323", "createdAt": "2020-07-07T16:42:10Z", "commit": {"oid": "1805639212ef92f9e0a91e9e9c1ad6644ed2ea82"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjo0MjoxMFrOGuG6Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjo0MjoxMFrOGuG6Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwMDg5NQ==", "bodyText": "Complete this javadoc", "url": "https://github.com/Alluxio/alluxio/pull/11567#discussion_r451000895", "createdAt": "2020-07-07T16:42:10Z", "author": {"login": "calvinjia"}, "path": "core/client/hdfs/src/main/java/alluxio/hadoop/LocalCacheFileSystem.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.hadoop;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.file.URIStatus;\n+import alluxio.client.file.cache.CacheManager;\n+import alluxio.client.file.cache.LocalCacheFileInStream;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.AlluxioProperties;\n+import alluxio.conf.InstancedConfiguration;\n+import alluxio.conf.Source;\n+import alluxio.grpc.OpenFilePOptions;\n+import alluxio.metrics.MetricsConfig;\n+import alluxio.metrics.MetricsSystem;\n+import alluxio.util.ConfigurationUtils;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.permission.FsPermission;\n+import org.apache.hadoop.util.Progressable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+/**\n+ * An Alluxio client compatible with Apache Hadoop {@link org.apache.hadoop.fs.FileSystem}\n+ * interface, using Alluxio local cache. On cache miss,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1805639212ef92f9e0a91e9e9c1ad6644ed2ea82"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MDcyMDgx", "url": "https://github.com/Alluxio/alluxio/pull/11567#pullrequestreview-444072081", "createdAt": "2020-07-07T16:45:30Z", "commit": {"oid": "1805639212ef92f9e0a91e9e9c1ad6644ed2ea82"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1OTU5MTkz", "url": "https://github.com/Alluxio/alluxio/pull/11567#pullrequestreview-445959193", "createdAt": "2020-07-09T20:50:37Z", "commit": {"oid": "28d13642237aaf8fec39eca624b8a3e0b67b9abc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "28d13642237aaf8fec39eca624b8a3e0b67b9abc", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/28d13642237aaf8fec39eca624b8a3e0b67b9abc", "committedDate": "2020-07-09T20:48:06Z", "message": "Address comments"}, "afterCommit": {"oid": "35484cc8be9a5020fe942f148e5b0025884a75c2", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/35484cc8be9a5020fe942f148e5b0025884a75c2", "committedDate": "2020-07-14T00:19:45Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91f2316e05835d6c8d8b13eccb617d3947e0b772", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/91f2316e05835d6c8d8b13eccb617d3947e0b772", "committedDate": "2020-07-14T00:41:27Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "35484cc8be9a5020fe942f148e5b0025884a75c2", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/35484cc8be9a5020fe942f148e5b0025884a75c2", "committedDate": "2020-07-14T00:19:45Z", "message": "Address comments"}, "afterCommit": {"oid": "91f2316e05835d6c8d8b13eccb617d3947e0b772", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/91f2316e05835d6c8d8b13eccb617d3947e0b772", "committedDate": "2020-07-14T00:41:27Z", "message": "Address comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4516, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}