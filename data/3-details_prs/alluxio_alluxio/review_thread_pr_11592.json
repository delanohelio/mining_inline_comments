{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MjY4ODk1", "number": 11592, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODowNTozNVrOEG26rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMjoyNjowNlrOEG7pBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjI2NjcxOnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODowNTozNVrOGl6gxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMjowMToxM1rOGmBp6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwOTE1OQ==", "bodyText": "Can we do this for recursive delete?", "url": "https://github.com/Alluxio/alluxio/pull/11592#discussion_r442409159", "createdAt": "2020-06-18T18:05:35Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -2807,6 +2809,7 @@ public void setAcl(AlluxioURI path, SetAclAction action, List<AclEntry> entries,\n       SetAclContext context)\n       throws FileDoesNotExistException, AccessControlException, InvalidPathException, IOException {\n     Metrics.SET_ACL_OPS.inc();\n+    addFileSystemMasterCallTrackers(context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01b6ccf901c11047e37cd43e0c1e69ee711a7927"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUyNjE4NA==", "bodyText": "done. 818711a", "url": "https://github.com/Alluxio/alluxio/pull/11592#discussion_r442526184", "createdAt": "2020-06-18T22:01:13Z", "author": {"login": "ggezer"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -2807,6 +2809,7 @@ public void setAcl(AlluxioURI path, SetAclAction action, List<AclEntry> entries,\n       SetAclContext context)\n       throws FileDoesNotExistException, AccessControlException, InvalidPathException, IOException {\n     Metrics.SET_ACL_OPS.inc();\n+    addFileSystemMasterCallTrackers(context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwOTE1OQ=="}, "originalCommit": {"oid": "01b6ccf901c11047e37cd43e0c1e69ee711a7927"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjI3Njk1OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/contexts/OperationContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODowODozNVrOGl6nRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMjowMTowNVrOGmBprw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxMDgyMw==", "bodyText": "We should specify the parameter name:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  mCallTrackers.add(Preconditions.checkNotNull(callTracker));\n          \n          \n            \n                  mCallTrackers.add(Preconditions.checkNotNull(callTracker, \"callTracker\"));", "url": "https://github.com/Alluxio/alluxio/pull/11592#discussion_r442410823", "createdAt": "2020-06-18T18:08:35Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/contexts/OperationContext.java", "diffHunk": "@@ -23,41 +29,50 @@\n   // Proto message that is being wrapped\n   private T mOptionsBuilder;\n   // Used to track client call status.\n-  private CallTracker mCallTracker;\n+  private List<CallTracker> mCallTrackers;\n \n   /**\n    * Creates an instance with given proto message.\n    *\n    * @param optionsBuilder Internal proto message builder instance\n    */\n   public OperationContext(T optionsBuilder) {\n-    this(optionsBuilder, null);\n     mOptionsBuilder = optionsBuilder;\n-    mCallTracker = CallTracker.DISABLED_TRACKER;\n+    mCallTrackers = new LinkedList<>();\n   }\n \n   /**\n-   * Creates an instance with given proto message.\n-   *\n-   * @param optionsBuilder Internal proto message builder instance\n-   * @param callTracker client call tracker, or {@code null} if no tracking is desired\n+   * @return underlying proto message instance\n    */\n-  public OperationContext(T optionsBuilder, CallTracker callTracker) {\n-    mOptionsBuilder = optionsBuilder;\n-    mCallTracker = callTracker;\n+  public T getOptions() {\n+    return mOptionsBuilder;\n   }\n \n   /**\n-   * @return underlying proto message instance\n+   * Adds a new call-tracker to this context.\n+   *\n+   * @param callTracker the call tracker\n    */\n-  public T getOptions() {\n-    return mOptionsBuilder;\n+  public void addCallTracker(CallTracker callTracker) {\n+    synchronized (mCallTrackers) {\n+      mCallTrackers.add(Preconditions.checkNotNull(callTracker));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01b6ccf901c11047e37cd43e0c1e69ee711a7927"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUyNjEyNw==", "bodyText": "n/a", "url": "https://github.com/Alluxio/alluxio/pull/11592#discussion_r442526127", "createdAt": "2020-06-18T22:01:05Z", "author": {"login": "ggezer"}, "path": "core/server/master/src/main/java/alluxio/master/file/contexts/OperationContext.java", "diffHunk": "@@ -23,41 +29,50 @@\n   // Proto message that is being wrapped\n   private T mOptionsBuilder;\n   // Used to track client call status.\n-  private CallTracker mCallTracker;\n+  private List<CallTracker> mCallTrackers;\n \n   /**\n    * Creates an instance with given proto message.\n    *\n    * @param optionsBuilder Internal proto message builder instance\n    */\n   public OperationContext(T optionsBuilder) {\n-    this(optionsBuilder, null);\n     mOptionsBuilder = optionsBuilder;\n-    mCallTracker = CallTracker.DISABLED_TRACKER;\n+    mCallTrackers = new LinkedList<>();\n   }\n \n   /**\n-   * Creates an instance with given proto message.\n-   *\n-   * @param optionsBuilder Internal proto message builder instance\n-   * @param callTracker client call tracker, or {@code null} if no tracking is desired\n+   * @return underlying proto message instance\n    */\n-  public OperationContext(T optionsBuilder, CallTracker callTracker) {\n-    mOptionsBuilder = optionsBuilder;\n-    mCallTracker = callTracker;\n+  public T getOptions() {\n+    return mOptionsBuilder;\n   }\n \n   /**\n-   * @return underlying proto message instance\n+   * Adds a new call-tracker to this context.\n+   *\n+   * @param callTracker the call tracker\n    */\n-  public T getOptions() {\n-    return mOptionsBuilder;\n+  public void addCallTracker(CallTracker callTracker) {\n+    synchronized (mCallTrackers) {\n+      mCallTrackers.add(Preconditions.checkNotNull(callTracker));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxMDgyMw=="}, "originalCommit": {"oid": "01b6ccf901c11047e37cd43e0c1e69ee711a7927"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjI3OTUxOnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/contexts/OperationContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODowOToyMlrOGl6o7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODozMToyMVrOGl7Xow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxMTI0NQ==", "bodyText": "Why does this throw an Exception, and not just return false?", "url": "https://github.com/Alluxio/alluxio/pull/11592#discussion_r442411245", "createdAt": "2020-06-18T18:09:22Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/contexts/OperationContext.java", "diffHunk": "@@ -23,41 +29,50 @@\n   // Proto message that is being wrapped\n   private T mOptionsBuilder;\n   // Used to track client call status.\n-  private CallTracker mCallTracker;\n+  private List<CallTracker> mCallTrackers;\n \n   /**\n    * Creates an instance with given proto message.\n    *\n    * @param optionsBuilder Internal proto message builder instance\n    */\n   public OperationContext(T optionsBuilder) {\n-    this(optionsBuilder, null);\n     mOptionsBuilder = optionsBuilder;\n-    mCallTracker = CallTracker.DISABLED_TRACKER;\n+    mCallTrackers = new LinkedList<>();\n   }\n \n   /**\n-   * Creates an instance with given proto message.\n-   *\n-   * @param optionsBuilder Internal proto message builder instance\n-   * @param callTracker client call tracker, or {@code null} if no tracking is desired\n+   * @return underlying proto message instance\n    */\n-  public OperationContext(T optionsBuilder, CallTracker callTracker) {\n-    mOptionsBuilder = optionsBuilder;\n-    mCallTracker = callTracker;\n+  public T getOptions() {\n+    return mOptionsBuilder;\n   }\n \n   /**\n-   * @return underlying proto message instance\n+   * Adds a new call-tracker to this context.\n+   *\n+   * @param callTracker the call tracker\n    */\n-  public T getOptions() {\n-    return mOptionsBuilder;\n+  public void addCallTracker(CallTracker callTracker) {\n+    synchronized (mCallTrackers) {\n+      mCallTrackers.add(Preconditions.checkNotNull(callTracker));\n+    }\n   }\n \n   /**\n    * @return {@code true} if the call is cancelled by the client\n    */\n   public boolean isCancelled() {\n-    return mCallTracker.isCancelled();\n+    synchronized (mCallTrackers) {\n+      if (mCallTrackers.isEmpty()) {\n+        throw new IllegalStateException(\"No tracker registered.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01b6ccf901c11047e37cd43e0c1e69ee711a7927"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyMzIwMw==", "bodyText": "explained on another comment.", "url": "https://github.com/Alluxio/alluxio/pull/11592#discussion_r442423203", "createdAt": "2020-06-18T18:31:21Z", "author": {"login": "ggezer"}, "path": "core/server/master/src/main/java/alluxio/master/file/contexts/OperationContext.java", "diffHunk": "@@ -23,41 +29,50 @@\n   // Proto message that is being wrapped\n   private T mOptionsBuilder;\n   // Used to track client call status.\n-  private CallTracker mCallTracker;\n+  private List<CallTracker> mCallTrackers;\n \n   /**\n    * Creates an instance with given proto message.\n    *\n    * @param optionsBuilder Internal proto message builder instance\n    */\n   public OperationContext(T optionsBuilder) {\n-    this(optionsBuilder, null);\n     mOptionsBuilder = optionsBuilder;\n-    mCallTracker = CallTracker.DISABLED_TRACKER;\n+    mCallTrackers = new LinkedList<>();\n   }\n \n   /**\n-   * Creates an instance with given proto message.\n-   *\n-   * @param optionsBuilder Internal proto message builder instance\n-   * @param callTracker client call tracker, or {@code null} if no tracking is desired\n+   * @return underlying proto message instance\n    */\n-  public OperationContext(T optionsBuilder, CallTracker callTracker) {\n-    mOptionsBuilder = optionsBuilder;\n-    mCallTracker = callTracker;\n+  public T getOptions() {\n+    return mOptionsBuilder;\n   }\n \n   /**\n-   * @return underlying proto message instance\n+   * Adds a new call-tracker to this context.\n+   *\n+   * @param callTracker the call tracker\n    */\n-  public T getOptions() {\n-    return mOptionsBuilder;\n+  public void addCallTracker(CallTracker callTracker) {\n+    synchronized (mCallTrackers) {\n+      mCallTrackers.add(Preconditions.checkNotNull(callTracker));\n+    }\n   }\n \n   /**\n    * @return {@code true} if the call is cancelled by the client\n    */\n   public boolean isCancelled() {\n-    return mCallTracker.isCancelled();\n+    synchronized (mCallTrackers) {\n+      if (mCallTrackers.isEmpty()) {\n+        throw new IllegalStateException(\"No tracker registered.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxMTI0NQ=="}, "originalCommit": {"oid": "01b6ccf901c11047e37cd43e0c1e69ee711a7927"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjI5NTYyOnYy", "diffSide": "RIGHT", "path": "core/server/common/src/main/java/alluxio/master/StateLockManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODoxNDozM1rOGl6zmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMjowMDozNlrOGmBo2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxMzk3OQ==", "bodyText": "Does this create a new CallTracker each time? Is there a way to have a single instance of the call tracker?", "url": "https://github.com/Alluxio/alluxio/pull/11592#discussion_r442413979", "createdAt": "2020-06-18T18:14:33Z", "author": {"login": "gpang"}, "path": "core/server/common/src/main/java/alluxio/master/StateLockManager.java", "diffHunk": "@@ -217,6 +217,15 @@ public LockResource lockExclusive(StateLockOptions lockOptions)\n     });\n   }\n \n+  /**\n+   * Used to generate a call-tracker that knows when an interrupt cycle is active.\n+   *\n+   * @return the call tracker\n+   */\n+  public CallTracker getInterruptCycleTracker() {\n+    return () -> mInterruptCycleRefCount > 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01b6ccf901c11047e37cd43e0c1e69ee711a7927"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUyNTkxMw==", "bodyText": "singleton now.", "url": "https://github.com/Alluxio/alluxio/pull/11592#discussion_r442525913", "createdAt": "2020-06-18T22:00:36Z", "author": {"login": "ggezer"}, "path": "core/server/common/src/main/java/alluxio/master/StateLockManager.java", "diffHunk": "@@ -217,6 +217,15 @@ public LockResource lockExclusive(StateLockOptions lockOptions)\n     });\n   }\n \n+  /**\n+   * Used to generate a call-tracker that knows when an interrupt cycle is active.\n+   *\n+   * @return the call tracker\n+   */\n+  public CallTracker getInterruptCycleTracker() {\n+    return () -> mInterruptCycleRefCount > 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxMzk3OQ=="}, "originalCommit": {"oid": "01b6ccf901c11047e37cd43e0c1e69ee711a7927"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjI5NzYyOnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODoxNTowOFrOGl605A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODozOTo0NVrOGl7ooQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxNDMwOA==", "bodyText": "What is preventing us from just adding the tracker to every single context? I thought it is up to the individual rpc to use it or not?", "url": "https://github.com/Alluxio/alluxio/pull/11592#discussion_r442414308", "createdAt": "2020-06-18T18:15:08Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -3535,6 +3539,17 @@ public void stopSync(AlluxioURI syncPoint)\n     return mBlockMaster.getWorkerInfoList();\n   }\n \n+  /**\n+   * Used to augment given context with fsm bound call-trackers\n+   * TODO(ggezer): Call this for each call and filter by a new method annotation (@Tracked).\n+   *\n+   * @param context the operation context\n+   */\n+  private void addFileSystemMasterCallTrackers(OperationContext context) {\n+    // Add state-lock interrupt-cycle call-tracker to given context.\n+    context.addCallTracker(mMasterContext.getStateLockManager().getInterruptCycleTracker());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01b6ccf901c11047e37cd43e0c1e69ee711a7927"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyMjg5NA==", "bodyText": "The reasoning was to track tracked-APIs by explicitly working on them.\nCurrently, if an API decides to use the call-tracker, it must have been explicitly attached otherwise an exception is raised.\nI already have a todo in this method to make it general.", "url": "https://github.com/Alluxio/alluxio/pull/11592#discussion_r442422894", "createdAt": "2020-06-18T18:30:43Z", "author": {"login": "ggezer"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -3535,6 +3539,17 @@ public void stopSync(AlluxioURI syncPoint)\n     return mBlockMaster.getWorkerInfoList();\n   }\n \n+  /**\n+   * Used to augment given context with fsm bound call-trackers\n+   * TODO(ggezer): Call this for each call and filter by a new method annotation (@Tracked).\n+   *\n+   * @param context the operation context\n+   */\n+  private void addFileSystemMasterCallTrackers(OperationContext context) {\n+    // Add state-lock interrupt-cycle call-tracker to given context.\n+    context.addCallTracker(mMasterContext.getStateLockManager().getInterruptCycleTracker());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxNDMwOA=="}, "originalCommit": {"oid": "01b6ccf901c11047e37cd43e0c1e69ee711a7927"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyNzU1Mw==", "bodyText": "Since deleteInternal() is used by many, I believe we can't go with fail-if-not-tracked approach anymore. So I might make this method called by all APIs as well.", "url": "https://github.com/Alluxio/alluxio/pull/11592#discussion_r442427553", "createdAt": "2020-06-18T18:39:45Z", "author": {"login": "ggezer"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -3535,6 +3539,17 @@ public void stopSync(AlluxioURI syncPoint)\n     return mBlockMaster.getWorkerInfoList();\n   }\n \n+  /**\n+   * Used to augment given context with fsm bound call-trackers\n+   * TODO(ggezer): Call this for each call and filter by a new method annotation (@Tracked).\n+   *\n+   * @param context the operation context\n+   */\n+  private void addFileSystemMasterCallTrackers(OperationContext context) {\n+    // Add state-lock interrupt-cycle call-tracker to given context.\n+    context.addCallTracker(mMasterContext.getStateLockManager().getInterruptCycleTracker());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxNDMwOA=="}, "originalCommit": {"oid": "01b6ccf901c11047e37cd43e0c1e69ee711a7927"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzA0MDcwOnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMjoyNjowNlrOGmCL7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMjo0MTowNFrOGmCeYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzNDg5Mg==", "bodyText": "This is allowed to be @Nullable, right? We should handle that case.", "url": "https://github.com/Alluxio/alluxio/pull/11592#discussion_r442534892", "createdAt": "2020-06-18T22:26:06Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -4261,6 +4271,11 @@ private void removeBlocks(List<Long> blocks) throws IOException {\n     throw new IOException(\"Failed to remove deleted blocks from block master\", lastThrown);\n   }\n \n+  @Override\n+  public CallTracker composeCallTracker(CallTracker transportTracker) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21813e252928250a799789c24ba7576f6d83c8ed"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzOTYxNw==", "bodyText": "removed nullable.", "url": "https://github.com/Alluxio/alluxio/pull/11592#discussion_r442539617", "createdAt": "2020-06-18T22:41:04Z", "author": {"login": "ggezer"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -4261,6 +4271,11 @@ private void removeBlocks(List<Long> blocks) throws IOException {\n     throw new IOException(\"Failed to remove deleted blocks from block master\", lastThrown);\n   }\n \n+  @Override\n+  public CallTracker composeCallTracker(CallTracker transportTracker) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzNDg5Mg=="}, "originalCommit": {"oid": "21813e252928250a799789c24ba7576f6d83c8ed"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1479, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}