{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNzg2MDky", "number": 12606, "title": "Add JNI-based Fuse support", "bodyText": "Replace #12072", "createdAt": "2020-12-04T21:01:57Z", "url": "https://github.com/Alluxio/alluxio/pull/12606", "merged": true, "mergeCommit": {"oid": "355bca2291caef1370858684316b6a188d4f105e"}, "closed": true, "closedAt": "2020-12-11T04:26:15Z", "author": {"login": "apc999"}, "timelineItems": {"totalCount": 186, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc43i3RAH2gAyNTMyNzg2MDkyOmZkMTBhYzAxNmM2MzE1Mjc1ZjFhOTFmODQ1YTU0NWUyOGIyNjAyYWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdk_1uygFqTU0OTc4NjE2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fd10ac016c6315275f1a91f845a545e28b2602ad", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/fd10ac016c6315275f1a91f845a545e28b2602ad", "committedDate": "2020-07-27T01:28:42Z", "message": "Merge branch 'branch-2.3' of github.com:Alluxio/alluxio into branch-2.3-fuse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edb8130c4324d192b9a2617c813197eadff9a8c8", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/edb8130c4324d192b9a2617c813197eadff9a8c8", "committedDate": "2020-07-30T01:49:53Z", "message": "Implement write path for JNIFuse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "634a826d9bf3ea24cdd926b653c2a3f92c4531e5", "author": {"user": {"login": "cheyang", "name": "cheyang"}}, "url": "https://github.com/Alluxio/alluxio/commit/634a826d9bf3ea24cdd926b653c2a3f92c4531e5", "committedDate": "2020-08-03T21:16:43Z", "message": "Make the \"MOUNT_POINT\" docker env configurable\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11722\norig-commit: Alluxio/alluxio@ce2bcb689a2e1b62972771b1b082169f1559f6ea\norig-commit-author: cheyang <cheyang@163.com>\n\npr-link: Alluxio/alluxio#11880\nchange-id: cid-f5402843fcd24b10ff6bff73de5dc45371652350"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fe6062de394d1767cb95c9e685f278817e9f61e", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/8fe6062de394d1767cb95c9e685f278817e9f61e", "committedDate": "2020-08-06T00:04:50Z", "message": "Add version and revision when starting FUSE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a123020cec1a91321cf67f3c6ecf1650dd88050", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/7a123020cec1a91321cf67f3c6ecf1650dd88050", "committedDate": "2020-08-07T04:54:56Z", "message": "Fix Wasb UFS to respect block size"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb83023cc76d3a97e93eccc7393e63e55b824014", "author": {"user": {"login": "ZacBlanco", "name": "Zac Blanco"}}, "url": "https://github.com/Alluxio/alluxio/commit/bb83023cc76d3a97e93eccc7393e63e55b824014", "committedDate": "2020-08-08T07:29:19Z", "message": "Prevent adding conf on local start if it exists\n\nPreviously, if debug options were enabled on the JVM via java options\nlike ALLUXIO_MASTER_JAVA_OPTS, then alluxio getConf would not return the\nexpected result causing `alluxio.master.hostname` to be added to\n`alluxio-site.properties` multiple times. This change allows debug\noptions to be enabled on the JVM without filling up the\nalluxio-site.properties with a duplicated line.\n\nThere is one catch: If someone has `alluxio.master.hostname` set in\n`alluxio-env.sh`, then this would still be added exactly once to the\nsite properties, but the system property would still take\n\npr-link: Alluxio/alluxio#11583\nchange-id: cid-d5bf6470c308b919e2b9a0009f4ed11a7b6e5571"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f34d97ca10634eae587a73bd2f4528cd1efc65a0", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/f34d97ca10634eae587a73bd2f4528cd1efc65a0", "committedDate": "2020-08-11T02:07:27Z", "message": "Return ENONET on attr when file missing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ede638a6ee80504c5894c33dcfec0bc732bf4d74", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/ede638a6ee80504c5894c33dcfec0bc732bf4d74", "committedDate": "2020-08-11T19:04:53Z", "message": "Update logging info when starting FUSE process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "babeb1f5ef65db356eb4ddbb91bc45ce41acb09f", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/babeb1f5ef65db356eb4ddbb91bc45ce41acb09f", "committedDate": "2020-08-19T21:08:46Z", "message": "[DOCFIX] Update Code-Convention Page with Javadoc guide\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11797\norig-commit: Alluxio/alluxio@ddbd204fd1732c957fc3aaf018eab408451dbbc0\norig-commit-author: Bin Fan <fanbin103@gmail.com>\n\npr-link: Alluxio/alluxio#11831\nchange-id: cid-52082992161fa88cf02b91952abc0bfa7efbeef3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5c05ff77529ce4001c78cba1ef164fd5506bbf7", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/d5c05ff77529ce4001c78cba1ef164fd5506bbf7", "committedDate": "2020-08-19T21:08:47Z", "message": "Fix format in Code-Conventions page\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11830\norig-commit: Alluxio/alluxio@fcef548a677ad0efe97ed46195105049dc3c78de\norig-commit-author: Bin Fan <fanbin103@gmail.com>\n\npr-link: Alluxio/alluxio#11832\nchange-id: cid-38bce1f31cb429e7e4da1b18edd9db852de67939"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cd43e50896651ff41837928dba25818c1df5c2c", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/4cd43e50896651ff41837928dba25818c1df5c2c", "committedDate": "2020-08-19T21:08:47Z", "message": "[DOCFIX] Improve docker documentation\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11826\norig-commit: Alluxio/alluxio@1c1332aea01b5d53a70d0faaf2b5c8746d9e3d10\norig-commit-author: Bin Fan <fanbin103@gmail.com>\n\npr-link: Alluxio/alluxio#11846\nchange-id: cid-cfa8c14d57fda4fe1e168dd189768de206475b59"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1f1a7a40def2d0f959258792e85c9185a6056d6", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/d1f1a7a40def2d0f959258792e85c9185a6056d6", "committedDate": "2020-08-19T21:08:48Z", "message": "Fix format in Code-Conventions.md\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11845\norig-commit: Alluxio/alluxio@f65465ec2f7f672a54c73b981bcb2cb9c4ae6994\norig-commit-author: Bin Fan <fanbin103@gmail.com>\n\npr-link: Alluxio/alluxio#11848\nchange-id: cid-2684d20664fbbe0fcff43e0cb80a25e5a9a50272"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3cad6b765a5d5b94c8fba935f911f487d0a891f", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/b3cad6b765a5d5b94c8fba935f911f487d0a891f", "committedDate": "2020-08-19T21:08:48Z", "message": "[DOCFIX] Update Chinese Deploy Docs Cluster\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11781\norig-commit: Alluxio/alluxio@ba8f96a1b19273cfaa5463fd9c690da47bb330a2\norig-commit-author: thanosaw <56616222+thanosaw@users.noreply.github.com>\n\npr-link: Alluxio/alluxio#11852\nchange-id: cid-451bfb5e9167e6fd0f7c526d02396d434c3bab91"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb3f6f79520d1caceb429c80019651bebd5a9671", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/eb3f6f79520d1caceb429c80019651bebd5a9671", "committedDate": "2020-08-19T21:08:48Z", "message": "[DOCFIX] Add Transformation.md Chinese Version\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11835\norig-commit: Alluxio/alluxio@2510846f70208aa0d3d18c148a7bc3a7992a6fe7\norig-commit-author: thanosaw <56616222+thanosaw@users.noreply.github.com>\n\npr-link: Alluxio/alluxio#11853\nchange-id: cid-47a0df96211387545d5ccca05a73936394a68955"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c14bb10d82cc233111adf0e56a5cfb78951441f6", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/c14bb10d82cc233111adf0e56a5cfb78951441f6", "committedDate": "2020-08-19T21:08:49Z", "message": "[DOCFIX] Improve K8s troubleshooting doc\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11855\norig-commit: Alluxio/alluxio@39bbb28491a6915d74447ce27370e48a46ac1c5a\norig-commit-author: Adit Madan <adit@alluxio.com>\n\npr-link: Alluxio/alluxio#11861\nchange-id: cid-67e685262d571c3ac999d1dc07784c624649c13b"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cee8521716913330b45f3e85056254bddc9a4b11", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/cee8521716913330b45f3e85056254bddc9a4b11", "committedDate": "2020-08-19T21:08:49Z", "message": "[DOCFIX] Update docs for Alluxio on Local, Cluster, and with HA\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11721\norig-commit: Alluxio/alluxio@0231f6927db9b5639cbaea958870238ec06a76d5\norig-commit-author: Zac Blanco <zac@alluxio.com>\n\npr-link: Alluxio/alluxio#11864\nchange-id: cid-9d69e5c77bfd8ec2cfc15a29ce75ecb013feecfe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae21513160f50a462d22aaec1d3883372dc51062", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/ae21513160f50a462d22aaec1d3883372dc51062", "committedDate": "2020-08-19T21:08:50Z", "message": "[DOCFIX] Update Chinese Docker Doc\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11890\norig-commit: Alluxio/alluxio@7efb862fa04db8d81a222a14239e3ba84f555e99\norig-commit-author: thanosaw <56616222+thanosaw@users.noreply.github.com>\n\npr-link: Alluxio/alluxio#11893\nchange-id: cid-352608c0b48b70f43e7eaf9d0c6c064062275a7c"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "392441b13820b2bd60b1ecfe3637f4cbbef2d240", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/392441b13820b2bd60b1ecfe3637f4cbbef2d240", "committedDate": "2020-08-19T21:08:50Z", "message": "Add a new line at the end of file\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11887\norig-commit: Alluxio/alluxio@bb88f21d12231ba62fb323beadc5a399201f3a7c\norig-commit-author: David Zhu <david@alluxio.com>\n\npr-link: Alluxio/alluxio#11917\nchange-id: cid-3c0fb86f748b5f13157b7d18d0033a8f5f5b43be"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "160abcdb91215402d1497cf2fbcc51691e731e3d", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/160abcdb91215402d1497cf2fbcc51691e731e3d", "committedDate": "2020-08-19T21:08:51Z", "message": "Modify alluxio dataproc\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11777\norig-commit: Alluxio/alluxio@614824e45e27ab2b3529e3d40a27ddf4b4e669d4\norig-commit-author: LuQQiu <luqiujob@gmail.com>\n\npr-link: Alluxio/alluxio#11935\nchange-id: cid-54626712201afd3c6ca21babc127aba55531c6f7"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18009c6557ef359b825cd3dc967b0f12a92a1723", "author": {"user": {"login": "LuQQiu", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/18009c6557ef359b825cd3dc967b0f12a92a1723", "committedDate": "2020-08-19T21:08:51Z", "message": "Modify alluxio dataproc\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11796\norig-commit: Alluxio/alluxio@648090ce6d391ac5e0a6d135b5dcb0731783cfce\norig-commit-author: LuQQiu <luqiujob@gmail.com>\n\npr-link: Alluxio/alluxio#11936\nchange-id: cid-e9f582fc925599b75015b56f94ef9a93e345d519"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c254eccd4f871d32e62fcc052c0f2ac06d4ef79", "author": {"user": {"login": "LuQQiu", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/2c254eccd4f871d32e62fcc052c0f2ac06d4ef79", "committedDate": "2020-08-19T21:08:52Z", "message": "Modify dataproc doc and fix small bugs\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11817\norig-commit: Alluxio/alluxio@b346d89c454f6459132c5110d947fe3fe2840534\norig-commit-author: LuQQiu <luqiujob@gmail.com>\n\npr-link: Alluxio/alluxio#11937\nchange-id: cid-82c7259efac11c0e9538c3a947df5b96e966603c"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "008542c17c34a55feb9db52a110c020895423189", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/008542c17c34a55feb9db52a110c020895423189", "committedDate": "2020-08-19T21:08:52Z", "message": "Modify alluxio client sync link for whatever version\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11838\norig-commit: Alluxio/alluxio@f7c2acfa7c40bfddcd7481e50aaf0e4aed726c0f\norig-commit-author: LuQQiu <luqiujob@gmail.com>\n\npr-link: Alluxio/alluxio#11939\nchange-id: cid-ed0fb2d5118f85e35c71f10b3b57455c453e011c"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc2a100b6e84ebea3076e228995ec7d3d33b03da", "author": {"user": {"login": "thanosaw", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/fc2a100b6e84ebea3076e228995ec7d3d33b03da", "committedDate": "2020-08-19T21:08:53Z", "message": "[DOCFIX] Update Chinese Caching Doc\n\npr-link: Alluxio/alluxio#11872\nchange-id: cid-e94178e1f9cfb853fc99270a2df66a904716a7c1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4133aa8c58b22b27ac024401f95fd7f8764186ae", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/4133aa8c58b22b27ac024401f95fd7f8764186ae", "committedDate": "2020-08-19T21:08:53Z", "message": "[DOCFIX] Add Chinese Ozone Doc\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11920\norig-commit: Alluxio/alluxio@da292992476e92e3d489bec77ca7df417b078625\norig-commit-author: thanosaw <56616222+thanosaw@users.noreply.github.com>\n\npr-link: Alluxio/alluxio#11959\nchange-id: cid-654fee1f29cda6cb9f2ce5c9a95070a0391ac994"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc33f36b106550d1bb707a122646b957f7681a32", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/dc33f36b106550d1bb707a122646b957f7681a32", "committedDate": "2020-08-19T21:08:54Z", "message": "[DOCFIX] Add Chinese Spark on Kubernetes Doc\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11873\norig-commit: Alluxio/alluxio@9f865e002ce223b4d06f3400b16690b86fc216ad\norig-commit-author: thanosaw <56616222+thanosaw@users.noreply.github.com>\n\npr-link: Alluxio/alluxio#11960\nchange-id: cid-f430d6191a7b9c21988ef802627d10326d3de28f"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "002a64e7e6d390f21ac382985e5d90cb4cdcb1bf", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/002a64e7e6d390f21ac382985e5d90cb4cdcb1bf", "committedDate": "2020-08-19T21:08:54Z", "message": "[DOCFIX] Update docker and k8s page w.r.t. short-circuit ops\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11967\norig-commit: Alluxio/alluxio@13b236706f1513ea2eb8455e8db4b4f245e9fb1b\norig-commit-author: Bin Fan <fanbin103@gmail.com>\n\npr-link: Alluxio/alluxio#11968\nchange-id: cid-b4704aed81d4ff9ed291f72b330244e466935098"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "113f9c53b90af48a82b8466f15813a4e49b0d414", "author": {"user": {"login": "LuQQiu", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/113f9c53b90af48a82b8466f15813a4e49b0d414", "committedDate": "2020-08-19T21:08:55Z", "message": "[DOCFIX] Add back empty end of file line in Ozone doc\n\nAdd back empty end of file line in Ozone doc\n\npr-link: Alluxio/alluxio#11970\nchange-id: cid-2ef557b1a0f0380aeff0c57cec7b0cac4df83cc3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14ad6fe053aa51f0745686813b640ea869cc0d1f", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/14ad6fe053aa51f0745686813b640ea869cc0d1f", "committedDate": "2020-08-19T21:08:55Z", "message": "Cleanup metrics for local cache\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11981\norig-commit: Alluxio/alluxio@7482a8796ac146f1bad40fdf3c2b7efb8b8ff12c\norig-commit-author: Bin Fan <fanbin103@gmail.com>\n\npr-link: Alluxio/alluxio#11989\nchange-id: cid-0ee0d118fb96803879ff936d7e8ddab76e8c81a5"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee748014117412143eea089b02fba83de896e745", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/ee748014117412143eea089b02fba83de896e745", "committedDate": "2020-08-19T21:08:55Z", "message": "Reduce spammy logging for object store failed opens\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11992\norig-commit: Alluxio/alluxio@0756e57d92b0fbd15012cc61e193f7239a7f5702\norig-commit-author: Gene Pang <gene.pang@gmail.com>\n\npr-link: Alluxio/alluxio#11996\nchange-id: cid-63bd31bf74367098834abf49bae0f981dd725ffe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a264324b469fcb3a7fca560972659e291f8cbc4", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/1a264324b469fcb3a7fca560972659e291f8cbc4", "committedDate": "2020-08-19T21:08:56Z", "message": "Fix ClosedByInterruptException issue in local cache\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11994\norig-commit: Alluxio/alluxio@3d27edb6bcd5dd8185efeea449960b5f51c18fed\norig-commit-author: alluxio-bot <bot@alluxio.com>\n\npr-link: Alluxio/alluxio#11998\nchange-id: cid-f1a595196b5de684ec813cde56eb2636d17af01b"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1005cbee04cea6bb8ef919379cd53f3851e6ae56", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/1005cbee04cea6bb8ef919379cd53f3851e6ae56", "committedDate": "2020-08-19T21:08:56Z", "message": "Remove CLIENT_CACHE_PUT_EXISTING_PAGE_ERRORS\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11995\norig-commit: Alluxio/alluxio@7bfd2783cf6a17c4c9b762e278fe698e6f5df9fd\norig-commit-author: Bin Fan <fanbin103@gmail.com>\n\npr-link: Alluxio/alluxio#12001\nchange-id: cid-d137c94d413167651ce6d0d706d82002b67c0824"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f327476f8e7c51dc43fb1f6d65c15f41743f6831", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/f327476f8e7c51dc43fb1f6d65c15f41743f6831", "committedDate": "2020-08-19T21:08:57Z", "message": "Increase the memory limit of fuse in kubernetes\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11676\norig-commit: Alluxio/alluxio@fc17f8287679d6ff049691828f83ae9a4d4e2345\norig-commit-author: cheyang <cheyang@163.com>\n\npr-link: Alluxio/alluxio#12006\nchange-id: cid-22d0de83c6caf583930ae16dacd69fc1178909f1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a0036e485f380c85cdccce40bbb33a277397d58", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/3a0036e485f380c85cdccce40bbb33a277397d58", "committedDate": "2020-08-19T21:08:57Z", "message": "Support customized environment variables for helm chart\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11716\norig-commit: Alluxio/alluxio@01d1a9adb5979936b4f9e3beaaa5a7cf8bc9b656\norig-commit-author: cheyang <cheyang@163.com>\n\npr-link: Alluxio/alluxio#12007\nchange-id: cid-58df19d62c836d4781a3f15cab26c75e5771b972"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "befe56e0bd3c7a566a2c260a9f79db104dc09901", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/befe56e0bd3c7a566a2c260a9f79db104dc09901", "committedDate": "2020-08-19T21:08:58Z", "message": "Fix comma-separated medium types parsing in Helm chart\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11786\norig-commit: Alluxio/alluxio@16daf4b333269bf1049e396a9612a57ea89ce379\norig-commit-author: Jiacheng Liu <jiacheliu3@gmail.com>\n\npr-link: Alluxio/alluxio#12009\nchange-id: cid-41a2e561369e94e2c4d8675c882b9ca8189f2580"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf6a9bc1e6c4c042d7e817331866304cf207dc7a", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/cf6a9bc1e6c4c042d7e817331866304cf207dc7a", "committedDate": "2020-08-19T21:08:58Z", "message": "Fix Fuse YAML to use ALLUXIO_USER_JAVA_OPTS\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11840\norig-commit: Alluxio/alluxio@7a7ebd5d4db2c3042063b947de8fadec9182bdee\norig-commit-author: Jiacheng Liu <jiacheliu3@gmail.com>\n\npr-link: Alluxio/alluxio#12010\nchange-id: cid-9ce23928fb9bd728da319e1a3563a511327dac4a"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cecd584f1ed3d7cdb84416e36c3384d400eb088", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/2cecd584f1ed3d7cdb84416e36c3384d400eb088", "committedDate": "2020-08-19T21:08:59Z", "message": "Change K8s liveness/readiness probe to TCP\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11900\norig-commit: Alluxio/alluxio@0e34af6e2a1cb3e1b5fd13974523d88044fa616f\norig-commit-author: Jiacheng Liu <jiacheliu3@gmail.com>\n\npr-link: Alluxio/alluxio#12011\nchange-id: cid-9c1a2a589c95b5eb39975a0784b289cbfa457a25"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d1198fe323481e1cb73589b171cb1f3102ab7b1", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/6d1198fe323481e1cb73589b171cb1f3102ab7b1", "committedDate": "2020-08-19T21:08:59Z", "message": "Use ALLUXIO_FUSE_OPTS when creating FUSE container\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11971\norig-commit: Alluxio/alluxio@9be8860b167e966419b70e894b969adf05b514a0\norig-commit-author: Jiacheng Liu <jiacheliu3@gmail.com>\n\npr-link: Alluxio/alluxio#12012\nchange-id: cid-9c8e1a254b071986982323e65ea5b333c592de97"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5007548bd27188f315080b6a5f55f7fcd9abb299", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/5007548bd27188f315080b6a5f55f7fcd9abb299", "committedDate": "2020-08-21T07:09:28Z", "message": "Add support to use a special file to run Alluxio command in fuse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e0ebc6776053cdb806ddb950416f234adc95591", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/0e0ebc6776053cdb806ddb950416f234adc95591", "committedDate": "2020-09-02T22:43:37Z", "message": "Load cluster default conf in AlluxioFuse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3c02ec4d6b53e970477dc2b57058cb8a16768e0", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/c3c02ec4d6b53e970477dc2b57058cb8a16768e0", "committedDate": "2020-09-08T19:42:36Z", "message": "Support changing to the user which is not in dockerfile\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#12077\norig-commit: Alluxio/alluxio@64a38c0a3de286d49a665d798868248bc5393409\norig-commit-author: cheyang <cheyang@163.com>\n\npr-link: Alluxio/alluxio#12084\nchange-id: cid-9ce834a75fabd2ce3d939e75c20b1dea042b0e56"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9640d623bac1f2511626e276cac2654f75efb247", "author": {"user": {"login": "bastrik", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/9640d623bac1f2511626e276cac2654f75efb247", "committedDate": "2020-09-11T07:44:23Z", "message": "Add Azure Data Lake Gen 1 support for UFS\n\nAdds ADL Gen1 UFS extension as a HDFS extension.\n\nAttn @apc999 @madanadit\n\npr-link: Alluxio/alluxio#12047\nchange-id: cid-159a2cdcf8d35b9481c0f198283c17c46e98c586"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f77d66da79bb88c30ceec53dbe88b697a5482ba9", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/f77d66da79bb88c30ceec53dbe88b697a5482ba9", "committedDate": "2020-09-11T07:59:25Z", "message": "Respect gid/uid in getAttr in jniFuse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0769d2f95e46766911049f49a22651c19c94fd38", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/0769d2f95e46766911049f49a22651c19c94fd38", "committedDate": "2020-09-13T22:54:06Z", "message": "Add loadMetadata command\n\nWe used to have a command `fs loadMetadata`\nThis PR restores loadMetadata command, but as a client-side optimization\nwithout storing all returned `ls` results, preventing OOM for massive\namount of small files.\n\nThis optimization is experimental, going to branch-2.3-fuse only for now\n\nFix https://github.com/Alluxio/alluxio/issues/12088\n\npr-link: Alluxio/alluxio#12105\nchange-id: cid-d54b6378eb56292355832456acee65e104322dd4"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e393081cf0d49ede4c2650498c6b9284873b4ac", "author": {"user": {"login": "cheyang", "name": "cheyang"}}, "url": "https://github.com/Alluxio/alluxio/commit/0e393081cf0d49ede4c2650498c6b9284873b4ac", "committedDate": "2020-09-14T00:57:21Z", "message": "Support dynamic user to run alluxio\n\nThe issue is that alluxio docker image only supports two users: alluxio\nand root, but in the customer env, they have more users and the data of\neach user are isolated. So we need to make alluxio docker image can\nsupport run container by specifying during running time.\n\nThis feature by default is disabled.\n\npr-link: Alluxio/alluxio#12104\nchange-id: cid-37cd7ac23075b398b428434f12bf0169710fd3d9"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71008b48e816e8c437d2f3e1b34e944ae325f394", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/71008b48e816e8c437d2f3e1b34e944ae325f394", "committedDate": "2020-09-16T19:49:41Z", "message": "Fix early quit of loadMetadata"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "358c0a4cdd10585a8ce5276ded50fa2d44f9e417", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/358c0a4cdd10585a8ce5276ded50fa2d44f9e417", "committedDate": "2020-09-25T00:55:41Z", "message": "Revert change in log4j setting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31027f36c5f2aef53d52c8f929aa8d1c489b92ef", "author": {"user": {"login": "cheyang", "name": "cheyang"}}, "url": "https://github.com/Alluxio/alluxio/commit/31027f36c5f2aef53d52c8f929aa8d1c489b92ef", "committedDate": "2020-09-27T18:53:28Z", "message": "Support dynamic non-root user for alluxio fuse\n\npr-link: Alluxio/alluxio#12143\nchange-id: cid-367014ca1cf96e776544cbb7a1a8aca03d69b40b"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a1b839be1c7676fbf2cb70674b10db79f647e89", "author": {"user": {"login": "calvinjia", "name": "Calvin Jia"}}, "url": "https://github.com/Alluxio/alluxio/commit/4a1b839be1c7676fbf2cb70674b10db79f647e89", "committedDate": "2020-09-29T01:00:08Z", "message": "[SMALLFIX] Do not trigger async caching on posRead if source is local\n\nSmall fix to make posRead behavior mimic normal read behavior. If the\nsource is local, we have already cached the data. Unfortunately our\ntesting framework is not fine grained enough to track the RPC calls (see\nAlluxioFileInStreamTest#L752).\nIn general, our strategy of sending async cache requests has been\naggressive because we believed it is cheap for the worker to filter out\nduplicate requests. If this is not the case, we can probably further\ndecrease the number of async cache requests we make.\n\npr-link: Alluxio/alluxio#11813\nchange-id: cid-2b2f4e2e636e1abceb955ae065b7dd75877c6491"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a47109b0e52a4212eb82e4d7a34b64b0cecceedb", "author": {"user": {"login": "chaowangnk1", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/a47109b0e52a4212eb82e4d7a34b64b0cecceedb", "committedDate": "2020-09-29T01:01:26Z", "message": "Fix deadlock of racing worker client acquisition and file completion\n\nFix bug: fuse pod hang forever if open&read many files without close the\nfiles\n\nRoot cause:\n`mBlockInStream` in `AlluxioFileInStream` won't be released even reading\nto end of the block.\nIn this case, `BlockWorkerClient` will be held in `BlockInStream`. Given\nmany files opened, `BlockWorkerClient` in the pool will be exhausted and\nthe following operations will be blocked.\nFix:\nRelease `mBlockInStream` after reading to end of the block.\n\npr-link: Alluxio/alluxio#12139\nchange-id: cid-34eb4e2af8c68dd0a67a0947a27f95777f8b84f0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3d67d609dc75482e93edd2875e7761059c6b520", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/b3d67d609dc75482e93edd2875e7761059c6b520", "committedDate": "2020-10-21T00:15:22Z", "message": "Revert \"Add support to use a special file to run Alluxio command in fuse\"\n\nThis reverts commit 5007548bd27188f315080b6a5f55f7fcd9abb299."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2fb1ff3e0c267bda4297096973c1da78b210a36", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/d2fb1ff3e0c267bda4297096973c1da78b210a36", "committedDate": "2020-10-21T00:42:00Z", "message": "Add distributedLoad to Rest API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75a8e27b30141a44f9378cbbed1bc04dbbfbbe0e", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/75a8e27b30141a44f9378cbbed1bc04dbbfbbe0e", "committedDate": "2020-10-21T20:43:39Z", "message": "Add client-side API to iterate on results of listStatus\n\nThis PR aims to optimize client-side RPC handling for the case where\nmaster returns a large list of URIStatus.\n\nWith the new client-side api added in this patch, client can proceed\nwith partially transmitted listStatus results, without creating extra\nlist and wait for all results to complete. This can reduce the memory\npressure and latency when list a large directory.\n\nOther implications\n\n- avoid unnecessary sort in `fs ls` which further reduce memory and\nlatency.\n- also update `distributedLoad` and `count` cli to avoid unnecessary\nrecursion and able to proceed with partially returned status\n\npr-link: Alluxio/alluxio#12315\nchange-id: cid-b345a7588fd4e92380a126261ed4444d3fea71e1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ade8881850284b8fca682d733a59f35c2c1ecd29", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/ade8881850284b8fca682d733a59f35c2c1ecd29", "committedDate": "2020-10-29T04:56:21Z", "message": "Use iterateStatus for Fuse readdir"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5128a866be2ea29c38ada30de4c0b819d617516", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/c5128a866be2ea29c38ada30de4c0b819d617516", "committedDate": "2020-10-30T00:19:45Z", "message": "Avoid duplicates with metadata caching client on iterateStatus\n\nFix https://github.com/Alluxio/alluxio/issues/12373\n\npr-link: Alluxio/alluxio#12423\nchange-id: cid-c86d2fbb28cd904e612cb64166983a21fdd2c3a6"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9291b5f6115fc6a25b42d81ccdc34ac7eeea2632", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/9291b5f6115fc6a25b42d81ccdc34ac7eeea2632", "committedDate": "2020-11-03T02:39:22Z", "message": "Prevent unnecessary inode syncing\n\nFix https://github.com/Alluxio/alluxio/issues/12372\n\nBefore this PR, running\n```\nbin/alluxio fs ls -Dalluxio.user.file.metadata.sync.interval=0 /path\n```\nwill trigger syncing inodes:\n(1) `/path`\n(2) `/path/{children}`\n(3) `/path/{children}/{children}` (added to pending inode queue when\n`InodeSyncStream` traversing (2))\n\nReading (3) is unnecessary w.r.t. the command we are interested. This PR\ncheck and prevent setting flag `syncChildren` unnecessarily.\n\n\nIn addition, this patch also saves one unnecessary RPC on ls command.\n\npr-link: Alluxio/alluxio#12441\nchange-id: cid-d1db929879e7e3a50b4e4a324391f7112dd8ef17"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42a0cf7df85be3225d226a36b37908d04e8cb595", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/42a0cf7df85be3225d226a36b37908d04e8cb595", "committedDate": "2020-11-05T07:52:14Z", "message": "Add Uid and Gid Cache in Fuse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17dd19a291778a6857d8a851064cf4d9495f528c", "author": {"user": {"login": "gpang", "name": "Gene Pang"}}, "url": "https://github.com/Alluxio/alluxio/commit/17dd19a291778a6857d8a851064cf4d9495f528c", "committedDate": "2020-11-06T21:25:25Z", "message": "Avoid printing long proto lines in messages and exception descriptions\n\nWhen printing a request proto as a log message or exception message,\nsome requests contain large payloads. Those large payloads make it\ndifficult to inspect the message. This change truncates individual lines\nof message.\n\npr-link: Alluxio/alluxio#12120\nchange-id: cid-224a09f358e9dee38af8c1131fcc064a14f16576"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebadd50ef4833deafd1ba98f3107804d2280aabe", "author": {"user": {"login": "gpang", "name": "Gene Pang"}}, "url": "https://github.com/Alluxio/alluxio/commit/ebadd50ef4833deafd1ba98f3107804d2280aabe", "committedDate": "2020-11-06T21:26:02Z", "message": "Log slow remote reads and writes\n\nFor worker remote reads and writes, if a particular read or write takes\nlonger than expected, we log (via the sampling logger) a message to give\na sense of the delays.\n\npr-link: Alluxio/alluxio#12449\nchange-id: cid-a2baa04dc4fba7ecd7ff8fafc344e621722fff65"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fde044bc129031541f82cccbf7ac5328b733aeb", "author": {"user": {"login": "gpang", "name": "Gene Pang"}}, "url": "https://github.com/Alluxio/alluxio/commit/4fde044bc129031541f82cccbf7ac5328b733aeb", "committedDate": "2020-11-06T21:29:13Z", "message": "Use longer remote io timeouts to account for slow operations\n\nSome client requests to workers may take a long time, especially if UFS\nis involved. In order to avoid spurious errors, the timeout should be\nmuch longer, but we also log a message every minute while the client is\nwaiting.\n\npr-link: Alluxio/alluxio#12463\nchange-id: cid-8f2f692aa34b73f134295d906915040f66208296"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "238b7eb3ec58270aabf7004ac01cc89e6034b93e", "author": {"user": {"login": "chaowangnk1", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/238b7eb3ec58270aabf7004ac01cc89e6034b93e", "committedDate": "2020-11-08T17:51:13Z", "message": "Improve concurrent read performance through RPC\n\nTarget to fix #12146\nTwo improvements:\n1) When multiple processes/threads accessing the same blocks\nconcurrently, same data will be read only once with SharedDataReader.\nSharedDataReader buffers blocks on the client side. It will buffer a\nblock from index 0 to the biggest index being read. Only when no\nprocesses/threads accessing this block will the block buffer being\nremoved.\n2) Seek(pos) improvements. Previously close and reopen DataReader\nintroduce many overheads. The improvements look like target to reduce\nthe DataReader reopen. When reading backward, SharedDataReader can\ndirectly read from local cache. when reading forward, instead of doing\nseek(), the BlockInStream will try to read data already received but not\nprocessed to reach the target pos.\n\nServeral TODOs/improvements\nSeek in DataBuffer instead of data copy while seeking inner a chunk\nSharedDataReader locking\nAdd memory limits for shared data buffer.\n\nCo-authored-by: Lu Qiu <luqiujob@gmail.com>\nCo-authored-by: Chao Wang\n<71095236+chaowangnk1@users.noreply.github.com>\nCo-authored-by: Mickey Zhang <rzhang56@illinois.edu>\n\npr-link: Alluxio/alluxio#12453\nchange-id: cid-d45fc27d225aa06e546dd9e367923f2d8b5ffd64"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c412267e0e749ced63262d53043cf753cc11927", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/2c412267e0e749ced63262d53043cf753cc11927", "committedDate": "2020-11-13T07:24:19Z", "message": "Make the inital UFS block size accurate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d29ac54dae0e24a217db897a9561048d12ebf01", "author": {"user": {"login": "bastrik", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/9d29ac54dae0e24a217db897a9561048d12ebf01", "committedDate": "2020-11-17T17:51:06Z", "message": "Add rename op to libjnifuse\n\nAdd rename operation to the c++ fs layer.\n\npr-link: Alluxio/alluxio#12497\nchange-id: cid-400bf2b00118ec92ed5724bd600cb188a97cab2f"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c9c7c2c8c3cfc00ccd942e06499fe8ca0d5d9c4", "author": {"user": {"login": "gpang", "name": "Gene Pang"}}, "url": "https://github.com/Alluxio/alluxio/commit/6c9c7c2c8c3cfc00ccd942e06499fe8ca0d5d9c4", "committedDate": "2020-11-18T04:05:14Z", "message": "Add bintray repo for jnr-fuse\n\n\n\npr-link: Alluxio/alluxio#12516\nchange-id: cid-ae24dcc307c559f9676131407e576dffa0ef4beb"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad365af784b9df6b9e770e5c60595487ec447a89", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/ad365af784b9df6b9e770e5c60595487ec447a89", "committedDate": "2020-11-18T20:09:39Z", "message": "Fix worker pod start failure with changed rpc/data/web ports\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#12552\norig-commit: Alluxio/alluxio@2df858159628a253a59e79660fe383405159dd38\norig-commit-author: chaowangnk1 <71095236+chaowangnk1@users.noreply.github.com>\n\npr-link: Alluxio/alluxio#12554\nchange-id: cid-f01e4db303202f24728dbc318ec4283d4889f900"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da9cd87df06bd4d93fd25df267d83effb5145171", "author": {"user": {"login": "bradyoo", "name": "Bradley Yoo"}}, "url": "https://github.com/Alluxio/alluxio/commit/da9cd87df06bd4d93fd25df267d83effb5145171", "committedDate": "2020-11-19T23:31:59Z", "message": "Decrease default job retention time\n\nNote that job retention time only kicks in when the JobMaster is at\ncapacity in terms of number of jobs stored.\n\npr-link: Alluxio/alluxio#12468\nchange-id: cid-aee52a573b084e73ba850ea59027f808310ff539"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18ec83c4c57b5fc76f28323249a36b23f678e4a4", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/18ec83c4c57b5fc76f28323249a36b23f678e4a4", "committedDate": "2020-11-25T04:40:35Z", "message": "Clean up unnecessary logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0d03f49f9b9e2e72fd4cf8f770cc38852273f7d", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/a0d03f49f9b9e2e72fd4cf8f770cc38852273f7d", "committedDate": "2020-11-26T05:50:29Z", "message": "Change BlockStoreEventListener lock to be more finegrained\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#12579\norig-commit: Alluxio/alluxio@6f02d59974327da60d4dd005c45a5ce13dc4cf74\norig-commit-author: LuQQiu <luqiujob@gmail.com>\n\npr-link: Alluxio/alluxio#12584\nchange-id: cid-714abbf1a78ac4f1696ee759060e7eb5208e8631"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "985b84c2907e75ceee1985b3953bf9087645e693", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/985b84c2907e75ceee1985b3953bf9087645e693", "committedDate": "2020-11-26T05:51:12Z", "message": "Remove synchronization on releasing directByteBuffer\n\npr-link: Alluxio/alluxio#12580\nchange-id: cid-90eb8c3c9b7aeaf3f92f49edc8462b828cbcb987"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03c89b536ad9bad305a04ff38f2001d276f6b17e", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/03c89b536ad9bad305a04ff38f2001d276f6b17e", "committedDate": "2020-12-03T09:07:19Z", "message": "Improve distributedLoad"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5addc3d718d9788adbec007f9b2ea23c34d53f2", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/f5addc3d718d9788adbec007f9b2ea23c34d53f2", "committedDate": "2020-12-04T20:58:54Z", "message": "Merge branch 'master' into merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6200ed444bb19d3c4f8e7beb73c3e27c3a8b124b", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/6200ed444bb19d3c4f8e7beb73c3e27c3a8b124b", "committedDate": "2020-12-04T21:54:47Z", "message": "Cleanup unused code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3745c016049645d5603488508916408d9459b293", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/3745c016049645d5603488508916408d9459b293", "committedDate": "2020-12-04T21:55:03Z", "message": "Revert \"Improve distributedLoad\"\n\nThis reverts commit 03c89b536ad9bad305a04ff38f2001d276f6b17e."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0968fbdec3f4b8102d91e81c62861a2f12072c40", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/0968fbdec3f4b8102d91e81c62861a2f12072c40", "committedDate": "2020-12-04T21:41:20Z", "message": "Cleanup unused code"}, "afterCommit": {"oid": "3745c016049645d5603488508916408d9459b293", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/3745c016049645d5603488508916408d9459b293", "committedDate": "2020-12-04T21:55:03Z", "message": "Revert \"Improve distributedLoad\"\n\nThis reverts commit 03c89b536ad9bad305a04ff38f2001d276f6b17e."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MzM0NzU5", "url": "https://github.com/Alluxio/alluxio/pull/12606#pullrequestreview-545334759", "createdAt": "2020-12-04T22:16:11Z", "commit": {"oid": "3745c016049645d5603488508916408d9459b293"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjoxNjoxMlrOH_kOOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjozMDowOVrOH_kl6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxNTgwMA==", "bodyText": "Is the big  fuse log size needed?", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r536415800", "createdAt": "2020-12-04T22:16:12Z", "author": {"login": "LuQQiu"}, "path": "conf/log4j.properties", "diffHunk": "@@ -172,7 +172,7 @@ log4j.appender.USER_LOGGER.layout.ConversionPattern=%d{ISO8601} %-5p %c{1} - %m%\n # Appender for Fuse\n log4j.appender.FUSE_LOGGER=org.apache.log4j.RollingFileAppender\n log4j.appender.FUSE_LOGGER.File=${alluxio.logs.dir}/fuse.log\n-log4j.appender.FUSE_LOGGER.MaxFileSize=10MB\n+log4j.appender.FUSE_LOGGER.MaxFileSize=500MB", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3745c016049645d5603488508916408d9459b293"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxNzIyMA==", "bodyText": "Can  be changed to a local variable", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r536417220", "createdAt": "2020-12-04T22:19:23Z", "author": {"login": "LuQQiu"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java", "diffHunk": "@@ -60,8 +61,9 @@\n   private final long mId;\n   /** The size in bytes of the block. */\n   private final long mLength;\n-\n+  private final FileSystemContext mContext;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3745c016049645d5603488508916408d9459b293"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxOTY4MA==", "bodyText": "This property is unused, can it be removed? The description is not very clear as well", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r536419680", "createdAt": "2020-12-04T22:25:06Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -4346,6 +4365,30 @@ public String toString() {\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.IGNORE)\n           .setScope(Scope.CLIENT)\n           .build();\n+  public static final PropertyKey FUSE_JNIFUSE_ENABLED =\n+      new Builder(Name.FUSE_JNIFUSE_ENABLED)\n+          .setDefaultValue(true)\n+          .setDescription(\"Use experimental JNIFUSE library for better performance.\")\n+          .setConsistencyCheckLevel(ConsistencyCheckLevel.IGNORE)\n+          .setScope(Scope.CLIENT)\n+          .build();\n+  public static final PropertyKey FUSE_SHARED_CACHING_READER_ENABLED =\n+      new Builder(Name.FUSE_SHARED_CACHING_READER_ENABLED)\n+          .setDefaultValue(false)\n+          .setDescription(\"(Experimental) Use share grpc data reader for better performance \"\n+              + \"on multi-process file reading through Alluxio JNI Fuse. \"\n+              + \"Blocks data will be cached on the client side \"\n+              + \"so more memory is required for the Fuse process.\")\n+          .setConsistencyCheckLevel(ConsistencyCheckLevel.IGNORE)\n+          .setScope(Scope.CLIENT)\n+          .build();\n+  public static final PropertyKey FUSE_MAXCACHE_BYTES =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3745c016049645d5603488508916408d9459b293"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyMDA3MA==", "bodyText": "Can alluxio dockerhub directly  host the image?", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r536420070", "createdAt": "2020-12-04T22:25:57Z", "author": {"login": "LuQQiu"}, "path": "integration/docker/Dockerfile.fuse", "diffHunk": "@@ -35,18 +35,23 @@ RUN if [ ${ENABLE_DYNAMIC_USER} = \"true\" ] ; then \\\n        chmod -R 777 /opt/* ; \\\n     fi\n \n-FROM ubuntu:16.04\n+# instead of ubuntu:16.04, use cheyang/fuse2:ubuntu1604-customize for now\n+# which has customized libfuse installed\n+# to use standard ubuntu1604, add \"fuse\" to the list of \"apt-get install\"\n+FROM cheyang/fuse2:ubuntu1604-customize", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3745c016049645d5603488508916408d9459b293"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyMTg2Ng==", "bodyText": "Are we using kernel_cache now?", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r536421866", "createdAt": "2020-12-04T22:30:09Z", "author": {"login": "LuQQiu"}, "path": "integration/fuse/src/main/java/alluxio/fuse/AlluxioFuse.java", "diffHunk": "@@ -41,51 +47,107 @@\n public final class AlluxioFuse {\n   private static final Logger LOG = LoggerFactory.getLogger(AlluxioFuse.class);\n \n+  private static final Option MOUNT_POINT_OPTION = Option.builder(\"m\")\n+      .hasArg()\n+      .required(true)\n+      .longOpt(\"mount-point\")\n+      .desc(\"Desired local mount point for alluxio-fuse.\")\n+      .build();\n+\n+  private static final Option ALLUXIO_ROOT_OPTION = Option.builder(\"r\")\n+      .hasArg()\n+      .required(true)\n+      .longOpt(\"alluxio-root\")\n+      .desc(\"Path within alluxio that will be used as the root of the FUSE mount \"\n+          + \"(e.g., /users/foo; defaults to /)\")\n+      .build();\n+\n+  private static final Option HELP_OPTION = Option.builder(\"h\")\n+      .required(false)\n+      .desc(\"Print this help message\")\n+      .build();\n+\n+  private static final Option FUSE_MOUNT_OPTION = Option.builder(\"o\")\n+      .valueSeparator(',')\n+      .required(false)\n+      .hasArgs()\n+      .desc(\"FUSE mount options\")\n+      .build();\n+\n+  private static final Options OPTIONS = new Options()\n+      .addOption(MOUNT_POINT_OPTION)\n+      .addOption(ALLUXIO_ROOT_OPTION)\n+      .addOption(HELP_OPTION)\n+      .addOption(FUSE_MOUNT_OPTION);\n+\n   // prevent instantiation\n   private AlluxioFuse() {}\n \n   /**\n-   * Running this class will mount the file system according to\n-   * the options passed to this function {@link #parseOptions(String[], AlluxioConfiguration)}.\n-   * The user-space fuse application will stay on the foreground and keep\n-   * the file system mounted. The user can unmount the file system by\n-   * gracefully killing (SIGINT) the process.\n+   * Running this class will mount the file system according to the options passed to this function\n+   * {@link #parseOptions(String[], AlluxioConfiguration)}. The user-space fuse application will\n+   * stay on the foreground and keep the file system mounted. The user can unmount the file system\n+   * by gracefully killing (SIGINT) the process.\n    *\n    * @param args arguments to run the command line\n    */\n   public static void main(String[] args) {\n-    AlluxioConfiguration conf = new InstancedConfiguration(ConfigurationUtils.defaults());\n+    LOG.info(\"Alluxio version: {}-{}\", RuntimeConstants.VERSION, ProjectConstants.REVISION);\n+    AlluxioConfiguration conf = InstancedConfiguration.defaults();\n+    FileSystemContext fsContext = FileSystemContext.create(conf);\n+    try {\n+      InetSocketAddress confMasterAddress =\n+          fsContext.getMasterClientContext().getConfMasterInquireClient().getPrimaryRpcAddress();\n+      RetryUtils.retry(\"load cluster default configuration with master \" + confMasterAddress,\n+          () -> fsContext.getClientContext().loadConfIfNotLoaded(confMasterAddress),\n+          RetryUtils.defaultClientRetry(\n+              conf.getDuration(PropertyKey.USER_RPC_RETRY_MAX_DURATION),\n+              conf.getDuration(PropertyKey.USER_RPC_RETRY_BASE_SLEEP_MS),\n+              conf.getDuration(PropertyKey.USER_RPC_RETRY_MAX_SLEEP_MS)));\n+    } catch (IOException e) {\n+      LOG.warn(\"Failed to load cluster default configuration for Fuse process. \"\n+          + \"Proceed with local configuration for FUSE: {}\", e.toString());\n+    }\n+    conf = fsContext.getClusterConf();\n     final AlluxioFuseOptions opts = parseOptions(args, conf);\n     if (opts == null) {\n       System.exit(1);\n     }\n-\n-    final FileSystem tfs = FileSystem.Factory.create(conf);\n-    final AlluxioFuseFileSystem fs = new AlluxioFuseFileSystem(tfs, opts, conf);\n-    final List<String> fuseOpts = opts.getFuseOpts();\n-    // Force direct_io in FUSE: writes and reads bypass the kernel page\n-    // cache and go directly to alluxio. This avoids extra memory copies\n-    // in the write path.\n-    fuseOpts.add(\"-odirect_io\");\n-\n-    try {\n-      fs.mount(Paths.get(opts.getMountPoint()), true, opts.isDebug(),\n-          fuseOpts.toArray(new String[0]));\n-      LOG.info(\"Mounted Alluxio: mount point=\\\"{}\\\", opts=\\\"{}\\\"\",\n-          opts.getMountPoint(), fuseOpts.toArray(new String[0]));\n-    } catch (FuseException e) {\n-      LOG.error(\"Failed to mount {}\", opts.getMountPoint(), e);\n-      // only try to umount file system when exception occurred.\n-      // jnr-fuse registers JVM shutdown hook to ensure fs.umount()\n-      // will be executed when this process is exiting.\n-      fs.umount();\n-    } finally {\n-      try {\n-        tfs.close();\n-        LOG.info(\"Closed Alluxio file system.\");\n-      } catch (Exception e) {\n-        LOG.error(\"Failed to close Alluxio file system\", e);\n+    try (final FileSystem fs = FileSystem.Factory.create(fsContext)) {\n+      final List<String> fuseOpts = opts.getFuseOpts();\n+      // Force direct_io in FUSE: writes and reads bypass the kernel page\n+      // cache and go directly to alluxio. This avoids extra memory copies\n+      // in the write path.\n+      // TODO(binfan): support kernel_cache (issues#10840)\n+      //fuseOpts.add(\"-odirect_io\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3745c016049645d5603488508916408d9459b293"}, "originalPosition": 141}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MzM2OTgx", "url": "https://github.com/Alluxio/alluxio/pull/12606#pullrequestreview-545336981", "createdAt": "2020-12-04T22:20:59Z", "commit": {"oid": "3745c016049645d5603488508916408d9459b293"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjoyMTowMFrOH_kWWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzo0NjowN1rOH_mNow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxNzg4MA==", "bodyText": "why is this changed to something so large?", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r536417880", "createdAt": "2020-12-04T22:21:00Z", "author": {"login": "gpang"}, "path": "conf/log4j.properties", "diffHunk": "@@ -172,7 +172,7 @@ log4j.appender.USER_LOGGER.layout.ConversionPattern=%d{ISO8601} %-5p %c{1} - %m%\n # Appender for Fuse\n log4j.appender.FUSE_LOGGER=org.apache.log4j.RollingFileAppender\n log4j.appender.FUSE_LOGGER.File=${alluxio.logs.dir}/fuse.log\n-log4j.appender.FUSE_LOGGER.MaxFileSize=10MB\n+log4j.appender.FUSE_LOGGER.MaxFileSize=500MB", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3745c016049645d5603488508916408d9459b293"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyOTExMw==", "bodyText": "Can we use !mResponses .isEmpty()?", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r536429113", "createdAt": "2020-12-04T22:48:01Z", "author": {"login": "gpang"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/GrpcBlockingStream.java", "diffHunk": "@@ -216,6 +216,13 @@ public ResT receive(long timeoutMs) throws IOException {\n     }\n   }\n \n+  /**\n+   * @return true if the current stream has responses received but hasn't processed\n+   */\n+  public boolean hasResponseInCache() {\n+    return mResponses.size() > 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3745c016049645d5603488508916408d9459b293"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzMDEwOA==", "bodyText": "I'm not really sure what this means. How can it read from the first dir in the first tier if the block is not in that dir?", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r536430108", "createdAt": "2020-12-04T22:50:32Z", "author": {"login": "gpang"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -3490,6 +3490,16 @@ public String toString() {\n               + \"format pattern.\")\n           .setScope(Scope.CLIENT)\n           .build();\n+  public static final PropertyKey USER_DIRECT_MEMORY_IO_ENABLED =\n+      new Builder(Name.USER_DIRECT_MEMORY_IO_ENABLED)\n+          .setDefaultValue(false)\n+          .setIsHidden(true)\n+          .setDescription(\"(Experimental) If this is enabled, when clients read from local \"\n+              + \"worker, they read the block directly from the first directory of the first \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3745c016049645d5603488508916408d9459b293"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzMDE5MA==", "bodyText": "What implications are there for this \"unsafe\" behavior?", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r536430190", "createdAt": "2020-12-04T22:50:48Z", "author": {"login": "gpang"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -3490,6 +3490,16 @@ public String toString() {\n               + \"format pattern.\")\n           .setScope(Scope.CLIENT)\n           .build();\n+  public static final PropertyKey USER_DIRECT_MEMORY_IO_ENABLED =\n+      new Builder(Name.USER_DIRECT_MEMORY_IO_ENABLED)\n+          .setDefaultValue(false)\n+          .setIsHidden(true)\n+          .setDescription(\"(Experimental) If this is enabled, when clients read from local \"\n+              + \"worker, they read the block directly from the first directory of the first \"\n+              + \"tier of that worker. Note this optimization can be unsafe.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3745c016049645d5603488508916408d9459b293"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzMDgxNw==", "bodyText": "What is this caching? Is it related to the shared grpc readers?", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r536430817", "createdAt": "2020-12-04T22:52:23Z", "author": {"login": "gpang"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -4346,6 +4365,30 @@ public String toString() {\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.IGNORE)\n           .setScope(Scope.CLIENT)\n           .build();\n+  public static final PropertyKey FUSE_JNIFUSE_ENABLED =\n+      new Builder(Name.FUSE_JNIFUSE_ENABLED)\n+          .setDefaultValue(true)\n+          .setDescription(\"Use experimental JNIFUSE library for better performance.\")\n+          .setConsistencyCheckLevel(ConsistencyCheckLevel.IGNORE)\n+          .setScope(Scope.CLIENT)\n+          .build();\n+  public static final PropertyKey FUSE_SHARED_CACHING_READER_ENABLED =\n+      new Builder(Name.FUSE_SHARED_CACHING_READER_ENABLED)\n+          .setDefaultValue(false)\n+          .setDescription(\"(Experimental) Use share grpc data reader for better performance \"\n+              + \"on multi-process file reading through Alluxio JNI Fuse. \"\n+              + \"Blocks data will be cached on the client side \"\n+              + \"so more memory is required for the Fuse process.\")\n+          .setConsistencyCheckLevel(ConsistencyCheckLevel.IGNORE)\n+          .setScope(Scope.CLIENT)\n+          .build();\n+  public static final PropertyKey FUSE_MAXCACHE_BYTES =\n+      new Builder(Name.FUSE_MAXCACHE_BYTES)\n+          .setDefaultValue(\"1MB\")\n+          .setDescription(\"(Experimental) Maximum cache size of AlluxioJniFuse.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3745c016049645d5603488508916408d9459b293"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzMTE4OQ==", "bodyText": "We are not able to just install the libfuse library?", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r536431189", "createdAt": "2020-12-04T22:53:27Z", "author": {"login": "gpang"}, "path": "integration/docker/Dockerfile.fuse", "diffHunk": "@@ -35,18 +35,23 @@ RUN if [ ${ENABLE_DYNAMIC_USER} = \"true\" ] ; then \\\n        chmod -R 777 /opt/* ; \\\n     fi\n \n-FROM ubuntu:16.04\n+# instead of ubuntu:16.04, use cheyang/fuse2:ubuntu1604-customize for now\n+# which has customized libfuse installed\n+# to use standard ubuntu1604, add \"fuse\" to the list of \"apt-get install\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3745c016049645d5603488508916408d9459b293"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzMzYwMw==", "bodyText": "Is this a bug to get a null client?", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r536433603", "createdAt": "2020-12-04T22:59:28Z", "author": {"login": "gpang"}, "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java", "diffHunk": "@@ -538,6 +538,9 @@ public void close() {\n   private static void releaseBlockWorkerClient(WorkerNetAddress workerNetAddress,\n       BlockWorkerClient client, final ClientContext context, ConcurrentHashMap<ClientPoolKey,\n       BlockWorkerClientPool> poolMap) {\n+    if (client == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3745c016049645d5603488508916408d9459b293"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzNDQ4Mg==", "bodyText": "Is this ((blockSize > (chunkSize * 4)) some heuristic? What is the thinking behind this?", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r536434482", "createdAt": "2020-12-04T23:01:40Z", "author": {"login": "gpang"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java", "diffHunk": "@@ -177,10 +179,16 @@ private static BlockInStream createGrpcBlockInStream(FileSystemContext context,\n     long chunkSize = context.getClusterConf().getBytes(\n         PropertyKey.USER_STREAMING_READER_CHUNK_SIZE_BYTES);\n     readRequestBuilder.setChunkSize(chunkSize);\n-    DataReader.Factory factory =\n-        new GrpcDataReader.Factory(context, address, readRequestBuilder.build());\n-    return new BlockInStream(factory, address, blockSource, readRequestPartial.getBlockId(),\n-        blockSize);\n+    DataReader.Factory factory;\n+    if (context.getClusterConf().getBoolean(PropertyKey.FUSE_SHARED_CACHING_READER_ENABLED)\n+        && (blockSize > (chunkSize * 4))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3745c016049645d5603488508916408d9459b293"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzNTAzMw==", "bodyText": "I think this comment is confusing? The flag is about using the shared grpc reader, so this comment is talking about a fuse flag.", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r536435033", "createdAt": "2020-12-04T23:03:24Z", "author": {"login": "gpang"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java", "diffHunk": "@@ -327,11 +340,54 @@ public void seek(long pos) throws IOException {\n     if (pos == mPos) {\n       return;\n     }\n+    // Protect the original seek logic under fuse flag to minimize and isolate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3745c016049645d5603488508916408d9459b293"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzNzMyOQ==", "bodyText": "This block looks like the seek logic for when we are NOT using the shared grpc reader. Is there a reason why we cannot just have 2 types of seek logic (1) using shared grpc reader, (2) without shared grpc reader?\nInstead, we have 3 types of seek logic now.", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r536437329", "createdAt": "2020-12-04T23:09:52Z", "author": {"login": "gpang"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/BlockInStream.java", "diffHunk": "@@ -327,11 +340,54 @@ public void seek(long pos) throws IOException {\n     if (pos == mPos) {\n       return;\n     }\n+    // Protect the original seek logic under fuse flag to minimize and isolate\n+    // the fuse related changes\n+    if (!mSharedCacheReader) {\n+      if (pos < mPos) {\n+        mEOF = false;\n+      }\n+      closeDataReader();\n+      mPos = pos;\n+      return;\n+    }\n+\n     if (pos < mPos) {\n       mEOF = false;\n-    }\n+      if (mDataReader instanceof SharedGrpcDataReader) {\n+        SharedGrpcDataReader reader = (SharedGrpcDataReader) mDataReader;\n+        reader.seek(pos);\n+        if (mCurrentChunk != null) {\n+          mCurrentChunk.release();\n+          mCurrentChunk = null;\n+        }\n+      } else {\n+        closeDataReader();\n+      }\n+    } else {\n+      // TODO(lu) combine the original seek logic and the following general improvements", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3745c016049645d5603488508916408d9459b293"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzODE3NA==", "bodyText": "Is it required that this path is ramdisk? What happens with an SSD top-tier?", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r536438174", "createdAt": "2020-12-04T23:12:15Z", "author": {"login": "gpang"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/LocalFileDataReader.java", "diffHunk": "@@ -122,6 +128,17 @@ public Factory(FileSystemContext context, WorkerNetAddress address, long blockId\n       mLocalReaderChunkSize = localReaderChunkSize;\n       mReadBufferSize = conf.getInt(PropertyKey.USER_STREAMING_READER_BUFFER_SIZE_MESSAGES);\n       mDataTimeoutMs = conf.getMs(PropertyKey.USER_STREAMING_DATA_TIMEOUT);\n+      boolean isDirectMemoryIOEnabled = conf.getBoolean(PropertyKey.USER_DIRECT_MEMORY_IO_ENABLED);\n+      if (isDirectMemoryIOEnabled) {\n+        mBlockWorker = null;\n+        mStream = null;\n+        PropertyKey tierDirPathConf =\n+            PropertyKey.Template.WORKER_TIERED_STORE_LEVEL_DIRS_PATH.format(0);\n+        String ramdiskPath = conf.get(tierDirPathConf).split(\",\")[0];\n+        String workerDir = conf.get(PropertyKey.WORKER_DATA_FOLDER);\n+        mPath = Paths.get(ramdiskPath, workerDir, Long.toString(blockId)).toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3745c016049645d5603488508916408d9459b293"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzODczMg==", "bodyText": "It is strange to me that something called BufferCachingGrpcDataReader is not implementing DataReader. Is there a reason for that?\nAlso, is a unittest possible for this?", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r536438732", "createdAt": "2020-12-04T23:14:01Z", "author": {"login": "gpang"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/BufferCachingGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.wire.WorkerNetAddress;\n+import alluxio.resource.LockResource;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that responsible for reading from a specific block.\n+ *\n+ * The current implementation cached the block data from the beginning to\n+ * the largest index being read.\n+ */\n+@NotThreadSafe\n+public class BufferCachingGrpcDataReader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3745c016049645d5603488508916408d9459b293"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzOTM3Mw==", "bodyText": "Is a unittest possible for this?", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r536439373", "createdAt": "2020-12-04T23:16:05Z", "author": {"login": "gpang"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/SharedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.LockResource;\n+import alluxio.wire.WorkerNetAddress;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A shared gRPC data reader that cache blocks data for multi-thread accessing.\n+ *\n+ * It follows GrpcDataReader protocol and takes strong assumption:\n+ * Parallel read to the same file happens on the same time, so that read request is\n+ * serialized by kernel\n+ */\n+@NotThreadSafe\n+public class SharedGrpcDataReader implements DataReader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3745c016049645d5603488508916408d9459b293"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0MDA1NA==", "bodyText": "Would it be useful for this to be configurable?", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r536440054", "createdAt": "2020-12-04T23:17:58Z", "author": {"login": "gpang"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/SharedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.LockResource;\n+import alluxio.wire.WorkerNetAddress;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A shared gRPC data reader that cache blocks data for multi-thread accessing.\n+ *\n+ * It follows GrpcDataReader protocol and takes strong assumption:\n+ * Parallel read to the same file happens on the same time, so that read request is\n+ * serialized by kernel\n+ */\n+@NotThreadSafe\n+public class SharedGrpcDataReader implements DataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(SharedGrpcDataReader.class);\n+  private static final int BLOCK_LOCK_NUM = 32;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3745c016049645d5603488508916408d9459b293"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0MDE3MA==", "bodyText": "Can you explain why we need external locks (BLOCK_LOCKS) when we are using a ConcurrentHashMap? What is the block lock protecting?", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r536440170", "createdAt": "2020-12-04T23:18:24Z", "author": {"login": "gpang"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/SharedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.LockResource;\n+import alluxio.wire.WorkerNetAddress;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A shared gRPC data reader that cache blocks data for multi-thread accessing.\n+ *\n+ * It follows GrpcDataReader protocol and takes strong assumption:\n+ * Parallel read to the same file happens on the same time, so that read request is\n+ * serialized by kernel\n+ */\n+@NotThreadSafe\n+public class SharedGrpcDataReader implements DataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(SharedGrpcDataReader.class);\n+  private static final int BLOCK_LOCK_NUM = 32;\n+  private static final ReentrantReadWriteLock[] BLOCK_LOCKS;\n+  /** A map from block id to the block's cached data reader. */\n+  @GuardedBy(\"BLOCK_LOCKS\")\n+  private static final ConcurrentHashMap<Long, BufferCachingGrpcDataReader> BLOCK_READERS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3745c016049645d5603488508916408d9459b293"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0MTY2OA==", "bodyText": "There is no \"hashing\" happening to the block id. block ids are a concatenation of 2 numbers: <container id>:<sequence number>. For all files, the first block of the file will always start with sequence number 0. That means the first block of every file may always hash to the the same block lock, the second block of all files will be the next block, and so on. There would be a pattern.\nIs behavior ok? I would imagine that we would want a more \"random\" distribution of the block locks?", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r536441668", "createdAt": "2020-12-04T23:23:19Z", "author": {"login": "gpang"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/SharedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.LockResource;\n+import alluxio.wire.WorkerNetAddress;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A shared gRPC data reader that cache blocks data for multi-thread accessing.\n+ *\n+ * It follows GrpcDataReader protocol and takes strong assumption:\n+ * Parallel read to the same file happens on the same time, so that read request is\n+ * serialized by kernel\n+ */\n+@NotThreadSafe\n+public class SharedGrpcDataReader implements DataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(SharedGrpcDataReader.class);\n+  private static final int BLOCK_LOCK_NUM = 32;\n+  private static final ReentrantReadWriteLock[] BLOCK_LOCKS;\n+  /** A map from block id to the block's cached data reader. */\n+  @GuardedBy(\"BLOCK_LOCKS\")\n+  private static final ConcurrentHashMap<Long, BufferCachingGrpcDataReader> BLOCK_READERS\n+      = new ConcurrentHashMap<>();\n+\n+  static {\n+    BLOCK_LOCKS = new ReentrantReadWriteLock[BLOCK_LOCK_NUM];\n+    for (int i = 0; i < BLOCK_LOCK_NUM; i++) {\n+      BLOCK_LOCKS[i] = new ReentrantReadWriteLock();\n+    }\n+  }\n+\n+  private static ReentrantReadWriteLock getBlockLock(long blockId) {\n+    return BLOCK_LOCKS[(int) (blockId % BLOCK_LOCKS.length)];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3745c016049645d5603488508916408d9459b293"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0MjMwNA==", "bodyText": "I'm not sure what this means. Does this mean this reader is always going to be ready?", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r536442304", "createdAt": "2020-12-04T23:25:25Z", "author": {"login": "gpang"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/SharedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.LockResource;\n+import alluxio.wire.WorkerNetAddress;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A shared gRPC data reader that cache blocks data for multi-thread accessing.\n+ *\n+ * It follows GrpcDataReader protocol and takes strong assumption:\n+ * Parallel read to the same file happens on the same time, so that read request is\n+ * serialized by kernel\n+ */\n+@NotThreadSafe\n+public class SharedGrpcDataReader implements DataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(SharedGrpcDataReader.class);\n+  private static final int BLOCK_LOCK_NUM = 32;\n+  private static final ReentrantReadWriteLock[] BLOCK_LOCKS;\n+  /** A map from block id to the block's cached data reader. */\n+  @GuardedBy(\"BLOCK_LOCKS\")\n+  private static final ConcurrentHashMap<Long, BufferCachingGrpcDataReader> BLOCK_READERS\n+      = new ConcurrentHashMap<>();\n+\n+  static {\n+    BLOCK_LOCKS = new ReentrantReadWriteLock[BLOCK_LOCK_NUM];\n+    for (int i = 0; i < BLOCK_LOCK_NUM; i++) {\n+      BLOCK_LOCKS[i] = new ReentrantReadWriteLock();\n+    }\n+  }\n+\n+  private static ReentrantReadWriteLock getBlockLock(long blockId) {\n+    return BLOCK_LOCKS[(int) (blockId % BLOCK_LOCKS.length)];\n+  }\n+\n+  private final long mBlockId;\n+  private final BufferCachingGrpcDataReader mCachedDataReader;\n+  private final long mChunkSize;\n+\n+  /** The next pos to read. */\n+  private long mPosToRead;\n+\n+  /**\n+   * Creates an instance of {@link SharedGrpcDataReader}.\n+   *\n+   * @param readRequest the read request\n+   * @param reader the cached Grpc data reader for the given block\n+   */\n+  private SharedGrpcDataReader(ReadRequest readRequest, BufferCachingGrpcDataReader reader) {\n+    mChunkSize = readRequest.getChunkSize();\n+    mPosToRead = readRequest.getOffset();\n+    mBlockId = readRequest.getBlockId();\n+    mCachedDataReader = reader;\n+  }\n+\n+  @Override\n+  public long pos() {\n+    return mPosToRead;\n+  }\n+\n+  /**\n+   * Seeks to a specific position.\n+   *\n+   * @param pos the position to seek to\n+   */\n+  public void seek(long pos) {\n+    mPosToRead = pos;\n+  }\n+\n+  @Override\n+  @Nullable\n+  public DataBuffer readChunk() throws IOException {\n+    int index = (int) (mPosToRead / mChunkSize);\n+    DataBuffer chunk = mCachedDataReader.readChunk(index);\n+    if (chunk == null) {\n+      return null;\n+    }\n+    ByteBuffer bb = chunk.getReadOnlyByteBuffer();\n+    // Force to align to chunk size\n+    bb.position((int) (mPosToRead % mChunkSize));\n+    mPosToRead += mChunkSize - mPosToRead % mChunkSize;\n+\n+    return new NioDataBuffer(bb, bb.remaining());\n+  }\n+\n+  @Override\n+  @Nullable\n+  public DataBuffer readChunkIfReady() throws IOException {\n+    // I'm naive, I'm reading chunks anyway", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3745c016049645d5603488508916408d9459b293"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0NzYxOA==", "bodyText": "This makes is sound like this is just like the normal grpc data reader, but just caches the data.\nIf that is the case, why can't we just add caching option to the grpc data reader? Or, wrap the existing grpc data reader? This looks like a reimplementation, with caching functionality.\nAlso, could you briefly describe the relationship between this BufferCachingGrpcDataReader and SharedGrpcDataReader ?", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r536447618", "createdAt": "2020-12-04T23:43:14Z", "author": {"login": "gpang"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/BufferCachingGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.wire.WorkerNetAddress;\n+import alluxio.resource.LockResource;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that responsible for reading from a specific block.\n+ *\n+ * The current implementation cached the block data from the beginning to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3745c016049645d5603488508916408d9459b293"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0Nzg5NQ==", "bodyText": "Can we change this comment without saying \"I\"?", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r536447895", "createdAt": "2020-12-04T23:44:15Z", "author": {"login": "gpang"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/SharedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.LockResource;\n+import alluxio.wire.WorkerNetAddress;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A shared gRPC data reader that cache blocks data for multi-thread accessing.\n+ *\n+ * It follows GrpcDataReader protocol and takes strong assumption:\n+ * Parallel read to the same file happens on the same time, so that read request is\n+ * serialized by kernel\n+ */\n+@NotThreadSafe\n+public class SharedGrpcDataReader implements DataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(SharedGrpcDataReader.class);\n+  private static final int BLOCK_LOCK_NUM = 32;\n+  private static final ReentrantReadWriteLock[] BLOCK_LOCKS;\n+  /** A map from block id to the block's cached data reader. */\n+  @GuardedBy(\"BLOCK_LOCKS\")\n+  private static final ConcurrentHashMap<Long, BufferCachingGrpcDataReader> BLOCK_READERS\n+      = new ConcurrentHashMap<>();\n+\n+  static {\n+    BLOCK_LOCKS = new ReentrantReadWriteLock[BLOCK_LOCK_NUM];\n+    for (int i = 0; i < BLOCK_LOCK_NUM; i++) {\n+      BLOCK_LOCKS[i] = new ReentrantReadWriteLock();\n+    }\n+  }\n+\n+  private static ReentrantReadWriteLock getBlockLock(long blockId) {\n+    return BLOCK_LOCKS[(int) (blockId % BLOCK_LOCKS.length)];\n+  }\n+\n+  private final long mBlockId;\n+  private final BufferCachingGrpcDataReader mCachedDataReader;\n+  private final long mChunkSize;\n+\n+  /** The next pos to read. */\n+  private long mPosToRead;\n+\n+  /**\n+   * Creates an instance of {@link SharedGrpcDataReader}.\n+   *\n+   * @param readRequest the read request\n+   * @param reader the cached Grpc data reader for the given block\n+   */\n+  private SharedGrpcDataReader(ReadRequest readRequest, BufferCachingGrpcDataReader reader) {\n+    mChunkSize = readRequest.getChunkSize();\n+    mPosToRead = readRequest.getOffset();\n+    mBlockId = readRequest.getBlockId();\n+    mCachedDataReader = reader;\n+  }\n+\n+  @Override\n+  public long pos() {\n+    return mPosToRead;\n+  }\n+\n+  /**\n+   * Seeks to a specific position.\n+   *\n+   * @param pos the position to seek to\n+   */\n+  public void seek(long pos) {\n+    mPosToRead = pos;\n+  }\n+\n+  @Override\n+  @Nullable\n+  public DataBuffer readChunk() throws IOException {\n+    int index = (int) (mPosToRead / mChunkSize);\n+    DataBuffer chunk = mCachedDataReader.readChunk(index);\n+    if (chunk == null) {\n+      return null;\n+    }\n+    ByteBuffer bb = chunk.getReadOnlyByteBuffer();\n+    // Force to align to chunk size\n+    bb.position((int) (mPosToRead % mChunkSize));\n+    mPosToRead += mChunkSize - mPosToRead % mChunkSize;\n+\n+    return new NioDataBuffer(bb, bb.remaining());\n+  }\n+\n+  @Override\n+  @Nullable\n+  public DataBuffer readChunkIfReady() throws IOException {\n+    // I'm naive, I'm reading chunks anyway\n+    return readChunk();\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    if (mCachedDataReader.deRef() > 0) {\n+      return;\n+    }\n+    try (LockResource lockResource = new LockResource(\n+        getBlockLock(mBlockId).writeLock())) {\n+      if (mCachedDataReader.getRefCount() == 0) {\n+        BLOCK_READERS.remove(mBlockId);\n+      }\n+    }\n+    if (mCachedDataReader.getRefCount() == 0) {\n+      mCachedDataReader.close();\n+    }\n+  }\n+\n+  /**\n+   * Factory class to create {@link SharedGrpcDataReader}s.\n+   */\n+  public static class Factory implements DataReader.Factory {\n+    private final FileSystemContext mContext;\n+    private final WorkerNetAddress mAddress;\n+    private final ReadRequest mReadRequestPartial;\n+    private final long mBlockSize;\n+\n+    /**\n+     * Creates an instance of {@link SharedGrpcDataReader.Factory} for block reads.\n+     *\n+     * @param context the file system context\n+     * @param address the worker address\n+     * @param readRequestPartial the partial read request\n+     * @param blockSize the block size\n+     */\n+    public Factory(FileSystemContext context, WorkerNetAddress address,\n+        ReadRequest readRequestPartial, long blockSize) {\n+      mContext = context;\n+      mAddress = address;\n+      mReadRequestPartial = readRequestPartial;\n+      mBlockSize = blockSize;\n+    }\n+\n+    @Override\n+    public DataReader create(long offset, long len) throws IOException {\n+      long blockId = mReadRequestPartial.getBlockId();\n+      BufferCachingGrpcDataReader reader;\n+      try (LockResource lockResource = new LockResource(\n+          getBlockLock(blockId).writeLock())) {\n+        reader = BLOCK_READERS.get(blockId);\n+        if (reader == null) {\n+          // I'm naive, I always read from 0 and read the whole block", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3745c016049645d5603488508916408d9459b293"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0ODQxOQ==", "bodyText": "If this is commented out, does this mean the comment about Force direct_io in FUSE... is inaccurate?", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r536448419", "createdAt": "2020-12-04T23:46:07Z", "author": {"login": "gpang"}, "path": "integration/fuse/src/main/java/alluxio/fuse/AlluxioFuse.java", "diffHunk": "@@ -41,51 +47,107 @@\n public final class AlluxioFuse {\n   private static final Logger LOG = LoggerFactory.getLogger(AlluxioFuse.class);\n \n+  private static final Option MOUNT_POINT_OPTION = Option.builder(\"m\")\n+      .hasArg()\n+      .required(true)\n+      .longOpt(\"mount-point\")\n+      .desc(\"Desired local mount point for alluxio-fuse.\")\n+      .build();\n+\n+  private static final Option ALLUXIO_ROOT_OPTION = Option.builder(\"r\")\n+      .hasArg()\n+      .required(true)\n+      .longOpt(\"alluxio-root\")\n+      .desc(\"Path within alluxio that will be used as the root of the FUSE mount \"\n+          + \"(e.g., /users/foo; defaults to /)\")\n+      .build();\n+\n+  private static final Option HELP_OPTION = Option.builder(\"h\")\n+      .required(false)\n+      .desc(\"Print this help message\")\n+      .build();\n+\n+  private static final Option FUSE_MOUNT_OPTION = Option.builder(\"o\")\n+      .valueSeparator(',')\n+      .required(false)\n+      .hasArgs()\n+      .desc(\"FUSE mount options\")\n+      .build();\n+\n+  private static final Options OPTIONS = new Options()\n+      .addOption(MOUNT_POINT_OPTION)\n+      .addOption(ALLUXIO_ROOT_OPTION)\n+      .addOption(HELP_OPTION)\n+      .addOption(FUSE_MOUNT_OPTION);\n+\n   // prevent instantiation\n   private AlluxioFuse() {}\n \n   /**\n-   * Running this class will mount the file system according to\n-   * the options passed to this function {@link #parseOptions(String[], AlluxioConfiguration)}.\n-   * The user-space fuse application will stay on the foreground and keep\n-   * the file system mounted. The user can unmount the file system by\n-   * gracefully killing (SIGINT) the process.\n+   * Running this class will mount the file system according to the options passed to this function\n+   * {@link #parseOptions(String[], AlluxioConfiguration)}. The user-space fuse application will\n+   * stay on the foreground and keep the file system mounted. The user can unmount the file system\n+   * by gracefully killing (SIGINT) the process.\n    *\n    * @param args arguments to run the command line\n    */\n   public static void main(String[] args) {\n-    AlluxioConfiguration conf = new InstancedConfiguration(ConfigurationUtils.defaults());\n+    LOG.info(\"Alluxio version: {}-{}\", RuntimeConstants.VERSION, ProjectConstants.REVISION);\n+    AlluxioConfiguration conf = InstancedConfiguration.defaults();\n+    FileSystemContext fsContext = FileSystemContext.create(conf);\n+    try {\n+      InetSocketAddress confMasterAddress =\n+          fsContext.getMasterClientContext().getConfMasterInquireClient().getPrimaryRpcAddress();\n+      RetryUtils.retry(\"load cluster default configuration with master \" + confMasterAddress,\n+          () -> fsContext.getClientContext().loadConfIfNotLoaded(confMasterAddress),\n+          RetryUtils.defaultClientRetry(\n+              conf.getDuration(PropertyKey.USER_RPC_RETRY_MAX_DURATION),\n+              conf.getDuration(PropertyKey.USER_RPC_RETRY_BASE_SLEEP_MS),\n+              conf.getDuration(PropertyKey.USER_RPC_RETRY_MAX_SLEEP_MS)));\n+    } catch (IOException e) {\n+      LOG.warn(\"Failed to load cluster default configuration for Fuse process. \"\n+          + \"Proceed with local configuration for FUSE: {}\", e.toString());\n+    }\n+    conf = fsContext.getClusterConf();\n     final AlluxioFuseOptions opts = parseOptions(args, conf);\n     if (opts == null) {\n       System.exit(1);\n     }\n-\n-    final FileSystem tfs = FileSystem.Factory.create(conf);\n-    final AlluxioFuseFileSystem fs = new AlluxioFuseFileSystem(tfs, opts, conf);\n-    final List<String> fuseOpts = opts.getFuseOpts();\n-    // Force direct_io in FUSE: writes and reads bypass the kernel page\n-    // cache and go directly to alluxio. This avoids extra memory copies\n-    // in the write path.\n-    fuseOpts.add(\"-odirect_io\");\n-\n-    try {\n-      fs.mount(Paths.get(opts.getMountPoint()), true, opts.isDebug(),\n-          fuseOpts.toArray(new String[0]));\n-      LOG.info(\"Mounted Alluxio: mount point=\\\"{}\\\", opts=\\\"{}\\\"\",\n-          opts.getMountPoint(), fuseOpts.toArray(new String[0]));\n-    } catch (FuseException e) {\n-      LOG.error(\"Failed to mount {}\", opts.getMountPoint(), e);\n-      // only try to umount file system when exception occurred.\n-      // jnr-fuse registers JVM shutdown hook to ensure fs.umount()\n-      // will be executed when this process is exiting.\n-      fs.umount();\n-    } finally {\n-      try {\n-        tfs.close();\n-        LOG.info(\"Closed Alluxio file system.\");\n-      } catch (Exception e) {\n-        LOG.error(\"Failed to close Alluxio file system\", e);\n+    try (final FileSystem fs = FileSystem.Factory.create(fsContext)) {\n+      final List<String> fuseOpts = opts.getFuseOpts();\n+      // Force direct_io in FUSE: writes and reads bypass the kernel page\n+      // cache and go directly to alluxio. This avoids extra memory copies\n+      // in the write path.\n+      // TODO(binfan): support kernel_cache (issues#10840)\n+      //fuseOpts.add(\"-odirect_io\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3745c016049645d5603488508916408d9459b293"}, "originalPosition": 141}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "11a023de0957b88494ced7708918e309e7b799b5", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/11a023de0957b88494ced7708918e309e7b799b5", "committedDate": "2020-12-05T05:08:08Z", "message": "Address comments"}, "afterCommit": {"oid": "1e1c86d5806a52f87807a55014835a1f92b37c70", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/1e1c86d5806a52f87807a55014835a1f92b37c70", "committedDate": "2020-12-09T05:43:18Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1e1c86d5806a52f87807a55014835a1f92b37c70", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/1e1c86d5806a52f87807a55014835a1f92b37c70", "committedDate": "2020-12-09T05:43:18Z", "message": "Address comments"}, "afterCommit": {"oid": "8c7a024ddeafe68eae779a1a630b4f3237a272d5", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/8c7a024ddeafe68eae779a1a630b4f3237a272d5", "committedDate": "2020-12-09T08:41:14Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8c7a024ddeafe68eae779a1a630b4f3237a272d5", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/8c7a024ddeafe68eae779a1a630b4f3237a272d5", "committedDate": "2020-12-09T08:41:14Z", "message": "Address comments"}, "afterCommit": {"oid": "a322b32a113897dc9841f3a4d66a783fa0484e00", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/a322b32a113897dc9841f3a4d66a783fa0484e00", "committedDate": "2020-12-09T08:46:09Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46187f86b355ea86654186c33f9a4111e46b7359", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/46187f86b355ea86654186c33f9a4111e46b7359", "committedDate": "2020-12-09T23:29:43Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a322b32a113897dc9841f3a4d66a783fa0484e00", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/a322b32a113897dc9841f3a4d66a783fa0484e00", "committedDate": "2020-12-09T08:46:09Z", "message": "Address comments"}, "afterCommit": {"oid": "46187f86b355ea86654186c33f9a4111e46b7359", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/46187f86b355ea86654186c33f9a4111e46b7359", "committedDate": "2020-12-09T23:29:43Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NzI4MzM1", "url": "https://github.com/Alluxio/alluxio/pull/12606#pullrequestreview-548728335", "createdAt": "2020-12-10T00:32:45Z", "commit": {"oid": "46187f86b355ea86654186c33f9a4111e46b7359"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMDozMjo0NVrOICv5ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODo0Mjo1MlrOIDX_JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc1Mjg5MA==", "bodyText": "I don't think this is actually direct memory access, right? https://en.wikipedia.org/wiki/Direct_memory_access", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r539752890", "createdAt": "2020-12-10T00:32:45Z", "author": {"login": "gpang"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -3490,6 +3490,17 @@ public String toString() {\n               + \"format pattern.\")\n           .setScope(Scope.CLIENT)\n           .build();\n+  public static final PropertyKey USER_DIRECT_MEMORY_IO_ENABLED =\n+      new Builder(Name.USER_DIRECT_MEMORY_IO_ENABLED)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46187f86b355ea86654186c33f9a4111e46b7359"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM4MDY0NQ==", "bodyText": "What does this protect? mDataBuffers? Anything else?", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r540380645", "createdAt": "2020-12-10T17:58:52Z", "author": {"login": "gpang"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/BufferCachingGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.grpc.ReadResponse;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.CloseableResource;\n+import alluxio.resource.LockResource;\n+import alluxio.wire.WorkerNetAddress;\n+\n+import com.google.common.base.Preconditions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A gRPC data reader that responsible for reading from a specific block.\n+ *\n+ * The current implementation cached the block data from the beginning to\n+ * the largest index being read.\n+ */\n+@NotThreadSafe\n+public class BufferCachingGrpcDataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(BufferCachingGrpcDataReader.class);\n+\n+  private final WorkerNetAddress mAddress;\n+  private final CloseableResource<BlockWorkerClient> mClient;\n+  private final long mDataTimeoutMs;\n+  private final ReadRequest mReadRequest;\n+  private final GrpcBlockingStream<ReadRequest, ReadResponse> mStream;\n+  /**\n+   * Count the number of threads that are accessing the same block together.\n+   * When no thread is accessing this block, the cached data will be GCed.\n+   */\n+  private final AtomicInteger mRefCount = new AtomicInteger(0);\n+  private final AtomicInteger mBufferCount = new AtomicInteger(0);\n+  private final DataBuffer[] mDataBuffers;\n+  private final ReentrantReadWriteLock mBufferLocks = new ReentrantReadWriteLock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46187f86b355ea86654186c33f9a4111e46b7359"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5NDYwMg==", "bodyText": "I don't think this is atomic.", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r540394602", "createdAt": "2020-12-10T18:19:42Z", "author": {"login": "gpang"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/SharedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.LockResource;\n+import alluxio.wire.WorkerNetAddress;\n+\n+import com.google.common.hash.HashFunction;\n+import com.google.common.hash.Hashing;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A shared gRPC data reader that cache blocks data for multi-thread accessing.\n+ *\n+ * It follows GrpcDataReader protocol and takes strong assumption:\n+ * Parallel read to the same file happens on the same time, so that read request is\n+ * serialized by kernel\n+ */\n+@NotThreadSafe\n+public class SharedGrpcDataReader implements DataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(SharedGrpcDataReader.class);\n+  private static final int BLOCK_LOCK_NUM = 32;\n+  //\n+  // BLOCK_LOCKS is used to ensure thread-safety when referencing or updating the shared data\n+  // reader for block i in different FileInStream instances.\n+  // BLOCK_READERS is a ConcurrentHashMap from block id to its shared data reader, as different\n+  // DataReader may be needed to handle different blocks at the same time.\n+  //\n+  /** An array of locks to guard cached data readers based on block id. */\n+  private static final ReentrantReadWriteLock[] BLOCK_LOCKS =\n+      new ReentrantReadWriteLock[BLOCK_LOCK_NUM];\n+  /** A map from block id to the block's cached data reader. */\n+  private static final ConcurrentHashMap<Long, BufferCachingGrpcDataReader> BLOCK_READERS =\n+      new ConcurrentHashMap<>();\n+  /** A hashing function to map block id to one of the locks. */\n+  private static final HashFunction HASH_FUNC = Hashing.murmur3_32();\n+\n+  static {\n+    for (int i = 0; i < BLOCK_LOCK_NUM; i++) {\n+      BLOCK_LOCKS[i] = new ReentrantReadWriteLock();\n+    }\n+  }\n+\n+  private static ReentrantReadWriteLock getLock(long blockId) {\n+    return BLOCK_LOCKS[HASH_FUNC.hashLong(blockId).asInt() % BLOCK_LOCKS.length];\n+  }\n+\n+  private final long mBlockId;\n+  private final BufferCachingGrpcDataReader mCachedDataReader;\n+  private final long mChunkSize;\n+\n+  /** The next pos to read. */\n+  private long mPosToRead;\n+\n+  /**\n+   * Creates an instance of {@link SharedGrpcDataReader}.\n+   *\n+   * @param readRequest the read request\n+   * @param reader the cached Grpc data reader for the given block\n+   */\n+  private SharedGrpcDataReader(ReadRequest readRequest, BufferCachingGrpcDataReader reader) {\n+    mChunkSize = readRequest.getChunkSize();\n+    mPosToRead = readRequest.getOffset();\n+    mBlockId = readRequest.getBlockId();\n+    mCachedDataReader = reader;\n+  }\n+\n+  @Override\n+  public long pos() {\n+    return mPosToRead;\n+  }\n+\n+  /**\n+   * Seeks to a specific position.\n+   *\n+   * @param pos the position to seek to\n+   */\n+  public void seek(long pos) {\n+    mPosToRead = pos;\n+  }\n+\n+  @Override\n+  @Nullable\n+  public DataBuffer readChunk() throws IOException {\n+    int index = (int) (mPosToRead / mChunkSize);\n+    DataBuffer chunk = mCachedDataReader.readChunk(index);\n+    if (chunk == null) {\n+      return null;\n+    }\n+    ByteBuffer bb = chunk.getReadOnlyByteBuffer();\n+    // Force to align to chunk size\n+    bb.position((int) (mPosToRead % mChunkSize));\n+    mPosToRead += mChunkSize - mPosToRead % mChunkSize;\n+\n+    return new NioDataBuffer(bb, bb.remaining());\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    if (mCachedDataReader.deRef() > 0) {\n+      return;\n+    }\n+    try (LockResource lockResource = new LockResource(getLock(mBlockId).writeLock())) {\n+      if (mCachedDataReader.getRefCount() == 0) {\n+        BLOCK_READERS.remove(mBlockId);\n+      }\n+    }\n+    if (mCachedDataReader.getRefCount() == 0) {\n+      mCachedDataReader.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46187f86b355ea86654186c33f9a4111e46b7359"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5NTY0Ng==", "bodyText": "Is this SharedGrpcDataReader the only class that will create a BufferCachingGrpcDataReader instance?", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r540395646", "createdAt": "2020-12-10T18:21:22Z", "author": {"login": "gpang"}, "path": "core/client/fs/src/main/java/alluxio/client/block/stream/SharedGrpcDataReader.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.block.stream;\n+\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.grpc.ReadRequest;\n+import alluxio.network.protocol.databuffer.DataBuffer;\n+import alluxio.network.protocol.databuffer.NioDataBuffer;\n+import alluxio.resource.LockResource;\n+import alluxio.wire.WorkerNetAddress;\n+\n+import com.google.common.hash.HashFunction;\n+import com.google.common.hash.Hashing;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A shared gRPC data reader that cache blocks data for multi-thread accessing.\n+ *\n+ * It follows GrpcDataReader protocol and takes strong assumption:\n+ * Parallel read to the same file happens on the same time, so that read request is\n+ * serialized by kernel\n+ */\n+@NotThreadSafe\n+public class SharedGrpcDataReader implements DataReader {\n+  private static final Logger LOG = LoggerFactory.getLogger(SharedGrpcDataReader.class);\n+  private static final int BLOCK_LOCK_NUM = 32;\n+  //\n+  // BLOCK_LOCKS is used to ensure thread-safety when referencing or updating the shared data\n+  // reader for block i in different FileInStream instances.\n+  // BLOCK_READERS is a ConcurrentHashMap from block id to its shared data reader, as different\n+  // DataReader may be needed to handle different blocks at the same time.\n+  //\n+  /** An array of locks to guard cached data readers based on block id. */\n+  private static final ReentrantReadWriteLock[] BLOCK_LOCKS =\n+      new ReentrantReadWriteLock[BLOCK_LOCK_NUM];\n+  /** A map from block id to the block's cached data reader. */\n+  private static final ConcurrentHashMap<Long, BufferCachingGrpcDataReader> BLOCK_READERS =\n+      new ConcurrentHashMap<>();\n+  /** A hashing function to map block id to one of the locks. */\n+  private static final HashFunction HASH_FUNC = Hashing.murmur3_32();\n+\n+  static {\n+    for (int i = 0; i < BLOCK_LOCK_NUM; i++) {\n+      BLOCK_LOCKS[i] = new ReentrantReadWriteLock();\n+    }\n+  }\n+\n+  private static ReentrantReadWriteLock getLock(long blockId) {\n+    return BLOCK_LOCKS[HASH_FUNC.hashLong(blockId).asInt() % BLOCK_LOCKS.length];\n+  }\n+\n+  private final long mBlockId;\n+  private final BufferCachingGrpcDataReader mCachedDataReader;\n+  private final long mChunkSize;\n+\n+  /** The next pos to read. */\n+  private long mPosToRead;\n+\n+  /**\n+   * Creates an instance of {@link SharedGrpcDataReader}.\n+   *\n+   * @param readRequest the read request\n+   * @param reader the cached Grpc data reader for the given block\n+   */\n+  private SharedGrpcDataReader(ReadRequest readRequest, BufferCachingGrpcDataReader reader) {\n+    mChunkSize = readRequest.getChunkSize();\n+    mPosToRead = readRequest.getOffset();\n+    mBlockId = readRequest.getBlockId();\n+    mCachedDataReader = reader;\n+  }\n+\n+  @Override\n+  public long pos() {\n+    return mPosToRead;\n+  }\n+\n+  /**\n+   * Seeks to a specific position.\n+   *\n+   * @param pos the position to seek to\n+   */\n+  public void seek(long pos) {\n+    mPosToRead = pos;\n+  }\n+\n+  @Override\n+  @Nullable\n+  public DataBuffer readChunk() throws IOException {\n+    int index = (int) (mPosToRead / mChunkSize);\n+    DataBuffer chunk = mCachedDataReader.readChunk(index);\n+    if (chunk == null) {\n+      return null;\n+    }\n+    ByteBuffer bb = chunk.getReadOnlyByteBuffer();\n+    // Force to align to chunk size\n+    bb.position((int) (mPosToRead % mChunkSize));\n+    mPosToRead += mChunkSize - mPosToRead % mChunkSize;\n+\n+    return new NioDataBuffer(bb, bb.remaining());\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    if (mCachedDataReader.deRef() > 0) {\n+      return;\n+    }\n+    try (LockResource lockResource = new LockResource(getLock(mBlockId).writeLock())) {\n+      if (mCachedDataReader.getRefCount() == 0) {\n+        BLOCK_READERS.remove(mBlockId);\n+      }\n+    }\n+    if (mCachedDataReader.getRefCount() == 0) {\n+      mCachedDataReader.close();\n+    }\n+  }\n+\n+  /**\n+   * Factory class to create {@link SharedGrpcDataReader}s.\n+   */\n+  public static class Factory implements DataReader.Factory {\n+    private final FileSystemContext mContext;\n+    private final WorkerNetAddress mAddress;\n+    private final ReadRequest mReadRequestPartial;\n+    private final long mBlockSize;\n+\n+    /**\n+     * Creates an instance of {@link SharedGrpcDataReader.Factory} for block reads.\n+     *\n+     * @param context the file system context\n+     * @param address the worker address\n+     * @param readRequestPartial the partial read request\n+     * @param blockSize the block size\n+     */\n+    public Factory(FileSystemContext context, WorkerNetAddress address,\n+        ReadRequest readRequestPartial, long blockSize) {\n+      mContext = context;\n+      mAddress = address;\n+      mReadRequestPartial = readRequestPartial;\n+      mBlockSize = blockSize;\n+    }\n+\n+    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(\n+        value = \"AT_OPERATION_SEQUENCE_ON_CONCURRENT_ABSTRACTION\",\n+        justification = \"operation is still atomic guarded by block \u00d8lock\")\n+    @Override\n+    public DataReader create(long offset, long len) throws IOException {\n+      long blockId = mReadRequestPartial.getBlockId();\n+      BufferCachingGrpcDataReader reader;\n+      try (LockResource lockResource = new LockResource(getLock(blockId).writeLock())) {\n+        reader = BLOCK_READERS.get(blockId);\n+        if (reader == null) {\n+          // Even we may only need a portion, create a reader to read the whole block\n+          ReadRequest cacheRequest = mReadRequestPartial\n+              .toBuilder().setOffset(0).setLength(mBlockSize).build();\n+          reader = BufferCachingGrpcDataReader.create(mContext, mAddress, cacheRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46187f86b355ea86654186c33f9a4111e46b7359"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5NzMzMA==", "bodyText": "Is the group name also supposed to be the user name?", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r540397330", "createdAt": "2020-12-10T18:23:56Z", "author": {"login": "gpang"}, "path": "integration/fuse/src/main/java/alluxio/fuse/AlluxioJniFuseFileSystem.java", "diffHunk": "@@ -0,0 +1,633 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.fuse;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.file.FileInStream;\n+import alluxio.client.file.FileOutStream;\n+import alluxio.client.file.FileSystem;\n+import alluxio.client.file.URIStatus;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.exception.FileDoesNotExistException;\n+import alluxio.grpc.CreateDirectoryPOptions;\n+import alluxio.grpc.CreateFilePOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.jnifuse.AbstractFuseFileSystem;\n+import alluxio.jnifuse.ErrorCodes;\n+import alluxio.jnifuse.FuseFillDir;\n+import alluxio.jnifuse.struct.FileStat;\n+import alluxio.jnifuse.struct.FuseContext;\n+import alluxio.jnifuse.struct.FuseFileInfo;\n+import alluxio.resource.LockResource;\n+import alluxio.security.authorization.Mode;\n+import alluxio.util.ThreadUtils;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.file.InvalidPathException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Main FUSE implementation class.\n+ * <p>\n+ * Implements the FUSE callbacks defined by jni-fuse.\n+ */\n+@ThreadSafe\n+public final class AlluxioJniFuseFileSystem extends AbstractFuseFileSystem {\n+  private static final Logger LOG = LoggerFactory.getLogger(AlluxioJniFuseFileSystem.class);\n+  private final FileSystem mFileSystem;\n+  private final AlluxioConfiguration mConf;\n+  // base path within Alluxio namespace that is used for FUSE operations\n+  // For example, if alluxio-fuse is mounted in /mnt/alluxio and mAlluxioRootPath\n+  // is /users/foo, then an operation on /mnt/alluxio/bar will be translated on\n+  // an action on the URI alluxio://<master>:<port>/users/foo/bar\n+  private final Path mAlluxioRootPath;\n+  // Keeps a cache of the most recently translated paths from String to Alluxio URI\n+  private final LoadingCache<String, AlluxioURI> mPathResolverCache;\n+  private final LoadingCache<String, Long> mUidCache;\n+  private final LoadingCache<String, Long> mGidCache;\n+  private final AtomicLong mNextOpenFileId = new AtomicLong(0);\n+  private final String mFsName;\n+\n+  private static final int LOCK_SIZE = 2048;\n+  /** A readwrite lock pool to guard individual files based on striping. */\n+  private final ReadWriteLock[] mFileLocks = new ReentrantReadWriteLock[LOCK_SIZE];\n+\n+  private final Map<Long, FileInStream> mOpenFileEntries = new ConcurrentHashMap<>();\n+  private final Map<Long, FileOutStream> mCreateFileEntries = new ConcurrentHashMap<>();\n+  private final boolean mIsUserGroupTranslation;\n+\n+  // To make test build\n+  @VisibleForTesting\n+  public static final long ID_NOT_SET_VALUE = -1;\n+  @VisibleForTesting\n+  public static final long ID_NOT_SET_VALUE_UNSIGNED = 4294967295L;\n+  /**\n+   * df command will treat -1 as an unknown value.\n+   */\n+  @VisibleForTesting\n+  public static final int UNKNOWN_INODES = -1;\n+  /**\n+   * Most FileSystems on linux limit the length of file name beyond 255 characters.\n+   */\n+  @VisibleForTesting\n+  public static final int MAX_NAME_LENGTH = 255;\n+\n+  private static final String USER_NAME = System.getProperty(\"user.name\");\n+  private static final String GROUP_NAME = System.getProperty(\"user.name\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46187f86b355ea86654186c33f9a4111e46b7359"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5ODk2MA==", "bodyText": "This feels like a striped lock? Would this work? https://guava.dev/releases/19.0/api/docs/com/google/common/util/concurrent/Striped.html\nI know we are using this in other parts of the codebase.", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r540398960", "createdAt": "2020-12-10T18:26:25Z", "author": {"login": "gpang"}, "path": "integration/fuse/src/main/java/alluxio/fuse/AlluxioJniFuseFileSystem.java", "diffHunk": "@@ -0,0 +1,633 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.fuse;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.file.FileInStream;\n+import alluxio.client.file.FileOutStream;\n+import alluxio.client.file.FileSystem;\n+import alluxio.client.file.URIStatus;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.exception.FileDoesNotExistException;\n+import alluxio.grpc.CreateDirectoryPOptions;\n+import alluxio.grpc.CreateFilePOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.jnifuse.AbstractFuseFileSystem;\n+import alluxio.jnifuse.ErrorCodes;\n+import alluxio.jnifuse.FuseFillDir;\n+import alluxio.jnifuse.struct.FileStat;\n+import alluxio.jnifuse.struct.FuseContext;\n+import alluxio.jnifuse.struct.FuseFileInfo;\n+import alluxio.resource.LockResource;\n+import alluxio.security.authorization.Mode;\n+import alluxio.util.ThreadUtils;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.file.InvalidPathException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Main FUSE implementation class.\n+ * <p>\n+ * Implements the FUSE callbacks defined by jni-fuse.\n+ */\n+@ThreadSafe\n+public final class AlluxioJniFuseFileSystem extends AbstractFuseFileSystem {\n+  private static final Logger LOG = LoggerFactory.getLogger(AlluxioJniFuseFileSystem.class);\n+  private final FileSystem mFileSystem;\n+  private final AlluxioConfiguration mConf;\n+  // base path within Alluxio namespace that is used for FUSE operations\n+  // For example, if alluxio-fuse is mounted in /mnt/alluxio and mAlluxioRootPath\n+  // is /users/foo, then an operation on /mnt/alluxio/bar will be translated on\n+  // an action on the URI alluxio://<master>:<port>/users/foo/bar\n+  private final Path mAlluxioRootPath;\n+  // Keeps a cache of the most recently translated paths from String to Alluxio URI\n+  private final LoadingCache<String, AlluxioURI> mPathResolverCache;\n+  private final LoadingCache<String, Long> mUidCache;\n+  private final LoadingCache<String, Long> mGidCache;\n+  private final AtomicLong mNextOpenFileId = new AtomicLong(0);\n+  private final String mFsName;\n+\n+  private static final int LOCK_SIZE = 2048;\n+  /** A readwrite lock pool to guard individual files based on striping. */\n+  private final ReadWriteLock[] mFileLocks = new ReentrantReadWriteLock[LOCK_SIZE];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46187f86b355ea86654186c33f9a4111e46b7359"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwMDM4Ng==", "bodyText": "is this message correct?", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r540400386", "createdAt": "2020-12-10T18:28:35Z", "author": {"login": "gpang"}, "path": "integration/fuse/src/main/java/alluxio/fuse/AlluxioJniFuseFileSystem.java", "diffHunk": "@@ -0,0 +1,633 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.fuse;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.file.FileInStream;\n+import alluxio.client.file.FileOutStream;\n+import alluxio.client.file.FileSystem;\n+import alluxio.client.file.URIStatus;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.exception.FileDoesNotExistException;\n+import alluxio.grpc.CreateDirectoryPOptions;\n+import alluxio.grpc.CreateFilePOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.jnifuse.AbstractFuseFileSystem;\n+import alluxio.jnifuse.ErrorCodes;\n+import alluxio.jnifuse.FuseFillDir;\n+import alluxio.jnifuse.struct.FileStat;\n+import alluxio.jnifuse.struct.FuseContext;\n+import alluxio.jnifuse.struct.FuseFileInfo;\n+import alluxio.resource.LockResource;\n+import alluxio.security.authorization.Mode;\n+import alluxio.util.ThreadUtils;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.file.InvalidPathException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Main FUSE implementation class.\n+ * <p>\n+ * Implements the FUSE callbacks defined by jni-fuse.\n+ */\n+@ThreadSafe\n+public final class AlluxioJniFuseFileSystem extends AbstractFuseFileSystem {\n+  private static final Logger LOG = LoggerFactory.getLogger(AlluxioJniFuseFileSystem.class);\n+  private final FileSystem mFileSystem;\n+  private final AlluxioConfiguration mConf;\n+  // base path within Alluxio namespace that is used for FUSE operations\n+  // For example, if alluxio-fuse is mounted in /mnt/alluxio and mAlluxioRootPath\n+  // is /users/foo, then an operation on /mnt/alluxio/bar will be translated on\n+  // an action on the URI alluxio://<master>:<port>/users/foo/bar\n+  private final Path mAlluxioRootPath;\n+  // Keeps a cache of the most recently translated paths from String to Alluxio URI\n+  private final LoadingCache<String, AlluxioURI> mPathResolverCache;\n+  private final LoadingCache<String, Long> mUidCache;\n+  private final LoadingCache<String, Long> mGidCache;\n+  private final AtomicLong mNextOpenFileId = new AtomicLong(0);\n+  private final String mFsName;\n+\n+  private static final int LOCK_SIZE = 2048;\n+  /** A readwrite lock pool to guard individual files based on striping. */\n+  private final ReadWriteLock[] mFileLocks = new ReentrantReadWriteLock[LOCK_SIZE];\n+\n+  private final Map<Long, FileInStream> mOpenFileEntries = new ConcurrentHashMap<>();\n+  private final Map<Long, FileOutStream> mCreateFileEntries = new ConcurrentHashMap<>();\n+  private final boolean mIsUserGroupTranslation;\n+\n+  // To make test build\n+  @VisibleForTesting\n+  public static final long ID_NOT_SET_VALUE = -1;\n+  @VisibleForTesting\n+  public static final long ID_NOT_SET_VALUE_UNSIGNED = 4294967295L;\n+  /**\n+   * df command will treat -1 as an unknown value.\n+   */\n+  @VisibleForTesting\n+  public static final int UNKNOWN_INODES = -1;\n+  /**\n+   * Most FileSystems on linux limit the length of file name beyond 255 characters.\n+   */\n+  @VisibleForTesting\n+  public static final int MAX_NAME_LENGTH = 255;\n+\n+  private static final String USER_NAME = System.getProperty(\"user.name\");\n+  private static final String GROUP_NAME = System.getProperty(\"user.name\");\n+  private static final long DEFAULT_UID = AlluxioFuseUtils.getUid(USER_NAME);\n+  private static final long DEFAULT_GID = AlluxioFuseUtils.getGid(GROUP_NAME);\n+\n+  /**\n+   * Creates a new instance of {@link AlluxioJniFuseFileSystem}.\n+   *\n+   * @param fs Alluxio file system\n+   * @param opts options\n+   * @param conf Alluxio configuration\n+   */\n+  public AlluxioJniFuseFileSystem(\n+      FileSystem fs, AlluxioFuseOptions opts, AlluxioConfiguration conf) {\n+    super(Paths.get(opts.getMountPoint()));\n+    mFsName = conf.get(PropertyKey.FUSE_FS_NAME);\n+    mFileSystem = fs;\n+    mConf = conf;\n+    mAlluxioRootPath = Paths.get(opts.getAlluxioRoot());\n+    mPathResolverCache = CacheBuilder.newBuilder()\n+        .maximumSize(conf.getInt(PropertyKey.FUSE_CACHED_PATHS_MAX))\n+        .build(new CacheLoader<String, AlluxioURI>() {\n+          @Override\n+          public AlluxioURI load(String fusePath) {\n+            // fusePath is guaranteed to always be an absolute path (i.e., starts\n+            // with a fwd slash) - relative to the FUSE mount point\n+            final String relPath = fusePath.substring(1);\n+            final Path tpath = mAlluxioRootPath.resolve(relPath);\n+            return new AlluxioURI(tpath.toString());\n+          }\n+        });\n+    mUidCache = CacheBuilder.newBuilder()\n+        .maximumSize(100)\n+        .build(new CacheLoader<String, Long>() {\n+          @Override\n+          public Long load(String userName) {\n+            return AlluxioFuseUtils.getUid(userName);\n+          }\n+        });\n+    mGidCache = CacheBuilder.newBuilder()\n+        .maximumSize(100)\n+        .build(new CacheLoader<String, Long>() {\n+          @Override\n+          public Long load(String groupName) {\n+            return AlluxioFuseUtils.getGidFromGroupName(groupName);\n+          }\n+        });\n+    mIsUserGroupTranslation = conf.getBoolean(PropertyKey.FUSE_USER_GROUP_TRANSLATION_ENABLED);\n+    for (int i = 0; i < LOCK_SIZE; i++) {\n+      mFileLocks[i] = new ReentrantReadWriteLock();\n+    }\n+  }\n+\n+  /**\n+   * Gets the lock for a particular page. Note that multiple path may share the same lock as lock\n+   * striping is used to reduce resource overhead for locks.\n+   *\n+   * @param fd the file id\n+   * @return the corresponding page lock\n+   */\n+  private ReadWriteLock getFileLock(long fd) {\n+    return mFileLocks[Math.floorMod((int) fd, LOCK_SIZE)];\n+  }\n+\n+  private void setUserGroupIfNeeded(AlluxioURI uri) throws Exception {\n+    SetAttributePOptions.Builder attributeOptionsBuilder = SetAttributePOptions.newBuilder();\n+    FuseContext fc = getContext();\n+    long uid = fc.uid.get();\n+    long gid = fc.gid.get();\n+    if (gid != DEFAULT_GID) {\n+      String groupName = AlluxioFuseUtils.getGroupName(gid);\n+      if (groupName.isEmpty()) {\n+        // This should never be reached since input gid is always valid\n+        LOG.error(\"Failed to get group name from gid {}, fallback to {}.\", gid, GROUP_NAME);\n+        groupName = GROUP_NAME;\n+      }\n+      attributeOptionsBuilder.setGroup(groupName);\n+    }\n+    if (uid != DEFAULT_UID) {\n+      String userName = AlluxioFuseUtils.getUserName(uid);\n+      if (userName.isEmpty()) {\n+        // This should never be reached since input uid is always valid\n+        LOG.error(\"Failed to get user name from uid {}, fallback to {}\", uid, USER_NAME);\n+        userName = USER_NAME;\n+      }\n+      attributeOptionsBuilder.setOwner(userName);\n+    }\n+    SetAttributePOptions setAttributePOptions =  attributeOptionsBuilder.build();\n+    if (gid != DEFAULT_GID || uid != DEFAULT_UID) {\n+      LOG.debug(\"Set attributes of path {} to {}\", uri, setAttributePOptions);\n+      mFileSystem.setAttribute(uri, setAttributePOptions);\n+    }\n+  }\n+\n+  @Override\n+  public int create(String path, long mode, FuseFileInfo fi) {\n+    return AlluxioFuseUtils.call(LOG, () -> createInternal(path, mode, fi),\n+        \"create\", \"path=%s,mode=%o\", path, mode);\n+  }\n+\n+  private int createInternal(String path, long mode, FuseFileInfo fi) {\n+    final AlluxioURI uri = mPathResolverCache.getUnchecked(path);\n+    if (uri.getName().length() > MAX_NAME_LENGTH) {\n+      LOG.error(\"Failed to create {}: file name longer than {} characters\",\n+          path, MAX_NAME_LENGTH);\n+      return -ErrorCodes.ENAMETOOLONG();\n+    }\n+    try {\n+      FileOutStream os = mFileSystem.createFile(uri,\n+          CreateFilePOptions.newBuilder()\n+              .setMode(new Mode((short) mode).toProto())\n+              .build());\n+      long fid = mNextOpenFileId.getAndIncrement();\n+      mCreateFileEntries.put(fid, os);\n+      fi.fh.set(fid);\n+      setUserGroupIfNeeded(uri);\n+    } catch (Throwable e) {\n+      LOG.error(\"Failed to getattr {}: \", path, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46187f86b355ea86654186c33f9a4111e46b7359"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwMTYzMg==", "bodyText": "Is this supposed to be nanoseconds? Aren't there 1000000ns in 1ms?", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r540401632", "createdAt": "2020-12-10T18:30:24Z", "author": {"login": "gpang"}, "path": "integration/fuse/src/main/java/alluxio/fuse/AlluxioJniFuseFileSystem.java", "diffHunk": "@@ -0,0 +1,633 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.fuse;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.file.FileInStream;\n+import alluxio.client.file.FileOutStream;\n+import alluxio.client.file.FileSystem;\n+import alluxio.client.file.URIStatus;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.exception.FileDoesNotExistException;\n+import alluxio.grpc.CreateDirectoryPOptions;\n+import alluxio.grpc.CreateFilePOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.jnifuse.AbstractFuseFileSystem;\n+import alluxio.jnifuse.ErrorCodes;\n+import alluxio.jnifuse.FuseFillDir;\n+import alluxio.jnifuse.struct.FileStat;\n+import alluxio.jnifuse.struct.FuseContext;\n+import alluxio.jnifuse.struct.FuseFileInfo;\n+import alluxio.resource.LockResource;\n+import alluxio.security.authorization.Mode;\n+import alluxio.util.ThreadUtils;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.file.InvalidPathException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Main FUSE implementation class.\n+ * <p>\n+ * Implements the FUSE callbacks defined by jni-fuse.\n+ */\n+@ThreadSafe\n+public final class AlluxioJniFuseFileSystem extends AbstractFuseFileSystem {\n+  private static final Logger LOG = LoggerFactory.getLogger(AlluxioJniFuseFileSystem.class);\n+  private final FileSystem mFileSystem;\n+  private final AlluxioConfiguration mConf;\n+  // base path within Alluxio namespace that is used for FUSE operations\n+  // For example, if alluxio-fuse is mounted in /mnt/alluxio and mAlluxioRootPath\n+  // is /users/foo, then an operation on /mnt/alluxio/bar will be translated on\n+  // an action on the URI alluxio://<master>:<port>/users/foo/bar\n+  private final Path mAlluxioRootPath;\n+  // Keeps a cache of the most recently translated paths from String to Alluxio URI\n+  private final LoadingCache<String, AlluxioURI> mPathResolverCache;\n+  private final LoadingCache<String, Long> mUidCache;\n+  private final LoadingCache<String, Long> mGidCache;\n+  private final AtomicLong mNextOpenFileId = new AtomicLong(0);\n+  private final String mFsName;\n+\n+  private static final int LOCK_SIZE = 2048;\n+  /** A readwrite lock pool to guard individual files based on striping. */\n+  private final ReadWriteLock[] mFileLocks = new ReentrantReadWriteLock[LOCK_SIZE];\n+\n+  private final Map<Long, FileInStream> mOpenFileEntries = new ConcurrentHashMap<>();\n+  private final Map<Long, FileOutStream> mCreateFileEntries = new ConcurrentHashMap<>();\n+  private final boolean mIsUserGroupTranslation;\n+\n+  // To make test build\n+  @VisibleForTesting\n+  public static final long ID_NOT_SET_VALUE = -1;\n+  @VisibleForTesting\n+  public static final long ID_NOT_SET_VALUE_UNSIGNED = 4294967295L;\n+  /**\n+   * df command will treat -1 as an unknown value.\n+   */\n+  @VisibleForTesting\n+  public static final int UNKNOWN_INODES = -1;\n+  /**\n+   * Most FileSystems on linux limit the length of file name beyond 255 characters.\n+   */\n+  @VisibleForTesting\n+  public static final int MAX_NAME_LENGTH = 255;\n+\n+  private static final String USER_NAME = System.getProperty(\"user.name\");\n+  private static final String GROUP_NAME = System.getProperty(\"user.name\");\n+  private static final long DEFAULT_UID = AlluxioFuseUtils.getUid(USER_NAME);\n+  private static final long DEFAULT_GID = AlluxioFuseUtils.getGid(GROUP_NAME);\n+\n+  /**\n+   * Creates a new instance of {@link AlluxioJniFuseFileSystem}.\n+   *\n+   * @param fs Alluxio file system\n+   * @param opts options\n+   * @param conf Alluxio configuration\n+   */\n+  public AlluxioJniFuseFileSystem(\n+      FileSystem fs, AlluxioFuseOptions opts, AlluxioConfiguration conf) {\n+    super(Paths.get(opts.getMountPoint()));\n+    mFsName = conf.get(PropertyKey.FUSE_FS_NAME);\n+    mFileSystem = fs;\n+    mConf = conf;\n+    mAlluxioRootPath = Paths.get(opts.getAlluxioRoot());\n+    mPathResolverCache = CacheBuilder.newBuilder()\n+        .maximumSize(conf.getInt(PropertyKey.FUSE_CACHED_PATHS_MAX))\n+        .build(new CacheLoader<String, AlluxioURI>() {\n+          @Override\n+          public AlluxioURI load(String fusePath) {\n+            // fusePath is guaranteed to always be an absolute path (i.e., starts\n+            // with a fwd slash) - relative to the FUSE mount point\n+            final String relPath = fusePath.substring(1);\n+            final Path tpath = mAlluxioRootPath.resolve(relPath);\n+            return new AlluxioURI(tpath.toString());\n+          }\n+        });\n+    mUidCache = CacheBuilder.newBuilder()\n+        .maximumSize(100)\n+        .build(new CacheLoader<String, Long>() {\n+          @Override\n+          public Long load(String userName) {\n+            return AlluxioFuseUtils.getUid(userName);\n+          }\n+        });\n+    mGidCache = CacheBuilder.newBuilder()\n+        .maximumSize(100)\n+        .build(new CacheLoader<String, Long>() {\n+          @Override\n+          public Long load(String groupName) {\n+            return AlluxioFuseUtils.getGidFromGroupName(groupName);\n+          }\n+        });\n+    mIsUserGroupTranslation = conf.getBoolean(PropertyKey.FUSE_USER_GROUP_TRANSLATION_ENABLED);\n+    for (int i = 0; i < LOCK_SIZE; i++) {\n+      mFileLocks[i] = new ReentrantReadWriteLock();\n+    }\n+  }\n+\n+  /**\n+   * Gets the lock for a particular page. Note that multiple path may share the same lock as lock\n+   * striping is used to reduce resource overhead for locks.\n+   *\n+   * @param fd the file id\n+   * @return the corresponding page lock\n+   */\n+  private ReadWriteLock getFileLock(long fd) {\n+    return mFileLocks[Math.floorMod((int) fd, LOCK_SIZE)];\n+  }\n+\n+  private void setUserGroupIfNeeded(AlluxioURI uri) throws Exception {\n+    SetAttributePOptions.Builder attributeOptionsBuilder = SetAttributePOptions.newBuilder();\n+    FuseContext fc = getContext();\n+    long uid = fc.uid.get();\n+    long gid = fc.gid.get();\n+    if (gid != DEFAULT_GID) {\n+      String groupName = AlluxioFuseUtils.getGroupName(gid);\n+      if (groupName.isEmpty()) {\n+        // This should never be reached since input gid is always valid\n+        LOG.error(\"Failed to get group name from gid {}, fallback to {}.\", gid, GROUP_NAME);\n+        groupName = GROUP_NAME;\n+      }\n+      attributeOptionsBuilder.setGroup(groupName);\n+    }\n+    if (uid != DEFAULT_UID) {\n+      String userName = AlluxioFuseUtils.getUserName(uid);\n+      if (userName.isEmpty()) {\n+        // This should never be reached since input uid is always valid\n+        LOG.error(\"Failed to get user name from uid {}, fallback to {}\", uid, USER_NAME);\n+        userName = USER_NAME;\n+      }\n+      attributeOptionsBuilder.setOwner(userName);\n+    }\n+    SetAttributePOptions setAttributePOptions =  attributeOptionsBuilder.build();\n+    if (gid != DEFAULT_GID || uid != DEFAULT_UID) {\n+      LOG.debug(\"Set attributes of path {} to {}\", uri, setAttributePOptions);\n+      mFileSystem.setAttribute(uri, setAttributePOptions);\n+    }\n+  }\n+\n+  @Override\n+  public int create(String path, long mode, FuseFileInfo fi) {\n+    return AlluxioFuseUtils.call(LOG, () -> createInternal(path, mode, fi),\n+        \"create\", \"path=%s,mode=%o\", path, mode);\n+  }\n+\n+  private int createInternal(String path, long mode, FuseFileInfo fi) {\n+    final AlluxioURI uri = mPathResolverCache.getUnchecked(path);\n+    if (uri.getName().length() > MAX_NAME_LENGTH) {\n+      LOG.error(\"Failed to create {}: file name longer than {} characters\",\n+          path, MAX_NAME_LENGTH);\n+      return -ErrorCodes.ENAMETOOLONG();\n+    }\n+    try {\n+      FileOutStream os = mFileSystem.createFile(uri,\n+          CreateFilePOptions.newBuilder()\n+              .setMode(new Mode((short) mode).toProto())\n+              .build());\n+      long fid = mNextOpenFileId.getAndIncrement();\n+      mCreateFileEntries.put(fid, os);\n+      fi.fh.set(fid);\n+      setUserGroupIfNeeded(uri);\n+    } catch (Throwable e) {\n+      LOG.error(\"Failed to getattr {}: \", path, e);\n+      return -ErrorCodes.EIO();\n+    }\n+    return 0;\n+  }\n+\n+  @Override\n+  public int getattr(String path, FileStat stat) {\n+    return AlluxioFuseUtils.call(\n+        LOG, () -> getattrInternal(path, stat), \"getattr\", \"path=%s\", path);\n+  }\n+\n+  private int getattrInternal(String path, FileStat stat) {\n+    final AlluxioURI uri = mPathResolverCache.getUnchecked(path);\n+    try {\n+      URIStatus status = mFileSystem.getStatus(uri);\n+      long size = status.getLength();\n+      stat.st_size.set(size);\n+\n+      // Sets block number to fulfill du command needs\n+      // `st_blksize` is ignored in `getattr` according to\n+      // https://github.com/libfuse/libfuse/blob/d4a7ba44b022e3b63fc215374d87ed9e930d9974/include/fuse.h#L302\n+      // According to http://man7.org/linux/man-pages/man2/stat.2.html,\n+      // `st_blocks` is the number of 512B blocks allocated\n+      stat.st_blocks.set((int) Math.ceil((double) size / 512));\n+\n+      final long ctime_sec = status.getLastModificationTimeMs() / 1000;\n+      // Keeps only the \"residual\" nanoseconds not caputred in citme_sec\n+      final long ctime_nsec = (status.getLastModificationTimeMs() % 1000) * 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46187f86b355ea86654186c33f9a4111e46b7359"}, "originalPosition": 247}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwMzAxNQ==", "bodyText": "Can we add labels to the log, like \"path: {}, size: {}, offset: {}\"?", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r540403015", "createdAt": "2020-12-10T18:32:24Z", "author": {"login": "gpang"}, "path": "integration/fuse/src/main/java/alluxio/fuse/AlluxioJniFuseFileSystem.java", "diffHunk": "@@ -0,0 +1,633 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.fuse;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.file.FileInStream;\n+import alluxio.client.file.FileOutStream;\n+import alluxio.client.file.FileSystem;\n+import alluxio.client.file.URIStatus;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.exception.FileDoesNotExistException;\n+import alluxio.grpc.CreateDirectoryPOptions;\n+import alluxio.grpc.CreateFilePOptions;\n+import alluxio.grpc.SetAttributePOptions;\n+import alluxio.jnifuse.AbstractFuseFileSystem;\n+import alluxio.jnifuse.ErrorCodes;\n+import alluxio.jnifuse.FuseFillDir;\n+import alluxio.jnifuse.struct.FileStat;\n+import alluxio.jnifuse.struct.FuseContext;\n+import alluxio.jnifuse.struct.FuseFileInfo;\n+import alluxio.resource.LockResource;\n+import alluxio.security.authorization.Mode;\n+import alluxio.util.ThreadUtils;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.CacheLoader;\n+import com.google.common.cache.LoadingCache;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.file.InvalidPathException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.ReadWriteLock;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Main FUSE implementation class.\n+ * <p>\n+ * Implements the FUSE callbacks defined by jni-fuse.\n+ */\n+@ThreadSafe\n+public final class AlluxioJniFuseFileSystem extends AbstractFuseFileSystem {\n+  private static final Logger LOG = LoggerFactory.getLogger(AlluxioJniFuseFileSystem.class);\n+  private final FileSystem mFileSystem;\n+  private final AlluxioConfiguration mConf;\n+  // base path within Alluxio namespace that is used for FUSE operations\n+  // For example, if alluxio-fuse is mounted in /mnt/alluxio and mAlluxioRootPath\n+  // is /users/foo, then an operation on /mnt/alluxio/bar will be translated on\n+  // an action on the URI alluxio://<master>:<port>/users/foo/bar\n+  private final Path mAlluxioRootPath;\n+  // Keeps a cache of the most recently translated paths from String to Alluxio URI\n+  private final LoadingCache<String, AlluxioURI> mPathResolverCache;\n+  private final LoadingCache<String, Long> mUidCache;\n+  private final LoadingCache<String, Long> mGidCache;\n+  private final AtomicLong mNextOpenFileId = new AtomicLong(0);\n+  private final String mFsName;\n+\n+  private static final int LOCK_SIZE = 2048;\n+  /** A readwrite lock pool to guard individual files based on striping. */\n+  private final ReadWriteLock[] mFileLocks = new ReentrantReadWriteLock[LOCK_SIZE];\n+\n+  private final Map<Long, FileInStream> mOpenFileEntries = new ConcurrentHashMap<>();\n+  private final Map<Long, FileOutStream> mCreateFileEntries = new ConcurrentHashMap<>();\n+  private final boolean mIsUserGroupTranslation;\n+\n+  // To make test build\n+  @VisibleForTesting\n+  public static final long ID_NOT_SET_VALUE = -1;\n+  @VisibleForTesting\n+  public static final long ID_NOT_SET_VALUE_UNSIGNED = 4294967295L;\n+  /**\n+   * df command will treat -1 as an unknown value.\n+   */\n+  @VisibleForTesting\n+  public static final int UNKNOWN_INODES = -1;\n+  /**\n+   * Most FileSystems on linux limit the length of file name beyond 255 characters.\n+   */\n+  @VisibleForTesting\n+  public static final int MAX_NAME_LENGTH = 255;\n+\n+  private static final String USER_NAME = System.getProperty(\"user.name\");\n+  private static final String GROUP_NAME = System.getProperty(\"user.name\");\n+  private static final long DEFAULT_UID = AlluxioFuseUtils.getUid(USER_NAME);\n+  private static final long DEFAULT_GID = AlluxioFuseUtils.getGid(GROUP_NAME);\n+\n+  /**\n+   * Creates a new instance of {@link AlluxioJniFuseFileSystem}.\n+   *\n+   * @param fs Alluxio file system\n+   * @param opts options\n+   * @param conf Alluxio configuration\n+   */\n+  public AlluxioJniFuseFileSystem(\n+      FileSystem fs, AlluxioFuseOptions opts, AlluxioConfiguration conf) {\n+    super(Paths.get(opts.getMountPoint()));\n+    mFsName = conf.get(PropertyKey.FUSE_FS_NAME);\n+    mFileSystem = fs;\n+    mConf = conf;\n+    mAlluxioRootPath = Paths.get(opts.getAlluxioRoot());\n+    mPathResolverCache = CacheBuilder.newBuilder()\n+        .maximumSize(conf.getInt(PropertyKey.FUSE_CACHED_PATHS_MAX))\n+        .build(new CacheLoader<String, AlluxioURI>() {\n+          @Override\n+          public AlluxioURI load(String fusePath) {\n+            // fusePath is guaranteed to always be an absolute path (i.e., starts\n+            // with a fwd slash) - relative to the FUSE mount point\n+            final String relPath = fusePath.substring(1);\n+            final Path tpath = mAlluxioRootPath.resolve(relPath);\n+            return new AlluxioURI(tpath.toString());\n+          }\n+        });\n+    mUidCache = CacheBuilder.newBuilder()\n+        .maximumSize(100)\n+        .build(new CacheLoader<String, Long>() {\n+          @Override\n+          public Long load(String userName) {\n+            return AlluxioFuseUtils.getUid(userName);\n+          }\n+        });\n+    mGidCache = CacheBuilder.newBuilder()\n+        .maximumSize(100)\n+        .build(new CacheLoader<String, Long>() {\n+          @Override\n+          public Long load(String groupName) {\n+            return AlluxioFuseUtils.getGidFromGroupName(groupName);\n+          }\n+        });\n+    mIsUserGroupTranslation = conf.getBoolean(PropertyKey.FUSE_USER_GROUP_TRANSLATION_ENABLED);\n+    for (int i = 0; i < LOCK_SIZE; i++) {\n+      mFileLocks[i] = new ReentrantReadWriteLock();\n+    }\n+  }\n+\n+  /**\n+   * Gets the lock for a particular page. Note that multiple path may share the same lock as lock\n+   * striping is used to reduce resource overhead for locks.\n+   *\n+   * @param fd the file id\n+   * @return the corresponding page lock\n+   */\n+  private ReadWriteLock getFileLock(long fd) {\n+    return mFileLocks[Math.floorMod((int) fd, LOCK_SIZE)];\n+  }\n+\n+  private void setUserGroupIfNeeded(AlluxioURI uri) throws Exception {\n+    SetAttributePOptions.Builder attributeOptionsBuilder = SetAttributePOptions.newBuilder();\n+    FuseContext fc = getContext();\n+    long uid = fc.uid.get();\n+    long gid = fc.gid.get();\n+    if (gid != DEFAULT_GID) {\n+      String groupName = AlluxioFuseUtils.getGroupName(gid);\n+      if (groupName.isEmpty()) {\n+        // This should never be reached since input gid is always valid\n+        LOG.error(\"Failed to get group name from gid {}, fallback to {}.\", gid, GROUP_NAME);\n+        groupName = GROUP_NAME;\n+      }\n+      attributeOptionsBuilder.setGroup(groupName);\n+    }\n+    if (uid != DEFAULT_UID) {\n+      String userName = AlluxioFuseUtils.getUserName(uid);\n+      if (userName.isEmpty()) {\n+        // This should never be reached since input uid is always valid\n+        LOG.error(\"Failed to get user name from uid {}, fallback to {}\", uid, USER_NAME);\n+        userName = USER_NAME;\n+      }\n+      attributeOptionsBuilder.setOwner(userName);\n+    }\n+    SetAttributePOptions setAttributePOptions =  attributeOptionsBuilder.build();\n+    if (gid != DEFAULT_GID || uid != DEFAULT_UID) {\n+      LOG.debug(\"Set attributes of path {} to {}\", uri, setAttributePOptions);\n+      mFileSystem.setAttribute(uri, setAttributePOptions);\n+    }\n+  }\n+\n+  @Override\n+  public int create(String path, long mode, FuseFileInfo fi) {\n+    return AlluxioFuseUtils.call(LOG, () -> createInternal(path, mode, fi),\n+        \"create\", \"path=%s,mode=%o\", path, mode);\n+  }\n+\n+  private int createInternal(String path, long mode, FuseFileInfo fi) {\n+    final AlluxioURI uri = mPathResolverCache.getUnchecked(path);\n+    if (uri.getName().length() > MAX_NAME_LENGTH) {\n+      LOG.error(\"Failed to create {}: file name longer than {} characters\",\n+          path, MAX_NAME_LENGTH);\n+      return -ErrorCodes.ENAMETOOLONG();\n+    }\n+    try {\n+      FileOutStream os = mFileSystem.createFile(uri,\n+          CreateFilePOptions.newBuilder()\n+              .setMode(new Mode((short) mode).toProto())\n+              .build());\n+      long fid = mNextOpenFileId.getAndIncrement();\n+      mCreateFileEntries.put(fid, os);\n+      fi.fh.set(fid);\n+      setUserGroupIfNeeded(uri);\n+    } catch (Throwable e) {\n+      LOG.error(\"Failed to getattr {}: \", path, e);\n+      return -ErrorCodes.EIO();\n+    }\n+    return 0;\n+  }\n+\n+  @Override\n+  public int getattr(String path, FileStat stat) {\n+    return AlluxioFuseUtils.call(\n+        LOG, () -> getattrInternal(path, stat), \"getattr\", \"path=%s\", path);\n+  }\n+\n+  private int getattrInternal(String path, FileStat stat) {\n+    final AlluxioURI uri = mPathResolverCache.getUnchecked(path);\n+    try {\n+      URIStatus status = mFileSystem.getStatus(uri);\n+      long size = status.getLength();\n+      stat.st_size.set(size);\n+\n+      // Sets block number to fulfill du command needs\n+      // `st_blksize` is ignored in `getattr` according to\n+      // https://github.com/libfuse/libfuse/blob/d4a7ba44b022e3b63fc215374d87ed9e930d9974/include/fuse.h#L302\n+      // According to http://man7.org/linux/man-pages/man2/stat.2.html,\n+      // `st_blocks` is the number of 512B blocks allocated\n+      stat.st_blocks.set((int) Math.ceil((double) size / 512));\n+\n+      final long ctime_sec = status.getLastModificationTimeMs() / 1000;\n+      // Keeps only the \"residual\" nanoseconds not caputred in citme_sec\n+      final long ctime_nsec = (status.getLastModificationTimeMs() % 1000) * 1000;\n+\n+      stat.st_ctim.tv_sec.set(ctime_sec);\n+      stat.st_ctim.tv_nsec.set(ctime_nsec);\n+      stat.st_mtim.tv_sec.set(ctime_sec);\n+      stat.st_mtim.tv_nsec.set(ctime_nsec);\n+\n+      if (mIsUserGroupTranslation) {\n+        // Translate the file owner/group to unix uid/gid\n+        // Show as uid==-1 (nobody) if owner does not exist in unix\n+        // Show as gid==-1 (nogroup) if group does not exist in unix\n+        stat.st_uid.set(mUidCache.get(status.getOwner()));\n+        stat.st_gid.set(mGidCache.get(status.getGroup()));\n+      } else {\n+        stat.st_uid.set(DEFAULT_UID);\n+        stat.st_gid.set(DEFAULT_GID);\n+      }\n+\n+      int mode = status.getMode();\n+      if (status.isFolder()) {\n+        mode |= FileStat.S_IFDIR;\n+      } else {\n+        mode |= FileStat.S_IFREG;\n+      }\n+      stat.st_mode.set(mode);\n+      stat.st_nlink.set(1);\n+    } catch (FileDoesNotExistException | InvalidPathException e) {\n+      LOG.debug(\"Failed to get info of {}, path does not exist or is invalid\", path);\n+      return -ErrorCodes.ENOENT();\n+    } catch (Throwable e) {\n+      LOG.error(\"Failed to getattr {}: \", path, e);\n+      return -ErrorCodes.EIO();\n+    }\n+\n+    return 0;\n+  }\n+\n+  @Override\n+  public int readdir(String path, long buff, FuseFillDir filter, long offset,\n+      FuseFileInfo fi) {\n+    return AlluxioFuseUtils.call(LOG, () -> readdirInternal(path, buff, filter, offset, fi),\n+        \"readdir\", \"path=%s,buf=%s\", path, buff);\n+  }\n+\n+  private int readdirInternal(String path, long buff, FuseFillDir filter, long offset,\n+      FuseFileInfo fi) {\n+    final AlluxioURI uri = mPathResolverCache.getUnchecked(path);\n+    try {\n+      // standard . and .. entries\n+      filter.apply(buff, \".\", null, 0);\n+      filter.apply(buff, \"..\", null, 0);\n+\n+      mFileSystem.iterateStatus(uri, file -> {\n+        filter.apply(buff, file.getName(), null, 0);\n+      });\n+    } catch (Throwable e) {\n+      LOG.error(\"Failed to readdir {}: \", path, e);\n+      return -ErrorCodes.EIO();\n+    }\n+\n+    return 0;\n+  }\n+\n+  @Override\n+  public int open(String path, FuseFileInfo fi) {\n+    return AlluxioFuseUtils.call(LOG, () -> openInternal(path, fi), \"open\", \"path=%s\", path);\n+  }\n+\n+  private int openInternal(String path, FuseFileInfo fi) {\n+    final AlluxioURI uri = mPathResolverCache.getUnchecked(path);\n+    try {\n+      long fd = mNextOpenFileId.getAndIncrement();\n+      FileInStream is = mFileSystem.openFile(uri);\n+      mOpenFileEntries.put(fd, is);\n+      fi.fh.set(fd);\n+      return 0;\n+    } catch (Throwable e) {\n+      LOG.error(\"Failed to open {}: \", path, e);\n+      return -ErrorCodes.EIO();\n+    }\n+  }\n+\n+  @Override\n+  public int read(String path, ByteBuffer buf, long size, long offset, FuseFileInfo fi) {\n+    return AlluxioFuseUtils.call(LOG, () -> readInternal(path, buf, size, offset, fi),\n+        \"read\", \"path=%s,buf=%s,size=%d,offset=%d\", path, buf, size, offset);\n+  }\n+\n+  private int readInternal(String path, ByteBuffer buf, long size, long offset, FuseFileInfo fi) {\n+    int nread = 0;\n+    int rd = 0;\n+    final int sz = (int) size;\n+    long fd = fi.fh.get();\n+    // FileInStream is not thread safe\n+    try (LockResource r1 = new LockResource(getFileLock(fd).writeLock())) {\n+      FileInStream is = mOpenFileEntries.get(fd);\n+      if (is == null) {\n+        LOG.error(\"Cannot find fd {} for {}\", fd, path);\n+        return -ErrorCodes.EBADFD();\n+      }\n+      is.seek(offset);\n+      final byte[] dest = new byte[sz];\n+      while (rd >= 0 && nread < size) {\n+        rd = is.read(dest, nread, sz - nread);\n+        if (rd >= 0) {\n+          nread += rd;\n+        }\n+      }\n+\n+      if (nread == -1) { // EOF\n+        nread = 0;\n+      } else if (nread > 0) {\n+        buf.put(dest, 0, nread);\n+      }\n+    } catch (Throwable e) {\n+      LOG.error(\"Failed to read {},{},{}: \", path, size, offset, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46187f86b355ea86654186c33f9a4111e46b7359"}, "originalPosition": 362}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwNTc5Ng==", "bodyText": "Should this be configurable somehow?", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r540405796", "createdAt": "2020-12-10T18:36:48Z", "author": {"login": "gpang"}, "path": "integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.jnifuse;\n+\n+import alluxio.jnifuse.struct.FileStat;\n+import alluxio.jnifuse.struct.FuseFileInfo;\n+import alluxio.jnifuse.struct.Statvfs;\n+import alluxio.jnifuse.utils.SecurityUtils;\n+import alluxio.util.OSUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Abstract class for other File System to extend and integrate with Fuse.\n+ */\n+public abstract class AbstractFuseFileSystem implements FuseFileSystem {\n+\n+  static {\n+    System.loadLibrary(\"jnifuse\");\n+  }\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(AbstractFuseFileSystem.class);\n+\n+  private static final int TIMEOUT = 2000; // ms", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46187f86b355ea86654186c33f9a4111e46b7359"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwODY3Nw==", "bodyText": "were these all copied from some other code/library?", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r540408677", "createdAt": "2020-12-10T18:41:27Z", "author": {"login": "gpang"}, "path": "integration/fuse/src/main/java/alluxio/jnifuse/struct/FileStat.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.jnifuse.struct;\n+\n+import alluxio.util.OSUtils;\n+\n+import java.nio.ByteBuffer;\n+\n+public class FileStat extends Struct {\n+  public static final int S_IFIFO = 0010000; // named pipe (fifo)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46187f86b355ea86654186c33f9a4111e46b7359"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwOTYzNg==", "bodyText": "Don't all these public classes/methods require javadoc? Why isn't checkstyle complaining?", "url": "https://github.com/Alluxio/alluxio/pull/12606#discussion_r540409636", "createdAt": "2020-12-10T18:42:52Z", "author": {"login": "gpang"}, "path": "integration/fuse/src/main/java/alluxio/jnifuse/struct/FuseFileInfo.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.jnifuse.struct;\n+\n+import java.nio.ByteBuffer;\n+\n+public class FuseFileInfo extends Struct {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46187f86b355ea86654186c33f9a4111e46b7359"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0ab25d8deca3ec010470a8fc19b6d719a3ad309", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/e0ab25d8deca3ec010470a8fc19b6d719a3ad309", "committedDate": "2020-12-10T23:48:12Z", "message": "Fix comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1896cb91623e1bf9d97dafa89e9455a5d078d95", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/f1896cb91623e1bf9d97dafa89e9455a5d078d95", "committedDate": "2020-12-11T01:52:05Z", "message": "Ignore unit tests\n\nAlluxioJniFuseFileSystemTest requires to load native library\nStatvfsTest and FileStatTest require tuning on mac"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8c1b6b3206324a02a349f96b4b1ddf73d5aa7b7", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/b8c1b6b3206324a02a349f96b4b1ddf73d5aa7b7", "committedDate": "2020-12-11T02:02:20Z", "message": "Rename flag"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NzUxMTYy", "url": "https://github.com/Alluxio/alluxio/pull/12606#pullrequestreview-549751162", "createdAt": "2020-12-11T02:07:22Z", "commit": {"oid": "b8c1b6b3206324a02a349f96b4b1ddf73d5aa7b7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5Nzg2MTY5", "url": "https://github.com/Alluxio/alluxio/pull/12606#pullrequestreview-549786169", "createdAt": "2020-12-11T04:01:13Z", "commit": {"oid": "b8c1b6b3206324a02a349f96b4b1ddf73d5aa7b7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "795e00cfc5e745f27d6dc8db627bcd3be46cf441", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/795e00cfc5e745f27d6dc8db627bcd3be46cf441", "committedDate": "2020-04-26T06:10:59Z", "message": "Add skeleton impl of native FUSE support through JNI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "778bc66194618727549f1cb3a7ce817dc4f0cf1f", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/778bc66194618727549f1cb3a7ce817dc4f0cf1f", "committedDate": "2020-04-27T07:05:38Z", "message": "Improve Fuse Makefile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5adff91e1017827725e3c1d2e6e6bee4f5f9fa13", "author": {"user": {"login": "iluoeli", "name": "Luo Yili"}}, "url": "https://github.com/Alluxio/alluxio/commit/5adff91e1017827725e3c1d2e6e6bee4f5f9fa13", "committedDate": "2020-05-01T16:19:21Z", "message": "Provide AlluxioJniFuse\n\n\n\npr-link: Alluxio/alluxio#11364\nchange-id: cid-30ddc7c306f2eecda32eb32f1702574f49e96290"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbffe9176c54fe87ed0cda5edd48f456077d45f8", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/cbffe9176c54fe87ed0cda5edd48f456077d45f8", "committedDate": "2020-05-04T07:56:12Z", "message": "Add a flag to switch among different Fuse libraries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "693d822a1ebd6e4c9206cc0b7e657dd9e99f3f7d", "author": {"user": {"login": "iluoeli", "name": "Luo Yili"}}, "url": "https://github.com/Alluxio/alluxio/commit/693d822a1ebd6e4c9206cc0b7e657dd9e99f3f7d", "committedDate": "2020-05-09T04:19:01Z", "message": "Improve AlluxioJniFuse\n\n\n\npr-link: Alluxio/alluxio#11387\nchange-id: cid-9639fa84385b493c26d131d2dfd530c5f8effd7f"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b07279176015db3ea1807c7d125bb34582279d8d", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/b07279176015db3ea1807c7d125bb34582279d8d", "committedDate": "2020-05-09T04:32:47Z", "message": "Merge branch 'master' of github.com:Alluxio/alluxio into fuse-dev"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c63902df785a36232e42ed4fcfc699af5967f3d", "author": {"user": {"login": "cheyang", "name": "cheyang"}}, "url": "https://github.com/Alluxio/alluxio/commit/7c63902df785a36232e42ed4fcfc699af5967f3d", "committedDate": "2020-05-09T05:08:27Z", "message": "Add direct memory access"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "240b595038308e0769272ba90c937830403d8519", "author": {"user": {"login": "cheyang", "name": "cheyang"}}, "url": "https://github.com/Alluxio/alluxio/commit/240b595038308e0769272ba90c937830403d8519", "committedDate": "2020-05-09T05:14:18Z", "message": "Add option to disable asyncUpdateFileAccessTime"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdfa76ae99f5eede073bdca70555b7149d6ac5c4", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/fdfa76ae99f5eede073bdca70555b7149d6ac5c4", "committedDate": "2020-05-12T08:09:25Z", "message": "Improve JNI FUSE impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2afa2c729c15c46c8153ff529f0289582a869b9", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/a2afa2c729c15c46c8153ff529f0289582a869b9", "committedDate": "2020-05-22T22:47:13Z", "message": "Merge branch 'master' of github.com:Alluxio/alluxio into fuse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2689a3106611ffe1b0ad07fa7a1494ade08a2433", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/2689a3106611ffe1b0ad07fa7a1494ade08a2433", "committedDate": "2020-05-23T04:46:00Z", "message": "Make ALluxioFuseFileSystem.read synchronized"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ba171429613b911d349bf827450c03f06b2484f", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/7ba171429613b911d349bf827450c03f06b2484f", "committedDate": "2020-05-26T04:09:37Z", "message": "Merge remote-tracking branch 'upstream' into fuse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aed8196605916b6e4e2d9a9c1821d8f6771fa79d", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/aed8196605916b6e4e2d9a9c1821d8f6771fa79d", "committedDate": "2020-05-26T07:01:26Z", "message": "Make AlluxioJniFuseFileSystem minmal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e516622a6be21450a7a6f36f2a17df6cf22fca5", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/6e516622a6be21450a7a6f36f2a17df6cf22fca5", "committedDate": "2020-05-27T00:07:09Z", "message": "Fix check style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6642925bbfcfe06417f7ee4d9ae136603b6ac2bc", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/6642925bbfcfe06417f7ee4d9ae136603b6ac2bc", "committedDate": "2020-06-02T08:53:34Z", "message": "Reuse FileInStream across reads"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "881de6ae430409409849d90ce5cb7cbda8f74596", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/881de6ae430409409849d90ce5cb7cbda8f74596", "committedDate": "2020-06-02T08:55:46Z", "message": "Use PositionedRead"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb5a74996d87f664cb17cdb6a909eed7b423aa56", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/eb5a74996d87f664cb17cdb6a909eed7b423aa56", "committedDate": "2020-06-03T09:05:21Z", "message": "Make PositionRead threadsafe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ddc5124878164944aa353acca5a7af9e85ebf3e", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/4ddc5124878164944aa353acca5a7af9e85ebf3e", "committedDate": "2020-06-05T07:42:40Z", "message": "Switch back to FileInStream.read"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc77d11de6898e3f4a413bb0ec1877debaf27aaf", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/fc77d11de6898e3f4a413bb0ec1877debaf27aaf", "committedDate": "2020-06-09T07:42:47Z", "message": "Debug: add more logging to monitor resource usage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1ff5dc161f6fb1cd6e2360f7dae9bed7b270be3", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/e1ff5dc161f6fb1cd6e2360f7dae9bed7b270be3", "committedDate": "2020-06-11T06:28:29Z", "message": "Remove excessive logging in FUSE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b00b64098567ae68b96e2c8c133e54227f4130fd", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/b00b64098567ae68b96e2c8c133e54227f4130fd", "committedDate": "2020-06-11T07:57:57Z", "message": "Debug: Print Stats on Seek distance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf5bd6953e44022191af512800e15e113ec6c133", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/bf5bd6953e44022191af512800e15e113ec6c133", "committedDate": "2020-06-11T07:58:42Z", "message": "Debug: read for seek"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01e6e033798fbb8caa061622fe7964a2e70f0ab5", "author": {"user": {"login": "iluoeli", "name": "Luo Yili"}}, "url": "https://github.com/Alluxio/alluxio/commit/01e6e033798fbb8caa061622fe7964a2e70f0ab5", "committedDate": "2020-06-17T01:20:01Z", "message": "Support AlluxioJniFuse-level cache (#11566)\n\n* Support AlluxioJniFuse-level cache\r\n\r\n* Log cache statistics\r\n\r\n* Reduce the output of cache logs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7540cb5e9ac43b1079e8a565f4c9571ec45bedd6", "author": {"user": {"login": "iluoeli", "name": "Luo Yili"}}, "url": "https://github.com/Alluxio/alluxio/commit/7540cb5e9ac43b1079e8a565f4c9571ec45bedd6", "committedDate": "2020-06-17T01:24:19Z", "message": "Support jnifuse on MacOS (#11549)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cc64bf9b6c073f5b35f35369be3ca141ae757a0", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/6cc64bf9b6c073f5b35f35369be3ca141ae757a0", "committedDate": "2020-06-19T00:19:41Z", "message": "Merge branch 'master' of github.com:alluxio/alluxio into fuse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b5c28bb9879bc998fd22c1ce9a04001f3119019", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/4b5c28bb9879bc998fd22c1ce9a04001f3119019", "committedDate": "2020-06-19T01:21:27Z", "message": "Revert per-Open Entry buffer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5a33fd954b4ba4e5452e7740967297833577bcd", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/c5a33fd954b4ba4e5452e7740967297833577bcd", "committedDate": "2020-06-21T08:00:18Z", "message": "Revert \"Debug: read for seek\"\n\nThis reverts commit bf5bd6953e44022191af512800e15e113ec6c133."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9478c29d95de1a0112aa04b2000cba183ed6a18f", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/9478c29d95de1a0112aa04b2000cba183ed6a18f", "committedDate": "2020-06-22T08:02:09Z", "message": "Fix Style check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a10bf1986dbf697b5a291e610080123aa500c91", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/8a10bf1986dbf697b5a291e610080123aa500c91", "committedDate": "2020-06-22T08:06:07Z", "message": "Implement MemoryPageStore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fb79bb18180c50851b978217100f4e911a2a4a1", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/4fb79bb18180c50851b978217100f4e911a2a4a1", "committedDate": "2020-06-23T19:27:26Z", "message": "Fix update-version script for helm and dataproc\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11624\norig-commit: Alluxio/alluxio@4296d63d6f7b72f1c51d13c15918771e36ace4a7\norig-commit-author: Zac Blanco <zac@alluxio.com>\n\npr-link: Alluxio/alluxio#11626\nchange-id: cid-cda096b168e8c3a6b8a92fabb535240e19382790"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af0d402db6a165209d79eca8629021d3c43cf745", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/af0d402db6a165209d79eca8629021d3c43cf745", "committedDate": "2020-06-24T18:53:15Z", "message": "[DOCFIX] Add more notes to alluxio presto ami doc\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11634\norig-commit: Alluxio/alluxio@97685df126013d5401195a0edd5114ae1c17e0cf\norig-commit-author: Rico Chiu <Xenorith@users.noreply.github.com>\n\npr-link: Alluxio/alluxio#11642\nchange-id: cid-5f5c60d34de6acd903da12d69f643f83fd64f821"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "caa93c8b30601612bf898dc330090f61edf7efc1", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/caa93c8b30601612bf898dc330090f61edf7efc1", "committedDate": "2020-06-24T20:51:07Z", "message": "Update alluxio site-conf after default read type change\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11629\norig-commit: Alluxio/alluxio@fce9066f70ebc75ea9163623283b716db6815973\norig-commit-author: G\u00f6kt\u00fcrk Gezer <gokturk.gezer@gmail.com>\n\npr-link: Alluxio/alluxio#11639\nchange-id: cid-f0ea6dfd3bbc4e3ba2bc8ca797b4d31cf06b6ab1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eecd42b1494b89763cb6d2de06344140303f52bd", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/eecd42b1494b89763cb6d2de06344140303f52bd", "committedDate": "2020-06-24T21:43:21Z", "message": "Improve hdfs version test to parse CDH version\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11635\norig-commit: Alluxio/alluxio@e9c9c5225bc7e893369d43a3e76829e6d56832e5\norig-commit-author: Jiacheng Liu <jiacheliu3@gmail.com>\n\npr-link: Alluxio/alluxio#11640\nchange-id: cid-09619900416465ab4749397213a65cbe77169de6"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a076d83d36fc7f682732146c9f34997091ecca51", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/a076d83d36fc7f682732146c9f34997091ecca51", "committedDate": "2020-06-25T00:44:44Z", "message": "Workaround: Fix issue of counting MemPageStore size"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c04068356c958f0fe5b87ad54495a053ebd5842", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/3c04068356c958f0fe5b87ad54495a053ebd5842", "committedDate": "2020-06-25T01:44:29Z", "message": "Reduce logging on open and release"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b041a7b3481c858c34a52f6e155636761d8a7979", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/b041a7b3481c858c34a52f6e155636761d8a7979", "committedDate": "2020-06-25T15:47:45Z", "message": "Remove properties for journal formatting job in helm chart\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11644\norig-commit: Alluxio/alluxio@a0d914a8ff5f97dc6fbd00e4a8a612e139ea5228\norig-commit-author: Jiacheng Liu <jiacheliu3@gmail.com>\n\npr-link: Alluxio/alluxio#11646\nchange-id: cid-df48bb34000f4746ce5e2e34269bd1eba4c4419e"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8148aa87960cb7e710c1fccb333b45fa446eb8f", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/c8148aa87960cb7e710c1fccb333b45fa446eb8f", "committedDate": "2020-06-25T16:10:55Z", "message": "[DOCFIX] Use different properties corresponding to domain socket types\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11645\norig-commit: Alluxio/alluxio@e1b5b0fe88db8b65416b67ab101488fe24426aa7\norig-commit-author: Jiacheng Liu <jiacheliu3@gmail.com>\n\npr-link: Alluxio/alluxio#11647\nchange-id: cid-be648e46d12541fe1f56291d6da29d2919446706"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a20a43cf593b21a8ab45ba25399fff6ad258c5ca", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/a20a43cf593b21a8ab45ba25399fff6ad258c5ca", "committedDate": "2020-06-25T18:27:25Z", "message": "[DOCFIX] Update transformation docs\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11636\norig-commit: Alluxio/alluxio@9406b864206cc1eb8cc7db051c79b1529cab3537\norig-commit-author: Bradley Yoo <bradleyyoo@gmail.com>\n\npr-link: Alluxio/alluxio#11648\nchange-id: cid-5f1c434bebdd1acf17164c4517da373878d36b1a"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05198a4ebf6b46c406d5c42d361f57d94dbe0bd1", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/05198a4ebf6b46c406d5c42d361f57d94dbe0bd1", "committedDate": "2020-06-26T16:56:49Z", "message": "[DOCFIX] Update Metric docs\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11654\norig-commit: Alluxio/alluxio@34d81fba29afc1afe9f47e54bb02a48f5a4c485e\norig-commit-author: Shouwei Chen <40501329+HelloHorizon@users.noreply.github.com>\n\npr-link: Alluxio/alluxio#11659\nchange-id: cid-05c6462f62c536aa2ad953142b32133c428a943a"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cec19e91b6815063f5a6e7d8523eeae10b6ea1df", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/cec19e91b6815063f5a6e7d8523eeae10b6ea1df", "committedDate": "2020-06-26T16:57:15Z", "message": "[DOCFIX] Update Tiered Locality docs\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11655\norig-commit: Alluxio/alluxio@a586041f446ea153b4cfa681f8b53e6afabdf3e0\norig-commit-author: Shouwei Chen <40501329+HelloHorizon@users.noreply.github.com>\n\npr-link: Alluxio/alluxio#11660\nchange-id: cid-7d125cfd39f8bb180147a795c29060f8216611ad"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4607e355c5b6ab13508174a62ce3fbcf58296feb", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/4607e355c5b6ab13508174a62ce3fbcf58296feb", "committedDate": "2020-06-26T17:25:10Z", "message": "[DOCFIX] Update Contributor Tools docs\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11656\norig-commit: Alluxio/alluxio@beda9139349808b2e34915734cf99a27130943ef\norig-commit-author: Shouwei Chen <40501329+HelloHorizon@users.noreply.github.com>\n\npr-link: Alluxio/alluxio#11662\nchange-id: cid-b6f0a259af8db9602c7d38ed0afd5932d900b7a6"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abddc7e089b1d3f35d4a09197429d1e40ce63dcb", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/abddc7e089b1d3f35d4a09197429d1e40ce63dcb", "committedDate": "2020-06-26T17:51:43Z", "message": "[DOCFIX] Add example Ozone configuration files\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11658\norig-commit: Alluxio/alluxio@fdae18b83dfac25de97ec81007f2a7a0dee98411\norig-commit-author: maobaolong <307499405@qq.com>\n\npr-link: Alluxio/alluxio#11663\nchange-id: cid-fe42a5de69c0e1b447bd26d1ee7a847fe01644f2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6dea5c377d8447a4569c664845d7ef8804e6ab72", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/6dea5c377d8447a4569c664845d7ef8804e6ab72", "committedDate": "2020-06-26T18:06:11Z", "message": "[DOCFIX] Add software requirements for FUSE\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11661\norig-commit: Alluxio/alluxio@c011b58778b3712b62a5a996acd0cfad5708f0a7\norig-commit-author: LuQQiu <luqiujob@gmail.com>\n\npr-link: Alluxio/alluxio#11664\nchange-id: cid-182f7770b1e2b782e309f48d71f7c11604c8eb0e"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4935ae1bedde04e5bcc1a3f261020e7c6abcd1d3", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/4935ae1bedde04e5bcc1a3f261020e7c6abcd1d3", "committedDate": "2020-06-26T18:13:16Z", "message": "[DOCFIX] Update Caching Docs\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11653\norig-commit: Alluxio/alluxio@68e40a2c0aba933c156b608a63e9dba9ad77f43c\norig-commit-author: Shouwei Chen <40501329+HelloHorizon@users.noreply.github.com>\n\npr-link: Alluxio/alluxio#11665\nchange-id: cid-c8cfce1e70da0f5ddd74c7f304a4a766b3522a99"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26147c7f3d287e4e2197dbe91a5e05b829890102", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/26147c7f3d287e4e2197dbe91a5e05b829890102", "committedDate": "2020-06-26T18:41:15Z", "message": "[DOCFIX] Fix presto doc\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11651\norig-commit: Alluxio/alluxio@9f3888600f553543bf63eede45f5eb6dba9a0f62\norig-commit-author: on99 <13196393+on99@users.noreply.github.com>\n\npr-link: Alluxio/alluxio#11667\nchange-id: cid-840f5a80484189a9f7090487cf4d4cac4f09fd70"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf4bb1058612b1bcee417839c1602e254a70f9f5", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/cf4bb1058612b1bcee417839c1602e254a70f9f5", "committedDate": "2020-06-26T19:09:14Z", "message": "Disable hostPID by default\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11652\norig-commit: Alluxio/alluxio@627c4dfc8c831cbde81717e45d1d07763a033f7f\norig-commit-author: Jiacheng Liu <jiacheliu3@gmail.com>\n\npr-link: Alluxio/alluxio#11668\nchange-id: cid-277f026697da56e33e218a4fd19024746d19ea76"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cabec3a1ebca0599c30bbfe57700cd883e19d0a7", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/cabec3a1ebca0599c30bbfe57700cd883e19d0a7", "committedDate": "2020-06-26T19:51:50Z", "message": "[DOCFIX] Update code conventions doc\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11649\norig-commit: Alluxio/alluxio@9b8fbd1f61b78996c04c8ce6421e021314c32151\norig-commit-author: Gene Pang <gene.pang@gmail.com>\n\npr-link: Alluxio/alluxio#11671\nchange-id: cid-e8eae4b97ce86ae7e5faa6806fa83428e611ddf5"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "129033b3d2ebdb2afab3430b773c9042f30dbf70", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/129033b3d2ebdb2afab3430b773c9042f30dbf70", "committedDate": "2020-06-26T19:51:58Z", "message": "[DOCFIX] Update unified namespace docs\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11631\norig-commit: Alluxio/alluxio@f24d114436963236c0416d8fb5403d36503b21ac\norig-commit-author: Gene Pang <gene.pang@gmail.com>\n\npr-link: Alluxio/alluxio#11670\nchange-id: cid-8cae9d824f4d884029fe7775d2172ebc30a2c197"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cd3916cb73db457fc2f1620f3f5cd472f5c2fd7", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/2cd3916cb73db457fc2f1620f3f5cd472f5c2fd7", "committedDate": "2020-06-26T22:16:34Z", "message": "Improve UfsIOBench and HdfsValidationTool\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11669\norig-commit: Alluxio/alluxio@a38f2f2742aec16c5d56997f688c3e42bca6f32c\norig-commit-author: Jiacheng Liu <jiacheliu3@gmail.com>\n\npr-link: Alluxio/alluxio#11673\nchange-id: cid-2f7baeefba8d189f782fd5f79d2eb018c1236f7c"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f0d963f88eb11b6b01509b8eb27f8a2cb50e1c5", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/8f0d963f88eb11b6b01509b8eb27f8a2cb50e1c5", "committedDate": "2020-06-27T17:09:04Z", "message": "Fix remote logging doc\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11677\norig-commit: Alluxio/alluxio@cf9150e3fa70586e7715f6774fa53b819a4ac7da\norig-commit-author: Adit Madan <adit@alluxio.com>\n\npr-link: Alluxio/alluxio#11678\nchange-id: cid-e0e9fd6849169c7db643ea47581a4f6405dea111"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07431e3f4ae9ba44cc76e43b0f1aca79f15bcaed", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/07431e3f4ae9ba44cc76e43b0f1aca79f15bcaed", "committedDate": "2020-06-29T16:38:08Z", "message": "Fix Tensorflow documentation classify_image.py url\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11675\norig-commit: Alluxio/alluxio@9b15f60ce3f98e3a1fb16e0a6935aa687677a993\norig-commit-author: Jason Tieu <tieujason330@gmail.com>\n\npr-link: Alluxio/alluxio#11682\nchange-id: cid-0a3b479a8bad844cd9d8e135e58c21f26abe97c3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc69b090078b02345f5b2c28c0ad3dbc06f17554", "author": {"user": {"login": "ZacBlanco", "name": "Zac Blanco"}}, "url": "https://github.com/Alluxio/alluxio/commit/dc69b090078b02345f5b2c28c0ad3dbc06f17554", "committedDate": "2020-06-29T16:42:26Z", "message": "Update version to 2.3.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ffb6108212c2b936a9cda53093e83916cd7ebe1", "author": {"user": {"login": "ZacBlanco", "name": "Zac Blanco"}}, "url": "https://github.com/Alluxio/alluxio/commit/8ffb6108212c2b936a9cda53093e83916cd7ebe1", "committedDate": "2020-06-29T16:44:12Z", "message": "Skip tests for release"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06499d37e4d2f5ae1bc4055572630e3cec82bf41", "author": {"user": {"login": "ZacBlanco", "name": "Zac Blanco"}}, "url": "https://github.com/Alluxio/alluxio/commit/06499d37e4d2f5ae1bc4055572630e3cec82bf41", "committedDate": "2020-06-29T18:35:31Z", "message": "[maven-release-plugin] prepare release v2.3.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28a52687631beefea1bfb199cfa24ed5dbc3b011", "author": {"user": {"login": "ZacBlanco", "name": "Zac Blanco"}}, "url": "https://github.com/Alluxio/alluxio/commit/28a52687631beefea1bfb199cfa24ed5dbc3b011", "committedDate": "2020-06-29T18:35:39Z", "message": "[maven-release-plugin] prepare for next development iteration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e6802437e0b40b742eaa551f0cb56f7e4c4db5f", "author": {"user": {"login": "ZacBlanco", "name": "Zac Blanco"}}, "url": "https://github.com/Alluxio/alluxio/commit/7e6802437e0b40b742eaa551f0cb56f7e4c4db5f", "committedDate": "2020-06-29T18:35:39Z", "message": "Post-release cleanup\n\n- Remove skipTests\n- Revert versions of hadoop to 2.7.3/ufs.hadoop.version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83d2b9574b00798d43fec14f69c7437aea42a416", "author": {"user": {"login": "ZacBlanco", "name": "Zac Blanco"}}, "url": "https://github.com/Alluxio/alluxio/commit/83d2b9574b00798d43fec14f69c7437aea42a416", "committedDate": "2020-06-29T18:36:13Z", "message": "Update versions post-release"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cd0dd926a58700dba65c71b1c0edd0dcc7bd64d", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/7cd0dd926a58700dba65c71b1c0edd0dcc7bd64d", "committedDate": "2020-06-30T16:30:03Z", "message": "[DOCFIX] Update perf docs\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11643\norig-commit: Alluxio/alluxio@3864015f9db9b5c23c750b8575310bcc5d86b822\norig-commit-author: Gene Pang <gene.pang@gmail.com>\n\npr-link: Alluxio/alluxio#11686\nchange-id: cid-f452d768859cbd41906acd3913562b1848ab9bee"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a219872c473d97f49c1f9259080c77ad3927b01f", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/a219872c473d97f49c1f9259080c77ad3927b01f", "committedDate": "2020-06-30T16:30:15Z", "message": "[DOCFIX] Update presto docs\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11638\norig-commit: Alluxio/alluxio@af918d9b77344d733f5069559afd5354e2a351ae\norig-commit-author: Gene Pang <gene.pang@gmail.com>\n\npr-link: Alluxio/alluxio#11685\nchange-id: cid-f19595b65ccf0018a7b04fb4fd9c7a42b6fb11e8"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e22d46f52a3c8b5e158110c7ff9c12d2a64aa582", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/e22d46f52a3c8b5e158110c7ff9c12d2a64aa582", "committedDate": "2020-06-30T16:31:05Z", "message": "[DOCFIX] Update spark docs\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11632\norig-commit: Alluxio/alluxio@a466ce42b84db0a59b7a914114827a016071c65c\norig-commit-author: Gene Pang <gene.pang@gmail.com>\n\npr-link: Alluxio/alluxio#11684\nchange-id: cid-5f264395dfc9d31127b4e83dd82ae9e5284b3c1c"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "787c67681b2f0e6e84b3e0fb6e6bed1b65f657b4", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/787c67681b2f0e6e84b3e0fb6e6bed1b65f657b4", "committedDate": "2020-06-30T19:02:26Z", "message": "[DOCFIX] Fix typo in collectInfo usage info\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11690\norig-commit: Alluxio/alluxio@476222f782ab680ef61b017338a0c87b51f53454\norig-commit-author: Bradley Yoo <bradleyyoo@gmail.com>\n\npr-link: Alluxio/alluxio#11691\nchange-id: cid-c78101ba8ad9e826ad25defd4644d0441886a147"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "174d2700417abb1199838dcb1cb2be99b862ccac", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/174d2700417abb1199838dcb1cb2be99b862ccac", "committedDate": "2020-06-30T20:07:04Z", "message": "[DOCFIX]  Add instructions for Presto versions with support for SDS\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11687\norig-commit: Alluxio/alluxio@df612fad74391d01e18b0a10c94fde1b709bf9f0\norig-commit-author: David Zhu <david@alluxio.com>\n\npr-link: Alluxio/alluxio#11692\nchange-id: cid-eb639473ca4b674664f11b8163f94f3eb4647543"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53da75f18786f55d749749807c5df92775468770", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/53da75f18786f55d749749807c5df92775468770", "committedDate": "2020-07-01T04:48:48Z", "message": "[DOCFIX] Add runHdfsMountTests and runUfsIOTest to UserCLI doc\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11688\norig-commit: Alluxio/alluxio@00f922d1199f656284e4e3226983103bec1a1b12\norig-commit-author: Jiacheng Liu <jiacheliu3@gmail.com>\n\npr-link: Alluxio/alluxio#11693\nchange-id: cid-ca2f4a36424e07f033a3513c28e0400abe55d13e"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d971225f601eb9277e226de32cb747583d1e1f16", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/d971225f601eb9277e226de32cb747583d1e1f16", "committedDate": "2020-07-01T19:05:24Z", "message": "[DOCFIX] Fix fuse doc\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11666\norig-commit: Alluxio/alluxio@350b524c0cea142dcac1ea3783560a167cd17f80\norig-commit-author: LuQQiu <luqiujob@gmail.com>\n\npr-link: Alluxio/alluxio#11698\nchange-id: cid-d33e1e548e5f14e12cc8e787e0c3d9855c5242d5"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0466b2f3f7eda5e314b34bda3e98c724a5ed2ff1", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/0466b2f3f7eda5e314b34bda3e98c724a5ed2ff1", "committedDate": "2020-07-01T22:49:00Z", "message": "Fix spaces in navtab titles\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11701\norig-commit: Alluxio/alluxio@324736ceb578badf32da73b45646af3d1b31fd75\norig-commit-author: Rico Chiu <Xenorith@users.noreply.github.com>\n\npr-link: Alluxio/alluxio#11703\nchange-id: cid-0483cf9f388f32b48af267a314349aef68aef133"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc9cc19d683b06e2bdb39bcdc426852b749047c8", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/fc9cc19d683b06e2bdb39bcdc426852b749047c8", "committedDate": "2020-07-02T04:04:38Z", "message": "Refactor stream reader/writer tracking\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11650\norig-commit: Alluxio/alluxio@0742ea0785e70c5be6561f6443f0622b2f9306db\norig-commit-author: G\u00f6kt\u00fcrk Gezer <gokturk.gezer@gmail.com>\n\npr-link: Alluxio/alluxio#11705\nchange-id: cid-e934a79328cd0c690459980b0ee3514d7e974d2a"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb88093385b8a270a25e2844c477cd821caf25a9", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/bb88093385b8a270a25e2844c477cd821caf25a9", "committedDate": "2020-07-02T04:57:34Z", "message": "Add thread-factory for fork-join-pool threads\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11683\norig-commit: Alluxio/alluxio@5c759e8dc0678dc8bc6a9db7344b4ddc21c2e6ef\norig-commit-author: G\u00f6kt\u00fcrk Gezer <gokturk.gezer@gmail.com>\n\npr-link: Alluxio/alluxio#11706\nchange-id: cid-40fcd0b1fe25d790199537f5ef1f98e7a7816186"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a388468507a1cc2f5a99c01021172b091767689e", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/a388468507a1cc2f5a99c01021172b091767689e", "committedDate": "2020-07-02T17:53:19Z", "message": "Debug: Customize the docker build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cf165fa07723523ff22d7bdf508c96be5b3918f", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/5cf165fa07723523ff22d7bdf508c96be5b3918f", "committedDate": "2020-07-03T01:46:21Z", "message": "Update base image for fuse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7629dcd4238efbbd15d75b1982f5520a881dc0c", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/b7629dcd4238efbbd15d75b1982f5520a881dc0c", "committedDate": "2020-07-03T01:57:07Z", "message": "Further reduce logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77d1ff79f285b623f3eab8bf04ca7d8563ac1faf", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/77d1ff79f285b623f3eab8bf04ca7d8563ac1faf", "committedDate": "2020-07-03T01:57:34Z", "message": "Avoid creating byte array on heap frequently"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39737d60f470b000b4b2b224cd62d6a8da2a43cf", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/39737d60f470b000b4b2b224cd62d6a8da2a43cf", "committedDate": "2020-07-04T18:02:44Z", "message": "Add Alibaba Cloud ACK document\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11696\norig-commit: Alluxio/alluxio@b50365cb52f44aeb6625d2966542dcc87deb9681\norig-commit-author: happy2048 <2270020588@qq.com>\n\npr-link: Alluxio/alluxio#11710\nchange-id: cid-327627c048daf4d8ba5390f0cf7e2919aa445f6b"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f611b8b5682abafa01ddfd67336d5eeb2c23109", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/2f611b8b5682abafa01ddfd67336d5eeb2c23109", "committedDate": "2020-07-05T19:53:52Z", "message": "Update the product name for ACK\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11713\norig-commit: Alluxio/alluxio@9c6630eb3a4b56bb5098e4813f100652e8adb4bc\norig-commit-author: cheyang <cheyang@163.com>\n\npr-link: Alluxio/alluxio#11714\nchange-id: cid-835c9be10729043d0cdf4fb17c5ad3256726d4d9"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69e99db4fc9c6519d7c2fffec90d0ce1c655ab6e", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/69e99db4fc9c6519d7c2fffec90d0ce1c655ab6e", "committedDate": "2020-07-07T17:04:40Z", "message": "[DOCFIX] Improve troubleshooting doc\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11633\norig-commit: Alluxio/alluxio@c0da31cc9866d5bf37c53a02e4f5b250526d150b\norig-commit-author: Jiacheng Liu <jiacheliu3@gmail.com>\n\npr-link: Alluxio/alluxio#11725\nchange-id: cid-d469426a8196ba12e17b79b401db4ef6eab763e3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f41e6a738537975c4c8aa3837bfdb3dbd0908c8a", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/f41e6a738537975c4c8aa3837bfdb3dbd0908c8a", "committedDate": "2020-07-07T17:46:08Z", "message": "Refactor FSM RPC cancellation support\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11674\norig-commit: Alluxio/alluxio@0236618189bfbc5811a3c26f4eb3c2b21205415f\norig-commit-author: G\u00f6kt\u00fcrk Gezer <gokturk.gezer@gmail.com>\n\npr-link: Alluxio/alluxio#11723\nchange-id: cid-8e2c8f358f623255a4993899b8949e3be020ca06"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c39a8bae73b65d8b3f999046f01589c2d89c040c", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/c39a8bae73b65d8b3f999046f01589c2d89c040c", "committedDate": "2020-07-08T21:48:14Z", "message": "[DOCFIX] Update 'Caching' doc for multi-tier management changes\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11700\norig-commit: Alluxio/alluxio@582423c525a805d0ea038e619e130c377522c6ee\norig-commit-author: G\u00f6kt\u00fcrk Gezer <gokturk.gezer@gmail.com>\n\npr-link: Alluxio/alluxio#11738\nchange-id: cid-5b9a7694d3c4625ec2350d1dce78741c723f7191"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0a805a6c8cec9079aa1ee2738230a9f74816a7c", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/c0a805a6c8cec9079aa1ee2738230a9f74816a7c", "committedDate": "2020-07-08T22:51:28Z", "message": "Improve logging for catalog errors\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11727\norig-commit: Alluxio/alluxio@b8cca5bce71e94566805fd4db5a47436e1c3830c\norig-commit-author: Gene Pang <gene.pang@gmail.com>\n\npr-link: Alluxio/alluxio#11730\nchange-id: cid-a83e08d7c28a950e7c6618c7515c2a10681a7942"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be57daba936f670061340e8d485297b0c8216eac", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/be57daba936f670061340e8d485297b0c8216eac", "committedDate": "2020-07-09T01:11:52Z", "message": "Resolve null value for Glue fields\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11728\norig-commit: Alluxio/alluxio@35e8a9dd8476f1994c3f895664ac6a03b68cef5e\norig-commit-author: Shouwei Chen <40501329+HelloHorizon@users.noreply.github.com>\n\npr-link: Alluxio/alluxio#11731\nchange-id: cid-6f3f288679e6d24edef1c531e779637a86735e35"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "877f554522c91695e078717d353384a72079ab78", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/877f554522c91695e078717d353384a72079ab78", "committedDate": "2020-07-09T03:59:22Z", "message": "Optimize UFS access on missing paths\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11704\norig-commit: Alluxio/alluxio@ecbdbde8386d48816bafcbd698179f0b1399bc13\norig-commit-author: Zac Blanco <zac@alluxio.com>\n\npr-link: Alluxio/alluxio#11726\nchange-id: cid-dedbdf582a9536b8ba2ab8b70f8a7146acbb3783"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "293afb771189ad705f856e97fd33f5beb4789c7b", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/293afb771189ad705f856e97fd33f5beb4789c7b", "committedDate": "2020-07-09T04:37:26Z", "message": "Fix edge case for ObjectUFS when looking at root path\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11733\norig-commit: Alluxio/alluxio@fcf0bbcd6278a4269239d3dd93b04a36d5948c2a\norig-commit-author: Bradley Yoo <bradleyyoo@gmail.com>\n\npr-link: Alluxio/alluxio#11736\nchange-id: cid-f26e1dae9e81301f293c18ce34bf2376ce5a650f"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be68981cd8cd0c4af2099b9ec484c08f8e183bf0", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/be68981cd8cd0c4af2099b9ec484c08f8e183bf0", "committedDate": "2020-07-09T20:28:32Z", "message": "Log exception for sds sync threads\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11741\norig-commit: Alluxio/alluxio@b53effe379622af47051cb1fe8556a76acbda54b\norig-commit-author: Gene Pang <gene.pang@gmail.com>\n\npr-link: Alluxio/alluxio#11742\nchange-id: cid-9463f769c4f5ffaff008c5f0095178bf64cfecfc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df7d58d165ef1cda9c1f8742da60a625c8bf50b4", "author": {"user": {"login": "iluoeli", "name": "Luo Yili"}}, "url": "https://github.com/Alluxio/alluxio/commit/df7d58d165ef1cda9c1f8742da60a625c8bf50b4", "committedDate": "2020-07-10T06:30:36Z", "message": "Fix potential issue caused by unhandled exception of jnifuse\n\n\n\npr-link: Alluxio/alluxio#11715\nchange-id: cid-2591b2a5ea17d842ed31cda5f47f73a0f509d22a"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4db468dcb4786e99a7237335333dc624e854ba1", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/e4db468dcb4786e99a7237335333dc624e854ba1", "committedDate": "2020-07-10T18:48:41Z", "message": "[DOCFIX] Update Cluster doc\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11739\norig-commit: Alluxio/alluxio@14f1fc34a2713e0e2b9ca7237188ceae2affae0c\norig-commit-author: Shouwei Chen <40501329+HelloHorizon@users.noreply.github.com>\n\npr-link: Alluxio/alluxio#11748\nchange-id: cid-32f901a053f6c2fbf256a7d3b5465df2c2d92c54"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4020d8428200dcc84a7be249395c90077183cc4", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/f4020d8428200dcc84a7be249395c90077183cc4", "committedDate": "2020-07-10T21:14:13Z", "message": "Remove outdated CN docs to be consistent with EN\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11749\norig-commit: Alluxio/alluxio@9cb40db8171c02399fb656525b9caf13eb3f62fc\norig-commit-author: Bin Fan <fanbin103@gmail.com>\n\npr-link: Alluxio/alluxio#11751\nchange-id: cid-92d7559ac7f24dcf593bcb4a983ea50e14a1c09e"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "759226bddec4ea412b8a9efa7751809a3f9c1f88", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/759226bddec4ea412b8a9efa7751809a3f9c1f88", "committedDate": "2020-07-11T01:16:34Z", "message": "Fix Object UFS edge case again\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11750\norig-commit: Alluxio/alluxio@fec5421c6a97cd2e67d12424df35fbf8eb27ce14\norig-commit-author: Bradley Yoo <bradleyyoo@gmail.com>\n\npr-link: Alluxio/alluxio#11755\nchange-id: cid-a27a107dfb797153c3539d826013e41c0b0a0dd7"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af773bd5e10ff0ff7dcdd93309872d999f4ce913", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/af773bd5e10ff0ff7dcdd93309872d999f4ce913", "committedDate": "2020-07-11T01:19:32Z", "message": "Fix block location iteration with rocksdb\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11752\norig-commit: Alluxio/alluxio@0aff93892aa8825a77d2d45c8f90566a01e11b9c\norig-commit-author: Gene Pang <gene.pang@gmail.com>\n\npr-link: Alluxio/alluxio#11757\nchange-id: cid-5c7c45fa69a5c0f0aa078d86baf229c4256d6a50"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e63ac9762e22a11915692871715a6afabfdb00cb", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/e63ac9762e22a11915692871715a6afabfdb00cb", "committedDate": "2020-07-11T04:03:37Z", "message": "Simplify UfsStatus handling in loadMetadata\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11746\norig-commit: Alluxio/alluxio@f6f265cdc41013b0c2617bdaba67a6ae6eeb572b\norig-commit-author: Zac Blanco <zac@alluxio.com>\n\npr-link: Alluxio/alluxio#11754\nchange-id: cid-9a9def3d491f9e193aa3e3477403b3886498f4fd"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adff61ce4337ae162aef078c7d1e5abbf0b4078f", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/adff61ce4337ae162aef078c7d1e5abbf0b4078f", "committedDate": "2020-07-14T18:41:32Z", "message": "Add null checks for glueUDB\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11763\norig-commit: Alluxio/alluxio@406ffa156d4b6311b313f33101637cd9fc4c9d54\norig-commit-author: Shouwei Chen <40501329+HelloHorizon@users.noreply.github.com>\n\npr-link: Alluxio/alluxio#11766\nchange-id: cid-238d8b1bc74ff10ecff34e5fffa017ef5c3b27ad"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "826a7804abda27d7947165a09615ab679806f029", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/826a7804abda27d7947165a09615ab679806f029", "committedDate": "2020-07-16T17:19:21Z", "message": "Add alluxio.hadoop.LocalCacheFileSystem.java\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11567\norig-commit: Alluxio/alluxio@e0f44c3f1df22f4ea1b24ee4e0b9ed7cc8f24873\norig-commit-author: Bin Fan <fanbin103@gmail.com>\n\npr-link: Alluxio/alluxio#11767\nchange-id: cid-8d6f476d6999151c151413a22b6b4850e4068dc0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c43f20e592a58db97242842603e8e0bb83b3706", "author": {"user": {"login": "ZacBlanco", "name": "Zac Blanco"}}, "url": "https://github.com/Alluxio/alluxio/commit/8c43f20e592a58db97242842603e8e0bb83b3706", "committedDate": "2020-07-17T21:37:33Z", "message": "Update reference documentation for 2.3\n\nFixes #11770\n\npr-link: Alluxio/alluxio#11773\nchange-id: cid-c9a9d0ed0550fd9444edf7a422da8d5e220b85ff"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29a480d9a7d2b32cb14efc8bec81ff0cd5643b12", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/29a480d9a7d2b32cb14efc8bec81ff0cd5643b12", "committedDate": "2020-07-20T21:41:58Z", "message": "Add hms option names to core/common module\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11771\norig-commit: Alluxio/alluxio@7d00453188b15d7e4eaec7213efea17e3bcc900c\norig-commit-author: LuQQiu <luqiujob@gmail.com>\n\npr-link: Alluxio/alluxio#11787\nchange-id: cid-85e62d515952e54a02b0636429afd560757d85b1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f1fe3e748484c9b76a2444a740b95e9f0a3a5a2", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/2f1fe3e748484c9b76a2444a740b95e9f0a3a5a2", "committedDate": "2020-07-21T05:49:59Z", "message": "Update LocalCacheFileSystem\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11789\norig-commit: Alluxio/alluxio@9d02d5fcf3cbc3da8414e3959422b1169611ee35\norig-commit-author: Bin Fan <fanbin103@gmail.com>\n\npr-link: Alluxio/alluxio#11791\nchange-id: cid-05ecec06133f9edc878e764c889ca9a160e4da6d"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "822c508008783ba080a796d9c320716295c9f23e", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/822c508008783ba080a796d9c320716295c9f23e", "committedDate": "2020-07-22T21:56:01Z", "message": "Add chinese version of Documentation-Conventions.md\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11740\norig-commit: Alluxio/alluxio@988e9cd377645d68ec6737abddc109a9bef4b099\norig-commit-author: thanosaw <56616222+thanosaw@users.noreply.github.com>\n\npr-link: Alluxio/alluxio#11810\nchange-id: cid-87754f7697a4baa671bb1ee6d90cef65acea7123"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6945af272e8cd10e8ad94b785f4a01da070886c8", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/6945af272e8cd10e8ad94b785f4a01da070886c8", "committedDate": "2020-07-23T04:14:13Z", "message": "[DOCFIX] Update Chinese Deploy Docs Requirements, Local\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11780\norig-commit: Alluxio/alluxio@c1ea6f3c14812930f014f830d44a79b94574c23e\norig-commit-author: thanosaw <56616222+thanosaw@users.noreply.github.com>\n\npr-link: Alluxio/alluxio#11812\nchange-id: cid-7a3f525d3f4a373f8ff9c39fa210d63191472818"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5b4517fd58791a9f484e81d02cda383d1879db6", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/d5b4517fd58791a9f484e81d02cda383d1879db6", "committedDate": "2020-07-23T06:27:09Z", "message": "Merge branch 'branch-2.3' of github.com:Alluxio/alluxio into branch-2.3-fuse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "824d32c1c4c9f7069bd2ec22a9c3e6aab3042c73", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/824d32c1c4c9f7069bd2ec22a9c3e6aab3042c73", "committedDate": "2020-07-24T06:33:03Z", "message": "[DOCFIX] Update Chinese version of Contributor-Getting-Started.md\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11774\norig-commit: Alluxio/alluxio@db3e8ebf6bbee8ded8fdde531c1391e7661e6fbb\norig-commit-author: thanosaw <56616222+thanosaw@users.noreply.github.com>\n\npr-link: Alluxio/alluxio#11809\nchange-id: cid-86a53942155582319cc3b545122dafb3039d777a"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c249eb3d296cb90a7be365060fc6548d28f069ff", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/c249eb3d296cb90a7be365060fc6548d28f069ff", "committedDate": "2020-07-24T21:18:43Z", "message": "[DOCFIX] Fix broken link in cn Contributor Getting Started\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11819\norig-commit: Alluxio/alluxio@3ffa23042a71a6694a36a49d4de53e6ef7bb57bf\norig-commit-author: Rico Chiu <Xenorith@users.noreply.github.com>\n\npr-link: Alluxio/alluxio#11824\nchange-id: cid-213512373ea133eb64f09f315a2054d711ad74f9"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbc68bc48e4b4e93273ebf7fd263ff4fa3e88bf9", "author": {"user": {"login": "alluxio-bot", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/dbc68bc48e4b4e93273ebf7fd263ff4fa3e88bf9", "committedDate": "2020-07-24T22:05:45Z", "message": "Fix a bug in LocalcacheFileSystem\n\nCherry-pick of existing commit.\norig-pr: Alluxio/alluxio#11820\norig-commit: Alluxio/alluxio@94002d90deff7d40ed094596d97786f9f94a37b7\norig-commit-author: Bin Fan <fanbin103@gmail.com>\n\npr-link: Alluxio/alluxio#11822\nchange-id: cid-1c659d6eb3a2e34665bcd2b9818682fbb84495cf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f73191c56a89103c1052c445be5af509d73e90c", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/3f73191c56a89103c1052c445be5af509d73e90c", "committedDate": "2020-07-27T01:27:43Z", "message": "Revert \"Workaround: Fix issue of counting MemPageStore size\"\n\nThis reverts commit a076d83d36fc7f682732146c9f34997091ecca51."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d66c87491d7abcfbb64eeafdad6922813ebb80e", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/7d66c87491d7abcfbb64eeafdad6922813ebb80e", "committedDate": "2020-07-27T01:27:44Z", "message": "Revert \"Implement MemoryPageStore\"\n\nThis reverts commit 8a10bf1986dbf697b5a291e610080123aa500c91."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3322, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}