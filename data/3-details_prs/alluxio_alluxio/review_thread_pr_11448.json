{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MzQ3Nzk5", "number": 11448, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwODo0NToyNFrOD9TFJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo1NDozNFrOD9UthA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjAyMzQzOnYy", "diffSide": "LEFT", "path": "docs/en/ufs/S3.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwODo0NToyNFrOGWtTig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwODo0NToyNFrOGWtTig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ2NDEzOA==", "bodyText": "totally irrelevant for this doc. I Don't understand why it was put here initally.", "url": "https://github.com/Alluxio/alluxio/pull/11448#discussion_r426464138", "createdAt": "2020-05-18T08:45:24Z", "author": {"login": "apc999"}, "path": "docs/en/ufs/S3.md", "diffHunk": "@@ -162,36 +162,6 @@ alluxio.underfs.s3.proxy.port=<PROXY_PORT>\n \n `<PROXY_HOST>` and `<PROXY_PORT>` should be replaced the host and port for your proxy.\n \n-### Configuring Application Dependency", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6f865a81615718f90046b4c8a37659c4e5e02e1"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjI0MjA3OnYy", "diffSide": "RIGHT", "path": "docs/en/ufs/S3.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo0MjowMFrOGWvdCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxOTozNToyM1rOGXvp_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ5OTMzNw==", "bodyText": "The Alluxio master loads the ACL information of object and bucket upon initially requesting for their metadata.\nunless you have more specific details about the translation, i dont think the second part of the sentence is necessary since you already said that the master loads the info in the first half and stated that alluxio makes a best effort to inherit permissions in the previous sentence", "url": "https://github.com/Alluxio/alluxio/pull/11448#discussion_r426499337", "createdAt": "2020-05-18T09:42:00Z", "author": {"login": "Xenorith"}, "path": "docs/en/ufs/S3.md", "diffHunk": "@@ -279,44 +249,92 @@ alluxio.underfs.s3.upload.threads.max=80\n alluxio.underfs.object.store.service.threads=80\n ```\n \n-## S3 Access Control\n+## Identity and Access Control of S3 Objects\n+\n+[S3 identity and access management](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html)\n+is very different from the security model of a UNIX-like file system\n+(e.g., S3 ACL has no groups and no directory-level setting).\n+Alluxio makes a best effort to inherit file owner and permission bits from S3 ACL information.\n+Alluxio master loads the ACL information of objects and buckets on the first time when their", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd7180da913deadac92aaff6d087e7851e9bf4d"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU1MTIyOA==", "bodyText": "agree , second part is unnecessary details in context here", "url": "https://github.com/Alluxio/alluxio/pull/11448#discussion_r427551228", "createdAt": "2020-05-19T19:35:23Z", "author": {"login": "apc999"}, "path": "docs/en/ufs/S3.md", "diffHunk": "@@ -279,44 +249,92 @@ alluxio.underfs.s3.upload.threads.max=80\n alluxio.underfs.object.store.service.threads=80\n ```\n \n-## S3 Access Control\n+## Identity and Access Control of S3 Objects\n+\n+[S3 identity and access management](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html)\n+is very different from the security model of a UNIX-like file system\n+(e.g., S3 ACL has no groups and no directory-level setting).\n+Alluxio makes a best effort to inherit file owner and permission bits from S3 ACL information.\n+Alluxio master loads the ACL information of objects and buckets on the first time when their", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ5OTMzNw=="}, "originalCommit": {"oid": "3bd7180da913deadac92aaff6d087e7851e9bf4d"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjI0NTg0OnYy", "diffSide": "RIGHT", "path": "docs/en/ufs/S3.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo0MzowMVrOGWvfZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxOTozODozMlrOGXvwoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ5OTk0Mg==", "bodyText": "You are using the correct AWS credentials, defined in ???", "url": "https://github.com/Alluxio/alluxio/pull/11448#discussion_r426499942", "createdAt": "2020-05-18T09:43:01Z", "author": {"login": "Xenorith"}, "path": "docs/en/ufs/S3.md", "diffHunk": "@@ -279,44 +249,92 @@ alluxio.underfs.s3.upload.threads.max=80\n alluxio.underfs.object.store.service.threads=80\n ```\n \n-## S3 Access Control\n+## Identity and Access Control of S3 Objects\n+\n+[S3 identity and access management](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html)\n+is very different from the security model of a UNIX-like file system\n+(e.g., S3 ACL has no groups and no directory-level setting).\n+Alluxio makes a best effort to inherit file owner and permission bits from S3 ACL information.\n+Alluxio master loads the ACL information of objects and buckets on the first time when their\n+metadata is requested, then translates it to Alluxio permission and store the metadata information\n+as a part of Alluxio filesystem metadata.\n+\n+### Why is 403 Access Denied Error Returned\n+\n+The S3 credentials set in Alluxio configuration corresponds to an AWS user.\n+If this user does not have the required permissions to access an S3 bucket or object,\n+a 403 permission denied error will be returned.\n \n-If Alluxio security is enabled, Alluxio enforces the access control inherited from underlying object\n-storage.\n+If you see 403 error in Alluxio server log when accessing a S3 service, you should double check\n+1. you are using the correct credentials", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd7180da913deadac92aaff6d087e7851e9bf4d"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU1MjkyOA==", "bodyText": "added a link", "url": "https://github.com/Alluxio/alluxio/pull/11448#discussion_r427552928", "createdAt": "2020-05-19T19:38:32Z", "author": {"login": "apc999"}, "path": "docs/en/ufs/S3.md", "diffHunk": "@@ -279,44 +249,92 @@ alluxio.underfs.s3.upload.threads.max=80\n alluxio.underfs.object.store.service.threads=80\n ```\n \n-## S3 Access Control\n+## Identity and Access Control of S3 Objects\n+\n+[S3 identity and access management](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html)\n+is very different from the security model of a UNIX-like file system\n+(e.g., S3 ACL has no groups and no directory-level setting).\n+Alluxio makes a best effort to inherit file owner and permission bits from S3 ACL information.\n+Alluxio master loads the ACL information of objects and buckets on the first time when their\n+metadata is requested, then translates it to Alluxio permission and store the metadata information\n+as a part of Alluxio filesystem metadata.\n+\n+### Why is 403 Access Denied Error Returned\n+\n+The S3 credentials set in Alluxio configuration corresponds to an AWS user.\n+If this user does not have the required permissions to access an S3 bucket or object,\n+a 403 permission denied error will be returned.\n \n-If Alluxio security is enabled, Alluxio enforces the access control inherited from underlying object\n-storage.\n+If you see 403 error in Alluxio server log when accessing a S3 service, you should double check\n+1. you are using the correct credentials", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ5OTk0Mg=="}, "originalCommit": {"oid": "3bd7180da913deadac92aaff6d087e7851e9bf4d"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjI2MDY1OnYy", "diffSide": "RIGHT", "path": "docs/en/ufs/S3.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo0NzowMFrOGWvoxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo0NzowMFrOGWvoxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwMjM0Mg==", "bodyText": "Your AWS user has permissions to access the buckets and objects mounted to Alluxio.", "url": "https://github.com/Alluxio/alluxio/pull/11448#discussion_r426502342", "createdAt": "2020-05-18T09:47:00Z", "author": {"login": "Xenorith"}, "path": "docs/en/ufs/S3.md", "diffHunk": "@@ -279,44 +249,92 @@ alluxio.underfs.s3.upload.threads.max=80\n alluxio.underfs.object.store.service.threads=80\n ```\n \n-## S3 Access Control\n+## Identity and Access Control of S3 Objects\n+\n+[S3 identity and access management](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html)\n+is very different from the security model of a UNIX-like file system\n+(e.g., S3 ACL has no groups and no directory-level setting).\n+Alluxio makes a best effort to inherit file owner and permission bits from S3 ACL information.\n+Alluxio master loads the ACL information of objects and buckets on the first time when their\n+metadata is requested, then translates it to Alluxio permission and store the metadata information\n+as a part of Alluxio filesystem metadata.\n+\n+### Why is 403 Access Denied Error Returned\n+\n+The S3 credentials set in Alluxio configuration corresponds to an AWS user.\n+If this user does not have the required permissions to access an S3 bucket or object,\n+a 403 permission denied error will be returned.\n \n-If Alluxio security is enabled, Alluxio enforces the access control inherited from underlying object\n-storage.\n+If you see 403 error in Alluxio server log when accessing a S3 service, you should double check\n+1. you are using the correct credentials\n+1. your AWS user does have the permission to access the buckets and objects mounted to Alluxio", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd7180da913deadac92aaff6d087e7851e9bf4d"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjI2Njk2OnYy", "diffSide": "RIGHT", "path": "docs/en/ufs/S3.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo0ODoyNlrOGWvsqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo0ODoyNlrOGWvsqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwMzMzOA==", "bodyText": "trouble-shooting -> troubleshooting", "url": "https://github.com/Alluxio/alluxio/pull/11448#discussion_r426503338", "createdAt": "2020-05-18T09:48:26Z", "author": {"login": "Xenorith"}, "path": "docs/en/ufs/S3.md", "diffHunk": "@@ -279,44 +249,92 @@ alluxio.underfs.s3.upload.threads.max=80\n alluxio.underfs.object.store.service.threads=80\n ```\n \n-## S3 Access Control\n+## Identity and Access Control of S3 Objects\n+\n+[S3 identity and access management](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html)\n+is very different from the security model of a UNIX-like file system\n+(e.g., S3 ACL has no groups and no directory-level setting).\n+Alluxio makes a best effort to inherit file owner and permission bits from S3 ACL information.\n+Alluxio master loads the ACL information of objects and buckets on the first time when their\n+metadata is requested, then translates it to Alluxio permission and store the metadata information\n+as a part of Alluxio filesystem metadata.\n+\n+### Why is 403 Access Denied Error Returned\n+\n+The S3 credentials set in Alluxio configuration corresponds to an AWS user.\n+If this user does not have the required permissions to access an S3 bucket or object,\n+a 403 permission denied error will be returned.\n \n-If Alluxio security is enabled, Alluxio enforces the access control inherited from underlying object\n-storage.\n+If you see 403 error in Alluxio server log when accessing a S3 service, you should double check\n+1. you are using the correct credentials\n+1. your AWS user does have the permission to access the buckets and objects mounted to Alluxio\n \n-The S3 credentials specified in Alluxio config represents a S3 user. S3 service backend checks the\n-user permission to the bucket and the object for access control. If the given S3 user does not have\n-the access permissions to the specified bucket, a permission denied error will be thrown. When\n-Alluxio security is enabled, Alluxio loads the bucket ACL to Alluxio permission on the first time\n-when the metadata is loaded to Alluxio namespace.\n+Read more [trouble-shooting guidance](https://aws.amazon.com/premiumsupport/knowledge-center/s3-troubleshoot-403/)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd7180da913deadac92aaff6d087e7851e9bf4d"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjI2OTI3OnYy", "diffSide": "RIGHT", "path": "docs/en/ufs/S3.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo0OTowN1rOGWvuMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo0OTowN1rOGWvuMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwMzczMA==", "bodyText": "Optionally, the property", "url": "https://github.com/Alluxio/alluxio/pull/11448#discussion_r426503730", "createdAt": "2020-05-18T09:49:07Z", "author": {"login": "Xenorith"}, "path": "docs/en/ufs/S3.md", "diffHunk": "@@ -279,44 +249,92 @@ alluxio.underfs.s3.upload.threads.max=80\n alluxio.underfs.object.store.service.threads=80\n ```\n \n-## S3 Access Control\n+## Identity and Access Control of S3 Objects\n+\n+[S3 identity and access management](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html)\n+is very different from the security model of a UNIX-like file system\n+(e.g., S3 ACL has no groups and no directory-level setting).\n+Alluxio makes a best effort to inherit file owner and permission bits from S3 ACL information.\n+Alluxio master loads the ACL information of objects and buckets on the first time when their\n+metadata is requested, then translates it to Alluxio permission and store the metadata information\n+as a part of Alluxio filesystem metadata.\n+\n+### Why is 403 Access Denied Error Returned\n+\n+The S3 credentials set in Alluxio configuration corresponds to an AWS user.\n+If this user does not have the required permissions to access an S3 bucket or object,\n+a 403 permission denied error will be returned.\n \n-If Alluxio security is enabled, Alluxio enforces the access control inherited from underlying object\n-storage.\n+If you see 403 error in Alluxio server log when accessing a S3 service, you should double check\n+1. you are using the correct credentials\n+1. your AWS user does have the permission to access the buckets and objects mounted to Alluxio\n \n-The S3 credentials specified in Alluxio config represents a S3 user. S3 service backend checks the\n-user permission to the bucket and the object for access control. If the given S3 user does not have\n-the access permissions to the specified bucket, a permission denied error will be thrown. When\n-Alluxio security is enabled, Alluxio loads the bucket ACL to Alluxio permission on the first time\n-when the metadata is loaded to Alluxio namespace.\n+Read more [trouble-shooting guidance](https://aws.amazon.com/premiumsupport/knowledge-center/s3-troubleshoot-403/)\n+for 403 error from AWS.\n \n-### Mapping from S3 user to Alluxio file owner\n+### File Owner and Group\n \n-By default, Alluxio tries to extract the S3 user display name from the S3 credentials. Optionally,\n+Alluxio file system infers the file owner from the metadata of S3 buckets and objects.\n+Since there is no group in S3 ACL, the owner is reused as the group.\n+\n+By default, Alluxio extracts the display name of the AWS user.\n+In case this display name is not available,\n+Alluxio sets file owner to this AWS user's [canonical user ID](https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html).\n+\n+This canonical user id is typically a long string like `79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be`,\n+often inconvenient to read and use in practice.\n+Optionally, property", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd7180da913deadac92aaff6d087e7851e9bf4d"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjI3MjQ4OnYy", "diffSide": "RIGHT", "path": "docs/en/ufs/S3.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo0OTo1N1rOGWvwQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo0OTo1N1rOGWvwQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNDI1OA==", "bodyText": "owned by the user", "url": "https://github.com/Alluxio/alluxio/pull/11448#discussion_r426504258", "createdAt": "2020-05-18T09:49:57Z", "author": {"login": "Xenorith"}, "path": "docs/en/ufs/S3.md", "diffHunk": "@@ -279,44 +249,92 @@ alluxio.underfs.s3.upload.threads.max=80\n alluxio.underfs.object.store.service.threads=80\n ```\n \n-## S3 Access Control\n+## Identity and Access Control of S3 Objects\n+\n+[S3 identity and access management](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html)\n+is very different from the security model of a UNIX-like file system\n+(e.g., S3 ACL has no groups and no directory-level setting).\n+Alluxio makes a best effort to inherit file owner and permission bits from S3 ACL information.\n+Alluxio master loads the ACL information of objects and buckets on the first time when their\n+metadata is requested, then translates it to Alluxio permission and store the metadata information\n+as a part of Alluxio filesystem metadata.\n+\n+### Why is 403 Access Denied Error Returned\n+\n+The S3 credentials set in Alluxio configuration corresponds to an AWS user.\n+If this user does not have the required permissions to access an S3 bucket or object,\n+a 403 permission denied error will be returned.\n \n-If Alluxio security is enabled, Alluxio enforces the access control inherited from underlying object\n-storage.\n+If you see 403 error in Alluxio server log when accessing a S3 service, you should double check\n+1. you are using the correct credentials\n+1. your AWS user does have the permission to access the buckets and objects mounted to Alluxio\n \n-The S3 credentials specified in Alluxio config represents a S3 user. S3 service backend checks the\n-user permission to the bucket and the object for access control. If the given S3 user does not have\n-the access permissions to the specified bucket, a permission denied error will be thrown. When\n-Alluxio security is enabled, Alluxio loads the bucket ACL to Alluxio permission on the first time\n-when the metadata is loaded to Alluxio namespace.\n+Read more [trouble-shooting guidance](https://aws.amazon.com/premiumsupport/knowledge-center/s3-troubleshoot-403/)\n+for 403 error from AWS.\n \n-### Mapping from S3 user to Alluxio file owner\n+### File Owner and Group\n \n-By default, Alluxio tries to extract the S3 user display name from the S3 credentials. Optionally,\n+Alluxio file system infers the file owner from the metadata of S3 buckets and objects.\n+Since there is no group in S3 ACL, the owner is reused as the group.\n+\n+By default, Alluxio extracts the display name of the AWS user.\n+In case this display name is not available,\n+Alluxio sets file owner to this AWS user's [canonical user ID](https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html).\n+\n+This canonical user id is typically a long string like `79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be`,\n+often inconvenient to read and use in practice.\n+Optionally, property\n `alluxio.underfs.s3.owner.id.to.username.mapping` can be used to specify a preset S3 canonical id to\n-Alluxio username static mapping, in the format \"id1=user1;id2=user2\".  The AWS S3 canonical ID can\n-be found at the console `https://console.aws.amazon.com/iam/home?#/security_credentials`.\n-Please expand the \"Account Identifiers\" tab and refer to \"Canonical User ID\".\n+Alluxio username static mapping, in the format \"id1=user1;id2=user2\".\n+For example, edit `alluxio-site.properties` to include\n+\n+```properties\n+alluxio.underfs.s3.owner.id.to.username.mapping=\\\n+79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be=john\n+```\n+\n+This configuration helps Alluxio recognize all objects owned by this AWS account as owned by user `john` in Alluxio namespace.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd7180da913deadac92aaff6d087e7851e9bf4d"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjI3MzY3OnYy", "diffSide": "RIGHT", "path": "docs/en/ufs/S3.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo1MDoxNlrOGWvxCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo1MDoxNlrOGWvxCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNDQ1Nw==", "bodyText": "To find the AWS S3 canonical ID of your account,", "url": "https://github.com/Alluxio/alluxio/pull/11448#discussion_r426504457", "createdAt": "2020-05-18T09:50:16Z", "author": {"login": "Xenorith"}, "path": "docs/en/ufs/S3.md", "diffHunk": "@@ -279,44 +249,92 @@ alluxio.underfs.s3.upload.threads.max=80\n alluxio.underfs.object.store.service.threads=80\n ```\n \n-## S3 Access Control\n+## Identity and Access Control of S3 Objects\n+\n+[S3 identity and access management](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html)\n+is very different from the security model of a UNIX-like file system\n+(e.g., S3 ACL has no groups and no directory-level setting).\n+Alluxio makes a best effort to inherit file owner and permission bits from S3 ACL information.\n+Alluxio master loads the ACL information of objects and buckets on the first time when their\n+metadata is requested, then translates it to Alluxio permission and store the metadata information\n+as a part of Alluxio filesystem metadata.\n+\n+### Why is 403 Access Denied Error Returned\n+\n+The S3 credentials set in Alluxio configuration corresponds to an AWS user.\n+If this user does not have the required permissions to access an S3 bucket or object,\n+a 403 permission denied error will be returned.\n \n-If Alluxio security is enabled, Alluxio enforces the access control inherited from underlying object\n-storage.\n+If you see 403 error in Alluxio server log when accessing a S3 service, you should double check\n+1. you are using the correct credentials\n+1. your AWS user does have the permission to access the buckets and objects mounted to Alluxio\n \n-The S3 credentials specified in Alluxio config represents a S3 user. S3 service backend checks the\n-user permission to the bucket and the object for access control. If the given S3 user does not have\n-the access permissions to the specified bucket, a permission denied error will be thrown. When\n-Alluxio security is enabled, Alluxio loads the bucket ACL to Alluxio permission on the first time\n-when the metadata is loaded to Alluxio namespace.\n+Read more [trouble-shooting guidance](https://aws.amazon.com/premiumsupport/knowledge-center/s3-troubleshoot-403/)\n+for 403 error from AWS.\n \n-### Mapping from S3 user to Alluxio file owner\n+### File Owner and Group\n \n-By default, Alluxio tries to extract the S3 user display name from the S3 credentials. Optionally,\n+Alluxio file system infers the file owner from the metadata of S3 buckets and objects.\n+Since there is no group in S3 ACL, the owner is reused as the group.\n+\n+By default, Alluxio extracts the display name of the AWS user.\n+In case this display name is not available,\n+Alluxio sets file owner to this AWS user's [canonical user ID](https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html).\n+\n+This canonical user id is typically a long string like `79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be`,\n+often inconvenient to read and use in practice.\n+Optionally, property\n `alluxio.underfs.s3.owner.id.to.username.mapping` can be used to specify a preset S3 canonical id to\n-Alluxio username static mapping, in the format \"id1=user1;id2=user2\".  The AWS S3 canonical ID can\n-be found at the console `https://console.aws.amazon.com/iam/home?#/security_credentials`.\n-Please expand the \"Account Identifiers\" tab and refer to \"Canonical User ID\".\n+Alluxio username static mapping, in the format \"id1=user1;id2=user2\".\n+For example, edit `alluxio-site.properties` to include\n+\n+```properties\n+alluxio.underfs.s3.owner.id.to.username.mapping=\\\n+79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be=john\n+```\n+\n+This configuration helps Alluxio recognize all objects owned by this AWS account as owned by user `john` in Alluxio namespace.\n+To find out the AWS S3 canonical ID,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd7180da913deadac92aaff6d087e7851e9bf4d"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjI3ODY2OnYy", "diffSide": "RIGHT", "path": "docs/en/ufs/S3.md", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo1MTozMFrOGWv0MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo1MDozN1rOGXyH5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNTI2NQ==", "bodyText": "my own question: does alluxio ignore if there are object specific permissions in the bucket? because i can set a up bucket with no permissions and selectively give access to certain object prefixes within the bucket", "url": "https://github.com/Alluxio/alluxio/pull/11448#discussion_r426505265", "createdAt": "2020-05-18T09:51:30Z", "author": {"login": "Xenorith"}, "path": "docs/en/ufs/S3.md", "diffHunk": "@@ -279,44 +249,92 @@ alluxio.underfs.s3.upload.threads.max=80\n alluxio.underfs.object.store.service.threads=80\n ```\n \n-## S3 Access Control\n+## Identity and Access Control of S3 Objects\n+\n+[S3 identity and access management](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html)\n+is very different from the security model of a UNIX-like file system\n+(e.g., S3 ACL has no groups and no directory-level setting).\n+Alluxio makes a best effort to inherit file owner and permission bits from S3 ACL information.\n+Alluxio master loads the ACL information of objects and buckets on the first time when their\n+metadata is requested, then translates it to Alluxio permission and store the metadata information\n+as a part of Alluxio filesystem metadata.\n+\n+### Why is 403 Access Denied Error Returned\n+\n+The S3 credentials set in Alluxio configuration corresponds to an AWS user.\n+If this user does not have the required permissions to access an S3 bucket or object,\n+a 403 permission denied error will be returned.\n \n-If Alluxio security is enabled, Alluxio enforces the access control inherited from underlying object\n-storage.\n+If you see 403 error in Alluxio server log when accessing a S3 service, you should double check\n+1. you are using the correct credentials\n+1. your AWS user does have the permission to access the buckets and objects mounted to Alluxio\n \n-The S3 credentials specified in Alluxio config represents a S3 user. S3 service backend checks the\n-user permission to the bucket and the object for access control. If the given S3 user does not have\n-the access permissions to the specified bucket, a permission denied error will be thrown. When\n-Alluxio security is enabled, Alluxio loads the bucket ACL to Alluxio permission on the first time\n-when the metadata is loaded to Alluxio namespace.\n+Read more [trouble-shooting guidance](https://aws.amazon.com/premiumsupport/knowledge-center/s3-troubleshoot-403/)\n+for 403 error from AWS.\n \n-### Mapping from S3 user to Alluxio file owner\n+### File Owner and Group\n \n-By default, Alluxio tries to extract the S3 user display name from the S3 credentials. Optionally,\n+Alluxio file system infers the file owner from the metadata of S3 buckets and objects.\n+Since there is no group in S3 ACL, the owner is reused as the group.\n+\n+By default, Alluxio extracts the display name of the AWS user.\n+In case this display name is not available,\n+Alluxio sets file owner to this AWS user's [canonical user ID](https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html).\n+\n+This canonical user id is typically a long string like `79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be`,\n+often inconvenient to read and use in practice.\n+Optionally, property\n `alluxio.underfs.s3.owner.id.to.username.mapping` can be used to specify a preset S3 canonical id to\n-Alluxio username static mapping, in the format \"id1=user1;id2=user2\".  The AWS S3 canonical ID can\n-be found at the console `https://console.aws.amazon.com/iam/home?#/security_credentials`.\n-Please expand the \"Account Identifiers\" tab and refer to \"Canonical User ID\".\n+Alluxio username static mapping, in the format \"id1=user1;id2=user2\".\n+For example, edit `alluxio-site.properties` to include\n+\n+```properties\n+alluxio.underfs.s3.owner.id.to.username.mapping=\\\n+79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be=john\n+```\n+\n+This configuration helps Alluxio recognize all objects owned by this AWS account as owned by user `john` in Alluxio namespace.\n+To find out the AWS S3 canonical ID,\n+check the console `https://console.aws.amazon.com/iam/home?#/security_credentials`,\n+expand the \"Account Identifiers\" tab and refer to \"Canonical User ID\".\n \n-### Mapping from S3 ACL to Alluxio permission\n+### File Permission\n \n Alluxio checks the S3 bucket read/write ACLs to determine the owner's permissions to a Alluxio\n-file. For example, if the S3 user has read-only access to the underlying bucket, the mounted\n-directory and files will be set with 0500 permissions. If the S3 user has full access to the underlying bucket,\n-the mounted directory and files will be set with 0700 permissions.\n+file.\n+For example, if the AWS user has read-only access to the mounted bucket, the mounted\n+directory and files will be set with `0500` permissions.\n+If the AWS user has full access to the underlying bucket,\n+the mounted directory and files will be set with `0700` permissions.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd7180da913deadac92aaff6d087e7851e9bf4d"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU1OTU0MQ==", "bodyText": "based on the source code, it looks like so. double checking it with calvin who wrote it", "url": "https://github.com/Alluxio/alluxio/pull/11448#discussion_r427559541", "createdAt": "2020-05-19T19:50:45Z", "author": {"login": "apc999"}, "path": "docs/en/ufs/S3.md", "diffHunk": "@@ -279,44 +249,92 @@ alluxio.underfs.s3.upload.threads.max=80\n alluxio.underfs.object.store.service.threads=80\n ```\n \n-## S3 Access Control\n+## Identity and Access Control of S3 Objects\n+\n+[S3 identity and access management](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html)\n+is very different from the security model of a UNIX-like file system\n+(e.g., S3 ACL has no groups and no directory-level setting).\n+Alluxio makes a best effort to inherit file owner and permission bits from S3 ACL information.\n+Alluxio master loads the ACL information of objects and buckets on the first time when their\n+metadata is requested, then translates it to Alluxio permission and store the metadata information\n+as a part of Alluxio filesystem metadata.\n+\n+### Why is 403 Access Denied Error Returned\n+\n+The S3 credentials set in Alluxio configuration corresponds to an AWS user.\n+If this user does not have the required permissions to access an S3 bucket or object,\n+a 403 permission denied error will be returned.\n \n-If Alluxio security is enabled, Alluxio enforces the access control inherited from underlying object\n-storage.\n+If you see 403 error in Alluxio server log when accessing a S3 service, you should double check\n+1. you are using the correct credentials\n+1. your AWS user does have the permission to access the buckets and objects mounted to Alluxio\n \n-The S3 credentials specified in Alluxio config represents a S3 user. S3 service backend checks the\n-user permission to the bucket and the object for access control. If the given S3 user does not have\n-the access permissions to the specified bucket, a permission denied error will be thrown. When\n-Alluxio security is enabled, Alluxio loads the bucket ACL to Alluxio permission on the first time\n-when the metadata is loaded to Alluxio namespace.\n+Read more [trouble-shooting guidance](https://aws.amazon.com/premiumsupport/knowledge-center/s3-troubleshoot-403/)\n+for 403 error from AWS.\n \n-### Mapping from S3 user to Alluxio file owner\n+### File Owner and Group\n \n-By default, Alluxio tries to extract the S3 user display name from the S3 credentials. Optionally,\n+Alluxio file system infers the file owner from the metadata of S3 buckets and objects.\n+Since there is no group in S3 ACL, the owner is reused as the group.\n+\n+By default, Alluxio extracts the display name of the AWS user.\n+In case this display name is not available,\n+Alluxio sets file owner to this AWS user's [canonical user ID](https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html).\n+\n+This canonical user id is typically a long string like `79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be`,\n+often inconvenient to read and use in practice.\n+Optionally, property\n `alluxio.underfs.s3.owner.id.to.username.mapping` can be used to specify a preset S3 canonical id to\n-Alluxio username static mapping, in the format \"id1=user1;id2=user2\".  The AWS S3 canonical ID can\n-be found at the console `https://console.aws.amazon.com/iam/home?#/security_credentials`.\n-Please expand the \"Account Identifiers\" tab and refer to \"Canonical User ID\".\n+Alluxio username static mapping, in the format \"id1=user1;id2=user2\".\n+For example, edit `alluxio-site.properties` to include\n+\n+```properties\n+alluxio.underfs.s3.owner.id.to.username.mapping=\\\n+79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be=john\n+```\n+\n+This configuration helps Alluxio recognize all objects owned by this AWS account as owned by user `john` in Alluxio namespace.\n+To find out the AWS S3 canonical ID,\n+check the console `https://console.aws.amazon.com/iam/home?#/security_credentials`,\n+expand the \"Account Identifiers\" tab and refer to \"Canonical User ID\".\n \n-### Mapping from S3 ACL to Alluxio permission\n+### File Permission\n \n Alluxio checks the S3 bucket read/write ACLs to determine the owner's permissions to a Alluxio\n-file. For example, if the S3 user has read-only access to the underlying bucket, the mounted\n-directory and files will be set with 0500 permissions. If the S3 user has full access to the underlying bucket,\n-the mounted directory and files will be set with 0700 permissions.\n+file.\n+For example, if the AWS user has read-only access to the mounted bucket, the mounted\n+directory and files will be set with `0500` permissions.\n+If the AWS user has full access to the underlying bucket,\n+the mounted directory and files will be set with `0700` permissions.\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNTI2NQ=="}, "originalCommit": {"oid": "3bd7180da913deadac92aaff6d087e7851e9bf4d"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU4MjA4Mg==", "bodyText": "maybe worth mentioning if it is the case. something like Note that Alluxio only checks bucket ACLs when determining filesystem permissions and does not check the ACLS of each individual object.", "url": "https://github.com/Alluxio/alluxio/pull/11448#discussion_r427582082", "createdAt": "2020-05-19T20:32:52Z", "author": {"login": "Xenorith"}, "path": "docs/en/ufs/S3.md", "diffHunk": "@@ -279,44 +249,92 @@ alluxio.underfs.s3.upload.threads.max=80\n alluxio.underfs.object.store.service.threads=80\n ```\n \n-## S3 Access Control\n+## Identity and Access Control of S3 Objects\n+\n+[S3 identity and access management](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html)\n+is very different from the security model of a UNIX-like file system\n+(e.g., S3 ACL has no groups and no directory-level setting).\n+Alluxio makes a best effort to inherit file owner and permission bits from S3 ACL information.\n+Alluxio master loads the ACL information of objects and buckets on the first time when their\n+metadata is requested, then translates it to Alluxio permission and store the metadata information\n+as a part of Alluxio filesystem metadata.\n+\n+### Why is 403 Access Denied Error Returned\n+\n+The S3 credentials set in Alluxio configuration corresponds to an AWS user.\n+If this user does not have the required permissions to access an S3 bucket or object,\n+a 403 permission denied error will be returned.\n \n-If Alluxio security is enabled, Alluxio enforces the access control inherited from underlying object\n-storage.\n+If you see 403 error in Alluxio server log when accessing a S3 service, you should double check\n+1. you are using the correct credentials\n+1. your AWS user does have the permission to access the buckets and objects mounted to Alluxio\n \n-The S3 credentials specified in Alluxio config represents a S3 user. S3 service backend checks the\n-user permission to the bucket and the object for access control. If the given S3 user does not have\n-the access permissions to the specified bucket, a permission denied error will be thrown. When\n-Alluxio security is enabled, Alluxio loads the bucket ACL to Alluxio permission on the first time\n-when the metadata is loaded to Alluxio namespace.\n+Read more [trouble-shooting guidance](https://aws.amazon.com/premiumsupport/knowledge-center/s3-troubleshoot-403/)\n+for 403 error from AWS.\n \n-### Mapping from S3 user to Alluxio file owner\n+### File Owner and Group\n \n-By default, Alluxio tries to extract the S3 user display name from the S3 credentials. Optionally,\n+Alluxio file system infers the file owner from the metadata of S3 buckets and objects.\n+Since there is no group in S3 ACL, the owner is reused as the group.\n+\n+By default, Alluxio extracts the display name of the AWS user.\n+In case this display name is not available,\n+Alluxio sets file owner to this AWS user's [canonical user ID](https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html).\n+\n+This canonical user id is typically a long string like `79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be`,\n+often inconvenient to read and use in practice.\n+Optionally, property\n `alluxio.underfs.s3.owner.id.to.username.mapping` can be used to specify a preset S3 canonical id to\n-Alluxio username static mapping, in the format \"id1=user1;id2=user2\".  The AWS S3 canonical ID can\n-be found at the console `https://console.aws.amazon.com/iam/home?#/security_credentials`.\n-Please expand the \"Account Identifiers\" tab and refer to \"Canonical User ID\".\n+Alluxio username static mapping, in the format \"id1=user1;id2=user2\".\n+For example, edit `alluxio-site.properties` to include\n+\n+```properties\n+alluxio.underfs.s3.owner.id.to.username.mapping=\\\n+79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be=john\n+```\n+\n+This configuration helps Alluxio recognize all objects owned by this AWS account as owned by user `john` in Alluxio namespace.\n+To find out the AWS S3 canonical ID,\n+check the console `https://console.aws.amazon.com/iam/home?#/security_credentials`,\n+expand the \"Account Identifiers\" tab and refer to \"Canonical User ID\".\n \n-### Mapping from S3 ACL to Alluxio permission\n+### File Permission\n \n Alluxio checks the S3 bucket read/write ACLs to determine the owner's permissions to a Alluxio\n-file. For example, if the S3 user has read-only access to the underlying bucket, the mounted\n-directory and files will be set with 0500 permissions. If the S3 user has full access to the underlying bucket,\n-the mounted directory and files will be set with 0700 permissions.\n+file.\n+For example, if the AWS user has read-only access to the mounted bucket, the mounted\n+directory and files will be set with `0500` permissions.\n+If the AWS user has full access to the underlying bucket,\n+the mounted directory and files will be set with `0700` permissions.\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNTI2NQ=="}, "originalCommit": {"oid": "3bd7180da913deadac92aaff6d087e7851e9bf4d"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5MTY1Mw==", "bodyText": "added", "url": "https://github.com/Alluxio/alluxio/pull/11448#discussion_r427591653", "createdAt": "2020-05-19T20:50:37Z", "author": {"login": "apc999"}, "path": "docs/en/ufs/S3.md", "diffHunk": "@@ -279,44 +249,92 @@ alluxio.underfs.s3.upload.threads.max=80\n alluxio.underfs.object.store.service.threads=80\n ```\n \n-## S3 Access Control\n+## Identity and Access Control of S3 Objects\n+\n+[S3 identity and access management](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html)\n+is very different from the security model of a UNIX-like file system\n+(e.g., S3 ACL has no groups and no directory-level setting).\n+Alluxio makes a best effort to inherit file owner and permission bits from S3 ACL information.\n+Alluxio master loads the ACL information of objects and buckets on the first time when their\n+metadata is requested, then translates it to Alluxio permission and store the metadata information\n+as a part of Alluxio filesystem metadata.\n+\n+### Why is 403 Access Denied Error Returned\n+\n+The S3 credentials set in Alluxio configuration corresponds to an AWS user.\n+If this user does not have the required permissions to access an S3 bucket or object,\n+a 403 permission denied error will be returned.\n \n-If Alluxio security is enabled, Alluxio enforces the access control inherited from underlying object\n-storage.\n+If you see 403 error in Alluxio server log when accessing a S3 service, you should double check\n+1. you are using the correct credentials\n+1. your AWS user does have the permission to access the buckets and objects mounted to Alluxio\n \n-The S3 credentials specified in Alluxio config represents a S3 user. S3 service backend checks the\n-user permission to the bucket and the object for access control. If the given S3 user does not have\n-the access permissions to the specified bucket, a permission denied error will be thrown. When\n-Alluxio security is enabled, Alluxio loads the bucket ACL to Alluxio permission on the first time\n-when the metadata is loaded to Alluxio namespace.\n+Read more [trouble-shooting guidance](https://aws.amazon.com/premiumsupport/knowledge-center/s3-troubleshoot-403/)\n+for 403 error from AWS.\n \n-### Mapping from S3 user to Alluxio file owner\n+### File Owner and Group\n \n-By default, Alluxio tries to extract the S3 user display name from the S3 credentials. Optionally,\n+Alluxio file system infers the file owner from the metadata of S3 buckets and objects.\n+Since there is no group in S3 ACL, the owner is reused as the group.\n+\n+By default, Alluxio extracts the display name of the AWS user.\n+In case this display name is not available,\n+Alluxio sets file owner to this AWS user's [canonical user ID](https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html).\n+\n+This canonical user id is typically a long string like `79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be`,\n+often inconvenient to read and use in practice.\n+Optionally, property\n `alluxio.underfs.s3.owner.id.to.username.mapping` can be used to specify a preset S3 canonical id to\n-Alluxio username static mapping, in the format \"id1=user1;id2=user2\".  The AWS S3 canonical ID can\n-be found at the console `https://console.aws.amazon.com/iam/home?#/security_credentials`.\n-Please expand the \"Account Identifiers\" tab and refer to \"Canonical User ID\".\n+Alluxio username static mapping, in the format \"id1=user1;id2=user2\".\n+For example, edit `alluxio-site.properties` to include\n+\n+```properties\n+alluxio.underfs.s3.owner.id.to.username.mapping=\\\n+79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be=john\n+```\n+\n+This configuration helps Alluxio recognize all objects owned by this AWS account as owned by user `john` in Alluxio namespace.\n+To find out the AWS S3 canonical ID,\n+check the console `https://console.aws.amazon.com/iam/home?#/security_credentials`,\n+expand the \"Account Identifiers\" tab and refer to \"Canonical User ID\".\n \n-### Mapping from S3 ACL to Alluxio permission\n+### File Permission\n \n Alluxio checks the S3 bucket read/write ACLs to determine the owner's permissions to a Alluxio\n-file. For example, if the S3 user has read-only access to the underlying bucket, the mounted\n-directory and files will be set with 0500 permissions. If the S3 user has full access to the underlying bucket,\n-the mounted directory and files will be set with 0700 permissions.\n+file.\n+For example, if the AWS user has read-only access to the mounted bucket, the mounted\n+directory and files will be set with `0500` permissions.\n+If the AWS user has full access to the underlying bucket,\n+the mounted directory and files will be set with `0700` permissions.\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNTI2NQ=="}, "originalCommit": {"oid": "3bd7180da913deadac92aaff6d087e7851e9bf4d"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjI4MTkzOnYy", "diffSide": "RIGHT", "path": "docs/en/ufs/S3.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo1MjoyNVrOGWv2Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo1MjoyNVrOGWv2Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNTgxOA==", "bodyText": "one can either", "url": "https://github.com/Alluxio/alluxio/pull/11448#discussion_r426505818", "createdAt": "2020-05-18T09:52:25Z", "author": {"login": "Xenorith"}, "path": "docs/en/ufs/S3.md", "diffHunk": "@@ -279,44 +249,92 @@ alluxio.underfs.s3.upload.threads.max=80\n alluxio.underfs.object.store.service.threads=80\n ```\n \n-## S3 Access Control\n+## Identity and Access Control of S3 Objects\n+\n+[S3 identity and access management](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html)\n+is very different from the security model of a UNIX-like file system\n+(e.g., S3 ACL has no groups and no directory-level setting).\n+Alluxio makes a best effort to inherit file owner and permission bits from S3 ACL information.\n+Alluxio master loads the ACL information of objects and buckets on the first time when their\n+metadata is requested, then translates it to Alluxio permission and store the metadata information\n+as a part of Alluxio filesystem metadata.\n+\n+### Why is 403 Access Denied Error Returned\n+\n+The S3 credentials set in Alluxio configuration corresponds to an AWS user.\n+If this user does not have the required permissions to access an S3 bucket or object,\n+a 403 permission denied error will be returned.\n \n-If Alluxio security is enabled, Alluxio enforces the access control inherited from underlying object\n-storage.\n+If you see 403 error in Alluxio server log when accessing a S3 service, you should double check\n+1. you are using the correct credentials\n+1. your AWS user does have the permission to access the buckets and objects mounted to Alluxio\n \n-The S3 credentials specified in Alluxio config represents a S3 user. S3 service backend checks the\n-user permission to the bucket and the object for access control. If the given S3 user does not have\n-the access permissions to the specified bucket, a permission denied error will be thrown. When\n-Alluxio security is enabled, Alluxio loads the bucket ACL to Alluxio permission on the first time\n-when the metadata is loaded to Alluxio namespace.\n+Read more [trouble-shooting guidance](https://aws.amazon.com/premiumsupport/knowledge-center/s3-troubleshoot-403/)\n+for 403 error from AWS.\n \n-### Mapping from S3 user to Alluxio file owner\n+### File Owner and Group\n \n-By default, Alluxio tries to extract the S3 user display name from the S3 credentials. Optionally,\n+Alluxio file system infers the file owner from the metadata of S3 buckets and objects.\n+Since there is no group in S3 ACL, the owner is reused as the group.\n+\n+By default, Alluxio extracts the display name of the AWS user.\n+In case this display name is not available,\n+Alluxio sets file owner to this AWS user's [canonical user ID](https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html).\n+\n+This canonical user id is typically a long string like `79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be`,\n+often inconvenient to read and use in practice.\n+Optionally, property\n `alluxio.underfs.s3.owner.id.to.username.mapping` can be used to specify a preset S3 canonical id to\n-Alluxio username static mapping, in the format \"id1=user1;id2=user2\".  The AWS S3 canonical ID can\n-be found at the console `https://console.aws.amazon.com/iam/home?#/security_credentials`.\n-Please expand the \"Account Identifiers\" tab and refer to \"Canonical User ID\".\n+Alluxio username static mapping, in the format \"id1=user1;id2=user2\".\n+For example, edit `alluxio-site.properties` to include\n+\n+```properties\n+alluxio.underfs.s3.owner.id.to.username.mapping=\\\n+79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be=john\n+```\n+\n+This configuration helps Alluxio recognize all objects owned by this AWS account as owned by user `john` in Alluxio namespace.\n+To find out the AWS S3 canonical ID,\n+check the console `https://console.aws.amazon.com/iam/home?#/security_credentials`,\n+expand the \"Account Identifiers\" tab and refer to \"Canonical User ID\".\n \n-### Mapping from S3 ACL to Alluxio permission\n+### File Permission\n \n Alluxio checks the S3 bucket read/write ACLs to determine the owner's permissions to a Alluxio\n-file. For example, if the S3 user has read-only access to the underlying bucket, the mounted\n-directory and files will be set with 0500 permissions. If the S3 user has full access to the underlying bucket,\n-the mounted directory and files will be set with 0700 permissions.\n+file.\n+For example, if the AWS user has read-only access to the mounted bucket, the mounted\n+directory and files will be set with `0500` permissions.\n+If the AWS user has full access to the underlying bucket,\n+the mounted directory and files will be set with `0700` permissions.\n+\n+With `0500` or `0700` as the default file permissions, Alluxio file system users other than the\n+file owner can not access the files under the moun point.\n+This can lead to problems for data shared by different applications running under a different users.\n+For example, a Presto job running under user `presto` may result in an error like\n+`Query failed: Failed to list directory` when accessing the mount point with owner `john`.\n+In  `master.log`, one can find an error like\n+```\n+Error=alluxio.exception.AccessControlException: Permission denied: user=presto, access=--x, path=/mnt/s3/myobject: failed at s3, inode owner=john, inode group=john, inode mode=rwx------\n+```\n \n-### Mount point sharing\n+This is because the mounted directory has permission `0700` and thus application user `presto`\n+is not able to access this file.\n+To share the S3 mount point with other users in Alluxio namespace, one can choose:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd7180da913deadac92aaff6d087e7851e9bf4d"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjI4NDU1OnYy", "diffSide": "RIGHT", "path": "docs/en/ufs/S3.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo1MzowMlrOGWv3-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo1MzowMlrOGWv3-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNjIzMg==", "bodyText": "alluxio.master.mount.table.root.shared=?? is it a boolean to be set to true?", "url": "https://github.com/Alluxio/alluxio/pull/11448#discussion_r426506232", "createdAt": "2020-05-18T09:53:02Z", "author": {"login": "Xenorith"}, "path": "docs/en/ufs/S3.md", "diffHunk": "@@ -279,44 +249,92 @@ alluxio.underfs.s3.upload.threads.max=80\n alluxio.underfs.object.store.service.threads=80\n ```\n \n-## S3 Access Control\n+## Identity and Access Control of S3 Objects\n+\n+[S3 identity and access management](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html)\n+is very different from the security model of a UNIX-like file system\n+(e.g., S3 ACL has no groups and no directory-level setting).\n+Alluxio makes a best effort to inherit file owner and permission bits from S3 ACL information.\n+Alluxio master loads the ACL information of objects and buckets on the first time when their\n+metadata is requested, then translates it to Alluxio permission and store the metadata information\n+as a part of Alluxio filesystem metadata.\n+\n+### Why is 403 Access Denied Error Returned\n+\n+The S3 credentials set in Alluxio configuration corresponds to an AWS user.\n+If this user does not have the required permissions to access an S3 bucket or object,\n+a 403 permission denied error will be returned.\n \n-If Alluxio security is enabled, Alluxio enforces the access control inherited from underlying object\n-storage.\n+If you see 403 error in Alluxio server log when accessing a S3 service, you should double check\n+1. you are using the correct credentials\n+1. your AWS user does have the permission to access the buckets and objects mounted to Alluxio\n \n-The S3 credentials specified in Alluxio config represents a S3 user. S3 service backend checks the\n-user permission to the bucket and the object for access control. If the given S3 user does not have\n-the access permissions to the specified bucket, a permission denied error will be thrown. When\n-Alluxio security is enabled, Alluxio loads the bucket ACL to Alluxio permission on the first time\n-when the metadata is loaded to Alluxio namespace.\n+Read more [trouble-shooting guidance](https://aws.amazon.com/premiumsupport/knowledge-center/s3-troubleshoot-403/)\n+for 403 error from AWS.\n \n-### Mapping from S3 user to Alluxio file owner\n+### File Owner and Group\n \n-By default, Alluxio tries to extract the S3 user display name from the S3 credentials. Optionally,\n+Alluxio file system infers the file owner from the metadata of S3 buckets and objects.\n+Since there is no group in S3 ACL, the owner is reused as the group.\n+\n+By default, Alluxio extracts the display name of the AWS user.\n+In case this display name is not available,\n+Alluxio sets file owner to this AWS user's [canonical user ID](https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html).\n+\n+This canonical user id is typically a long string like `79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be`,\n+often inconvenient to read and use in practice.\n+Optionally, property\n `alluxio.underfs.s3.owner.id.to.username.mapping` can be used to specify a preset S3 canonical id to\n-Alluxio username static mapping, in the format \"id1=user1;id2=user2\".  The AWS S3 canonical ID can\n-be found at the console `https://console.aws.amazon.com/iam/home?#/security_credentials`.\n-Please expand the \"Account Identifiers\" tab and refer to \"Canonical User ID\".\n+Alluxio username static mapping, in the format \"id1=user1;id2=user2\".\n+For example, edit `alluxio-site.properties` to include\n+\n+```properties\n+alluxio.underfs.s3.owner.id.to.username.mapping=\\\n+79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be=john\n+```\n+\n+This configuration helps Alluxio recognize all objects owned by this AWS account as owned by user `john` in Alluxio namespace.\n+To find out the AWS S3 canonical ID,\n+check the console `https://console.aws.amazon.com/iam/home?#/security_credentials`,\n+expand the \"Account Identifiers\" tab and refer to \"Canonical User ID\".\n \n-### Mapping from S3 ACL to Alluxio permission\n+### File Permission\n \n Alluxio checks the S3 bucket read/write ACLs to determine the owner's permissions to a Alluxio\n-file. For example, if the S3 user has read-only access to the underlying bucket, the mounted\n-directory and files will be set with 0500 permissions. If the S3 user has full access to the underlying bucket,\n-the mounted directory and files will be set with 0700 permissions.\n+file.\n+For example, if the AWS user has read-only access to the mounted bucket, the mounted\n+directory and files will be set with `0500` permissions.\n+If the AWS user has full access to the underlying bucket,\n+the mounted directory and files will be set with `0700` permissions.\n+\n+With `0500` or `0700` as the default file permissions, Alluxio file system users other than the\n+file owner can not access the files under the moun point.\n+This can lead to problems for data shared by different applications running under a different users.\n+For example, a Presto job running under user `presto` may result in an error like\n+`Query failed: Failed to list directory` when accessing the mount point with owner `john`.\n+In  `master.log`, one can find an error like\n+```\n+Error=alluxio.exception.AccessControlException: Permission denied: user=presto, access=--x, path=/mnt/s3/myobject: failed at s3, inode owner=john, inode group=john, inode mode=rwx------\n+```\n \n-### Mount point sharing\n+This is because the mounted directory has permission `0700` and thus application user `presto`\n+is not able to access this file.\n+To share the S3 mount point with other users in Alluxio namespace, one can choose:\n \n-If you want to share the S3 mount point with other users in Alluxio namespace, you can enable\n-`alluxio.underfs.object.store.mount.shared.publicly`.\n+1. (Option1): Set\n+`alluxio.master.mount.table.root.shared` in `alluxio-site.properties` for root mount or add `--shared` on `fs mount` command;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd7180da913deadac92aaff6d087e7851e9bf4d"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjI4NjQyOnYy", "diffSide": "RIGHT", "path": "docs/en/ufs/S3.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo1MzozM1rOGWv5Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo1MzozM1rOGWv5Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNjU0Ng==", "bodyText": "File Permissions", "url": "https://github.com/Alluxio/alluxio/pull/11448#discussion_r426506546", "createdAt": "2020-05-18T09:53:33Z", "author": {"login": "Xenorith"}, "path": "docs/en/ufs/S3.md", "diffHunk": "@@ -279,44 +249,92 @@ alluxio.underfs.s3.upload.threads.max=80\n alluxio.underfs.object.store.service.threads=80\n ```\n \n-## S3 Access Control\n+## Identity and Access Control of S3 Objects\n+\n+[S3 identity and access management](https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html)\n+is very different from the security model of a UNIX-like file system\n+(e.g., S3 ACL has no groups and no directory-level setting).\n+Alluxio makes a best effort to inherit file owner and permission bits from S3 ACL information.\n+Alluxio master loads the ACL information of objects and buckets on the first time when their\n+metadata is requested, then translates it to Alluxio permission and store the metadata information\n+as a part of Alluxio filesystem metadata.\n+\n+### Why is 403 Access Denied Error Returned\n+\n+The S3 credentials set in Alluxio configuration corresponds to an AWS user.\n+If this user does not have the required permissions to access an S3 bucket or object,\n+a 403 permission denied error will be returned.\n \n-If Alluxio security is enabled, Alluxio enforces the access control inherited from underlying object\n-storage.\n+If you see 403 error in Alluxio server log when accessing a S3 service, you should double check\n+1. you are using the correct credentials\n+1. your AWS user does have the permission to access the buckets and objects mounted to Alluxio\n \n-The S3 credentials specified in Alluxio config represents a S3 user. S3 service backend checks the\n-user permission to the bucket and the object for access control. If the given S3 user does not have\n-the access permissions to the specified bucket, a permission denied error will be thrown. When\n-Alluxio security is enabled, Alluxio loads the bucket ACL to Alluxio permission on the first time\n-when the metadata is loaded to Alluxio namespace.\n+Read more [trouble-shooting guidance](https://aws.amazon.com/premiumsupport/knowledge-center/s3-troubleshoot-403/)\n+for 403 error from AWS.\n \n-### Mapping from S3 user to Alluxio file owner\n+### File Owner and Group\n \n-By default, Alluxio tries to extract the S3 user display name from the S3 credentials. Optionally,\n+Alluxio file system infers the file owner from the metadata of S3 buckets and objects.\n+Since there is no group in S3 ACL, the owner is reused as the group.\n+\n+By default, Alluxio extracts the display name of the AWS user.\n+In case this display name is not available,\n+Alluxio sets file owner to this AWS user's [canonical user ID](https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html).\n+\n+This canonical user id is typically a long string like `79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be`,\n+often inconvenient to read and use in practice.\n+Optionally, property\n `alluxio.underfs.s3.owner.id.to.username.mapping` can be used to specify a preset S3 canonical id to\n-Alluxio username static mapping, in the format \"id1=user1;id2=user2\".  The AWS S3 canonical ID can\n-be found at the console `https://console.aws.amazon.com/iam/home?#/security_credentials`.\n-Please expand the \"Account Identifiers\" tab and refer to \"Canonical User ID\".\n+Alluxio username static mapping, in the format \"id1=user1;id2=user2\".\n+For example, edit `alluxio-site.properties` to include\n+\n+```properties\n+alluxio.underfs.s3.owner.id.to.username.mapping=\\\n+79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be=john\n+```\n+\n+This configuration helps Alluxio recognize all objects owned by this AWS account as owned by user `john` in Alluxio namespace.\n+To find out the AWS S3 canonical ID,\n+check the console `https://console.aws.amazon.com/iam/home?#/security_credentials`,\n+expand the \"Account Identifiers\" tab and refer to \"Canonical User ID\".\n \n-### Mapping from S3 ACL to Alluxio permission\n+### File Permission", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd7180da913deadac92aaff6d087e7851e9bf4d"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjI4NzgxOnYy", "diffSide": "RIGHT", "path": "docs/en/ufs/S3.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo1Mzo1M1rOGWv6AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo1Mzo1M1rOGWv6AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNjc1Mw==", "bodyText": "Prevent Creating Zero-byte Files", "url": "https://github.com/Alluxio/alluxio/pull/11448#discussion_r426506753", "createdAt": "2020-05-18T09:53:53Z", "author": {"login": "Xenorith"}, "path": "docs/en/ufs/S3.md", "diffHunk": "@@ -329,7 +347,8 @@ log4j.logger.org.apache.http.wire=DEBUG\n See [Amazon's documentation](https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/java-dg-logging.html)\n for more details.\n \n-Note: Alluxio creates zero-byte files in S3 as a performance optimization. For a bucket mounted with read-write\n+### Preventing Creating Zero-byte Files", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd7180da913deadac92aaff6d087e7851e9bf4d"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjI5MDYwOnYy", "diffSide": "RIGHT", "path": "docs/en/ufs/S3.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo1NDozNFrOGWv7rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo1NDozNFrOGWv7rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNzE4Mw==", "bodyText": "set alluxio.master.mount.table.root.readonly=true for root mount ??", "url": "https://github.com/Alluxio/alluxio/pull/11448#discussion_r426507183", "createdAt": "2020-05-18T09:54:34Z", "author": {"login": "Xenorith"}, "path": "docs/en/ufs/S3.md", "diffHunk": "@@ -329,7 +347,8 @@ log4j.logger.org.apache.http.wire=DEBUG\n See [Amazon's documentation](https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/java-dg-logging.html)\n for more details.\n \n-Note: Alluxio creates zero-byte files in S3 as a performance optimization. For a bucket mounted with read-write\n+### Preventing Creating Zero-byte Files\n+Alluxio creates zero-byte files in S3 as a performance optimization. For a bucket mounted with read-write\n access, zero-byte file creation (S3 PUT operation) is not restricted to writes using Alluxio but also occurs\n when listing contents of the under storage. To disable the PUT operation, mount the bucket with the `--readonly`\n-flag.\n+flag or set `alluxio.master.mount.table.root.readonly` for root mount.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd7180da913deadac92aaff6d087e7851e9bf4d"}, "originalPosition": 170}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1761, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}