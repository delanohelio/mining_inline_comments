{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NTUyOTY0", "number": 11746, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjo1OToxNVrOENb_2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjo1OToxNVrOENb_2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTI1NjU4OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMjo1OToxNVrOGwHzCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMzoyMzo0MFrOGwIL4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzExMjU4NA==", "bodyText": "This means for load metadata, this context.getUfsStatus() must always be prepopulated with the UFS status? Something earlier in the call stack will be populating everything? What is the difference between this context.getUfsStatus() and the status cache?\nThis also implies this method itself will never call UFS?\nCan we add this to the method javadoc?", "url": "https://github.com/Alluxio/alluxio/pull/11746#discussion_r453112584", "createdAt": "2020-07-10T22:59:15Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -639,10 +639,8 @@ private void loadMetadata(LockedInodePath inodePath, LoadMetadataContext context\n       FileDoesNotExistException, InvalidFileSizeException, InvalidPathException, IOException {\n     AlluxioURI path = inodePath.getUri();\n     MountTable.Resolution resolution = mMountTable.resolve(path);\n-    AlluxioURI ufsUri = resolution.getUri();\n-    try (CloseableResource<UnderFileSystem> ufsResource = resolution.acquireUfsResource()) {\n-      UnderFileSystem ufs = ufsResource.get();\n-      if (context.getUfsStatus() == null && !ufs.exists(ufsUri.toString())) {\n+    try {\n+      if (context.getUfsStatus() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00240680873d305a9a153118c575072f0f5140b9"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzExODk0Ng==", "bodyText": "context.getUfsStatus is can be thought of as similar to an RPC options object. The context object is basically a POJO that just holds information. No fancy processing. Just getters and setters.\nWhen calling this method it is now expected that the ufs status is already populated. And yes, this method shouldn't call the UFS except in the case where the child statuses may need to be retrieved (see the fetchChildren call lower in the code). The context will always have a setUfsStatus call as this method is only called in one place", "url": "https://github.com/Alluxio/alluxio/pull/11746#discussion_r453118946", "createdAt": "2020-07-10T23:23:40Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -639,10 +639,8 @@ private void loadMetadata(LockedInodePath inodePath, LoadMetadataContext context\n       FileDoesNotExistException, InvalidFileSizeException, InvalidPathException, IOException {\n     AlluxioURI path = inodePath.getUri();\n     MountTable.Resolution resolution = mMountTable.resolve(path);\n-    AlluxioURI ufsUri = resolution.getUri();\n-    try (CloseableResource<UnderFileSystem> ufsResource = resolution.acquireUfsResource()) {\n-      UnderFileSystem ufs = ufsResource.get();\n-      if (context.getUfsStatus() == null && !ufs.exists(ufsUri.toString())) {\n+    try {\n+      if (context.getUfsStatus() == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzExMjU4NA=="}, "originalCommit": {"oid": "00240680873d305a9a153118c575072f0f5140b9"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1425, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}