{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMjM2NDA3", "number": 11539, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzo0NToxNFrOEEZkAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDo0Mjo0MFrOEEdCaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDQ4NTc5OnYy", "diffSide": "RIGHT", "path": "stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzo0NToxNFrOGh_2AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzo0NToxNFrOGh_2AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwMjIwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            subTitle, \"# Threads\", \"Number of Success (MB/s)\");\n          \n          \n            \n                            subTitle, \"# Threads\", \"# API calls\");", "url": "https://github.com/Alluxio/alluxio/pull/11539#discussion_r438302209", "createdAt": "2020-06-10T17:45:14Z", "author": {"login": "gpang"}, "path": "stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java", "diffHunk": "@@ -256,6 +278,12 @@ public ClientIOTaskResult aggregate(Iterable<ClientIOTaskResult> results) throws\n                         Collections.singletonList(ClientIOParameters.FIELD_READ_RANDOM))),\n                 subTitle, \"# Threads\", \"Throughput (MB/s)\");\n \n+            LineGraph numSuccessGraph = new LineGraph(String\n+                .format(\"%s - %s - Number of Successes\", operation,\n+                    opSummaries.get(0).mParameters.getDescription(\n+                        Collections.singletonList(ClientIOParameters.FIELD_READ_RANDOM))),\n+                subTitle, \"# Threads\", \"Number of Success (MB/s)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ece14d6b45a770ff71a5925dda3cac80b010e67"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDQ4NjU5OnYy", "diffSide": "RIGHT", "path": "stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzo0NToyN1rOGh_2ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzo0NToyN1rOGh_2ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwMjM0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .format(\"%s - %s - Number of Successes\", operation,\n          \n          \n            \n                            .format(\"%s - %s - API Calls\", operation,", "url": "https://github.com/Alluxio/alluxio/pull/11539#discussion_r438302346", "createdAt": "2020-06-10T17:45:27Z", "author": {"login": "gpang"}, "path": "stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java", "diffHunk": "@@ -256,6 +278,12 @@ public ClientIOTaskResult aggregate(Iterable<ClientIOTaskResult> results) throws\n                         Collections.singletonList(ClientIOParameters.FIELD_READ_RANDOM))),\n                 subTitle, \"# Threads\", \"Throughput (MB/s)\");\n \n+            LineGraph numSuccessGraph = new LineGraph(String\n+                .format(\"%s - %s - Number of Successes\", operation,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ece14d6b45a770ff71a5925dda3cac80b010e67"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDUwMDg0OnYy", "diffSide": "RIGHT", "path": "stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzo0OTozNVrOGh__7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDowNDoyMFrOGiEbqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNDc0OA==", "bodyText": "Can this just be a Map<Integer, Map<String, SummaryStatistics>>, so it is num_threads -> (method -> stats)?", "url": "https://github.com/Alluxio/alluxio/pull/11539#discussion_r438304748", "createdAt": "2020-06-10T17:49:35Z", "author": {"login": "gpang"}, "path": "stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java", "diffHunk": "@@ -45,7 +45,7 @@\n   private BaseParameters mBaseParameters;\n   private ClientIOParameters mParameters;\n \n-  private Map<Integer, SummaryStatistics> mTimeToFirstByte;\n+  private Map<String, SummaryStatistics> mTimeToFirstByte;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ece14d6b45a770ff71a5925dda3cac80b010e67"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM3NzM4NQ==", "bodyText": "Changed.", "url": "https://github.com/Alluxio/alluxio/pull/11539#discussion_r438377385", "createdAt": "2020-06-10T20:04:20Z", "author": {"login": "HelloHorizon"}, "path": "stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java", "diffHunk": "@@ -45,7 +45,7 @@\n   private BaseParameters mBaseParameters;\n   private ClientIOParameters mParameters;\n \n-  private Map<Integer, SummaryStatistics> mTimeToFirstByte;\n+  private Map<String, SummaryStatistics> mTimeToFirstByte;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNDc0OA=="}, "originalCommit": {"oid": "5ece14d6b45a770ff71a5925dda3cac80b010e67"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDUwMzU5OnYy", "diffSide": "RIGHT", "path": "stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzo1MDoyMlrOGiABvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDowNDoyOFrOGiEb5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNTIxNQ==", "bodyText": "If the data structure was different, we wouldn't have to manually split strings.", "url": "https://github.com/Alluxio/alluxio/pull/11539#discussion_r438305215", "createdAt": "2020-06-10T17:50:22Z", "author": {"login": "gpang"}, "path": "stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java", "diffHunk": "@@ -172,10 +173,31 @@ private long computeLastEndMs() {\n     return data;\n   }\n \n+  private void getNumSuccessData(String series, LineGraph lineGraph) {\n+    Map<String, LineGraph.Data> data = new HashMap<>();\n+\n+    for (Map.Entry<String, SummaryStatistics>\n+             threadMethodEntry : mTimeToFirstByte.entrySet()) {\n+      String[] threadMethod = threadMethodEntry.getKey().split(\",\", 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ece14d6b45a770ff71a5925dda3cac80b010e67"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM3NzQ0NQ==", "bodyText": "Changed.", "url": "https://github.com/Alluxio/alluxio/pull/11539#discussion_r438377445", "createdAt": "2020-06-10T20:04:28Z", "author": {"login": "HelloHorizon"}, "path": "stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java", "diffHunk": "@@ -172,10 +173,31 @@ private long computeLastEndMs() {\n     return data;\n   }\n \n+  private void getNumSuccessData(String series, LineGraph lineGraph) {\n+    Map<String, LineGraph.Data> data = new HashMap<>();\n+\n+    for (Map.Entry<String, SummaryStatistics>\n+             threadMethodEntry : mTimeToFirstByte.entrySet()) {\n+      String[] threadMethod = threadMethodEntry.getKey().split(\",\", 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNTIxNQ=="}, "originalCommit": {"oid": "5ece14d6b45a770ff71a5925dda3cac80b010e67"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTA1NTE1OnYy", "diffSide": "RIGHT", "path": "stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDo0Mjo0MFrOGiFmmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMjo0MDowMFrOGiIoLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5NjU3MA==", "bodyText": "can we just have this take 3 parameters: threads, method, statistics, and then we don't have to create a new class to just store a map?", "url": "https://github.com/Alluxio/alluxio/pull/11539#discussion_r438396570", "createdAt": "2020-06-10T20:42:40Z", "author": {"login": "gpang"}, "path": "stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java", "diffHunk": "@@ -101,23 +101,24 @@ public void setRecordStartMs(long recordStartMs) {\n   /**\n    * @return client IO statistics per method\n    */\n-  public Map<Integer, SummaryStatistics> getTimeToFirstBytePerThread() {\n+  public Map<Integer, TimeToFirstByteStatistics> getTimeToFirstBytePerThread() {\n     return mTimeToFirstByte;\n   }\n \n   /**\n    * @param timeToFirstByte time to first statistics\n    */\n-  public void setTimeToFirstBytePerThread(Map<Integer, SummaryStatistics> timeToFirstByte) {\n+  public void setTimeToFirstBytePerThread(Map<Integer, TimeToFirstByteStatistics> timeToFirstByte) {\n     mTimeToFirstByte = timeToFirstByte;\n   }\n \n   /**\n-   * @param threadCount thread count\n+   * @param numThreads thread count\n    * @param statistics ClientIOTaskResultStatistics\n    */\n-  public void putTimeToFirstBytePerThread(int threadCount, SummaryStatistics statistics) {\n-    mTimeToFirstByte.put(threadCount, statistics);\n+  public void putTimeToFirstBytePerThread(Integer numThreads,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49fd51129c5d591f6268104e210b5d4d6d265d9f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQwNDAwMg==", "bodyText": "Is there any way for us to output the JSON data without implementing a new class for Map<Integer, Map<String, SummaryStatistics>>?", "url": "https://github.com/Alluxio/alluxio/pull/11539#discussion_r438404002", "createdAt": "2020-06-10T20:57:22Z", "author": {"login": "HelloHorizon"}, "path": "stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java", "diffHunk": "@@ -101,23 +101,24 @@ public void setRecordStartMs(long recordStartMs) {\n   /**\n    * @return client IO statistics per method\n    */\n-  public Map<Integer, SummaryStatistics> getTimeToFirstBytePerThread() {\n+  public Map<Integer, TimeToFirstByteStatistics> getTimeToFirstBytePerThread() {\n     return mTimeToFirstByte;\n   }\n \n   /**\n    * @param timeToFirstByte time to first statistics\n    */\n-  public void setTimeToFirstBytePerThread(Map<Integer, SummaryStatistics> timeToFirstByte) {\n+  public void setTimeToFirstBytePerThread(Map<Integer, TimeToFirstByteStatistics> timeToFirstByte) {\n     mTimeToFirstByte = timeToFirstByte;\n   }\n \n   /**\n-   * @param threadCount thread count\n+   * @param numThreads thread count\n    * @param statistics ClientIOTaskResultStatistics\n    */\n-  public void putTimeToFirstBytePerThread(int threadCount, SummaryStatistics statistics) {\n-    mTimeToFirstByte.put(threadCount, statistics);\n+  public void putTimeToFirstBytePerThread(Integer numThreads,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5NjU3MA=="}, "originalCommit": {"oid": "49fd51129c5d591f6268104e210b5d4d6d265d9f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ0NjEyNQ==", "bodyText": "Changed.", "url": "https://github.com/Alluxio/alluxio/pull/11539#discussion_r438446125", "createdAt": "2020-06-10T22:40:00Z", "author": {"login": "HelloHorizon"}, "path": "stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java", "diffHunk": "@@ -101,23 +101,24 @@ public void setRecordStartMs(long recordStartMs) {\n   /**\n    * @return client IO statistics per method\n    */\n-  public Map<Integer, SummaryStatistics> getTimeToFirstBytePerThread() {\n+  public Map<Integer, TimeToFirstByteStatistics> getTimeToFirstBytePerThread() {\n     return mTimeToFirstByte;\n   }\n \n   /**\n    * @param timeToFirstByte time to first statistics\n    */\n-  public void setTimeToFirstBytePerThread(Map<Integer, SummaryStatistics> timeToFirstByte) {\n+  public void setTimeToFirstBytePerThread(Map<Integer, TimeToFirstByteStatistics> timeToFirstByte) {\n     mTimeToFirstByte = timeToFirstByte;\n   }\n \n   /**\n-   * @param threadCount thread count\n+   * @param numThreads thread count\n    * @param statistics ClientIOTaskResultStatistics\n    */\n-  public void putTimeToFirstBytePerThread(int threadCount, SummaryStatistics statistics) {\n-    mTimeToFirstByte.put(threadCount, statistics);\n+  public void putTimeToFirstBytePerThread(Integer numThreads,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5NjU3MA=="}, "originalCommit": {"oid": "49fd51129c5d591f6268104e210b5d4d6d265d9f"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1612, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}