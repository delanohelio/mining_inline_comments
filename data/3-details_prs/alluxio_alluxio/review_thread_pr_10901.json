{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0NjA3NDA5", "number": 10901, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMzowMTo0OVrODfZxwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjowNToyMVrODfmpXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjU0Nzg2OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMzowMTo0OVrOFpFpgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjo0Mjo0OVrOFpbN2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYyODQ4MA==", "bodyText": "Can you describe this more, and the implications of a small one and a large one?\nAlso, what is \"size\"? rows? bytes?", "url": "https://github.com/Alluxio/alluxio/pull/10901#discussion_r378628480", "createdAt": "2020-02-13T03:01:49Z", "author": {"login": "gpang"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -1516,6 +1516,13 @@ public String toString() {\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.ENFORCE)\n           .setScope(Scope.MASTER)\n           .build();\n+  public static final PropertyKey MASTER_METASTORE_BLOCK_ITERATOR_READAHEAD_SIZE =\n+      new Builder(Name.MASTER_METASTORE_BLOCK_ITERATOR_READAHEAD_SIZE)\n+          .setDefaultValue(\"10000\")\n+          .setDescription(\"The read-ahead size for block iterator.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10b996008c6d19009c74d3649dec534dbe64e62"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2MTU2Mg==", "bodyText": "bytes", "url": "https://github.com/Alluxio/alluxio/pull/10901#discussion_r378661562", "createdAt": "2020-02-13T05:45:43Z", "author": {"login": "ggezer"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -1516,6 +1516,13 @@ public String toString() {\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.ENFORCE)\n           .setScope(Scope.MASTER)\n           .build();\n+  public static final PropertyKey MASTER_METASTORE_BLOCK_ITERATOR_READAHEAD_SIZE =\n+      new Builder(Name.MASTER_METASTORE_BLOCK_ITERATOR_READAHEAD_SIZE)\n+          .setDefaultValue(\"10000\")\n+          .setDescription(\"The read-ahead size for block iterator.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYyODQ4MA=="}, "originalCommit": {"oid": "c10b996008c6d19009c74d3649dec534dbe64e62"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk1ODc2MA==", "bodyText": "I see. Could you update the description to mention bytes, and maybe some of the implications of the size? For example, if we have a billion blocks, is reading 4mb at a time efficient enough? Should this be a larger size?", "url": "https://github.com/Alluxio/alluxio/pull/10901#discussion_r378958760", "createdAt": "2020-02-13T16:07:05Z", "author": {"login": "gpang"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -1516,6 +1516,13 @@ public String toString() {\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.ENFORCE)\n           .setScope(Scope.MASTER)\n           .build();\n+  public static final PropertyKey MASTER_METASTORE_BLOCK_ITERATOR_READAHEAD_SIZE =\n+      new Builder(Name.MASTER_METASTORE_BLOCK_ITERATOR_READAHEAD_SIZE)\n+          .setDefaultValue(\"10000\")\n+          .setDescription(\"The read-ahead size for block iterator.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYyODQ4MA=="}, "originalCommit": {"oid": "c10b996008c6d19009c74d3649dec534dbe64e62"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk4MTg0OQ==", "bodyText": "I guess 4MB suffices, as it'd prefetch about 10K inodes and 100K block-Ids. This should be enough as iterator content are ultimately written back to disk.", "url": "https://github.com/Alluxio/alluxio/pull/10901#discussion_r378981849", "createdAt": "2020-02-13T16:42:49Z", "author": {"login": "ggezer"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -1516,6 +1516,13 @@ public String toString() {\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.ENFORCE)\n           .setScope(Scope.MASTER)\n           .build();\n+  public static final PropertyKey MASTER_METASTORE_BLOCK_ITERATOR_READAHEAD_SIZE =\n+      new Builder(Name.MASTER_METASTORE_BLOCK_ITERATOR_READAHEAD_SIZE)\n+          .setDefaultValue(\"10000\")\n+          .setDescription(\"The read-ahead size for block iterator.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYyODQ4MA=="}, "originalCommit": {"oid": "c10b996008c6d19009c74d3649dec534dbe64e62"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjU1NTk0OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksBlockStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMzowNjo1MlrOFpFuLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNTo0ODowNFrOFpHs_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYyOTY3Nw==", "bodyText": "below, it uses setPrefixSameAsStart(). We don't need that anymore?", "url": "https://github.com/Alluxio/alluxio/pull/10901#discussion_r378629677", "createdAt": "2020-02-13T03:06:52Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksBlockStore.java", "diffHunk": "@@ -67,10 +70,11 @@\n   public RocksBlockStore(String baseDir) {\n     RocksDB.loadLibrary();\n     mDisableWAL = new WriteOptions().setDisableWAL(true);\n+    mIteratorOption = new ReadOptions().setReadaheadSize(\n+        ServerConfiguration.getInt(PropertyKey.MASTER_METASTORE_BLOCK_ITERATOR_READAHEAD_SIZE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10b996008c6d19009c74d3649dec534dbe64e62"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2MjE0Mw==", "bodyText": "This one uses RocksIterator.seek() for which this is fine.", "url": "https://github.com/Alluxio/alluxio/pull/10901#discussion_r378662143", "createdAt": "2020-02-13T05:48:04Z", "author": {"login": "ggezer"}, "path": "core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksBlockStore.java", "diffHunk": "@@ -67,10 +70,11 @@\n   public RocksBlockStore(String baseDir) {\n     RocksDB.loadLibrary();\n     mDisableWAL = new WriteOptions().setDisableWAL(true);\n+    mIteratorOption = new ReadOptions().setReadaheadSize(\n+        ServerConfiguration.getInt(PropertyKey.MASTER_METASTORE_BLOCK_ITERATOR_READAHEAD_SIZE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYyOTY3Nw=="}, "originalCommit": {"oid": "c10b996008c6d19009c74d3649dec534dbe64e62"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjU1NjMzOnYy", "diffSide": "LEFT", "path": "core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksBlockStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMzowNzowN1rOFpFuYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDozMjo1MlrOFpGvqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYyOTczMA==", "bodyText": "why is this removed?", "url": "https://github.com/Alluxio/alluxio/pull/10901#discussion_r378629730", "createdAt": "2020-02-13T03:07:07Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksBlockStore.java", "diffHunk": "@@ -67,10 +70,11 @@\n   public RocksBlockStore(String baseDir) {\n     RocksDB.loadLibrary();\n     mDisableWAL = new WriteOptions().setDisableWAL(true);\n+    mIteratorOption = new ReadOptions().setReadaheadSize(\n+        ServerConfiguration.getInt(PropertyKey.MASTER_METASTORE_BLOCK_ITERATOR_READAHEAD_SIZE));\n     ColumnFamilyOptions cfOpts = new ColumnFamilyOptions()\n         .setMemTableConfig(new HashLinkedListMemTableConfig())\n-        .setCompressionType(CompressionType.NO_COMPRESSION)\n-        .useFixedLengthPrefixExtractor(8); // We always search using the initial long key", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10b996008c6d19009c74d3649dec534dbe64e62"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NjQ0MA==", "bodyText": "This will put rocks-db to prefix-seek mode. Please see description for more details.", "url": "https://github.com/Alluxio/alluxio/pull/10901#discussion_r378646440", "createdAt": "2020-02-13T04:32:52Z", "author": {"login": "ggezer"}, "path": "core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksBlockStore.java", "diffHunk": "@@ -67,10 +70,11 @@\n   public RocksBlockStore(String baseDir) {\n     RocksDB.loadLibrary();\n     mDisableWAL = new WriteOptions().setDisableWAL(true);\n+    mIteratorOption = new ReadOptions().setReadaheadSize(\n+        ServerConfiguration.getInt(PropertyKey.MASTER_METASTORE_BLOCK_ITERATOR_READAHEAD_SIZE));\n     ColumnFamilyOptions cfOpts = new ColumnFamilyOptions()\n         .setMemTableConfig(new HashLinkedListMemTableConfig())\n-        .setCompressionType(CompressionType.NO_COMPRESSION)\n-        .useFixedLengthPrefixExtractor(8); // We always search using the initial long key", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYyOTczMA=="}, "originalCommit": {"oid": "c10b996008c6d19009c74d3649dec534dbe64e62"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjU1OTEwOnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMzowODo1NFrOFpFv4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNTo0NjowMFrOFpHrEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYzMDExMg==", "bodyText": "Should we make this larger?", "url": "https://github.com/Alluxio/alluxio/pull/10901#discussion_r378630112", "createdAt": "2020-02-13T03:08:54Z", "author": {"login": "gpang"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -1516,6 +1516,13 @@ public String toString() {\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.ENFORCE)\n           .setScope(Scope.MASTER)\n           .build();\n+  public static final PropertyKey MASTER_METASTORE_BLOCK_ITERATOR_READAHEAD_SIZE =\n+      new Builder(Name.MASTER_METASTORE_BLOCK_ITERATOR_READAHEAD_SIZE)\n+          .setDefaultValue(\"10000\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10b996008c6d19009c74d3649dec534dbe64e62"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2MTY1MA==", "bodyText": "I was under impression that it was count, but turns out it's bytes. Made it 4MB to start with.", "url": "https://github.com/Alluxio/alluxio/pull/10901#discussion_r378661650", "createdAt": "2020-02-13T05:46:00Z", "author": {"login": "ggezer"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -1516,6 +1516,13 @@ public String toString() {\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.ENFORCE)\n           .setScope(Scope.MASTER)\n           .build();\n+  public static final PropertyKey MASTER_METASTORE_BLOCK_ITERATOR_READAHEAD_SIZE =\n+      new Builder(Name.MASTER_METASTORE_BLOCK_ITERATOR_READAHEAD_SIZE)\n+          .setDefaultValue(\"10000\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYzMDExMg=="}, "originalCommit": {"oid": "c10b996008c6d19009c74d3649dec534dbe64e62"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjU2MjczOnYy", "diffSide": "RIGHT", "path": "core/server/master/src/test/java/alluxio/master/metastore/rocks/RocksBlockStoreTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMzoxMToxMlrOFpFx1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMzoxMToxMlrOFpFx1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYzMDYxNQ==", "bodyText": "after the loop, we should check that the iterator is done?", "url": "https://github.com/Alluxio/alluxio/pull/10901#discussion_r378630615", "createdAt": "2020-02-13T03:11:12Z", "author": {"login": "gpang"}, "path": "core/server/master/src/test/java/alluxio/master/metastore/rocks/RocksBlockStoreTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.metastore.rocks;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import alluxio.master.metastore.BlockStore;\n+import alluxio.proto.meta.Block;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.util.Iterator;\n+\n+public class RocksBlockStoreTest {\n+  @Rule\n+  public TemporaryFolder mFolder = new TemporaryFolder();\n+\n+  @Test\n+  public void testPutGet() throws Exception {\n+    final int blockCount = 3;\n+    RocksBlockStore blockStore = new RocksBlockStore(mFolder.newFolder().getAbsolutePath());\n+    for (int i = 0; i < blockCount; i++) {\n+      blockStore.putBlock(i, Block.BlockMeta.newBuilder().setLength(i).build());\n+    }\n+\n+    for (int i = 0; i < blockCount; i++) {\n+      assertTrue(blockStore.getBlock(i).isPresent());\n+      assertEquals(i, blockStore.getBlock(i).get().getLength());\n+    }\n+  }\n+\n+  @Test\n+  public void testIterator() throws Exception {\n+    final int blockCount = 3;\n+    RocksBlockStore blockStore = new RocksBlockStore(mFolder.newFolder().getAbsolutePath());\n+    for (int i = 0; i < blockCount; i++) {\n+      blockStore.putBlock(i, Block.BlockMeta.newBuilder().setLength(i).build());\n+    }\n+\n+    Iterator<BlockStore.Block> iter = blockStore.iterator();\n+    for (int i = 0; i < blockCount; i++) {\n+      assertTrue(iter.hasNext());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10b996008c6d19009c74d3649dec534dbe64e62"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDY1NjMxOnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksInodeStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjowNToyMVrOFpZvaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjowNToyMVrOFpZvaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk1NzY3Mg==", "bodyText": "should this also use the read option like the other iterator?", "url": "https://github.com/Alluxio/alluxio/pull/10901#discussion_r378957672", "createdAt": "2020-02-13T16:05:21Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksInodeStore.java", "diffHunk": "@@ -245,7 +245,8 @@ public boolean hasChildren(InodeDirectoryView inode, ReadOption option) {\n    * @return an iterator over stored inodes\n    */\n   public Iterator<InodeView> iterator() {\n-    return new RocksInodeViewIterator(db().newIterator(mInodesColumn.get()));\n+    return RocksUtils.createIterator(db().newIterator(mInodesColumn.get()),\n+        (iter) -> getMutable(Longs.fromByteArray(iter.key()), ReadOption.defaults()).get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9798fc8286f4509fdd1af47211f15a2c3180cb40"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2029, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}