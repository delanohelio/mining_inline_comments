{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNzYxMzU1", "number": 11210, "title": "Implement LFU evictor for client cache", "bodyText": "", "createdAt": "2020-03-25T18:39:18Z", "url": "https://github.com/Alluxio/alluxio/pull/11210", "merged": true, "mergeCommit": {"oid": "408952af350286ef7993fe82897d3a65301c1861"}, "closed": true, "closedAt": "2020-03-30T18:53:52Z", "author": {"login": "bf8086"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQ8ENFAH2gAyMzkzNzYxMzU1OmE1YWNiZTg4NjQ3NTM4NmNiZjViZTMyYzA5ZDM1YjdkMDY2MTZkY2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcSy8W9AFqTM4NDEyNzYwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a5acbe886475386cbf5be32c09d35b7d06616dcb", "author": {"user": {"login": "bf8086", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/a5acbe886475386cbf5be32c09d35b7d06616dcb", "committedDate": "2020-03-25T00:07:46Z", "message": "implement LFU evictor for client cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5932fab0838aaf2ec3a6a7d3c38b7caf38e8c927", "author": {"user": {"login": "bf8086", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/5932fab0838aaf2ec3a6a7d3c38b7caf38e8c927", "committedDate": "2020-03-25T23:39:46Z", "message": "Make log base configurable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6e7db50a177aeda497855023587bab1c3f1339b", "author": {"user": {"login": "bf8086", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/a6e7db50a177aeda497855023587bab1c3f1339b", "committedDate": "2020-03-26T06:26:03Z", "message": "fix indentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMjU3MzYy", "url": "https://github.com/Alluxio/alluxio/pull/11210#pullrequestreview-382257362", "createdAt": "2020-03-26T17:46:16Z", "commit": {"oid": "a6e7db50a177aeda497855023587bab1c3f1339b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzo0NjoxN1rOF8S-pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODowOTowM1rOF8T_aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2OTgyOQ==", "bodyText": "nit: save Math.log(mLogBase)) as a constant since we need this frequently?", "url": "https://github.com/Alluxio/alluxio/pull/11210#discussion_r398769829", "createdAt": "2020-03-26T17:46:17Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/evictor/LFUCacheEvictor.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.file.cache.evictor;\n+\n+import alluxio.client.file.cache.CacheEvictor;\n+import alluxio.client.file.cache.PageId;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+\n+import java.util.HashMap;\n+import java.util.LinkedHashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * LFU client-side cache eviction policy.\n+ */\n+@ThreadSafe\n+public class LFUCacheEvictor implements CacheEvictor {\n+  private static final int PAGE_MAP_INIT_CAPACITY = 200;\n+  private static final float PAGE_MAP_INIT_LOAD_FACTOR = 0.75f;\n+  private static final int BUCKET_MAP_INIT_CAPACITY = 32;\n+  private static final float BUCKET_MAP_INIT_LOAD_FACTOR = 0.75f;\n+\n+  private final Map<PageId, Integer> mPageMap = new HashMap<>(\n+      PAGE_MAP_INIT_CAPACITY, PAGE_MAP_INIT_LOAD_FACTOR);\n+\n+  private final Map<Integer, Set<PageId>> mBucketMap =\n+      new HashMap<>(BUCKET_MAP_INIT_CAPACITY, BUCKET_MAP_INIT_LOAD_FACTOR);\n+  private int mMinBucket = -1;\n+  private final double mLogBase;\n+\n+  /**\n+   * Required constructor.\n+   *\n+   * @param conf Alluxio configuration\n+   */\n+  public LFUCacheEvictor(AlluxioConfiguration conf) {\n+    mLogBase = conf.getDouble(PropertyKey.USER_CLIENT_CACHE_EVICTOR_LFU_LOGBASE);\n+  }\n+\n+  private int getBucket(int count) {\n+    return (int) (Math.log(count) / Math.log(mLogBase));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e7db50a177aeda497855023587bab1c3f1339b"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc4NjQwOQ==", "bodyText": "If we change LinkedHashSet to LinkedHashMap with access order (check LRUCacheEvictor), don't we have a LRU bucket in that case? @calvinjia", "url": "https://github.com/Alluxio/alluxio/pull/11210#discussion_r398786409", "createdAt": "2020-03-26T18:09:03Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/evictor/LFUCacheEvictor.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.file.cache.evictor;\n+\n+import alluxio.client.file.cache.CacheEvictor;\n+import alluxio.client.file.cache.PageId;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+\n+import java.util.HashMap;\n+import java.util.LinkedHashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * LFU client-side cache eviction policy.\n+ */\n+@ThreadSafe\n+public class LFUCacheEvictor implements CacheEvictor {\n+  private static final int PAGE_MAP_INIT_CAPACITY = 200;\n+  private static final float PAGE_MAP_INIT_LOAD_FACTOR = 0.75f;\n+  private static final int BUCKET_MAP_INIT_CAPACITY = 32;\n+  private static final float BUCKET_MAP_INIT_LOAD_FACTOR = 0.75f;\n+\n+  private final Map<PageId, Integer> mPageMap = new HashMap<>(\n+      PAGE_MAP_INIT_CAPACITY, PAGE_MAP_INIT_LOAD_FACTOR);\n+\n+  private final Map<Integer, Set<PageId>> mBucketMap =\n+      new HashMap<>(BUCKET_MAP_INIT_CAPACITY, BUCKET_MAP_INIT_LOAD_FACTOR);\n+  private int mMinBucket = -1;\n+  private final double mLogBase;\n+\n+  /**\n+   * Required constructor.\n+   *\n+   * @param conf Alluxio configuration\n+   */\n+  public LFUCacheEvictor(AlluxioConfiguration conf) {\n+    mLogBase = conf.getDouble(PropertyKey.USER_CLIENT_CACHE_EVICTOR_LFU_LOGBASE);\n+  }\n+\n+  private int getBucket(int count) {\n+    return (int) (Math.log(count) / Math.log(mLogBase));\n+  }\n+\n+  private void addPageToBucket(PageId pageId, int bucket) {\n+    mBucketMap.compute(bucket, (bucketKey, pageSet) -> {\n+      Set<PageId> set = pageSet == null ? new LinkedHashSet<>() : pageSet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e7db50a177aeda497855023587bab1c3f1339b"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMzA3NTgx", "url": "https://github.com/Alluxio/alluxio/pull/11210#pullrequestreview-382307581", "createdAt": "2020-03-26T18:43:26Z", "commit": {"oid": "a6e7db50a177aeda497855023587bab1c3f1339b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODo0MzoyNlrOF8VV9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODo0MzoyNlrOF8VV9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwODU2Ng==", "bodyText": "oops", "url": "https://github.com/Alluxio/alluxio/pull/11210#discussion_r398808566", "createdAt": "2020-03-26T18:43:26Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/evictor/LRUCacheEvictor.java", "diffHunk": "@@ -36,6 +37,14 @@\n       Collections.synchronizedMap(new LinkedHashMap<>(LINKED_HASH_MAP_INIT_CAPACITY,\n           LINKED_HASH_MAP_INIT_LOAD_FACTOR, LINKED_HASH_MAP_ACCESS_ORDERED));\n \n+  /**\n+   * Required constructor.\n+   *\n+   * @param conf Alluxio configuration\n+   */\n+  public LRUCacheEvictor(AlluxioConfiguration conf) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e7db50a177aeda497855023587bab1c3f1339b"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dce3058f3cfda59eb4be771f36bd2e5bf97b5388", "author": {"user": {"login": "bf8086", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/dce3058f3cfda59eb4be771f36bd2e5bf97b5388", "committedDate": "2020-03-26T23:59:16Z", "message": "use LRU in-bucket order"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e48bcbc7da159ecffab66ae73f2feffb2532180", "author": {"user": {"login": "bf8086", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/5e48bcbc7da159ecffab66ae73f2feffb2532180", "committedDate": "2020-03-27T22:34:52Z", "message": "add logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62d811b937eb97886d5478428273d5538af68b0b", "author": {"user": {"login": "bf8086", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/62d811b937eb97886d5478428273d5538af68b0b", "committedDate": "2020-03-27T23:10:46Z", "message": "fix checkstyles"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MTI3NjAx", "url": "https://github.com/Alluxio/alluxio/pull/11210#pullrequestreview-384127601", "createdAt": "2020-03-30T18:37:54Z", "commit": {"oid": "62d811b937eb97886d5478428273d5538af68b0b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4706, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}