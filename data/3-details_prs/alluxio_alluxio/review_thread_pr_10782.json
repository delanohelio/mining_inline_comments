{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2MTAwMzg0", "number": 10782, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMjo1MzoxNVrODaVpPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjo1ODozNlrODbDWZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTQ0MTg4OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fsadmin/command/ReportCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMjo1MzoxNVrOFhPSoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMjo1MzoxNVrOFhPSoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM5Nzg1Ng==", "bodyText": "One line?", "url": "https://github.com/Alluxio/alluxio/pull/10782#discussion_r370397856", "createdAt": "2020-01-23T22:53:15Z", "author": {"login": "calvinjia"}, "path": "shell/src/main/java/alluxio/cli/fsadmin/command/ReportCommand.java", "diffHunk": "@@ -149,7 +149,7 @@ public int run(CommandLine cl) throws IOException {\n         break;\n       case METRICS:\n         MetricsCommand metricsCommand = new MetricsCommand(\n-            mMetaClient, mPrintStream);\n+            mMetricsClient, mPrintStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9169b1b8ffad540d8706d2698f78293fd7428c00"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTQ0NTAxOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fsadmin/report/MetricsCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMjo1NDo0NlrOFhPUng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMzo1NDoyM1rOFhQZDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM5ODM2Ng==", "bodyText": "There is no easy way to iterate over these? Could we just output the values in the map, that would also avoid the need to expose getMasterMetricName?", "url": "https://github.com/Alluxio/alluxio/pull/10782#discussion_r370398366", "createdAt": "2020-01-23T22:54:46Z", "author": {"login": "calvinjia"}, "path": "shell/src/main/java/alluxio/cli/fsadmin/report/MetricsCommand.java", "diffHunk": "@@ -120,40 +126,68 @@ public int run() throws IOException {\n         + String.format(mInfoFormat, \"Miss\", cacheMissPercentage));\n \n     mPrintStream.println(\"\\nLogical Operations: \");\n-    printMetric(MasterMetrics.DIRECTORIES_CREATED, \"Directories Created\", false);\n-    printMetric(MasterMetrics.FILE_BLOCK_INFOS_GOT, \"File Block Infos Got\", false);\n-    printMetric(MasterMetrics.FILE_INFOS_GOT, \"File Infos Got\", false);\n-    printMetric(MasterMetrics.FILES_COMPLETED, \"Files Completed\", false);\n-    printMetric(MasterMetrics.FILES_CREATED, \"Files Created\", false);\n-    printMetric(MasterMetrics.FILES_FREED, \"Files Freed\", false);\n-    printMetric(MasterMetrics.FILES_PERSISTED, \"Files Persisted\", false);\n-    printMetric(MasterMetrics.NEW_BLOCKS_GOT, \"New Blocks Got\", false);\n-    printMetric(MasterMetrics.PATHS_DELETED, \"Paths Deleted\", false);\n-    printMetric(MasterMetrics.PATHS_MOUNTED, \"Paths Mounted\", false);\n-    printMetric(MasterMetrics.PATHS_RENAMED, \"Paths Renamed\", false);\n-    printMetric(MasterMetrics.PATHS_UNMOUNTED, \"Paths Unmounted\", false);\n+    printMetric(MetricsSystem.getMasterMetricName(MasterMetrics.DIRECTORIES_CREATED),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9169b1b8ffad540d8706d2698f78293fd7428c00"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQxNTg4Ng==", "bodyText": "Previously we want fsadmin report metrics similar to the master web ui metrics page, that's why we add those complicate logic to add nick name to those metrics. I agreed that we can modify to directly output contents in the map and maybe sort the metrics according to prefix (master/cluster/worker)", "url": "https://github.com/Alluxio/alluxio/pull/10782#discussion_r370415886", "createdAt": "2020-01-23T23:54:23Z", "author": {"login": "LuQQiu"}, "path": "shell/src/main/java/alluxio/cli/fsadmin/report/MetricsCommand.java", "diffHunk": "@@ -120,40 +126,68 @@ public int run() throws IOException {\n         + String.format(mInfoFormat, \"Miss\", cacheMissPercentage));\n \n     mPrintStream.println(\"\\nLogical Operations: \");\n-    printMetric(MasterMetrics.DIRECTORIES_CREATED, \"Directories Created\", false);\n-    printMetric(MasterMetrics.FILE_BLOCK_INFOS_GOT, \"File Block Infos Got\", false);\n-    printMetric(MasterMetrics.FILE_INFOS_GOT, \"File Infos Got\", false);\n-    printMetric(MasterMetrics.FILES_COMPLETED, \"Files Completed\", false);\n-    printMetric(MasterMetrics.FILES_CREATED, \"Files Created\", false);\n-    printMetric(MasterMetrics.FILES_FREED, \"Files Freed\", false);\n-    printMetric(MasterMetrics.FILES_PERSISTED, \"Files Persisted\", false);\n-    printMetric(MasterMetrics.NEW_BLOCKS_GOT, \"New Blocks Got\", false);\n-    printMetric(MasterMetrics.PATHS_DELETED, \"Paths Deleted\", false);\n-    printMetric(MasterMetrics.PATHS_MOUNTED, \"Paths Mounted\", false);\n-    printMetric(MasterMetrics.PATHS_RENAMED, \"Paths Renamed\", false);\n-    printMetric(MasterMetrics.PATHS_UNMOUNTED, \"Paths Unmounted\", false);\n+    printMetric(MetricsSystem.getMasterMetricName(MasterMetrics.DIRECTORIES_CREATED),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM5ODM2Ng=="}, "originalCommit": {"oid": "9169b1b8ffad540d8706d2698f78293fd7428c00"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjkyNjcxOnYy", "diffSide": "RIGHT", "path": "tests/src/test/java/alluxio/server/ft/journal/TriggeredCheckpointTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjo1Njo1M1rOFiUWtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNjowNzo1MlrOFiaEzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUyOTM5Ng==", "bodyText": "is the cast here correct? Or should we make numFiles + 1 a double (applies to all cases in tests)", "url": "https://github.com/Alluxio/alluxio/pull/10782#discussion_r371529396", "createdAt": "2020-01-27T22:56:53Z", "author": {"login": "calvinjia"}, "path": "tests/src/test/java/alluxio/server/ft/journal/TriggeredCheckpointTest.java", "diffHunk": "@@ -107,9 +107,9 @@ private void createFiles(MultiProcessCluster cluster, int numFiles)\n     for (int i = 0; i < numFiles; i++) {\n       fs.createFile(new AlluxioURI(\"/file\" + i)).close();\n     }\n-    MetaMasterClient meta = cluster.getMetaMasterClient();\n-    assertEquals(numFiles + 1,\n-        meta.getMetrics().get(\"Master.\" + MasterMetrics.TOTAL_PATHS).getLongValue());\n+    MetricsMasterClient metricsMasterClient = cluster.getMetricsMasterClient();\n+    assertEquals(numFiles + 1, (long) metricsMasterClient\n+        .getMetrics().get(\"Master.\" + MasterMetrics.TOTAL_PATHS).getDoubleValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ea721602ec2d3355b0a51bf1dade5e9da9919e8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYyMzExOQ==", "bodyText": "The reason that I make double -> long is that assertEquals(double,double) is deprecated and may have some problems in double comparison.", "url": "https://github.com/Alluxio/alluxio/pull/10782#discussion_r371623119", "createdAt": "2020-01-28T06:07:52Z", "author": {"login": "LuQQiu"}, "path": "tests/src/test/java/alluxio/server/ft/journal/TriggeredCheckpointTest.java", "diffHunk": "@@ -107,9 +107,9 @@ private void createFiles(MultiProcessCluster cluster, int numFiles)\n     for (int i = 0; i < numFiles; i++) {\n       fs.createFile(new AlluxioURI(\"/file\" + i)).close();\n     }\n-    MetaMasterClient meta = cluster.getMetaMasterClient();\n-    assertEquals(numFiles + 1,\n-        meta.getMetrics().get(\"Master.\" + MasterMetrics.TOTAL_PATHS).getLongValue());\n+    MetricsMasterClient metricsMasterClient = cluster.getMetricsMasterClient();\n+    assertEquals(numFiles + 1, (long) metricsMasterClient\n+        .getMetrics().get(\"Master.\" + MasterMetrics.TOTAL_PATHS).getDoubleValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUyOTM5Ng=="}, "originalCommit": {"oid": "5ea721602ec2d3355b0a51bf1dade5e9da9919e8"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjkzMDMxOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fsadmin/report/MetricsCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjo1ODozNlrOFiUY5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNjowODo1NFrOFiaFog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUyOTk1Nw==", "bodyText": "Do we want to use tabs or something for pretty alignment?", "url": "https://github.com/Alluxio/alluxio/pull/10782#discussion_r371529957", "createdAt": "2020-01-27T22:58:36Z", "author": {"login": "calvinjia"}, "path": "shell/src/main/java/alluxio/cli/fsadmin/report/MetricsCommand.java", "diffHunk": "@@ -11,44 +11,44 @@\n \n package alluxio.cli.fsadmin.report;\n \n-import alluxio.client.meta.MetaMasterClient;\n+import alluxio.client.metrics.MetricsMasterClient;\n import alluxio.grpc.MetricValue;\n-import alluxio.metrics.ClientMetrics;\n-import alluxio.metrics.MasterMetrics;\n-import alluxio.metrics.MetricsSystem;\n-import alluxio.metrics.WorkerMetrics;\n import alluxio.util.FormatUtils;\n \n+import com.google.common.math.DoubleMath;\n+\n import java.io.IOException;\n import java.io.PrintStream;\n import java.text.DecimalFormat;\n import java.text.DecimalFormatSymbols;\n import java.util.Locale;\n import java.util.Map;\n-import java.util.TreeMap;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n \n /**\n  * Prints Alluxio metrics information.\n  */\n public class MetricsCommand {\n+  private static final String BYTES_METRIC_IDENTIFIER = \"Bytes\";\n+  private static final String THROUGHPUT_METRIC_IDENTIFIER = \"Throughput\";\n   private static final DecimalFormat DECIMAL_FORMAT\n       = new DecimalFormat(\"###,###.#####\", new DecimalFormatSymbols(Locale.US));\n-  private static final String INDENT = \"    \";\n+  private static final String INFO_FORMAT = \"%s  (Type: %s, Value: %s)%n\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ea721602ec2d3355b0a51bf1dade5e9da9919e8"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYyMzMzMA==", "bodyText": "We have no categories in the new way of printing all the metrics. Previously indent is used for separating category name and its values. So I remove the indent.", "url": "https://github.com/Alluxio/alluxio/pull/10782#discussion_r371623330", "createdAt": "2020-01-28T06:08:54Z", "author": {"login": "LuQQiu"}, "path": "shell/src/main/java/alluxio/cli/fsadmin/report/MetricsCommand.java", "diffHunk": "@@ -11,44 +11,44 @@\n \n package alluxio.cli.fsadmin.report;\n \n-import alluxio.client.meta.MetaMasterClient;\n+import alluxio.client.metrics.MetricsMasterClient;\n import alluxio.grpc.MetricValue;\n-import alluxio.metrics.ClientMetrics;\n-import alluxio.metrics.MasterMetrics;\n-import alluxio.metrics.MetricsSystem;\n-import alluxio.metrics.WorkerMetrics;\n import alluxio.util.FormatUtils;\n \n+import com.google.common.math.DoubleMath;\n+\n import java.io.IOException;\n import java.io.PrintStream;\n import java.text.DecimalFormat;\n import java.text.DecimalFormatSymbols;\n import java.util.Locale;\n import java.util.Map;\n-import java.util.TreeMap;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n \n /**\n  * Prints Alluxio metrics information.\n  */\n public class MetricsCommand {\n+  private static final String BYTES_METRIC_IDENTIFIER = \"Bytes\";\n+  private static final String THROUGHPUT_METRIC_IDENTIFIER = \"Throughput\";\n   private static final DecimalFormat DECIMAL_FORMAT\n       = new DecimalFormat(\"###,###.#####\", new DecimalFormatSymbols(Locale.US));\n-  private static final String INDENT = \"    \";\n+  private static final String INFO_FORMAT = \"%s  (Type: %s, Value: %s)%n\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUyOTk1Nw=="}, "originalCommit": {"oid": "5ea721602ec2d3355b0a51bf1dade5e9da9919e8"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2094, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}