{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwMzcxNDQy", "number": 12501, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDoyNDo1MVrOE4r1pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDoyNDo1MVrOE4r1pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3ODczOTU3OnYy", "diffSide": "RIGHT", "path": "integration/tools/validation/src/main/java/alluxio/cli/UfsVersionValidationTask.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDoyNDo1MVrOHywRkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNzo0NToxMFrOHy4xUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk4MTc3Nw==", "bodyText": "Do you think it's possible there's a case where the user should have configured the UNDERFS_VERSION but did not?", "url": "https://github.com/Alluxio/alluxio/pull/12501#discussion_r522981777", "createdAt": "2020-11-13T14:24:51Z", "author": {"login": "jiacheliu3"}, "path": "integration/tools/validation/src/main/java/alluxio/cli/UfsVersionValidationTask.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package alluxio.cli;\n+\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+import alluxio.underfs.UnderFileSystemFactoryRegistry;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * This validates the UFS configuration for a users configured UFS path. It ensures that the\n+ * version of the UFS library is available (if configured).\n+ */\n+@ApplicableUfsType(ApplicableUfsType.Type.ALL)\n+public class UfsVersionValidationTask extends AbstractValidationTask {\n+\n+  private final String mUfsPath;\n+  private final AlluxioConfiguration mConf;\n+\n+    /**\n+     * Create a new instance of {@link UfsVersionValidationTask}.\n+     *\n+     * @param ufsPath the UFS URI to test\n+     * @param ufsConf the configuration for the UFS URI\n+     */\n+  public UfsVersionValidationTask(String ufsPath, AlluxioConfiguration ufsConf) {\n+    mUfsPath = ufsPath;\n+    mConf = ufsConf;\n+  }\n+\n+  @Override\n+  protected ValidationTaskResult validateImpl(Map<String, String> optionMap) {\n+    UnderFileSystemConfiguration ufsConf =\n+          UnderFileSystemConfiguration.defaults(mConf).createMountSpecificConf(optionMap);\n+    String configuredVersion = mConf.get(PropertyKey.UNDERFS_VERSION);\n+    List<String> availableVersions =\n+        UnderFileSystemFactoryRegistry.getSupportedVersions(mUfsPath, ufsConf);\n+    ValidationTaskResult result = new ValidationTaskResult();\n+    result.setName(getName());\n+    result.setDesc(\"Validates that the configured UFS version exists as a library on the \"\n+        + \"system.\");\n+\n+    if (!mConf.isSetByUser(PropertyKey.UNDERFS_VERSION)) {\n+      result.setState(ValidationUtils.State.SKIPPED);\n+      result.setOutput(\"The UFS version was not configured by the user.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1e5457f6a70f02984202089821ac53710418162"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzExMzQ3NA==", "bodyText": "Users should only configure UFS version in the case that UFSes support a version. In our current implementation, Alluxio doesn't require a version to be specified, even if there is more than one version supported. It just picks a default if it is not configured. So, it is not necessary for a ever configure a version for a UFS to be chosen.\nHowever, there is a a chance that the default version used is not compatible with the particular UFS. This may induce runtime errors upon connection or data transfer. In those cases we defer to the other UFS checks to flesh our those errors. This check is designed just to make sure that the configured version corresponds to a valid Alluxio UFS library. There's no good way to detect is the UFS is actually compatible at runtime. And even if it's not, any errors that occur likely won't say anything along the line of \"hey, you're using the wrong client version\". It will be much more difficult to decipher.\ntl;dr yes, it is possible but determining the case in which the UFS version is wrong is a non-trivial problem", "url": "https://github.com/Alluxio/alluxio/pull/12501#discussion_r523113474", "createdAt": "2020-11-13T17:33:24Z", "author": {"login": "ZacBlanco"}, "path": "integration/tools/validation/src/main/java/alluxio/cli/UfsVersionValidationTask.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package alluxio.cli;\n+\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+import alluxio.underfs.UnderFileSystemFactoryRegistry;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * This validates the UFS configuration for a users configured UFS path. It ensures that the\n+ * version of the UFS library is available (if configured).\n+ */\n+@ApplicableUfsType(ApplicableUfsType.Type.ALL)\n+public class UfsVersionValidationTask extends AbstractValidationTask {\n+\n+  private final String mUfsPath;\n+  private final AlluxioConfiguration mConf;\n+\n+    /**\n+     * Create a new instance of {@link UfsVersionValidationTask}.\n+     *\n+     * @param ufsPath the UFS URI to test\n+     * @param ufsConf the configuration for the UFS URI\n+     */\n+  public UfsVersionValidationTask(String ufsPath, AlluxioConfiguration ufsConf) {\n+    mUfsPath = ufsPath;\n+    mConf = ufsConf;\n+  }\n+\n+  @Override\n+  protected ValidationTaskResult validateImpl(Map<String, String> optionMap) {\n+    UnderFileSystemConfiguration ufsConf =\n+          UnderFileSystemConfiguration.defaults(mConf).createMountSpecificConf(optionMap);\n+    String configuredVersion = mConf.get(PropertyKey.UNDERFS_VERSION);\n+    List<String> availableVersions =\n+        UnderFileSystemFactoryRegistry.getSupportedVersions(mUfsPath, ufsConf);\n+    ValidationTaskResult result = new ValidationTaskResult();\n+    result.setName(getName());\n+    result.setDesc(\"Validates that the configured UFS version exists as a library on the \"\n+        + \"system.\");\n+\n+    if (!mConf.isSetByUser(PropertyKey.UNDERFS_VERSION)) {\n+      result.setState(ValidationUtils.State.SKIPPED);\n+      result.setOutput(\"The UFS version was not configured by the user.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk4MTc3Nw=="}, "originalCommit": {"oid": "c1e5457f6a70f02984202089821ac53710418162"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzEyMDk3Nw==", "bodyText": "I see, that's fair to say. (Should tldr be on the top?)", "url": "https://github.com/Alluxio/alluxio/pull/12501#discussion_r523120977", "createdAt": "2020-11-13T17:45:10Z", "author": {"login": "jiacheliu3"}, "path": "integration/tools/validation/src/main/java/alluxio/cli/UfsVersionValidationTask.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package alluxio.cli;\n+\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+import alluxio.underfs.UnderFileSystemFactoryRegistry;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * This validates the UFS configuration for a users configured UFS path. It ensures that the\n+ * version of the UFS library is available (if configured).\n+ */\n+@ApplicableUfsType(ApplicableUfsType.Type.ALL)\n+public class UfsVersionValidationTask extends AbstractValidationTask {\n+\n+  private final String mUfsPath;\n+  private final AlluxioConfiguration mConf;\n+\n+    /**\n+     * Create a new instance of {@link UfsVersionValidationTask}.\n+     *\n+     * @param ufsPath the UFS URI to test\n+     * @param ufsConf the configuration for the UFS URI\n+     */\n+  public UfsVersionValidationTask(String ufsPath, AlluxioConfiguration ufsConf) {\n+    mUfsPath = ufsPath;\n+    mConf = ufsConf;\n+  }\n+\n+  @Override\n+  protected ValidationTaskResult validateImpl(Map<String, String> optionMap) {\n+    UnderFileSystemConfiguration ufsConf =\n+          UnderFileSystemConfiguration.defaults(mConf).createMountSpecificConf(optionMap);\n+    String configuredVersion = mConf.get(PropertyKey.UNDERFS_VERSION);\n+    List<String> availableVersions =\n+        UnderFileSystemFactoryRegistry.getSupportedVersions(mUfsPath, ufsConf);\n+    ValidationTaskResult result = new ValidationTaskResult();\n+    result.setName(getName());\n+    result.setDesc(\"Validates that the configured UFS version exists as a library on the \"\n+        + \"system.\");\n+\n+    if (!mConf.isSetByUser(PropertyKey.UNDERFS_VERSION)) {\n+      result.setState(ValidationUtils.State.SKIPPED);\n+      result.setOutput(\"The UFS version was not configured by the user.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk4MTc3Nw=="}, "originalCommit": {"oid": "c1e5457f6a70f02984202089821ac53710418162"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1046, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}