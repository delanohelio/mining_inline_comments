{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1OTcyMzQy", "number": 11151, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODozNjozOFrODnM0VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjoxNzoxMVrODnRacg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDMxMDYxOnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODozNjozOFrOF1D6XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMTozNzo1MVrOF1KBSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4Mjk0MQ==", "bodyText": "Since we are using a synchronous queue, should we set core threads to # of async write threads?", "url": "https://github.com/Alluxio/alluxio/pull/11151#discussion_r391182941", "createdAt": "2020-03-11T18:36:38Z", "author": {"login": "calvinjia"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -156,16 +165,22 @@ public static LocalCacheManager create(AlluxioConfiguration conf) throws IOExcep\n    * @param pageStore the page store manages the cache data\n    */\n   @VisibleForTesting\n-  LocalCacheManager(AlluxioConfiguration conf, MetaStore metaStore,\n-      PageStore pageStore, CacheEvictor evictor) {\n+  LocalCacheManager(AlluxioConfiguration conf, MetaStore metaStore, PageStore pageStore,\n+      CacheEvictor evictor) {\n     mMetaStore = metaStore;\n     mPageStore = pageStore;\n     mEvictor = evictor;\n     mPageSize = conf.getBytes(PropertyKey.USER_CLIENT_CACHE_PAGE_SIZE);\n+    mAsyncWrite = conf.getBoolean(PropertyKey.USER_CLIENT_CACHE_ASYNC_WRITE_ENABLED);\n     mCacheSize = pageStore.getCacheSize();\n     for (int i = 0; i < LOCK_SIZE; i++) {\n       mPageLocks[i] = new ReentrantReadWriteLock();\n     }\n+    mPendingRequests = new ConcurrentHashSet<>();\n+    mAsyncCacheExecutor = mAsyncWrite\n+        ? new ThreadPoolExecutor(0, conf.getInt(PropertyKey.USER_CLIENT_CACHE_ASYNC_WRITE_THREADS),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f705e263cbb018c9bdfefbc02b8960be5457c99c"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4MzAxNw==", "bodyText": "Changed", "url": "https://github.com/Alluxio/alluxio/pull/11151#discussion_r391283017", "createdAt": "2020-03-11T21:37:51Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -156,16 +165,22 @@ public static LocalCacheManager create(AlluxioConfiguration conf) throws IOExcep\n    * @param pageStore the page store manages the cache data\n    */\n   @VisibleForTesting\n-  LocalCacheManager(AlluxioConfiguration conf, MetaStore metaStore,\n-      PageStore pageStore, CacheEvictor evictor) {\n+  LocalCacheManager(AlluxioConfiguration conf, MetaStore metaStore, PageStore pageStore,\n+      CacheEvictor evictor) {\n     mMetaStore = metaStore;\n     mPageStore = pageStore;\n     mEvictor = evictor;\n     mPageSize = conf.getBytes(PropertyKey.USER_CLIENT_CACHE_PAGE_SIZE);\n+    mAsyncWrite = conf.getBoolean(PropertyKey.USER_CLIENT_CACHE_ASYNC_WRITE_ENABLED);\n     mCacheSize = pageStore.getCacheSize();\n     for (int i = 0; i < LOCK_SIZE; i++) {\n       mPageLocks[i] = new ReentrantReadWriteLock();\n     }\n+    mPendingRequests = new ConcurrentHashSet<>();\n+    mAsyncCacheExecutor = mAsyncWrite\n+        ? new ThreadPoolExecutor(0, conf.getInt(PropertyKey.USER_CLIENT_CACHE_ASYNC_WRITE_THREADS),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4Mjk0MQ=="}, "originalCommit": {"oid": "f705e263cbb018c9bdfefbc02b8960be5457c99c"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDMxNDA0OnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODozNzozNlrOF1D8cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMTozODo1MlrOF1KDDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4MzQ3NQ==", "bodyText": "Simplify this by logging a succeeded field?", "url": "https://github.com/Alluxio/alluxio/pull/11151#discussion_r391183475", "createdAt": "2020-03-11T18:37:36Z", "author": {"login": "calvinjia"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -209,6 +224,40 @@ private ReadWriteLock getPageLock(PageId pageId) {\n   @Override\n   public boolean put(PageId pageId, byte[] page) {\n     LOG.debug(\"put({},{} bytes) enters\", pageId, page.length);\n+    if (!mAsyncWrite) {\n+      boolean inserted = putInternal(pageId, page);\n+      if (inserted) {\n+        LOG.debug(\"put({},{} bytes) exits\", pageId, page.length);\n+      } else {\n+        LOG.debug(\"put({},{} bytes) fails\", pageId, page.length);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f705e263cbb018c9bdfefbc02b8960be5457c99c"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4MzQ3MA==", "bodyText": "done", "url": "https://github.com/Alluxio/alluxio/pull/11151#discussion_r391283470", "createdAt": "2020-03-11T21:38:52Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -209,6 +224,40 @@ private ReadWriteLock getPageLock(PageId pageId) {\n   @Override\n   public boolean put(PageId pageId, byte[] page) {\n     LOG.debug(\"put({},{} bytes) enters\", pageId, page.length);\n+    if (!mAsyncWrite) {\n+      boolean inserted = putInternal(pageId, page);\n+      if (inserted) {\n+        LOG.debug(\"put({},{} bytes) exits\", pageId, page.length);\n+      } else {\n+        LOG.debug(\"put({},{} bytes) fails\", pageId, page.length);\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4MzQ3NQ=="}, "originalCommit": {"oid": "f705e263cbb018c9bdfefbc02b8960be5457c99c"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDMyMjg5OnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODo0MDowOFrOF1EB8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMTo0MDo1MVrOF1KGMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4NDg4MA==", "bodyText": "Could we add metrics?", "url": "https://github.com/Alluxio/alluxio/pull/11151#discussion_r391184880", "createdAt": "2020-03-11T18:40:08Z", "author": {"login": "calvinjia"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -209,6 +224,40 @@ private ReadWriteLock getPageLock(PageId pageId) {\n   @Override\n   public boolean put(PageId pageId, byte[] page) {\n     LOG.debug(\"put({},{} bytes) enters\", pageId, page.length);\n+    if (!mAsyncWrite) {\n+      boolean inserted = putInternal(pageId, page);\n+      if (inserted) {\n+        LOG.debug(\"put({},{} bytes) exits\", pageId, page.length);\n+      } else {\n+        LOG.debug(\"put({},{} bytes) fails\", pageId, page.length);\n+      }\n+      return inserted;\n+    }\n+\n+    if (!mPendingRequests.add(pageId)) { // already queued\n+      return false;\n+    }\n+    try {\n+      mAsyncCacheExecutor.submit(() -> {\n+        try {\n+          putInternal(pageId, page);\n+        } finally {\n+          mPendingRequests.remove(pageId);\n+        }\n+      });\n+    } catch (RejectedExecutionException e) { // queue is full, skip\n+      // RejectedExecutionException may be thrown in extreme cases when the\n+      // highly concurrent caching workloads. In these cases, return false\n+      mPendingRequests.remove(pageId);\n+      LOG.debug(\"put({},{} bytes) fails due to full queue\", pageId, page.length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f705e263cbb018c9bdfefbc02b8960be5457c99c"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4NDI3Mw==", "bodyText": "added", "url": "https://github.com/Alluxio/alluxio/pull/11151#discussion_r391284273", "createdAt": "2020-03-11T21:40:51Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -209,6 +224,40 @@ private ReadWriteLock getPageLock(PageId pageId) {\n   @Override\n   public boolean put(PageId pageId, byte[] page) {\n     LOG.debug(\"put({},{} bytes) enters\", pageId, page.length);\n+    if (!mAsyncWrite) {\n+      boolean inserted = putInternal(pageId, page);\n+      if (inserted) {\n+        LOG.debug(\"put({},{} bytes) exits\", pageId, page.length);\n+      } else {\n+        LOG.debug(\"put({},{} bytes) fails\", pageId, page.length);\n+      }\n+      return inserted;\n+    }\n+\n+    if (!mPendingRequests.add(pageId)) { // already queued\n+      return false;\n+    }\n+    try {\n+      mAsyncCacheExecutor.submit(() -> {\n+        try {\n+          putInternal(pageId, page);\n+        } finally {\n+          mPendingRequests.remove(pageId);\n+        }\n+      });\n+    } catch (RejectedExecutionException e) { // queue is full, skip\n+      // RejectedExecutionException may be thrown in extreme cases when the\n+      // highly concurrent caching workloads. In these cases, return false\n+      mPendingRequests.remove(pageId);\n+      LOG.debug(\"put({},{} bytes) fails due to full queue\", pageId, page.length);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4NDg4MA=="}, "originalCommit": {"oid": "f705e263cbb018c9bdfefbc02b8960be5457c99c"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTA2MzU0OnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjoxNzoxMVrOF1LJIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjoxNzoxMVrOF1LJIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMwMTQwOA==", "bodyText": "checkstyle?", "url": "https://github.com/Alluxio/alluxio/pull/11151#discussion_r391301408", "createdAt": "2020-03-11T22:17:11Z", "author": {"login": "calvinjia"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -173,14 +173,16 @@ public static LocalCacheManager create(AlluxioConfiguration conf) throws IOExcep\n     mPageSize = conf.getBytes(PropertyKey.USER_CLIENT_CACHE_PAGE_SIZE);\n     mAsyncWrite = conf.getBoolean(PropertyKey.USER_CLIENT_CACHE_ASYNC_WRITE_ENABLED);\n     mCacheSize = pageStore.getCacheSize();\n-    for (int i = 0; i < LOCK_SIZE; i++) {\n+    for (int i = 0; i < LOCK_SIZE; i ++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a8989f2e7ad5ac02164ba34537f98982e051282"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1943, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}