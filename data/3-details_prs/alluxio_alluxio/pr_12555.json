{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzNjMzODM1", "number": 12555, "title": "Add integration tests for stress package", "bodyText": "", "createdAt": "2020-11-19T02:36:38Z", "url": "https://github.com/Alluxio/alluxio/pull/12555", "merged": true, "mergeCommit": {"oid": "cb1aeb1021a0e6779bc080045a41f1b5a5aaf10c"}, "closed": true, "closedAt": "2020-11-19T20:08:31Z", "author": {"login": "gpang"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdd5bvuAH2gAyNTIzNjMzODM1OjI0ZGMxM2M1YjA1MjUzMWYyMGIyZjExOTY2Njg3NmViODcxMDE2YjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdeHDDZAFqTUzNDcxMzQ1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "24dc13c5b052531f20b2f119666876eb871016b3", "author": {"user": {"login": "gpang", "name": "Gene Pang"}}, "url": "https://github.com/Alluxio/alluxio/commit/24dc13c5b052531f20b2f119666876eb871016b3", "committedDate": "2020-11-19T02:35:56Z", "message": "Add integration tests for stress package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7978e2ff4222bbc6215bada22c7e2472229847c3", "author": {"user": {"login": "gpang", "name": "Gene Pang"}}, "url": "https://github.com/Alluxio/alluxio/commit/7978e2ff4222bbc6215bada22c7e2472229847c3", "committedDate": "2020-11-19T03:48:07Z", "message": "Run stress tests with actions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c7925925eb12d4fa9b407b18b07bd0e2aef1879", "author": {"user": {"login": "gpang", "name": "Gene Pang"}}, "url": "https://github.com/Alluxio/alluxio/commit/7c7925925eb12d4fa9b407b18b07bd0e2aef1879", "committedDate": "2020-11-19T04:19:06Z", "message": "Update definitions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0Njc4MTAy", "url": "https://github.com/Alluxio/alluxio/pull/12555#pullrequestreview-534678102", "createdAt": "2020-11-19T17:22:09Z", "commit": {"oid": "7c7925925eb12d4fa9b407b18b07bd0e2aef1879"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNzoyMjowOVrOH2pb-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNzozMDowMVrOH2pwzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA2NDA1Nw==", "bodyText": "Want to add @VisibleForTesting?", "url": "https://github.com/Alluxio/alluxio/pull/12555#discussion_r527064057", "createdAt": "2020-11-19T17:22:09Z", "author": {"login": "bradyoo"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/report/GenerateReport.java", "diffHunk": "@@ -57,10 +57,18 @@ public static void main(String[] args) {\n     new GenerateReport().run(args);\n   }\n \n-  GenerateReport() {\n+  /**\n+   * Creates an instance.\n+   */\n+  public GenerateReport() {\n   }\n \n-  private void run(String[] args) {\n+  /**\n+   * Runs the report generation tool.\n+   *\n+   * @param args the args\n+   */\n+  public void run(String[] args) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c7925925eb12d4fa9b407b18b07bd0e2aef1879"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA2NjA4OQ==", "bodyText": "I think we should be using different name then output since output is used multiple times here to mean different things.", "url": "https://github.com/Alluxio/alluxio/pull/12555#discussion_r527066089", "createdAt": "2020-11-19T17:25:12Z", "author": {"login": "bradyoo"}, "path": "tests/src/test/java/alluxio/stress/StressClientIOBenchIntegrationTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.stress;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import alluxio.stress.cli.client.StressClientIOBench;\n+import alluxio.stress.cli.report.GenerateReport;\n+import alluxio.testutils.BaseIntegrationTest;\n+import alluxio.testutils.LocalAlluxioClusterResource;\n+\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.rules.TestRule;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * Tests {@link StressClientIOBench}.\n+ */\n+public class StressClientIOBenchIntegrationTest extends BaseIntegrationTest {\n+  @ClassRule\n+  public static LocalAlluxioClusterResource sLocalAlluxioClusterResource =\n+      new LocalAlluxioClusterResource.Builder().build();\n+\n+  @Rule\n+  public TestRule mResetRule = sLocalAlluxioClusterResource.getResetResource();\n+\n+  @Rule\n+  public TemporaryFolder mFolder = new TemporaryFolder();\n+\n+  @Test\n+  public void readArray() throws Exception {\n+    // Only in-process will work for unit testing.\n+    String output1 = new StressClientIOBench().run(new String[] {\n+        \"--in-process\",\n+        \"--tag\", \"ReadArray-NOT_RANDOM\",\n+        \"--start-ms\", Long.toString(System.currentTimeMillis() + 1000),\n+        \"--base\", sLocalAlluxioClusterResource.get().getMasterURI() + \"/\",\n+        \"--operation\", \"ReadArray\",\n+        \"--threads\", \"2\",\n+        \"--file-size\", \"1m\",\n+        \"--block-size\", \"128k\",\n+        \"--warmup\", \"0s\", \"--duration\", \"1s\",\n+    });\n+\n+    String output2 = new StressClientIOBench().run(new String[] {\n+        \"--in-process\",\n+        \"--read-random\",\n+        \"--tag\", \"ReadArray-RANDOM\",\n+        \"--start-ms\", Long.toString(System.currentTimeMillis() + 1000),\n+        \"--base\", sLocalAlluxioClusterResource.get().getMasterURI() + \"/\",\n+        \"--operation\", \"ReadArray\",\n+        \"--threads\", \"2\",\n+        \"--file-size\", \"1m\",\n+        \"--block-size\", \"128k\",\n+        \"--warmup\", \"0s\", \"--duration\", \"1s\",\n+    });\n+    generateAndVerifyReport(Arrays.asList(\"ReadArray-NOT_RANDOM\", \"ReadArray-RANDOM\"), output1,\n+        output2);\n+  }\n+\n+  @Test\n+  public void posRead() throws Exception {\n+    // Only in-process will work for unit testing.\n+    String output1 = new StressClientIOBench().run(new String[] {\n+        \"--in-process\",\n+        \"--tag\", \"PosRead-NOT_RANDOM\",\n+        \"--start-ms\", Long.toString(System.currentTimeMillis() + 1000),\n+        \"--base\", sLocalAlluxioClusterResource.get().getMasterURI() + \"/\",\n+        \"--operation\", \"PosRead\",\n+        \"--threads\", \"2\",\n+        \"--file-size\", \"1m\",\n+        \"--block-size\", \"128k\",\n+        \"--warmup\", \"0s\", \"--duration\", \"1s\",\n+    });\n+\n+    String output2 = new StressClientIOBench().run(new String[] {\n+        \"--in-process\",\n+        \"--read-random\",\n+        \"--tag\", \"PosRead-RANDOM\",\n+        \"--start-ms\", Long.toString(System.currentTimeMillis() + 1000),\n+        \"--base\", sLocalAlluxioClusterResource.get().getMasterURI() + \"/\",\n+        \"--operation\", \"PosRead\",\n+        \"--threads\", \"2\",\n+        \"--file-size\", \"1m\",\n+        \"--block-size\", \"128k\",\n+        \"--warmup\", \"0s\", \"--duration\", \"1s\",\n+    });\n+    generateAndVerifyReport(Arrays.asList(\"PosRead-NOT_RANDOM\", \"PosRead-RANDOM\"), output1,\n+        output2);\n+  }\n+\n+  private void generateAndVerifyReport(List<String> expectedGraphNames, String... outputJson)\n+      throws Exception {\n+    List<String> args = new ArrayList<>();\n+\n+    // write out the jsons outputs to files (for the input of generate)\n+    for (String output : outputJson) {\n+      File input = mFolder.newFile();\n+      try (FileWriter writer = new FileWriter(input)) {\n+        writer.write(output);\n+      }\n+      args.add(\"--input\");\n+      args.add(input.getAbsolutePath());\n+    }\n+\n+    // generate the output\n+    File output = mFolder.newFile(\"report.html\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c7925925eb12d4fa9b407b18b07bd0e2aef1879"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA2OTM5MQ==", "bodyText": "generateAndVerifyReport looks exactly the same between all 3 of these integration tests and probably would benefit from having a common super class.", "url": "https://github.com/Alluxio/alluxio/pull/12555#discussion_r527069391", "createdAt": "2020-11-19T17:30:01Z", "author": {"login": "bradyoo"}, "path": "tests/src/test/java/alluxio/stress/StressWorkerBenchIntegrationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.stress;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import alluxio.stress.cli.report.GenerateReport;\n+import alluxio.stress.cli.worker.StressWorkerBench;\n+import alluxio.testutils.BaseIntegrationTest;\n+import alluxio.testutils.LocalAlluxioClusterResource;\n+\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.rules.TestRule;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Tests {@link StressWorkerBench}.\n+ */\n+public class StressWorkerBenchIntegrationTest extends BaseIntegrationTest {\n+  @ClassRule\n+  public static LocalAlluxioClusterResource sLocalAlluxioClusterResource =\n+      new LocalAlluxioClusterResource.Builder().build();\n+\n+  @Rule\n+  public TestRule mResetRule = sLocalAlluxioClusterResource.getResetResource();\n+\n+  @Rule\n+  public TemporaryFolder mFolder = new TemporaryFolder();\n+\n+  @Test\n+  public void readArray() throws Exception {\n+    // Only in-process will work for unit testing.\n+    String output = new StressWorkerBench().run(new String[] {\n+        \"--in-process\",\n+        \"--start-ms\", Long.toString(System.currentTimeMillis() + 1000),\n+        \"--base\", sLocalAlluxioClusterResource.get().getMasterURI() + \"/stress-worker-base/\",\n+        \"--threads\", \"2\",\n+        \"--file-size\", \"1m\",\n+        \"--block-size\", \"128k\",\n+        \"--warmup\", \"0s\", \"--duration\", \"1s\",\n+    });\n+\n+    generateAndVerifyReport(Collections.singletonList(\"Worker Throughput\"), output);\n+  }\n+\n+  private void generateAndVerifyReport(List<String> expectedGraphNames, String... outputJson)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c7925925eb12d4fa9b407b18b07bd0e2aef1879"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76590d27e9a4e788972f0bbec2982d80bf12925e", "author": {"user": {"login": "gpang", "name": "Gene Pang"}}, "url": "https://github.com/Alluxio/alluxio/commit/76590d27e9a4e788972f0bbec2982d80bf12925e", "committedDate": "2020-11-19T18:25:36Z", "message": "Improve tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0NzEzNDUz", "url": "https://github.com/Alluxio/alluxio/pull/12555#pullrequestreview-534713453", "createdAt": "2020-11-19T18:03:38Z", "commit": {"oid": "7c7925925eb12d4fa9b407b18b07bd0e2aef1879"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxODowMzozOFrOH2rGYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxODoyNToyNlrOH2r8IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5MTI5Ng==", "bodyText": "Done", "url": "https://github.com/Alluxio/alluxio/pull/12555#discussion_r527091296", "createdAt": "2020-11-19T18:03:38Z", "author": {"login": "gpang"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/report/GenerateReport.java", "diffHunk": "@@ -57,10 +57,18 @@ public static void main(String[] args) {\n     new GenerateReport().run(args);\n   }\n \n-  GenerateReport() {\n+  /**\n+   * Creates an instance.\n+   */\n+  public GenerateReport() {\n   }\n \n-  private void run(String[] args) {\n+  /**\n+   * Runs the report generation tool.\n+   *\n+   * @param args the args\n+   */\n+  public void run(String[] args) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA2NDA1Nw=="}, "originalCommit": {"oid": "7c7925925eb12d4fa9b407b18b07bd0e2aef1879"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEwNDgwMQ==", "bodyText": "Renamed", "url": "https://github.com/Alluxio/alluxio/pull/12555#discussion_r527104801", "createdAt": "2020-11-19T18:25:00Z", "author": {"login": "gpang"}, "path": "tests/src/test/java/alluxio/stress/StressClientIOBenchIntegrationTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.stress;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import alluxio.stress.cli.client.StressClientIOBench;\n+import alluxio.stress.cli.report.GenerateReport;\n+import alluxio.testutils.BaseIntegrationTest;\n+import alluxio.testutils.LocalAlluxioClusterResource;\n+\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.rules.TestRule;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * Tests {@link StressClientIOBench}.\n+ */\n+public class StressClientIOBenchIntegrationTest extends BaseIntegrationTest {\n+  @ClassRule\n+  public static LocalAlluxioClusterResource sLocalAlluxioClusterResource =\n+      new LocalAlluxioClusterResource.Builder().build();\n+\n+  @Rule\n+  public TestRule mResetRule = sLocalAlluxioClusterResource.getResetResource();\n+\n+  @Rule\n+  public TemporaryFolder mFolder = new TemporaryFolder();\n+\n+  @Test\n+  public void readArray() throws Exception {\n+    // Only in-process will work for unit testing.\n+    String output1 = new StressClientIOBench().run(new String[] {\n+        \"--in-process\",\n+        \"--tag\", \"ReadArray-NOT_RANDOM\",\n+        \"--start-ms\", Long.toString(System.currentTimeMillis() + 1000),\n+        \"--base\", sLocalAlluxioClusterResource.get().getMasterURI() + \"/\",\n+        \"--operation\", \"ReadArray\",\n+        \"--threads\", \"2\",\n+        \"--file-size\", \"1m\",\n+        \"--block-size\", \"128k\",\n+        \"--warmup\", \"0s\", \"--duration\", \"1s\",\n+    });\n+\n+    String output2 = new StressClientIOBench().run(new String[] {\n+        \"--in-process\",\n+        \"--read-random\",\n+        \"--tag\", \"ReadArray-RANDOM\",\n+        \"--start-ms\", Long.toString(System.currentTimeMillis() + 1000),\n+        \"--base\", sLocalAlluxioClusterResource.get().getMasterURI() + \"/\",\n+        \"--operation\", \"ReadArray\",\n+        \"--threads\", \"2\",\n+        \"--file-size\", \"1m\",\n+        \"--block-size\", \"128k\",\n+        \"--warmup\", \"0s\", \"--duration\", \"1s\",\n+    });\n+    generateAndVerifyReport(Arrays.asList(\"ReadArray-NOT_RANDOM\", \"ReadArray-RANDOM\"), output1,\n+        output2);\n+  }\n+\n+  @Test\n+  public void posRead() throws Exception {\n+    // Only in-process will work for unit testing.\n+    String output1 = new StressClientIOBench().run(new String[] {\n+        \"--in-process\",\n+        \"--tag\", \"PosRead-NOT_RANDOM\",\n+        \"--start-ms\", Long.toString(System.currentTimeMillis() + 1000),\n+        \"--base\", sLocalAlluxioClusterResource.get().getMasterURI() + \"/\",\n+        \"--operation\", \"PosRead\",\n+        \"--threads\", \"2\",\n+        \"--file-size\", \"1m\",\n+        \"--block-size\", \"128k\",\n+        \"--warmup\", \"0s\", \"--duration\", \"1s\",\n+    });\n+\n+    String output2 = new StressClientIOBench().run(new String[] {\n+        \"--in-process\",\n+        \"--read-random\",\n+        \"--tag\", \"PosRead-RANDOM\",\n+        \"--start-ms\", Long.toString(System.currentTimeMillis() + 1000),\n+        \"--base\", sLocalAlluxioClusterResource.get().getMasterURI() + \"/\",\n+        \"--operation\", \"PosRead\",\n+        \"--threads\", \"2\",\n+        \"--file-size\", \"1m\",\n+        \"--block-size\", \"128k\",\n+        \"--warmup\", \"0s\", \"--duration\", \"1s\",\n+    });\n+    generateAndVerifyReport(Arrays.asList(\"PosRead-NOT_RANDOM\", \"PosRead-RANDOM\"), output1,\n+        output2);\n+  }\n+\n+  private void generateAndVerifyReport(List<String> expectedGraphNames, String... outputJson)\n+      throws Exception {\n+    List<String> args = new ArrayList<>();\n+\n+    // write out the jsons outputs to files (for the input of generate)\n+    for (String output : outputJson) {\n+      File input = mFolder.newFile();\n+      try (FileWriter writer = new FileWriter(input)) {\n+        writer.write(output);\n+      }\n+      args.add(\"--input\");\n+      args.add(input.getAbsolutePath());\n+    }\n+\n+    // generate the output\n+    File output = mFolder.newFile(\"report.html\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA2NjA4OQ=="}, "originalCommit": {"oid": "7c7925925eb12d4fa9b407b18b07bd0e2aef1879"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEwNTA1Ng==", "bodyText": "Thanks! I forgot to refactor this out... I fixed it now.", "url": "https://github.com/Alluxio/alluxio/pull/12555#discussion_r527105056", "createdAt": "2020-11-19T18:25:26Z", "author": {"login": "gpang"}, "path": "tests/src/test/java/alluxio/stress/StressWorkerBenchIntegrationTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.stress;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import alluxio.stress.cli.report.GenerateReport;\n+import alluxio.stress.cli.worker.StressWorkerBench;\n+import alluxio.testutils.BaseIntegrationTest;\n+import alluxio.testutils.LocalAlluxioClusterResource;\n+\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.rules.TestRule;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Tests {@link StressWorkerBench}.\n+ */\n+public class StressWorkerBenchIntegrationTest extends BaseIntegrationTest {\n+  @ClassRule\n+  public static LocalAlluxioClusterResource sLocalAlluxioClusterResource =\n+      new LocalAlluxioClusterResource.Builder().build();\n+\n+  @Rule\n+  public TestRule mResetRule = sLocalAlluxioClusterResource.getResetResource();\n+\n+  @Rule\n+  public TemporaryFolder mFolder = new TemporaryFolder();\n+\n+  @Test\n+  public void readArray() throws Exception {\n+    // Only in-process will work for unit testing.\n+    String output = new StressWorkerBench().run(new String[] {\n+        \"--in-process\",\n+        \"--start-ms\", Long.toString(System.currentTimeMillis() + 1000),\n+        \"--base\", sLocalAlluxioClusterResource.get().getMasterURI() + \"/stress-worker-base/\",\n+        \"--threads\", \"2\",\n+        \"--file-size\", \"1m\",\n+        \"--block-size\", \"128k\",\n+        \"--warmup\", \"0s\", \"--duration\", \"1s\",\n+    });\n+\n+    generateAndVerifyReport(Collections.singletonList(\"Worker Throughput\"), output);\n+  }\n+\n+  private void generateAndVerifyReport(List<String> expectedGraphNames, String... outputJson)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA2OTM5MQ=="}, "originalCommit": {"oid": "7c7925925eb12d4fa9b407b18b07bd0e2aef1879"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3459, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}