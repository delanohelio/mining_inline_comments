{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMDk0NTc0", "number": 11377, "title": "Implement Job Service based master stress tools", "bodyText": "", "createdAt": "2020-05-04T17:52:56Z", "url": "https://github.com/Alluxio/alluxio/pull/11377", "merged": true, "mergeCommit": {"oid": "cc0f1308f4a020cab6099a6622e26a729fe4b755"}, "closed": true, "closedAt": "2020-05-11T22:32:58Z", "author": {"login": "gpang"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccyDczgH2gAyNDEzMDk0NTc0OjZmNTZjOGI1YjhjZmNlYmJkYTg1NWNkN2ZlZGU4NGMwNjE4N2YzYWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgXeNGAFqTQwOTU3NzIyMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6f56c8b5b8cfcebbda855cd7fede84c06187f3ab", "author": {"user": {"login": "gpang", "name": "Gene Pang"}}, "url": "https://github.com/Alluxio/alluxio/commit/6f56c8b5b8cfcebbda855cd7fede84c06187f3ab", "committedDate": "2020-04-30T19:14:59Z", "message": "Update JobGrpcClientUtils.run()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1dd1e1ec2ec5e9faa1e4adfaa290c988227a00a8", "author": {"user": {"login": "gpang", "name": "Gene Pang"}}, "url": "https://github.com/Alluxio/alluxio/commit/1dd1e1ec2ec5e9faa1e4adfaa290c988227a00a8", "committedDate": "2020-05-04T17:51:05Z", "message": "Implement stress job"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d", "author": {"user": {"login": "gpang", "name": "Gene Pang"}}, "url": "https://github.com/Alluxio/alluxio/commit/eff7fe188edf3f6280f1f765ab9eaec8dda4972d", "committedDate": "2020-05-04T18:14:55Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MzE5ODMx", "url": "https://github.com/Alluxio/alluxio/pull/11377#pullrequestreview-405319831", "createdAt": "2020-05-04T20:24:56Z", "commit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDoyNDo1NlrOGQQ0IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMTo0Nzo1NlrOGQTdPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcwNTg4OA==", "bodyText": "Have you inspected the client artifact size after adding this? Is there a significant change?", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419705888", "createdAt": "2020-05-04T20:24:56Z", "author": {"login": "ZacBlanco"}, "path": "assembly/client/pom.xml", "diffHunk": "@@ -51,6 +51,11 @@\n       <artifactId>alluxio-shell</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.alluxio</groupId>\n+      <artifactId>alluxio-stress-shell</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcwNjMyMQ==", "bodyText": "Will it really be necessary to split the stress artifacts into common, client, shell, etc? What are the advantages?", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419706321", "createdAt": "2020-05-04T20:25:41Z", "author": {"login": "ZacBlanco"}, "path": "job/server/pom.xml", "diffHunk": "@@ -85,6 +85,11 @@\n       <artifactId>alluxio-job-client</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.alluxio</groupId>\n+      <artifactId>alluxio-stress-common</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcwNzc1OQ==", "bodyText": "If the resultInfo is null at this point we'd return null. Can we add @Nullable to this method?", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419707759", "createdAt": "2020-05-04T20:28:16Z", "author": {"login": "ZacBlanco"}, "path": "job/client/src/main/java/alluxio/client/job/JobGrpcClientUtils.java", "diffHunk": "@@ -106,6 +107,10 @@ private static JobInfo waitFor(final long jobId, AlluxioConfiguration alluxioCon\n           }\n           return true;\n         }, WaitForOptions.defaults().setInterval(1000));\n+      if (resultInfo != null) {\n+        resultInfo = client.getJobStatusDetailed(resultInfo.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcwODMyOA==", "bodyText": "Can you describe the class parameters in the javadoc?", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419708328", "createdAt": "2020-05-04T20:29:15Z", "author": {"login": "ZacBlanco"}, "path": "job/server/src/main/java/alluxio/job/plan/stress/StressBenchDefinition.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.job.plan.stress;\n+\n+import alluxio.collections.Pair;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.job.RunTaskContext;\n+import alluxio.job.SelectExecutorsContext;\n+import alluxio.job.plan.PlanDefinition;\n+import alluxio.stress.BaseParameters;\n+import alluxio.stress.JsonSerializable;\n+import alluxio.stress.TaskResult;\n+import alluxio.stress.job.StressBenchConfig;\n+import alluxio.util.ShellUtils;\n+import alluxio.wire.WorkerInfo;\n+\n+import com.google.common.collect.Sets;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The definition for the stress bench job, which runs distributed benchmarks.\n+ */\n+public final class StressBenchDefinition\n+    implements PlanDefinition<StressBenchConfig, ArrayList<String>, String> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcwOTAxOQ==", "bodyText": "Can you add a comment about what the --id and concatenation of <address>-<id> are for?", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419709019", "createdAt": "2020-05-04T20:30:24Z", "author": {"login": "ZacBlanco"}, "path": "job/server/src/main/java/alluxio/job/plan/stress/StressBenchDefinition.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.job.plan.stress;\n+\n+import alluxio.collections.Pair;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.job.RunTaskContext;\n+import alluxio.job.SelectExecutorsContext;\n+import alluxio.job.plan.PlanDefinition;\n+import alluxio.stress.BaseParameters;\n+import alluxio.stress.JsonSerializable;\n+import alluxio.stress.TaskResult;\n+import alluxio.stress.job.StressBenchConfig;\n+import alluxio.util.ShellUtils;\n+import alluxio.wire.WorkerInfo;\n+\n+import com.google.common.collect.Sets;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The definition for the stress bench job, which runs distributed benchmarks.\n+ */\n+public final class StressBenchDefinition\n+    implements PlanDefinition<StressBenchConfig, ArrayList<String>, String> {\n+  private static final Logger LOG = LoggerFactory.getLogger(StressBenchDefinition.class);\n+\n+  /**\n+   * Constructs a new instance.\n+   */\n+  public StressBenchDefinition() {\n+  }\n+\n+  @Override\n+  public Class<StressBenchConfig> getJobConfigClass() {\n+    return StressBenchConfig.class;\n+  }\n+\n+  @Override\n+  public Set<Pair<WorkerInfo, ArrayList<String>>> selectExecutors(StressBenchConfig config,\n+      List<WorkerInfo> jobWorkerInfoList, SelectExecutorsContext context) throws Exception {\n+    Set<Pair<WorkerInfo, ArrayList<String>>> result = Sets.newHashSet();\n+    for (WorkerInfo worker : jobWorkerInfoList) {\n+      ArrayList<String> args = new ArrayList<>(2);\n+      args.add(\"--id\");\n+      args.add(worker.getAddress().getHost() + \"-\" + worker.getId());\n+      result.add(new Pair<>(worker, args));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcxMDQzMw==", "bodyText": "Is 5000ms as headroom for job scheduling enough? Should we make this configurable somehow?", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419710433", "createdAt": "2020-05-04T20:33:03Z", "author": {"login": "ZacBlanco"}, "path": "job/server/src/main/java/alluxio/job/plan/stress/StressBenchDefinition.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.job.plan.stress;\n+\n+import alluxio.collections.Pair;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.job.RunTaskContext;\n+import alluxio.job.SelectExecutorsContext;\n+import alluxio.job.plan.PlanDefinition;\n+import alluxio.stress.BaseParameters;\n+import alluxio.stress.JsonSerializable;\n+import alluxio.stress.TaskResult;\n+import alluxio.stress.job.StressBenchConfig;\n+import alluxio.util.ShellUtils;\n+import alluxio.wire.WorkerInfo;\n+\n+import com.google.common.collect.Sets;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The definition for the stress bench job, which runs distributed benchmarks.\n+ */\n+public final class StressBenchDefinition\n+    implements PlanDefinition<StressBenchConfig, ArrayList<String>, String> {\n+  private static final Logger LOG = LoggerFactory.getLogger(StressBenchDefinition.class);\n+\n+  /**\n+   * Constructs a new instance.\n+   */\n+  public StressBenchDefinition() {\n+  }\n+\n+  @Override\n+  public Class<StressBenchConfig> getJobConfigClass() {\n+    return StressBenchConfig.class;\n+  }\n+\n+  @Override\n+  public Set<Pair<WorkerInfo, ArrayList<String>>> selectExecutors(StressBenchConfig config,\n+      List<WorkerInfo> jobWorkerInfoList, SelectExecutorsContext context) throws Exception {\n+    Set<Pair<WorkerInfo, ArrayList<String>>> result = Sets.newHashSet();\n+    for (WorkerInfo worker : jobWorkerInfoList) {\n+      ArrayList<String> args = new ArrayList<>(2);\n+      args.add(\"--id\");\n+      args.add(worker.getAddress().getHost() + \"-\" + worker.getId());\n+      result.add(new Pair<>(worker, args));\n+    }\n+    return result;\n+  }\n+\n+  @Override\n+  public String runTask(StressBenchConfig config, ArrayList<String> args,\n+      RunTaskContext runTaskContext) throws Exception {\n+    List<String> command = new ArrayList<>(3 + config.getArgs().size());\n+    command.add(ServerConfiguration.get(PropertyKey.HOME) + \"/bin/alluxio\");\n+    command.add(\"runClass\");\n+    command.add(config.getClassName());\n+    command.addAll(config.getArgs());\n+    // the cluster will run distributed tasks\n+    command.add(BaseParameters.DISTRIBUTED_FLAG);\n+    command.add(BaseParameters.IN_PROCESS_FLAG);\n+\n+    if (config.getArgs().stream().noneMatch((s) -> s.equals(\"--start-ms\"))) {\n+      command.add(\"--start-ms\");\n+      command.add(Long.toString((System.currentTimeMillis() + 5000)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcxMTQwMQ==", "bodyText": "Another top-level module? IMO, the top-level directory of the repo feels a bit cluttered, but I'm unsure of where else I'd want to put this..", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419711401", "createdAt": "2020-05-04T20:34:53Z", "author": {"login": "ZacBlanco"}, "path": "pom.xml", "diffHunk": "@@ -170,6 +170,7 @@\n     <module>job</module>\n     <module>shaded</module>\n     <module>shell</module>\n+    <module>stress</module>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcxMTg0Nw==", "bodyText": "It looks like you abandoned using the static string pattern for other args. Can we keep it consistent?", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419711847", "createdAt": "2020-05-04T20:35:42Z", "author": {"login": "ZacBlanco"}, "path": "stress/common/src/main/java/alluxio/stress/BaseParameters.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.stress;\n+\n+import com.beust.jcommander.Parameter;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This holds all the parameters. All fields are public for easier json ser/de without all the\n+ * getters and setters.\n+ */\n+public final class BaseParameters {\n+  public static final String CLUSTER_FLAG = \"--cluster\";\n+  public static final String DISTRIBUTED_FLAG = \"--distributed\";\n+  public static final String IN_PROCESS_FLAG = \"--in-process\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcxMjgxNQ==", "bodyText": "Can't we just prefix the space ourselves if it's always required?", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419712815", "createdAt": "2020-05-04T20:37:25Z", "author": {"login": "ZacBlanco"}, "path": "stress/common/src/main/java/alluxio/stress/BaseParameters.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.stress;\n+\n+import com.beust.jcommander.Parameter;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This holds all the parameters. All fields are public for easier json ser/de without all the\n+ * getters and setters.\n+ */\n+public final class BaseParameters {\n+  public static final String CLUSTER_FLAG = \"--cluster\";\n+  public static final String DISTRIBUTED_FLAG = \"--distributed\";\n+  public static final String IN_PROCESS_FLAG = \"--in-process\";\n+  public static final long UNDEFINED_START_MS = -1;\n+\n+  @Parameter(names = {CLUSTER_FLAG},\n+      description = \"If true, runs the benchmark via the job service cluster. Otherwise, runs \"\n+          + \"locally.\")\n+  public boolean mCluster = false;\n+\n+  @Parameter(names = {\"--id\"},\n+      description = \"Any string to uniquely identify this invocation\", hidden = true)\n+  public String mId = \"local-task-0\";\n+\n+  @Parameter(names = {\"--java-opt\"},\n+      description = \"The java options to add to the command line to for the task. This can be \"\n+          + \"repeated. The options must be quoted and prefixed with a space, to avoid getting \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcxNDU4NQ==", "bodyText": "It looks like we create new mappers very frequently. Is that supposed to be the typical use pattern for Jackson? Does creating these have any kind of cost? Can they be re-used?", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419714585", "createdAt": "2020-05-04T20:40:35Z", "author": {"login": "ZacBlanco"}, "path": "stress/common/src/main/java/alluxio/stress/Parameters.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.stress;\n+\n+import alluxio.collections.Pair;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.type.MapType;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Abstract class for parameters of stress tests.\n+ */\n+public abstract class Parameters {\n+  protected Map<String, Object> toMap() {\n+    ObjectMapper mapper = new ObjectMapper();\n+    mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTczMzg3OA==", "bodyText": "hm. Should we be relying on external resources for this? I guess for prototyping it is fine, but in the case we want to test this somewhere without external internet connection, it may not be possible to use this.", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419733878", "createdAt": "2020-05-04T21:16:46Z", "author": {"login": "ZacBlanco"}, "path": "stress/common/src/main/java/alluxio/stress/graph/BarGraph.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.stress.graph;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A bar graph representation.\n+ */\n+public class BarGraph extends Graph {\n+  private static final String VALUE_FIELD = \"y\";\n+  private static final String SERIES_FIELD = \"series\";\n+\n+  /**\n+   * Class representing data for a bar graph.\n+   */\n+  public static class Data {\n+    private final List<Map<String, Object>> mData;\n+\n+    /**\n+     * Creates an instance.\n+     */\n+    public Data() {\n+      mData = new ArrayList<>();\n+    }\n+\n+    /**\n+     * @param value the value\n+     */\n+    public void addData(Object value) {\n+      mData.add(ImmutableMap.of(BarGraph.VALUE_FIELD, value));\n+    }\n+  }\n+\n+  /**\n+   * Creates an instance.\n+   *\n+   * @param title the title\n+   * @param subTitle the lines in the sub title\n+   * @param xTitle the title of the x-axis\n+   */\n+  public BarGraph(String title, List<String> subTitle, String xTitle) {\n+    mTitle.add(title);\n+    mSubTitle.addAll(subTitle);\n+\n+    mGraph.put(\"$schema\", \"https://vega.github.io/schema/vega-lite/v4.json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0MTAxNQ==", "bodyText": "should we throw an exception if neither mInProcess or mCluster is true?", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419741015", "createdAt": "2020-05-04T21:30:47Z", "author": {"login": "ZacBlanco"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/Benchmark.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.stress.cli;\n+\n+import alluxio.client.job.JobGrpcClientUtils;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.InstancedConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.job.wire.JobInfo;\n+import alluxio.stress.BaseParameters;\n+import alluxio.stress.TaskResult;\n+import alluxio.stress.job.StressBenchConfig;\n+import alluxio.util.ConfigurationUtils;\n+import alluxio.util.ShellUtils;\n+\n+import com.beust.jcommander.JCommander;\n+import com.beust.jcommander.ParametersDelegate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Base class for all stress benchmarks.\n+ *\n+ * @param <T> the type of task result\n+ */\n+public abstract class Benchmark<T extends TaskResult> {\n+  private static final Logger LOG = LoggerFactory.getLogger(Benchmark.class);\n+\n+  @ParametersDelegate\n+  protected BaseParameters mBaseParameters = new BaseParameters();\n+\n+  /**\n+   * Runs the test locally, in process.\n+   *\n+   * @return the task result\n+   */\n+  public abstract T runLocal() throws Exception;\n+\n+  /**\n+   * Prepares to run the test.\n+   */\n+  public abstract void prepare() throws Exception;\n+\n+  protected static void mainInternal(String[] args, Benchmark benchmark) {\n+    try {\n+      String result = benchmark.run(args);\n+      System.out.println(result);\n+      System.exit(0);\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+      System.exit(-1);\n+    }\n+  }\n+\n+  /**\n+   * Runs the test and returns the string output.\n+   *\n+   * @param args the command-line args\n+   * @return the string result output\n+   */\n+  public String run(String[] args) throws Exception {\n+    JCommander jc = new JCommander(this);\n+    jc.setProgramName(this.getClass().getSimpleName());\n+    try {\n+      jc.parse(args);\n+    } catch (Exception e) {\n+      jc.usage();\n+      throw e;\n+    }\n+\n+    // prepare the benchmark.\n+    prepare();\n+\n+    AlluxioConfiguration conf = new InstancedConfiguration(ConfigurationUtils.defaults());\n+    String className = this.getClass().getCanonicalName();\n+\n+    if (mBaseParameters.mCluster) {\n+      // run on job service\n+\n+      // remove the cluster flag\n+      List<String> commandArgs =\n+          Arrays.stream(args).filter((s) -> !BaseParameters.CLUSTER_FLAG.equals(s))\n+              .filter((s) -> !s.isEmpty()).collect(Collectors.toList());\n+\n+      commandArgs.addAll(mBaseParameters.mJavaOpts);\n+\n+      JobInfo jobInfo =\n+          JobGrpcClientUtils.run(new StressBenchConfig(className, commandArgs), 0, conf);\n+      return jobInfo.getResult().toString();\n+    }\n+\n+    // run locally\n+    if (mBaseParameters.mInProcess) {\n+      // run in process\n+      T result = runLocal();\n+      if (mBaseParameters.mDistributed) {\n+        return result.toJson();\n+      }\n+\n+      // aggregate the results\n+      return result.aggregator().aggregate(Collections.singletonList(result)).toJson();\n+    } else {\n+      // Spawn a new process\n+      List<String> command = new ArrayList<>();\n+      command.add(conf.get(PropertyKey.HOME) + \"/bin/alluxio\");\n+      command.add(\"runClass\");\n+      command.add(className);\n+      command.addAll(Arrays.asList(args));\n+      command.add(BaseParameters.IN_PROCESS_FLAG);\n+      command.addAll(mBaseParameters.mJavaOpts);\n+\n+      LOG.info(\"running command: \" + String.join(\" \", command));\n+      return ShellUtils.execCommand(command.toArray(new String[0]));\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0NjE2NA==", "bodyText": "I don't quite understand what the \"Fixed portion\" is. Can you elaborate a bit more?", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419746164", "createdAt": "2020-05-04T21:41:28Z", "author": {"login": "ZacBlanco"}, "path": "stress/common/src/main/java/alluxio/stress/master/MasterBenchParameters.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.stress.master;\n+\n+import alluxio.stress.Parameters;\n+\n+import com.beust.jcommander.DynamicParameter;\n+import com.beust.jcommander.Parameter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * This holds all the parameters. All fields are public for easier json ser/de without all the\n+ * getters and setters.\n+ */\n+public final class MasterBenchParameters extends Parameters {\n+  /** The stop count value that is invalid. */\n+  public static final int STOP_COUNT_INVALID = -1;\n+\n+  @Parameter(names = {\"--operation\"},\n+      description = \"the operation to perform. Options are [CreateFile, GetBlockLocations, \"\n+          + \"GetFileStatus, OpenFile, CreateDir, ListDir, RenameFile, DeleteFile]\",\n+      required = true)\n+  public Operation mOperation;\n+\n+  @Parameter(names = {\"--clients\"}, description = \"the number of fs clients to use\")\n+  public int mClients = 1;\n+\n+  @Parameter(names = {\"--threads\"}, description = \"the number of threads to use\")\n+  public int mThreads = 256;\n+\n+  @Parameter(names = {\"--target-throughput\"},\n+      description = \"the target throughput to issue operations. (ops / s)\")\n+  public int mTargetThroughput = 1000;\n+\n+  @Parameter(names = {\"--base\"},\n+      description = \"The base directory path URI to perform operations in\")\n+  public String mBasePath = \"alluxio://localhost:19998/stress-master-base\";\n+\n+  @Parameter(names = {\"--create-file-size\"},\n+      description = \"The size of a file to create, allowed to be 0. (1m, 2k, 8k, etc.)\")\n+  public String mCreateFileSize = \"0\";\n+\n+  @Parameter(names = {\"--duration\"},\n+      description = \"The length of time to run the benchmark. (1m, 10m, 60s, 10000ms, etc.)\")\n+  public String mDuration = \"30s\";\n+\n+  @Parameter(names = {\"--stop-count\"},\n+      description = \"The benchmark will stop after this number of paths. If -1, it is not used and \"\n+          + \"the benchmark will stop after the duration. If this is used, duration will be \"\n+          + \"ignored. This is typically used for creating files in preparation for another \"\n+          + \"benchmark, since the results may not be reliable with a non-duration-based \"\n+          + \"termination condition.\")\n+  public int mStopCount = STOP_COUNT_INVALID;\n+\n+  @Parameter(names = {\"--warmup\"},\n+      description = \"The length of time to warmup before recording measurements. (1m, 10m, 60s, \"\n+          + \"10000ms, etc.)\")\n+  public String mWarmup = \"30s\";\n+\n+  @Parameter(names = {\"--fixed-count\"},\n+      description = \"The number of paths in the fixed portion. Must be greater than 0.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0Njc5MA==", "bodyText": "you could use the executors service's InvokeAll method instead? It clean up some of this code:\nhttps://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html#invokeAll-java.util.Collection-long-java.util.concurrent.TimeUnit-", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419746790", "createdAt": "2020-05-04T21:42:50Z", "author": {"login": "ZacBlanco"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/StressMasterBench.java", "diffHunk": "@@ -0,0 +1,382 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.stress.cli;\n+\n+import alluxio.Constants;\n+import alluxio.conf.PropertyKey;\n+import alluxio.stress.BaseParameters;\n+import alluxio.stress.master.MasterBenchParameters;\n+import alluxio.stress.master.MasterBenchTaskResult;\n+import alluxio.stress.master.Operation;\n+import alluxio.util.CommonUtils;\n+import alluxio.util.FormatUtils;\n+import alluxio.util.WaitForOptions;\n+import alluxio.util.executor.ExecutorServiceFactories;\n+import alluxio.util.io.PathUtils;\n+\n+import com.beust.jcommander.ParametersDelegate;\n+import com.google.common.util.concurrent.RateLimiter;\n+import org.HdrHistogram.Histogram;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Single node stress test.\n+ */\n+public class StressMasterBench extends Benchmark<MasterBenchTaskResult> {\n+  private static final Logger LOG = LoggerFactory.getLogger(StressMasterBench.class);\n+\n+  @ParametersDelegate\n+  private MasterBenchParameters mParameters = new MasterBenchParameters();\n+\n+  private byte[] mFiledata;\n+  private FileSystem[] mCachedFs;\n+\n+  /**\n+   * Creates instance.\n+   */\n+  public StressMasterBench() {\n+  }\n+\n+  /**\n+   * @param args command-line arguments\n+   */\n+  public static void main(String[] args) {\n+    mainInternal(args, new StressMasterBench());\n+  }\n+\n+  @Override\n+  public void prepare() throws Exception {\n+    if (mParameters.mFixedCount <= 0) {\n+      throw new IllegalStateException(\n+          \"fixed count must be > 0. fixedCount: \" + mParameters.mFixedCount);\n+    }\n+\n+    if (!mBaseParameters.mDistributed) {\n+      // set hdfs conf for preparation client\n+      Configuration hdfsConf = new Configuration();\n+      // force delete, create dirs through to UFS\n+      hdfsConf.set(PropertyKey.Name.USER_FILE_DELETE_UNCHECKED, \"true\");\n+      hdfsConf.set(PropertyKey.Name.USER_FILE_WRITE_TYPE_DEFAULT, \"CACHE_THROUGH\");\n+      FileSystem prepareFs = FileSystem.get(new URI(mParameters.mBasePath), hdfsConf);\n+\n+      // initialize the base, for only the non-distributed task (the cluster launching task)\n+      Path path = new Path(mParameters.mBasePath);\n+\n+      // the base path depends on the operation\n+      Path basePath;\n+      if (mParameters.mOperation == Operation.CreateDir) {\n+        basePath = new Path(path, \"dirs\");\n+      } else {\n+        basePath = new Path(path, \"files\");\n+      }\n+\n+      if (mParameters.mOperation == Operation.CreateFile\n+          || mParameters.mOperation == Operation.CreateDir) {\n+        prepareFs.delete(basePath, true);\n+        prepareFs.mkdirs(basePath);\n+      } else {\n+        // these are read operations. the directory must exist\n+        if (!prepareFs.exists(basePath)) {\n+          throw new IllegalStateException(String\n+              .format(\"base path (%s) must exist for operation (%s)\", basePath,\n+                  mParameters.mOperation));\n+        }\n+      }\n+      if (!prepareFs.isDirectory(basePath)) {\n+        throw new IllegalStateException(String\n+            .format(\"base path (%s) must be a directory for operation (%s)\", basePath,\n+                mParameters.mOperation));\n+      }\n+    }\n+\n+    // set hdfs conf for all test clients\n+    Configuration hdfsConf = new Configuration();\n+    // do not cache these clients\n+    hdfsConf.set(\n+        String.format(\"fs.%s.impl.disable.cache\", (new URI(mParameters.mBasePath)).getScheme()),\n+        \"true\");\n+    for (Map.Entry<String, String> entry : mParameters.mConf.entrySet()) {\n+      hdfsConf.set(entry.getKey(), entry.getValue());\n+    }\n+    mCachedFs = new FileSystem[mParameters.mClients];\n+    for (int i = 0; i < mCachedFs.length; i++) {\n+      mCachedFs[i] = FileSystem.get(new URI(mParameters.mBasePath), hdfsConf);\n+    }\n+  }\n+\n+  @Override\n+  public MasterBenchTaskResult runLocal() throws Exception {\n+    ExecutorService service =\n+        ExecutorServiceFactories.fixedThreadPool(\"bench-thread\", mParameters.mThreads).create();\n+\n+    RateLimiter rateLimiter = RateLimiter.create(mParameters.mTargetThroughput);\n+\n+    mFiledata = new byte[(int) FormatUtils.parseSpaceSize(mParameters.mCreateFileSize)];\n+    Arrays.fill(mFiledata, (byte) 0x7A);\n+\n+    long durationMs = FormatUtils.parseTimeSize(mParameters.mDuration);\n+    long warmupMs = FormatUtils.parseTimeSize(mParameters.mWarmup);\n+    long startMs = mBaseParameters.mStartMs;\n+    if (mBaseParameters.mStartMs == BaseParameters.UNDEFINED_START_MS) {\n+      startMs = CommonUtils.getCurrentMs() + 1000;\n+    }\n+    long endMs = startMs + warmupMs + durationMs;\n+    BenchContext context = new BenchContext(rateLimiter, startMs, endMs);\n+    for (int i = 0; i < mParameters.mThreads; i++) {\n+      service.submit(new BenchThread(context, mCachedFs[i % mCachedFs.length]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0NzI4OQ==", "bodyText": "This seems a bit hacky...hmm. I wonder if there's a better way to write this out rather than putting HTML in java strings within the code.\nMaybe we can use a template in the resources directory instead and format that?", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419747289", "createdAt": "2020-05-04T21:44:00Z", "author": {"login": "ZacBlanco"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/report/GenerateReport.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.stress.cli.report;\n+\n+import alluxio.stress.GraphGenerator;\n+import alluxio.stress.JsonSerializable;\n+import alluxio.stress.Summary;\n+import alluxio.stress.graph.Graph;\n+\n+import com.beust.jcommander.JCommander;\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.ParametersDelegate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Generates a report from summaries.\n+ */\n+public class GenerateReport {\n+  private static final Logger LOG = LoggerFactory.getLogger(GenerateReport.class);\n+\n+  @ParametersDelegate\n+  private Parameters mParameters = new Parameters();\n+\n+  @com.beust.jcommander.Parameters(separators = \"=\")\n+  private static class Parameters {\n+    @Parameter(names = \"--input\",\n+        description = \"The input json files of the results. Can be repeated\", required = true)\n+    private List<String> mInputs;\n+\n+    @Parameter(names = \"--output-dir\", description = \"The output directory\", required = true)\n+    private String mOutputDir;\n+  }\n+\n+  /**\n+   * @param args the command-line args\n+   */\n+  public static void main(String[] args) {\n+    new GenerateReport().run(args);\n+  }\n+\n+  GenerateReport() {\n+  }\n+\n+  private void run(String[] args) {\n+    JCommander jc = new JCommander(this);\n+    jc.setProgramName(this.getClass().getSimpleName());\n+    try {\n+      jc.parse(args);\n+    } catch (Exception e) {\n+      jc.usage();\n+      throw e;\n+    }\n+\n+    List<Summary> inputs =\n+        mParameters.mInputs.stream().map(f -> {\n+          try {\n+            return readJson(f);\n+          } catch (Exception e) {\n+            throw new RuntimeException(e);\n+          }\n+        }).collect(Collectors.toList());\n+\n+    String className = null;\n+    for (Summary summary : inputs) {\n+      if (className == null) {\n+        className = summary.getClassName();\n+      }\n+      if (!className.equals(summary.getClassName())) {\n+        throw new RuntimeException(\n+            \"Mismatched input result types: \" + className + \" , \" + summary.getClassName());\n+      }\n+    }\n+\n+    File outputDir = new File(mParameters.mOutputDir);\n+    outputDir.mkdirs();\n+\n+    GraphGenerator graphGenerator = inputs.get(0).graphGenerator();\n+\n+    List<Graph> graphs = graphGenerator.generate(inputs);\n+\n+    try (PrintWriter writer = new PrintWriter(\n+        new FileWriter(Paths.get(outputDir.getAbsolutePath(), \"index.html\").toString()))) {\n+\n+      writer.println(\"<!DOCTYPE html>\");\n+      writer.println(\"<head>\");\n+      writer.println(\"<script src=\\\"https://cdn.jsdelivr.net/npm/vega@5\\\"></script>\");\n+      writer.println(\"<script src=\\\"https://cdn.jsdelivr.net/npm/vega-lite@4\\\"></script>\");\n+      writer.println(\"<script src=\\\"https://cdn.jsdelivr.net/npm/vega-embed@6\\\"></script>\");\n+      writer.println(\"</head>\");\n+      writer.println(\"<body>\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0NzQ2MQ==", "bodyText": "Or use a real HTML parsing/object creation library instead?", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419747461", "createdAt": "2020-05-04T21:44:22Z", "author": {"login": "ZacBlanco"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/report/GenerateReport.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.stress.cli.report;\n+\n+import alluxio.stress.GraphGenerator;\n+import alluxio.stress.JsonSerializable;\n+import alluxio.stress.Summary;\n+import alluxio.stress.graph.Graph;\n+\n+import com.beust.jcommander.JCommander;\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.ParametersDelegate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Generates a report from summaries.\n+ */\n+public class GenerateReport {\n+  private static final Logger LOG = LoggerFactory.getLogger(GenerateReport.class);\n+\n+  @ParametersDelegate\n+  private Parameters mParameters = new Parameters();\n+\n+  @com.beust.jcommander.Parameters(separators = \"=\")\n+  private static class Parameters {\n+    @Parameter(names = \"--input\",\n+        description = \"The input json files of the results. Can be repeated\", required = true)\n+    private List<String> mInputs;\n+\n+    @Parameter(names = \"--output-dir\", description = \"The output directory\", required = true)\n+    private String mOutputDir;\n+  }\n+\n+  /**\n+   * @param args the command-line args\n+   */\n+  public static void main(String[] args) {\n+    new GenerateReport().run(args);\n+  }\n+\n+  GenerateReport() {\n+  }\n+\n+  private void run(String[] args) {\n+    JCommander jc = new JCommander(this);\n+    jc.setProgramName(this.getClass().getSimpleName());\n+    try {\n+      jc.parse(args);\n+    } catch (Exception e) {\n+      jc.usage();\n+      throw e;\n+    }\n+\n+    List<Summary> inputs =\n+        mParameters.mInputs.stream().map(f -> {\n+          try {\n+            return readJson(f);\n+          } catch (Exception e) {\n+            throw new RuntimeException(e);\n+          }\n+        }).collect(Collectors.toList());\n+\n+    String className = null;\n+    for (Summary summary : inputs) {\n+      if (className == null) {\n+        className = summary.getClassName();\n+      }\n+      if (!className.equals(summary.getClassName())) {\n+        throw new RuntimeException(\n+            \"Mismatched input result types: \" + className + \" , \" + summary.getClassName());\n+      }\n+    }\n+\n+    File outputDir = new File(mParameters.mOutputDir);\n+    outputDir.mkdirs();\n+\n+    GraphGenerator graphGenerator = inputs.get(0).graphGenerator();\n+\n+    List<Graph> graphs = graphGenerator.generate(inputs);\n+\n+    try (PrintWriter writer = new PrintWriter(\n+        new FileWriter(Paths.get(outputDir.getAbsolutePath(), \"index.html\").toString()))) {\n+\n+      writer.println(\"<!DOCTYPE html>\");\n+      writer.println(\"<head>\");\n+      writer.println(\"<script src=\\\"https://cdn.jsdelivr.net/npm/vega@5\\\"></script>\");\n+      writer.println(\"<script src=\\\"https://cdn.jsdelivr.net/npm/vega-lite@4\\\"></script>\");\n+      writer.println(\"<script src=\\\"https://cdn.jsdelivr.net/npm/vega-embed@6\\\"></script>\");\n+      writer.println(\"</head>\");\n+      writer.println(\"<body>\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0NzI4OQ=="}, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0Nzg5OQ==", "bodyText": "what's the reason for using = here?", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419747899", "createdAt": "2020-05-04T21:45:17Z", "author": {"login": "ZacBlanco"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/report/GenerateReport.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.stress.cli.report;\n+\n+import alluxio.stress.GraphGenerator;\n+import alluxio.stress.JsonSerializable;\n+import alluxio.stress.Summary;\n+import alluxio.stress.graph.Graph;\n+\n+import com.beust.jcommander.JCommander;\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.ParametersDelegate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Generates a report from summaries.\n+ */\n+public class GenerateReport {\n+  private static final Logger LOG = LoggerFactory.getLogger(GenerateReport.class);\n+\n+  @ParametersDelegate\n+  private Parameters mParameters = new Parameters();\n+\n+  @com.beust.jcommander.Parameters(separators = \"=\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0ODA3NQ==", "bodyText": "I would like to see a more descriptive name rather than index.html", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419748075", "createdAt": "2020-05-04T21:45:41Z", "author": {"login": "ZacBlanco"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/report/GenerateReport.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.stress.cli.report;\n+\n+import alluxio.stress.GraphGenerator;\n+import alluxio.stress.JsonSerializable;\n+import alluxio.stress.Summary;\n+import alluxio.stress.graph.Graph;\n+\n+import com.beust.jcommander.JCommander;\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.ParametersDelegate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Generates a report from summaries.\n+ */\n+public class GenerateReport {\n+  private static final Logger LOG = LoggerFactory.getLogger(GenerateReport.class);\n+\n+  @ParametersDelegate\n+  private Parameters mParameters = new Parameters();\n+\n+  @com.beust.jcommander.Parameters(separators = \"=\")\n+  private static class Parameters {\n+    @Parameter(names = \"--input\",\n+        description = \"The input json files of the results. Can be repeated\", required = true)\n+    private List<String> mInputs;\n+\n+    @Parameter(names = \"--output-dir\", description = \"The output directory\", required = true)\n+    private String mOutputDir;\n+  }\n+\n+  /**\n+   * @param args the command-line args\n+   */\n+  public static void main(String[] args) {\n+    new GenerateReport().run(args);\n+  }\n+\n+  GenerateReport() {\n+  }\n+\n+  private void run(String[] args) {\n+    JCommander jc = new JCommander(this);\n+    jc.setProgramName(this.getClass().getSimpleName());\n+    try {\n+      jc.parse(args);\n+    } catch (Exception e) {\n+      jc.usage();\n+      throw e;\n+    }\n+\n+    List<Summary> inputs =\n+        mParameters.mInputs.stream().map(f -> {\n+          try {\n+            return readJson(f);\n+          } catch (Exception e) {\n+            throw new RuntimeException(e);\n+          }\n+        }).collect(Collectors.toList());\n+\n+    String className = null;\n+    for (Summary summary : inputs) {\n+      if (className == null) {\n+        className = summary.getClassName();\n+      }\n+      if (!className.equals(summary.getClassName())) {\n+        throw new RuntimeException(\n+            \"Mismatched input result types: \" + className + \" , \" + summary.getClassName());\n+      }\n+    }\n+\n+    File outputDir = new File(mParameters.mOutputDir);\n+    outputDir.mkdirs();\n+\n+    GraphGenerator graphGenerator = inputs.get(0).graphGenerator();\n+\n+    List<Graph> graphs = graphGenerator.generate(inputs);\n+\n+    try (PrintWriter writer = new PrintWriter(\n+        new FileWriter(Paths.get(outputDir.getAbsolutePath(), \"index.html\").toString()))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0ODcyOQ==", "bodyText": "Similar comment here about relying on external resources. Not too sure how I feel about it.\nWhile convenient, it also now depends on these resources always being available for the life of the code.", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419748729", "createdAt": "2020-05-04T21:47:00Z", "author": {"login": "ZacBlanco"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/report/GenerateReport.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.stress.cli.report;\n+\n+import alluxio.stress.GraphGenerator;\n+import alluxio.stress.JsonSerializable;\n+import alluxio.stress.Summary;\n+import alluxio.stress.graph.Graph;\n+\n+import com.beust.jcommander.JCommander;\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.ParametersDelegate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Generates a report from summaries.\n+ */\n+public class GenerateReport {\n+  private static final Logger LOG = LoggerFactory.getLogger(GenerateReport.class);\n+\n+  @ParametersDelegate\n+  private Parameters mParameters = new Parameters();\n+\n+  @com.beust.jcommander.Parameters(separators = \"=\")\n+  private static class Parameters {\n+    @Parameter(names = \"--input\",\n+        description = \"The input json files of the results. Can be repeated\", required = true)\n+    private List<String> mInputs;\n+\n+    @Parameter(names = \"--output-dir\", description = \"The output directory\", required = true)\n+    private String mOutputDir;\n+  }\n+\n+  /**\n+   * @param args the command-line args\n+   */\n+  public static void main(String[] args) {\n+    new GenerateReport().run(args);\n+  }\n+\n+  GenerateReport() {\n+  }\n+\n+  private void run(String[] args) {\n+    JCommander jc = new JCommander(this);\n+    jc.setProgramName(this.getClass().getSimpleName());\n+    try {\n+      jc.parse(args);\n+    } catch (Exception e) {\n+      jc.usage();\n+      throw e;\n+    }\n+\n+    List<Summary> inputs =\n+        mParameters.mInputs.stream().map(f -> {\n+          try {\n+            return readJson(f);\n+          } catch (Exception e) {\n+            throw new RuntimeException(e);\n+          }\n+        }).collect(Collectors.toList());\n+\n+    String className = null;\n+    for (Summary summary : inputs) {\n+      if (className == null) {\n+        className = summary.getClassName();\n+      }\n+      if (!className.equals(summary.getClassName())) {\n+        throw new RuntimeException(\n+            \"Mismatched input result types: \" + className + \" , \" + summary.getClassName());\n+      }\n+    }\n+\n+    File outputDir = new File(mParameters.mOutputDir);\n+    outputDir.mkdirs();\n+\n+    GraphGenerator graphGenerator = inputs.get(0).graphGenerator();\n+\n+    List<Graph> graphs = graphGenerator.generate(inputs);\n+\n+    try (PrintWriter writer = new PrintWriter(\n+        new FileWriter(Paths.get(outputDir.getAbsolutePath(), \"index.html\").toString()))) {\n+\n+      writer.println(\"<!DOCTYPE html>\");\n+      writer.println(\"<head>\");\n+      writer.println(\"<script src=\\\"https://cdn.jsdelivr.net/npm/vega@5\\\"></script>\");\n+      writer.println(\"<script src=\\\"https://cdn.jsdelivr.net/npm/vega-lite@4\\\"></script>\");\n+      writer.println(\"<script src=\\\"https://cdn.jsdelivr.net/npm/vega-embed@6\\\"></script>\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0OTE4Mw==", "bodyText": "similar comment about having to always add a space. I think we can do that ourselves?", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419749183", "createdAt": "2020-05-04T21:47:56Z", "author": {"login": "ZacBlanco"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/suite/Suite.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.stress.cli.suite;\n+\n+import alluxio.stress.Summary;\n+\n+import com.beust.jcommander.JCommander;\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.ParametersDelegate;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Base class for all benchmark suites.\n+ *\n+ * @param <T> the summary class\n+ */\n+public abstract class Suite<T extends Summary> {\n+  @ParametersDelegate\n+  protected BaseParameters mBaseParameters = new BaseParameters();\n+\n+  private static final class BaseParameters {\n+    static final String CLUSTER_FLAG = \"--cluster\";\n+\n+    @Parameter(names = {CLUSTER_FLAG},\n+        description = \"If true, runs the benchmark via the job service cluster. Otherwise, runs \"\n+            + \"locally.\")\n+    public boolean mCluster = false;\n+\n+    @Parameter(names = {\"--java-opt\"},\n+        description = \"The java options to add to the command line to for the task. This can be \"\n+            + \"repeated. The options must be quoted and prefixed with a space, to avoid getting \"\n+            + \"passed to the JVM. For example: --java-opt \\\" -Xmx4g\\\" --java-opt \\\" -Xms2g\\\"\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f23c0d0edacb256e59c81acb73aa3e06ec6f93d", "author": {"user": {"login": "gpang", "name": "Gene Pang"}}, "url": "https://github.com/Alluxio/alluxio/commit/4f23c0d0edacb256e59c81acb73aa3e06ec6f93d", "committedDate": "2020-05-05T01:14:53Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NDExNjQ1", "url": "https://github.com/Alluxio/alluxio/pull/11377#pullrequestreview-405411645", "createdAt": "2020-05-04T23:19:07Z", "commit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "state": "COMMENTED", "comments": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzoxOTowN1rOGQVlHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMTowNjo0M1rOGQXcig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4Mzk2Ng==", "bodyText": "It is about 250kb larger.", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419783966", "createdAt": "2020-05-04T23:19:07Z", "author": {"login": "gpang"}, "path": "assembly/client/pom.xml", "diffHunk": "@@ -51,6 +51,11 @@\n       <artifactId>alluxio-shell</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.alluxio</groupId>\n+      <artifactId>alluxio-stress-shell</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcwNTg4OA=="}, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4NTEwOA==", "bodyText": "added", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419785108", "createdAt": "2020-05-04T23:22:46Z", "author": {"login": "gpang"}, "path": "job/client/src/main/java/alluxio/client/job/JobGrpcClientUtils.java", "diffHunk": "@@ -106,6 +107,10 @@ private static JobInfo waitFor(final long jobId, AlluxioConfiguration alluxioCon\n           }\n           return true;\n         }, WaitForOptions.defaults().setInterval(1000));\n+      if (resultInfo != null) {\n+        resultInfo = client.getJobStatusDetailed(resultInfo.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcwNzc1OQ=="}, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4NTU1Nw==", "bodyText": "My intention was to separate out the different components, so that the job server doesn't need to depend on any of the test or shell code. This is not necessary, but it seems cleaner to keep separated.", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419785557", "createdAt": "2020-05-04T23:24:16Z", "author": {"login": "gpang"}, "path": "job/server/pom.xml", "diffHunk": "@@ -85,6 +85,11 @@\n       <artifactId>alluxio-job-client</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.alluxio</groupId>\n+      <artifactId>alluxio-stress-common</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcwNjMyMQ=="}, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4NzY5OA==", "bodyText": "added", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419787698", "createdAt": "2020-05-04T23:31:04Z", "author": {"login": "gpang"}, "path": "job/server/src/main/java/alluxio/job/plan/stress/StressBenchDefinition.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.job.plan.stress;\n+\n+import alluxio.collections.Pair;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.job.RunTaskContext;\n+import alluxio.job.SelectExecutorsContext;\n+import alluxio.job.plan.PlanDefinition;\n+import alluxio.stress.BaseParameters;\n+import alluxio.stress.JsonSerializable;\n+import alluxio.stress.TaskResult;\n+import alluxio.stress.job.StressBenchConfig;\n+import alluxio.util.ShellUtils;\n+import alluxio.wire.WorkerInfo;\n+\n+import com.google.common.collect.Sets;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The definition for the stress bench job, which runs distributed benchmarks.\n+ */\n+public final class StressBenchDefinition\n+    implements PlanDefinition<StressBenchConfig, ArrayList<String>, String> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcwODMyOA=="}, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4ODA2MA==", "bodyText": "done", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419788060", "createdAt": "2020-05-04T23:32:12Z", "author": {"login": "gpang"}, "path": "job/server/src/main/java/alluxio/job/plan/stress/StressBenchDefinition.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.job.plan.stress;\n+\n+import alluxio.collections.Pair;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.job.RunTaskContext;\n+import alluxio.job.SelectExecutorsContext;\n+import alluxio.job.plan.PlanDefinition;\n+import alluxio.stress.BaseParameters;\n+import alluxio.stress.JsonSerializable;\n+import alluxio.stress.TaskResult;\n+import alluxio.stress.job.StressBenchConfig;\n+import alluxio.util.ShellUtils;\n+import alluxio.wire.WorkerInfo;\n+\n+import com.google.common.collect.Sets;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The definition for the stress bench job, which runs distributed benchmarks.\n+ */\n+public final class StressBenchDefinition\n+    implements PlanDefinition<StressBenchConfig, ArrayList<String>, String> {\n+  private static final Logger LOG = LoggerFactory.getLogger(StressBenchDefinition.class);\n+\n+  /**\n+   * Constructs a new instance.\n+   */\n+  public StressBenchDefinition() {\n+  }\n+\n+  @Override\n+  public Class<StressBenchConfig> getJobConfigClass() {\n+    return StressBenchConfig.class;\n+  }\n+\n+  @Override\n+  public Set<Pair<WorkerInfo, ArrayList<String>>> selectExecutors(StressBenchConfig config,\n+      List<WorkerInfo> jobWorkerInfoList, SelectExecutorsContext context) throws Exception {\n+    Set<Pair<WorkerInfo, ArrayList<String>>> result = Sets.newHashSet();\n+    for (WorkerInfo worker : jobWorkerInfoList) {\n+      ArrayList<String> args = new ArrayList<>(2);\n+      args.add(\"--id\");\n+      args.add(worker.getAddress().getHost() + \"-\" + worker.getId());\n+      result.add(new Pair<>(worker, args));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcwOTAxOQ=="}, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4OTc1Mw==", "bodyText": "I made it configurable in StressBenchConfig", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419789753", "createdAt": "2020-05-04T23:38:08Z", "author": {"login": "gpang"}, "path": "job/server/src/main/java/alluxio/job/plan/stress/StressBenchDefinition.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.job.plan.stress;\n+\n+import alluxio.collections.Pair;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.job.RunTaskContext;\n+import alluxio.job.SelectExecutorsContext;\n+import alluxio.job.plan.PlanDefinition;\n+import alluxio.stress.BaseParameters;\n+import alluxio.stress.JsonSerializable;\n+import alluxio.stress.TaskResult;\n+import alluxio.stress.job.StressBenchConfig;\n+import alluxio.util.ShellUtils;\n+import alluxio.wire.WorkerInfo;\n+\n+import com.google.common.collect.Sets;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The definition for the stress bench job, which runs distributed benchmarks.\n+ */\n+public final class StressBenchDefinition\n+    implements PlanDefinition<StressBenchConfig, ArrayList<String>, String> {\n+  private static final Logger LOG = LoggerFactory.getLogger(StressBenchDefinition.class);\n+\n+  /**\n+   * Constructs a new instance.\n+   */\n+  public StressBenchDefinition() {\n+  }\n+\n+  @Override\n+  public Class<StressBenchConfig> getJobConfigClass() {\n+    return StressBenchConfig.class;\n+  }\n+\n+  @Override\n+  public Set<Pair<WorkerInfo, ArrayList<String>>> selectExecutors(StressBenchConfig config,\n+      List<WorkerInfo> jobWorkerInfoList, SelectExecutorsContext context) throws Exception {\n+    Set<Pair<WorkerInfo, ArrayList<String>>> result = Sets.newHashSet();\n+    for (WorkerInfo worker : jobWorkerInfoList) {\n+      ArrayList<String> args = new ArrayList<>(2);\n+      args.add(\"--id\");\n+      args.add(worker.getAddress().getHost() + \"-\" + worker.getId());\n+      result.add(new Pair<>(worker, args));\n+    }\n+    return result;\n+  }\n+\n+  @Override\n+  public String runTask(StressBenchConfig config, ArrayList<String> args,\n+      RunTaskContext runTaskContext) throws Exception {\n+    List<String> command = new ArrayList<>(3 + config.getArgs().size());\n+    command.add(ServerConfiguration.get(PropertyKey.HOME) + \"/bin/alluxio\");\n+    command.add(\"runClass\");\n+    command.add(config.getClassName());\n+    command.addAll(config.getArgs());\n+    // the cluster will run distributed tasks\n+    command.add(BaseParameters.DISTRIBUTED_FLAG);\n+    command.add(BaseParameters.IN_PROCESS_FLAG);\n+\n+    if (config.getArgs().stream().noneMatch((s) -> s.equals(\"--start-ms\"))) {\n+      command.add(\"--start-ms\");\n+      command.add(Long.toString((System.currentTimeMillis() + 5000)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcxMDQzMw=="}, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc5MDE0NA==", "bodyText": "I originally had stress-shell in examples, and stress-common in job, but that was more awkward. I'm open to ideas for restructuring.", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419790144", "createdAt": "2020-05-04T23:39:23Z", "author": {"login": "gpang"}, "path": "pom.xml", "diffHunk": "@@ -170,6 +170,7 @@\n     <module>job</module>\n     <module>shaded</module>\n     <module>shell</module>\n+    <module>stress</module>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcxMTQwMQ=="}, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc5MTMyMg==", "bodyText": "I added the remaining.", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419791322", "createdAt": "2020-05-04T23:43:07Z", "author": {"login": "gpang"}, "path": "stress/common/src/main/java/alluxio/stress/BaseParameters.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.stress;\n+\n+import com.beust.jcommander.Parameter;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This holds all the parameters. All fields are public for easier json ser/de without all the\n+ * getters and setters.\n+ */\n+public final class BaseParameters {\n+  public static final String CLUSTER_FLAG = \"--cluster\";\n+  public static final String DISTRIBUTED_FLAG = \"--distributed\";\n+  public static final String IN_PROCESS_FLAG = \"--in-process\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcxMTg0Nw=="}, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc5MjQ2Mg==", "bodyText": "The reason this is required in the command line is because for runClass, the bash script processes all the arguments before passing it to the class itself (https://github.com/Alluxio/alluxio/blob/master/bin/alluxio#L146). So, the argument has to be quoted and prefixed with a space for it to be passed to the program class.\nI couldn't find a better way to define these java options, so that it could be passed to the program class.", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419792462", "createdAt": "2020-05-04T23:46:55Z", "author": {"login": "gpang"}, "path": "stress/common/src/main/java/alluxio/stress/BaseParameters.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.stress;\n+\n+import com.beust.jcommander.Parameter;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This holds all the parameters. All fields are public for easier json ser/de without all the\n+ * getters and setters.\n+ */\n+public final class BaseParameters {\n+  public static final String CLUSTER_FLAG = \"--cluster\";\n+  public static final String DISTRIBUTED_FLAG = \"--distributed\";\n+  public static final String IN_PROCESS_FLAG = \"--in-process\";\n+  public static final long UNDEFINED_START_MS = -1;\n+\n+  @Parameter(names = {CLUSTER_FLAG},\n+      description = \"If true, runs the benchmark via the job service cluster. Otherwise, runs \"\n+          + \"locally.\")\n+  public boolean mCluster = false;\n+\n+  @Parameter(names = {\"--id\"},\n+      description = \"Any string to uniquely identify this invocation\", hidden = true)\n+  public String mId = \"local-task-0\";\n+\n+  @Parameter(names = {\"--java-opt\"},\n+      description = \"The java options to add to the command line to for the task. This can be \"\n+          + \"repeated. The options must be quoted and prefixed with a space, to avoid getting \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcxMjgxNQ=="}, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc5NjE5NA==", "bodyText": "They are thread-safe if all configuration is done before any reading and writing. I added a static mapper.", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419796194", "createdAt": "2020-05-04T23:59:43Z", "author": {"login": "gpang"}, "path": "stress/common/src/main/java/alluxio/stress/Parameters.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.stress;\n+\n+import alluxio.collections.Pair;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.type.MapType;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Abstract class for parameters of stress tests.\n+ */\n+public abstract class Parameters {\n+  protected Map<String, Object> toMap() {\n+    ObjectMapper mapper = new ObjectMapper();\n+    mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcxNDU4NQ=="}, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc5NzA4Mw==", "bodyText": "The graph generation happens by writing an html file. Are you saying we write the html file and also output these resources with that file? I'm not sure how else we can create graphs that use these types of libraries.", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419797083", "createdAt": "2020-05-05T00:02:55Z", "author": {"login": "gpang"}, "path": "stress/common/src/main/java/alluxio/stress/graph/BarGraph.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.stress.graph;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A bar graph representation.\n+ */\n+public class BarGraph extends Graph {\n+  private static final String VALUE_FIELD = \"y\";\n+  private static final String SERIES_FIELD = \"series\";\n+\n+  /**\n+   * Class representing data for a bar graph.\n+   */\n+  public static class Data {\n+    private final List<Map<String, Object>> mData;\n+\n+    /**\n+     * Creates an instance.\n+     */\n+    public Data() {\n+      mData = new ArrayList<>();\n+    }\n+\n+    /**\n+     * @param value the value\n+     */\n+    public void addData(Object value) {\n+      mData.add(ImmutableMap.of(BarGraph.VALUE_FIELD, value));\n+    }\n+  }\n+\n+  /**\n+   * Creates an instance.\n+   *\n+   * @param title the title\n+   * @param subTitle the lines in the sub title\n+   * @param xTitle the title of the x-axis\n+   */\n+  public BarGraph(String title, List<String> subTitle, String xTitle) {\n+    mTitle.add(title);\n+    mSubTitle.addAll(subTitle);\n+\n+    mGraph.put(\"$schema\", \"https://vega.github.io/schema/vega-lite/v4.json\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTczMzg3OA=="}, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc5OTQ4MA==", "bodyText": "I added more to the description.", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419799480", "createdAt": "2020-05-05T00:10:48Z", "author": {"login": "gpang"}, "path": "stress/common/src/main/java/alluxio/stress/master/MasterBenchParameters.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.stress.master;\n+\n+import alluxio.stress.Parameters;\n+\n+import com.beust.jcommander.DynamicParameter;\n+import com.beust.jcommander.Parameter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * This holds all the parameters. All fields are public for easier json ser/de without all the\n+ * getters and setters.\n+ */\n+public final class MasterBenchParameters extends Parameters {\n+  /** The stop count value that is invalid. */\n+  public static final int STOP_COUNT_INVALID = -1;\n+\n+  @Parameter(names = {\"--operation\"},\n+      description = \"the operation to perform. Options are [CreateFile, GetBlockLocations, \"\n+          + \"GetFileStatus, OpenFile, CreateDir, ListDir, RenameFile, DeleteFile]\",\n+      required = true)\n+  public Operation mOperation;\n+\n+  @Parameter(names = {\"--clients\"}, description = \"the number of fs clients to use\")\n+  public int mClients = 1;\n+\n+  @Parameter(names = {\"--threads\"}, description = \"the number of threads to use\")\n+  public int mThreads = 256;\n+\n+  @Parameter(names = {\"--target-throughput\"},\n+      description = \"the target throughput to issue operations. (ops / s)\")\n+  public int mTargetThroughput = 1000;\n+\n+  @Parameter(names = {\"--base\"},\n+      description = \"The base directory path URI to perform operations in\")\n+  public String mBasePath = \"alluxio://localhost:19998/stress-master-base\";\n+\n+  @Parameter(names = {\"--create-file-size\"},\n+      description = \"The size of a file to create, allowed to be 0. (1m, 2k, 8k, etc.)\")\n+  public String mCreateFileSize = \"0\";\n+\n+  @Parameter(names = {\"--duration\"},\n+      description = \"The length of time to run the benchmark. (1m, 10m, 60s, 10000ms, etc.)\")\n+  public String mDuration = \"30s\";\n+\n+  @Parameter(names = {\"--stop-count\"},\n+      description = \"The benchmark will stop after this number of paths. If -1, it is not used and \"\n+          + \"the benchmark will stop after the duration. If this is used, duration will be \"\n+          + \"ignored. This is typically used for creating files in preparation for another \"\n+          + \"benchmark, since the results may not be reliable with a non-duration-based \"\n+          + \"termination condition.\")\n+  public int mStopCount = STOP_COUNT_INVALID;\n+\n+  @Parameter(names = {\"--warmup\"},\n+      description = \"The length of time to warmup before recording measurements. (1m, 10m, 60s, \"\n+          + \"10000ms, etc.)\")\n+  public String mWarmup = \"30s\";\n+\n+  @Parameter(names = {\"--fixed-count\"},\n+      description = \"The number of paths in the fixed portion. Must be greater than 0.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0NjE2NA=="}, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwMTAyMQ==", "bodyText": "the // Spawn a new process else branch is that case, where we run the test locally. That first JVM spawns a new \"in process\" task. This is to mirror how the job service-based tasks run.", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419801021", "createdAt": "2020-05-05T00:15:42Z", "author": {"login": "gpang"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/Benchmark.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.stress.cli;\n+\n+import alluxio.client.job.JobGrpcClientUtils;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.InstancedConfiguration;\n+import alluxio.conf.PropertyKey;\n+import alluxio.job.wire.JobInfo;\n+import alluxio.stress.BaseParameters;\n+import alluxio.stress.TaskResult;\n+import alluxio.stress.job.StressBenchConfig;\n+import alluxio.util.ConfigurationUtils;\n+import alluxio.util.ShellUtils;\n+\n+import com.beust.jcommander.JCommander;\n+import com.beust.jcommander.ParametersDelegate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Base class for all stress benchmarks.\n+ *\n+ * @param <T> the type of task result\n+ */\n+public abstract class Benchmark<T extends TaskResult> {\n+  private static final Logger LOG = LoggerFactory.getLogger(Benchmark.class);\n+\n+  @ParametersDelegate\n+  protected BaseParameters mBaseParameters = new BaseParameters();\n+\n+  /**\n+   * Runs the test locally, in process.\n+   *\n+   * @return the task result\n+   */\n+  public abstract T runLocal() throws Exception;\n+\n+  /**\n+   * Prepares to run the test.\n+   */\n+  public abstract void prepare() throws Exception;\n+\n+  protected static void mainInternal(String[] args, Benchmark benchmark) {\n+    try {\n+      String result = benchmark.run(args);\n+      System.out.println(result);\n+      System.exit(0);\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+      System.exit(-1);\n+    }\n+  }\n+\n+  /**\n+   * Runs the test and returns the string output.\n+   *\n+   * @param args the command-line args\n+   * @return the string result output\n+   */\n+  public String run(String[] args) throws Exception {\n+    JCommander jc = new JCommander(this);\n+    jc.setProgramName(this.getClass().getSimpleName());\n+    try {\n+      jc.parse(args);\n+    } catch (Exception e) {\n+      jc.usage();\n+      throw e;\n+    }\n+\n+    // prepare the benchmark.\n+    prepare();\n+\n+    AlluxioConfiguration conf = new InstancedConfiguration(ConfigurationUtils.defaults());\n+    String className = this.getClass().getCanonicalName();\n+\n+    if (mBaseParameters.mCluster) {\n+      // run on job service\n+\n+      // remove the cluster flag\n+      List<String> commandArgs =\n+          Arrays.stream(args).filter((s) -> !BaseParameters.CLUSTER_FLAG.equals(s))\n+              .filter((s) -> !s.isEmpty()).collect(Collectors.toList());\n+\n+      commandArgs.addAll(mBaseParameters.mJavaOpts);\n+\n+      JobInfo jobInfo =\n+          JobGrpcClientUtils.run(new StressBenchConfig(className, commandArgs), 0, conf);\n+      return jobInfo.getResult().toString();\n+    }\n+\n+    // run locally\n+    if (mBaseParameters.mInProcess) {\n+      // run in process\n+      T result = runLocal();\n+      if (mBaseParameters.mDistributed) {\n+        return result.toJson();\n+      }\n+\n+      // aggregate the results\n+      return result.aggregator().aggregate(Collections.singletonList(result)).toJson();\n+    } else {\n+      // Spawn a new process\n+      List<String> command = new ArrayList<>();\n+      command.add(conf.get(PropertyKey.HOME) + \"/bin/alluxio\");\n+      command.add(\"runClass\");\n+      command.add(className);\n+      command.addAll(Arrays.asList(args));\n+      command.add(BaseParameters.IN_PROCESS_FLAG);\n+      command.addAll(mBaseParameters.mJavaOpts);\n+\n+      LOG.info(\"running command: \" + String.join(\" \", command));\n+      return ShellUtils.execCommand(command.toArray(new String[0]));\n+    }\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0MTAxNQ=="}, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwNTg5MA==", "bodyText": "removed", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419805890", "createdAt": "2020-05-05T00:33:09Z", "author": {"login": "gpang"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/report/GenerateReport.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.stress.cli.report;\n+\n+import alluxio.stress.GraphGenerator;\n+import alluxio.stress.JsonSerializable;\n+import alluxio.stress.Summary;\n+import alluxio.stress.graph.Graph;\n+\n+import com.beust.jcommander.JCommander;\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.ParametersDelegate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Generates a report from summaries.\n+ */\n+public class GenerateReport {\n+  private static final Logger LOG = LoggerFactory.getLogger(GenerateReport.class);\n+\n+  @ParametersDelegate\n+  private Parameters mParameters = new Parameters();\n+\n+  @com.beust.jcommander.Parameters(separators = \"=\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0Nzg5OQ=="}, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwNjE1MQ==", "bodyText": "What does \"ourselves\" mean?", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419806151", "createdAt": "2020-05-05T00:34:01Z", "author": {"login": "gpang"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/suite/Suite.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.stress.cli.suite;\n+\n+import alluxio.stress.Summary;\n+\n+import com.beust.jcommander.JCommander;\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.ParametersDelegate;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Base class for all benchmark suites.\n+ *\n+ * @param <T> the summary class\n+ */\n+public abstract class Suite<T extends Summary> {\n+  @ParametersDelegate\n+  protected BaseParameters mBaseParameters = new BaseParameters();\n+\n+  private static final class BaseParameters {\n+    static final String CLUSTER_FLAG = \"--cluster\";\n+\n+    @Parameter(names = {CLUSTER_FLAG},\n+        description = \"If true, runs the benchmark via the job service cluster. Otherwise, runs \"\n+            + \"locally.\")\n+    public boolean mCluster = false;\n+\n+    @Parameter(names = {\"--java-opt\"},\n+        description = \"The java options to add to the command line to for the task. This can be \"\n+            + \"repeated. The options must be quoted and prefixed with a space, to avoid getting \"\n+            + \"passed to the JVM. For example: --java-opt \\\" -Xmx4g\\\" --java-opt \\\" -Xms2g\\\"\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0OTE4Mw=="}, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgxMzg2Ng==", "bodyText": "done", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419813866", "createdAt": "2020-05-05T01:04:03Z", "author": {"login": "gpang"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/StressMasterBench.java", "diffHunk": "@@ -0,0 +1,382 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.stress.cli;\n+\n+import alluxio.Constants;\n+import alluxio.conf.PropertyKey;\n+import alluxio.stress.BaseParameters;\n+import alluxio.stress.master.MasterBenchParameters;\n+import alluxio.stress.master.MasterBenchTaskResult;\n+import alluxio.stress.master.Operation;\n+import alluxio.util.CommonUtils;\n+import alluxio.util.FormatUtils;\n+import alluxio.util.WaitForOptions;\n+import alluxio.util.executor.ExecutorServiceFactories;\n+import alluxio.util.io.PathUtils;\n+\n+import com.beust.jcommander.ParametersDelegate;\n+import com.google.common.util.concurrent.RateLimiter;\n+import org.HdrHistogram.Histogram;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Single node stress test.\n+ */\n+public class StressMasterBench extends Benchmark<MasterBenchTaskResult> {\n+  private static final Logger LOG = LoggerFactory.getLogger(StressMasterBench.class);\n+\n+  @ParametersDelegate\n+  private MasterBenchParameters mParameters = new MasterBenchParameters();\n+\n+  private byte[] mFiledata;\n+  private FileSystem[] mCachedFs;\n+\n+  /**\n+   * Creates instance.\n+   */\n+  public StressMasterBench() {\n+  }\n+\n+  /**\n+   * @param args command-line arguments\n+   */\n+  public static void main(String[] args) {\n+    mainInternal(args, new StressMasterBench());\n+  }\n+\n+  @Override\n+  public void prepare() throws Exception {\n+    if (mParameters.mFixedCount <= 0) {\n+      throw new IllegalStateException(\n+          \"fixed count must be > 0. fixedCount: \" + mParameters.mFixedCount);\n+    }\n+\n+    if (!mBaseParameters.mDistributed) {\n+      // set hdfs conf for preparation client\n+      Configuration hdfsConf = new Configuration();\n+      // force delete, create dirs through to UFS\n+      hdfsConf.set(PropertyKey.Name.USER_FILE_DELETE_UNCHECKED, \"true\");\n+      hdfsConf.set(PropertyKey.Name.USER_FILE_WRITE_TYPE_DEFAULT, \"CACHE_THROUGH\");\n+      FileSystem prepareFs = FileSystem.get(new URI(mParameters.mBasePath), hdfsConf);\n+\n+      // initialize the base, for only the non-distributed task (the cluster launching task)\n+      Path path = new Path(mParameters.mBasePath);\n+\n+      // the base path depends on the operation\n+      Path basePath;\n+      if (mParameters.mOperation == Operation.CreateDir) {\n+        basePath = new Path(path, \"dirs\");\n+      } else {\n+        basePath = new Path(path, \"files\");\n+      }\n+\n+      if (mParameters.mOperation == Operation.CreateFile\n+          || mParameters.mOperation == Operation.CreateDir) {\n+        prepareFs.delete(basePath, true);\n+        prepareFs.mkdirs(basePath);\n+      } else {\n+        // these are read operations. the directory must exist\n+        if (!prepareFs.exists(basePath)) {\n+          throw new IllegalStateException(String\n+              .format(\"base path (%s) must exist for operation (%s)\", basePath,\n+                  mParameters.mOperation));\n+        }\n+      }\n+      if (!prepareFs.isDirectory(basePath)) {\n+        throw new IllegalStateException(String\n+            .format(\"base path (%s) must be a directory for operation (%s)\", basePath,\n+                mParameters.mOperation));\n+      }\n+    }\n+\n+    // set hdfs conf for all test clients\n+    Configuration hdfsConf = new Configuration();\n+    // do not cache these clients\n+    hdfsConf.set(\n+        String.format(\"fs.%s.impl.disable.cache\", (new URI(mParameters.mBasePath)).getScheme()),\n+        \"true\");\n+    for (Map.Entry<String, String> entry : mParameters.mConf.entrySet()) {\n+      hdfsConf.set(entry.getKey(), entry.getValue());\n+    }\n+    mCachedFs = new FileSystem[mParameters.mClients];\n+    for (int i = 0; i < mCachedFs.length; i++) {\n+      mCachedFs[i] = FileSystem.get(new URI(mParameters.mBasePath), hdfsConf);\n+    }\n+  }\n+\n+  @Override\n+  public MasterBenchTaskResult runLocal() throws Exception {\n+    ExecutorService service =\n+        ExecutorServiceFactories.fixedThreadPool(\"bench-thread\", mParameters.mThreads).create();\n+\n+    RateLimiter rateLimiter = RateLimiter.create(mParameters.mTargetThroughput);\n+\n+    mFiledata = new byte[(int) FormatUtils.parseSpaceSize(mParameters.mCreateFileSize)];\n+    Arrays.fill(mFiledata, (byte) 0x7A);\n+\n+    long durationMs = FormatUtils.parseTimeSize(mParameters.mDuration);\n+    long warmupMs = FormatUtils.parseTimeSize(mParameters.mWarmup);\n+    long startMs = mBaseParameters.mStartMs;\n+    if (mBaseParameters.mStartMs == BaseParameters.UNDEFINED_START_MS) {\n+      startMs = CommonUtils.getCurrentMs() + 1000;\n+    }\n+    long endMs = startMs + warmupMs + durationMs;\n+    BenchContext context = new BenchContext(rateLimiter, startMs, endMs);\n+    for (int i = 0; i < mParameters.mThreads; i++) {\n+      service.submit(new BenchThread(context, mCachedFs[i % mCachedFs.length]));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0Njc5MA=="}, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgxNDM1Ng==", "bodyText": "Well, the resource is not tied to this code, but tied to the generated html file. Is there something else we can do?", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419814356", "createdAt": "2020-05-05T01:05:59Z", "author": {"login": "gpang"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/report/GenerateReport.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.stress.cli.report;\n+\n+import alluxio.stress.GraphGenerator;\n+import alluxio.stress.JsonSerializable;\n+import alluxio.stress.Summary;\n+import alluxio.stress.graph.Graph;\n+\n+import com.beust.jcommander.JCommander;\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.ParametersDelegate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Generates a report from summaries.\n+ */\n+public class GenerateReport {\n+  private static final Logger LOG = LoggerFactory.getLogger(GenerateReport.class);\n+\n+  @ParametersDelegate\n+  private Parameters mParameters = new Parameters();\n+\n+  @com.beust.jcommander.Parameters(separators = \"=\")\n+  private static class Parameters {\n+    @Parameter(names = \"--input\",\n+        description = \"The input json files of the results. Can be repeated\", required = true)\n+    private List<String> mInputs;\n+\n+    @Parameter(names = \"--output-dir\", description = \"The output directory\", required = true)\n+    private String mOutputDir;\n+  }\n+\n+  /**\n+   * @param args the command-line args\n+   */\n+  public static void main(String[] args) {\n+    new GenerateReport().run(args);\n+  }\n+\n+  GenerateReport() {\n+  }\n+\n+  private void run(String[] args) {\n+    JCommander jc = new JCommander(this);\n+    jc.setProgramName(this.getClass().getSimpleName());\n+    try {\n+      jc.parse(args);\n+    } catch (Exception e) {\n+      jc.usage();\n+      throw e;\n+    }\n+\n+    List<Summary> inputs =\n+        mParameters.mInputs.stream().map(f -> {\n+          try {\n+            return readJson(f);\n+          } catch (Exception e) {\n+            throw new RuntimeException(e);\n+          }\n+        }).collect(Collectors.toList());\n+\n+    String className = null;\n+    for (Summary summary : inputs) {\n+      if (className == null) {\n+        className = summary.getClassName();\n+      }\n+      if (!className.equals(summary.getClassName())) {\n+        throw new RuntimeException(\n+            \"Mismatched input result types: \" + className + \" , \" + summary.getClassName());\n+      }\n+    }\n+\n+    File outputDir = new File(mParameters.mOutputDir);\n+    outputDir.mkdirs();\n+\n+    GraphGenerator graphGenerator = inputs.get(0).graphGenerator();\n+\n+    List<Graph> graphs = graphGenerator.generate(inputs);\n+\n+    try (PrintWriter writer = new PrintWriter(\n+        new FileWriter(Paths.get(outputDir.getAbsolutePath(), \"index.html\").toString()))) {\n+\n+      writer.println(\"<!DOCTYPE html>\");\n+      writer.println(\"<head>\");\n+      writer.println(\"<script src=\\\"https://cdn.jsdelivr.net/npm/vega@5\\\"></script>\");\n+      writer.println(\"<script src=\\\"https://cdn.jsdelivr.net/npm/vega-lite@4\\\"></script>\");\n+      writer.println(\"<script src=\\\"https://cdn.jsdelivr.net/npm/vega-embed@6\\\"></script>\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0ODcyOQ=="}, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgxNDUzOA==", "bodyText": "I had considered a library, but those seemed more heavyweight for a simple file that I was generating. If I wanted more to the generated file, then maybe we need a library or template. I will look into it some...", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r419814538", "createdAt": "2020-05-05T01:06:43Z", "author": {"login": "gpang"}, "path": "stress/shell/src/main/java/alluxio/stress/cli/report/GenerateReport.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.stress.cli.report;\n+\n+import alluxio.stress.GraphGenerator;\n+import alluxio.stress.JsonSerializable;\n+import alluxio.stress.Summary;\n+import alluxio.stress.graph.Graph;\n+\n+import com.beust.jcommander.JCommander;\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.ParametersDelegate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Generates a report from summaries.\n+ */\n+public class GenerateReport {\n+  private static final Logger LOG = LoggerFactory.getLogger(GenerateReport.class);\n+\n+  @ParametersDelegate\n+  private Parameters mParameters = new Parameters();\n+\n+  @com.beust.jcommander.Parameters(separators = \"=\")\n+  private static class Parameters {\n+    @Parameter(names = \"--input\",\n+        description = \"The input json files of the results. Can be repeated\", required = true)\n+    private List<String> mInputs;\n+\n+    @Parameter(names = \"--output-dir\", description = \"The output directory\", required = true)\n+    private String mOutputDir;\n+  }\n+\n+  /**\n+   * @param args the command-line args\n+   */\n+  public static void main(String[] args) {\n+    new GenerateReport().run(args);\n+  }\n+\n+  GenerateReport() {\n+  }\n+\n+  private void run(String[] args) {\n+    JCommander jc = new JCommander(this);\n+    jc.setProgramName(this.getClass().getSimpleName());\n+    try {\n+      jc.parse(args);\n+    } catch (Exception e) {\n+      jc.usage();\n+      throw e;\n+    }\n+\n+    List<Summary> inputs =\n+        mParameters.mInputs.stream().map(f -> {\n+          try {\n+            return readJson(f);\n+          } catch (Exception e) {\n+            throw new RuntimeException(e);\n+          }\n+        }).collect(Collectors.toList());\n+\n+    String className = null;\n+    for (Summary summary : inputs) {\n+      if (className == null) {\n+        className = summary.getClassName();\n+      }\n+      if (!className.equals(summary.getClassName())) {\n+        throw new RuntimeException(\n+            \"Mismatched input result types: \" + className + \" , \" + summary.getClassName());\n+      }\n+    }\n+\n+    File outputDir = new File(mParameters.mOutputDir);\n+    outputDir.mkdirs();\n+\n+    GraphGenerator graphGenerator = inputs.get(0).graphGenerator();\n+\n+    List<Graph> graphs = graphGenerator.generate(inputs);\n+\n+    try (PrintWriter writer = new PrintWriter(\n+        new FileWriter(Paths.get(outputDir.getAbsolutePath(), \"index.html\").toString()))) {\n+\n+      writer.println(\"<!DOCTYPE html>\");\n+      writer.println(\"<head>\");\n+      writer.println(\"<script src=\\\"https://cdn.jsdelivr.net/npm/vega@5\\\"></script>\");\n+      writer.println(\"<script src=\\\"https://cdn.jsdelivr.net/npm/vega-lite@4\\\"></script>\");\n+      writer.println(\"<script src=\\\"https://cdn.jsdelivr.net/npm/vega-embed@6\\\"></script>\");\n+      writer.println(\"</head>\");\n+      writer.println(\"<body>\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc0NzI4OQ=="}, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 109}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d423b77e573fa9768f90c1fab4cac3519a63011", "author": {"user": {"login": "gpang", "name": "Gene Pang"}}, "url": "https://github.com/Alluxio/alluxio/commit/3d423b77e573fa9768f90c1fab4cac3519a63011", "committedDate": "2020-05-11T19:40:55Z", "message": "Retrieve the job status separately"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NDc0MjAx", "url": "https://github.com/Alluxio/alluxio/pull/11377#pullrequestreview-409474201", "createdAt": "2020-05-11T19:41:43Z", "commit": {"oid": "4f23c0d0edacb256e59c81acb73aa3e06ec6f93d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOTo0MTo0NFrOGTqqLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOTo0MTo0NFrOGTqqLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI3NTA1NA==", "bodyText": "I reverted this change.", "url": "https://github.com/Alluxio/alluxio/pull/11377#discussion_r423275054", "createdAt": "2020-05-11T19:41:44Z", "author": {"login": "gpang"}, "path": "job/client/src/main/java/alluxio/client/job/JobGrpcClientUtils.java", "diffHunk": "@@ -106,6 +107,10 @@ private static JobInfo waitFor(final long jobId, AlluxioConfiguration alluxioCon\n           }\n           return true;\n         }, WaitForOptions.defaults().setInterval(1000));\n+      if (resultInfo != null) {\n+        resultInfo = client.getJobStatusDetailed(resultInfo.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcwNzc1OQ=="}, "originalCommit": {"oid": "eff7fe188edf3f6280f1f765ab9eaec8dda4972d"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NTc3MjIw", "url": "https://github.com/Alluxio/alluxio/pull/11377#pullrequestreview-409577220", "createdAt": "2020-05-11T22:32:28Z", "commit": {"oid": "3d423b77e573fa9768f90c1fab4cac3519a63011"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4587, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}