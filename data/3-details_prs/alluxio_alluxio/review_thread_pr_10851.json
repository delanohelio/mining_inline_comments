{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNjcwMDk3", "number": 10851, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMjowODo1M1rODdixfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMjowODo1M1rODdixfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzA1MDIzOnYy", "diffSide": "RIGHT", "path": "examples/src/main/java/alluxio/examples/UnderFileSystemCommonOperations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMjowODo1M1rOFmNUTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMjoyMzowNVrOFmNfZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYwODM5Nw==", "bodyText": "why do we need an atomic here?", "url": "https://github.com/Alluxio/alluxio/pull/10851#discussion_r375608397", "createdAt": "2020-02-06T02:08:53Z", "author": {"login": "madanadit"}, "path": "examples/src/main/java/alluxio/examples/UnderFileSystemCommonOperations.java", "diffHunk": "@@ -675,27 +673,24 @@ public void listStatusFileTest() throws IOException {\n    * Test for listing large directory.\n    */\n   @RelatedS3Operations(operations = {\"putObject\", \"listObjectsV2\", \"getObjectMetadata\"})\n-  public void listLargeDirectoryTest() throws IOException {\n+  public void listLargeDirectoryTest() throws Exception {\n     LargeDirectoryConfig config = prepareLargeDirectory();\n     String[] children = config.getChildren();\n \n     // Retry for some time to allow list operations eventual consistency for S3 and GCS.\n     // See http://docs.aws.amazon.com/AmazonS3/latest/dev/Introduction.html and\n     // https://cloud.google.com/storage/docs/consistency for more details.\n-    // Note: not using CommonUtils.waitFor here because we intend to sleep with a longer interval.\n-    UfsStatus[] results = new UfsStatus[] {};\n-    for (int i = 0; i < 50; i++) {\n-      results = mUfs.listStatus(config.getTopLevelDirectory());\n-      if (children.length == results.length) {\n-        break;\n+    AtomicReference<UfsStatus[]> results = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd4f7a659784a2ead345a58c1462c288af4417d"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxMTIzNw==", "bodyText": "this was because we cannot set variables from within a closure, so I couldn't assign to results.", "url": "https://github.com/Alluxio/alluxio/pull/10851#discussion_r375611237", "createdAt": "2020-02-06T02:23:05Z", "author": {"login": "gpang"}, "path": "examples/src/main/java/alluxio/examples/UnderFileSystemCommonOperations.java", "diffHunk": "@@ -675,27 +673,24 @@ public void listStatusFileTest() throws IOException {\n    * Test for listing large directory.\n    */\n   @RelatedS3Operations(operations = {\"putObject\", \"listObjectsV2\", \"getObjectMetadata\"})\n-  public void listLargeDirectoryTest() throws IOException {\n+  public void listLargeDirectoryTest() throws Exception {\n     LargeDirectoryConfig config = prepareLargeDirectory();\n     String[] children = config.getChildren();\n \n     // Retry for some time to allow list operations eventual consistency for S3 and GCS.\n     // See http://docs.aws.amazon.com/AmazonS3/latest/dev/Introduction.html and\n     // https://cloud.google.com/storage/docs/consistency for more details.\n-    // Note: not using CommonUtils.waitFor here because we intend to sleep with a longer interval.\n-    UfsStatus[] results = new UfsStatus[] {};\n-    for (int i = 0; i < 50; i++) {\n-      results = mUfs.listStatus(config.getTopLevelDirectory());\n-      if (children.length == results.length) {\n-        break;\n+    AtomicReference<UfsStatus[]> results = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYwODM5Nw=="}, "originalCommit": {"oid": "8bd4f7a659784a2ead345a58c1462c288af4417d"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2158, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}