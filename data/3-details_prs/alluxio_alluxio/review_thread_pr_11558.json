{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzOTMyMDA1", "number": 11558, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMToyMDo1OFrOEFOPMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMToyMTo1NlrOEFOPdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTExNjAzOnYy", "diffSide": "RIGHT", "path": "integration/emr/alluxio-emr.sh", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMToyMDo1OFrOGjU6Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMTo0NDo0OVrOGjVB5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NTk0Mw==", "bodyText": "-c                Install the alluxio client jars only.\uff1f\nWhere assign value to client_only?", "url": "https://github.com/Alluxio/alluxio/pull/11558#discussion_r439695943", "createdAt": "2020-06-13T01:20:58Z", "author": {"login": "LuQQiu"}, "path": "integration/emr/alluxio-emr.sh", "diffHunk": "@@ -237,32 +482,49 @@ If a different Alluxio version is desired, see the -d option.\n   -s                A string containing a single character representing what\n                     delimiter should be used to split the Alluxio properties\n                     provided in the [-p] argument.\n+\n+  -v                Version of HDFS used as the root UFS. Required when\n+                    root UFS is HDFS.\n+\n USAGE_END\n )\n     echo -e \"${USAGE}\" >&2\n     exit 1\n   }\n-  local alluxio_tarball=\"\"\n+\n+  # ordered alphabetically by flag character\n   local backup_uri=\"\"\n-  local property_delimiter=\";\"\n-  local delimited_properties=\"\"\n-  local restore_from_backup_uri=\"\"\n+  local client_only=\"false\"\n+  local alluxio_tarball=\"\"\n+  local execute_synchronous=\"false\"\n   local files_list=\"\"\n+  local restore_from_backup_uri=\"\"\n   local nvme_capacity_usage=\"\"\n-  local client_only=\"false\"\n+  local delimited_properties=\"\"\n+  local property_delimiter=\";\"\n+  local hdfs_version=\"\"\n \n   if [[ \"$#\" -lt \"1\" ]]; then\n     echo -e \"No root UFS URI provided\"\n     print_help 1\n   fi\n \n   local root_ufs_uri=\"${1}\"\n+  # note that since the script args are shifted\n+  # the shifted argument needs to be manually added when launching the background process\n   shift\n-  while getopts \"b:cd:f:i:n:p:s:\" option; do\n-    if [[ -n \"${OPTARG-}\" ]]; then\n-      OPTARG=$(echo -e \"${OPTARG}\" | tr -d '[:space:]')\n-    fi\n+\n+  while getopts \"ehb:cd:f:i:n:p:s:v:\" option; do", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc7fdcbe67b9863e8186a1e2bd2cd58e7c940946"}, "originalPosition": 455}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NjA2OA==", "bodyText": "#11545", "url": "https://github.com/Alluxio/alluxio/pull/11558#discussion_r439696068", "createdAt": "2020-06-13T01:22:12Z", "author": {"login": "Xenorith"}, "path": "integration/emr/alluxio-emr.sh", "diffHunk": "@@ -237,32 +482,49 @@ If a different Alluxio version is desired, see the -d option.\n   -s                A string containing a single character representing what\n                     delimiter should be used to split the Alluxio properties\n                     provided in the [-p] argument.\n+\n+  -v                Version of HDFS used as the root UFS. Required when\n+                    root UFS is HDFS.\n+\n USAGE_END\n )\n     echo -e \"${USAGE}\" >&2\n     exit 1\n   }\n-  local alluxio_tarball=\"\"\n+\n+  # ordered alphabetically by flag character\n   local backup_uri=\"\"\n-  local property_delimiter=\";\"\n-  local delimited_properties=\"\"\n-  local restore_from_backup_uri=\"\"\n+  local client_only=\"false\"\n+  local alluxio_tarball=\"\"\n+  local execute_synchronous=\"false\"\n   local files_list=\"\"\n+  local restore_from_backup_uri=\"\"\n   local nvme_capacity_usage=\"\"\n-  local client_only=\"false\"\n+  local delimited_properties=\"\"\n+  local property_delimiter=\";\"\n+  local hdfs_version=\"\"\n \n   if [[ \"$#\" -lt \"1\" ]]; then\n     echo -e \"No root UFS URI provided\"\n     print_help 1\n   fi\n \n   local root_ufs_uri=\"${1}\"\n+  # note that since the script args are shifted\n+  # the shifted argument needs to be manually added when launching the background process\n   shift\n-  while getopts \"b:cd:f:i:n:p:s:\" option; do\n-    if [[ -n \"${OPTARG-}\" ]]; then\n-      OPTARG=$(echo -e \"${OPTARG}\" | tr -d '[:space:]')\n-    fi\n+\n+  while getopts \"ehb:cd:f:i:n:p:s:v:\" option; do", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NTk0Mw=="}, "originalCommit": {"oid": "cc7fdcbe67b9863e8186a1e2bd2cd58e7c940946"}, "originalPosition": 455}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NjUyMw==", "bodyText": "oh shit i didn't add it in here", "url": "https://github.com/Alluxio/alluxio/pull/11558#discussion_r439696523", "createdAt": "2020-06-13T01:27:18Z", "author": {"login": "Xenorith"}, "path": "integration/emr/alluxio-emr.sh", "diffHunk": "@@ -237,32 +482,49 @@ If a different Alluxio version is desired, see the -d option.\n   -s                A string containing a single character representing what\n                     delimiter should be used to split the Alluxio properties\n                     provided in the [-p] argument.\n+\n+  -v                Version of HDFS used as the root UFS. Required when\n+                    root UFS is HDFS.\n+\n USAGE_END\n )\n     echo -e \"${USAGE}\" >&2\n     exit 1\n   }\n-  local alluxio_tarball=\"\"\n+\n+  # ordered alphabetically by flag character\n   local backup_uri=\"\"\n-  local property_delimiter=\";\"\n-  local delimited_properties=\"\"\n-  local restore_from_backup_uri=\"\"\n+  local client_only=\"false\"\n+  local alluxio_tarball=\"\"\n+  local execute_synchronous=\"false\"\n   local files_list=\"\"\n+  local restore_from_backup_uri=\"\"\n   local nvme_capacity_usage=\"\"\n-  local client_only=\"false\"\n+  local delimited_properties=\"\"\n+  local property_delimiter=\";\"\n+  local hdfs_version=\"\"\n \n   if [[ \"$#\" -lt \"1\" ]]; then\n     echo -e \"No root UFS URI provided\"\n     print_help 1\n   fi\n \n   local root_ufs_uri=\"${1}\"\n+  # note that since the script args are shifted\n+  # the shifted argument needs to be manually added when launching the background process\n   shift\n-  while getopts \"b:cd:f:i:n:p:s:\" option; do\n-    if [[ -n \"${OPTARG-}\" ]]; then\n-      OPTARG=$(echo -e \"${OPTARG}\" | tr -d '[:space:]')\n-    fi\n+\n+  while getopts \"ehb:cd:f:i:n:p:s:v:\" option; do", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NTk0Mw=="}, "originalCommit": {"oid": "cc7fdcbe67b9863e8186a1e2bd2cd58e7c940946"}, "originalPosition": 455}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NjY5NA==", "bodyText": "oh wait i dont need to cuz it was already committed...", "url": "https://github.com/Alluxio/alluxio/pull/11558#discussion_r439696694", "createdAt": "2020-06-13T01:29:36Z", "author": {"login": "Xenorith"}, "path": "integration/emr/alluxio-emr.sh", "diffHunk": "@@ -237,32 +482,49 @@ If a different Alluxio version is desired, see the -d option.\n   -s                A string containing a single character representing what\n                     delimiter should be used to split the Alluxio properties\n                     provided in the [-p] argument.\n+\n+  -v                Version of HDFS used as the root UFS. Required when\n+                    root UFS is HDFS.\n+\n USAGE_END\n )\n     echo -e \"${USAGE}\" >&2\n     exit 1\n   }\n-  local alluxio_tarball=\"\"\n+\n+  # ordered alphabetically by flag character\n   local backup_uri=\"\"\n-  local property_delimiter=\";\"\n-  local delimited_properties=\"\"\n-  local restore_from_backup_uri=\"\"\n+  local client_only=\"false\"\n+  local alluxio_tarball=\"\"\n+  local execute_synchronous=\"false\"\n   local files_list=\"\"\n+  local restore_from_backup_uri=\"\"\n   local nvme_capacity_usage=\"\"\n-  local client_only=\"false\"\n+  local delimited_properties=\"\"\n+  local property_delimiter=\";\"\n+  local hdfs_version=\"\"\n \n   if [[ \"$#\" -lt \"1\" ]]; then\n     echo -e \"No root UFS URI provided\"\n     print_help 1\n   fi\n \n   local root_ufs_uri=\"${1}\"\n+  # note that since the script args are shifted\n+  # the shifted argument needs to be manually added when launching the background process\n   shift\n-  while getopts \"b:cd:f:i:n:p:s:\" option; do\n-    if [[ -n \"${OPTARG-}\" ]]; then\n-      OPTARG=$(echo -e \"${OPTARG}\" | tr -d '[:space:]')\n-    fi\n+\n+  while getopts \"ehb:cd:f:i:n:p:s:v:\" option; do", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NTk0Mw=="}, "originalCommit": {"oid": "cc7fdcbe67b9863e8186a1e2bd2cd58e7c940946"}, "originalPosition": 455}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5Nzg5Mw==", "bodyText": "i saw the line difference", "url": "https://github.com/Alluxio/alluxio/pull/11558#discussion_r439697893", "createdAt": "2020-06-13T01:44:49Z", "author": {"login": "LuQQiu"}, "path": "integration/emr/alluxio-emr.sh", "diffHunk": "@@ -237,32 +482,49 @@ If a different Alluxio version is desired, see the -d option.\n   -s                A string containing a single character representing what\n                     delimiter should be used to split the Alluxio properties\n                     provided in the [-p] argument.\n+\n+  -v                Version of HDFS used as the root UFS. Required when\n+                    root UFS is HDFS.\n+\n USAGE_END\n )\n     echo -e \"${USAGE}\" >&2\n     exit 1\n   }\n-  local alluxio_tarball=\"\"\n+\n+  # ordered alphabetically by flag character\n   local backup_uri=\"\"\n-  local property_delimiter=\";\"\n-  local delimited_properties=\"\"\n-  local restore_from_backup_uri=\"\"\n+  local client_only=\"false\"\n+  local alluxio_tarball=\"\"\n+  local execute_synchronous=\"false\"\n   local files_list=\"\"\n+  local restore_from_backup_uri=\"\"\n   local nvme_capacity_usage=\"\"\n-  local client_only=\"false\"\n+  local delimited_properties=\"\"\n+  local property_delimiter=\";\"\n+  local hdfs_version=\"\"\n \n   if [[ \"$#\" -lt \"1\" ]]; then\n     echo -e \"No root UFS URI provided\"\n     print_help 1\n   fi\n \n   local root_ufs_uri=\"${1}\"\n+  # note that since the script args are shifted\n+  # the shifted argument needs to be manually added when launching the background process\n   shift\n-  while getopts \"b:cd:f:i:n:p:s:\" option; do\n-    if [[ -n \"${OPTARG-}\" ]]; then\n-      OPTARG=$(echo -e \"${OPTARG}\" | tr -d '[:space:]')\n-    fi\n+\n+  while getopts \"ehb:cd:f:i:n:p:s:v:\" option; do", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NTk0Mw=="}, "originalCommit": {"oid": "cc7fdcbe67b9863e8186a1e2bd2cd58e7c940946"}, "originalPosition": 455}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTExNjY4OnYy", "diffSide": "RIGHT", "path": "integration/emr/alluxio-emr.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMToyMTo1NlrOGjU6qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMToyNDo1N1rOGjU7ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NjA0Mg==", "bodyText": "This conflicts with our alluxio replacement strategy, consider removing it?", "url": "https://github.com/Alluxio/alluxio/pull/11558#discussion_r439696042", "createdAt": "2020-06-13T01:21:56Z", "author": {"login": "LuQQiu"}, "path": "integration/emr/alluxio-emr.sh", "diffHunk": "@@ -280,179 +542,113 @@ USAGE_END\n       i)\n         restore_from_backup_uri=\"${OPTARG}\"\n         ;;\n+      n)\n+        nvme_capacity_usage=\"${OPTARG}\"\n+        ;;\n       p)\n         delimited_properties=\"${OPTARG}\"\n         ;;\n       s)\n         property_delimiter=\"${OPTARG}\"\n         ;;\n-      n)\n-        nvme_capacity_usage=\"${OPTARG}\"\n+      v)\n+        hdfs_version=\"${OPTARG}\"\n         ;;\n       *)\n         print_help 1\n         ;;\n     esac\n   done\n \n+  # validate arguments\n   if [[ \"${nvme_capacity_usage}\" ]]; then\n     if [[ \"${nvme_capacity_usage}\" -lt 1 || \"${nvme_capacity_usage}\" -gt 100 ]]; then\n       echo \"The percent usage of NVMe storage usage must be between 1 and 100\"\n       exit 1\n     fi\n   fi\n-\n-  # Create user\n-  id -u alluxio &>/dev/null || sudo useradd alluxio\n-\n-  # Install Alluxio\n   if [[ -z \"${alluxio_tarball}\" ]]; then\n     alluxio_tarball=\"${ALLUXIO_DOWNLOAD_URL}\"\n   fi\n-  if [[ ! -d \"${ALLUXIO_HOME}\" ]]; then\n-    emr_install_alluxio \"${alluxio_tarball}\"\n-  fi\n-\n-  if [[ ! -d \"${ALLUXIO_HOME}\" ]]; then\n-    echo -e \"${ALLUXIO_HOME} install not found. Please provide a download URI with -d or install it on the OS before running this script.\"\n-    echo -e \"Example URI: https://downloads.alluxio.io/downloads/files/${ALLUXIO_VERSION}/alluxio-${ALLUXIO_VERSION}-bin.tar.gz\"\n+  if [[ \"${root_ufs_uri}\" = hdfs://* ]] && [[ -z \"${hdfs_version}\" ]]; then\n+    echo \"Hdfs version of Alluxio HDFS root mount must be provided with -v\"\n     exit 1\n   fi\n \n-  local -r aws_region=$(get_aws_region)\n-\n-  # Get hostnames and load into masters/workers file\n-  local -r emr_cluster=$(jq '.jobFlowId' /mnt/var/lib/info/job-flow.json | sed -e 's/^\"//' -e 's/\"$//')\n-  local -r hostlist=$(aws emr list-instances --cluster-id \"${emr_cluster}\" --region \"${aws_region}\" | jq '.Instances[].PrivateDnsName' | sed -e 's/^\"//' -e 's/\"$//')\n-\n-  # Should succeed only on workers. Otherwise, var is left empty\n-  local master\n-  master=$(jq '.masterHost' /mnt/var/lib/info/extraInstanceData.json | sed -e 's/^\"//' -e 's/\"$//' | nslookup | awk '/name/{print substr($NF,1,length($NF)-1)}')\n-\n-  # Logic to get master hostname if on the master\n-  if [[ -z \"${master}\" ]]; then\n-    master=$(hostname)\n-    if [[ ${aws_region} == \"us-east-1\" ]]; then\n-      master=${master}\".ec2.internal\"\n-    else\n-      master=${master}\".${aws_region}.compute.internal\"\n+  # self-invoke script as background task\n+  # this allows EMR to continue installing and launching applications\n+  # the script will wait until HDFS processes are running before continuing\n+  if [[ ${execute_synchronous} == \"false\" ]]; then\n+    echo \"Executing synchronously before hadoop starts\"\n+    # create user, install Alluxio if not exists, create masters and workers files\n+    id -u alluxio &>/dev/null || sudo useradd alluxio\n+    echo \"Created alluxio user\"\n+    if [[ ! -d \"${ALLUXIO_HOME}\" ]]; then\n+      echo \"Installing Alluxio from tarball at ${alluxio_tarball}\"\n+      emr_install_alluxio \"${alluxio_tarball}\"\n     fi\n+    if [[ ! -d \"${ALLUXIO_HOME}\" ]]; then\n+      echo -e \"${ALLUXIO_HOME} install not found. Please provide a download URI with -d or install it on the OS before running this script.\"\n+      echo -e \"Example URI: https://downloads.alluxio.io/downloads/files/${ALLUXIO_VERSION}/alluxio-${ALLUXIO_VERSION}-bin.tar.gz\"\n+      exit 1\n+    fi\n+    download_user_files \"${files_list}\"\n+    expose_alluxio_client_jar\n+\n+    echo \"Launching background process\"\n+    # note the root_ufs_uri needs to be manually added\n+    # because shift removes it from the arguments array\n+    launch_args=\"$0 ${root_ufs_uri} -e\"\n+    # iterate through each provided argument and replace characters that need escaping\n+    # this is necessary to properly wrap the json value of a flag\n+    # otherwise the json content will not be passed correctly into the background process\n+    input_args=( \"$@\" )\n+    if [[ \"${#input_args[@]}\" -gt \"0\" ]]; then\n+      for i in \"${input_args[@]}\"; do\n+        # forcibly escape the three characters \" { }\n+        esc_i=$(echo \"${i}\" | sed 's/\"/\\\\\"/g' | sed 's/{/\\\\{/g' | sed 's/}/\\\\}/g')\n+        launch_args=\"${launch_args} ${esc_i}\"\n+      done\n+    fi\n+    bash -c \"$launch_args\" &\n+    exit 0\n   fi\n+  echo \"Executing asynchronous\"\n \n-  local -r workers=$(printf '%s\\n' \"${hostlist//$master/}\")\n-\n-  doas alluxio \"echo '${master}' > ${ALLUXIO_HOME}/conf/masters\"\n-  doas alluxio \"echo '${workers}' > ${ALLUXIO_HOME}/conf/workers\"\n-\n-  # set root ufs uri\n-  if [[ \"${root_ufs_uri}\" = \"LOCAL\" ]]; then\n-    root_ufs_uri=\"hdfs://${master}:8020\"\n-  fi\n-\n-  # Identify master\n+  # collect instance information\n+  local -r local_hostname=$(hostname -f)\n   local -r is_master=$(jq '.isMaster' /mnt/var/lib/info/instance.json)\n \n-  # Download files provided by \"-f\" to ${ALLUXIO_HOME}/conf\n-  IFS=\" \" read -ra files_to_be_downloaded <<< \"${files_list}\"\n-  if [ \"${#files_to_be_downloaded[@]}\" -gt \"0\" ]; then\n-    local filename\n-    for file in \"${files_to_be_downloaded[@]}\"; do\n-      filename=\"$(basename \"${file}\")\"\n-      download_file \"${file}\"\n-      sudo mv \"${filename}\" \"${ALLUXIO_HOME}/conf/${filename}\"\n-    done\n-    sudo chown -R alluxio:alluxio \"${ALLUXIO_HOME}/conf\"\n-  fi\n-  # Add newline to alluxio-site.properties in case the provided file doesn't end in newline\n-  doas alluxio \"echo >> ${ALLUXIO_SITE_PROPERTIES}\"\n-\n-  if [[ \"${delimited_properties}\" ]]; then\n-    # Inject user defined properties from args\n-    IFS=\"${property_delimiter}\" read -ra conf <<< \"${delimited_properties}\"\n-    for property in \"${conf[@]}\"; do\n-      local key=${property%%\"=\"*}\n-      local value=${property#*\"=\"}\n-      append_alluxio_property \"${key}\" \"${value}\"\n-    done\n+  # determine master hostname, different if on master vs worker\n+  local master\n+  if [[ \"${is_master}\" == \"true\" ]]; then\n+    master=\"${local_hostname}\"\n+  else\n+    master=$(jq '.masterHost' /mnt/var/lib/info/extraInstanceData.json | sed -e 's/^\"//' -e 's/\"$//' | nslookup | awk '/name/{print substr($NF,1,length($NF)-1)}')\n   fi\n \n-  local -r mem_size=$(get_default_mem_size)\n-\n-  # Query S3 for canonical ID of user and strip out the quotes\n-  local -r canonical_id=\"$(aws s3api list-buckets --query \"Owner.ID\" | sed \"s/\\\"//g\")\"\n+  # wait until hadoop process is running\n+  echo \"Waiting for processes to start before starting script\"\n+  wait_for_hadoop \"${is_master}\" \"${is_krb}\"\n \n+  echo \"Starting Alluxio configuration\"\n+  set_custom_alluxio_properties \"${delimited_properties}\"\n \n-  # Append default configs to site properties if the user hasn't set them already\n+  # set auto generated properties\n+  echo \"Setting auto-generated properties in ${ALLUXIO_SITE_PROPERTIES}\"\n   doas alluxio \"echo '# BEGIN AUTO-GENERATED PROPERTIES' >> ${ALLUXIO_SITE_PROPERTIES}\"\n   doas alluxio \"echo '# Override these by specifying an alluxio-site.properties file, or delimited args within the EMR bootstrap' >> ${ALLUXIO_SITE_PROPERTIES}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc7fdcbe67b9863e8186a1e2bd2cd58e7c940946"}, "originalPosition": 637}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NjMxNA==", "bodyText": "hmm yeah probably should remove this echo statement", "url": "https://github.com/Alluxio/alluxio/pull/11558#discussion_r439696314", "createdAt": "2020-06-13T01:24:57Z", "author": {"login": "Xenorith"}, "path": "integration/emr/alluxio-emr.sh", "diffHunk": "@@ -280,179 +542,113 @@ USAGE_END\n       i)\n         restore_from_backup_uri=\"${OPTARG}\"\n         ;;\n+      n)\n+        nvme_capacity_usage=\"${OPTARG}\"\n+        ;;\n       p)\n         delimited_properties=\"${OPTARG}\"\n         ;;\n       s)\n         property_delimiter=\"${OPTARG}\"\n         ;;\n-      n)\n-        nvme_capacity_usage=\"${OPTARG}\"\n+      v)\n+        hdfs_version=\"${OPTARG}\"\n         ;;\n       *)\n         print_help 1\n         ;;\n     esac\n   done\n \n+  # validate arguments\n   if [[ \"${nvme_capacity_usage}\" ]]; then\n     if [[ \"${nvme_capacity_usage}\" -lt 1 || \"${nvme_capacity_usage}\" -gt 100 ]]; then\n       echo \"The percent usage of NVMe storage usage must be between 1 and 100\"\n       exit 1\n     fi\n   fi\n-\n-  # Create user\n-  id -u alluxio &>/dev/null || sudo useradd alluxio\n-\n-  # Install Alluxio\n   if [[ -z \"${alluxio_tarball}\" ]]; then\n     alluxio_tarball=\"${ALLUXIO_DOWNLOAD_URL}\"\n   fi\n-  if [[ ! -d \"${ALLUXIO_HOME}\" ]]; then\n-    emr_install_alluxio \"${alluxio_tarball}\"\n-  fi\n-\n-  if [[ ! -d \"${ALLUXIO_HOME}\" ]]; then\n-    echo -e \"${ALLUXIO_HOME} install not found. Please provide a download URI with -d or install it on the OS before running this script.\"\n-    echo -e \"Example URI: https://downloads.alluxio.io/downloads/files/${ALLUXIO_VERSION}/alluxio-${ALLUXIO_VERSION}-bin.tar.gz\"\n+  if [[ \"${root_ufs_uri}\" = hdfs://* ]] && [[ -z \"${hdfs_version}\" ]]; then\n+    echo \"Hdfs version of Alluxio HDFS root mount must be provided with -v\"\n     exit 1\n   fi\n \n-  local -r aws_region=$(get_aws_region)\n-\n-  # Get hostnames and load into masters/workers file\n-  local -r emr_cluster=$(jq '.jobFlowId' /mnt/var/lib/info/job-flow.json | sed -e 's/^\"//' -e 's/\"$//')\n-  local -r hostlist=$(aws emr list-instances --cluster-id \"${emr_cluster}\" --region \"${aws_region}\" | jq '.Instances[].PrivateDnsName' | sed -e 's/^\"//' -e 's/\"$//')\n-\n-  # Should succeed only on workers. Otherwise, var is left empty\n-  local master\n-  master=$(jq '.masterHost' /mnt/var/lib/info/extraInstanceData.json | sed -e 's/^\"//' -e 's/\"$//' | nslookup | awk '/name/{print substr($NF,1,length($NF)-1)}')\n-\n-  # Logic to get master hostname if on the master\n-  if [[ -z \"${master}\" ]]; then\n-    master=$(hostname)\n-    if [[ ${aws_region} == \"us-east-1\" ]]; then\n-      master=${master}\".ec2.internal\"\n-    else\n-      master=${master}\".${aws_region}.compute.internal\"\n+  # self-invoke script as background task\n+  # this allows EMR to continue installing and launching applications\n+  # the script will wait until HDFS processes are running before continuing\n+  if [[ ${execute_synchronous} == \"false\" ]]; then\n+    echo \"Executing synchronously before hadoop starts\"\n+    # create user, install Alluxio if not exists, create masters and workers files\n+    id -u alluxio &>/dev/null || sudo useradd alluxio\n+    echo \"Created alluxio user\"\n+    if [[ ! -d \"${ALLUXIO_HOME}\" ]]; then\n+      echo \"Installing Alluxio from tarball at ${alluxio_tarball}\"\n+      emr_install_alluxio \"${alluxio_tarball}\"\n     fi\n+    if [[ ! -d \"${ALLUXIO_HOME}\" ]]; then\n+      echo -e \"${ALLUXIO_HOME} install not found. Please provide a download URI with -d or install it on the OS before running this script.\"\n+      echo -e \"Example URI: https://downloads.alluxio.io/downloads/files/${ALLUXIO_VERSION}/alluxio-${ALLUXIO_VERSION}-bin.tar.gz\"\n+      exit 1\n+    fi\n+    download_user_files \"${files_list}\"\n+    expose_alluxio_client_jar\n+\n+    echo \"Launching background process\"\n+    # note the root_ufs_uri needs to be manually added\n+    # because shift removes it from the arguments array\n+    launch_args=\"$0 ${root_ufs_uri} -e\"\n+    # iterate through each provided argument and replace characters that need escaping\n+    # this is necessary to properly wrap the json value of a flag\n+    # otherwise the json content will not be passed correctly into the background process\n+    input_args=( \"$@\" )\n+    if [[ \"${#input_args[@]}\" -gt \"0\" ]]; then\n+      for i in \"${input_args[@]}\"; do\n+        # forcibly escape the three characters \" { }\n+        esc_i=$(echo \"${i}\" | sed 's/\"/\\\\\"/g' | sed 's/{/\\\\{/g' | sed 's/}/\\\\}/g')\n+        launch_args=\"${launch_args} ${esc_i}\"\n+      done\n+    fi\n+    bash -c \"$launch_args\" &\n+    exit 0\n   fi\n+  echo \"Executing asynchronous\"\n \n-  local -r workers=$(printf '%s\\n' \"${hostlist//$master/}\")\n-\n-  doas alluxio \"echo '${master}' > ${ALLUXIO_HOME}/conf/masters\"\n-  doas alluxio \"echo '${workers}' > ${ALLUXIO_HOME}/conf/workers\"\n-\n-  # set root ufs uri\n-  if [[ \"${root_ufs_uri}\" = \"LOCAL\" ]]; then\n-    root_ufs_uri=\"hdfs://${master}:8020\"\n-  fi\n-\n-  # Identify master\n+  # collect instance information\n+  local -r local_hostname=$(hostname -f)\n   local -r is_master=$(jq '.isMaster' /mnt/var/lib/info/instance.json)\n \n-  # Download files provided by \"-f\" to ${ALLUXIO_HOME}/conf\n-  IFS=\" \" read -ra files_to_be_downloaded <<< \"${files_list}\"\n-  if [ \"${#files_to_be_downloaded[@]}\" -gt \"0\" ]; then\n-    local filename\n-    for file in \"${files_to_be_downloaded[@]}\"; do\n-      filename=\"$(basename \"${file}\")\"\n-      download_file \"${file}\"\n-      sudo mv \"${filename}\" \"${ALLUXIO_HOME}/conf/${filename}\"\n-    done\n-    sudo chown -R alluxio:alluxio \"${ALLUXIO_HOME}/conf\"\n-  fi\n-  # Add newline to alluxio-site.properties in case the provided file doesn't end in newline\n-  doas alluxio \"echo >> ${ALLUXIO_SITE_PROPERTIES}\"\n-\n-  if [[ \"${delimited_properties}\" ]]; then\n-    # Inject user defined properties from args\n-    IFS=\"${property_delimiter}\" read -ra conf <<< \"${delimited_properties}\"\n-    for property in \"${conf[@]}\"; do\n-      local key=${property%%\"=\"*}\n-      local value=${property#*\"=\"}\n-      append_alluxio_property \"${key}\" \"${value}\"\n-    done\n+  # determine master hostname, different if on master vs worker\n+  local master\n+  if [[ \"${is_master}\" == \"true\" ]]; then\n+    master=\"${local_hostname}\"\n+  else\n+    master=$(jq '.masterHost' /mnt/var/lib/info/extraInstanceData.json | sed -e 's/^\"//' -e 's/\"$//' | nslookup | awk '/name/{print substr($NF,1,length($NF)-1)}')\n   fi\n \n-  local -r mem_size=$(get_default_mem_size)\n-\n-  # Query S3 for canonical ID of user and strip out the quotes\n-  local -r canonical_id=\"$(aws s3api list-buckets --query \"Owner.ID\" | sed \"s/\\\"//g\")\"\n+  # wait until hadoop process is running\n+  echo \"Waiting for processes to start before starting script\"\n+  wait_for_hadoop \"${is_master}\" \"${is_krb}\"\n \n+  echo \"Starting Alluxio configuration\"\n+  set_custom_alluxio_properties \"${delimited_properties}\"\n \n-  # Append default configs to site properties if the user hasn't set them already\n+  # set auto generated properties\n+  echo \"Setting auto-generated properties in ${ALLUXIO_SITE_PROPERTIES}\"\n   doas alluxio \"echo '# BEGIN AUTO-GENERATED PROPERTIES' >> ${ALLUXIO_SITE_PROPERTIES}\"\n   doas alluxio \"echo '# Override these by specifying an alluxio-site.properties file, or delimited args within the EMR bootstrap' >> ${ALLUXIO_SITE_PROPERTIES}\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NjA0Mg=="}, "originalCommit": {"oid": "cc7fdcbe67b9863e8186a1e2bd2cd58e7c940946"}, "originalPosition": 637}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1629, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}