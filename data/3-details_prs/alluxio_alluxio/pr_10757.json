{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzODkxNzA2", "number": 10757, "title": "Add integration tests for client side cache", "bodyText": "", "createdAt": "2020-01-16T23:15:09Z", "url": "https://github.com/Alluxio/alluxio/pull/10757", "merged": true, "mergeCommit": {"oid": "5dfe0f9d35f17bc566d12e74af248f34fb6da045"}, "closed": true, "closedAt": "2020-01-21T21:39:48Z", "author": {"login": "bf8086"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb7CV7EgH2gAyMzYzODkxNzA2OmMxNzRjNTYyZGZjYmJjMzg4NDA1OTdjM2EzY2VkY2ZjNTY1YjgwNjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb8lT9AAFqTM0NjA4OTU1NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c174c562dfcbbc38840597c3a3cedcfc565b8063", "author": {"user": {"login": "bf8086", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/c174c562dfcbbc38840597c3a3cedcfc565b8063", "committedDate": "2020-01-16T23:00:13Z", "message": "add integration tests for client side cache"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0OTI4MzIw", "url": "https://github.com/Alluxio/alluxio/pull/10757#pullrequestreview-344928320", "createdAt": "2020-01-18T06:23:45Z", "commit": {"oid": "c174c562dfcbbc38840597c3a3cedcfc565b8063"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwNjoyMzo0NVrOFfJvzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwNjoyMzo0NVrOFfJvzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwOTg2OQ==", "bodyText": "I actually suggest to remove the assertions around mCacheManager which is implementation details for integration tests (meant to be testing user-facing APIs and mCacheManager is not). Something like the below looks great to me already:\n @Test\n  public void read() throws Exception {\n    AlluxioURI path = new AlluxioURI(mFilePath);\n    FileSystemTestUtils.createByteFile(\n        mFileSystem, mFilePath, WritePType.MUST_CACHE, PAGE_SIZE_BYTES);\n    // read a file to populate the cache\n    try (FileInStream stream = mFileSystem.openFile(path)) {\n      assertTrue(BufferUtils.equalIncreasingByteArray(\n          PAGE_SIZE_BYTES, ByteStreams.toByteArray(stream)));\n    }\n    mClusterResource.get().stopWorkers();\n    // verify reading from local cache\n    try (InputStream stream = mFileSystem.openFile(path)) {\n      assertTrue(BufferUtils.equalIncreasingByteArray(\n          PAGE_SIZE_BYTES, ByteStreams.toByteArray(stream)));\n    }\n  }", "url": "https://github.com/Alluxio/alluxio/pull/10757#discussion_r368209869", "createdAt": "2020-01-18T06:23:45Z", "author": {"login": "apc999"}, "path": "tests/src/test/java/alluxio/client/fs/LocalCacheFileInStreamIntegrationTest.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.fs;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.Constants;\n+import alluxio.client.file.FileInStream;\n+import alluxio.client.file.FileSystem;\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.client.file.FileSystemTestUtils;\n+import alluxio.client.file.URIStatus;\n+import alluxio.client.file.cache.CacheManager;\n+import alluxio.client.file.cache.PageId;\n+import alluxio.conf.PropertyKey;\n+import alluxio.exception.status.UnavailableException;\n+import alluxio.grpc.WritePType;\n+import alluxio.testutils.BaseIntegrationTest;\n+import alluxio.testutils.LocalAlluxioClusterResource;\n+import alluxio.util.io.BufferUtils;\n+import alluxio.util.io.PathUtils;\n+\n+import com.google.common.io.ByteStreams;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import java.io.InputStream;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+\n+public final class LocalCacheFileInStreamIntegrationTest extends BaseIntegrationTest {\n+  private static final int PAGE_SIZE_BYTES = Constants.KB;\n+  private static final int PAGE_COUNT = 32;\n+  private static final int CACHE_SIZE_BYTES = PAGE_COUNT * PAGE_SIZE_BYTES;\n+\n+  @Rule\n+  public LocalAlluxioClusterResource mClusterResource =\n+      new LocalAlluxioClusterResource.Builder()\n+          .setProperty(PropertyKey.USER_CLIENT_CACHE_PAGE_SIZE, PAGE_SIZE_BYTES)\n+          .setProperty(PropertyKey.USER_CLIENT_CACHE_SIZE, CACHE_SIZE_BYTES)\n+          .setProperty(PropertyKey.USER_BLOCK_SIZE_BYTES_DEFAULT, Constants.MB)\n+          .setProperty(PropertyKey.USER_LOCAL_CACHE_ENABLED, true)\n+          .build();\n+\n+  @Rule\n+  public final ExpectedException mThrown = ExpectedException.none();\n+\n+  private FileSystemContext mFsContext;\n+  private CacheManager mCacheManager;\n+  private FileSystem mFileSystem;\n+  private String mFilePath;\n+\n+  @Before\n+  public void before() throws Exception {\n+    mFsContext = FileSystemContext.create(mClusterResource.get().getClient().getConf());\n+    mCacheManager = mFsContext.getCacheManager();\n+    mFileSystem = mClusterResource.get().getClient(mFsContext);\n+    mFilePath = PathUtils.uniqPath();\n+  }\n+\n+  @After\n+  public void after() throws Exception {\n+    mFsContext.close();\n+  }\n+\n+  @Test\n+  public void read() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c174c562dfcbbc38840597c3a3cedcfc565b8063"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0OTI4Mzg0", "url": "https://github.com/Alluxio/alluxio/pull/10757#pullrequestreview-344928384", "createdAt": "2020-01-18T06:25:36Z", "commit": {"oid": "c174c562dfcbbc38840597c3a3cedcfc565b8063"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwNjoyNTozNlrOFfJwCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwNjoyNTozNlrOFfJwCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwOTkzMA==", "bodyText": "same here, page becomes implementation details which should be hidden from Stream APIs. Similar comments on the other test cases", "url": "https://github.com/Alluxio/alluxio/pull/10757#discussion_r368209930", "createdAt": "2020-01-18T06:25:36Z", "author": {"login": "apc999"}, "path": "tests/src/test/java/alluxio/client/fs/LocalCacheFileInStreamIntegrationTest.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.fs;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.Constants;\n+import alluxio.client.file.FileInStream;\n+import alluxio.client.file.FileSystem;\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.client.file.FileSystemTestUtils;\n+import alluxio.client.file.URIStatus;\n+import alluxio.client.file.cache.CacheManager;\n+import alluxio.client.file.cache.PageId;\n+import alluxio.conf.PropertyKey;\n+import alluxio.exception.status.UnavailableException;\n+import alluxio.grpc.WritePType;\n+import alluxio.testutils.BaseIntegrationTest;\n+import alluxio.testutils.LocalAlluxioClusterResource;\n+import alluxio.util.io.BufferUtils;\n+import alluxio.util.io.PathUtils;\n+\n+import com.google.common.io.ByteStreams;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import java.io.InputStream;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+\n+public final class LocalCacheFileInStreamIntegrationTest extends BaseIntegrationTest {\n+  private static final int PAGE_SIZE_BYTES = Constants.KB;\n+  private static final int PAGE_COUNT = 32;\n+  private static final int CACHE_SIZE_BYTES = PAGE_COUNT * PAGE_SIZE_BYTES;\n+\n+  @Rule\n+  public LocalAlluxioClusterResource mClusterResource =\n+      new LocalAlluxioClusterResource.Builder()\n+          .setProperty(PropertyKey.USER_CLIENT_CACHE_PAGE_SIZE, PAGE_SIZE_BYTES)\n+          .setProperty(PropertyKey.USER_CLIENT_CACHE_SIZE, CACHE_SIZE_BYTES)\n+          .setProperty(PropertyKey.USER_BLOCK_SIZE_BYTES_DEFAULT, Constants.MB)\n+          .setProperty(PropertyKey.USER_LOCAL_CACHE_ENABLED, true)\n+          .build();\n+\n+  @Rule\n+  public final ExpectedException mThrown = ExpectedException.none();\n+\n+  private FileSystemContext mFsContext;\n+  private CacheManager mCacheManager;\n+  private FileSystem mFileSystem;\n+  private String mFilePath;\n+\n+  @Before\n+  public void before() throws Exception {\n+    mFsContext = FileSystemContext.create(mClusterResource.get().getClient().getConf());\n+    mCacheManager = mFsContext.getCacheManager();\n+    mFileSystem = mClusterResource.get().getClient(mFsContext);\n+    mFilePath = PathUtils.uniqPath();\n+  }\n+\n+  @After\n+  public void after() throws Exception {\n+    mFsContext.close();\n+  }\n+\n+  @Test\n+  public void read() throws Exception {\n+    AlluxioURI path = new AlluxioURI(mFilePath);\n+    FileSystemTestUtils.createByteFile(\n+        mFileSystem, mFilePath, WritePType.MUST_CACHE, PAGE_SIZE_BYTES);\n+    // read a file to populate the cache\n+    try (FileInStream stream = mFileSystem.openFile(path)) {\n+      assertTrue(BufferUtils.equalIncreasingByteArray(\n+          PAGE_SIZE_BYTES, ByteStreams.toByteArray(stream)));\n+    }\n+    // verify locally cached data\n+    URIStatus status = mFileSystem.getStatus(path);\n+    try (ReadableByteChannel channel = mCacheManager.get(new PageId(status.getFileId(), 0))) {\n+      assertNotNull(channel);\n+      assertTrue(BufferUtils.equalIncreasingByteArray(\n+          PAGE_SIZE_BYTES, ByteStreams.toByteArray(Channels.newInputStream(channel))));\n+    }\n+    mClusterResource.get().stopWorkers();\n+    // verify reading from local cache\n+    try (InputStream stream = mFileSystem.openFile(path)) {\n+      assertTrue(BufferUtils.equalIncreasingByteArray(\n+          PAGE_SIZE_BYTES, ByteStreams.toByteArray(stream)));\n+    }\n+  }\n+\n+  @Test\n+  public void positionedRead() throws Exception {\n+    AlluxioURI path = new AlluxioURI(mFilePath);\n+    FileSystemTestUtils.createByteFile(\n+        mFileSystem, mFilePath, WritePType.MUST_CACHE, PAGE_SIZE_BYTES);\n+    try (FileInStream stream = mFileSystem.openFile(path)) {\n+      byte[] buffer = new byte[PAGE_SIZE_BYTES / 4];\n+      int bytesRead = stream.positionedRead(PAGE_SIZE_BYTES / 10, buffer, 0, buffer.length);\n+      assertEquals(buffer.length, bytesRead);\n+      assertTrue(BufferUtils.equalIncreasingByteArray(PAGE_SIZE_BYTES / 10, buffer.length, buffer));\n+    }\n+    // verify locally cached data\n+    URIStatus status = mFileSystem.getStatus(path);\n+    try (ReadableByteChannel channel = mCacheManager.get(new PageId(status.getFileId(), 0))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c174c562dfcbbc38840597c3a3cedcfc565b8063"}, "originalPosition": 120}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0OTI4NDI2", "url": "https://github.com/Alluxio/alluxio/pull/10757#pullrequestreview-344928426", "createdAt": "2020-01-18T06:26:39Z", "commit": {"oid": "c174c562dfcbbc38840597c3a3cedcfc565b8063"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwNjoyNjozOVrOFfJwOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwNjoyNjozOVrOFfJwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwOTk3Ng==", "bodyText": "Once we removed try (ReadableByteChannel channel = mCacheManager.get(new PageId(status.getFileId(), 0))) {...} we should be asserting only on the pages just read?", "url": "https://github.com/Alluxio/alluxio/pull/10757#discussion_r368209976", "createdAt": "2020-01-18T06:26:39Z", "author": {"login": "apc999"}, "path": "tests/src/test/java/alluxio/client/fs/LocalCacheFileInStreamIntegrationTest.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.fs;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.Constants;\n+import alluxio.client.file.FileInStream;\n+import alluxio.client.file.FileSystem;\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.client.file.FileSystemTestUtils;\n+import alluxio.client.file.URIStatus;\n+import alluxio.client.file.cache.CacheManager;\n+import alluxio.client.file.cache.PageId;\n+import alluxio.conf.PropertyKey;\n+import alluxio.exception.status.UnavailableException;\n+import alluxio.grpc.WritePType;\n+import alluxio.testutils.BaseIntegrationTest;\n+import alluxio.testutils.LocalAlluxioClusterResource;\n+import alluxio.util.io.BufferUtils;\n+import alluxio.util.io.PathUtils;\n+\n+import com.google.common.io.ByteStreams;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import java.io.InputStream;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+\n+public final class LocalCacheFileInStreamIntegrationTest extends BaseIntegrationTest {\n+  private static final int PAGE_SIZE_BYTES = Constants.KB;\n+  private static final int PAGE_COUNT = 32;\n+  private static final int CACHE_SIZE_BYTES = PAGE_COUNT * PAGE_SIZE_BYTES;\n+\n+  @Rule\n+  public LocalAlluxioClusterResource mClusterResource =\n+      new LocalAlluxioClusterResource.Builder()\n+          .setProperty(PropertyKey.USER_CLIENT_CACHE_PAGE_SIZE, PAGE_SIZE_BYTES)\n+          .setProperty(PropertyKey.USER_CLIENT_CACHE_SIZE, CACHE_SIZE_BYTES)\n+          .setProperty(PropertyKey.USER_BLOCK_SIZE_BYTES_DEFAULT, Constants.MB)\n+          .setProperty(PropertyKey.USER_LOCAL_CACHE_ENABLED, true)\n+          .build();\n+\n+  @Rule\n+  public final ExpectedException mThrown = ExpectedException.none();\n+\n+  private FileSystemContext mFsContext;\n+  private CacheManager mCacheManager;\n+  private FileSystem mFileSystem;\n+  private String mFilePath;\n+\n+  @Before\n+  public void before() throws Exception {\n+    mFsContext = FileSystemContext.create(mClusterResource.get().getClient().getConf());\n+    mCacheManager = mFsContext.getCacheManager();\n+    mFileSystem = mClusterResource.get().getClient(mFsContext);\n+    mFilePath = PathUtils.uniqPath();\n+  }\n+\n+  @After\n+  public void after() throws Exception {\n+    mFsContext.close();\n+  }\n+\n+  @Test\n+  public void read() throws Exception {\n+    AlluxioURI path = new AlluxioURI(mFilePath);\n+    FileSystemTestUtils.createByteFile(\n+        mFileSystem, mFilePath, WritePType.MUST_CACHE, PAGE_SIZE_BYTES);\n+    // read a file to populate the cache\n+    try (FileInStream stream = mFileSystem.openFile(path)) {\n+      assertTrue(BufferUtils.equalIncreasingByteArray(\n+          PAGE_SIZE_BYTES, ByteStreams.toByteArray(stream)));\n+    }\n+    // verify locally cached data\n+    URIStatus status = mFileSystem.getStatus(path);\n+    try (ReadableByteChannel channel = mCacheManager.get(new PageId(status.getFileId(), 0))) {\n+      assertNotNull(channel);\n+      assertTrue(BufferUtils.equalIncreasingByteArray(\n+          PAGE_SIZE_BYTES, ByteStreams.toByteArray(Channels.newInputStream(channel))));\n+    }\n+    mClusterResource.get().stopWorkers();\n+    // verify reading from local cache\n+    try (InputStream stream = mFileSystem.openFile(path)) {\n+      assertTrue(BufferUtils.equalIncreasingByteArray(\n+          PAGE_SIZE_BYTES, ByteStreams.toByteArray(stream)));\n+    }\n+  }\n+\n+  @Test\n+  public void positionedRead() throws Exception {\n+    AlluxioURI path = new AlluxioURI(mFilePath);\n+    FileSystemTestUtils.createByteFile(\n+        mFileSystem, mFilePath, WritePType.MUST_CACHE, PAGE_SIZE_BYTES);\n+    try (FileInStream stream = mFileSystem.openFile(path)) {\n+      byte[] buffer = new byte[PAGE_SIZE_BYTES / 4];\n+      int bytesRead = stream.positionedRead(PAGE_SIZE_BYTES / 10, buffer, 0, buffer.length);\n+      assertEquals(buffer.length, bytesRead);\n+      assertTrue(BufferUtils.equalIncreasingByteArray(PAGE_SIZE_BYTES / 10, buffer.length, buffer));\n+    }\n+    // verify locally cached data\n+    URIStatus status = mFileSystem.getStatus(path);\n+    try (ReadableByteChannel channel = mCacheManager.get(new PageId(status.getFileId(), 0))) {\n+      assertNotNull(channel);\n+      assertTrue(BufferUtils.equalIncreasingByteArray(\n+          PAGE_SIZE_BYTES, ByteStreams.toByteArray(Channels.newInputStream(channel))));\n+    }\n+    mClusterResource.get().stopWorkers();\n+    // verify reading whole page from local cache\n+    try (InputStream stream = mFileSystem.openFile(path)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c174c562dfcbbc38840597c3a3cedcfc565b8063"}, "originalPosition": 127}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0OTI4NTAz", "url": "https://github.com/Alluxio/alluxio/pull/10757#pullrequestreview-344928503", "createdAt": "2020-01-18T06:28:31Z", "commit": {"oid": "c174c562dfcbbc38840597c3a3cedcfc565b8063"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10261d7f76a6b3d86ba663fbe3b522d4c95ba116", "author": {"user": {"login": "bf8086", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/10261d7f76a6b3d86ba663fbe3b522d4c95ba116", "committedDate": "2020-01-20T19:12:53Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4de6f4e7baa1b1ad06ff2932bae721e5412110a6", "author": {"user": {"login": "bf8086", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/4de6f4e7baa1b1ad06ff2932bae721e5412110a6", "committedDate": "2020-01-20T20:31:07Z", "message": "Merge remote-tracking branch 'upstream/lite' into lite-inttest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5097df9a7e08812fce989132a6efa62867beb0bc", "author": {"user": {"login": "bf8086", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/5097df9a7e08812fce989132a6efa62867beb0bc", "committedDate": "2020-01-20T20:39:58Z", "message": "fix configuration for renamed evictor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MDg5NTU0", "url": "https://github.com/Alluxio/alluxio/pull/10757#pullrequestreview-346089554", "createdAt": "2020-01-21T18:18:40Z", "commit": {"oid": "5097df9a7e08812fce989132a6efa62867beb0bc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3307, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}