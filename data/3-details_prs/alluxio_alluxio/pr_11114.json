{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMjU4MjE1", "number": 11114, "title": "Add Client side debug logging", "bodyText": "With this PR, after setting log4j.logger.alluxio.client.file.FileSystemMasterClient=DEBUG in conf/log4j.properties, one can find debug logs on client operation in client-side log:\n2020-03-03 15:56:40,112 DEBUG FileSystemMasterClient - Enter: GetStatus(path=/.localized,options=loadMetadataType: ONCE\ncommonOptions {\n  syncIntervalMs: -1\n  ttl: -1\n  ttlAction: DELETE\n}\n)\n2020-03-03 15:56:40,114 DEBUG FileSystemMasterClient - Exit (ERROR): GetStatus(path=/.localized,options=loadMetadataType: ONCE\ncommonOptions {\n  syncIntervalMs: -1\n  ttl: -1\n  ttlAction: DELETE\n}\n) in 2 ms: alluxio.exception.status.NotFoundException: Path \"/.localized\" does not exist.\n2020-03-03 15:56:40,115 DEBUG FileSystemMasterClient - Enter: GetStatus(path=/.DS_Store,options=loadMetadataType: ONCE\ncommonOptions {\n  syncIntervalMs: -1\n  ttl: -1\n  ttlAction: DELETE\n}\n)\n2020-03-03 15:56:40,117 DEBUG FileSystemMasterClient - Exit (ERROR): GetStatus(path=/.DS_Store,options=loadMetadataType: ONCE\ncommonOptions {\n  syncIntervalMs: -1\n  ttl: -1\n  ttlAction: DELETE\n}\n) in 2 ms: alluxio.exception.status.NotFoundException: Path \"/.DS_Store\" does not exist.\n2020-03-03 15:56:40,118 DEBUG FileSystemMasterClient - Enter: GetStatus(path=/.DS_Store,options=loadMetadataType: ONCE\ncommonOptions {\n  syncIntervalMs: -1\n  ttl: -1\n  ttlAction: DELETE\n}\n)\n2020-03-03 15:56:40,120 DEBUG FileSystemMasterClient - Exit (ERROR): GetStatus(path=/.DS_Store,options=loadMetadataType: ONCE\ncommonOptions {\n  syncIntervalMs: -1\n  ttl: -1\n  ttlAction: DELETE\n}\n) in 2 ms: alluxio.exception.status.NotFoundException: Path \"/.DS_Store\" does not exist.", "createdAt": "2020-03-04T00:01:54Z", "url": "https://github.com/Alluxio/alluxio/pull/11114", "merged": true, "mergeCommit": {"oid": "321d3f1ee59a523875c79d2fd050ff1ebacb3938"}, "closed": true, "closedAt": "2020-03-05T21:53:27Z", "author": {"login": "apc999"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKLXVVAH2gAyMzgzMjU4MjE1OjYxMWZlZWUxYzhkNmRlYTc3NGIyNmJjZDE1NDc3MDdmNmM5MjRhYzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKwLmHABqjMxMDI0NzQzNTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "611feee1c8d6dea774b26bcd1547707f6c924ac0", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/611feee1c8d6dea774b26bcd1547707f6c924ac0", "committedDate": "2020-03-03T23:59:46Z", "message": "Add Client side debug logging"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NDE5Mzg2", "url": "https://github.com/Alluxio/alluxio/pull/11114#pullrequestreview-368419386", "createdAt": "2020-03-04T00:17:28Z", "commit": {"oid": "611feee1c8d6dea774b26bcd1547707f6c924ac0"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MjQ3OTc2", "url": "https://github.com/Alluxio/alluxio/pull/11114#pullrequestreview-369247976", "createdAt": "2020-03-05T01:52:49Z", "commit": {"oid": "dcf73887b04e23534e1c868a16069aa13b2ef18a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMTo1Mjo0OVrOFyD9VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMTo1OTo1M1rOFyEEag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzNzk3Mg==", "bodyText": "No args?", "url": "https://github.com/Alluxio/alluxio/pull/11114#discussion_r388037972", "createdAt": "2020-03-05T01:52:49Z", "author": {"login": "calvinjia"}, "path": "core/client/fs/src/main/java/alluxio/client/block/RetryHandlingBlockMasterClient.java", "diffHunk": "@@ -98,14 +102,15 @@ protected void afterConnect() {\n         result.add(GrpcUtils.fromProto(workerInfo));\n       }\n       return result;\n-    });\n+    }, LOG, \"GetWorkerReport\", \"options=%s\", options);\n   }\n \n   @Override\n   public List<WorkerLostStorageInfo> getWorkerLostStorage() throws IOException {\n     return retryRPC(() -> mClient\n         .getWorkerLostStorage(GetWorkerLostStoragePOptions.getDefaultInstance())\n-        .getWorkerLostStorageInfoList());\n+        .getWorkerLostStorageInfoList(),\n+        LOG, \"GetWorkerLostStorage\", \"options=%s\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcf73887b04e23534e1c868a16069aa13b2ef18a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzOTU4OA==", "bodyText": "Maybe inline ts2?", "url": "https://github.com/Alluxio/alluxio/pull/11114#discussion_r388039588", "createdAt": "2020-03-05T01:59:08Z", "author": {"login": "calvinjia"}, "path": "core/common/src/main/java/alluxio/AbstractClient.java", "diffHunk": "@@ -335,41 +336,40 @@ public synchronized InetSocketAddress getConfAddress() throws UnavailableExcepti\n     V call() throws StatusRuntimeException;\n   }\n \n-  /**\n-   * Tries to execute an RPC defined as a {@link RpcCallable}.\n-   *\n-   * If a {@link UnavailableException} occurs, a reconnection will be tried through\n-   * {@link #connect()} and the action will be re-executed.\n-   *\n-   * @param rpc the RPC call to be executed\n-   * @param <V> type of return value of the RPC call\n-   * @return the return value of the RPC call\n-   */\n-  protected synchronized <V> V retryRPC(RpcCallable<V> rpc) throws AlluxioStatusException {\n-    return retryRPCInternal(rpc, () -> null);\n-  }\n-\n   /**\n    * Tries to execute an RPC defined as a {@link RpcCallable}. Metrics will be recorded based on\n    * the provided rpc name.\n    *\n    * If a {@link UnavailableException} occurs, a reconnection will be tried through\n    * {@link #connect()} and the action will be re-executed.\n    *\n+   * @param <V> type of return value of the RPC call\n    * @param rpc the RPC call to be executed\n+   * @param logger the logger to use for this call\n    * @param rpcName the human readable name of the RPC call\n-   * @param <V> type of return value of the RPC call\n+   * @param description the format string of the description, used for logging\n+   * @param args the arguments for the description\n    * @return the return value of the RPC call\n+   * @throws AlluxioStatusException\n    */\n-  protected synchronized <V> V retryRPC(RpcCallable<V> rpc, String rpcName)\n-      throws AlluxioStatusException {\n+  protected synchronized <V> V retryRPC(RpcCallable<V> rpc, Logger logger, String rpcName,\n+      String description, Object... args) throws AlluxioStatusException {\n+    String debugDesc = logger.isDebugEnabled() ? String.format(description, args) : null;\n+    long ts1 = System.currentTimeMillis();\n+    logger.debug(\"Enter: {}({})\", rpcName, debugDesc);\n     try (Timer.Context ctx = MetricsSystem.timer(getQualifiedMetricName(rpcName)).time()) {\n-      return retryRPCInternal(rpc, () -> {\n+      V ret = retryRPCInternal(rpc, () -> {\n         MetricsSystem.counter(getQualifiedRetryMetricName(rpcName)).inc();\n         return null;\n       });\n+      long ts2 = System.currentTimeMillis();\n+      logger.debug(\"Exit (OK): {}({}) in {} ms\", rpcName, debugDesc, ts2 - ts1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcf73887b04e23534e1c868a16069aa13b2ef18a"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzOTY3OQ==", "bodyText": "Can rename this to startMs?", "url": "https://github.com/Alluxio/alluxio/pull/11114#discussion_r388039679", "createdAt": "2020-03-05T01:59:29Z", "author": {"login": "calvinjia"}, "path": "core/common/src/main/java/alluxio/AbstractClient.java", "diffHunk": "@@ -335,41 +336,40 @@ public synchronized InetSocketAddress getConfAddress() throws UnavailableExcepti\n     V call() throws StatusRuntimeException;\n   }\n \n-  /**\n-   * Tries to execute an RPC defined as a {@link RpcCallable}.\n-   *\n-   * If a {@link UnavailableException} occurs, a reconnection will be tried through\n-   * {@link #connect()} and the action will be re-executed.\n-   *\n-   * @param rpc the RPC call to be executed\n-   * @param <V> type of return value of the RPC call\n-   * @return the return value of the RPC call\n-   */\n-  protected synchronized <V> V retryRPC(RpcCallable<V> rpc) throws AlluxioStatusException {\n-    return retryRPCInternal(rpc, () -> null);\n-  }\n-\n   /**\n    * Tries to execute an RPC defined as a {@link RpcCallable}. Metrics will be recorded based on\n    * the provided rpc name.\n    *\n    * If a {@link UnavailableException} occurs, a reconnection will be tried through\n    * {@link #connect()} and the action will be re-executed.\n    *\n+   * @param <V> type of return value of the RPC call\n    * @param rpc the RPC call to be executed\n+   * @param logger the logger to use for this call\n    * @param rpcName the human readable name of the RPC call\n-   * @param <V> type of return value of the RPC call\n+   * @param description the format string of the description, used for logging\n+   * @param args the arguments for the description\n    * @return the return value of the RPC call\n+   * @throws AlluxioStatusException\n    */\n-  protected synchronized <V> V retryRPC(RpcCallable<V> rpc, String rpcName)\n-      throws AlluxioStatusException {\n+  protected synchronized <V> V retryRPC(RpcCallable<V> rpc, Logger logger, String rpcName,\n+      String description, Object... args) throws AlluxioStatusException {\n+    String debugDesc = logger.isDebugEnabled() ? String.format(description, args) : null;\n+    long ts1 = System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcf73887b04e23534e1c868a16069aa13b2ef18a"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzOTc4Ng==", "bodyText": "Why did we add synchronization here?", "url": "https://github.com/Alluxio/alluxio/pull/11114#discussion_r388039786", "createdAt": "2020-03-05T01:59:53Z", "author": {"login": "calvinjia"}, "path": "core/common/src/main/java/alluxio/AbstractClient.java", "diffHunk": "@@ -116,14 +119,12 @@ public AbstractClient(ClientContext context, InetSocketAddress address,\n    */\n   protected abstract ServiceType getRemoteServiceType();\n \n-  protected long getRemoteServiceVersion() throws AlluxioStatusException {\n-    return retryRPC(new RpcCallable<Long>() {\n-      public Long call() {\n-        return mVersionService.getServiceVersion(\n+  protected synchronized long getRemoteServiceVersion() throws AlluxioStatusException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcf73887b04e23534e1c868a16069aa13b2ef18a"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c32b4ec7c03943ce4eb431d69e30ffce075f7f19", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/c32b4ec7c03943ce4eb431d69e30ffce075f7f19", "committedDate": "2020-03-05T18:09:38Z", "message": "Add more logging"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dcf73887b04e23534e1c868a16069aa13b2ef18a", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/dcf73887b04e23534e1c868a16069aa13b2ef18a", "committedDate": "2020-03-05T00:49:20Z", "message": "Add more logging"}, "afterCommit": {"oid": "c32b4ec7c03943ce4eb431d69e30ffce075f7f19", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/c32b4ec7c03943ce4eb431d69e30ffce075f7f19", "committedDate": "2020-03-05T18:09:38Z", "message": "Add more logging"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5Nzk4ODc0", "url": "https://github.com/Alluxio/alluxio/pull/11114#pullrequestreview-369798874", "createdAt": "2020-03-05T18:11:11Z", "commit": {"oid": "c32b4ec7c03943ce4eb431d69e30ffce075f7f19"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c1da167a848144e5c517bffa488ed1a425d842ff", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/c1da167a848144e5c517bffa488ed1a425d842ff", "committedDate": "2020-03-05T18:32:06Z", "message": "Enable client-side debug logging using Interface name rather than implementing class"}, "afterCommit": {"oid": "90d46f072089b593deafaaee7e3d75343faa9748", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/90d46f072089b593deafaaee7e3d75343faa9748", "committedDate": "2020-03-05T18:38:40Z", "message": "Enable client-side debug logging using Interface name rather than implementing class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5ODIxNDg5", "url": "https://github.com/Alluxio/alluxio/pull/11114#pullrequestreview-369821489", "createdAt": "2020-03-05T18:45:05Z", "commit": {"oid": "90d46f072089b593deafaaee7e3d75343faa9748"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5ODIyMTI5", "url": "https://github.com/Alluxio/alluxio/pull/11114#pullrequestreview-369822129", "createdAt": "2020-03-05T18:46:03Z", "commit": {"oid": "90d46f072089b593deafaaee7e3d75343faa9748"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0NjowM1rOFyfflw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0NjowM1rOFyfflw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4OTExMQ==", "bodyText": "make it consistent across different clients", "url": "https://github.com/Alluxio/alluxio/pull/11114#discussion_r388489111", "createdAt": "2020-03-05T18:46:03Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/meta/MetaMasterClient.java", "diffHunk": "@@ -11,21 +11,21 @@\n \n package alluxio.client.meta;\n \n+import alluxio.Client;\n import alluxio.grpc.BackupPRequest;\n import alluxio.grpc.MasterInfo;\n import alluxio.grpc.MasterInfoField;\n import alluxio.wire.BackupStatus;\n import alluxio.wire.ConfigCheckReport;\n \n-import java.io.Closeable;\n import java.io.IOException;\n import java.util.Set;\n import java.util.UUID;\n \n /**\n  * Interface for a meta master client.\n  */\n-public interface MetaMasterClient extends Closeable {\n+public interface MetaMasterClient extends Client {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90d46f072089b593deafaaee7e3d75343faa9748"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a46edf8d477916bc67f3a10bf437a7be69651d62", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/a46edf8d477916bc67f3a10bf437a7be69651d62", "committedDate": "2020-03-05T18:53:12Z", "message": "Enable client-side debug logging using Interface name rather than implementing class"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "90d46f072089b593deafaaee7e3d75343faa9748", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/90d46f072089b593deafaaee7e3d75343faa9748", "committedDate": "2020-03-05T18:38:40Z", "message": "Enable client-side debug logging using Interface name rather than implementing class"}, "afterCommit": {"oid": "a46edf8d477916bc67f3a10bf437a7be69651d62", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/a46edf8d477916bc67f3a10bf437a7be69651d62", "committedDate": "2020-03-05T18:53:12Z", "message": "Enable client-side debug logging using Interface name rather than implementing class"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4812, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}