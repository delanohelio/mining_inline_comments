{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NzU5NTk2", "number": 11772, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjowNzo1NlrOERPHJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxOTo0NjoyMVrOFUOQBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTA4ODM5OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/client/quota/Scope.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjowNzo1NlrOG118RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMDoxMzoyNVrOHGzwQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExMTQ5Mg==", "bodyText": "Is this string search potentially expensive compared to having a data structure?", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r459111492", "createdAt": "2020-07-22T22:07:56Z", "author": {"login": "calvinjia"}, "path": "core/common/src/main/java/alluxio/client/quota/Scope.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.quota;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import com.google.common.base.Preconditions;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * This class defines \"Scope\" of a quota. A scope is hierarchical, e.g.\n+ * <ul>\n+ *   <li>\".\" for global scope;</li>\n+ *   <li>\"schema1\" for an entire schema;</li>\n+ *   <li>\"schema2.table1\" for a given table;</li>\n+ *   <li>\"schema3.table2.partition1\" for a given partition</li>\n+ * </ul>\n+ */\n+@ThreadSafe\n+public class Scope {\n+  public static final String GLOBAL_ID = \".\";\n+  public static final String SEPARATOR = \".\";\n+\n+  public static final Scope GLOBAL = new Scope(GLOBAL_ID, 1);\n+  private final String mId;\n+  private final int mLength;\n+\n+  /**\n+   * @param id id of the scope\n+   * @return an instance of this scope converted from a string\n+   */\n+  public static Scope create(String id) {\n+    Preconditions.checkArgument(id != null && id.length() > 0,\n+        \"scope id can not be null or empty string\");\n+    if (GLOBAL_ID.equals(id)) {\n+      return GLOBAL;\n+    }\n+    return new Scope(id, id.length());\n+  }\n+\n+  private Scope(String id, int len) {\n+    mId = id;\n+    mLength = len;\n+  }\n+\n+  /**\n+   * @return parent scope\n+   */\n+  @Nullable\n+  public Scope parent() {\n+    int r = mId.lastIndexOf(SEPARATOR, mLength - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3630dd4b882f0bbc091b97f4c31e017a7a1bf43"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkwMTQ0Mg==", "bodyText": "I would go with string searching first until we see it shows high cost in cpu profiling", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r476901442", "createdAt": "2020-08-26T00:13:25Z", "author": {"login": "apc999"}, "path": "core/common/src/main/java/alluxio/client/quota/Scope.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.quota;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import com.google.common.base.Preconditions;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * This class defines \"Scope\" of a quota. A scope is hierarchical, e.g.\n+ * <ul>\n+ *   <li>\".\" for global scope;</li>\n+ *   <li>\"schema1\" for an entire schema;</li>\n+ *   <li>\"schema2.table1\" for a given table;</li>\n+ *   <li>\"schema3.table2.partition1\" for a given partition</li>\n+ * </ul>\n+ */\n+@ThreadSafe\n+public class Scope {\n+  public static final String GLOBAL_ID = \".\";\n+  public static final String SEPARATOR = \".\";\n+\n+  public static final Scope GLOBAL = new Scope(GLOBAL_ID, 1);\n+  private final String mId;\n+  private final int mLength;\n+\n+  /**\n+   * @param id id of the scope\n+   * @return an instance of this scope converted from a string\n+   */\n+  public static Scope create(String id) {\n+    Preconditions.checkArgument(id != null && id.length() > 0,\n+        \"scope id can not be null or empty string\");\n+    if (GLOBAL_ID.equals(id)) {\n+      return GLOBAL;\n+    }\n+    return new Scope(id, id.length());\n+  }\n+\n+  private Scope(String id, int len) {\n+    mId = id;\n+    mLength = len;\n+  }\n+\n+  /**\n+   * @return parent scope\n+   */\n+  @Nullable\n+  public Scope parent() {\n+    int r = mId.lastIndexOf(SEPARATOR, mLength - 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExMTQ5Mg=="}, "originalCommit": {"oid": "e3630dd4b882f0bbc091b97f4c31e017a7a1bf43"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTA4OTQyOnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/evictor/ScopedCacheEvictor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjowODoyN1rOG1188g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMDowOToxMVrOHGzk6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExMTY2Ng==", "bodyText": "Typo?", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r459111666", "createdAt": "2020-07-22T22:08:27Z", "author": {"login": "calvinjia"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/evictor/ScopedCacheEvictor.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */CacheQuota.java:18", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3630dd4b882f0bbc091b97f4c31e017a7a1bf43"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg5ODUzNg==", "bodyText": "removed", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r476898536", "createdAt": "2020-08-26T00:09:11Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/evictor/ScopedCacheEvictor.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */CacheQuota.java:18", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExMTY2Ng=="}, "originalCommit": {"oid": "e3630dd4b882f0bbc091b97f4c31e017a7a1bf43"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTA5MjE4OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/wire/FileInfo.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjowOTozMlrOG11-mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMDoxMTo1OFrOHGzspg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExMjA5MQ==", "bodyText": "Does a cache quota belong to a file? What happens if files have conflicting cache quotas?", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r459112091", "createdAt": "2020-07-22T22:09:32Z", "author": {"login": "calvinjia"}, "path": "core/common/src/main/java/alluxio/wire/FileInfo.java", "diffHunk": "@@ -665,6 +673,15 @@ public FileInfo setXAttr(Map<String, byte[]> xAttr) {\n     return this;\n   }\n \n+  /**\n+   * @param cacheQuota the cache quota\n+   * @return the updated {@link FileInfo}\n+   */\n+  public FileInfo setCacheQuota(CacheQuota cacheQuota) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3630dd4b882f0bbc091b97f4c31e017a7a1bf43"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkwMDUxOA==", "bodyText": "this is a workaround to cope with URIStatus", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r476900518", "createdAt": "2020-08-26T00:11:58Z", "author": {"login": "apc999"}, "path": "core/common/src/main/java/alluxio/wire/FileInfo.java", "diffHunk": "@@ -665,6 +673,15 @@ public FileInfo setXAttr(Map<String, byte[]> xAttr) {\n     return this;\n   }\n \n+  /**\n+   * @param cacheQuota the cache quota\n+   * @return the updated {@link FileInfo}\n+   */\n+  public FileInfo setCacheQuota(CacheQuota cacheQuota) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExMjA5MQ=="}, "originalCommit": {"oid": "e3630dd4b882f0bbc091b97f4c31e017a7a1bf43"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MjQ1NDcyOnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/DefaultMetaStore.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMDo0OTowNVrOHIgvCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QyMzo1MjozMVrOITJuuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY4Njk4NA==", "bodyText": "Did you consider making another class like QuotaMetaStore?", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r478686984", "createdAt": "2020-08-27T20:49:05Z", "author": {"login": "calvinjia"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/DefaultMetaStore.java", "diffHunk": "@@ -38,13 +43,37 @@\n   private final AtomicLong mBytes = new AtomicLong(0);\n   /** The number of pages stored. */\n   private final AtomicLong mPages = new AtomicLong(0);\n+  /** Track the number of bytes on each scope. */\n+  private final Map<Scope, Long> mBytesInScope = new ConcurrentHashMap<>();\n+  private final boolean mQuotaEnabled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4431da9cf36c51a02f923783e292aeab96ea052f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODczODY1Mw==", "bodyText": "tried but it was actually less clean/", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r478738653", "createdAt": "2020-08-27T22:53:13Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/DefaultMetaStore.java", "diffHunk": "@@ -38,13 +43,37 @@\n   private final AtomicLong mBytes = new AtomicLong(0);\n   /** The number of pages stored. */\n   private final AtomicLong mPages = new AtomicLong(0);\n+  /** Track the number of bytes on each scope. */\n+  private final Map<Scope, Long> mBytesInScope = new ConcurrentHashMap<>();\n+  private final boolean mQuotaEnabled;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY4Njk4NA=="}, "originalCommit": {"oid": "4431da9cf36c51a02f923783e292aeab96ea052f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njk1MzI3NQ==", "bodyText": "tried again. looks promising. Let's go with a subclass QuotaMetaStore", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r556953275", "createdAt": "2021-01-13T23:52:31Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/DefaultMetaStore.java", "diffHunk": "@@ -38,13 +43,37 @@\n   private final AtomicLong mBytes = new AtomicLong(0);\n   /** The number of pages stored. */\n   private final AtomicLong mPages = new AtomicLong(0);\n+  /** Track the number of bytes on each scope. */\n+  private final Map<Scope, Long> mBytesInScope = new ConcurrentHashMap<>();\n+  private final boolean mQuotaEnabled;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY4Njk4NA=="}, "originalCommit": {"oid": "4431da9cf36c51a02f923783e292aeab96ea052f"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MjU3ODA2OnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/evictor/FIFOEvictor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMToyOTowN1rOHIh6hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjo1Mzo0NlrOHIj5rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwNjMxMQ==", "bodyText": "If this isn't intended for normal use, should we put it in the test package?", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r478706311", "createdAt": "2020-08-27T21:29:07Z", "author": {"login": "calvinjia"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/evictor/FIFOEvictor.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.file.cache.evictor;\n+\n+import alluxio.client.file.cache.CacheEvictor;\n+import alluxio.client.file.cache.PageId;\n+import alluxio.conf.AlluxioConfiguration;\n+\n+import java.util.LinkedList;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Implementation of Evictor using FIFO eviction policy for the test.\n+ */\n+public class FIFOEvictor implements CacheEvictor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4431da9cf36c51a02f923783e292aeab96ea052f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODczODg2Mw==", "bodyText": "remove the comment about tests -- i think this can be useful for normal use, e.g., AI workloads", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r478738863", "createdAt": "2020-08-27T22:53:46Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/evictor/FIFOEvictor.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.file.cache.evictor;\n+\n+import alluxio.client.file.cache.CacheEvictor;\n+import alluxio.client.file.cache.PageId;\n+import alluxio.conf.AlluxioConfiguration;\n+\n+import java.util.LinkedList;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Implementation of Evictor using FIFO eviction policy for the test.\n+ */\n+public class FIFOEvictor implements CacheEvictor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwNjMxMQ=="}, "originalCommit": {"oid": "4431da9cf36c51a02f923783e292aeab96ea052f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MjY2NTQyOnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheFileInStream.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMTo1OTo0NFrOHIiuYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMzowMTo1MlrOHIkEew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcxOTU4NA==", "bodyText": "Do we need to use the new put API with the cache quota?", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r478719584", "createdAt": "2020-08-27T21:59:44Z", "author": {"login": "calvinjia"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheFileInStream.java", "diffHunk": "@@ -100,12 +96,11 @@ public LocalCacheFileInStream(AlluxioURI path, OpenFilePOptions options, FileSys\n   public LocalCacheFileInStream(URIStatus status, OpenFilePOptions options, FileSystem externalFs,\n       CacheManager cacheManager) {\n     mPageSize = externalFs.getConf().getBytes(PropertyKey.USER_CLIENT_CACHE_PAGE_SIZE);\n-    mPath = new AlluxioURI(status.getPath());\n     mOpenOptions = options;\n     mExternalFs = externalFs;\n     mCacheManager = cacheManager;\n-    // Lazy init of status object\n     mStatus = status;\n+    mCacheQuota = status.getCacheQuota();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4431da9cf36c51a02f923783e292aeab96ea052f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc0MTYyNw==", "bodyText": "correct. for this part I need help from @kewang1024 to understand how to pass scope of a file here.", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r478741627", "createdAt": "2020-08-27T23:01:52Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheFileInStream.java", "diffHunk": "@@ -100,12 +96,11 @@ public LocalCacheFileInStream(AlluxioURI path, OpenFilePOptions options, FileSys\n   public LocalCacheFileInStream(URIStatus status, OpenFilePOptions options, FileSystem externalFs,\n       CacheManager cacheManager) {\n     mPageSize = externalFs.getConf().getBytes(PropertyKey.USER_CLIENT_CACHE_PAGE_SIZE);\n-    mPath = new AlluxioURI(status.getPath());\n     mOpenOptions = options;\n     mExternalFs = externalFs;\n     mCacheManager = cacheManager;\n-    // Lazy init of status object\n     mStatus = status;\n+    mCacheQuota = status.getCacheQuota();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcxOTU4NA=="}, "originalCommit": {"oid": "4431da9cf36c51a02f923783e292aeab96ea052f"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NzQ4NjYzOnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/QuotaMetaStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxOTo0NDoyNVrOIcH_ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQwMDowNjo1M1rOIcP7kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjM2MjAxOQ==", "bodyText": "Should we be consistent in the initialization of Maps?", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r566362019", "createdAt": "2021-01-28T19:44:25Z", "author": {"login": "calvinjia"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/QuotaMetaStore.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.file.cache;\n+\n+import alluxio.client.quota.CacheScope;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.exception.PageNotFoundException;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A metastore implementation that tracking usage associated with each cache scope.\n+ */\n+public class QuotaMetaStore extends DefaultMetaStore {\n+  /** Track the number of bytes on each scope. */\n+  private final Map<CacheScope, Long> mBytesInScope = new ConcurrentHashMap<>();\n+  private final Map<CacheScope, CacheEvictor> mCacheEvictors;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66d7922fb9383ed9567114689bd98f3a140378ba"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjQ5MjA0OQ==", "bodyText": "fixed", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r566492049", "createdAt": "2021-01-29T00:06:53Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/QuotaMetaStore.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.file.cache;\n+\n+import alluxio.client.quota.CacheScope;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.exception.PageNotFoundException;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A metastore implementation that tracking usage associated with each cache scope.\n+ */\n+public class QuotaMetaStore extends DefaultMetaStore {\n+  /** Track the number of bytes on each scope. */\n+  private final Map<CacheScope, Long> mBytesInScope = new ConcurrentHashMap<>();\n+  private final Map<CacheScope, CacheEvictor> mCacheEvictors;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjM2MjAxOQ=="}, "originalCommit": {"oid": "66d7922fb9383ed9567114689bd98f3a140378ba"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NzQ5MzE2OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/client/quota/CacheScope.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxOTo0NjoyMVrOIcIDzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQwMDowODo1NVrOIcP-2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjM2MzA4NA==", "bodyText": "Do we need to use regex here or can we use split by delimiter and index?", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r566363084", "createdAt": "2021-01-28T19:46:21Z", "author": {"login": "calvinjia"}, "path": "core/common/src/main/java/alluxio/client/quota/CacheScope.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.quota;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import com.google.common.base.Preconditions;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * This class defines \"Scope\" of a cache quota. For Presto caching, scope is\n+ * hierarchical with different levels including:\n+ * <ul>\n+ *   <li>GLOBAL (\".\") for global scope;</li>\n+ *   <li>SCHEMA (e.g., \"schema1\") for an entire schema;</li>\n+ *   <li>TABLE (e.g., \"schema2.table1\") for a given table;</li>\n+ *   <li>PARTITION (e.g., \"schema3.table2.partition1\") for a given partition</li>\n+ * </ul>\n+ */\n+@ThreadSafe\n+public class CacheScope {\n+  private static final String GLOBAL_ID = \".\";\n+  public static final String SEPARATOR = \".\";\n+  public static final CacheScope GLOBAL = new CacheScope(GLOBAL_ID, 1, Level.GLOBAL);\n+\n+  /**\n+   * Level of a scope.\n+   */\n+  public enum Level {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66d7922fb9383ed9567114689bd98f3a140378ba"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjQ5Mjg4OA==", "bodyText": "I'd like to keep it cleaner & more flexible initially.\nIn case it consumes too much cpu in profiling, we can change it to string split.", "url": "https://github.com/Alluxio/alluxio/pull/11772#discussion_r566492888", "createdAt": "2021-01-29T00:08:55Z", "author": {"login": "apc999"}, "path": "core/common/src/main/java/alluxio/client/quota/CacheScope.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.quota;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import com.google.common.base.Preconditions;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * This class defines \"Scope\" of a cache quota. For Presto caching, scope is\n+ * hierarchical with different levels including:\n+ * <ul>\n+ *   <li>GLOBAL (\".\") for global scope;</li>\n+ *   <li>SCHEMA (e.g., \"schema1\") for an entire schema;</li>\n+ *   <li>TABLE (e.g., \"schema2.table1\") for a given table;</li>\n+ *   <li>PARTITION (e.g., \"schema3.table2.partition1\") for a given partition</li>\n+ * </ul>\n+ */\n+@ThreadSafe\n+public class CacheScope {\n+  private static final String GLOBAL_ID = \".\";\n+  public static final String SEPARATOR = \".\";\n+  public static final CacheScope GLOBAL = new CacheScope(GLOBAL_ID, 1, Level.GLOBAL);\n+\n+  /**\n+   * Level of a scope.\n+   */\n+  public enum Level {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjM2MzA4NA=="}, "originalCommit": {"oid": "66d7922fb9383ed9567114689bd98f3a140378ba"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1432, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}