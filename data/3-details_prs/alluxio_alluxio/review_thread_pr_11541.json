{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMjUzNDIy", "number": 11541, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDoyNDozOVrOEEcssg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDoyNjowMFrOEEcuVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDk5OTU0OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/resource/RWLockResource.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDoyNDozOVrOGiFCmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMjo0MToyMlrOGiIqBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4NzM1Mg==", "bodyText": "Should there be a precondition that makes sure the mLock is the writeLock() of mRwLock? But, basically, the invariant for RWLockResource is that mLock == mRwLock.readLock() or mLock == mRwLock.writeLock() at all times.", "url": "https://github.com/Alluxio/alluxio/pull/11541#discussion_r438387352", "createdAt": "2020-06-10T20:24:39Z", "author": {"login": "gpang"}, "path": "core/common/src/main/java/alluxio/resource/RWLockResource.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.resource;\n+\n+import alluxio.concurrent.LockMode;\n+\n+import com.google.common.base.Preconditions;\n+\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * The {@link RWLockResource} is an extension of the {@link LockResource} which allows for\n+ * downgrading of locks.\n+ */\n+public class RWLockResource extends LockResource {\n+\n+  private final ReentrantReadWriteLock mRwLock;\n+\n+  /**\n+   * Creates a new instance of RW lock that will lock with the given mode.\n+   *\n+   * @param rwLock the read-write lock backing the resource\n+   * @param mode the initial lock mode if acquiring the lock\n+   * @param acquireLock whether or not to acquire the lock\n+   * @param useTryLock whether or not to use {@link java.util.concurrent.locks.Lock#tryLock} when\n+   *                  acquiring the resource\n+   */\n+  public RWLockResource(ReentrantReadWriteLock rwLock, LockMode mode, boolean acquireLock,\n+      boolean useTryLock) {\n+    super(mode == LockMode.READ ? rwLock.readLock() : rwLock.writeLock(), acquireLock, useTryLock);\n+    mRwLock = rwLock;\n+  }\n+\n+  /**\n+   * Downgrade from a write to a read lock.\n+   *\n+   * @return if a successful downgrade was performed. Returns false if it was read locked\n+   */\n+  public boolean downgrade() {\n+    if (!mRwLock.isWriteLocked()) {\n+      return false;\n+    }\n+    Preconditions.checkState(mRwLock.isWriteLockedByCurrentThread(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7f108da8946c771c47f0ac96b5744cbe2198de7"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQwODg5MA==", "bodyText": "We can check this as an extra precaution, but I don't think it is necessary. That case is already handled by checking mRwLock.isWriteLocked and the subsequent isWriteLockedByCurrentThread\nmLock will only be set to the mRwLock.readLock() if you specify a LockPattern of READ OR if you've already downgraded the lock\n\nin the case when downgrade was previously called the isWriteLocked will return false always.\nin the case where we started with the read, isWriteLocked will always return false.\nIf the arguments specified in the constructor don't lock the lock, then isWriteLocked will return false in both read and write cases.\n\nI see this check as being useful for somewhere down the line when someone decides they want to also change the value of mLock and for some reason change it to something other than mRwLock.readLock() or mRwLock.writeLock(), but I don't think it's necessary for the current code", "url": "https://github.com/Alluxio/alluxio/pull/11541#discussion_r438408890", "createdAt": "2020-06-10T21:07:13Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/resource/RWLockResource.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.resource;\n+\n+import alluxio.concurrent.LockMode;\n+\n+import com.google.common.base.Preconditions;\n+\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * The {@link RWLockResource} is an extension of the {@link LockResource} which allows for\n+ * downgrading of locks.\n+ */\n+public class RWLockResource extends LockResource {\n+\n+  private final ReentrantReadWriteLock mRwLock;\n+\n+  /**\n+   * Creates a new instance of RW lock that will lock with the given mode.\n+   *\n+   * @param rwLock the read-write lock backing the resource\n+   * @param mode the initial lock mode if acquiring the lock\n+   * @param acquireLock whether or not to acquire the lock\n+   * @param useTryLock whether or not to use {@link java.util.concurrent.locks.Lock#tryLock} when\n+   *                  acquiring the resource\n+   */\n+  public RWLockResource(ReentrantReadWriteLock rwLock, LockMode mode, boolean acquireLock,\n+      boolean useTryLock) {\n+    super(mode == LockMode.READ ? rwLock.readLock() : rwLock.writeLock(), acquireLock, useTryLock);\n+    mRwLock = rwLock;\n+  }\n+\n+  /**\n+   * Downgrade from a write to a read lock.\n+   *\n+   * @return if a successful downgrade was performed. Returns false if it was read locked\n+   */\n+  public boolean downgrade() {\n+    if (!mRwLock.isWriteLocked()) {\n+      return false;\n+    }\n+    Preconditions.checkState(mRwLock.isWriteLockedByCurrentThread(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4NzM1Mg=="}, "originalCommit": {"oid": "a7f108da8946c771c47f0ac96b5744cbe2198de7"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ0NjU5Ng==", "bodyText": "o ok", "url": "https://github.com/Alluxio/alluxio/pull/11541#discussion_r438446596", "createdAt": "2020-06-10T22:41:22Z", "author": {"login": "gpang"}, "path": "core/common/src/main/java/alluxio/resource/RWLockResource.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.resource;\n+\n+import alluxio.concurrent.LockMode;\n+\n+import com.google.common.base.Preconditions;\n+\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * The {@link RWLockResource} is an extension of the {@link LockResource} which allows for\n+ * downgrading of locks.\n+ */\n+public class RWLockResource extends LockResource {\n+\n+  private final ReentrantReadWriteLock mRwLock;\n+\n+  /**\n+   * Creates a new instance of RW lock that will lock with the given mode.\n+   *\n+   * @param rwLock the read-write lock backing the resource\n+   * @param mode the initial lock mode if acquiring the lock\n+   * @param acquireLock whether or not to acquire the lock\n+   * @param useTryLock whether or not to use {@link java.util.concurrent.locks.Lock#tryLock} when\n+   *                  acquiring the resource\n+   */\n+  public RWLockResource(ReentrantReadWriteLock rwLock, LockMode mode, boolean acquireLock,\n+      boolean useTryLock) {\n+    super(mode == LockMode.READ ? rwLock.readLock() : rwLock.writeLock(), acquireLock, useTryLock);\n+    mRwLock = rwLock;\n+  }\n+\n+  /**\n+   * Downgrade from a write to a read lock.\n+   *\n+   * @return if a successful downgrade was performed. Returns false if it was read locked\n+   */\n+  public boolean downgrade() {\n+    if (!mRwLock.isWriteLocked()) {\n+      return false;\n+    }\n+    Preconditions.checkState(mRwLock.isWriteLockedByCurrentThread(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4NzM1Mg=="}, "originalCommit": {"oid": "a7f108da8946c771c47f0ac96b5744cbe2198de7"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTAwMzc1OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/meta/InodeLockList.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDoyNjowMFrOGiFFQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDozODowNFrOGiFdrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4ODAzMg==", "bodyText": "How about edges?", "url": "https://github.com/Alluxio/alluxio/pull/11541#discussion_r438388032", "createdAt": "2020-06-10T20:26:00Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/meta/InodeLockList.java", "diffHunk": "@@ -104,17 +104,9 @@\n   void unlockLastEdge();\n \n   /**\n-   * Downgrades the last inode from a write lock to a read lock. The read lock is acquired before\n-   * releasing the write lock.\n-   *\n-   * Example\n-   * Starting from [a, a->b, b*]\n-   *\n-   * downgradeLastInode() results in [a, a->b, b]\n-   *\n-   * If the last inode is not the only write-locked inode, no downgrade occurs.\n+   * Downgrades all inodes in the current lock list to read locks.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7f108da8946c771c47f0ac96b5744cbe2198de7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5NDI4NQ==", "bodyText": "This should probably just say \"all locks\"", "url": "https://github.com/Alluxio/alluxio/pull/11541#discussion_r438394285", "createdAt": "2020-06-10T20:38:04Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/master/file/meta/InodeLockList.java", "diffHunk": "@@ -104,17 +104,9 @@\n   void unlockLastEdge();\n \n   /**\n-   * Downgrades the last inode from a write lock to a read lock. The read lock is acquired before\n-   * releasing the write lock.\n-   *\n-   * Example\n-   * Starting from [a, a->b, b*]\n-   *\n-   * downgradeLastInode() results in [a, a->b, b]\n-   *\n-   * If the last inode is not the only write-locked inode, no downgrade occurs.\n+   * Downgrades all inodes in the current lock list to read locks.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4ODAzMg=="}, "originalCommit": {"oid": "a7f108da8946c771c47f0ac96b5744cbe2198de7"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1615, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}