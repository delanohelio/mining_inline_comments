{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NDk3NjI2", "number": 10953, "title": "Make metastore to track pagestore size", "bodyText": "This PR has two major changes:\n\nInstead of querying pagestore for size to make eviction decisions, querying metastore\nUpdate & simplify restoring logic accordingly. Now only one pass is needed", "createdAt": "2020-02-20T01:05:41Z", "url": "https://github.com/Alluxio/alluxio/pull/10953", "merged": true, "mergeCommit": {"oid": "b2df85b6eb656479f80a889f7db2f5d1a07f1ce6"}, "closed": true, "closedAt": "2020-02-27T23:29:56Z", "author": {"login": "apc999"}, "timelineItems": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFxI3SAH2gAyMzc3NDk3NjI2OjhhMDE3NGQ5ZDJjMjc1YWYyMmU5NGU2NThiNTcyNWQ0NjczYzI2MGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIjhDBgFqTM2NjA2MDMwMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8a0174d9d2c275af22e94e658b5725d4673c260a", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/8a0174d9d2c275af22e94e658b5725d4673c260a", "committedDate": "2020-02-19T07:10:44Z", "message": "Move bytes() and pages() to Metastore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e807f0eb0ed150bd112f12f0217ea73f55120969", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/e807f0eb0ed150bd112f12f0217ea73f55120969", "committedDate": "2020-02-20T00:51:37Z", "message": "Futher refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1360daf3418a061a0c78a096c07626468c9f6b5c", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/1360daf3418a061a0c78a096c07626468c9f6b5c", "committedDate": "2020-02-20T00:53:54Z", "message": "Merge branch 'master' of github.com:Alluxio/alluxio into lite_lock"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bed3fd8786f49be8431c0337a02e7b0cdacbdb57", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/bed3fd8786f49be8431c0337a02e7b0cdacbdb57", "committedDate": "2020-02-20T01:46:52Z", "message": "Fix style check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "646ed8e739941c2c761eab142e1095aa651c1951", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/646ed8e739941c2c761eab142e1095aa651c1951", "committedDate": "2020-02-20T19:36:11Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04142c48bf5a9fafd80beb45c53864a945d9305c", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/04142c48bf5a9fafd80beb45c53864a945d9305c", "committedDate": "2020-02-20T20:00:23Z", "message": "Update PageStore unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMzA5OTEy", "url": "https://github.com/Alluxio/alluxio/pull/10953#pullrequestreview-362309912", "createdAt": "2020-02-20T23:34:08Z", "commit": {"oid": "04142c48bf5a9fafd80beb45c53864a945d9305c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzozNDowOFrOFsm3JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzozNDowOFrOFsm3JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxODM3Mg==", "bodyText": "This comment is not consistent with the calculation (ie. 1000 / 1.2 = 833)", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r382318372", "createdAt": "2020-02-20T23:34:08Z", "author": {"login": "calvinjia"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java", "diffHunk": "@@ -50,70 +45,44 @@\n @NotThreadSafe\n public class RocksPageStore implements PageStore {\n   private static final Logger LOG = LoggerFactory.getLogger(RocksPageStore.class);\n-  public static final int KEY_LEN = Long.BYTES * 2;\n   private static final byte[] CONF_KEY = \"CONF\".getBytes();\n+  // TODO(feng): consider making the overhead ratio configurable\n+  // We assume 20% overhead using Rocksdb as a page store, i.e., with 1GB space allocated, we\n+  // expect no more than 800MB logical data stored", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04142c48bf5a9fafd80beb45c53864a945d9305c"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMzEwMDc2", "url": "https://github.com/Alluxio/alluxio/pull/10953#pullrequestreview-362310076", "createdAt": "2020-02-20T23:34:35Z", "commit": {"oid": "04142c48bf5a9fafd80beb45c53864a945d9305c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d00996da5ae2f67c0e9185c9291dfbb2d471ecb2", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/d00996da5ae2f67c0e9185c9291dfbb2d471ecb2", "committedDate": "2020-02-21T00:28:47Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMzM3OTky", "url": "https://github.com/Alluxio/alluxio/pull/10953#pullrequestreview-362337992", "createdAt": "2020-02-21T00:52:00Z", "commit": {"oid": "d00996da5ae2f67c0e9185c9291dfbb2d471ecb2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMzQzNDQ5", "url": "https://github.com/Alluxio/alluxio/pull/10953#pullrequestreview-362343449", "createdAt": "2020-02-21T01:08:42Z", "commit": {"oid": "d00996da5ae2f67c0e9185c9291dfbb2d471ecb2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTowODo0M1rOFsonPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTowODo0M1rOFsonPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0NzA3MA==", "bodyText": "We should close the db whenever restore returns false.", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r382347070", "createdAt": "2020-02-21T01:08:43Z", "author": {"login": "bf8086"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java", "diffHunk": "@@ -179,25 +146,31 @@ private static PageId getPageIdFromKey(byte[] key) {\n   }\n \n   @Override\n-  public long pages() {\n-    return mSize.get();\n-  }\n-\n-  @Override\n-  public long bytes() {\n-    return mBytes.get();\n-  }\n-\n-  @Override\n-  public Collection<PageInfo> getPages() {\n-    try (RocksIterator iter = mDb.newIterator()) {\n-      return Streams.stream(new PageIterator(iter)).collect(Collectors.toList());\n+  public boolean restore(Predicate<PageInfo> initFunc) {\n+    try {\n+      byte[] confData = mDb.get(CONF_KEY);\n+      Cache.PRocksPageStoreOptions pOptions = mOptions.toProto();\n+      if (confData != null) {\n+        Cache.PRocksPageStoreOptions persistedOptions =\n+            Cache.PRocksPageStoreOptions.parseFrom(confData);\n+        if (!persistedOptions.equals(pOptions)) {\n+          mDb.close();\n+          return false;\n+        }\n+      }\n+      mDb.put(CONF_KEY, pOptions.toByteArray());\n+      try (RocksIterator iter = mDb.newIterator()) {\n+        return Streams.stream(new PageIterator(iter)).allMatch(initFunc::test);\n+      }\n+    } catch (RocksDBException | IOException e) {\n+      LOG.error(\"Failed to restore RocksPageStore:\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00996da5ae2f67c0e9185c9291dfbb2d471ecb2"}, "originalPosition": 153}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMzQ0NTc0", "url": "https://github.com/Alluxio/alluxio/pull/10953#pullrequestreview-362344574", "createdAt": "2020-02-21T01:12:47Z", "commit": {"oid": "d00996da5ae2f67c0e9185c9291dfbb2d471ecb2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMToxMjo0N1rOFsoq0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMToxMjo0N1rOFsoq0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0Nzk4Nw==", "bodyText": "RocksPageStore will be in a bad state after restore then initialize.", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r382347987", "createdAt": "2020-02-21T01:12:47Z", "author": {"login": "bf8086"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -77,24 +77,27 @@\n   public static LocalCacheManager create(AlluxioConfiguration conf) throws IOException {\n     MetaStore metaStore = MetaStore.create();\n     CacheEvictor evictor = CacheEvictor.create(conf);\n-    PageStore pageStore = PageStore.create(conf);\n+    PageStoreOptions options = PageStoreOptions.create(conf);\n+    PageStore pageStore = PageStore.create(options);\n+    boolean restored = false;\n     try {\n-      Collection<PageInfo> pageInfos = pageStore.getPages();\n-      LOG.info(\"Creating LocalCacheManager with {} existing pages\", pageInfos.size());\n-      for (PageInfo pageInfo : pageInfos) {\n-        PageId pageId = pageInfo.getPageId();\n-        metaStore.addPage(pageId, pageInfo);\n-        evictor.updateOnPut(pageId);\n-      }\n-      return new LocalCacheManager(conf, metaStore, pageStore, evictor);\n+      restored = pageStore.restore(pageInfo -> {\n+        if (pageInfo == null) {\n+          return false;\n+        }\n+        metaStore.addPage(pageInfo.getPageId(), pageInfo);\n+        evictor.updateOnPut(pageInfo.getPageId());\n+        return metaStore.bytes() <= pageStore.getCacheSize();\n+      });\n     } catch (Exception e) {\n-      try {\n-        pageStore.close();\n-      } catch (Exception ex) {\n-        e.addSuppressed(ex);\n-      }\n-      throw new IOException(\"failed to create local cache manager\", e);\n+      LOG.error(\"Failed to restore PageStore\", e);\n+    }\n+    if (!restored) {\n+      metaStore.reset();\n+      evictor.reset();\n+      pageStore.initialize(options);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00996da5ae2f67c0e9185c9291dfbb2d471ecb2"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMzQ4MTcz", "url": "https://github.com/Alluxio/alluxio/pull/10953#pullrequestreview-362348173", "createdAt": "2020-02-21T01:24:40Z", "commit": {"oid": "d00996da5ae2f67c0e9185c9291dfbb2d471ecb2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMToyNDo0MFrOFso2ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMToyNDo0MFrOFso2ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1MDk4Ng==", "bodyText": "We need to indicate that this function must be called right after the constructor. The state of the page store is undetermined before this function is called.", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r382350986", "createdAt": "2020-02-21T01:24:40Z", "author": {"login": "bf8086"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java", "diffHunk": "@@ -170,27 +136,16 @@ ReadableByteChannel get(PageId pageId, int pageOffset) throws IOException,\n   void delete(PageId pageId, long pageSize) throws IOException, PageNotFoundException;\n \n   /**\n-   * @return the number of pages stored\n-   */\n-  long pages();\n-\n-  /**\n-   * @return the total size of pages stored in bytes\n-   */\n-  long bytes();\n-\n-  /**\n-   * Gets all page ids.\n+   * Restores the page store from a previous run.\n    *\n-   * @return collection of ids representing all pages loaded from disk\n+   * @param initFunc function to apply during restore process\n+   * @return true if successfully restored from previous state\n    * @throws IOException if any error occurs\n    */\n-  Collection<PageInfo> getPages() throws IOException;\n+  boolean restore(Predicate<PageInfo> initFunc) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00996da5ae2f67c0e9185c9291dfbb2d471ecb2"}, "originalPosition": 115}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3967f23b80efed6c8ca9c38d0da39eb27dbf6c8", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/f3967f23b80efed6c8ca9c38d0da39eb27dbf6c8", "committedDate": "2020-02-21T18:24:53Z", "message": "Merge branch 'master' of github.com:Alluxio/alluxio into lite_lock"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d55fb204e410e6b94b40a1223a6377ed5ff23f3", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/6d55fb204e410e6b94b40a1223a6377ed5ff23f3", "committedDate": "2020-02-21T22:15:49Z", "message": "Merge branch 'master' of github.com:Alluxio/alluxio into lite_lock"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d06a4a628bcdf395c0b0cda3397a6a206a909ef", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/3d06a4a628bcdf395c0b0cda3397a6a206a909ef", "committedDate": "2020-02-23T09:40:08Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1aa3cbfb7bb11ef8078cef364307dac53bd1b36", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/a1aa3cbfb7bb11ef8078cef364307dac53bd1b36", "committedDate": "2020-02-25T00:21:53Z", "message": "Merge branch 'master' of github.com:Alluxio/alluxio into lite_lock"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d686d709daab528419ff1ae7b6b341135c7805a", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/7d686d709daab528419ff1ae7b6b341135c7805a", "committedDate": "2020-02-25T00:23:01Z", "message": "Fix style check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d24127fa3bc4a6d093c7eaee2c15164b8b20ab5", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/8d24127fa3bc4a6d093c7eaee2c15164b8b20ab5", "committedDate": "2020-02-25T21:09:07Z", "message": "Merge branch 'master' of github.com:Alluxio/alluxio into lite_lock"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "174008918149c697aec68482d8933ba6bc8f7d7b", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/174008918149c697aec68482d8933ba6bc8f7d7b", "committedDate": "2020-02-25T21:13:12Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4400d903e0f15e6181d012bc848dd21da77efd97", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/4400d903e0f15e6181d012bc848dd21da77efd97", "committedDate": "2020-02-25T23:04:08Z", "message": "Merge branch 'master' of github.com:Alluxio/alluxio into lite_lock"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4e9ff672385cb798dee6b9a16b3fc8d1f35ee41", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/f4e9ff672385cb798dee6b9a16b3fc8d1f35ee41", "committedDate": "2020-02-25T23:04:51Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aea7484e860cafa8dd9919e06929f2b96e2b6f9a", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/aea7484e860cafa8dd9919e06929f2b96e2b6f9a", "committedDate": "2020-02-26T01:10:17Z", "message": "Change getPages to return a stream of PageInfo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcc4cfc15c426385b5c5fd894b82596d00fd5693", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/fcc4cfc15c426385b5c5fd894b82596d00fd5693", "committedDate": "2020-02-26T01:35:04Z", "message": "Merge branch 'master' of github.com:Alluxio/alluxio into lite_lock"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc317747df25508c8ef26f2b701607ca6692540d", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/dc317747df25508c8ef26f2b701607ca6692540d", "committedDate": "2020-02-26T01:44:15Z", "message": "Update javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61dd38272cacd4ae7ba2b0360159512b0bab63c7", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/61dd38272cacd4ae7ba2b0360159512b0bab63c7", "committedDate": "2020-02-26T02:17:41Z", "message": "More javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MTkwOTkz", "url": "https://github.com/Alluxio/alluxio/pull/10953#pullrequestreview-365190993", "createdAt": "2020-02-26T19:45:54Z", "commit": {"oid": "61dd38272cacd4ae7ba2b0360159512b0bab63c7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTo0NTo1NVrOFu5sog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTo0NTo1NVrOFu5sog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcyNDEzMA==", "bodyText": "What happens when we call close on this stream, is it a no-op?", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384724130", "createdAt": "2020-02-26T19:45:55Z", "author": {"login": "calvinjia"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java", "diffHunk": "@@ -180,25 +147,29 @@ private static PageId getPageIdFromKey(byte[] key) {\n   }\n \n   @Override\n-  public long pages() {\n-    return mSize.get();\n-  }\n-\n-  @Override\n-  public long bytes() {\n-    return mBytes.get();\n-  }\n-\n-  @Override\n-  public Collection<PageInfo> getPages() {\n-    try (RocksIterator iter = mDb.newIterator()) {\n-      return Streams.stream(new PageIterator(iter)).collect(Collectors.toList());\n+  public Stream<PageInfo> getPages() throws IOException {\n+    try {\n+      byte[] confData = mDb.get(CONF_KEY);\n+      Cache.PRocksPageStoreOptions pOptions = mOptions.toProto();\n+      if (confData != null) {\n+        Cache.PRocksPageStoreOptions persistedOptions =\n+            Cache.PRocksPageStoreOptions.parseFrom(confData);\n+        if (!persistedOptions.equals(pOptions)) {\n+          mDb.close();\n+          throw new IOException(\"Inconsistent configuration for RocksPageStore\");\n+        }\n+      }\n+      mDb.put(CONF_KEY, pOptions.toByteArray());\n+      return Streams.stream(new PageIterator(mDb.newIterator()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61dd38272cacd4ae7ba2b0360159512b0bab63c7"}, "originalPosition": 148}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MjY5NzQ1", "url": "https://github.com/Alluxio/alluxio/pull/10953#pullrequestreview-365269745", "createdAt": "2020-02-26T21:51:31Z", "commit": {"oid": "61dd38272cacd4ae7ba2b0360159512b0bab63c7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMTo1MTozMVrOFu9o6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjoyNjoyNlrOFu-qjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc4ODcxMg==", "bodyText": "Do we need to clean up directories even when we try to load the store? For example, when the store type is changed and there are data for previous store type.", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384788712", "createdAt": "2020-02-26T21:51:31Z", "author": {"login": "bf8086"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java", "diffHunk": "@@ -45,51 +43,66 @@\n    *\n    * @param options the options to instantiate the page store\n    * @return a PageStore instance\n-   * @throws IOException if failed to create a page store\n    */\n   static PageStore create(PageStoreOptions options) throws IOException {\n-    LOG.info(\"Create PageStore option={}\", options.toString());\n-    switch (options.getType()) {\n-      case LOCAL:\n-        return new LocalPageStore(options.toOptions());\n-      case ROCKS:\n-        return new RocksPageStore(options.toOptions());\n-      default:\n-        throw new IllegalArgumentException(\n-            \"Incompatible PageStore \" + options.getType() + \" specified\");\n-    }\n+    return create(options, null, null);\n   }\n \n   /**\n-   * Creates a new instance of {@link PageStore} based on configuration.\n+   * Creates a {@link PageStore} by restoring from previous state (when metastore and evictor are\n+   * not null).\n    *\n-   * @param conf configuration\n-   * @return the {@link PageStore}\n+   * @param options the options to instantiate the page store\n+   * @param metaStore meta store\n+   * @param evictor evictor\n+   * @return a PageStore instance\n+   * @throws IOException if I/O error happens\n    */\n-  static PageStore create(AlluxioConfiguration conf) throws IOException {\n-    PageStoreOptions options;\n-    PageStoreType storeType = conf.getEnum(\n-        PropertyKey.USER_CLIENT_CACHE_STORE_TYPE, PageStoreType.class);\n-    switch (storeType) {\n+  static PageStore create(PageStoreOptions options, @Nullable MetaStore metaStore,\n+        @Nullable CacheEvictor evictor) throws IOException {\n+    LOG.info(\"Create PageStore option={}\", options.toString());\n+    if (metaStore == null || evictor == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61dd38272cacd4ae7ba2b0360159512b0bab63c7"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5NDAyNg==", "bodyText": "(nit) Given all other stream usages do not require explicit closing, it might be hard for people to remember to close it.", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384794026", "createdAt": "2020-02-26T22:01:46Z", "author": {"login": "bf8086"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java", "diffHunk": "@@ -171,27 +183,16 @@ ReadableByteChannel get(PageId pageId, int pageOffset) throws IOException,\n   void delete(PageId pageId, long pageSize) throws IOException, PageNotFoundException;\n \n   /**\n-   * @return the number of pages stored\n-   */\n-  long pages();\n-\n-  /**\n-   * @return the total size of pages stored in bytes\n-   */\n-  long bytes();\n-\n-  /**\n-   * Gets all page ids.\n+   * Gets a stream of all pages from the page store. This stream needs to be closed as it may", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61dd38272cacd4ae7ba2b0360159512b0bab63c7"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5NTkxOQ==", "bodyText": "(nit) Would it be simpler if we just do it in the previous catch block?", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384795919", "createdAt": "2020-02-26T22:05:49Z", "author": {"login": "bf8086"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -77,24 +77,19 @@\n   public static LocalCacheManager create(AlluxioConfiguration conf) throws IOException {\n     MetaStore metaStore = MetaStore.create();\n     CacheEvictor evictor = CacheEvictor.create(conf);\n-    PageStore pageStore = PageStore.create(conf);\n+    PageStoreOptions options = PageStoreOptions.create(conf);\n+    PageStore pageStore = null;\n     try {\n-      Collection<PageInfo> pageInfos = pageStore.getPages();\n-      LOG.info(\"Creating LocalCacheManager with {} existing pages\", pageInfos.size());\n-      for (PageInfo pageInfo : pageInfos) {\n-        PageId pageId = pageInfo.getPageId();\n-        metaStore.addPage(pageId, pageInfo);\n-        evictor.updateOnPut(pageId);\n-      }\n-      return new LocalCacheManager(conf, metaStore, pageStore, evictor);\n+      pageStore = PageStore.create(options, metaStore, evictor);\n     } catch (Exception e) {\n-      try {\n-        pageStore.close();\n-      } catch (Exception ex) {\n-        e.addSuppressed(ex);\n-      }\n-      throw new IOException(\"failed to create local cache manager\", e);\n+      LOG.error(\"Failed to restore PageStore\", e);\n+    }\n+    if (pageStore == null) {\n+      metaStore.reset();\n+      evictor.reset();\n+      pageStore = PageStore.create(options);\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61dd38272cacd4ae7ba2b0360159512b0bab63c7"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5NzUwNw==", "bodyText": "Would it be more clear if we just move the logic before this line to create(options) and just call it first?", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384797507", "createdAt": "2020-02-26T22:09:21Z", "author": {"login": "bf8086"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java", "diffHunk": "@@ -45,51 +43,66 @@\n    *\n    * @param options the options to instantiate the page store\n    * @return a PageStore instance\n-   * @throws IOException if failed to create a page store\n    */\n   static PageStore create(PageStoreOptions options) throws IOException {\n-    LOG.info(\"Create PageStore option={}\", options.toString());\n-    switch (options.getType()) {\n-      case LOCAL:\n-        return new LocalPageStore(options.toOptions());\n-      case ROCKS:\n-        return new RocksPageStore(options.toOptions());\n-      default:\n-        throw new IllegalArgumentException(\n-            \"Incompatible PageStore \" + options.getType() + \" specified\");\n-    }\n+    return create(options, null, null);\n   }\n \n   /**\n-   * Creates a new instance of {@link PageStore} based on configuration.\n+   * Creates a {@link PageStore} by restoring from previous state (when metastore and evictor are\n+   * not null).\n    *\n-   * @param conf configuration\n-   * @return the {@link PageStore}\n+   * @param options the options to instantiate the page store\n+   * @param metaStore meta store\n+   * @param evictor evictor\n+   * @return a PageStore instance\n+   * @throws IOException if I/O error happens\n    */\n-  static PageStore create(AlluxioConfiguration conf) throws IOException {\n-    PageStoreOptions options;\n-    PageStoreType storeType = conf.getEnum(\n-        PropertyKey.USER_CLIENT_CACHE_STORE_TYPE, PageStoreType.class);\n-    switch (storeType) {\n+  static PageStore create(PageStoreOptions options, @Nullable MetaStore metaStore,\n+        @Nullable CacheEvictor evictor) throws IOException {\n+    LOG.info(\"Create PageStore option={}\", options.toString());\n+    if (metaStore == null || evictor == null) {\n+      initialize(options);\n+    }\n+    final PageStore pageStore;\n+    switch (options.getType()) {\n       case LOCAL:\n-        options = new LocalPageStoreOptions()\n-            .setFileBuckets(conf.getInt(PropertyKey.USER_CLIENT_CACHE_LOCAL_STORE_FILE_BUCKETS));\n+        pageStore = new LocalPageStore(options.toOptions());\n         break;\n       case ROCKS:\n-        options = new RocksPageStoreOptions();\n+        pageStore = new RocksPageStore(options.toOptions());\n         break;\n       default:\n-        throw new IllegalArgumentException(String.format(\"Unrecognized store type %s\",\n-            storeType.name()));\n+        throw new IllegalArgumentException(\n+            \"Incompatible PageStore \" + options.getType() + \" specified\");\n+    }\n+    if (metaStore != null && evictor != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61dd38272cacd4ae7ba2b0360159512b0bab63c7"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5OTc3NA==", "bodyText": "This is a pretty strong side effect from a function that looks like a getter. Shall we either rename this function or make it protected and close the db upon exception from PageStore.create()?", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384799774", "createdAt": "2020-02-26T22:14:02Z", "author": {"login": "bf8086"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java", "diffHunk": "@@ -180,25 +147,29 @@ private static PageId getPageIdFromKey(byte[] key) {\n   }\n \n   @Override\n-  public long pages() {\n-    return mSize.get();\n-  }\n-\n-  @Override\n-  public long bytes() {\n-    return mBytes.get();\n-  }\n-\n-  @Override\n-  public Collection<PageInfo> getPages() {\n-    try (RocksIterator iter = mDb.newIterator()) {\n-      return Streams.stream(new PageIterator(iter)).collect(Collectors.toList());\n+  public Stream<PageInfo> getPages() throws IOException {\n+    try {\n+      byte[] confData = mDb.get(CONF_KEY);\n+      Cache.PRocksPageStoreOptions pOptions = mOptions.toProto();\n+      if (confData != null) {\n+        Cache.PRocksPageStoreOptions persistedOptions =\n+            Cache.PRocksPageStoreOptions.parseFrom(confData);\n+        if (!persistedOptions.equals(pOptions)) {\n+          mDb.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61dd38272cacd4ae7ba2b0360159512b0bab63c7"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgwNTUxNw==", "bodyText": "After restoration failed, we will need to clean the store directory before creating a new store.", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384805517", "createdAt": "2020-02-26T22:26:26Z", "author": {"login": "bf8086"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -77,24 +77,19 @@\n   public static LocalCacheManager create(AlluxioConfiguration conf) throws IOException {\n     MetaStore metaStore = MetaStore.create();\n     CacheEvictor evictor = CacheEvictor.create(conf);\n-    PageStore pageStore = PageStore.create(conf);\n+    PageStoreOptions options = PageStoreOptions.create(conf);\n+    PageStore pageStore = null;\n     try {\n-      Collection<PageInfo> pageInfos = pageStore.getPages();\n-      LOG.info(\"Creating LocalCacheManager with {} existing pages\", pageInfos.size());\n-      for (PageInfo pageInfo : pageInfos) {\n-        PageId pageId = pageInfo.getPageId();\n-        metaStore.addPage(pageId, pageInfo);\n-        evictor.updateOnPut(pageId);\n-      }\n-      return new LocalCacheManager(conf, metaStore, pageStore, evictor);\n+      pageStore = PageStore.create(options, metaStore, evictor);\n     } catch (Exception e) {\n-      try {\n-        pageStore.close();\n-      } catch (Exception ex) {\n-        e.addSuppressed(ex);\n-      }\n-      throw new IOException(\"failed to create local cache manager\", e);\n+      LOG.error(\"Failed to restore PageStore\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61dd38272cacd4ae7ba2b0360159512b0bab63c7"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f250d0427c1dd2d064c6054c6319cdcf66aeafcd", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/f250d0427c1dd2d064c6054c6319cdcf66aeafcd", "committedDate": "2020-02-27T08:17:11Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7c8c45be9888f038801c456062cc7e508b03190", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/b7c8c45be9888f038801c456062cc7e508b03190", "committedDate": "2020-02-27T18:00:07Z", "message": "Fix style check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e52c9f6d208b32118915db84c6fb89094a0f792f", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/e52c9f6d208b32118915db84c6fb89094a0f792f", "committedDate": "2020-02-27T18:38:44Z", "message": "Fix style check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f775bc0f38372dcfee9f36fc41f88d78f8891df4", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/f775bc0f38372dcfee9f36fc41f88d78f8891df4", "committedDate": "2020-02-27T19:23:23Z", "message": "Merge branch 'master' of github.com:Alluxio/alluxio into lite_lock"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a19fe6d8da9a9f337162430a45c96bf34d9ab791", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/a19fe6d8da9a9f337162430a45c96bf34d9ab791", "committedDate": "2020-02-27T19:28:07Z", "message": "Merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed0612d2c41c3c0423a003dd78da11ac8a36cb5b", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/ed0612d2c41c3c0423a003dd78da11ac8a36cb5b", "committedDate": "2020-02-27T19:47:44Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MDExNTEx", "url": "https://github.com/Alluxio/alluxio/pull/10953#pullrequestreview-366011511", "createdAt": "2020-02-27T21:28:41Z", "commit": {"oid": "ed0612d2c41c3c0423a003dd78da11ac8a36cb5b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMToyODo0MVrOFvh1RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMToyODo0MVrOFvh1RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MTcwMQ==", "bodyText": "It can be tricky for user to deal with trailing slash if we use the configured path without normalizing it.", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r385381701", "createdAt": "2020-02-27T21:28:41Z", "author": {"login": "bf8086"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java", "diffHunk": "@@ -51,59 +45,24 @@\n   private static final Logger LOG = LoggerFactory.getLogger(LocalPageStore.class);\n \n   private final String mRoot;\n-  private final AtomicLong mSize = new AtomicLong(0);\n-  private final AtomicLong mBytes = new AtomicLong(0);\n   private final long mPageSize;\n+  private final long mCacheSize;\n   private final int mFileBuckets;\n   private final Pattern mPagePattern;\n \n   /**\n    * Creates a new instance of {@link LocalPageStore}.\n    *\n    * @param options options for the local page store\n-   * @throws IOException when fails to create a {@link LocalPageStore}\n    */\n-  public LocalPageStore(LocalPageStoreOptions options) throws IOException {\n+  public LocalPageStore(LocalPageStoreOptions options) {\n     mRoot = options.getRootDir();\n     mPageSize = options.getPageSize();\n+    mCacheSize = options.getCacheSize();\n     mFileBuckets = options.getFileBuckets();\n-    Path rootDir = Paths.get(mRoot);\n     // pattern encoding root_path/page_size(ulong)/bucket(uint)/file_id(str)/page_idx(ulong)/\n     mPagePattern = Pattern.compile(\n-        String.format(\"%s/%d/(\\\\d+)/([^/]+)/(\\\\d+)\", Pattern.quote(rootDir.toString()), mPageSize));\n-    try {\n-      boolean invalidPage = false;\n-\n-      if (Files.exists(rootDir)) {\n-        try (Stream<Path> stream = Files.walk(rootDir)) {\n-          invalidPage = stream\n-              .filter(Files::isRegularFile)\n-              .anyMatch(path -> {\n-                if (getPageId(path) == null) {\n-                  LOG.warn(\"Invalid page path {}\", path);\n-                  return true;\n-                }\n-                try {\n-                  mBytes.getAndAdd(Files.size(path));\n-                } catch (IOException e) {\n-                  LOG.warn(\"Fail to get file size {}\", e.toString());\n-                }\n-                mSize.incrementAndGet();\n-                return false;\n-              });\n-        }\n-      }\n-\n-      if (invalidPage || mBytes.get() > options.getCacheSize()) {\n-        LOG.warn(\"Cannot recover from cached data: {}\",\n-            invalidPage ? \"Invalid page file found\" : \"Cached data size exceeded configured value\");\n-        FileUtils.cleanDirectory(new File(mRoot));\n-        mSize.set(0);\n-        mBytes.set(0);\n-      }\n-    } catch (IOException e) {\n-      throw new IOException(String.format(\"can't initialize page store at %s\", mRoot), e);\n-    }\n+        String.format(\"%s/%d/(\\\\d+)/([^/]+)/(\\\\d+)\", Pattern.quote(mRoot), mPageSize));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed0612d2c41c3c0423a003dd78da11ac8a36cb5b"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MDMyNTYz", "url": "https://github.com/Alluxio/alluxio/pull/10953#pullrequestreview-366032563", "createdAt": "2020-02-27T22:04:13Z", "commit": {"oid": "ed0612d2c41c3c0423a003dd78da11ac8a36cb5b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjowNDoxNFrOFvi1wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjowNDoxNFrOFvi1wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5ODIxMA==", "bodyText": "Should the previous page store be closed before we create a new one?", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r385398210", "createdAt": "2020-02-27T22:04:14Z", "author": {"login": "bf8086"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -71,31 +76,70 @@\n   @GuardedBy(\"mMetaLock\")\n   private final MetaStore mMetaStore;\n \n+  /**\n+   * Restores a page store a the configured location, updating meta store and evictor.\n+   *\n+   * @param pageStore page store\n+   * @param options page store options\n+   * @param metaStore meta store\n+   * @param evictor evictor\n+   * @return whether the restore succeeds or not\n+   */\n+  private static boolean restore(\n+      PageStore pageStore, PageStoreOptions options, MetaStore metaStore, CacheEvictor evictor) {\n+    LOG.info(\"Restore PageStore with {}\", options);\n+    Path rootDir = Paths.get(options.getRootDir());\n+    if (!Files.exists(rootDir)) {\n+      LOG.error(\"Directory {} does not exist\", rootDir);\n+      return false;\n+    }\n+    try (Stream<PageInfo> stream = pageStore.getPages()) {\n+      Iterator<PageInfo> iterator = stream.iterator();\n+      while (iterator.hasNext()) {\n+        PageInfo pageInfo = iterator.next();\n+        if (pageInfo == null) {\n+          LOG.error(\"Invalid page info\");\n+          return false;\n+        }\n+        metaStore.addPage(pageInfo.getPageId(), pageInfo);\n+        evictor.updateOnPut(pageInfo.getPageId());\n+        if (metaStore.bytes() > pageStore.getCacheSize()) {\n+          LOG.error(\"Loaded pages exceed cache capacity ({} bytes)\",\n+                  pageStore.getCacheSize());\n+          return false;\n+        }\n+      }\n+    } catch (Exception e) {\n+      LOG.error(\"Failed to restore PageStore\", e);\n+      return false;\n+    }\n+    LOG.info(\"Restored PageStore with {} existing pages and {} bytes\",\n+        metaStore.pages(), metaStore.bytes());\n+    return true;\n+  }\n+\n   /**\n    * @param conf the Alluxio configuration\n    * @return an instance of {@link LocalCacheManager}\n    */\n   public static LocalCacheManager create(AlluxioConfiguration conf) throws IOException {\n     MetaStore metaStore = MetaStore.create();\n     CacheEvictor evictor = CacheEvictor.create(conf);\n-    PageStore pageStore = PageStore.create(conf);\n+    PageStoreOptions options = PageStoreOptions.create(conf);\n+    PageStore pageStore = null;\n+    boolean restored = false;\n     try {\n-      Collection<PageInfo> pageInfos = pageStore.getPages();\n-      LOG.info(\"Creating LocalCacheManager with {} existing pages\", pageInfos.size());\n-      for (PageInfo pageInfo : pageInfos) {\n-        PageId pageId = pageInfo.getPageId();\n-        metaStore.addPage(pageId, pageInfo);\n-        evictor.updateOnPut(pageId);\n-      }\n-      return new LocalCacheManager(conf, metaStore, pageStore, evictor);\n+      pageStore = PageStore.create(options, false);\n+      restored = restore(pageStore, options, metaStore, evictor);\n     } catch (Exception e) {\n-      try {\n-        pageStore.close();\n-      } catch (Exception ex) {\n-        e.addSuppressed(ex);\n-      }\n-      throw new IOException(\"failed to create local cache manager\", e);\n+      LOG.error(\"Failed to restore PageStore\", e);\n+    }\n+    if (!restored) {\n+      metaStore.reset();\n+      evictor.reset();\n+      pageStore = PageStore.create(options, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed0612d2c41c3c0423a003dd78da11ac8a36cb5b"}, "originalPosition": 103}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcc06eaa1e16316a18065b8402704f1c9ab766d9", "author": {"user": {"login": "apc999", "name": "Bin Fan"}}, "url": "https://github.com/Alluxio/alluxio/commit/dcc06eaa1e16316a18065b8402704f1c9ab766d9", "committedDate": "2020-02-27T22:42:11Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MDYwMzAy", "url": "https://github.com/Alluxio/alluxio/pull/10953#pullrequestreview-366060302", "createdAt": "2020-02-27T23:00:15Z", "commit": {"oid": "dcc06eaa1e16316a18065b8402704f1c9ab766d9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4862, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}