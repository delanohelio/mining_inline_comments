{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MTczMTA0", "number": 10968, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNjo1NToyM1rODh8iLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTo1OTo1OFrODiBkwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTIxMzg5OnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNjo1NToyM1rOFs9xFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOTowMToyM1rOFtBVeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY5MzY1NQ==", "bodyText": "Should we just use the guava cache, like here: https://github.com/Alluxio/alluxio/pull/10963/files#diff-2d2ca0120802269babf6451df30b6279R273", "url": "https://github.com/Alluxio/alluxio/pull/10968#discussion_r382693655", "createdAt": "2020-02-21T16:55:23Z", "author": {"login": "gpang"}, "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java", "diffHunk": "@@ -149,6 +154,14 @@\n   /** Whether to do URI scheme validation for file systems using this context.  */\n   private boolean mUriValidationEnabled = true;\n \n+  /** Cached map for workers. */\n+  @GuardedBy(\"this\")\n+  private volatile List<BlockWorkerInfo> mWorkerInfoList = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "847cf041b354a5b2232c138177280c3efb32dea0"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczMzQ5Nw==", "bodyText": "Agree. Let's at least keep a TODO. Leave it to @LuQQiu to decide if we want to switch to Guava Cache in this PR", "url": "https://github.com/Alluxio/alluxio/pull/10968#discussion_r382733497", "createdAt": "2020-02-21T18:20:52Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java", "diffHunk": "@@ -149,6 +154,14 @@\n   /** Whether to do URI scheme validation for file systems using this context.  */\n   private boolean mUriValidationEnabled = true;\n \n+  /** Cached map for workers. */\n+  @GuardedBy(\"this\")\n+  private volatile List<BlockWorkerInfo> mWorkerInfoList = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY5MzY1NQ=="}, "originalCommit": {"oid": "847cf041b354a5b2232c138177280c3efb32dea0"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1MjEyMA==", "bodyText": "@gpang I am not quite familiar of guava cache, but according to my understanding, if I define refreshAfterWrite(interval), it will refresh periodically no matter the value is being get or not. This makes sense on the leading master side since we want the cached worker info list up to date enough.\nHowever, on the client-side, a client may need worker info list for some period of time and no need it anymore. Using loadingcache and refresh periodically may introduce unneeded RPC call to the leading master.", "url": "https://github.com/Alluxio/alluxio/pull/10968#discussion_r382752120", "createdAt": "2020-02-21T19:01:23Z", "author": {"login": "LuQQiu"}, "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java", "diffHunk": "@@ -149,6 +154,14 @@\n   /** Whether to do URI scheme validation for file systems using this context.  */\n   private boolean mUriValidationEnabled = true;\n \n+  /** Cached map for workers. */\n+  @GuardedBy(\"this\")\n+  private volatile List<BlockWorkerInfo> mWorkerInfoList = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY5MzY1NQ=="}, "originalCommit": {"oid": "847cf041b354a5b2232c138177280c3efb32dea0"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTIxOTUzOnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNjo1Njo0OVrOFs90lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODoyMTo1NFrOFtAOqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY5NDU1MA==", "bodyText": "It seems like the only difference between this method and getAllWorkers is that this one is cached (so maybe stale)? It is not clear from the method names, and or java doc.", "url": "https://github.com/Alluxio/alluxio/pull/10968#discussion_r382694550", "createdAt": "2020-02-21T16:56:49Z", "author": {"login": "gpang"}, "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java", "diffHunk": "@@ -562,6 +578,28 @@ public synchronized WorkerNetAddress getLocalWorker() throws IOException {\n     return mLocalWorker;\n   }\n \n+  /**\n+   * @return the info of all block workers eligible for reads and writes\n+   */\n+  public synchronized List<BlockWorkerInfo> getEligibleWorkers() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "847cf041b354a5b2232c138177280c3efb32dea0"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczMzk5Mg==", "bodyText": "Agree. I would rename this to getCachedWorkers", "url": "https://github.com/Alluxio/alluxio/pull/10968#discussion_r382733992", "createdAt": "2020-02-21T18:21:54Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java", "diffHunk": "@@ -562,6 +578,28 @@ public synchronized WorkerNetAddress getLocalWorker() throws IOException {\n     return mLocalWorker;\n   }\n \n+  /**\n+   * @return the info of all block workers eligible for reads and writes\n+   */\n+  public synchronized List<BlockWorkerInfo> getEligibleWorkers() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY5NDU1MA=="}, "originalCommit": {"oid": "847cf041b354a5b2232c138177280c3efb32dea0"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTMzODU3OnYy", "diffSide": "RIGHT", "path": "job/server/src/main/java/alluxio/job/plan/migrate/MigrateDefinition.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNzozNzoyMlrOFs_AFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODoxNzo1N1rOFtAHVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcxMzg3Ng==", "bodyText": "Change all the getAllWorkers to getEligibleWorkers?\ni tested locally that if all job servers used getEligibleWorkers() instead of getAllWorkers(), a large amount of getWorkerInfoList call will be reduced on the job server side.\nThis is because instead of creating a AlluxioBlockStore each time when needed, Those context used in job server definitions and job utils internally contain a shared JobServerContext which contains a FileSystemContext.\nThis FileSystemContext is shared so that the cached worker info list is shared.", "url": "https://github.com/Alluxio/alluxio/pull/10968#discussion_r382713876", "createdAt": "2020-02-21T17:37:22Z", "author": {"login": "LuQQiu"}, "path": "job/server/src/main/java/alluxio/job/plan/migrate/MigrateDefinition.java", "diffHunk": "@@ -181,8 +181,7 @@ private void checkMigrateValid(MigrateConfig config, FileSystem fs) throws Excep\n     for (WorkerInfo workerInfo : jobWorkerInfoList) {\n       hostnameToWorker.put(workerInfo.getAddress().getHost(), workerInfo);\n     }\n-    List<BlockWorkerInfo> alluxioWorkerInfoList =\n-        AlluxioBlockStore.create(context.getFsContext()).getAllWorkers();\n+    List<BlockWorkerInfo> alluxioWorkerInfoList = context.getFsContext().getAllWorkers();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "847cf041b354a5b2232c138177280c3efb32dea0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczMjExOA==", "bodyText": "agree, but let's still keep getAllWorkers in case client need all workers for certain reasons.\nalso , let's update the javadoc of getAllWorkers to indicate it is expensive", "url": "https://github.com/Alluxio/alluxio/pull/10968#discussion_r382732118", "createdAt": "2020-02-21T18:17:57Z", "author": {"login": "apc999"}, "path": "job/server/src/main/java/alluxio/job/plan/migrate/MigrateDefinition.java", "diffHunk": "@@ -181,8 +181,7 @@ private void checkMigrateValid(MigrateConfig config, FileSystem fs) throws Excep\n     for (WorkerInfo workerInfo : jobWorkerInfoList) {\n       hostnameToWorker.put(workerInfo.getAddress().getHost(), workerInfo);\n     }\n-    List<BlockWorkerInfo> alluxioWorkerInfoList =\n-        AlluxioBlockStore.create(context.getFsContext()).getAllWorkers();\n+    List<BlockWorkerInfo> alluxioWorkerInfoList = context.getFsContext().getAllWorkers();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcxMzg3Ng=="}, "originalCommit": {"oid": "847cf041b354a5b2232c138177280c3efb32dea0"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDAyNjg5OnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTo1NDo1NlrOFtFuKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMzoxNzo1MFrOFtHUnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyMzk3OQ==", "bodyText": "can you mention in javadoc this method returning list of workers is relatively cheap as the result  is cached, but may not be update to date and refer to method getAllWorkers if users want to get most update-to-date list?", "url": "https://github.com/Alluxio/alluxio/pull/10968#discussion_r382823979", "createdAt": "2020-02-21T21:54:56Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java", "diffHunk": "@@ -562,6 +578,28 @@ public synchronized WorkerNetAddress getLocalWorker() throws IOException {\n     return mLocalWorker;\n   }\n \n+  /**\n+   * @return the info of all block workers eligible for reads and writes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "033d3263dddefad5de9ceddee3d559816e3b336f"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1MDIwNw==", "bodyText": "Added! thanks", "url": "https://github.com/Alluxio/alluxio/pull/10968#discussion_r382850207", "createdAt": "2020-02-21T23:17:50Z", "author": {"login": "LuQQiu"}, "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java", "diffHunk": "@@ -562,6 +578,28 @@ public synchronized WorkerNetAddress getLocalWorker() throws IOException {\n     return mLocalWorker;\n   }\n \n+  /**\n+   * @return the info of all block workers eligible for reads and writes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyMzk3OQ=="}, "originalCommit": {"oid": "033d3263dddefad5de9ceddee3d559816e3b336f"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDAzOTY5OnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTo1OTo1OFrOFtF1tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMzoxNzo1NVrOFtHUuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyNTkwOA==", "bodyText": "can you indicate that this method is more expensive than getCachedWorkers?", "url": "https://github.com/Alluxio/alluxio/pull/10968#discussion_r382825908", "createdAt": "2020-02-21T21:59:58Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java", "diffHunk": "@@ -562,6 +578,28 @@ public synchronized WorkerNetAddress getLocalWorker() throws IOException {\n     return mLocalWorker;\n   }\n \n+  /**\n+   * @return the info of all block workers eligible for reads and writes\n+   */\n+  public synchronized List<BlockWorkerInfo> getCachedWorkers() throws IOException {\n+    if (mWorkerInfoList == null || mWorkerRefreshPolicy.attempt()) {\n+      mWorkerInfoList = getAllWorkers();\n+    }\n+    return mWorkerInfoList;\n+  }\n+\n+  /**\n+   * @return the info of all block workers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "033d3263dddefad5de9ceddee3d559816e3b336f"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1MDIzMg==", "bodyText": "Added thanks", "url": "https://github.com/Alluxio/alluxio/pull/10968#discussion_r382850232", "createdAt": "2020-02-21T23:17:55Z", "author": {"login": "LuQQiu"}, "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystemContext.java", "diffHunk": "@@ -562,6 +578,28 @@ public synchronized WorkerNetAddress getLocalWorker() throws IOException {\n     return mLocalWorker;\n   }\n \n+  /**\n+   * @return the info of all block workers eligible for reads and writes\n+   */\n+  public synchronized List<BlockWorkerInfo> getCachedWorkers() throws IOException {\n+    if (mWorkerInfoList == null || mWorkerRefreshPolicy.attempt()) {\n+      mWorkerInfoList = getAllWorkers();\n+    }\n+    return mWorkerInfoList;\n+  }\n+\n+  /**\n+   * @return the info of all block workers", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyNTkwOA=="}, "originalCommit": {"oid": "033d3263dddefad5de9ceddee3d559816e3b336f"}, "originalPosition": 97}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1967, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}