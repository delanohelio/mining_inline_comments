{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MDQ5MTY2", "number": 11426, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMTowMjoyNlrOD74AJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMToyNDowMlrOD74Ncw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTEwMTE4OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMTowMjoyNlrOGUeASg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMTozMjozN1rOGUedhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDExNjI5OA==", "bodyText": "This default is different than what you used before. Is it intentional?", "url": "https://github.com/Alluxio/alluxio/pull/11426#discussion_r424116298", "createdAt": "2020-05-13T01:02:26Z", "author": {"login": "ggezer"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -2142,15 +2142,19 @@ public String toString() {\n           .build();\n   public static final PropertyKey MASTER_METADATA_SYNC_EXECUTOR_POOL_SIZE =\n       new Builder(Name.MASTER_METADATA_SYNC_EXECUTOR_POOL_SIZE)\n-          .setDefaultValue(32)\n+          .setDefaultSupplier(() -> Runtime.getRuntime().availableProcessors(),\n+              \"The total number of threads which can concurrently execute metadata sync \"\n+                  + \"operations.\")\n           .setDescription(\"The number of threads used to execute all metadata sync\"\n               + \"operations\")\n           .setScope(Scope.MASTER)\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n           .build();\n   public static final PropertyKey MASTER_METADATA_SYNC_UFS_PREFETCH_POOL_SIZE =\n       new Builder(Name.MASTER_METADATA_SYNC_UFS_PREFETCH_POOL_SIZE)\n-          .setDefaultValue(32)\n+          .setDefaultSupplier(() -> Math.max(1, Runtime.getRuntime().availableProcessors() / 2),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd6f4ae2706b4df9cb511f4b3fce0f9eb3635405"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEyMjE2MA==", "bodyText": "This is intentional", "url": "https://github.com/Alluxio/alluxio/pull/11426#discussion_r424122160", "createdAt": "2020-05-13T01:26:00Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -2142,15 +2142,19 @@ public String toString() {\n           .build();\n   public static final PropertyKey MASTER_METADATA_SYNC_EXECUTOR_POOL_SIZE =\n       new Builder(Name.MASTER_METADATA_SYNC_EXECUTOR_POOL_SIZE)\n-          .setDefaultValue(32)\n+          .setDefaultSupplier(() -> Runtime.getRuntime().availableProcessors(),\n+              \"The total number of threads which can concurrently execute metadata sync \"\n+                  + \"operations.\")\n           .setDescription(\"The number of threads used to execute all metadata sync\"\n               + \"operations\")\n           .setScope(Scope.MASTER)\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n           .build();\n   public static final PropertyKey MASTER_METADATA_SYNC_UFS_PREFETCH_POOL_SIZE =\n       new Builder(Name.MASTER_METADATA_SYNC_UFS_PREFETCH_POOL_SIZE)\n-          .setDefaultValue(32)\n+          .setDefaultSupplier(() -> Math.max(1, Runtime.getRuntime().availableProcessors() / 2),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDExNjI5OA=="}, "originalCommit": {"oid": "bd6f4ae2706b4df9cb511f4b3fce0f9eb3635405"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEyMzc4Mg==", "bodyText": "updated", "url": "https://github.com/Alluxio/alluxio/pull/11426#discussion_r424123782", "createdAt": "2020-05-13T01:32:37Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -2142,15 +2142,19 @@ public String toString() {\n           .build();\n   public static final PropertyKey MASTER_METADATA_SYNC_EXECUTOR_POOL_SIZE =\n       new Builder(Name.MASTER_METADATA_SYNC_EXECUTOR_POOL_SIZE)\n-          .setDefaultValue(32)\n+          .setDefaultSupplier(() -> Runtime.getRuntime().availableProcessors(),\n+              \"The total number of threads which can concurrently execute metadata sync \"\n+                  + \"operations.\")\n           .setDescription(\"The number of threads used to execute all metadata sync\"\n               + \"operations\")\n           .setScope(Scope.MASTER)\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n           .build();\n   public static final PropertyKey MASTER_METADATA_SYNC_UFS_PREFETCH_POOL_SIZE =\n       new Builder(Name.MASTER_METADATA_SYNC_UFS_PREFETCH_POOL_SIZE)\n-          .setDefaultValue(32)\n+          .setDefaultSupplier(() -> Math.max(1, Runtime.getRuntime().availableProcessors() / 2),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDExNjI5OA=="}, "originalCommit": {"oid": "bd6f4ae2706b4df9cb511f4b3fce0f9eb3635405"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTEwNDAyOnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMTowNDoxN1rOGUeCAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMTozMjo0MlrOGUedow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDExNjczOQ==", "bodyText": "Can you change the value of PropertyKey.Name.MASTER_METADATA_SYNC_UFS_PREFETCH_POOL_SIZE to meet the prop name. It currently ends with parallelism.", "url": "https://github.com/Alluxio/alluxio/pull/11426#discussion_r424116739", "createdAt": "2020-05-13T01:04:17Z", "author": {"login": "ggezer"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -380,12 +380,14 @@\n \n   final ThreadPoolExecutor mSyncPrefetchExecutor = new ThreadPoolExecutor(\n       ServerConfiguration.getInt(PropertyKey.MASTER_METADATA_SYNC_UFS_PREFETCH_POOL_SIZE),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd6f4ae2706b4df9cb511f4b3fce0f9eb3635405"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEyMzgxMQ==", "bodyText": "updated", "url": "https://github.com/Alluxio/alluxio/pull/11426#discussion_r424123811", "createdAt": "2020-05-13T01:32:42Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -380,12 +380,14 @@\n \n   final ThreadPoolExecutor mSyncPrefetchExecutor = new ThreadPoolExecutor(\n       ServerConfiguration.getInt(PropertyKey.MASTER_METADATA_SYNC_UFS_PREFETCH_POOL_SIZE),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDExNjczOQ=="}, "originalCommit": {"oid": "bd6f4ae2706b4df9cb511f4b3fce0f9eb3635405"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTEzNTIzOnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMToyNDowMlrOGUeVSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMTozMToyMVrOGUecUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEyMTY3NQ==", "bodyText": "What does this do? (and what is the behavior with and without this change?)", "url": "https://github.com/Alluxio/alluxio/pull/11426#discussion_r424121675", "createdAt": "2020-05-13T01:24:02Z", "author": {"login": "gpang"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -438,6 +440,11 @@ public DefaultFileSystemMaster(BlockMaster blockMaster, CoreMasterContext master\n     mSyncManager = new ActiveSyncManager(mMountTable, this);\n     mTimeSeriesStore = new TimeSeriesStore();\n     mAccessTimeUpdater = new AccessTimeUpdater(this, mInodeTree, masterContext.getJournalSystem());\n+\n+    // Sync executors should allow core threads to time out", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd6f4ae2706b4df9cb511f4b3fce0f9eb3635405"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEyMjEyOA==", "bodyText": "If no metadata syncs are occurring the executor will spin down threads to decrease resource utilization", "url": "https://github.com/Alluxio/alluxio/pull/11426#discussion_r424122128", "createdAt": "2020-05-13T01:25:54Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -438,6 +440,11 @@ public DefaultFileSystemMaster(BlockMaster blockMaster, CoreMasterContext master\n     mSyncManager = new ActiveSyncManager(mMountTable, this);\n     mTimeSeriesStore = new TimeSeriesStore();\n     mAccessTimeUpdater = new AccessTimeUpdater(this, mInodeTree, masterContext.getJournalSystem());\n+\n+    // Sync executors should allow core threads to time out", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEyMTY3NQ=="}, "originalCommit": {"oid": "bd6f4ae2706b4df9cb511f4b3fce0f9eb3635405"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEyMzQ3Mg==", "bodyText": "The impact is that the first time a sync needs to occur when there have been no syncs within the last minute there will be a slight overhead for that RPC to create the threads. The overhead is equivalent to the time to create the threads needed to process the sync.", "url": "https://github.com/Alluxio/alluxio/pull/11426#discussion_r424123472", "createdAt": "2020-05-13T01:31:21Z", "author": {"login": "ZacBlanco"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -438,6 +440,11 @@ public DefaultFileSystemMaster(BlockMaster blockMaster, CoreMasterContext master\n     mSyncManager = new ActiveSyncManager(mMountTable, this);\n     mTimeSeriesStore = new TimeSeriesStore();\n     mAccessTimeUpdater = new AccessTimeUpdater(this, mInodeTree, masterContext.getJournalSystem());\n+\n+    // Sync executors should allow core threads to time out", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEyMTY3NQ=="}, "originalCommit": {"oid": "bd6f4ae2706b4df9cb511f4b3fce0f9eb3635405"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1744, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}