{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1MDY4NjU0", "number": 12566, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwNTo1NDoxN1rOE7yRvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwNTo1OTo0MFrOE7yT6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMTI1MTgxOnYy", "diffSide": "RIGHT", "path": "docs/en/core-services/Caching.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwNTo1NDoxN1rOH3nT2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMzo1Njo0MVrOH4q90Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA3Nzc4Nw==", "bodyText": "@gpang  If CACHE_PROMOTE moves the block up to MEM tier so only the first read on the existing block is disk space and subsequent ones are supposed to be memory speed, does that imply CACHE_PROMOTE will be faster in some scenarios? I don't find where we talk about that.", "url": "https://github.com/Alluxio/alluxio/pull/12566#discussion_r528077787", "createdAt": "2020-11-21T05:54:17Z", "author": {"login": "jiacheliu3"}, "path": "docs/en/core-services/Caching.md", "diffHunk": "@@ -144,12 +144,18 @@ The user can also specify the tier that the data will be written to via\n \n If the data is already in Alluxio, the client will simply read the block from where it is already stored.\n If Alluxio is configured with multiple tiers, the block may not be necessarily read from the top tier,\n-since it could have been moved to a lower tier transparently.\n+since it may have been loaded into a lower tier, or moved to a lower tier transparently. \n+This logic applies to both `ReadType.CACHE` and `ReadType.CACHE_PROMOTE`.\n \n-Reading data with the `ReadType.CACHE_PROMOTE` will attempt to first transfer the block to the\n+The difference is, reading data with `ReadType.CACHE_PROMOTE` will attempt to first transfer the block to the\n top tier before it is read from the worker. This can also be used as a data management strategy by\n explicitly moving hot data to higher tiers.\n \n+For `ReadType.CACHE`, Alluxio will cache the block into the highest tier that has the available space.\n+So you will read the cache block with disk speed if the block is currently on a disk(SSD/HDD).\n+\n+> Note: In 2.3, Alluxio default ReadType is changed from CACHE_PROMOTE to CACHE.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e22dfdf67c81ccdeaeba589d771f57d63c9b2f88"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAyNDEwOQ==", "bodyText": "Can you explain why it was changed to CACHE? It was because the async alignment tasks will readjust blocks according to the annotation policy, so we don't require the synchronous move to top tier, since that can cause unnecessary delays.", "url": "https://github.com/Alluxio/alluxio/pull/12566#discussion_r529024109", "createdAt": "2020-11-23T22:01:17Z", "author": {"login": "gpang"}, "path": "docs/en/core-services/Caching.md", "diffHunk": "@@ -144,12 +144,18 @@ The user can also specify the tier that the data will be written to via\n \n If the data is already in Alluxio, the client will simply read the block from where it is already stored.\n If Alluxio is configured with multiple tiers, the block may not be necessarily read from the top tier,\n-since it could have been moved to a lower tier transparently.\n+since it may have been loaded into a lower tier, or moved to a lower tier transparently. \n+This logic applies to both `ReadType.CACHE` and `ReadType.CACHE_PROMOTE`.\n \n-Reading data with the `ReadType.CACHE_PROMOTE` will attempt to first transfer the block to the\n+The difference is, reading data with `ReadType.CACHE_PROMOTE` will attempt to first transfer the block to the\n top tier before it is read from the worker. This can also be used as a data management strategy by\n explicitly moving hot data to higher tiers.\n \n+For `ReadType.CACHE`, Alluxio will cache the block into the highest tier that has the available space.\n+So you will read the cache block with disk speed if the block is currently on a disk(SSD/HDD).\n+\n+> Note: In 2.3, Alluxio default ReadType is changed from CACHE_PROMOTE to CACHE.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA3Nzc4Nw=="}, "originalCommit": {"oid": "e22dfdf67c81ccdeaeba589d771f57d63c9b2f88"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE4NjI1Nw==", "bodyText": "I just added more explanation. Does it make more sense now?", "url": "https://github.com/Alluxio/alluxio/pull/12566#discussion_r529186257", "createdAt": "2020-11-24T03:56:41Z", "author": {"login": "jiacheliu3"}, "path": "docs/en/core-services/Caching.md", "diffHunk": "@@ -144,12 +144,18 @@ The user can also specify the tier that the data will be written to via\n \n If the data is already in Alluxio, the client will simply read the block from where it is already stored.\n If Alluxio is configured with multiple tiers, the block may not be necessarily read from the top tier,\n-since it could have been moved to a lower tier transparently.\n+since it may have been loaded into a lower tier, or moved to a lower tier transparently. \n+This logic applies to both `ReadType.CACHE` and `ReadType.CACHE_PROMOTE`.\n \n-Reading data with the `ReadType.CACHE_PROMOTE` will attempt to first transfer the block to the\n+The difference is, reading data with `ReadType.CACHE_PROMOTE` will attempt to first transfer the block to the\n top tier before it is read from the worker. This can also be used as a data management strategy by\n explicitly moving hot data to higher tiers.\n \n+For `ReadType.CACHE`, Alluxio will cache the block into the highest tier that has the available space.\n+So you will read the cache block with disk speed if the block is currently on a disk(SSD/HDD).\n+\n+> Note: In 2.3, Alluxio default ReadType is changed from CACHE_PROMOTE to CACHE.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA3Nzc4Nw=="}, "originalCommit": {"oid": "e22dfdf67c81ccdeaeba589d771f57d63c9b2f88"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMTI1MjQ4OnYy", "diffSide": "RIGHT", "path": "docs/en/core-services/Caching.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwNTo1NTowMVrOH3nUJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMjowMzoyNVrOH4hH_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA3Nzg2Mg==", "bodyText": "@gpang Do we want to mention the tier allocation issue if they use this AcceptingReviewer?", "url": "https://github.com/Alluxio/alluxio/pull/12566#discussion_r528077862", "createdAt": "2020-11-21T05:55:01Z", "author": {"login": "jiacheliu3"}, "path": "docs/en/core-services/Caching.md", "diffHunk": "@@ -205,6 +211,46 @@ A typical configuration will have three tiers for Memory, SSD, and HDD.\n To use multiple hard drives in the HDD tier, specify multiple paths when configuring\n `alluxio.worker.tieredstore.level{x}.dirs.path`.\n \n+### Block Allocation Policies\n+\n+Alluxio uses block allocation policies to define how to allocate new blocks across multiple storage directories (in the same tier or different tiers).\n+The allocation policy defines which storage directory to allocate the new block in. \n+\n+This is configured by worker property `alluxio.worker.allocator.class`. Out-of-the-box implementations include:\n+\n+- **MaxFreeAllocator**: Start trying from tier 0 to the lowest tier, try to allocate the block to the storage directory\n+that currently has the most availability. **This is the default behavior.**\n+\n+- **RoundRobinAllocator**: Start trying from tier 0 to the lowest tier. On each tier, maintain a Round Robin order\n+of storage directories. Try to allocate the new block into a directory following the Round Robin order, and if that \n+does not work, go to the next lower tier.\n+\n+- **GreedyAllocator**: This is an example implementation of the `Allocator` interface. It loops from the top tier \n+to the lowest tier, trying to put the new block into the first directory that can contain the block.\n+\n+### [Experimental] Block Allocation Review Policies\n+\n+This is an experimental feature added in Alluxio 2.4.1. The interface is subject to change in future versions.\n+\n+Alluxio uses block allocation review policies to complement allocation policies. In comparison to allocation policies\n+which define what the allocation should be, the allocation review process validates allocation decisions and prevent \n+the ones that are not good enough. The `Reviewer` works together with the `Allocator`\n+\n+This is configured by worker property `alluxio.worker.reviewer.class`. Out-of-the-box implementations include:\n+\n+- **ProbabilisticBufferReviewer**: Based on the available space in each storage directory, rejects the attempts to put\n+new blocks into this directory probabilistically. The probability is determined by `alluxio.worker.reviewer.probabilistic.hardlimit.bytes`\n+and `alluxio.worker.reviewer.probabilistic.softlimit.bytes`. When the available space in the directory is under\n+`alluxio.worker.reviewer.probabilistic.hardlimit.bytes`, which is `64MB` by default, new blocks will be rejected.\n+When the available space in the directory is above `alluxio.worker.reviewer.probabilistic.softlimit.bytes`, which is\n+`256MB` by default, new blocks will NOT be rejected. When the available space is between these two values, the probability\n+of accepting a new block goes down linearly to as the availability goes down. We choose to reject new blocks early before\n+a directory is filled up, because the existing blocks in the directory can expand in size as we read new data in the block.\n+Leaving a buffer in each directory can reduce the chance of eviction. **This is the default behavior.**\n+\n+- **AcceptingReviewer**: This reviewer accepts every block allocation. So the behavior will be exactly the same", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e22dfdf67c81ccdeaeba589d771f57d63c9b2f88"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAyNTAyMA==", "bodyText": "No, I don't think that is necessary.", "url": "https://github.com/Alluxio/alluxio/pull/12566#discussion_r529025020", "createdAt": "2020-11-23T22:03:25Z", "author": {"login": "gpang"}, "path": "docs/en/core-services/Caching.md", "diffHunk": "@@ -205,6 +211,46 @@ A typical configuration will have three tiers for Memory, SSD, and HDD.\n To use multiple hard drives in the HDD tier, specify multiple paths when configuring\n `alluxio.worker.tieredstore.level{x}.dirs.path`.\n \n+### Block Allocation Policies\n+\n+Alluxio uses block allocation policies to define how to allocate new blocks across multiple storage directories (in the same tier or different tiers).\n+The allocation policy defines which storage directory to allocate the new block in. \n+\n+This is configured by worker property `alluxio.worker.allocator.class`. Out-of-the-box implementations include:\n+\n+- **MaxFreeAllocator**: Start trying from tier 0 to the lowest tier, try to allocate the block to the storage directory\n+that currently has the most availability. **This is the default behavior.**\n+\n+- **RoundRobinAllocator**: Start trying from tier 0 to the lowest tier. On each tier, maintain a Round Robin order\n+of storage directories. Try to allocate the new block into a directory following the Round Robin order, and if that \n+does not work, go to the next lower tier.\n+\n+- **GreedyAllocator**: This is an example implementation of the `Allocator` interface. It loops from the top tier \n+to the lowest tier, trying to put the new block into the first directory that can contain the block.\n+\n+### [Experimental] Block Allocation Review Policies\n+\n+This is an experimental feature added in Alluxio 2.4.1. The interface is subject to change in future versions.\n+\n+Alluxio uses block allocation review policies to complement allocation policies. In comparison to allocation policies\n+which define what the allocation should be, the allocation review process validates allocation decisions and prevent \n+the ones that are not good enough. The `Reviewer` works together with the `Allocator`\n+\n+This is configured by worker property `alluxio.worker.reviewer.class`. Out-of-the-box implementations include:\n+\n+- **ProbabilisticBufferReviewer**: Based on the available space in each storage directory, rejects the attempts to put\n+new blocks into this directory probabilistically. The probability is determined by `alluxio.worker.reviewer.probabilistic.hardlimit.bytes`\n+and `alluxio.worker.reviewer.probabilistic.softlimit.bytes`. When the available space in the directory is under\n+`alluxio.worker.reviewer.probabilistic.hardlimit.bytes`, which is `64MB` by default, new blocks will be rejected.\n+When the available space in the directory is above `alluxio.worker.reviewer.probabilistic.softlimit.bytes`, which is\n+`256MB` by default, new blocks will NOT be rejected. When the available space is between these two values, the probability\n+of accepting a new block goes down linearly to as the availability goes down. We choose to reject new blocks early before\n+a directory is filled up, because the existing blocks in the directory can expand in size as we read new data in the block.\n+Leaving a buffer in each directory can reduce the chance of eviction. **This is the default behavior.**\n+\n+- **AcceptingReviewer**: This reviewer accepts every block allocation. So the behavior will be exactly the same", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA3Nzg2Mg=="}, "originalCommit": {"oid": "e22dfdf67c81ccdeaeba589d771f57d63c9b2f88"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMTI1MzM1OnYy", "diffSide": "RIGHT", "path": "docs/en/core-services/Caching.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwNTo1NTo1N1rOH3nUhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwNTo1NTo1N1rOH3nUhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA3Nzk1OQ==", "bodyText": "This kind of change is quite important actually. I don't think we have a notice to those who are relying on this watermark feature.", "url": "https://github.com/Alluxio/alluxio/pull/12566#discussion_r528077959", "createdAt": "2020-11-21T05:55:57Z", "author": {"login": "jiacheliu3"}, "path": "docs/en/core-services/Caching.md", "diffHunk": "@@ -237,7 +283,7 @@ available options are:\n #### Evictor Emulation\n The old eviction policies are now removed and Alluxio provided implementations are replaced with appropriate annotation policies.\n Configuring old Alluxio evictors will cause worker startup failure with `java.lang.ClassNotFoundException`.\n-Also, the old watermark based configuration is invalidated. So the following previous configuration options are ineffective:\n+Also, **the old watermark based configuration is invalidated**. So the following previous configuration options are ineffective:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e22dfdf67c81ccdeaeba589d771f57d63c9b2f88"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMTI1NDE2OnYy", "diffSide": "RIGHT", "path": "docs/en/core-services/Caching.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwNTo1NzowMFrOH3nU4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwNTo1NzowMFrOH3nU4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA3ODA1MA==", "bodyText": "I think the hashtag part should go together with the URL, as how we do it in most other docs. This change is tested.", "url": "https://github.com/Alluxio/alluxio/pull/12566#discussion_r528078050", "createdAt": "2020-11-21T05:57:00Z", "author": {"login": "jiacheliu3"}, "path": "docs/en/core-services/Caching.md", "diffHunk": "@@ -333,32 +379,32 @@ $ ./bin/alluxio fs free ${PATH_TO_UNUSED_DATA}\n \n This will remove the data at the given path from Alluxio storage. The data is still accessible if\n it is persisted to a UFS. For more information refer to the\n-[command line interface documentation]({{ '/en/operation/User-CLI.html' | relativize_url }}#free)\n+[command line interface documentation]({{ '/en/operation/User-CLI.html#free' | relativize_url }})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e22dfdf67c81ccdeaeba589d771f57d63c9b2f88"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMTI1NzM4OnYy", "diffSide": "RIGHT", "path": "docs/en/core-services/Caching.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwNTo1OTo0MFrOH3nWPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMTo1ODo0MVrOH4g_pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA3ODM5OA==", "bodyText": "@gpang Do we want to mention how the blocks could have been asynchronously loaded? Very interestingly we only mention the async caching fact in https://docs.alluxio.io/os/user/stable/en/operation/Performance-Tuning.html#async-block-caching I don't think the doc path for that feature is intuitive, but I also don't think this section is a good place for that. What do you think?", "url": "https://github.com/Alluxio/alluxio/pull/12566#discussion_r528078398", "createdAt": "2020-11-21T05:59:40Z", "author": {"login": "jiacheliu3"}, "path": "docs/en/core-services/Caching.md", "diffHunk": "@@ -144,12 +144,18 @@ The user can also specify the tier that the data will be written to via\n \n If the data is already in Alluxio, the client will simply read the block from where it is already stored.\n If Alluxio is configured with multiple tiers, the block may not be necessarily read from the top tier,\n-since it could have been moved to a lower tier transparently.\n+since it may have been loaded into a lower tier, or moved to a lower tier transparently. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e22dfdf67c81ccdeaeba589d771f57d63c9b2f88"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAyMjg4NA==", "bodyText": "I think we can keep like this for now.", "url": "https://github.com/Alluxio/alluxio/pull/12566#discussion_r529022884", "createdAt": "2020-11-23T21:58:41Z", "author": {"login": "gpang"}, "path": "docs/en/core-services/Caching.md", "diffHunk": "@@ -144,12 +144,18 @@ The user can also specify the tier that the data will be written to via\n \n If the data is already in Alluxio, the client will simply read the block from where it is already stored.\n If Alluxio is configured with multiple tiers, the block may not be necessarily read from the top tier,\n-since it could have been moved to a lower tier transparently.\n+since it may have been loaded into a lower tier, or moved to a lower tier transparently. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA3ODM5OA=="}, "originalCommit": {"oid": "e22dfdf67c81ccdeaeba589d771f57d63c9b2f88"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 926, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}