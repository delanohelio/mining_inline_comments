{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNjU5Nzc4", "number": 10871, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNzo0NDozMVrODetRuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMDoyODozOVrODfYPbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTI1Njg4OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/ClientContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNzo0NDozMVrOFn_gWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODozMTo0MFrOFoUPYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ3OTI1OA==", "bodyText": "nit: I would name it as loadClientConf; Alternatively, since this is already ClientContext, you can keep loadConf and I don't think it is confusing.\nLeave this up to you", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r377479258", "createdAt": "2020-02-11T07:44:31Z", "author": {"login": "apc999"}, "path": "core/common/src/main/java/alluxio/ClientContext.java", "diffHunk": "@@ -124,7 +125,7 @@ private ClientContext(@Nullable Subject subject, @Nullable AlluxioConfiguration\n    * @param loadPathConf whether to load path level configuration\n    * @throws AlluxioStatusException\n    */\n-  public synchronized void loadConf(InetSocketAddress address, boolean loadClusterConf,\n+  public synchronized void loadConfForClient(InetSocketAddress address, boolean loadClusterConf,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b286248fbe44b5d598723c09fcf1fe297c91f09"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxODk3OQ==", "bodyText": "Make sense, Renamed back to loadConf, thanks", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r377818979", "createdAt": "2020-02-11T18:31:40Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/ClientContext.java", "diffHunk": "@@ -124,7 +125,7 @@ private ClientContext(@Nullable Subject subject, @Nullable AlluxioConfiguration\n    * @param loadPathConf whether to load path level configuration\n    * @throws AlluxioStatusException\n    */\n-  public synchronized void loadConf(InetSocketAddress address, boolean loadClusterConf,\n+  public synchronized void loadConfForClient(InetSocketAddress address, boolean loadClusterConf,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ3OTI1OA=="}, "originalCommit": {"oid": "0b286248fbe44b5d598723c09fcf1fe297c91f09"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTI2NjU4OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/util/ConfigurationUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNzo0OToxMFrOFn_lsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODoyNDozMFrOFoT_lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4MDYyNw==", "bodyText": "loadProperties can be sufficient. In general, concise and accurate names are preferred as long as they are not confusing :)", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r377480627", "createdAt": "2020-02-11T07:49:10Z", "author": {"login": "apc999"}, "path": "core/common/src/main/java/alluxio/util/ConfigurationUtils.java", "diffHunk": "@@ -504,21 +504,22 @@ public static GetConfigurationPResponse loadConfiguration(InetSocketAddress addr\n   }\n \n   /**\n-   * Loads client scope properties from the property list returned by grpc.\n+   * Filters and loads properties contains certain scope from the property list returned by grpc.\n    *\n    * @param properties the property list returned by grpc\n+   * @param scope the scope to filter the received property list\n    * @param logMessage a function with key and value as parameter and returns debug log message\n    * @return the loaded properties\n    */\n-  private static Properties loadClientProperties(List<ConfigProperty> properties,\n-      BiFunction<PropertyKey, String, String> logMessage) {\n+  private static Properties filterAndLoadProperties(List<ConfigProperty> properties,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b286248fbe44b5d598723c09fcf1fe297c91f09"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxNDkzMg==", "bodyText": "Another\n  /**\n   * @param stream the stream to read properties from\n   * @return a properties object populated from the stream\n   */\n  @Nullable\n  public static Properties loadProperties(InputStream stream) {\n\nalready exists in the same file, that's why I give it another name", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r377814932", "createdAt": "2020-02-11T18:24:30Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/util/ConfigurationUtils.java", "diffHunk": "@@ -504,21 +504,22 @@ public static GetConfigurationPResponse loadConfiguration(InetSocketAddress addr\n   }\n \n   /**\n-   * Loads client scope properties from the property list returned by grpc.\n+   * Filters and loads properties contains certain scope from the property list returned by grpc.\n    *\n    * @param properties the property list returned by grpc\n+   * @param scope the scope to filter the received property list\n    * @param logMessage a function with key and value as parameter and returns debug log message\n    * @return the loaded properties\n    */\n-  private static Properties loadClientProperties(List<ConfigProperty> properties,\n-      BiFunction<PropertyKey, String, String> logMessage) {\n+  private static Properties filterAndLoadProperties(List<ConfigProperty> properties,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4MDYyNw=="}, "originalCommit": {"oid": "0b286248fbe44b5d598723c09fcf1fe297c91f09"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTI3MDE2OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/util/ConfigurationUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNzo1MTowOFrOFn_n0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNzo1MTowOFrOFn_n0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4MTE2OA==", "bodyText": "update the comment", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r377481168", "createdAt": "2020-02-11T07:51:08Z", "author": {"login": "apc999"}, "path": "core/common/src/main/java/alluxio/util/ConfigurationUtils.java", "diffHunk": "@@ -504,21 +504,22 @@ public static GetConfigurationPResponse loadConfiguration(InetSocketAddress addr\n   }\n \n   /**\n-   * Loads client scope properties from the property list returned by grpc.\n+   * Filters and loads properties contains certain scope from the property list returned by grpc.\n    *\n    * @param properties the property list returned by grpc\n+   * @param scope the scope to filter the received property list\n    * @param logMessage a function with key and value as parameter and returns debug log message\n    * @return the loaded properties\n    */\n-  private static Properties loadClientProperties(List<ConfigProperty> properties,\n-      BiFunction<PropertyKey, String, String> logMessage) {\n+  private static Properties filterAndLoadProperties(List<ConfigProperty> properties,\n+      Scope scope, BiFunction<PropertyKey, String, String> logMessage) {\n     Properties props = new Properties();\n     for (ConfigProperty property : properties) {\n       String name = property.getName();\n       // TODO(binfan): support propagating unsetting properties from master\n       if (PropertyKey.isValid(name) && property.hasValue()) {\n         PropertyKey key = PropertyKey.fromString(name);\n-        if (!GrpcUtils.contains(key.getScope(), Scope.CLIENT)) {\n+        if (!GrpcUtils.contains(key.getScope(), scope)) {\n           // Only propagate client properties.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b286248fbe44b5d598723c09fcf1fe297c91f09"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTI4NjI2OnYy", "diffSide": "RIGHT", "path": "core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNzo1ODoyM1rOFn_wvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNzo1ODoyM1rOFn_wvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4MzQ1NA==", "bodyText": "name is too long. I would simply call it loadClusterDefaults", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r377483454", "createdAt": "2020-02-11T07:58:23Z", "author": {"login": "apc999"}, "path": "core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java", "diffHunk": "@@ -345,13 +346,13 @@ public static InstancedConfiguration global() {\n    *\n    * @param address the master address\n    */\n-  public static synchronized void loadClusterDefaultsIfNotLoaded(InetSocketAddress address)\n+  public static synchronized void loadClusterDefaultsIfNotLoadedForWorker(InetSocketAddress address)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b286248fbe44b5d598723c09fcf1fe297c91f09"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTI5MDgxOnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODowMDozOFrOFn_zVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODoyMjo1NlrOFoT8Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4NDExNg==", "bodyText": "is this Scope.ALL? don't we use it on client side?", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r377484116", "createdAt": "2020-02-11T08:00:38Z", "author": {"login": "apc999"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -485,54 +497,62 @@ public String toString() {\n               + \"the journal, logs, and under file storage data (if using local filesystem) \"\n               + \"are written here.\")\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n+          .setScope(Scope.ALL)\n           .build();\n   public static final PropertyKey ZOOKEEPER_ADDRESS =\n       new Builder(Name.ZOOKEEPER_ADDRESS)\n           .setDescription(\"Address of ZooKeeper.\")\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.ENFORCE)\n+          .setScope(Scope.ALL)\n           .build();\n   public static final PropertyKey ZOOKEEPER_CONNECTION_TIMEOUT =\n       new Builder(Name.ZOOKEEPER_CONNECTION_TIMEOUT)\n           .setDefaultValue(\"15s\") // matches Zookeeper's default\n           .setDescription(\"Connection timeout to use when connecting to Zookeeper\")\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n+          .setScope(Scope.MASTER)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b286248fbe44b5d598723c09fcf1fe297c91f09"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxNDA3OQ==", "bodyText": "It was used by primary selector to connect to Zookeeper, so it only used by Alluxio masters or job masters.\nI will update the description of this property", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r377814079", "createdAt": "2020-02-11T18:22:56Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -485,54 +497,62 @@ public String toString() {\n               + \"the journal, logs, and under file storage data (if using local filesystem) \"\n               + \"are written here.\")\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n+          .setScope(Scope.ALL)\n           .build();\n   public static final PropertyKey ZOOKEEPER_ADDRESS =\n       new Builder(Name.ZOOKEEPER_ADDRESS)\n           .setDescription(\"Address of ZooKeeper.\")\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.ENFORCE)\n+          .setScope(Scope.ALL)\n           .build();\n   public static final PropertyKey ZOOKEEPER_CONNECTION_TIMEOUT =\n       new Builder(Name.ZOOKEEPER_CONNECTION_TIMEOUT)\n           .setDefaultValue(\"15s\") // matches Zookeeper's default\n           .setDescription(\"Connection timeout to use when connecting to Zookeeper\")\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n+          .setScope(Scope.MASTER)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4NDExNg=="}, "originalCommit": {"oid": "0b286248fbe44b5d598723c09fcf1fe297c91f09"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTI5MTQ5OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODowMTowMFrOFn_zug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzo0Nzo0OFrOFpCk5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4NDIxOA==", "bodyText": "default scope is Scope.ALL right?", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r377484218", "createdAt": "2020-02-11T08:01:00Z", "author": {"login": "apc999"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -292,6 +292,7 @@ public String toString() {\n           .setDescription(\"The directory containing files used to configure Alluxio.\")\n           .setIgnoredSiteProperty(true)\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n+          .setScope(Scope.ALL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b286248fbe44b5d598723c09fcf1fe297c91f09"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxMDYwOQ==", "bodyText": "Yeah, but this can distinguish the property keys that do not consider about its scope / undefined and the property keys that are actually of scope.ALL. And remind following developers to always set scope.", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r377810609", "createdAt": "2020-02-11T18:16:14Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -292,6 +292,7 @@ public String toString() {\n           .setDescription(\"The directory containing files used to configure Alluxio.\")\n           .setIgnoredSiteProperty(true)\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n+          .setScope(Scope.ALL)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4NDIxOA=="}, "originalCommit": {"oid": "0b286248fbe44b5d598723c09fcf1fe297c91f09"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0MTk4Nw==", "bodyText": "Can we just enforce that all property keys define a scope? I think it would be more explicit and leave less guessing", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378541987", "createdAt": "2020-02-12T22:09:40Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -292,6 +292,7 @@ public String toString() {\n           .setDescription(\"The directory containing files used to configure Alluxio.\")\n           .setIgnoredSiteProperty(true)\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n+          .setScope(Scope.ALL)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4NDIxOA=="}, "originalCommit": {"oid": "0b286248fbe44b5d598723c09fcf1fe297c91f09"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU3ODE1MA==", "bodyText": "I prefer not to because there are maybe some property keys generated from templates.", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378578150", "createdAt": "2020-02-12T23:47:48Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -292,6 +292,7 @@ public String toString() {\n           .setDescription(\"The directory containing files used to configure Alluxio.\")\n           .setIgnoredSiteProperty(true)\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n+          .setScope(Scope.ALL)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4NDIxOA=="}, "originalCommit": {"oid": "0b286248fbe44b5d598723c09fcf1fe297c91f09"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTI5MzcyOnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODowMTo1OVrOFn_03Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODozMTo1M1rOFoUP3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4NDUwOQ==", "bodyText": "Scope.SERVER?", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r377484509", "createdAt": "2020-02-11T08:01:59Z", "author": {"login": "apc999"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -485,54 +497,62 @@ public String toString() {\n               + \"the journal, logs, and under file storage data (if using local filesystem) \"\n               + \"are written here.\")\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n+          .setScope(Scope.ALL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b286248fbe44b5d598723c09fcf1fe297c91f09"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxOTEwMw==", "bodyText": "Done, thanks", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r377819103", "createdAt": "2020-02-11T18:31:53Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -485,54 +497,62 @@ public String toString() {\n               + \"the journal, logs, and under file storage data (if using local filesystem) \"\n               + \"are written here.\")\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n+          .setScope(Scope.ALL)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4NDUwOQ=="}, "originalCommit": {"oid": "0b286248fbe44b5d598723c09fcf1fe297c91f09"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTMxOTcyOnYy", "diffSide": "RIGHT", "path": "core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODoxNDo1MlrOFoAEYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODoyNjo1OFrOFoUFVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4ODQ4Mw==", "bodyText": "@calvinjia do we now also have client on worker (or job worker)? Do we need to respect cluster-default client-side setting on worker / job worker too?", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r377488483", "createdAt": "2020-02-11T08:14:52Z", "author": {"login": "apc999"}, "path": "core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java", "diffHunk": "@@ -345,13 +346,13 @@ public static InstancedConfiguration global() {\n    *\n    * @param address the master address\n    */\n-  public static synchronized void loadClusterDefaultsIfNotLoaded(InetSocketAddress address)\n+  public static synchronized void loadClusterDefaultsIfNotLoadedForWorker(InetSocketAddress address)\n       throws AlluxioStatusException {\n     if (sConf.getBoolean(PropertyKey.USER_CONF_CLUSTER_DEFAULT_ENABLED)\n         && !sConf.clusterDefaultsLoaded()) {\n       GetConfigurationPResponse response = ConfigurationUtils.loadConfiguration(address, sConf,\n           false, true);\n-      AlluxioConfiguration conf = ConfigurationUtils.getClusterConf(response, sConf);\n+      AlluxioConfiguration conf = ConfigurationUtils.getClusterConf(response, sConf, Scope.WORKER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b286248fbe44b5d598723c09fcf1fe297c91f09"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxNjQwNQ==", "bodyText": "In my testing, there is one long-running client in leading master (not sure about the followers) and one long-running client on each worker. Those clients may be used for loading configuration from the leading master.", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r377816405", "createdAt": "2020-02-11T18:26:58Z", "author": {"login": "LuQQiu"}, "path": "core/server/common/src/main/java/alluxio/conf/ServerConfiguration.java", "diffHunk": "@@ -345,13 +346,13 @@ public static InstancedConfiguration global() {\n    *\n    * @param address the master address\n    */\n-  public static synchronized void loadClusterDefaultsIfNotLoaded(InetSocketAddress address)\n+  public static synchronized void loadClusterDefaultsIfNotLoadedForWorker(InetSocketAddress address)\n       throws AlluxioStatusException {\n     if (sConf.getBoolean(PropertyKey.USER_CONF_CLUSTER_DEFAULT_ENABLED)\n         && !sConf.clusterDefaultsLoaded()) {\n       GetConfigurationPResponse response = ConfigurationUtils.loadConfiguration(address, sConf,\n           false, true);\n-      AlluxioConfiguration conf = ConfigurationUtils.getClusterConf(response, sConf);\n+      AlluxioConfiguration conf = ConfigurationUtils.getClusterConf(response, sConf, Scope.WORKER);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4ODQ4Mw=="}, "originalCommit": {"oid": "0b286248fbe44b5d598723c09fcf1fe297c91f09"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTk5ODEzOnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjoxMDo1M1rOFpAZuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzo0ODo0NFrOFpCl_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0MjUyMQ==", "bodyText": "Does this really apply to ALL? For clients, this defines a path to a metrics properties file which might not necessarily exist if the client is remote to Alluxio.", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378542521", "createdAt": "2020-02-12T22:10:53Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -350,7 +356,7 @@ public String toString() {\n           .setDescription(\"The file path of the metrics system configuration file. By default \"\n               + \"it is `metrics.properties` in the `conf` directory.\")\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n-          .setScope(Scope.SERVER)\n+          .setScope(Scope.ALL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f16b38a4d8ca2e28eeeb3966930651abf8a1e70"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU3ODQzMQ==", "bodyText": "Client will also check this file and start sink metrics if the file exists.", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378578431", "createdAt": "2020-02-12T23:48:44Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -350,7 +356,7 @@ public String toString() {\n           .setDescription(\"The file path of the metrics system configuration file. By default \"\n               + \"it is `metrics.properties` in the `conf` directory.\")\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n-          .setScope(Scope.SERVER)\n+          .setScope(Scope.ALL)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0MjUyMQ=="}, "originalCommit": {"oid": "2f16b38a4d8ca2e28eeeb3966930651abf8a1e70"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjAyOTI1OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjoyMjo0MlrOFpAteA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMTozMzoyMVrOFpEY6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0NzU3Ng==", "bodyText": "could this be Scope.NONE?", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378547576", "createdAt": "2020-02-12T22:22:42Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -441,6 +450,7 @@ public String toString() {\n           .setDescription(\"Version of Alluxio. User should never modify this property.\")\n           .setIgnoredSiteProperty(true)\n           .setIsHidden(true)\n+          .setScope(Scope.ALL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f16b38a4d8ca2e28eeeb3966930651abf8a1e70"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU3ODc4NQ==", "bodyText": "The same as I talked before, not sure the gap between Scope.NONE and ALL.\nIn my criteria, this properties used in everywhere, so it falls into the category of ALL", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378578785", "createdAt": "2020-02-12T23:49:53Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -441,6 +450,7 @@ public String toString() {\n           .setDescription(\"Version of Alluxio. User should never modify this property.\")\n           .setIgnoredSiteProperty(true)\n           .setIsHidden(true)\n+          .setScope(Scope.ALL)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0NzU3Ng=="}, "originalCommit": {"oid": "2f16b38a4d8ca2e28eeeb3966930651abf8a1e70"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4ODI4Mg==", "bodyText": "My worry is that in the case of client/server version mismatch, that the client would get this value from cluster defaults and subsequently report that it is the same version as the server - which may not be the case.", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378588282", "createdAt": "2020-02-13T00:23:40Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -441,6 +450,7 @@ public String toString() {\n           .setDescription(\"Version of Alluxio. User should never modify this property.\")\n           .setIgnoredSiteProperty(true)\n           .setIsHidden(true)\n+          .setScope(Scope.ALL)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0NzU3Ng=="}, "originalCommit": {"oid": "2f16b38a4d8ca2e28eeeb3966930651abf8a1e70"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU5NDU4Nw==", "bodyText": "Oh, that's possible, then this property should not be propagated to client or worker. Will change it to None", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378594587", "createdAt": "2020-02-13T00:45:04Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -441,6 +450,7 @@ public String toString() {\n           .setDescription(\"Version of Alluxio. User should never modify this property.\")\n           .setIgnoredSiteProperty(true)\n           .setIsHidden(true)\n+          .setScope(Scope.ALL)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0NzU3Ng=="}, "originalCommit": {"oid": "2f16b38a4d8ca2e28eeeb3966930651abf8a1e70"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYwNjMxNA==", "bodyText": "The test failed because of they check VERSION on the client side, if it's different from the current one, this property will be removed and not merged into client/worker configuration.\nI changed the Scope back to ALL", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378606314", "createdAt": "2020-02-13T01:27:41Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -441,6 +450,7 @@ public String toString() {\n           .setDescription(\"Version of Alluxio. User should never modify this property.\")\n           .setIgnoredSiteProperty(true)\n           .setIsHidden(true)\n+          .setScope(Scope.ALL)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0NzU3Ng=="}, "originalCommit": {"oid": "2f16b38a4d8ca2e28eeeb3966930651abf8a1e70"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYwNzg1MQ==", "bodyText": "oh :(", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378607851", "createdAt": "2020-02-13T01:33:21Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -441,6 +450,7 @@ public String toString() {\n           .setDescription(\"Version of Alluxio. User should never modify this property.\")\n           .setIgnoredSiteProperty(true)\n           .setIsHidden(true)\n+          .setScope(Scope.ALL)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0NzU3Ng=="}, "originalCommit": {"oid": "2f16b38a4d8ca2e28eeeb3966930651abf8a1e70"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjAzMDkxOnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjoyMzoxOVrOFpAucA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMDoyNDoyNFrOFpDNYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0NzgyNA==", "bodyText": "Should this be Scope.NONE", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378547824", "createdAt": "2020-02-12T22:23:19Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -417,13 +424,15 @@ public String toString() {\n               String.format(\"Comma-separated search path for %s.\", Constants.SITE_PROPERTIES))\n           .setIgnoredSiteProperty(true)\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n+          .setScope(Scope.ALL)\n           .build();\n   public static final PropertyKey TEST_MODE =\n       new Builder(Name.TEST_MODE)\n           .setDefaultValue(false)\n           .setDescription(\"Flag used only during tests to allow special behavior.\")\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n           .setIsHidden(true)\n+          .setScope(Scope.ALL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f16b38a4d8ca2e28eeeb3966930651abf8a1e70"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2Njk4Mw==", "bodyText": "One problem now is that there is no fix criteria for which scope a property falls in. My criteria is that if the PropertyKey is used in master or worker only, then they are Scope.MASTER or Scope.WORKER. If a property is used by both master and worker, or job master and job worker, then it falls to Scope.Server. If it's used by both server and client, it falls to ALL. For some property key that ony used by certain integration like MESOS, it falls to Scope.NONE. TEST_MODE is used in server and common codes.", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378566983", "createdAt": "2020-02-12T23:12:33Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -417,13 +424,15 @@ public String toString() {\n               String.format(\"Comma-separated search path for %s.\", Constants.SITE_PROPERTIES))\n           .setIgnoredSiteProperty(true)\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n+          .setScope(Scope.ALL)\n           .build();\n   public static final PropertyKey TEST_MODE =\n       new Builder(Name.TEST_MODE)\n           .setDefaultValue(false)\n           .setDescription(\"Flag used only during tests to allow special behavior.\")\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n           .setIsHidden(true)\n+          .setScope(Scope.ALL)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0NzgyNA=="}, "originalCommit": {"oid": "2f16b38a4d8ca2e28eeeb3966930651abf8a1e70"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4ODUxMw==", "bodyText": "I see. It sounds like we need to have more defined criteria for Scope.NONE. I am fine making this ALL for now.", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378588513", "createdAt": "2020-02-13T00:24:24Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -417,13 +424,15 @@ public String toString() {\n               String.format(\"Comma-separated search path for %s.\", Constants.SITE_PROPERTIES))\n           .setIgnoredSiteProperty(true)\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n+          .setScope(Scope.ALL)\n           .build();\n   public static final PropertyKey TEST_MODE =\n       new Builder(Name.TEST_MODE)\n           .setDefaultValue(false)\n           .setDescription(\"Flag used only during tests to allow special behavior.\")\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n           .setIsHidden(true)\n+          .setScope(Scope.ALL)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0NzgyNA=="}, "originalCommit": {"oid": "2f16b38a4d8ca2e28eeeb3966930651abf8a1e70"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjA1Mzc2OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjozMjoxMVrOFpA9EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzoxNDo1NlrOFpB8bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1MTU2OQ==", "bodyText": "why is this Scope.ALL?", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378551569", "createdAt": "2020-02-12T22:32:11Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -2443,7 +2469,7 @@ public String toString() {\n           .setDefaultValue(29999)\n           .setDescription(\"The port for Alluxio worker's RPC service.\")\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n-          .setScope(Scope.WORKER)\n+          .setScope(Scope.ALL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f16b38a4d8ca2e28eeeb3966930651abf8a1e70"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2Nzc5MA==", "bodyText": "Because this property key is used by Core-common/InstanceConfiguration.validate()", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378567790", "createdAt": "2020-02-12T23:14:56Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -2443,7 +2469,7 @@ public String toString() {\n           .setDefaultValue(29999)\n           .setDescription(\"The port for Alluxio worker's RPC service.\")\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.WARN)\n-          .setScope(Scope.WORKER)\n+          .setScope(Scope.ALL)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1MTU2OQ=="}, "originalCommit": {"oid": "2f16b38a4d8ca2e28eeeb3966930651abf8a1e70"}, "originalPosition": 221}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjA1NjM2OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjozMzowNlrOFpA-jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzoxNzoxNVrOFpB_iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1MTk0OQ==", "bodyText": "why is this Scope.NONE? Shouldn't this be Scope.SERVER?", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378551949", "createdAt": "2020-02-12T22:33:06Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -2724,6 +2750,7 @@ public String toString() {\n           .setDefaultValue(Constants.S3_MULTIPART_TEMPORARY_DIR_SUFFIX)\n           .setDescription(\"Suffix for the directory which holds parts during a multipart upload.\")\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.ENFORCE)\n+          .setScope(Scope.NONE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f16b38a4d8ca2e28eeeb3966930651abf8a1e70"}, "originalPosition": 229}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2ODU4NA==", "bodyText": "Previously all the Proxy properties are given Scope.NONE,  I actually not quite sure what scope should be given to Proxy properties. Scope.NONE and Scope.SERVER both make sense", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378568584", "createdAt": "2020-02-12T23:17:15Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -2724,6 +2750,7 @@ public String toString() {\n           .setDefaultValue(Constants.S3_MULTIPART_TEMPORARY_DIR_SUFFIX)\n           .setDescription(\"Suffix for the directory which holds parts during a multipart upload.\")\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.ENFORCE)\n+          .setScope(Scope.NONE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1MTk0OQ=="}, "originalCommit": {"oid": "2f16b38a4d8ca2e28eeeb3966930651abf8a1e70"}, "originalPosition": 229}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjA3MjM3OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjozOTozMlrOFpBIlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzo1MTo0M1rOFpCpmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1NDUxOA==", "bodyText": "shouldn't this be Scope.WORKER?", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378554518", "createdAt": "2020-02-12T22:39:32Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -3690,76 +3732,90 @@ public String toString() {\n               + \"setting the capacity of the job master to a large ( > 10M) value. Default is -1 \"\n               + \"denoting an unlimited value\")\n           .setDefaultValue(\"-1\")\n+          .setScope(Scope.MASTER)\n           .build();\n   public static final PropertyKey JOB_MASTER_FINISHED_JOB_RETENTION_TIME =\n       new Builder(Name.JOB_MASTER_FINISHED_JOB_RETENTION_TIME)\n           .setDescription(\"The length of time the Alluxio Job Master should save information about \"\n               + \"completed jobs before they are discarded.\")\n           .setDefaultValue(\"300sec\")\n+          .setScope(Scope.MASTER)\n           .build();\n   public static final PropertyKey JOB_MASTER_JOB_CAPACITY =\n       new Builder(Name.JOB_MASTER_JOB_CAPACITY)\n           .setDescription(\"The total possible number of available job statuses in the job master. \"\n               + \"This value includes running and finished jobs which are have completed within \"\n               + Name.JOB_MASTER_FINISHED_JOB_RETENTION_TIME + \".\")\n           .setDefaultValue(100000)\n+          .setScope(Scope.MASTER)\n           .build();\n   public static final PropertyKey JOB_MASTER_WORKER_HEARTBEAT_INTERVAL =\n       new Builder(Name.JOB_MASTER_WORKER_HEARTBEAT_INTERVAL)\n           .setDescription(\"The amount of time that the Alluxio job worker should wait in between \"\n               + \"heartbeats to the Job Master.\")\n           .setDefaultValue(\"1sec\")\n+          .setScope(Scope.MASTER)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f16b38a4d8ca2e28eeeb3966930651abf8a1e70"}, "originalPosition": 436}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU2ODc5Ng==", "bodyText": "Yeah, you are right", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378568796", "createdAt": "2020-02-12T23:17:49Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -3690,76 +3732,90 @@ public String toString() {\n               + \"setting the capacity of the job master to a large ( > 10M) value. Default is -1 \"\n               + \"denoting an unlimited value\")\n           .setDefaultValue(\"-1\")\n+          .setScope(Scope.MASTER)\n           .build();\n   public static final PropertyKey JOB_MASTER_FINISHED_JOB_RETENTION_TIME =\n       new Builder(Name.JOB_MASTER_FINISHED_JOB_RETENTION_TIME)\n           .setDescription(\"The length of time the Alluxio Job Master should save information about \"\n               + \"completed jobs before they are discarded.\")\n           .setDefaultValue(\"300sec\")\n+          .setScope(Scope.MASTER)\n           .build();\n   public static final PropertyKey JOB_MASTER_JOB_CAPACITY =\n       new Builder(Name.JOB_MASTER_JOB_CAPACITY)\n           .setDescription(\"The total possible number of available job statuses in the job master. \"\n               + \"This value includes running and finished jobs which are have completed within \"\n               + Name.JOB_MASTER_FINISHED_JOB_RETENTION_TIME + \".\")\n           .setDefaultValue(100000)\n+          .setScope(Scope.MASTER)\n           .build();\n   public static final PropertyKey JOB_MASTER_WORKER_HEARTBEAT_INTERVAL =\n       new Builder(Name.JOB_MASTER_WORKER_HEARTBEAT_INTERVAL)\n           .setDescription(\"The amount of time that the Alluxio job worker should wait in between \"\n               + \"heartbeats to the Job Master.\")\n           .setDefaultValue(\"1sec\")\n+          .setScope(Scope.MASTER)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1NDUxOA=="}, "originalCommit": {"oid": "2f16b38a4d8ca2e28eeeb3966930651abf8a1e70"}, "originalPosition": 436}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU3OTM1NA==", "bodyText": "Changed, thanks", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378579354", "createdAt": "2020-02-12T23:51:43Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -3690,76 +3732,90 @@ public String toString() {\n               + \"setting the capacity of the job master to a large ( > 10M) value. Default is -1 \"\n               + \"denoting an unlimited value\")\n           .setDefaultValue(\"-1\")\n+          .setScope(Scope.MASTER)\n           .build();\n   public static final PropertyKey JOB_MASTER_FINISHED_JOB_RETENTION_TIME =\n       new Builder(Name.JOB_MASTER_FINISHED_JOB_RETENTION_TIME)\n           .setDescription(\"The length of time the Alluxio Job Master should save information about \"\n               + \"completed jobs before they are discarded.\")\n           .setDefaultValue(\"300sec\")\n+          .setScope(Scope.MASTER)\n           .build();\n   public static final PropertyKey JOB_MASTER_JOB_CAPACITY =\n       new Builder(Name.JOB_MASTER_JOB_CAPACITY)\n           .setDescription(\"The total possible number of available job statuses in the job master. \"\n               + \"This value includes running and finished jobs which are have completed within \"\n               + Name.JOB_MASTER_FINISHED_JOB_RETENTION_TIME + \".\")\n           .setDefaultValue(100000)\n+          .setScope(Scope.MASTER)\n           .build();\n   public static final PropertyKey JOB_MASTER_WORKER_HEARTBEAT_INTERVAL =\n       new Builder(Name.JOB_MASTER_WORKER_HEARTBEAT_INTERVAL)\n           .setDescription(\"The amount of time that the Alluxio job worker should wait in between \"\n               + \"heartbeats to the Job Master.\")\n           .setDefaultValue(\"1sec\")\n+          .setScope(Scope.MASTER)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1NDUxOA=="}, "originalCommit": {"oid": "2f16b38a4d8ca2e28eeeb3966930651abf8a1e70"}, "originalPosition": 436}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjA3ODQzOnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjo0MTo1OFrOFpBMTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzo1MTozNlrOFpCpaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1NTQ2OA==", "bodyText": "shouldn't this be Scope.ALL? Clients need that information to connect to the job master? Mainly for CLI use cases", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378555468", "createdAt": "2020-02-12T22:41:58Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -3804,20 +3865,23 @@ public String toString() {\n                   + \"%s using the port defined in %s\",\n               Name.MASTER_RPC_ADDRESSES, Name.JOB_MASTER_RPC_PORT,\n               Name.JOB_MASTER_EMBEDDED_JOURNAL_ADDRESSES, Name.JOB_MASTER_RPC_PORT))\n-          .setScope(Scope.CLIENT)\n+          .setScope(Scope.MASTER)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f16b38a4d8ca2e28eeeb3966930651abf8a1e70"}, "originalPosition": 545}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU3OTMwNQ==", "bodyText": "Changed, thanks", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378579305", "createdAt": "2020-02-12T23:51:36Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -3804,20 +3865,23 @@ public String toString() {\n                   + \"%s using the port defined in %s\",\n               Name.MASTER_RPC_ADDRESSES, Name.JOB_MASTER_RPC_PORT,\n               Name.JOB_MASTER_EMBEDDED_JOURNAL_ADDRESSES, Name.JOB_MASTER_RPC_PORT))\n-          .setScope(Scope.CLIENT)\n+          .setScope(Scope.MASTER)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1NTQ2OA=="}, "originalCommit": {"oid": "2f16b38a4d8ca2e28eeeb3966930651abf8a1e70"}, "originalPosition": 545}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjA3OTMyOnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjo0MjoxN1rOFpBMzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzo1MToyN1rOFpCpNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1NTU5OQ==", "bodyText": "shouldn't this be Scope.ALL? Clients need that information to connect to the job master? Mainly for CLI use cases", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378555599", "createdAt": "2020-02-12T22:42:17Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -3804,20 +3865,23 @@ public String toString() {\n                   + \"%s using the port defined in %s\",\n               Name.MASTER_RPC_ADDRESSES, Name.JOB_MASTER_RPC_PORT,\n               Name.JOB_MASTER_EMBEDDED_JOURNAL_ADDRESSES, Name.JOB_MASTER_RPC_PORT))\n-          .setScope(Scope.CLIENT)\n+          .setScope(Scope.MASTER)\n           .build();\n   public static final PropertyKey JOB_MASTER_EMBEDDED_JOURNAL_ADDRESSES =\n       new Builder(Name.JOB_MASTER_EMBEDDED_JOURNAL_ADDRESSES)\n           .setDescription(String.format(\"A comma-separated list of journal addresses for all job \"\n               + \"masters in the cluster. The format is 'hostname1:port1,hostname2:port2,...'. \"\n               + \"Defaults to the journal addresses set for the Alluxio masters (%s), but with the \"\n               + \"job master embedded journal port.\", Name.MASTER_EMBEDDED_JOURNAL_ADDRESSES))\n+          .setScope(Scope.MASTER)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f16b38a4d8ca2e28eeeb3966930651abf8a1e70"}, "originalPosition": 553}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU3OTI1NA==", "bodyText": "Changed to Scope.ALL, thanks", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378579254", "createdAt": "2020-02-12T23:51:27Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -3804,20 +3865,23 @@ public String toString() {\n                   + \"%s using the port defined in %s\",\n               Name.MASTER_RPC_ADDRESSES, Name.JOB_MASTER_RPC_PORT,\n               Name.JOB_MASTER_EMBEDDED_JOURNAL_ADDRESSES, Name.JOB_MASTER_RPC_PORT))\n-          .setScope(Scope.CLIENT)\n+          .setScope(Scope.MASTER)\n           .build();\n   public static final PropertyKey JOB_MASTER_EMBEDDED_JOURNAL_ADDRESSES =\n       new Builder(Name.JOB_MASTER_EMBEDDED_JOURNAL_ADDRESSES)\n           .setDescription(String.format(\"A comma-separated list of journal addresses for all job \"\n               + \"masters in the cluster. The format is 'hostname1:port1,hostname2:port2,...'. \"\n               + \"Defaults to the journal addresses set for the Alluxio masters (%s), but with the \"\n               + \"job master embedded journal port.\", Name.MASTER_EMBEDDED_JOURNAL_ADDRESSES))\n+          .setScope(Scope.MASTER)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1NTU5OQ=="}, "originalCommit": {"oid": "2f16b38a4d8ca2e28eeeb3966930651abf8a1e70"}, "originalPosition": 553}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjA4MzkzOnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/util/ConfigurationUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjo0NDoxM1rOFpBPug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzo1MToxMVrOFpCoxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1NjM0Ng==", "bodyText": "nit\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Filters and loads properties contains certain scope from the property list returned by grpc.\n          \n          \n            \n               * Filters and loads properties with a certain scope from the property list returned by grpc.", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378556346", "createdAt": "2020-02-12T22:44:13Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/util/ConfigurationUtils.java", "diffHunk": "@@ -504,22 +504,23 @@ public static GetConfigurationPResponse loadConfiguration(InetSocketAddress addr\n   }\n \n   /**\n-   * Loads client scope properties from the property list returned by grpc.\n+   * Filters and loads properties contains certain scope from the property list returned by grpc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f16b38a4d8ca2e28eeeb3966930651abf8a1e70"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU3OTE0Mg==", "bodyText": "Changed", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378579142", "createdAt": "2020-02-12T23:51:11Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/util/ConfigurationUtils.java", "diffHunk": "@@ -504,22 +504,23 @@ public static GetConfigurationPResponse loadConfiguration(InetSocketAddress addr\n   }\n \n   /**\n-   * Loads client scope properties from the property list returned by grpc.\n+   * Filters and loads properties contains certain scope from the property list returned by grpc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1NjM0Ng=="}, "originalCommit": {"oid": "2f16b38a4d8ca2e28eeeb3966930651abf8a1e70"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjA4Njg1OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/util/ConfigurationUtils.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjo0NToyOFrOFpBRjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMDo0NToyOVrOFpDlgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1NjgxMw==", "bodyText": "If a property has scope ALL we want that included along with properties from the CLIENT scope, correct?", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378556813", "createdAt": "2020-02-12T22:45:28Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/util/ConfigurationUtils.java", "diffHunk": "@@ -504,22 +504,23 @@ public static GetConfigurationPResponse loadConfiguration(InetSocketAddress addr\n   }\n \n   /**\n-   * Loads client scope properties from the property list returned by grpc.\n+   * Filters and loads properties contains certain scope from the property list returned by grpc.\n    *\n    * @param properties the property list returned by grpc\n+   * @param scope the scope to filter the received property list\n    * @param logMessage a function with key and value as parameter and returns debug log message\n    * @return the loaded properties\n    */\n-  private static Properties loadClientProperties(List<ConfigProperty> properties,\n-      BiFunction<PropertyKey, String, String> logMessage) {\n+  private static Properties filterAndLoadProperties(List<ConfigProperty> properties,\n+      Scope scope, BiFunction<PropertyKey, String, String> logMessage) {\n     Properties props = new Properties();\n     for (ConfigProperty property : properties) {\n       String name = property.getName();\n       // TODO(binfan): support propagating unsetting properties from master\n       if (PropertyKey.isValid(name) && property.hasValue()) {\n         PropertyKey key = PropertyKey.fromString(name);\n-        if (!GrpcUtils.contains(key.getScope(), Scope.CLIENT)) {\n-          // Only propagate client properties.\n+        if (!GrpcUtils.contains(key.getScope(), scope)) {\n+          // Only propagate properties contains the target scope", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f16b38a4d8ca2e28eeeb3966930651abf8a1e70"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU3NzUyMQ==", "bodyText": "I add a description to only allow Scope=WORKER/CLIENT.\nNot sure about the SCOPE=ALL result", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378577521", "createdAt": "2020-02-12T23:45:48Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/util/ConfigurationUtils.java", "diffHunk": "@@ -504,22 +504,23 @@ public static GetConfigurationPResponse loadConfiguration(InetSocketAddress addr\n   }\n \n   /**\n-   * Loads client scope properties from the property list returned by grpc.\n+   * Filters and loads properties contains certain scope from the property list returned by grpc.\n    *\n    * @param properties the property list returned by grpc\n+   * @param scope the scope to filter the received property list\n    * @param logMessage a function with key and value as parameter and returns debug log message\n    * @return the loaded properties\n    */\n-  private static Properties loadClientProperties(List<ConfigProperty> properties,\n-      BiFunction<PropertyKey, String, String> logMessage) {\n+  private static Properties filterAndLoadProperties(List<ConfigProperty> properties,\n+      Scope scope, BiFunction<PropertyKey, String, String> logMessage) {\n     Properties props = new Properties();\n     for (ConfigProperty property : properties) {\n       String name = property.getName();\n       // TODO(binfan): support propagating unsetting properties from master\n       if (PropertyKey.isValid(name) && property.hasValue()) {\n         PropertyKey key = PropertyKey.fromString(name);\n-        if (!GrpcUtils.contains(key.getScope(), Scope.CLIENT)) {\n-          // Only propagate client properties.\n+        if (!GrpcUtils.contains(key.getScope(), scope)) {\n+          // Only propagate properties contains the target scope", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1NjgxMw=="}, "originalCommit": {"oid": "2f16b38a4d8ca2e28eeeb3966930651abf8a1e70"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4ODk5NQ==", "bodyText": "My understanding is that for properties marked with Scope.CLIENT and Scope.ALL should be propagated to the client when loading the cluster default values  - if only one is defined in the function, then we could be missing properties?", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378588995", "createdAt": "2020-02-13T00:26:12Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/util/ConfigurationUtils.java", "diffHunk": "@@ -504,22 +504,23 @@ public static GetConfigurationPResponse loadConfiguration(InetSocketAddress addr\n   }\n \n   /**\n-   * Loads client scope properties from the property list returned by grpc.\n+   * Filters and loads properties contains certain scope from the property list returned by grpc.\n    *\n    * @param properties the property list returned by grpc\n+   * @param scope the scope to filter the received property list\n    * @param logMessage a function with key and value as parameter and returns debug log message\n    * @return the loaded properties\n    */\n-  private static Properties loadClientProperties(List<ConfigProperty> properties,\n-      BiFunction<PropertyKey, String, String> logMessage) {\n+  private static Properties filterAndLoadProperties(List<ConfigProperty> properties,\n+      Scope scope, BiFunction<PropertyKey, String, String> logMessage) {\n     Properties props = new Properties();\n     for (ConfigProperty property : properties) {\n       String name = property.getName();\n       // TODO(binfan): support propagating unsetting properties from master\n       if (PropertyKey.isValid(name) && property.hasValue()) {\n         PropertyKey key = PropertyKey.fromString(name);\n-        if (!GrpcUtils.contains(key.getScope(), Scope.CLIENT)) {\n-          // Only propagate client properties.\n+        if (!GrpcUtils.contains(key.getScope(), scope)) {\n+          // Only propagate properties contains the target scope", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1NjgxMw=="}, "originalCommit": {"oid": "2f16b38a4d8ca2e28eeeb3966930651abf8a1e70"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4OTU3MQ==", "bodyText": "I guess I also don't fully understand what GrpcUtils.contains actually does", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378589571", "createdAt": "2020-02-13T00:28:14Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/util/ConfigurationUtils.java", "diffHunk": "@@ -504,22 +504,23 @@ public static GetConfigurationPResponse loadConfiguration(InetSocketAddress addr\n   }\n \n   /**\n-   * Loads client scope properties from the property list returned by grpc.\n+   * Filters and loads properties contains certain scope from the property list returned by grpc.\n    *\n    * @param properties the property list returned by grpc\n+   * @param scope the scope to filter the received property list\n    * @param logMessage a function with key and value as parameter and returns debug log message\n    * @return the loaded properties\n    */\n-  private static Properties loadClientProperties(List<ConfigProperty> properties,\n-      BiFunction<PropertyKey, String, String> logMessage) {\n+  private static Properties filterAndLoadProperties(List<ConfigProperty> properties,\n+      Scope scope, BiFunction<PropertyKey, String, String> logMessage) {\n     Properties props = new Properties();\n     for (ConfigProperty property : properties) {\n       String name = property.getName();\n       // TODO(binfan): support propagating unsetting properties from master\n       if (PropertyKey.isValid(name) && property.hasValue()) {\n         PropertyKey key = PropertyKey.fromString(name);\n-        if (!GrpcUtils.contains(key.getScope(), Scope.CLIENT)) {\n-          // Only propagate client properties.\n+        if (!GrpcUtils.contains(key.getScope(), scope)) {\n+          // Only propagate properties contains the target scope", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1NjgxMw=="}, "originalCommit": {"oid": "2f16b38a4d8ca2e28eeeb3966930651abf8a1e70"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU5MzgxMA==", "bodyText": "I tested this function, if given scope == CLIENT,\nScope == CLIENT & ALL will be propagated to client\nif given scope == WORKER, Scope == WORKER/SERVER/ALL will be propagated to worker.", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378593810", "createdAt": "2020-02-13T00:42:56Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/util/ConfigurationUtils.java", "diffHunk": "@@ -504,22 +504,23 @@ public static GetConfigurationPResponse loadConfiguration(InetSocketAddress addr\n   }\n \n   /**\n-   * Loads client scope properties from the property list returned by grpc.\n+   * Filters and loads properties contains certain scope from the property list returned by grpc.\n    *\n    * @param properties the property list returned by grpc\n+   * @param scope the scope to filter the received property list\n    * @param logMessage a function with key and value as parameter and returns debug log message\n    * @return the loaded properties\n    */\n-  private static Properties loadClientProperties(List<ConfigProperty> properties,\n-      BiFunction<PropertyKey, String, String> logMessage) {\n+  private static Properties filterAndLoadProperties(List<ConfigProperty> properties,\n+      Scope scope, BiFunction<PropertyKey, String, String> logMessage) {\n     Properties props = new Properties();\n     for (ConfigProperty property : properties) {\n       String name = property.getName();\n       // TODO(binfan): support propagating unsetting properties from master\n       if (PropertyKey.isValid(name) && property.hasValue()) {\n         PropertyKey key = PropertyKey.fromString(name);\n-        if (!GrpcUtils.contains(key.getScope(), Scope.CLIENT)) {\n-          // Only propagate client properties.\n+        if (!GrpcUtils.contains(key.getScope(), scope)) {\n+          // Only propagate properties contains the target scope", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1NjgxMw=="}, "originalCommit": {"oid": "2f16b38a4d8ca2e28eeeb3966930651abf8a1e70"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU5NDY4OA==", "bodyText": "got it. thanks!", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378594688", "createdAt": "2020-02-13T00:45:29Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/util/ConfigurationUtils.java", "diffHunk": "@@ -504,22 +504,23 @@ public static GetConfigurationPResponse loadConfiguration(InetSocketAddress addr\n   }\n \n   /**\n-   * Loads client scope properties from the property list returned by grpc.\n+   * Filters and loads properties contains certain scope from the property list returned by grpc.\n    *\n    * @param properties the property list returned by grpc\n+   * @param scope the scope to filter the received property list\n    * @param logMessage a function with key and value as parameter and returns debug log message\n    * @return the loaded properties\n    */\n-  private static Properties loadClientProperties(List<ConfigProperty> properties,\n-      BiFunction<PropertyKey, String, String> logMessage) {\n+  private static Properties filterAndLoadProperties(List<ConfigProperty> properties,\n+      Scope scope, BiFunction<PropertyKey, String, String> logMessage) {\n     Properties props = new Properties();\n     for (ConfigProperty property : properties) {\n       String name = property.getName();\n       // TODO(binfan): support propagating unsetting properties from master\n       if (PropertyKey.isValid(name) && property.hasValue()) {\n         PropertyKey key = PropertyKey.fromString(name);\n-        if (!GrpcUtils.contains(key.getScope(), Scope.CLIENT)) {\n-          // Only propagate client properties.\n+        if (!GrpcUtils.contains(key.getScope(), scope)) {\n+          // Only propagate properties contains the target scope", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU1NjgxMw=="}, "originalCommit": {"oid": "2f16b38a4d8ca2e28eeeb3966930651abf8a1e70"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjI5NjEyOnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/util/ConfigurationUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMDoyODozOVrOFpDSCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMDo0Nzo1MVrOFpDpEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4OTcwNg==", "bodyText": "nit: is there a reason to line break on the commas?", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378589706", "createdAt": "2020-02-13T00:28:39Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/util/ConfigurationUtils.java", "diffHunk": "@@ -531,26 +533,28 @@ private static Properties loadClientProperties(List<ConfigProperty> properties,\n   }\n \n   /**\n-   * Loads the cluster level configuration from the get configuration response, and merges it with\n-   * the existing configuration.\n+   * Loads the cluster level configuration from the get configuration response,\n+   * filters out the configuration for certain scope,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2924a5a094f1feb5250836da7937cc308b7605e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU5NTYwMw==", "bodyText": "Changed to no break, thanks", "url": "https://github.com/Alluxio/alluxio/pull/10871#discussion_r378595603", "createdAt": "2020-02-13T00:47:51Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/util/ConfigurationUtils.java", "diffHunk": "@@ -531,26 +533,28 @@ private static Properties loadClientProperties(List<ConfigProperty> properties,\n   }\n \n   /**\n-   * Loads the cluster level configuration from the get configuration response, and merges it with\n-   * the existing configuration.\n+   * Loads the cluster level configuration from the get configuration response,\n+   * filters out the configuration for certain scope,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4OTcwNg=="}, "originalCommit": {"oid": "c2924a5a094f1feb5250836da7937cc308b7605e"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2183, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}