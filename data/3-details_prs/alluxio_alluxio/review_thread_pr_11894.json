{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNDY0NDI0", "number": 11894, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjo1NzozOVrOEU02vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDoxODowMFrOEVj_7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjcyOTU2OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/util/io/BufferUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjo1NzozOVrOG7PR7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMzo0MTo0M1rOG7P89Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2OTUxOQ==", "bodyText": "I would suggest making this a static constant as this is going to be constant for the life of the JVM.\nAlso, I've seen in the JVM that this can report 1.8 for java 8, and 11 for java 11. I'm not sure if that would make a difference", "url": "https://github.com/Alluxio/alluxio/pull/11894#discussion_r464769519", "createdAt": "2020-08-04T02:57:39Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/util/io/BufferUtils.java", "diffHunk": "@@ -51,6 +53,53 @@ public static int byteToInt(byte b) {\n    * this direct buffer should be discarded. This is unsafe operation and currently a work-around to\n    * avoid huge memory occupation caused by memory map.\n    *\n+   * @param buffer bytebuffer\n+   */\n+  public static synchronized void cleanDirectBuffer(ByteBuffer buffer) {\n+    Preconditions.checkNotNull(buffer, \"buffer is null\");\n+    Preconditions.checkArgument(buffer.isDirect(), \"buffer isn't a DirectByteBuffer\");\n+    int javaVersion = Integer.parseInt(System.getProperty(\"java.version\").split(\"\\\\D+\")[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86fbe73481287d9e14320d1c52901a06ef6f0111"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4MDQ2NA==", "bodyText": "made it a utils method backed by a static constant.", "url": "https://github.com/Alluxio/alluxio/pull/11894#discussion_r464780464", "createdAt": "2020-08-04T03:41:26Z", "author": {"login": "yuzhu"}, "path": "core/common/src/main/java/alluxio/util/io/BufferUtils.java", "diffHunk": "@@ -51,6 +53,53 @@ public static int byteToInt(byte b) {\n    * this direct buffer should be discarded. This is unsafe operation and currently a work-around to\n    * avoid huge memory occupation caused by memory map.\n    *\n+   * @param buffer bytebuffer\n+   */\n+  public static synchronized void cleanDirectBuffer(ByteBuffer buffer) {\n+    Preconditions.checkNotNull(buffer, \"buffer is null\");\n+    Preconditions.checkArgument(buffer.isDirect(), \"buffer isn't a DirectByteBuffer\");\n+    int javaVersion = Integer.parseInt(System.getProperty(\"java.version\").split(\"\\\\D+\")[0]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2OTUxOQ=="}, "originalCommit": {"oid": "86fbe73481287d9e14320d1c52901a06ef6f0111"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4MDUzMw==", "bodyText": "also modifieid it to handle 1.8 or 9-11", "url": "https://github.com/Alluxio/alluxio/pull/11894#discussion_r464780533", "createdAt": "2020-08-04T03:41:43Z", "author": {"login": "yuzhu"}, "path": "core/common/src/main/java/alluxio/util/io/BufferUtils.java", "diffHunk": "@@ -51,6 +53,53 @@ public static int byteToInt(byte b) {\n    * this direct buffer should be discarded. This is unsafe operation and currently a work-around to\n    * avoid huge memory occupation caused by memory map.\n    *\n+   * @param buffer bytebuffer\n+   */\n+  public static synchronized void cleanDirectBuffer(ByteBuffer buffer) {\n+    Preconditions.checkNotNull(buffer, \"buffer is null\");\n+    Preconditions.checkArgument(buffer.isDirect(), \"buffer isn't a DirectByteBuffer\");\n+    int javaVersion = Integer.parseInt(System.getProperty(\"java.version\").split(\"\\\\D+\")[0]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2OTUxOQ=="}, "originalCommit": {"oid": "86fbe73481287d9e14320d1c52901a06ef6f0111"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTU0MzI1OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/util/CommonUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzoxOToxM1rOG7qAkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzoxOToxM1rOG7qAkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwNzQ0Mg==", "bodyText": "Please add a comment on what this will return. I'm assuming 8 for java 1.8, 11 for java 11 ?", "url": "https://github.com/Alluxio/alluxio/pull/11894#discussion_r465207442", "createdAt": "2020-08-04T17:19:13Z", "author": {"login": "gpang"}, "path": "core/common/src/main/java/alluxio/util/CommonUtils.java", "diffHunk": "@@ -852,5 +861,18 @@ public static boolean isAddressReachable(String hostname, int port) {\n     return result;\n   }\n \n+  private static int initMajorVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b4e225d9e2afa0fe5e957202ef69ed1c564eb25"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTU0NDU4OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/util/CommonUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzoxOTozNFrOG7qBXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzozMzowMVrOG7qgHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwNzY0NA==", "bodyText": "Will there always be a dot?", "url": "https://github.com/Alluxio/alluxio/pull/11894#discussion_r465207644", "createdAt": "2020-08-04T17:19:34Z", "author": {"login": "gpang"}, "path": "core/common/src/main/java/alluxio/util/CommonUtils.java", "diffHunk": "@@ -852,5 +861,18 @@ public static boolean isAddressReachable(String hostname, int port) {\n     return result;\n   }\n \n+  private static int initMajorVersion() {\n+    String version = System.getProperty(\"java.version\");\n+    if (version.startsWith(\"1.\")) {\n+      version = version.substring(2, 3);\n+    } else {\n+      int dot = version.indexOf(\".\");\n+      if (dot != -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b4e225d9e2afa0fe5e957202ef69ed1c564eb25"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIxNTUxOQ==", "bodyText": "yes, the version string looks like 1.8.1 or '11.0.2`\nhttps://www.oracle.com/java/technologies/javase/versioning-naming.html", "url": "https://github.com/Alluxio/alluxio/pull/11894#discussion_r465215519", "createdAt": "2020-08-04T17:33:01Z", "author": {"login": "yuzhu"}, "path": "core/common/src/main/java/alluxio/util/CommonUtils.java", "diffHunk": "@@ -852,5 +861,18 @@ public static boolean isAddressReachable(String hostname, int port) {\n     return result;\n   }\n \n+  private static int initMajorVersion() {\n+    String version = System.getProperty(\"java.version\");\n+    if (version.startsWith(\"1.\")) {\n+      version = version.substring(2, 3);\n+    } else {\n+      int dot = version.indexOf(\".\");\n+      if (dot != -1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwNzY0NA=="}, "originalCommit": {"oid": "1b4e225d9e2afa0fe5e957202ef69ed1c564eb25"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTU0NTE1OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/util/CommonUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzoxOTo0MlrOG7qBqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzozMzo1NlrOG7qh-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwNzcyMQ==", "bodyText": "Will this always work?", "url": "https://github.com/Alluxio/alluxio/pull/11894#discussion_r465207721", "createdAt": "2020-08-04T17:19:42Z", "author": {"login": "gpang"}, "path": "core/common/src/main/java/alluxio/util/CommonUtils.java", "diffHunk": "@@ -852,5 +861,18 @@ public static boolean isAddressReachable(String hostname, int port) {\n     return result;\n   }\n \n+  private static int initMajorVersion() {\n+    String version = System.getProperty(\"java.version\");\n+    if (version.startsWith(\"1.\")) {\n+      version = version.substring(2, 3);\n+    } else {\n+      int dot = version.indexOf(\".\");\n+      if (dot != -1) {\n+        version = version.substring(0, dot);\n+      }\n+    }\n+    return Integer.parseInt(version);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b4e225d9e2afa0fe5e957202ef69ed1c564eb25"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIxNTk5NQ==", "bodyText": "I don't see why it wouldn't?", "url": "https://github.com/Alluxio/alluxio/pull/11894#discussion_r465215995", "createdAt": "2020-08-04T17:33:56Z", "author": {"login": "yuzhu"}, "path": "core/common/src/main/java/alluxio/util/CommonUtils.java", "diffHunk": "@@ -852,5 +861,18 @@ public static boolean isAddressReachable(String hostname, int port) {\n     return result;\n   }\n \n+  private static int initMajorVersion() {\n+    String version = System.getProperty(\"java.version\");\n+    if (version.startsWith(\"1.\")) {\n+      version = version.substring(2, 3);\n+    } else {\n+      int dot = version.indexOf(\".\");\n+      if (dot != -1) {\n+        version = version.substring(0, dot);\n+      }\n+    }\n+    return Integer.parseInt(version);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwNzcyMQ=="}, "originalCommit": {"oid": "1b4e225d9e2afa0fe5e957202ef69ed1c564eb25"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTU1Nzk0OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/util/io/BufferUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzoyMzoxNVrOG7qJnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzozNTowOFrOG7qkiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwOTc1Nw==", "bodyText": "What was the reason for making everything synchronized? Is it for initializing the method variable, or is it also for the actual cleaning part?", "url": "https://github.com/Alluxio/alluxio/pull/11894#discussion_r465209757", "createdAt": "2020-08-04T17:23:15Z", "author": {"login": "gpang"}, "path": "core/common/src/main/java/alluxio/util/io/BufferUtils.java", "diffHunk": "@@ -51,6 +55,53 @@ public static int byteToInt(byte b) {\n    * this direct buffer should be discarded. This is unsafe operation and currently a work-around to\n    * avoid huge memory occupation caused by memory map.\n    *\n+   * @param buffer bytebuffer\n+   */\n+  public static synchronized void cleanDirectBuffer(ByteBuffer buffer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b4e225d9e2afa0fe5e957202ef69ed1c564eb25"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIxNjY1MQ==", "bodyText": "it was synchronized before. I think the reason is that we initialize static variable within the method, so it has to be synchronized. cleaning part does not require synchronization.", "url": "https://github.com/Alluxio/alluxio/pull/11894#discussion_r465216651", "createdAt": "2020-08-04T17:35:08Z", "author": {"login": "yuzhu"}, "path": "core/common/src/main/java/alluxio/util/io/BufferUtils.java", "diffHunk": "@@ -51,6 +55,53 @@ public static int byteToInt(byte b) {\n    * this direct buffer should be discarded. This is unsafe operation and currently a work-around to\n    * avoid huge memory occupation caused by memory map.\n    *\n+   * @param buffer bytebuffer\n+   */\n+  public static synchronized void cleanDirectBuffer(ByteBuffer buffer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwOTc1Nw=="}, "originalCommit": {"oid": "1b4e225d9e2afa0fe5e957202ef69ed1c564eb25"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTU1OTgyOnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/util/CommonUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzoyMzo0MlrOG7qKqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzozNjoyMVrOG7qnbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIxMDAyNA==", "bodyText": "Is this comment true? Will it be 1.8 or will it be 8?", "url": "https://github.com/Alluxio/alluxio/pull/11894#discussion_r465210024", "createdAt": "2020-08-04T17:23:42Z", "author": {"login": "gpang"}, "path": "core/common/src/main/java/alluxio/util/CommonUtils.java", "diffHunk": "@@ -118,6 +120,13 @@ public static long getCurrentMs() {\n     return System.currentTimeMillis();\n   }\n \n+  /**\n+   * @return the current jvm major version, such as 1.8 or 11", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b4e225d9e2afa0fe5e957202ef69ed1c564eb25"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIxNzM5MQ==", "bodyText": "fixed comment", "url": "https://github.com/Alluxio/alluxio/pull/11894#discussion_r465217391", "createdAt": "2020-08-04T17:36:21Z", "author": {"login": "yuzhu"}, "path": "core/common/src/main/java/alluxio/util/CommonUtils.java", "diffHunk": "@@ -118,6 +120,13 @@ public static long getCurrentMs() {\n     return System.currentTimeMillis();\n   }\n \n+  /**\n+   * @return the current jvm major version, such as 1.8 or 11", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIxMDAyNA=="}, "originalCommit": {"oid": "1b4e225d9e2afa0fe5e957202ef69ed1c564eb25"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDQ1MDc1OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/util/CommonUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDoxNzowNFrOG8ZFgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjo0MDoyMVrOG8dBjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk3ODc1Mw==", "bodyText": "can you add one or more unit test(s) for this method", "url": "https://github.com/Alluxio/alluxio/pull/11894#discussion_r465978753", "createdAt": "2020-08-05T20:17:04Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/util/CommonUtils.java", "diffHunk": "@@ -852,5 +861,22 @@ public static boolean isAddressReachable(String hostname, int port) {\n     return result;\n   }\n \n+  /**\n+   * @return the major version of the current JVM, 8 for 1.8, 11 for java 11\n+   * see https://www.oracle.com/java/technologies/javase/versioning-naming.html for reference\n+   */\n+  private static int initMajorVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7173339e3ebe8f3165c1d6e2e7741d6c1bd29b30"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAwMTQzNQ==", "bodyText": "emmm not sure how we can test this? like how do we know the ground truth, from within a jvm?", "url": "https://github.com/Alluxio/alluxio/pull/11894#discussion_r466001435", "createdAt": "2020-08-05T21:01:50Z", "author": {"login": "yuzhu"}, "path": "core/common/src/main/java/alluxio/util/CommonUtils.java", "diffHunk": "@@ -852,5 +861,22 @@ public static boolean isAddressReachable(String hostname, int port) {\n     return result;\n   }\n \n+  /**\n+   * @return the major version of the current JVM, 8 for 1.8, 11 for java 11\n+   * see https://www.oracle.com/java/technologies/javase/versioning-naming.html for reference\n+   */\n+  private static int initMajorVersion() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk3ODc1Mw=="}, "originalCommit": {"oid": "7173339e3ebe8f3165c1d6e2e7741d6c1bd29b30"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0MzI3Ng==", "bodyText": "test expected JVM inputs (1.8.X-XXX, 11.X.X., etc?) and make sure this function returns the correct output", "url": "https://github.com/Alluxio/alluxio/pull/11894#discussion_r466043276", "createdAt": "2020-08-05T22:40:21Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/util/CommonUtils.java", "diffHunk": "@@ -852,5 +861,22 @@ public static boolean isAddressReachable(String hostname, int port) {\n     return result;\n   }\n \n+  /**\n+   * @return the major version of the current JVM, 8 for 1.8, 11 for java 11\n+   * see https://www.oracle.com/java/technologies/javase/versioning-naming.html for reference\n+   */\n+  private static int initMajorVersion() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk3ODc1Mw=="}, "originalCommit": {"oid": "7173339e3ebe8f3165c1d6e2e7741d6c1bd29b30"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDQ1MzU4OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/util/io/BufferUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDoxODowMFrOG8ZHUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNDo0ODoxMVrOG8jKGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk3OTIxOA==", "bodyText": "do we have a test for this?", "url": "https://github.com/Alluxio/alluxio/pull/11894#discussion_r465979218", "createdAt": "2020-08-05T20:18:00Z", "author": {"login": "ZacBlanco"}, "path": "core/common/src/main/java/alluxio/util/io/BufferUtils.java", "diffHunk": "@@ -51,6 +55,53 @@ public static int byteToInt(byte b) {\n    * this direct buffer should be discarded. This is unsafe operation and currently a work-around to\n    * avoid huge memory occupation caused by memory map.\n    *\n+   * @param buffer bytebuffer\n+   */\n+  public static synchronized void cleanDirectBuffer(ByteBuffer buffer) {\n+    Preconditions.checkNotNull(buffer, \"buffer is null\");\n+    Preconditions.checkArgument(buffer.isDirect(), \"buffer isn't a DirectByteBuffer\");\n+    int javaVersion = CommonUtils.getJavaVersion();\n+    if (javaVersion < 9) {\n+      cleanDirectBufferJava8(buffer);\n+    } else {\n+      cleanDirectBufferJava11(buffer);\n+    }\n+  }\n+\n+  /**\n+   * <p>\n+   * Note: This calls the cleaner method on jdk 9+.\n+   * See <a\n+   * href=\"https://stackoverflow.com/questions/2972986/how-to-unmap-a-file-from-memory-mapped-\n+   * using-filechannel-in-java\"\n+   * >more discussion</a>.\n+   *\n+   * @param buffer the byte buffer to be unmapped, this must be a direct buffer\n+   */\n+  private static synchronized void cleanDirectBufferJava11(ByteBuffer buffer) {\n+    try {\n+      if (sByteBufferCleanerMethod == null || sUnsafeClass == null) {\n+        try {\n+          sUnsafeClass = Class.forName(\"sun.misc.Unsafe\");\n+        } catch (Exception e) {\n+          // jdk.internal.misc.Unsafe doesn't yet have an invokeCleaner() method,\n+          // but that method should be added if sun.misc.Unsafe is removed.\n+          sUnsafeClass = Class.forName(\"jdk.internal.misc.Unsafe\");\n+        }\n+        sByteBufferCleanerMethod = sUnsafeClass.getMethod(\"invokeCleaner\", ByteBuffer.class);\n+        sByteBufferCleanerMethod.setAccessible(true);\n+      }\n+      Field theUnsafeField = sUnsafeClass.getDeclaredField(\"theUnsafe\");\n+      theUnsafeField.setAccessible(true);\n+      Object theUnsafe = theUnsafeField.get(null);\n+      sByteBufferCleanerMethod.invoke(theUnsafe, buffer);\n+    } catch (Exception e) {\n+      LOG.warn(\"Failed to unmap direct ByteBuffer: {}, error message: {}\",\n+          buffer.getClass().getName(), e.getMessage());\n+    }\n+  }\n+\n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7173339e3ebe8f3165c1d6e2e7741d6c1bd29b30"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE0Mzc2OA==", "bodyText": "we have a test for the method. java 8 version or java 11 version will be tested depending on the jvm", "url": "https://github.com/Alluxio/alluxio/pull/11894#discussion_r466143768", "createdAt": "2020-08-06T04:48:11Z", "author": {"login": "yuzhu"}, "path": "core/common/src/main/java/alluxio/util/io/BufferUtils.java", "diffHunk": "@@ -51,6 +55,53 @@ public static int byteToInt(byte b) {\n    * this direct buffer should be discarded. This is unsafe operation and currently a work-around to\n    * avoid huge memory occupation caused by memory map.\n    *\n+   * @param buffer bytebuffer\n+   */\n+  public static synchronized void cleanDirectBuffer(ByteBuffer buffer) {\n+    Preconditions.checkNotNull(buffer, \"buffer is null\");\n+    Preconditions.checkArgument(buffer.isDirect(), \"buffer isn't a DirectByteBuffer\");\n+    int javaVersion = CommonUtils.getJavaVersion();\n+    if (javaVersion < 9) {\n+      cleanDirectBufferJava8(buffer);\n+    } else {\n+      cleanDirectBufferJava11(buffer);\n+    }\n+  }\n+\n+  /**\n+   * <p>\n+   * Note: This calls the cleaner method on jdk 9+.\n+   * See <a\n+   * href=\"https://stackoverflow.com/questions/2972986/how-to-unmap-a-file-from-memory-mapped-\n+   * using-filechannel-in-java\"\n+   * >more discussion</a>.\n+   *\n+   * @param buffer the byte buffer to be unmapped, this must be a direct buffer\n+   */\n+  private static synchronized void cleanDirectBufferJava11(ByteBuffer buffer) {\n+    try {\n+      if (sByteBufferCleanerMethod == null || sUnsafeClass == null) {\n+        try {\n+          sUnsafeClass = Class.forName(\"sun.misc.Unsafe\");\n+        } catch (Exception e) {\n+          // jdk.internal.misc.Unsafe doesn't yet have an invokeCleaner() method,\n+          // but that method should be added if sun.misc.Unsafe is removed.\n+          sUnsafeClass = Class.forName(\"jdk.internal.misc.Unsafe\");\n+        }\n+        sByteBufferCleanerMethod = sUnsafeClass.getMethod(\"invokeCleaner\", ByteBuffer.class);\n+        sByteBufferCleanerMethod.setAccessible(true);\n+      }\n+      Field theUnsafeField = sUnsafeClass.getDeclaredField(\"theUnsafe\");\n+      theUnsafeField.setAccessible(true);\n+      Object theUnsafe = theUnsafeField.get(null);\n+      sByteBufferCleanerMethod.invoke(theUnsafe, buffer);\n+    } catch (Exception e) {\n+      LOG.warn(\"Failed to unmap direct ByteBuffer: {}, error message: {}\",\n+          buffer.getClass().getName(), e.getMessage());\n+    }\n+  }\n+\n+  /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk3OTIxOA=="}, "originalCommit": {"oid": "7173339e3ebe8f3165c1d6e2e7741d6c1bd29b30"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1370, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}