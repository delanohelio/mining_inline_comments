{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MzczMTc3", "number": 11928, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNjo0Njo0OFrOEWSKhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNjo1MTo1NFrOEWSQoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODAxNzM1OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/util/ClassLoaderUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNjo0Njo0OFrOG9gyDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNjo1MTo1OFrOG9g71A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE1MzQyMg==", "bodyText": "This is only used in tests right? if so, I would put this in the test and use WhiteBox.", "url": "https://github.com/Alluxio/alluxio/pull/11928#discussion_r467153422", "createdAt": "2020-08-07T16:46:48Z", "author": {"login": "bradyoo"}, "path": "core/common/src/main/java/alluxio/util/ClassLoaderUtils.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.util;\n+\n+import java.io.File;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Utility functions for working with classloaders.\n+ */\n+\n+@ThreadSafe\n+public class ClassLoaderUtils {\n+  /**\n+   * Add a path to be loaded.\n+   * @param path full path\n+   */\n+  public static void addURL(String path) throws Exception {\n+    ClassLoader classLoader = ClassLoader.getSystemClassLoader();\n+    try {\n+      Method method = classLoader.getClass().getDeclaredMethod(\"addURL\", URL.class);\n+      method.setAccessible(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1309f213955b2278c7e75202cf90a41d336280e4"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE1NDkzMw==", "bodyText": "Actually, why does WhiteBox.invokeMethod fail?", "url": "https://github.com/Alluxio/alluxio/pull/11928#discussion_r467154933", "createdAt": "2020-08-07T16:49:56Z", "author": {"login": "bradyoo"}, "path": "core/common/src/main/java/alluxio/util/ClassLoaderUtils.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.util;\n+\n+import java.io.File;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Utility functions for working with classloaders.\n+ */\n+\n+@ThreadSafe\n+public class ClassLoaderUtils {\n+  /**\n+   * Add a path to be loaded.\n+   * @param path full path\n+   */\n+  public static void addURL(String path) throws Exception {\n+    ClassLoader classLoader = ClassLoader.getSystemClassLoader();\n+    try {\n+      Method method = classLoader.getClass().getDeclaredMethod(\"addURL\", URL.class);\n+      method.setAccessible(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE1MzQyMg=="}, "originalCommit": {"oid": "1309f213955b2278c7e75202cf90a41d336280e4"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE1NTkyNA==", "bodyText": "if our goal is to eventually remove the powermock dependency,  why would we use Whitebox?\nI will move this util class to somewhere in test package.", "url": "https://github.com/Alluxio/alluxio/pull/11928#discussion_r467155924", "createdAt": "2020-08-07T16:51:58Z", "author": {"login": "yuzhu"}, "path": "core/common/src/main/java/alluxio/util/ClassLoaderUtils.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.util;\n+\n+import java.io.File;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Utility functions for working with classloaders.\n+ */\n+\n+@ThreadSafe\n+public class ClassLoaderUtils {\n+  /**\n+   * Add a path to be loaded.\n+   * @param path full path\n+   */\n+  public static void addURL(String path) throws Exception {\n+    ClassLoader classLoader = ClassLoader.getSystemClassLoader();\n+    try {\n+      Method method = classLoader.getClass().getDeclaredMethod(\"addURL\", URL.class);\n+      method.setAccessible(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE1MzQyMg=="}, "originalCommit": {"oid": "1309f213955b2278c7e75202cf90a41d336280e4"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODAzMjk2OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/util/ClassLoaderUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNjo1MTo1NFrOG9g7uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNjo1MTo1NFrOG9g7uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE1NTg5OQ==", "bodyText": "Oh I see.. I might just call WhiteBox.invokeMethod twice", "url": "https://github.com/Alluxio/alluxio/pull/11928#discussion_r467155899", "createdAt": "2020-08-07T16:51:54Z", "author": {"login": "bradyoo"}, "path": "core/common/src/main/java/alluxio/util/ClassLoaderUtils.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.util;\n+\n+import java.io.File;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Utility functions for working with classloaders.\n+ */\n+\n+@ThreadSafe\n+public class ClassLoaderUtils {\n+  /**\n+   * Add a path to be loaded.\n+   * @param path full path\n+   */\n+  public static void addURL(String path) throws Exception {\n+    ClassLoader classLoader = ClassLoader.getSystemClassLoader();\n+    try {\n+      Method method = classLoader.getClass().getDeclaredMethod(\"addURL\", URL.class);\n+      method.setAccessible(true);\n+      method.invoke(classLoader, new File(path).toURI().toURL());\n+    } catch (NoSuchMethodException e) {\n+      Method method = classLoader.getClass().getDeclaredMethod(\n+          \"appendToClassPathForInstrumentation\", String.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1309f213955b2278c7e75202cf90a41d336280e4"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1387, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}