{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MjM0NTU0", "number": 10763, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMToyMzozOFrODY8SIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMzo0MzoyNFrODZrGPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDgwMDk3OnYy", "diffSide": "RIGHT", "path": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsPositionedUnderFileInputStream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMToyMzozOFrOFfFm0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMToyMzozOFrOFfFm0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE0MjAzMw==", "bodyText": "BufferUtils.byteToInt?", "url": "https://github.com/Alluxio/alluxio/pull/10763#discussion_r368142033", "createdAt": "2020-01-17T21:23:38Z", "author": {"login": "calvinjia"}, "path": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsPositionedUnderFileInputStream.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.hdfs;\n+\n+import alluxio.underfs.SeekableUnderFileInputStream;\n+\n+import org.apache.hadoop.fs.FSDataInputStream;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The input stream of HDFS as under filesystem. This input stream supports seeking but internally\n+ * uses the positionedRead {@link FSDataInputStream} API.\n+ */\n+public class HdfsPositionedUnderFileInputStream extends SeekableUnderFileInputStream {\n+  private long mPos;\n+\n+  HdfsPositionedUnderFileInputStream(FSDataInputStream in, long pos) {\n+    super(in);\n+    mPos = pos;\n+  }\n+\n+  @Override\n+  public int available() throws IOException {\n+    int available = in.available() + (int) (((FSDataInputStream) in).getPos() - mPos);\n+    return available > 0 ? available : 0;\n+  }\n+\n+  @Override\n+  public long getPos() throws IOException {\n+    return mPos;\n+  }\n+\n+  @Override\n+  public int read() throws IOException {\n+    byte[] buffer = new byte[1];\n+    int bytesRead = ((FSDataInputStream) in).read(mPos, buffer, 0, buffer.length);\n+    if (bytesRead > 0) {\n+      mPos += bytesRead;\n+    }\n+    return bytesRead < 0 ? bytesRead : (int) buffer[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b6d23a50f1dc3b93b09e43401eefb883ed53ab5"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjE0MDAwOnYy", "diffSide": "RIGHT", "path": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsPositionedUnderFileInputStream.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToyNzoxNFrOFgJVfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMzoyMDo0M1rOFgMExw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1MTcwOQ==", "bodyText": "Could you explain the logic here?", "url": "https://github.com/Alluxio/alluxio/pull/10763#discussion_r369251709", "createdAt": "2020-01-21T21:27:14Z", "author": {"login": "calvinjia"}, "path": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsPositionedUnderFileInputStream.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.hdfs;\n+\n+import alluxio.underfs.SeekableUnderFileInputStream;\n+import alluxio.util.io.BufferUtils;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The input stream of HDFS as under filesystem. This input stream supports seeking but internally\n+ * uses the positionedRead {@link FSDataInputStream} API. This stream can be cached for reuse.\n+ */\n+public class HdfsPositionedUnderFileInputStream extends SeekableUnderFileInputStream {\n+  private long mPos;\n+\n+  HdfsPositionedUnderFileInputStream(FSDataInputStream in, long pos) {\n+    super(in);\n+    mPos = pos;\n+  }\n+\n+  @Override\n+  public int available() throws IOException {\n+    int available = in.available() + (int) (((FSDataInputStream) in).getPos() - mPos);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96797092f107cfe3d5a17b14e460e82af5a7032"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI2OTMwNg==", "bodyText": "Calling seek in this stream doesn't change the wrapped FSDataInputStream and the number of bytes remaining would never be negative", "url": "https://github.com/Alluxio/alluxio/pull/10763#discussion_r369269306", "createdAt": "2020-01-21T22:07:43Z", "author": {"login": "madanadit"}, "path": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsPositionedUnderFileInputStream.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.hdfs;\n+\n+import alluxio.underfs.SeekableUnderFileInputStream;\n+import alluxio.util.io.BufferUtils;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The input stream of HDFS as under filesystem. This input stream supports seeking but internally\n+ * uses the positionedRead {@link FSDataInputStream} API. This stream can be cached for reuse.\n+ */\n+public class HdfsPositionedUnderFileInputStream extends SeekableUnderFileInputStream {\n+  private long mPos;\n+\n+  HdfsPositionedUnderFileInputStream(FSDataInputStream in, long pos) {\n+    super(in);\n+    mPos = pos;\n+  }\n+\n+  @Override\n+  public int available() throws IOException {\n+    int available = in.available() + (int) (((FSDataInputStream) in).getPos() - mPos);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1MTcwOQ=="}, "originalCommit": {"oid": "c96797092f107cfe3d5a17b14e460e82af5a7032"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI3MDk4MQ==", "bodyText": "in.available + in.getPos = estimate of total bytes", "url": "https://github.com/Alluxio/alluxio/pull/10763#discussion_r369270981", "createdAt": "2020-01-21T22:11:57Z", "author": {"login": "madanadit"}, "path": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsPositionedUnderFileInputStream.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.hdfs;\n+\n+import alluxio.underfs.SeekableUnderFileInputStream;\n+import alluxio.util.io.BufferUtils;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The input stream of HDFS as under filesystem. This input stream supports seeking but internally\n+ * uses the positionedRead {@link FSDataInputStream} API. This stream can be cached for reuse.\n+ */\n+public class HdfsPositionedUnderFileInputStream extends SeekableUnderFileInputStream {\n+  private long mPos;\n+\n+  HdfsPositionedUnderFileInputStream(FSDataInputStream in, long pos) {\n+    super(in);\n+    mPos = pos;\n+  }\n+\n+  @Override\n+  public int available() throws IOException {\n+    int available = in.available() + (int) (((FSDataInputStream) in).getPos() - mPos);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1MTcwOQ=="}, "originalCommit": {"oid": "c96797092f107cfe3d5a17b14e460e82af5a7032"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI5NjU4Mw==", "bodyText": "thx, fixed this method", "url": "https://github.com/Alluxio/alluxio/pull/10763#discussion_r369296583", "createdAt": "2020-01-21T23:20:43Z", "author": {"login": "madanadit"}, "path": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsPositionedUnderFileInputStream.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.hdfs;\n+\n+import alluxio.underfs.SeekableUnderFileInputStream;\n+import alluxio.util.io.BufferUtils;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The input stream of HDFS as under filesystem. This input stream supports seeking but internally\n+ * uses the positionedRead {@link FSDataInputStream} API. This stream can be cached for reuse.\n+ */\n+public class HdfsPositionedUnderFileInputStream extends SeekableUnderFileInputStream {\n+  private long mPos;\n+\n+  HdfsPositionedUnderFileInputStream(FSDataInputStream in, long pos) {\n+    super(in);\n+    mPos = pos;\n+  }\n+\n+  @Override\n+  public int available() throws IOException {\n+    int available = in.available() + (int) (((FSDataInputStream) in).getPos() - mPos);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1MTcwOQ=="}, "originalCommit": {"oid": "c96797092f107cfe3d5a17b14e460e82af5a7032"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjE0Njk3OnYy", "diffSide": "RIGHT", "path": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsPositionedUnderFileInputStream.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToyOTo1MVrOFgJZ3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMjowOToyOVrOFgKc7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1MjgzMQ==", "bodyText": "Is it valid to hit EOS here and return -1?", "url": "https://github.com/Alluxio/alluxio/pull/10763#discussion_r369252831", "createdAt": "2020-01-21T21:29:51Z", "author": {"login": "calvinjia"}, "path": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsPositionedUnderFileInputStream.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.hdfs;\n+\n+import alluxio.underfs.SeekableUnderFileInputStream;\n+import alluxio.util.io.BufferUtils;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The input stream of HDFS as under filesystem. This input stream supports seeking but internally\n+ * uses the positionedRead {@link FSDataInputStream} API. This stream can be cached for reuse.\n+ */\n+public class HdfsPositionedUnderFileInputStream extends SeekableUnderFileInputStream {\n+  private long mPos;\n+\n+  HdfsPositionedUnderFileInputStream(FSDataInputStream in, long pos) {\n+    super(in);\n+    mPos = pos;\n+  }\n+\n+  @Override\n+  public int available() throws IOException {\n+    int available = in.available() + (int) (((FSDataInputStream) in).getPos() - mPos);\n+    return available > 0 ? available : 0;\n+  }\n+\n+  @Override\n+  public long getPos() throws IOException {\n+    return mPos;\n+  }\n+\n+  @Override\n+  public int read() throws IOException {\n+    byte[] buffer = new byte[1];\n+    int bytesRead = ((FSDataInputStream) in).read(mPos, buffer, 0, buffer.length);\n+    if (bytesRead > 0) {\n+      mPos += bytesRead;\n+      return BufferUtils.byteToInt(buffer[0]);\n+    }\n+    Preconditions.checkArgument(bytesRead != 0,\n+        \"Expected a non-zero value if end of stream has not been reached\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96797092f107cfe3d5a17b14e460e82af5a7032"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI2OTk5Ng==", "bodyText": "yes, -1 is valid return value for this method", "url": "https://github.com/Alluxio/alluxio/pull/10763#discussion_r369269996", "createdAt": "2020-01-21T22:09:29Z", "author": {"login": "madanadit"}, "path": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsPositionedUnderFileInputStream.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.hdfs;\n+\n+import alluxio.underfs.SeekableUnderFileInputStream;\n+import alluxio.util.io.BufferUtils;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The input stream of HDFS as under filesystem. This input stream supports seeking but internally\n+ * uses the positionedRead {@link FSDataInputStream} API. This stream can be cached for reuse.\n+ */\n+public class HdfsPositionedUnderFileInputStream extends SeekableUnderFileInputStream {\n+  private long mPos;\n+\n+  HdfsPositionedUnderFileInputStream(FSDataInputStream in, long pos) {\n+    super(in);\n+    mPos = pos;\n+  }\n+\n+  @Override\n+  public int available() throws IOException {\n+    int available = in.available() + (int) (((FSDataInputStream) in).getPos() - mPos);\n+    return available > 0 ? available : 0;\n+  }\n+\n+  @Override\n+  public long getPos() throws IOException {\n+    return mPos;\n+  }\n+\n+  @Override\n+  public int read() throws IOException {\n+    byte[] buffer = new byte[1];\n+    int bytesRead = ((FSDataInputStream) in).read(mPos, buffer, 0, buffer.length);\n+    if (bytesRead > 0) {\n+      mPos += bytesRead;\n+      return BufferUtils.byteToInt(buffer[0]);\n+    }\n+    Preconditions.checkArgument(bytesRead != 0,\n+        \"Expected a non-zero value if end of stream has not been reached\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1MjgzMQ=="}, "originalCommit": {"oid": "c96797092f107cfe3d5a17b14e460e82af5a7032"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjE0OTE5OnYy", "diffSide": "RIGHT", "path": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTozMDozMFrOFgJbKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMjoxODowM1rOFgKqqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1MzE2Mw==", "bodyText": "Perhaps change this comment to say why positionedRead is better than seeking in some cases?", "url": "https://github.com/Alluxio/alluxio/pull/10763#discussion_r369253163", "createdAt": "2020-01-21T21:30:30Z", "author": {"login": "calvinjia"}, "path": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java", "diffHunk": "@@ -563,13 +563,8 @@ public InputStream open(String path, OpenOptions options) throws IOException {\n     while (retryPolicy.attempt()) {\n       try {\n         FSDataInputStream inputStream = hdfs.open(new Path(path));\n-        try {\n-          inputStream.seek(options.getOffset());\n-        } catch (IOException e) {\n-          inputStream.close();\n-          throw e;\n-        }\n-        return new HdfsUnderFileInputStream(inputStream);\n+        // For remote HDFS, use positionedRead instead of seek", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96797092f107cfe3d5a17b14e460e82af5a7032"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI3MzUxNA==", "bodyText": "done", "url": "https://github.com/Alluxio/alluxio/pull/10763#discussion_r369273514", "createdAt": "2020-01-21T22:18:03Z", "author": {"login": "madanadit"}, "path": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java", "diffHunk": "@@ -563,13 +563,8 @@ public InputStream open(String path, OpenOptions options) throws IOException {\n     while (retryPolicy.attempt()) {\n       try {\n         FSDataInputStream inputStream = hdfs.open(new Path(path));\n-        try {\n-          inputStream.seek(options.getOffset());\n-        } catch (IOException e) {\n-          inputStream.close();\n-          throw e;\n-        }\n-        return new HdfsUnderFileInputStream(inputStream);\n+        // For remote HDFS, use positionedRead instead of seek", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1MzE2Mw=="}, "originalCommit": {"oid": "c96797092f107cfe3d5a17b14e460e82af5a7032"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjQ3MTAxOnYy", "diffSide": "RIGHT", "path": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsPositionedUnderFileInputStream.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMzo0MzoyNFrOFgMfwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDo0NjoyN1rOFgNinw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMwMzQ4OA==", "bodyText": "Consider using this class's read(byte[]) method? Then we should only need to bookkeep mPos in one place", "url": "https://github.com/Alluxio/alluxio/pull/10763#discussion_r369303488", "createdAt": "2020-01-21T23:43:24Z", "author": {"login": "calvinjia"}, "path": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsPositionedUnderFileInputStream.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.hdfs;\n+\n+import alluxio.underfs.SeekableUnderFileInputStream;\n+import alluxio.util.io.BufferUtils;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The input stream of HDFS as under filesystem. This input stream supports seeking but internally\n+ * uses the positionedRead {@link FSDataInputStream} API. This stream can be cached for reuse.\n+ */\n+public class HdfsPositionedUnderFileInputStream extends SeekableUnderFileInputStream {\n+  private long mPos;\n+\n+  HdfsPositionedUnderFileInputStream(FSDataInputStream in, long pos) {\n+    super(in);\n+    mPos = pos;\n+  }\n+\n+  @Override\n+  public int available() throws IOException {\n+    if (mPos != ((FSDataInputStream) in).getPos()) {\n+      return 0;\n+    }\n+    return in.available();\n+  }\n+\n+  @Override\n+  public long getPos() throws IOException {\n+    return mPos;\n+  }\n+\n+  @Override\n+  public int read() throws IOException {\n+    byte[] buffer = new byte[1];\n+    int bytesRead = ((FSDataInputStream) in).read(mPos, buffer, 0, buffer.length);\n+    if (bytesRead > 0) {\n+      mPos += bytesRead;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d84fe85bfd07f7c476a4d32a1e077ecd0b8e8bf0"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMyMDYwNw==", "bodyText": "thx, done", "url": "https://github.com/Alluxio/alluxio/pull/10763#discussion_r369320607", "createdAt": "2020-01-22T00:46:27Z", "author": {"login": "madanadit"}, "path": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsPositionedUnderFileInputStream.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.hdfs;\n+\n+import alluxio.underfs.SeekableUnderFileInputStream;\n+import alluxio.util.io.BufferUtils;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.hadoop.fs.FSDataInputStream;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The input stream of HDFS as under filesystem. This input stream supports seeking but internally\n+ * uses the positionedRead {@link FSDataInputStream} API. This stream can be cached for reuse.\n+ */\n+public class HdfsPositionedUnderFileInputStream extends SeekableUnderFileInputStream {\n+  private long mPos;\n+\n+  HdfsPositionedUnderFileInputStream(FSDataInputStream in, long pos) {\n+    super(in);\n+    mPos = pos;\n+  }\n+\n+  @Override\n+  public int available() throws IOException {\n+    if (mPos != ((FSDataInputStream) in).getPos()) {\n+      return 0;\n+    }\n+    return in.available();\n+  }\n+\n+  @Override\n+  public long getPos() throws IOException {\n+    return mPos;\n+  }\n+\n+  @Override\n+  public int read() throws IOException {\n+    byte[] buffer = new byte[1];\n+    int bytesRead = ((FSDataInputStream) in).read(mPos, buffer, 0, buffer.length);\n+    if (bytesRead > 0) {\n+      mPos += bytesRead;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMwMzQ4OA=="}, "originalCommit": {"oid": "d84fe85bfd07f7c476a4d32a1e077ecd0b8e8bf0"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2073, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}