{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1MDQzMDcw", "number": 11942, "reviewThreads": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwNTo0MDo0MVrOEWiwmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo0MDo0M1rOEq392w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDczNjI2OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fs/command/LsPathInAlluxio.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwNTo0MDo0MVrOG94W0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwNTo0MDo0MVrOG94W0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUzOTY2Nw==", "bodyText": "If you want to give a parameter to the %s, you will need to use System.out.format(\"%s%n\", x); where %n is the newline character.", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r467539667", "createdAt": "2020-08-09T05:40:41Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/fs/command/LsPathInAlluxio.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.cli.fs.command;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.client.file.URIStatus;\n+import alluxio.exception.AlluxioException;\n+import alluxio.grpc.ListStatusPOptions;\n+import alluxio.util.FormatUtils;\n+import alluxio.wire.BlockLocation;\n+import alluxio.wire.FileBlockInfo;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.*;\n+\n+public class LsPathInAlluxio extends AbstractFileSystemCommand {\n+\n+    private static final String READABLE_OPTION_NAME = \"h\";\n+\n+    private static final Option READABLE_OPTION =\n+            Option.builder(READABLE_OPTION_NAME)\n+                    .required(false)\n+                    .hasArg(false)\n+                    .desc(\"print sizes in human readable format (e.g., 1KB 234MB 2GB)\")\n+                    .build();\n+\n+    public LsPathInAlluxio(@Nullable FileSystemContext fsContext) {\n+        super(fsContext);\n+    }\n+\n+    /**\n+     * Displays information for In-Alluxio data size under the path group by worker.\n+     *\n+     * @param path The {@link AlluxioURI} path as the input of the command\n+     * @param readable whether to print info of human readable format\n+     */\n+    private void lsPathInAlluxio(AlluxioURI path, boolean readable) throws AlluxioException, IOException {\n+\n+        Timer timer = new Timer();\n+        timer.schedule(new TimerTask() {\n+            @Override\n+            public void run() {\n+                System.out.println(\"Getting directory status of %s files or sub-directories \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc06bcfb9be0bfbf3a8d30111c5d13e0b8de3be"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDczODE2OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fs/command/LsPathInAlluxio.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwNTo0MzoyM1rOG94Xrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwOTo1MDoxNVrOG95t7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUzOTg4Nw==", "bodyText": "Maybe Displays information for in-Alluxio data size under the path, grouped by worker ?", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r467539887", "createdAt": "2020-08-09T05:43:23Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/fs/command/LsPathInAlluxio.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.cli.fs.command;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.client.file.URIStatus;\n+import alluxio.exception.AlluxioException;\n+import alluxio.grpc.ListStatusPOptions;\n+import alluxio.util.FormatUtils;\n+import alluxio.wire.BlockLocation;\n+import alluxio.wire.FileBlockInfo;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.*;\n+\n+public class LsPathInAlluxio extends AbstractFileSystemCommand {\n+\n+    private static final String READABLE_OPTION_NAME = \"h\";\n+\n+    private static final Option READABLE_OPTION =\n+            Option.builder(READABLE_OPTION_NAME)\n+                    .required(false)\n+                    .hasArg(false)\n+                    .desc(\"print sizes in human readable format (e.g., 1KB 234MB 2GB)\")\n+                    .build();\n+\n+    public LsPathInAlluxio(@Nullable FileSystemContext fsContext) {\n+        super(fsContext);\n+    }\n+\n+    /**\n+     * Displays information for In-Alluxio data size under the path group by worker.\n+     *\n+     * @param path The {@link AlluxioURI} path as the input of the command\n+     * @param readable whether to print info of human readable format\n+     */\n+    private void lsPathInAlluxio(AlluxioURI path, boolean readable) throws AlluxioException, IOException {\n+\n+        Timer timer = new Timer();\n+        timer.schedule(new TimerTask() {\n+            @Override\n+            public void run() {\n+                System.out.println(\"Getting directory status of %s files or sub-directories \"\n+                        + \"may take a while.\");\n+            }\n+        }, 10000);\n+        ListStatusPOptions.Builder optionsBuilder = ListStatusPOptions.newBuilder();\n+        optionsBuilder.setRecursive(true);\n+        List<URIStatus> statuses = mFileSystem.listStatus(path, optionsBuilder.build());\n+        timer.cancel();\n+\n+        Map<String, Long> distributionMap = new HashMap<>();\n+        for (URIStatus status: statuses) {\n+            for (FileBlockInfo fileBlockInfo : status.getFileBlockInfos()) {\n+                Long length = fileBlockInfo.getBlockInfo().getLength();\n+                for (BlockLocation blockLocation : fileBlockInfo.getBlockInfo().getLocations()) {\n+                    distributionMap.put(blockLocation.getWorkerAddress().getHost(),\n+                        distributionMap.getOrDefault(blockLocation.getWorkerAddress().getHost(), 0L) + length);\n+                }\n+            }\n+        }\n+\n+        distributionMap.forEach((workerHostName, size) -> {\n+            printInfo(workerHostName, readable ? FormatUtils.getSizeFromBytes(size) : String.valueOf(size));\n+        });\n+    }\n+\n+    /**\n+     * Prints the size messages.\n+     *\n+     * @param workerHostName Host name of the worker\n+     * @param inAlluxioMessage the in Alluxio size message to print\n+     */\n+    private static void printInfo(String workerHostName, String inAlluxioMessage) {\n+        System.out.println(String.format(\"%-25s %s\", workerHostName, inAlluxioMessage));\n+    }\n+\n+    @Override\n+    protected void processHeader(CommandLine cl) {\n+        printInfo(\"Worker Host Name\", \"In Alluxio\");\n+    }\n+\n+    @Override\n+    protected void runPlainPath(AlluxioURI path, CommandLine cl)\n+            throws AlluxioException, IOException {\n+        lsPathInAlluxio(path, cl.hasOption(READABLE_OPTION_NAME));\n+    }\n+\n+    @Override\n+    public int run(CommandLine cl) throws AlluxioException, IOException {\n+        String[] args = cl.getArgs();\n+        AlluxioURI path = new AlluxioURI(args[0]);\n+        runWildCardCmd(path, cl);\n+        return 0;\n+    }\n+\n+    @Override\n+    public String getCommandName() {\n+        return \"lsPathInAlluxio\";\n+    }\n+\n+    @Override\n+    public String getUsage() {\n+        return \"lsPathInAlluxio [-h] <path>\";\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return \"Displays information for In-Alluxio data size under the path group by worker.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc06bcfb9be0bfbf3a8d30111c5d13e0b8de3be"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU2MTk2Ng==", "bodyText": "Ok", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r467561966", "createdAt": "2020-08-09T09:50:15Z", "author": {"login": "JySongWithZhangCe"}, "path": "shell/src/main/java/alluxio/cli/fs/command/LsPathInAlluxio.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.cli.fs.command;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.client.file.URIStatus;\n+import alluxio.exception.AlluxioException;\n+import alluxio.grpc.ListStatusPOptions;\n+import alluxio.util.FormatUtils;\n+import alluxio.wire.BlockLocation;\n+import alluxio.wire.FileBlockInfo;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.*;\n+\n+public class LsPathInAlluxio extends AbstractFileSystemCommand {\n+\n+    private static final String READABLE_OPTION_NAME = \"h\";\n+\n+    private static final Option READABLE_OPTION =\n+            Option.builder(READABLE_OPTION_NAME)\n+                    .required(false)\n+                    .hasArg(false)\n+                    .desc(\"print sizes in human readable format (e.g., 1KB 234MB 2GB)\")\n+                    .build();\n+\n+    public LsPathInAlluxio(@Nullable FileSystemContext fsContext) {\n+        super(fsContext);\n+    }\n+\n+    /**\n+     * Displays information for In-Alluxio data size under the path group by worker.\n+     *\n+     * @param path The {@link AlluxioURI} path as the input of the command\n+     * @param readable whether to print info of human readable format\n+     */\n+    private void lsPathInAlluxio(AlluxioURI path, boolean readable) throws AlluxioException, IOException {\n+\n+        Timer timer = new Timer();\n+        timer.schedule(new TimerTask() {\n+            @Override\n+            public void run() {\n+                System.out.println(\"Getting directory status of %s files or sub-directories \"\n+                        + \"may take a while.\");\n+            }\n+        }, 10000);\n+        ListStatusPOptions.Builder optionsBuilder = ListStatusPOptions.newBuilder();\n+        optionsBuilder.setRecursive(true);\n+        List<URIStatus> statuses = mFileSystem.listStatus(path, optionsBuilder.build());\n+        timer.cancel();\n+\n+        Map<String, Long> distributionMap = new HashMap<>();\n+        for (URIStatus status: statuses) {\n+            for (FileBlockInfo fileBlockInfo : status.getFileBlockInfos()) {\n+                Long length = fileBlockInfo.getBlockInfo().getLength();\n+                for (BlockLocation blockLocation : fileBlockInfo.getBlockInfo().getLocations()) {\n+                    distributionMap.put(blockLocation.getWorkerAddress().getHost(),\n+                        distributionMap.getOrDefault(blockLocation.getWorkerAddress().getHost(), 0L) + length);\n+                }\n+            }\n+        }\n+\n+        distributionMap.forEach((workerHostName, size) -> {\n+            printInfo(workerHostName, readable ? FormatUtils.getSizeFromBytes(size) : String.valueOf(size));\n+        });\n+    }\n+\n+    /**\n+     * Prints the size messages.\n+     *\n+     * @param workerHostName Host name of the worker\n+     * @param inAlluxioMessage the in Alluxio size message to print\n+     */\n+    private static void printInfo(String workerHostName, String inAlluxioMessage) {\n+        System.out.println(String.format(\"%-25s %s\", workerHostName, inAlluxioMessage));\n+    }\n+\n+    @Override\n+    protected void processHeader(CommandLine cl) {\n+        printInfo(\"Worker Host Name\", \"In Alluxio\");\n+    }\n+\n+    @Override\n+    protected void runPlainPath(AlluxioURI path, CommandLine cl)\n+            throws AlluxioException, IOException {\n+        lsPathInAlluxio(path, cl.hasOption(READABLE_OPTION_NAME));\n+    }\n+\n+    @Override\n+    public int run(CommandLine cl) throws AlluxioException, IOException {\n+        String[] args = cl.getArgs();\n+        AlluxioURI path = new AlluxioURI(args[0]);\n+        runWildCardCmd(path, cl);\n+        return 0;\n+    }\n+\n+    @Override\n+    public String getCommandName() {\n+        return \"lsPathInAlluxio\";\n+    }\n+\n+    @Override\n+    public String getUsage() {\n+        return \"lsPathInAlluxio [-h] <path>\";\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return \"Displays information for In-Alluxio data size under the path group by worker.\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUzOTg4Nw=="}, "originalCommit": {"oid": "edc06bcfb9be0bfbf3a8d30111c5d13e0b8de3be"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMDc0MTAxOnYy", "diffSide": "RIGHT", "path": "tests/src/test/java/alluxio/client/cli/fs/command/LsPathInAlluxioTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwNTo0NzozOFrOG94Y8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQwOTo1MToxMFrOG95uWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU0MDIwOQ==", "bodyText": "Maybe assertEquals on each of them, with -h and without -h. Don't verify these two together.", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r467540209", "createdAt": "2020-08-09T05:47:38Z", "author": {"login": "jiacheliu3"}, "path": "tests/src/test/java/alluxio/client/cli/fs/command/LsPathInAlluxioTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.cli.fs.command;\n+\n+import alluxio.client.cli.fs.AbstractFileSystemShellTest;\n+import alluxio.client.file.FileSystemTestUtils;\n+import alluxio.grpc.WritePType;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Tests for lsPathInAlluxio command.\n+ */\n+public class LsPathInAlluxioTest extends AbstractFileSystemShellTest {\n+\n+    @Test\n+    public void lsInAlluxio() throws Exception {\n+        FileSystemTestUtils\n+                .createByteFile(sFileSystem, \"/testRoot/testFileA\", WritePType.MUST_CACHE, 50, 50);\n+        FileSystemTestUtils\n+                .createByteFile(sFileSystem, \"/testRoot/testFileZ\", WritePType.MUST_CACHE, 10, 10);\n+        FileSystemTestUtils\n+                .createByteFile(sFileSystem, \"/testRoot/testLongFile\", WritePType.MUST_CACHE, 100, 100);\n+\n+        String workerHost = sLocalAlluxioCluster.getWorkerAddress().getHost();\n+        String expected = \"\";\n+        String format = \"%-25s %s\\n\";\n+\n+        sFsShell.run(\"lsInAlluxio\", \"/testRoot\");\n+        expected += String.format(format, \"Worker Host Name\", \"In Alluxio\");\n+        expected += String.format(format, workerHost, 160);\n+\n+        sFsShell.run(\"lsInAlluxio\", \"-h\", \"/testRoot\");\n+        expected += String.format(format, \"Worker Address\", \"In Alluxio\");\n+        expected += String.format(format, workerHost, \"160B\");\n+\n+        assertEquals(expected, mOutput.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc06bcfb9be0bfbf3a8d30111c5d13e0b8de3be"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU2MjA3NQ==", "bodyText": "ok", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r467562075", "createdAt": "2020-08-09T09:51:10Z", "author": {"login": "JySongWithZhangCe"}, "path": "tests/src/test/java/alluxio/client/cli/fs/command/LsPathInAlluxioTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.cli.fs.command;\n+\n+import alluxio.client.cli.fs.AbstractFileSystemShellTest;\n+import alluxio.client.file.FileSystemTestUtils;\n+import alluxio.grpc.WritePType;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Tests for lsPathInAlluxio command.\n+ */\n+public class LsPathInAlluxioTest extends AbstractFileSystemShellTest {\n+\n+    @Test\n+    public void lsInAlluxio() throws Exception {\n+        FileSystemTestUtils\n+                .createByteFile(sFileSystem, \"/testRoot/testFileA\", WritePType.MUST_CACHE, 50, 50);\n+        FileSystemTestUtils\n+                .createByteFile(sFileSystem, \"/testRoot/testFileZ\", WritePType.MUST_CACHE, 10, 10);\n+        FileSystemTestUtils\n+                .createByteFile(sFileSystem, \"/testRoot/testLongFile\", WritePType.MUST_CACHE, 100, 100);\n+\n+        String workerHost = sLocalAlluxioCluster.getWorkerAddress().getHost();\n+        String expected = \"\";\n+        String format = \"%-25s %s\\n\";\n+\n+        sFsShell.run(\"lsInAlluxio\", \"/testRoot\");\n+        expected += String.format(format, \"Worker Host Name\", \"In Alluxio\");\n+        expected += String.format(format, workerHost, 160);\n+\n+        sFsShell.run(\"lsInAlluxio\", \"-h\", \"/testRoot\");\n+        expected += String.format(format, \"Worker Address\", \"In Alluxio\");\n+        expected += String.format(format, workerHost, \"160B\");\n+\n+        assertEquals(expected, mOutput.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU0MDIwOQ=="}, "originalCommit": {"oid": "edc06bcfb9be0bfbf3a8d30111c5d13e0b8de3be"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NTAwMzM0OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fs/command/LsPathInAlluxioCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMDozOToxMVrOHBWp3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMDozOToxMVrOHBWp3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE4MTc5MQ==", "bodyText": "fix indentation , see https://docs.alluxio.io/os/user/stable/en/contributor/Code-Conventions.html#coding-style", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r471181791", "createdAt": "2020-08-17T00:39:11Z", "author": {"login": "apc999"}, "path": "shell/src/main/java/alluxio/cli/fs/command/LsPathInAlluxioCommand.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.cli.fs.command;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.client.file.URIStatus;\n+import alluxio.exception.AlluxioException;\n+import alluxio.grpc.ListStatusPOptions;\n+import alluxio.util.FormatUtils;\n+import alluxio.wire.BlockLocation;\n+import alluxio.wire.FileBlockInfo;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+\n+import java.io.IOException;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.HashMap;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Displays information for In-Alluxio data size under the path, grouped by worker.\n+ */\n+public class LsPathInAlluxioCommand extends AbstractFileSystemCommand {\n+  private static final String READABLE_OPTION_NAME = \"h\";\n+  private static final Option READABLE_OPTION =\n+          Option.builder(READABLE_OPTION_NAME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a9e4fbef689981130b15d475922d46e87551f0"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NTAwNzEwOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fs/command/LsPathInAlluxioCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMDo0MzowNFrOHBWr5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMDo0MzowNFrOHBWr5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE4MjMwOA==", "bodyText": "how is this different from DuCommand? can we add an option to Du to group output by workers?", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r471182308", "createdAt": "2020-08-17T00:43:04Z", "author": {"login": "apc999"}, "path": "shell/src/main/java/alluxio/cli/fs/command/LsPathInAlluxioCommand.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.cli.fs.command;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.client.file.URIStatus;\n+import alluxio.exception.AlluxioException;\n+import alluxio.grpc.ListStatusPOptions;\n+import alluxio.util.FormatUtils;\n+import alluxio.wire.BlockLocation;\n+import alluxio.wire.FileBlockInfo;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+\n+import java.io.IOException;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.HashMap;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Displays information for In-Alluxio data size under the path, grouped by worker.\n+ */\n+public class LsPathInAlluxioCommand extends AbstractFileSystemCommand {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a9e4fbef689981130b15d475922d46e87551f0"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NTAwNzIzOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fs/command/LsPathInAlluxioCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMDo0MzoxNlrOHBWr-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMDo0MzoxNlrOHBWr-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE4MjMyOA==", "bodyText": "indentation", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r471182328", "createdAt": "2020-08-17T00:43:16Z", "author": {"login": "apc999"}, "path": "shell/src/main/java/alluxio/cli/fs/command/LsPathInAlluxioCommand.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.cli.fs.command;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.client.file.URIStatus;\n+import alluxio.exception.AlluxioException;\n+import alluxio.grpc.ListStatusPOptions;\n+import alluxio.util.FormatUtils;\n+import alluxio.wire.BlockLocation;\n+import alluxio.wire.FileBlockInfo;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+\n+import java.io.IOException;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.HashMap;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Displays information for In-Alluxio data size under the path, grouped by worker.\n+ */\n+public class LsPathInAlluxioCommand extends AbstractFileSystemCommand {\n+  private static final String READABLE_OPTION_NAME = \"h\";\n+  private static final Option READABLE_OPTION =\n+          Option.builder(READABLE_OPTION_NAME)\n+                  .required(false)\n+                  .hasArg(false)\n+                  .desc(\"print sizes in human readable format (e.g., 1KB 234MB 2GB)\")\n+                  .build();\n+\n+  /**\n+   * Constructs a new instance to display information for In-Alluxio data size under\n+   * the path, grouped by worker.\n+   *\n+   * @param fsContext the filesystem of Alluxio\n+   */\n+  public LsPathInAlluxioCommand(@Nullable FileSystemContext fsContext) {\n+    super(fsContext);\n+  }\n+\n+  /**\n+   * Displays information for In-Alluxio data size under the path, grouped by worker.\n+   *\n+   * @param path     The {@link AlluxioURI} path as the input of the command\n+   * @param readable whether to print info of human readable format\n+   */\n+  private void lsPathInAlluxio(AlluxioURI path, boolean readable)\n+          throws AlluxioException, IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a9e4fbef689981130b15d475922d46e87551f0"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTc2ODUyOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxNDozNTo1OFrOHcIAGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxNDozNTo1OFrOHcIAGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1MzI3Mw==", "bodyText": "What is the difference between MID_1 and MID_2? I think maybe you can add comments to each with an example, like below, and the \"aaa bbb\" are one sample output.\n  // aaaaaaaa bbbb cccc dddd e\n  private static final String LONG_INFO_FORMAT = \"%-13s %-16s %-16s %-25s %s\";\n  // aaaaaaaa bbbb cccc dddd\n  private static final String MID_1_INFO_FORMAT = \"%-13s %-16s %-16s %s\";\n  // aaaaaaaa bbbb cccc dddddddddd\n  private static final String MID_2_INFO_FORMAT = \"%-13s %-16s %-25s %s\";", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r499253273", "createdAt": "2020-10-04T14:35:58Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "diffHunk": "@@ -38,13 +42,16 @@\n @ThreadSafe\n @PublicApi\n public final class DuCommand extends AbstractFileSystemCommand {\n-  private static final String LONG_INFO_FORMAT = \"%-13s %-16s %-16s %s\";\n+  private static final String LONG_INFO_FORMAT = \"%-13s %-16s %-16s %-25s %s\";\n+  private static final String MID_1_INFO_FORMAT = \"%-13s %-16s %-16s %s\";\n+  private static final String MID_2_INFO_FORMAT = \"%-13s %-16s %-25s %s\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8e0c1bcf08ab92c981c381964e451b8f0c6c448"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTc2OTczOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxNDozNzo0MlrOHcIAuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxNDozNzo0MlrOHcIAuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1MzQzMg==", "bodyText": "What is the difference between:\ncl.hasOption(MEMORY_OPTION_NAME) ? Optional.of(\"In Memory\") : Optional.empty()\nand\ncl.hasOption(MEMORY_OPTION_NAME) ? \"In Memory\" : \"\"", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r499253432", "createdAt": "2020-10-04T14:37:42Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "diffHunk": "@@ -83,7 +98,9 @@ public String getCommandName() {\n   @Override\n   protected void processHeader(CommandLine cl) {\n     printInfo(\"File Size\", \"In Alluxio\",\n-        cl.hasOption(MEMORY_OPTION_NAME) ? \"In Memory\" : \"\", \"Path\");\n+        cl.hasOption(MEMORY_OPTION_NAME) ? Optional.of(\"In Memory\") : Optional.empty(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8e0c1bcf08ab92c981c381964e451b8f0c6c448"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTc3MDYxOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxNDozOToxM1rOHcIBLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxNDozOToxM1rOHcIBLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1MzU0OA==", "bodyText": "Why not\nString workerHostName = groupByWorker ? \"total\" : \"\"?", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r499253548", "createdAt": "2020-10-04T14:39:13Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "diffHunk": "@@ -108,28 +126,50 @@ protected void runPlainPath(AlluxioURI path, CommandLine cl)\n    * @param statuses the statuses of files and folders\n    * @param readable whether to print info of human readable format\n    * @param summarize whether to display the aggregate summary lengths\n+   * @param groupByWorker whether to display In-Alluxio groupByWorker\n    * @param addMemory whether to display the memory size and percentage information\n    */\n   protected static void getSizeInfo(AlluxioURI path, List<URIStatus> statuses,\n-      boolean readable, boolean summarize, boolean addMemory) {\n+      boolean readable, boolean summarize, boolean groupByWorker, boolean addMemory) {\n+    Optional<String> workerHostName = groupByWorker ? Optional.of(\"total\") : Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8e0c1bcf08ab92c981c381964e451b8f0c6c448"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTc3MTkxOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxNDo0MDo0OFrOHcIB1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxNDo0MDo0OFrOHcIB1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1MzcxOA==", "bodyText": "Same here, why do we need Optional?", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r499253718", "createdAt": "2020-10-04T14:40:48Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "diffHunk": "@@ -108,28 +126,50 @@ protected void runPlainPath(AlluxioURI path, CommandLine cl)\n    * @param statuses the statuses of files and folders\n    * @param readable whether to print info of human readable format\n    * @param summarize whether to display the aggregate summary lengths\n+   * @param groupByWorker whether to display In-Alluxio groupByWorker\n    * @param addMemory whether to display the memory size and percentage information\n    */\n   protected static void getSizeInfo(AlluxioURI path, List<URIStatus> statuses,\n-      boolean readable, boolean summarize, boolean addMemory) {\n+      boolean readable, boolean summarize, boolean groupByWorker, boolean addMemory) {\n+    Optional<String> workerHostName = groupByWorker ? Optional.of(\"total\") : Optional.empty();\n     if (summarize) {\n       long totalSize = 0;\n       long sizeInAlluxio = 0;\n       long sizeInMem = 0;\n+      Map<String, Long> distributionMap = new HashMap<>();\n       for (URIStatus status : statuses) {\n         if (!status.isFolder()) {\n           long size = status.getLength();\n           totalSize += size;\n           sizeInMem += size * status.getInMemoryPercentage();\n           sizeInAlluxio += size * status.getInAlluxioPercentage();\n         }\n+        if (groupByWorker) {\n+          for (FileBlockInfo fileBlockInfo : status.getFileBlockInfos()) {\n+            long length = fileBlockInfo.getBlockInfo().getLength();\n+            for (BlockLocation blockLocation : fileBlockInfo.getBlockInfo().getLocations()) {\n+              distributionMap.put(blockLocation.getWorkerAddress().getHost(),\n+                      distributionMap.getOrDefault(\n+                              blockLocation.getWorkerAddress().getHost(), 0L) + length);\n+            }\n+          }\n+        }\n       }\n       String sizeMessage = readable ? FormatUtils.getSizeFromBytes(totalSize)\n           : String.valueOf(totalSize);\n       String inAlluxioMessage = getFormattedValues(readable, sizeInAlluxio / 100, totalSize);\n-      String inMemMessage = addMemory\n-          ? getFormattedValues(readable, sizeInMem / 100, totalSize) : \"\";\n-      printInfo(sizeMessage, inAlluxioMessage, inMemMessage, path.toString());\n+      Optional<String> inMemMessage = addMemory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8e0c1bcf08ab92c981c381964e451b8f0c6c448"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTc3MjQ1OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxNDo0MToyNVrOHcICFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxNDo0MToyNVrOHcICFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1Mzc4Mw==", "bodyText": "This looks duplicate of another code block. Extract into a method?", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r499253783", "createdAt": "2020-10-04T14:41:25Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "diffHunk": "@@ -138,9 +178,27 @@ protected static void getSizeInfo(AlluxioURI path, List<URIStatus> statuses,\n               : String.valueOf(totalSize);\n           String inAlluxioMessage = getFormattedValues(readable,\n               status.getInAlluxioPercentage() * totalSize / 100, totalSize);\n-          String inMemMessage = addMemory ? getFormattedValues(readable,\n-              status.getInMemoryPercentage() * totalSize / 100, totalSize) : \"\";\n-          printInfo(sizeMessage, inAlluxioMessage, inMemMessage, status.getPath());\n+          Optional<String> inMemMessage = addMemory ? Optional.of(getFormattedValues(readable,\n+              status.getInMemoryPercentage() * totalSize / 100, totalSize)) : Optional.empty();\n+\n+          Map<String, Long> distributionMap = new HashMap<>();\n+          if (groupByWorker) {\n+            for (FileBlockInfo fileBlockInfo : status.getFileBlockInfos()) {\n+              long length = fileBlockInfo.getBlockInfo().getLength();\n+              for (BlockLocation blockLocation : fileBlockInfo.getBlockInfo().getLocations()) {\n+                distributionMap.put(blockLocation.getWorkerAddress().getHost(),\n+                        distributionMap.getOrDefault(\n+                                blockLocation.getWorkerAddress().getHost(), 0L) + length);\n+              }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8e0c1bcf08ab92c981c381964e451b8f0c6c448"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTc3MjgxOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxNDo0MTo1MFrOHcICRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxNDo0MTo1MFrOHcICRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1MzgzMQ==", "bodyText": "Why need Optional?", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r499253831", "createdAt": "2020-10-04T14:41:50Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "diffHunk": "@@ -138,9 +178,27 @@ protected static void getSizeInfo(AlluxioURI path, List<URIStatus> statuses,\n               : String.valueOf(totalSize);\n           String inAlluxioMessage = getFormattedValues(readable,\n               status.getInAlluxioPercentage() * totalSize / 100, totalSize);\n-          String inMemMessage = addMemory ? getFormattedValues(readable,\n-              status.getInMemoryPercentage() * totalSize / 100, totalSize) : \"\";\n-          printInfo(sizeMessage, inAlluxioMessage, inMemMessage, status.getPath());\n+          Optional<String> inMemMessage = addMemory ? Optional.of(getFormattedValues(readable,\n+              status.getInMemoryPercentage() * totalSize / 100, totalSize)) : Optional.empty();\n+\n+          Map<String, Long> distributionMap = new HashMap<>();\n+          if (groupByWorker) {\n+            for (FileBlockInfo fileBlockInfo : status.getFileBlockInfos()) {\n+              long length = fileBlockInfo.getBlockInfo().getLength();\n+              for (BlockLocation blockLocation : fileBlockInfo.getBlockInfo().getLocations()) {\n+                distributionMap.put(blockLocation.getWorkerAddress().getHost(),\n+                        distributionMap.getOrDefault(\n+                                blockLocation.getWorkerAddress().getHost(), 0L) + length);\n+              }\n+            }\n+          }\n+          Optional<String> inMem = inMemMessage.isPresent() ? Optional.of(\"\") : inMemMessage;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8e0c1bcf08ab92c981c381964e451b8f0c6c448"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTc3ODMzOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxNDo0OToxNlrOHcIFEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxNDo0OToxNlrOHcIFEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NDU0NQ==", "bodyText": "There should be multiple ways to make this better:\n\n\nGenerate the FORMAT string based on whether the optional are present, then String.format(generatedFormat, obj[]) give it the format and the list of strings. You can decide how many items in the obj[] based on whether they are present.\n\n\nAlso generate the format, with 5 elements, but if one element (for example inMemMessage.equals(\"\")) then you can change the length for that part to maybe 0 or 1?\n\n\nUp to you if you have better ideas.", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r499254545", "createdAt": "2020-10-04T14:49:16Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "diffHunk": "@@ -171,17 +229,29 @@ private static String getFormattedValues(boolean readable, long size, long total\n    * @param inAlluxioMessage the in Alluxio size message to print\n    * @param inMemMessage the in memory size message to print\n    * @param path the path to print\n+   * @param workerHostName the worker host name to print\n    */\n-  private static void printInfo(String sizeMessage,\n-      String inAlluxioMessage, String inMemMessage, String path) {\n-    System.out.println(inMemMessage.isEmpty()\n-        ? String.format(SHORT_INFO_FORMAT, sizeMessage, inAlluxioMessage, path)\n-        : String.format(LONG_INFO_FORMAT, sizeMessage, inAlluxioMessage, inMemMessage, path));\n+  private static void printInfo(String sizeMessage, String inAlluxioMessage,\n+      Optional<String> inMemMessage, String path, Optional<String> workerHostName) {\n+    String message;\n+    if (inMemMessage.isPresent() && workerHostName.isPresent()) {\n+      message = String.format(LONG_INFO_FORMAT, sizeMessage, inAlluxioMessage,\n+              inMemMessage.get(), workerHostName.get(), path);\n+    } else if (inMemMessage.isPresent()) {\n+      message = String.format(MID_1_INFO_FORMAT, sizeMessage, inAlluxioMessage,\n+              inMemMessage.get(), path);\n+    } else if (workerHostName.isPresent()) {\n+      message = String.format(MID_2_INFO_FORMAT, sizeMessage, inAlluxioMessage,\n+              workerHostName.get(), path);\n+    } else {\n+      message = String.format(SHORT_INFO_FORMAT, sizeMessage, inAlluxioMessage, path);\n+    }\n+    System.out.println(message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8e0c1bcf08ab92c981c381964e451b8f0c6c448"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzI2MTYwOnYy", "diffSide": "RIGHT", "path": "tests/src/test/java/alluxio/client/cli/fs/command/DuCommandIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTo1NDo0NFrOHdOvTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTo1NDo0NFrOHdOvTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQxMjIzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                expected += \"File Size     In Alluxio       Path\\n\";\n          \n          \n            \n                expected += ExceptionMessage.PATH_DOES_NOT_EXIST.getMessage(\"/testRoot/noneExisting\") + \"\\n\";\n          \n          \n            \n                expected += String.format(\"File Size     In Alluxio       Path%n%s%n\", \n          \n          \n            \n                      ExceptionMessage.PATH_DOES_NOT_EXIST.getMessage(\"/testRoot/noneExisting\"));", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r500412236", "createdAt": "2020-10-06T15:54:44Z", "author": {"login": "jiacheliu3"}, "path": "tests/src/test/java/alluxio/client/cli/fs/command/DuCommandIntegrationTest.java", "diffHunk": "@@ -40,24 +40,42 @@ public void du() throws Exception {\n     sFsShell.run(\"du\", \"/testRoot/noneExisting\");\n     expected += \"File Size     In Alluxio       Path\\n\";\n     expected += ExceptionMessage.PATH_DOES_NOT_EXIST.getMessage(\"/testRoot/noneExisting\") + \"\\n\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49e53522d99f5be0c9c76bc2287ad68deb3e10db"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzI3MTI5OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTo1Njo0N1rOHdO1VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTo1Njo0N1rOHdO1VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQxMzc4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              //File Size     In Alluxio       In Memory        Worker Host Name          Path\n          \n          \n            \n              // File Size     In Alluxio       In Memory        Worker Host Name          Path", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r500413780", "createdAt": "2020-10-06T15:56:47Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "diffHunk": "@@ -38,13 +42,20 @@\n @ThreadSafe\n @PublicApi\n public final class DuCommand extends AbstractFileSystemCommand {\n-  private static final String LONG_INFO_FORMAT = \"%-13s %-16s %-16s %s\";\n-  private static final String SHORT_INFO_FORMAT = \"%-13s %-16s %s\";\n+  //File Size     In Alluxio       In Memory        Worker Host Name          Path", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49e53522d99f5be0c9c76bc2287ad68deb3e10db"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzI3MjY3OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTo1NzowNFrOHdO2IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTo1NzowNFrOHdO2IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQxMzk4NQ==", "bodyText": "Same here", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r500413985", "createdAt": "2020-10-06T15:57:04Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "diffHunk": "@@ -38,13 +42,20 @@\n @ThreadSafe\n @PublicApi\n public final class DuCommand extends AbstractFileSystemCommand {\n-  private static final String LONG_INFO_FORMAT = \"%-13s %-16s %-16s %s\";\n-  private static final String SHORT_INFO_FORMAT = \"%-13s %-16s %s\";\n+  //File Size     In Alluxio       In Memory        Worker Host Name          Path\n+  private static final String G_MEMORY_OPTION_FORMAT = \"%-13s %-16s %-16s %-25s %s\";\n+  //File Size     In Alluxio       In Memory        Path", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49e53522d99f5be0c9c76bc2287ad68deb3e10db"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzI3NTY1OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTo1Nzo0NlrOHdO4BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTo1Nzo0NlrOHdO4BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQxNDQ2OQ==", "bodyText": "What about changing \"G\" to \"GROUPED\"?", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r500414469", "createdAt": "2020-10-06T15:57:46Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "diffHunk": "@@ -38,13 +42,20 @@\n @ThreadSafe\n @PublicApi\n public final class DuCommand extends AbstractFileSystemCommand {\n-  private static final String LONG_INFO_FORMAT = \"%-13s %-16s %-16s %s\";\n-  private static final String SHORT_INFO_FORMAT = \"%-13s %-16s %s\";\n+  //File Size     In Alluxio       In Memory        Worker Host Name          Path\n+  private static final String G_MEMORY_OPTION_FORMAT = \"%-13s %-16s %-16s %-25s %s\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49e53522d99f5be0c9c76bc2287ad68deb3e10db"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzI3NzQyOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTo1ODoxNVrOHdO5QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTo1ODo0OFrOHdO6xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQxNDc4NA==", "bodyText": "Does it make sense to work with -m too?", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r500414784", "createdAt": "2020-10-06T15:58:15Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "diffHunk": "@@ -38,13 +42,20 @@\n @ThreadSafe\n @PublicApi\n public final class DuCommand extends AbstractFileSystemCommand {\n-  private static final String LONG_INFO_FORMAT = \"%-13s %-16s %-16s %s\";\n-  private static final String SHORT_INFO_FORMAT = \"%-13s %-16s %s\";\n+  //File Size     In Alluxio       In Memory        Worker Host Name          Path\n+  private static final String G_MEMORY_OPTION_FORMAT = \"%-13s %-16s %-16s %-25s %s\";\n+  //File Size     In Alluxio       In Memory        Path\n+  private static final String MEMORY_OPTION_FORMAT = \"%-13s %-16s %-16s %s\";\n+  //File Size     In Alluxio       Worker Host Name          Path\n+  private static final String G_OPTION_FORMAT = \"%-13s %-16s %-25s %s\";\n+  //File Size     In Alluxio       Path\n+  private static final String NON_G_MEMORY_FORMAT = \"%-13s %-16s %s\";\n   private static final String VALUE_AND_PERCENT_FORMAT = \"%s (%d%%)\";\n \n   private static final String MEMORY_OPTION_NAME = \"memory\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49e53522d99f5be0c9c76bc2287ad68deb3e10db"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQxNTE3Mg==", "bodyText": "--memory is the full option name and -m is the short form. You can refer to how other options are done.", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r500415172", "createdAt": "2020-10-06T15:58:48Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "diffHunk": "@@ -38,13 +42,20 @@\n @ThreadSafe\n @PublicApi\n public final class DuCommand extends AbstractFileSystemCommand {\n-  private static final String LONG_INFO_FORMAT = \"%-13s %-16s %-16s %s\";\n-  private static final String SHORT_INFO_FORMAT = \"%-13s %-16s %s\";\n+  //File Size     In Alluxio       In Memory        Worker Host Name          Path\n+  private static final String G_MEMORY_OPTION_FORMAT = \"%-13s %-16s %-16s %-25s %s\";\n+  //File Size     In Alluxio       In Memory        Path\n+  private static final String MEMORY_OPTION_FORMAT = \"%-13s %-16s %-16s %s\";\n+  //File Size     In Alluxio       Worker Host Name          Path\n+  private static final String G_OPTION_FORMAT = \"%-13s %-16s %-25s %s\";\n+  //File Size     In Alluxio       Path\n+  private static final String NON_G_MEMORY_FORMAT = \"%-13s %-16s %s\";\n   private static final String VALUE_AND_PERCENT_FORMAT = \"%s (%d%%)\";\n \n   private static final String MEMORY_OPTION_NAME = \"memory\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQxNDc4NA=="}, "originalCommit": {"oid": "49e53522d99f5be0c9c76bc2287ad68deb3e10db"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzMwODA5OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjowNTowM1rOHdPMZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjowNTowM1rOHdPMZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQxOTY4NQ==", "bodyText": "Reorder the parameters so the two Optionals are together?", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r500419685", "createdAt": "2020-10-06T16:05:03Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "diffHunk": "@@ -171,17 +256,29 @@ private static String getFormattedValues(boolean readable, long size, long total\n    * @param inAlluxioMessage the in Alluxio size message to print\n    * @param inMemMessage the in memory size message to print\n    * @param path the path to print\n+   * @param workerHostName the worker host name to print\n    */\n-  private static void printInfo(String sizeMessage,\n-      String inAlluxioMessage, String inMemMessage, String path) {\n-    System.out.println(inMemMessage.isEmpty()\n-        ? String.format(SHORT_INFO_FORMAT, sizeMessage, inAlluxioMessage, path)\n-        : String.format(LONG_INFO_FORMAT, sizeMessage, inAlluxioMessage, inMemMessage, path));\n+  private static void printInfo(String sizeMessage, String inAlluxioMessage,\n+      Optional<String> inMemMessage, String path, Optional<String> workerHostName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49e53522d99f5be0c9c76bc2287ad68deb3e10db"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzMxMzYwOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjowNjoxOFrOHdPP9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjowNjoxOFrOHdPP9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQyMDU5Ng==", "bodyText": "Did you just re-use this variable? Try not to do this.", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r500420596", "createdAt": "2020-10-06T16:06:18Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "diffHunk": "@@ -138,14 +182,55 @@ protected static void getSizeInfo(AlluxioURI path, List<URIStatus> statuses,\n               : String.valueOf(totalSize);\n           String inAlluxioMessage = getFormattedValues(readable,\n               status.getInAlluxioPercentage() * totalSize / 100, totalSize);\n-          String inMemMessage = addMemory ? getFormattedValues(readable,\n-              status.getInMemoryPercentage() * totalSize / 100, totalSize) : \"\";\n-          printInfo(sizeMessage, inAlluxioMessage, inMemMessage, status.getPath());\n+          Optional<String> inMemMessage = addMemory ? Optional.of(getFormattedValues(readable,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49e53522d99f5be0c9c76bc2287ad68deb3e10db"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzM1MzI2OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoxNjoxNVrOHdPpLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoxNjoxNVrOHdPpLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQyNzA1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  //If inMemMessage is present, underline information composed with In-Alluxio size\n          \n          \n            \n                  //and worker host name need a \"\" as placeholder. If inMemMessage is not present,\n          \n          \n            \n                  //which means inMemMessage is not exist, underline information need an empty Optional.\n          \n          \n            \n                  //e.g. inMemMessage is present, inMem should be \"\"\n          \n          \n            \n                  //File Size     In Alluxio       In Memory        Worker Host Name          Path\n          \n          \n            \n                  //2             2                2                total                     /\n          \n          \n            \n                  //              2                                 node1\n          \n          \n            \n                  //e.g. inMemMessage is not present, inMem should be an empty Optional\n          \n          \n            \n                  //File Size     In Alluxio       Worker Host Name          Path\n          \n          \n            \n                  //2             2                total                     /\n          \n          \n            \n                  //              2                node1\n          \n          \n            \n                  // If inMemMessage is present, the \u201cIn Alluxio\u201d and \"Worker Host Name\"\n          \n          \n            \n                  // columns need an empty string as placeholders. \n          \n          \n            \n                  // Otherwise we use an empty Optional.\n          \n          \n            \n                  // e.g. inMemMessage is present, inMem should be \"\"\n          \n          \n            \n                  // File Size     In Alluxio       In Memory        Worker Host Name          Path\n          \n          \n            \n                  // 2                 2                    2                        total                                  /\n          \n          \n            \n                  //                    2                                              node1\n          \n          \n            \n                  //e.g. inMemMessage is not present, inMem should be an empty Optional\n          \n          \n            \n                  //File Size     In Alluxio       Worker Host Name          Path\n          \n          \n            \n                  //2                 2                    total                                  /\n          \n          \n            \n                  //                   2                    node1", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r500427052", "createdAt": "2020-10-06T16:16:15Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "diffHunk": "@@ -108,28 +130,50 @@ protected void runPlainPath(AlluxioURI path, CommandLine cl)\n    * @param statuses the statuses of files and folders\n    * @param readable whether to print info of human readable format\n    * @param summarize whether to display the aggregate summary lengths\n+   * @param groupByWorker whether to display In-Alluxio groupByWorker\n    * @param addMemory whether to display the memory size and percentage information\n    */\n   protected static void getSizeInfo(AlluxioURI path, List<URIStatus> statuses,\n-      boolean readable, boolean summarize, boolean addMemory) {\n+      boolean readable, boolean summarize, boolean groupByWorker, boolean addMemory) {\n+    Optional<String> workerHostName = groupByWorker ? Optional.of(\"total\") : Optional.empty();\n     if (summarize) {\n       long totalSize = 0;\n       long sizeInAlluxio = 0;\n       long sizeInMem = 0;\n+      Map<String, Long> distributionMap = new HashMap<>();\n       for (URIStatus status : statuses) {\n         if (!status.isFolder()) {\n           long size = status.getLength();\n           totalSize += size;\n           sizeInMem += size * status.getInMemoryPercentage();\n           sizeInAlluxio += size * status.getInAlluxioPercentage();\n         }\n+        if (groupByWorker) {\n+          fillDistributionMap(distributionMap, status);\n+        }\n       }\n       String sizeMessage = readable ? FormatUtils.getSizeFromBytes(totalSize)\n           : String.valueOf(totalSize);\n       String inAlluxioMessage = getFormattedValues(readable, sizeInAlluxio / 100, totalSize);\n-      String inMemMessage = addMemory\n-          ? getFormattedValues(readable, sizeInMem / 100, totalSize) : \"\";\n-      printInfo(sizeMessage, inAlluxioMessage, inMemMessage, path.toString());\n+      Optional<String> inMemMessage = addMemory\n+          ? Optional.of(getFormattedValues(readable, sizeInMem / 100, totalSize))\n+              : Optional.empty();\n+\n+      printInfo(sizeMessage, inAlluxioMessage, inMemMessage, path.toString(), workerHostName);\n+\n+      //If inMemMessage is present, underline information composed with In-Alluxio size\n+      //and worker host name need a \"\" as placeholder. If inMemMessage is not present,\n+      //which means inMemMessage is not exist, underline information need an empty Optional.\n+      //e.g. inMemMessage is present, inMem should be \"\"\n+      //File Size     In Alluxio       In Memory        Worker Host Name          Path\n+      //2             2                2                total                     /\n+      //              2                                 node1\n+      //e.g. inMemMessage is not present, inMem should be an empty Optional\n+      //File Size     In Alluxio       Worker Host Name          Path\n+      //2             2                total                     /\n+      //              2                node1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49e53522d99f5be0c9c76bc2287ad68deb3e10db"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzM1NzQxOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoxNzoxNFrOHdPrzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoxNzoxNFrOHdPrzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQyNzcyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Get each block info under the url status, then accumulate block size\n          \n          \n            \n               * grouped by worker host name, finally record info into distribution map.\n          \n          \n            \n               * Gets each block info under the url status, then accumulates block sizes\n          \n          \n            \n               * grouped by the worker host name, finally records info into a distribution map.", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r500427724", "createdAt": "2020-10-06T16:17:14Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "diffHunk": "@@ -138,14 +182,55 @@ protected static void getSizeInfo(AlluxioURI path, List<URIStatus> statuses,\n               : String.valueOf(totalSize);\n           String inAlluxioMessage = getFormattedValues(readable,\n               status.getInAlluxioPercentage() * totalSize / 100, totalSize);\n-          String inMemMessage = addMemory ? getFormattedValues(readable,\n-              status.getInMemoryPercentage() * totalSize / 100, totalSize) : \"\";\n-          printInfo(sizeMessage, inAlluxioMessage, inMemMessage, status.getPath());\n+          Optional<String> inMemMessage = addMemory ? Optional.of(getFormattedValues(readable,\n+              status.getInMemoryPercentage() * totalSize / 100, totalSize)) : Optional.empty();\n+\n+          Map<String, Long> distributionMap = new HashMap<>();\n+          if (groupByWorker) {\n+            fillDistributionMap(distributionMap, status);\n+          }\n+          Optional<String> inMem = inMemMessage.isPresent() ? Optional.of(\"\") : inMemMessage;\n+          printInfo(sizeMessage, inAlluxioMessage, inMemMessage, status.getPath(), workerHostName);\n+          getSizeInfoGroupByWorker(distributionMap, readable, inMem);\n         }\n       }\n     }\n   }\n \n+  /**\n+   * Get each block info under the url status, then accumulate block size\n+   * grouped by worker host name, finally record info into distribution map.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49e53522d99f5be0c9c76bc2287ad68deb3e10db"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzM1ODkwOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoxNzozOFrOHdPswQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoxNzozOFrOHdPswQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQyNzk2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param status whether to print info of human readable format\n          \n          \n            \n               * @param status whether to print info in human readable format", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r500427969", "createdAt": "2020-10-06T16:17:38Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "diffHunk": "@@ -138,14 +182,55 @@ protected static void getSizeInfo(AlluxioURI path, List<URIStatus> statuses,\n               : String.valueOf(totalSize);\n           String inAlluxioMessage = getFormattedValues(readable,\n               status.getInAlluxioPercentage() * totalSize / 100, totalSize);\n-          String inMemMessage = addMemory ? getFormattedValues(readable,\n-              status.getInMemoryPercentage() * totalSize / 100, totalSize) : \"\";\n-          printInfo(sizeMessage, inAlluxioMessage, inMemMessage, status.getPath());\n+          Optional<String> inMemMessage = addMemory ? Optional.of(getFormattedValues(readable,\n+              status.getInMemoryPercentage() * totalSize / 100, totalSize)) : Optional.empty();\n+\n+          Map<String, Long> distributionMap = new HashMap<>();\n+          if (groupByWorker) {\n+            fillDistributionMap(distributionMap, status);\n+          }\n+          Optional<String> inMem = inMemMessage.isPresent() ? Optional.of(\"\") : inMemMessage;\n+          printInfo(sizeMessage, inAlluxioMessage, inMemMessage, status.getPath(), workerHostName);\n+          getSizeInfoGroupByWorker(distributionMap, readable, inMem);\n         }\n       }\n     }\n   }\n \n+  /**\n+   * Get each block info under the url status, then accumulate block size\n+   * grouped by worker host name, finally record info into distribution map.\n+   *\n+   * @param distributionMap map of workers and their total block size\n+   * @param status whether to print info of human readable format", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49e53522d99f5be0c9c76bc2287ad68deb3e10db"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzM1OTc2OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoxNzo0OFrOHdPtSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoxNzo0OFrOHdPtSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQyODEwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param distributionMap map of workers and their total block size\n          \n          \n            \n               * @param distributionMap map of workers to their total block sizes", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r500428107", "createdAt": "2020-10-06T16:17:48Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "diffHunk": "@@ -138,14 +182,55 @@ protected static void getSizeInfo(AlluxioURI path, List<URIStatus> statuses,\n               : String.valueOf(totalSize);\n           String inAlluxioMessage = getFormattedValues(readable,\n               status.getInAlluxioPercentage() * totalSize / 100, totalSize);\n-          String inMemMessage = addMemory ? getFormattedValues(readable,\n-              status.getInMemoryPercentage() * totalSize / 100, totalSize) : \"\";\n-          printInfo(sizeMessage, inAlluxioMessage, inMemMessage, status.getPath());\n+          Optional<String> inMemMessage = addMemory ? Optional.of(getFormattedValues(readable,\n+              status.getInMemoryPercentage() * totalSize / 100, totalSize)) : Optional.empty();\n+\n+          Map<String, Long> distributionMap = new HashMap<>();\n+          if (groupByWorker) {\n+            fillDistributionMap(distributionMap, status);\n+          }\n+          Optional<String> inMem = inMemMessage.isPresent() ? Optional.of(\"\") : inMemMessage;\n+          printInfo(sizeMessage, inAlluxioMessage, inMemMessage, status.getPath(), workerHostName);\n+          getSizeInfoGroupByWorker(distributionMap, readable, inMem);\n         }\n       }\n     }\n   }\n \n+  /**\n+   * Get each block info under the url status, then accumulate block size\n+   * grouped by worker host name, finally record info into distribution map.\n+   *\n+   * @param distributionMap map of workers and their total block size", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49e53522d99f5be0c9c76bc2287ad68deb3e10db"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzM3Mjc0OnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoyMDo1NlrOHdP1dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoyMDo1NlrOHdP1dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzMDE5Nw==", "bodyText": "I guess maybe this one can be named SHORT_INFO_FORMAT? What do you think?", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r500430197", "createdAt": "2020-10-06T16:20:56Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "diffHunk": "@@ -38,13 +42,20 @@\n @ThreadSafe\n @PublicApi\n public final class DuCommand extends AbstractFileSystemCommand {\n-  private static final String LONG_INFO_FORMAT = \"%-13s %-16s %-16s %s\";\n-  private static final String SHORT_INFO_FORMAT = \"%-13s %-16s %s\";\n+  //File Size     In Alluxio       In Memory        Worker Host Name          Path\n+  private static final String G_MEMORY_OPTION_FORMAT = \"%-13s %-16s %-16s %-25s %s\";\n+  //File Size     In Alluxio       In Memory        Path\n+  private static final String MEMORY_OPTION_FORMAT = \"%-13s %-16s %-16s %s\";\n+  //File Size     In Alluxio       Worker Host Name          Path\n+  private static final String G_OPTION_FORMAT = \"%-13s %-16s %-25s %s\";\n+  //File Size     In Alluxio       Path\n+  private static final String NON_G_MEMORY_FORMAT = \"%-13s %-16s %s\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49e53522d99f5be0c9c76bc2287ad68deb3e10db"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzM3NjQyOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoyMTo1NFrOHdP33Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoyMTo1NFrOHdP33Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzMDgxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param groupByWorker whether to display In-Alluxio groupByWorker\n          \n          \n            \n               * @param groupByWorker whether to group by worker", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r500430813", "createdAt": "2020-10-06T16:21:54Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "diffHunk": "@@ -108,28 +130,50 @@ protected void runPlainPath(AlluxioURI path, CommandLine cl)\n    * @param statuses the statuses of files and folders\n    * @param readable whether to print info of human readable format\n    * @param summarize whether to display the aggregate summary lengths\n+   * @param groupByWorker whether to display In-Alluxio groupByWorker", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49e53522d99f5be0c9c76bc2287ad68deb3e10db"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzM3ODIxOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoyMjoxN1rOHdP4-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoyMjoxN1rOHdP4-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzMTA5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                              .desc(\"displays information for In-Alluxio data size under the path, \"\n          \n          \n            \n                              .desc(\"display information for In-Alluxio data size under the path, \"", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r500431097", "createdAt": "2020-10-06T16:22:17Z", "author": {"login": "jiacheliu3"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "diffHunk": "@@ -68,6 +79,14 @@\n           .desc(\"display the aggregate summary of file lengths being displayed\")\n           .build();\n \n+  private static final Option GROUP_BY_WORKER_OPTION =\n+          Option.builder(GROUP_BY_WORKER_OPTION_NAME)\n+                  .required(false)\n+                  .hasArg(false)\n+                  .desc(\"displays information for In-Alluxio data size under the path, \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49e53522d99f5be0c9c76bc2287ad68deb3e10db"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzg1NDYxOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODoyMzozMlrOHdUgng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODoyMzozMlrOHdUgng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNjc4Mg==", "bodyText": "wrong indentation, please refer to https://docs.alluxio.io/os/user/stable/en/contributor/Code-Conventions.html#javadoc-style", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r500506782", "createdAt": "2020-10-06T18:23:32Z", "author": {"login": "apc999"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "diffHunk": "@@ -68,6 +79,14 @@\n           .desc(\"display the aggregate summary of file lengths being displayed\")\n           .build();\n \n+  private static final Option GROUP_BY_WORKER_OPTION =\n+          Option.builder(GROUP_BY_WORKER_OPTION_NAME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49e53522d99f5be0c9c76bc2287ad68deb3e10db"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzkyMDcwOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODozOToyNFrOHdVHwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODozOToyNFrOHdVHwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUxNjgwMA==", "bodyText": "How about distributionMap.compute instead of distributtionMap.put ?", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r500516800", "createdAt": "2020-10-06T18:39:24Z", "author": {"login": "apc999"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "diffHunk": "@@ -138,14 +182,55 @@ protected static void getSizeInfo(AlluxioURI path, List<URIStatus> statuses,\n               : String.valueOf(totalSize);\n           String inAlluxioMessage = getFormattedValues(readable,\n               status.getInAlluxioPercentage() * totalSize / 100, totalSize);\n-          String inMemMessage = addMemory ? getFormattedValues(readable,\n-              status.getInMemoryPercentage() * totalSize / 100, totalSize) : \"\";\n-          printInfo(sizeMessage, inAlluxioMessage, inMemMessage, status.getPath());\n+          Optional<String> inMemMessage = addMemory ? Optional.of(getFormattedValues(readable,\n+              status.getInMemoryPercentage() * totalSize / 100, totalSize)) : Optional.empty();\n+\n+          Map<String, Long> distributionMap = new HashMap<>();\n+          if (groupByWorker) {\n+            fillDistributionMap(distributionMap, status);\n+          }\n+          Optional<String> inMem = inMemMessage.isPresent() ? Optional.of(\"\") : inMemMessage;\n+          printInfo(sizeMessage, inAlluxioMessage, inMemMessage, status.getPath(), workerHostName);\n+          getSizeInfoGroupByWorker(distributionMap, readable, inMem);\n         }\n       }\n     }\n   }\n \n+  /**\n+   * Get each block info under the url status, then accumulate block size\n+   * grouped by worker host name, finally record info into distribution map.\n+   *\n+   * @param distributionMap map of workers and their total block size\n+   * @param status whether to print info of human readable format\n+   */\n+  private static void fillDistributionMap(Map<String, Long> distributionMap, URIStatus status) {\n+    for (FileBlockInfo fileBlockInfo : status.getFileBlockInfos()) {\n+      long length = fileBlockInfo.getBlockInfo().getLength();\n+      for (BlockLocation blockLocation : fileBlockInfo.getBlockInfo().getLocations()) {\n+        distributionMap.put(blockLocation.getWorkerAddress().getHost(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49e53522d99f5be0c9c76bc2287ad68deb3e10db"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzkyNjAzOnYy", "diffSide": "RIGHT", "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo0MDo0M1rOHdVK7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo0MDo0M1rOHdVK7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUxNzYxNQ==", "bodyText": "nit: sort these lines alphabetically", "url": "https://github.com/Alluxio/alluxio/pull/11942#discussion_r500517615", "createdAt": "2020-10-06T18:40:43Z", "author": {"login": "apc999"}, "path": "shell/src/main/java/alluxio/cli/fs/command/DuCommand.java", "diffHunk": "@@ -196,8 +293,11 @@ public void validateArgs(CommandLine cl) throws InvalidArgumentException {\n \n   @Override\n   public Options getOptions() {\n-    return new Options().addOption(MEMORY_OPTION)\n-        .addOption(READABLE_OPTION).addOption(SUMMARIZE_OPTION);\n+    return new Options()\n+        .addOption(MEMORY_OPTION)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49e53522d99f5be0c9c76bc2287ad68deb3e10db"}, "originalPosition": 242}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1274, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}