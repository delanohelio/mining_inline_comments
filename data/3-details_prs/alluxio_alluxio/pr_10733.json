{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMzEzMTUw", "number": 10733, "title": "Implement client side cache evictor and metastore", "bodyText": "Implement a basic metastore and LRU evictor for client side cache.", "createdAt": "2020-01-13T20:44:41Z", "url": "https://github.com/Alluxio/alluxio/pull/10733", "merged": true, "mergeCommit": {"oid": "523d9b175dfe50c7818fb641c245fd8b795754ca"}, "closed": true, "closedAt": "2020-01-14T08:05:33Z", "author": {"login": "bf8086"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6CleogH2gAyMzYyMzEzMTUwOjhiMDEwNzM2OGVhOTM3YjdhMjI3MjNiN2QzZTJhMzZlNDAyNzFhZWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb6MV1ngFqTM0MjM0NTMxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8b0107368ea937b7a22723b7d3e2a36e40271aeb", "author": {"user": {"login": "bf8086", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/8b0107368ea937b7a22723b7d3e2a36e40271aeb", "committedDate": "2020-01-13T20:43:17Z", "message": "implement evictor and metastore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f19f6243b9b7aed92371319a59869f18fed71bd", "author": {"user": {"login": "bf8086", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/6f19f6243b9b7aed92371319a59869f18fed71bd", "committedDate": "2020-01-13T20:47:12Z", "message": "clean up test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39855f9093db2056fd991c8b7fc92c737db96d74", "author": {"user": {"login": "bf8086", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/39855f9093db2056fd991c8b7fc92c737db96d74", "committedDate": "2020-01-13T20:58:20Z", "message": "Fix license header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "407ac69095500d9b76936b76dc4d768cea112cb4", "author": {"user": {"login": "bf8086", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/407ac69095500d9b76936b76dc4d768cea112cb4", "committedDate": "2020-01-13T21:39:48Z", "message": "Merge remote-tracking branch 'upstream/lite' into lite-metastore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2443241d44a45f9b835ca144654a8c45c9de67c2", "author": {"user": {"login": "bf8086", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/2443241d44a45f9b835ca144654a8c45c9de67c2", "committedDate": "2020-01-13T21:48:24Z", "message": "resolve conflicts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMTk5OTM1", "url": "https://github.com/Alluxio/alluxio/pull/10733#pullrequestreview-342199935", "createdAt": "2020-01-13T23:06:19Z", "commit": {"oid": "2443241d44a45f9b835ca144654a8c45c9de67c2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMzowNjoxOVrOFdHi8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMzowNjoxOVrOFdHi8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA3NjY1Nw==", "bodyText": "Is this implementation actually exactly the same as the HashSetMetaStore in the test? If so maybe we only need 1 of these?", "url": "https://github.com/Alluxio/alluxio/pull/10733#discussion_r366076657", "createdAt": "2020-01-13T23:06:19Z", "author": {"login": "calvinjia"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/DefaultMetaStore.java", "diffHunk": "@@ -13,43 +13,29 @@\n \n import alluxio.exception.PageNotFoundException;\n \n+import java.util.HashSet;\n+import java.util.Set;\n+\n /**\n  * The default implementation of a metadata store for pages stored in cache.\n  */\n public class DefaultMetaStore implements MetaStore {\n+  private final Set<PageId> mPageMap = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2443241d44a45f9b835ca144654a8c45c9de67c2"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMjA1MDA5", "url": "https://github.com/Alluxio/alluxio/pull/10733#pullrequestreview-342205009", "createdAt": "2020-01-13T23:19:20Z", "commit": {"oid": "2443241d44a45f9b835ca144654a8c45c9de67c2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMzoxOToyMVrOFdHyig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMzozODo0MlrOFdIJUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA4MDY1MA==", "bodyText": "looks like so. Then we should dedup and keep one impl DefaultMetaStore.", "url": "https://github.com/Alluxio/alluxio/pull/10733#discussion_r366080650", "createdAt": "2020-01-13T23:19:21Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/DefaultMetaStore.java", "diffHunk": "@@ -13,43 +13,29 @@\n \n import alluxio.exception.PageNotFoundException;\n \n+import java.util.HashSet;\n+import java.util.Set;\n+\n /**\n  * The default implementation of a metadata store for pages stored in cache.\n  */\n public class DefaultMetaStore implements MetaStore {\n+  private final Set<PageId> mPageMap = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA3NjY1Nw=="}, "originalCommit": {"oid": "2443241d44a45f9b835ca144654a8c45c9de67c2"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA4NTQxOA==", "bodyText": "is this class thread safe? If yes, please annotate it with @ThreadSafe; if not, currently LocalCacheManager does not provide any guard to protect concurrent access to this evictor from multiple threads.", "url": "https://github.com/Alluxio/alluxio/pull/10733#discussion_r366085418", "createdAt": "2020-01-13T23:35:09Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LRUCacheEvictor.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.file.cache;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+/**\n+ * LRU client-side cache eviction policy.\n+ */\n+public class LRUCacheEvictor implements CacheEvictor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2443241d44a45f9b835ca144654a8c45c9de67c2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA4NjQ4Mw==", "bodyText": "I would suggest to add user-facing propertyKey like alluxio.user.client.cache.evictor and allow to select different evictors (thought currently we have only one). This will make it easier to switch cache replacement policy without recompiling the src code", "url": "https://github.com/Alluxio/alluxio/pull/10733#discussion_r366086483", "createdAt": "2020-01-13T23:38:42Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/CacheEvictor.java", "diffHunk": "@@ -23,7 +23,7 @@\n    */\n   static CacheEvictor create() {\n     // return corresponding CacheEvictor impl\n-    return null;\n+    return new LRUCacheEvictor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2443241d44a45f9b835ca144654a8c45c9de67c2"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMjE2OTY4", "url": "https://github.com/Alluxio/alluxio/pull/10733#pullrequestreview-342216968", "createdAt": "2020-01-13T23:53:41Z", "commit": {"oid": "2443241d44a45f9b835ca144654a8c45c9de67c2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMzo1Mzo0MVrOFdIZsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMzo1Mzo0MVrOFdIZsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA5MDY3NA==", "bodyText": "Shall we cover the following cases:\n\nevict before any other operations (just make sure we don't see NPE)\nevict after all pages are put and then deleted", "url": "https://github.com/Alluxio/alluxio/pull/10733#discussion_r366090674", "createdAt": "2020-01-13T23:53:41Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/test/java/alluxio/client/file/cache/LRUCacheEvictorTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.file.cache;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Tests for the {@link LRUCacheEvictor} class.\n+ */\n+public final class LRUCacheEvictorTest {\n+  private LRUCacheEvictor mEvictor;\n+  private final PageId mFirst = new PageId(1L, 2L);\n+  private final PageId mSecond = new PageId(3L, 4L);\n+  private final PageId mThird = new PageId(5L, 6L);\n+\n+  /**\n+   * Sets up the instances.\n+   */\n+  @Before\n+  public void before() {\n+    mEvictor = new LRUCacheEvictor();\n+  }\n+\n+  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2443241d44a45f9b835ca144654a8c45c9de67c2"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5debdcf96c023f7529b13713523bffa9ff4d5794", "author": {"user": {"login": "bf8086", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/5debdcf96c023f7529b13713523bffa9ff4d5794", "committedDate": "2020-01-14T00:59:08Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMjQ5NDI1", "url": "https://github.com/Alluxio/alluxio/pull/10733#pullrequestreview-342249425", "createdAt": "2020-01-14T01:46:34Z", "commit": {"oid": "5debdcf96c023f7529b13713523bffa9ff4d5794"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMTo0NjozNFrOFdKDkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMTo0NjozNFrOFdKDkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjExNzc3OA==", "bodyText": "I think you want null instead of empty arrays?", "url": "https://github.com/Alluxio/alluxio/pull/10733#discussion_r366117778", "createdAt": "2020-01-14T01:46:34Z", "author": {"login": "calvinjia"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/CacheEvictor.java", "diffHunk": "@@ -19,11 +23,12 @@\n public interface CacheEvictor {\n \n   /**\n+   * @param conf the alluxio configuration\n    * @return a CacheEvictor instance\n    */\n-  static CacheEvictor create() {\n-    // return corresponding CacheEvictor impl\n-    return new LRUCacheEvictor();\n+  static CacheEvictor create(AlluxioConfiguration conf) {\n+    return CommonUtils.createNewClassInstance(\n+        conf.getClass(PropertyKey.USER_CLIENT_CACHE_EVICTOR_CLASS), new Class[0], new Object[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5debdcf96c023f7529b13713523bffa9ff4d5794"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMjgxNTM5", "url": "https://github.com/Alluxio/alluxio/pull/10733#pullrequestreview-342281539", "createdAt": "2020-01-14T04:05:29Z", "commit": {"oid": "5debdcf96c023f7529b13713523bffa9ff4d5794"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwNDowNToyOVrOFdLrOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwNDowNToyOVrOFdLrOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE0NDMxNA==", "bodyText": "can you mark this method and the interface def with @Nullable", "url": "https://github.com/Alluxio/alluxio/pull/10733#discussion_r366144314", "createdAt": "2020-01-14T04:05:29Z", "author": {"login": "apc999"}, "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LRUCacheEvictor.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.file.cache;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * LRU client-side cache eviction policy.\n+ */\n+@ThreadSafe\n+public class LRUCacheEvictor implements CacheEvictor {\n+  private static final int LINKED_HASH_MAP_INIT_CAPACITY = 200;\n+  private static final float LINKED_HASH_MAP_INIT_LOAD_FACTOR = 0.75f;\n+  private static final boolean LINKED_HASH_MAP_ACCESS_ORDERED = true;\n+  private static final boolean UNUSED_MAP_VALUE = true;\n+\n+  // TODO(feng): unify with worker side evictor\n+  protected final Map<PageId, Boolean> mLRUCache =\n+      Collections.synchronizedMap(new LinkedHashMap<>(LINKED_HASH_MAP_INIT_CAPACITY,\n+          LINKED_HASH_MAP_INIT_LOAD_FACTOR, LINKED_HASH_MAP_ACCESS_ORDERED));\n+\n+  @Override\n+  public void updateOnGet(PageId pageId) {\n+    mLRUCache.put(pageId, UNUSED_MAP_VALUE);\n+  }\n+\n+  @Override\n+  public void updateOnPut(PageId pageId) {\n+    mLRUCache.put(pageId, UNUSED_MAP_VALUE);\n+  }\n+\n+  @Override\n+  public void updateOnDelete(PageId pageId) {\n+    mLRUCache.remove(pageId, UNUSED_MAP_VALUE);\n+  }\n+\n+  @Override\n+  public PageId evict() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5debdcf96c023f7529b13713523bffa9ff4d5794"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMjgxNzky", "url": "https://github.com/Alluxio/alluxio/pull/10733#pullrequestreview-342281792", "createdAt": "2020-01-14T04:06:49Z", "commit": {"oid": "5debdcf96c023f7529b13713523bffa9ff4d5794"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e6c88b6e69d60975e30b6f719bac90df7ba4249", "author": {"user": {"login": "bf8086", "name": null}}, "url": "https://github.com/Alluxio/alluxio/commit/3e6c88b6e69d60975e30b6f719bac90df7ba4249", "committedDate": "2020-01-14T05:35:52Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMzQ1MzEz", "url": "https://github.com/Alluxio/alluxio/pull/10733#pullrequestreview-342345313", "createdAt": "2020-01-14T08:05:15Z", "commit": {"oid": "3e6c88b6e69d60975e30b6f719bac90df7ba4249"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3284, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}