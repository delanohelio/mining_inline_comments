{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNjQ2NTgx", "number": 10850, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODo1Nzo0MVrODdy2BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxOToyMTo0MFrODeH_GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTY4MzI0OnYy", "diffSide": "RIGHT", "path": "core/common/src/main/java/alluxio/metrics/Metric.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODo1Nzo0MVrOFmmgIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODo1Nzo0MVrOFmmgIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAyMTAyNA==", "bodyText": "Fix a bug that the new metrics name is <Instance_type>.<MetricName>.Tags.<InstanceHostname> instead of <Instance_type>.<MetricName>.<InstanceHostname>.Tags", "url": "https://github.com/Alluxio/alluxio/pull/10850#discussion_r376021024", "createdAt": "2020-02-06T18:57:41Z", "author": {"login": "LuQQiu"}, "path": "core/common/src/main/java/alluxio/metrics/Metric.java", "diffHunk": "@@ -300,32 +319,31 @@ public static String getMetricNameWithUserTag(String metricName, String userName\n   public static Metric from(String fullName, double value, MetricType metricType) {\n     String[] pieces = fullName.split(\"\\\\.\");\n     Preconditions.checkArgument(pieces.length > 1, \"Incorrect metrics name: %s.\", fullName);\n-\n+    int len = pieces.length;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "890b46f20e5a077e3d8ab42fd17dc0ee3231680f"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTY4NjcxOnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/meta/AlluxioMasterRestServiceHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODo1ODo1MVrOFmmigA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODo1ODo1MVrOFmmigA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAyMTYzMg==", "bodyText": "Every MetricRegistry.getGauges and getCounters() will do a traverse of all metrics, make a copy and return. So it will be better to reduce the call to these two methods.", "url": "https://github.com/Alluxio/alluxio/pull/10850#discussion_r376021632", "createdAt": "2020-02-06T18:58:51Z", "author": {"login": "LuQQiu"}, "path": "core/server/master/src/main/java/alluxio/master/meta/AlluxioMasterRestServiceHandler.java", "diffHunk": "@@ -850,20 +849,22 @@ public Response getWebUIMetrics() {\n       MasterWebUIMetrics response = new MasterWebUIMetrics();\n \n       MetricRegistry mr = MetricsSystem.METRIC_REGISTRY;\n+      SortedMap<String, Gauge> gauges = mr.getGauges();\n+      SortedMap<String, Counter> counters = mr.getCounters();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "890b46f20e5a077e3d8ab42fd17dc0ee3231680f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTY5NDY3OnYy", "diffSide": "LEFT", "path": "core/server/master/src/main/java/alluxio/master/metrics/DefaultMetricsMaster.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTowMTozMVrOFmmnyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTowMTozMVrOFmmnyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAyMjk4NQ==", "bodyText": "All BytesRead/Written will become actual MetricType.COUNTER. Their values will be incremented when received worker/client reported metrics.", "url": "https://github.com/Alluxio/alluxio/pull/10850#discussion_r376022985", "createdAt": "2020-02-06T19:01:31Z", "author": {"login": "LuQQiu"}, "path": "core/server/master/src/main/java/alluxio/master/metrics/DefaultMetricsMaster.java", "diffHunk": "@@ -126,65 +120,45 @@ public Object getValue() {\n     }\n   }\n \n+  private void cleanUpOrphaneMetrics() {\n+    mMetricsStore.cleanUpOrphanedMetrics();\n+  }\n+\n   private void registerAggregators() {\n     // worker metrics\n-    addAggregator(new SumInstancesAggregator(MetricKey.CLUSTER_BYTES_READ_ALLUXIO.getName(),\n-        MetricsSystem.InstanceType.WORKER, MetricKey.WORKER_BYTES_READ_ALLUXIO.getName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "890b46f20e5a077e3d8ab42fd17dc0ee3231680f"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjI1Nzg0OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/test/java/alluxio/master/metrics/MetricsMasterTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjoxNjoyN1rOFmsH4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjo1MjoyOFrOFms-QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExMzEyMw==", "bodyText": "Do we want to be testing MetricType.COUNTER?", "url": "https://github.com/Alluxio/alluxio/pull/10850#discussion_r376113123", "createdAt": "2020-02-06T22:16:27Z", "author": {"login": "calvinjia"}, "path": "core/server/master/src/test/java/alluxio/master/metrics/MetricsMasterTest.java", "diffHunk": "@@ -102,12 +102,12 @@ public void testMultiValueAggregator() throws Exception {\n     mMetricsMaster.addAggregator(\n         new SingleTagValueAggregator(\"metric\", MetricsSystem.InstanceType.WORKER, \"metric\", \"tag\"));\n     List<Metric> metrics1 = Lists.newArrayList(\n-        Metric.from(\"worker.metric.192_1_1_1.tag:v1\", 10, MetricType.GAUGE),\n-        Metric.from(\"worker.metric.192_1_1_1.tag:v2\", 20, MetricType.GAUGE));\n+        Metric.from(\"worker.metric.tag:v1.192_1_1_1\", 10, MetricType.GAUGE),\n+        Metric.from(\"worker.metric.tag:v2.192_1_1_1\", 20, MetricType.GAUGE));\n     mMetricsMaster.workerHeartbeat(\"192_1_1_1\", metrics1);\n     List<Metric> metrics2 = Lists.newArrayList(\n-        Metric.from(\"worker.metric.192_1_1_2.tag:v1\", 1, MetricType.GAUGE),\n-        Metric.from(\"worker.metric.192_1_1_2.tag:v2\", 2, MetricType.GAUGE));\n+        Metric.from(\"worker.metric.tag:v1.192_1_1_2\", 1, MetricType.GAUGE),\n+        Metric.from(\"worker.metric.tag:v2.192_1_1_2\", 2, MetricType.GAUGE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2ca6a6311ee9778caa8a8fb09d530942800b2da"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyNzA0MA==", "bodyText": "Will add the tests after finishing and testing out all those PRs. For the MetricsStore, based on my findings today, I still need to modify it.\nOne of my TODO is don't send and aggregated throughput meter one minute rate in master. This is because the client needs five seconds to have non-zero one minute rate and most clients don't live that long. Plan to change to calculated throughput directly on master side.", "url": "https://github.com/Alluxio/alluxio/pull/10850#discussion_r376127040", "createdAt": "2020-02-06T22:52:28Z", "author": {"login": "LuQQiu"}, "path": "core/server/master/src/test/java/alluxio/master/metrics/MetricsMasterTest.java", "diffHunk": "@@ -102,12 +102,12 @@ public void testMultiValueAggregator() throws Exception {\n     mMetricsMaster.addAggregator(\n         new SingleTagValueAggregator(\"metric\", MetricsSystem.InstanceType.WORKER, \"metric\", \"tag\"));\n     List<Metric> metrics1 = Lists.newArrayList(\n-        Metric.from(\"worker.metric.192_1_1_1.tag:v1\", 10, MetricType.GAUGE),\n-        Metric.from(\"worker.metric.192_1_1_1.tag:v2\", 20, MetricType.GAUGE));\n+        Metric.from(\"worker.metric.tag:v1.192_1_1_1\", 10, MetricType.GAUGE),\n+        Metric.from(\"worker.metric.tag:v2.192_1_1_1\", 20, MetricType.GAUGE));\n     mMetricsMaster.workerHeartbeat(\"192_1_1_1\", metrics1);\n     List<Metric> metrics2 = Lists.newArrayList(\n-        Metric.from(\"worker.metric.192_1_1_2.tag:v1\", 1, MetricType.GAUGE),\n-        Metric.from(\"worker.metric.192_1_1_2.tag:v2\", 2, MetricType.GAUGE));\n+        Metric.from(\"worker.metric.tag:v1.192_1_1_2\", 1, MetricType.GAUGE),\n+        Metric.from(\"worker.metric.tag:v2.192_1_1_2\", 2, MetricType.GAUGE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExMzEyMw=="}, "originalCommit": {"oid": "c2ca6a6311ee9778caa8a8fb09d530942800b2da"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjI2OTIwOnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/metrics/DefaultMetricsMaster.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjoyMDo1MVrOFmsO2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMjoxMjozNFrOFmwZQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExNDkwNg==", "bodyText": "cleanUpOrphaneMetrics -> cleanUpOrphanedMetrics", "url": "https://github.com/Alluxio/alluxio/pull/10850#discussion_r376114906", "createdAt": "2020-02-06T22:20:51Z", "author": {"login": "calvinjia"}, "path": "core/server/master/src/main/java/alluxio/master/metrics/DefaultMetricsMaster.java", "diffHunk": "@@ -126,65 +120,45 @@ public Object getValue() {\n     }\n   }\n \n+  private void cleanUpOrphaneMetrics() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2ca6a6311ee9778caa8a8fb09d530942800b2da"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE4MzEwNQ==", "bodyText": "Done, thanks", "url": "https://github.com/Alluxio/alluxio/pull/10850#discussion_r376183105", "createdAt": "2020-02-07T02:12:34Z", "author": {"login": "LuQQiu"}, "path": "core/server/master/src/main/java/alluxio/master/metrics/DefaultMetricsMaster.java", "diffHunk": "@@ -126,65 +120,45 @@ public Object getValue() {\n     }\n   }\n \n+  private void cleanUpOrphaneMetrics() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExNDkwNg=="}, "originalCommit": {"oid": "c2ca6a6311ee9778caa8a8fb09d530942800b2da"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjI4MDA1OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/metrics/DefaultMetricsMaster.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjoyNToyNVrOFmsVpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMjoxMjozOFrOFmwZTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExNjY0NQ==", "bodyText": "OrphaneMetricsCleaner -> OrphanedMetricsCleaner", "url": "https://github.com/Alluxio/alluxio/pull/10850#discussion_r376116645", "createdAt": "2020-02-06T22:25:25Z", "author": {"login": "calvinjia"}, "path": "core/server/master/src/main/java/alluxio/master/metrics/DefaultMetricsMaster.java", "diffHunk": "@@ -254,4 +236,19 @@ public void close() {\n       // nothing to clean up\n     }\n   }\n+\n+  /**\n+   * Heartbeat executor that cleans the metrics reported by lost workers or clients.\n+   */\n+  private class OrphaneMetricsCleaner implements HeartbeatExecutor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2ca6a6311ee9778caa8a8fb09d530942800b2da"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE4MzExNw==", "bodyText": "Done, thanks", "url": "https://github.com/Alluxio/alluxio/pull/10850#discussion_r376183117", "createdAt": "2020-02-07T02:12:38Z", "author": {"login": "LuQQiu"}, "path": "core/server/master/src/main/java/alluxio/master/metrics/DefaultMetricsMaster.java", "diffHunk": "@@ -254,4 +236,19 @@ public void close() {\n       // nothing to clean up\n     }\n   }\n+\n+  /**\n+   * Heartbeat executor that cleans the metrics reported by lost workers or clients.\n+   */\n+  private class OrphaneMetricsCleaner implements HeartbeatExecutor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExNjY0NQ=="}, "originalCommit": {"oid": "c2ca6a6311ee9778caa8a8fb09d530942800b2da"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjI4NTY1OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/metrics/MetricsStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjoyNzo0MVrOFmsZCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMjoxMjo0NFrOFmwZaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExNzUxNQ==", "bodyText": "One line", "url": "https://github.com/Alluxio/alluxio/pull/10850#discussion_r376117515", "createdAt": "2020-02-06T22:27:41Z", "author": {"login": "calvinjia"}, "path": "core/server/master/src/main/java/alluxio/master/metrics/MetricsStore.java", "diffHunk": "@@ -114,28 +140,32 @@ public void putWorkerMetrics(String hostname, List<Metric> metrics) {\n    * @param metrics the new metrics\n    */\n   public void putClientMetrics(String hostname, String clientId, List<Metric> metrics) {\n-    if (metrics.isEmpty()) {\n+    if (metrics.isEmpty() || hostname == null) {\n       return;\n     }\n     try (LockResource r = new LockResource(mLock.readLock())) {\n-      putReportedMetrics(mClientMetrics, getFullInstanceId(hostname, clientId), metrics);\n+      mLastReportedTimeMap.put(getFullInstanceId(hostname, clientId), System.currentTimeMillis());\n+      putReportedMetrics(InstanceType.CLIENT, metrics);\n     }\n   }\n \n   /**\n-   * Update the reported metrics with the given instanceId and set of metrics received from a\n+   * Update the reported metrics received from a\n    * worker or client.\n    *\n-   * Any metrics from the given instanceId which are not reported in the new set of metrics are\n-   * removed. Metrics of {@link MetricType} COUNTER are incremented by the reported values.\n-   * Otherwise, all metrics are simply replaced.\n+   * Cluster metrics of {@link MetricType} COUNTER are directly incremented by the reported values.\n+   * All other metrics are recorded in the metrics map individually, calculated periodically,\n+   * and deleted when the report instance doesn't report for a period of time.\n    *\n-   * @param metricSet the {@link IndexedSet} of client or worker metrics to update\n-   * @param instanceId the instance id, derived from {@link #getFullInstanceId(String, String)}\n+   * @param instanceType the instance type that reports the metrics\n    * @param reportedMetrics the metrics received by the RPC handler\n    */\n-  private static void putReportedMetrics(IndexedSet<Metric> metricSet, String instanceId,\n+  private void putReportedMetrics(InstanceType instanceType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2ca6a6311ee9778caa8a8fb09d530942800b2da"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE4MzE0NA==", "bodyText": "Done, thanks", "url": "https://github.com/Alluxio/alluxio/pull/10850#discussion_r376183144", "createdAt": "2020-02-07T02:12:44Z", "author": {"login": "LuQQiu"}, "path": "core/server/master/src/main/java/alluxio/master/metrics/MetricsStore.java", "diffHunk": "@@ -114,28 +140,32 @@ public void putWorkerMetrics(String hostname, List<Metric> metrics) {\n    * @param metrics the new metrics\n    */\n   public void putClientMetrics(String hostname, String clientId, List<Metric> metrics) {\n-    if (metrics.isEmpty()) {\n+    if (metrics.isEmpty() || hostname == null) {\n       return;\n     }\n     try (LockResource r = new LockResource(mLock.readLock())) {\n-      putReportedMetrics(mClientMetrics, getFullInstanceId(hostname, clientId), metrics);\n+      mLastReportedTimeMap.put(getFullInstanceId(hostname, clientId), System.currentTimeMillis());\n+      putReportedMetrics(InstanceType.CLIENT, metrics);\n     }\n   }\n \n   /**\n-   * Update the reported metrics with the given instanceId and set of metrics received from a\n+   * Update the reported metrics received from a\n    * worker or client.\n    *\n-   * Any metrics from the given instanceId which are not reported in the new set of metrics are\n-   * removed. Metrics of {@link MetricType} COUNTER are incremented by the reported values.\n-   * Otherwise, all metrics are simply replaced.\n+   * Cluster metrics of {@link MetricType} COUNTER are directly incremented by the reported values.\n+   * All other metrics are recorded in the metrics map individually, calculated periodically,\n+   * and deleted when the report instance doesn't report for a period of time.\n    *\n-   * @param metricSet the {@link IndexedSet} of client or worker metrics to update\n-   * @param instanceId the instance id, derived from {@link #getFullInstanceId(String, String)}\n+   * @param instanceType the instance type that reports the metrics\n    * @param reportedMetrics the metrics received by the RPC handler\n    */\n-  private static void putReportedMetrics(IndexedSet<Metric> metricSet, String instanceId,\n+  private void putReportedMetrics(InstanceType instanceType,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExNzUxNQ=="}, "originalCommit": {"oid": "c2ca6a6311ee9778caa8a8fb09d530942800b2da"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjI5MTYxOnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/metrics/MetricsStore.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjozMDowNlrOFmscrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMjoxMzowMVrOFmwZpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExODQ0NA==", "bodyText": "Will this be expensive?", "url": "https://github.com/Alluxio/alluxio/pull/10850#discussion_r376118444", "createdAt": "2020-02-06T22:30:06Z", "author": {"login": "calvinjia"}, "path": "core/server/master/src/main/java/alluxio/master/metrics/MetricsStore.java", "diffHunk": "@@ -144,19 +174,50 @@ private static void putReportedMetrics(IndexedSet<Metric> metricSet, String inst\n       // If a metric is COUNTER, the value sent via RPC should be the incremental value; i.e.\n       // the amount the value has changed since the last RPC. The master should equivalently\n       // increment its value based on the received metric rather than replacing it.\n-      if (!metricSet.add(metric)) {\n-        Metric oldMetric = metricSet.getFirstByField(FULL_NAME_INDEX, metric.getFullMetricName());\n-        if (metric.getMetricType() == MetricType.COUNTER) {\n-          if (metric.getValue() != 0L) {\n-            oldMetric.addValue(metric.getValue());\n-          }\n-        } else {\n-          oldMetric.setValue(metric.getValue());\n+      if (metric.getMetricType() == MetricType.COUNTER) {\n+        String metricKeyName = metric.getInstanceType() + \".\" + metric.getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2ca6a6311ee9778caa8a8fb09d530942800b2da"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMjQyNA==", "bodyText": "The metricKeyName is used for matching the MetricKey.WORKER_BYTES_READ_UFS.getName().\nIn the MetricKey, I gave the prefix MASTER_/WORKER_/CLIENT_<ACTUAL_METRIC_NAME> because the <ACTUAL_METRIC_NAME> may be duplicated in worker or client metrics.\nYeah this may be expensive, would you think it will be better to use a struct directly\nConcurrentHashMap<ClusterCounterKey, Counter> mClusterCounters\nstruct ClusterCounterkey{\n  String instanceType\n  String metricName\n}\n\nbut the string concatenation is still needed when comparing with the MetricKey.WORKER_BYTES_READ_UFS.getName() and MetricKey.WORKER_BYTES_WRITTEN_UFS.getName().", "url": "https://github.com/Alluxio/alluxio/pull/10850#discussion_r376122424", "createdAt": "2020-02-06T22:40:27Z", "author": {"login": "LuQQiu"}, "path": "core/server/master/src/main/java/alluxio/master/metrics/MetricsStore.java", "diffHunk": "@@ -144,19 +174,50 @@ private static void putReportedMetrics(IndexedSet<Metric> metricSet, String inst\n       // If a metric is COUNTER, the value sent via RPC should be the incremental value; i.e.\n       // the amount the value has changed since the last RPC. The master should equivalently\n       // increment its value based on the received metric rather than replacing it.\n-      if (!metricSet.add(metric)) {\n-        Metric oldMetric = metricSet.getFirstByField(FULL_NAME_INDEX, metric.getFullMetricName());\n-        if (metric.getMetricType() == MetricType.COUNTER) {\n-          if (metric.getValue() != 0L) {\n-            oldMetric.addValue(metric.getValue());\n-          }\n-        } else {\n-          oldMetric.setValue(metric.getValue());\n+      if (metric.getMetricType() == MetricType.COUNTER) {\n+        String metricKeyName = metric.getInstanceType() + \".\" + metric.getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExODQ0NA=="}, "originalCommit": {"oid": "c2ca6a6311ee9778caa8a8fb09d530942800b2da"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEzNDcwMg==", "bodyText": "I remember string concat being quite expensive based on your previous findings. One alternative is check instanceType == WORKER and metricName.equals(BYTES_READ_UFS)?", "url": "https://github.com/Alluxio/alluxio/pull/10850#discussion_r376134702", "createdAt": "2020-02-06T23:12:55Z", "author": {"login": "calvinjia"}, "path": "core/server/master/src/main/java/alluxio/master/metrics/MetricsStore.java", "diffHunk": "@@ -144,19 +174,50 @@ private static void putReportedMetrics(IndexedSet<Metric> metricSet, String inst\n       // If a metric is COUNTER, the value sent via RPC should be the incremental value; i.e.\n       // the amount the value has changed since the last RPC. The master should equivalently\n       // increment its value based on the received metric rather than replacing it.\n-      if (!metricSet.add(metric)) {\n-        Metric oldMetric = metricSet.getFirstByField(FULL_NAME_INDEX, metric.getFullMetricName());\n-        if (metric.getMetricType() == MetricType.COUNTER) {\n-          if (metric.getValue() != 0L) {\n-            oldMetric.addValue(metric.getValue());\n-          }\n-        } else {\n-          oldMetric.setValue(metric.getValue());\n+      if (metric.getMetricType() == MetricType.COUNTER) {\n+        String metricKeyName = metric.getInstanceType() + \".\" + metric.getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExODQ0NA=="}, "originalCommit": {"oid": "c2ca6a6311ee9778caa8a8fb09d530942800b2da"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE4MzIwNQ==", "bodyText": "Remove the potentially expensive string concatenation", "url": "https://github.com/Alluxio/alluxio/pull/10850#discussion_r376183205", "createdAt": "2020-02-07T02:13:01Z", "author": {"login": "LuQQiu"}, "path": "core/server/master/src/main/java/alluxio/master/metrics/MetricsStore.java", "diffHunk": "@@ -144,19 +174,50 @@ private static void putReportedMetrics(IndexedSet<Metric> metricSet, String inst\n       // If a metric is COUNTER, the value sent via RPC should be the incremental value; i.e.\n       // the amount the value has changed since the last RPC. The master should equivalently\n       // increment its value based on the received metric rather than replacing it.\n-      if (!metricSet.add(metric)) {\n-        Metric oldMetric = metricSet.getFirstByField(FULL_NAME_INDEX, metric.getFullMetricName());\n-        if (metric.getMetricType() == MetricType.COUNTER) {\n-          if (metric.getValue() != 0L) {\n-            oldMetric.addValue(metric.getValue());\n-          }\n-        } else {\n-          oldMetric.setValue(metric.getValue());\n+      if (metric.getMetricType() == MetricType.COUNTER) {\n+        String metricKeyName = metric.getInstanceType() + \".\" + metric.getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExODQ0NA=="}, "originalCommit": {"oid": "c2ca6a6311ee9778caa8a8fb09d530942800b2da"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTE0NzEzOnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/metrics/MetricsStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxOToyMTo0MFrOFnHndQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxOToyOTozNFrOFnH1mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU2MzU3Mw==", "bodyText": "These constants are available in WorkerMetrics?", "url": "https://github.com/Alluxio/alluxio/pull/10850#discussion_r376563573", "createdAt": "2020-02-07T19:21:40Z", "author": {"login": "calvinjia"}, "path": "core/server/master/src/main/java/alluxio/master/metrics/MetricsStore.java", "diffHunk": "@@ -44,6 +45,10 @@\n @ThreadSafe\n public class MetricsStore {\n   private static final Logger LOG = LoggerFactory.getLogger(MetricsStore.class);\n+  // The following fields are added for reducing the string processing\n+  // for MetricKey.WORKER_BYTES_READ_UFS and MetricKey.WORKER_BYTES_WRITTEN_UFS\n+  private static final String BYTES_READ_UFS = \"BytesReadPerUfs\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bf233e07c29e8e39ff332345a8d09c151b62821"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU2NzE5Mg==", "bodyText": "I removed all the WorkerMetrics, MasterMetrics, ClientMetrics to the MetricKey which define all metrics with full name Worker.BytesReadPerUfs.", "url": "https://github.com/Alluxio/alluxio/pull/10850#discussion_r376567192", "createdAt": "2020-02-07T19:29:34Z", "author": {"login": "LuQQiu"}, "path": "core/server/master/src/main/java/alluxio/master/metrics/MetricsStore.java", "diffHunk": "@@ -44,6 +45,10 @@\n @ThreadSafe\n public class MetricsStore {\n   private static final Logger LOG = LoggerFactory.getLogger(MetricsStore.class);\n+  // The following fields are added for reducing the string processing\n+  // for MetricKey.WORKER_BYTES_READ_UFS and MetricKey.WORKER_BYTES_WRITTEN_UFS\n+  private static final String BYTES_READ_UFS = \"BytesReadPerUfs\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU2MzU3Mw=="}, "originalCommit": {"oid": "2bf233e07c29e8e39ff332345a8d09c151b62821"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2156, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}