{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MjY2NjU3", "number": 10895, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNDozMDoyOVrODfMt3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjoxMDowNVrODfmwuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDQwNzk5OnYy", "diffSide": "LEFT", "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNDozMDoyOVrOFowuRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNDozMDoyOVrOFowuRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI4NTYzNg==", "bodyText": "@gpang Does the original implementation look like a bug to you?", "url": "https://github.com/Alluxio/alluxio/pull/10895#discussion_r378285636", "createdAt": "2020-02-12T14:30:29Z", "author": {"login": "jiacheliu3"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -456,13 +456,22 @@ public DefaultFileSystemMaster(BlockMaster blockMaster, CoreMasterContext master\n \n   private static MountInfo getRootMountInfo(MasterUfsManager ufsManager) {\n     try (CloseableResource<UnderFileSystem> resource = ufsManager.getRoot().acquireUfsResource()) {\n+      boolean shared;\n+      if (resource.get().isObjectStorage()) {\n+        shared = ServerConfiguration.getBoolean(\n+                PropertyKey.UNDERFS_OBJECT_STORE_MOUNT_SHARED_PUBLICLY);\n+      } else {\n+        shared = ServerConfiguration.getBoolean(\n+                PropertyKey.MASTER_MOUNT_TABLE_ROOT_SHARED);\n+      }\n+      boolean readonly = ServerConfiguration.getBoolean(\n+              PropertyKey.MASTER_MOUNT_TABLE_ROOT_READONLY);\n       String rootUfsUri = ServerConfiguration.get(PropertyKey.MASTER_MOUNT_TABLE_ROOT_UFS);\n-      boolean shared = resource.get().isObjectStorage()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e000d739f49b7473f31f5783cf63eb8224d389b5"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDUxMDM0OnYy", "diffSide": "RIGHT", "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNDo1NToyOVrOFoxtnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNDo1NToyOVrOFoxtnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMwMTg1Mw==", "bodyText": "I tried to update shared to this logic which seems more correct. And subsequently found issue #10896\nThe issue related to shared seems deeper than I thought. I will revert the change regarding shared field and focus on readonly in this PR. I will attempt on the shared field in a separate PR later.", "url": "https://github.com/Alluxio/alluxio/pull/10895#discussion_r378301853", "createdAt": "2020-02-12T14:55:29Z", "author": {"login": "jiacheliu3"}, "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -456,13 +456,22 @@ public DefaultFileSystemMaster(BlockMaster blockMaster, CoreMasterContext master\n \n   private static MountInfo getRootMountInfo(MasterUfsManager ufsManager) {\n     try (CloseableResource<UnderFileSystem> resource = ufsManager.getRoot().acquireUfsResource()) {\n+      boolean shared;\n+      if (resource.get().isObjectStorage()) {\n+        shared = ServerConfiguration.getBoolean(\n+                PropertyKey.UNDERFS_OBJECT_STORE_MOUNT_SHARED_PUBLICLY);\n+      } else {\n+        shared = ServerConfiguration.getBoolean(\n+                PropertyKey.MASTER_MOUNT_TABLE_ROOT_SHARED);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e000d739f49b7473f31f5783cf63eb8224d389b5"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDY3NTEzOnYy", "diffSide": "RIGHT", "path": "tests/src/test/java/alluxio/client/fs/FileSystemReadonlyTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjoxMDowNVrOFpZ7Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjozNDoxMFrOFpa30A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk2MDY3NQ==", "bodyText": "Can we make this a ClassRule so we dont have to re-create the cluster for each test? Starting a cluster is costly. (I think this also means the variable will have to be static)", "url": "https://github.com/Alluxio/alluxio/pull/10895#discussion_r378960675", "createdAt": "2020-02-13T16:10:05Z", "author": {"login": "gpang"}, "path": "tests/src/test/java/alluxio/client/fs/FileSystemReadonlyTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.fs;\n+\n+import static junit.framework.TestCase.assertTrue;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.file.FileSystem;\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.exception.AccessControlException;\n+import alluxio.master.file.FileSystemMaster;\n+import alluxio.testutils.LocalAlluxioClusterResource;\n+import alluxio.wire.MountPointInfo;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import java.util.Map;\n+\n+/**\n+ * Test behavior of {@link FileSystemMaster}, when the paths are readonly.\n+ */\n+public class FileSystemReadonlyTest {\n+  @Rule", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7167c829da64efe58f8e497b0f432905c56ef2eb"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk2NjkwNA==", "bodyText": "Done. BTW most integration tests are still using @Rule. We might want to batch-fix that in the future.", "url": "https://github.com/Alluxio/alluxio/pull/10895#discussion_r378966904", "createdAt": "2020-02-13T16:19:56Z", "author": {"login": "jiacheliu3"}, "path": "tests/src/test/java/alluxio/client/fs/FileSystemReadonlyTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.fs;\n+\n+import static junit.framework.TestCase.assertTrue;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.file.FileSystem;\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.exception.AccessControlException;\n+import alluxio.master.file.FileSystemMaster;\n+import alluxio.testutils.LocalAlluxioClusterResource;\n+import alluxio.wire.MountPointInfo;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import java.util.Map;\n+\n+/**\n+ * Test behavior of {@link FileSystemMaster}, when the paths are readonly.\n+ */\n+public class FileSystemReadonlyTest {\n+  @Rule", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk2MDY3NQ=="}, "originalCommit": {"oid": "7167c829da64efe58f8e497b0f432905c56ef2eb"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk3NjIwOA==", "bodyText": "Yes, I know. That is why I'm trying to make new usages use classrule. Thanks!", "url": "https://github.com/Alluxio/alluxio/pull/10895#discussion_r378976208", "createdAt": "2020-02-13T16:34:10Z", "author": {"login": "gpang"}, "path": "tests/src/test/java/alluxio/client/fs/FileSystemReadonlyTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.fs;\n+\n+import static junit.framework.TestCase.assertTrue;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.client.file.FileSystem;\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.conf.PropertyKey;\n+import alluxio.conf.ServerConfiguration;\n+import alluxio.exception.AccessControlException;\n+import alluxio.master.file.FileSystemMaster;\n+import alluxio.testutils.LocalAlluxioClusterResource;\n+import alluxio.wire.MountPointInfo;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import java.util.Map;\n+\n+/**\n+ * Test behavior of {@link FileSystemMaster}, when the paths are readonly.\n+ */\n+public class FileSystemReadonlyTest {\n+  @Rule", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk2MDY3NQ=="}, "originalCommit": {"oid": "7167c829da64efe58f8e497b0f432905c56ef2eb"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2020, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}