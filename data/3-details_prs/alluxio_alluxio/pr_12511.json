{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxNDg5MzM2", "number": 12511, "title": "Support range header for s3 get object api", "bodyText": "Implement https://alluxio.atlassian.net/browse/ALLUXIO-3321 feature", "createdAt": "2020-11-16T08:05:58Z", "url": "https://github.com/Alluxio/alluxio/pull/12511", "merged": true, "mergeCommit": {"oid": "1d0c0890e70a1a7835cd03b081acc506557f9bce"}, "closed": true, "closedAt": "2021-06-27T18:02:33Z", "author": {"login": "juchaosong"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABd71uHDAH2gAyNTIxNDg5MzM2OjVhNjUzZDk1MDNkODBlNjBiYzEyOTliZjQ3OTNlNjdiYTBiM2VhOTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABekxOq3AH2gAyNTIxNDg5MzM2OjY3Njg2NDllYjgzZWMyZGUwNTQyMDU3MDhmNzhkYWU1Zjk2NzAyZGQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5a653d9503d80e60bc1299bf4793e67ba0b3ea90", "author": {"user": {"login": "juchaosong", "name": "Song Juchao"}}, "url": "https://github.com/Alluxio/alluxio/commit/5a653d9503d80e60bc1299bf4793e67ba0b3ea90", "committedDate": "2021-02-20T03:14:06Z", "message": "Support range header for s3 get object api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjkzMjc4ODgx", "url": "https://github.com/Alluxio/alluxio/pull/12511#pullrequestreview-693278881", "createdAt": "2021-06-26T04:56:52Z", "commit": {"oid": "5a653d9503d80e60bc1299bf4793e67ba0b3ea90"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yNlQwNDo1Njo1MlrOJ0le-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yNlQwNToyNDo1M1rOJ0loXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTExOTg2NQ==", "bodyText": "nit: add space after the *", "url": "https://github.com/Alluxio/alluxio/pull/12511#discussion_r659119865", "createdAt": "2021-06-26T04:56:52Z", "author": {"login": "ZacBlanco"}, "path": "core/server/proxy/src/main/java/alluxio/proxy/s3/RangeFileInStream.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.proxy.s3;\n+\n+import alluxio.client.file.FileInStream;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+/**\n+ * This class is use {@link FileInStream} underlying, and implement range read.\n+ */\n+public class RangeFileInStream extends InputStream {\n+\n+  private FileInStream mUnderlyingStream;\n+  private long mUnderlyingLength;\n+  private long mReadBytes;\n+\n+  private RangeFileInStream(FileInStream underlyingStream) {\n+    mUnderlyingStream = underlyingStream;\n+    mReadBytes = 0;\n+  }\n+\n+  @Override\n+  public int read() throws IOException {\n+    if (mReadBytes >= mUnderlyingLength) {\n+      return -1;\n+    }\n+\n+    int b = mUnderlyingStream.read();\n+    if (b != -1) {\n+      mReadBytes++;\n+    }\n+    return b;\n+  }\n+\n+  @Override\n+  public int read(byte[] b) throws IOException {\n+    return read(b, 0, b.length);\n+  }\n+\n+  @Override\n+  public int read(byte[] b, int off, int len) throws IOException {\n+    if (mReadBytes == mUnderlyingLength) {\n+      return -1;\n+    }\n+\n+    if (mReadBytes + len > mUnderlyingLength) {\n+      len = (int) (mUnderlyingLength - mReadBytes);\n+    }\n+\n+    int n = mUnderlyingStream.read(b, off, len);\n+    if (n != -1) {\n+      mReadBytes += n;\n+    }\n+    return n;\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    mUnderlyingStream.close();\n+  }\n+\n+  private void seek(long underlyingLength, S3RangeSpec range) throws IOException {\n+    mUnderlyingStream.seek(range.getOffset(underlyingLength));\n+    mUnderlyingLength = range.getLength(underlyingLength);\n+  }\n+\n+  /**\n+   *Factory for {@link RangeFileInStream}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a653d9503d80e60bc1299bf4793e67ba0b3ea90"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTEyMDg1MA==", "bodyText": "I would make this constructor protected to prevent misuse, but still have available in tests.", "url": "https://github.com/Alluxio/alluxio/pull/12511#discussion_r659120850", "createdAt": "2021-06-26T05:08:55Z", "author": {"login": "ZacBlanco"}, "path": "core/server/proxy/src/main/java/alluxio/proxy/s3/S3RangeSpec.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.proxy.s3;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * This class is Range Spec for Amazon S3 API.\n+ */\n+public class S3RangeSpec {\n+  private static final Pattern RANGE_PATTERN = Pattern.compile(\"^bytes=(\\\\d*)-(\\\\d*)$\");\n+\n+  public static final S3RangeSpec INVALID_S3_RANGE_SPEC = new S3RangeSpec(false);\n+\n+  /* Does the range spec is valid */\n+  private boolean mIsValid;\n+  /* Does the range spec refers to a suffix of object */\n+  private boolean mIsSuffixLength;\n+  /* Start offset specified in range spec */\n+  private long mStart;\n+  /* End offset specified in range spec */\n+  private long mEnd;\n+\n+  /**\n+   * @param isValid the spec is valid or not\n+   */\n+  public S3RangeSpec(boolean isValid) {\n+    mIsValid = isValid;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a653d9503d80e60bc1299bf4793e67ba0b3ea90"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTEyMTMyNg==", "bodyText": "for completeness, should we add a test for prefixLength? e.g. bytes=100-?", "url": "https://github.com/Alluxio/alluxio/pull/12511#discussion_r659121326", "createdAt": "2021-06-26T05:13:43Z", "author": {"login": "ZacBlanco"}, "path": "core/server/proxy/src/test/java/alluxio/proxy/s3/S3RangeSpecTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.proxy.s3;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import org.junit.Test;\n+\n+public final class S3RangeSpecTest {\n+  @Test\n+  public void invalidRangeSpec() {\n+    String[] ranges = new String[] {\"bytes=100\", \"bytes=100-1\", \"bytes=-0\"};\n+    for (String range : ranges) {\n+      S3RangeSpec s3Range = S3RangeSpec.Factory.create(range);\n+      assertEquals(S3RangeSpec.INVALID_S3_RANGE_SPEC, s3Range);\n+    }\n+  }\n+\n+  @Test\n+  public void outOfRange() {\n+    String range = \"bytes=100-200\";\n+    long objectSize = 100;\n+    S3RangeSpec s3Range = S3RangeSpec.Factory.create(range);\n+    assertEquals(0, s3Range.getLength(objectSize));\n+    assertEquals(0, s3Range.getOffset(objectSize));\n+\n+    objectSize = 150;\n+    s3Range = S3RangeSpec.Factory.create(range);\n+    assertEquals(50, s3Range.getLength(objectSize));\n+    assertEquals(100, s3Range.getOffset(objectSize));\n+  }\n+\n+  @Test\n+  public void inRange() {\n+    String range = \"bytes=100-200\";\n+    long objectSize = 1000;\n+    S3RangeSpec s3Range = S3RangeSpec.Factory.create(range);\n+    assertEquals(101, s3Range.getLength(objectSize));\n+    assertEquals(100, s3Range.getOffset(objectSize));\n+  }\n+\n+  @Test\n+  public void suffixLength() {\n+    String range = \"bytes=-200\";\n+    long objectSize = 1000;\n+    S3RangeSpec s3Range = S3RangeSpec.Factory.create(range);\n+    assertEquals(200, s3Range.getLength(objectSize));\n+    assertEquals(800, s3Range.getOffset(objectSize));\n+\n+    objectSize = 100;\n+    s3Range = S3RangeSpec.Factory.create(range);\n+    assertEquals(100, s3Range.getLength(objectSize));\n+    assertEquals(0, s3Range.getOffset(objectSize));\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a653d9503d80e60bc1299bf4793e67ba0b3ea90"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTEyMTYyOA==", "bodyText": "I recommend making all variables private final", "url": "https://github.com/Alluxio/alluxio/pull/12511#discussion_r659121628", "createdAt": "2021-06-26T05:17:13Z", "author": {"login": "ZacBlanco"}, "path": "core/server/proxy/src/main/java/alluxio/proxy/s3/S3RangeSpec.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.proxy.s3;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * This class is Range Spec for Amazon S3 API.\n+ */\n+public class S3RangeSpec {\n+  private static final Pattern RANGE_PATTERN = Pattern.compile(\"^bytes=(\\\\d*)-(\\\\d*)$\");\n+\n+  public static final S3RangeSpec INVALID_S3_RANGE_SPEC = new S3RangeSpec(false);\n+\n+  /* Does the range spec is valid */\n+  private boolean mIsValid;\n+  /* Does the range spec refers to a suffix of object */\n+  private boolean mIsSuffixLength;\n+  /* Start offset specified in range spec */\n+  private long mStart;\n+  /* End offset specified in range spec */\n+  private long mEnd;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a653d9503d80e60bc1299bf4793e67ba0b3ea90"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTEyMTczMg==", "bodyText": "instead of defining a boolean isSuffixLength, I think we can set either start or end to -1 to represent that they are unspecified, then just check for start < 0 to replace the isSuffixLength condition. This prevents misuse of the class or potentially specifying the wrong boolean parameter. We can add a private method for it.\nprivate isSuffixLength() { mStart < 0; }", "url": "https://github.com/Alluxio/alluxio/pull/12511#discussion_r659121732", "createdAt": "2021-06-26T05:18:34Z", "author": {"login": "ZacBlanco"}, "path": "core/server/proxy/src/main/java/alluxio/proxy/s3/S3RangeSpec.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.proxy.s3;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * This class is Range Spec for Amazon S3 API.\n+ */\n+public class S3RangeSpec {\n+  private static final Pattern RANGE_PATTERN = Pattern.compile(\"^bytes=(\\\\d*)-(\\\\d*)$\");\n+\n+  public static final S3RangeSpec INVALID_S3_RANGE_SPEC = new S3RangeSpec(false);\n+\n+  /* Does the range spec is valid */\n+  private boolean mIsValid;\n+  /* Does the range spec refers to a suffix of object */\n+  private boolean mIsSuffixLength;\n+  /* Start offset specified in range spec */\n+  private long mStart;\n+  /* End offset specified in range spec */\n+  private long mEnd;\n+\n+  /**\n+   * @param isValid the spec is valid or not\n+   */\n+  public S3RangeSpec(boolean isValid) {\n+    mIsValid = isValid;\n+  }\n+\n+  /**\n+   * @param isSuffixLength the spec if use for suffix length\n+   * @param start the start offset of object\n+   * @param end the end offset of object\n+   */\n+  public S3RangeSpec(boolean isSuffixLength, long start, long end) {\n+    mIsValid = true;\n+    mIsSuffixLength = isSuffixLength;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a653d9503d80e60bc1299bf4793e67ba0b3ea90"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTEyMjI3MQ==", "bodyText": "as a defensive measure, I would use >= mUnderlyingLength in the case the logic (whether now or in the future) ever goes over the mUnderlyingThreshold", "url": "https://github.com/Alluxio/alluxio/pull/12511#discussion_r659122271", "createdAt": "2021-06-26T05:24:53Z", "author": {"login": "ZacBlanco"}, "path": "core/server/proxy/src/main/java/alluxio/proxy/s3/RangeFileInStream.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.proxy.s3;\n+\n+import alluxio.client.file.FileInStream;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+/**\n+ * This class is use {@link FileInStream} underlying, and implement range read.\n+ */\n+public class RangeFileInStream extends InputStream {\n+\n+  private FileInStream mUnderlyingStream;\n+  private long mUnderlyingLength;\n+  private long mReadBytes;\n+\n+  private RangeFileInStream(FileInStream underlyingStream) {\n+    mUnderlyingStream = underlyingStream;\n+    mReadBytes = 0;\n+  }\n+\n+  @Override\n+  public int read() throws IOException {\n+    if (mReadBytes >= mUnderlyingLength) {\n+      return -1;\n+    }\n+\n+    int b = mUnderlyingStream.read();\n+    if (b != -1) {\n+      mReadBytes++;\n+    }\n+    return b;\n+  }\n+\n+  @Override\n+  public int read(byte[] b) throws IOException {\n+    return read(b, 0, b.length);\n+  }\n+\n+  @Override\n+  public int read(byte[] b, int off, int len) throws IOException {\n+    if (mReadBytes == mUnderlyingLength) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a653d9503d80e60bc1299bf4793e67ba0b3ea90"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "680c194fdc74e2cb4b3e22e6f776aeea78e416f9", "author": {"user": {"login": "juchaosong", "name": "Song Juchao"}}, "url": "https://github.com/Alluxio/alluxio/commit/680c194fdc74e2cb4b3e22e6f776aeea78e416f9", "committedDate": "2021-06-26T07:59:42Z", "message": "chore: format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c237b523a1d3b98f0a20b9024741838ff04d8120", "author": {"user": {"login": "juchaosong", "name": "Song Juchao"}}, "url": "https://github.com/Alluxio/alluxio/commit/c237b523a1d3b98f0a20b9024741838ff04d8120", "committedDate": "2021-06-26T08:40:16Z", "message": "refactor: change constructor visibility and reduce redundant fields"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjkzMzgzNjAw", "url": "https://github.com/Alluxio/alluxio/pull/12511#pullrequestreview-693383600", "createdAt": "2021-06-27T06:52:58Z", "commit": {"oid": "76e0e6758d9bf9d78cd518d98bb2e825eb640656"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6768649eb83ec2de054205708f78dae5f96702dd", "author": {"user": {"login": "juchaosong", "name": "Song Juchao"}}, "url": "https://github.com/Alluxio/alluxio/commit/6768649eb83ec2de054205708f78dae5f96702dd", "committedDate": "2021-06-27T07:11:02Z", "message": "refactor: more defensive"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3448, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}