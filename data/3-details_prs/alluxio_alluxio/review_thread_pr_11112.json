{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMjMxNzc4", "number": 11112, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxOTozMTozNFrODl6hpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjowMjoyMlrODmvzqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDgyNzkwOnYy", "diffSide": "LEFT", "path": "job/common/src/main/java/alluxio/job/plan/transform/CompactConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxOTozMTozNFrOFzEuhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMjoyNDowN1rOFzJQKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5OTE0MA==", "bodyText": "Do we have to get rid of this?", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389099140", "createdAt": "2020-03-06T19:31:34Z", "author": {"login": "gpang"}, "path": "job/common/src/main/java/alluxio/job/plan/transform/CompactConfig.java", "diffHunk": "@@ -44,10 +44,6 @@\n    * Compacted files are stored under this directory.\n    */\n   private final String mOutput;\n-  /**\n-   * The type of database to write the compacted table to.\n-   */\n-  private final String mDatabaseType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20afb96836623c70554766778150420945230f2a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3MzI5MA==", "bodyText": "not necessarily. But it's really odd because it's basically unused.", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389173290", "createdAt": "2020-03-06T22:24:07Z", "author": {"login": "bradyoo"}, "path": "job/common/src/main/java/alluxio/job/plan/transform/CompactConfig.java", "diffHunk": "@@ -44,10 +44,6 @@\n    * Compacted files are stored under this directory.\n    */\n   private final String mOutput;\n-  /**\n-   * The type of database to write the compacted table to.\n-   */\n-  private final String mDatabaseType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5OTE0MA=="}, "originalCommit": {"oid": "20afb96836623c70554766778150420945230f2a"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDgzMzUyOnYy", "diffSide": "RIGHT", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/CompactAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxOTozMzozMlrOFzEyDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxOTozMzozMlrOFzEyDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEwMDA0NQ==", "bodyText": "NIT: update the javadoc", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389100045", "createdAt": "2020-03-06T19:33:32Z", "author": {"login": "gpang"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/CompactAction.java", "diffHunk": "@@ -18,24 +18,20 @@\n \n import com.google.common.base.Preconditions;\n import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang.StringUtils;\n \n-import java.util.List;\n-import java.util.Map;\n+import java.util.Properties;\n \n /**\n  * The definition of the write action.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20afb96836623c70554766778150420945230f2a"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDgzODkxOnYy", "diffSide": "RIGHT", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxOTozNTozM1rOFzE1mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTo1ODo0NFrOF0Vmyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEwMDk1NA==", "bodyText": "what happens with actions with the same number?", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389100954", "createdAt": "2020-03-06T19:35:33Z", "author": {"login": "gpang"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionFactory.java", "diffHunk": "@@ -11,24 +11,28 @@\n \n package alluxio.table.common.transform.action;\n \n-import java.util.List;\n-import java.util.Map;\n+import javax.annotation.Nullable;\n+import java.util.Properties;\n \n /**\n  * The action factory interface.\n  */\n public interface TransformActionFactory {\n \n   /**\n-   * @return the name of the action\n+   * Returns the order of the transform action. Transform actions with a lower number\n+   * will be executed before transform actions with a higher number.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20afb96836623c70554766778150420945230f2a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3MzUxOQ==", "bodyText": "current behavior is undefined. Would we prefer to define it?", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389173519", "createdAt": "2020-03-06T22:24:46Z", "author": {"login": "bradyoo"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionFactory.java", "diffHunk": "@@ -11,24 +11,28 @@\n \n package alluxio.table.common.transform.action;\n \n-import java.util.List;\n-import java.util.Map;\n+import javax.annotation.Nullable;\n+import java.util.Properties;\n \n /**\n  * The action factory interface.\n  */\n public interface TransformActionFactory {\n \n   /**\n-   * @return the name of the action\n+   * Returns the order of the transform action. Transform actions with a lower number\n+   * will be executed before transform actions with a higher number.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEwMDk1NA=="}, "originalCommit": {"oid": "20afb96836623c70554766778150420945230f2a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyNDI2Nw==", "bodyText": "it doesnt have to be defined now, but at least the javadoc should state that the behavior is undefined.", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r390424267", "createdAt": "2020-03-10T15:58:44Z", "author": {"login": "gpang"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionFactory.java", "diffHunk": "@@ -11,24 +11,28 @@\n \n package alluxio.table.common.transform.action;\n \n-import java.util.List;\n-import java.util.Map;\n+import javax.annotation.Nullable;\n+import java.util.Properties;\n \n /**\n  * The action factory interface.\n  */\n public interface TransformActionFactory {\n \n   /**\n-   * @return the name of the action\n+   * Returns the order of the transform action. Transform actions with a lower number\n+   * will be executed before transform actions with a higher number.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEwMDk1NA=="}, "originalCommit": {"oid": "20afb96836623c70554766778150420945230f2a"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDg1NjU1OnYy", "diffSide": "LEFT", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxOTozOToxNlrOFzE_QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMjoyNTo1NlrOFzJSmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEwMzQyNQ==", "bodyText": "Could name still be useful? Or does class name provide the same functionality as name?", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389103425", "createdAt": "2020-03-06T19:39:16Z", "author": {"login": "gpang"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionFactory.java", "diffHunk": "@@ -11,24 +11,28 @@\n \n package alluxio.table.common.transform.action;\n \n-import java.util.List;\n-import java.util.Map;\n+import javax.annotation.Nullable;\n+import java.util.Properties;\n \n /**\n  * The action factory interface.\n  */\n public interface TransformActionFactory {\n \n   /**\n-   * @return the name of the action\n+   * Returns the order of the transform action. Transform actions with a lower number\n+   * will be executed before transform actions with a higher number.\n+   *\n+   * @return integer representing order number\n    */\n-  String getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20afb96836623c70554766778150420945230f2a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3MzkxNA==", "bodyText": "name was previously used to determine the name of the function which doesn't have a use anymore. We could do something that warrants reintroduction but nothing yet.", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389173914", "createdAt": "2020-03-06T22:25:56Z", "author": {"login": "bradyoo"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionFactory.java", "diffHunk": "@@ -11,24 +11,28 @@\n \n package alluxio.table.common.transform.action;\n \n-import java.util.List;\n-import java.util.Map;\n+import javax.annotation.Nullable;\n+import java.util.Properties;\n \n /**\n  * The action factory interface.\n  */\n public interface TransformActionFactory {\n \n   /**\n-   * @return the name of the action\n+   * Returns the order of the transform action. Transform actions with a lower number\n+   * will be executed before transform actions with a higher number.\n+   *\n+   * @return integer representing order number\n    */\n-  String getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEwMzQyNQ=="}, "originalCommit": {"oid": "20afb96836623c70554766778150420945230f2a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDg4NzM3OnYy", "diffSide": "RIGHT", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxOTo0Mzo0OVrOFzFO2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMjoyNjoyM1rOFzJTJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEwNzQxNw==", "bodyText": "do we have a test for ordering?", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389107417", "createdAt": "2020-03-06T19:43:49Z", "author": {"login": "gpang"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionFactory.java", "diffHunk": "@@ -11,24 +11,28 @@\n \n package alluxio.table.common.transform.action;\n \n-import java.util.List;\n-import java.util.Map;\n+import javax.annotation.Nullable;\n+import java.util.Properties;\n \n /**\n  * The action factory interface.\n  */\n public interface TransformActionFactory {\n \n   /**\n-   * @return the name of the action\n+   * Returns the order of the transform action. Transform actions with a lower number\n+   * will be executed before transform actions with a higher number.\n+   *\n+   * @return integer representing order number\n    */\n-  String getName();\n+  default int getOrder() {\n+    return 100;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20afb96836623c70554766778150420945230f2a"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3NDA1NA==", "bodyText": "Nothing here because there are no other TransformActions.", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389174054", "createdAt": "2020-03-06T22:26:23Z", "author": {"login": "bradyoo"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionFactory.java", "diffHunk": "@@ -11,24 +11,28 @@\n \n package alluxio.table.common.transform.action;\n \n-import java.util.List;\n-import java.util.Map;\n+import javax.annotation.Nullable;\n+import java.util.Properties;\n \n /**\n  * The action factory interface.\n  */\n public interface TransformActionFactory {\n \n   /**\n-   * @return the name of the action\n+   * Returns the order of the transform action. Transform actions with a lower number\n+   * will be executed before transform actions with a higher number.\n+   *\n+   * @return integer representing order number\n    */\n-  String getName();\n+  default int getOrder() {\n+    return 100;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEwNzQxNw=="}, "originalCommit": {"oid": "20afb96836623c70554766778150420945230f2a"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTAxMjIzOnYy", "diffSide": "RIGHT", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionRegistry.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDoyNTo1NFrOFzGasQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTo1OTo0OFrOF0Vp3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyNjgzMw==", "bodyText": "is there a way to avoid this traversal, and look it up somehow?", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389126833", "createdAt": "2020-03-06T20:25:54Z", "author": {"login": "gpang"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionRegistry.java", "diffHunk": "@@ -37,19 +39,17 @@ private TransformActionRegistry() {} // prevent instantiation\n    * Creates a new instance of a {@link TransformAction}.\n    *\n    * @param definition the raw definition of the action\n-   * @param name the name of the transform action\n-   * @param args a list of string args\n-   * @param options a string-string map of options\n    * @return a new instance of an action\n    */\n-  public static TransformAction create(String definition, String name, List<String> args,\n-      Map<String, String> options) {\n-    TransformActionFactory factory = FACTORIES.get(name);\n-    if (factory == null) {\n-      throw new IllegalStateException(\n-          String.format(\"TransformActionFactory for name '%s' does not exist.\", name));\n+  public static List<TransformAction> create(Properties definition) {\n+    final ArrayList<TransformAction> actions = new ArrayList<>();\n+    for (TransformActionFactory factory : FACTORIES) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20afb96836623c70554766778150420945230f2a"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3NDM0MA==", "bodyText": "It may be worth it when FACTORIES is a longer list, but it's just so short right now..", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389174340", "createdAt": "2020-03-06T22:27:16Z", "author": {"login": "bradyoo"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionRegistry.java", "diffHunk": "@@ -37,19 +39,17 @@ private TransformActionRegistry() {} // prevent instantiation\n    * Creates a new instance of a {@link TransformAction}.\n    *\n    * @param definition the raw definition of the action\n-   * @param name the name of the transform action\n-   * @param args a list of string args\n-   * @param options a string-string map of options\n    * @return a new instance of an action\n    */\n-  public static TransformAction create(String definition, String name, List<String> args,\n-      Map<String, String> options) {\n-    TransformActionFactory factory = FACTORIES.get(name);\n-    if (factory == null) {\n-      throw new IllegalStateException(\n-          String.format(\"TransformActionFactory for name '%s' does not exist.\", name));\n+  public static List<TransformAction> create(Properties definition) {\n+    final ArrayList<TransformAction> actions = new ArrayList<>();\n+    for (TransformActionFactory factory : FACTORIES) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyNjgzMw=="}, "originalCommit": {"oid": "20afb96836623c70554766778150420945230f2a"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyNTA1NQ==", "bodyText": "I see, then can we add a TODO mentioning that possible improvement for the future?", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r390425055", "createdAt": "2020-03-10T15:59:48Z", "author": {"login": "gpang"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionRegistry.java", "diffHunk": "@@ -37,19 +39,17 @@ private TransformActionRegistry() {} // prevent instantiation\n    * Creates a new instance of a {@link TransformAction}.\n    *\n    * @param definition the raw definition of the action\n-   * @param name the name of the transform action\n-   * @param args a list of string args\n-   * @param options a string-string map of options\n    * @return a new instance of an action\n    */\n-  public static TransformAction create(String definition, String name, List<String> args,\n-      Map<String, String> options) {\n-    TransformActionFactory factory = FACTORIES.get(name);\n-    if (factory == null) {\n-      throw new IllegalStateException(\n-          String.format(\"TransformActionFactory for name '%s' does not exist.\", name));\n+  public static List<TransformAction> create(Properties definition) {\n+    final ArrayList<TransformAction> actions = new ArrayList<>();\n+    for (TransformActionFactory factory : FACTORIES) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyNjgzMw=="}, "originalCommit": {"oid": "20afb96836623c70554766778150420945230f2a"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTAxMzYzOnYy", "diffSide": "RIGHT", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionRegistry.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDoyNjoyMVrOFzGbhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMjoyNzo0MVrOFzJUxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyNzA0NA==", "bodyText": "if it is null, how does the error handling work?", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389127044", "createdAt": "2020-03-06T20:26:21Z", "author": {"login": "gpang"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionRegistry.java", "diffHunk": "@@ -37,19 +39,17 @@ private TransformActionRegistry() {} // prevent instantiation\n    * Creates a new instance of a {@link TransformAction}.\n    *\n    * @param definition the raw definition of the action\n-   * @param name the name of the transform action\n-   * @param args a list of string args\n-   * @param options a string-string map of options\n    * @return a new instance of an action\n    */\n-  public static TransformAction create(String definition, String name, List<String> args,\n-      Map<String, String> options) {\n-    TransformActionFactory factory = FACTORIES.get(name);\n-    if (factory == null) {\n-      throw new IllegalStateException(\n-          String.format(\"TransformActionFactory for name '%s' does not exist.\", name));\n+  public static List<TransformAction> create(Properties definition) {\n+    final ArrayList<TransformAction> actions = new ArrayList<>();\n+    for (TransformActionFactory factory : FACTORIES) {\n+      final TransformAction transformAction = factory.create(definition);\n+      if (transformAction != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20afb96836623c70554766778150420945230f2a"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3NDQ2OQ==", "bodyText": "it's not an error for it be to null. It means that the action is unnecessary.", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389174469", "createdAt": "2020-03-06T22:27:41Z", "author": {"login": "bradyoo"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionRegistry.java", "diffHunk": "@@ -37,19 +39,17 @@ private TransformActionRegistry() {} // prevent instantiation\n    * Creates a new instance of a {@link TransformAction}.\n    *\n    * @param definition the raw definition of the action\n-   * @param name the name of the transform action\n-   * @param args a list of string args\n-   * @param options a string-string map of options\n    * @return a new instance of an action\n    */\n-  public static TransformAction create(String definition, String name, List<String> args,\n-      Map<String, String> options) {\n-    TransformActionFactory factory = FACTORIES.get(name);\n-    if (factory == null) {\n-      throw new IllegalStateException(\n-          String.format(\"TransformActionFactory for name '%s' does not exist.\", name));\n+  public static List<TransformAction> create(Properties definition) {\n+    final ArrayList<TransformAction> actions = new ArrayList<>();\n+    for (TransformActionFactory factory : FACTORIES) {\n+      final TransformAction transformAction = factory.create(definition);\n+      if (transformAction != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyNzA0NA=="}, "originalCommit": {"oid": "20afb96836623c70554766778150420945230f2a"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTAxNTczOnYy", "diffSide": "RIGHT", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionRegistry.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDoyNzoxMFrOFzGc4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjowMTozM1rOF0Vu-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyNzM5NA==", "bodyText": "Why does this return a list of actions? Can you update javadoc description and return comment.", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389127394", "createdAt": "2020-03-06T20:27:10Z", "author": {"login": "gpang"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionRegistry.java", "diffHunk": "@@ -37,19 +39,17 @@ private TransformActionRegistry() {} // prevent instantiation\n    * Creates a new instance of a {@link TransformAction}.\n    *\n    * @param definition the raw definition of the action\n-   * @param name the name of the transform action\n-   * @param args a list of string args\n-   * @param options a string-string map of options\n    * @return a new instance of an action\n    */\n-  public static TransformAction create(String definition, String name, List<String> args,\n-      Map<String, String> options) {\n-    TransformActionFactory factory = FACTORIES.get(name);\n-    if (factory == null) {\n-      throw new IllegalStateException(\n-          String.format(\"TransformActionFactory for name '%s' does not exist.\", name));\n+  public static List<TransformAction> create(Properties definition) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20afb96836623c70554766778150420945230f2a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyNjM2Mg==", "bodyText": "Can you update the javadoc with the return description and method description? (why is it a list?)", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r390426362", "createdAt": "2020-03-10T16:01:33Z", "author": {"login": "gpang"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionRegistry.java", "diffHunk": "@@ -37,19 +39,17 @@ private TransformActionRegistry() {} // prevent instantiation\n    * Creates a new instance of a {@link TransformAction}.\n    *\n    * @param definition the raw definition of the action\n-   * @param name the name of the transform action\n-   * @param args a list of string args\n-   * @param options a string-string map of options\n    * @return a new instance of an action\n    */\n-  public static TransformAction create(String definition, String name, List<String> args,\n-      Map<String, String> options) {\n-    TransformActionFactory factory = FACTORIES.get(name);\n-    if (factory == null) {\n-      throw new IllegalStateException(\n-          String.format(\"TransformActionFactory for name '%s' does not exist.\", name));\n+  public static List<TransformAction> create(Properties definition) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyNzM5NA=="}, "originalCommit": {"oid": "20afb96836623c70554766778150420945230f2a"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTAxNzg3OnYy", "diffSide": "RIGHT", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionRegistry.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDoyNzo1M1rOFzGeLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoxNDozMFrOF0Y2Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyNzcyNQ==", "bodyText": "Do you have an example of this string? What does it print if it no longer has a name?", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389127725", "createdAt": "2020-03-06T20:27:53Z", "author": {"login": "gpang"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionRegistry.java", "diffHunk": "@@ -59,14 +59,9 @@ private static void refresh() {\n     FACTORIES.clear();\n     for (TransformActionFactory factory : ServiceLoader\n         .load(TransformActionFactory.class, TransformActionFactory.class.getClassLoader())) {\n-      TransformActionFactory existingFactory = FACTORIES.get(factory.getName());\n-      if (existingFactory != null) {\n-        LOG.warn(\n-            \"Ignoring duplicate transform action '{}' found in factory {}. Existing factory: {}\",\n-            factory.getName(), factory.getClass(), existingFactory.getClass());\n-      }\n-      FACTORIES.put(factory.getName(), factory);\n+      FACTORIES.add(factory);\n     }\n-    LOG.info(\"Registered Transform actions: \" + String.join(\",\", FACTORIES.keySet()));\n+    FACTORIES.sort(Comparator.comparingInt((factory) -> factory.getOrder()));\n+    LOG.info(\"Registered Transform actions: \" + StringUtils.join(FACTORIES, \",\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20afb96836623c70554766778150420945230f2a"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyNzExOA==", "bodyText": "Can you comment on what this would look like?", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r390427118", "createdAt": "2020-03-10T16:02:33Z", "author": {"login": "gpang"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionRegistry.java", "diffHunk": "@@ -59,14 +59,9 @@ private static void refresh() {\n     FACTORIES.clear();\n     for (TransformActionFactory factory : ServiceLoader\n         .load(TransformActionFactory.class, TransformActionFactory.class.getClassLoader())) {\n-      TransformActionFactory existingFactory = FACTORIES.get(factory.getName());\n-      if (existingFactory != null) {\n-        LOG.warn(\n-            \"Ignoring duplicate transform action '{}' found in factory {}. Existing factory: {}\",\n-            factory.getName(), factory.getClass(), existingFactory.getClass());\n-      }\n-      FACTORIES.put(factory.getName(), factory);\n+      FACTORIES.add(factory);\n     }\n-    LOG.info(\"Registered Transform actions: \" + String.join(\",\", FACTORIES.keySet()));\n+    FACTORIES.sort(Comparator.comparingInt((factory) -> factory.getOrder()));\n+    LOG.info(\"Registered Transform actions: \" + StringUtils.join(FACTORIES, \",\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyNzcyNQ=="}, "originalCommit": {"oid": "20afb96836623c70554766778150420945230f2a"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3NzMzOQ==", "bodyText": "Registered Transform actions: alluxio.table.common.transform.action.EarlyActionFactory@4909b8da,CompactActionFactory,alluxio.table.common.transform.action.LateActionFactory@3a03464\nCompactActionFactory has a toString implementation, the other 2 don't.", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r390477339", "createdAt": "2020-03-10T17:14:30Z", "author": {"login": "bradyoo"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionRegistry.java", "diffHunk": "@@ -59,14 +59,9 @@ private static void refresh() {\n     FACTORIES.clear();\n     for (TransformActionFactory factory : ServiceLoader\n         .load(TransformActionFactory.class, TransformActionFactory.class.getClassLoader())) {\n-      TransformActionFactory existingFactory = FACTORIES.get(factory.getName());\n-      if (existingFactory != null) {\n-        LOG.warn(\n-            \"Ignoring duplicate transform action '{}' found in factory {}. Existing factory: {}\",\n-            factory.getName(), factory.getClass(), existingFactory.getClass());\n-      }\n-      FACTORIES.put(factory.getName(), factory);\n+      FACTORIES.add(factory);\n     }\n-    LOG.info(\"Registered Transform actions: \" + String.join(\",\", FACTORIES.keySet()));\n+    FACTORIES.sort(Comparator.comparingInt((factory) -> factory.getOrder()));\n+    LOG.info(\"Registered Transform actions: \" + StringUtils.join(FACTORIES, \",\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyNzcyNQ=="}, "originalCommit": {"oid": "20afb96836623c70554766778150420945230f2a"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTE5MTc3OnYy", "diffSide": "RIGHT", "path": "table/server/common/src/main/java/alluxio/table/common/transform/TransformPlan.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMTozNDoyMlrOFzIJ2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMjoyOTowNVrOFzJWfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE1NTI4OA==", "bodyText": "What is this for?", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389155288", "createdAt": "2020-03-06T21:34:22Z", "author": {"login": "gpang"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/TransformPlan.java", "diffHunk": "@@ -44,23 +42,29 @@\n    * @param definition the transformation definition\n    */\n   public TransformPlan(Layout baseLayout, Layout transformedLayout,\n-      TransformDefinition definition) {\n+                       TransformDefinition definition) {\n     mBaseLayout = baseLayout;\n     mTransformedLayout = transformedLayout;\n     mJobConfigs = computeJobConfigs(definition);\n   }\n \n   private ArrayList<JobConfig> computeJobConfigs(TransformDefinition definition) {\n-    final List<TransformAction> actions = definition.getActions();\n+    ArrayList<JobConfig> actions = new ArrayList<>();\n+    Layout baseLayout = mBaseLayout;\n+    boolean deleteSrc = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20afb96836623c70554766778150420945230f2a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3NDkwOQ==", "bodyText": "It's for the case when transformations need to be chained and therefore, for every transformation after the first, you need to deleteSrc.", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389174909", "createdAt": "2020-03-06T22:29:05Z", "author": {"login": "bradyoo"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/TransformPlan.java", "diffHunk": "@@ -44,23 +42,29 @@\n    * @param definition the transformation definition\n    */\n   public TransformPlan(Layout baseLayout, Layout transformedLayout,\n-      TransformDefinition definition) {\n+                       TransformDefinition definition) {\n     mBaseLayout = baseLayout;\n     mTransformedLayout = transformedLayout;\n     mJobConfigs = computeJobConfigs(definition);\n   }\n \n   private ArrayList<JobConfig> computeJobConfigs(TransformDefinition definition) {\n-    final List<TransformAction> actions = definition.getActions();\n+    ArrayList<JobConfig> actions = new ArrayList<>();\n+    Layout baseLayout = mBaseLayout;\n+    boolean deleteSrc = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE1NTI4OA=="}, "originalCommit": {"oid": "20afb96836623c70554766778150420945230f2a"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTE5MzgwOnYy", "diffSide": "RIGHT", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/CompactAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMTozNToyMFrOFzILRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMjoyOToxOVrOFzJWzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE1NTY1NA==", "bodyText": "is this allowed to return null as a return value?", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389155654", "createdAt": "2020-03-06T21:35:20Z", "author": {"login": "gpang"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/CompactAction.java", "diffHunk": "@@ -48,42 +44,49 @@\n   /**\n    * Factory to create an instance.\n    */\n-  public static class WriteActionFactory implements TransformActionFactory {\n+  public static class CompactActionFactory implements TransformActionFactory {\n+\n     @Override\n-    public String getName() {\n-      return NAME;\n+    public int getOrder() {\n+      return 0;\n     }\n \n     @Override\n-    public TransformAction create(String definition, List<String> args,\n-        Map<String, String> options) {\n-      Preconditions.checkArgument(args.size() == 1,\n-          ExceptionMessage.TRANSFORM_WRITE_ACTION_INVALID_ARGS.toString());\n-      String type = args.get(0);\n-      int numFiles = options.containsKey(NUM_FILES_OPTION)\n-          ? Integer.parseInt(options.get(NUM_FILES_OPTION))\n-          : DEFAULT_NUM_FILES;\n-      long fileSize = options.containsKey(FILE_SIZE_OPTION)\n-          ? Long.parseLong(options.get(FILE_SIZE_OPTION))\n-          : DEFAULT_FILE_SIZE;\n-      Preconditions.checkArgument(numFiles >= 0,\n-          ExceptionMessage.TRANSFORM_WRITE_ACTION_INVALID_NUM_FILES);\n-      return new WriteAction(type, numFiles, fileSize);\n+    public TransformAction create(Properties properties) {\n+      final String numFilesString = properties.getProperty(NUM_FILES_OPTION);\n+\n+      final String fileSizeString = properties.getProperty(FILE_SIZE_OPTION);\n+\n+      if (StringUtils.isEmpty(numFilesString) && StringUtils.isEmpty(fileSizeString)) {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20afb96836623c70554766778150420945230f2a"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3NDk5MA==", "bodyText": "Yes. That means Compact is unnecessary.", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389174990", "createdAt": "2020-03-06T22:29:19Z", "author": {"login": "bradyoo"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/CompactAction.java", "diffHunk": "@@ -48,42 +44,49 @@\n   /**\n    * Factory to create an instance.\n    */\n-  public static class WriteActionFactory implements TransformActionFactory {\n+  public static class CompactActionFactory implements TransformActionFactory {\n+\n     @Override\n-    public String getName() {\n-      return NAME;\n+    public int getOrder() {\n+      return 0;\n     }\n \n     @Override\n-    public TransformAction create(String definition, List<String> args,\n-        Map<String, String> options) {\n-      Preconditions.checkArgument(args.size() == 1,\n-          ExceptionMessage.TRANSFORM_WRITE_ACTION_INVALID_ARGS.toString());\n-      String type = args.get(0);\n-      int numFiles = options.containsKey(NUM_FILES_OPTION)\n-          ? Integer.parseInt(options.get(NUM_FILES_OPTION))\n-          : DEFAULT_NUM_FILES;\n-      long fileSize = options.containsKey(FILE_SIZE_OPTION)\n-          ? Long.parseLong(options.get(FILE_SIZE_OPTION))\n-          : DEFAULT_FILE_SIZE;\n-      Preconditions.checkArgument(numFiles >= 0,\n-          ExceptionMessage.TRANSFORM_WRITE_ACTION_INVALID_NUM_FILES);\n-      return new WriteAction(type, numFiles, fileSize);\n+    public TransformAction create(Properties properties) {\n+      final String numFilesString = properties.getProperty(NUM_FILES_OPTION);\n+\n+      final String fileSizeString = properties.getProperty(FILE_SIZE_OPTION);\n+\n+      if (StringUtils.isEmpty(numFilesString) && StringUtils.isEmpty(fileSizeString)) {\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE1NTY1NA=="}, "originalCommit": {"oid": "20afb96836623c70554766778150420945230f2a"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTE5ODI5OnYy", "diffSide": "RIGHT", "path": "table/server/common/src/test/java/alluxio/table/common/transform/TransformDefinitionTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMTozNzowM1rOFzIN_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMTozNzowM1rOFzIN_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE1NjM1MA==", "bodyText": "Is there a test that tests for normalization of transformation definitions?", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r389156350", "createdAt": "2020-03-06T21:37:03Z", "author": {"login": "gpang"}, "path": "table/server/common/src/test/java/alluxio/table/common/transform/TransformDefinitionTest.java", "diffHunk": "@@ -24,44 +25,46 @@\n   @Test\n   public void parse() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20afb96836623c70554766778150420945230f2a"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTU0ODQ2OnYy", "diffSide": "RIGHT", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjowMDozM1rOF0VsFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjowMDozM1rOF0VsFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyNTYyMg==", "bodyText": "can you add to the javadoc on what a null return value is supposed to represent?", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r390425622", "createdAt": "2020-03-10T16:00:33Z", "author": {"login": "gpang"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/TransformActionFactory.java", "diffHunk": "@@ -11,24 +11,28 @@\n \n package alluxio.table.common.transform.action;\n \n-import java.util.List;\n-import java.util.Map;\n+import javax.annotation.Nullable;\n+import java.util.Properties;\n \n /**\n  * The action factory interface.\n  */\n public interface TransformActionFactory {\n \n   /**\n-   * @return the name of the action\n+   * Returns the order of the transform action. Transform actions with a lower number\n+   * will be executed before transform actions with a higher number.\n+   *\n+   * @return integer representing order number\n    */\n-  String getName();\n+  default int getOrder() {\n+    return 100;\n+  }\n \n   /**\n    * @param definition the raw definition of the action\n-   * @param args a list of string args\n-   * @param options a string-string map of options\n    * @return a new instance of an action\n    */\n-  TransformAction create(String definition, List<String> args, Map<String, String> options);\n+  @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "029bb90f5d9678d73d32522da82fa62ae8ed3994"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTU1NzUyOnYy", "diffSide": "RIGHT", "path": "table/server/common/src/test/resources/META-INF/services/alluxio.table.common.transform.action.TransformActionFactory", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjowMjoyMlrOF0Vxew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjowMjoyMlrOF0Vxew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyNzAwMw==", "bodyText": "please add a newline at the end of the file", "url": "https://github.com/Alluxio/alluxio/pull/11112#discussion_r390427003", "createdAt": "2020-03-10T16:02:22Z", "author": {"login": "gpang"}, "path": "table/server/common/src/test/resources/META-INF/services/alluxio.table.common.transform.action.TransformActionFactory", "diffHunk": "@@ -0,0 +1,2 @@\n+alluxio.table.common.transform.action.EarlyActionFactory\n+alluxio.table.common.transform.action.LateActionFactory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "029bb90f5d9678d73d32522da82fa62ae8ed3994"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1901, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}