{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMTE2MDk5", "number": 10845, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOTozMzowMlrODe7wzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMTowODoxOFrODfBFhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzYzMDIzOnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/AlluxioFileInStream.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOTozMzowMlrOFoWShQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMDo0NzozMFrOFoYgAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg1MjU0OQ==", "bodyText": "Does this option only apply to positioned reads or also reads through the read API?", "url": "https://github.com/Alluxio/alluxio/pull/10845#discussion_r377852549", "createdAt": "2020-02-11T19:33:02Z", "author": {"login": "calvinjia"}, "path": "core/client/fs/src/main/java/alluxio/client/file/AlluxioFileInStream.java", "diffHunk": "@@ -233,6 +234,11 @@ private int positionedReadInternal(long pos, byte[] b, int off, int len) throws\n       return -1;\n     }\n \n+    LOG.info(\"AMDEBUG pread len {} \", len);\n+    if (len < 2 * Constants.MB) {\n+      LOG.info(\"AMDEBUG set for pread len {} \", len);\n+      mOptions.setPositionShort(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e0c0a232226a5aaaf65ed1a6bc1eb6afce0e172"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg4ODc2OQ==", "bodyText": "only applies to pread. reads through the read API always are assumed to be sequential by this heuristic", "url": "https://github.com/Alluxio/alluxio/pull/10845#discussion_r377888769", "createdAt": "2020-02-11T20:47:30Z", "author": {"login": "madanadit"}, "path": "core/client/fs/src/main/java/alluxio/client/file/AlluxioFileInStream.java", "diffHunk": "@@ -233,6 +234,11 @@ private int positionedReadInternal(long pos, byte[] b, int off, int len) throws\n       return -1;\n     }\n \n+    LOG.info(\"AMDEBUG pread len {} \", len);\n+    if (len < 2 * Constants.MB) {\n+      LOG.info(\"AMDEBUG set for pread len {} \", len);\n+      mOptions.setPositionShort(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg1MjU0OQ=="}, "originalCommit": {"oid": "0e0c0a232226a5aaaf65ed1a6bc1eb6afce0e172"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzYzMzg0OnYy", "diffSide": "RIGHT", "path": "core/client/fs/src/main/java/alluxio/client/file/AlluxioFileInStream.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOTozNDoxMlrOFoWUxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMDo0ODoyNlrOFoYiCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg1MzEyNg==", "bodyText": "I think it is good to have our heuristic to cover the typical case, but should we check if it has been set to allow the user to override?", "url": "https://github.com/Alluxio/alluxio/pull/10845#discussion_r377853126", "createdAt": "2020-02-11T19:34:12Z", "author": {"login": "calvinjia"}, "path": "core/client/fs/src/main/java/alluxio/client/file/AlluxioFileInStream.java", "diffHunk": "@@ -233,6 +234,11 @@ private int positionedReadInternal(long pos, byte[] b, int off, int len) throws\n       return -1;\n     }\n \n+    LOG.info(\"AMDEBUG pread len {} \", len);\n+    if (len < 2 * Constants.MB) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e0c0a232226a5aaaf65ed1a6bc1eb6afce0e172"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg4OTI4OQ==", "bodyText": "yep, i'll make this a client config which can be overridden by the user", "url": "https://github.com/Alluxio/alluxio/pull/10845#discussion_r377889289", "createdAt": "2020-02-11T20:48:26Z", "author": {"login": "madanadit"}, "path": "core/client/fs/src/main/java/alluxio/client/file/AlluxioFileInStream.java", "diffHunk": "@@ -233,6 +234,11 @@ private int positionedReadInternal(long pos, byte[] b, int off, int len) throws\n       return -1;\n     }\n \n+    LOG.info(\"AMDEBUG pread len {} \", len);\n+    if (len < 2 * Constants.MB) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg1MzEyNg=="}, "originalCommit": {"oid": "0e0c0a232226a5aaaf65ed1a6bc1eb6afce0e172"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzY0MzEzOnYy", "diffSide": "RIGHT", "path": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOTozNzoxM1rOFoWauw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMDo1Nzo0MlrOFoYzxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg1NDY1MQ==", "bodyText": "Do we end up caching this stream anywhere, if so would it be a problem if it is a certain type?", "url": "https://github.com/Alluxio/alluxio/pull/10845#discussion_r377854651", "createdAt": "2020-02-11T19:37:13Z", "author": {"login": "calvinjia"}, "path": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java", "diffHunk": "@@ -563,10 +563,21 @@ public InputStream open(String path, OpenOptions options) throws IOException {\n     while (retryPolicy.attempt()) {\n       try {\n         FSDataInputStream inputStream = hdfs.open(new Path(path));\n-        // pread API instead of seek is more efficient for FSDataInputStream.\n-        // A seek on FSDataInputStream uses a skip op which is implemented as read + discard\n-        // and hence ends up reading extra data from the datanode.\n-        return new HdfsPositionedUnderFileInputStream(inputStream, options.getOffset());\n+        if (options.getPositionShort()) {\n+          LOG.info(\"AMDEBUG: using pread\");\n+          // pread API instead of seek is more efficient for FSDataInputStream.\n+          // A seek on FSDataInputStream uses a skip op which is implemented as read + discard\n+          // and hence ends up reading extra data from the datanode.\n+          return new HdfsPositionedUnderFileInputStream(inputStream, options.getOffset());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e0c0a232226a5aaaf65ed1a6bc1eb6afce0e172"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg5MzgzMQ==", "bodyText": "I just grepped our codebase, doesn't look like we do, so we should be fine", "url": "https://github.com/Alluxio/alluxio/pull/10845#discussion_r377893831", "createdAt": "2020-02-11T20:57:42Z", "author": {"login": "madanadit"}, "path": "underfs/hdfs/src/main/java/alluxio/underfs/hdfs/HdfsUnderFileSystem.java", "diffHunk": "@@ -563,10 +563,21 @@ public InputStream open(String path, OpenOptions options) throws IOException {\n     while (retryPolicy.attempt()) {\n       try {\n         FSDataInputStream inputStream = hdfs.open(new Path(path));\n-        // pread API instead of seek is more efficient for FSDataInputStream.\n-        // A seek on FSDataInputStream uses a skip op which is implemented as read + discard\n-        // and hence ends up reading extra data from the datanode.\n-        return new HdfsPositionedUnderFileInputStream(inputStream, options.getOffset());\n+        if (options.getPositionShort()) {\n+          LOG.info(\"AMDEBUG: using pread\");\n+          // pread API instead of seek is more efficient for FSDataInputStream.\n+          // A seek on FSDataInputStream uses a skip op which is implemented as read + discard\n+          // and hence ends up reading extra data from the datanode.\n+          return new HdfsPositionedUnderFileInputStream(inputStream, options.getOffset());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg1NDY1MQ=="}, "originalCommit": {"oid": "0e0c0a232226a5aaaf65ed1a6bc1eb6afce0e172"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODUwMjQ0OnYy", "diffSide": "RIGHT", "path": "tests/src/test/java/alluxio/client/fs/FileInStreamIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMTowODoxOFrOFoetiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMTowODoxOFrOFoetiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MDUzNw==", "bodyText": "Is there a way to verify if the PRead path is utilized?", "url": "https://github.com/Alluxio/alluxio/pull/10845#discussion_r377990537", "createdAt": "2020-02-12T01:08:18Z", "author": {"login": "calvinjia"}, "path": "tests/src/test/java/alluxio/client/fs/FileInStreamIntegrationTest.java", "diffHunk": "@@ -435,6 +435,44 @@ public void positionedReadWithoutCaching() throws Exception {\n     }\n   }\n \n+  @Test\n+  @LocalAlluxioClusterResource.Config(\n+      confParams = {PropertyKey.Name.USER_FILE_SEQUENTIAL_PREAD_THRESHOLD, \"700KB\"})\n+  public void positionedReadWithLargeThreshold() throws Exception {\n+    List<CreateFilePOptions> optionSet = new ArrayList<>(2);\n+    optionSet.add(mWriteBoth);\n+    optionSet.add(mWriteUnderStore);\n+    for (CreateFilePOptions op : optionSet) {\n+      String filename = mTestPath + \"/file_\" + MIN_LEN + \"_\" + op.hashCode();\n+      AlluxioURI uri = new AlluxioURI(filename);\n+\n+      try (FileInStream is = mFileSystem.openFile(uri, FileSystemTestUtils.toOpenFileOptions(op))) {\n+        byte[] ret = new byte[DELTA - 1];\n+        Assert.assertEquals(DELTA - 1, is.positionedRead(MIN_LEN - DELTA + 1, ret, 0, DELTA));\n+        Assert.assertTrue(BufferUtils.equalIncreasingByteArray(MIN_LEN - DELTA + 1, DELTA - 1, ret));\n+      }\n+    }\n+  }\n+\n+  @Test\n+  @LocalAlluxioClusterResource.Config(\n+      confParams = {PropertyKey.Name.USER_FILE_SEQUENTIAL_PREAD_THRESHOLD, \"200KB\"})\n+  public void positionedReadWithSmallThreshold() throws Exception {\n+    List<CreateFilePOptions> optionSet = new ArrayList<>(2);\n+    optionSet.add(mWriteBoth);\n+    optionSet.add(mWriteUnderStore);\n+    for (CreateFilePOptions op : optionSet) {\n+      String filename = mTestPath + \"/file_\" + MIN_LEN + \"_\" + op.hashCode();\n+      AlluxioURI uri = new AlluxioURI(filename);\n+\n+      try (FileInStream is = mFileSystem.openFile(uri, FileSystemTestUtils.toOpenFileOptions(op))) {\n+        byte[] ret = new byte[DELTA - 1];\n+        Assert.assertEquals(DELTA - 1, is.positionedRead(MIN_LEN - DELTA + 1, ret, 0, DELTA));\n+        Assert.assertTrue(BufferUtils.equalIncreasingByteArray(MIN_LEN - DELTA + 1, DELTA - 1, ret));\n+      }\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c146c89c38bbf843416aa71a3cdb3dd8b43241"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2144, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}