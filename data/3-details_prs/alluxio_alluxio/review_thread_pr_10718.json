{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxMTE1NjQ3", "number": 10718, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMzo0ODo1NlrODXKHEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNjowNzozNlrODdvTow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjA5NDkwOnYy", "diffSide": "RIGHT", "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMzo0ODo1NlrOFcUj9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxODo1NDoxOFrOFcdDOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI0MTMzNA==", "bodyText": "I feel like the file size should also be a config parameter.", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r365241334", "createdAt": "2020-01-10T13:48:56Z", "author": {"login": "gpang"}, "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -78,13 +96,19 @@ private boolean shouldIgnore(URIStatus status) {\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n+    long sum = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n+        sum += status.getLength();\n       }\n     }\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int groupSize = Math.max(1, (files.size() + 1) / config.getNumFiles());\n+    int numOfFiles = config.getNumFiles();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "136794df1f17e7da23d323adf666a84fc0bc6688"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM2MjUyNQ==", "bodyText": "I am not sure which file size you are referring to here? the file size can not be determined until we read the result of listStatus right? that's why it can not be a config parameter?", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r365362525", "createdAt": "2020-01-10T18:10:43Z", "author": {"login": "yuzhu"}, "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -78,13 +96,19 @@ private boolean shouldIgnore(URIStatus status) {\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n+    long sum = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n+        sum += status.getLength();\n       }\n     }\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int groupSize = Math.max(1, (files.size() + 1) / config.getNumFiles());\n+    int numOfFiles = config.getNumFiles();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI0MTMzNA=="}, "originalCommit": {"oid": "136794df1f17e7da23d323adf666a84fc0bc6688"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM4MDQxMQ==", "bodyText": "What I meant was, when we do something like averageSize < FileUtils.ONE_GB, we should use the file size as a config parameter.", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r365380411", "createdAt": "2020-01-10T18:54:18Z", "author": {"login": "gpang"}, "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -78,13 +96,19 @@ private boolean shouldIgnore(URIStatus status) {\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n+    long sum = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n+        sum += status.getLength();\n       }\n     }\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int groupSize = Math.max(1, (files.size() + 1) / config.getNumFiles());\n+    int numOfFiles = config.getNumFiles();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI0MTMzNA=="}, "originalCommit": {"oid": "136794df1f17e7da23d323adf666a84fc0bc6688"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDY5ODk2OnYy", "diffSide": "RIGHT", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNTo1MTo1MFrOFeeOdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNTo1MTo1MFrOFeeOdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ5NjgyMA==", "bodyText": "Rename this to hive.file.size, since this is relevant to the hive write type.", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r367496820", "createdAt": "2020-01-16T15:51:50Z", "author": {"login": "gpang"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java", "diffHunk": "@@ -27,6 +28,8 @@\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n   private static final String NUM_FILES_OPTION = \"hive.num.files\";\n+  private static final String FILE_SIZE = \"file.size\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f388a5363ff8484047468bd698abdd380721662c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDcxODQwOnYy", "diffSide": "RIGHT", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNTo1NjoxNVrOFeeaDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNTo1NjoxNVrOFeeaDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ5OTc5MQ==", "bodyText": "In the future, we should convert this to a map of parameters.", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r367499791", "createdAt": "2020-01-16T15:56:15Z", "author": {"login": "gpang"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java", "diffHunk": "@@ -73,6 +84,6 @@ public JobConfig generateJobConfig(Layout base, Layout transformed) {\n         TransformActionUtils.generatePartitionInfo(base);\n     return new CompactConfig(basePartitionInfo, base.getLocation().toString(),\n         transformed.getLocation().toString(),\n-        mLayoutType, mNumFiles);\n+        mLayoutType, mNumFiles, mFileSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f388a5363ff8484047468bd698abdd380721662c"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDc5ODYwOnYy", "diffSide": "RIGHT", "path": "table/server/master/src/test/java/alluxio/master/table/transform/TransformManagerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjoxNzowNVrOFefMJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjoxNzowNVrOFefMJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUxMjYxMg==", "bodyText": "Maybe rename to \"EMPTY_DEFINITION\"?", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r367512612", "createdAt": "2020-01-16T16:17:05Z", "author": {"login": "gpang"}, "path": "table/server/master/src/test/java/alluxio/master/table/transform/TransformManagerTest.java", "diffHunk": "@@ -81,6 +81,7 @@\n   private static final String TABLE1 = TestDatabase.getTableName(0);\n   private static final String TABLE2 = TestDatabase.getTableName(1);\n   private static final String TABLE3 = TestDatabase.getTableName(2);\n+  private static final String DEFINITION_DEFAULT = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f388a5363ff8484047468bd698abdd380721662c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDgwMjk1OnYy", "diffSide": "RIGHT", "path": "table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjoxODoyMVrOFefPGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjoxODoyMVrOFefPGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUxMzM2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void DynamicNumFiles() {\n          \n          \n            \n              public void dynamicNumFiles() {", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r367513369", "createdAt": "2020-01-16T16:18:21Z", "author": {"login": "gpang"}, "path": "table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java", "diffHunk": "@@ -51,10 +51,23 @@ public void negativeNumFiles() {\n   }\n \n   @Test\n-  public void zeroNumFiles() {\n-    mException.expect(IllegalArgumentException.class);\n-    mException.expectMessage(ExceptionMessage.TRANSFORM_WRITE_ACTION_INVALID_NUM_FILES.toString());\n-    TransformAction.Parser.parse(\"write(hive).option(hive.num.files, 0)\");\n+  public void DynamicNumFiles() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f388a5363ff8484047468bd698abdd380721662c"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDgxOTU0OnYy", "diffSide": "RIGHT", "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjoyMjozMFrOFefZEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjoyMjozMFrOFefZEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUxNTkyMA==", "bodyText": "rename to totalFileSize?", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r367515920", "createdAt": "2020-01-16T16:22:30Z", "author": {"login": "gpang"}, "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -78,13 +95,19 @@ private boolean shouldIgnore(URIStatus status) {\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n+    long sum = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f388a5363ff8484047468bd698abdd380721662c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDgyNjc0OnYy", "diffSide": "RIGHT", "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjoyNDoyNVrOFefdlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjoyNDoyNVrOFefdlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUxNzA3OA==", "bodyText": "How will this constant group size work when the input file sizes are different? Shouldn't the file size configuration be enforced by considering each input file size?", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r367517078", "createdAt": "2020-01-16T16:24:25Z", "author": {"login": "gpang"}, "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -78,13 +95,19 @@ private boolean shouldIgnore(URIStatus status) {\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n+    long sum = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n+        sum += status.getLength();\n       }\n     }\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int groupSize = Math.max(1, (files.size() + 1) / config.getNumFiles());\n+    int numOfFiles = config.getNumFiles();\n+    if (numOfFiles == CompactConfig.DYNAMIC_NUM_OF_FILES) {\n+      numOfFiles = calcNumOfFiles(files.size(), sum / files.size(), config.getFileSize());\n+    }\n+    int groupSize = Math.max(1, (files.size() + 1) / numOfFiles);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f388a5363ff8484047468bd698abdd380721662c"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDgyODk1OnYy", "diffSide": "RIGHT", "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjoyNTowMFrOFeffAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjoyNTowMFrOFeffAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUxNzQ0Mg==", "bodyText": "rename to numFiles", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r367517442", "createdAt": "2020-01-16T16:25:00Z", "author": {"login": "gpang"}, "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -78,13 +95,19 @@ private boolean shouldIgnore(URIStatus status) {\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n+    long sum = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n+        sum += status.getLength();\n       }\n     }\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int groupSize = Math.max(1, (files.size() + 1) / config.getNumFiles());\n+    int numOfFiles = config.getNumFiles();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f388a5363ff8484047468bd698abdd380721662c"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTI4MTQ5OnYy", "diffSide": "RIGHT", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToyMjowOFrOFlpENA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToyMjowOFrOFlpENA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNDQ1Mg==", "bodyText": "should these be renamed to reflect \"num files max\", and \"file size min\"?", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375014452", "createdAt": "2020-02-05T01:22:08Z", "author": {"login": "gpang"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java", "diffHunk": "@@ -27,6 +28,8 @@\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n   private static final String NUM_FILES_OPTION = \"hive.num.files\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9096f1726980e9df0676deed30c403941e53ffa0"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTI4MTY0OnYy", "diffSide": "RIGHT", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToyMjoxOFrOFlpEUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToyMjoxOFrOFlpEUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNDQ4MQ==", "bodyText": "This should be 2g?", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375014481", "createdAt": "2020-02-05T01:22:18Z", "author": {"login": "gpang"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java", "diffHunk": "@@ -27,6 +28,8 @@\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n   private static final String NUM_FILES_OPTION = \"hive.num.files\";\n+  private static final String FILE_SIZE = \"hive.file.size\";\n+  private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9096f1726980e9df0676deed30c403941e53ffa0"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTI4MzA2OnYy", "diffSide": "RIGHT", "path": "table/server/master/src/main/java/alluxio/master/table/DefaultTableMaster.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToyMzowN1rOFlpFKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToyMzowN1rOFlpFKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNDY5Ng==", "bodyText": "should the default be setting max files to 100 and min file size to 2g?", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375014696", "createdAt": "2020-02-05T01:23:07Z", "author": {"login": "gpang"}, "path": "table/server/master/src/main/java/alluxio/master/table/DefaultTableMaster.java", "diffHunk": "@@ -54,7 +54,7 @@\n     implements TableMaster, DelegatingJournaled {\n   private static final Logger LOG = LoggerFactory.getLogger(DefaultTableMaster.class);\n   private static final Set<Class<? extends Server>> DEPS = ImmutableSet.of(FileSystemMaster.class);\n-  private static final String DEFAULT_TRANSFORMATION = \"write(hive).option(hive.num.files, 100);\";\n+  public static final String DEFAULT_TRANSFORMATION = \"write(hive).option(hive.num.files, 0)\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9096f1726980e9df0676deed30c403941e53ffa0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTI4NTI5OnYy", "diffSide": "RIGHT", "path": "job/server/src/test/java/alluxio/job/plan/transform/CompactDefinitionSelectExecutorsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToyNDoyN1rOFlpGkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToyNDoyN1rOFlpGkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNTA1OA==", "bodyText": "I think static final variable names have to be all caps?", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375015058", "createdAt": "2020-02-05T01:24:27Z", "author": {"login": "gpang"}, "path": "job/server/src/test/java/alluxio/job/plan/transform/CompactDefinitionSelectExecutorsTest.java", "diffHunk": "@@ -22,17 +22,23 @@\n import alluxio.job.plan.SelectExecutorsTest;\n import alluxio.wire.WorkerInfo;\n \n+import org.apache.commons.io.FileUtils;\n import org.junit.Test;\n import org.mockito.Mockito;\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.PrimitiveIterator;\n+import java.util.Random;\n import java.util.Set;\n+import java.util.stream.LongStream;\n \n public class CompactDefinitionSelectExecutorsTest extends SelectExecutorsTest {\n \n   private static final String INPUT_DIR = \"/input\";\n   private static final String OUTPUT_DIR = \"/output\";\n+  private static final PrimitiveIterator.OfLong sLongStream = (new Random()).longs(FileUtils.ONE_GB * 2, FileUtils.ONE_GB * 10).iterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9096f1726980e9df0676deed30c403941e53ffa0"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTI4OTExOnYy", "diffSide": "RIGHT", "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToyNjo0NFrOFlpI3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToyNjo0NFrOFlpI3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNTY0NA==", "bodyText": "NIT:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (totalFileSize / config.getMinFileSize() >= maxNumFiles) {\n          \n          \n            \n                if (totalFileSize / groupMinSize > maxNumFiles) {", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375015644", "createdAt": "2020-02-05T01:26:44Z", "author": {"login": "gpang"}, "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -80,24 +80,43 @@ private boolean shouldIgnore(URIStatus status) {\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n+    // use double to prevent overflow\n+    double totalFileSize = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n+        totalFileSize += status.getLength();\n       }\n     }\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int groupSize = Math.max(1, (files.size() + 1) / config.getNumFiles());\n+    int maxNumFiles = config.getMaxNumFiles();\n+    long groupMinSize = config.getMinFileSize();\n+    if (totalFileSize / config.getMinFileSize() >= maxNumFiles) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9096f1726980e9df0676deed30c403941e53ffa0"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTI5MzY5OnYy", "diffSide": "RIGHT", "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToyOTozOVrOFlpLlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToyOTozOVrOFlpLlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNjM0Mw==", "bodyText": "can we pre-compute groupMinSize / 2 earlier?", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375016343", "createdAt": "2020-02-05T01:29:39Z", "author": {"login": "gpang"}, "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -80,24 +80,43 @@ private boolean shouldIgnore(URIStatus status) {\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n+    // use double to prevent overflow\n+    double totalFileSize = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n+        totalFileSize += status.getLength();\n       }\n     }\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int groupSize = Math.max(1, (files.size() + 1) / config.getNumFiles());\n+    int maxNumFiles = config.getMaxNumFiles();\n+    long groupMinSize = config.getMinFileSize();\n+    if (totalFileSize / config.getMinFileSize() >= maxNumFiles) {\n+      groupMinSize = Math.round(totalFileSize / maxNumFiles);\n+    }\n     // Files to be compacted are grouped into different groups,\n     // each group of files are compacted to one file,\n     // one task is to compact one group of files,\n     // different tasks are assigned to different workers in a round robin way.\n-    ArrayList<String> group = new ArrayList<>(groupSize);\n+    // We keep adding files to the group, until adding more files makes it too big.\n+    ArrayList<String> group = new ArrayList<>();\n     int workerIndex = 0;\n     int outputIndex = 0;\n-    for (int i = 0; i < files.size(); i++) {\n-      URIStatus file = files.get(i);\n-      group.add(inputDir.join(file.getName()).toString());\n-      if (group.size() == groupSize || i == files.size() - 1) {\n+    // Number of groups already generated\n+    int groupIndex = 0;\n+    long currentGroupSize = 0;\n+    for (URIStatus file : files) {\n+      // add the file to the group if\n+      // 1. group is empty\n+      // 2. group is the last group\n+      // 3. group size with the new file is closer to the groupMinSize than group size without it\n+      if (group.isEmpty() || groupIndex == maxNumFiles - 1\n+          || (currentGroupSize + file.getLength()) <= groupMinSize / 2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9096f1726980e9df0676deed30c403941e53ffa0"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTQwNTkxOnYy", "diffSide": "RIGHT", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjo0Mzo0MVrOFlqQHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjo0Mzo0MVrOFlqQHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMzg4Nw==", "bodyText": "I think our convention has been something like:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final String NUM_FILES_OPTION = \"hive.file.maxcount\";\n          \n          \n            \n              private static final String NUM_FILES_OPTION = \"hive.file.count.max\";", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375033887", "createdAt": "2020-02-05T02:43:41Z", "author": {"login": "gpang"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java", "diffHunk": "@@ -26,8 +27,10 @@\n  */\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n-  private static final String NUM_FILES_OPTION = \"hive.num.files\";\n-  private static final int DEFAULT_NUM_FILES = 1;\n+  private static final String NUM_FILES_OPTION = \"hive.file.maxcount\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da0b50b697b9f477ec6335808eff1c97d047827f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTQwNjQ3OnYy", "diffSide": "RIGHT", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjo0NDowNVrOFlqQdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjo0NDowNVrOFlqQdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMzk3NA==", "bodyText": "I think our convention is like:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final String FILE_SIZE_OPTION = \"hive.file.minsize\";\n          \n          \n            \n              private static final String FILE_SIZE_OPTION = \"hive.file.size.min\";", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375033974", "createdAt": "2020-02-05T02:44:05Z", "author": {"login": "gpang"}, "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java", "diffHunk": "@@ -26,8 +27,10 @@\n  */\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n-  private static final String NUM_FILES_OPTION = \"hive.num.files\";\n-  private static final int DEFAULT_NUM_FILES = 1;\n+  private static final String NUM_FILES_OPTION = \"hive.file.maxcount\";\n+  private static final String FILE_SIZE_OPTION = \"hive.file.minsize\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da0b50b697b9f477ec6335808eff1c97d047827f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTQxMDY4OnYy", "diffSide": "RIGHT", "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjo0NzowNFrOFlqS9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMjo0NzowNFrOFlqS9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzNDYxMw==", "bodyText": "I have another higher level question. If there is a file conversion happening, for example, csv to parquet, there will most likely be a reduction in file sizes. This computes the INPUT file sizes, but ideally we should be computing the desired OUTPUT file sizes. Is there a simple way we can perform a heuristic for when we are converting input file types to different output types?", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375034613", "createdAt": "2020-02-05T02:47:04Z", "author": {"login": "gpang"}, "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -80,24 +80,44 @@ private boolean shouldIgnore(URIStatus status) {\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n+    // use double to prevent overflow\n+    double totalFileSize = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n+        totalFileSize += status.getLength();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da0b50b697b9f477ec6335808eff1c97d047827f"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTEwMzcxOnYy", "diffSide": "RIGHT", "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNjowNzozNlrOFmg1cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODowNTo0NVrOFmk8YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkyODE3Ng==", "bodyText": "what happens if the format is unknown? Maybe for unknown formats, it should just default to 1.0 or 1.5 or something.", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375928176", "createdAt": "2020-02-06T16:07:36Z", "author": {"login": "gpang"}, "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -80,24 +86,52 @@ private boolean shouldIgnore(URIStatus status) {\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n+    // use double to prevent overflow\n+    double totalFileSize = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n+        totalFileSize += status.getLength();\n       }\n     }\n+\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int groupSize = Math.max(1, (files.size() + 1) / config.getNumFiles());\n+    int maxNumFiles = config.getMaxNumFiles();\n+    long groupMinSize = config.getMinFileSize();\n+    if (totalFileSize / groupMinSize > maxNumFiles) {\n+      groupMinSize = Math.round(totalFileSize / maxNumFiles);\n+    }\n+\n+    if (!files.isEmpty() && config.getPartitionInfo() != null) {\n+      // adjust the group minimum size for source compression ratio\n+      groupMinSize *= COMPRESSION_RATIO.get(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f61727d0b3c03e73be50d8473bc9cf91064b015c"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk0MTkwMg==", "bodyText": "if the format is unknown, we have bigger problems.. we wouldn't even be able to read the file, right?", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375941902", "createdAt": "2020-02-06T16:28:53Z", "author": {"login": "yuzhu"}, "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -80,24 +86,52 @@ private boolean shouldIgnore(URIStatus status) {\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n+    // use double to prevent overflow\n+    double totalFileSize = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n+        totalFileSize += status.getLength();\n       }\n     }\n+\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int groupSize = Math.max(1, (files.size() + 1) / config.getNumFiles());\n+    int maxNumFiles = config.getMaxNumFiles();\n+    long groupMinSize = config.getMinFileSize();\n+    if (totalFileSize / groupMinSize > maxNumFiles) {\n+      groupMinSize = Math.round(totalFileSize / maxNumFiles);\n+    }\n+\n+    if (!files.isEmpty() && config.getPartitionInfo() != null) {\n+      // adjust the group minimum size for source compression ratio\n+      groupMinSize *= COMPRESSION_RATIO.get(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkyODE3Ng=="}, "originalCommit": {"oid": "f61727d0b3c03e73be50d8473bc9cf91064b015c"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk0MjI3NA==", "bodyText": "in fact if the format is unknown, we throw an exception right now. which seems like the right thing to do", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375942274", "createdAt": "2020-02-06T16:29:33Z", "author": {"login": "yuzhu"}, "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -80,24 +86,52 @@ private boolean shouldIgnore(URIStatus status) {\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n+    // use double to prevent overflow\n+    double totalFileSize = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n+        totalFileSize += status.getLength();\n       }\n     }\n+\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int groupSize = Math.max(1, (files.size() + 1) / config.getNumFiles());\n+    int maxNumFiles = config.getMaxNumFiles();\n+    long groupMinSize = config.getMinFileSize();\n+    if (totalFileSize / groupMinSize > maxNumFiles) {\n+      groupMinSize = Math.round(totalFileSize / maxNumFiles);\n+    }\n+\n+    if (!files.isEmpty() && config.getPartitionInfo() != null) {\n+      // adjust the group minimum size for source compression ratio\n+      groupMinSize *= COMPRESSION_RATIO.get(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkyODE3Ng=="}, "originalCommit": {"oid": "f61727d0b3c03e73be50d8473bc9cf91064b015c"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk5NTQ4OQ==", "bodyText": "I see. Does the getFormat already handle the cases where the files don't have nice file extensions?", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375995489", "createdAt": "2020-02-06T18:05:45Z", "author": {"login": "gpang"}, "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -80,24 +86,52 @@ private boolean shouldIgnore(URIStatus status) {\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n+    // use double to prevent overflow\n+    double totalFileSize = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n+        totalFileSize += status.getLength();\n       }\n     }\n+\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int groupSize = Math.max(1, (files.size() + 1) / config.getNumFiles());\n+    int maxNumFiles = config.getMaxNumFiles();\n+    long groupMinSize = config.getMinFileSize();\n+    if (totalFileSize / groupMinSize > maxNumFiles) {\n+      groupMinSize = Math.round(totalFileSize / maxNumFiles);\n+    }\n+\n+    if (!files.isEmpty() && config.getPartitionInfo() != null) {\n+      // adjust the group minimum size for source compression ratio\n+      groupMinSize *= COMPRESSION_RATIO.get(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkyODE3Ng=="}, "originalCommit": {"oid": "f61727d0b3c03e73be50d8473bc9cf91064b015c"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2209, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}